{"pr_number": 25551, "pr_title": "Add 'const' support for specifying array length", "pr_createdAt": "2020-09-01T19:48:43Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551", "timeline": [{"oid": "6ec7fd2abeb747a3ace69cad45eb8da54a87ed8c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6ec7fd2abeb747a3ace69cad45eb8da54a87ed8c", "message": "Add diagnostic codes for errors.", "committedDate": "2020-09-01T18:21:42Z", "type": "commit"}, {"oid": "2dce3daf4f9ea553ef657f0f5f6b773c9d9bed31", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dce3daf4f9ea553ef657f0f5f6b773c9d9bed31", "message": "Change int array in BLangArrayType to BLangExpression array.", "committedDate": "2020-09-01T18:31:43Z", "type": "commit"}, {"oid": "8eb2058d7d9eba6cbc88e640a9b70999eb3d1ed1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8eb2058d7d9eba6cbc88e640a9b70999eb3d1ed1", "message": "Update BLangNodeTransformer to preserve const expression.", "committedDate": "2020-09-01T18:58:39Z", "type": "commit"}, {"oid": "4fa3e700a348f43785763ce40e6b566bab8e5789", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4fa3e700a348f43785763ce40e6b566bab8e5789", "message": "Update SymbolResolver to resolve const expression.", "committedDate": "2020-09-01T19:35:55Z", "type": "commit"}, {"oid": "86f189e70d04eb008c4524fc5758f40f2e50a7a8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/86f189e70d04eb008c4524fc5758f40f2e50a7a8", "message": "Add error messages in compiler properties.", "committedDate": "2020-09-01T19:41:14Z", "type": "commit"}, {"oid": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "message": "Fix CheckStyles issues.", "committedDate": "2020-09-01T20:29:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY5MTczNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481691736", "bodyText": "Shall we remove this extra line?", "author": "MaryamZi", "createdAt": "2020-09-02T04:56:39Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java", "diffHunk": "@@ -17,6 +17,9 @@\n */\n package org.ballerinalang.model.tree.types;\n \n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+\n+", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTY5ODQ5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481698491", "bodyText": "Can't we remove the stream and just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    arrayTypeNode.sizes = sizes.stream().toArray(BLangExpression[]::new);\n          \n          \n            \n                    arrayTypeNode.sizes = sizes.toArray(new BLangExpression[0]);\n          \n      \n    \n    \n  \n\nWe try to avoid streams due to performance impacts.", "author": "MaryamZi", "createdAt": "2020-09-02T05:03:23Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -3071,7 +3071,7 @@ public BLangNode transform(ArrayTypeDescriptorNode arrayTypeDescriptorNode) {\n         arrayTypeNode.pos = position;\n         arrayTypeNode.elemtype = createTypeNode(arrayTypeDescriptorNode.memberTypeDesc());\n         arrayTypeNode.dimensions = dimensions;\n-        arrayTypeNode.sizes = sizes.stream().mapToInt(val -> val).toArray();\n+        arrayTypeNode.sizes = sizes.stream().toArray(BLangExpression[]::new);", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcwMTgxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481701819", "bodyText": "Extra line.", "author": "MaryamZi", "createdAt": "2020-09-02T05:06:43Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -116,10 +117,11 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-import static java.lang.String.format;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.UNSEALED_ARRAY_INDICATOR;\n+import static java.lang.String.format;\n+", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcyMDc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481720798", "bodyText": "This logic is repeated for the valid scenarios, right? I think we can avoid repeating this by returning if there is an error, and then moving this out of the if-else blocks as it was originally.", "author": "MaryamZi", "createdAt": "2020-09-02T05:26:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMDMxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481730310", "bodyText": "Shall we check by node kind instead of using the instanceof check?\nI believe in this case we'll have to check for NUMERIC_LITERAL.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (size instanceof BLangLiteral) {\n          \n          \n            \n                            if (size.getKind() == NodeKind.NUMERIC_LITERAL) {", "author": "MaryamZi", "createdAt": "2020-09-02T05:36:18Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5OTM3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482599373", "bodyText": "Is there a specific reason for this? Because if I don't specifically check for the BLangLiteral type in the if statement, my current logic won't stand as the else block assumes that it is receiving BLangLiteral Type.", "author": "suleka96", "createdAt": "2020-09-02T23:32:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMDMxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4Njk5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482686991", "bodyText": "BLangLiteral represents simple literals in Ballerina while BLangNumericLiteral which extends BLangLiteral  represents the numeric literals.\nThe NodeKind for BLangLiteral is LITERAL and for BLangNumericLiteral is NUMERIC_LITERAL.\nSo if size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL evaluates to true, you can assume this to be a BLangLiteral within the if block and cast it accordingly.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (size instanceof BLangLiteral) {\n          \n          \n            \n                            NodeKind nodeKind = size.getKind();\n          \n          \n            \n                            if (nodeKind == NodeKind.LITERAL || nodeKind == NodeKind.NUMERIC_LITERAL) {\n          \n      \n    \n    \n  \n\nThis would do a simple equality check for an enum.", "author": "MaryamZi", "createdAt": "2020-09-03T03:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMDMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczMjQ2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481732462", "bodyText": "Shall we extract (Integer) (((BLangLiteral) size).getValue() out to a variable since we seem to be using it multiple times.\nWill also improve readability, IMO.", "author": "MaryamZi", "createdAt": "2020-09-02T05:38:34Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481737753", "bodyText": "We can check == here. With the early returns on error as suggested previously, by swapping the conditions we can remove the else blocks.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n          \n          \n            \n                                if (symTable.notFoundSymbol == sizeSymbol) {\n          \n          \n            \n                                    // log error, set resultType and return\n          \n          \n            \n                                }\n          \n          \n            \n                                \n          \n          \n            \n                                if (sizeSymbol.tag != SymTag.CONSTANT) {\n          \n          \n            \n                                    // log error, set resultType and return\n          \n          \n            \n                                }\n          \n          \n            \n                                \n          \n          \n            \n                                BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n          \n          \n            \n                                if (lengthLiteralType.tag != TypeTags.INT) {\n          \n          \n            \n                                    // log error, set resultType and return\n          \n          \n            \n                                }\n          \n          \n            \n                                \n          \n          \n            \n                                // actual length logic", "author": "MaryamZi", "createdAt": "2020-09-02T05:43:44Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n+                            new BArrayType(resultType, arrayTypeSymbol,\n+                                    (Integer) (((BLangLiteral) size).getValue()),\n+                                    BArrayState.UNSEALED) :\n+                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.OPEN_SEALED) :\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.CLOSED_SEALED);\n+                    arrayTypeSymbol.type = arrType;\n+                    markParameterizedType(arrType, arrType.eType);\n+                    resultType = arrayTypeSymbol.type;\n \n-            markParameterizedType(arrType, arrType.eType);\n+                } else {\n+                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n+                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1MzUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482353508", "bodyText": "The visit(BLangArrayType arrayTypeNode) function does not return anything, so every if will get evaluated if I do it this way. So won't having the else block be a better approach?", "author": "suleka96", "createdAt": "2020-09-02T19:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4Nzk1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482687954", "bodyText": "You can just do return;.", "author": "MaryamZi", "createdAt": "2020-09-03T03:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4OTk2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482689969", "bodyText": "Or in this case, because it is within a for loop, and we may want to analyze the rest of the dimensions even if one results in an error, we can do a continue; maybe. I guess we'll have to maintain if at least one dimension was erroneous to set the final resultant type.", "author": "MaryamZi", "createdAt": "2020-09-03T04:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczOTAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482739035", "bodyText": "So just to clarify, if we consider an array with 2 dimension. Say the 1st one didn't go through the happy path, so we log the error, update an error flag and continue. Then say if the 2nd dimension goes through the happy path, should the resultType  be set to an error type regardless or should the below code be executed for that loop?\narrayTypeSymbol.type = arrType;\nresultType = arrayTypeSymbol.type;\nmarkParameterizedType(arrType, arrType.eType);", "author": "suleka96", "createdAt": "2020-09-03T06:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczNzc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTczODQzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481738435", "bodyText": "Shall we extract (BLangSimpleVarRef) size also to a variable?", "author": "MaryamZi", "createdAt": "2020-09-02T05:44:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n+                            new BArrayType(resultType, arrayTypeSymbol,\n+                                    (Integer) (((BLangLiteral) size).getValue()),\n+                                    BArrayState.UNSEALED) :\n+                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.OPEN_SEALED) :\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.CLOSED_SEALED);\n+                    arrayTypeSymbol.type = arrType;\n+                    markParameterizedType(arrType, arrType.eType);\n+                    resultType = arrayTypeSymbol.type;\n \n-            markParameterizedType(arrType, arrType.eType);\n+                } else {\n+                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc2ODA3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481768071", "bodyText": "I think we can reuse existing error messages for these errors. For example here we can say\nincompatible types: expected 'int', found 'T' where T is the actual type.", "author": "MaryamZi", "createdAt": "2020-09-02T06:13:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n+                            new BArrayType(resultType, arrayTypeSymbol,\n+                                    (Integer) (((BLangLiteral) size).getValue()),\n+                                    BArrayState.UNSEALED) :\n+                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.OPEN_SEALED) :\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.CLOSED_SEALED);\n+                    arrayTypeSymbol.type = arrType;\n+                    markParameterizedType(arrType, arrType.eType);\n+                    resultType = arrayTypeSymbol.type;\n \n-            markParameterizedType(arrType, arrType.eType);\n+                } else {\n+                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n+                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n+                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            if (lengthLiteralType.tag == TypeTags.INT) {\n+                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                                        (int) length,\n+                                        BArrayState.CLOSED_SEALED);\n+                                arrayTypeSymbol.type = arrType;\n+                                markParameterizedType(arrType, arrType.eType);\n+                                resultType = arrayTypeSymbol.type;\n+\n+                            } else {\n+                                dlog.error(arrayTypeNode.pos,\n+                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3Mzg2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481773862", "bodyText": "Here, IMO, we can use the undefined symbol error.\nundefined symbol 'x'", "author": "MaryamZi", "createdAt": "2020-09-02T06:18:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -905,17 +907,61 @@ public void visit(BLangArrayType arrayTypeNode) {\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n+                arrayTypeSymbol.type = arrType;\n+                markParameterizedType(arrType, arrType.eType);\n+                resultType = arrayTypeSymbol.type;\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size instanceof BLangLiteral) {\n+                    arrType = ((Integer) (((BLangLiteral) size).getValue()) == UNSEALED_ARRAY_INDICATOR) ?\n+                            new BArrayType(resultType, arrayTypeSymbol,\n+                                    (Integer) (((BLangLiteral) size).getValue()),\n+                                    BArrayState.UNSEALED) :\n+                            ((Integer) (((BLangLiteral) size).getValue()) == OPEN_SEALED_ARRAY_INDICATOR) ?\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.OPEN_SEALED) :\n+                                    new BArrayType(resultType, arrayTypeSymbol,\n+                                            (Integer) (((BLangLiteral) size).getValue()),\n+                                            BArrayState.CLOSED_SEALED);\n+                    arrayTypeSymbol.type = arrType;\n+                    markParameterizedType(arrType, arrType.eType);\n+                    resultType = arrayTypeSymbol.type;\n \n-            markParameterizedType(arrType, arrType.eType);\n+                } else {\n+                    Name pkgAlias = names.fromIdNode(((BLangSimpleVarRef) size).pkgAlias);\n+                    Name typeName = names.fromIdNode(((BLangSimpleVarRef) size).variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (!(symTable.notFoundSymbol.equals(sizeSymbol))) {\n+                        if (sizeSymbol.tag == SymTag.CONSTANT) {\n+                            BType lengthLiteralType = ((BConstantSymbol) sizeSymbol).literalType;\n+                            if (lengthLiteralType.tag == TypeTags.INT) {\n+                                long length = (long) ((BConstantSymbol) sizeSymbol).value.value;\n+                                arrType = new BArrayType(resultType, arrayTypeSymbol,\n+                                        (int) length,\n+                                        BArrayState.CLOSED_SEALED);\n+                                arrayTypeSymbol.type = arrType;\n+                                markParameterizedType(arrType, arrType.eType);\n+                                resultType = arrayTypeSymbol.type;\n+\n+                            } else {\n+                                dlog.error(arrayTypeNode.pos,\n+                                        DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE_TYPE,\n+                                        ((BConstantSymbol) sizeSymbol).literalType);\n+                                resultType = symTable.semanticError;\n+                            }\n+                        } else {\n+                            dlog.error(arrayTypeNode.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                            resultType = symTable.semanticError;\n+                        }\n+                    } else {\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.ARRAY_SIZE_REFERENCE_NOT_DEFINED, size);", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3NDExNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481774114", "bodyText": "Let's use node kind.", "author": "MaryamZi", "createdAt": "2020-09-02T06:19:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java", "diffHunk": "@@ -62,10 +65,14 @@ public String toString() {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size == -1) {\n-                    sb[0].append(\"[]\");\n+                if (size instanceof BLangLiteral) {", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc3NDcyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r481774722", "bodyText": "Let's extract (Integer) (((BLangLiteral) size).getValue() out to a variable.", "author": "MaryamZi", "createdAt": "2020-09-02T06:19:35Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java", "diffHunk": "@@ -62,10 +65,14 @@ public String toString() {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size == -1) {\n-                    sb[0].append(\"[]\");\n+                if (size instanceof BLangLiteral) {\n+                    if ((Integer) (((BLangLiteral) size).getValue()) == -1) {", "originalCommit": "7bd0f713b073134cbe5c8d3d3220eeb01eccfb53", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "db809ef9d96e73d43753b6bff9327f278ad213f9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db809ef9d96e73d43753b6bff9327f278ad213f9", "message": "Refactor all files.", "committedDate": "2020-09-02T22:53:10Z", "type": "commit"}, {"oid": "868f928ef7f45a099ad40f6f318edf2056883bcb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/868f928ef7f45a099ad40f6f318edf2056883bcb", "message": "Add back instance of instead of node type.", "committedDate": "2020-09-02T23:36:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY5MDgxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r482690817", "bodyText": "Let's make this more detailed.\nFor example, something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              invalid array size reference ''{0}''\n          \n          \n            \n              invalid reference expression ''{0}'' as array size: expected a constant reference expression", "author": "MaryamZi", "createdAt": "2020-09-03T04:06:41Z", "path": "compiler/ballerina-lang/src/main/resources/compiler.properties", "diffHunk": "@@ -1044,6 +1044,9 @@ error.mismatching.array.literal.values=\\\n error.index.out.of.range=\\\n   index out of range: index: ''{0}''\n \n+error.invalid.array.size.reference=\\\n+  invalid array size reference ''{0}''", "originalCommit": "868f928ef7f45a099ad40f6f318edf2056883bcb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f27adc652ca641f494db48aa4fb05ac2c58e0b4d", "message": "Fix CheckStyle issues and refactor array size logic.", "committedDate": "2020-09-03T07:13:42Z", "type": "commit"}, {"oid": "c93857f69d50f63d8b1903c0c0b5d0d5aec5f9c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c93857f69d50f63d8b1903c0c0b5d0d5aec5f9c6", "message": "Change import order of java.lang.String.format", "committedDate": "2020-09-03T07:26:35Z", "type": "commit"}, {"oid": "51ef246ac21ef24b9a163a04c4cc5c6461ef4e25", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/51ef246ac21ef24b9a163a04c4cc5c6461ef4e25", "message": "Add array size tests.", "committedDate": "2020-09-07T15:39:39Z", "type": "commit"}, {"oid": "bc547dfce6b54d93982db2985f417d468a311176", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc547dfce6b54d93982db2985f417d468a311176", "message": "Update const array size reference test in sealed array tests.", "committedDate": "2020-09-07T16:15:04Z", "type": "commit"}, {"oid": "3649abb055a0c64c0b6e9432fed9e5d1b1cb36a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3649abb055a0c64c0b6e9432fed9e5d1b1cb36a1", "message": "Fix bad sad error in constant size reference array in module scope.", "committedDate": "2020-09-08T05:30:36Z", "type": "commit"}, {"oid": "4539e93841ec3277611ceb4984f611eeb51cddb4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4539e93841ec3277611ceb4984f611eeb51cddb4", "message": "Fix CheckStyle issues.", "committedDate": "2020-09-08T06:04:50Z", "type": "commit"}, {"oid": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "message": "Remove unused imports.", "committedDate": "2020-09-08T06:35:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYyNDQ4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485624488", "bodyText": "Let's leave one new line after the imports.", "author": "MaryamZi", "createdAt": "2020-09-09T13:46:44Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/tree/types/ArrayTypeNode.java", "diffHunk": "@@ -17,6 +17,7 @@\n */\n package org.ballerinalang.model.tree.types;\n \n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYyNTM0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485625344", "bodyText": "One new line after the set of imports should be enough.", "author": "MaryamZi", "createdAt": "2020-09-09T13:47:49Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -58,9 +61,11 @@\n import java.util.regex.Pattern;\n \n import static org.wso2.ballerinalang.compiler.parser.BLangPackageBuilder.escapeQuotedIdentifier;\n+import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n+import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;\n import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY;\n-import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY_INDICATOR;\n-import static org.wso2.ballerinalang.compiler.util.Constants.UNSEALED_ARRAY_INDICATOR;\n+", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzNTc1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485635750", "bodyText": "Creating these expressions and setting them is usually delegated off to the package builder. Also doesn't feel quite right for the parser listener to know of the symbol table.\nSince the antlr parser will be removed soon, shall we just pass an empty list in L858 and disable the tests on the old parser, instead of introducing these changes?", "author": "MaryamZi", "createdAt": "2020-09-09T14:01:11Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -828,18 +834,18 @@ public void exitArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx\n \n         int index = 1;\n         int dimensions = 0;\n-        List<Integer> sizes = new ArrayList<>();\n+        List<BLangExpression> sizes = new ArrayList<>();\n         List<ParseTree> children = ctx.children;\n         while (index < children.size()) {\n             if (children.get(index).getText().equals(\"[\")) {\n                 if (children.get(index + 1).getText().equals(\"]\")) {\n-                    sizes.add(UNSEALED_ARRAY_INDICATOR);\n+                    sizes.add(new BLangLiteral(Integer.valueOf(OPEN_ARRAY_INDICATOR), symTable.intType));", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYzNzYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485637621", "bodyText": "Leave a new line after the imports. Please check and fix everywhere.", "author": "MaryamZi", "createdAt": "2020-09-09T14:03:45Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -118,9 +119,8 @@\n \n import static java.lang.String.format;\n import static org.wso2.ballerinalang.compiler.semantics.model.Scope.NOT_FOUND_ENTRY;\n-import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_SEALED_ARRAY_INDICATOR;\n-import static org.wso2.ballerinalang.compiler.util.Constants.UNSEALED_ARRAY_INDICATOR;\n-\n+import static org.wso2.ballerinalang.compiler.util.Constants.INFERRED_ARRAY_INDICATOR;\n+import static org.wso2.ballerinalang.compiler.util.Constants.OPEN_ARRAY_INDICATOR;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1NzM5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485657396", "bodyText": "Since it is only the array state that changes, IMO we can improve readability here by doing something like\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n          \n          \n            \n                                    arrType = new BArrayType(resultType,\n          \n          \n            \n                                            arrayTypeSymbol,\n          \n          \n            \n                                            sizeIndicator,\n          \n          \n            \n                                            BArrayState.UNSEALED);\n          \n          \n            \n                                } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n          \n          \n            \n                                    arrType = new BArrayType(resultType,\n          \n          \n            \n                                            arrayTypeSymbol,\n          \n          \n            \n                                            sizeIndicator,\n          \n          \n            \n                                            BArrayState.OPEN_SEALED);\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    arrType =  new BArrayType(resultType,\n          \n          \n            \n                                            arrayTypeSymbol,\n          \n          \n            \n                                            sizeIndicator,\n          \n          \n            \n                                            BArrayState.CLOSED_SEALED);\n          \n          \n            \n                                }\n          \n          \n            \n                                BArrayState arrayState;\n          \n          \n            \n                                if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n          \n          \n            \n                                    arrayState = BArrayState.UNSEALED;\n          \n          \n            \n                                } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n          \n          \n            \n                                    arrayState = BArrayState.OPEN_SEALED;\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    arrayState = BArrayState.CLOSED_SEALED;\n          \n          \n            \n                                }\n          \n          \n            \n                                arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);", "author": "MaryamZi", "createdAt": "2020-09-09T14:29:06Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -899,24 +899,79 @@ public void visit(BLangArrayType arrayTypeNode) {\n         if (resultType == symTable.noType) {\n             return;\n         }\n+        boolean isError = false;\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1ODQxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485658413", "bodyText": "Shall we reformat this to have whatever possible in a single line?", "author": "MaryamZi", "createdAt": "2020-09-09T14:30:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -899,24 +899,79 @@ public void visit(BLangArrayType arrayTypeNode) {\n         if (resultType == symTable.noType) {\n             return;\n         }\n+        boolean isError = false;\n         for (int i = 0; i < arrayTypeNode.dimensions; i++) {\n             BTypeSymbol arrayTypeSymbol = Symbols.createTypeSymbol(SymTag.ARRAY_TYPE, Flags.PUBLIC, Names.EMPTY,\n                                                                    env.enclPkg.symbol.pkgID, null, env.scope.owner);\n             BArrayType arrType;\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.UNSEALED);\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrType = new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.OPEN_SEALED);\n+                    } else {\n+                        arrType =  new BArrayType(resultType,\n+                                arrayTypeSymbol,\n+                                sizeIndicator,\n+                                BArrayState.CLOSED_SEALED);\n+                    }\n+                } else {\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1ODU3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485658573", "bodyText": "Please check other places too.", "author": "MaryamZi", "createdAt": "2020-09-09T14:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1ODQxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTQ1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485659455", "bodyText": "Can we not have this on one line?", "author": "MaryamZi", "createdAt": "2020-09-09T14:31:41Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Array size definition test.\n+ *\n+ */\n+public class ArraySizeDefinitionTest {\n+\n+    private String sizeMismatchError = \"size mismatch in sealed array. expected '2', but found '3'\";\n+    private String invalidReferenceExpressionError = \"invalid reference expression \" +\n+            \"'intLength' as array size: expected a constant reference expression\";\n+    private String incompatibleTypeError = \"incompatible types: expected 'int', found 'string'\";\n+    private String undefinedSymbolError = \"undefined symbol 'length'\";\n+\n+    @Test(groups = { \"disableOnOldParser\" })\n+    public void testCompilationSizeReferenceErrors() {\n+        int index = 0;\n+        CompileResult result = BCompileUtil.compile(\n+                \"test-src/statements/arrays/array-size-test.bal\");", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2Mzg4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485663884", "bodyText": "Please check other places too.", "author": "MaryamZi", "createdAt": "2020-09-09T14:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY1OTQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2MzY0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485663645", "bodyText": "Let's move this to the end and assert equality between index and result.getDiagnostics().length, that way we also make sure we've asserted all the errors.", "author": "MaryamZi", "createdAt": "2020-09-09T14:37:01Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Array size definition test.\n+ *\n+ */\n+public class ArraySizeDefinitionTest {\n+\n+    private String sizeMismatchError = \"size mismatch in sealed array. expected '2', but found '3'\";\n+    private String invalidReferenceExpressionError = \"invalid reference expression \" +\n+            \"'intLength' as array size: expected a constant reference expression\";\n+    private String incompatibleTypeError = \"incompatible types: expected 'int', found 'string'\";\n+    private String undefinedSymbolError = \"undefined symbol 'length'\";\n+\n+    @Test(groups = { \"disableOnOldParser\" })\n+    public void testCompilationSizeReferenceErrors() {\n+        int index = 0;\n+        CompileResult result = BCompileUtil.compile(\n+                \"test-src/statements/arrays/array-size-test.bal\");\n+        Assert.assertEquals(result.getDiagnostics().length, 20);", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2Mzk5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485663997", "bodyText": "Let's not remove this.", "author": "MaryamZi", "createdAt": "2020-09-09T14:37:31Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-fill-test.bal", "diffHunk": "@@ -13,7 +13,6 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n-", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NDI0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485664245", "bodyText": "Please add the license text to all the bal files too.", "author": "MaryamZi", "createdAt": "2020-09-09T14:37:53Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-size-scope-test.bal", "diffHunk": "@@ -0,0 +1,39 @@\n+const constLength = 2;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NzE1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485667152", "bodyText": "Let's use underscores instead of hyphens in bal file names.", "author": "MaryamZi", "createdAt": "2020-09-09T14:41:36Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-size-scope-test.bal", "diffHunk": "@@ -0,0 +1,39 @@\n+const constLength = 2;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2OTU0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485669549", "bodyText": "Let's also suffix the negative test bal files with _negative", "author": "MaryamZi", "createdAt": "2020-09-09T14:44:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NzE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2NzQwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485667407", "bodyText": "We don't quite need these comments right?", "author": "MaryamZi", "createdAt": "2020-09-09T14:41:56Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-size-scope-test.bal", "diffHunk": "@@ -0,0 +1,39 @@\n+const constLength = 2;\n+int intLength = 2;\n+const stringLength = \"2\";\n+\n+//in module scope", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2OTc0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485669748", "bodyText": "Missing a new line.", "author": "MaryamZi", "createdAt": "2020-09-09T14:45:00Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array-size-test.bal", "diffHunk": "@@ -0,0 +1,29 @@\n+const constLength = 2;\n+int intLength = 2;\n+const stringLength = \"2\";\n+\n+function arraySizeTest() {\n+    int[constLength] a = [1, 2, 3];\n+    int[intLength] b = [1, 2];\n+    int[stringLength] c = [1, 2];\n+    int[length] d = [1, 2];\n+    int[2] e = [1, 2, 3];\n+\n+    int[2][constLength] f = [[1,2],[1,2,3]];\n+    int[2][intLength] g = [[1,2],[1,2]];\n+    int[2][stringLength] h = [[1,2],[1,2]];\n+    int[2][length] i = [[1,2],[1,2]];\n+    int[2][2] j = [[1,2],[1,2,3]];\n+\n+    int[constLength][2] k = [[1,2],[1,2],[1,2]];\n+    int[intLength][2] l = [[1,2],[1,2]];\n+    int[stringLength][2] m = [[1,2],[1,2]];\n+    int[length][2] n = [[1,2],[1,2]];\n+    int[2][2] o = [[1,2],[1,2],[1,2]];\n+\n+    int[2][constLength][2] p = [[[1,2],[1,2],[1,2]],[[1,2],[1,2]]];\n+    int[2][intLength][2] q = [[[1,2],[1,2]],[[1,2],[1,2]]];\n+    int[2][stringLength][2] r = [[[1,2],[1,2]],[[1,2],[1,2]]];\n+    int[2][length][2] s = [[[1,2],[1,2]],[[1,2],[1,2]]];\n+    int[2][2][2] t = [[[1,2],[1,2],[1,2]],[[1,2],[1,2]]];\n+}", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY2OTkwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485669907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                a[1]=2;\n          \n          \n            \n                a[1] = 2;", "author": "MaryamZi", "createdAt": "2020-09-09T14:45:12Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array_fill_runtime_test.bal", "diffHunk": "@@ -120,6 +121,28 @@ function createMultipleConstLiteralAutoFilledSealedArray() {\n     assertEqualPanic(1, sealedArray[3]);\n }\n \n+function tesOneDimensionalArrayWithConstantSizeReferenceFill() {\n+    int[constLength] a = [];\n+    a[1]=2;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MDgxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485670815", "bodyText": "Can we also add positive tests for module level, anon functions, etc. array definitions with constants?", "author": "MaryamZi", "createdAt": "2020-09-09T14:46:25Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/sealed_array.bal", "diffHunk": "@@ -15,6 +15,8 @@\n // under the License.\n import ballerina/lang.'int;\n \n+const constLength = 2;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MTgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485671829", "bodyText": "Need to also include positive and negative tests for scenarios where the constant is defined after the array in the source.\nFor example, the following should work.\nint[TWO] x = [1, 2];\n\nconst TWO = 2;\nand the following should result in an error.\nint[ONE] x = [1, 2];\n\nconst ONE = 1;", "author": "MaryamZi", "createdAt": "2020-09-09T14:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MDgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY3MjQ4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r485672483", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                sealedArray[1]=2;\n          \n          \n            \n                sealedArray[1] = 2;", "author": "MaryamZi", "createdAt": "2020-09-09T14:48:31Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/sealed_array.bal", "diffHunk": "@@ -438,6 +440,13 @@ function createConstLiteralAutoFilledSealedArray() {\n     assertArrayLengthPanic(5, sealedArray);\n }\n \n+function testArrayWithConstantSizeReferenceFill() {\n+    int[constLength] sealedArray = [1];\n+    sealedArray[1]=2;", "originalCommit": "dd5c86862a5cba13b9ae5d82c3605f0883f3b43a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "message": "Refactor all files", "committedDate": "2020-09-11T17:43:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQwMTE4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r487401180", "bodyText": "Do we really need this to be commented out?", "author": "dulajdilshan", "createdAt": "2020-09-12T11:43:24Z", "path": "tests/jballerina-unit-test/src/test/resources/testng.xml", "diffHunk": "@@ -27,7 +27,7 @@\n         <!--<listener class-name=\"org.ballerinalang.test.utils.TestNGListener\"/>-->\n     </listeners>\n     <suite-files>\n-        <suite-file path=\"./testng-jballerina.xml\" />\n+<!--        <suite-file path=\"./testng-jballerina.xml\" />-->", "originalCommit": "a63ed91ce8b84ec892c4874501ebbfce7bd80f8b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzUxMjg1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r487512858", "bodyText": "There were some changes that I did in the BLangParserListener in order for the array tests in the old parser to not throw any errors. However, as suggested I reverted those changes. Since the old parser tests are bound to fail without the changes, I commented them out.", "author": "suleka96", "createdAt": "2020-09-13T10:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQwMTE4MA=="}], "type": "inlineReview"}, {"oid": "5b87a2eeef4fd5fc14bf5d6a67e4588fa2f370f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b87a2eeef4fd5fc14bf5d6a67e4588fa2f370f5", "message": "Resolve merge conflicts", "committedDate": "2020-09-14T02:38:13Z", "type": "commit"}, {"oid": "0c98d0c8c0c6dce760ebe75066145590dce372e6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0c98d0c8c0c6dce760ebe75066145590dce372e6", "message": "Add unstaged change", "committedDate": "2020-09-14T03:05:39Z", "type": "commit"}, {"oid": "36bf966d84751a61c33b63373c8f57177956a894", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36bf966d84751a61c33b63373c8f57177956a894", "message": "Revert \"Add unstaged change\"\n\nThis reverts commit 0c98d0c8c0c6dce760ebe75066145590dce372e6.\n\nRevert commit 0c98d0c8c0c6dce760ebe75066145590dce372e6", "committedDate": "2020-09-14T04:24:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwMTU5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488401591", "bodyText": "Shall we minimize the changes to BLangParserListener by introducing in BLangPackageBuilder another method that does not accept the size array?\nvoid addArrayType(DiagnosticPos pos, Set<Whitespace> ws, int dimensions) {\n\n}\nAnd from that call the current addArrayType method with an empty BlangExpression array? That way we can avoid importing BLangExpression too.", "author": "MaryamZi", "createdAt": "2020-09-15T05:50:28Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangParserListener.java", "diffHunk": "@@ -848,8 +849,7 @@ public void exitArrayTypeNameLabel(BallerinaParser.ArrayTypeNameLabelContext ctx\n             }\n         }\n         Collections.reverse(sizes);\n-        this.pkgBuilder.addArrayType(\n-                getCurrentPos(ctx), getWS(ctx), dimensions, sizes.stream().mapToInt(val -> val).toArray());\n+        this.pkgBuilder.addArrayType(getCurrentPos(ctx), getWS(ctx), dimensions, new BLangExpression[0]);", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDIyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488404222", "bodyText": "Can we assume this is always a var ref if it is not a literal? Can you validate with something like\npublic function main() {\n    int[[int, string]] x = 1;\n}\nWe may have to explicitly validate if it is\n\na literal\n* - inferred\na variable reference expression", "author": "MaryamZi", "createdAt": "2020-09-15T05:57:33Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -911,17 +913,60 @@ public void visit(BLangArrayType arrayTypeNode) {\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+                    BArrayState arrayState;\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrayState = BArrayState.UNSEALED;\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrayState = BArrayState.OPEN_SEALED;\n+                    } else {\n+                        arrayState = BArrayState.CLOSED_SEALED;\n+                    }\n+                    arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);\n+                } else {\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDUzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488404532", "bodyText": "We can refactor this to be on one or two lines instead of having the individual args on separate lines, right?", "author": "MaryamZi", "createdAt": "2020-09-15T05:58:26Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -911,17 +913,60 @@ public void visit(BLangArrayType arrayTypeNode) {\n             if (arrayTypeNode.sizes.length == 0) {\n                 arrType = new BArrayType(resultType, arrayTypeSymbol);\n             } else {\n-                int size = arrayTypeNode.sizes[i];\n-                arrType = (size == UNSEALED_ARRAY_INDICATOR) ?\n-                        new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.UNSEALED) :\n-                        (size == OPEN_SEALED_ARRAY_INDICATOR) ?\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.OPEN_SEALED) :\n-                                new BArrayType(resultType, arrayTypeSymbol, size, BArrayState.CLOSED_SEALED);\n-            }\n-            resultType = arrayTypeSymbol.type = arrType;\n+                BLangExpression size = arrayTypeNode.sizes[i];\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {\n+                    Integer sizeIndicator = (Integer) (((BLangLiteral) size).getValue());\n+                    BArrayState arrayState;\n+                    if (sizeIndicator == OPEN_ARRAY_INDICATOR) {\n+                        arrayState = BArrayState.UNSEALED;\n+                    } else if (sizeIndicator == INFERRED_ARRAY_INDICATOR) {\n+                        arrayState = BArrayState.OPEN_SEALED;\n+                    } else {\n+                        arrayState = BArrayState.CLOSED_SEALED;\n+                    }\n+                    arrType =  new BArrayType(resultType, arrayTypeSymbol,  sizeIndicator, arrayState);\n+                } else {\n+                    BLangSimpleVarRef sizeReference = (BLangSimpleVarRef) size;\n+                    Name pkgAlias = names.fromIdNode(sizeReference.pkgAlias);\n+                    Name typeName = names.fromIdNode(sizeReference.variableName);\n+\n+                    BSymbol sizeSymbol = lookupMainSpaceSymbolInPackage(size.pos, env, pkgAlias, typeName);\n+\n+                    if (symTable.notFoundSymbol == sizeSymbol) {\n+                        dlog.error(arrayTypeNode.pos, DiagnosticCode.UNDEFINED_SYMBOL, size);\n+                        isError = true;\n+                        continue;\n+                    }\n+\n+                    if (sizeSymbol.tag != SymTag.CONSTANT) {\n+                        dlog.error(size.pos, DiagnosticCode.INVALID_ARRAY_SIZE_REFERENCE, sizeSymbol);\n+                        isError = true;\n+                        continue;\n+                    }\n \n+                    BConstantSymbol sizeConstSymbol = (BConstantSymbol) sizeSymbol;\n+                    BType lengthLiteralType = sizeConstSymbol.literalType;\n+\n+                    if (lengthLiteralType.tag != TypeTags.INT) {\n+                        dlog.error(size.pos,\n+                                DiagnosticCode.INCOMPATIBLE_TYPES,\n+                                symTable.intType,\n+                                sizeConstSymbol.literalType);", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488404951", "bodyText": "Since it's just int literals wouldn't a check for just NUMERIC_LITERAL be enough? Please check other usage too.", "author": "MaryamZi", "createdAt": "2020-09-15T05:59:25Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/tree/types/BLangArrayType.java", "diffHunk": "@@ -62,10 +65,15 @@ public String toString() {\n         final StringBuilder[] sb = {new StringBuilder(getTypeName())};\n         if (sizes.length == 0) {\n             Arrays.stream(sizes).forEach(size -> {\n-                if (size == -1) {\n-                    sb[0].append(\"[]\");\n+                if (size.getKind() == NodeKind.LITERAL || size.getKind() == NodeKind.NUMERIC_LITERAL) {", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYwOTc4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488609783", "bodyText": "We actually discussed about this before in this and it was suggested to use both. Since it is the same logic that is being used here I used both.", "author": "suleka96", "createdAt": "2020-09-15T12:00:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDk1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5NDQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488794402", "bodyText": "IIRC digits are usually represented by NUMERIC_LITERALs, while strings are represented by LITERAL.\nSo once we've validated that the size is a numeric literal (probably done by the parser itself), we don't have to check for LITERAL thereafter. Because we know that if it is an array's size, and it is not inferred or a const ref, it has to be a NUMERIC_LITERAL.", "author": "MaryamZi", "createdAt": "2020-09-15T16:16:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNDk1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNTI5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488405295", "bodyText": "Shall we add @since Swan Lake?", "author": "MaryamZi", "createdAt": "2020-09-15T06:00:14Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/statements/arrays/ArraySizeDefinitionTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+*  Copyright (c) 2017, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+*\n+*  WSO2 Inc. licenses this file to you under the Apache License,\n+*  Version 2.0 (the \"License\"); you may not use this file except\n+*  in compliance with the License.\n+*  You may obtain a copy of the License at\n+*\n+*    http://www.apache.org/licenses/LICENSE-2.0\n+*\n+*  Unless required by applicable law or agreed to in writing,\n+*  software distributed under the License is distributed on an\n+*  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+*  KIND, either express or implied.  See the License for the\n+*  specific language governing permissions and limitations\n+*  under the License.\n+*/\n+package org.ballerinalang.test.statements.arrays;\n+\n+import org.ballerinalang.test.util.BAssertUtil;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Array size definition test.\n+ *", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNTYxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488405618", "bodyText": "Extra new lines.", "author": "MaryamZi", "createdAt": "2020-09-15T06:01:03Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/statements/arrays/array_size_scope_test_negative.bal", "diffHunk": "@@ -0,0 +1,54 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+int[constLength] arr = [1, 2, 3];\n+\n+const constLength = 2;\n+int intLength = 2;\n+const stringLength = \"2\";\n+\n+int[constLength] a = [1, 2, 3];\n+int[intLength] b = [1, 2];\n+int[stringLength] c = [1, 2];\n+int[length] d = [1, 2];\n+\n+function arraySizeReferenceInDifferentScopeTest() {\n+    int[constLength] e = [1, 2, 3];\n+    int[intLength] f = [1, 2];\n+    int[stringLength] g = [1, 2];\n+    int[length] h = [1, 2];\n+\n+    function () anonFunction =\n+                function () {\n+                   int[constLength] i = [1, 2, 3];\n+                   int[intLength] j = [1, 2];\n+                   int[stringLength] k = [1, 2];\n+                   int[length] l = [1, 2];\n+                };\n+\n+    anonFunction();\n+\n+    int x = 10;\n+\n+    if (x == 10) {\n+        int[constLength] m = [1, 2, 3];\n+        int[intLength] n = [1, 2];\n+        int[stringLength] o = [1, 2];\n+        int[length] p = [1, 2];\n+    }\n+}\n+\n+", "originalCommit": "36bf966d84751a61c33b63373c8f57177956a894", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNTY5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25551#discussion_r488405698", "bodyText": "Please check all files.", "author": "MaryamZi", "createdAt": "2020-09-15T06:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQwNTYxOA=="}], "type": "inlineReview"}, {"oid": "f9bc12cfa2fee14695e51162f1e83e7107f02f43", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9bc12cfa2fee14695e51162f1e83e7107f02f43", "message": "Refactor all files", "committedDate": "2020-09-16T01:52:11Z", "type": "commit"}]}