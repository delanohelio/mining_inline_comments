{"pr_number": 21346, "pr_title": "Implement Email Connector", "pr_createdAt": "2020-02-28T06:20:13Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346", "timeline": [{"oid": "3ab08bceba8bce49750f06d80575aa250ce4a7f7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ab08bceba8bce49750f06d80575aa250ce4a7f7", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:49:50Z", "type": "commit"}, {"oid": "7c6c64a7bd2a91b54283005c9e4bf0a229ec648a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7c6c64a7bd2a91b54283005c9e4bf0a229ec648a", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:51:59Z", "type": "commit"}, {"oid": "c6026db3a7b7e38855c6b1a530071384a4f88b74", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6026db3a7b7e38855c6b1a530071384a4f88b74", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:52:46Z", "type": "commit"}, {"oid": "4d5f091b5621bf520de01c7d796f97b34ff205e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4d5f091b5621bf520de01c7d796f97b34ff205e3", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:53:35Z", "type": "commit"}, {"oid": "50f8b2ebd979660c4feaba01894334eeed0568c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50f8b2ebd979660c4feaba01894334eeed0568c8", "message": "Correct the suggestions pointed out in the PR.", "committedDate": "2020-02-28T15:38:35Z", "type": "commit"}, {"oid": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "message": "Revert back ballerina-grammar directory mistakenly added.", "committedDate": "2020-02-29T04:42:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTMwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001303", "bodyText": "Shall we order the imports alphabetically?", "author": "MaryamZi", "createdAt": "2020-02-29T04:51:48Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,81 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3, and IMAP4 protocols.\n+\n+## Sample\n+\n+The below sample uses the functions in the module to send an email using the SMTP protocol.\n+\n+```ballerina\n+import ballerina/io;", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMTAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386021035", "bodyText": "Done.", "author": "Maninda", "createdAt": "2020-02-29T11:14:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTMwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTMyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001324", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if(emailResponse is email:Email) {\n          \n          \n            \n                if (emailResponse is email:Email) {", "author": "MaryamZi", "createdAt": "2020-02-29T04:52:26Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,81 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3, and IMAP4 protocols.\n+\n+## Sample\n+\n+The below sample uses the functions in the module to send an email using the SMTP protocol.\n+\n+```ballerina\n+import ballerina/io;\n+import ballerina/email;\n+\n+email:SmtpConfig smtpConfig = {\n+    host: \"smtp.gmail.com\",\n+    port: 587,\n+    username: \"sender@email.com\",\n+    password: \"pass123\"\n+};\n+\n+public function main() {\n+    email:SmtpClient smtpClient = new (smtpConfig);\n+    email:Email email = {\n+        toAddr: [\"receiver1@email.com\", \"receiver2@email.com\"],\n+        ccAddr: [\"receiver3@email.com\", \"receiver4@email.com\"],\n+        bccAddr: [\"receiver5@email.com\"],\n+        subject: \"Sample Email\",\n+        messageBody: \"This is a sample email.\",\n+        fromAddr: \"sender@email.com\",\n+        senderAddr: \"sender@email.com\"\n+    };\n+    error? response = smtpClient->send(email);\n+}\n+```\n+\n+The below sample uses the functions in the module to receive an email using the POP3 protocol.\n+\n+```ballerina\n+email:PopConfig popConfig = {\n+    host: \"pop.gmail.com\",\n+    port: 995,\n+    username: \"sender@email.com\",\n+    password: \"senderPa$$w0rd\"\n+};\n+\n+public function main() {\n+    email:PopClient popClient = new (popConfig);\n+    email:Email|error? emailResponse = popClient->read();\n+    if(emailResponse is email:Email) {", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTM0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001346", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if(emailResponse is email:Email) {\n          \n          \n            \n                if (emailResponse is email:Email) {", "author": "MaryamZi", "createdAt": "2020-02-29T04:52:56Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,81 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3, and IMAP4 protocols.\n+\n+## Sample\n+\n+The below sample uses the functions in the module to send an email using the SMTP protocol.\n+\n+```ballerina\n+import ballerina/io;\n+import ballerina/email;\n+\n+email:SmtpConfig smtpConfig = {\n+    host: \"smtp.gmail.com\",\n+    port: 587,\n+    username: \"sender@email.com\",\n+    password: \"pass123\"\n+};\n+\n+public function main() {\n+    email:SmtpClient smtpClient = new (smtpConfig);\n+    email:Email email = {\n+        toAddr: [\"receiver1@email.com\", \"receiver2@email.com\"],\n+        ccAddr: [\"receiver3@email.com\", \"receiver4@email.com\"],\n+        bccAddr: [\"receiver5@email.com\"],\n+        subject: \"Sample Email\",\n+        messageBody: \"This is a sample email.\",\n+        fromAddr: \"sender@email.com\",\n+        senderAddr: \"sender@email.com\"\n+    };\n+    error? response = smtpClient->send(email);\n+}\n+```\n+\n+The below sample uses the functions in the module to receive an email using the POP3 protocol.\n+\n+```ballerina\n+email:PopConfig popConfig = {\n+    host: \"pop.gmail.com\",\n+    port: 995,\n+    username: \"sender@email.com\",\n+    password: \"senderPa$$w0rd\"\n+};\n+\n+public function main() {\n+    email:PopClient popClient = new (popConfig);\n+    email:Email|error? emailResponse = popClient->read();\n+    if(emailResponse is email:Email) {\n+        io:println(\"Email Subject: \", emailResponse.subject);\n+        io:println(\"Email Body: \", emailResponse.body);\n+    } else if (emailResponse is ()) {\n+        io:println(\"There are no emails in the INBOX.\");\n+    } else {\n+        io:println(\"Error: \" + emailResponse.toString());\n+    }\n+}\n+```\n+\n+The below sample uses the functions in the module to receive an email using the IMAP4 protocol.\n+\n+```ballerina\n+email:ImapConfig imapConfig = {\n+    host: \"imap.gmail.com\",\n+    port: 143,\n+    username: \"sender@email.com\",\n+    password: \"senderPa$$w0rd\"\n+};\n+\n+public function main() {\n+    email:ImapClient imapClient = new (imapConfig);\n+    email:Email|error? emailResponse = imapClient->read();\n+    if(emailResponse is email:Email) {", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTQzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001433", "bodyText": "Is the Addr suffix still valid? The fields in https://github.com/ballerina-platform/ballerina-lang/pull/21346/files#diff-4e2491d7a639e6d95383b2e3a12db821R40 don't seem to have it?", "author": "MaryamZi", "createdAt": "2020-02-29T04:54:42Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,81 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3, and IMAP4 protocols.\n+\n+## Sample\n+\n+The below sample uses the functions in the module to send an email using the SMTP protocol.\n+\n+```ballerina\n+import ballerina/io;\n+import ballerina/email;\n+\n+email:SmtpConfig smtpConfig = {\n+    host: \"smtp.gmail.com\",\n+    port: 587,\n+    username: \"sender@email.com\",\n+    password: \"pass123\"\n+};\n+\n+public function main() {\n+    email:SmtpClient smtpClient = new (smtpConfig);\n+    email:Email email = {\n+        toAddr: [\"receiver1@email.com\", \"receiver2@email.com\"],", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMTEwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386021100", "bodyText": "Updated the Module.md file.", "author": "Maninda", "createdAt": "2020-02-29T11:16:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTQzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTQ3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001471", "bodyText": "Why do we need a record here? Can't we just directly use a string as field/param?", "author": "MaryamZi", "createdAt": "2020-02-29T04:55:39Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Configurations for the connections.\n+#\n+# + host - IP Address\n+# + port - Port\n+# + username - Provider username\n+# + password - Provider password\n+public type ConnectionConfig record {|\n+    string host;\n+    int port;\n+    string username;\n+    string password;\n+|};\n+\n+# Email message sending and receiving configurations.\n+#\n+# + to - TO address list\n+# + cc - CC address list\n+# + bcc - BCC address list\n+# + subject - Subject of email\n+# + body - Body of the email message\n+# + from - From address\n+# + sender - Sender's address\n+# + replyTo - Reply To addresses\n+public type Email record {|\n+    string[] to;\n+    string[] cc?;\n+    string[] bcc?;\n+    string subject;\n+    string body;\n+    string 'from;\n+    string sender?;\n+    string[] replyTo?;\n+|};\n+\n+# Filter to receive an email.\n+#\n+# + folder - Folder to read emails\n+public type Filter record {|", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjY1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386016652", "bodyText": "Filter is a generic filtering configuration type which is not limited to the read folder.", "author": "Maninda", "createdAt": "2020-02-29T09:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjEwMDA3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386100075", "bodyText": "@Maninda What are the other filter options we have?", "author": "daneshk", "createdAt": "2020-03-01T11:31:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE4NTIyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386185227", "bodyText": "AFAICT, this particular record is only used in imapRead and popRead atm.\ne.g.,\nimapRead(ImapClient clientEndpoint, Filter message)\nMy question was, why can't we just use a string as the second param instead?\nimapRead(ImapClient clientEndpoint, string filter)", "author": "MaryamZi", "createdAt": "2020-03-02T03:40:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1MTQ2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386251461", "bodyText": "@daneshk and @MaryamZi ,\nBy the time of API design we wanted to keep the Filter record to get the filtering criteria related to emails reads such as, from address, sender address, sent date-time, subject, has attachments, email folder etc. But at the moment we have only implemented the email folder property. Therefore, if we remove the Filter from the API, then it would become backward incompatible. Therefore, let's expose Filter as a defaultable parameter to the user client.", "author": "Maninda", "createdAt": "2020-03-02T08:30:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NjE2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386376162", "bodyText": "Made that change.", "author": "Maninda", "createdAt": "2020-03-02T12:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTQ3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTU0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001545", "bodyText": "Why are we not doing anything with the error? Shouldn't the __init() return this error?", "author": "MaryamZi", "createdAt": "2020-02-29T04:56:44Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client, which interacts with an IMAP Server.\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NjQwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386376406", "bodyText": "Made it to return error type.", "author": "Maninda", "createdAt": "2020-03-02T12:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTU4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001589", "bodyText": "Why can't we just do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Email|error? email = imapRead(self, filter, false);\n          \n          \n            \n                    if(email is error) {\n          \n          \n            \n                        return email;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return <Email?>email;\n          \n          \n            \n                    }\n          \n          \n            \n                    return imapRead(self, filter, false);", "author": "MaryamZi", "createdAt": "2020-02-29T04:57:55Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client, which interacts with an IMAP Server.\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Reads a message.\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        Email|error? email = imapRead(self, filter, false);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001660", "bodyText": "Why is the type int?? What do we do if the user sets () as the value for port?", "author": "MaryamZi", "createdAt": "2020-02-29T04:58:53Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client, which interacts with an IMAP Server.\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Reads a message.\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        Email|error? email = imapRead(self, filter, false);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the IMAP Endpoint.\n+#\n+# + host - Host address of the IMAP server\n+# + port - Port number of the IMAP server\n+# + username - Username to access the IMAP server\n+# + password - Password to access the IMAP server\n+public type ImapConfig record {|\n+    string host;\n+    int? port = 143;", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxMTQwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386211406", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-03-02T06:10:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTY2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001669", "bodyText": "Same comment as above re: ignoring errors.", "author": "MaryamZi", "createdAt": "2020-02-29T04:59:09Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents a POP Client, which interacts with a POP Server.\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the POP Client\n+    public function __init(PopConfig clientConfig) {\n+        error? response = initPopClientEndpoint(self, clientConfig, true);", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NjQ5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386376491", "bodyText": "Made it to return error type.", "author": "Maninda", "createdAt": "2020-03-02T12:57:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTY4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001682", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Email|error? email = popRead(self, filter, true);\n          \n          \n            \n                    if(email is error) {\n          \n          \n            \n                        return email;\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return <Email?>email;\n          \n          \n            \n                    }\n          \n          \n            \n                    return popRead(self, filter, true);", "author": "MaryamZi", "createdAt": "2020-02-29T04:59:38Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents a POP Client, which interacts with a POP Server.\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the POP Client\n+    public function __init(PopConfig clientConfig) {\n+        error? response = initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message.\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        Email|error? email = popRead(self, filter, true);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTcyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001727", "bodyText": "Same comment as above re: ignoring errors.", "author": "MaryamZi", "createdAt": "2020-02-29T05:00:39Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client, which interacts with an SMTP Server.\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for SMTP Client\n+    public function __init(SmtpConfig clientConfig) {\n+        error? response = initSmtpClientEndpoint(self, clientConfig);", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NjU4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386376582", "bodyText": "Made it to return error type.", "author": "Maninda", "createdAt": "2020-03-02T12:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTcyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTgzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001833", "bodyText": "This will be added to master right? The version would have to be fixed everywhere as 1.2.0.", "author": "MaryamZi", "createdAt": "2020-02-29T05:02:22Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.service.compiler;\n+\n+import org.ballerinalang.compiler.plugins.AbstractCompilerPlugin;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+\n+/**\n+ * This class validates annotations attached to the Ballerina service and its resource nodes.\n+ *\n+ * @since 1.1.5", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxOTAyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386019026", "bodyText": "This will be released with 1.1.5.", "author": "Maninda", "createdAt": "2020-02-29T10:36:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAzMzEyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386033120", "bodyText": "Then the PR should be point to 1.1.x branch. Isn't it?", "author": "ldclakmal", "createdAt": "2020-02-29T14:53:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTgzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1NDU3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386354573", "bodyText": "Yes. Will send another PR to 1.1.x branch.", "author": "Maninda", "createdAt": "2020-03-02T12:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTg4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386001882", "bodyText": "Are we planning on doing any custom compile time validations? If not, we can remove this?", "author": "MaryamZi", "createdAt": "2020-02-29T05:03:18Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.service.compiler;\n+\n+import org.ballerinalang.compiler.plugins.AbstractCompilerPlugin;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+\n+/**\n+ * This class validates annotations attached to the Ballerina service and its resource nodes.\n+ *\n+ * @since 1.1.5\n+ */\n+class EmailListenerCompilerPlugin extends AbstractCompilerPlugin {", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxODk0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386018940", "bodyText": "We have plans.", "author": "Maninda", "createdAt": "2020-02-29T10:35:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE4NTU3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386185574", "bodyText": "Ack and OK if we are adding with this PR. If not, IMO, we shouldn't introduce this class now.", "author": "MaryamZi", "createdAt": "2020-03-02T03:42:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTg4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NjcxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386376714", "bodyText": "Removed the class.", "author": "Maninda", "createdAt": "2020-03-02T12:58:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwMTg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNjk1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386006959", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-29T06:40:21Z", "path": "stdlib/email/src/main/ballerina/src/email/service_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+\n+public function initSmtpClientEndpoint(SmtpClient clientEndpoint, SmtpConfig config) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+public function send(SmtpClient clientEndpoint, Email email) returns error? = @java:Method {\n+    name : \"sendMessage\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxODg4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386018883", "bodyText": "Purposely separated with 2 lines to separate between protocols.", "author": "Maninda", "createdAt": "2020-02-29T10:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNjk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzEyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386007123", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-29T06:42:45Z", "path": "stdlib/email/src/main/ballerina/src/email/service_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+\n+public function initSmtpClientEndpoint(SmtpClient clientEndpoint, SmtpConfig config) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+public function send(SmtpClient clientEndpoint, Email email) returns error? = @java:Method {\n+    name : \"sendMessage\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+\n+public function initPopClientEndpoint(PopClient clientEndpoint, PopConfig config, boolean isPop) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.PopClient\"\n+} external;\n+\n+public function popRead(PopClient clientEndpoint, Filter message, boolean isPop) returns Email|error? = @java:Method {\n+    name : \"readMessage\",\n+    class : \"org.ballerinalang.stdlib.email.client.PopClient\"\n+} external;\n+\n+", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxODg0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386018841", "bodyText": "Purposely separated with 2 lines to separate between protocols.", "author": "Maninda", "createdAt": "2020-02-29T10:33:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzEyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzI3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386007278", "bodyText": "Seems like the isPop method parameter is not used. Please check all the usages of this method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static MapValue readMessage(ObjectValue clientConnector, MapValue<Object, Object> filter, boolean isPop)\n          \n          \n            \n                public static MapValue readMessage(ObjectValue clientConnector, MapValue<Object, Object> filter)", "author": "ldclakmal", "createdAt": "2020-02-29T06:45:41Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaPopException;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+/**\n+ * Contains functionality of POP Client.\n+ */\n+public class PopClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopClient.class);\n+\n+    private PopClient() {\n+        // A Singleton class.\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP Properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param config Properties required to configure the POP Session\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @throws BallerinaPopException If an error occurs in the POP client\n+     */\n+    public static void initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config, boolean isPop)\n+            throws BallerinaPopException {\n+        log.debug(\"[PopClient][InitClient] Calling getProperties\");\n+        Properties properties = PopUtil.getProperties(config, isPop);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;\n+\n+            if (isPop) {\n+                store = session.getStore(PopConstants.POP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(PopConstants.PROPS_POP_HOST));\n+            } else {\n+                store = session.getStore(ImapConstants.IMAP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(ImapConstants.PROPS_IMAP_HOST));\n+            }\n+            clientEndpoint.addNativeData(PopConstants.PROPS_STORE, store);\n+            clientEndpoint.addNativeData(PopConstants.PROPS_USERNAME,\n+                    properties.getProperty(PopConstants.PROPS_USERNAME));\n+            clientEndpoint.addNativeData(PopConstants.PROPS_PASSWORD,\n+                    properties.getProperty(PopConstants.PROPS_PASSWORD));\n+        } catch (NoSuchProviderException e) {\n+            log.error(\"Failed to read message : \", e);\n+            throw new BallerinaPopException(\"Error occurred while accessing POP server\", e);\n+        }\n+    }\n+\n+    /**\n+     * Read emails from the server.\n+     * @param clientConnector Represents the POP Client class\n+     * @param filter Criteria, which is used to read emails\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return MapValue Returns the type supported by Ballerina\n+     * @throws BallerinaPopException If an error occurs in the POP client\n+     */\n+    public static MapValue readMessage(ObjectValue clientConnector, MapValue<Object, Object> filter, boolean isPop)", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAyMTI2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386021261", "bodyText": "Removed from this location and the references.", "author": "Maninda", "createdAt": "2020-02-29T11:18:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzQ0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386007449", "bodyText": "IMO, these are generic constants for both IMAP and POP protocols. If so, please move it to a different class and refactor the usages.", "author": "ldclakmal", "createdAt": "2020-02-29T06:48:39Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopConstants.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Constants for POP3-related functions.\n+ *\n+ * @since 1.1.5\n+ */\n+public class PopConstants {\n+    public static final String DEFAULT_PORT_NUMBER = \"995\";\n+    public static final String PROPS_HOST = \"host\";\n+    public static final String PROPS_PORT = \"port\";\n+    public static final String PROPS_USERNAME = \"username\";\n+    public static final String PROPS_PASSWORD = \"password\";\n+    public static final String PROPS_STORE = \"store\";", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxODczMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386018730", "bodyText": "As a single class is used for both POP and IMAP clients, these are considered as part of POP protocol. When they are split these properties can be moved to a generic location.", "author": "Maninda", "createdAt": "2020-02-29T10:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzczNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386007736", "bodyText": "IMO, a method should have single responsibility. So, the implementation logic change based on a boolean means, you can have 2 separate methods.", "author": "ldclakmal", "createdAt": "2020-02-29T06:55:31Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to the POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386016829", "bodyText": "We have decided to move on with a single email retrieval client for the moment. We will later decide to split it into to two.", "author": "Maninda", "createdAt": "2020-02-29T09:56:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxODA1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r388718051", "bodyText": "Yes. We can divide logic into two Java methods for more clarity.", "author": "wggihan", "createdAt": "2020-03-06T05:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTg4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365889", "bodyText": "Done.", "author": "Maninda", "createdAt": "2020-03-08T12:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzg3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386007877", "bodyText": "IMO, these methods should have single responsibility in each. So, the implementation logic change based on a boolean means, you can have 2 separate methods. The common logic can be abstracted into a separate method.", "author": "ldclakmal", "createdAt": "2020-02-29T06:57:58Z", "path": "stdlib/email/src/main/ballerina/src/email/service_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+\n+public function initSmtpClientEndpoint(SmtpClient clientEndpoint, SmtpConfig config) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+public function send(SmtpClient clientEndpoint, Email email) returns error? = @java:Method {\n+    name : \"sendMessage\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+\n+public function initPopClientEndpoint(PopClient clientEndpoint, PopConfig config, boolean isPop) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.PopClient\"\n+} external;\n+\n+public function popRead(PopClient clientEndpoint, Filter message, boolean isPop) returns Email|error? = @java:Method {\n+    name : \"readMessage\",\n+    class : \"org.ballerinalang.stdlib.email.client.PopClient\"\n+} external;\n+\n+\n+public function initImapClientEndpoint(ImapClient clientEndpoint, ImapConfig config, boolean isPop) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.PopClient\"\n+} external;\n+\n+public function imapRead(ImapClient clientEndpoint, Filter message, boolean isPop) returns Email|error? = @java:Method {\n+    name : \"readMessage\",\n+    class : \"org.ballerinalang.stdlib.email.client.PopClient\"\n+} external;", "originalCommit": "ca4455cefd18c4b9db0ae6972dc0175c7cd74073", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjcyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386016727", "bodyText": "For the moment we have decided to move with a single email retrieval client instead of two.", "author": "Maninda", "createdAt": "2020-02-29T09:54:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNzg3Nw=="}], "type": "inlineReview"}, {"oid": "072bb580a4cd9a279db552f46a6bff7d1a0072b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/072bb580a4cd9a279db552f46a6bff7d1a0072b7", "message": "Add functionality to return errors from interops related to SMTP and POP clients.", "committedDate": "2020-02-29T09:44:43Z", "type": "commit"}, {"oid": "b8fa8877662bc1340daba795362dc9e5f8db4fac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b8fa8877662bc1340daba795362dc9e5f8db4fac", "message": "Improve code clarity.\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-29T09:48:38Z", "type": "commit"}, {"oid": "a17005bd1becac9c5d20b22b1c03b9f93bbc89c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a17005bd1becac9c5d20b22b1c03b9f93bbc89c5", "message": "Improve code clarity.\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-29T09:49:09Z", "type": "commit"}, {"oid": "812caf9b3a4fb46efbe1fc6551646f899544310a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/812caf9b3a4fb46efbe1fc6551646f899544310a", "message": "Simplified the code.\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-29T10:51:11Z", "type": "commit"}, {"oid": "01f731e09b3f414f442022f207f8c92344fe30cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01f731e09b3f414f442022f207f8c92344fe30cb", "message": "Simplified the code.\n\nCo-Authored-By: Maryam Ziyad <maryamziyadm@gmail.com>", "committedDate": "2020-02-29T10:52:34Z", "type": "commit"}, {"oid": "6fc01c2ee0f0ff65ab90ff77303431940d741609", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6fc01c2ee0f0ff65ab90ff77303431940d741609", "message": "Fix changes proposed in the PR.", "committedDate": "2020-02-29T10:58:00Z", "type": "commit"}, {"oid": "7bb1aedfc69e2e9fca0c24a40300801e7d426e0e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bb1aedfc69e2e9fca0c24a40300801e7d426e0e", "message": "Resolve a merge conflict.", "committedDate": "2020-02-29T11:10:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE4NDUzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386184539", "bodyText": "Why do we have these functions as public functions? They are only expected to be called from within the module right?", "author": "MaryamZi", "createdAt": "2020-03-02T03:35:58Z", "path": "stdlib/email/src/main/ballerina/src/email/service_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+\n+public function initSmtpClientEndpoint(SmtpClient clientEndpoint, SmtpConfig config) returns error? = @java:Method {", "originalCommit": "7bb1aedfc69e2e9fca0c24a40300801e7d426e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3Njk2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386376967", "bodyText": "Removed the public scope.", "author": "Maninda", "createdAt": "2020-03-02T12:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjE4NDUzOQ=="}], "type": "inlineReview"}, {"oid": "0248227c9308898b698c54fe42089655160202df", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0248227c9308898b698c54fe42089655160202df", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into email", "committedDate": "2020-03-02T06:33:01Z", "type": "commit"}, {"oid": "9d596a974e496b4e32c7607679f6d3723644b951", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9d596a974e496b4e32c7607679f6d3723644b951", "message": "Revert ballerina-grammar commit", "committedDate": "2020-03-02T06:45:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjAwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386216003", "bodyText": "This version represents the version of the particular std lib module base on its maturity and the functionality coverage. This is totally independent from the ballerina version.\nSo If we are confident enough that this module has covered all basic functionalities we can version this as 1.0.0. If not something less would be meaningful.", "author": "chamil321", "createdAt": "2020-03-02T06:31:12Z", "path": "stdlib/email/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -0,0 +1,18 @@\n+[project]\n+org-name = \"ballerina\"\n+version = \"1.1.5\"", "originalCommit": "7bb1aedfc69e2e9fca0c24a40300801e7d426e0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NzQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386377411", "bodyText": "Changed to version 0.9.0.", "author": "Maninda", "createdAt": "2020-03-02T12:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIxNjAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyMDI3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386220271", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (string == null) {\n          \n          \n            \n                        return \"\";\n          \n          \n            \n                    } else {\n          \n          \n            \n                        return string;\n          \n          \n            \n                    }\n          \n          \n            \n                    return string == null ? \"\" : string;\n          \n          \n            \n                    }", "author": "chamil321", "createdAt": "2020-03-02T06:49:22Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to the POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+    /**\n+     * Generates MapValue object using the passed message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        if (toAddress != null) {\n+            for (Address address: toAddress) {\n+                toAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (ccAddress != null) {\n+            for (Address address: ccAddress) {\n+                ccAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (bccAddress != null) {\n+            for (Address address: bccAddress) {\n+                bccAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (replyToAddress != null) {\n+            for (Address address: replyToAddress) {\n+                replyToAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        String subject = getStringNullChecked(message.getSubject());\n+        String messageBody = \"\";\n+        if (message.isMimeType(\"text/plain\")) {\n+            if (message.getContent() != null) {\n+                messageBody = message.getContent().toString();\n+            } else {\n+                messageBody = \"\";\n+            }\n+        } else if (message.isMimeType(\"multipart/*\")) {\n+            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();\n+            messageBody = getTextFromMimeMultipart(mimeMultipart);\n+        }\n+        String fromAddress;\n+        if (message.getFrom() != null) {\n+            fromAddress = message.getFrom()[0].toString();\n+        } else {\n+            fromAddress = \"\";\n+        }\n+        String senderAddress = \"\";\n+        valueMap.put(EmailConstants.MESSAGE_TO, toAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_CC, ccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_BCC, bccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_REPLY_TO, replyToAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_SUBJECT, subject);\n+        valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY, messageBody);\n+        valueMap.put(EmailConstants.MESSAGE_FROM, fromAddress);\n+        valueMap.put(EmailConstants.MESSAGE_SENDER, senderAddress);\n+        log.debug(\"[PopUtil][getMapValue] MapValue object created. Returning Object to PopClient\");\n+        return BallerinaValues.createRecordValue(EmailConstants.EMAIL_PACKAGE_ID, PopConstants.EMAIL, valueMap);\n+    }\n+\n+    private static String getTextFromMimeMultipart(\n+            MimeMultipart mimeMultipart)  throws MessagingException, IOException {\n+        StringBuilder result = new StringBuilder();\n+        int count = mimeMultipart.getCount();\n+        for (int i = 0; i < count; i++) {\n+            BodyPart bodyPart = mimeMultipart.getBodyPart(i);\n+            if (bodyPart.isMimeType(\"text/plain\")) {\n+                result.append(\"\\n\").append(bodyPart.getContent());\n+                break; // without break same text appears twice in my tests\n+            } else if (bodyPart.isMimeType(\"text/html\")) {\n+                String html = (String) bodyPart.getContent();\n+                // result = result + \"\\n\" + org.jsoup.Jsoup.parse(html).text();\n+                result.append(\"\\n\").append(html);\n+            } else if (bodyPart.getContent() instanceof MimeMultipart) {\n+                result.append(getTextFromMimeMultipart((MimeMultipart) bodyPart.getContent()));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    private static String getStringNullChecked(String string) {\n+        if (string == null) {\n+            return \"\";\n+        } else {\n+            return string;\n+        }", "originalCommit": "9d596a974e496b4e32c7607679f6d3723644b951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NzU2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386377561", "bodyText": "Made the change.", "author": "Maninda", "createdAt": "2020-03-02T12:59:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyMDI3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0OTAwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386349006", "bodyText": "Shouldn't we check log.isDebugEnabled() before debug logs?", "author": "anupama-pathirage", "createdAt": "2020-03-02T11:52:20Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.stdlib.email.util.SmtpConstants;\n+import org.ballerinalang.stdlib.email.util.SmtpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+\n+/**\n+ * Contains functionality of SMTP Client.\n+ */\n+public class SmtpClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpClient.class);\n+\n+    private SmtpClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the SMTP Properties.\n+     * @param clientEndpoint Represents the SMTP Client class\n+     * @param config Properties required to configure the SMTP Session\n+     * @return Object If an error occurs in the SMTP client, error\n+     */\n+    public static Object initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config) {\n+        try {\n+            log.debug(\"[SmtpClient][InitClient] Calling getProperties\");", "originalCommit": "9d596a974e496b4e32c7607679f6d3723644b951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NzkwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386377903", "bodyText": "Changed all the debug locations as given.", "author": "Maninda", "createdAt": "2020-03-02T13:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM0OTAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MDAzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386350036", "bodyText": "What is the usage of this class?", "author": "anupama-pathirage", "createdAt": "2020-03-02T11:54:49Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/BallerinaPopException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Exception class for POP.\n+ */\n+public class BallerinaPopException extends Exception {", "originalCommit": "9d596a974e496b4e32c7607679f6d3723644b951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3ODA0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386378045", "bodyText": "Removed the class.", "author": "Maninda", "createdAt": "2020-03-02T13:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MDAzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MDE0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386350140", "bodyText": "What is the usage of this class?", "author": "anupama-pathirage", "createdAt": "2020-03-02T11:55:06Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/BallerinaSmtpException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Exception class for SMTP.\n+ */\n+public class BallerinaSmtpException extends Exception {", "originalCommit": "9d596a974e496b4e32c7607679f6d3723644b951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3ODE0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386378147", "bodyText": "Removed the class.", "author": "Maninda", "createdAt": "2020-03-02T13:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MDE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MDQ3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386350476", "bodyText": "Unused constant?", "author": "anupama-pathirage", "createdAt": "2020-03-02T11:55:53Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpConstants.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Constants for SMTP-related functions.\n+ *\n+ * @since 1.1.5\n+ */\n+public class SmtpConstants {\n+\n+    public static final String DEFAULT_PORT_NUMBER = \"587\";\n+    public static final String PROPS_HOST = \"host\";\n+    public static final String PROPS_PORT = \"port\";\n+    public static final String PROPS_USERNAME = \"username\";\n+    public static final String PROPS_PASSWORD = \"password\";\n+    public static final String PROPS_SESSION = \"session\";\n+    public static final String PROPS_SMTP_HOST = \"mail.smtp.host\";\n+    public static final String PROPS_SMTP_PORT = \"mail.smtp.port\";\n+    public static final String PROPS_SMTP_AUTH = \"mail.smtp.auth\";\n+    public static final String PROPS_SMTP_STARTTLS = \"mail.smtp.starttls.enable\";\n+    public static final String SMTP_ERROR_CODE = \"{ballerina/email}Smtp\";\n+    public static final String SMTP_ERROR_MESSAGE = \"Error while sending the email.\";", "originalCommit": "9d596a974e496b4e32c7607679f6d3723644b951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3ODI1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386378256", "bodyText": "Removed the constant.", "author": "Maninda", "createdAt": "2020-03-02T13:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MDQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MDYzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386350636", "bodyText": "Unused constant", "author": "anupama-pathirage", "createdAt": "2020-03-02T11:56:18Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/ImapConstants.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Constants for IMAP-related functions.\n+ *\n+ * @since 1.1.5\n+ */\n+public class ImapConstants {\n+    public static final String DEFAULT_PORT_NUMBER = \"143\";\n+    public static final String IMAP_PROTOCOL = \"imap\";\n+    public static final String PROPS_IMAP_HOST = \"mail.imap.host\";\n+    public static final String PROPS_IMAP_PORT = \"mail.imap.port\";\n+    public static final String PROPS_IMAP_STARTTLS = \"mail.imap.starttls.enable\";\n+    public static final String PROPS_IMAP_AUTH = \"mail.imap.auth\";\n+    public static final String IMAP_ERROR_CODE = \"{ballerina/email}Imap\";", "originalCommit": "9d596a974e496b4e32c7607679f6d3723644b951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3ODU2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386378562", "bodyText": "Removed the constant.", "author": "Maninda", "createdAt": "2020-03-02T13:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1MDYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1ODI0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386358242", "bodyText": "Shall we add @since annotation for all the new classes?", "author": "anupama-pathirage", "createdAt": "2020-03-02T12:15:10Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+/**\n+ * Contains functionality of POP Client.", "originalCommit": "9d596a974e496b4e32c7607679f6d3723644b951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3ODcxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386378712", "bodyText": "Added the annotation to all the Java classes.", "author": "Maninda", "createdAt": "2020-03-02T13:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1ODI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NTU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386865563", "bodyText": "It seems to be still @since is missing.", "author": "wggihan", "createdAt": "2020-03-03T08:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1ODI0Mg=="}], "type": "inlineReview"}, {"oid": "0a04c574f31a764074384de15bf1c3347982b1c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a04c574f31a764074384de15bf1c3347982b1c0", "message": "Correct the suggestions given in the PR.", "committedDate": "2020-03-02T12:50:38Z", "type": "commit"}, {"oid": "2ffbe8998b354a2e50f81a89679e2e1d2e17dcc1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ffbe8998b354a2e50f81a89679e2e1d2e17dcc1", "message": "Correct a change proposed in the PR.", "committedDate": "2020-03-02T12:54:43Z", "type": "commit"}, {"oid": "2ecfc51717a472f044dee3589bc3f300e6209834", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2ecfc51717a472f044dee3589bc3f300e6209834", "message": "Add a missing configuration.", "committedDate": "2020-03-02T17:33:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0NzYzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386847637", "bodyText": "Is this record being using currently?", "author": "wggihan", "createdAt": "2020-03-03T07:54:15Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Configurations for the connections.\n+#\n+# + host - IP Address\n+# + port - Port\n+# + username - Provider username\n+# + password - Provider password\n+public type ConnectionConfig record {|", "originalCommit": "2ecfc51717a472f044dee3589bc3f300e6209834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg5NTM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386895384", "bodyText": "Removed unwanted record definition.", "author": "Maninda", "createdAt": "2020-03-03T09:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg0NzYzNw=="}], "type": "inlineReview"}, {"oid": "212324bb74acc46ead997e86e8110d4630842423", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/212324bb74acc46ead997e86e8110d4630842423", "message": "fix failing completion tests", "committedDate": "2020-03-03T08:02:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NDMzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386864335", "bodyText": "This need to change as receive. Check other places as well.", "author": "wggihan", "createdAt": "2020-03-03T08:34:55Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents a POP Client, which interacts with a POP Server.\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the POP Client\n+    # + return - An `error` if failed while creating the client\n+    public function __init(PopConfig clientConfig) returns error? {\n+        return initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message.\n+    #\n+    # + filter - Filter parameters to read an email\n+    # + return - An `error` if failed to send the message to the recipient", "originalCommit": "2ecfc51717a472f044dee3589bc3f300e6209834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjkwMTM1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386901359", "bodyText": "Corrected.", "author": "Maninda", "createdAt": "2020-03-03T09:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NDMzNQ=="}], "type": "inlineReview"}, {"oid": "4cc543fd9ec5835a8388a2a9d79775b612bcfd74", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4cc543fd9ec5835a8388a2a9d79775b612bcfd74", "message": "Merge pull request #1 from nadeeshaan/email-local\n\nFix failing completion tests", "committedDate": "2020-03-03T08:40:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MjQzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386872434", "bodyText": "Shall we keep this password as a byte[] and convert to string on demand at least? @ldclakmal  wdyt?", "author": "wggihan", "createdAt": "2020-03-03T08:51:07Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+/**\n+ * Contains functionality of POP Client.\n+ */\n+public class PopClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopClient.class);\n+\n+    private PopClient() {\n+        // A Singleton class.\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP Properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param config Properties required to configure the POP Session\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return If an error occurs in the POP client, error\n+     */\n+    public static Object initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config,\n+                                            boolean isPop) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopClient][InitClient] Calling getProperties\");\n+        }\n+        Properties properties = PopUtil.getProperties(config, isPop);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;\n+            if (isPop) {\n+                store = session.getStore(PopConstants.POP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(PopConstants.PROPS_POP_HOST));\n+            } else {\n+                store = session.getStore(ImapConstants.IMAP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(ImapConstants.PROPS_IMAP_HOST));\n+            }\n+            clientEndpoint.addNativeData(PopConstants.PROPS_STORE, store);\n+            clientEndpoint.addNativeData(PopConstants.PROPS_USERNAME,\n+                    properties.getProperty(PopConstants.PROPS_USERNAME));\n+            clientEndpoint.addNativeData(PopConstants.PROPS_PASSWORD,\n+                    properties.getProperty(PopConstants.PROPS_PASSWORD));\n+            return null;\n+        } catch (NoSuchProviderException e) {\n+            log.error(\"Failed initialize client properties : \", e);\n+            return BValueCreator.createErrorValue(StringUtils.fromString(PopConstants.POP_ERROR_CODE),\n+                    e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Read emails from the server.\n+     * @param clientConnector Represents the POP Client class\n+     * @param filter Criteria, which is used to read emails\n+     * @return If successful return the received email, otherwise an error\n+     */\n+    public static Object readMessage(ObjectValue clientConnector, MapValue<Object, Object> filter) {\n+        try {\n+            Store store = (Store) clientConnector.getNativeData(PopConstants.PROPS_STORE);\n+            String host = (String) clientConnector.getNativeData(PopConstants.PROPS_HOST);\n+            String username = (String) clientConnector.getNativeData(PopConstants.PROPS_USERNAME);\n+            String password = (String) clientConnector.getNativeData(PopConstants.PROPS_PASSWORD);", "originalCommit": "2ecfc51717a472f044dee3589bc3f300e6209834", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NDM5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r387444394", "bodyText": "Let's consider the update in next phase of development.", "author": "Maninda", "createdAt": "2020-03-04T04:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MjQzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ0NjEyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r387446129", "bodyText": "@wggihan Yes, that makes these credentials more secure than keeping those just as string.", "author": "ldclakmal", "createdAt": "2020-03-04T04:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3MjQzNA=="}], "type": "inlineReview"}, {"oid": "0554cc79c8cc4646a2ec0f87c5d4dd4ceaf367ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0554cc79c8cc4646a2ec0f87c5d4dd4ceaf367ef", "message": "Correct an exception and add SSL to POP and IMAP protocols.", "committedDate": "2020-03-03T09:26:18Z", "type": "commit"}, {"oid": "af1ed20f8784a2c26436603ed2354e4525a9f9f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af1ed20f8784a2c26436603ed2354e4525a9f9f4", "message": "Merge branch 'email' of github.com:Maninda/ballerina-lang into email", "committedDate": "2020-03-03T09:26:52Z", "type": "commit"}, {"oid": "da9b0fe57be691ec81bd8353a3c264fa38b3ed18", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/da9b0fe57be691ec81bd8353a3c264fa38b3ed18", "message": "Correct a comment as proposed in the PR.", "committedDate": "2020-03-03T09:42:17Z", "type": "commit"}, {"oid": "5b1f4acd2689bf943d173aeba987b75cfc87dd8b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b1f4acd2689bf943d173aeba987b75cfc87dd8b", "message": "Removed conflicting configurations to fix the conflict.", "committedDate": "2020-03-03T11:45:00Z", "type": "commit"}, {"oid": "87665f8124387e7d00ff31826b0b89c4e7b71af3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87665f8124387e7d00ff31826b0b89c4e7b71af3", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into email", "committedDate": "2020-03-03T14:18:11Z", "type": "commit"}, {"oid": "fe1632c2b44d77f5cc468205076b42c0e070f24e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fe1632c2b44d77f5cc468205076b42c0e070f24e", "message": "update failing test configs", "committedDate": "2020-03-04T03:08:38Z", "type": "commit"}, {"oid": "7a8f3669b9866b48d66d8ccbf11c85d9b30fca7e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a8f3669b9866b48d66d8ccbf11c85d9b30fca7e", "message": "Merge pull request #2 from nadeeshaan/email-local\n\nUpdate failing test configs", "committedDate": "2020-03-04T03:39:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0NDczNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r387544736", "bodyText": "Shall we remove this else block? because already messageBody is an empty string;", "author": "Bhashinee", "createdAt": "2020-03-04T09:32:40Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to the POP3 protocol.\n+ *\n+ * @since 1.1.5\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        }\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(PopConstants.PROPS_POP_SSL_ENABLE, popConfig.getBooleanValue(PopConstants.PROPS_SSL));\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_SSL_ENABLE, popConfig.getBooleanValue(PopConstants.PROPS_SSL));\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        }\n+        return properties;\n+    }\n+\n+    /**\n+     * Generates MapValue object using the passed message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        }\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        if (toAddress != null) {\n+            for (Address address: toAddress) {\n+                toAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (ccAddress != null) {\n+            for (Address address: ccAddress) {\n+                ccAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (bccAddress != null) {\n+            for (Address address: bccAddress) {\n+                bccAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (replyToAddress != null) {\n+            for (Address address: replyToAddress) {\n+                replyToAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        String subject = getStringNullChecked(message.getSubject());\n+        String messageBody = \"\";\n+        if (message.isMimeType(\"text/plain\")) {\n+            if (message.getContent() != null) {\n+                messageBody = message.getContent().toString();\n+            } else {\n+                messageBody = \"\";", "originalCommit": "7a8f3669b9866b48d66d8ccbf11c85d9b30fca7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTM1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365356", "bodyText": "Fixed.", "author": "Maninda", "createdAt": "2020-03-08T12:37:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU0NDczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MDY0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r387550646", "bodyText": "Shall we get rid of this else block and simply return without having it in an else block?", "author": "Bhashinee", "createdAt": "2020-03-04T09:43:13Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to the POP3 protocol.\n+ *\n+ * @since 1.1.5\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        }\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(PopConstants.PROPS_POP_SSL_ENABLE, popConfig.getBooleanValue(PopConstants.PROPS_SSL));\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_SSL_ENABLE, popConfig.getBooleanValue(PopConstants.PROPS_SSL));\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        }\n+        return properties;\n+    }\n+\n+    /**\n+     * Generates MapValue object using the passed message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        }\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        if (toAddress != null) {\n+            for (Address address: toAddress) {\n+                toAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (ccAddress != null) {\n+            for (Address address: ccAddress) {\n+                ccAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (bccAddress != null) {\n+            for (Address address: bccAddress) {\n+                bccAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (replyToAddress != null) {\n+            for (Address address: replyToAddress) {\n+                replyToAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        String subject = getStringNullChecked(message.getSubject());\n+        String messageBody = \"\";\n+        if (message.isMimeType(\"text/plain\")) {\n+            if (message.getContent() != null) {\n+                messageBody = message.getContent().toString();\n+            } else {\n+                messageBody = \"\";\n+            }\n+        } else if (message.isMimeType(\"multipart/*\")) {\n+            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();\n+            messageBody = getTextFromMimeMultipart(mimeMultipart);\n+        }\n+        String fromAddress;\n+        if (message.getFrom() != null) {\n+            fromAddress = message.getFrom()[0].toString();\n+        } else {\n+            fromAddress = \"\";\n+        }\n+        String senderAddress = \"\";\n+        valueMap.put(EmailConstants.MESSAGE_TO, toAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_CC, ccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_BCC, bccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_REPLY_TO, replyToAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_SUBJECT, subject);\n+        valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY, messageBody);\n+        valueMap.put(EmailConstants.MESSAGE_FROM, fromAddress);\n+        valueMap.put(EmailConstants.MESSAGE_SENDER, senderAddress);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getMapValue] MapValue object created. Returning Object to PopClient\");\n+        }\n+        return BallerinaValues.createRecordValue(EmailConstants.EMAIL_PACKAGE_ID, PopConstants.EMAIL, valueMap);\n+    }\n+\n+    private static String getTextFromMimeMultipart(\n+            MimeMultipart mimeMultipart)  throws MessagingException, IOException {\n+        StringBuilder result = new StringBuilder();\n+        int count = mimeMultipart.getCount();\n+        for (int i = 0; i < count; i++) {\n+            BodyPart bodyPart = mimeMultipart.getBodyPart(i);\n+            if (bodyPart.isMimeType(\"text/plain\")) {\n+                result.append(\"\\n\").append(bodyPart.getContent());\n+                break; // without break same text appears twice in my tests\n+            } else if (bodyPart.isMimeType(\"text/html\")) {\n+                String html = (String) bodyPart.getContent();\n+                // result = result + \"\\n\" + org.jsoup.Jsoup.parse(html).text();\n+                result.append(\"\\n\").append(html);\n+            } else if (bodyPart.getContent() instanceof MimeMultipart) {\n+                result.append(getTextFromMimeMultipart((MimeMultipart) bodyPart.getContent()));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    private static String getStringNullChecked(String string) {\n+        return string == null ? \"\" : string;\n+    }\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from the Config\n+     * @return Port value as a string\n+     */\n+    private static String extractPortValue(long longValue, boolean isPop) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][extractPortValue] Extracting Port value\");\n+        }\n+        if (longValue <= 0 || longValue > MAX_PORT) {\n+            if (isPop) {\n+                log.error(\"Invalid port number given in configuration. Setting default port \"\n+                        + PopConstants.DEFAULT_PORT_NUMBER);\n+                return PopConstants.DEFAULT_PORT_NUMBER;\n+            } else {\n+                log.error(\"Invalid port number given in configuration. Setting default port \"\n+                        + ImapConstants.DEFAULT_PORT_NUMBER);\n+                return PopConstants.DEFAULT_PORT_NUMBER;\n+            }\n+        } else {\n+            return Long.toString(longValue);\n+        }", "originalCommit": "7a8f3669b9866b48d66d8ccbf11c85d9b30fca7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTQ0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365443", "bodyText": "Removed entire method for refactoring.", "author": "Maninda", "createdAt": "2020-03-08T12:38:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1MDY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1OTI0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r387559241", "bodyText": "We can use ternary operator and do this from a single line.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    }\n          \n          \n            \n                    return string != null ? string : \"\";", "author": "Bhashinee", "createdAt": "2020-03-04T09:58:04Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+/**\n+ * Contains the utility functions related to the SMTP protocol.\n+ *\n+ * @since 1.1.5\n+ */\n+public class SmtpUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates the Properties object using the passed MapValue.\n+     *\n+     * @param smtpConfig MapValue with the configuration values\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue smtpConfig) {\n+        Properties properties = new Properties();\n+        properties.put(SmtpConstants.PROPS_SMTP_HOST, smtpConfig.getStringValue(SmtpConstants.PROPS_HOST));\n+        properties.put(SmtpConstants.PROPS_SMTP_PORT,\n+                extractPortValue(smtpConfig.getIntValue(SmtpConstants.PROPS_PORT)));\n+        properties.put(SmtpConstants.PROPS_SMTP_AUTH, \"true\");\n+        properties.put(SmtpConstants.PROPS_SMTP_STARTTLS, \"true\"); //TLS\n+        properties.put(SmtpConstants.PROPS_USERNAME, smtpConfig.getStringValue(SmtpConstants.PROPS_USERNAME));\n+        properties.put(SmtpConstants.PROPS_PASSWORD, smtpConfig.getStringValue(SmtpConstants.PROPS_PASSWORD));\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[SmtpUtil][getProperties] Property object created. Returning Object to SMTPClient\");\n+        }\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from the Config\n+     * @return Port value as a string\n+     */\n+    private static String extractPortValue(long longValue) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[SmtpUtil][extractPortValue] Extracting Port value\");\n+        }\n+        if (longValue <= 0 || longValue > MAX_PORT) {\n+            log.error(\"Invalid port number given in configuration. Setting default port \"\n+                    + SmtpConstants.DEFAULT_PORT_NUMBER);\n+            return SmtpConstants.DEFAULT_PORT_NUMBER;\n+        } else {\n+            return Long.toString(longValue);\n+        }\n+    }\n+\n+    /**\n+     * Generates a MIME message to be sent as an email.\n+     *\n+     * @param session Session to which the message is attached\n+     * @param username User who sends the email\n+     * @param message Ballerina-typed data object\n+     * @return Email message as a MIME message\n+     * @throws AddressException If an error occurs related to Internet Address operations\n+     */\n+\n+    public static MimeMessage generateMessage(Session session, String username, MapValue message)\n+            throws AddressException {\n+        MimeMessage emailMessage = new MimeMessage(session);\n+        String[] toAddress = getNullCheckedStringArray(message, EmailConstants.MESSAGE_TO);\n+        String[] ccAddress = getNullCheckedStringArray(message, EmailConstants.MESSAGE_CC);\n+        String[] bccAddress = getNullCheckedStringArray(message, EmailConstants.MESSAGE_BCC);\n+        String[] replyToAddress = getNullCheckedStringArray(message, EmailConstants.MESSAGE_REPLY_TO);\n+        int toAddressArrayLength = getNullArrayLengthChecked(toAddress);\n+        int ccAddressArrayLength = getNullArrayLengthChecked(ccAddress);\n+        int bccAddressArrayLength = getNullArrayLengthChecked(bccAddress);\n+        int replyToAddressArrayLength = getNullArrayLengthChecked(replyToAddress);\n+        Address[] toAddressArray = new Address[toAddressArrayLength];\n+        Address[] ccAddressArray = new Address[ccAddressArrayLength];\n+        Address[] bccAddressArray = new Address[bccAddressArrayLength];\n+        Address[] replyToAddressArray = new Address[replyToAddressArrayLength];\n+        for (int i = 0; i < toAddressArrayLength; i++) {\n+            toAddressArray[i] = new InternetAddress(toAddress[i]);\n+        }\n+        for (int i = 0; i < ccAddressArrayLength; i++) {\n+            ccAddressArray[i] = new InternetAddress(ccAddress[i]);\n+        }\n+        for (int i = 0; i < bccAddressArrayLength; i++) {\n+            bccAddressArray[i] = new InternetAddress(bccAddress[i]);\n+        }\n+        for (int i = 0; i < replyToAddressArrayLength; i++) {\n+            replyToAddressArray[i] = new InternetAddress(replyToAddress[i]);\n+        }\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[SmtpUtil][generateMessage] Generated TO, CC and BCC Address Arrays.\");\n+        }\n+        String subject = message.getStringValue(EmailConstants.MESSAGE_SUBJECT);\n+        String messageBody = message.getStringValue(EmailConstants.MESSAGE_MESSAGE_BODY);\n+        String fromAddress = message.getStringValue(EmailConstants.MESSAGE_FROM);\n+        if (fromAddress == null || fromAddress.isEmpty()) {\n+            fromAddress = username;\n+        }\n+        String senderAddress = getNullCheckedString(message.getStringValue(EmailConstants.MESSAGE_SENDER));\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[SmtpUtil][generateMessage] Generating MimeMessage\");\n+        }\n+\n+        try {\n+            emailMessage.setRecipients(Message.RecipientType.TO, toAddressArray);\n+            if (ccAddressArrayLength > 0) {\n+                emailMessage.setRecipients(Message.RecipientType.CC, ccAddressArray);\n+            }\n+            if (bccAddressArrayLength > 0) {\n+                emailMessage.setRecipients(Message.RecipientType.BCC, bccAddressArray);\n+            }\n+            if (replyToAddressArrayLength > 0) {\n+                emailMessage.setReplyTo(replyToAddressArray);\n+            }\n+            emailMessage.setSubject(subject);\n+            emailMessage.setText(messageBody);\n+            emailMessage.setFrom(new InternetAddress(fromAddress));\n+            if (!senderAddress.isEmpty()) {\n+                emailMessage.setSender(new InternetAddress(senderAddress));\n+            }\n+        } catch (MessagingException e) {\n+            log.error(\"Failed to send message : \", e);\n+        }\n+        return emailMessage;\n+    }\n+\n+    private static String[] getNullCheckedStringArray(MapValue mapValue, String parameter) {\n+        ArrayValue arrayValue = mapValue.getArrayValue(parameter);\n+        if (arrayValue != null) {\n+            return arrayValue.getStringArray();\n+        } else {\n+            return new String[0];\n+        }\n+    }\n+\n+    private static int getNullArrayLengthChecked(String[] addresses) {\n+        if (addresses == null) {\n+            return 0;\n+        } else {\n+            return addresses.length;\n+        }\n+    }\n+\n+    private static String getNullCheckedString(String string) {\n+        if (string != null) {\n+            return string;\n+        } else {\n+            return \"\";\n+        }", "originalCommit": "7a8f3669b9866b48d66d8ccbf11c85d9b30fca7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTQ3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365479", "bodyText": "Added to the commit.", "author": "Maninda", "createdAt": "2020-03-08T12:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU1OTI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MjAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r387562029", "bodyText": "Shall we rename this to 'enableSsl'?", "author": "Bhashinee", "createdAt": "2020-03-04T10:02:57Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client, which interacts with an IMAP Server.\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the IMAP Client\n+    # + return - An `error` if failed while creating the client\n+    public function __init(ImapConfig clientConfig) returns error? {\n+        return initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Reads a message.\n+    #\n+    # + filter - Filter parameters to read an email\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read(Filter filter = { folder: \"INBOX\" }) returns Email|error? {\n+        return imapRead(self, filter);\n+    }\n+\n+};\n+\n+# Configuration of the IMAP Endpoint.\n+#\n+# + host - Host address of the IMAP server\n+# + port - Port number of the IMAP server\n+# + ssl - SSL enable\n+# + username - Username to access the IMAP server\n+# + password - Password to access the IMAP server\n+public type ImapConfig record {|\n+    string host;\n+    int port = 143;\n+    boolean ssl = true;", "originalCommit": "7a8f3669b9866b48d66d8ccbf11c85d9b30fca7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTQ5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365494", "bodyText": "Changed.", "author": "Maninda", "createdAt": "2020-03-08T12:39:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MjAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MjM2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r387562363", "bodyText": "Shall we rename this to enableSsl?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean ssl = true;\n          \n          \n            \n                boolean enableSsl = true;", "author": "Bhashinee", "createdAt": "2020-03-04T10:03:33Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents a POP Client, which interacts with a POP Server.\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the POP Client\n+    # + return - An `error` if failed while creating the client\n+    public function __init(PopConfig clientConfig) returns error? {\n+        return initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message.\n+    #\n+    # + filter - Filter parameters to read an email\n+    # + return - An `error` if failed to receive the message to the recipient\n+    public remote function read(Filter filter = { folder: \"INBOX\" }) returns Email|error? {\n+        return popRead(self, filter);\n+    }\n+\n+};\n+\n+# Configuration of the POP Endpoint.\n+#\n+# + host - Host address of the POP server\n+# + port - Port number of the POP server\n+# + ssl - SSL enable\n+# + username - Username to access the POP server\n+# + password - Password to access the POP server\n+public type PopConfig record {|\n+    string host;\n+    int port = 995;\n+    boolean ssl = true;", "originalCommit": "7a8f3669b9866b48d66d8ccbf11c85d9b30fca7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTUzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365532", "bodyText": "Changed.", "author": "Maninda", "createdAt": "2020-03-08T12:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MjM2Mw=="}], "type": "inlineReview"}, {"oid": "3df50a3cad31bac13c14ae5ee47b10cc497f8100", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3df50a3cad31bac13c14ae5ee47b10cc497f8100", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into email", "committedDate": "2020-03-04T11:13:31Z", "type": "commit"}, {"oid": "e4ff5e2809f06371874b4c7d347bdbf1cf9d845e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e4ff5e2809f06371874b4c7d347bdbf1cf9d845e", "message": "Merge branch 'email' of github.com:Maninda/ballerina-lang into email", "committedDate": "2020-03-04T14:00:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxOTU4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r387719582", "bodyText": "Both if else blocks return the same 'PopConstants.DEFAULT_PORT_NUMBER;' . Is this correct? Please check. And I think we can get rid of the else block.", "author": "Bhashinee", "createdAt": "2020-03-04T14:56:56Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to the POP3 protocol.\n+ *\n+ * @since 1.1.5\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        }\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(PopConstants.PROPS_POP_SSL_ENABLE, popConfig.getBooleanValue(PopConstants.PROPS_SSL));\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_SSL_ENABLE, popConfig.getBooleanValue(PopConstants.PROPS_SSL));\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        }\n+        return properties;\n+    }\n+\n+    /**\n+     * Generates MapValue object using the passed message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        }\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        if (toAddress != null) {\n+            for (Address address: toAddress) {\n+                toAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (ccAddress != null) {\n+            for (Address address: ccAddress) {\n+                ccAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (bccAddress != null) {\n+            for (Address address: bccAddress) {\n+                bccAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        if (replyToAddress != null) {\n+            for (Address address: replyToAddress) {\n+                replyToAddressArrayValue.append(address.toString());\n+            }\n+        }\n+        String subject = getStringNullChecked(message.getSubject());\n+        String messageBody = \"\";\n+        if (message.isMimeType(\"text/plain\")) {\n+            if (message.getContent() != null) {\n+                messageBody = message.getContent().toString();\n+            } else {\n+                messageBody = \"\";\n+            }\n+        } else if (message.isMimeType(\"multipart/*\")) {\n+            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();\n+            messageBody = getTextFromMimeMultipart(mimeMultipart);\n+        }\n+        String fromAddress;\n+        if (message.getFrom() != null) {\n+            fromAddress = message.getFrom()[0].toString();\n+        } else {\n+            fromAddress = \"\";\n+        }\n+        String senderAddress = \"\";\n+        valueMap.put(EmailConstants.MESSAGE_TO, toAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_CC, ccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_BCC, bccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_REPLY_TO, replyToAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_SUBJECT, subject);\n+        valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY, messageBody);\n+        valueMap.put(EmailConstants.MESSAGE_FROM, fromAddress);\n+        valueMap.put(EmailConstants.MESSAGE_SENDER, senderAddress);\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getMapValue] MapValue object created. Returning Object to PopClient\");\n+        }\n+        return BallerinaValues.createRecordValue(EmailConstants.EMAIL_PACKAGE_ID, PopConstants.EMAIL, valueMap);\n+    }\n+\n+    private static String getTextFromMimeMultipart(\n+            MimeMultipart mimeMultipart)  throws MessagingException, IOException {\n+        StringBuilder result = new StringBuilder();\n+        int count = mimeMultipart.getCount();\n+        for (int i = 0; i < count; i++) {\n+            BodyPart bodyPart = mimeMultipart.getBodyPart(i);\n+            if (bodyPart.isMimeType(\"text/plain\")) {\n+                result.append(\"\\n\").append(bodyPart.getContent());\n+                break; // without break same text appears twice in my tests\n+            } else if (bodyPart.isMimeType(\"text/html\")) {\n+                String html = (String) bodyPart.getContent();\n+                // result = result + \"\\n\" + org.jsoup.Jsoup.parse(html).text();\n+                result.append(\"\\n\").append(html);\n+            } else if (bodyPart.getContent() instanceof MimeMultipart) {\n+                result.append(getTextFromMimeMultipart((MimeMultipart) bodyPart.getContent()));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    private static String getStringNullChecked(String string) {\n+        return string == null ? \"\" : string;\n+    }\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from the Config\n+     * @return Port value as a string\n+     */\n+    private static String extractPortValue(long longValue, boolean isPop) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][extractPortValue] Extracting Port value\");\n+        }\n+        if (longValue <= 0 || longValue > MAX_PORT) {\n+            if (isPop) {\n+                log.error(\"Invalid port number given in configuration. Setting default port \"\n+                        + PopConstants.DEFAULT_PORT_NUMBER);\n+                return PopConstants.DEFAULT_PORT_NUMBER;\n+            } else {\n+                log.error(\"Invalid port number given in configuration. Setting default port \"\n+                        + ImapConstants.DEFAULT_PORT_NUMBER);\n+                return PopConstants.DEFAULT_PORT_NUMBER;", "originalCommit": "7a8f3669b9866b48d66d8ccbf11c85d9b30fca7e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTU5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365599", "bodyText": "Removed the entire method during refactoring.", "author": "Maninda", "createdAt": "2020-03-08T12:40:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcxOTU4Mg=="}], "type": "inlineReview"}, {"oid": "f1730f0c9fb3fe59d4b5190425517b90991638e8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1730f0c9fb3fe59d4b5190425517b90991638e8", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into email", "committedDate": "2020-03-04T15:42:15Z", "type": "commit"}, {"oid": "c0d8e5129f4ac934ff93354bc00a69c58d584271", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0d8e5129f4ac934ff93354bc00a69c58d584271", "message": "Merge branch 'email' of github.com:Maninda/ballerina-lang into email2", "committedDate": "2020-03-04T15:57:29Z", "type": "commit"}, {"oid": "ba00ef47b5c7aed9c31f43585e13a82fe1c185fa", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba00ef47b5c7aed9c31f43585e13a82fe1c185fa", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into email2", "committedDate": "2020-03-05T08:14:11Z", "type": "commit"}, {"oid": "2f09afdaf62800565054c69fe3dd3bf40db0f899", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2f09afdaf62800565054c69fe3dd3bf40db0f899", "message": "Fix build failure due to interop dependancy mechanism change.", "committedDate": "2020-03-05T09:41:46Z", "type": "commit"}, {"oid": "f5acb52cc5c02d2ff00efa94671752aa7284ba84", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5acb52cc5c02d2ff00efa94671752aa7284ba84", "message": "Merge branch 'email' of github.com:Maninda/ballerina-lang into email2", "committedDate": "2020-03-05T11:50:55Z", "type": "commit"}, {"oid": "8fe4c1945db3f79c6ae3035fc65a87216c3f5bc8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fe4c1945db3f79c6ae3035fc65a87216c3f5bc8", "message": "Add fix to build failure.", "committedDate": "2020-03-05T11:53:43Z", "type": "commit"}, {"oid": "41c2ec8ca7e7b5fa457b862fca13672be6bf3eaf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41c2ec8ca7e7b5fa457b862fca13672be6bf3eaf", "message": "Correct the tab space.", "committedDate": "2020-03-05T11:57:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxODQ2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r388718462", "bodyText": "Do we need this kind of debug logs? Is this adding any value? IMO, at least we should print values, else this doesn't help much when it comes to debugging.", "author": "wggihan", "createdAt": "2020-03-06T05:23:36Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to the POP3 protocol.\n+ *\n+ * @since 1.1.5\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        if (log.isDebugEnabled()) {", "originalCommit": "41c2ec8ca7e7b5fa457b862fca13672be6bf3eaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTY1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365652", "bodyText": "Removed all unwanted debug logs.", "author": "Maninda", "createdAt": "2020-03-08T12:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxODQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMDQzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r388720438", "bodyText": "We can break this into smaller methods that return Address[]? We can avoid this longer method IMO.", "author": "wggihan", "createdAt": "2020-03-06T05:33:19Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to the POP3 protocol.\n+ *\n+ * @since 1.1.5\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        }\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(PopConstants.PROPS_POP_SSL_ENABLE, popConfig.getBooleanValue(PopConstants.PROPS_SSL));\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_SSL_ENABLE, popConfig.getBooleanValue(PopConstants.PROPS_SSL));\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        }\n+        return properties;\n+    }\n+\n+    /**\n+     * Generates MapValue object using the passed message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        }\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);", "originalCommit": "41c2ec8ca7e7b5fa457b862fca13672be6bf3eaf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NTY3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389365676", "bodyText": "Broken into methods.", "author": "Maninda", "createdAt": "2020-03-08T12:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMDQzOA=="}], "type": "inlineReview"}, {"oid": "cb2289aaaf42f9464819f6f0de78b9e125bb8236", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cb2289aaaf42f9464819f6f0de78b9e125bb8236", "message": "Add changes proposed in the PR and to refactor code", "committedDate": "2020-03-08T12:04:23Z", "type": "commit"}, {"oid": "a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "message": "Resolve conflicts between branches", "committedDate": "2020-03-08T12:36:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwNjEwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r389606107", "bodyText": "Do we need to add greenmail as an implementation dependency? we only use this for testing.", "author": "daneshk", "createdAt": "2020-03-09T11:37:09Z", "path": "stdlib/email/build.gradle", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+apply from: \"$rootDir/gradle/balNativeLibProject.gradle\"\n+apply from: \"$rootDir/gradle/baseNativeStdLibProject.gradle\"\n+\n+configurations.testCompileClasspath {\n+    resolutionStrategy {\n+        preferProjectModules()\n+    }\n+}\n+\n+dependencies {\n+    baloCreat project(':lib-creator')\n+    implementation project(':ballerina-lang')\n+    implementation project(':ballerina-runtime')\n+    implementation project(':ballerina-time')\n+    implementation project(':ballerina-log-api')\n+    implementation project(':ballerina-file')\n+    implementation 'com.sun.mail:javax.mail:1.6.2'\n+    implementation 'com.icegreen:greenmail:1.5.11'", "originalCommit": "a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjAwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390086008", "bodyText": "I think we need it for now.", "author": "daneshk", "createdAt": "2020-03-10T04:11:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYwNjEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390086497", "bodyText": "Shall we use the most simple client (without this config) for the basic use case? We can specify the config details in the latter as more details. WDYT?", "author": "wggihan", "createdAt": "2020-03-10T04:13:13Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,97 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3, and IMAP4 protocols.\n+\n+## Sample\n+\n+The below sample uses the functions in the module to send an email using the SMTP protocol.\n+\n+```ballerina\n+import ballerina/email;\n+import ballerina/io;\n+\n+email:SmtpConfig smtpConfig = {", "originalCommit": "a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzIyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390203224", "bodyText": "Changed accordingly.", "author": "Maninda", "createdAt": "2020-03-10T09:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NjQ5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzI3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390087278", "bodyText": "Do we have a concept of a store in our email connector?", "author": "wggihan", "createdAt": "2020-03-10T04:16:46Z", "path": "stdlib/email/src/main/ballerina/src/email/email_errors.bal", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Record type to hold the details of an error.\n+#\n+# + message - Specific error message of the error.\n+# + cause - Any other error, which causes this error.\n+public type Detail record {\n+    string message;\n+    error cause?;\n+};\n+\n+# SMTP email send error.\n+public const EMAIL_SEND_ERROR = \"{ballerina/email}EmailSendError\";\n+# Represents an error that occurs when sending an email fails.\n+public type EmailSendError error<EMAIL_SEND_ERROR, Detail>;\n+\n+# Identifies an email server store access failure error.\n+public const GET_STORE_ERROR = \"{ballerina/email}GetStoreError\";", "originalCommit": "a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390203505", "bodyText": "Changed to a different name.", "author": "Maninda", "createdAt": "2020-03-10T09:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA4NzI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNzM2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390117367", "bodyText": "Shall we consolidate this to a single line?", "author": "wggihan", "createdAt": "2020-03-10T06:35:20Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailAccessUtil;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+/**\n+ * Contains the functionality of email reading with POP and IMAP clients.\n+ *\n+ * @since 1.2.0\n+ */\n+public class EmailAccessClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailAccessClient.class);\n+\n+    private EmailAccessClient() {\n+        // A Singleton class.\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param host Represents the host address of POP server\n+     * @param username Represents the username of the POP server\n+     * @param password Represents the password of the POP server\n+     * @param config Properties required to configure the POP session\n+     * @return If an error occurs in the POP client, returns an error\n+     */\n+    public static Object initPopClientEndpoint(ObjectValue clientEndpoint, String host, String username,\n+                                               String password, MapValue<Object, Object> config) {\n+        Properties properties = EmailAccessUtil.getPopProperties(config, host);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;", "originalCommit": "a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzYxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390203616", "bodyText": "Consolidated.", "author": "Maninda", "createdAt": "2020-03-10T09:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExNzM2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExOTc4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390119781", "bodyText": "IMO, we can move these to another smaller methods as well.", "author": "wggihan", "createdAt": "2020-03-10T06:45:22Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailAccessUtil.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import com.sun.mail.imap.IMAPMessage;\n+import com.sun.mail.pop3.POP3Message;\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.api.BArray;\n+import org.ballerinalang.jvm.values.api.BValueCreator;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains utility functions related to the POP and IMAP protocols.\n+ *\n+ * @since 1.2.0\n+ */\n+public class EmailAccessUtil {\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param emailAccessConfig MapValue with the configuration values\n+     * @param host Host address of email server\n+     * @return Properties Email server access properties\n+     */\n+    public static Properties getPopProperties(MapValue emailAccessConfig, String host) {\n+        Properties properties = new Properties();\n+        properties.put(EmailConstants.PROPS_POP_HOST, host);\n+        properties.put(EmailConstants.PROPS_POP_PORT,\n+                Long.toString(emailAccessConfig.getIntValue(EmailConstants.PROPS_PORT)));\n+        properties.put(EmailConstants.PROPS_POP_AUTH, \"true\");\n+        properties.put(EmailConstants.PROPS_POP_STARTTLS, \"true\");\n+        properties.put(EmailConstants.PROPS_POP_SSL_ENABLE,\n+                emailAccessConfig.getBooleanValue(EmailConstants.PROPS_SSL));\n+        properties.put(EmailConstants.MAIL_STORE_PROTOCOL, EmailConstants.POP_PROTOCOL);\n+        return properties;\n+    }\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param emailAccessConfig MapValue with the configuration values\n+     * @param host Host address of email server\n+     * @return Properties Email server access properties\n+     */\n+    public static Properties getImapProperties(MapValue emailAccessConfig, String host) {\n+        Properties properties = new Properties();\n+        properties.put(EmailConstants.PROPS_IMAP_HOST, host);\n+        properties.put(EmailConstants.PROPS_IMAP_PORT,\n+                Long.toString(emailAccessConfig.getIntValue(EmailConstants.PROPS_PORT)));\n+        properties.put(EmailConstants.PROPS_IMAP_AUTH, \"true\");\n+        properties.put(EmailConstants.PROPS_IMAP_STARTTLS, \"true\");\n+        properties.put(EmailConstants.PROPS_IMAP_SSL_ENABLE,\n+                emailAccessConfig.getBooleanValue(EmailConstants.PROPS_SSL));\n+        properties.put(EmailConstants.MAIL_STORE_PROTOCOL, EmailConstants.IMAP_PROTOCOL);\n+        return properties;\n+    }\n+\n+    /**\n+     * Generates MapValue object using the passed message.\n+     *\n+     * @param message Email message received\n+     * @return MapValue Ballerina compatible map object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        Map<String, Object> valueMap = new HashMap<>();\n+        BArray toAddressArrayValue = getAddressBArrayList(message.getRecipients(Message.RecipientType.TO));\n+        BArray ccAddressArrayValue = getAddressBArrayList(message.getRecipients(Message.RecipientType.CC));\n+        BArray bccAddressArrayValue = getAddressBArrayList(message.getRecipients(Message.RecipientType.BCC));\n+        BArray replyToAddressArrayValue = getAddressBArrayList(message.getReplyTo());\n+        String subject = getStringNullChecked(message.getSubject());\n+        String messageBody = \"\";\n+        if (message.isMimeType(\"text/plain\")) {\n+            if (message.getContent() != null) {\n+                messageBody = message.getContent().toString();\n+            }\n+        } else if (message.isMimeType(\"multipart/*\")) {\n+            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();\n+            messageBody = getTextFromMimeMultipart(mimeMultipart);\n+        }\n+        String fromAddress = \"\";\n+        if (message.getFrom() != null) {\n+            fromAddress = message.getFrom()[0].toString();\n+        }", "originalCommit": "a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzc4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390203787", "bodyText": "Broken into small methods.", "author": "Maninda", "createdAt": "2020-03-10T09:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExOTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMzM4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390123388", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public const DEFAULT_FOLDER = \"INBOX\";\n          \n          \n            \n            public const DEFAULT_FOLDER = \"INBOX\";", "author": "ldclakmal", "createdAt": "2020-03-10T06:59:18Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,39 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Email message sending and receiving configurations.\n+#\n+# + to - TO address list\n+# + cc - CC address list\n+# + bcc - BCC address list\n+# + subject - Subject of email\n+# + body - Body of the email message\n+# + from - From address\n+# + sender - Sender's address\n+# + replyTo - Reply To addresses\n+public type Email record {|\n+    string[] to;\n+    string[] cc?;\n+    string[] bcc?;\n+    string subject;\n+    string body;\n+    string 'from;\n+    string sender?;\n+    string[] replyTo?;\n+|};\n+\n+# Default email folder to read emails.\n+public const DEFAULT_FOLDER = \"INBOX\";", "originalCommit": "a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE2NTk1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390165958", "bodyText": "What is the difference you added?", "author": "Maninda", "createdAt": "2020-03-10T08:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMzM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MjUyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390192527", "bodyText": "I added a new line at the end of the file.", "author": "ldclakmal", "createdAt": "2020-03-10T09:40:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMzM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwOTc3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390209778", "bodyText": "Added new line character at the end of the file.", "author": "Maninda", "createdAt": "2020-03-10T10:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyMzM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyNDc1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390124757", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Store store;\n          \n          \n            \n                        store = session.getStore(EmailConstants.IMAP_PROTOCOL);\n          \n          \n            \n                        Store store = session.getStore(EmailConstants.IMAP_PROTOCOL);", "author": "ldclakmal", "createdAt": "2020-03-10T07:04:26Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/EmailAccessClient.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.StringUtils;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.EmailAccessUtil;\n+import org.ballerinalang.stdlib.email.util.EmailConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+/**\n+ * Contains the functionality of email reading with POP and IMAP clients.\n+ *\n+ * @since 1.2.0\n+ */\n+public class EmailAccessClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(EmailAccessClient.class);\n+\n+    private EmailAccessClient() {\n+        // A Singleton class.\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param host Represents the host address of POP server\n+     * @param username Represents the username of the POP server\n+     * @param password Represents the password of the POP server\n+     * @param config Properties required to configure the POP session\n+     * @return If an error occurs in the POP client, returns an error\n+     */\n+    public static Object initPopClientEndpoint(ObjectValue clientEndpoint, String host, String username,\n+                                               String password, MapValue<Object, Object> config) {\n+        Properties properties = EmailAccessUtil.getPopProperties(config, host);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;\n+            store = session.getStore(EmailConstants.POP_PROTOCOL);\n+            clientEndpoint.addNativeData(EmailConstants.PROPS_STORE, store);\n+            clientEndpoint.addNativeData(EmailConstants.PROPS_HOST, host);\n+            clientEndpoint.addNativeData(EmailConstants.PROPS_USERNAME, username);\n+            clientEndpoint.addNativeData(EmailConstants.PROPS_PASSWORD, password);\n+            return null;\n+        } catch (NoSuchProviderException e) {\n+            log.error(\"Failed initialize client properties : \", e);\n+            return BallerinaErrors.createError(StringUtils.fromString(\n+                    EmailConstants.EMAIL_ACCESS_GET_STORE_ERROR), e.getMessage());\n+        }\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the IMAP properties.\n+     * @param clientEndpoint Represents the IMAP Client class\n+     * @param host Represents the host address of IMAP server\n+     * @param username Represents the username of the IMAP server\n+     * @param password Represents the password of the IMAP server\n+     * @param config Properties required to configure the IMAP session\n+     * @return If an error occurs in the IMAP client, returns an error\n+     */\n+    public static Object initImapClientEndpoint(ObjectValue clientEndpoint, String host, String username,\n+                                               String password, MapValue<Object, Object> config) {\n+        Properties properties = EmailAccessUtil.getImapProperties(config, host);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;\n+            store = session.getStore(EmailConstants.IMAP_PROTOCOL);", "originalCommit": "a94b3b875d5738c0c5c5b105fe8fcfa4011deffc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNDM3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390204378", "bodyText": "Consolidated the 2 lines.", "author": "Maninda", "createdAt": "2020-03-10T10:00:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyNDc1Nw=="}], "type": "inlineReview"}, {"oid": "77fa70f1687b2086a788c357da64b5bf0b01b6bf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77fa70f1687b2086a788c357da64b5bf0b01b6bf", "message": "Fix issues identified in a code review", "committedDate": "2020-03-10T09:57:14Z", "type": "commit"}, {"oid": "3e6db61d7d049161664b99b1b3549611c250a584", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e6db61d7d049161664b99b1b3549611c250a584", "message": "Add new line character at the end of the file", "committedDate": "2020-03-10T10:09:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDcyMDczMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r390720733", "bodyText": "Shall we change this to ClientInitError?", "author": "daneshk", "createdAt": "2020-03-11T02:56:57Z", "path": "stdlib/email/src/main/ballerina/src/email/email_errors.bal", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Record type to hold the details of an error.\n+#\n+# + message - Specific error message of the error.\n+# + cause - Any other error, which causes this error.\n+public type Detail record {\n+    string message;\n+    error cause?;\n+};\n+\n+# SMTP email send error.\n+public const SEND_ERROR = \"{ballerina/email}SendError\";\n+# Represents an error that occurs when sending an email fails.\n+public type SendError error<SEND_ERROR, Detail>;\n+\n+# Identifies an email server store access failure error.\n+public const READ_CLIENT_INIT_ERROR = \"{ballerina/email}ReadClientInitError\";", "originalCommit": "3e6db61d7d049161664b99b1b3549611c250a584", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "587a694cf427770e7af86613c47f2aa9d02dc9d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/587a694cf427770e7af86613c47f2aa9d02dc9d4", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into email2", "committedDate": "2020-03-11T06:14:59Z", "type": "commit"}, {"oid": "74c8018bbb1c2087c33324206f1d804d89f6ba7e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/74c8018bbb1c2087c33324206f1d804d89f6ba7e", "message": "Fix language server issues", "committedDate": "2020-03-11T06:54:56Z", "type": "commit"}, {"oid": "ed94f0aae3e2be3e4c45833b5ad502179129bbf6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ed94f0aae3e2be3e4c45833b5ad502179129bbf6", "message": "Implement https://github.com/ballerina-platform/ballerina-lang/issues/21179 for developing Email Connector.", "committedDate": "2020-02-28T05:07:00Z", "type": "commit"}, {"oid": "213563149712983bfc13b7ee63a88e48648720d7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/213563149712983bfc13b7ee63a88e48648720d7", "message": "Resolve merge conflicts in  https://github.com/ballerina-platform/ballerina-lang/issues/21179 for developing Email Connector.", "committedDate": "2020-02-28T05:27:07Z", "type": "commit"}, {"oid": "036996fec7841509fee2d39cd46107ff2c8377f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/036996fec7841509fee2d39cd46107ff2c8377f4", "message": "Removed unwanted files.", "committedDate": "2020-02-28T05:45:47Z", "type": "commit"}, {"oid": "1104373f2b8beb799886ad0fc618809d0d3a213b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1104373f2b8beb799886ad0fc618809d0d3a213b", "message": "Corrected merge errors", "committedDate": "2020-02-28T05:56:05Z", "type": "commit"}, {"oid": "4c84cc9b68e836ad7af72296b005754fbc02a6e1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c84cc9b68e836ad7af72296b005754fbc02a6e1", "message": "Fix some code format issues.", "committedDate": "2020-02-28T06:14:54Z", "type": "commit"}, {"oid": "63df7d30118d1066147ba44cb94e949f04fe05a8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63df7d30118d1066147ba44cb94e949f04fe05a8", "message": "Fixed doc generation issues", "committedDate": "2020-02-28T07:08:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NDc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385564786", "bodyText": "Shall we remove this commented line?", "author": "ldclakmal", "createdAt": "2020-02-28T08:31:14Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for SMTP Client\n+    public function __init(SmtpConfig clientConfig) {\n+        error? response = initSmtpClientEndpoint(self, clientConfig);\n+    }\n+\n+    # Used to send a message\n+    #\n+    # + email - String message\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function send(Email email) returns error? {\n+        return send(self, email);\n+    }\n+\n+};\n+\n+# Configuration of the SMTP Endpoint\n+#\n+# + host - Host address of SMTP server\n+# + port - Port number of SMTP server\n+# + username - Username to access SMTP server\n+# + password - Password to access SMTP server\n+public type SmtpConfig record {|\n+    //ConnectionConfig? connConfig = ();", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NjY1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385766651", "bodyText": "Removed.", "author": "Maninda", "createdAt": "2020-02-28T15:41:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NDc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM1NzE0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386357149", "bodyText": "Is this removed? Seems it is still there", "author": "anupama-pathirage", "createdAt": "2020-03-02T12:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NDc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NTc3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386375773", "bodyText": "Sorry that is a mistake. I just removed it.", "author": "Maninda", "createdAt": "2020-03-02T12:55:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NDc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565001", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:31:44Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTA4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565085", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:31:58Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaPopException;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTQ4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565481", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:32:58Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTU0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565549", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:33:09Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaSmtpException;\n+import org.ballerinalang.stdlib.email.util.SmtpConstants;\n+import org.ballerinalang.stdlib.email.util.SmtpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTcxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565714", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:33:33Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.service.compiler;\n+\n+import org.ballerinalang.compiler.plugins.AbstractCompilerPlugin;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTc3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565778", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:33:42Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.service.compiler;\n+\n+import org.ballerinalang.compiler.plugins.AbstractCompilerPlugin;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+\n+\n+/**\n+ * This class validates annotations attached to Ballerina service and resource nodes.\n+ *\n+ * @since 1.1.3\n+ */\n+class EmailListenerCompilerPlugin extends AbstractCompilerPlugin {\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTk5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565998", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:34:16Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/EmailConstants.java", "diffHunk": "@@ -0,0 +1,52 @@\n+ /*\n+  * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  *\n+  * WSO2 Inc. licenses this file to you under the Apache License,\n+  * Version 2.0 (the \"License\"); you may not use this file except\n+  * in compliance with the License.\n+  * You may obtain a copy of the License at\n+  *\n+  *   http://www.apache.org/licenses/LICENSE-2.0\n+  *\n+  * Unless required by applicable law or agreed to in writing,\n+  * software distributed under the License is distributed on an\n+  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  * KIND, either express or implied.  See the License for the\n+  * specific language governing permissions and limitations\n+  * under the License.\n+  */\n+\n+ package org.ballerinalang.stdlib.email.util;\n+\n+ import org.ballerinalang.jvm.types.BPackage;\n+\n+ import static org.ballerinalang.jvm.util.BLangConstants.BALLERINA_BUILTIN_PKG_PREFIX;\n+\n+ /**\n+  * Constants for email package functions.\n+  *\n+  * @since 1.1.3\n+  */\n+ public class EmailConstants {\n+\n+     /**\n+      * Package path.\n+      */\n+     public static final BPackage EMAIL_PACKAGE_ID = new BPackage(BALLERINA_BUILTIN_PKG_PREFIX, \"email\");\n+\n+     public static final String MESSAGE_TO = \"to\";\n+     public static final String MESSAGE_CC = \"cc\";\n+     public static final String MESSAGE_BCC = \"bcc\";\n+     public static final String MESSAGE_SUBJECT = \"subject\";\n+     public static final String MESSAGE_MESSAGE_BODY = \"body\";\n+     public static final String MESSAGE_FROM = \"from\";\n+     public static final String MESSAGE_SENDER = \"sender\";\n+     public static final String MESSAGE_REPLY_TO = \"replyTo\";\n+\n+     public static final String MAIL_STORE_PROTOCOL = \"mail.store.protocol\";\n+\n+ }\n+\n+\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjExMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566112", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:34:37Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/ImapConstants.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Constants for IMAP related functions.\n+ *\n+ * @since 1.1.3\n+ */\n+public class ImapConstants {\n+    public static final String DEFAULT_PORT_NUMBER = \"143\";\n+    public static final String IMAP_PROTOCOL = \"imap\";\n+    public static final String PROPS_IMAP_HOST = \"mail.imap.host\";\n+    public static final String PROPS_IMAP_PORT = \"mail.imap.port\";\n+    public static final String PROPS_IMAP_STARTTLS = \"mail.imap.starttls.enable\";\n+    public static final String PROPS_IMAP_AUTH = \"mail.imap.auth\";\n+\n+    private ImapConstants() {\n+        // private constructor\n+    }\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjE3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566177", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:34:46Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopConstants.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Constants for POP3 related functions.\n+ *\n+ * @since 1.1.3\n+ */\n+public class PopConstants {\n+    public static final String DEFAULT_PORT_NUMBER = \"995\";\n+    public static final String PROPS_HOST = \"host\";\n+    public static final String PROPS_PORT = \"port\";\n+    public static final String PROPS_USERNAME = \"username\";\n+    public static final String PROPS_PASSWORD = \"password\";\n+    public static final String PROPS_STORE = \"store\";\n+    public static final String POP_PROTOCOL = \"pop3\";\n+    public static final String PROPS_FILTER_FOLDER = \"folder\";\n+    public static final String PROPS_POP_HOST = \"mail.pop3.host\";\n+    public static final String PROPS_POP_PORT = \"mail.pop3.port\";\n+    public static final String PROPS_POP_AUTH = \"mail.pop.auth\";\n+    public static final String PROPS_POP_STARTTLS = \"mail.pop3.starttls.enable\";\n+\n+    static final String EMAIL = \"Email\";\n+\n+    private PopConstants() {\n+        // private constructor\n+    }\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2Njg2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566868", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:36:33Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2Njk4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566985", "bodyText": "Suggested change", "author": "ldclakmal", "createdAt": "2020-02-28T08:36:47Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Generates MapValue object using the passed Message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        int toAddressArrayLength = getNullArrayLengthChecked(toAddress);\n+        int ccAddressArrayLength = getNullArrayLengthChecked(ccAddress);\n+        int bccAddressArrayLength = getNullArrayLengthChecked(bccAddress);\n+        int replyToAddressArrayLength = getNullArrayLengthChecked(replyToAddress);\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        for (int i = 0; i < toAddressArrayLength; i++) {\n+            toAddressArrayValue.add(i, toAddress[i].toString());\n+        }\n+        for (int i = 0; i < ccAddressArrayLength; i++) {\n+            ccAddressArrayValue.add(i, ccAddress[i].toString());\n+        }\n+        for (int i = 0; i < bccAddressArrayLength; i++) {\n+            bccAddressArrayValue.add(i, bccAddress[i].toString());\n+        }\n+        for (int i = 0; i < replyToAddressArrayLength; i++) {\n+            replyToAddressArrayValue.add(i, replyToAddress[i].toString());\n+        }\n+        String subject = getStringNullChecked(message.getSubject());\n+        String messageBody = \"\";\n+        if (message.isMimeType(\"text/plain\")) {\n+            if (message.getContent() != null) {\n+                messageBody = message.getContent().toString();\n+            } else {\n+                messageBody = \"\";\n+            }\n+        } else if (message.isMimeType(\"multipart/*\")) {\n+            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();\n+            messageBody = getTextFromMimeMultipart(mimeMultipart);\n+        }\n+        String fromAddress;\n+        if (message.getFrom() != null) {\n+            fromAddress = message.getFrom()[0].toString();\n+        } else {\n+            fromAddress = \"\";\n+        }\n+        String senderAddress = \"\";\n+        valueMap.put(EmailConstants.MESSAGE_TO, toAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_CC, ccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_BCC, bccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_REPLY_TO, replyToAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_SUBJECT, subject);\n+        valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY, messageBody);\n+        valueMap.put(EmailConstants.MESSAGE_FROM, fromAddress);\n+        valueMap.put(EmailConstants.MESSAGE_SENDER, senderAddress);\n+        log.debug(\"[PopUtil][getMapValue] MapValue object created. Returning Object to PopClient\");\n+        return BallerinaValues.createRecordValue(EmailConstants.EMAIL_PACKAGE_ID, PopConstants.EMAIL, valueMap);\n+    }\n+\n+    private static String getTextFromMimeMultipart(\n+            MimeMultipart mimeMultipart)  throws MessagingException, IOException {\n+        StringBuilder result = new StringBuilder();\n+        int count = mimeMultipart.getCount();\n+        for (int i = 0; i < count; i++) {\n+            BodyPart bodyPart = mimeMultipart.getBodyPart(i);\n+            if (bodyPart.isMimeType(\"text/plain\")) {\n+                result.append(\"\\n\").append(bodyPart.getContent());\n+                break; // without break same text appears twice in my tests\n+            } else if (bodyPart.isMimeType(\"text/html\")) {\n+                String html = (String) bodyPart.getContent();\n+                // result = result + \"\\n\" + org.jsoup.Jsoup.parse(html).text();\n+                result.append(\"\\n\").append(html);\n+            } else if (bodyPart.getContent() instanceof MimeMultipart) {\n+                result.append(getTextFromMimeMultipart((MimeMultipart) bodyPart.getContent()));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    private static String getStringNullChecked(String string) {\n+        if (string == null) {\n+            return \"\";\n+        } else {\n+            return string;\n+        }\n+    }\n+\n+    private static int getNullArrayLengthChecked(Address[] addresses) {\n+        if (addresses == null) {\n+            return 0;\n+        } else {\n+            return addresses.length;\n+        }\n+    }\n+\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzA2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567062", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n      \n    \n    \n  \n\nShall we remove the empty spaces in all the other places as well?", "author": "ldclakmal", "createdAt": "2020-02-28T08:36:59Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Generates MapValue object using the passed Message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        int toAddressArrayLength = getNullArrayLengthChecked(toAddress);\n+        int ccAddressArrayLength = getNullArrayLengthChecked(ccAddress);\n+        int bccAddressArrayLength = getNullArrayLengthChecked(bccAddress);\n+        int replyToAddressArrayLength = getNullArrayLengthChecked(replyToAddress);\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        for (int i = 0; i < toAddressArrayLength; i++) {\n+            toAddressArrayValue.add(i, toAddress[i].toString());\n+        }\n+        for (int i = 0; i < ccAddressArrayLength; i++) {\n+            ccAddressArrayValue.add(i, ccAddress[i].toString());\n+        }\n+        for (int i = 0; i < bccAddressArrayLength; i++) {\n+            bccAddressArrayValue.add(i, bccAddress[i].toString());\n+        }\n+        for (int i = 0; i < replyToAddressArrayLength; i++) {\n+            replyToAddressArrayValue.add(i, replyToAddress[i].toString());\n+        }\n+        String subject = getStringNullChecked(message.getSubject());\n+        String messageBody = \"\";\n+        if (message.isMimeType(\"text/plain\")) {\n+            if (message.getContent() != null) {\n+                messageBody = message.getContent().toString();\n+            } else {\n+                messageBody = \"\";\n+            }\n+        } else if (message.isMimeType(\"multipart/*\")) {\n+            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();\n+            messageBody = getTextFromMimeMultipart(mimeMultipart);\n+        }\n+        String fromAddress;\n+        if (message.getFrom() != null) {\n+            fromAddress = message.getFrom()[0].toString();\n+        } else {\n+            fromAddress = \"\";\n+        }\n+        String senderAddress = \"\";\n+        valueMap.put(EmailConstants.MESSAGE_TO, toAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_CC, ccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_BCC, bccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_REPLY_TO, replyToAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_SUBJECT, subject);\n+        valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY, messageBody);\n+        valueMap.put(EmailConstants.MESSAGE_FROM, fromAddress);\n+        valueMap.put(EmailConstants.MESSAGE_SENDER, senderAddress);\n+        log.debug(\"[PopUtil][getMapValue] MapValue object created. Returning Object to PopClient\");\n+        return BallerinaValues.createRecordValue(EmailConstants.EMAIL_PACKAGE_ID, PopConstants.EMAIL, valueMap);\n+    }\n+\n+    private static String getTextFromMimeMultipart(\n+            MimeMultipart mimeMultipart)  throws MessagingException, IOException {\n+        StringBuilder result = new StringBuilder();\n+        int count = mimeMultipart.getCount();\n+        for (int i = 0; i < count; i++) {\n+            BodyPart bodyPart = mimeMultipart.getBodyPart(i);\n+            if (bodyPart.isMimeType(\"text/plain\")) {\n+                result.append(\"\\n\").append(bodyPart.getContent());\n+                break; // without break same text appears twice in my tests\n+            } else if (bodyPart.isMimeType(\"text/html\")) {\n+                String html = (String) bodyPart.getContent();\n+                // result = result + \"\\n\" + org.jsoup.Jsoup.parse(html).text();\n+                result.append(\"\\n\").append(html);\n+            } else if (bodyPart.getContent() instanceof MimeMultipart) {\n+                result.append(getTextFromMimeMultipart((MimeMultipart) bodyPart.getContent()));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    private static String getStringNullChecked(String string) {\n+        if (string == null) {\n+            return \"\";\n+        } else {\n+            return string;\n+        }\n+    }\n+\n+    private static int getNullArrayLengthChecked(Address[] addresses) {\n+        if (addresses == null) {\n+            return 0;\n+        } else {\n+            return addresses.length;\n+        }\n+    }\n+\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from Config\n+     * @return Port value as a string\n+     */\n+    private static String extractPortValue(long longValue, boolean isPop) {\n+        log.debug(\"[PopUtil][extractPortValue] Extracting Port value\");\n+        if (longValue <= 0 || longValue > MAX_PORT) {\n+            if (isPop) {\n+                log.error(\"Invalid port number given in configuration. Setting default port \"\n+                        + PopConstants.DEFAULT_PORT_NUMBER);\n+                return PopConstants.DEFAULT_PORT_NUMBER;\n+            } else {\n+                log.error(\"Invalid port number given in configuration. Setting default port \"\n+                        + ImapConstants.DEFAULT_PORT_NUMBER);\n+                return PopConstants.DEFAULT_PORT_NUMBER;\n+            }\n+", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTQ2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565463", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3 and IMAP4 protocols.\n          \n          \n            \n            This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3, and IMAP4 protocols.", "author": "praneesha", "createdAt": "2020-02-28T08:32:56Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,83 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3 and IMAP4 protocols.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTU3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565570", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The sample given below uses the functions in the module to send an email with SMTP protocol.\n          \n          \n            \n            The below sample uses the functions in the module to send an email using the SMTP protocol.", "author": "praneesha", "createdAt": "2020-02-28T08:33:13Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,83 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3 and IMAP4 protocols.\n+\n+## Sample\n+\n+The sample given below uses the functions in the module to send an email with SMTP protocol.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTczNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565735", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The sample given below uses the functions in the module to receive an email with POP3 protocol.\n          \n          \n            \n            The below sample uses the functions in the module to receive an email using the POP3 protocol.", "author": "praneesha", "createdAt": "2020-02-28T08:33:36Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,83 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3 and IMAP4 protocols.\n+\n+## Sample\n+\n+The sample given below uses the functions in the module to send an email with SMTP protocol.\n+\n+```ballerina\n+import ballerina/io;\n+import ballerina/email;\n+\n+email:SmtpConfig smtpConfig = {\n+    connConfig: {\n+        host: \"smtp.gmail.com\",\n+        port: 587,\n+        username: \"sender@email.com\",\n+        password: \"pass123\"\n+    }\n+};\n+\n+public function main() {\n+    email:SmtpClient smtpClient = new (smtpConfig);\n+    email:Email email = {\n+        toAddr: [\"receiver1@email.com\", \"receiver2@email.com\"],\n+        ccAddr: [\"receiver3@email.com\", \"receiver4@email.com\"],\n+        bccAddr: [\"receiver5@email.com\"],\n+        subject: \"Sample Email\",\n+        messageBody: \"This is a sample email.\",\n+        fromAddr: \"sender@email.com\",\n+        senderAddr: \"sender@email.com\"\n+    };\n+\n+    error? dd = smtpClient->send(email);\n+}\n+```\n+\n+The sample given below uses the functions in the module to receive an email with POP3 protocol.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NTkzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385565933", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The sample given below uses the functions in the module to receive an email with IMAP4 protocol.\n          \n          \n            \n            The below sample uses the functions in the module to receive an email using the IMAP4 protocol.", "author": "praneesha", "createdAt": "2020-02-28T08:34:04Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,83 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3 and IMAP4 protocols.\n+\n+## Sample\n+\n+The sample given below uses the functions in the module to send an email with SMTP protocol.\n+\n+```ballerina\n+import ballerina/io;\n+import ballerina/email;\n+\n+email:SmtpConfig smtpConfig = {\n+    connConfig: {\n+        host: \"smtp.gmail.com\",\n+        port: 587,\n+        username: \"sender@email.com\",\n+        password: \"pass123\"\n+    }\n+};\n+\n+public function main() {\n+    email:SmtpClient smtpClient = new (smtpConfig);\n+    email:Email email = {\n+        toAddr: [\"receiver1@email.com\", \"receiver2@email.com\"],\n+        ccAddr: [\"receiver3@email.com\", \"receiver4@email.com\"],\n+        bccAddr: [\"receiver5@email.com\"],\n+        subject: \"Sample Email\",\n+        messageBody: \"This is a sample email.\",\n+        fromAddr: \"sender@email.com\",\n+        senderAddr: \"sender@email.com\"\n+    };\n+\n+    error? dd = smtpClient->send(email);\n+}\n+```\n+\n+The sample given below uses the functions in the module to receive an email with POP3 protocol.\n+\n+```ballerina\n+email:PopConfig popConfig = {\n+    host: \"pop.gmail.com\",\n+    username: \"sender@email.com\",\n+    password: \"senderPa$$w0rd\"\n+};\n+\n+public function main() {\n+    email:PopClient popClient = new (popConfig);\n+    email:Email|error? emailResponse = popClient->read();\n+    if(emailResponse is email:Email) {\n+        io:println(\"Email Subject: \", emailResponse.subject);\n+        io:println(\"Email Body: \", emailResponse.body);\n+    } else if (emailResponse is ()) {\n+        io:println(\"There are no emails in the INBOX.\");\n+    } else {\n+        io:println(\"Error: \" + emailResponse.toString());\n+    }\n+}\n+```\n+\n+The sample given below uses the functions in the module to receive an email with IMAP4 protocol.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjAwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566009", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Provides configurations for connections\n          \n          \n            \n            # Configurations for the connections.", "author": "praneesha", "createdAt": "2020-02-28T08:34:19Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Provides configurations for connections", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjE1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566154", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Provides email message sends and receives\n          \n          \n            \n            # Email message sending and receiving configurations.", "author": "praneesha", "createdAt": "2020-02-28T08:34:42Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Provides configurations for connections\n+#\n+# + host - IP Address\n+# + port - Port\n+# + username - Provider username\n+# + password - Provider password\n+public type ConnectionConfig record {|\n+    string host;\n+    int port;\n+    string username;\n+    string password;\n+|};\n+\n+# Provides email message sends and receives", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjIzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566238", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + body - Email message body\n          \n          \n            \n            # + body - Body of the email message", "author": "praneesha", "createdAt": "2020-02-28T08:34:57Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Provides configurations for connections\n+#\n+# + host - IP Address\n+# + port - Port\n+# + username - Provider username\n+# + password - Provider password\n+public type ConnectionConfig record {|\n+    string host;\n+    int port;\n+    string username;\n+    string password;\n+|};\n+\n+# Provides email message sends and receives\n+#\n+# + to - TO address list\n+# + cc - CC address list\n+# + bcc - BCC address list\n+# + subject - Subject of email\n+# + body - Email message body", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjMyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Provides filter to receive email\n          \n          \n            \n            # Filter to receive an email.", "author": "praneesha", "createdAt": "2020-02-28T08:35:13Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Provides configurations for connections\n+#\n+# + host - IP Address\n+# + port - Port\n+# + username - Provider username\n+# + password - Provider password\n+public type ConnectionConfig record {|\n+    string host;\n+    int port;\n+    string username;\n+    string password;\n+|};\n+\n+# Provides email message sends and receives\n+#\n+# + to - TO address list\n+# + cc - CC address list\n+# + bcc - BCC address list\n+# + subject - Subject of email\n+# + body - Email message body\n+# + from - From address\n+# + sender - Sender's address\n+# + replyTo - Reply To addresses\n+public type Email record {|\n+    string[] to = [];\n+    string[]? cc = [];\n+    string[]? bcc = [];\n+    string subject = \"\";\n+    string body = \"\";\n+    string 'from = \"\";\n+    string? sender = \"\";\n+    string[]? replyTo = [];\n+|};\n+\n+# Provides filter to receive email", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjU0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566540", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents an IMAP Client that interacts with an IMAP Server\n          \n          \n            \n            # Represents an IMAP Client, which interacts with an IMAP Server.", "author": "praneesha", "createdAt": "2020-02-28T08:35:48Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjY2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566660", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets invoked during object initialization\n          \n          \n            \n                # Gets invoked during object initialization.", "author": "praneesha", "createdAt": "2020-02-28T08:36:04Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NjcwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + clientConfig - Configurations for IMAP Client\n          \n          \n            \n                # + clientConfig - Configurations for the IMAP Client", "author": "praneesha", "createdAt": "2020-02-28T08:36:11Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for IMAP Client", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2Njc3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566774", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Used to read a message\n          \n          \n            \n                # Reads a message.", "author": "praneesha", "createdAt": "2020-02-28T08:36:22Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Used to read a message", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2Njg4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configuration of the IMAP Endpoint\n          \n          \n            \n            # Configuration of the IMAP Endpoint.", "author": "praneesha", "createdAt": "2020-02-28T08:36:35Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = imapRead(self, filter, false);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the IMAP Endpoint", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2Njk0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385566946", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + host - Host address of IMAP server\n          \n          \n            \n            # + host - Host address of the IMAP server", "author": "praneesha", "createdAt": "2020-02-28T08:36:43Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = imapRead(self, filter, false);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the IMAP Endpoint\n+#\n+# + host - Host address of IMAP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567001", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + port - Port number of IMAP server\n          \n          \n            \n            # + port - Port number of the IMAP server", "author": "praneesha", "createdAt": "2020-02-28T08:36:49Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = imapRead(self, filter, false);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the IMAP Endpoint\n+#\n+# + host - Host address of IMAP server\n+# + port - Port number of IMAP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzA1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567057", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + username - Username to access IMAP server\n          \n          \n            \n            # + username - Username to access the IMAP server", "author": "praneesha", "createdAt": "2020-02-28T08:36:58Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = imapRead(self, filter, false);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the IMAP Endpoint\n+#\n+# + host - Host address of IMAP server\n+# + port - Port number of IMAP server\n+# + username - Username to access IMAP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzA4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567088", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + password - Password to access IMAP server\n          \n          \n            \n            # + password - Password to access the IMAP server", "author": "praneesha", "createdAt": "2020-02-28T08:37:03Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = imapRead(self, filter, false);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the IMAP Endpoint\n+#\n+# + host - Host address of IMAP server\n+# + port - Port number of IMAP server\n+# + username - Username to access IMAP server\n+# + password - Password to access IMAP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzIwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567203", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents an POP Client that interacts with an POP Server\n          \n          \n            \n            # Represents a POP Client, which interacts with a POP Server.", "author": "praneesha", "createdAt": "2020-02-28T08:37:20Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzI0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567249", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets invoked during object initialization\n          \n          \n            \n                # Gets invoked during object initialization.", "author": "praneesha", "createdAt": "2020-02-28T08:37:27Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzMxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + clientConfig - Configurations for POP Client\n          \n          \n            \n                # + clientConfig - Configurations for the POP Client", "author": "praneesha", "createdAt": "2020-02-28T08:37:37Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for POP Client", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzM3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567372", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Used to read a message\n          \n          \n            \n                # Used to read a message.", "author": "praneesha", "createdAt": "2020-02-28T08:37:43Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for POP Client\n+    public function __init(PopConfig clientConfig) {\n+        error? response = initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzQyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567427", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configuration of the POP Endpoint\n          \n          \n            \n            # Configuration of the POP Endpoint.", "author": "praneesha", "createdAt": "2020-02-28T08:37:52Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for POP Client\n+    public function __init(PopConfig clientConfig) {\n+        error? response = initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = popRead(self, filter, true);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the POP Endpoint", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzQ2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567464", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + host - Host address of POP server\n          \n          \n            \n            # + host - Host address of the POP server", "author": "praneesha", "createdAt": "2020-02-28T08:37:59Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for POP Client\n+    public function __init(PopConfig clientConfig) {\n+        error? response = initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = popRead(self, filter, true);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the POP Endpoint\n+#\n+# + host - Host address of POP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzUwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567508", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + port - Port number of POP server\n          \n          \n            \n            # + port - Port number of the POP server", "author": "praneesha", "createdAt": "2020-02-28T08:38:05Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for POP Client\n+    public function __init(PopConfig clientConfig) {\n+        error? response = initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = popRead(self, filter, true);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the POP Endpoint\n+#\n+# + host - Host address of POP server\n+# + port - Port number of POP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzU0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567545", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + username - Username to access POP server\n          \n          \n            \n            # + username - Username to access the POP server", "author": "praneesha", "createdAt": "2020-02-28T08:38:10Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for POP Client\n+    public function __init(PopConfig clientConfig) {\n+        error? response = initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = popRead(self, filter, true);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the POP Endpoint\n+#\n+# + host - Host address of POP server\n+# + port - Port number of POP server\n+# + username - Username to access POP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2NzU4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567588", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + password - Password to access POP server\n          \n          \n            \n            # + password - Password to access the POP server", "author": "praneesha", "createdAt": "2020-02-28T08:38:15Z", "path": "stdlib/email/src/main/ballerina/src/email/pop_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an POP Client that interacts with an POP Server\n+public type PopClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for POP Client\n+    public function __init(PopConfig clientConfig) {\n+        error? response = initPopClientEndpoint(self, clientConfig, true);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = popRead(self, filter, true);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the POP Endpoint\n+#\n+# + host - Host address of POP server\n+# + port - Port number of POP server\n+# + username - Username to access POP server\n+# + password - Password to access POP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2Nzc0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents an SMTP Client that interacts with an SMTP Server\n          \n          \n            \n            # Represents an SMTP Client, which interacts with an SMTP Server.", "author": "praneesha", "createdAt": "2020-02-28T08:38:40Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2Nzc3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567776", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets invoked during object initialization\n          \n          \n            \n                # Gets invoked during object initialization.", "author": "praneesha", "createdAt": "2020-02-28T08:38:46Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2Nzg2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385567860", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Used to send a message\n          \n          \n            \n                # Send a message.", "author": "praneesha", "createdAt": "2020-02-28T08:38:57Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for SMTP Client\n+    public function __init(SmtpConfig clientConfig) {\n+        error? response = initSmtpClientEndpoint(self, clientConfig);\n+    }\n+\n+    # Used to send a message", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODI0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385568245", "bodyText": "Do we need to initialize the values of this record?", "author": "ldclakmal", "createdAt": "2020-02-28T08:39:56Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Provides configurations for connections\n+#\n+# + host - IP Address\n+# + port - Port\n+# + username - Provider username\n+# + password - Provider password\n+public type ConnectionConfig record {|\n+    string host;\n+    int port;\n+    string username;\n+    string password;\n+|};\n+\n+# Provides email message sends and receives\n+#\n+# + to - TO address list\n+# + cc - CC address list\n+# + bcc - BCC address list\n+# + subject - Subject of email\n+# + body - Email message body\n+# + from - From address\n+# + sender - Sender's address\n+# + replyTo - Reply To addresses\n+public type Email record {|", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NzE5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385767190", "bodyText": "Corrected the record definition.", "author": "Maninda", "createdAt": "2020-02-28T15:42:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODY5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385568693", "bodyText": "IMO, this should be optional field. Please check the other attributes of the records as well.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                string[]? cc = [];\n          \n          \n            \n                string[] cc? = [];", "author": "ldclakmal", "createdAt": "2020-02-28T08:40:57Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Provides configurations for connections\n+#\n+# + host - IP Address\n+# + port - Port\n+# + username - Provider username\n+# + password - Provider password\n+public type ConnectionConfig record {|\n+    string host;\n+    int port;\n+    string username;\n+    string password;\n+|};\n+\n+# Provides email message sends and receives\n+#\n+# + to - TO address list\n+# + cc - CC address list\n+# + bcc - BCC address list\n+# + subject - Subject of email\n+# + body - Email message body\n+# + from - From address\n+# + sender - Sender's address\n+# + replyTo - Reply To addresses\n+public type Email record {|\n+    string[] to = [];\n+    string[]? cc = [];", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NzU3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385767576", "bodyText": "Corrected the Email record definition.", "author": "Maninda", "createdAt": "2020-02-28T15:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTMzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569339", "bodyText": "Do we need to initialize this? And can this property hold () as the value?", "author": "ldclakmal", "createdAt": "2020-02-28T08:42:40Z", "path": "stdlib/email/src/main/ballerina/src/email/commons.bal", "diffHunk": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Provides configurations for connections\n+#\n+# + host - IP Address\n+# + port - Port\n+# + username - Provider username\n+# + password - Provider password\n+public type ConnectionConfig record {|\n+    string host;\n+    int port;\n+    string username;\n+    string password;\n+|};\n+\n+# Provides email message sends and receives\n+#\n+# + to - TO address list\n+# + cc - CC address list\n+# + bcc - BCC address list\n+# + subject - Subject of email\n+# + body - Email message body\n+# + from - From address\n+# + sender - Sender's address\n+# + replyTo - Reply To addresses\n+public type Email record {|\n+    string[] to = [];\n+    string[]? cc = [];\n+    string[]? bcc = [];\n+    string subject = \"\";\n+    string body = \"\";\n+    string 'from = \"\";\n+    string? sender = \"\";\n+    string[]? replyTo = [];\n+|};\n+\n+# Provides filter to receive email\n+#\n+# + folder - Folder to read emails\n+public type Filter record {|\n+    string? folder = \"INBOX\";", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2Nzk3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385767979", "bodyText": "Corrected the Filter record definition.", "author": "Maninda", "createdAt": "2020-02-28T15:43:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTMzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTg2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569866", "bodyText": "There is no connConfig. remove it from the docs", "author": "daneshk", "createdAt": "2020-02-28T08:44:00Z", "path": "stdlib/email/src/main/ballerina/src/email/Module.md", "diffHunk": "@@ -0,0 +1,83 @@\n+## Module overview\n+\n+This module contains functions to perform email operations such as sending and reading emails using SMTP, POP3 and IMAP4 protocols.\n+\n+## Sample\n+\n+The sample given below uses the functions in the module to send an email with SMTP protocol.\n+\n+```ballerina\n+import ballerina/io;\n+import ballerina/email;\n+\n+email:SmtpConfig smtpConfig = {\n+    connConfig: {", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2ODI4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385768287", "bodyText": "Removed and replaced with correct content.", "author": "Maninda", "createdAt": "2020-02-28T15:43:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTI0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385571245", "bodyText": "The extern function only returns map<anydata> not the error | (). We have to revisit all the other functions as well.", "author": "ldclakmal", "createdAt": "2020-02-28T08:47:14Z", "path": "stdlib/email/src/main/ballerina/src/email/service_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+\n+public function initSmtpClientEndpoint(SmtpClient clientEndpoint, map<anydata> config) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+public function send(SmtpClient clientEndpoint, map<anydata> email) returns error? = @java:Method {\n+    name : \"sendMessage\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+\n+public function initPopClientEndpoint(PopClient clientEndpoint, map<anydata> config, boolean isPop) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.PopClient\"\n+} external;\n+\n+public function popRead(PopClient clientEndpoint, map<anydata> message, boolean isPop) returns map<anydata>|error? = @java:Method {", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2ODc1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385768752", "bodyText": "Corrected the types used.", "author": "Maninda", "createdAt": "2020-02-28T15:44:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODI3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385568274", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Configuration of the SMTP Endpoint\n          \n          \n            \n            # Configuration of the SMTP Endpoint.", "author": "praneesha", "createdAt": "2020-02-28T08:40:02Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for SMTP Client\n+    public function __init(SmtpConfig clientConfig) {\n+        error? response = initSmtpClientEndpoint(self, clientConfig);\n+    }\n+\n+    # Used to send a message\n+    #\n+    # + email - String message\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function send(Email email) returns error? {\n+        return send(self, email);\n+    }\n+\n+};\n+\n+# Configuration of the SMTP Endpoint", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODMyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385568327", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + host - Host address of SMTP server\n          \n          \n            \n            # + host - Host address of the SMTP server", "author": "praneesha", "createdAt": "2020-02-28T08:40:08Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for SMTP Client\n+    public function __init(SmtpConfig clientConfig) {\n+        error? response = initSmtpClientEndpoint(self, clientConfig);\n+    }\n+\n+    # Used to send a message\n+    #\n+    # + email - String message\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function send(Email email) returns error? {\n+        return send(self, email);\n+    }\n+\n+};\n+\n+# Configuration of the SMTP Endpoint\n+#\n+# + host - Host address of SMTP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODM3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385568372", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + port - Port number of SMTP server\n          \n          \n            \n            # + port - Port number of the SMTP server", "author": "praneesha", "createdAt": "2020-02-28T08:40:14Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for SMTP Client\n+    public function __init(SmtpConfig clientConfig) {\n+        error? response = initSmtpClientEndpoint(self, clientConfig);\n+    }\n+\n+    # Used to send a message\n+    #\n+    # + email - String message\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function send(Email email) returns error? {\n+        return send(self, email);\n+    }\n+\n+};\n+\n+# Configuration of the SMTP Endpoint\n+#\n+# + host - Host address of SMTP server\n+# + port - Port number of SMTP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODQxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385568412", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + username - Username to access SMTP server\n          \n          \n            \n            # + username - Username to access the SMTP server", "author": "praneesha", "createdAt": "2020-02-28T08:40:20Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for SMTP Client\n+    public function __init(SmtpConfig clientConfig) {\n+        error? response = initSmtpClientEndpoint(self, clientConfig);\n+    }\n+\n+    # Used to send a message\n+    #\n+    # + email - String message\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function send(Email email) returns error? {\n+        return send(self, email);\n+    }\n+\n+};\n+\n+# Configuration of the SMTP Endpoint\n+#\n+# + host - Host address of SMTP server\n+# + port - Port number of SMTP server\n+# + username - Username to access SMTP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODQ0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385568446", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + password - Password to access SMTP server\n          \n          \n            \n            # + password - Password to access the SMTP server", "author": "praneesha", "createdAt": "2020-02-28T08:40:26Z", "path": "stdlib/email/src/main/ballerina/src/email/smtp_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an SMTP Client that interacts with an SMTP Server\n+public type SmtpClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for SMTP Client\n+    public function __init(SmtpConfig clientConfig) {\n+        error? response = initSmtpClientEndpoint(self, clientConfig);\n+    }\n+\n+    # Used to send a message\n+    #\n+    # + email - String message\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function send(Email email) returns error? {\n+        return send(self, email);\n+    }\n+\n+};\n+\n+# Configuration of the SMTP Endpoint\n+#\n+# + host - Host address of SMTP server\n+# + port - Port number of SMTP server\n+# + username - Username to access SMTP server\n+# + password - Password to access SMTP server", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2ODU2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385568564", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Singleton class\n          \n          \n            \n                    // A Singleton class.", "author": "praneesha", "createdAt": "2020-02-28T08:40:44Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaPopException;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+\n+/**\n+ * Contains functionality of POP Client.\n+ */\n+public class PopClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopClient.class);\n+\n+    private PopClient() {\n+        // Singleton class", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTA1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569056", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws BallerinaPopException If an error occurs in POP client\n          \n          \n            \n                 * @throws BallerinaPopException If an error occurs in the POP client", "author": "praneesha", "createdAt": "2020-02-28T08:41:53Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaPopException;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+\n+/**\n+ * Contains functionality of POP Client.\n+ */\n+public class PopClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopClient.class);\n+\n+    private PopClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP Properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param config Properties required to configure the POP Session\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @throws BallerinaPopException If an error occurs in POP client", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTE4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569181", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param filter Criteria which are used to read emails\n          \n          \n            \n                 * @param filter Criteria, which is used to read emails", "author": "praneesha", "createdAt": "2020-02-28T08:42:14Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaPopException;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+\n+/**\n+ * Contains functionality of POP Client.\n+ */\n+public class PopClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopClient.class);\n+\n+    private PopClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP Properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param config Properties required to configure the POP Session\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @throws BallerinaPopException If an error occurs in POP client\n+     */\n+    public static void initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config, boolean isPop)\n+            throws BallerinaPopException {\n+        log.debug(\"[PopClient][InitClient] Calling getProperties\");\n+        Properties properties = PopUtil.getProperties(config, isPop);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;\n+\n+            if (isPop) {\n+                store = session.getStore(PopConstants.POP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(PopConstants.PROPS_POP_HOST));\n+            } else {\n+                store = session.getStore(ImapConstants.IMAP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(ImapConstants.PROPS_IMAP_HOST));\n+            }\n+            clientEndpoint.addNativeData(PopConstants.PROPS_STORE, store);\n+            clientEndpoint.addNativeData(PopConstants.PROPS_USERNAME,\n+                    properties.getProperty(PopConstants.PROPS_USERNAME));\n+            clientEndpoint.addNativeData(PopConstants.PROPS_PASSWORD,\n+                    properties.getProperty(PopConstants.PROPS_PASSWORD));\n+        } catch (NoSuchProviderException e) {\n+            log.error(\"Failed to read message : \", e);\n+            throw new BallerinaPopException(\"Error occurred while accessing POP server\", e);\n+        }\n+    }\n+\n+    /**\n+     * Read emails from the server.\n+     * @param clientConnector Represents the POP Client class\n+     * @param filter Criteria which are used to read emails", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569237", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return MapValue Returns the type supported to Ballerina\n          \n          \n            \n                 * @return MapValue Returns the type supported by Ballerina", "author": "praneesha", "createdAt": "2020-02-28T08:42:24Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaPopException;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+\n+/**\n+ * Contains functionality of POP Client.\n+ */\n+public class PopClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopClient.class);\n+\n+    private PopClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP Properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param config Properties required to configure the POP Session\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @throws BallerinaPopException If an error occurs in POP client\n+     */\n+    public static void initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config, boolean isPop)\n+            throws BallerinaPopException {\n+        log.debug(\"[PopClient][InitClient] Calling getProperties\");\n+        Properties properties = PopUtil.getProperties(config, isPop);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;\n+\n+            if (isPop) {\n+                store = session.getStore(PopConstants.POP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(PopConstants.PROPS_POP_HOST));\n+            } else {\n+                store = session.getStore(ImapConstants.IMAP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(ImapConstants.PROPS_IMAP_HOST));\n+            }\n+            clientEndpoint.addNativeData(PopConstants.PROPS_STORE, store);\n+            clientEndpoint.addNativeData(PopConstants.PROPS_USERNAME,\n+                    properties.getProperty(PopConstants.PROPS_USERNAME));\n+            clientEndpoint.addNativeData(PopConstants.PROPS_PASSWORD,\n+                    properties.getProperty(PopConstants.PROPS_PASSWORD));\n+        } catch (NoSuchProviderException e) {\n+            log.error(\"Failed to read message : \", e);\n+            throw new BallerinaPopException(\"Error occurred while accessing POP server\", e);\n+        }\n+    }\n+\n+    /**\n+     * Read emails from the server.\n+     * @param clientConnector Represents the POP Client class\n+     * @param filter Criteria which are used to read emails\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return MapValue Returns the type supported to Ballerina", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTI4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569286", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws BallerinaPopException If an error occurs in POP client\n          \n          \n            \n                 * @throws BallerinaPopException If an error occurs in the POP client", "author": "praneesha", "createdAt": "2020-02-28T08:42:32Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaPopException;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+\n+/**\n+ * Contains functionality of POP Client.\n+ */\n+public class PopClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopClient.class);\n+\n+    private PopClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP Properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param config Properties required to configure the POP Session\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @throws BallerinaPopException If an error occurs in POP client\n+     */\n+    public static void initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config, boolean isPop)\n+            throws BallerinaPopException {\n+        log.debug(\"[PopClient][InitClient] Calling getProperties\");\n+        Properties properties = PopUtil.getProperties(config, isPop);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;\n+\n+            if (isPop) {\n+                store = session.getStore(PopConstants.POP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(PopConstants.PROPS_POP_HOST));\n+            } else {\n+                store = session.getStore(ImapConstants.IMAP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(ImapConstants.PROPS_IMAP_HOST));\n+            }\n+            clientEndpoint.addNativeData(PopConstants.PROPS_STORE, store);\n+            clientEndpoint.addNativeData(PopConstants.PROPS_USERNAME,\n+                    properties.getProperty(PopConstants.PROPS_USERNAME));\n+            clientEndpoint.addNativeData(PopConstants.PROPS_PASSWORD,\n+                    properties.getProperty(PopConstants.PROPS_PASSWORD));\n+        } catch (NoSuchProviderException e) {\n+            log.error(\"Failed to read message : \", e);\n+            throw new BallerinaPopException(\"Error occurred while accessing POP server\", e);\n+        }\n+    }\n+\n+    /**\n+     * Read emails from the server.\n+     * @param clientConnector Represents the POP Client class\n+     * @param filter Criteria which are used to read emails\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return MapValue Returns the type supported to Ballerina\n+     * @throws BallerinaPopException If an error occurs in POP client", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTQxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569412", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws BallerinaSmtpException If an error occurs in SMTP client\n          \n          \n            \n                 * @throws BallerinaSmtpException If an error occurs in the SMTP client", "author": "praneesha", "createdAt": "2020-02-28T08:42:52Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaSmtpException;\n+import org.ballerinalang.stdlib.email.util.SmtpConstants;\n+import org.ballerinalang.stdlib.email.util.SmtpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+\n+\n+/**\n+ * Contains functionality of SMTP Client.\n+ */\n+public class SmtpClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpClient.class);\n+\n+    private SmtpClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the SMTP Properties.\n+     * @param clientEndpoint Represents the SMTP Client class\n+     * @param config Properties required to configure the SMTP Session\n+     * @throws BallerinaSmtpException If an error occurs in SMTP client", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTQ5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569491", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Send an email to an SMTP server.\n          \n          \n            \n                 * Sends an email to an SMTP server.", "author": "praneesha", "createdAt": "2020-02-28T08:43:04Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaSmtpException;\n+import org.ballerinalang.stdlib.email.util.SmtpConstants;\n+import org.ballerinalang.stdlib.email.util.SmtpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+\n+\n+/**\n+ * Contains functionality of SMTP Client.\n+ */\n+public class SmtpClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpClient.class);\n+\n+    private SmtpClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the SMTP Properties.\n+     * @param clientEndpoint Represents the SMTP Client class\n+     * @param config Properties required to configure the SMTP Session\n+     * @throws BallerinaSmtpException If an error occurs in SMTP client\n+     */\n+    public static void initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config)\n+            throws BallerinaSmtpException {\n+        log.debug(\"[SmtpClient][InitClient] Calling getProperties\");\n+        Properties properties = SmtpUtil.getProperties(config);\n+        log.debug(\"[SmtpClient][Send] Creating session\");\n+        Session session = Session.getInstance(properties,\n+                new javax.mail.Authenticator() {\n+                    protected PasswordAuthentication getPasswordAuthentication() {\n+                        return new PasswordAuthentication(properties.getProperty(SmtpConstants.PROPS_USERNAME),\n+                                properties.getProperty(SmtpConstants.PROPS_PASSWORD));\n+                    }\n+                });\n+        clientEndpoint.addNativeData(SmtpConstants.PROPS_SESSION, session);\n+        clientEndpoint.addNativeData(SmtpConstants.PROPS_USERNAME,\n+                properties.getProperty(SmtpConstants.PROPS_USERNAME));\n+    }\n+\n+    /**\n+     * Send an email to an SMTP server.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTU2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws BallerinaSmtpException If an error occurs in SMTP client\n          \n          \n            \n                 * @throws BallerinaSmtpException If an error occurs in the SMTP client", "author": "praneesha", "createdAt": "2020-02-28T08:43:14Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/SmtpClient.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaSmtpException;\n+import org.ballerinalang.stdlib.email.util.SmtpConstants;\n+import org.ballerinalang.stdlib.email.util.SmtpUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.MessagingException;\n+import javax.mail.PasswordAuthentication;\n+import javax.mail.Session;\n+import javax.mail.Transport;\n+\n+\n+/**\n+ * Contains functionality of SMTP Client.\n+ */\n+public class SmtpClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpClient.class);\n+\n+    private SmtpClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the SMTP Properties.\n+     * @param clientEndpoint Represents the SMTP Client class\n+     * @param config Properties required to configure the SMTP Session\n+     * @throws BallerinaSmtpException If an error occurs in SMTP client\n+     */\n+    public static void initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config)\n+            throws BallerinaSmtpException {\n+        log.debug(\"[SmtpClient][InitClient] Calling getProperties\");\n+        Properties properties = SmtpUtil.getProperties(config);\n+        log.debug(\"[SmtpClient][Send] Creating session\");\n+        Session session = Session.getInstance(properties,\n+                new javax.mail.Authenticator() {\n+                    protected PasswordAuthentication getPasswordAuthentication() {\n+                        return new PasswordAuthentication(properties.getProperty(SmtpConstants.PROPS_USERNAME),\n+                                properties.getProperty(SmtpConstants.PROPS_PASSWORD));\n+                    }\n+                });\n+        clientEndpoint.addNativeData(SmtpConstants.PROPS_SESSION, session);\n+        clientEndpoint.addNativeData(SmtpConstants.PROPS_USERNAME,\n+                properties.getProperty(SmtpConstants.PROPS_USERNAME));\n+    }\n+\n+    /**\n+     * Send an email to an SMTP server.\n+     * @param clientConnector Represents the SMTP Client class\n+     * @param message Fields of an email\n+     * @throws BallerinaSmtpException If an error occurs in SMTP client", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTY2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569666", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class validates annotations attached to Ballerina service and resource nodes.\n          \n          \n            \n             * This class validates annotations attached to the Ballerina service and its resource nodes.", "author": "praneesha", "createdAt": "2020-02-28T08:43:30Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.service.compiler;\n+\n+import org.ballerinalang.compiler.plugins.AbstractCompilerPlugin;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+\n+\n+/**\n+ * This class validates annotations attached to Ballerina service and resource nodes.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTg1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569857", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Constants for IMAP related functions.\n          \n          \n            \n             * Constants for IMAP-related functions.", "author": "praneesha", "createdAt": "2020-02-28T08:44:00Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/ImapConstants.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Constants for IMAP related functions.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU2OTkyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385569924", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Constants for POP3 related functions.\n          \n          \n            \n             * Constants for POP3-related functions.", "author": "praneesha", "createdAt": "2020-02-28T08:44:09Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopConstants.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Constants for POP3 related functions.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDAwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570002", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Contains Utility functions related to POP3 protocol.\n          \n          \n            \n             * Contains Utility functions related to the POP3 protocol.", "author": "praneesha", "createdAt": "2020-02-28T08:44:21Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDEzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570131", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Generates MapValue object using the passed Message.\n          \n          \n            \n                 * Generates MapValue object using the passed message.", "author": "praneesha", "createdAt": "2020-02-28T08:44:39Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Generates MapValue object using the passed Message.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDI3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param longValue Port value extracted from Config\n          \n          \n            \n                 * @param longValue Port value extracted from the Config", "author": "praneesha", "createdAt": "2020-02-28T08:45:02Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Generates MapValue object using the passed Message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        int toAddressArrayLength = getNullArrayLengthChecked(toAddress);\n+        int ccAddressArrayLength = getNullArrayLengthChecked(ccAddress);\n+        int bccAddressArrayLength = getNullArrayLengthChecked(bccAddress);\n+        int replyToAddressArrayLength = getNullArrayLengthChecked(replyToAddress);\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        for (int i = 0; i < toAddressArrayLength; i++) {\n+            toAddressArrayValue.add(i, toAddress[i].toString());\n+        }\n+        for (int i = 0; i < ccAddressArrayLength; i++) {\n+            ccAddressArrayValue.add(i, ccAddress[i].toString());\n+        }\n+        for (int i = 0; i < bccAddressArrayLength; i++) {\n+            bccAddressArrayValue.add(i, bccAddress[i].toString());\n+        }\n+        for (int i = 0; i < replyToAddressArrayLength; i++) {\n+            replyToAddressArrayValue.add(i, replyToAddress[i].toString());\n+        }\n+        String subject = getStringNullChecked(message.getSubject());\n+        String messageBody = \"\";\n+        if (message.isMimeType(\"text/plain\")) {\n+            if (message.getContent() != null) {\n+                messageBody = message.getContent().toString();\n+            } else {\n+                messageBody = \"\";\n+            }\n+        } else if (message.isMimeType(\"multipart/*\")) {\n+            MimeMultipart mimeMultipart = (MimeMultipart) message.getContent();\n+            messageBody = getTextFromMimeMultipart(mimeMultipart);\n+        }\n+        String fromAddress;\n+        if (message.getFrom() != null) {\n+            fromAddress = message.getFrom()[0].toString();\n+        } else {\n+            fromAddress = \"\";\n+        }\n+        String senderAddress = \"\";\n+        valueMap.put(EmailConstants.MESSAGE_TO, toAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_CC, ccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_BCC, bccAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_REPLY_TO, replyToAddressArrayValue);\n+        valueMap.put(EmailConstants.MESSAGE_SUBJECT, subject);\n+        valueMap.put(EmailConstants.MESSAGE_MESSAGE_BODY, messageBody);\n+        valueMap.put(EmailConstants.MESSAGE_FROM, fromAddress);\n+        valueMap.put(EmailConstants.MESSAGE_SENDER, senderAddress);\n+        log.debug(\"[PopUtil][getMapValue] MapValue object created. Returning Object to PopClient\");\n+        return BallerinaValues.createRecordValue(EmailConstants.EMAIL_PACKAGE_ID, PopConstants.EMAIL, valueMap);\n+    }\n+\n+    private static String getTextFromMimeMultipart(\n+            MimeMultipart mimeMultipart)  throws MessagingException, IOException {\n+        StringBuilder result = new StringBuilder();\n+        int count = mimeMultipart.getCount();\n+        for (int i = 0; i < count; i++) {\n+            BodyPart bodyPart = mimeMultipart.getBodyPart(i);\n+            if (bodyPart.isMimeType(\"text/plain\")) {\n+                result.append(\"\\n\").append(bodyPart.getContent());\n+                break; // without break same text appears twice in my tests\n+            } else if (bodyPart.isMimeType(\"text/html\")) {\n+                String html = (String) bodyPart.getContent();\n+                // result = result + \"\\n\" + org.jsoup.Jsoup.parse(html).text();\n+                result.append(\"\\n\").append(html);\n+            } else if (bodyPart.getContent() instanceof MimeMultipart) {\n+                result.append(getTextFromMimeMultipart((MimeMultipart) bodyPart.getContent()));\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n+    private static String getStringNullChecked(String string) {\n+        if (string == null) {\n+            return \"\";\n+        } else {\n+            return string;\n+        }\n+    }\n+\n+    private static int getNullArrayLengthChecked(Address[] addresses) {\n+        if (addresses == null) {\n+            return 0;\n+        } else {\n+            return addresses.length;\n+        }\n+    }\n+\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from Config", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDQ3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570479", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Constants for SMTP related functions.\n          \n          \n            \n             * Constants for SMTP-related functions.", "author": "praneesha", "createdAt": "2020-02-28T08:45:29Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpConstants.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+/**\n+ * Constants for SMTP related functions.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDYyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570627", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Contains Utility functions related to the SMTP protocol.\n          \n          \n            \n             * Contains the utility functions related to the SMTP protocol.", "author": "praneesha", "createdAt": "2020-02-28T08:45:49Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+\n+/**\n+ * Contains Utility functions related to the SMTP protocol.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDY4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570684", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Generates Properties object using the passed MapValue.\n          \n          \n            \n                 * Generates the Properties object using the passed MapValue.", "author": "praneesha", "createdAt": "2020-02-28T08:45:57Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+\n+/**\n+ * Contains Utility functions related to the SMTP protocol.\n+ */\n+public class SmtpUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDc4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570785", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param longValue Port value extracted from Config\n          \n          \n            \n                 * @param longValue Port value extracted from the Config", "author": "praneesha", "createdAt": "2020-02-28T08:46:11Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+\n+/**\n+ * Contains Utility functions related to the SMTP protocol.\n+ */\n+public class SmtpUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param smtpConfig MapValue with the configuration values\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue smtpConfig) {\n+        Properties properties = new Properties();\n+        properties.put(SmtpConstants.PROPS_SMTP_HOST, smtpConfig.getStringValue(SmtpConstants.PROPS_HOST));\n+        properties.put(SmtpConstants.PROPS_SMTP_PORT,\n+                extractPortValue(smtpConfig.getIntValue(SmtpConstants.PROPS_PORT)));\n+        properties.put(SmtpConstants.PROPS_SMTP_AUTH, \"true\");\n+        properties.put(SmtpConstants.PROPS_SMTP_STARTTLS, \"true\"); //TLS\n+        properties.put(SmtpConstants.PROPS_USERNAME, smtpConfig.getStringValue(SmtpConstants.PROPS_USERNAME));\n+        properties.put(SmtpConstants.PROPS_PASSWORD, smtpConfig.getStringValue(SmtpConstants.PROPS_PASSWORD));\n+        log.debug(\"[SmtpUtil][getProperties] Property object created. Returning Object to SMTPClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from Config", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDg4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570881", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param session Session the message is attached\n          \n          \n            \n                 * @param session Session to which the message is attached", "author": "praneesha", "createdAt": "2020-02-28T08:46:25Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+\n+/**\n+ * Contains Utility functions related to the SMTP protocol.\n+ */\n+public class SmtpUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param smtpConfig MapValue with the configuration values\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue smtpConfig) {\n+        Properties properties = new Properties();\n+        properties.put(SmtpConstants.PROPS_SMTP_HOST, smtpConfig.getStringValue(SmtpConstants.PROPS_HOST));\n+        properties.put(SmtpConstants.PROPS_SMTP_PORT,\n+                extractPortValue(smtpConfig.getIntValue(SmtpConstants.PROPS_PORT)));\n+        properties.put(SmtpConstants.PROPS_SMTP_AUTH, \"true\");\n+        properties.put(SmtpConstants.PROPS_SMTP_STARTTLS, \"true\"); //TLS\n+        properties.put(SmtpConstants.PROPS_USERNAME, smtpConfig.getStringValue(SmtpConstants.PROPS_USERNAME));\n+        properties.put(SmtpConstants.PROPS_PASSWORD, smtpConfig.getStringValue(SmtpConstants.PROPS_PASSWORD));\n+        log.debug(\"[SmtpUtil][getProperties] Property object created. Returning Object to SMTPClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from Config\n+     * @return Port value as a string\n+     */\n+    private static String extractPortValue(long longValue) {\n+        log.debug(\"[SmtpUtil][extractPortValue] Extracting Port value\");\n+        if (longValue <= 0 || longValue > MAX_PORT) {\n+            log.error(\"Invalid port number given in configuration. Setting default port \"\n+                    + SmtpConstants.DEFAULT_PORT_NUMBER);\n+            return SmtpConstants.DEFAULT_PORT_NUMBER;\n+        } else {\n+            return Long.toString(longValue);\n+        }\n+    }\n+\n+    /**\n+     * Generates a MIME message to be sent as an email.\n+     *\n+     * @param session Session the message is attached", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDk0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570943", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param username User who sens the email\n          \n          \n            \n                 * @param username User who sends the email", "author": "praneesha", "createdAt": "2020-02-28T08:46:32Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+\n+/**\n+ * Contains Utility functions related to the SMTP protocol.\n+ */\n+public class SmtpUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param smtpConfig MapValue with the configuration values\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue smtpConfig) {\n+        Properties properties = new Properties();\n+        properties.put(SmtpConstants.PROPS_SMTP_HOST, smtpConfig.getStringValue(SmtpConstants.PROPS_HOST));\n+        properties.put(SmtpConstants.PROPS_SMTP_PORT,\n+                extractPortValue(smtpConfig.getIntValue(SmtpConstants.PROPS_PORT)));\n+        properties.put(SmtpConstants.PROPS_SMTP_AUTH, \"true\");\n+        properties.put(SmtpConstants.PROPS_SMTP_STARTTLS, \"true\"); //TLS\n+        properties.put(SmtpConstants.PROPS_USERNAME, smtpConfig.getStringValue(SmtpConstants.PROPS_USERNAME));\n+        properties.put(SmtpConstants.PROPS_PASSWORD, smtpConfig.getStringValue(SmtpConstants.PROPS_PASSWORD));\n+        log.debug(\"[SmtpUtil][getProperties] Property object created. Returning Object to SMTPClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from Config\n+     * @return Port value as a string\n+     */\n+    private static String extractPortValue(long longValue) {\n+        log.debug(\"[SmtpUtil][extractPortValue] Extracting Port value\");\n+        if (longValue <= 0 || longValue > MAX_PORT) {\n+            log.error(\"Invalid port number given in configuration. Setting default port \"\n+                    + SmtpConstants.DEFAULT_PORT_NUMBER);\n+            return SmtpConstants.DEFAULT_PORT_NUMBER;\n+        } else {\n+            return Long.toString(longValue);\n+        }\n+    }\n+\n+    /**\n+     * Generates a MIME message to be sent as an email.\n+     *\n+     * @param session Session the message is attached\n+     * @param username User who sens the email", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MDk5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385570996", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param message Ballerina typed data object\n          \n          \n            \n                 * @param message Ballerina-typed data object", "author": "praneesha", "createdAt": "2020-02-28T08:46:41Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/SmtpUtil.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.AddressException;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+\n+/**\n+ * Contains Utility functions related to the SMTP protocol.\n+ */\n+public class SmtpUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(SmtpUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param smtpConfig MapValue with the configuration values\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue smtpConfig) {\n+        Properties properties = new Properties();\n+        properties.put(SmtpConstants.PROPS_SMTP_HOST, smtpConfig.getStringValue(SmtpConstants.PROPS_HOST));\n+        properties.put(SmtpConstants.PROPS_SMTP_PORT,\n+                extractPortValue(smtpConfig.getIntValue(SmtpConstants.PROPS_PORT)));\n+        properties.put(SmtpConstants.PROPS_SMTP_AUTH, \"true\");\n+        properties.put(SmtpConstants.PROPS_SMTP_STARTTLS, \"true\"); //TLS\n+        properties.put(SmtpConstants.PROPS_USERNAME, smtpConfig.getStringValue(SmtpConstants.PROPS_USERNAME));\n+        properties.put(SmtpConstants.PROPS_PASSWORD, smtpConfig.getStringValue(SmtpConstants.PROPS_PASSWORD));\n+        log.debug(\"[SmtpUtil][getProperties] Property object created. Returning Object to SMTPClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Extracts port value and checks validity.\n+     *\n+     * @param longValue Port value extracted from Config\n+     * @return Port value as a string\n+     */\n+    private static String extractPortValue(long longValue) {\n+        log.debug(\"[SmtpUtil][extractPortValue] Extracting Port value\");\n+        if (longValue <= 0 || longValue > MAX_PORT) {\n+            log.error(\"Invalid port number given in configuration. Setting default port \"\n+                    + SmtpConstants.DEFAULT_PORT_NUMBER);\n+            return SmtpConstants.DEFAULT_PORT_NUMBER;\n+        } else {\n+            return Long.toString(longValue);\n+        }\n+    }\n+\n+    /**\n+     * Generates a MIME message to be sent as an email.\n+     *\n+     * @param session Session the message is attached\n+     * @param username User who sens the email\n+     * @param message Ballerina typed data object", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTIwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385571204", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Test class for email receive using IMAP4 with least number of parameters.\n          \n          \n            \n             * Test class for email receipt using IMAP4 with least number of parameters.", "author": "praneesha", "createdAt": "2020-02-28T08:47:08Z", "path": "stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapSimpleEmailReceiveTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email;\n+\n+\n+import com.icegreen.greenmail.user.GreenMailUser;\n+import com.icegreen.greenmail.util.GreenMail;\n+import com.icegreen.greenmail.util.ServerSetupTest;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNotNull;\n+import static org.testng.AssertJUnit.fail;\n+\n+\n+/**\n+ * Test class for email receive using IMAP4 with least number of parameters.", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTMzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385571331", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // create an e-mail message using javax.mail ..\n          \n          \n            \n                    // Create an e-mail message using javax.mail.", "author": "praneesha", "createdAt": "2020-02-28T08:47:26Z", "path": "stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapSimpleEmailReceiveTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email;\n+\n+\n+import com.icegreen.greenmail.user.GreenMailUser;\n+import com.icegreen.greenmail.util.GreenMail;\n+import com.icegreen.greenmail.util.ServerSetupTest;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNotNull;\n+import static org.testng.AssertJUnit.fail;\n+\n+\n+/**\n+ * Test class for email receive using IMAP4 with least number of parameters.\n+ *\n+ * @since 1.1.3\n+ */\n+public class ImapSimpleEmailReceiveTest {\n+\n+    private CompileResult compileResult;\n+    private static final String USER_PASSWORD = \"abcdef123\";\n+    private static final String USER_NAME = \"hascode\";\n+    private static final String EMAIL_USER_ADDRESS = \"hascode@localhost\";\n+    private static final String EMAIL_FROM = \"someone@localhost.com\";\n+    private static final String EMAIL_SUBJECT = \"Test E-Mail\";\n+    private static final String EMAIL_TEXT = \"This is a test e-mail.\";\n+    private GreenMail mailServer;\n+\n+    @BeforeClass\n+    public void setup() throws MessagingException {\n+\n+        mailServer = new GreenMail(ServerSetupTest.IMAP);\n+        mailServer.start();\n+        GreenMailUser user = mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);\n+        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);\n+\n+        // create an e-mail message using javax.mail ..", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTM3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385571377", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // use greenmail to store the message\n          \n          \n            \n                    // Use greenmail to store the message.", "author": "praneesha", "createdAt": "2020-02-28T08:47:35Z", "path": "stdlib/email/src/test/java/org/ballerinalang/stdlib/email/ImapSimpleEmailReceiveTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email;\n+\n+\n+import com.icegreen.greenmail.user.GreenMailUser;\n+import com.icegreen.greenmail.util.GreenMail;\n+import com.icegreen.greenmail.util.ServerSetupTest;\n+import org.ballerinalang.model.values.BError;\n+import org.ballerinalang.model.values.BMap;\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.Session;\n+import javax.mail.internet.InternetAddress;\n+import javax.mail.internet.MimeMessage;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+import static org.testng.AssertJUnit.assertNotNull;\n+import static org.testng.AssertJUnit.fail;\n+\n+\n+/**\n+ * Test class for email receive using IMAP4 with least number of parameters.\n+ *\n+ * @since 1.1.3\n+ */\n+public class ImapSimpleEmailReceiveTest {\n+\n+    private CompileResult compileResult;\n+    private static final String USER_PASSWORD = \"abcdef123\";\n+    private static final String USER_NAME = \"hascode\";\n+    private static final String EMAIL_USER_ADDRESS = \"hascode@localhost\";\n+    private static final String EMAIL_FROM = \"someone@localhost.com\";\n+    private static final String EMAIL_SUBJECT = \"Test E-Mail\";\n+    private static final String EMAIL_TEXT = \"This is a test e-mail.\";\n+    private GreenMail mailServer;\n+\n+    @BeforeClass\n+    public void setup() throws MessagingException {\n+\n+        mailServer = new GreenMail(ServerSetupTest.IMAP);\n+        mailServer.start();\n+        GreenMailUser user = mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);\n+        mailServer.setUser(EMAIL_USER_ADDRESS, USER_NAME, USER_PASSWORD);\n+\n+        // create an e-mail message using javax.mail ..\n+        MimeMessage message = new MimeMessage((Session) null);\n+        message.setFrom(new InternetAddress(EMAIL_FROM));\n+        message.addRecipient(Message.RecipientType.TO, new InternetAddress(EMAIL_USER_ADDRESS));\n+        message.setSubject(EMAIL_SUBJECT);\n+        message.setText(EMAIL_TEXT);\n+\n+        // use greenmail to store the message", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTU4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385571587", "bodyText": "IMO, we need to return the error here.", "author": "ldclakmal", "createdAt": "2020-02-28T08:48:04Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/client/PopClient.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.client;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.ObjectValue;\n+import org.ballerinalang.stdlib.email.util.BallerinaPopException;\n+import org.ballerinalang.stdlib.email.util.ImapConstants;\n+import org.ballerinalang.stdlib.email.util.PopConstants;\n+import org.ballerinalang.stdlib.email.util.PopUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import javax.mail.Folder;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.NoSuchProviderException;\n+import javax.mail.Session;\n+import javax.mail.Store;\n+\n+\n+/**\n+ * Contains functionality of POP Client.\n+ */\n+public class PopClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopClient.class);\n+\n+    private PopClient() {\n+        // Singleton class\n+    }\n+\n+    /**\n+     * Initializes the ObjectValue object with the POP Properties.\n+     * @param clientEndpoint Represents the POP Client class\n+     * @param config Properties required to configure the POP Session\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @throws BallerinaPopException If an error occurs in POP client\n+     */\n+    public static void initClientEndpoint(ObjectValue clientEndpoint, MapValue<Object, Object> config, boolean isPop)\n+            throws BallerinaPopException {\n+        log.debug(\"[PopClient][InitClient] Calling getProperties\");\n+        Properties properties = PopUtil.getProperties(config, isPop);\n+        Session session = Session.getInstance(properties, null);\n+        try {\n+            Store store;\n+\n+            if (isPop) {\n+                store = session.getStore(PopConstants.POP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(PopConstants.PROPS_POP_HOST));\n+            } else {\n+                store = session.getStore(ImapConstants.IMAP_PROTOCOL);\n+                clientEndpoint.addNativeData(PopConstants.PROPS_HOST,\n+                        properties.getProperty(ImapConstants.PROPS_IMAP_HOST));\n+            }\n+            clientEndpoint.addNativeData(PopConstants.PROPS_STORE, store);\n+            clientEndpoint.addNativeData(PopConstants.PROPS_USERNAME,\n+                    properties.getProperty(PopConstants.PROPS_USERNAME));\n+            clientEndpoint.addNativeData(PopConstants.PROPS_PASSWORD,\n+                    properties.getProperty(PopConstants.PROPS_PASSWORD));\n+        } catch (NoSuchProviderException e) {\n+            log.error(\"Failed to read message : \", e);\n+            throw new BallerinaPopException(\"Error occurred while accessing POP server\", e);\n+        }\n+    }\n+\n+    /**\n+     * Read emails from the server.\n+     * @param clientConnector Represents the POP Client class\n+     * @param filter Criteria which are used to read emails\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return MapValue Returns the type supported to Ballerina\n+     * @throws BallerinaPopException If an error occurs in POP client\n+     */\n+    public static MapValue readMessage(ObjectValue clientConnector, MapValue<Object, Object> filter, boolean isPop)\n+            throws BallerinaPopException {", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjUzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386016537", "bodyText": "Corrected all similar methods with Object return type.", "author": "Maninda", "createdAt": "2020-02-29T09:50:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MTU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MjM0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385572348", "bodyText": "We need to update the version in all the places.", "author": "ldclakmal", "createdAt": "2020-02-28T08:49:54Z", "path": "stdlib/email/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -0,0 +1,18 @@\n+[project]\n+org-name = \"ballerina\"\n+version = \"1.1.3\"", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2OTQ1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385769455", "bodyText": "Updated with version 1.1.5.", "author": "Maninda", "createdAt": "2020-02-28T15:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3MjM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NTEzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385575138", "bodyText": "I think we need to implement the logic of this class.", "author": "ldclakmal", "createdAt": "2020-02-28T08:56:17Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/service/compiler/EmailListenerCompilerPlugin.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.service.compiler;\n+\n+import org.ballerinalang.compiler.plugins.AbstractCompilerPlugin;\n+import org.ballerinalang.util.diagnostic.DiagnosticLog;\n+\n+\n+/**\n+ * This class validates annotations attached to Ballerina service and resource nodes.\n+ *\n+ * @since 1.1.3\n+ */\n+class EmailListenerCompilerPlugin extends AbstractCompilerPlugin {", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2OTc5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385769791", "bodyText": "Let's keep the logic as we need it.", "author": "Maninda", "createdAt": "2020-02-28T15:46:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NTEzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NTM5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385575391", "bodyText": "Shall we get the filter value as user input without hardcoding to \"INBOX\"?\nset it as a defaultable parameter", "author": "daneshk", "createdAt": "2020-02-28T08:56:45Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client that interacts with an IMAP Server\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization\n+    #\n+    # + clientConfig - Configurations for IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Used to read a message\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDU2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385770564", "bodyText": "In this phase just use the hard coded parameter as there are no vital scenarios found other than INBOX.", "author": "Maninda", "createdAt": "2020-02-28T15:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NTM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5OTU3NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r386099575", "bodyText": "The problem is if we want to add another filter parameter later, we need to change the API. It's ok if we only support INDOX for now. but we need to design the API to incorporate future changes without breaking. So we pass filter as a parameter and throw an unsupported error if user pass other value will be a better approach. WDYT?", "author": "daneshk", "createdAt": "2020-03-01T11:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NTM5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NzM2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385577368", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public function send(SmtpClient clientEndpoint, map<anydata> email) returns error? = @java:Method {\n          \n          \n            \n            public function send(SmtpClient clientEndpoint, Email email) returns error? = @java:Method {", "author": "daneshk", "createdAt": "2020-02-28T09:01:07Z", "path": "stdlib/email/src/main/ballerina/src/email/service_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+\n+public function initSmtpClientEndpoint(SmtpClient clientEndpoint, map<anydata> config) returns error? = @java:Method {\n+    name : \"initClientEndpoint\",\n+    class : \"org.ballerinalang.stdlib.email.client.SmtpClient\"\n+} external;\n+\n+public function send(SmtpClient clientEndpoint, map<anydata> email) returns error? = @java:Method {", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3ODEwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385578109", "bodyText": "Shall we pass the specific record type instead of map<anydata> ?", "author": "daneshk", "createdAt": "2020-02-28T09:03:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NzM2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDk2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385770969", "bodyText": "Applied relevant record types in all the locations.", "author": "Maninda", "createdAt": "2020-02-28T15:48:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NzM2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NzU0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385577542", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public function initSmtpClientEndpoint(SmtpClient clientEndpoint, map<anydata> config) returns error? = @java:Method {\n          \n          \n            \n            public function initSmtpClientEndpoint(SmtpClient clientEndpoint, SmtpConfig config) returns error? = @java:Method {", "author": "daneshk", "createdAt": "2020-02-28T09:01:33Z", "path": "stdlib/email/src/main/ballerina/src/email/service_endpoint.bal", "diffHunk": "@@ -0,0 +1,49 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+\n+public function initSmtpClientEndpoint(SmtpClient clientEndpoint, map<anydata> config) returns error? = @java:Method {", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MTkyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385771927", "bodyText": "Applied relevant record types in all the locations.", "author": "Maninda", "createdAt": "2020-02-28T15:50:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU3NzU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU4MTAxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385581018", "bodyText": "We can replace this as follows and remove the getStringNullChecked method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String subject = getStringNullChecked(message.getSubject());\n          \n          \n            \n                    String subject = message.getSubject() != null ? message.getSubject() : \"\";", "author": "ldclakmal", "createdAt": "2020-02-28T09:09:55Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Generates MapValue object using the passed Message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        int toAddressArrayLength = getNullArrayLengthChecked(toAddress);\n+        int ccAddressArrayLength = getNullArrayLengthChecked(ccAddress);\n+        int bccAddressArrayLength = getNullArrayLengthChecked(bccAddress);\n+        int replyToAddressArrayLength = getNullArrayLengthChecked(replyToAddress);\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        for (int i = 0; i < toAddressArrayLength; i++) {\n+            toAddressArrayValue.add(i, toAddress[i].toString());\n+        }\n+        for (int i = 0; i < ccAddressArrayLength; i++) {\n+            ccAddressArrayValue.add(i, ccAddress[i].toString());\n+        }\n+        for (int i = 0; i < bccAddressArrayLength; i++) {\n+            bccAddressArrayValue.add(i, bccAddress[i].toString());\n+        }\n+        for (int i = 0; i < replyToAddressArrayLength; i++) {\n+            replyToAddressArrayValue.add(i, replyToAddress[i].toString());\n+        }\n+        String subject = getStringNullChecked(message.getSubject());", "originalCommit": "63df7d30118d1066147ba44cb94e949f04fe05a8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MjQ4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385772485", "bodyText": "I think using a method is much cleaner than repeating the same logic.", "author": "Maninda", "createdAt": "2020-02-28T15:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU4MTAxOA=="}], "type": "inlineReview"}, {"oid": "e969b2d676275f2a8ccd2b2e108b8b142df8ec53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e969b2d676275f2a8ccd2b2e108b8b142df8ec53", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T09:55:15Z", "type": "commit"}, {"oid": "006587ce7c82b50ff0b59bb39a5bb07e8dcaaf64", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/006587ce7c82b50ff0b59bb39a5bb07e8dcaaf64", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T09:55:36Z", "type": "commit"}, {"oid": "0d13f1eab3e52d75fbd60ab8ae7696c3e6aa6507", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0d13f1eab3e52d75fbd60ab8ae7696c3e6aa6507", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T09:55:56Z", "type": "commit"}, {"oid": "00aa135e3127d1cf56c6c71938ab0b10f7bb5823", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00aa135e3127d1cf56c6c71938ab0b10f7bb5823", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T09:56:29Z", "type": "commit"}, {"oid": "00a2428371ba594edac36e57f2fbc9c93f7d47da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/00a2428371ba594edac36e57f2fbc9c93f7d47da", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T09:57:02Z", "type": "commit"}, {"oid": "d889036b984d99df80308e478c0b89ef462e1520", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d889036b984d99df80308e478c0b89ef462e1520", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T09:57:33Z", "type": "commit"}, {"oid": "739348deb1bb1ee210e514fc572d7afed93847db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/739348deb1bb1ee210e514fc572d7afed93847db", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T09:58:04Z", "type": "commit"}, {"oid": "e74daa62133e95077036a07e68ed41c71fd063a5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e74daa62133e95077036a07e68ed41c71fd063a5", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T10:00:14Z", "type": "commit"}, {"oid": "cef84215b92a0e5a8577b4cec0c75da4704ee53f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cef84215b92a0e5a8577b4cec0c75da4704ee53f", "message": "Remove empty line\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T10:01:28Z", "type": "commit"}, {"oid": "d40c0fd08aecb59f0aca1a9e278ab32d8706a5db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d40c0fd08aecb59f0aca1a9e278ab32d8706a5db", "message": "Correct grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:02:50Z", "type": "commit"}, {"oid": "d39dd2929925e8631b76b375ad6365b08c0271d0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d39dd2929925e8631b76b375ad6365b08c0271d0", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:03:38Z", "type": "commit"}, {"oid": "57629b1cdc0dff98891f2352ea5dd44c0fb8a2a3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/57629b1cdc0dff98891f2352ea5dd44c0fb8a2a3", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:04:35Z", "type": "commit"}, {"oid": "79eb1a5fcf2eb7119854331e1a9b27cc96b28246", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79eb1a5fcf2eb7119854331e1a9b27cc96b28246", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:05:14Z", "type": "commit"}, {"oid": "ce3930545a6d348782a1fb443b60c4d1512750ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce3930545a6d348782a1fb443b60c4d1512750ed", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:05:38Z", "type": "commit"}, {"oid": "bc054e9ff80cca842cfd9fe0969d59964515e3a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc054e9ff80cca842cfd9fe0969d59964515e3a0", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:06:14Z", "type": "commit"}, {"oid": "6afb86b57a5a1b0af6604511df1905dc03cbbafb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6afb86b57a5a1b0af6604511df1905dc03cbbafb", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:06:29Z", "type": "commit"}, {"oid": "36c2bdc3645ced69e687ec39a720c30593d5f072", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36c2bdc3645ced69e687ec39a720c30593d5f072", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:07:42Z", "type": "commit"}, {"oid": "7dfc19bca60536037fcb34a42d8150509aa6b621", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dfc19bca60536037fcb34a42d8150509aa6b621", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:08:36Z", "type": "commit"}, {"oid": "ede5fe180d943a02c0a3465a5f5b78517701e0c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ede5fe180d943a02c0a3465a5f5b78517701e0c3", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:09:02Z", "type": "commit"}, {"oid": "5f065d3ac8db383ffc750d4971dac7d161b4fea2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5f065d3ac8db383ffc750d4971dac7d161b4fea2", "message": "Correct the grammar\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:09:31Z", "type": "commit"}, {"oid": "63a93a79a7e5058281883edfaa06ea76b2fb83da", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/63a93a79a7e5058281883edfaa06ea76b2fb83da", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:57:59Z", "type": "commit"}, {"oid": "1eb3351c7884f8244c218ddf4c1d338bfa2d113a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1eb3351c7884f8244c218ddf4c1d338bfa2d113a", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:58:49Z", "type": "commit"}, {"oid": "aff52a02230f0b034b3920e0a04c6f957692df43", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aff52a02230f0b034b3920e0a04c6f957692df43", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:59:21Z", "type": "commit"}, {"oid": "e2e3efb67245684670087b301851448b3f69849d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2e3efb67245684670087b301851448b3f69849d", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T10:59:59Z", "type": "commit"}, {"oid": "909b08e5e7ea459cff6d5d5d1a382f1df970fe90", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/909b08e5e7ea459cff6d5d5d1a382f1df970fe90", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:00:24Z", "type": "commit"}, {"oid": "dd370c4644ae09edccd0e8bfbea8f41d6bbe32b9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd370c4644ae09edccd0e8bfbea8f41d6bbe32b9", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:00:53Z", "type": "commit"}, {"oid": "a742c85205aef1bb040f351dfbb983c266df9d42", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a742c85205aef1bb040f351dfbb983c266df9d42", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:01:37Z", "type": "commit"}, {"oid": "b6d796f469afb633a2c23145d14b0e11522f6ad6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6d796f469afb633a2c23145d14b0e11522f6ad6", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:02:58Z", "type": "commit"}, {"oid": "c8dc9a36527eeb5fe5bbe6ecb3e0b3c76f13b414", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8dc9a36527eeb5fe5bbe6ecb3e0b3c76f13b414", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:03:31Z", "type": "commit"}, {"oid": "54e9c197ef56f03c1497e0bf16789dc28694832c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54e9c197ef56f03c1497e0bf16789dc28694832c", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:04:07Z", "type": "commit"}, {"oid": "01dcc6a2e9eed45d8c7559aa246fd1cf74af7a08", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/01dcc6a2e9eed45d8c7559aa246fd1cf74af7a08", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:06:57Z", "type": "commit"}, {"oid": "f570d9ebfb9f9e789ec25005a39aff88ee192613", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f570d9ebfb9f9e789ec25005a39aff88ee192613", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:07:56Z", "type": "commit"}, {"oid": "77f4be7a79d559f1bdf9f8761edc352c0d0c1c4f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77f4be7a79d559f1bdf9f8761edc352c0d0c1c4f", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:08:32Z", "type": "commit"}, {"oid": "c599bcc8cc525bc4ae7eabe86ae4620e717d5e60", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c599bcc8cc525bc4ae7eabe86ae4620e717d5e60", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:09:02Z", "type": "commit"}, {"oid": "1bc036b183386377c0b7b58ee3a6726b86c90cae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1bc036b183386377c0b7b58ee3a6726b86c90cae", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:11:00Z", "type": "commit"}, {"oid": "ce88ab5f55b0cc0e3871990456f97ab0cc37757b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ce88ab5f55b0cc0e3871990456f97ab0cc37757b", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:12:27Z", "type": "commit"}, {"oid": "a526358858821aef36074f62b3dd0c7f7864b0bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a526358858821aef36074f62b3dd0c7f7864b0bb", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:15:13Z", "type": "commit"}, {"oid": "22ab8449babcf62a6d74c7193dfa85aa2afd8cdf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/22ab8449babcf62a6d74c7193dfa85aa2afd8cdf", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:17:10Z", "type": "commit"}, {"oid": "780e15d38c8d0a4e3f3b31ee28a22584f771c0cd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/780e15d38c8d0a4e3f3b31ee28a22584f771c0cd", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:17:46Z", "type": "commit"}, {"oid": "3e340f3a08ab1ef78f8f2dd141cbad8cb5e3c457", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e340f3a08ab1ef78f8f2dd141cbad8cb5e3c457", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:19:15Z", "type": "commit"}, {"oid": "310eab3a574900d35a0ec5def5204dd9f9f8af2d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/310eab3a574900d35a0ec5def5204dd9f9f8af2d", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:20:02Z", "type": "commit"}, {"oid": "88c8f62f363fbcef9ced7a74d9fdf210bea6ee65", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/88c8f62f363fbcef9ced7a74d9fdf210bea6ee65", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:20:25Z", "type": "commit"}, {"oid": "c8e2270b05d868383f532ac3db10e8ae1120ce1b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8e2270b05d868383f532ac3db10e8ae1120ce1b", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:20:47Z", "type": "commit"}, {"oid": "46d631e810dc1bf597c23abece18551abbf3f550", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/46d631e810dc1bf597c23abece18551abbf3f550", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:21:08Z", "type": "commit"}, {"oid": "d9029260f74d50decf651360ca5d8a7287c11f4e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9029260f74d50decf651360ca5d8a7287c11f4e", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:21:29Z", "type": "commit"}, {"oid": "cccf81e374a87fe5a5ca8ea1a1be1ac043dffa30", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cccf81e374a87fe5a5ca8ea1a1be1ac043dffa30", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:21:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzOTcwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385639703", "bodyText": "Can this be () ?", "author": "ThisaruGuruge", "createdAt": "2020-02-28T11:14:07Z", "path": "stdlib/email/src/main/ballerina/src/email/imap_client_endpoint.bal", "diffHunk": "@@ -0,0 +1,55 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# Represents an IMAP Client, which interacts with an IMAP Server.\n+public type ImapClient client object {\n+\n+    # Gets invoked during object initialization.\n+    #\n+    # + clientConfig - Configurations for the IMAP Client\n+    public function __init(ImapConfig clientConfig) {\n+        error? response = initImapClientEndpoint(self, clientConfig, false);\n+    }\n+\n+    # Reads a message.\n+    #\n+    # + return - An `error` if failed to send the message to the recipient\n+    public remote function read() returns Email|error? {\n+        Filter filter = {\n+            folder: \"INBOX\"\n+        };\n+        map<anydata>|error? email = imapRead(self, filter, false);\n+        if(email is error) {\n+            return email;\n+        } else {\n+            return <Email?>email;\n+        }\n+    }\n+\n+};\n+\n+# Configuration of the IMAP Endpoint.\n+#\n+# + host - Host address of the IMAP server\n+# + port - Port number of the IMAP server\n+# + username - Username to access the IMAP server\n+# + password - Password to access the IMAP server\n+public type ImapConfig record {|\n+    string host;\n+    int? port = 143;", "originalCommit": "ce88ab5f55b0cc0e3871990456f97ab0cc37757b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NDEwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385774104", "bodyText": "Corrected the record types.", "author": "Maninda", "createdAt": "2020-02-28T15:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzOTcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MDc0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385640743", "bodyText": "Shall we use foreach loop instead of for loop ? We can use toAddressArrayValue.append() instead of toAddressArrayValue.add().\nCheck for the other places too.", "author": "ThisaruGuruge", "createdAt": "2020-02-28T11:16:29Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Generates MapValue object using the passed Message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        int toAddressArrayLength = getNullArrayLengthChecked(toAddress);\n+        int ccAddressArrayLength = getNullArrayLengthChecked(ccAddress);\n+        int bccAddressArrayLength = getNullArrayLengthChecked(bccAddress);\n+        int replyToAddressArrayLength = getNullArrayLengthChecked(replyToAddress);\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        for (int i = 0; i < toAddressArrayLength; i++) {\n+            toAddressArrayValue.add(i, toAddress[i].toString());", "originalCommit": "ce88ab5f55b0cc0e3871990456f97ab0cc37757b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3Mzc4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385773788", "bodyText": "Applied the changes with null checks.", "author": "Maninda", "createdAt": "2020-02-28T15:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MDc0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MjE3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385642176", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (int i = 0; i < ccAddressArrayLength; i++) {\n          \n          \n            \n                        ccAddressArrayValue.add(i, ccAddress[i].toString());\n          \n          \n            \n                    }\n          \n          \n            \n                    for (Address address : ccAddress) {\n          \n          \n            \n                        ccAddressArrayValue.append(address.toString());\n          \n          \n            \n                    }", "author": "ThisaruGuruge", "createdAt": "2020-02-28T11:20:10Z", "path": "stdlib/email/src/main/java/org/ballerinalang/stdlib/email/util/PopUtil.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.stdlib.email.util;\n+\n+import org.ballerinalang.jvm.BallerinaValues;\n+import org.ballerinalang.jvm.types.BArrayType;\n+import org.ballerinalang.jvm.types.BTypes;\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import javax.mail.Address;\n+import javax.mail.BodyPart;\n+import javax.mail.Message;\n+import javax.mail.MessagingException;\n+import javax.mail.internet.MimeMultipart;\n+\n+/**\n+ * Contains Utility functions related to POP3 protocol.\n+ */\n+public class PopUtil {\n+\n+    private static final Logger log = LoggerFactory.getLogger(PopUtil.class);\n+    private static final int MAX_PORT = 65535;\n+\n+    /**\n+     * Generates Properties object using the passed MapValue.\n+     *\n+     * @param popConfig MapValue with the configuration values\n+     * @param isPop True if the protocol is POP3 and false otherwise (if protocol is IMAP)\n+     * @return Properties object\n+     */\n+    public static Properties getProperties(MapValue popConfig, boolean isPop) {\n+        log.debug(\"[PopUtil][getProperties] Extracting Property values from Config\");\n+        Properties properties = new Properties();\n+        if (isPop) {\n+            properties.put(PopConstants.PROPS_POP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(PopConstants.PROPS_POP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(PopConstants.PROPS_POP_AUTH, \"true\");\n+            properties.put(PopConstants.PROPS_POP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, PopConstants.POP_PROTOCOL);\n+        } else {\n+            properties.put(ImapConstants.PROPS_IMAP_HOST, popConfig.getStringValue(PopConstants.PROPS_HOST));\n+            properties.put(ImapConstants.PROPS_IMAP_PORT,\n+                    extractPortValue(popConfig.getIntValue(PopConstants.PROPS_PORT), isPop));\n+            properties.put(ImapConstants.PROPS_IMAP_AUTH, \"true\");\n+            properties.put(ImapConstants.PROPS_IMAP_STARTTLS, \"true\");\n+            properties.put(EmailConstants.MAIL_STORE_PROTOCOL, ImapConstants.IMAP_PROTOCOL);\n+        }\n+\n+        properties.put(PopConstants.PROPS_USERNAME, popConfig.getStringValue(PopConstants.PROPS_USERNAME));\n+        properties.put(PopConstants.PROPS_PASSWORD, popConfig.getStringValue(PopConstants.PROPS_PASSWORD));\n+\n+        log.debug(\"[PopUtil][getProperties] Property object created. Returning Object to PopClient\");\n+        return properties;\n+    }\n+\n+\n+    /**\n+     * Generates MapValue object using the passed Message.\n+     *\n+     * @param message received\n+     * @return MapValue object\n+     * @throws MessagingException If an error occurs related to messaging\n+     * @throws IOException If an error occurs related to I/O\n+     */\n+    public static MapValue getMapValue(Message message) throws MessagingException, IOException {\n+        log.debug(\"[PopUtil][getMapValue] Extracting MapValue values from Config\");\n+        Map<String, Object> valueMap = new HashMap<>();\n+        Address[] toAddress = message.getRecipients(Message.RecipientType.TO);\n+        Address[] ccAddress = message.getRecipients(Message.RecipientType.CC);\n+        Address[] bccAddress = message.getRecipients(Message.RecipientType.BCC);\n+        Address[] replyToAddress = message.getReplyTo();\n+        int toAddressArrayLength = getNullArrayLengthChecked(toAddress);\n+        int ccAddressArrayLength = getNullArrayLengthChecked(ccAddress);\n+        int bccAddressArrayLength = getNullArrayLengthChecked(bccAddress);\n+        int replyToAddressArrayLength = getNullArrayLengthChecked(replyToAddress);\n+        ArrayValue toAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue ccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue bccAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        ArrayValue replyToAddressArrayValue = new ArrayValueImpl(new BArrayType(BTypes.typeString));\n+        for (int i = 0; i < toAddressArrayLength; i++) {\n+            toAddressArrayValue.add(i, toAddress[i].toString());\n+        }\n+        for (int i = 0; i < ccAddressArrayLength; i++) {\n+            ccAddressArrayValue.add(i, ccAddress[i].toString());\n+        }", "originalCommit": "ce88ab5f55b0cc0e3871990456f97ab0cc37757b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MzQ3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21346#discussion_r385773473", "bodyText": "Applied the changes with null checks.", "author": "Maninda", "createdAt": "2020-02-28T15:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY0MjE3Ng=="}], "type": "inlineReview"}, {"oid": "519c2cd27ac3c3e5bde2ed6706447a9db73527f0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/519c2cd27ac3c3e5bde2ed6706447a9db73527f0", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:22:10Z", "type": "commit"}, {"oid": "75bf05ddf74879bf514b3e7472dcce5bf61becad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/75bf05ddf74879bf514b3e7472dcce5bf61becad", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:23:25Z", "type": "commit"}, {"oid": "c0b8bd50c4e72b2a21912542a803bb5a0b7e38fd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c0b8bd50c4e72b2a21912542a803bb5a0b7e38fd", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:25:54Z", "type": "commit"}, {"oid": "ae22a4f189427d52d84ed176a3b3cb58537202b7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ae22a4f189427d52d84ed176a3b3cb58537202b7", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:26:50Z", "type": "commit"}, {"oid": "baebc4427162c98a3d360e70e5c1240d3c9a0404", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/baebc4427162c98a3d360e70e5c1240d3c9a0404", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:27:23Z", "type": "commit"}, {"oid": "0b9b857fc44d5bfbd10ffe43a192f89ddeef75e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b9b857fc44d5bfbd10ffe43a192f89ddeef75e7", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:28:29Z", "type": "commit"}, {"oid": "75f9b68dd1ebe9e29af843e39db155de283a9669", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/75f9b68dd1ebe9e29af843e39db155de283a9669", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:29:11Z", "type": "commit"}, {"oid": "1411abf476230973680d4cc441f6fcc3d1260148", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1411abf476230973680d4cc441f6fcc3d1260148", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:30:04Z", "type": "commit"}, {"oid": "6195f0b9ce621e61bb3db32137c982480192b76d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6195f0b9ce621e61bb3db32137c982480192b76d", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:30:47Z", "type": "commit"}, {"oid": "9968e33b51d17ecd01637c5f14db0bec55df3ed9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9968e33b51d17ecd01637c5f14db0bec55df3ed9", "message": "Remove an empty line.\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T11:31:52Z", "type": "commit"}, {"oid": "1531a3e6b55463da2cf0c458c858f2152d18c8c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1531a3e6b55463da2cf0c458c858f2152d18c8c0", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:33:19Z", "type": "commit"}, {"oid": "e94834cec2027e94cec5e906541af647057a666c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e94834cec2027e94cec5e906541af647057a666c", "message": "Remove an empty line.\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T11:36:52Z", "type": "commit"}, {"oid": "c8d5572b6b41683a3df99a4dc8059224a1782534", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c8d5572b6b41683a3df99a4dc8059224a1782534", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:37:38Z", "type": "commit"}, {"oid": "82ed891e37f8d126af5ceda172e38aa5a8424737", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/82ed891e37f8d126af5ceda172e38aa5a8424737", "message": "Remove an empty line.\n\nCo-Authored-By: Chanaka Lakmal <ldclakmal@gmail.com>", "committedDate": "2020-02-28T11:39:27Z", "type": "commit"}, {"oid": "b61cdcd547ce55220b4414b9f06bbf1979e8940b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b61cdcd547ce55220b4414b9f06bbf1979e8940b", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:42:00Z", "type": "commit"}, {"oid": "e127e58c49d7ccaf2c9ee39ed826cbdb9a372c23", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e127e58c49d7ccaf2c9ee39ed826cbdb9a372c23", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:42:37Z", "type": "commit"}, {"oid": "02f3e5f486c727a7a5cae63c098a1af2a8b420f6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/02f3e5f486c727a7a5cae63c098a1af2a8b420f6", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:43:18Z", "type": "commit"}, {"oid": "368f54560a87cbb69e409b9e668c5b1bedd46da7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/368f54560a87cbb69e409b9e668c5b1bedd46da7", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:43:57Z", "type": "commit"}, {"oid": "5df5f11658ae77b88880ce4c7e50483ceb27e63d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5df5f11658ae77b88880ce4c7e50483ceb27e63d", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:44:40Z", "type": "commit"}, {"oid": "9e44c5c8fa1f5b1f0686047ee3bb26777d2f4d64", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9e44c5c8fa1f5b1f0686047ee3bb26777d2f4d64", "message": "Correct the grammar.\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-02-28T11:45:19Z", "type": "commit"}]}