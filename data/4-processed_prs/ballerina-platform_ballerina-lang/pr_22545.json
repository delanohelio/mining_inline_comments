{"pr_number": 22545, "pr_title": "Refactor the JWT module API doc", "pr_createdAt": "2020-04-09T11:38:39Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545", "timeline": [{"oid": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "message": "Refactor the API doc\n\nAdd code snippets\n\nChanges in the bal file", "committedDate": "2020-04-09T11:39:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NTEyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406145128", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import ballerina/crypto;\n          \n          \n            \n            import ballerina/config;\n          \n          \n            \n            import ballerina/jwt;\n          \n          \n            \n            import ballerina/time;\n          \n          \n            \n            import ballerina/io;\n          \n          \n            \n            import ballerina/config;\n          \n          \n            \n            import ballerina/crypto;\n          \n          \n            \n            import ballerina/io;\n          \n          \n            \n            import ballerina/jwt;\n          \n          \n            \n            import ballerina/time;", "author": "ldclakmal", "createdAt": "2020-04-09T11:42:11Z", "path": "examples/jwt-token-validation/jwt_token_validation.bal", "diffHunk": "@@ -0,0 +1,61 @@\n+import ballerina/crypto;\n+import ballerina/config;\n+import ballerina/jwt;\n+import ballerina/time;\n+import ballerina/io;", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NTgzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406145830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This example demonstrates how the JWT token generate and validate that token.\n          \n          \n            \n            // This example demonstrates how to issue and validate a JWT.", "author": "ldclakmal", "createdAt": "2020-04-09T11:43:34Z", "path": "examples/jwt-token-validation/jwt_token_validation.description", "diffHunk": "@@ -0,0 +1 @@\n+// This example demonstrates how the JWT token generate and validate that token.", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0NjkyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406146922", "bodyText": "IMO, this should change as follows. Please update all the file names, folder names related to BBE, once the suggestion is approved by @daneshk.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            \"name\": \"JWT Token Validation\",\n          \n          \n            \n                            \"url\": \"jwt-token-validation\"\n          \n          \n            \n                            \"name\": \"JWT Issue/Validate\",\n          \n          \n            \n                            \"url\": \"jwt-issue-validate\"", "author": "ldclakmal", "createdAt": "2020-04-09T11:45:53Z", "path": "examples/index.json", "diffHunk": "@@ -630,6 +630,10 @@\n             {\n                 \"name\": \"Cryptographic Operations\",\n                 \"url\": \"crypto\"\n+            },\n+            {\n+                \"name\": \"JWT Token Validation\",\n+                \"url\": \"jwt-token-validation\"", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MzA3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406153072", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Issues a JWT token based on provided header, payload and config.\n          \n          \n            \n                // Issues a JWT based on provided header, payload and config.", "author": "ldclakmal", "createdAt": "2020-04-09T11:58:25Z", "path": "examples/jwt-token-validation/jwt_token_validation.bal", "diffHunk": "@@ -0,0 +1,61 @@\n+import ballerina/crypto;\n+import ballerina/config;\n+import ballerina/jwt;\n+import ballerina/time;\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Defines the keystore\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the truststore\n+    crypto:TrustStore trustStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaTruststore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT validator configurations\n+    jwt:JwtValidatorConfig validatorConfig = {\n+        issuer: \"wso2\",\n+        audience: \"ballerina\",\n+        clockSkewInSeconds: 60,\n+        trustStoreConfig: {\n+            certificateAlias: \"ballerina\",\n+            trustStore: trustStore\n+        }\n+    };\n+\n+    // Defines the JWT header and set the values\n+    jwt:JwtHeader header = {};\n+    header.alg = jwt:RS256;\n+    header.typ = \"JWT\";\n+\n+    // Defines the JWT payload and set the values\n+    jwt:JwtPayload payload = {};\n+    payload.sub = \"John\";\n+    payload.iss = \"wso2\";\n+    payload.jti = \"100078234ba23\";\n+    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n+    payload.exp = time:currentTime().time/1000 + 600;\n+\n+    // Issues a JWT token based on provided header, payload and config.", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MzczOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406153739", "bodyText": "Shall we print the JWT here and move the validation part into the next section?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Validates the created JWT token\n          \n          \n            \n                    jwt:JwtPayload|error result = jwt:validateJwt(jwt, validatorConfig);\n          \n          \n            \n                    io:println(result);\n          \n          \n            \n                    io:println(jwt);", "author": "ldclakmal", "createdAt": "2020-04-09T11:59:47Z", "path": "examples/jwt-token-validation/jwt_token_validation.bal", "diffHunk": "@@ -0,0 +1,61 @@\n+import ballerina/crypto;\n+import ballerina/config;\n+import ballerina/jwt;\n+import ballerina/time;\n+import ballerina/io;\n+\n+public function main() {\n+\n+    // Defines the keystore\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the truststore\n+    crypto:TrustStore trustStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaTruststore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT validator configurations\n+    jwt:JwtValidatorConfig validatorConfig = {\n+        issuer: \"wso2\",\n+        audience: \"ballerina\",\n+        clockSkewInSeconds: 60,\n+        trustStoreConfig: {\n+            certificateAlias: \"ballerina\",\n+            trustStore: trustStore\n+        }\n+    };\n+\n+    // Defines the JWT header and set the values\n+    jwt:JwtHeader header = {};\n+    header.alg = jwt:RS256;\n+    header.typ = \"JWT\";\n+\n+    // Defines the JWT payload and set the values\n+    jwt:JwtPayload payload = {};\n+    payload.sub = \"John\";\n+    payload.iss = \"wso2\";\n+    payload.jti = \"100078234ba23\";\n+    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n+    payload.exp = time:currentTime().time/1000 + 600;\n+\n+    // Issues a JWT token based on provided header, payload and config.\n+    string|error jwt = jwt:issueJwt(header, payload, config);\n+    if (jwt is string) {\n+        // Validates the created JWT token\n+        jwt:JwtPayload|error result = jwt:validateJwt(jwt, validatorConfig);\n+        io:println(result);", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NDA2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406154065", "bodyText": "Better to move validator config and truststore as well.", "author": "ldclakmal", "createdAt": "2020-04-09T12:00:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MzczOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NDkyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406154923", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operations, which you can perform with this module, see the below Functions. For examples on the usage of the operations, see [JWT Token Validation](https://ballerina.io/v1-2/learn/by-example/jwt-token-validation.html), [Secured Client with JWT Auth](https://ballerina.io/v1-2/learn/by-example/secured-client-with-jwt-auth.html), [Secured Service with JWT Auth](https://ballerina.io/v1-2/learn/by-example/secured-service-with-jwt-auth.html).\n          \n          \n            \n            For information on the operations, which you can perform with this module, see the below Functions. For examples on the usage of the operations, see [JWT Issue/Validate Example](https://ballerina.io/v1-2/learn/by-example/jwt-issue-validate.html), [Secured Client with JWT Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-client-with-jwt-auth.html), [Secured Service with JWT Auth Example](https://ballerina.io/v1-2/learn/by-example/secured-service-with-jwt-auth.html).", "author": "ldclakmal", "createdAt": "2020-04-09T12:02:23Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/Module.md", "diffHunk": "@@ -38,62 +36,5 @@ jwt:OutboundJwtAuthProvider jwtAuthProvider = new({\n     }\n });\n ```\n-## Samples\n-\n-#### Issuing a JWT\n-\n-```ballerina\n-import ballerina/crypto;\n-import ballerina/jwt;\n-import ballerina/time;\n-\n-public function main() {\n-    crypto:KeyStore keyStore = { \n-        path: \"${ballerina.home}/bre/security/ballerinaKeystore.p12\", \n-        password: \"ballerina\"\n-    };\n-    jwt:JwtKeyStoreConfig config = {\n-        keyStore: keyStore,\n-        keyAlias: \"ballerina\",\n-        keyPassword: \"ballerina\"\n-    };\n-\n-    jwt:JwtHeader header = {};\n-    header.alg = jwt:RS256;\n-    header.typ = \"JWT\";\n-\n-    jwt:JwtPayload payload = {};\n-    payload.sub = \"John\";\n-    payload.iss = \"wso2\";\n-    payload.jti = \"100078234ba23\";\n-    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n-    payload.exp = time:currentTime().time/1000 + 600;\n-\n-    string|error jwt = jwt:issueJwt(header, payload, config);\n-}\n-```\n-\n-#### Validating a JWT\n-\n-```ballerina\n-import ballerina/crypto;\n-import ballerina/jwt;\n-\n-public function main() {\n-    crypto:TrustStore trustStore = {\n-        path: \"${ballerina.home}/bre/security/ballerinaTruststore.p12\", \n-        password: \"ballerina\"\n-    };\n-    jwt:JwtValidatorConfig config = {\n-        issuer: \"wso2\",\n-        audience: \"ballerina\",\n-        clockSkewInSeconds: 60,\n-        trustStoreConfig: {\n-            certificateAlias: \"ballerina\",\n-            trustStore: trustStore\n-        }\n-    };\n \n-    jwt:JwtPayload|error result = jwt:validateJwt(jwtToken, config);\n-}\n-```\n+For information on the operations, which you can perform with this module, see the below Functions. For examples on the usage of the operations, see [JWT Token Validation](https://ballerina.io/v1-2/learn/by-example/jwt-token-validation.html), [Secured Client with JWT Auth](https://ballerina.io/v1-2/learn/by-example/secured-client-with-jwt-auth.html), [Secured Service with JWT Auth](https://ballerina.io/v1-2/learn/by-example/secured-service-with-jwt-auth.html).", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NTQ2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406155468", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Authenticates with a JWT token.\n          \n          \n            \n                # Authenticates with a JWT.", "author": "ldclakmal", "createdAt": "2020-04-09T12:03:28Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,12 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n+    # Authenticates with a JWT token.", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NTU5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406155595", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + credential - JWT token extracted from the authentication header\n          \n          \n            \n                # + credential - JWT extracted from the authentication header", "author": "ldclakmal", "createdAt": "2020-04-09T12:03:45Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,12 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n+    # Authenticates with a JWT token.\n+    #```ballerina boolean|auth:Error result = authenticate(string credential); ```\n     #\n-    # + credential - Jwt token extracted from the authentication header\n-    # + return - `true` if authentication is successful, othewise `false` or `auth:Error` occurred during JWT validation\n+    # + credential - JWT token extracted from the authentication header", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NTczNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406155734", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Issues a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is\n          \n          \n            \n            # Issues a JWT based on provided header and payload. JWT will be signed (JWS) if `crypto:KeyStore` information is", "author": "ldclakmal", "createdAt": "2020-04-09T12:03:59Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -47,13 +47,14 @@ public type JwtKeyStoreConfig record {|\n     string keyPassword;\n |};\n \n-# Issue a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is provided\n-# in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# Issues a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NTk1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406155950", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - JWT token string or else an `Error` if token validation fails\n          \n          \n            \n            # + return - JWT as a `string` or else an `Error` if token validation fails", "author": "ldclakmal", "createdAt": "2020-04-09T12:04:30Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -47,13 +47,14 @@ public type JwtKeyStoreConfig record {|\n     string keyPassword;\n |};\n \n-# Issue a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is provided\n-# in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# Issues a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is\n+# provided in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# ```ballerina string|error jwt = jwt:issueJwt(header, payload, config); ```\n #\n # + header - JwtHeader object\n # + payload - JwtPayload object\n # + config - JWT key store config record\n-# + return - JWT token string or an `Error` if token validation fails\n+# + return - JWT token string or else an `Error` if token validation fails", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NjExNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406156115", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + jwtToken - JWT token that needs to be validated\n          \n          \n            \n            # + jwtToken - JWT that needs to be validated", "author": "ldclakmal", "createdAt": "2020-04-09T12:04:49Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "diffHunk": "@@ -56,11 +56,12 @@ public type InboundJwtCacheEntry record {|\n     int? expTime;\n |};\n \n-# Validate the given JWT string.\n+# Validates the given JWT string.\n+#```ballerina jwt:JwtPayload|error result = jwt:validateJwt(jwt, validatorConfig); ```\n #\n # + jwtToken - JWT token that needs to be validated", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NjIyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406156220", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + jwtToken - JWT token that needs to be decoded\n          \n          \n            \n            # + jwtToken - JWT that needs to be decoded", "author": "ldclakmal", "createdAt": "2020-04-09T12:05:04Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "diffHunk": "@@ -74,10 +75,11 @@ function getJwtComponents(string jwtToken) returns string[]|Error {\n     return jwtComponents;\n }\n \n-# Decode the given JWT string.\n+# Decodes the given JWT string.\n+# ```ballerina [JwtHeader, JwtPayload]|Error [header, payload] = decodeJwt(jwtToken); ```\n #\n # + jwtToken - JWT token that needs to be decoded", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1NzYwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406157602", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - `true` if authentication is successful, othewise `false` or else an `auth:Error` if credential can't be\n          \n          \n            \n                # + return - `true` if authentication is successful, otherwise `false` or else an `auth:Error` if JWT validation failed", "author": "ldclakmal", "createdAt": "2020-04-09T12:07:52Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,12 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n+    # Authenticates with a JWT token.\n+    #```ballerina boolean|auth:Error result = authenticate(string credential); ```\n     #\n-    # + credential - Jwt token extracted from the authentication header\n-    # + return - `true` if authentication is successful, othewise `false` or `auth:Error` occurred during JWT validation\n+    # + credential - JWT token extracted from the authentication header\n+    # + return - `true` if authentication is successful, othewise `false` or else an `auth:Error` if credential can't be", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1ODk1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406158957", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # provided in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n          \n          \n            \n            # provided in the `jwt:JwtKeyStoreConfig` and the `alg` field of `jwt:JwtHeader` is not `jwt:NONE`.", "author": "ldclakmal", "createdAt": "2020-04-09T12:10:30Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -47,13 +47,14 @@ public type JwtKeyStoreConfig record {|\n     string keyPassword;\n |};\n \n-# Issue a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is provided\n-# in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# Issues a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is\n+# provided in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2OTM2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406169364", "bodyText": "@kalaiyarasiganeshalingam Is this get properly rendered? Otherwise shall we update all code-snippet as follows:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # ```ballerina string|error jwt = jwt:issueJwt(header, payload, config); ```\n          \n          \n            \n            # ```ballerina\n          \n          \n            \n            # string|error jwt = jwt:issueJwt(header, payload, config);\n          \n          \n            \n            # ```", "author": "ldclakmal", "createdAt": "2020-04-09T12:30:06Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -47,13 +47,14 @@ public type JwtKeyStoreConfig record {|\n     string keyPassword;\n |};\n \n-# Issue a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is provided\n-# in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# Issues a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is\n+# provided in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# ```ballerina string|error jwt = jwt:issueJwt(header, payload, config); ```", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMzU1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406213559", "bodyText": "we can't change to this format because it will produce a compilation error", "author": "kalaiyarasiganeshalingam", "createdAt": "2020-04-09T13:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2OTM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2OTgwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406169805", "bodyText": "Shall we update all the places?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - The header string or else an `Error` if building the string fails\n          \n          \n            \n            # + return - The header string or else an `jwt:Error` if building the string fails", "author": "ldclakmal", "createdAt": "2020-04-09T12:30:56Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -115,10 +116,11 @@ public function issueJwt(JwtHeader header, JwtPayload payload, JwtKeyStoreConfig\n     }\n }\n \n-# Build the header string from the `JwtHeader` record.\n+# Builds the header string from the `JwtHeader` record.\n+# ```ballerina string|Error jwtHeader = buildHeaderString(header);```\n #\n # + header - JWT header record to be built as a string\n-# + return - The header string or an `Error` if building the string fails\n+# + return - The header string or else an `Error` if building the string fails", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3NzY4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406177689", "bodyText": "Shall we update into following guideline in all the places?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Builds the payload string from the `JwtPayload` record.\n          \n          \n            \n            # Builds the payload string from the `jwt:JwtPayload` record.", "author": "ldclakmal", "createdAt": "2020-04-09T12:45:40Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -162,10 +164,11 @@ public function buildHeaderString(JwtHeader header) returns string|Error {\n     return encodedPayload;\n }\n \n-# Build the payload string from the `JwtPayload` record.\n+# Builds the payload string from the `JwtPayload` record.", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3ODI1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406178253", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - String token or `()` if nothing to be returned or else an `auth:Error` if token can't be generated\n          \n          \n            \n                # + return - JWT as `string` or `()` if nothing to be returned or else an `auth:Error` if token can't be generated", "author": "ldclakmal", "createdAt": "2020-04-09T12:46:46Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/outbound_jwt_auth_provider.bal", "diffHunk": "@@ -59,19 +60,20 @@ public type OutboundJwtAuthProvider object {\n         return authToken;\n     }\n \n-    # Inspect the incoming data and generate the token for JWT authentication.\n+    # Inspects the incoming data and generates the token for JWT authentication.\n+    #```ballerina string|auth:Error? result = inspect(data); ```\n     #\n     # + data - Map of data which is extracted from the HTTP response\n-    # + return - String token, or `auth:Error` occurred when generating token or `()` if nothing to be returned\n+    # + return - String token or `()` if nothing to be returned or else an `auth:Error` if token can't be generated", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE3OTY0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406179642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Auth token or else an `Error` if auth token can't be processed\n          \n          \n            \n            # + return - JWT or else an `jwt:Error` if an error occurred while issuing JWT", "author": "ldclakmal", "createdAt": "2020-04-09T12:49:19Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/outbound_jwt_auth_provider.bal", "diffHunk": "@@ -59,19 +60,20 @@ public type OutboundJwtAuthProvider object {\n         return authToken;\n     }\n \n-    # Inspect the incoming data and generate the token for JWT authentication.\n+    # Inspects the incoming data and generates the token for JWT authentication.\n+    #```ballerina string|auth:Error? result = inspect(data); ```\n     #\n     # + data - Map of data which is extracted from the HTTP response\n-    # + return - String token, or `auth:Error` occurred when generating token or `()` if nothing to be returned\n+    # + return - String token or `()` if nothing to be returned or else an `auth:Error` if token can't be generated\n     public function inspect(map<anydata> data) returns string|auth:Error? {\n         return ();\n     }\n };\n \n-# Process auth token for JWT auth.\n+# Processes the auth token for JWT auth.\n #\n # + jwtIssuerConfig - JWT issuer configurations\n-# + return - Auth token or `Error` if an error occurred during the JWT issuing or validation\n+# + return - Auth token or else an `Error` if auth token can't be processed", "originalCommit": "9878438116ee7a2f59ce8bf84c5acb3a56f098f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c27597e834d092f8569ae0cf5f7e0f97a3b72881", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c27597e834d092f8569ae0cf5f7e0f97a3b72881", "message": "Fix suggested changes\n\nMake the changes in the index file\n\nMake the changes in the module", "committedDate": "2020-04-09T14:04:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5MDkxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406590918", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    io:println(jwt);\n          \n          \n            \n                    io:println(\"Issued JWT: \" + jwt);", "author": "ldclakmal", "createdAt": "2020-04-10T03:53:46Z", "path": "examples/jwt-issue-validate/jwt-issue-validate.bal", "diffHunk": "@@ -0,0 +1,67 @@\n+import ballerina/config;\n+import ballerina/crypto;\n+import ballerina/io;\n+import ballerina/jwt;\n+import ballerina/time;\n+\n+public function main() {\n+\n+    // Defines the keystore.\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations.\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT header and set the values.\n+    jwt:JwtHeader header = {};\n+    header.alg = jwt:RS256;\n+    header.typ = \"JWT\";\n+\n+    // Defines the JWT payload and set the values.\n+    jwt:JwtPayload payload = {};\n+    payload.sub = \"John\";\n+    payload.iss = \"wso2\";\n+    payload.jti = \"100078234ba23\";\n+    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n+    payload.exp = time:currentTime().time/1000 + 600;\n+\n+    // Issues a JWT based on provided header, payload and config.\n+    string|error jwt = jwt:issueJwt(header, payload, config);\n+    if (jwt is string) {\n+        io:println(jwt);", "originalCommit": "c27597e834d092f8569ae0cf5f7e0f97a3b72881", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5MTAwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406591000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    io:println(result);\n          \n          \n            \n                    io:println(\"Validated JWT Payload: \" result);", "author": "ldclakmal", "createdAt": "2020-04-10T03:54:05Z", "path": "examples/jwt-issue-validate/jwt-issue-validate.bal", "diffHunk": "@@ -0,0 +1,67 @@\n+import ballerina/config;\n+import ballerina/crypto;\n+import ballerina/io;\n+import ballerina/jwt;\n+import ballerina/time;\n+\n+public function main() {\n+\n+    // Defines the keystore.\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations.\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT header and set the values.\n+    jwt:JwtHeader header = {};\n+    header.alg = jwt:RS256;\n+    header.typ = \"JWT\";\n+\n+    // Defines the JWT payload and set the values.\n+    jwt:JwtPayload payload = {};\n+    payload.sub = \"John\";\n+    payload.iss = \"wso2\";\n+    payload.jti = \"100078234ba23\";\n+    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n+    payload.exp = time:currentTime().time/1000 + 600;\n+\n+    // Issues a JWT based on provided header, payload and config.\n+    string|error jwt = jwt:issueJwt(header, payload, config);\n+    if (jwt is string) {\n+        io:println(jwt);\n+    } else {\n+        io:println(\"An error occurred while issuing the JWT: \", jwt.detail()?.message);\n+    }\n+\n+    // Defines the truststore.\n+    crypto:TrustStore trustStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaTruststore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT validator configurations.\n+    jwt:JwtValidatorConfig validatorConfig = {\n+        issuer: \"wso2\",\n+        audience: \"ballerina\",\n+        clockSkewInSeconds: 60,\n+        trustStoreConfig: {\n+            certificateAlias: \"ballerina\",\n+            trustStore: trustStore\n+        }\n+    };\n+\n+    // Validates the created JWT.\n+    jwt:JwtPayload|error result = jwt:validateJwt(jwt.toString(), validatorConfig);\n+    if (result is jwt:JwtPayload) {\n+        io:println(result);", "originalCommit": "c27597e834d092f8569ae0cf5f7e0f97a3b72881", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5MTA1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406591055", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            eyJhbGciOiJSUzI1NiIsICJ0eXAiOiJKV1QifQ.eyJzdWIiOiJKb2huIiwgImlzcyI6IndzbzIiLCAiZXhwIjoxNTg2NDM3MzgwLCAianRpIjoiMTAwMDc4MjM0YmEyMyIsICJhdWQiOlsiYmFsbGVyaW5hIiwgImJhbGxlcmluYVNhbXBsZXMiXX0.H67rsDKLmZJacI1NKMlYl6cCROS-rsLfW3Z2INvvDyHrntNau0P8FFoIc98D_c7UPe_L1_uV3no0nWweoWvzqQB8wfvduB6wKNxb1KGprIUF0ilxveQN1Vzab2Mvd7SJCJ19tf6OcKort38C7ES0am5vsm0495OyaNVDAq3ixFP8WRacQW53b0ELc25QCYJJBLhjFBdXLpnx1boSjgS2vhTrg8bY8zlkoV3pJULfHmjS3JX0a_FBqqeB1yQqbIp1RxGrWzGg4nA6kPjGC1GwYvxjcCVQjY5PWWsd9GAeCnnvmFE_Xy6Xenq5lfL2RWWO4H3yF8x_8hcLS9XidERGWQ\n          \n          \n            \n            Issued JWT: eyJhbGciOiJSUzI1NiIsICJ0eXAiOiJKV1QifQ.eyJzdWIiOiJKb2huIiwgImlzcyI6IndzbzIiLCAiZXhwIjoxNTg2NDM3MzgwLCAianRpIjoiMTAwMDc4MjM0YmEyMyIsICJhdWQiOlsiYmFsbGVyaW5hIiwgImJhbGxlcmluYVNhbXBsZXMiXX0.H67rsDKLmZJacI1NKMlYl6cCROS-rsLfW3Z2INvvDyHrntNau0P8FFoIc98D_c7UPe_L1_uV3no0nWweoWvzqQB8wfvduB6wKNxb1KGprIUF0ilxveQN1Vzab2Mvd7SJCJ19tf6OcKort38C7ES0am5vsm0495OyaNVDAq3ixFP8WRacQW53b0ELc25QCYJJBLhjFBdXLpnx1boSjgS2vhTrg8bY8zlkoV3pJULfHmjS3JX0a_FBqqeB1yQqbIp1RxGrWzGg4nA6kPjGC1GwYvxjcCVQjY5PWWsd9GAeCnnvmFE_Xy6Xenq5lfL2RWWO4H3yF8x_8hcLS9XidERGWQ", "author": "ldclakmal", "createdAt": "2020-04-10T03:54:36Z", "path": "examples/jwt-issue-validate/jwt_token_validation.out", "diffHunk": "@@ -0,0 +1,5 @@\n+# To start the service, navigate to the directory that contains the\n+# `.bal` file and execute the `ballerina run` command.\n+$ ballerina run jwt_token_validation.bal --b7a.home=<ballerina_home_path>\n+eyJhbGciOiJSUzI1NiIsICJ0eXAiOiJKV1QifQ.eyJzdWIiOiJKb2huIiwgImlzcyI6IndzbzIiLCAiZXhwIjoxNTg2NDM3MzgwLCAianRpIjoiMTAwMDc4MjM0YmEyMyIsICJhdWQiOlsiYmFsbGVyaW5hIiwgImJhbGxlcmluYVNhbXBsZXMiXX0.H67rsDKLmZJacI1NKMlYl6cCROS-rsLfW3Z2INvvDyHrntNau0P8FFoIc98D_c7UPe_L1_uV3no0nWweoWvzqQB8wfvduB6wKNxb1KGprIUF0ilxveQN1Vzab2Mvd7SJCJ19tf6OcKort38C7ES0am5vsm0495OyaNVDAq3ixFP8WRacQW53b0ELc25QCYJJBLhjFBdXLpnx1boSjgS2vhTrg8bY8zlkoV3pJULfHmjS3JX0a_FBqqeB1yQqbIp1RxGrWzGg4nA6kPjGC1GwYvxjcCVQjY5PWWsd9GAeCnnvmFE_Xy6Xenq5lfL2RWWO4H3yF8x_8hcLS9XidERGWQ", "originalCommit": "c27597e834d092f8569ae0cf5f7e0f97a3b72881", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5MTEyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406591128", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            iss=wso2 sub=John aud=ballerina ballerinaSamples jti=100078234ba23 exp=1586437380 customClaims=\n          \n          \n            \n            Validated JWT Payload: iss=wso2 sub=John aud=ballerina ballerinaSamples jti=100078234ba23 exp=1586437380 customClaims=", "author": "ldclakmal", "createdAt": "2020-04-10T03:54:58Z", "path": "examples/jwt-issue-validate/jwt_token_validation.out", "diffHunk": "@@ -0,0 +1,5 @@\n+# To start the service, navigate to the directory that contains the\n+# `.bal` file and execute the `ballerina run` command.\n+$ ballerina run jwt_token_validation.bal --b7a.home=<ballerina_home_path>\n+eyJhbGciOiJSUzI1NiIsICJ0eXAiOiJKV1QifQ.eyJzdWIiOiJKb2huIiwgImlzcyI6IndzbzIiLCAiZXhwIjoxNTg2NDM3MzgwLCAianRpIjoiMTAwMDc4MjM0YmEyMyIsICJhdWQiOlsiYmFsbGVyaW5hIiwgImJhbGxlcmluYVNhbXBsZXMiXX0.H67rsDKLmZJacI1NKMlYl6cCROS-rsLfW3Z2INvvDyHrntNau0P8FFoIc98D_c7UPe_L1_uV3no0nWweoWvzqQB8wfvduB6wKNxb1KGprIUF0ilxveQN1Vzab2Mvd7SJCJ19tf6OcKort38C7ES0am5vsm0495OyaNVDAq3ixFP8WRacQW53b0ELc25QCYJJBLhjFBdXLpnx1boSjgS2vhTrg8bY8zlkoV3pJULfHmjS3JX0a_FBqqeB1yQqbIp1RxGrWzGg4nA6kPjGC1GwYvxjcCVQjY5PWWsd9GAeCnnvmFE_Xy6Xenq5lfL2RWWO4H3yF8x_8hcLS9XidERGWQ\n+iss=wso2 sub=John aud=ballerina ballerinaSamples jti=100078234ba23 exp=1586437380 customClaims=", "originalCommit": "c27597e834d092f8569ae0cf5f7e0f97a3b72881", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzODQyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406638421", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Defines the JWT header and set the values.\n          \n          \n            \n                // Defines the JWT header and sets the values.", "author": "praneesha", "createdAt": "2020-04-10T07:24:42Z", "path": "examples/jwt-issue-validate/jwt-issue-validate.bal", "diffHunk": "@@ -0,0 +1,67 @@\n+import ballerina/config;\n+import ballerina/crypto;\n+import ballerina/io;\n+import ballerina/jwt;\n+import ballerina/time;\n+\n+public function main() {\n+\n+    // Defines the keystore.\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations.\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT header and set the values.", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzODQ2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406638469", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Defines the JWT payload and set the values.\n          \n          \n            \n                // Defines the JWT payload and sets the values.", "author": "praneesha", "createdAt": "2020-04-10T07:24:49Z", "path": "examples/jwt-issue-validate/jwt-issue-validate.bal", "diffHunk": "@@ -0,0 +1,67 @@\n+import ballerina/config;\n+import ballerina/crypto;\n+import ballerina/io;\n+import ballerina/jwt;\n+import ballerina/time;\n+\n+public function main() {\n+\n+    // Defines the keystore.\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations.\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT header and set the values.\n+    jwt:JwtHeader header = {};\n+    header.alg = jwt:RS256;\n+    header.typ = \"JWT\";\n+\n+    // Defines the JWT payload and set the values.", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzODU1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406638550", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Issues a JWT based on provided header, payload and config.\n          \n          \n            \n                // Issues a JWT token based on the provided header, payload, and config.", "author": "praneesha", "createdAt": "2020-04-10T07:25:04Z", "path": "examples/jwt-issue-validate/jwt-issue-validate.bal", "diffHunk": "@@ -0,0 +1,67 @@\n+import ballerina/config;\n+import ballerina/crypto;\n+import ballerina/io;\n+import ballerina/jwt;\n+import ballerina/time;\n+\n+public function main() {\n+\n+    // Defines the keystore.\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations.\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT header and set the values.\n+    jwt:JwtHeader header = {};\n+    header.alg = jwt:RS256;\n+    header.typ = \"JWT\";\n+\n+    // Defines the JWT payload and set the values.\n+    jwt:JwtPayload payload = {};\n+    payload.sub = \"John\";\n+    payload.iss = \"wso2\";\n+    payload.jti = \"100078234ba23\";\n+    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n+    payload.exp = time:currentTime().time/1000 + 600;\n+\n+    // Issues a JWT based on provided header, payload and config.", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzODk2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406638963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see [JWT Token Validation](https://ballerina.io/v1-2/learn/by-example/jwt-issue-validate.html), [Secured Client with JWT Auth](https://ballerina.io/v1-2/learn/by-example/secured-client-with-jwt-auth.html), [Secured Service with JWT Auth](https://ballerina.io/v1-2/learn/by-example/secured-service-with-jwt-auth.html).\n          \n          \n            \n            For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see the [JWT Token Validation Example](https://ballerina.io/learn/by-example/jwt-issue-validate.html), [Secured Client with JWT Auth Example](https://ballerina.io/learn/by-example/secured-client-with-jwt-auth.html), and [Secured Service with JWT Auth Example](https://ballerina.io/learn/by-example/secured-service-with-jwt-auth.html).", "author": "praneesha", "createdAt": "2020-04-10T07:26:25Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/Module.md", "diffHunk": "@@ -38,62 +36,5 @@ jwt:OutboundJwtAuthProvider jwtAuthProvider = new({\n     }\n });\n ```\n-## Samples\n-\n-#### Issuing a JWT\n-\n-```ballerina\n-import ballerina/crypto;\n-import ballerina/jwt;\n-import ballerina/time;\n-\n-public function main() {\n-    crypto:KeyStore keyStore = { \n-        path: \"${ballerina.home}/bre/security/ballerinaKeystore.p12\", \n-        password: \"ballerina\"\n-    };\n-    jwt:JwtKeyStoreConfig config = {\n-        keyStore: keyStore,\n-        keyAlias: \"ballerina\",\n-        keyPassword: \"ballerina\"\n-    };\n-\n-    jwt:JwtHeader header = {};\n-    header.alg = jwt:RS256;\n-    header.typ = \"JWT\";\n-\n-    jwt:JwtPayload payload = {};\n-    payload.sub = \"John\";\n-    payload.iss = \"wso2\";\n-    payload.jti = \"100078234ba23\";\n-    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n-    payload.exp = time:currentTime().time/1000 + 600;\n-\n-    string|error jwt = jwt:issueJwt(header, payload, config);\n-}\n-```\n-\n-#### Validating a JWT\n-\n-```ballerina\n-import ballerina/crypto;\n-import ballerina/jwt;\n-\n-public function main() {\n-    crypto:TrustStore trustStore = {\n-        path: \"${ballerina.home}/bre/security/ballerinaTruststore.p12\", \n-        password: \"ballerina\"\n-    };\n-    jwt:JwtValidatorConfig config = {\n-        issuer: \"wso2\",\n-        audience: \"ballerina\",\n-        clockSkewInSeconds: 60,\n-        trustStoreConfig: {\n-            certificateAlias: \"ballerina\",\n-            trustStore: trustStore\n-        }\n-    };\n \n-    jwt:JwtPayload|error result = jwt:validateJwt(jwtToken, config);\n-}\n-```\n+For information on the operations, which you can perform with this module, see the below **Functions**. For examples on the usage of the operations, see [JWT Token Validation](https://ballerina.io/v1-2/learn/by-example/jwt-issue-validate.html), [Secured Client with JWT Auth](https://ballerina.io/v1-2/learn/by-example/secured-client-with-jwt-auth.html), [Secured Service with JWT Auth](https://ballerina.io/v1-2/learn/by-example/secured-service-with-jwt-auth.html).", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTA4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406639085", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Authenticates with a JWT.\n          \n          \n            \n            # Authenticates with a JWT token.", "author": "praneesha", "createdAt": "2020-04-10T07:26:44Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n-    #\n-    # + credential - Jwt token extracted from the authentication header\n-    # + return - `true` if authentication is successful, othewise `false` or `auth:Error` occurred during JWT validation\n+# Authenticates with a JWT.", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0MzI2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406643262", "bodyText": "JWT stands for JSON Web Token therefore we don't to say token again.\n@praneesha WDYT?", "author": "kalaiyarasiganeshalingam", "createdAt": "2020-04-10T07:39:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTY3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406649672", "bodyText": "+1. No need to add token.", "author": "praneesha", "createdAt": "2020-04-10T07:58:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY0OTg3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406649879", "bodyText": "+1", "author": "praneesha", "createdAt": "2020-04-10T07:58:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTE5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406639197", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - `true` if authentication is successful, othewise `false` or else an `auth:Error` if JWT validation\n          \n          \n            \n            # + return - `true` if authentication is successful, othewise `false` or else an `auth:Error` if JWT validation\n          \n      \n    \n    \n  \n\nPlease refer the template for the correct format of the return statement description.", "author": "praneesha", "createdAt": "2020-04-10T07:27:07Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n-    #\n-    # + credential - Jwt token extracted from the authentication header\n-    # + return - `true` if authentication is successful, othewise `false` or `auth:Error` occurred during JWT validation\n+# Authenticates with a JWT.\n+#```ballerina\n+# boolean|auth:Error result = authenticate(string credential);\n+# ```\n+#\n+# + credential - JWT extracted from the authentication header\n+# + return - `true` if authentication is successful, othewise `false` or else an `auth:Error` if JWT validation", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTI1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406639256", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Logs and prepares `error` as an `Error`.\n          \n          \n            \n            # Logs and prepares the `error` as an `Error`.", "author": "praneesha", "createdAt": "2020-04-10T07:27:22Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_errors.bal", "diffHunk": "@@ -33,10 +33,10 @@ public const JWT_ERROR = \"{ballerina/jwt}Error\";\n # JWT or any operation related to JWT.\n public type Error error<JWT_ERROR, Detail>;\n \n-# Log and prepare `error` as a `Error`.\n+# Logs and prepares `error` as an `Error`.", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTMzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406639331", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Logs and prepares `error` as an `auth:Error`.\n          \n          \n            \n            # Logs and prepares the `error` as an `auth:Error`.", "author": "praneesha", "createdAt": "2020-04-10T07:27:36Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_errors.bal", "diffHunk": "@@ -49,10 +49,10 @@ function prepareError(string message, error? err = ()) returns Error {\n     return jwtError;\n }\n \n-# Log and prepare `error` as a `auth:Error`.\n+# Logs and prepares `error` as an `auth:Error`.", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTQzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406639431", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Issues a JWT based on provided header and payload. JWT will be signed (JWS) if `crypto:KeyStore` information is\n          \n          \n            \n            # Issues a JWT based on the provided header and payload. JWT will be signed (JWS) if `crypto:KeyStore` information is", "author": "praneesha", "createdAt": "2020-04-10T07:27:50Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -47,13 +47,16 @@ public type JwtKeyStoreConfig record {|\n     string keyPassword;\n |};\n \n-# Issue a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is provided\n-# in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# Issues a JWT based on provided header and payload. JWT will be signed (JWS) if `crypto:KeyStore` information is", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTQ4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406639480", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # provided in the `jwt:JwtKeyStoreConfig` and the `alg` field of `jwt:JwtHeader` is not `jwt:NONE`.\n          \n          \n            \n            # provided in the `jwt:JwtKeyStoreConfig` and the `alg` field of the `jwt:JwtHeader` is not `jwt:NONE`.", "author": "praneesha", "createdAt": "2020-04-10T07:27:59Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -47,13 +47,16 @@ public type JwtKeyStoreConfig record {|\n     string keyPassword;\n |};\n \n-# Issue a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is provided\n-# in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# Issues a JWT based on provided header and payload. JWT will be signed (JWS) if `crypto:KeyStore` information is\n+# provided in the `jwt:JwtKeyStoreConfig` and the `alg` field of `jwt:JwtHeader` is not `jwt:NONE`.", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTc2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406639761", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - JWT payload or else an `jwt:Error` if token validation fails.\n          \n          \n            \n            # + return - JWT payload or else an `jwt:Error` if token validation fails", "author": "praneesha", "createdAt": "2020-04-10T07:28:49Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "diffHunk": "@@ -56,11 +56,14 @@ public type InboundJwtCacheEntry record {|\n     int? expTime;\n |};\n \n-# Validate the given JWT string.\n+# Validates the given JWT string.\n+#```ballerina\n+# jwt:JwtPayload|error result = jwt:validateJwt(jwt, validatorConfig);\n+# ```\n #\n-# + jwtToken - JWT token that needs to be validated\n+# + jwtToken - JWT that needs to be validated\n # + config - JWT validator config record\n-# + return - If the JWT token is valid, return the JWT payload. Else, return an `Error` if token validation fails.\n+# + return - JWT payload or else an `jwt:Error` if token validation fails.", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzOTk3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406639974", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + data - Map of data which is extracted from the HTTP response\n          \n          \n            \n            # + data - Map of data, which is extracted from the HTTP response", "author": "praneesha", "createdAt": "2020-04-10T07:29:28Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/outbound_jwt_auth_provider.bal", "diffHunk": "@@ -59,19 +62,22 @@ public type OutboundJwtAuthProvider object {\n         return authToken;\n     }\n \n-    # Inspect the incoming data and generate the token for JWT authentication.\n-    #\n-    # + data - Map of data which is extracted from the HTTP response\n-    # + return - String token, or `auth:Error` occurred when generating token or `()` if nothing to be returned\n+# Inspects the incoming data and generates the token for JWT authentication.\n+#```ballerina\n+# string|auth:Error? result = inspect(data);\n+# ```\n+#\n+# + data - Map of data which is extracted from the HTTP response", "originalCommit": "221c53b920d1c411cbc6030b0005d87aa617a5c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY1MDA3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406650070", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - JWT or else an `jwt:Error` if an error occurred while issuing JWT\n          \n          \n            \n            # + return - JWT or else a `jwt:Error` if an error occurred while issuing JWT\n          \n      \n    \n    \n  \n\nPlease fix in all occurrences.", "author": "praneesha", "createdAt": "2020-04-10T07:59:17Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/outbound_jwt_auth_provider.bal", "diffHunk": "@@ -59,19 +62,22 @@ public type OutboundJwtAuthProvider object {\n         return authToken;\n     }\n \n-    # Inspect the incoming data and generate the token for JWT authentication.\n-    #\n-    # + data - Map of data which is extracted from the HTTP response\n-    # + return - String token, or `auth:Error` occurred when generating token or `()` if nothing to be returned\n+# Inspects the incoming data and generates the token for JWT authentication.\n+#```ballerina\n+# string|auth:Error? result = inspect(data);\n+# ```\n+#\n+# + data - Map of data, which is extracted from the HTTP response\n+# + return - JWT as `string` or `()` if nothing to be returned or else an `auth:Error` if token can't be generated\n     public function inspect(map<anydata> data) returns string|auth:Error? {\n         return ();\n     }\n };\n \n-# Process auth token for JWT auth.\n+# Processes the auth token for JWT auth.\n #\n # + jwtIssuerConfig - JWT issuer configurations\n-# + return - Auth token or `Error` if an error occurred during the JWT issuing or validation\n+# + return - JWT or else an `jwt:Error` if an error occurred while issuing JWT", "originalCommit": "66c1dfd20c8ac9aa716813f3da3826b9225940e1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a69c7ac156190b854564df12a0300dda1d33db01", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a69c7ac156190b854564df12a0300dda1d33db01", "message": "Fix reviewed comments\n\nFix the reviewed comments\n\nFix suggested changes", "committedDate": "2020-04-10T08:09:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3ODk1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406678955", "bodyText": "I think this file should get renamed as jwt-issue-validate.out", "author": "ldclakmal", "createdAt": "2020-04-10T09:21:40Z", "path": "examples/jwt-issue-validate/jwt_token_validation.out", "diffHunk": "@@ -0,0 +1,5 @@\n+# To start the service, navigate to the directory that contains the", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3OTE0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406679141", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            $ ballerina run jwt_token_validation.bal --b7a.home=<ballerina_home_path>\n          \n          \n            \n            $ ballerina run jwt_issue_validate.bal --b7a.home=<ballerina_home_path>", "author": "ldclakmal", "createdAt": "2020-04-10T09:22:11Z", "path": "examples/jwt-issue-validate/jwt_token_validation.out", "diffHunk": "@@ -0,0 +1,5 @@\n+# To start the service, navigate to the directory that contains the\n+# `.bal` file and execute the `ballerina run` command.\n+$ ballerina run jwt_token_validation.bal --b7a.home=<ballerina_home_path>", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3OTIxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406679211", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Validated JWT Payload: iss=wso2 sub=John aud=ballerina ballerinaSamples jti=100078234ba23 exp=1586437380 customClaims=\n          \n          \n            \n            Validated JWT Payload: iss=wso2 sub=John aud=ballerina ballerinaSamples jti=100078234ba23 exp=1586437380 customClaims=", "author": "ldclakmal", "createdAt": "2020-04-10T09:22:26Z", "path": "examples/jwt-issue-validate/jwt_token_validation.out", "diffHunk": "@@ -0,0 +1,5 @@\n+# To start the service, navigate to the directory that contains the\n+# `.bal` file and execute the `ballerina run` command.\n+$ ballerina run jwt_token_validation.bal --b7a.home=<ballerina_home_path>\n+Issued JWT: eyJhbGciOiJSUzI1NiIsICJ0eXAiOiJKV1QifQ.eyJzdWIiOiJKb2huIiwgImlzcyI6IndzbzIiLCAiZXhwIjoxNTg2NDM3MzgwLCAianRpIjoiMTAwMDc4MjM0YmEyMyIsICJhdWQiOlsiYmFsbGVyaW5hIiwgImJhbGxlcmluYVNhbXBsZXMiXX0.H67rsDKLmZJacI1NKMlYl6cCROS-rsLfW3Z2INvvDyHrntNau0P8FFoIc98D_c7UPe_L1_uV3no0nWweoWvzqQB8wfvduB6wKNxb1KGprIUF0ilxveQN1Vzab2Mvd7SJCJ19tf6OcKort38C7ES0am5vsm0495OyaNVDAq3ixFP8WRacQW53b0ELc25QCYJJBLhjFBdXLpnx1boSjgS2vhTrg8bY8zlkoV3pJULfHmjS3JX0a_FBqqeB1yQqbIp1RxGrWzGg4nA6kPjGC1GwYvxjcCVQjY5PWWsd9GAeCnnvmFE_Xy6Xenq5lfL2RWWO4H3yF8x_8hcLS9XidERGWQ\n+Validated JWT Payload: iss=wso2 sub=John aud=ballerina ballerinaSamples jti=100078234ba23 exp=1586437380 customClaims=", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MDM0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406680344", "bodyText": "IMO, this should be something like follows:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # boolean|auth:Error result = authenticate(string credential);\n          \n          \n            \n            # boolean|auth:Error result = inboundJwtAuthProvider.authenticate(string credential);", "author": "ldclakmal", "createdAt": "2020-04-10T09:25:34Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n-    #\n-    # + credential - Jwt token extracted from the authentication header\n-    # + return - `true` if authentication is successful, othewise `false` or `auth:Error` occurred during JWT validation\n+# Authenticates with a JWT.\n+#```ballerina\n+# boolean|auth:Error result = authenticate(string credential);", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MDU2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406680567", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Builds the header string from the `JwtHeader` record.\n          \n          \n            \n            # Builds the header string from the `jwt:JwtHeader` record.", "author": "ldclakmal", "createdAt": "2020-04-10T09:26:15Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -115,10 +118,13 @@ public function issueJwt(JwtHeader header, JwtPayload payload, JwtKeyStoreConfig\n     }\n }\n \n-# Build the header string from the `JwtHeader` record.\n+# Builds the header string from the `JwtHeader` record.", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MjMyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406682327", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # string|error jwt = jwt:issueJwt(header, payload, config);\n          \n          \n            \n            # string|jwt:Error jwt = jwt:issueJwt(header, payload, keyStoreConfig);", "author": "ldclakmal", "createdAt": "2020-04-10T09:31:14Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -47,13 +47,16 @@ public type JwtKeyStoreConfig record {|\n     string keyPassword;\n |};\n \n-# Issue a JWT token based on provided header and payload. JWT will be signed (JWS) if `keyStore` information is provided\n-# in the `JwtKeyStoreConfig` and the `alg` field of `JwtHeader` is not `NONE`.\n+# Issues a JWT based on the provided header and payload. JWT will be signed (JWS) if `crypto:KeyStore` information is\n+# provided in the `jwt:JwtKeyStoreConfig` and the `alg` field of the `jwt:JwtHeader` is not `jwt:NONE`.\n+# ```ballerina\n+# string|error jwt = jwt:issueJwt(header, payload, config);", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MjM1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406682355", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # string|Error jwtHeader = buildHeaderString(header);\n          \n          \n            \n            # string|jwt:Error jwtHeader = jwt:buildHeaderString(header);", "author": "ldclakmal", "createdAt": "2020-04-10T09:31:20Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -115,10 +118,13 @@ public function issueJwt(JwtHeader header, JwtPayload payload, JwtKeyStoreConfig\n     }\n }\n \n-# Build the header string from the `JwtHeader` record.\n+# Builds the header string from the `JwtHeader` record.\n+# ```ballerina\n+# string|Error jwtHeader = buildHeaderString(header);", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MjU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406682581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # string|Error jwtPayload = buildPayloadString(payload);\n          \n          \n            \n            # string|jwt:Error jwtPayload = jwt:buildPayloadString(payload);", "author": "ldclakmal", "createdAt": "2020-04-10T09:31:59Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_issuer.bal", "diffHunk": "@@ -162,10 +168,13 @@ public function buildHeaderString(JwtHeader header) returns string|Error {\n     return encodedPayload;\n }\n \n-# Build the payload string from the `JwtPayload` record.\n+# Builds the payload string from the `jwt:JwtPayload` record.\n+# ```ballerina\n+# string|Error jwtPayload = buildPayloadString(payload);", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MjgzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406682835", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # [JwtHeader, JwtPayload]|Error [header, payload] = decodeJwt(jwtToken);\n          \n          \n            \n            # [jwt:JwtHeader, jwt:JwtPayload]|jwt:Error [header, payload] = jwt:decodeJwt(jwtToken);", "author": "ldclakmal", "createdAt": "2020-04-10T09:32:47Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "diffHunk": "@@ -74,10 +77,13 @@ function getJwtComponents(string jwtToken) returns string[]|Error {\n     return jwtComponents;\n }\n \n-# Decode the given JWT string.\n+# Decodes the given JWT string.\n+# ```ballerina\n+# [JwtHeader, JwtPayload]|Error [header, payload] = decodeJwt(jwtToken);", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4MzI1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406683256", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # string|auth:Error token = generateToken();\n          \n          \n            \n            # string|auth:Error token = outboundJwtAuthProvider.generateToken();", "author": "ldclakmal", "createdAt": "2020-04-10T09:33:52Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/outbound_jwt_auth_provider.bal", "diffHunk": "@@ -35,9 +35,12 @@ public type OutboundJwtAuthProvider object {\n         self.jwtIssuerConfig = jwtIssuerConfig;\n     }\n \n-    # Generate token for JWT authentication.\n-    #\n-    # + return - Generated token or `auth:Error` if an error occurred during the JWT issuing or validation\n+# Generates the token for JWT authentication.\n+# ```ballerina\n+# string|auth:Error token = generateToken();", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NDAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406684001", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                jwt:JwtPayload|error result = jwt:validateJwt(jwt.toString(), validatorConfig);\n          \n          \n            \n                jwt:JwtPayload|jwt:Error result = jwt:validateJwt(<string>jwt, validatorConfig);", "author": "ldclakmal", "createdAt": "2020-04-10T09:36:12Z", "path": "examples/jwt-issue-validate/jwt-issue-validate.bal", "diffHunk": "@@ -0,0 +1,67 @@\n+import ballerina/config;\n+import ballerina/crypto;\n+import ballerina/io;\n+import ballerina/jwt;\n+import ballerina/time;\n+\n+public function main() {\n+\n+    // Defines the keystore.\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations.\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT header and sets the values.\n+    jwt:JwtHeader header = {};\n+    header.alg = jwt:RS256;\n+    header.typ = \"JWT\";\n+\n+    // Defines the JWT payload and sets the values.\n+    jwt:JwtPayload payload = {};\n+    payload.sub = \"John\";\n+    payload.iss = \"wso2\";\n+    payload.jti = \"100078234ba23\";\n+    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n+    payload.exp = time:currentTime().time/1000 + 600;\n+\n+    // Issues a JWT based on the provided header, payload and config.\n+    string|error jwt = jwt:issueJwt(header, payload, config);\n+    if (jwt is string) {\n+        io:println(\"Issued JWT: \", jwt);\n+    } else {\n+        io:println(\"An error occurred while issuing the JWT: \", jwt.detail()?.message);\n+    }\n+\n+    // Defines the truststore.\n+    crypto:TrustStore trustStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaTruststore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT validator configurations.\n+    jwt:JwtValidatorConfig validatorConfig = {\n+        issuer: \"wso2\",\n+        audience: \"ballerina\",\n+        clockSkewInSeconds: 60,\n+        trustStoreConfig: {\n+            certificateAlias: \"ballerina\",\n+            trustStore: trustStore\n+        }\n+    };\n+\n+    // Validates the created JWT.\n+    jwt:JwtPayload|error result = jwt:validateJwt(jwt.toString(), validatorConfig);", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NDE0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406684144", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                string|error jwt = jwt:issueJwt(header, payload, config);\n          \n          \n            \n                string|jwt:Error jwt = jwt:issueJwt(header, payload, keyStoreConfig);", "author": "ldclakmal", "createdAt": "2020-04-10T09:36:43Z", "path": "examples/jwt-issue-validate/jwt-issue-validate.bal", "diffHunk": "@@ -0,0 +1,67 @@\n+import ballerina/config;\n+import ballerina/crypto;\n+import ballerina/io;\n+import ballerina/jwt;\n+import ballerina/time;\n+\n+public function main() {\n+\n+    // Defines the keystore.\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations.\n+    jwt:JwtKeyStoreConfig config = {\n+        keyStore: keyStore,\n+        keyAlias: \"ballerina\",\n+        keyPassword: \"ballerina\"\n+    };\n+\n+    // Defines the JWT header and sets the values.\n+    jwt:JwtHeader header = {};\n+    header.alg = jwt:RS256;\n+    header.typ = \"JWT\";\n+\n+    // Defines the JWT payload and sets the values.\n+    jwt:JwtPayload payload = {};\n+    payload.sub = \"John\";\n+    payload.iss = \"wso2\";\n+    payload.jti = \"100078234ba23\";\n+    payload.aud = [\"ballerina\", \"ballerinaSamples\"];\n+    payload.exp = time:currentTime().time/1000 + 600;\n+\n+    // Issues a JWT based on the provided header, payload and config.\n+    string|error jwt = jwt:issueJwt(header, payload, config);", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NDIxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406684213", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                jwt:JwtKeyStoreConfig config = {\n          \n          \n            \n                jwt:JwtKeyStoreConfig keyStoreConfig = {", "author": "ldclakmal", "createdAt": "2020-04-10T09:36:52Z", "path": "examples/jwt-issue-validate/jwt-issue-validate.bal", "diffHunk": "@@ -0,0 +1,67 @@\n+import ballerina/config;\n+import ballerina/crypto;\n+import ballerina/io;\n+import ballerina/jwt;\n+import ballerina/time;\n+\n+public function main() {\n+\n+    // Defines the keystore.\n+    crypto:KeyStore keyStore = {\n+        path: config:getAsString(\"b7a.home\") + \"bre/security/ballerinaKeystore.p12\",\n+        password: \"ballerina\"\n+    };\n+\n+    // Defines the JWT keystore configurations.\n+    jwt:JwtKeyStoreConfig config = {", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY4NTAwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406685009", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # jwt:JwtPayload|error result = jwt:validateJwt(jwt, validatorConfig);\n          \n          \n            \n            # jwt:JwtPayload|jwt:Error result = jwt:validateJwt(jwt, validatorConfig);", "author": "ldclakmal", "createdAt": "2020-04-10T09:39:01Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/jwt_validator.bal", "diffHunk": "@@ -56,11 +56,14 @@ public type InboundJwtCacheEntry record {|\n     int? expTime;\n |};\n \n-# Validate the given JWT string.\n+# Validates the given JWT string.\n+#```ballerina\n+# jwt:JwtPayload|error result = jwt:validateJwt(jwt, validatorConfig);", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NTg0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406695845", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Authenticates with a JWT.\n          \n          \n            \n            # Authenticates provided JWT against `jwt:JwtValidatorConfig`.", "author": "ldclakmal", "createdAt": "2020-04-10T10:12:28Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n-    #\n-    # + credential - Jwt token extracted from the authentication header\n-    # + return - `true` if authentication is successful, othewise `false` or `auth:Error` occurred during JWT validation\n+# Authenticates with a JWT.", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NjQ1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406696454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + credential - JWT extracted from the authentication header\n          \n          \n            \n            # + credential - JWT to be authenticated", "author": "ldclakmal", "createdAt": "2020-04-10T10:14:17Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n-    #\n-    # + credential - Jwt token extracted from the authentication header\n-    # + return - `true` if authentication is successful, othewise `false` or `auth:Error` occurred during JWT validation\n+# Authenticates with a JWT.\n+#```ballerina\n+# boolean|auth:Error result = authenticate(string credential);\n+# ```\n+#\n+# + credential - JWT extracted from the authentication header", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY5NzY1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406697657", "bodyText": "Let's remove this code snippet here. This function was added in order to maintain object-equivalency and it does nothing other than returning ()\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #```ballerina\n          \n          \n            \n            # string|auth:Error? result = inspect(data);\n          \n          \n            \n            # ```", "author": "ldclakmal", "createdAt": "2020-04-10T10:18:18Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/outbound_jwt_auth_provider.bal", "diffHunk": "@@ -59,19 +62,22 @@ public type OutboundJwtAuthProvider object {\n         return authToken;\n     }\n \n-    # Inspect the incoming data and generate the token for JWT authentication.\n-    #\n-    # + data - Map of data which is extracted from the HTTP response\n-    # + return - String token, or `auth:Error` occurred when generating token or `()` if nothing to be returned\n+# Inspects the incoming data and generates the token for JWT authentication.\n+#```ballerina\n+# string|auth:Error? result = inspect(data);\n+# ```", "originalCommit": "a69c7ac156190b854564df12a0300dda1d33db01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMzI4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22545#discussion_r406703282", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # boolean|auth:Error result = inboundJwtAuthProvider.authenticate(string credential);\n          \n          \n            \n            # boolean|auth:Error result = inboundJwtAuthProvider.authenticate(\"<credential>\");", "author": "ldclakmal", "createdAt": "2020-04-10T10:37:01Z", "path": "stdlib/jwt/src/main/ballerina/src/jwt/inbound_jwt_auth_provider.bal", "diffHunk": "@@ -38,10 +38,14 @@ public type InboundJwtAuthProvider object {\n         self.inboundJwtCache = jwtValidatorConfig.jwtCache;\n     }\n \n-    # Authenticate with a JWT token.\n-    #\n-    # + credential - Jwt token extracted from the authentication header\n-    # + return - `true` if authentication is successful, othewise `false` or `auth:Error` occurred during JWT validation\n+# Authenticates provided JWT against `jwt:JwtValidatorConfig`.\n+#```ballerina\n+# boolean|auth:Error result = inboundJwtAuthProvider.authenticate(string credential);", "originalCommit": "9019d75d473fd9c72f1caf0117f9046c250b9df0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "929bf7646a36bf58f181a90f7663cddbdd2da1cc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/929bf7646a36bf58f181a90f7663cddbdd2da1cc", "message": "Apply suggested changes\n\nFix the change\n\nFix the change", "committedDate": "2020-04-10T10:54:25Z", "type": "commit"}, {"oid": "b6162d0fd1d158b90560daf95d419c068e20ddc1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6162d0fd1d158b90560daf95d419c068e20ddc1", "message": "Change the return statements\n\nChange the return statements", "committedDate": "2020-04-10T11:46:55Z", "type": "commit"}, {"oid": "9be258b6a78c2a79acffb75367ebcc0a69dd6207", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9be258b6a78c2a79acffb75367ebcc0a69dd6207", "message": "Align the content", "committedDate": "2020-04-10T12:31:21Z", "type": "commit"}]}