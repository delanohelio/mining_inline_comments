{"pr_number": 25480, "pr_title": "Allow module prefixes for langlib modules that are keywords without importing", "pr_createdAt": "2020-08-27T19:35:45Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480", "timeline": [{"oid": "f0a20a05d90968eca8c3a0ab505a81ccd6fdfa8d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f0a20a05d90968eca8c3a0ab505a81ccd6fdfa8d", "message": "Predeclare module prefixes that are keywords", "committedDate": "2020-08-27T19:15:07Z", "type": "commit"}, {"oid": "be5e1451bc37c4bda4362a0341ccdfc3e21123f4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be5e1451bc37c4bda4362a0341ccdfc3e21123f4", "message": "Add auto-import tests", "committedDate": "2020-08-28T03:45:28Z", "type": "forcePushed"}, {"oid": "b0e5e68a6da9e53814899dfecf28ffe80a71b5e4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0e5e68a6da9e53814899dfecf28ffe80a71b5e4", "message": "Add auto-import tests", "committedDate": "2020-08-28T05:39:11Z", "type": "commit"}, {"oid": "b0e5e68a6da9e53814899dfecf28ffe80a71b5e4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b0e5e68a6da9e53814899dfecf28ffe80a71b5e4", "message": "Add auto-import tests", "committedDate": "2020-08-28T05:39:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0OTY2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r478849669", "bodyText": "Shall we move these tests to ballerina?", "author": "dulvinw", "createdAt": "2020-08-28T06:06:38Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/imports/ImportsTest.java", "diffHunk": "@@ -66,7 +72,25 @@ public void testSameModuleNameDifferentOrgImports() {\n \n     @Test(description = \"Test auto imports\")\n     public void testPredeclaredModules() {\n-        BCompileUtil.compile(\"test-src/imports/predeclared-imports\", \"bar\");\n-        BCompileUtil.compile(\"test-src/imports/predeclared-imports\", \"foo\");\n+        CompileResult result = BCompileUtil.compile(\"test-src/imports/predeclared-imports\", \"bar\");\n+        BValue[] returns = BRunUtil.invoke(result, \"testPredeclaredModules\");\n+        Assert.assertEquals(((BDecimal) returns[0]).decimalValue(), BigDecimal.valueOf(22.0));\n+        Assert.assertEquals(((BFloat) returns[1]).floatValue(), 70.35);\n+        Assert.assertEquals((returns[2]).stringValue(), \"NaN\");\n+        Assert.assertEquals(((BInteger) returns[3]).intValue(), 110);\n+        Assert.assertEquals(((BInteger) returns[4]).intValue(), 15);\n+        Assert.assertEquals(((BBoolean) returns[5]).booleanValue(), true);\n+    }", "originalCommit": "b0e5e68a6da9e53814899dfecf28ffe80a71b5e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg1ODYxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r479858614", "bodyText": "Fixed", "author": "chiranSachintha", "createdAt": "2020-08-31T02:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg0OTY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg1MTc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r478851798", "bodyText": "Looks like this isn't used?", "author": "dulvinw", "createdAt": "2020-08-28T06:13:27Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/imports/predeclared-imports/src/bar/predeclared-modules.bal", "diffHunk": "@@ -0,0 +1,78 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function testSumFunctionInDecimal(decimal p1, decimal p2) returns decimal {\n+    return 'decimal:sum(p1, p2);\n+}\n+\n+function testOneArgMaxFunctionInDecimal(decimal arg) returns decimal {\n+    return 'decimal:max(arg);\n+}\n+\n+function testSumFunctionInFloat() returns float {\n+    return 'float:sum(12.34, 23.45, 34.56);\n+}\n+\n+function testFloatConsts() returns float {\n+    return 'float:NaN;\n+}\n+\n+function testSumFunctionInInt() returns int {\n+    return 'int:sum(10, 25, 35, 40);\n+}\n+\n+function testMaxFunctionInInt(int n, int... ns) returns int {\n+    return 'int:max(n, ...ns);\n+}\n+\n+function testFromString(string s, boolean|error expected) {\n+    assert(expected, 'boolean:fromString(s));\n+}\n+\n+string str = \"Hello Ballerina!\";\n+\n+function testSubString() returns [string,string, string] {\n+    return [str.substring(6, 9), str.substring(6), 'string:substring(str,6)];\n+}", "originalCommit": "b0e5e68a6da9e53814899dfecf28ffe80a71b5e4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg1ODUzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r479858530", "bodyText": "Added", "author": "chiranSachintha", "createdAt": "2020-08-31T02:34:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODg1MTc5OA=="}], "type": "inlineReview"}, {"oid": "cf8aa43a32da7b6e4ee762abfce9808947a3037e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cf8aa43a32da7b6e4ee762abfce9808947a3037e", "message": "Fix review suggestions", "committedDate": "2020-08-31T02:47:28Z", "type": "commit"}, {"oid": "cf8aa43a32da7b6e4ee762abfce9808947a3037e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cf8aa43a32da7b6e4ee762abfce9808947a3037e", "message": "Fix review suggestions", "committedDate": "2020-08-31T02:47:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3Mzg0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r479873842", "bodyText": "Shall we make the string we give as the detail message the message itself? Since we don't have error reasons now.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                panic error(ASSERTION_ERROR_REASON,\n          \n          \n            \n                            message = \"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");\n          \n          \n            \n                panic error(\"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");", "author": "MaryamZi", "createdAt": "2020-08-31T03:50:21Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/imports/predeclared-imports/src/bar/predeclared-modules.bal", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function testSumFunctionInDecimal(decimal p1, decimal p2) returns decimal {\n+    return 'decimal:sum(p1, p2);\n+}\n+\n+function testOneArgMaxFunctionInDecimal(decimal arg) returns decimal {\n+    return 'decimal:max(arg);\n+}\n+\n+function testSumFunctionInFloat() returns float {\n+    return 'float:sum(12.34, 23.45, 34.56);\n+}\n+\n+function testFloatConsts() returns float {\n+    return 'float:NaN;\n+}\n+\n+function testSumFunctionInInt() returns int {\n+    return 'int:sum(10, 25, 35, 40);\n+}\n+\n+function testMaxFunctionInInt(int n, int... ns) returns int {\n+    return 'int:max(n, ...ns);\n+}\n+\n+string str = \"Hello Ballerina!\";\n+\n+function testSubString() returns string {\n+    return 'string:substring(str,6);\n+}\n+\n+function testStartsWithFunctionInString() returns boolean {\n+    return 'string:startsWith(str, \"Hello\");\n+}\n+\n+function testPredeclaredModules() {\n+    decimal d1 = 22.0;\n+    decimal d2 = 5.7;\n+    float f1 = 70.35;\n+    string s1 = \"true\";\n+    string s2 = \"Ballerina!\";\n+    assertEquality(d1, testSumFunctionInDecimal(10.5, 11.5));\n+    assertEquality(d2, testOneArgMaxFunctionInDecimal(5.7));\n+    assertEquality(f1, testSumFunctionInFloat());\n+    assertEquality(true, testFloatConsts().isNaN());\n+    assertEquality(110, testSumFunctionInInt());\n+    assertEquality(15, testMaxFunctionInInt(10,15));\n+    assertEquality(true, 'boolean:fromString(s1));\n+    assertEquality(s2, testSubString());\n+    assertEquality(true, testStartsWithFunctionInString());\n+}\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertEquality(any|error expected, any|error actual) {\n+    if expected is anydata && actual is anydata && expected == actual {\n+        return;\n+    }\n+\n+    if expected === actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,\n+                message = \"expected '\" + expected.toString() + \"', found '\" + actual.toString () + \"'\");", "originalCommit": "cf8aa43a32da7b6e4ee762abfce9808947a3037e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE2NTMxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r484165318", "bodyText": "Done", "author": "chiranSachintha", "createdAt": "2020-09-07T03:28:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3Mzg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3Mzk1Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r479873957", "bodyText": "Same comment as above re: removing ASSERTION_ERROR_REASON.", "author": "MaryamZi", "createdAt": "2020-08-31T03:50:55Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/imports/predeclared-imports/src/foo/overridden-predeclared-modules.bal", "diffHunk": "@@ -0,0 +1,87 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/lang.'boolean as booleans;\n+import ballerina/lang.'int as ints;\n+import ballerina/lang.'decimal as decimals;\n+import ballerina/lang.'float as floats;\n+import ballerina/lang.'string as strings;\n+\n+function testSumFunctionInDecimal(decimal p1, decimal p2) returns decimal {\n+    return 'decimals:sum(p1, p2);\n+}\n+\n+function testOneArgMaxFunctionInDecimal(decimal arg) returns decimal {\n+    return 'decimals:max(arg);\n+}\n+\n+function testSumFunctionInFloat() returns float {\n+    return 'floats:sum(12.34, 23.45, 34.56);\n+}\n+\n+function testFloatConsts() returns float {\n+    return 'floats:NaN;\n+}\n+\n+function testSumFunctionInInt() returns int {\n+    return 'ints:sum(10, 25, 35, 40);\n+}\n+\n+function testMaxFunctionInInt(int n, int... ns) returns int {\n+    return 'ints:max(n, ...ns);\n+}\n+\n+string str = \"Hello Ballerina!\";\n+\n+function testSubString() returns string {\n+    return 'strings:substring(str,6);\n+}\n+\n+function testStartsWithFunctionInString() returns boolean {\n+    return 'strings:startsWith(str, \"Hello\");\n+}\n+\n+function testOverriddenPredeclaredModules() {\n+    decimal d1 = 22.0;\n+    decimal d2 = 5.7;\n+    float f1 = 70.35;\n+    string s1 = \"true\";\n+    string s2 = \"Ballerina!\";\n+    assertEquality(d1, testSumFunctionInDecimal(10.5, 11.5));\n+    assertEquality(d2, testOneArgMaxFunctionInDecimal(5.7));\n+    assertEquality(f1, testSumFunctionInFloat());\n+    assertEquality(true, testFloatConsts().isNaN());\n+    assertEquality(110, testSumFunctionInInt());\n+    assertEquality(15, testMaxFunctionInInt(10,15));\n+    assertEquality(true, 'booleans:fromString(s1));\n+    assertEquality(s2, testSubString());\n+    assertEquality(true, testStartsWithFunctionInString());\n+}\n+\n+const ASSERTION_ERROR_REASON = \"AssertionError\";\n+\n+function assertEquality(any|error expected, any|error actual) {\n+    if expected is anydata && actual is anydata && expected == actual {\n+        return;\n+    }\n+\n+    if expected === actual {\n+        return;\n+    }\n+\n+    panic error(ASSERTION_ERROR_REASON,", "originalCommit": "cf8aa43a32da7b6e4ee762abfce9808947a3037e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE2NTM3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r484165374", "bodyText": "Done", "author": "chiranSachintha", "createdAt": "2020-09-07T03:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3Mzk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NDc4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r479874788", "bodyText": "We seem to have added tests for string, int, float, and decimal. Shall we add a simple test for the rest of the predeclared imports too?", "author": "MaryamZi", "createdAt": "2020-08-31T03:54:50Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/imports/predeclared-imports/src/bar/predeclared-modules.bal", "diffHunk": "@@ -0,0 +1,81 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+function testSumFunctionInDecimal(decimal p1, decimal p2) returns decimal {\n+    return 'decimal:sum(p1, p2);\n+}\n+\n+function testOneArgMaxFunctionInDecimal(decimal arg) returns decimal {\n+    return 'decimal:max(arg);\n+}\n+\n+function testSumFunctionInFloat() returns float {\n+    return 'float:sum(12.34, 23.45, 34.56);\n+}\n+\n+function testFloatConsts() returns float {\n+    return 'float:NaN;\n+}\n+\n+function testSumFunctionInInt() returns int {\n+    return 'int:sum(10, 25, 35, 40);\n+}\n+\n+function testMaxFunctionInInt(int n, int... ns) returns int {\n+    return 'int:max(n, ...ns);\n+}\n+\n+string str = \"Hello Ballerina!\";\n+\n+function testSubString() returns string {\n+    return 'string:substring(str,6);\n+}\n+\n+function testStartsWithFunctionInString() returns boolean {\n+    return 'string:startsWith(str, \"Hello\");\n+}\n+\n+function testPredeclaredModules() {", "originalCommit": "cf8aa43a32da7b6e4ee762abfce9808947a3037e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5MDY5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r484190691", "bodyText": "There are no use scenarios with other predeclared imports yet.", "author": "chiranSachintha", "createdAt": "2020-09-07T05:31:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NDc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxODQyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r485518428", "bodyText": "We can still add tests for overriding, right?\nShall we also create an issue to add predeclared tests once the langlib content for these langlibs are introduced in the implementation?", "author": "MaryamZi", "createdAt": "2020-09-09T10:50:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NDc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYzNDk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r487634976", "bodyText": "No, there are no use scenarios. Created new issue to add predeclared tests for those langlibs. (#25757)", "author": "chiranSachintha", "createdAt": "2020-09-14T03:40:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NDc4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc1Njg1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r487756856", "bodyText": "@chiranSachintha, let's add few simple tests for overriding as discussed offline.", "author": "MaryamZi", "createdAt": "2020-09-14T08:57:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg3NDc4OA=="}], "type": "inlineReview"}, {"oid": "37ac40e4bcd8dd02fd5431f3902f1d41924f2409", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37ac40e4bcd8dd02fd5431f3902f1d41924f2409", "message": "Fix review suggestions", "committedDate": "2020-09-07T03:26:41Z", "type": "commit"}, {"oid": "e2e513e30e120fbdb804d5d721cc094816074be7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e2e513e30e120fbdb804d5d721cc094816074be7", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-25463", "committedDate": "2020-09-07T05:53:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxOTAwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r485519006", "bodyText": "Shall we order these alphabetically and have the same order as the spec (ballerina-platform/ballerina-spec@158691e)? O:)", "author": "MaryamZi", "createdAt": "2020-09-09T10:51:50Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/SymbolTable.java", "diffHunk": "@@ -356,6 +356,16 @@ public void loadPredeclaredModules() {\n         modules.put(Names.ERROR, this.langErrorModuleSymbol);\n         modules.put(Names.OBJECT, this.langObjectModuleSymbol);\n         modules.put(Names.XML, this.langXmlModuleSymbol);\n+        modules.put(Names.INT, this.langIntModuleSymbol);\n+        modules.put(Names.FLOAT, this.langFloatModuleSymbol);\n+        modules.put(Names.DECIMAL, this.langDecimalModuleSymbol);\n+        modules.put(Names.BOOLEAN, this.langBooleanModuleSymbol);\n+        modules.put(Names.FUTURE, this.langFutureModuleSymbol);\n+        modules.put(Names.MAP, this.langMapModuleSymbol);\n+        modules.put(Names.STREAM, this.langStreamModuleSymbol);\n+        modules.put(Names.STRING, this.langStringModuleSymbol);\n+        modules.put(Names.TABLE, this.langTableModuleSymbol);\n+        modules.put(Names.TYPEDESC, this.langTypedescModuleSymbol);", "originalCommit": "e2e513e30e120fbdb804d5d721cc094816074be7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzYyNzU4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25480#discussion_r487627587", "bodyText": "Done", "author": "chiranSachintha", "createdAt": "2020-09-14T03:04:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxOTAwNg=="}], "type": "inlineReview"}, {"oid": "c46661bd742e5595be299279088e00bfae001249", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c46661bd742e5595be299279088e00bfae001249", "message": "Fix review suggestions", "committedDate": "2020-09-14T03:03:06Z", "type": "commit"}, {"oid": "6975e60af54f81cf9c6a086135c8646df25d4fac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6975e60af54f81cf9c6a086135c8646df25d4fac", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-25463", "committedDate": "2020-09-14T03:27:58Z", "type": "commit"}, {"oid": "c980f54998c6b66bb3cf5419c3910df8c0369fdc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c980f54998c6b66bb3cf5419c3910df8c0369fdc", "message": "Fix failure test", "committedDate": "2020-09-14T04:17:20Z", "type": "commit"}, {"oid": "6d757939c8c2eaf16b6a8f56a5c865eb1b976945", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d757939c8c2eaf16b6a8f56a5c865eb1b976945", "message": "Fix review suggestions", "committedDate": "2020-09-15T07:52:11Z", "type": "commit"}]}