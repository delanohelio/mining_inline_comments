{"pr_number": 22606, "pr_title": "Improve Ballerina-file API doc", "pr_createdAt": "2020-04-14T13:01:50Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606", "timeline": [{"oid": "5666b58d75b276057802df185ce8ba98c4c74cb9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5666b58d75b276057802df185ce8ba98c4c74cb9", "message": "Improve API docs", "committedDate": "2020-04-14T12:57:37Z", "type": "commit"}, {"oid": "315632332345a0d5da01a6d7eb8f5eabddf17d8a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/315632332345a0d5da01a6d7eb8f5eabddf17d8a", "message": "Add api docs for directory listener", "committedDate": "2020-04-14T14:31:23Z", "type": "commit"}, {"oid": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "message": "Fix doc comment", "committedDate": "2020-04-14T14:42:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzOTAyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408639020", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            file/directory and retrieve metadata of the file.\n          \n          \n            \n            file/directory, and retrieve metadata of the file.", "author": "praneesha", "createdAt": "2020-04-15T07:35:00Z", "path": "stdlib/file/src/main/ballerina/src/file/Module.md", "diffHunk": "@@ -1,52 +1,10 @@\n-## Module overview\n-\n This module contains functions to perform file system based operations such as create, delete, rename the\n file/directory and retrieve metadata of the file.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYzOTQwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408639406", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For an example on the usage of file operations, see the [File Example](https://ballerina.io/v1-2/learn/by-example/file.html).\n          \n          \n            \n            For an example on the usage of the operations, see the [File Example](https://ballerina.io/learn/by-example/file.html).", "author": "praneesha", "createdAt": "2020-04-15T07:35:41Z", "path": "stdlib/file/src/main/ballerina/src/file/Module.md", "diffHunk": "@@ -1,52 +1,10 @@\n-## Module overview\n-\n This module contains functions to perform file system based operations such as create, delete, rename the\n file/directory and retrieve metadata of the file.\n \n-## Sample\n-\n-The sample given below uses the functions in the module to get the system-level information.\n-\n-```ballerina\n-import ballerina/file;\n-import ballerina/io;\n-\n-public function main() {\n-\n-    // Get the current directory path.\n-    io:println(\"Current directory: \" + file:getCurrentDirectory());\n-\n-    // Check whether file or directory of the provided path exists.\n-    boolean result = file:exists(\"foo/bar.txt\");\n-\n-    // Create a new directory.\n-    string | error results = file:createDir(\"foo/bar\");\n-\n-    // Create a directory with any non-existent parents.\n-    string | error results = file:createDir(\"foo/bar\", true);\n-\n-    // Remove the file or directory in the specified file path.\n-    error? results = file:remove(\"foo/bar.txt\");\n-\n-    // Remove the directory in the specified file path with all its children.\n-    error? results = file:remove(\"foo/bar\", true);\n-\n-    // Rename(Move) the file or directory to the new path.\n-    error? results = file:rename(\"/A/B/C\", \"/A/B/D\");\n-\n-    // Get default directory use for temporary files.\n-    string results = file:tempDir();\n-\n-    // Create a file in given file path.\n-    string | error results = file:createFile(\"bar.txt\");\n+For an example on the usage of file operations, see the [File Example](https://ballerina.io/v1-2/learn/by-example/file.html).", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDAzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640038", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For an example on the usage of `Directory Listener` see the [Directory Listener Example](https://ballerina.io/v1-2/learn/by-example/directory-listener.html).\n          \n          \n            \n            For an example on the usage of the operations, see the [Directory Listener Example](https://ballerina.io/learn/by-example/directory-listener.html).", "author": "praneesha", "createdAt": "2020-04-15T07:36:55Z", "path": "stdlib/file/src/main/ballerina/src/file/Module.md", "diffHunk": "@@ -1,52 +1,10 @@\n-## Module overview\n-\n This module contains functions to perform file system based operations such as create, delete, rename the\n file/directory and retrieve metadata of the file.\n \n-## Sample\n-\n-The sample given below uses the functions in the module to get the system-level information.\n-\n-```ballerina\n-import ballerina/file;\n-import ballerina/io;\n-\n-public function main() {\n-\n-    // Get the current directory path.\n-    io:println(\"Current directory: \" + file:getCurrentDirectory());\n-\n-    // Check whether file or directory of the provided path exists.\n-    boolean result = file:exists(\"foo/bar.txt\");\n-\n-    // Create a new directory.\n-    string | error results = file:createDir(\"foo/bar\");\n-\n-    // Create a directory with any non-existent parents.\n-    string | error results = file:createDir(\"foo/bar\", true);\n-\n-    // Remove the file or directory in the specified file path.\n-    error? results = file:remove(\"foo/bar.txt\");\n-\n-    // Remove the directory in the specified file path with all its children.\n-    error? results = file:remove(\"foo/bar\", true);\n-\n-    // Rename(Move) the file or directory to the new path.\n-    error? results = file:rename(\"/A/B/C\", \"/A/B/D\");\n-\n-    // Get default directory use for temporary files.\n-    string results = file:tempDir();\n-\n-    // Create a file in given file path.\n-    string | error results = file:createFile(\"bar.txt\");\n+For an example on the usage of file operations, see the [File Example](https://ballerina.io/v1-2/learn/by-example/file.html).\n \n-    // Get metadata information of the file.\n-    file:FileInfo | error result = file:getFileInfo(\"foo/bar.txt\");\n+## Directory Listener \n \n-    // Get the list of files in the directory.\n-    file:FileInfo[] | error results = file:readDir(\"foo/bar\");\n+The `Directory Listener` is used to listen to a directory in the local file system. It notifies when new files are created in the directory or when the existing files are deleted or modified.\n \n-    // Copy the file or directory to the new path.\n-    error? results = file:copy(\"/A/B/C\", \"/A/B/D\", true);\n-}\n-```\n+For an example on the usage of `Directory Listener` see the [Directory Listener Example](https://ballerina.io/v1-2/learn/by-example/directory-listener.html).", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDE0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Current working directory, or else an empty string if the current working directory cannot be determined\n          \n          \n            \n            # + return - Current working directory or else an empty string if the current working directory cannot be determined", "author": "praneesha", "createdAt": "2020-04-15T07:37:06Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -17,8 +17,11 @@\n import ballerina/java;\n \n # Returns the current working directory.\n-#\n-# + return - Current working directory or an empty string if the current working directory cannot be determined\n+# ```ballerina\n+# string dirPath = file:getCurrentDirectory();\n+# ```\n+# \n+# + return - Current working directory, or else an empty string if the current working directory cannot be determined", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDI1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640259", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reports whether file or directory exists for the given the path.\n          \n          \n            \n            # Reports whether the file or directory exists in the given the path.", "author": "praneesha", "createdAt": "2020-04-15T07:37:18Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -29,9 +32,12 @@ function externGetCurrentDirectory() returns handle = @java:Method {\n } external;\n \n # Reports whether file or directory exists for the given the path.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDMyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640328", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-15T07:37:25Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -29,9 +32,12 @@ function externGetCurrentDirectory() returns handle = @java:Method {\n } external;\n \n # Reports whether file or directory exists for the given the path.\n+# ```ballerina\n+# boolean result = file:exists(\"foo/bar.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - True if path is absolute, else false\n+# + path - String value of file path", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDQwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640401", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - True if path is absolute, or else false\n          \n          \n            \n            # + return - True if the path is absolute or else false", "author": "praneesha", "createdAt": "2020-04-15T07:37:35Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -29,9 +32,12 @@ function externGetCurrentDirectory() returns handle = @java:Method {\n } external;\n \n # Reports whether file or directory exists for the given the path.\n+# ```ballerina\n+# boolean result = file:exists(\"foo/bar.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - True if path is absolute, else false\n+# + path - String value of file path\n+# + return - True if path is absolute, or else false", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDYxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640619", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If parentDirs flag is true, Creates a directory in specified path with any necessary parents.\n          \n          \n            \n            # If the `parentDirs` flag is true, it creates a directory in the specified path with any necessary parents.", "author": "praneesha", "createdAt": "2020-04-15T07:37:57Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -43,10 +49,13 @@ function externExists(handle path) returns boolean = @java:Method {\n \n # Creates a new directory with the specified file name.\n # If parentDirs flag is true, Creates a directory in specified path with any necessary parents.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDc2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640769", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Absolute path value of the created directory, or else an `Error` if failed\n          \n          \n            \n            # + return - Absolute path value of the created directory or else an `Error` if failed\n          \n      \n    \n    \n  \n\nNeed to specify the error.", "author": "praneesha", "createdAt": "2020-04-15T07:38:14Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -43,10 +49,13 @@ function externExists(handle path) returns boolean = @java:Method {\n \n # Creates a new directory with the specified file name.\n # If parentDirs flag is true, Creates a directory in specified path with any necessary parents.\n+# ```ballerina\n+# string | error results = file:createDir(\"foo/bar\");\n+# ```\n #\n-# + dir - directory name.\n-# + parentDirs - Indicates whether the `createDir` should create non-existing parent directories.\n-# + return - Returns absolute path value of the created directory or an `Error` if failed\n+# + dir - Directory name\n+# + parentDirs - Indicates whether the `createDir` should create non-existing parent directories\n+# + return - Absolute path value of the created directory, or else an `Error` if failed", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDg4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640888", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If recursive flag is true, Removes the path and any children it contains.\n          \n          \n            \n            # If the recursive flag is true, it removes the path and any children it contains.", "author": "praneesha", "createdAt": "2020-04-15T07:38:28Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -63,10 +72,13 @@ function externCreateDir(handle dir, boolean parentDirs) returns handle|Error =\n \n # Removes the specified file or directory.\n # If recursive flag is true, Removes the path and any children it contains.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MDk1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408640954", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file/directory path\n          \n          \n            \n            # + path - String value of the file/directory path", "author": "praneesha", "createdAt": "2020-04-15T07:38:36Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -63,10 +72,13 @@ function externCreateDir(handle dir, boolean parentDirs) returns handle|Error =\n \n # Removes the specified file or directory.\n # If recursive flag is true, Removes the path and any children it contains.\n+# ```ballerina\n+# file:Error? results = file:remove(\"foo/bar.txt\");\n+# ```\n #\n-# + path - String value of file/directory path.\n-# + recursive - Indicates whether the `remove` should recursively remove all the file inside the given directory.\n-# + return - Returns an `Error` if failed to remove.\n+# + path - String value of file/directory path", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTA3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641070", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + recursive - Indicates whether the `remove` should recursively remove all the file inside the given directory\n          \n          \n            \n            # + recursive - Indicates whether the `remove` should recursively remove all the files inside the given directory", "author": "praneesha", "createdAt": "2020-04-15T07:38:48Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -63,10 +72,13 @@ function externCreateDir(handle dir, boolean parentDirs) returns handle|Error =\n \n # Removes the specified file or directory.\n # If recursive flag is true, Removes the path and any children it contains.\n+# ```ballerina\n+# file:Error? results = file:remove(\"foo/bar.txt\");\n+# ```\n #\n-# + path - String value of file/directory path.\n-# + recursive - Indicates whether the `remove` should recursively remove all the file inside the given directory.\n-# + return - Returns an `Error` if failed to remove.\n+# + path - String value of file/directory path\n+# + recursive - Indicates whether the `remove` should recursively remove all the file inside the given directory", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTI0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641241", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `Error` if failed to remove\n          \n          \n            \n            # + return - An `Error` if failed to remove\n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:39:04Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -63,10 +72,13 @@ function externCreateDir(handle dir, boolean parentDirs) returns handle|Error =\n \n # Removes the specified file or directory.\n # If recursive flag is true, Removes the path and any children it contains.\n+# ```ballerina\n+# file:Error? results = file:remove(\"foo/bar.txt\");\n+# ```\n #\n-# + path - String value of file/directory path.\n-# + recursive - Indicates whether the `remove` should recursively remove all the file inside the given directory.\n-# + return - Returns an `Error` if failed to remove.\n+# + path - String value of file/directory path\n+# + recursive - Indicates whether the `remove` should recursively remove all the file inside the given directory\n+# + return - An `Error` if failed to remove", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMDc3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408910776", "bodyText": "The encompassing Error object is named as Error, I've added the module name to be more clear. Added in dba6e94", "author": "niveathika", "createdAt": "2020-04-15T14:59:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTQxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641411", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Renames(Moves) old path to new path.\n          \n          \n            \n            # Renames(Moves) the old path with the new path.", "author": "praneesha", "createdAt": "2020-04-15T07:39:26Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -78,10 +90,13 @@ function externRemove(handle path, boolean recursive) returns Error? = @java:Met\n \n # Renames(Moves) old path to new path.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTUxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641518", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If new path already exists and it is not a directory, this replaces the file.\n          \n          \n            \n            # If the new path already exists and it is not a directory, this replaces the file.", "author": "praneesha", "createdAt": "2020-04-15T07:39:34Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -78,10 +90,13 @@ function externRemove(handle path, boolean recursive) returns Error? = @java:Met\n \n # Renames(Moves) old path to new path.\n # If new path already exists and it is not a directory, this replaces the file.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTYxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641616", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + oldPath - String value of old file path\n          \n          \n            \n            # + oldPath - String value of the old file path", "author": "praneesha", "createdAt": "2020-04-15T07:39:45Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -78,10 +90,13 @@ function externRemove(handle path, boolean recursive) returns Error? = @java:Met\n \n # Renames(Moves) old path to new path.\n # If new path already exists and it is not a directory, this replaces the file.\n+# ```ballerina\n+# file:error? results = file:rename(\"/A/B/C\", \"/A/B/D\");\n+# ```\n #\n-# + oldPath - String value of old file path.\n-# + newPath - String value of new file path.\n-# + return - Returns an `Error` if failed to rename.\n+# + oldPath - String value of old file path", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTY3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641671", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + newPath - String value of new file path\n          \n          \n            \n            # + newPath - String value of the new file path", "author": "praneesha", "createdAt": "2020-04-15T07:39:51Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -78,10 +90,13 @@ function externRemove(handle path, boolean recursive) returns Error? = @java:Met\n \n # Renames(Moves) old path to new path.\n # If new path already exists and it is not a directory, this replaces the file.\n+# ```ballerina\n+# file:error? results = file:rename(\"/A/B/C\", \"/A/B/D\");\n+# ```\n #\n-# + oldPath - String value of old file path.\n-# + newPath - String value of new file path.\n-# + return - Returns an `Error` if failed to rename.\n+# + oldPath - String value of old file path\n+# + newPath - String value of new file path", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTc0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641748", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `Error` if failed to rename\n          \n          \n            \n            # + return - An `Error` if failed to rename\n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:39:58Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -78,10 +90,13 @@ function externRemove(handle path, boolean recursive) returns Error? = @java:Met\n \n # Renames(Moves) old path to new path.\n # If new path already exists and it is not a directory, this replaces the file.\n+# ```ballerina\n+# file:error? results = file:rename(\"/A/B/C\", \"/A/B/D\");\n+# ```\n #\n-# + oldPath - String value of old file path.\n-# + newPath - String value of new file path.\n-# + return - Returns an `Error` if failed to rename.\n+# + oldPath - String value of old file path\n+# + newPath - String value of new file path\n+# + return - An `Error` if failed to rename", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMDk0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408910943", "bodyText": "The encompassing Error object is named as Error, I've added the module name to be more clear. Added in dba6e94", "author": "niveathika", "createdAt": "2020-04-15T14:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTg2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641862", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Creates a file in specified file path.\n          \n          \n            \n            # Creates a file in the specified file path.", "author": "praneesha", "createdAt": "2020-04-15T07:40:09Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -105,9 +123,12 @@ function externTempDir() returns handle = @java:Method {\n \n # Creates a file in specified file path.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MTk0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408641942", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Truncates if file already exists in the given path.\n          \n          \n            \n            # Truncates if the file already exists in the given path.", "author": "praneesha", "createdAt": "2020-04-15T07:40:16Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -105,9 +123,12 @@ function externTempDir() returns handle = @java:Method {\n \n # Creates a file in specified file path.\n # Truncates if file already exists in the given path.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MjAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408642001", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of file path\n          \n          \n            \n            # + path - String value of the file path", "author": "praneesha", "createdAt": "2020-04-15T07:40:23Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -105,9 +123,12 @@ function externTempDir() returns handle = @java:Method {\n \n # Creates a file in specified file path.\n # Truncates if file already exists in the given path.\n+# ```ballerina\n+# string | error results = file:createFile(\"bar.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Returns absolute path value of the created file or an `Error` if failed\n+# + path - String value of file path", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MjExOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408642119", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - Absolute path value of the created file, or else an `Error` if failed\n          \n          \n            \n            # + return - Absolute path value of the created file or else an `Error` if failed\n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:40:36Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -105,9 +123,12 @@ function externTempDir() returns handle = @java:Method {\n \n # Creates a file in specified file path.\n # Truncates if file already exists in the given path.\n+# ```ballerina\n+# string | error results = file:createFile(\"bar.txt\");\n+# ```\n #\n-# + path - String value of file path.\n-# + return - Returns absolute path value of the created file or an `Error` if failed\n+# + path - String value of file path\n+# + return - Absolute path value of the created file, or else an `Error` if failed", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MjE4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408642188", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Returns metadata information of the file specified in file path.\n          \n          \n            \n            # Returns the metadata information of the file specified in the file path.", "author": "praneesha", "createdAt": "2020-04-15T07:40:45Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -123,9 +144,12 @@ function externCreateFile(handle path) returns handle|Error = @java:Method {\n } external;\n \n # Returns metadata information of the file specified in file path.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MjM3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408642378", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - FileInfo instance with file metadata, or else an `Error`\n          \n          \n            \n            # + return - The `FileInfo` instance with the file metadata or else an `Error`\n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:41:09Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -123,9 +144,12 @@ function externCreateFile(handle path) returns handle|Error = @java:Method {\n } external;\n \n # Returns metadata information of the file specified in file path.\n+# ```ballerina\n+# file:FileInfo | error result = file:getFileInfo(\"foo/bar.txt\");\n+# ```\n #\n # + path - String value of the file path.\n-# + return - Returns FileInfo instance with file metadata or an `Error`\n+# + return - FileInfo instance with file metadata, or else an `Error`", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MjQ4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408642486", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Reads the directory and returns a list of files and directories # inside the specified directory.\n          \n          \n            \n            # Reads the directory and returns a list of files and directories \n          \n          \n            \n            # inside the specified directory.", "author": "praneesha", "createdAt": "2020-04-15T07:41:24Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -135,11 +159,14 @@ function externGetFileInfo(handle path) returns FileInfo|Error = @java:Method {\n     name: \"getFileInfo\"\n } external;\n \n-# Reads the directory and returns a list of files and directories # inside the specified directory\n+# Reads the directory and returns a list of files and directories # inside the specified directory.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MjU1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408642558", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + path - String value of directory path.\n          \n          \n            \n            # + path - String value of the directory path.", "author": "praneesha", "createdAt": "2020-04-15T07:41:32Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -135,11 +159,14 @@ function externGetFileInfo(handle path) returns FileInfo|Error = @java:Method {\n     name: \"getFileInfo\"\n } external;\n \n-# Reads the directory and returns a list of files and directories # inside the specified directory\n+# Reads the directory and returns a list of files and directories # inside the specified directory.\n+# ```ballerina\n+# file:FileInfo[] | error results = file:readDir(\"foo/bar\");\n+# ```\n #\n # + path - String value of directory path.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0Mjc5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408642796", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - FileInfo array, or else an `Error` if there is an error while changing the mode.\n          \n          \n            \n            # + return - The `FileInfo` array or else an `Error` if there is an error while changing the mode.\n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:41:55Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -135,11 +159,14 @@ function externGetFileInfo(handle path) returns FileInfo|Error = @java:Method {\n     name: \"getFileInfo\"\n } external;\n \n-# Reads the directory and returns a list of files and directories # inside the specified directory\n+# Reads the directory and returns a list of files and directories # inside the specified directory.\n+# ```ballerina\n+# file:FileInfo[] | error results = file:readDir(\"foo/bar\");\n+# ```\n #\n # + path - String value of directory path.\n-# + maxDepth - The maximum number of directory levels to visit. -1 to indicate that all levels should be visited.\n-# + return - Returns FileInfo array or an `Error` if there is an error while changing the mode.\n+# + maxDepth - The maximum number of directory levels to visit. -1 to indicate that all levels should be visited\n+# + return - FileInfo array, or else an `Error` if there is an error while changing the mode.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MjkwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408642907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Copy file/directory in old path to new path.\n          \n          \n            \n            # Copy the file/directory in the old path to the new path.", "author": "praneesha", "createdAt": "2020-04-15T07:42:08Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -151,11 +178,14 @@ function externReadDir(handle path, int maxDepth) returns FileInfo[]|Error = @ja\n \n # Copy file/directory in old path to new path.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MzEwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408643106", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # If new path already exists, this replaces the file.\n          \n          \n            \n            # If a file already exists in the new path, this replaces that file.", "author": "praneesha", "createdAt": "2020-04-15T07:42:33Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -151,11 +178,14 @@ function externReadDir(handle path, int maxDepth) returns FileInfo[]|Error = @ja\n \n # Copy file/directory in old path to new path.\n # If new path already exists, this replaces the file.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MzI4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408643285", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + sourcePath - String value of old file path\n          \n          \n            \n            # + sourcePath - String value of the old file path", "author": "praneesha", "createdAt": "2020-04-15T07:42:51Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -151,11 +178,14 @@ function externReadDir(handle path, int maxDepth) returns FileInfo[]|Error = @ja\n \n # Copy file/directory in old path to new path.\n # If new path already exists, this replaces the file.\n+# ```ballerina\n+# file:Error? results = file:copy(\"/A/B/C\", \"/A/B/D\", true);\n+# ```\n #\n-# + sourcePath - String value of old file path.\n-# + destinationPath - String value of new file path.\n-# + replaceExisting - Flag to allow replace if file already exists in destination path.\n-# + return - Returns an `Error` if failed to rename.\n+# + sourcePath - String value of old file path", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MzM0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408643342", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + destinationPath - String value of new file path\n          \n          \n            \n            # + destinationPath - String value of the new file path", "author": "praneesha", "createdAt": "2020-04-15T07:42:57Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -151,11 +178,14 @@ function externReadDir(handle path, int maxDepth) returns FileInfo[]|Error = @ja\n \n # Copy file/directory in old path to new path.\n # If new path already exists, this replaces the file.\n+# ```ballerina\n+# file:Error? results = file:copy(\"/A/B/C\", \"/A/B/D\", true);\n+# ```\n #\n-# + sourcePath - String value of old file path.\n-# + destinationPath - String value of new file path.\n-# + replaceExisting - Flag to allow replace if file already exists in destination path.\n-# + return - Returns an `Error` if failed to rename.\n+# + sourcePath - String value of old file path\n+# + destinationPath - String value of new file path", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MzUyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408643527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + replaceExisting - Flag to allow replace if file already exists in destination path\n          \n          \n            \n            # + replaceExisting - Flag to replace if the file already exists in the destination path", "author": "praneesha", "createdAt": "2020-04-15T07:43:15Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -151,11 +178,14 @@ function externReadDir(handle path, int maxDepth) returns FileInfo[]|Error = @ja\n \n # Copy file/directory in old path to new path.\n # If new path already exists, this replaces the file.\n+# ```ballerina\n+# file:Error? results = file:copy(\"/A/B/C\", \"/A/B/D\", true);\n+# ```\n #\n-# + sourcePath - String value of old file path.\n-# + destinationPath - String value of new file path.\n-# + replaceExisting - Flag to allow replace if file already exists in destination path.\n-# + return - Returns an `Error` if failed to rename.\n+# + sourcePath - String value of old file path\n+# + destinationPath - String value of new file path\n+# + replaceExisting - Flag to allow replace if file already exists in destination path", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MzU4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408643589", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + return - An `Error` if failed to rename\n          \n          \n            \n            # + return - An `Error` if failed to rename\n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:43:21Z", "path": "stdlib/file/src/main/ballerina/src/file/file.bal", "diffHunk": "@@ -151,11 +178,14 @@ function externReadDir(handle path, int maxDepth) returns FileInfo[]|Error = @ja\n \n # Copy file/directory in old path to new path.\n # If new path already exists, this replaces the file.\n+# ```ballerina\n+# file:Error? results = file:copy(\"/A/B/C\", \"/A/B/D\", true);\n+# ```\n #\n-# + sourcePath - String value of old file path.\n-# + destinationPath - String value of new file path.\n-# + replaceExisting - Flag to allow replace if file already exists in destination path.\n-# + return - Returns an `Error` if failed to rename.\n+# + sourcePath - String value of old file path\n+# + destinationPath - String value of new file path\n+# + replaceExisting - Flag to allow replace if file already exists in destination path\n+# + return - An `Error` if failed to rename", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkxMTI1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408911259", "bodyText": "The encompassing Error object is named as Error, I've added the module name to be more clear. Added in dba6e94", "author": "niveathika", "createdAt": "2020-04-15T15:00:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MzU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MzY0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408643647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Returns the last modified time of the file.\n          \n          \n            \n                # Returns the last-modified time of the file.", "author": "praneesha", "createdAt": "2020-04-15T07:43:28Z", "path": "stdlib/file/src/main/ballerina/src/file/file_info.bal", "diffHunk": "@@ -57,21 +57,21 @@ public type FileInfo object {\n \n     # Returns the last modified time of the file.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0MzczMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408643733", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Last modified time of the file\n          \n          \n            \n                # + return - Last-modified time of the file", "author": "praneesha", "createdAt": "2020-04-15T07:43:36Z", "path": "stdlib/file/src/main/ballerina/src/file/file_info.bal", "diffHunk": "@@ -57,21 +57,21 @@ public type FileInfo object {\n \n     # Returns the last modified time of the file.\n     #\n-    # + return - Last modified time of the file.\n+    # + return - Last modified time of the file", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0Mzk0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408643945", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents directory listener endpoint where used to listen to a directory in the local file system.\n          \n          \n            \n            # Represents the directory listener endpoint, which is used to listen to a directory in the local file system.", "author": "praneesha", "createdAt": "2020-04-15T07:43:58Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -20,13 +20,16 @@ import ballerina/java;\n ///////////////////////////////////\n /// Direcotry Listener Endpoint ///\n ///////////////////////////////////\n+\n # Represents directory listener endpoint where used to listen to a directory in the local file system.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDA2MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644060", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + listenerConfig - ListenerConfig record with directory details \n          \n          \n            \n                # + listenerConfig - The `ListenerConfig` record with the directory details", "author": "praneesha", "createdAt": "2020-04-15T07:44:10Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -20,13 +20,16 @@ import ballerina/java;\n ///////////////////////////////////\n /// Direcotry Listener Endpoint ///\n ///////////////////////////////////\n+\n # Represents directory listener endpoint where used to listen to a directory in the local file system.\n-#\n public type Listener object {\n     private ListenerConfig config;\n \n     *lang:Listener;\n \n+    # Creates a new Directory listener.\n+    # \n+    # + listenerConfig - ListenerConfig record with directory details ", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDE4NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644185", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - (), or else error upon failure to start the listener \n          \n          \n            \n                # + return - () or else error upon failure to start the listener \n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:44:19Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener ", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDM0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644345", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gracefully stops the `file:Listener`.\n          \n          \n            \n                # Stops the `file:Listener` gracefully.", "author": "praneesha", "createdAt": "2020-04-15T07:44:35Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener \n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    public function __gracefulStop() returns error? {\n+    # Gracefully stops the `file:Listener`.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDQ1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644458", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - (), or else error upon failure to stop the listener \n          \n          \n            \n                # + return - () or else error upon failure to stop the listener \n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:44:45Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener \n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    public function __gracefulStop() returns error? {\n+    # Gracefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener ", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644581", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Forecefully stops the `file:Listener`.\n          \n          \n            \n                # Stops the `file:Listener` forcefully.", "author": "praneesha", "createdAt": "2020-04-15T07:44:59Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener \n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    public function __gracefulStop() returns error? {\n+    # Gracefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n+        public function __gracefulStop() returns error? {\n         return ();\n     }\n \n+    # Forecefully stops the `file:Listener`.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDY4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644681", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - (), or else error upon failure to stop the listener \n          \n          \n            \n                # + return - () or else error upon failure to stop the listener \n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:45:09Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener \n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    public function __gracefulStop() returns error? {\n+    # Gracefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n+        public function __gracefulStop() returns error? {\n         return ();\n     }\n \n+    # Forecefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener ", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDc0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644745", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Binds a service to `file:Listener`.\n          \n          \n            \n                # Binds a service to the `file:Listener`.", "author": "praneesha", "createdAt": "2020-04-15T07:45:17Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener \n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    public function __gracefulStop() returns error? {\n+    # Gracefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n+        public function __gracefulStop() returns error? {\n         return ();\n     }\n \n+    # Forecefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n     public function __immediateStop() returns error? {\n         return ();\n     }\n \n+    # Binds a service to `file:Listener`.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDgyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644827", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - (), or else error upon failure to attach to the service\n          \n          \n            \n                # + return - () or else error upon failure to attach to the service\n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:45:25Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener \n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    public function __gracefulStop() returns error? {\n+    # Gracefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n+        public function __gracefulStop() returns error? {\n         return ();\n     }\n \n+    # Forecefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n     public function __immediateStop() returns error? {\n         return ();\n     }\n \n+    # Binds a service to `file:Listener`.\n+    # \n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - (), or else error upon failure to attach to the service", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDkxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644910", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Stops listening to the directory and detaches service from the `file:Listener`.\n          \n          \n            \n                # Stops listening to the directory and detaches the service from the `file:Listener`.", "author": "praneesha", "createdAt": "2020-04-15T07:45:34Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener \n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    public function __gracefulStop() returns error? {\n+    # Gracefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n+        public function __gracefulStop() returns error? {\n         return ();\n     }\n \n+    # Forecefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n     public function __immediateStop() returns error? {\n         return ();\n     }\n \n+    # Binds a service to `file:Listener`.\n+    # \n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - (), or else error upon failure to attach to the service\n     public function __attach(service s, string? name = ()) returns error? {\n         return register(self, s, name);\n     }\n \n+    # Stops listening to the directory and detaches service from the `file:Listener`.", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY0NDk5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22606#discussion_r408644998", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - (), or else error upon failure to detach to the service\n          \n          \n            \n                # + return - () or else error upon failure to detach to the service\n          \n      \n    \n    \n  \n\nDo we need to specify the error?", "author": "praneesha", "createdAt": "2020-04-15T07:45:42Z", "path": "stdlib/file/src/main/ballerina/src/file/service_endpoint.bal", "diffHunk": "@@ -35,22 +38,40 @@ public type Listener object {\n         }\n     }\n \n+    # Starts the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to start the listener \n     public function __start() returns error? {\n         return start(self);\n     }\n \n-    public function __gracefulStop() returns error? {\n+    # Gracefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n+        public function __gracefulStop() returns error? {\n         return ();\n     }\n \n+    # Forecefully stops the `file:Listener`.\n+    # \n+    # + return - (), or else error upon failure to stop the listener \n     public function __immediateStop() returns error? {\n         return ();\n     }\n \n+    # Binds a service to `file:Listener`.\n+    # \n+    # + s - Type descriptor of the service\n+    # + name - Name of the service\n+    # + return - (), or else error upon failure to attach to the service\n     public function __attach(service s, string? name = ()) returns error? {\n         return register(self, s, name);\n     }\n \n+    # Stops listening to the directory and detaches service from the `file:Listener`.\n+    # \n+    # + s - Type descriptor of the service\n+    # + return - (), or else error upon failure to detach to the service", "originalCommit": "62db2b8c76e0e5541a07a51a1e99dca10fb184a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1dc1cfe65423a1d89e9fad96f14555e952538af3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1dc1cfe65423a1d89e9fad96f14555e952538af3", "message": "Apply suggestions from code review\n\nCo-Authored-By: praneesha <praneesha@wso2.com>", "committedDate": "2020-04-15T14:44:26Z", "type": "commit"}, {"oid": "dba6e942f0d70df6187ba472afa654d200deffc0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dba6e942f0d70df6187ba472afa654d200deffc0", "message": "Improve error description", "committedDate": "2020-04-15T14:54:48Z", "type": "commit"}]}