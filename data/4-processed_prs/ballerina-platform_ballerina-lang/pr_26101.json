{"pr_number": 26101, "pr_title": "Add support to import predeclared langlibs manually for testable packages", "pr_createdAt": "2020-09-25T10:21:52Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101", "timeline": [{"oid": "3468fe1d608ada3b9770b17b4c1f86ee053f2714", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3468fe1d608ada3b9770b17b4c1f86ee053f2714", "message": "Avoid resolving alias in root level for testable pkgs", "committedDate": "2020-09-25T09:36:00Z", "type": "commit"}, {"oid": "f116f296c640ba36b7af9e7281cae544d65402a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f116f296c640ba36b7af9e7281cae544d65402a1", "message": "Add testerina tests for predeclared imports", "committedDate": "2020-09-25T10:37:08Z", "type": "commit"}, {"oid": "f116f296c640ba36b7af9e7281cae544d65402a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f116f296c640ba36b7af9e7281cae544d65402a1", "message": "Add testerina tests for predeclared imports", "committedDate": "2020-09-25T10:37:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1MzYxMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r497253613", "bodyText": "Can we check if the node kind of env.node is NodeKind.PACKAGE and then check\n((BLangPackage) node).flagSet.contains(Flag.TESTABLE) instead?", "author": "MaryamZi", "createdAt": "2020-09-30T05:38:13Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolResolver.java", "diffHunk": "@@ -415,7 +416,7 @@ public BSymbol resolvePrefixSymbol(SymbolEnv env, Name pkgAlias, Name compUnit)\n             entry = entry.next;\n         }\n \n-        if (env.enclEnv != null) {\n+        if (env.enclEnv != null && !(env.node instanceof BLangTestablePackage)) {", "originalCommit": "f116f296c640ba36b7af9e7281cae544d65402a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0OTA4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r501449089", "bodyText": "Removed this check with new logic.", "author": "chiranSachintha", "createdAt": "2020-10-08T05:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI1MzYxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNzYxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r497307616", "bodyText": "Shall we also add a negative test for duplicate imports of langlib modules that have been predeclared?", "author": "MaryamZi", "createdAt": "2020-09-30T07:46:40Z", "path": "tests/testerina-integration-test/src/test/resources/project-based-tests/predeclared-import-tests/src/importTests/tests/imports-tests.bal", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/test;\n+import ballerina/lang.'float;\n+import ballerina/lang.'int;", "originalCommit": "f116f296c640ba36b7af9e7281cae544d65402a1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ0OTE5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r501449190", "bodyText": "Done.", "author": "chiranSachintha", "createdAt": "2020-10-08T05:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMwNzYxNg=="}], "type": "inlineReview"}, {"oid": "47eeda14817707e49fcd4170312a5121390de0fd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/47eeda14817707e49fcd4170312a5121390de0fd", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into issue-25990", "committedDate": "2020-10-07T18:20:59Z", "type": "commit"}, {"oid": "16e2744d772b47bc58607e5e8351fc950c9d764f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16e2744d772b47bc58607e5e8351fc950c9d764f", "message": "Define predeclared imports compilation unit wise", "committedDate": "2020-10-08T04:45:15Z", "type": "commit"}, {"oid": "1b7c2340c7c11ecf9d38fc63a380217121886d53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b7c2340c7c11ecf9d38fc63a380217121886d53", "message": "Fix review suggestions", "committedDate": "2020-10-08T04:58:12Z", "type": "commit"}, {"oid": "1b7c2340c7c11ecf9d38fc63a380217121886d53", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b7c2340c7c11ecf9d38fc63a380217121886d53", "message": "Fix review suggestions", "committedDate": "2020-10-08T04:58:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0OTIzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r501749236", "bodyText": "We don't have to do this if the user has an import with this alias, right? Shall we move these two lines to L820?", "author": "MaryamZi", "createdAt": "2020-10-08T14:06:40Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,23 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {\n+                BPackageSymbol symbol = duplicatePackagSymbol(predeclaredModules.get(alias));\n+                symbol.compUnit = new Name(compUnit.name);", "originalCommit": "1b7c2340c7c11ecf9d38fc63a380217121886d53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODYxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r503678619", "bodyText": "Let's try moving this out to a method and calling it only where necessary.", "author": "MaryamZi", "createdAt": "2020-10-13T05:39:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0OTIzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3OTIzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505179231", "bodyText": "Done.", "author": "chiranSachintha", "createdAt": "2020-10-15T05:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc0OTIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDg5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r501750895", "bodyText": "How about changing this to something like\n                if (entry == NOT_FOUND_ENTRY) {\n                    this.env.scope.define(alias, symbol);\n                    continue;\n                }\n\n                while (entry.next != NOT_FOUND_ENTRY) {\n                    entry = entry.next;\n                }\n                entry.next = new ScopeEntry(symbol, NOT_FOUND_ENTRY);", "author": "MaryamZi", "createdAt": "2020-10-08T14:08:47Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,23 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {\n+                BPackageSymbol symbol = duplicatePackagSymbol(predeclaredModules.get(alias));\n+                symbol.compUnit = new Name(compUnit.name);\n+                ScopeEntry entry = this.env.scope.lookup(alias);\n+                if (entry == NOT_FOUND_ENTRY) {\n+                    this.env.scope.define(alias, symbol);\n+                } else {\n+                    while (entry.next != NOT_FOUND_ENTRY) {\n+                        entry = entry.next;\n+                    }\n+                    entry.next = new ScopeEntry(symbol, NOT_FOUND_ENTRY);\n                 }\n-                entry.next = new ScopeEntry(predeclaredModules.get(alias), NOT_FOUND_ENTRY);", "originalCommit": "1b7c2340c7c11ecf9d38fc63a380217121886d53", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzNjQwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505236402", "bodyText": "Refactor initPredeclaredModules function as mentioned in #26101 (comment)", "author": "chiranSachintha", "createdAt": "2020-10-15T07:03:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc1MDg5NQ=="}], "type": "inlineReview"}, {"oid": "ada5f3692609067e3003518212949c2e891ae313", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ada5f3692609067e3003518212949c2e891ae313", "message": "Refactor `initPredeclaredModules` function", "committedDate": "2020-10-10T13:20:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODQ3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r503678472", "bodyText": "@chiranSachintha, shall we check if we can switch the loops as discussed during the call?", "author": "MaryamZi", "createdAt": "2020-10-13T05:39:04Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -809,18 +807,33 @@ public void visit(BLangImportPackage importPkgNode) {\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n-        for (Name alias : predeclaredModules.keySet()) {\n-            ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n-                while (entry.next != NOT_FOUND_ENTRY) {\n-                    entry = entry.next;\n+        for (BLangCompilationUnit compUnit : compUnits) {\n+            for (Name alias : predeclaredModules.keySet()) {", "originalCommit": "ada5f3692609067e3003518212949c2e891ae313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4MzgzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505183831", "bodyText": "We can switch two loops but still, we need to check whether alias is defined or not after the first iteration. So do we need to switch these two loops?", "author": "chiranSachintha", "createdAt": "2020-10-15T06:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE4ODQ2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505188467", "bodyText": "What about doing something like\n        for (Name alias : predeclaredModules.keySet()) {\n            int index = 0;\n            ScopeEntry entry = this.env.scope.lookup(alias);\n            if (entry == NOT_FOUND_ENTRY) {\n                this.env.scope.define(alias, dupPackageSymbolAndSetCompUnit(predeclaredModules.get(alias),\n                            new Name(compUnits.get(index++).name)));\n            }\n            for (int i = index; i < compUnits.size(); i++) {\n                boolean isUndefinedModule = true;\n                ...... \n            } \n        }", "author": "MaryamZi", "createdAt": "2020-10-15T06:13:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTIzMzEzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505233135", "bodyText": "Changed.", "author": "chiranSachintha", "createdAt": "2020-10-15T07:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3ODQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3OTIzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r503679232", "bodyText": "Missing the @since annotation.", "author": "MaryamZi", "createdAt": "2020-10-13T05:41:31Z", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/ImportTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Test class to test predeclared langlibs using a ballerina project.", "originalCommit": "ada5f3692609067e3003518212949c2e891ae313", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE3ODg4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505178882", "bodyText": "Done.", "author": "chiranSachintha", "createdAt": "2020-10-15T05:48:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY3OTIzMg=="}], "type": "inlineReview"}, {"oid": "0065adf92e2ed872f128aa2fa15abb2a339a573f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0065adf92e2ed872f128aa2fa15abb2a339a573f", "message": "Refactor `duplicatePackagSymbol` function", "committedDate": "2020-10-15T05:47:58Z", "type": "commit"}, {"oid": "c96b7b191a699b6b4b93e612dac1c889388ba8ca", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c96b7b191a699b6b4b93e612dac1c889388ba8ca", "message": "Refactor `initPredeclaredModules` function", "committedDate": "2020-10-15T06:55:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3NDg5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r505374894", "bodyText": "Needs to come after the description.", "author": "MaryamZi", "createdAt": "2020-10-15T09:02:00Z", "path": "tests/testerina-integration-test/src/test/java/org/ballerinalang/testerina/test/ImportTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.ballerinalang.testerina.test;\n+\n+import org.ballerinalang.test.context.BMainInstance;\n+import org.ballerinalang.test.context.BallerinaTestException;\n+import org.ballerinalang.test.context.LogLeecher;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * @since Swan Lake", "originalCommit": "c96b7b191a699b6b4b93e612dac1c889388ba8ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODAyNTgzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r508025838", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-10-19T19:58:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM3NDg5NA=="}], "type": "inlineReview"}, {"oid": "21742dace76a0a19c596f5fd2ac8805e1d835130", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21742dace76a0a19c596f5fd2ac8805e1d835130", "message": "Fix review suggestions", "committedDate": "2020-10-19T19:58:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwMzI3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r508203272", "bodyText": "Shall we extract compUnits.get(i).name out to a variable?", "author": "MaryamZi", "createdAt": "2020-10-20T04:33:48Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/SymbolEnter.java", "diffHunk": "@@ -802,25 +800,40 @@ public void visit(BLangImportPackage importPkgNode) {\n \n         // get a copy of the package symbol, add compilation unit info to it,\n         // and define it in the current package scope\n-        BPackageSymbol symbol = duplicatePackagSymbol(pkgSymbol);\n-        symbol.compUnit = names.fromIdNode(importPkgNode.compUnit);\n+        BPackageSymbol symbol = dupPackageSymbolAndSetCompUnit(pkgSymbol, names.fromIdNode(importPkgNode.compUnit));\n         symbol.scope = pkgSymbol.scope;\n         importPkgNode.symbol = symbol;\n         this.env.scope.define(pkgAlias, symbol);\n     }\n \n-    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules, SymbolEnv env) {\n+    public void initPredeclaredModules(Map<Name, BPackageSymbol> predeclaredModules,\n+                                       List<BLangCompilationUnit> compUnits, SymbolEnv env) {\n         SymbolEnv prevEnv = this.env;\n         this.env = env;\n         for (Name alias : predeclaredModules.keySet()) {\n+            int index = 0;\n             ScopeEntry entry = this.env.scope.lookup(alias);\n-            if (entry == NOT_FOUND_ENTRY) {\n-                this.env.scope.define(alias, predeclaredModules.get(alias));\n-            } else {\n+            if (entry == NOT_FOUND_ENTRY && !compUnits.isEmpty()) {\n+                this.env.scope.define(alias, dupPackageSymbolAndSetCompUnit(predeclaredModules.get(alias),\n+                        new Name(compUnits.get(index++).name)));\n+                entry = this.env.scope.lookup(alias);\n+            }\n+            for (int i = index; i < compUnits.size(); i++) {\n+                boolean isUndefinedModule = true;\n+                if (((BPackageSymbol) entry.symbol).compUnit.value.equals(compUnits.get(i).name)) {", "originalCommit": "21742dace76a0a19c596f5fd2ac8805e1d835130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwNzg2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26101#discussion_r508207862", "bodyText": "Fixed.", "author": "chiranSachintha", "createdAt": "2020-10-20T04:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwMzI3Mg=="}], "type": "inlineReview"}, {"oid": "adc644debff7b0628deb4a357180c5fee6623f97", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/adc644debff7b0628deb4a357180c5fee6623f97", "message": "Fix review suggestions", "committedDate": "2020-10-20T04:50:43Z", "type": "commit"}]}