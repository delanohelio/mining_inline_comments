{"pr_number": 21488, "pr_title": "Add remove and removeIfHasKey methods for both records and maps.", "pr_createdAt": "2020-03-05T06:30:23Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488", "timeline": [{"oid": "10b00f2b3b89764b46f7ca900e32671d15e0545c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/10b00f2b3b89764b46f7ca900e32671d15e0545c", "message": "Add support to perform remove method on Records.", "committedDate": "2020-03-03T08:05:24Z", "type": "commit"}, {"oid": "fda499eeb2669e186640a0ec7e80def848b80bb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fda499eeb2669e186640a0ec7e80def848b80bb0", "message": "Fix checkstyle errors", "committedDate": "2020-03-03T08:05:24Z", "type": "commit"}, {"oid": "cd0742f532160186957e66cf271dd42c6ecada1c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd0742f532160186957e66cf271dd42c6ecada1c", "message": "Fix lang-lib test", "committedDate": "2020-03-03T08:05:24Z", "type": "commit"}, {"oid": "f64be35ef944589d1d2a15e2d2fbe272cd008594", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f64be35ef944589d1d2a15e2d2fbe272cd008594", "message": "Add review changes", "committedDate": "2020-03-03T08:05:24Z", "type": "commit"}, {"oid": "9decf6b445289f34e33d19a0d6e257678814f966", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9decf6b445289f34e33d19a0d6e257678814f966", "message": "Support remove all for records", "committedDate": "2020-03-03T08:05:24Z", "type": "commit"}, {"oid": "41075a5ceb308c4b6fade83cffb54561098774af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41075a5ceb308c4b6fade83cffb54561098774af", "message": "Checkstyle Fixes", "committedDate": "2020-03-03T08:05:24Z", "type": "commit"}, {"oid": "7be4ee789a05bc89d3c11e8f815910bc9ca4f225", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7be4ee789a05bc89d3c11e8f815910bc9ca4f225", "message": "Add support to perform remove method on Records.", "committedDate": "2020-03-04T05:45:44Z", "type": "commit"}, {"oid": "99bc83c2048f5b422c210381cf3c781226d806cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/99bc83c2048f5b422c210381cf3c781226d806cb", "message": "Fix checkstyle errors", "committedDate": "2020-03-04T05:45:44Z", "type": "commit"}, {"oid": "a3ebfc6a7fe5eb49d5e5049458093d024cf1d580", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a3ebfc6a7fe5eb49d5e5049458093d024cf1d580", "message": "Fix lang-lib test", "committedDate": "2020-03-04T05:45:44Z", "type": "commit"}, {"oid": "dd097d8cd83dfa767130fe5d306d81a6c45e9394", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dd097d8cd83dfa767130fe5d306d81a6c45e9394", "message": "Add review changes", "committedDate": "2020-03-04T05:45:44Z", "type": "commit"}, {"oid": "70984181180b1f9045e5eef2fe4ae3dd0dd6add3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70984181180b1f9045e5eef2fe4ae3dd0dd6add3", "message": "Support remove all for records", "committedDate": "2020-03-04T05:45:44Z", "type": "commit"}, {"oid": "73dcf851a35b704b74bba1bd27163973bbca9404", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73dcf851a35b704b74bba1bd27163973bbca9404", "message": "Checkstyle Fixes", "committedDate": "2020-03-04T05:45:44Z", "type": "commit"}, {"oid": "30e27bd1022abae00fe54770b758f037ca59da38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30e27bd1022abae00fe54770b758f037ca59da38", "message": "Add changes to java backend", "committedDate": "2020-03-04T08:04:24Z", "type": "commit"}, {"oid": "6d2c1cd051425269edeb73959b641b1a27ef8e76", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d2c1cd051425269edeb73959b641b1a27ef8e76", "message": "Merge branch 'remove-impl' of https://github.com/ballerina-platform/ballerina-lang into remove-impl", "committedDate": "2020-03-04T08:08:54Z", "type": "commit"}, {"oid": "de4749c94638e4e2bcb88743a968beb164beda47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/de4749c94638e4e2bcb88743a968beb164beda47", "message": "Checkstyle Fix", "committedDate": "2020-03-04T10:07:34Z", "type": "commit"}, {"oid": "c1fa41c73011f31af3ca444ba6e979604b45bbcf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1fa41c73011f31af3ca444ba6e979604b45bbcf", "message": "Merge pull request #21471 from dulvinw/remove-impl\n\nAdd changes related to remove implementation of records", "committedDate": "2020-03-05T05:25:05Z", "type": "commit"}, {"oid": "04fec55142654310bb492463e38836d6e61ca3e9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04fec55142654310bb492463e38836d6e61ca3e9", "message": "Add removeIfHasKey to map", "committedDate": "2020-03-05T05:28:59Z", "type": "commit"}, {"oid": "252c3bee4a939a7cc4f1ff29c11f153403a42d1b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/252c3bee4a939a7cc4f1ff29c11f153403a42d1b", "message": "fix failing language server completion tests", "committedDate": "2020-03-05T05:28:59Z", "type": "commit"}, {"oid": "fb38104f721152fe1e0e41c65d9018f439b792a1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fb38104f721152fe1e0e41c65d9018f439b792a1", "message": "Add support for record", "committedDate": "2020-03-05T05:28:59Z", "type": "commit"}, {"oid": "ee20a950d44acfc12ff41f7e0e0b0eed38780044", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee20a950d44acfc12ff41f7e0e0b0eed38780044", "message": "Add tests for records", "committedDate": "2020-03-05T05:28:59Z", "type": "commit"}, {"oid": "54c5692fdb6bf6524133277af4a8719f4849b68d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/54c5692fdb6bf6524133277af4a8719f4849b68d", "message": "Add tests to langlib tests", "committedDate": "2020-03-05T05:28:59Z", "type": "commit"}, {"oid": "ba0698bc170af433b86279e2b832b9d00ea03b45", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba0698bc170af433b86279e2b832b9d00ea03b45", "message": "Add method to a constant", "committedDate": "2020-03-05T05:30:07Z", "type": "commit"}, {"oid": "d4e37c48a93b5180457f28553839536c1261de06", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d4e37c48a93b5180457f28553839536c1261de06", "message": "Merge pull request #21459 from KavinduZoysa/issue-21235-dup\n\nAdd removeIfHasKey", "committedDate": "2020-03-05T06:27:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNDM5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388134398", "bodyText": "Shall we do these assertions in Ballerina itself?", "author": "MaryamZi", "createdAt": "2020-03-05T08:14:33Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/ClosedRecordTest.java", "diffHunk": "@@ -323,4 +323,28 @@ public void testInvalidExprsAsRecordLiteralKeys() {\n         BAssertUtil.validateError(result, index++, \"undefined field 'z' in record 'Foo'\", 46, 48);\n         Assert.assertEquals(result.getErrorCount(), index);\n     }\n+\n+    @Test\n+    public void testOptionalRecordRemove() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");\n+\n+        Assert.assertTrue(((BBoolean) returns[0]).booleanValue());", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzOTU1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388239552", "bodyText": "Will do", "author": "dulvinw", "createdAt": "2020-03-05T11:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNDM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTAwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388135008", "bodyText": "These tests also can be written in Ballerina right? Using trap?", "author": "MaryamZi", "createdAt": "2020-03-05T08:16:09Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/RecordRemoveNegativeTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.ballerinalang.test.record;\n+\n+import org.ballerinalang.model.values.BValue;\n+import org.ballerinalang.test.util.BCompileUtil;\n+import org.ballerinalang.test.util.BRunUtil;\n+import org.ballerinalang.test.util.CompileResult;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Negative Test cases for removing required fields in records.\n+ */\n+public class RecordRemoveNegativeTest {\n+\n+    CompileResult result;\n+\n+    @BeforeClass\n+    public void setup() {\n+        result = BCompileUtil.compile(\"test-src/record/negative/record_field_remove.bal\");\n+    }\n+\n+    @Test(expectedExceptions = RuntimeException.class,\n+            expectedExceptionsMessageRegExp = \".*error: \\\\{ballerina/lang.map\\\\}OperationNotSupported.*\")\n+    public void testOpenRecordRequiredFieldRemove() {\n+        BValue[] returns = BRunUtil.invoke(result, \"removeRequiredOpen\");", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzNTE2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388235162", "bodyText": "Will fix", "author": "dulvinw", "createdAt": "2020-03-05T11:28:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTAwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTQ5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388135491", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     error err = error(\"Returned value should be nil.\");\n          \n          \n            \n                     panic err;\n          \n          \n            \n                     panic error(\"Returned value should be nil.\");", "author": "MaryamZi", "createdAt": "2020-03-05T08:17:26Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/closed_record.bal", "diffHunk": "@@ -301,3 +301,86 @@ function addStringToMapValue(string s) returns string {\n     mapValue = mapValue + s;\n     return mapValue;\n }\n+\n+type FooRecord record {|\n+    string a;\n+    int b?;\n+    int...;\n+|};\n+\n+function removeOptional() returns boolean {\n+    FooRecord fooRecord = {a : \"a\", b : 1};\n+    _ = fooRecord.remove(\"b\");\n+    int? testValue = fooRecord?.b;\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+function removeRest() returns boolean {\n+    FooRecord fooRecord = { a: \"a\", b : 1, \"c\" : 10};\n+    _ = fooRecord.remove(\"c\");\n+    anydata testValue = fooRecord[\"c\"];\n+    if (testValue is ()) {\n+        return true;\n+    } else {\n+        return false;\n+    }\n+}\n+\n+type Student record {|\n+    int id;\n+    string name?;\n+    Grades...;\n+|};\n+\n+type Grades record {|\n+    int maths;\n+    int physics;\n+\n+    int...;\n+|};\n+\n+function removeIfHasKeyOptional() {\n+    Student s = {id : 1, name : \"Andrew\"};\n+    string? n = <string?> s.removeIfHasKey(\"name\");\n+    if (n is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    if (<string>n !== \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;\n+    }\n+\n+    var age = s.removeIfHasKey(\"age\");\n+    if !(age is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;\n+    }\n+}\n+\n+function removeIfHasKeyRest() {\n+    Grades g1 = {maths: 80, physics:75};\n+    Student s = {id : 1, name : \"Andrew\", \"grade\": g1};\n+    Grades? g2 = <Grades?> s.removeIfHasKey(\"grade\");\n+    if (g2 is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+\n+    Grades g3 = <Grades>g2;\n+    if !(g3.maths == g1.maths && g3.physics == g1.physics) {\n+         error err = error(\"Returned value should be identical with expected value.\");\n+         panic err;\n+    }\n+\n+    var g4 = s.removeIfHasKey(\"grade\");\n+    if !(g4 is ()) {\n+         error err = error(\"Returned value should be nil.\");\n+         panic err;", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MjM5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388182391", "bodyText": "@KavinduZoysa can you please check.", "author": "dulvinw", "createdAt": "2020-03-05T09:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTQ5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDIwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810207", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-03-06T09:56:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNTQ5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNjkxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388136911", "bodyText": "Do we need a separate method for this?", "author": "MaryamZi", "createdAt": "2020-03-05T08:20:52Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MTM4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388181381", "bodyText": "Nope. Will refactor", "author": "dulvinw", "createdAt": "2020-03-05T09:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzEwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137105", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isValid = checkField(m, k);\n          \n          \n            \n                            if (!isValid) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (!m.containsKey(k)) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }", "author": "MaryamZi", "createdAt": "2020-03-05T08:21:24Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MTE4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388181184", "bodyText": "+1 will fix", "author": "dulvinw", "createdAt": "2020-03-05T09:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzEwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzQwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137406", "bodyText": "Shall we rename this to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static boolean checkForRequiredFields(BRecordType type, String k) {\n          \n          \n            \n                private static boolean isRequiredField(BRecordType type, String k) {", "author": "MaryamZi", "createdAt": "2020-03-05T08:22:07Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDY1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388180655", "bodyText": "+1 will fix", "author": "dulvinw", "createdAt": "2020-03-05T09:45:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzc4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388137783", "bodyText": "Assuming we rename,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n          \n          \n            \n                            if (isRequired) {\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, k)) {", "author": "MaryamZi", "createdAt": "2020-03-05T08:22:58Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDUwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388180506", "bodyText": "Will Fix", "author": "dulvinw", "createdAt": "2020-03-05T09:45:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODEzNzc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MDg2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388140867", "bodyText": "Shall we check by tag and also return early if not a record type?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (type instanceof BRecordType) {\n          \n          \n            \n                    if (type.tag != TypeTags.RECORD_TYPE_TAG) {\n          \n          \n            \n                            return;\n          \n          \n            \n                    }", "author": "MaryamZi", "createdAt": "2020-03-05T08:30:05Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type instanceof BRecordType) {", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDM5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388180395", "bodyText": "Will Fix", "author": "dulvinw", "createdAt": "2020-03-05T09:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MDg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MTIxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388141218", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            boolean isRequired = checkForRequiredFields((BRecordType) type, key);\n          \n          \n            \n                            if (isRequired) {\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, key)) {", "author": "MaryamZi", "createdAt": "2020-03-05T08:30:55Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean checkField(MapValue<?, ?> m, String k) {\n+        return m.containsKey(k);\n+    }\n+\n+    private static boolean checkForRequiredFields(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type instanceof BRecordType) {\n+            Map<String, BField> fields = ((BRecordType) type).getFields();\n+            for (String key : fields.keySet()) {\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, key);\n+                if (isRequired) {", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDMyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388180329", "bodyText": "Will Fix", "author": "dulvinw", "createdAt": "2020-03-05T09:45:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MTIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MjIwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388142200", "bodyText": "Should we add more info to say it failed since it is a required field?", "author": "MaryamZi", "createdAt": "2020-03-05T08:33:11Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,59 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                boolean isValid = checkField(m, k);\n+                if (!isValid) {\n+                    return;\n+                }\n+                boolean isRequired = checkForRequiredFields((BRecordType) type, k);\n+                if (isRequired) {\n+                    throw createOpNotSupportedError(type, op);", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3Njk2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388176961", "bodyText": "+1 will add", "author": "dulvinw", "createdAt": "2020-03-05T09:39:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MjIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzQ2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388143466", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     error err = error(\"Returned value should equals 'Andrew'.\");\n          \n          \n            \n                     panic err;\n          \n          \n            \n                     panic error(\"Returned value should equals 'Andrew'.\");", "author": "MaryamZi", "createdAt": "2020-03-05T08:36:04Z", "path": "langlib/langlib-test/src/test/resources/test-src/maplib_test.bal", "diffHunk": "@@ -39,6 +39,25 @@ function testRemoveAll() returns map<string> {\n     return countriesDup;\n }\n \n+function testRemoveIfHasKey() {\n+    map<string> student = {id:\"1\", name:\"Andrew\", country:\"Sri Lanka\", city:\"Colombo\"};\n+    string? s = student.removeIfHasKey(\"name\");\n+    if (s is ()) {\n+         error err = error(\"Returned value should be an string.\");\n+         panic err;\n+    }\n+    if (<string> s != \"Andrew\") {\n+         error err = error(\"Returned value should equals 'Andrew'.\");\n+         panic err;", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3Njg3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388176871", "bodyText": "@KavinduZoysa can you check this? :)", "author": "dulvinw", "createdAt": "2020-03-05T09:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzQ2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDM2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810364", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-03-06T09:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzQ2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODUzOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388148539", "bodyText": "This could happen for records too right?", "author": "MaryamZi", "createdAt": "2020-03-05T08:46:32Z", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/RemoveIfHasKey.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.ballerinalang.langlib.map;\n+\n+import org.ballerinalang.jvm.BallerinaErrors;\n+import org.ballerinalang.jvm.scheduling.Strand;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.model.types.TypeKind;\n+import org.ballerinalang.natives.annotations.Argument;\n+import org.ballerinalang.natives.annotations.BallerinaFunction;\n+import org.ballerinalang.natives.annotations.ReturnType;\n+import org.wso2.ballerinalang.compiler.util.Constants;\n+\n+import static org.ballerinalang.jvm.MapUtils.checkIsMapOnlyOperation;\n+import static org.ballerinalang.jvm.MapUtils.checkValidFieldForRecord;\n+\n+/**\n+ * Extern function to remove element from the map if key exists.\n+ * ballerina.model.map:removeIfHasKey(string)\n+ *\n+ * @since 1.2.0\n+ */\n+@BallerinaFunction(\n+        orgName = \"ballerina\", packageName = \"lang.map\", functionName = \"removeIfHasKey\",\n+        args = {@Argument(name = \"m\", type = TypeKind.MAP), @Argument(name = \"k\", type = TypeKind.STRING)},\n+        returnType = {@ReturnType(type = TypeKind.ANY)},\n+        isPublic = true\n+)\n+public class RemoveIfHasKey {\n+\n+    public static Object removeIfHasKey(Strand strand, MapValue<?, ?> m, String k) {\n+        String op = Constants.REMOVE_IF_HAS_KEY;\n+\n+        checkIsMapOnlyOperation(m.getType(), op);\n+        checkValidFieldForRecord(m, k, op);\n+        try {\n+            return m.remove(k);\n+        } catch (org.ballerinalang.jvm.util.exceptions.BLangFreezeException e) {\n+            throw BallerinaErrors.createError(e.getMessage(),\n+                    \"Failed to remove element from map: \" + e.getDetail());", "originalCommit": "d4e37c48a93b5180457f28553839536c1261de06", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3Nzk5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388177990", "bodyText": "@KavinduZoysa Can you please check :)", "author": "dulvinw", "createdAt": "2020-03-05T09:41:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODUzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDQ2MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810461", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-03-06T09:56:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODUzOQ=="}], "type": "inlineReview"}, {"oid": "b485f541a5241682c95ab8b382055bc4ee958766", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b485f541a5241682c95ab8b382055bc4ee958766", "message": "Review suggestions", "committedDate": "2020-03-05T11:01:13Z", "type": "commit"}, {"oid": "24a955f4ae9fefc1fd169d702af4abf09b8d70f1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24a955f4ae9fefc1fd169d702af4abf09b8d70f1", "message": "Fix review suggestions", "committedDate": "2020-03-05T11:41:07Z", "type": "commit"}, {"oid": "75790dbe0e4204caf614c67898769fa6469be3e7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/75790dbe0e4204caf614c67898769fa6469be3e7", "message": "Refactor open record tests", "committedDate": "2020-03-05T11:53:46Z", "type": "commit"}, {"oid": "e7d80bd417655d274778fd6af994f5ecb8812774", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7d80bd417655d274778fd6af994f5ecb8812774", "message": "Merge pull request #21498 from dulvinw/remove-impl\n\nFix review suggestions for remove method implementation in temp-branch", "committedDate": "2020-03-05T11:56:22Z", "type": "commit"}, {"oid": "3b60bc7a35de076f2acc63c066ffd1064f29bcb9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3b60bc7a35de076f2acc63c066ffd1064f29bcb9", "message": "Revert unwanted bal changes", "committedDate": "2020-03-05T14:40:40Z", "type": "commit"}, {"oid": "ff5837a3bfc6c4189224da865a6bb23796aeadbb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff5837a3bfc6c4189224da865a6bb23796aeadbb", "message": "Merge pull request #21503 from dulvinw/remove-impl\n\nRevert unwanted bal changes in the remove-impl branch", "committedDate": "2020-03-05T14:46:44Z", "type": "commit"}, {"oid": "3ed811e38a0b563bebfd57b7567c071025771908", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3ed811e38a0b563bebfd57b7567c071025771908", "message": "sync with master", "committedDate": "2020-03-06T03:39:44Z", "type": "commit"}, {"oid": "7baf6a03305175049a23ba163127a317d29d76b4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7baf6a03305175049a23ba163127a317d29d76b4", "message": "fix failing tests", "committedDate": "2020-03-06T03:51:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDUyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388710529", "bodyText": "Is this for the use of remove methods? If so, shall we make the error message specific? Something like below:\nfailed to remove field: 'foo' is a required field in 'FooRec'", "author": "pubudu91", "createdAt": "2020-03-06T04:42:41Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {\n+        if (type.getTag() != TypeTags.RECORD_TYPE_TAG) {\n+            return;\n+        }\n+        Map<String, BField> fields = ((BRecordType) type).getFields();\n+        for (String key : fields.keySet()) {\n+            if (isRequiredField((BRecordType) type, key)) {\n+                throw createOpNotSupportedErrorForRecord(type, op);\n+            }\n+        }\n+    }\n+\n+    private static ErrorValue createOpNotSupportedErrorForRecord(BType type, String op) {\n+        return BallerinaErrors.createError(getModulePrefixedReason(MAP_LANG_LIB,\n+                OPERATION_NOT_SUPPORTED_IDENTIFIER),\n+                format(\"%s not supported on type '%s' since there are required fields.\", op, type.getQualifiedName()));", "originalCommit": "ff5837a3bfc6c4189224da865a6bb23796aeadbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MzU4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388773581", "bodyText": "+1, I think we should mention the specific field when an attempt to remove a single field fails.", "author": "MaryamZi", "createdAt": "2020-03-06T08:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTQ2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251462", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T11:31:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxMDUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTIzMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715233", "bodyText": "Since we are checking if this particular type is a type param, shall we rename this method to isTypeParam()? Check the isTypeParam() method in TypeParamAnalyzer", "author": "pubudu91", "createdAt": "2020-03-06T05:07:30Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/model/types/BUnionType.java", "diffHunk": "@@ -217,9 +218,16 @@ public boolean isPureType() {\n \n     private static LinkedHashSet<BType> toFlatTypeSet(LinkedHashSet<BType> types) {\n         return types.stream()\n-                .flatMap(type -> type.tag == TypeTags.UNION ?\n+                .flatMap(type -> type.tag == TypeTags.UNION && !isTypeParamAvailable(type) ?\n                         ((BUnionType) type).memberTypes.stream() : Stream.of(type))\n                 .collect(Collectors.toCollection(LinkedHashSet::new));\n     }\n \n+    private static boolean isTypeParamAvailable(BType type) {", "originalCommit": "ff5837a3bfc6c4189224da865a6bb23796aeadbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDYwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810609", "bodyText": "Changed", "author": "KavinduZoysa", "createdAt": "2020-03-06T09:57:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTU4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715586", "bodyText": "Can't we define this constant somewhere else? This constant seems like a random constant in this particular class. Even the one above it.", "author": "pubudu91", "createdAt": "2020-03-06T05:09:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/util/Constants.java", "diffHunk": "@@ -47,4 +47,7 @@ private Constants() {\n     public static final int MAX_UNICODE = 0x10FFFF;\n \n     public static final String DESUGARED_MAPPING_CONSTR_KEY = \"$mapping$var$\";\n+\n+    public static final String REMOVE_IF_HAS_KEY = \"removeIfHasKey()\";", "originalCommit": "ff5837a3bfc6c4189224da865a6bb23796aeadbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODgxMDg4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388810887", "bodyText": "Changed.", "author": "KavinduZoysa", "createdAt": "2020-03-06T09:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTU4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTk2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388715966", "bodyText": "Shall we make this a static constant?", "author": "pubudu91", "createdAt": "2020-03-06T05:10:52Z", "path": "langlib/lang.map/src/main/java/org/ballerinalang/langlib/map/Remove.java", "diffHunk": "@@ -42,13 +44,17 @@\n public class Remove {\n \n     public static Object remove(Strand strand, MapValue<?, ?> m, String k) {\n-        checkIsMapOnlyOperation(m.getType(), \"remove()\");\n+        BType type = m.getType();\n+        String op = \"remove()\";", "originalCommit": "ff5837a3bfc6c4189224da865a6bb23796aeadbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTUyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251528", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T11:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcxNTk2Ng=="}], "type": "inlineReview"}, {"oid": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/05dcb928886d4997bf3867af5387970e4cf8dbd9", "message": "Merge pull request #21504 from nadeeshaan/remove-impl-local\n\nResolve conflicts and fix failing tests", "committedDate": "2020-03-06T08:27:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388772467", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BType type = m.getType();\n          \n          \n            \n                    switch (type.getTag()) {\n          \n          \n            \n                        case TypeTags.RECORD_TYPE_TAG:\n          \n          \n            \n                            if (!m.containsKey(k)) {\n          \n          \n            \n                                return;\n          \n          \n            \n                            }\n          \n          \n            \n                            if (isRequiredField((BRecordType) type, k)) {\n          \n          \n            \n                                throw createOpNotSupportedErrorForRecord(type, op);\n          \n          \n            \n                            }\n          \n          \n            \n                            return;\n          \n          \n            \n                        default:\n          \n          \n            \n                            return;\n          \n          \n            \n                    }\n          \n          \n            \n                    if (m.getType().getTag() != TypeTags.RECORD_TYPE_TAG) {\n          \n          \n            \n                        return;        \n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (!m.containsKey(k)) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n                    \n          \n          \n            \n                    if (isRequiredField((BRecordType) type, k)) {\n          \n          \n            \n                        throw createOpNotSupportedErrorForRecord(type, op);\n          \n          \n            \n                    }", "author": "MaryamZi", "createdAt": "2020-03-06T08:37:13Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }", "originalCommit": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTEwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390091105", "bodyText": "The only check we need here is the following right, since we aren't doing anything for the other cases.\nif (type.getTag() == TypeTags.RECORD_TYPE_TAG && isRequiredField((BRecordType) type, k)) {\n    throw createOpNotSupportedErrorForRecord(type, op);\n}", "author": "pubudu91", "createdAt": "2020-03-10T04:35:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5ODIxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390098211", "bodyText": "Yeah, let's update since m.containsKey(k) will be true anyway for a required field.", "author": "MaryamZi", "createdAt": "2020-03-10T05:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTY0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251643", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T11:32:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3MjQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3Mjc0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388772742", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }\n          \n          \n            \n                    return false;\n          \n          \n            \n                    return field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED);", "author": "MaryamZi", "createdAt": "2020-03-06T08:37:52Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;", "originalCommit": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzIzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390253237", "bodyText": "fixed", "author": "dulvinw", "createdAt": "2020-03-10T11:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc3Mjc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTQ0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388781448", "bodyText": "Shall we make this a switch instead?", "author": "MaryamZi", "createdAt": "2020-03-06T08:58:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/bir/codegen/JvmValueGen.java", "diffHunk": "@@ -997,19 +999,89 @@ private void createRecordRemoveMethod(ClassWriter cw) {\n             mv.visitEnd();\n         }\n \n-        private void createRecordClearMethod(ClassWriter cw) {\n+        private void createRecordClearMethod(ClassWriter cw, List<BField> fields, String className) {\n             // throw an UnsupportedOperationException, since remove is not supported by for records.\n             MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"remove\", String.format(\"(L%s;)L%s;\", OBJECT, OBJECT),\n                     String.format(\"(L%s;)TV;\", OBJECT), null);\n             mv.visitCode();\n-            mv.visitTypeInsn(NEW, UNSUPPORTED_OPERATION_EXCEPTION);\n-            mv.visitInsn(DUP);\n-            mv.visitMethodInsn(INVOKESPECIAL, UNSUPPORTED_OPERATION_EXCEPTION, \"<init>\", \"()V\", false);\n-            mv.visitInsn(ATHROW);\n+\n+            int fieldNameRegIndex = 1;\n+            int strKeyVarIndex = 2;\n+\n+            // cast key to java.lang.String\n+            mv.visitVarInsn(ALOAD, fieldNameRegIndex);\n+            mv.visitTypeInsn(CHECKCAST, STRING_VALUE);\n+            mv.visitVarInsn(ASTORE, strKeyVarIndex);\n+\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitMethodInsn(INVOKESPECIAL, MAP_VALUE_IMPL, \"validateFreezeStatus\", \"()V\", false);\n+\n+            // sort the fields before generating switch case\n+            @Nilable List<BField> sortedFields = new ArrayList<>(fields);\n+            sortedFields.sort(NAME_HASH_COMPARATOR);\n+\n+            Label defaultCaseLabel = new Label();\n+            List<Label> labels = createLabelsForSwitch(mv, strKeyVarIndex, sortedFields, defaultCaseLabel);\n+            List<Label> targetLabels = createLabelsForEqualCheck(mv, strKeyVarIndex, sortedFields, labels,\n+                    defaultCaseLabel);\n+\n+            int i = 0;\n+            for (BField optionalField : sortedFields) {\n+                BField field = getObjectField(optionalField);\n+                Label targetLabel = targetLabels.get(i);\n+                mv.visitLabel(targetLabel);\n+\n+                //Setting isPresent as zero\n+                if (this.isOptionalRecordField(field)) {\n+                    String fieldName = field.name.value;\n+                    mv.visitVarInsn(ALOAD, 0);\n+                    mv.visitInsn(ICONST_0);\n+                    mv.visitFieldInsn(PUTFIELD, className, this.getFieldIsPresentFlagName(fieldName),\n+                            getTypeDesc(symbolTable.booleanType, false));\n+\n+                    // load the existing value to return\n+                    mv.visitVarInsn(ALOAD, 0);\n+                    mv.visitFieldInsn(GETFIELD, className, fieldName, getTypeDesc(field.type, false));\n+                    addBoxInsn(mv, field.type);\n+\n+                    // Set default value for reference types\n+                    if (checkIfValueIsJReferenceType(field.type)) {\n+                        mv.visitVarInsn(ALOAD, 0);\n+                        mv.visitInsn(ACONST_NULL);\n+                        mv.visitFieldInsn(PUTFIELD, className, fieldName, getTypeDesc(field.type, false));\n+                    }\n+\n+                    mv.visitInsn(ARETURN);\n+                } else {\n+                    mv.visitTypeInsn(NEW, UNSUPPORTED_OPERATION_EXCEPTION);\n+                    mv.visitInsn(DUP);\n+                    mv.visitMethodInsn(INVOKESPECIAL, UNSUPPORTED_OPERATION_EXCEPTION, \"<init>\", \"()V\", false);\n+                    mv.visitInsn(ATHROW);\n+                }\n+                i += 1;\n+            }\n+\n+            // default case\n+            mv.visitLabel(defaultCaseLabel);\n+            mv.visitVarInsn(ALOAD, 0);\n+            mv.visitVarInsn(ALOAD, strKeyVarIndex);\n+            mv.visitMethodInsn(INVOKESPECIAL, MAP_VALUE_IMPL, \"remove\",\n+                    String.format(\"(L%s;)L%s;\", OBJECT, OBJECT), false);\n+            mv.visitInsn(ARETURN);\n+\n             mv.visitMaxs(0, 0);\n             mv.visitEnd();\n         }\n \n+        private boolean checkIfValueIsJReferenceType(BType bType) {\n+            if ((bType.getKind() == TypeKind.INT) || (bType.getKind() == TypeKind.BOOLEAN) ||", "originalCommit": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MzEwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390253107", "bodyText": "Fixed", "author": "dulvinw", "createdAt": "2020-03-10T11:35:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTQ0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTk2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388781962", "bodyText": "We can ignore the return values in these tests.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");\n          \n          \n            \n                    BRunUtil.invoke(compileResult, \"removeOptional\");", "author": "MaryamZi", "createdAt": "2020-03-06T08:59:06Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/record/OpenRecordTest.java", "diffHunk": "@@ -481,6 +481,26 @@ public void testInvalidExprsAsRecordLiteralKeys() {\n                 \"expected a string literal or an expression\", 28, 26);\n     }\n \n+    @Test\n+    public void testOptionalRecordRemove() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"removeOptional\");", "originalCommit": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTcwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251705", "bodyText": "fixed", "author": "dulvinw", "createdAt": "2020-03-10T11:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MTk2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjE2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388782166", "bodyText": "Can we move these tests to Ballerina?", "author": "MaryamZi", "createdAt": "2020-03-06T08:59:32Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/map/MapAccessExprTest.java", "diffHunk": "@@ -197,4 +197,28 @@ public void testMapRemovePositive() {\n     public void testMapRemoveNegative() {\n         BRunUtil.invoke(compileResult, \"testMapRemoveNegative\");\n     }\n+\n+    @Test(description = \"Test removeIfHasKey if key exists.\")\n+    public void testRemoveIfHasKeyPositive1() {\n+        BValue[] returns = BRunUtil.invoke(compileResult, \"testRemoveIfHasKeyPositive1\");\n+        Assert.assertTrue(((BBoolean) returns[0]).booleanValue(), \"Expected booleans to be identified as equal\");", "originalCommit": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MzI1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390093250", "bodyText": "@KavinduZoysa can you please check", "author": "dulvinw", "createdAt": "2020-03-10T04:46:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjMyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388782321", "bodyText": "We can remove the else block.", "author": "MaryamZi", "createdAt": "2020-03-06T08:59:54Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {\n+    string a;\n+    int b?;\n+};\n+\n+function removeRequiredOpen() {\n+    Foo foo = {a : \"a\", b : 1};\n+    _ = foo.remove(\"a\");\n+}\n+\n+function testRemoveRequiredOpen() {\n+    error? result = trap removeRequiredOpen();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");\n+    }\n+}\n+\n+type Bar record {|\n+    string a;\n+    int b?;\n+|};\n+\n+function removeRequiredClosed() {\n+    Bar bar = {a : \"a\", b : 1};\n+    _ = bar.remove(\"a\");\n+}\n+\n+function testRemoveRequiredClosed() {\n+    error? result = trap removeRequiredClosed();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {", "originalCommit": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTgwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251804", "bodyText": "fixed", "author": "dulvinw", "createdAt": "2020-03-10T11:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4MjMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDYyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r388784624", "bodyText": "Shall we panic with a proper error.\nUse a proper string without spaces, e.g., \"AssertionError\", as the reason and the include a \"message\" field in the detail field with more info.", "author": "MaryamZi", "createdAt": "2020-03-06T09:05:04Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/record/negative/record_field_remove.bal", "diffHunk": "@@ -0,0 +1,53 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+type Foo record {\n+    string a;\n+    int b?;\n+};\n+\n+function removeRequiredOpen() {\n+    Foo foo = {a : \"a\", b : 1};\n+    _ = foo.remove(\"a\");\n+}\n+\n+function testRemoveRequiredOpen() {\n+    error? result = trap removeRequiredOpen();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");\n+    }\n+}\n+\n+type Bar record {|\n+    string a;\n+    int b?;\n+|};\n+\n+function removeRequiredClosed() {\n+    Bar bar = {a : \"a\", b : 1};\n+    _ = bar.remove(\"a\");\n+}\n+\n+function testRemoveRequiredClosed() {\n+    error? result = trap removeRequiredClosed();\n+    if ((result is error) && (result.reason() == \"{ballerina/lang.map}OperationNotSupported\")) {\n+        return;\n+    } else {\n+        panic error(\"Wrong Result\");", "originalCommit": "05dcb928886d4997bf3867af5387970e4cf8dbd9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1MTkwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390251909", "bodyText": "fixed", "author": "dulvinw", "createdAt": "2020-03-10T11:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc4NDYyNA=="}], "type": "inlineReview"}, {"oid": "b1bd01fffb3fd3e8e70ea65a25504d2f02998151", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1bd01fffb3fd3e8e70ea65a25504d2f02998151", "message": "Change the test cases", "committedDate": "2020-03-06T09:41:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTc4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390091784", "bodyText": "This method is doing the same thing as the checkValidFieldForRecord() method right? Shall we get rid of one of these? Also simplify the logic as well", "author": "pubudu91", "createdAt": "2020-03-10T04:38:50Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/MapUtils.java", "diffHunk": "@@ -148,9 +151,53 @@ public static void checkIsMapOnlyOperation(BType mapType, String op) {\n         switch (mapType.getTag()) {\n             case TypeTags.MAP_TAG:\n             case TypeTags.JSON_TAG:\n+            case TypeTags.RECORD_TYPE_TAG:\n                 return;\n             default:\n                 throw createOpNotSupportedError(mapType, op);\n         }\n     }\n+\n+    public static void checkValidFieldForRecord(MapValue<?, ?> m, String  k, String  op) {\n+        BType type = m.getType();\n+        switch (type.getTag()) {\n+            case TypeTags.RECORD_TYPE_TAG:\n+                if (!m.containsKey(k)) {\n+                    return;\n+                }\n+                if (isRequiredField((BRecordType) type, k)) {\n+                    throw createOpNotSupportedErrorForRecord(type, op);\n+                }\n+                return;\n+            default:\n+                return;\n+        }\n+    }\n+\n+    private static boolean isRequiredField(BRecordType type, String k) {\n+        Map<String, BField> fields = type.getFields();\n+        BField field = fields.get(k);\n+        if (field != null && Flags.isFlagOn(field.flags, Flags.REQUIRED)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    public static void validateRecord(BType type, String op) {", "originalCommit": "b1bd01fffb3fd3e8e70ea65a25504d2f02998151", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI1Mjc5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/21488#discussion_r390252791", "bodyText": "This method validates on all the fields of the RecordType for RemoveAll implementation", "author": "dulvinw", "createdAt": "2020-03-10T11:34:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5MTc4NA=="}], "type": "inlineReview"}, {"oid": "554460400c3a192b00fd91cc8ecad72bca6a1a1e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/554460400c3a192b00fd91cc8ecad72bca6a1a1e", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into remove-impl", "committedDate": "2020-03-10T06:08:45Z", "type": "commit"}, {"oid": "413853fd8c7332021d7f1642c9dc255a9a8f78a6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/413853fd8c7332021d7f1642c9dc255a9a8f78a6", "message": "Fix review suggestions", "committedDate": "2020-03-10T06:10:26Z", "type": "commit"}, {"oid": "33665df621fc75bdb68ecb7685f8ebca1954ac51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/33665df621fc75bdb68ecb7685f8ebca1954ac51", "message": "Merge branch 'remove-impl' of https://github.com/ballerina-platform/ballerina-lang into remove-impl", "committedDate": "2020-03-10T06:15:58Z", "type": "commit"}, {"oid": "cdb961927ecb22a2ff2b786fbfe079327babdbb2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cdb961927ecb22a2ff2b786fbfe079327babdbb2", "message": "Fix review suggestions", "committedDate": "2020-03-10T09:58:05Z", "type": "commit"}, {"oid": "b00fbffe298a364785472790455a11f6541becad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b00fbffe298a364785472790455a11f6541becad", "message": "Merge pull request #21583 from dulvinw/remove-impl\n\nRemove impl review suggestions fix for temp branch", "committedDate": "2020-03-10T11:31:22Z", "type": "commit"}, {"oid": "fd87672605747037cb921107a88029cb36d3cf6e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd87672605747037cb921107a88029cb36d3cf6e", "message": "Merge branch 'master' into remove-impl", "committedDate": "2020-03-10T19:31:25Z", "type": "commit"}]}