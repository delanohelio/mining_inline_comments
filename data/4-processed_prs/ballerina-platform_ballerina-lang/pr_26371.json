{"pr_number": 26371, "pr_title": "Support cyclic union types", "pr_createdAt": "2020-10-15T15:20:09Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MDc0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557840743", "bodyText": "Shall we introduce a separate method checkFillerValue method for BUnionType instead? We have several other similar methods too.", "author": "MaryamZi", "createdAt": "2021-01-15T03:30:27Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/TypeChecker.java", "diffHunk": "@@ -2862,44 +2875,49 @@ private static boolean hasFillerValue(Type type, List<Type> unanalyzedTypes) {\n                 BTupleType tupleType = (BTupleType) type;\n                 return tupleType.getTupleTypes().stream().allMatch(TypeChecker::hasFillerValue);\n             case TypeTags.UNION_TAG:\n-                return checkFillerValue((BUnionType) type);\n+                return checkFillerValue((BUnionType) type, unanalyzedTypes);\n             default:\n                 return false;\n         }\n     }\n \n-    private static boolean checkFillerValue(BUnionType type) {\n-        // NIL is a member.\n-        if (type.isNullable()) {\n-            return true;\n-        }\n-        // All members are of same type.\n-        Iterator<Type> iterator = type.getMemberTypes().iterator();\n-        Type firstMember;\n-        for (firstMember = iterator.next(); iterator.hasNext(); ) {\n-            if (!isSameType(firstMember, iterator.next())) {\n-                return false;\n-            }\n-        }\n-        // Control reaching this point means there is only one type in the union.\n-        return isValueType(firstMember) && hasFillerValue(firstMember);\n-    }\n+    private static boolean checkFillerValue(BType type, List<Type> unAnalyzedTypes) {", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MjgzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557842835", "bodyText": "Can we do this change now or should we create an issue?", "author": "MaryamZi", "createdAt": "2021-01-15T03:39:02Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BUnionType.java", "diffHunk": "@@ -53,21 +64,219 @@ public BUnionType() {\n         this.readonly = false;\n     }\n \n+    /**\n+     * Create a {@code BUnionType} which represents the union type.\n+     *\n+     * @param memberTypes of the union type\n+     * @param typeFlags flags associated with the type\n+     */\n+    public BUnionType(List<Type> memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic,\n+                      Set<Type> unresolvedTypes) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n     public BUnionType(List<Type> memberTypes) {\n         this(memberTypes, false);\n     }\n \n+    public BUnionType(List<Type> memberTypes, String typeName, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(typeName, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.isCyclic = isCyclic;\n+        setMemberTypes(memberTypes);\n+        this.typeName = typeName;\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, List<Type> memberTypes) {\n+        super(typeName, pkg, Object.class);\n+        this.readonly = false;\n+        setMemberTypes(memberTypes);\n+    }\n+\n     public BUnionType(List<Type> memberTypes, boolean readonly) {\n-        this(memberTypes, 0, readonly);\n-        boolean nilable = false;\n-        boolean isAnydata = true;\n-        boolean isPureType = true;\n+        this(memberTypes, 0, readonly, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, boolean readonly, boolean isCyclic, Set<Type> unresolvedTypes) {\n+        this(memberTypes, 0, readonly, isCyclic, unresolvedTypes);\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, boolean readonly, Class<? extends Object> valueClass) {\n+        super(typeName, pkg, valueClass);\n+        this.readonly = readonly;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), typeFlags, readonly, isCyclic);\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = new ArrayList<>(2);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     */\n+    public BUnionType(BUnionType unionType) {\n+        super(unionType.typeName, unionType.pkg, unionType.valueClass);\n+        this.typeFlags = unionType.typeFlags;\n+        this.readonly = unionType.readonly;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     * @param typeName typename associated with the type\n+     */\n+    public BUnionType(BUnionType unionType, String typeName) {\n+        super(typeName, unionType.pkg, unionType.valueClass);\n+        this.readonly = unionType.readonly;\n+        this.typeFlags = unionType.typeFlags;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param name typename\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(name, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = null;\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), name, typeFlags, readonly, isCyclic);\n+    }\n+\n+    public void setMemberTypes(Type[] members) {\n+        if (members == null) {\n+            return;\n+        }\n+        this.memberTypes = readonly ? getReadOnlyTypes(members) : Arrays.asList(members);\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, new HashSet<>(members.size())) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members, Set<Type> unresolvedTypes) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, unresolvedTypes) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setCyclic(boolean isCyclic) {\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public boolean isNilable() {\n+        if (memberTypes == null || memberTypes.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (this.resolving) {\n+            return false;\n+        }\n+\n+        // TODO: use the flag", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1NTYxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557855615", "bodyText": "This is an existing TODO note. Let's create an issue.", "author": "KRVPerera", "createdAt": "2021-01-15T04:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MjgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0Mjk0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557842941", "bodyText": "Shall we avoid single character variable names?", "author": "MaryamZi", "createdAt": "2021-01-15T03:39:35Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/types/BUnionType.java", "diffHunk": "@@ -53,21 +64,219 @@ public BUnionType() {\n         this.readonly = false;\n     }\n \n+    /**\n+     * Create a {@code BUnionType} which represents the union type.\n+     *\n+     * @param memberTypes of the union type\n+     * @param typeFlags flags associated with the type\n+     */\n+    public BUnionType(List<Type> memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, int typeFlags, boolean readonly,  boolean isCyclic,\n+                      Set<Type> unresolvedTypes) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        setMemberTypes(memberTypes);\n+        this.isCyclic = isCyclic;\n+    }\n+\n     public BUnionType(List<Type> memberTypes) {\n         this(memberTypes, false);\n     }\n \n+    public BUnionType(List<Type> memberTypes, String typeName, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(typeName, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.isCyclic = isCyclic;\n+        setMemberTypes(memberTypes);\n+        this.typeName = typeName;\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, List<Type> memberTypes) {\n+        super(typeName, pkg, Object.class);\n+        this.readonly = false;\n+        setMemberTypes(memberTypes);\n+    }\n+\n     public BUnionType(List<Type> memberTypes, boolean readonly) {\n-        this(memberTypes, 0, readonly);\n-        boolean nilable = false;\n-        boolean isAnydata = true;\n-        boolean isPureType = true;\n+        this(memberTypes, 0, readonly, false);\n+    }\n+\n+    public BUnionType(List<Type> memberTypes, boolean readonly, boolean isCyclic, Set<Type> unresolvedTypes) {\n+        this(memberTypes, 0, readonly, isCyclic, unresolvedTypes);\n+    }\n+\n+    public BUnionType(String typeName, Module pkg, boolean readonly, Class<? extends Object> valueClass) {\n+        super(typeName, pkg, valueClass);\n+        this.readonly = readonly;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), typeFlags, readonly, isCyclic);\n+    }\n+\n+    public BUnionType(Type[] memberTypes, int typeFlags) {\n+        this(memberTypes, typeFlags, false, false);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(null, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = new ArrayList<>(2);\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     */\n+    public BUnionType(BUnionType unionType) {\n+        super(unionType.typeName, unionType.pkg, unionType.valueClass);\n+        this.typeFlags = unionType.typeFlags;\n+        this.readonly = unionType.readonly;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param unionType flags associated with the type\n+     * @param typeName typename associated with the type\n+     */\n+    public BUnionType(BUnionType unionType, String typeName) {\n+        super(typeName, unionType.pkg, unionType.valueClass);\n+        this.readonly = unionType.readonly;\n+        this.typeFlags = unionType.typeFlags;\n+        this.memberTypes = new ArrayList<>(unionType.memberTypes.size());\n+        this.mergeUnionType(unionType);\n+    }\n+\n+    /**\n+     * Constructor used when defining union type defs where cyclic reference is possible.\n+     *\n+     * @param name typename\n+     * @param typeFlags flags associated with the type\n+     * @param readonly boolean represents if the type is readonly\n+     * @param isCyclic boolean represents if the type is cyclic\n+     */\n+    public BUnionType(String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        super(name, null, Object.class);\n+        this.typeFlags = typeFlags;\n+        this.readonly = readonly;\n+        this.memberTypes = null;\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public BUnionType(Type[] memberTypes, String name, int typeFlags, boolean readonly, boolean isCyclic) {\n+        this(Arrays.asList(memberTypes), name, typeFlags, readonly, isCyclic);\n+    }\n+\n+    public void setMemberTypes(Type[] members) {\n+        if (members == null) {\n+            return;\n+        }\n+        this.memberTypes = readonly ? getReadOnlyTypes(members) : Arrays.asList(members);\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, new HashSet<>(members.size())) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setMemberTypes(List<Type> members, Set<Type> unresolvedTypes) {\n+        if (members == null) {\n+            return;\n+        }\n+        if (members.isEmpty()) {\n+            this.memberTypes = members;\n+            return;\n+        }\n+        this.resolvingReadonly = true;\n+        this.memberTypes = readonly ? getReadOnlyTypes(members, unresolvedTypes) : members;\n+        this.resolvingReadonly = false;\n+        setFlagsBasedOnMembers();\n+    }\n+\n+    public void setCyclic(boolean isCyclic) {\n+        this.isCyclic = isCyclic;\n+    }\n+\n+    public boolean isNilable() {\n+        if (memberTypes == null || memberTypes.isEmpty()) {\n+            return true;\n+        }\n+\n+        if (this.resolving) {\n+            return false;\n+        }\n+\n+        // TODO: use the flag\n+        if (nullable == null) {\n+            nullable = checkNillable(memberTypes);\n+        }\n+        return nullable;\n+    }\n+\n+    private boolean checkNillable(List<Type> memberTypes) {\n+        this.resolving = true;\n+        for (Type t : memberTypes) {\n+            if (t.isNilable()) {", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzE5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557843192", "bodyText": "Can we remove this?", "author": "MaryamZi", "createdAt": "2021-01-15T03:40:43Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/internal/values/ReadOnlyUtils.java", "diffHunk": "@@ -238,9 +272,15 @@ private static BIntersectionType setImmutableIntersectionType(Type type, Set<Typ\n                 return (BIntersectionType) type.getImmutableType();\n             default:\n                 BUnionType origUnionType = (BUnionType) type;\n+\n+\n                 Type resultantImmutableType;\n \n                 List<Type> readOnlyMemTypes = new ArrayList<>();\n+//                resultantImmutableType = new BUnionType(null, true);\n+//                BUnionType unionImmutableType = (BUnionType) resultantImmutableType;\n+//                unionImmutableType.setMemberTypes(readOnlyMemTypes);\n+//                unionImmutableType.isCyclic = origUnionType.isCyclic;", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzQzNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557843434", "bodyText": "Shall we remove this?", "author": "MaryamZi", "createdAt": "2021-01-15T03:41:54Z", "path": "compiler/ballerina-lang/src/main/java/org/ballerinalang/model/elements/MarkdownDocAttachment.java", "diffHunk": "@@ -32,8 +32,12 @@\n     public List<Parameter> parameters;\n     public String returnValueDescription;\n \n-    public MarkdownDocAttachment() {\n-        this.parameters = new ArrayList<>();\n+//    public MarkdownDocAttachment() {\n+//        this.parameters = new ArrayList<>();\n+//    }", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzcyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557843727", "bodyText": "Why do we need this? Error shouldn't depend on value, right?", "author": "MaryamZi", "createdAt": "2021-01-15T03:43:17Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/CompilerDriver.java", "diffHunk": "@@ -225,7 +231,11 @@ void loadLangModules(List<PackageID> pkgIdList) {\n             symbolTable.langErrorModuleSymbol = pkgLoader.loadPackageSymbol(ERROR, null, null);\n         }\n \n-        symResolver.reloadIntRangeType();\n+        if (langLib.equals(ERROR)) {\n+            symbolTable.langValueModuleSymbol = pkgLoader.loadPackageSymbol(VALUE, null, null);", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzkwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557843908", "bodyText": "Missing licence header. Please check other new files too.", "author": "MaryamZi", "createdAt": "2021-01-15T03:44:08Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "diffHunk": "@@ -0,0 +1,343 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwNTQ0NzQxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r605447412", "bodyText": "These files are still missing license headers", "author": "riyafa", "createdAt": "2021-04-01T07:51:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0MzkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDAyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557844024", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @since slp4\n          \n          \n            \n             * @since 2.0.0\n          \n      \n    \n    \n  \n\nPlease check wherever applicable.", "author": "MaryamZi", "createdAt": "2021-01-15T03:44:32Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "diffHunk": "@@ -0,0 +1,343 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;\n+\n+import org.wso2.ballerinalang.compiler.semantics.model.UniqueTypeVisitor;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnnotationType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnyType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnydataType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BBuiltInRefType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFiniteType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFutureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BHandleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntersectionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BJSONType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BMapType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNeverType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNoType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BPackageType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BParameterizedType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStreamType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStructureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTypedescType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLType;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+import java.util.HashSet;\n+\n+/**\n+ * IsAnydataUniqueVisitor to check if a type is anydata.\n+ *\n+ * This is introduced to handle cyclic unions.\n+ * @since slp4", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDE1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557844150", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean isanydata(BType type) {\n          \n          \n            \n                private boolean isAnydata(BType type) {", "author": "MaryamZi", "createdAt": "2021-01-15T03:45:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/IsAnydataUniqueVisitor.java", "diffHunk": "@@ -0,0 +1,343 @@\n+package org.wso2.ballerinalang.compiler.semantics.analyzer;\n+\n+import org.wso2.ballerinalang.compiler.semantics.model.UniqueTypeVisitor;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnnotationType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnyType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BAnydataType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BArrayType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BBuiltInRefType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BErrorType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BField;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFiniteType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BFutureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BHandleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BIntersectionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BInvokableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BJSONType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BMapType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNeverType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNilType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BNoType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BObjectType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BPackageType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BParameterizedType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BRecordType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStreamType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BStructureType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTableType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTupleType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BTypedescType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BUnionType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLSubType;\n+import org.wso2.ballerinalang.compiler.semantics.model.types.BXMLType;\n+import org.wso2.ballerinalang.compiler.tree.expressions.BLangExpression;\n+import org.wso2.ballerinalang.compiler.util.TypeTags;\n+\n+import java.util.HashSet;\n+\n+/**\n+ * IsAnydataUniqueVisitor to check if a type is anydata.\n+ *\n+ * This is introduced to handle cyclic unions.\n+ * @since slp4\n+ */\n+public class IsAnydataUniqueVisitor implements UniqueTypeVisitor<Boolean> {\n+\n+    private HashSet<BType> visited;\n+    private boolean isAnydata;\n+\n+    public IsAnydataUniqueVisitor() {\n+        visited = new HashSet<>();\n+        isAnydata = true;\n+    }\n+\n+    public IsAnydataUniqueVisitor(HashSet<BType> visited) {\n+        this.visited = visited;\n+        isAnydata = true;\n+    }\n+\n+    private boolean isanydata(BType type) {", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDU2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557844566", "bodyText": "Why are we commenting these out? These are valid errors, right?", "author": "MaryamZi", "createdAt": "2021-01-15T03:46:34Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/expressions/builtinoperations/CloneOperationTest.java", "diffHunk": "@@ -317,11 +317,11 @@ public void testCloneMap() {\n \n     @Test\n     public void testCloneNegative() {\n-        Assert.assertEquals(negativeResult.getErrorCount(), 3);\n+        Assert.assertEquals(negativeResult.getErrorCount(), 1);\n         BAssertUtil.validateError(negativeResult, 0, \"too many arguments in call to 'clone()'\", 19, 13);\n-        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n-                                  24, 23);\n-        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);\n+//        BAssertUtil.validateError(negativeResult, 1, \"incompatible types: expected 'anydata', found 'typedesc<int>'\",\n+//                                  24, 23);\n+//        BAssertUtil.validateError(negativeResult, 2, \"incompatible types: expected 'anydata', found 'error'\", 29, 15);", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1ODY2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557858666", "bodyText": "Since Cloneable support readonly we support type we support typedesc and error as selectively immutable basic types. These are not errors now right ?", "author": "KRVPerera", "createdAt": "2021-01-15T04:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MDgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557860829", "bodyText": "Ah yes, my bad. Forgot we were changing the param type for these methods.", "author": "MaryamZi", "createdAt": "2021-01-15T04:52:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDU2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MjAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557862027", "bodyText": "We should remove these though. Instead of commenting them out.", "author": "MaryamZi", "createdAt": "2021-01-15T04:57:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NDU2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NTMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557845300", "bodyText": "Unnecessary changes?", "author": "MaryamZi", "createdAt": "2021-01-15T03:49:12Z", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -456,7 +456,8 @@ public class Entity {\n     #\n     # + return - All header names as a `string[]`\n     public function getHeaderNames() returns @tainted string[] {\n-        return self.headerNames.clone();\n+        return <string[]>self.headerNames.clone();", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3OTAxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557879014", "bodyText": "reverted", "author": "KRVPerera", "createdAt": "2021-01-15T06:00:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NTMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NTYyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557845625", "bodyText": "This too is a valid error?", "author": "MaryamZi", "createdAt": "2021-01-15T03:50:30Z", "path": "langlib/langlib-test/src/test/java/org/ballerinalang/langlib/test/TypeParamTest.java", "diffHunk": "@@ -40,8 +40,6 @@ public void testTypeParamNegative() {\n         CompileResult result = BCompileUtil.compile(\"test-src/type-param/type_param_test_negative.bal\");\n         int err = 0;\n         BAssertUtil.validateError(result, err++, \"incompatible types: expected 'boolean[]', found 'int[]'\", 21, 20);\n-        BAssertUtil.validateError(result, err++, \"incompatible types: expected 'anydata', found 'function (string) \" +", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1MzQ5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557853490", "bodyText": "readonly support \"function\" type right. readonly being part of Cloneable shouldn't we support it now.", "author": "KRVPerera", "createdAt": "2021-01-15T04:21:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NTYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NjEyNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557846125", "bodyText": "There's a duplicate Cloneable definition in the spec for the error module.\nhttps://github.com/ballerina-platform/ballerina-spec/blob/master/lang/lib/error.bal#L21", "author": "MaryamZi", "createdAt": "2021-01-15T03:52:54Z", "path": "langlib/lang.error/src/main/ballerina/error.bal", "diffHunk": "@@ -15,10 +15,14 @@\n // under the License.\n \n import ballerina/java;\n+import ballerina/lang.'value as value;\n+\n+# The type of value to which `clone` and `cloneReadOnly` can be applied.\n+type __Cloneable1 readonly|xml|__Cloneable1[]|map<__Cloneable1>|table<map<__Cloneable1>>;", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1MjI1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557852250", "bodyText": "Yes, but we cannot create a copy because Cloneable is already defined as a public type. I am getting redefinition errors.", "author": "KRVPerera", "createdAt": "2021-01-15T04:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg0NjEyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MzEzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557863130", "bodyText": "I belive this one and the below one need if condition. if:  has_name == 1", "author": "rdhananjaya", "createdAt": "2021-01-15T05:01:35Z", "path": "docs/bir-spec/src/main/resources/kaitai/bir.ksy", "diffHunk": "@@ -273,6 +273,14 @@ types:\n         type: s4\n   type_union:\n     seq:\n+      - id: is_cyclic\n+        type: u1\n+      - id: has_name\n+        type: s1\n+      - id: pkd_id_cp_index", "originalCommit": "ad374e28da04160638952198c6dab5c6e6e0bca4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "21b98bfb0338955e173d88c5f76a3acb7f0af84b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21b98bfb0338955e173d88c5f76a3acb7f0af84b", "message": "Fix code review suggestion for cyclic unions", "committedDate": "2021-01-15T05:15:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg3ODc5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557878790", "bodyText": "need to cleanup", "author": "KRVPerera", "createdAt": "2021-01-15T05:59:53Z", "path": "stdlib/mime/src/main/ballerina/src/mime/natives.bal", "diffHunk": "@@ -456,7 +456,7 @@ public class Entity {\n     #\n     # + return - All header names as a `string[]`\n     public function getHeaderNames() returns @tainted string[] {\n-        return <string[]>self.headerNames.clone();\n+        return self.headerNames.clone();\n         //return self.headerNames.clone();", "originalCommit": "21b98bfb0338955e173d88c5f76a3acb7f0af84b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f95ad4a1c8e1f41cd7aac00a4f472760ea7d2ee2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f95ad4a1c8e1f41cd7aac00a4f472760ea7d2ee2", "message": "Add table type as anydata type", "committedDate": "2020-12-01T19:03:31Z", "type": "commit"}, {"oid": "a75fd4d5f13467aed20281c48103f4468c61eaf5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a75fd4d5f13467aed20281c48103f4468c61eaf5", "message": "Fix spotbugs issue", "committedDate": "2020-12-01T19:03:49Z", "type": "commit"}, {"oid": "9624a38731d1764cdc04c0d30893ccd55ab45427", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9624a38731d1764cdc04c0d30893ccd55ab45427", "message": "Fix LangLibFunctionTests", "committedDate": "2020-12-01T19:04:14Z", "type": "commit"}, {"oid": "13d967d1449f1b89eab1ec4a8152ac8b50588cb0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/13d967d1449f1b89eab1ec4a8152ac8b50588cb0", "message": "Fix AnnotationDeclarationTest", "committedDate": "2020-12-01T19:25:45Z", "type": "commit"}, {"oid": "5522464480a56a7788fed69dd3fa7e1181dd9c44", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5522464480a56a7788fed69dd3fa7e1181dd9c44", "message": "Fix copying builting anydata type", "committedDate": "2020-12-01T20:44:19Z", "type": "commit"}, {"oid": "5fd012fd3b567caaf1834c8c02af57c523205b51", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5fd012fd3b567caaf1834c8c02af57c523205b51", "message": "Add package data to cyclic unions", "committedDate": "2020-12-02T10:58:19Z", "type": "commit"}, {"oid": "1ec33a7e1722cf22f7d46fd05dbd2e77aad0c9c0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1ec33a7e1722cf22f7d46fd05dbd2e77aad0c9c0", "message": "Fix intersection assignability", "committedDate": "2020-12-03T05:15:11Z", "type": "commit"}, {"oid": "04e487c7534dd82f342e592df6bc653a4f8d369a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/04e487c7534dd82f342e592df6bc653a4f8d369a", "message": "Fix ambiguous type '(anydata|map<anydata>)'", "committedDate": "2020-12-03T06:05:22Z", "type": "commit"}, {"oid": "6cad58704f4a038cf11e7120d54debfa1c21f965", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6cad58704f4a038cf11e7120d54debfa1c21f965", "message": "Fix intersection type double ignoring of fields", "committedDate": "2020-12-03T07:11:24Z", "type": "commit"}, {"oid": "d858a9db282441c0fc18dd231d4ff424610ae776", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d858a9db282441c0fc18dd231d4ff424610ae776", "message": "Fix isAnydata mapping constraints", "committedDate": "2020-12-03T07:48:25Z", "type": "commit"}, {"oid": "b1510dd68e30c48478036f3f7132869538130c83", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1510dd68e30c48478036f3f7132869538130c83", "message": "Fix identifying Types without names as equal", "committedDate": "2020-12-04T20:52:21Z", "type": "commit"}, {"oid": "bbeb306e864675a5747426f2e27e526ce4811eae", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bbeb306e864675a5747426f2e27e526ce4811eae", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-12-07T21:45:45Z", "type": "commit"}, {"oid": "094117aa2bb924221ca2e88ec38dde85c4104d69", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/094117aa2bb924221ca2e88ec38dde85c4104d69", "message": "Resolve conflict with master", "committedDate": "2020-12-07T21:46:35Z", "type": "commit"}, {"oid": "40937954c9d43a352e8725d73703cfcbd361998a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40937954c9d43a352e8725d73703cfcbd361998a", "message": "Resolve conflict with master", "committedDate": "2020-12-07T22:02:14Z", "type": "commit"}, {"oid": "6a6e8964c5c346fae375b1dbcbc3589072ff84ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6a6e8964c5c346fae375b1dbcbc3589072ff84ee", "message": "Fix table type emitting", "committedDate": "2020-12-07T22:14:58Z", "type": "commit"}, {"oid": "6584f872cce3d35bd585747da50e052497ea4ae3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6584f872cce3d35bd585747da50e052497ea4ae3", "message": "Resolve conflict with master", "committedDate": "2020-12-07T22:22:42Z", "type": "commit"}, {"oid": "4f1b7b7f0d093218b4c0b337f4fbc9f6295b3218", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f1b7b7f0d093218b4c0b337f4fbc9f6295b3218", "message": "Fix import order", "committedDate": "2020-12-07T22:46:52Z", "type": "commit"}, {"oid": "05f7d7bf5454d932a6622d2e929ab29dfd34e37a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/05f7d7bf5454d932a6622d2e929ab29dfd34e37a", "message": "Fix type param issue", "committedDate": "2020-12-10T05:32:01Z", "type": "commit"}, {"oid": "06ff14bf850a04d0e4cfccffa02698a751bb82eb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06ff14bf850a04d0e4cfccffa02698a751bb82eb", "message": "Fix empty union create flags", "committedDate": "2020-12-11T09:11:43Z", "type": "commit"}, {"oid": "95bfe9a61c6f9ec1bf0daabd7f102044c8de99ab", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95bfe9a61c6f9ec1bf0daabd7f102044c8de99ab", "message": "Fix unresolved int range problem", "committedDate": "2020-12-11T10:39:47Z", "type": "commit"}, {"oid": "bb53147eedaf5e034c06f5630cbe2d639d04ebd8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bb53147eedaf5e034c06f5630cbe2d639d04ebd8", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-12-13T11:09:11Z", "type": "commit"}, {"oid": "2baaeff4f8a59ecd1a3434d6145d7e9267bc61fb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2baaeff4f8a59ecd1a3434d6145d7e9267bc61fb", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-12-17T00:34:39Z", "type": "commit"}, {"oid": "73bbdea5ca3d1e9c5ea14db310e40abbddcc1fb5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73bbdea5ca3d1e9c5ea14db310e40abbddcc1fb5", "message": "Define operators in Bootstrap", "committedDate": "2020-12-17T09:00:06Z", "type": "commit"}, {"oid": "db334e51e5c7fece52009ebc09960243192a2fa4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db334e51e5c7fece52009ebc09960243192a2fa4", "message": "Fix assignability of xml subtype to anydata", "committedDate": "2020-12-17T13:31:50Z", "type": "commit"}, {"oid": "cdfb586878c48879f140f37ce65eec88826cd0c5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cdfb586878c48879f140f37ce65eec88826cd0c5", "message": "Fix build issue with lang.object", "committedDate": "2020-12-17T16:53:26Z", "type": "commit"}, {"oid": "4ac77bf3ced32745a86009b1a51375ed8cdc501d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4ac77bf3ced32745a86009b1a51375ed8cdc501d", "message": "Fix import coding style", "committedDate": "2020-12-17T17:07:27Z", "type": "commit"}, {"oid": "ba547b1cc21be945f431316cf6f9051acde186ac", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ba547b1cc21be945f431316cf6f9051acde186ac", "message": "Add readonly as pure type for `==` operator", "committedDate": "2020-12-21T06:57:39Z", "type": "commit"}, {"oid": "c49bbfa8493fae7f8d1b97ff411b8865418be4ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c49bbfa8493fae7f8d1b97ff411b8865418be4ea", "message": "Add cloneable as a predefinded type", "committedDate": "2020-12-21T06:58:15Z", "type": "commit"}, {"oid": "d1a12cbf98d030e0baf6e768bf4ac5c109f40545", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d1a12cbf98d030e0baf6e768bf4ac5c109f40545", "message": "Add cloneable as a predefinded type", "committedDate": "2020-12-21T06:59:10Z", "type": "commit"}, {"oid": "3c31a6729a3323c574796b20a6e8fa438a9489e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3c31a6729a3323c574796b20a6e8fa438a9489e3", "message": "Fix stack over flow issues", "committedDate": "2020-12-21T07:43:59Z", "type": "commit"}, {"oid": "e57c0791cc02060a6919b55639085e53d3279188", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e57c0791cc02060a6919b55639085e53d3279188", "message": "Fix booststrapping of cloneable", "committedDate": "2020-12-21T07:44:25Z", "type": "commit"}, {"oid": "ff3aeff6609910e69a91bf567efb5e14502cc835", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff3aeff6609910e69a91bf567efb5e14502cc835", "message": "Fix test cases for Cloneable", "committedDate": "2020-12-21T07:50:21Z", "type": "commit"}, {"oid": "056a50a30735efb6b5857b0c7dbebad4c78a2d94", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/056a50a30735efb6b5857b0c7dbebad4c78a2d94", "message": "Refactor TypeParamAnalyzer", "committedDate": "2020-12-21T07:51:05Z", "type": "commit"}, {"oid": "8dbde7cffcc5377f66c483a55d7b0593ed48d691", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8dbde7cffcc5377f66c483a55d7b0593ed48d691", "message": "Revert Scope.java changes", "committedDate": "2020-12-21T07:51:34Z", "type": "commit"}, {"oid": "213a189d73489085992d01b5e5bb336c1e25fb4f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/213a189d73489085992d01b5e5bb336c1e25fb4f", "message": "Fix unresolved types for Cloneable", "committedDate": "2020-12-21T07:52:01Z", "type": "commit"}, {"oid": "c854c4a2830bba0591384281382029f7b9026339", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c854c4a2830bba0591384281382029f7b9026339", "message": "Add `json` cloneable to support json.clone()", "committedDate": "2020-12-21T07:52:36Z", "type": "commit"}, {"oid": "69cd6ef1071c0304d77ef37f2fefec81bf430205", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/69cd6ef1071c0304d77ef37f2fefec81bf430205", "message": "Fix test cases for Cloneable", "committedDate": "2020-12-21T07:53:29Z", "type": "commit"}, {"oid": "a36b382ef624fccf10113350743e2253de9733ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a36b382ef624fccf10113350743e2253de9733ed", "message": "Fix AnnotationDeclarationTest to support Cloneable", "committedDate": "2020-12-21T07:58:05Z", "type": "commit"}, {"oid": "0daa9bda7937e2ed3c80a7ad58419ca76279d66e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0daa9bda7937e2ed3c80a7ad58419ca76279d66e", "message": "Add json to Cloneable in SymbolTable", "committedDate": "2020-12-21T07:58:30Z", "type": "commit"}, {"oid": "bceb4d5263f89971b26227625aea91e738680d5e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bceb4d5263f89971b26227625aea91e738680d5e", "message": "Cleanup SymbolResolver", "committedDate": "2020-12-21T07:58:57Z", "type": "commit"}, {"oid": "f1758741b28a3676b2337543158589bd6f0e6432", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f1758741b28a3676b2337543158589bd6f0e6432", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-12-21T08:03:00Z", "type": "commit"}, {"oid": "2732a412f539283a45a565faaf74092001d34731", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2732a412f539283a45a565faaf74092001d34731", "message": "Fix import order code style", "committedDate": "2020-12-21T08:10:19Z", "type": "commit"}, {"oid": "704c8ce206098ffb1bc8cecda4ad6f5081c3e293", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/704c8ce206098ffb1bc8cecda4ad6f5081c3e293", "message": "Fix import order code style", "committedDate": "2020-12-21T08:12:48Z", "type": "commit"}, {"oid": "60a347340ae4a751b0e53bbfefc1d287b15cffce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/60a347340ae4a751b0e53bbfefc1d287b15cffce", "message": "Fix test cases for cloneable", "committedDate": "2020-12-21T10:22:17Z", "type": "commit"}, {"oid": "e75588a137f53521d7283a8b49c3ed48453f5417", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e75588a137f53521d7283a8b49c3ed48453f5417", "message": "Change runtime json type to a union", "committedDate": "2020-12-21T16:58:43Z", "type": "commit"}, {"oid": "79f0c4ed64de00cdad29ec26919fef498805fa9d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79f0c4ed64de00cdad29ec26919fef498805fa9d", "message": "Remove json from Cloneable", "committedDate": "2020-12-21T16:59:07Z", "type": "commit"}, {"oid": "be1c490c3fc22eb6846514ff16ccc27cc22aa226", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/be1c490c3fc22eb6846514ff16ccc27cc22aa226", "message": "Change runtime json, anydata to cyclic unions", "committedDate": "2020-12-22T05:14:10Z", "type": "commit"}, {"oid": "7cb6bf97bdeeb4cb170c50c91a346f937a9f763f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7cb6bf97bdeeb4cb170c50c91a346f937a9f763f", "message": "Fix table type constraint in toString", "committedDate": "2020-12-22T05:14:35Z", "type": "commit"}, {"oid": "9a7bca623d53e9d5df3378b4e8d309b84cf20950", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a7bca623d53e9d5df3378b4e8d309b84cf20950", "message": "Fix coding style", "committedDate": "2020-12-22T05:18:57Z", "type": "commit"}, {"oid": "415bf765ffafbba78fb5d68c90f28c6770d813ba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/415bf765ffafbba78fb5d68c90f28c6770d813ba", "message": "Fix invalid cyclic flag addition to parent union", "committedDate": "2020-12-22T09:47:34Z", "type": "commit"}, {"oid": "972a5268d7ae6e762b750d412ca3a749c25d7f42", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/972a5268d7ae6e762b750d412ca3a749c25d7f42", "message": "Fix union comparison for json type", "committedDate": "2020-12-22T10:20:48Z", "type": "commit"}, {"oid": "5b2241384b32d2996be3ecb4c800f012dc498e96", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b2241384b32d2996be3ecb4c800f012dc498e96", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-12-23T04:58:55Z", "type": "commit"}, {"oid": "6c43e4b52613edbfe1920c312d9da7438628f8d2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6c43e4b52613edbfe1920c312d9da7438628f8d2", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-12-25T06:21:54Z", "type": "commit"}, {"oid": "a13d9084a240345d073c59c728da259d4f255278", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a13d9084a240345d073c59c728da259d4f255278", "message": "Add type name for predefined unions", "committedDate": "2021-01-05T06:04:10Z", "type": "commit"}, {"oid": "e7574ba4031901323ee17f9dcd5faa11586ff286", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e7574ba4031901323ee17f9dcd5faa11586ff286", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2021-01-05T06:05:13Z", "type": "commit"}, {"oid": "b6ae566434b5b49648f8182e1f0dc09e5d7d3019", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b6ae566434b5b49648f8182e1f0dc09e5d7d3019", "message": "Fix NPE", "committedDate": "2021-01-05T09:52:55Z", "type": "commit"}, {"oid": "2be855e6430cb07baa84b1178b1837c5e54545fd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2be855e6430cb07baa84b1178b1837c5e54545fd", "message": "Add duplicate cloneable types", "committedDate": "2021-01-07T05:34:02Z", "type": "commit"}, {"oid": "ffc53976feb2abf313a31f0cbb0c08c0b3fdc4b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ffc53976feb2abf313a31f0cbb0c08c0b3fdc4b5", "message": "Fix test case updates for line numbers", "committedDate": "2021-01-07T06:02:02Z", "type": "commit"}, {"oid": "c6274ef2451edf7c26b2d95313dfc85252caaff7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c6274ef2451edf7c26b2d95313dfc85252caaff7", "message": "Fix object type reference test case", "committedDate": "2021-01-07T06:02:20Z", "type": "commit"}, {"oid": "eddc09a23d24f75ae9b60fc2a70c314244ca54bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eddc09a23d24f75ae9b60fc2a70c314244ca54bc", "message": "Fix object type reference test case and error line", "committedDate": "2021-01-07T06:25:42Z", "type": "commit"}, {"oid": "bc3b289b17f4488b6da721cc1a0dced5f12b1230", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc3b289b17f4488b6da721cc1a0dced5f12b1230", "message": "Fix test case error line numbers", "committedDate": "2021-01-07T06:26:02Z", "type": "commit"}, {"oid": "570617d5f39c9703bcb3d7a314ffc4a6ed0c6782", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/570617d5f39c9703bcb3d7a314ffc4a6ed0c6782", "message": "Fix test case invalid token and words", "committedDate": "2021-01-07T08:03:46Z", "type": "commit"}, {"oid": "6700bcff33f7a0f2fdf8039ac01e898f70dacb0e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6700bcff33f7a0f2fdf8039ac01e898f70dacb0e", "message": "Fix test case cloneable word", "committedDate": "2021-01-07T08:15:09Z", "type": "commit"}, {"oid": "34fd9d6e652a1ba80c18afff22a5e57e4bdad78f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34fd9d6e652a1ba80c18afff22a5e57e4bdad78f", "message": "Fix SO issue in method resolver", "committedDate": "2021-01-07T08:18:59Z", "type": "commit"}, {"oid": "f51be0b58d9c1e5557bbd83ad225ed1147c94a7d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f51be0b58d9c1e5557bbd83ad225ed1147c94a7d", "message": "Fix cyclic types not resolving known types issue", "committedDate": "2021-01-07T08:59:36Z", "type": "commit"}, {"oid": "5ab6195a0c63281b4808ce5641ca2d2e30c9aae0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ab6195a0c63281b4808ce5641ca2d2e30c9aae0", "message": "Fix test cases", "committedDate": "2021-01-07T09:29:21Z", "type": "commit"}, {"oid": "90a8dd170b9edc1657574c5c1fdbd7c811937738", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90a8dd170b9edc1657574c5c1fdbd7c811937738", "message": "Fix test cases", "committedDate": "2021-01-07T09:34:30Z", "type": "commit"}, {"oid": "8585d2a720721a989d4416b116d13f580433dad7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8585d2a720721a989d4416b116d13f580433dad7", "message": "Fix test cases", "committedDate": "2021-01-07T16:58:45Z", "type": "commit"}, {"oid": "77d9c0ebf3610afa172693c2f24697f45dd4095e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/77d9c0ebf3610afa172693c2f24697f45dd4095e", "message": "Merge branch 'master' into cyclic_type_definition_done_right_merge_master", "committedDate": "2021-01-07T20:56:54Z", "type": "commit"}, {"oid": "c042987321a7f5612d2d6cba99145b3781bb2743", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c042987321a7f5612d2d6cba99145b3781bb2743", "message": "Merge BUnionType from master", "committedDate": "2021-01-07T20:57:59Z", "type": "commit"}, {"oid": "8cd672e456a0aec0f5c5230bfd5ce6f390e338dd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8cd672e456a0aec0f5c5230bfd5ce6f390e338dd", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2021-01-07T21:07:32Z", "type": "commit"}, {"oid": "749e57d7d99631cde72814c4fca89736dae8ce78", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/749e57d7d99631cde72814c4fca89736dae8ce78", "message": "Add support for master for cyclic union", "committedDate": "2021-01-07T23:28:20Z", "type": "commit"}, {"oid": "ca534cae69b41a3edff2630d7ad568d2fda4781e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca534cae69b41a3edff2630d7ad568d2fda4781e", "message": "Fix pure type for sub string types", "committedDate": "2021-01-07T23:28:40Z", "type": "commit"}, {"oid": "bcbd09ec5c0489fc09d2c33b44d1650bf2f08110", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bcbd09ec5c0489fc09d2c33b44d1650bf2f08110", "message": "Fix union type flags", "committedDate": "2021-01-08T06:00:09Z", "type": "commit"}, {"oid": "b745ac2fd9d6ee2e4652a044d69e54b72922442e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b745ac2fd9d6ee2e4652a044d69e54b72922442e", "message": "Fix test cases", "committedDate": "2021-01-10T05:17:03Z", "type": "commit"}, {"oid": "b54b0f05395c8ccd795475835322fd18b36c273d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b54b0f05395c8ccd795475835322fd18b36c273d", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2021-01-10T05:22:21Z", "type": "commit"}, {"oid": "06f58721c94dea20195945601dfea2e1738607d9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/06f58721c94dea20195945601dfea2e1738607d9", "message": "Fix cyclic type ambiguity", "committedDate": "2021-01-10T08:21:23Z", "type": "commit"}, {"oid": "bd71562d698dc11e5a754fe4ebd80849a0aa7974", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd71562d698dc11e5a754fe4ebd80849a0aa7974", "message": "Fix ReadOnlyUtils for cyclic unions", "committedDate": "2021-01-10T11:29:24Z", "type": "commit"}, {"oid": "e63ce1e8a012bfa31b437a00706b1418ba033777", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e63ce1e8a012bfa31b437a00706b1418ba033777", "message": "Fix SO in ReadOnlyUtils", "committedDate": "2021-01-11T05:04:54Z", "type": "commit"}, {"oid": "1658b673cb59baca1b47a740c60a14dde98acea3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1658b673cb59baca1b47a740c60a14dde98acea3", "message": "Fix code style", "committedDate": "2021-01-11T05:09:18Z", "type": "commit"}, {"oid": "ea0d25ee0dab54fdd6573bc2850b9349fcb35ae1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ea0d25ee0dab54fdd6573bc2850b9349fcb35ae1", "message": "Fix ExprBodiedFunctionTest error being typeparam", "committedDate": "2021-01-11T06:54:51Z", "type": "commit"}, {"oid": "6e948ab95444d2c2fa2d88f1144e2ee4b08af2c9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e948ab95444d2c2fa2d88f1144e2ee4b08af2c9", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2021-01-11T08:11:38Z", "type": "commit"}, {"oid": "3072965a770f71ee45fa17db13f8131cf199b188", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3072965a770f71ee45fa17db13f8131cf199b188", "message": "Fix VariableReturnTypeTest", "committedDate": "2021-01-11T08:57:42Z", "type": "commit"}, {"oid": "79e37c8c2f36727f389dc11d9ba0c065d6056031", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/79e37c8c2f36727f389dc11d9ba0c065d6056031", "message": "Fix DistinctTypeDefTest", "committedDate": "2021-01-11T09:02:50Z", "type": "commit"}, {"oid": "5d6f2919c61f2a6ba45cf22996140e5262316267", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d6f2919c61f2a6ba45cf22996140e5262316267", "message": "Fix ObjectConstructorTest", "committedDate": "2021-01-11T09:35:04Z", "type": "commit"}, {"oid": "b61bb56b5744fd0ce6b3f918ef8ca45776a25688", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b61bb56b5744fd0ce6b3f918ef8ca45776a25688", "message": "Fix SO in language server", "committedDate": "2021-01-11T11:45:12Z", "type": "commit"}, {"oid": "1b295ce91d068c6d6afee71427186b16ecd63d36", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b295ce91d068c6d6afee71427186b16ecd63d36", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2021-01-11T15:56:21Z", "type": "commit"}, {"oid": "42c764a9348804f26620f2f15eefb12d78965a16", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/42c764a9348804f26620f2f15eefb12d78965a16", "message": "Remove unused import in JvmTypeGen", "committedDate": "2021-01-11T16:11:17Z", "type": "commit"}, {"oid": "0a05d28d0028d2947ca9bf2e3d11763c5b6f4462", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0a05d28d0028d2947ca9bf2e3d11763c5b6f4462", "message": "Refactor Types isAssignableToUnionType method", "committedDate": "2021-01-13T17:53:19Z", "type": "commit"}, {"oid": "733a4242b026e903199d7d773eefe37ce08accbc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/733a4242b026e903199d7d773eefe37ce08accbc", "message": "Fix heap memory out of error", "committedDate": "2021-01-13T17:53:19Z", "type": "commit"}, {"oid": "6f93ca283f4b104ac7dffe3dea6d2f596d7fdb5d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6f93ca283f4b104ac7dffe3dea6d2f596d7fdb5d", "message": "Improve heap/peak heap memory\n\nBArrayState enum only needs capacity 3. BIRPackageSymbolEnter create\nmany collections with extra space. SymbolEnter on some cases initial\ncapacity will reduce memory. GlobalVariableRefAnalyzer improved to\nreturn empty HashSets with capacity 0 on some cases.", "committedDate": "2021-01-13T17:53:19Z", "type": "commit"}, {"oid": "d22fc6f3a27b75ad5a14aab26b7671100aa80872", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d22fc6f3a27b75ad5a14aab26b7671100aa80872", "message": "Add teardown for several test cases", "committedDate": "2021-01-13T17:53:20Z", "type": "forcePushed"}, {"oid": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dea8dded08ea0540c56b3ace710e09bc76c8fbd", "message": "Add teardown for several test cases", "committedDate": "2021-01-13T18:06:09Z", "type": "commit"}, {"oid": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7dea8dded08ea0540c56b3ace710e09bc76c8fbd", "message": "Add teardown for several test cases", "committedDate": "2021-01-13T18:06:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjI2Njg5MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r556266891", "bodyText": "Missing licence header.", "author": "MaryamZi", "createdAt": "2021-01-13T05:13:45Z", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BTableType.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package org.ballerinalang.core.model.types;", "originalCommit": "c8d357a294fab92b861f7c248e2927a970622b01", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwNzIxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r556807219", "bodyText": "Can this.typeName be null when resolving is true? Wouldn't resolving be true only for a cyclic union, which in turn has to have a name?", "author": "MaryamZi", "createdAt": "2021-01-13T20:26:05Z", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BUnionType.java", "diffHunk": "@@ -91,8 +92,27 @@ public int getTag() {\n \n     @Override\n     public String toString() {\n-        List<String> list = memberTypes.stream().map(BType::toString).collect(Collectors.toList());\n-        return String.join(\"|\", list);\n+        String cachedToString;\n+        if (resolving) {\n+            if (this.typeName != null) {\n+                return this.typeName;\n+            } else {\n+                return \"...\";", "originalCommit": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg1NzYyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557857623", "bodyText": "Not necessarily if someone creates one programmatically.", "author": "KRVPerera", "createdAt": "2021-01-15T04:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwNzIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwNzkzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r556807931", "bodyText": "Can toString get called when memberTypes is null?", "author": "MaryamZi", "createdAt": "2021-01-13T20:27:23Z", "path": "bvm/ballerina-core/src/main/java/org/ballerinalang/core/model/types/BUnionType.java", "diffHunk": "@@ -91,8 +92,27 @@ public int getTag() {\n \n     @Override\n     public String toString() {\n-        List<String> list = memberTypes.stream().map(BType::toString).collect(Collectors.toList());\n-        return String.join(\"|\", list);\n+        String cachedToString;\n+        if (resolving) {\n+            if (this.typeName != null) {\n+                return this.typeName;\n+            } else {\n+                return \"...\";\n+            }\n+        }\n+        resolving = true;\n+        StringBuilder sb = new StringBuilder();\n+        int size = memberTypes != null ? memberTypes.size() : 0;", "originalCommit": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2NjM0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557866349", "bodyText": "I have added setMemberTypes which returns if members list is null given to it. But looks like there is no way for this to happen now. But shall we keep this for now. I think if members are empty we don't need to create a member list at runtime. An example is below.\nI would like to create an issue for this. What do you think?\ntype EmptyUnion never|never;\nEmptyUnion x = 3;\nERROR [t2.bal:(2:16,2:17)] incompatible types: expected '', found 'int'", "author": "KRVPerera", "createdAt": "2021-01-15T05:14:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwNzkzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwOTY3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r556809679", "bodyText": "What about table<map<anydata>>?", "author": "MaryamZi", "createdAt": "2021-01-13T20:30:48Z", "path": "bvm/ballerina-runtime/src/main/java/io/ballerina/runtime/api/PredefinedTypes.java", "diffHunk": "@@ -163,17 +159,82 @@\n     public static final IteratorType TYPE_ITERATOR = new BIteratorType(TypeConstants.ITERATOR_TNAME, EMPTY_MODULE);\n     public static final ServiceType TYPE_ANY_SERVICE = new BServiceType(TypeConstants.SERVICE, EMPTY_MODULE, 0);\n     public static final HandleType TYPE_HANDLE = new BHandleType(TypeConstants.HANDLE_TNAME, EMPTY_MODULE);\n-    public static final UnionType ANYDATA_OR_READONLY = new BUnionType(Arrays.asList(TYPE_ANYDATA, TYPE_READONLY));\n-    private static final MapType TYPE_DETAIL = new BMapType(TypeConstants.MAP_TNAME, ANYDATA_OR_READONLY, EMPTY_MODULE);\n-    public static final Type TYPE_ERROR_DETAIL = ReadOnlyUtils.setImmutableTypeAndGetEffectiveType(TYPE_DETAIL);\n-    public static final ErrorType TYPE_ERROR = new BErrorType(TypeConstants.ERROR, EMPTY_MODULE, TYPE_DETAIL);\n+\n+    public static final JsonType TYPE_JSON;\n+    public static final JsonType TYPE_READONLY_JSON;\n+    public static final ArrayType TYPE_JSON_ARRAY;\n+    public static final AnydataType TYPE_ANYDATA;\n+    public static final AnydataType TYPE_READONLY_ANYDATA;\n+    public static final MapType TYPE_DETAIL;\n+    public static final Type TYPE_ERROR_DETAIL;\n+    public static final ErrorType TYPE_ERROR;\n+    public static final BUnionType TYPE_CLONEABLE;\n \n     public static final RecordType STRING_ITR_NEXT_RETURN_TYPE =\n             IteratorUtils.createIteratorNextReturnType(PredefinedTypes.TYPE_STRING);\n     public static final RecordType XML_ITR_NEXT_RETURN_TYPE = IteratorUtils\n             .createIteratorNextReturnType(\n                     new BUnionType(Arrays.asList(PredefinedTypes.TYPE_STRING, PredefinedTypes.TYPE_XML)));\n \n-    private PredefinedTypes() {\n+    // type anydata =  ()|boolean|int|float|decimal|string|xml|anydata[]|map<anydata>|table<map<anydata>>\n+    static {\n+        ArrayList<Type> members = new ArrayList<>();\n+        members.add(TYPE_NULL);\n+        members.add(TYPE_BOOLEAN);\n+        members.add(TYPE_INT);\n+        members.add(TYPE_FLOAT);\n+        members.add(TYPE_DECIMAL);\n+        members.add(TYPE_STRING);\n+        members.add(TYPE_XML);\n+        BAnydataType anydataType = new BAnydataType(new BUnionType(TypeConstants.ANYDATA_TNAME, EMPTY_MODULE,\n+                members), TypeConstants.ANYDATA_TNAME, false);\n+        anydataType.isCyclic = true;\n+        MapType internalAnydataMap = new BMapType(TypeConstants.MAP_TNAME, anydataType, EMPTY_MODULE);\n+        ArrayType internalAnydataArray = new BArrayType(anydataType);\n+        members.add(internalAnydataArray);\n+        members.add(internalAnydataMap);", "originalCommit": "7dea8dded08ea0540c56b3ace710e09bc76c8fbd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Nzg2MDExNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26371#discussion_r557860116", "bodyText": "added 632ec68", "author": "KRVPerera", "createdAt": "2021-01-15T04:49:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgwOTY3OQ=="}], "type": "inlineReview"}, {"oid": "6548fc1ecc46efe8bff2ab4d4911d56b903ff2cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6548fc1ecc46efe8bff2ab4d4911d56b903ff2cb", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2021-01-14T03:48:50Z", "type": "commit"}, {"oid": "632ec683986ae5b2c31e5c9baf27b505629cf2c3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/632ec683986ae5b2c31e5c9baf27b505629cf2c3", "message": "Add table<map<anydata>> to PredefinedTypes anydata", "committedDate": "2021-01-14T03:52:28Z", "type": "commit"}, {"oid": "6b61910d2f2fc1dc279d5c1b024a285e81fe3558", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6b61910d2f2fc1dc279d5c1b024a285e81fe3558", "message": "Add license header", "committedDate": "2021-01-14T03:52:47Z", "type": "commit"}, {"oid": "659070eae0295c60473605dbb6bf5fab3f1e05cb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/659070eae0295c60473605dbb6bf5fab3f1e05cb", "message": "Fix merge conflicts", "committedDate": "2021-01-14T03:56:28Z", "type": "commit"}, {"oid": "ad374e28da04160638952198c6dab5c6e6e0bca4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad374e28da04160638952198c6dab5c6e6e0bca4", "message": "Refactor BArrayState allocation logic", "committedDate": "2021-01-14T07:10:08Z", "type": "commit"}, {"oid": "771accc20395f6d39dcd988dd5097b15b44feea4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/771accc20395f6d39dcd988dd5097b15b44feea4", "message": "Support cyclic dependency in type definitions", "committedDate": "2020-10-14T09:13:09Z", "type": "commit"}, {"oid": "e86cf83c4e2c4d3f20ef96045f37d31de8856d2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e86cf83c4e2c4d3f20ef96045f37d31de8856d2a", "message": "Fix issue when using cyclic type on langlib", "committedDate": "2020-10-14T09:13:12Z", "type": "commit"}, {"oid": "03f49b30d56f8883b45cd642390e03da93f11a03", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/03f49b30d56f8883b45cd642390e03da93f11a03", "message": "Fix test", "committedDate": "2020-10-14T09:14:29Z", "type": "commit"}, {"oid": "76a398588060470d5f9695df8617c70e3d06f333", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/76a398588060470d5f9695df8617c70e3d06f333", "message": "parent 03f49b30d56f8883b45cd642390e03da93f11a03\nauthor KRVPerera <rukshan.viduranga@gmail.com> 1595343363 +0530\ncommitter KRVPerera <rukshan.viduranga@gmail.com> 1602667287 +0530\n\nadd clonable type few chagnes", "committedDate": "2020-10-14T09:23:06Z", "type": "commit"}, {"oid": "f64d924f13503abbd613bd9c2ba94fe49361d2bc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f64d924f13503abbd613bd9c2ba94fe49361d2bc", "message": "Fix build issues", "committedDate": "2020-10-14T10:21:45Z", "type": "commit"}, {"oid": "bc3581a987cb2d1698e9337613b8303019163ef2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bc3581a987cb2d1698e9337613b8303019163ef2", "message": "Refactor Types.isAssignableToUnionType\n\nRefactor the loop for performance and to reduce cognitive load", "committedDate": "2020-10-14T10:21:45Z", "type": "commit"}, {"oid": "ff7e70d66c8f5a903638ed655d6427536be75dcf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ff7e70d66c8f5a903638ed655d6427536be75dcf", "message": "Fix build issues", "committedDate": "2020-10-14T10:21:45Z", "type": "commit"}, {"oid": "37078d30bf1ca71e447dd175cb4900f9294cf047", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/37078d30bf1ca71e447dd175cb4900f9294cf047", "message": "Fix error type assignability", "committedDate": "2020-10-14T10:21:45Z", "type": "commit"}, {"oid": "9725fc8b73969f74d5230bc7f855d477da6fffcc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9725fc8b73969f74d5230bc7f855d477da6fffcc", "message": "Test JvmTypeGen issue", "committedDate": "2020-10-14T10:21:45Z", "type": "commit"}, {"oid": "131b8edaa4cd92661c87dc0ab057998ef93bc81f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/131b8edaa4cd92661c87dc0ab057998ef93bc81f", "message": "Refactor SymbolEnter resolver", "committedDate": "2020-10-14T10:21:46Z", "type": "commit"}, {"oid": "e0b7f9b90196ec3011e5b3a0b16b149c9404a05a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e0b7f9b90196ec3011e5b3a0b16b149c9404a05a", "message": "Fix lang loading order", "committedDate": "2020-10-14T10:21:46Z", "type": "commit"}, {"oid": "d2bc4fc9b70ac2f4efcca98e233052233b4ec426", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2bc4fc9b70ac2f4efcca98e233052233b4ec426", "message": "Fix build", "committedDate": "2020-10-14T10:21:46Z", "type": "commit"}, {"oid": "e47f031b49f30814cf4575c6e8e3c359c545b3ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e47f031b49f30814cf4575c6e8e3c359c545b3ef", "message": "Revert addition", "committedDate": "2020-10-14T10:35:35Z", "type": "commit"}, {"oid": "95ffe063c5406222e3d3ffeb16ba0076783bde71", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/95ffe063c5406222e3d3ffeb16ba0076783bde71", "message": "Add anonymous flag", "committedDate": "2020-10-15T06:38:22Z", "type": "commit"}, {"oid": "391f0c1025370fa4e4b40968f60acd937c7d29ad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/391f0c1025370fa4e4b40968f60acd937c7d29ad", "message": "Fix dependency between langlibs java and error\n\nSince error is moved to annotation package", "committedDate": "2020-10-15T07:47:39Z", "type": "commit"}, {"oid": "d9e1ef1baec06657a191f62152a96d18cf132c08", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d9e1ef1baec06657a191f62152a96d18cf132c08", "message": "Fix java.lang.NoSuchFieldError:\n\nTemporary fix for looking for a field named $type$(Cloneable & readonly)\nalso added", "committedDate": "2020-10-15T08:11:19Z", "type": "commit"}, {"oid": "9550e18c61a65a87b9a9a461574fa5bd3e39831d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9550e18c61a65a87b9a9a461574fa5bd3e39831d", "message": "Add cyclic flag", "committedDate": "2020-10-16T02:47:57Z", "type": "commit"}, {"oid": "b46462c3bb6a7d49d586694ba2b6ae5fc1899fd1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b46462c3bb6a7d49d586694ba2b6ae5fc1899fd1", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-10-16T02:59:21Z", "type": "commit"}, {"oid": "7b06d61d7c9c3cf0e0c97c40aeaef8a14a64b1f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b06d61d7c9c3cf0e0c97c40aeaef8a14a64b1f8", "message": "Revert error.bal of langlib/java", "committedDate": "2020-10-16T09:49:19Z", "type": "commit"}, {"oid": "36efe96b07105e22ca2c52e40524a8805225e431", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/36efe96b07105e22ca2c52e40524a8805225e431", "message": "Rename SymbolResolver reload methods to boostrap", "committedDate": "2020-10-16T09:50:19Z", "type": "commit"}, {"oid": "6199d6ed18c52aa682a6304943781c1ad004a357", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6199d6ed18c52aa682a6304943781c1ad004a357", "message": "Fix error type bootstrapping", "committedDate": "2020-10-16T11:15:24Z", "type": "commit"}, {"oid": "901b417619bf3a81c9c4c8c1d3878a1648199218", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/901b417619bf3a81c9c4c8c1d3878a1648199218", "message": "Add union symbol name to BIR of cyclic types", "committedDate": "2020-10-19T09:29:39Z", "type": "commit"}, {"oid": "f5725a5c7322b1637098c06e08c206e15233c5f2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5725a5c7322b1637098c06e08c206e15233c5f2", "message": "Fix readonly and Cloneable cyclic flag", "committedDate": "2020-10-20T02:51:44Z", "type": "commit"}, {"oid": "7f5a8c28ebe26e3725ceeaad9261ea97eeb53862", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7f5a8c28ebe26e3725ceeaad9261ea97eeb53862", "message": "Replace stream in BLangTupleTypeNode", "committedDate": "2020-10-20T05:52:12Z", "type": "commit"}, {"oid": "c93869bd3e6f46ae41113bcb8070dd39e1c9d68b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c93869bd3e6f46ae41113bcb8070dd39e1c9d68b", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-10-21T20:39:45Z", "type": "commit"}, {"oid": "d2175d756c0eeb6e165cea0ee4e1d9d5072738bd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d2175d756c0eeb6e165cea0ee4e1d9d5072738bd", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-10-21T21:05:40Z", "type": "commit"}, {"oid": "163c92c694285f2faad1e62d409c6258334f475d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/163c92c694285f2faad1e62d409c6258334f475d", "message": "Test", "committedDate": "2020-10-22T05:54:14Z", "type": "commit"}, {"oid": "e159d9ced084503e4439e83f62b247b826e55c27", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e159d9ced084503e4439e83f62b247b826e55c27", "message": "Fix code style", "committedDate": "2020-10-22T06:20:56Z", "type": "commit"}, {"oid": "872781d04e80dbf15c0952e10d48e820f9cca207", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/872781d04e80dbf15c0952e10d48e820f9cca207", "message": "Fix line too long code style", "committedDate": "2020-10-22T06:49:21Z", "type": "commit"}, {"oid": "df888c43ef6ef09668c8ce6c867c7df4f9804f98", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df888c43ef6ef09668c8ce6c867c7df4f9804f98", "message": "Revert unwanted files and changes", "committedDate": "2020-10-22T08:23:10Z", "type": "commit"}, {"oid": "df8c1dfe16c52f98be573ad4e6010646adc751bb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df8c1dfe16c52f98be573ad4e6010646adc751bb", "message": "revert natives.bal", "committedDate": "2020-10-22T08:25:00Z", "type": "commit"}, {"oid": "c167209ac59412904d3b7ec68a49982825276550", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c167209ac59412904d3b7ec68a49982825276550", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-10-22T10:44:32Z", "type": "commit"}, {"oid": "f97c50e15e68e941e20b649d642ac1fb6abc1eba", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f97c50e15e68e941e20b649d642ac1fb6abc1eba", "message": "Fix TypeParamAnalyzer issue for future types", "committedDate": "2020-10-23T02:30:56Z", "type": "commit"}, {"oid": "eb4a7297b4786ee1b6d3e56048fcb253492f1ae7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb4a7297b4786ee1b6d3e56048fcb253492f1ae7", "message": "Cleanup anydata/json bootstrapping code", "committedDate": "2020-10-23T02:31:33Z", "type": "commit"}, {"oid": "56ec1ddd342c93abb9ab52303b0043ffd32a0b0b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/56ec1ddd342c93abb9ab52303b0043ffd32a0b0b", "message": "Rename bootstrap methods", "committedDate": "2020-10-23T02:34:06Z", "type": "commit"}, {"oid": "7296d73d276d66ae7c6d64e0741ec6b9c250f7b1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7296d73d276d66ae7c6d64e0741ec6b9c250f7b1", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-10-26T03:44:36Z", "type": "commit"}, {"oid": "bdbf2a8ea6f7e9eb6a86a15ddcc5938bb4171a71", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bdbf2a8ea6f7e9eb6a86a15ddcc5938bb4171a71", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-10-26T16:32:56Z", "type": "commit"}, {"oid": "7a621bfd28b14032f7030286e39a575c39f97ea1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7a621bfd28b14032f7030286e39a575c39f97ea1", "message": "Fix future problem", "committedDate": "2020-10-27T07:46:40Z", "type": "commit"}, {"oid": "5cc30ebc34cae513b92ff7ef7296f6aa3344b805", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5cc30ebc34cae513b92ff7ef7296f6aa3344b805", "message": "Fix code style", "committedDate": "2020-10-27T08:08:27Z", "type": "commit"}, {"oid": "df19b57193417f5b29954444eff043797d035a40", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df19b57193417f5b29954444eff043797d035a40", "message": "Fix typegen bad logic", "committedDate": "2020-10-27T10:31:50Z", "type": "commit"}, {"oid": "27c447e12afe0cd93aab20c1fb9e30cf0241c451", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/27c447e12afe0cd93aab20c1fb9e30cf0241c451", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-10-27T10:42:45Z", "type": "commit"}, {"oid": "4103f004f4632ab45e67c1d30912eb6ea93bb8e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4103f004f4632ab45e67c1d30912eb6ea93bb8e2", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-10-28T06:11:16Z", "type": "commit"}, {"oid": "f9970cc8dc30227162041dc3d057249b942a5a29", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f9970cc8dc30227162041dc3d057249b942a5a29", "message": "Fix typegen for cyclic unions", "committedDate": "2020-10-28T09:51:21Z", "type": "commit"}, {"oid": "c67107d87fbbaec82865d64f794d3123b4ba5109", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c67107d87fbbaec82865d64f794d3123b4ba5109", "message": "Refactor runtime BUnionType\n\nOrder public methods, private methods and overridden methods", "committedDate": "2020-10-28T09:52:19Z", "type": "commit"}, {"oid": "818f22f3a4e56aa1117170726b4bc6515e2604ad", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/818f22f3a4e56aa1117170726b4bc6515e2604ad", "message": "Enhance assignability rules for cyclic unions", "committedDate": "2020-10-29T05:08:20Z", "type": "commit"}, {"oid": "8f5271fd8ba3eb28e72f8aa0da4ca1e0f32135bd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f5271fd8ba3eb28e72f8aa0da4ca1e0f32135bd", "message": "Remove CYCLIC flag as overflowing int range", "committedDate": "2020-11-02T06:25:51Z", "type": "commit"}, {"oid": "f8e510fe4b7a2857f3c0449d92c27ec54d2817ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f8e510fe4b7a2857f3c0449d92c27ec54d2817ce", "message": "Add isCyclic boolean of unions to bir.ksy", "committedDate": "2020-11-02T06:43:06Z", "type": "commit"}, {"oid": "26ec65359d9d432c429dcd2031ab428b8b93ee76", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/26ec65359d9d432c429dcd2031ab428b8b93ee76", "message": "Revert Flags.java class", "committedDate": "2020-11-02T09:07:27Z", "type": "commit"}, {"oid": "2051f3365cb251139062ba0224fc192517e19d56", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2051f3365cb251139062ba0224fc192517e19d56", "message": "Divide Flags into sets of four", "committedDate": "2020-11-02T09:16:43Z", "type": "commit"}, {"oid": "db503538a8fb7d5f1c5e8334783611734c3823ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db503538a8fb7d5f1c5e8334783611734c3823ef", "message": "Add flag number as a comment to Flags.java", "committedDate": "2020-11-02T09:30:24Z", "type": "commit"}, {"oid": "c49291a3e8b5cb7ffcd8ce310eac0b6117efb09f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c49291a3e8b5cb7ffcd8ce310eac0b6117efb09f", "message": "Fix style", "committedDate": "2020-11-02T09:44:47Z", "type": "commit"}, {"oid": "5ffc7aa58ea8b0a39192eb0d540f0e9cf0312d49", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5ffc7aa58ea8b0a39192eb0d540f0e9cf0312d49", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-03T04:08:44Z", "type": "commit"}, {"oid": "42603642f3a30b46c641b5f7a7b11d1d616627d6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/42603642f3a30b46c641b5f7a7b11d1d616627d6", "message": "Fix lang union resolving logic", "committedDate": "2020-11-03T15:57:30Z", "type": "commit"}, {"oid": "ec3bd8048aa82ece4999bc124de639f1c9397116", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ec3bd8048aa82ece4999bc124de639f1c9397116", "message": "Refactor cyclic union creation code", "committedDate": "2020-11-04T04:21:04Z", "type": "commit"}, {"oid": "1b080f256fa9693b9b293d8c26c8c8b8d261c922", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b080f256fa9693b9b293d8c26c8c8b8d261c922", "message": "Fix union member list size : BIRPackageSymbolEnter", "committedDate": "2020-11-04T04:35:39Z", "type": "commit"}, {"oid": "6d73423fc3423bdff8b469c9cc25f0a253a7ed22", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6d73423fc3423bdff8b469c9cc25f0a253a7ed22", "message": "Resolve errors with an undefined detail as noType", "committedDate": "2020-11-04T07:00:03Z", "type": "commit"}, {"oid": "eab9e5f87e3108e1560cb0054142fdac76e6869d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eab9e5f87e3108e1560cb0054142fdac76e6869d", "message": "Fix clone issue", "committedDate": "2020-11-05T02:36:40Z", "type": "commit"}, {"oid": "f5ed5a1f84bc606691615b686d8682c9f1cd6694", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f5ed5a1f84bc606691615b686d8682c9f1cd6694", "message": "Fix check style issues", "committedDate": "2020-11-05T02:46:15Z", "type": "commit"}, {"oid": "1a80927acd6fb5d68480ac6af048e15fe7c36e7f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1a80927acd6fb5d68480ac6af048e15fe7c36e7f", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-05T07:43:12Z", "type": "commit"}, {"oid": "145304cb9e4a3424db54fc2509a679c9cbf9c65b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/145304cb9e4a3424db54fc2509a679c9cbf9c65b", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-08T09:32:47Z", "type": "commit"}, {"oid": "9cd5b7c1b6559ab45be6306defa9a7ae038c81af", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9cd5b7c1b6559ab45be6306defa9a7ae038c81af", "message": "Test", "committedDate": "2020-11-08T15:09:07Z", "type": "commit"}, {"oid": "fa93bb0e5887c33f53bf67425a2f359cec4cae71", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fa93bb0e5887c33f53bf67425a2f359cec4cae71", "message": "Load union cyclic flag", "committedDate": "2020-11-10T10:08:39Z", "type": "commit"}, {"oid": "edd7ff7761cea16ef55910da49eca9113a022469", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/edd7ff7761cea16ef55910da49eca9113a022469", "message": "add isCyclic flag to run time union type", "committedDate": "2020-11-10T10:09:25Z", "type": "commit"}, {"oid": "1f248ee7a63e42ccd292c6bea01e787c581eb784", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1f248ee7a63e42ccd292c6bea01e787c581eb784", "message": "JVM type gen fixes", "committedDate": "2020-11-12T05:02:25Z", "type": "commit"}, {"oid": "fc47e4a456f31cb8a15f92c3a8a584434ffdc3f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc47e4a456f31cb8a15f92c3a8a584434ffdc3f5", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-12T05:27:32Z", "type": "commit"}, {"oid": "fc47e4a456f31cb8a15f92c3a8a584434ffdc3f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fc47e4a456f31cb8a15f92c3a8a584434ffdc3f5", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-12T05:27:32Z", "type": "forcePushed"}, {"oid": "9a3efd2e00783f6031780829eeb2291c736262e3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9a3efd2e00783f6031780829eeb2291c736262e3", "message": "Fix style", "committedDate": "2020-11-12T05:54:52Z", "type": "commit"}, {"oid": "492f238b232ffc8065aa8238b07b51479292f3fb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/492f238b232ffc8065aa8238b07b51479292f3fb", "message": "Fix style", "committedDate": "2020-11-12T06:18:47Z", "type": "commit"}, {"oid": "30b9876d5e87e50421d075c25b5475def24d4038", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30b9876d5e87e50421d075c25b5475def24d4038", "message": "Fix SO in Immutable type", "committedDate": "2020-11-12T06:19:49Z", "type": "commit"}, {"oid": "dbad578e8c33ac2d6313694f1e9910048fa320c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dbad578e8c33ac2d6313694f1e9910048fa320c8", "message": "Fix spotbugs", "committedDate": "2020-11-12T06:47:09Z", "type": "commit"}, {"oid": "415690adc898d9e922fae6d4b30aa67e0461c528", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/415690adc898d9e922fae6d4b30aa67e0461c528", "message": "Fix non cyclic union member loading", "committedDate": "2020-11-12T07:02:29Z", "type": "commit"}, {"oid": "1abf15b1f620bbf6e202d7cccef79582d1da3001", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1abf15b1f620bbf6e202d7cccef79582d1da3001", "message": "Fix JSON type", "committedDate": "2020-11-12T07:31:36Z", "type": "commit"}, {"oid": "34412cb70851c4f82a1e33a027879cc3f457fe65", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34412cb70851c4f82a1e33a027879cc3f457fe65", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-16T03:42:15Z", "type": "commit"}, {"oid": "30df86f4e9c4a7b8c1a0256d6bb0f30fd65526ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30df86f4e9c4a7b8c1a0256d6bb0f30fd65526ef", "message": "Fix ImmutableTypeCloner for CyclicUnionData types", "committedDate": "2020-11-16T07:19:05Z", "type": "commit"}, {"oid": "30df86f4e9c4a7b8c1a0256d6bb0f30fd65526ef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/30df86f4e9c4a7b8c1a0256d6bb0f30fd65526ef", "message": "Fix ImmutableTypeCloner for CyclicUnionData types", "committedDate": "2020-11-16T07:19:05Z", "type": "forcePushed"}, {"oid": "e41107eb82f4a5310e2b87b16a95a5f3f30c4a94", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e41107eb82f4a5310e2b87b16a95a5f3f30c4a94", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-16T11:22:10Z", "type": "commit"}, {"oid": "5d19094d7351220c97fde05dfdd9e3508bd2c58f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5d19094d7351220c97fde05dfdd9e3508bd2c58f", "message": "Fix conflicts after merging with master", "committedDate": "2020-11-16T11:23:51Z", "type": "commit"}, {"oid": "0b7313b96d9e38439dc894fef71502326a476efd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0b7313b96d9e38439dc894fef71502326a476efd", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-17T04:31:42Z", "type": "commit"}, {"oid": "81ec6eb6076395bbf04fc9d4b056bfbd62720ebc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/81ec6eb6076395bbf04fc9d4b056bfbd62720ebc", "message": "Propagate union name to runtime", "committedDate": "2020-11-19T10:14:49Z", "type": "commit"}, {"oid": "d5b930256ca703d2a9bb8285bdde2bd143202543", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d5b930256ca703d2a9bb8285bdde2bd143202543", "message": "Fix conflicts after master merge", "committedDate": "2020-11-20T07:15:20Z", "type": "commit"}, {"oid": "40ea06c38cebbc9975da1393c9a1e5b052e724a0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/40ea06c38cebbc9975da1393c9a1e5b052e724a0", "message": "Fix code style", "committedDate": "2020-11-20T08:12:43Z", "type": "commit"}, {"oid": "0e925b81962a8158fa937368ec42a920b0841e79", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0e925b81962a8158fa937368ec42a920b0841e79", "message": "Remove CyclicUnionData.java", "committedDate": "2020-11-20T09:15:11Z", "type": "commit"}, {"oid": "d906ee403cb4b6306d96009b3b45005401920208", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d906ee403cb4b6306d96009b3b45005401920208", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-22T06:06:50Z", "type": "commit"}, {"oid": "faed31e37700fe7e52fd699a359cbffc0532c9d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/faed31e37700fe7e52fd699a359cbffc0532c9d3", "message": "Fix cyclic union cloning problem", "committedDate": "2020-11-24T10:59:58Z", "type": "commit"}, {"oid": "faed31e37700fe7e52fd699a359cbffc0532c9d3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/faed31e37700fe7e52fd699a359cbffc0532c9d3", "message": "Fix cyclic union cloning problem", "committedDate": "2020-11-24T10:59:58Z", "type": "forcePushed"}, {"oid": "4f8054a836206d3368e4ce4369f55010c691e725", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f8054a836206d3368e4ce4369f55010c691e725", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-26T06:58:14Z", "type": "commit"}, {"oid": "c32b8a2093dd4397f9bc8f1e87eea186928f5b05", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c32b8a2093dd4397f9bc8f1e87eea186928f5b05", "message": "Fix cloneable type in bootstrapping", "committedDate": "2020-11-26T07:10:31Z", "type": "commit"}, {"oid": "dbd6461bb2c59d3fb6b7d2ea6cbfb758a62ac6d1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dbd6461bb2c59d3fb6b7d2ea6cbfb758a62ac6d1", "message": "Fix ImmutableTypeCloner for cyclic unions", "committedDate": "2020-11-26T07:11:56Z", "type": "commit"}, {"oid": "11056e9d7e930729072d7e8fb3bf9bac45b8d6cf", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11056e9d7e930729072d7e8fb3bf9bac45b8d6cf", "message": "Optimize logic for flagging cyclic type definition", "committedDate": "2020-11-26T10:39:31Z", "type": "commit"}, {"oid": "4f1cc3ced6a105280bc7515abfc3f2a8463ba9d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4f1cc3ced6a105280bc7515abfc3f2a8463ba9d4", "message": "Fix ImmutableTypeCloner issues", "committedDate": "2020-11-27T08:44:44Z", "type": "commit"}, {"oid": "524081fb9b7954c8e0a69721f6f429615c3a6090", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/524081fb9b7954c8e0a69721f6f429615c3a6090", "message": "Fix SO", "committedDate": "2020-11-27T08:54:43Z", "type": "commit"}, {"oid": "41b7ee527d81e758476340d4a3005d590791b462", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/41b7ee527d81e758476340d4a3005d590791b462", "message": "Remove DiagnosticCode.java", "committedDate": "2020-11-27T09:48:44Z", "type": "commit"}, {"oid": "f2d82ac959fa892aa95f8b3435cb2e06a3c0b32e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f2d82ac959fa892aa95f8b3435cb2e06a3c0b32e", "message": "Fix Immutable cyclic union type gen", "committedDate": "2020-11-28T10:36:36Z", "type": "commit"}, {"oid": "f594d32dc197dcaf3d61941fcab4c442a160099f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f594d32dc197dcaf3d61941fcab4c442a160099f", "message": "Add support Immutable intersection as type param", "committedDate": "2020-11-30T08:37:46Z", "type": "commit"}, {"oid": "6e0eaa712092b8cae34f0ca1ce2bf90130c1fd82", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6e0eaa712092b8cae34f0ca1ce2bf90130c1fd82", "message": "Revert cloneReadOnly changed", "committedDate": "2020-11-30T09:53:17Z", "type": "commit"}, {"oid": "db9cecc045267e2a21fd0ec8e435abf3f1ce9ac2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/db9cecc045267e2a21fd0ec8e435abf3f1ce9ac2", "message": "Revert cloneReadOnly changed", "committedDate": "2020-11-30T10:03:53Z", "type": "commit"}, {"oid": "8fb76870e45ed2a683ea3d936a04d0944cb1038b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8fb76870e45ed2a683ea3d936a04d0944cb1038b", "message": "Merge branch 'master' into cyclic_type_definition_done_right", "committedDate": "2020-11-30T10:36:23Z", "type": "commit"}, {"oid": "0507a37bc8e08a08364b527d9251dde6f159722c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/0507a37bc8e08a08364b527d9251dde6f159722c", "message": "Revert TypeParamAnalyzer", "committedDate": "2020-12-01T05:53:22Z", "type": "commit"}, {"oid": "606bbf3d9ee6af6eb6079f63a716de0b12dea4a3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/606bbf3d9ee6af6eb6079f63a716de0b12dea4a3", "message": "Load error langlib dependencies before", "committedDate": "2020-12-01T05:54:02Z", "type": "commit"}, {"oid": "af6b8b85f824d513a1512e47d8074879fc3ff48e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af6b8b85f824d513a1512e47d8074879fc3ff48e", "message": "Fix isAssignable checks for union", "committedDate": "2020-12-01T10:55:54Z", "type": "commit"}]}