{"pr_number": 20598, "pr_title": "[IntelliJ Plugin] Fix indentation issue when working with ballerina documentation syntax", "pr_createdAt": "2020-01-14T08:43:20Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20598", "timeline": [{"oid": "295d5f881ca46a713dcb1296578ad865e2736fbe", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/295d5f881ca46a713dcb1296578ad865e2736fbe", "message": "Fix indentation issue when working with ballerina documentation syntax", "committedDate": "2020-01-11T10:29:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1MzEyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20598#discussion_r367253127", "bodyText": "Better to use method documentation format instead of the single line comment", "author": "nadeeshaan", "createdAt": "2020-01-16T06:40:52Z", "path": "tool-plugins/intellij/src/main/java/io/ballerina/plugins/idea/editor/inserthandlers/BallerinaEnterInDocumentationHandler.java", "diffHunk": "@@ -29,48 +30,53 @@\n import org.jetbrains.annotations.NotNull;\n \n /**\n- * Handles the enter key press in braces.\n+ * Handles the enter key press events within ballerina documentation.\n  */\n public class BallerinaEnterInDocumentationHandler extends EnterHandlerDelegateAdapter {\n \n+    private static final String BAL_DOC_PREFIX = \"#\";\n+\n     @Override\n     public Result postProcessEnter(@NotNull PsiFile file, @NotNull Editor editor, @NotNull DataContext dataContext) {\n-        if (!file.getLanguage().is(BallerinaLanguage.INSTANCE)) {\n+\n+        if (!file.getLanguage().is(BallerinaLanguage.INSTANCE) || editor.isDisposed()) {\n             return Result.Continue;\n         }\n+        Document doc = editor.getDocument();\n+\n         // We need to save the file before checking. Otherwise issues can occur when we press enter in a string.\n         Project project = file.getProject();\n-        PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());\n+        PsiDocumentManager.getInstance(project).commitDocument(doc);\n \n-        // Checks whether the previous line starts with \"#\".\n         LogicalPosition caretPos = editor.getCaretModel().getLogicalPosition();\n         int prevLine = caretPos.line - 1;\n-        String lineString = editor.getDocument().getText(\n-                new TextRange(editor.getDocument().getLineStartOffset(prevLine),\n-                        editor.getDocument().getLineEndOffset(prevLine))).trim();\n-        if (lineString.startsWith(\"#\")) {\n-            int newCol = lineString.replace(\"\\t\", \"    \").indexOf(\"#\");\n-            String enteredText = editor.getDocument().getText(\n-                    new TextRange(editor.getDocument().getLineStartOffset(caretPos.line),\n-                            editor.getDocument().getLineEndOffset(caretPos.line))).trim();\n-            editor.getDocument().deleteString(editor.getDocument().getLineStartOffset(caretPos.line),\n-                    editor.getDocument().getLineEndOffset(caretPos.line));\n-            editor.getCaretModel().moveToLogicalPosition(new LogicalPosition(caretPos.line, 1));\n-            enterNewLine(editor, enteredText, newCol);\n+        String lineString = doc.getText(new TextRange(doc.getLineStartOffset(prevLine),\n+                doc.getLineEndOffset(prevLine)));\n \n+        if (lineString.trim().startsWith(BAL_DOC_PREFIX)) {\n+            addNewline(editor, doc, lineString, caretPos);\n             // Commit the document.\n-            PsiDocumentManager.getInstance(project).commitDocument(editor.getDocument());\n+            PsiDocumentManager.getInstance(project).commitDocument(doc);\n         }\n         return Result.Continue;\n     }\n \n-    private void enterNewLine(Editor editor, String str, int col) {\n-        StringBuilder strBuilder = new StringBuilder(\"# \" + str);\n-        // Left padding with whitespaces in order to be vertically aligned with the previous doc line.\n-        for (int i = 0; i < col; i++) {\n+    // Inserts the splitted documentation at the next line.", "originalCommit": "295d5f881ca46a713dcb1296578ad865e2736fbe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI3NTM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20598#discussion_r367275399", "bodyText": "@nadeeshaan As per my knowledge,\n\njavadocs comes forward when the info presents which the user of a class needs to know and\nInfo that a developer modifying a class needs to know might better go into a normal comment (block or line).\n\nAbove context (private method without function args descriptions) is more related to the scenario (2) IMO :) WDYT?\nPlease also refer this SO Thread as well.", "author": "NipunaRanasinghe", "createdAt": "2020-01-16T07:59:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI1MzEyNw=="}], "type": "inlineReview"}]}