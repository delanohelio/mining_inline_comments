{"pr_number": 26718, "pr_title": "Update signature help parameter detection by range", "pr_createdAt": "2020-11-03T11:25:02Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718", "timeline": [{"oid": "dfa6b815e00cc5c60ea6efe5be62e3cbc3476287", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dfa6b815e00cc5c60ea6efe5be62e3cbc3476287", "message": "update signature help parameter detection by range", "committedDate": "2020-11-03T11:20:24Z", "type": "commit"}, {"oid": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c1d0926e5c5f363ad3eb50e20345b55dff4e2a26", "message": "update test config", "committedDate": "2020-11-03T16:47:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3ODIzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517078238", "bodyText": ".isBlank() will capture cases such as \"      \"(empty spaces) as well. Do we really need this or just would isEmpty() is suffcient?", "author": "rasika", "createdAt": "2020-11-04T03:27:58Z", "path": "compiler/ballerina-lang/src/main/java/io/ballerina/compiler/api/impl/SymbolFactory.java", "diffHunk": "@@ -213,7 +213,7 @@ public static ParameterSymbol createBallerinaParameter(BVarSymbol symbol, Parame\n         if (symbol == null) {\n             return null;\n         }\n-        String name = symbol.getName().getValue();\n+        String name = symbol.getName().getValue().isBlank() ? null : symbol.getName().getValue();", "originalCommit": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4MTk3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517081973", "bodyText": "Yes, name should never be empty, and since the isBlank internally checks for both isEmpty and space chars, therefore for the safe hand added this.", "author": "nadeeshaan", "createdAt": "2020-11-04T03:45:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3ODIzOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzEzNzA5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517137096", "bodyText": "My argument is will you ever get a symbol name with empty spaces? isBlank internally traverses through the whole char-array where isEmpty only checks char array length == 0.", "author": "rasika", "createdAt": "2020-11-04T07:17:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3ODIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTAwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517079006", "bodyText": "we can move adding documentation into getSignatureInfoModel() method", "author": "rasika", "createdAt": "2020-11-04T03:31:30Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/signature/SignatureHelpUtil.java", "diffHunk": "@@ -92,21 +92,35 @@ private SignatureHelpUtil() {\n         SignatureInfoModel signatureInfoModel = getSignatureInfoModel(functionSymbol.get(), context);\n \n         // Override label for 'new' constructor\n-        String label = functionSymbol.get().name();\n-        int initIndex = label.indexOf(INIT_SYMBOL);\n-        if (initIndex > -1) {\n-            label = \"new \" + label.substring(0, initIndex);\n-        }\n+        int initIndex = functionSymbol.get().name().indexOf(INIT_SYMBOL);\n+        StringBuilder labelBuilder = initIndex > -1\n+                ? new StringBuilder(\"new \" + functionSymbol.get().name().substring(0, initIndex))\n+                : new StringBuilder(functionSymbol.get().name());\n \n+        labelBuilder.append(\"(\");\n         // Join the function parameters to generate the function's signature\n-        String paramsJoined = signatureInfoModel.getParameterInfoModels().stream().map(parameterInfoModel -> {\n-            // For each of the parameters, create a parameter info instance\n-            parameterInformationList.add(getParameterInformation(parameterInfoModel));\n-\n-            return parameterInfoModel.toString();\n-        }).collect(Collectors.joining(\", \"));\n+        List<ParameterInfoModel> parameterInfoModels = signatureInfoModel.getParameterInfoModels();\n+        for (ParameterInfoModel paramModel : parameterInfoModels) {\n+            int labelOffset = labelBuilder.toString().length();\n+            labelBuilder.append(paramModel.parameter.getType());\n+            ParameterInformation paramInfo = new ParameterInformation();\n+            paramInfo.setDocumentation(getParameterDocumentation(paramModel));", "originalCommit": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4NzUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517087505", "bodyText": "ParameterInformation model generation is separated from the meta model. SignatureInfoModel is a combination of meta info.", "author": "nadeeshaan", "createdAt": "2020-11-04T04:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTAwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTc4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517079783", "bodyText": "can we move this logic related to setting Tuple.two(paramStart, paramEnd) into getSignatureInfoModel()", "author": "rasika", "createdAt": "2020-11-04T03:35:18Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/signature/SignatureHelpUtil.java", "diffHunk": "@@ -92,21 +92,35 @@ private SignatureHelpUtil() {\n         SignatureInfoModel signatureInfoModel = getSignatureInfoModel(functionSymbol.get(), context);\n \n         // Override label for 'new' constructor\n-        String label = functionSymbol.get().name();\n-        int initIndex = label.indexOf(INIT_SYMBOL);\n-        if (initIndex > -1) {\n-            label = \"new \" + label.substring(0, initIndex);\n-        }\n+        int initIndex = functionSymbol.get().name().indexOf(INIT_SYMBOL);\n+        StringBuilder labelBuilder = initIndex > -1\n+                ? new StringBuilder(\"new \" + functionSymbol.get().name().substring(0, initIndex))\n+                : new StringBuilder(functionSymbol.get().name());\n \n+        labelBuilder.append(\"(\");\n         // Join the function parameters to generate the function's signature\n-        String paramsJoined = signatureInfoModel.getParameterInfoModels().stream().map(parameterInfoModel -> {\n-            // For each of the parameters, create a parameter info instance\n-            parameterInformationList.add(getParameterInformation(parameterInfoModel));\n-\n-            return parameterInfoModel.toString();\n-        }).collect(Collectors.joining(\", \"));\n+        List<ParameterInfoModel> parameterInfoModels = signatureInfoModel.getParameterInfoModels();\n+        for (ParameterInfoModel paramModel : parameterInfoModels) {\n+            int labelOffset = labelBuilder.toString().length();\n+            labelBuilder.append(paramModel.parameter.getType());\n+            ParameterInformation paramInfo = new ParameterInformation();\n+            paramInfo.setDocumentation(getParameterDocumentation(paramModel));\n+            int paramStart = labelOffset;\n+            int paramEnd = labelOffset + paramModel.parameter.getType().length();\n+            if (paramModel.parameter.getName().isPresent()) {\n+                paramStart = paramEnd + 1;\n+                paramEnd += (paramModel.parameter.getName().get() + \" \").length();\n+                labelBuilder.append(\" \").append(paramModel.parameter.getName().get());\n+            }\n+            if (parameterInfoModels.indexOf(paramModel) < parameterInfoModels.size() - 1) {\n+                labelBuilder.append(\", \");\n+            }\n+            paramInfo.setLabel(Tuple.two(paramStart, paramEnd));", "originalCommit": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA4Nzc5NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517087794", "bodyText": "Same as the above and it will be better to keep the final model generation in once place. WDYT?", "author": "nadeeshaan", "createdAt": "2020-11-04T04:12:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2MjI1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517162251", "bodyText": "Still, paramStart, paramEnd calculation can be a part of ParameterInfoModel of the SignatureInfoModel. WDYT?", "author": "rasika", "createdAt": "2020-11-04T08:14:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIwMTUzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517201530", "bodyText": "IMHO I think we don't need to, this is because the paramStart and paramEnd is calculated relative to the label. That's the reason for generating both the label and the params in a single run without calculating the parameters separately as per the earlier logic.", "author": "nadeeshaan", "createdAt": "2020-11-04T09:22:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxODI4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517218281", "bodyText": "Yeah agree, seems paramStart requires other labelling positions as input.", "author": "rasika", "createdAt": "2020-11-04T09:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzA3OTc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDg3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517164876", "bodyText": "we can get rid of indexOf call for each element if we move the parent loop into an indexed for loop. Or will be more readable if we can move parameters generation into a new StringJoiner(\", \").", "author": "rasika", "createdAt": "2020-11-04T08:19:25Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/signature/SignatureHelpUtil.java", "diffHunk": "@@ -92,21 +92,35 @@ private SignatureHelpUtil() {\n         SignatureInfoModel signatureInfoModel = getSignatureInfoModel(functionSymbol.get(), context);\n \n         // Override label for 'new' constructor\n-        String label = functionSymbol.get().name();\n-        int initIndex = label.indexOf(INIT_SYMBOL);\n-        if (initIndex > -1) {\n-            label = \"new \" + label.substring(0, initIndex);\n-        }\n+        int initIndex = functionSymbol.get().name().indexOf(INIT_SYMBOL);\n+        StringBuilder labelBuilder = initIndex > -1\n+                ? new StringBuilder(\"new \" + functionSymbol.get().name().substring(0, initIndex))\n+                : new StringBuilder(functionSymbol.get().name());\n \n+        labelBuilder.append(\"(\");\n         // Join the function parameters to generate the function's signature\n-        String paramsJoined = signatureInfoModel.getParameterInfoModels().stream().map(parameterInfoModel -> {\n-            // For each of the parameters, create a parameter info instance\n-            parameterInformationList.add(getParameterInformation(parameterInfoModel));\n-\n-            return parameterInfoModel.toString();\n-        }).collect(Collectors.joining(\", \"));\n+        List<ParameterInfoModel> parameterInfoModels = signatureInfoModel.getParameterInfoModels();\n+        for (ParameterInfoModel paramModel : parameterInfoModels) {\n+            int labelOffset = labelBuilder.toString().length();\n+            labelBuilder.append(paramModel.parameter.getType());\n+            ParameterInformation paramInfo = new ParameterInformation();\n+            paramInfo.setDocumentation(getParameterDocumentation(paramModel));\n+            int paramStart = labelOffset;\n+            int paramEnd = labelOffset + paramModel.parameter.getType().length();\n+            if (paramModel.parameter.getName().isPresent()) {\n+                paramStart = paramEnd + 1;\n+                paramEnd += (paramModel.parameter.getName().get() + \" \").length();\n+                labelBuilder.append(\" \").append(paramModel.parameter.getName().get());\n+            }\n+            if (parameterInfoModels.indexOf(paramModel) < parameterInfoModels.size() - 1) {\n+                labelBuilder.append(\", \");", "originalCommit": "c1d0926e5c5f363ad3eb50e20345b55dff4e2a26", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIwODcxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517208717", "bodyText": "converted to an indexed loop", "author": "nadeeshaan", "createdAt": "2020-11-04T09:33:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2NDg3Ng=="}], "type": "inlineReview"}, {"oid": "b2ad4e361982552317e13ff199d2f7a6d83731e2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b2ad4e361982552317e13ff199d2f7a6d83731e2", "message": "add context aware completion support for on fail clause", "committedDate": "2020-11-04T09:30:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzIxNTQ5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26718#discussion_r517215499", "bodyText": "You can just call labelBuilder.length() otherwise whole purpose of StringBuilder is lost since we convert toString per each cycle.", "author": "rasika", "createdAt": "2020-11-04T09:44:09Z", "path": "language-server/modules/langserver-core/src/main/java/org/ballerinalang/langserver/signature/SignatureHelpUtil.java", "diffHunk": "@@ -100,7 +100,8 @@ private SignatureHelpUtil() {\n         labelBuilder.append(\"(\");\n         // Join the function parameters to generate the function's signature\n         List<ParameterInfoModel> parameterInfoModels = signatureInfoModel.getParameterInfoModels();\n-        for (ParameterInfoModel paramModel : parameterInfoModels) {\n+        for (int i = 0; i < parameterInfoModels.size(); i++) {\n+            ParameterInfoModel paramModel = parameterInfoModels.get(i);\n             int labelOffset = labelBuilder.toString().length();", "originalCommit": "b2ad4e361982552317e13ff199d2f7a6d83731e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}