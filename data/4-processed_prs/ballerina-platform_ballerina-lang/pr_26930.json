{"pr_number": 26930, "pr_title": "Mark relevant stream/query lang lib methods and `StreamImplementor` methods as `isolated`", "pr_createdAt": "2020-11-15T07:39:15Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930", "timeline": [{"oid": "b67d7ab899eecc76652af83db93d1ecd012c3232", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b67d7ab899eecc76652af83db93d1ecd012c3232", "message": "Mark stream langlib methods as `isolated`", "committedDate": "2020-11-15T02:05:47Z", "type": "commit"}, {"oid": "c487e432803a7e7949d191088bd0ba60d0ac2d88", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c487e432803a7e7949d191088bd0ba60d0ac2d88", "message": "Add an util method to invoke any function as an external function", "committedDate": "2020-11-15T07:26:00Z", "type": "commit"}, {"oid": "25d30962e1a3337fce30209f1c096110249fe62f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/25d30962e1a3337fce30209f1c096110249fe62f", "message": "Expose scheduling to lang-internal module", "committedDate": "2020-11-15T07:29:20Z", "type": "commit"}, {"oid": "8023c4b00d23c9a3d64cecd11d85124712ef5ae3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8023c4b00d23c9a3d64cecd11d85124712ef5ae3", "message": "Mark `StreamImplementor` methods `isolated`", "committedDate": "2020-11-15T07:32:27Z", "type": "commit"}, {"oid": "9469d31ff1cc350adaf8e37998c506af7eba8b67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9469d31ff1cc350adaf8e37998c506af7eba8b67", "message": "Fix failing langlib test", "committedDate": "2020-11-15T09:18:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc0MzM5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r523743399", "bodyText": "Shouldn't this be a non-public function in the stream langlib instead? We don't need it elsewhere, right?\nShall we also change the return type to any|error, since () is already covered in any?", "author": "MaryamZi", "createdAt": "2020-11-15T11:07:44Z", "path": "langlib/lang.__internal/src/main/ballerina/src/lang.__internal/stream-utils.bal", "diffHunk": "@@ -100,13 +100,23 @@ public isolated function getReturnType(any func) returns typedesc<Type> = @java:\n #\n # + strm - The stream\n # + return - An abstract object which is iterable\n-public function getIteratorObj(stream<Type, ErrorType> strm) returns\n+public isolated function getIteratorObj(stream<Type, ErrorType> strm) returns\n     object {\n-        public function next() returns record {|Type value;|}|ErrorType?;} |\n+        public isolated function next() returns record {|Type value;|}|ErrorType?;} |\n     object {\n-        public function next() returns record {|Type value;|}|ErrorType?;\n-        public function close() returns ErrorType?;\n+        public isolated function next() returns record {|Type value;|}|ErrorType?;\n+        public isolated function close() returns ErrorType?;\n     } = @java:Method {\n         'class: \"org.ballerinalang.langlib.internal.GetIteratorObj\",\n         name: \"getIteratorObj\"\n     } external;\n+\n+# Invoke a non-isolated function as an external function (workaround for isolated invocations).\n+#\n+# + func - function to invoke\n+# + args - args for the function to invoke\n+# + return - result of the invocation\n+public isolated function invokeAsExternal(any func, any|error... args) returns any|error|() = @java:Method {", "originalCommit": "8023c4b00d23c9a3d64cecd11d85124712ef5ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MzU2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r523763568", "bodyText": "Shouldn't this be a non-public function in the stream langlib instead? We don't need it elsewhere, right?\n\n\nneeded in both stream and query libs.\n\n\nShall we also change the return type to any|error, since () is already covered in any?\n\n\nfixed in d97ca9c", "author": "grainier", "createdAt": "2020-11-15T14:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc0MzM5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc0Mzk0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r523743943", "bodyText": "Can't we do\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (res is _Frame) {\n          \n          \n            \n                        return res;\n          \n          \n            \n                    } else if (res is error) {\n          \n          \n            \n                        return res;\n          \n          \n            \n                    if (res is _Frame|error) {\n          \n          \n            \n                        return res;", "author": "MaryamZi", "createdAt": "2020-11-15T11:13:04Z", "path": "langlib/lang.query/src/main/ballerina/src/lang.query/types.bal", "diffHunk": "@@ -66,9 +66,16 @@ class _StreamPipeline {\n         self.resType = resType;\n     }\n \n-    public function next() returns _Frame|error? {\n+    public isolated function next() returns _Frame|error? {\n         _StreamFunction sf = self.streamFunction;\n-        return sf.process();\n+        var res = internal:invokeAsExternal(sf.process);\n+        if (res is _Frame) {\n+            return res;\n+        } else if (res is error) {\n+            return res;", "originalCommit": "9469d31ff1cc350adaf8e37998c506af7eba8b67", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc2MzUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r523763520", "bodyText": "fixed in: d97ca9c", "author": "grainier", "createdAt": "2020-11-15T14:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzc0Mzk0Mw=="}], "type": "inlineReview"}, {"oid": "d97ca9cdac22409c90315440b107d70588065625", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d97ca9cdac22409c90315440b107d70588065625", "message": "Improve return types", "committedDate": "2020-11-15T13:35:21Z", "type": "commit"}, {"oid": "6fb340b980e184a3b63a2aba4c5a4eabe58d40ce", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6fb340b980e184a3b63a2aba4c5a4eabe58d40ce", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-26677", "committedDate": "2020-11-15T13:35:40Z", "type": "commit"}, {"oid": "c5b494c7d52ef94a79f548c0137376c9fd10268a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c5b494c7d52ef94a79f548c0137376c9fd10268a", "message": "Improve stream implementor type checking", "committedDate": "2020-11-16T07:18:50Z", "type": "commit"}, {"oid": "16cee81ca96dac252b74288b322557e4aef597b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/16cee81ca96dac252b74288b322557e4aef597b6", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-26677", "committedDate": "2020-11-16T07:19:25Z", "type": "commit"}, {"oid": "cd70c586b77f7fbfbb191cd0c17d5724ff013449", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cd70c586b77f7fbfbb191cd0c17d5724ff013449", "message": "Move stream implementor tests to jBal unit tests", "committedDate": "2020-11-16T08:14:19Z", "type": "commit"}, {"oid": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c649f4e8307870d9d330ce49cc1cd7fe8da2dccd", "message": "Fix check styles", "committedDate": "2020-11-16T08:55:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5MzcwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524093702", "bodyText": "Should we add a Name in org.wso2.ballerinalang.compiler.util.Names instead?", "author": "MaryamZi", "createdAt": "2020-11-16T10:33:21Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))", "originalCommit": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzMzk0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524233948", "bodyText": "fixed in: bf7f95d", "author": "grainier", "createdAt": "2020-11-16T12:42:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA5MzcwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEwMDcxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524100714", "bodyText": "Can't we look up the two functions, next and close, and if not null check if the isolated flag is on? That way we can give a more descriptive error, avoid looking up the iterators for each iteration, and also continue the rest of the analysis for the object?", "author": "MaryamZi", "createdAt": "2020-11-16T10:39:41Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))\n+                            .symbol.type;\n+                    BType iteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_ITERATOR_CLASS)).symbol.type;\n+                    BAttachedFunction closeFunc = types.getAttachedFuncFromObject((BObjectType) constructType,\n+                            BLangCompilerConstants.CLOSE_FUNC);", "originalCommit": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNTQ0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524135445", "bodyText": "Is this error ever logged now?", "author": "MaryamZi", "createdAt": "2020-11-16T11:11:01Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))\n+                            .symbol.type;\n+                    BType iteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_ITERATOR_CLASS)).symbol.type;\n+                    BAttachedFunction closeFunc = types.getAttachedFuncFromObject((BObjectType) constructType,\n+                            BLangCompilerConstants.CLOSE_FUNC);\n+                    if (closeFunc != null) {\n+                        if (!types.isAssignable(constructType, closeableIteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_CLOSEABLE_ITERATOR,\n+                                    constructType);\n+                            resultType = symTable.semanticError;\n+                            return;\n+                        }\n+                    } else {\n+                        if (!types.isAssignable(constructType, iteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_ITERATOR,\n+                                    constructType);\n+                            resultType = symTable.semanticError;\n+                            return;\n+                        }\n+                    }\n                     BUnionType nextReturnType = types.getVarTypeFromIteratorFuncReturnType(constructType);\n                     BUnionType expectedReturnType = createNextReturnType(cIExpr.pos, (BStreamType) actualType);\n                     if (nextReturnType == null) {", "originalCommit": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzNDQ3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524234478", "bodyText": "fixed in: bf7f95d", "author": "grainier", "createdAt": "2020-11-16T12:43:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNTQ0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNjg2NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524136865", "bodyText": "Can't we reuse DiagnosticCode.INCOMPATIBLE_TYPES for these?", "author": "MaryamZi", "createdAt": "2020-11-16T11:12:20Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/semantics/analyzer/TypeChecker.java", "diffHunk": "@@ -3013,6 +3013,28 @@ public void visit(BLangTypeInit cIExpr) {\n                 if (!cIExpr.initInvocation.argExprs.isEmpty()) {\n                     BLangExpression iteratorExpr = cIExpr.initInvocation.argExprs.get(0);\n                     BType constructType = checkExpr(iteratorExpr, env, symTable.noType);\n+                    BType closeableIteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_CLOSEABLE_ITERATOR_CLASS))\n+                            .symbol.type;\n+                    BType iteratorType = symTable.langQueryModuleSymbol.scope\n+                            .lookup(names.fromString(BLangCompilerConstants.ABSTRACT_ITERATOR_CLASS)).symbol.type;\n+                    BAttachedFunction closeFunc = types.getAttachedFuncFromObject((BObjectType) constructType,\n+                            BLangCompilerConstants.CLOSE_FUNC);\n+                    if (closeFunc != null) {\n+                        if (!types.isAssignable(constructType, closeableIteratorType)) {\n+                            dlog.error(iteratorExpr.pos, DiagnosticCode.INVALID_STREAM_CONSTRUCTOR_CLOSEABLE_ITERATOR,\n+                                    constructType);", "originalCommit": "c649f4e8307870d9d330ce49cc1cd7fe8da2dccd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDIzODAzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/26930#discussion_r524238030", "bodyText": "improved in: bf7f95d", "author": "grainier", "createdAt": "2020-11-16T12:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDEzNjg2NQ=="}], "type": "inlineReview"}, {"oid": "bf7f95d592214df4df84a89e0b02cee38e7cb162", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bf7f95d592214df4df84a89e0b02cee38e7cb162", "message": "Improve type checking for stream implementor", "committedDate": "2020-11-16T12:39:18Z", "type": "commit"}, {"oid": "b046fcaa57fb6c8624e51d819207c62ecf70341a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b046fcaa57fb6c8624e51d819207c62ecf70341a", "message": "Merge branch 'master' of github.com:ballerina-platform/ballerina-lang into fix-26677", "committedDate": "2020-11-16T12:39:58Z", "type": "commit"}]}