{"pr_number": 25234, "pr_title": "Add Function mocking and Object mocking BBE", "pr_createdAt": "2020-08-12T10:03:12Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzQ0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469163441", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The function prints the value of PI using `io:println` function\n          \n          \n            \n            // This function prints the value of PI using the `io:println` function.", "author": "praneesha", "createdAt": "2020-08-12T10:31:27Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE4MzEyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469183127", "bodyText": "Changed as requested", "author": "Ibaqu", "createdAt": "2020-08-12T11:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzQ0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzY5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469163698", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               // This function call to `io:println` will be replaced with `mockIoPrintLn`\n          \n          \n            \n               // This function call to the `io:println` will be replaced with the `mockIoPrintLn` function.", "author": "praneesha", "createdAt": "2020-08-12T10:31:59Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzgxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469163812", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This creates an object for stubbing calls to `intAdd` which is written in the same module.\n          \n          \n            \n            // This creates an object for stubbing calls to the `intAdd` function, which is written in the same module.", "author": "praneesha", "createdAt": "2020-08-12T10:32:14Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2MzkzOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469163938", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to return the specified value.\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to return the specified value.", "author": "praneesha", "createdAt": "2020-08-12T10:32:34Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n @test:Config {}\n function testAssertIntEquals() {\n-    int answer = 0;\n-    answer = intAdd(5, 3);\n-    io:println(\"Function mocking test\");\n-    test:assertEquals(answer, 2, msg = \"function mocking failed\");\n+    // This stubs the calls to `intAdd` function to return the specified value.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDA0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164048", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to return the specified value\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to return the specified value", "author": "praneesha", "createdAt": "2020-08-12T10:32:46Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n @test:Config {}\n function testAssertIntEquals() {\n-    int answer = 0;\n-    answer = intAdd(5, 3);\n-    io:println(\"Function mocking test\");\n-    test:assertEquals(answer, 2, msg = \"function mocking failed\");\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDE1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164152", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to invoke the specifed function.\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to invoke the specified function.", "author": "praneesha", "createdAt": "2020-08-12T10:32:57Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n @test:Config {}\n function testAssertIntEquals() {\n-    int answer = 0;\n-    answer = intAdd(5, 3);\n-    io:println(\"Function mocking test\");\n-    test:assertEquals(answer, 2, msg = \"function mocking failed\");\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value\n+    // when the specified arguments are provided.\n+    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n+\n+    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n+    test:assertEquals(intAdd(0, 0), -1,\n+        msg = \"function mocking with arguments failed\");\n+\n+    // This stubs the calls to `intAdd` function to invoke the specifed function.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDIyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164227", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // in place of `intAdd` function.\n          \n          \n            \n            // in place of the `intAdd` function.", "author": "praneesha", "createdAt": "2020-08-12T10:33:07Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.bal", "diffHunk": "@@ -1,29 +1,68 @@\n import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n import ballerina/test;\n \n-// This is the mock function, which will replace the real function.\n+(any|error)[] outputs = [];\n+\n @test:Mock {\n-    // Since there is no module declaration, `.` is the current module.\n-    // You can include any module (e.g., : `ballerina/io`).\n-    moduleName: \".\",\n-    functionName: \"intAdd\"\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n }\n-// The mock function's signature should match with the actual function's signature.\n-public function mockIntAdd(int a, int b) returns int {\n-    io:println(\"I'm the mock function!\");\n-    return (a - b);\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n }\n \n-// This is the test function.\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n @test:Config {}\n function testAssertIntEquals() {\n-    int answer = 0;\n-    answer = intAdd(5, 3);\n-    io:println(\"Function mocking test\");\n-    test:assertEquals(answer, 2, msg = \"function mocking failed\");\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value\n+    // when the specified arguments are provided.\n+    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n+\n+    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n+    test:assertEquals(intAdd(0, 0), -1,\n+        msg = \"function mocking with arguments failed\");\n+\n+    // This stubs the calls to `intAdd` function to invoke the specifed function.\n+    test:when(intAddMockFn).call(\"mockIntAdd\");\n+\n+    test:assertEquals(addValues(11, 6), 5, msg = \"function mocking failed\");\n }\n \n-// The real function, which is mocked above.\n-public function intAdd(int a, int b) returns int {\n-    return (a + b);\n+// This is a mock function that can be called\n+// in place of `intAdd` function.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDM4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164381", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Mock functions allow you to hide the real functions and engage your own functions when running tests.\n          \n          \n            \n            // Mock functions allow you to hide the real functions and engage your own functions when running the tests.", "author": "praneesha", "createdAt": "2020-08-12T10:33:26Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.description", "diffHunk": "@@ -1,2 +1,6 @@\n-// Mock functions allow you to hide the real function and engage your own functions when running tests.\n-// This allows you to isolate your test functions from the rest.\n+// Mock functions allow you to hide the real functions and engage your own functions when running tests.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDQ5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // function declared in the module under test can be mocked with dedicated annotations.<br/><br/>\n          \n          \n            \n            // function declared in the module under a test can be mocked with dedicated annotations.<br/><br/>", "author": "praneesha", "createdAt": "2020-08-12T10:33:41Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.description", "diffHunk": "@@ -1,2 +1,6 @@\n-// Mock functions allow you to hide the real function and engage your own functions when running tests.\n-// This allows you to isolate your test functions from the rest.\n+// Mock functions allow you to hide the real functions and engage your own functions when running tests.\n+// This allows you to isolate your test functions from the rest. Both mocking an imported function and a\n+// function declared in the module under test can be mocked with dedicated annotations.<br/><br/>", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDY3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164679", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // It is not limited to the test file where it is being mocked. Mocking a function from the module under test\n          \n          \n            \n            // It is not limited to the test file in which it is being mocked. Mocking a function from the module under the test", "author": "praneesha", "createdAt": "2020-08-12T10:34:05Z", "path": "examples/testerina-function-mocks/testerina_function_mocks.description", "diffHunk": "@@ -1,2 +1,6 @@\n-// Mock functions allow you to hide the real function and engage your own functions when running tests.\n-// This allows you to isolate your test functions from the rest.\n+// Mock functions allow you to hide the real functions and engage your own functions when running tests.\n+// This allows you to isolate your test functions from the rest. Both mocking an imported function and a\n+// function declared in the module under test can be mocked with dedicated annotations.<br/><br/>\n+// Mocking an imported function will apply the mocked function to every instance of the original function call.\n+// It is not limited to the test file where it is being mocked. Mocking a function from the module under test", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDgwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164804", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This is the test file that demonstrates ways to mock functions.\n          \n          \n            \n            // This is the test file, which demonstrates ways to mock functions.", "author": "praneesha", "createdAt": "2020-08-12T10:34:19Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NDkwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469164909", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // The function prints the value of PI using `io:println` function\n          \n          \n            \n            // This function prints the value of PI using `io:println` function.", "author": "praneesha", "createdAt": "2020-08-12T10:34:36Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTE4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // imported function `io:println`.\n          \n          \n            \n                // imported `io:println` function.", "author": "praneesha", "createdAt": "2020-08-12T10:35:02Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTMxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165312", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               // This function call to `io:println` will be replaced with `mockIoPrintLn`\n          \n          \n            \n               // This function call to the `io:println` function will be replaced with the `mockIoPrintLn` function.", "author": "praneesha", "createdAt": "2020-08-12T10:35:22Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTQwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165403", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This creates an object for stubbing calls to `intAdd` which is written in the same module.\n          \n          \n            \n            // This creates an object for stubbing calls to `intAdd`, which is written in the same module.", "author": "praneesha", "createdAt": "2020-08-12T10:35:32Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTQ2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165467", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to return the specified value.\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to return the specified value.", "author": "praneesha", "createdAt": "2020-08-12T10:35:40Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n+@test:Config {}\n+function testAssertIntEquals() {\n+    // This stubs the calls to `intAdd` function to return the specified value.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTUyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165522", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to return the specified value\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to return the specified value", "author": "praneesha", "createdAt": "2020-08-12T10:35:48Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n+@test:Config {}\n+function testAssertIntEquals() {\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTU5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165599", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the calls to `intAdd` function to invoke the specifed function.\n          \n          \n            \n                // This stubs the calls to the `intAdd` function to invoke the specified function.", "author": "praneesha", "createdAt": "2020-08-12T10:35:59Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n+@test:Config {}\n+function testAssertIntEquals() {\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value\n+    // when the specified arguments are provided.\n+    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n+\n+    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n+    test:assertEquals(intAdd(0, 0), -1,\n+        msg = \"function mocking with arguments failed\");\n+\n+    // This stubs the calls to `intAdd` function to invoke the specifed function.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTY2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165669", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // in place of `intAdd` function.\n          \n          \n            \n            // in place of the `intAdd` function.", "author": "praneesha", "createdAt": "2020-08-12T10:36:07Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.bal", "diffHunk": "@@ -0,0 +1,69 @@\n+// This is the test file that demonstrates ways to mock functions.\n+import ballerina/io;\n+import ballerina/math;\n+\n+// This function calls the `intAdd` function and returns the result.\n+public function addValues(int a, int b) returns int {\n+    return intAdd(a, b);\n+}\n+\n+// This function adds two integers and returns the result.\n+public function intAdd(int a, int b) returns int {\n+    return (a + b);\n+}\n+\n+// The function prints the value of PI using `io:println` function\n+public function printMathConsts() {\n+   io:println(\"Value of PI : \", math:PI);\n+}\n+\n+// This demonstrates different ways to mock functions.\n+import ballerina/test;\n+\n+(any|error)[] outputs = [];\n+\n+@test:Mock {\n+    // This specifies a mock function that should replace the\n+    // imported function `io:println`.\n+    moduleName: \"ballerina/io\",\n+    functionName: \"println\"\n+}\n+function mockIoPrintLn((any|error)... text) {\n+    outputs.push(text);\n+}\n+\n+@test:Config {}\n+function testMathConsts() {\n+   // This function call to `io:println` will be replaced with `mockIoPrintLn`\n+   printMathConsts();\n+   test:assertEquals(outputs[0].toString(), \"Value of PI :  3.141592653589793\");\n+}\n+\n+// This creates an object for stubbing calls to `intAdd` which is written in the same module.\n+@test:MockFn { functionName: \"intAdd\" }\n+test:MockFunction intAddMockFn = new();\n+\n+@test:Config {}\n+function testAssertIntEquals() {\n+    // This stubs the calls to `intAdd` function to return the specified value.\n+    test:when(intAddMockFn).thenReturn(20);\n+\n+    // This stubs the calls to `intAdd` function to return the specified value\n+    // when the specified arguments are provided.\n+    test:when(intAddMockFn).withArguments(0, 0).thenReturn(-1);\n+\n+    test:assertEquals(intAdd(10, 6), 20, msg = \"function mocking failed\");\n+    test:assertEquals(intAdd(0, 0), -1,\n+        msg = \"function mocking with arguments failed\");\n+\n+    // This stubs the calls to `intAdd` function to invoke the specifed function.\n+    test:when(intAddMockFn).call(\"mockIntAdd\");\n+\n+    test:assertEquals(addValues(11, 6), 5, msg = \"function mocking failed\");\n+}\n+\n+// This is a mock function that can be called\n+// in place of `intAdd` function.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NTc4Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469165786", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Replace the content of the `main.bal` and ``main_test.bal` files with the above code\n          \n          \n            \n            # Replace the content of the `main.bal` and ``main_test.bal` files with the above code,", "author": "praneesha", "createdAt": "2020-08-12T10:36:21Z", "path": "examples/testerina-function-mocks/testerina_function_mocks_test.out", "diffHunk": "@@ -0,0 +1,20 @@\n+# To run this sample, create a Ballerina project and a module inside it.\n+# Replace the content of the `main.bal` and ``main_test.bal` files with the above code", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjAxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166018", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // and values of variables<br/><br/>\n          \n          \n            \n            // and values of the variables<br/><br/>", "author": "praneesha", "createdAt": "2020-08-12T10:36:48Z", "path": "examples/testerina-object-mocks/testerina_object_mocks.description", "diffHunk": "@@ -0,0 +1,8 @@\n+// Object mocking enables controlling the values of member variables and the behavior of\n+// the member functions of an object. Mocking of objects can be done in two ways. <br/><br/>\n+// 1. Creating a test double - providing an equivalent mock object in place of the real<br/>\n+// 2. Stubbing the member function or member variable - stubbing the behavior of functions\n+// and values of variables<br/><br/>", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjI0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166240", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This function sends out email to specified email addresses\n          \n          \n            \n            // This function sends out emails to the specified email addresses", "author": "praneesha", "createdAt": "2020-08-12T10:37:18Z", "path": "examples/testerina-object-mocks/testerina_object_mocks_main.bal", "diffHunk": "@@ -0,0 +1,43 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/email;\n+\n+// Clients objects are defined globally to be able to replace in test files.\n+http:Client clientEndpoint = new(\"http://postman-echo.com\");\n+email:SmtpClient smtpClient = new (\"localhost\", \"admin\",\"admin\");\n+\n+// This function performs two `GET` requests to the specified\n+// endpoint and returns the response.\n+function performGet() returns http:Response {\n+    io:println(\"Executing the 1st GET request\");\n+    http:Response|error result = clientEndpoint->get(\"/headers\");\n+    http:Response response = <http:Response>result;\n+    io:println(\"Status code: \" + response.statusCode.toString());\n+\n+    if(response.statusCode == 200) {\n+        io:println(\"Executing the 2nd GET request\");\n+        http:Request req = new;\n+        req.addHeader(\"Sample-Name\", \"http-client-connector\");\n+        result = clientEndpoint->get(\"/get?test=123\", req);\n+        response = <http:Response>result;\n+        io:println(\"Status code: \" + response.statusCode.toString());\n+    }\n+    return response;\n+}\n+\n+// This function sends out email to specified email addresses", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjMyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166322", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // and returns an error if found.\n          \n          \n            \n            // and returns an error if they are not found.", "author": "praneesha", "createdAt": "2020-08-12T10:37:29Z", "path": "examples/testerina-object-mocks/testerina_object_mocks_main.bal", "diffHunk": "@@ -0,0 +1,43 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/email;\n+\n+// Clients objects are defined globally to be able to replace in test files.\n+http:Client clientEndpoint = new(\"http://postman-echo.com\");\n+email:SmtpClient smtpClient = new (\"localhost\", \"admin\",\"admin\");\n+\n+// This function performs two `GET` requests to the specified\n+// endpoint and returns the response.\n+function performGet() returns http:Response {\n+    io:println(\"Executing the 1st GET request\");\n+    http:Response|error result = clientEndpoint->get(\"/headers\");\n+    http:Response response = <http:Response>result;\n+    io:println(\"Status code: \" + response.statusCode.toString());\n+\n+    if(response.statusCode == 200) {\n+        io:println(\"Executing the 2nd GET request\");\n+        http:Request req = new;\n+        req.addHeader(\"Sample-Name\", \"http-client-connector\");\n+        result = clientEndpoint->get(\"/get?test=123\", req);\n+        response = <http:Response>result;\n+        io:println(\"Status code: \" + response.statusCode.toString());\n+    }\n+    return response;\n+}\n+\n+// This function sends out email to specified email addresses\n+// and returns an error if found.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjQxOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166418", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // This is the test double of `http:Client` object with the\n          \n          \n            \n            // This is the test double of the `http:Client` object with the", "author": "praneesha", "createdAt": "2020-08-12T10:37:39Z", "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjQ2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166469", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // implementation of required functions.\n          \n          \n            \n            // implementation of the required functions.", "author": "praneesha", "createdAt": "2020-08-12T10:37:46Z", "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjU1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166551", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This creates and assigns a default mock object which subsequently needs to stubbed.\n          \n          \n            \n                // This creates and assigns a default mock object, which needs to be stubbed  subsequently.", "author": "praneesha", "createdAt": "2020-08-12T10:37:59Z", "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.\n+public type MockHttpClient client object {\n+    public remote function get(@untainted string path,\n+        public http:RequestMessage message = ()) returns\n+            http:Response|http:ClientError {\n+\n+        http:Response res = new;\n+        res.statusCode = 500;\n+        return res;\n+    }\n+};\n+\n+@test:Config {}\n+function testTestDouble() {\n+    // This creates and assigns the defined test-double.\n+    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 500);\n+}\n+\n+@test:Config {}\n+function testReturn() {\n+    // This creates and assigns a default mock object which subsequently needs to stubbed.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NjkyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166920", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // for each call. i.e., The first call will return the status code `200`\n          \n          \n            \n                // for each call (i.e., the first call will return the status code `200`", "author": "praneesha", "createdAt": "2020-08-12T10:38:52Z", "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.\n+public type MockHttpClient client object {\n+    public remote function get(@untainted string path,\n+        public http:RequestMessage message = ()) returns\n+            http:Response|http:ClientError {\n+\n+        http:Response res = new;\n+        res.statusCode = 500;\n+        return res;\n+    }\n+};\n+\n+@test:Config {}\n+function testTestDouble() {\n+    // This creates and assigns the defined test-double.\n+    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 500);\n+}\n+\n+@test:Config {}\n+function testReturn() {\n+    // This creates and assigns a default mock object which subsequently needs to stubbed.\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response.\n+    test:prepare(clientEndpoint).when(\"get\").thenReturn(new http:Response());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 200);\n+}\n+\n+@test:Config {}\n+function testReturnWithArgs() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // when the specified argument is passed.\n+    test:prepare(clientEndpoint).when(\"get\").withArguments(\"/headers\")\n+        .thenReturn(mockResponse);\n+    // The object and record types should be denoted by the `test:ANY` constant\n+    test:prepare(clientEndpoint).when(\"get\")\n+        .withArguments(\"/get?test=123\", test:ANY).thenReturn(mockResponse);\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 404);\n+}\n+\n+@test:Config {}\n+function testReturnSequence() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // for each call. i.e., The first call will return the status code `200`", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2Njk5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469166990", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // and the second call will return the status code `404`.\n          \n          \n            \n                // and the second call will return the status code `404`).", "author": "praneesha", "createdAt": "2020-08-12T10:39:00Z", "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.\n+public type MockHttpClient client object {\n+    public remote function get(@untainted string path,\n+        public http:RequestMessage message = ()) returns\n+            http:Response|http:ClientError {\n+\n+        http:Response res = new;\n+        res.statusCode = 500;\n+        return res;\n+    }\n+};\n+\n+@test:Config {}\n+function testTestDouble() {\n+    // This creates and assigns the defined test-double.\n+    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 500);\n+}\n+\n+@test:Config {}\n+function testReturn() {\n+    // This creates and assigns a default mock object which subsequently needs to stubbed.\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response.\n+    test:prepare(clientEndpoint).when(\"get\").thenReturn(new http:Response());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 200);\n+}\n+\n+@test:Config {}\n+function testReturnWithArgs() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // when the specified argument is passed.\n+    test:prepare(clientEndpoint).when(\"get\").withArguments(\"/headers\")\n+        .thenReturn(mockResponse);\n+    // The object and record types should be denoted by the `test:ANY` constant\n+    test:prepare(clientEndpoint).when(\"get\")\n+        .withArguments(\"/get?test=123\", test:ANY).thenReturn(mockResponse);\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 404);\n+}\n+\n+@test:Config {}\n+function testReturnSequence() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // for each call. i.e., The first call will return the status code `200`\n+    // and the second call will return the status code `404`.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE2NzA4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/25234#discussion_r469167083", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // This stubs the value of `url` to return the specified string.\n          \n          \n            \n                // This stubs the value of the `url` to return the specified string.", "author": "praneesha", "createdAt": "2020-08-12T10:39:14Z", "path": "examples/testerina-object-mocks/testerina_object_mocks_test.bal", "diffHunk": "@@ -0,0 +1,89 @@\n+// This demonstrates different ways to mock a client object.\n+import ballerina/test;\n+import ballerina/http;\n+import ballerina/email;\n+\n+// This is the test double of `http:Client` object with the\n+// implementation of required functions.\n+public type MockHttpClient client object {\n+    public remote function get(@untainted string path,\n+        public http:RequestMessage message = ()) returns\n+            http:Response|http:ClientError {\n+\n+        http:Response res = new;\n+        res.statusCode = 500;\n+        return res;\n+    }\n+};\n+\n+@test:Config {}\n+function testTestDouble() {\n+    // This creates and assigns the defined test-double.\n+    clientEndpoint = test:mock(http:Client, new MockHttpClient());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 500);\n+}\n+\n+@test:Config {}\n+function testReturn() {\n+    // This creates and assigns a default mock object which subsequently needs to stubbed.\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response.\n+    test:prepare(clientEndpoint).when(\"get\").thenReturn(new http:Response());\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 200);\n+}\n+\n+@test:Config {}\n+function testReturnWithArgs() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // when the specified argument is passed.\n+    test:prepare(clientEndpoint).when(\"get\").withArguments(\"/headers\")\n+        .thenReturn(mockResponse);\n+    // The object and record types should be denoted by the `test:ANY` constant\n+    test:prepare(clientEndpoint).when(\"get\")\n+        .withArguments(\"/get?test=123\", test:ANY).thenReturn(mockResponse);\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 404);\n+}\n+\n+@test:Config {}\n+function testReturnSequence() {\n+    http:Response mockResponse = new;\n+    mockResponse.statusCode = 404;\n+\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the `get` function to return the specified HTTP response\n+    // for each call. i.e., The first call will return the status code `200`\n+    // and the second call will return the status code `404`.\n+    test:prepare(clientEndpoint).when(\"get\")\n+        .thenReturnSequence(new http:Response(), mockResponse);\n+    http:Response res = performGet();\n+    test:assertEquals(res.statusCode, 404);\n+}\n+\n+@test:Config {}\n+function testSendNotification() {\n+    smtpClient = test:mock(email:SmtpClient);\n+    // This stubs the `send` method of the `mockSmtpClient` to do nothing.\n+    // This is used for functions with an optional or no return type\n+    test:prepare(smtpClient).when(\"send\").doNothing();\n+    string[] emailIds = [\"user1@test.com\", \"user2@test.com\"];\n+    error? err = sendNotification(emailIds);\n+    test:assertEquals(err, ());\n+\n+}\n+\n+@test:Config {}\n+function testMemberVariable() {\n+    string mockClientUrl = \"http://foo\";\n+    clientEndpoint = test:mock(http:Client);\n+    // This stubs the value of `url` to return the specified string.", "originalCommit": "005c17a50c7f3571a0b99cae1e418ce0fc95068c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8eb28c81396a0f3d1426c614167d10038751edef", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8eb28c81396a0f3d1426c614167d10038751edef", "message": "Add Function mocking and Object mocking BBE", "committedDate": "2020-08-12T11:00:43Z", "type": "forcePushed"}, {"oid": "645a80287bcb1abb5896a0f77043dc888abe0755", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/645a80287bcb1abb5896a0f77043dc888abe0755", "message": "Add Function mocking and Object mocking BBE", "committedDate": "2020-08-12T11:10:42Z", "type": "forcePushed"}, {"oid": "a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc", "message": "Add Function mocking and Object mocking BBE", "committedDate": "2020-08-12T11:12:27Z", "type": "commit"}, {"oid": "a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a2bf4cdb9b6298185b5cd8c67fdf1c800b6192dc", "message": "Add Function mocking and Object mocking BBE", "committedDate": "2020-08-12T11:12:27Z", "type": "forcePushed"}]}