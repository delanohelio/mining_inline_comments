{"pr_number": 22621, "pr_title": "Update xml langlib methods", "pr_createdAt": "2020-04-15T06:41:50Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTkyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r408765924", "bodyText": "Need to add name parameter here.", "author": "rdhananjaya", "createdAt": "2020-04-15T11:17:57Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/ElementChildren.java", "diffHunk": "@@ -15,49 +15,50 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.ballerinalang.langlib.internal;\n+package org.ballerinalang.langlib.xml;\n \n import org.ballerinalang.jvm.XMLNodeType;\n import org.ballerinalang.jvm.scheduling.Strand;\n import org.ballerinalang.jvm.values.XMLItem;\n import org.ballerinalang.jvm.values.XMLSequence;\n import org.ballerinalang.jvm.values.XMLValue;\n-import org.ballerinalang.jvm.values.api.BXML;\n import org.ballerinalang.model.types.TypeKind;\n import org.ballerinalang.natives.annotations.Argument;\n import org.ballerinalang.natives.annotations.BallerinaFunction;\n import org.ballerinalang.natives.annotations.ReturnType;\n \n-import java.util.ArrayList;\n-\n /**\n  * Return lift getChildren over sequences.\n  *\n  * @since 1.2\n  */\n @BallerinaFunction(\n-        orgName = \"ballerina\", packageName = \"lang.__internal\",\n-        functionName = \"children\",\n+        orgName = \"ballerina\", packageName = \"lang.xml\",\n+        functionName = \"elementChildren\",\n         args = {@Argument(name = \"xmlValue\", type = TypeKind.XML)},", "originalCommit": "60cbb21fcf4ed79df63c242a2d4fe15d9dba6d19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyOTMwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r409429301", "bodyText": "Added", "author": "irshadnilam", "createdAt": "2020-04-16T09:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NjU0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r408766541", "bodyText": "I think we can simply do a name == null check here. Instead of instanceof", "author": "rdhananjaya", "createdAt": "2020-04-15T11:19:02Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/ElementChildren.java", "diffHunk": "@@ -15,49 +15,50 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.ballerinalang.langlib.internal;\n+package org.ballerinalang.langlib.xml;\n \n import org.ballerinalang.jvm.XMLNodeType;\n import org.ballerinalang.jvm.scheduling.Strand;\n import org.ballerinalang.jvm.values.XMLItem;\n import org.ballerinalang.jvm.values.XMLSequence;\n import org.ballerinalang.jvm.values.XMLValue;\n-import org.ballerinalang.jvm.values.api.BXML;\n import org.ballerinalang.model.types.TypeKind;\n import org.ballerinalang.natives.annotations.Argument;\n import org.ballerinalang.natives.annotations.BallerinaFunction;\n import org.ballerinalang.natives.annotations.ReturnType;\n \n-import java.util.ArrayList;\n-\n /**\n  * Return lift getChildren over sequences.\n  *\n  * @since 1.2\n  */\n @BallerinaFunction(\n-        orgName = \"ballerina\", packageName = \"lang.__internal\",\n-        functionName = \"children\",\n+        orgName = \"ballerina\", packageName = \"lang.xml\",\n+        functionName = \"elementChildren\",\n         args = {@Argument(name = \"xmlValue\", type = TypeKind.XML)},\n         returnType = {@ReturnType(type = TypeKind.XML)},\n         isPublic = true\n )\n-public class Children {\n+public class ElementChildren {\n \n-    public static XMLValue children(Strand strand, XMLValue xmlVal) {\n+    public static XMLValue elementChildren(Strand strand, XMLValue xmlVal, Object name) {", "originalCommit": "60cbb21fcf4ed79df63c242a2d4fe15d9dba6d19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyOTQzMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r409429431", "bodyText": "+1", "author": "irshadnilam", "createdAt": "2020-04-16T09:52:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc2NjU0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc3NTMxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r408775316", "bodyText": "We need to lift children of children in a sequence\nRefer the comment in langlib signature # This is equivalent to children(x).elements(nm).", "author": "rdhananjaya", "createdAt": "2020-04-15T11:36:34Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/ElementChildren.java", "diffHunk": "@@ -15,49 +15,50 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.ballerinalang.langlib.internal;\n+package org.ballerinalang.langlib.xml;\n \n import org.ballerinalang.jvm.XMLNodeType;\n import org.ballerinalang.jvm.scheduling.Strand;\n import org.ballerinalang.jvm.values.XMLItem;\n import org.ballerinalang.jvm.values.XMLSequence;\n import org.ballerinalang.jvm.values.XMLValue;\n-import org.ballerinalang.jvm.values.api.BXML;\n import org.ballerinalang.model.types.TypeKind;\n import org.ballerinalang.natives.annotations.Argument;\n import org.ballerinalang.natives.annotations.BallerinaFunction;\n import org.ballerinalang.natives.annotations.ReturnType;\n \n-import java.util.ArrayList;\n-\n /**\n  * Return lift getChildren over sequences.\n  *\n  * @since 1.2\n  */\n @BallerinaFunction(\n-        orgName = \"ballerina\", packageName = \"lang.__internal\",\n-        functionName = \"children\",\n+        orgName = \"ballerina\", packageName = \"lang.xml\",\n+        functionName = \"elementChildren\",\n         args = {@Argument(name = \"xmlValue\", type = TypeKind.XML)},\n         returnType = {@ReturnType(type = TypeKind.XML)},\n         isPublic = true\n )\n-public class Children {\n+public class ElementChildren {\n \n-    public static XMLValue children(Strand strand, XMLValue xmlVal) {\n+    public static XMLValue elementChildren(Strand strand, XMLValue xmlVal, Object name) {\n+        boolean namedQuery = name instanceof String;\n         if (xmlVal.getNodeType() == XMLNodeType.ELEMENT) {\n-            return ((XMLItem) xmlVal).children();\n+            if (namedQuery) {\n+                return (XMLValue) ((XMLItem) xmlVal).children().elements((String) name);\n+            }\n+            return (XMLValue) ((XMLItem) xmlVal).children().elements();\n         } else if (xmlVal.getNodeType() == XMLNodeType.SEQUENCE) {\n-            ArrayList<BXML> liftedChildren = new ArrayList<>();\n-            XMLSequence sequence = (XMLSequence) xmlVal.elements();\n-            for (BXML bxml : sequence.getChildrenList()) {\n-                liftedChildren.addAll(((XMLItem) bxml).getChildrenSeq().getChildrenList());\n+            if (namedQuery) {\n+                 return  ((XMLSequence) xmlVal).elements((String) name);", "originalCommit": "60cbb21fcf4ed79df63c242a2d4fe15d9dba6d19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NjAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r408786029", "bodyText": "Shall we move these test cases into Ballerina, as we are targetting to move away from testing in java classes.\nYou can use string comparisons and also comparisons with xml literals.", "author": "rdhananjaya", "createdAt": "2020-04-15T11:56:41Z", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -217,3 +217,52 @@ function testGet() returns [xml|error, xml|error, xml|error, xml|error, xml|erro\n \n     return [e1, e2, c1, item, item2];\n }\n+\n+function testChildren() returns [[int, string, string, string, string], [int, string, string, string]] {", "originalCommit": "60cbb21fcf4ed79df63c242a2d4fe15d9dba6d19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyOTY3Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r409429673", "bodyText": "+1, fixed.", "author": "irshadnilam", "createdAt": "2020-04-16T09:53:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc4NjAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk3NTc5OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r409975798", "bodyText": "Shall we use the same param names as in .bal file\nAnd also type of parameter name is not String it's a union of string and nil", "author": "rdhananjaya", "createdAt": "2020-04-17T03:45:17Z", "path": "langlib/lang.xml/src/main/java/org/ballerinalang/langlib/xml/ElementChildren.java", "diffHunk": "@@ -29,35 +29,54 @@\n import org.ballerinalang.natives.annotations.ReturnType;\n \n import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * Return lift getChildren over sequences.\n  *\n  * @since 1.2\n  */\n @BallerinaFunction(\n-        orgName = \"ballerina\", packageName = \"lang.__internal\",\n-        functionName = \"children\",\n-        args = {@Argument(name = \"xmlValue\", type = TypeKind.XML)},\n+        orgName = \"ballerina\", packageName = \"lang.xml\",\n+        functionName = \"elementChildren\",\n+        args = {@Argument(name = \"xmlValue\", type = TypeKind.XML), @Argument(name = \"name\", type = TypeKind.STRING)},", "originalCommit": "00586a32e7224333d16d4402b9ef6beef22db381", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "73dfe0226dc54c900bbcec2efa50e6252c12b0f8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/73dfe0226dc54c900bbcec2efa50e6252c12b0f8", "message": "Update xml langlib", "committedDate": "2020-04-17T03:51:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MTkyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r409981926", "bodyText": "Shall we add a few test cases with namespaces? You can refer XMLAccessTest in jballerina-unit-test module.", "author": "rdhananjaya", "createdAt": "2020-04-17T04:10:51Z", "path": "langlib/langlib-test/src/test/resources/test-src/xmllib_test.bal", "diffHunk": "@@ -217,3 +217,73 @@ function testGet() returns [xml|error, xml|error, xml|error, xml|error, xml|erro\n \n     return [e1, e2, c1, item, item2];\n }\n+\n+function testChildren() {\n+     xml brands = xml `<Brands><!-- Comment --><Apple>IPhone</Apple><Samsung>Galaxy</Samsung><OP>OP7</OP></Brands>`;\n+\n+     xml p = brands.children(); // equivalent to getChildren()\n+     assert(p.length(), 4);\n+     assert(p.toString(), \"<!-- Comment --><Apple>IPhone</Apple><Samsung>Galaxy</Samsung><OP>OP7</OP>\");\n+\n+     xml seq = brands/*;\n+     xml q = seq.children();\n+     assert(q.length(), 3);\n+     assert(q.toString(), \"IPhoneGalaxyOP7\");\n+}\n+\n+function testElements() {\n+    xml presidents = xml `<Leaders>\n+                            <!-- This is a comment -->\n+                            <US>Obama</US>\n+                            <US>Trump</US>\n+                            <RUS>Putin</RUS>\n+                          </Leaders>`;\n+    xml seq = presidents/*;\n+\n+    xml y = seq.elements();\n+    assert(y.length(), 3);\n+    assert(y.toString(), \"<US>Obama</US><US>Trump</US><RUS>Putin</RUS>\");\n+\n+    xml z = seq.elements(\"RUS\");\n+    assert(z.length(), 1);\n+    assert(z.toString(), \"<RUS>Putin</RUS>\");\n+}\n+\n+function testElementChildren() {\n+    xml letter = xml `<note>\n+                        <to>Tove</to>\n+                        <to>Irshad</to>\n+                        <!-- This is a comment -->\n+                        <from>Jani</from>\n+                        <body>Don't forget me this weekend!</body>\n+                      </note>`;\n+\n+    xml p = letter.elementChildren();\n+    xml q = letter.elementChildren(\"to\");\n+\n+    assert(p.length(), 4);\n+    assert(p.toString(), \"<to>Tove</to><to>Irshad</to><from>Jani</from><body>Don't forget me this weekend!</body>\");\n+    assert(q.length(), 2);\n+    assert(q.toString(), \"<to>Tove</to><to>Irshad</to>\");\n+\n+    xml seq = 'xml:concat(letter, letter);\n+    xml y = seq.elementChildren();\n+    xml z = seq.elementChildren(\"to\");\n+\n+    assert(y.length(), 8);\n+    assert(y.toString(), \"<to>Tove</to><to>Irshad</to><from>Jani</from><body>Don't forget me this weekend!</body>\" +\n+                         \"<to>Tove</to><to>Irshad</to><from>Jani</from><body>Don't forget me this weekend!</body>\");\n+    assert(z.length(), 4);\n+    assert(z.toString(), \"<to>Tove</to><to>Irshad</to><to>Tove</to><to>Irshad</to>\");\n+}\n+\n+function assert(anydata actual, anydata expected) {\n+    if (expected != actual) {\n+        typedesc<anydata> expT = typeof expected;\n+        typedesc<anydata> actT = typeof actual;\n+        string reason = \"expected [\" + expected.toString() + \"] of type [\" + expT.toString()\n+                            + \"], but found [\" + actual.toString() + \"] of type [\" + actT.toString() + \"]\";\n+        error e = error(reason);\n+        panic e;\n+    }\n+}", "originalCommit": "73dfe0226dc54c900bbcec2efa50e6252c12b0f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDg2MzA2OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/22621#discussion_r410863069", "bodyText": "Added with b11efbf", "author": "irshadnilam", "createdAt": "2020-04-19T09:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTk4MTkyNg=="}], "type": "inlineReview"}, {"oid": "b11efbfc5a16c327b1e4a7cc96c276d3141f910a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b11efbfc5a16c327b1e4a7cc96c276d3141f910a", "message": "Add tests with namespaces", "committedDate": "2020-04-19T09:16:35Z", "type": "commit"}]}