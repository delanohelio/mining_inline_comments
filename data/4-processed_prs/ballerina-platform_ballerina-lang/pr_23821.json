{"pr_number": 23821, "pr_title": "Adding multiple resource support for gRPC client/bidi streaming", "pr_createdAt": "2020-06-08T20:47:50Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821", "timeline": [{"oid": "facf1bbf0a8a6a2c27f670d2a7294a24a3931268", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/facf1bbf0a8a6a2c27f670d2a7294a24a3931268", "message": "Changed the gRPC streaming handling on the server side", "committedDate": "2020-06-08T15:03:22Z", "type": "commit"}, {"oid": "b1f191f9ac69353dd467633a4293a75a26d018ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b1f191f9ac69353dd467633a4293a75a26d018ed", "message": "Updated the integration tests and removed the proto generation functionality", "committedDate": "2020-06-08T19:23:08Z", "type": "commit"}, {"oid": "804db38032d34c3dd8a5c013e73b64e951afac47", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/804db38032d34c3dd8a5c013e73b64e951afac47", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into streaming-synch\n\n# Conflicts:\n#\tstdlib/grpc/src/main/java/org/ballerinalang/net/grpc/GrpcConstants.java\n#\tstdlib/grpc/src/main/java/org/ballerinalang/net/grpc/nativeimpl/serviceendpoint/FunctionUtils.java\n#\tstdlib/grpc/src/main/java/org/ballerinalang/net/grpc/proto/ServiceDefinitionValidator.java\n#\tstdlib/grpc/src/main/java/org/ballerinalang/net/grpc/proto/ServiceProtoUtils.java", "committedDate": "2020-06-08T20:20:25Z", "type": "commit"}, {"oid": "21190192c94afc48adfedfcf9c4fb159a6a6de9b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/21190192c94afc48adfedfcf9c4fb159a6a6de9b", "message": "Fixed the grpc:tests", "committedDate": "2020-06-09T04:17:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyODY3MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437928670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                typedesc<anydata> requestType?;\n          \n          \n            \n                typedesc<anydata> responseType?;", "author": "daneshk", "createdAt": "2020-06-10T07:50:57Z", "path": "stdlib/grpc/src/main/ballerina/src/grpc/annotation.bal", "diffHunk": "@@ -21,16 +21,10 @@\n #                   type is derived from the input argument of the resource\n # + responseType - Response message type of the resource. This is an optional field. If it is not specified, the response\n #                   type is derived from the value passed to the send() expression\n-# + clientStreaming - Client streaming flag. This applies only for client streaming and\n-#                     bidirectional streaming. The flag should be set to true if the service is defined as client/bidirectional streaming\n-# + serverStreaming - Server streaming flag. This applies only for bidirectional streaming. The flag\n-#                     should be set to true if the service is defined as bidirectional streaming\n public type GrpcServiceConfig record {|\n     string name = \"\";\n     typedesc<anydata> requestType?;\n     typedesc<anydata> responseType?;", "originalCommit": "21190192c94afc48adfedfcf9c4fb159a6a6de9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyODkyNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437928926", "bodyText": "Shall we remove these two as well?\nWe don't need those", "author": "daneshk", "createdAt": "2020-06-10T07:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyODY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk4NjAwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437986001", "bodyText": "I removed the fields", "author": "daksithj", "createdAt": "2020-06-10T09:24:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkyODY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzODQ5Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437938496", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        error? result = closeStream(self);\n          \n          \n            \n                        if (result is error) {\n          \n          \n            \n                            return result;\n          \n          \n            \n                        } else {\n          \n          \n            \n                            return prepareError (EOS_REASON, \"Stream closed from server side\", result);\n          \n          \n            \n                        }\n          \n          \n            \n                        return closeStream(self);", "author": "daneshk", "createdAt": "2020-06-10T08:07:49Z", "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,46 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError (message = \"Stream is closed. Therefore, \"\n+                           + \"no operations are allowed further on the stream.\");\n+        }\n+        anydata|handle |error? result = nextResult(self);\n+        if (result is anydata) {\n+            if (result is ()) {\n+                self.isClosed = true;\n+                return prepareError (EOS_REASON, \"End of stream reached\", result);\n+            }\n+            return {value: result};\n+        } else if (result is handle) {\n+            return {value: java:toString(result)};\n+        } else {\n+            return result;\n+        }\n+    }\n+\n+    public function close() returns error? {\n+        if (!self.isClosed) {\n+            self.isClosed = true;\n+            error? result = closeStream(self);\n+            if (result is error) {\n+                return result;\n+            } else {\n+                return prepareError (EOS_REASON, \"Stream closed from server side\", result);\n+            }", "originalCommit": "21190192c94afc48adfedfcf9c4fb159a6a6de9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzOTI3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437939279", "bodyText": "If we get (), means we closed successfully", "author": "daneshk", "createdAt": "2020-06-10T08:09:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzODQ5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5MzAyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437993028", "bodyText": "I made the change", "author": "daksithj", "createdAt": "2020-06-10T09:36:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzODQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0Mzk0MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437943941", "bodyText": "Shall we use log API instead of io to print the message?\nOn the server-side, we use log API to log the message.\nOn the client-side, we use io API to print the message.", "author": "daneshk", "createdAt": "2020-06-10T08:16:37Z", "path": "tests/jballerina-integration-test/src/test/resources/grpc/src/grpcservices/04_client_streaming_service.bal", "diffHunk": "@@ -20,32 +20,28 @@ import ballerina/io;\n // Server endpoint configuration\n listener grpc:Listener ep4 = new (9094);\n \n-@grpc:ServiceConfig {name:\"HelloWorld7\",\n-    clientStreaming:true}\n+@grpc:ServiceConfig {name:\"HelloWorld7\"}\n @grpc:ServiceDescriptor {\n     descriptor: ROOT_DESCRIPTOR_4,\n     descMap: getDescriptorMap4()\n }\n service HelloWorld7 on ep4 {\n-    resource function onOpen(grpc:Caller caller) {\n-        io:println(\"connected sucessfully.\");\n-    }\n-\n-    resource function onMessage(grpc:Caller caller, string name) {\n-        io:println(\"greet received: \" + name);\n-    }\n \n-    resource function onError(grpc:Caller caller, error err) {\n-        io:println(\"Something unexpected happens at server : \" + err.reason());\n-    }\n-\n-    resource function onComplete(grpc:Caller caller) {\n-        io:println(\"Server Response\");\n-        grpc:Error? err = caller->send(\"Ack\");\n-        if (err is grpc:Error) {\n-            io:println(\"Error from Connector: \" + err.reason());\n-        } else {\n-            io:println(\"Server send response : Ack\");\n+    resource function lotsOfGreetings(grpc:Caller caller, stream<string, error>clientStream) {\n+        io:println(\"connected sucessfully.\");", "originalCommit": "21190192c94afc48adfedfcf9c4fb159a6a6de9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5MzI5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437993292", "bodyText": "Replaced io with log in both client streaming and bidirectional streaming test cases", "author": "daksithj", "createdAt": "2020-06-10T09:36:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk0Mzk0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NTU4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437955582", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String RESOURCE_CONFIG_STREAMING = \"streaming\";\n          \n          \n            \n                public static final String RESOURCE_CONFIG_REQUEST_TYPE = \"requestType\";\n          \n          \n            \n                public static final String RESOURCE_CONFIG_RESPONSE_TYPE = \"responseType\";", "author": "daneshk", "createdAt": "2020-06-10T08:35:12Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/proto/ServiceProtoConstants.java", "diffHunk": "@@ -52,10 +52,6 @@\n     public static final String ANN_SERVICE_CONFIG_FQN = PROTOCOL_STRUCT_PACKAGE_GRPC + \":ServiceConfig\";\n     public static final String ANN_RESOURCE_CONFIG = \"ResourceConfig\";\n \n-    public static final String SERVICE_CONFIG_RPC_ENDPOINT = \"name\";\n-    public static final String SERVICE_CONFIG_CLIENT_STREAMING = \"clientStreaming\";\n-    public static final String SERVICE_CONFIG_SERVER_STREAMING = \"serverStreaming\";\n-\n     public static final String RESOURCE_CONFIG_STREAMING = \"streaming\";\n     public static final String RESOURCE_CONFIG_REQUEST_TYPE = \"requestType\";\n     public static final String RESOURCE_CONFIG_RESPONSE_TYPE = \"responseType\";", "originalCommit": "21190192c94afc48adfedfcf9c4fb159a6a6de9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NTkyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437955928", "bodyText": "We can remove resource config annotation completely", "author": "daneshk", "createdAt": "2020-06-10T08:35:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NTU4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODAyNjcyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438026729", "bodyText": "I completely removed the resource config", "author": "daksithj", "createdAt": "2020-06-10T10:36:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk1NTU4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2MzM4NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437963384", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.requestType = requestType;\n          \n          \n            \n                    this.responseType = responseType;", "author": "daneshk", "createdAt": "2020-06-10T08:47:51Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/config/ServiceConfiguration.java", "diffHunk": "@@ -29,29 +29,16 @@\n     private String rpcEndpoint;\n     private BType requestType;\n     private BType responseType;\n-    private boolean clientStreaming;\n-    private boolean serverStreaming;\n \n-    public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType, boolean clientStreaming,\n-                                boolean serverStreaming) {\n+    public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType) {\n         this.rpcEndpoint = rpcEndpoint;\n         this.requestType = requestType;\n         this.responseType = responseType;", "originalCommit": "21190192c94afc48adfedfcf9c4fb159a6a6de9b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk5MzU1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r437993555", "bodyText": "I removed these two fields and the getters", "author": "daksithj", "createdAt": "2020-06-10T09:37:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk2MzM4NA=="}], "type": "inlineReview"}, {"oid": "8d784ea1573a395e131e97b06e407f991a88c8db", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d784ea1573a395e131e97b06e407f991a88c8db", "message": "Made the changes suggested in the review", "committedDate": "2020-06-10T10:39:18Z", "type": "commit"}, {"oid": "3341b67ac22ccd6ec66df2c7004f8b83bed95b7a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3341b67ac22ccd6ec66df2c7004f8b83bed95b7a", "message": "Fixed some related lang-server tests", "committedDate": "2020-06-10T12:57:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1OTI4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438259280", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            return prepareError (EOS_REASON, \"End of stream reached\", result);\n          \n          \n            \n                            return prepareError(EOS_REASON, \"End of stream reached\", result);", "author": "daneshk", "createdAt": "2020-06-10T16:33:08Z", "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,41 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError (message = \"Stream is closed. Therefore, \"\n+                           + \"no operations are allowed further on the stream.\");\n+        }\n+        anydata|handle |error? result = nextResult(self);\n+        if (result is anydata) {\n+            if (result is ()) {\n+                self.isClosed = true;\n+                return prepareError (EOS_REASON, \"End of stream reached\", result);", "originalCommit": "3341b67ac22ccd6ec66df2c7004f8b83bed95b7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODI1OTQ2Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438259466", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return StreamEndError (message = \"Stream is closed. Therefore, \"\n          \n          \n            \n                        return StreamEndError(message = \"Stream is closed. Therefore, \"", "author": "daneshk", "createdAt": "2020-06-10T16:33:25Z", "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,41 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError (message = \"Stream is closed. Therefore, \"", "originalCommit": "3341b67ac22ccd6ec66df2c7004f8b83bed95b7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3e0be416a23f70f815a4b71d4c3aa9d1058519ed", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3e0be416a23f70f815a4b71d4c3aa9d1058519ed", "message": "Update stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal\n\nCo-authored-by: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-06-10T16:56:19Z", "type": "commit"}, {"oid": "123803e423fd3006f864392e06d90af3e794d33d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/123803e423fd3006f864392e06d90af3e794d33d", "message": "Update stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal\n\nCo-authored-by: Danesh Kuruppu <daneshk@users.noreply.github.com>", "committedDate": "2020-06-10T16:56:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4MDg1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438680850", "bodyText": "Shall we rename it as StreamClosedError", "author": "daneshk", "createdAt": "2020-06-11T10:08:46Z", "path": "stdlib/grpc/src/main/ballerina/src/grpc/grpc_errors.bal", "diffHunk": "@@ -113,17 +113,27 @@ public type ResiliencyErrorType ALL_RETRY_ATTEMPTS_FAILED;\n # Represents all the resiliency-related errors.\n public type ResiliencyError AllRetryAttemptsFailed;\n \n+# Represents the reason of calling next after the stream has closed.\n+public const STREAM_END_REASON = \"{ballerina/grpc}StreamEndError\";\n+# Represents an error when calling next when the stream has closed.\n+public type StreamEndError error<STREAM_END_REASON, Detail>;", "originalCommit": "123803e423fd3006f864392e06d90af3e794d33d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgxNTE1Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438815152", "bodyText": "Renamed it", "author": "daksithj", "createdAt": "2020-06-11T14:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4MDg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4MTA4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438681081", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    anydata|handle |error? result = nextResult(self);\n          \n          \n            \n                    anydata|handle|error? result = nextResult(self);", "author": "daneshk", "createdAt": "2020-06-11T10:09:14Z", "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,41 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError(message = \"Stream is closed. Therefore, \"\n+                           + \"no operations are allowed further on the stream.\");\n+        }\n+        anydata|handle |error? result = nextResult(self);", "originalCommit": "123803e423fd3006f864392e06d90af3e794d33d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4MTIzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438681232", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return StreamEndError (message = \"Stream is closed. Therefore, \"\n          \n          \n            \n                        return StreamEndError(message = \"Stream is closed. Therefore, \"", "author": "daneshk", "createdAt": "2020-06-11T10:09:30Z", "path": "stdlib/grpc/src/main/ballerina/src/grpc/service_endpoint.bal", "diffHunk": "@@ -94,6 +94,41 @@ public type Listener object {\n     }\n };\n \n+# The stream iterator object that is used to iterate through the stream messages.\n+#\n+type StreamIterator object {\n+    private boolean isClosed = false;\n+\n+    public function next() returns record {|anydata value;|}|error? {\n+        if (self.isClosed) {\n+            return StreamEndError(message = \"Stream is closed. Therefore, \"\n+                           + \"no operations are allowed further on the stream.\");\n+        }\n+        anydata|handle |error? result = nextResult(self);\n+        if (result is anydata) {\n+            if (result is ()) {\n+                self.isClosed = true;\n+                return prepareError(EOS_REASON, \"End of stream reached\", result);\n+            }\n+            return {value: result};\n+        } else if (result is handle) {\n+            return {value: java:toString(result)};\n+        } else {\n+            return result;\n+        }\n+    }\n+\n+    public function close() returns error? {\n+        if (!self.isClosed) {\n+            self.isClosed = true;\n+            return closeStream(self);\n+        } else {\n+            return StreamEndError (message = \"Stream is closed. Therefore, \"", "originalCommit": "123803e423fd3006f864392e06d90af3e794d33d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4NTAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438685029", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else if (inputType != null && \"stream\".equals(inputType.getName())) {\n          \n          \n            \n                        } else if (inputType instanceof BStreamType) {", "author": "daneshk", "createdAt": "2020-06-11T10:17:03Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/ServicesBuilderUtils.java", "diffHunk": "@@ -286,6 +280,8 @@ private static BType getResourceInputParameterType(AttachedFunction attachedFunc\n             if (inputType != null && \"Headers\".equals(inputType.getName()) &&\n                     inputType.getPackage() != null && PROTOCOL_PACKAGE_GRPC.equals(inputType.getPackage().getName())) {\n                 return BTypes.typeNull;\n+            } else if (inputType != null && \"stream\".equals(inputType.getName())) {", "originalCommit": "123803e423fd3006f864392e06d90af3e794d33d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY4NTg0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438685843", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType) {\n          \n          \n            \n                public ServiceConfiguration(String rpcEndpoint) {", "author": "daneshk", "createdAt": "2020-06-11T10:18:32Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/config/ServiceConfiguration.java", "diffHunk": "@@ -27,37 +27,12 @@\n public class ServiceConfiguration {\n \n     private String rpcEndpoint;\n-    private BType requestType;\n-    private BType responseType;\n-    private boolean clientStreaming;\n-    private boolean serverStreaming;\n \n-    public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType, boolean clientStreaming,\n-                                boolean serverStreaming) {\n+    public ServiceConfiguration(String rpcEndpoint, BType requestType, BType responseType) {", "originalCommit": "123803e423fd3006f864392e06d90af3e794d33d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNzA0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438737043", "bodyText": "If we can implement it using Java Queue, we can eliminate semaphore usage, right?", "author": "daneshk", "createdAt": "2020-06-11T12:10:40Z", "path": "stdlib/grpc/src/main/java/org/ballerinalang/net/grpc/listener/StreamingServerCallHandler.java", "diffHunk": "@@ -43,57 +58,87 @@\n  */\n public class StreamingServerCallHandler extends ServerCallHandler {\n \n-    private final Map<String, ServiceResource> resourceMap;\n+    private final ServiceResource resource;\n+    private final BType inputType;\n \n-    public StreamingServerCallHandler(Descriptors.MethodDescriptor methodDescriptor, Map<String, ServiceResource>\n-            resourceMap) throws GrpcServerException {\n+    public StreamingServerCallHandler(Descriptors.MethodDescriptor methodDescriptor, ServiceResource resource,\n+                                      BType inputType) throws GrpcServerException {\n         super(methodDescriptor);\n-        validateStreamingResources(resourceMap);\n-        this.resourceMap = resourceMap;\n+        if (resource == null) {\n+            throw new GrpcServerException(\"Streaming service resource doesn't exist.\");\n+        }\n+        this.resource = resource;\n+        this.inputType = inputType;\n     }\n \n     @Override\n     public Listener startCall(ServerCall call) {\n         ServerCallStreamObserver responseObserver = new ServerCallStreamObserver(call);\n-        StreamObserver requestObserver = invoke(responseObserver, call.getObserverContext());\n-        return new StreamingServerCallListener(requestObserver, responseObserver);\n+        StreamObserver requestObserver = invoke(responseObserver, call);\n+        return new StreamingServerCallHandler.StreamingServerCallListener(requestObserver, responseObserver);\n     }\n \n-    private StreamObserver invoke(StreamObserver responseObserver, ObserverContext context) {\n-        ServiceResource onOpen = resourceMap.get(GrpcConstants.ON_OPEN_RESOURCE);\n-        StreamingCallableUnitCallBack callback = new StreamingCallableUnitCallBack(responseObserver, context);\n-        Map<String, Object> properties = new HashMap<>();\n-        if (ObserveUtils.isObservabilityEnabled()) {\n-            properties.put(ObservabilityConstants.KEY_OBSERVER_CONTEXT, context);\n+    private StreamObserver invoke(StreamObserver responseObserver, ServerCall call) {\n+        ObserverContext context = call.getObserverContext();\n+        ObjectValue streamIterator = BallerinaValues.createObjectValue(GrpcConstants.PROTOCOL_GRPC_PKG_ID,\n+                ITERATOR_OBJECT_NAME, new Object[1]);\n+        Semaphore listenerSemaphore = new Semaphore(1, true);\n+        Semaphore iteratorSemaphore = new Semaphore(0, true);\n+        streamIterator.addNativeData(LISTENER_LOCK, listenerSemaphore);\n+        streamIterator.addNativeData(ITERATOR_LOCK, iteratorSemaphore);\n+        streamIterator.addNativeData(CLIENT_ENDPOINT_TYPE, getConnectionParameter(responseObserver));\n+        StreamValue requestStream = new StreamValue(new BStreamType(inputType), streamIterator);\n+        onStreamInvoke(resource, requestStream, call.getHeaders(), responseObserver, context);\n+        return new StreamingServerRequestObserver(streamIterator, iteratorSemaphore, listenerSemaphore);\n+    }\n+\n+    private static final class StreamingServerRequestObserver implements StreamObserver {\n+        \n+        private final ObjectValue streamIterator;\n+        private final Semaphore iteratorSemaphore;\n+        private final Semaphore listenerSemaphore;\n+\n+        StreamingServerRequestObserver(ObjectValue streamIterator, Semaphore iteratorSemaphore,\n+                                       Semaphore listenerSemaphore) {\n+            this.streamIterator = streamIterator;\n+            this.iteratorSemaphore = iteratorSemaphore;\n+            this.listenerSemaphore = listenerSemaphore;\n         }\n-        onOpen.getRuntime().invokeMethodAsync(onOpen.getService(), onOpen.getFunctionName(), callback, properties,\n-                computeMessageParams(onOpen, null, responseObserver));\n-        callback.available.acquireUninterruptibly();\n-\n-        return new StreamObserver() {\n-            @Override\n-            public void onNext(Message value) {\n-                ServiceResource onMessage = resourceMap.get(GrpcConstants.ON_MESSAGE_RESOURCE);\n-\n-                CallableUnitCallback callback = new StreamingCallableUnitCallBack(responseObserver, context);\n-                onMessage.getRuntime().invokeMethodAsync(onMessage.getService(), onMessage.getFunctionName(),\n-                        callback, properties, computeMessageParams(onMessage, value, responseObserver));\n-            }\n \n-            @Override\n-            public void onError(Message error) {\n-                ServiceResource onError = resourceMap.get(GrpcConstants.ON_ERROR_RESOURCE);\n-                onErrorInvoke(onError, responseObserver, error, context);\n+        @Override\n+        public void onNext(Message value) {\n+            try {\n+                listenerSemaphore.acquire();", "originalCommit": "123803e423fd3006f864392e06d90af3e794d33d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNzc3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/23821#discussion_r438737777", "bodyText": "Once we get a message, error, or eos, we add it to a queue, and we dequeue it in next(). This will also preserve the order", "author": "daneshk", "createdAt": "2020-06-11T12:12:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODczNzA0Mw=="}], "type": "inlineReview"}, {"oid": "c64dfc401fbedca5ebd68d340a32a77683790bf0", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c64dfc401fbedca5ebd68d340a32a77683790bf0", "message": "Made changes according to review", "committedDate": "2020-06-11T22:17:12Z", "type": "commit"}, {"oid": "eee6030b17314a10aa01615d48f2b903f931861a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eee6030b17314a10aa01615d48f2b903f931861a", "message": "Made changes according to review", "committedDate": "2020-06-11T22:18:27Z", "type": "commit"}, {"oid": "e9c28b4d99ba676098e42220aba5e585e211c28e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e9c28b4d99ba676098e42220aba5e585e211c28e", "message": "Reviewd according to suggestions", "committedDate": "2020-06-11T22:24:41Z", "type": "commit"}, {"oid": "340c1815ba51bee96a4c6815c1a6cadad03b238a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/340c1815ba51bee96a4c6815c1a6cadad03b238a", "message": "Renaming stream closed error", "committedDate": "2020-06-12T06:26:34Z", "type": "commit"}]}