{"pr_number": 20753, "pr_title": "Implement  APIs  for  HTTP  persistent cookies", "pr_createdAt": "2020-01-28T04:28:25Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753", "timeline": [{"oid": "7bfacf09f22df749224bca66340625d5d06ddee3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7bfacf09f22df749224bca66340625d5d06ddee3", "message": "Add persistent cookies", "committedDate": "2020-01-13T08:26:06Z", "type": "commit"}, {"oid": "186e1ad60e25367def93529d450362328da29986", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/186e1ad60e25367def93529d450362328da29986", "message": "Add more functions into Cookie-Store", "committedDate": "2020-01-13T08:38:53Z", "type": "commit"}, {"oid": "538f2d80bd352c9541660ec6d4c28cd6aa1541ec", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/538f2d80bd352c9541660ec6d4c28cd6aa1541ec", "message": "Add limits on the number of cookies in cookie-store", "committedDate": "2020-01-13T08:56:42Z", "type": "commit"}, {"oid": "bd531e2ea345b44b811fa47c8e97d259000e5b38", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bd531e2ea345b44b811fa47c8e97d259000e5b38", "message": "Change cookie configuration", "committedDate": "2020-01-16T04:09:15Z", "type": "commit"}, {"oid": "ee2c275240a8824f49c96d7899f63fb7b28ab944", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ee2c275240a8824f49c96d7899f63fb7b28ab944", "message": "Add validateFileExtension function", "committedDate": "2020-01-16T09:50:32Z", "type": "commit"}, {"oid": "f4c02b1b9792a8576e9a93682d06f04214be1d2a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f4c02b1b9792a8576e9a93682d06f04214be1d2a", "message": "Change variable names in cookie", "committedDate": "2020-01-22T10:57:05Z", "type": "commit"}, {"oid": "377a86a5c9a3a042725336eabdcd0cd79349a747", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/377a86a5c9a3a042725336eabdcd0cd79349a747", "message": "Change cookie store functions", "committedDate": "2020-01-22T10:59:23Z", "type": "commit"}, {"oid": "90bd156e50d6bfd37fc997980168a9c592f56bc5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/90bd156e50d6bfd37fc997980168a9c592f56bc5", "message": "Change cookie configuration", "committedDate": "2020-01-22T11:00:31Z", "type": "commit"}, {"oid": "cca53b9ee14cbf4ae2fd31a2a8ec790acd4d832b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/cca53b9ee14cbf4ae2fd31a2a8ec790acd4d832b", "message": "Add Integration Tests", "committedDate": "2020-01-22T11:02:11Z", "type": "commit"}, {"oid": "4c83b4c7275a9d8bd4301e0d89711db161cccd52", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/4c83b4c7275a9d8bd4301e0d89711db161cccd52", "message": "Add unit tests", "committedDate": "2020-01-22T11:03:01Z", "type": "commit"}, {"oid": "92129a0822a677c9cd7a04a25b99f3eca4bb97c8", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/92129a0822a677c9cd7a04a25b99f3eca4bb97c8", "message": "Change variable names in addCookies function", "committedDate": "2020-01-22T11:03:55Z", "type": "commit"}, {"oid": "70a8d83a4576adf6a6385abfa4275a3e2a6f248d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/70a8d83a4576adf6a6385abfa4275a3e2a6f248d", "message": "Add CookieHandlingError", "committedDate": "2020-01-23T08:15:47Z", "type": "commit"}, {"oid": "b3e3918357767d838faf6ad7131c27776e0c8054", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3e3918357767d838faf6ad7131c27776e0c8054", "message": "Add log-warning when using persistent cookies", "committedDate": "2020-01-24T05:50:22Z", "type": "commit"}, {"oid": "6167c6daf0d7607b129e4c7963f41c64582da848", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/6167c6daf0d7607b129e4c7963f41c64582da848", "message": "Change csv persistent cookie handler", "committedDate": "2020-01-24T12:08:02Z", "type": "commit"}, {"oid": "1b0ba4db425bf37bcba28043315adb23cd6dfa3a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1b0ba4db425bf37bcba28043315adb23cd6dfa3a", "message": "Change csv persistent cookie handler", "committedDate": "2020-01-25T15:45:31Z", "type": "commit"}, {"oid": "bed1e0171b4f30291b25349cfb9fc82afd8260ea", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/bed1e0171b4f30291b25349cfb9fc82afd8260ea", "message": "Change unit tests and integration tests", "committedDate": "2020-01-26T10:50:48Z", "type": "commit"}, {"oid": "aa6bd5b442ccb1847662805e4db18fff06680204", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/aa6bd5b442ccb1847662805e4db18fff06680204", "message": "Change language server unit tests", "committedDate": "2020-01-26T10:58:25Z", "type": "commit"}, {"oid": "3020a7e8db34f0cb0d0105cf59c2058edc6b069b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3020a7e8db34f0cb0d0105cf59c2058edc6b069b", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into apis-with-persistent-cookies", "committedDate": "2020-01-26T10:59:25Z", "type": "commit"}, {"oid": "b114da78a34acb4e5d708ffffe21c9ddb9cdb411", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b114da78a34acb4e5d708ffffe21c9ddb9cdb411", "message": "Fix issue in csv persistent cookie handler", "committedDate": "2020-01-27T06:30:32Z", "type": "commit"}, {"oid": "c4dc661c6c194c4fb64aef48c5a501532bf12879", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/c4dc661c6c194c4fb64aef48c5a501532bf12879", "message": "Change tests", "committedDate": "2020-01-27T06:32:20Z", "type": "commit"}, {"oid": "3bf9fc28385034d16a8d24dc87e70f584b360154", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3bf9fc28385034d16a8d24dc87e70f584b360154", "message": "Change language server unit tests", "committedDate": "2020-01-27T12:04:36Z", "type": "commit"}, {"oid": "f07ec9842660728b8b36973efc601351ebc50a00", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f07ec9842660728b8b36973efc601351ebc50a00", "message": "Change variable names in cookie file", "committedDate": "2020-01-27T16:06:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODUwNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371608507", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + persistentCookieHandler - To manage persistent cookies, users are provided with a mechanism for specifying a persistent cookie store with thier own mechanism\n          \n          \n            \n            # + persistentCookieHandler - To manage persistent cookies, users are provided with a mechanism for specifying a persistent cookie store with their own mechanism,", "author": "praneesha", "createdAt": "2020-01-28T04:46:13Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -370,19 +370,17 @@ public type OutboundAuthConfig record {|\n # Client configuration for cookies.\n #\n # + enabled - User agents provide users with a mechanism for disabling or enabling cookies\n-# + maxSizePerCookie -  Maximum number of bytes per cookie (as measured by the sum of the length of the cookie\u2019s name, value, and  attributes), which is 4096 bytes\n # + maxCookiesPerDomain - Maximum number of cookies per domain, which is 50\n # + maxTotalCookieCount - Maximum number of total cookies allowed to be stored in cookie store, which is 3000\n # + blockThirdPartyCookies - User can block cookies from third party responses and refuse to send cookies for third party requests, if needed\n-# + enablePersistence - Users are provided with a mechanism for enabling or disabling persistent cookies, which are stored until a specific expiration date.\n-#                     If false, only session cookies are used\n+# + persistentCookieHandler - To manage persistent cookies, users are provided with a mechanism for specifying a persistent cookie store with thier own mechanism", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODY1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371608650", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #                     which references the persistent cookie handler or specifying the csv persistent cookie handler. If not specified any, only session cookies are used\n          \n          \n            \n            # which references the persistent cookie handler or specifying the CSV persistent cookie handler. If not specified any, only the session cookies are used.", "author": "praneesha", "createdAt": "2020-01-28T04:47:10Z", "path": "stdlib/http/src/main/ballerina/src/http/client_endpoint.bal", "diffHunk": "@@ -370,19 +370,17 @@ public type OutboundAuthConfig record {|\n # Client configuration for cookies.\n #\n # + enabled - User agents provide users with a mechanism for disabling or enabling cookies\n-# + maxSizePerCookie -  Maximum number of bytes per cookie (as measured by the sum of the length of the cookie\u2019s name, value, and  attributes), which is 4096 bytes\n # + maxCookiesPerDomain - Maximum number of cookies per domain, which is 50\n # + maxTotalCookieCount - Maximum number of total cookies allowed to be stored in cookie store, which is 3000\n # + blockThirdPartyCookies - User can block cookies from third party responses and refuse to send cookies for third party requests, if needed\n-# + enablePersistence - Users are provided with a mechanism for enabling or disabling persistent cookies, which are stored until a specific expiration date.\n-#                     If false, only session cookies are used\n+# + persistentCookieHandler - To manage persistent cookies, users are provided with a mechanism for specifying a persistent cookie store with thier own mechanism\n+#                     which references the persistent cookie handler or specifying the csv persistent cookie handler. If not specified any, only session cookies are used", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODc2Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371608767", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # + createdTime - Created time of the cookie\n          \n          \n            \n            # + createdTime - At what time the cookie was created", "author": "praneesha", "createdAt": "2020-01-28T04:47:48Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -28,7 +28,7 @@ import ballerina/time;\n # + expires - Maximum lifetime of the cookie represented as the date and time at which the cookie expires\n # + httpOnly - Cookie is sent only to HTTP requests\n # + secure - Cookie is sent only to secure channels\n-# + creationTime - Creation time of the cookie\n+# + createdTime - Created time of the cookie", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODkxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371608911", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                log:printWarn(\"Client has not configured to use persistent cookies.Hence, persistent cookies from \" + domain + \" will be discarded.\");\n          \n          \n            \n                                log:printWarn(\"Client is not configured to use persistent cookies. Hence, persistent cookies from \" + domain + \" will be discarded.\");", "author": "praneesha", "createdAt": "2020-01-28T04:48:45Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -51,12 +66,20 @@ public type CookieStore object {\n                 return;\n             }\n             if (cookie.isPersistent()) {\n-                if (!cookieConfig.enablePersistence) {\n-                    return;\n+                var persistentCookieHandler = self.persistentCookieHandler;\n+                if (persistentCookieHandler is PersistentCookieHandler) {\n+                    var result = addPersistentCookie(identicalCookie, cookie, url, persistentCookieHandler, self);\n+                    if (result is error) {\n+                        log:printError(\"Error in adding persistent cookies: \", err = result);\n+                    }\n+                } else if (isFirstRequest(self.allSessionCookies, domain)) {\n+                    log:printWarn(\"Client has not configured to use persistent cookies.Hence, persistent cookies from \" + domain + \" will be discarded.\");", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODk0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371608949", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets all the cookies which have the given name as the name of the cookie.\n          \n          \n            \n                # Gets all the cookies, which have the given name as the name of the cookie.", "author": "praneesha", "createdAt": "2020-01-28T04:48:57Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwODk3Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371608977", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets all the cookies which have the given name as the domain of the cookie.\n          \n          \n            \n                # Gets all the cookies, which have the given name as the domain of the cookie.", "author": "praneesha", "createdAt": "2020-01-28T04:49:08Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTAwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + domain - name of the domain\n          \n          \n            \n                # + domain - Name of the domain", "author": "praneesha", "createdAt": "2020-01-28T04:49:16Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTA1NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609055", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:49:37Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByDomain(string domain) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.domain == domain) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n     }\n \n     # Removes a specific cookie.\n     #\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - Return true if the relevant cookie is removed, false otherwise\n-    public function removeCookie(string name, string domain, string path) returns boolean {\n-         lock {\n-             // Removes the session cookie in the cookie store, which is matched with the given name, domain and path.\n-             int k = 0;\n-             while (k < self.allSessionCookies.length()) {\n-                 if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n-                     int j = k;\n-                     while (j < self.allSessionCookies.length()-1) {\n-                         self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n-                         j = j + 1;\n-                     }\n-                     _ = self.allSessionCookies.pop();\n-                     return true;\n-                 }\n-                 k = k + 1;\n-             }\n-             return false;\n-         }\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTA3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609078", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain and path.\n          \n          \n            \n                        // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain, and path.", "author": "praneesha", "createdAt": "2020-01-28T04:49:50Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByDomain(string domain) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.domain == domain) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n     }\n \n     # Removes a specific cookie.\n     #\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - Return true if the relevant cookie is removed, false otherwise\n-    public function removeCookie(string name, string domain, string path) returns boolean {\n-         lock {\n-             // Removes the session cookie in the cookie store, which is matched with the given name, domain and path.\n-             int k = 0;\n-             while (k < self.allSessionCookies.length()) {\n-                 if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n-                     int j = k;\n-                     while (j < self.allSessionCookies.length()-1) {\n-                         self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n-                         j = j + 1;\n-                     }\n-                     _ = self.allSessionCookies.pop();\n-                     return true;\n-                 }\n-                 k = k + 1;\n-             }\n-             return false;\n-         }\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns error? {\n+        lock {\n+            // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain and path.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTEwMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609102", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Removes the persistent cookie if it is in the persistent cookie store, which is matched with the given name, domain and path.\n          \n          \n            \n                        // Removes the persistent cookie if it is in the persistent cookie store, which is matched with the given name, domain, and path.", "author": "praneesha", "createdAt": "2020-01-28T04:50:00Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByDomain(string domain) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.domain == domain) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n     }\n \n     # Removes a specific cookie.\n     #\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - Return true if the relevant cookie is removed, false otherwise\n-    public function removeCookie(string name, string domain, string path) returns boolean {\n-         lock {\n-             // Removes the session cookie in the cookie store, which is matched with the given name, domain and path.\n-             int k = 0;\n-             while (k < self.allSessionCookies.length()) {\n-                 if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n-                     int j = k;\n-                     while (j < self.allSessionCookies.length()-1) {\n-                         self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n-                         j = j + 1;\n-                     }\n-                     _ = self.allSessionCookies.pop();\n-                     return true;\n-                 }\n-                 k = k + 1;\n-             }\n-             return false;\n-         }\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns error? {\n+        lock {\n+            // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain and path.\n+            int k = 0;\n+            while (k < self.allSessionCookies.length()) {\n+                if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n+                    int j = k;\n+                    while (j < self.allSessionCookies.length()-1) {\n+                        self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n+                        j = j + 1;\n+                    }\n+                    _ = self.allSessionCookies.pop();\n+                    return;\n+                }\n+                k = k + 1;\n+            }\n+            // Removes the persistent cookie if it is in the persistent cookie store, which is matched with the given name, domain and path.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTEyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609121", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Removes cookies which match with the given domain.\n          \n          \n            \n                # Removes cookies, which match with the given domain.", "author": "praneesha", "createdAt": "2020-01-28T04:50:08Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByDomain(string domain) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.domain == domain) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n     }\n \n     # Removes a specific cookie.\n     #\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - Return true if the relevant cookie is removed, false otherwise\n-    public function removeCookie(string name, string domain, string path) returns boolean {\n-         lock {\n-             // Removes the session cookie in the cookie store, which is matched with the given name, domain and path.\n-             int k = 0;\n-             while (k < self.allSessionCookies.length()) {\n-                 if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n-                     int j = k;\n-                     while (j < self.allSessionCookies.length()-1) {\n-                         self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n-                         j = j + 1;\n-                     }\n-                     _ = self.allSessionCookies.pop();\n-                     return true;\n-                 }\n-                 k = k + 1;\n-             }\n-             return false;\n-         }\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns error? {\n+        lock {\n+            // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain and path.\n+            int k = 0;\n+            while (k < self.allSessionCookies.length()) {\n+                if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n+                    int j = k;\n+                    while (j < self.allSessionCookies.length()-1) {\n+                        self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n+                        j = j + 1;\n+                    }\n+                    _ = self.allSessionCookies.pop();\n+                    return;\n+                }\n+                k = k + 1;\n+            }\n+            // Removes the persistent cookie if it is in the persistent cookie store, which is matched with the given name, domain and path.\n+            var persistentCookieHandler = self.persistentCookieHandler;\n+            if (persistentCookieHandler is PersistentCookieHandler) {\n+                return persistentCookieHandler.removeCookie(name, domain, path);\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+        }\n+    }\n+\n+    # Removes cookies which match with the given domain.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTE1Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609156", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during removing cookies by domain or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the removal of cookies by domain or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:50:22Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByDomain(string domain) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.domain == domain) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n     }\n \n     # Removes a specific cookie.\n     #\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - Return true if the relevant cookie is removed, false otherwise\n-    public function removeCookie(string name, string domain, string path) returns boolean {\n-         lock {\n-             // Removes the session cookie in the cookie store, which is matched with the given name, domain and path.\n-             int k = 0;\n-             while (k < self.allSessionCookies.length()) {\n-                 if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n-                     int j = k;\n-                     while (j < self.allSessionCookies.length()-1) {\n-                         self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n-                         j = j + 1;\n-                     }\n-                     _ = self.allSessionCookies.pop();\n-                     return true;\n-                 }\n-                 k = k + 1;\n-             }\n-             return false;\n-         }\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns error? {\n+        lock {\n+            // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain and path.\n+            int k = 0;\n+            while (k < self.allSessionCookies.length()) {\n+                if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n+                    int j = k;\n+                    while (j < self.allSessionCookies.length()-1) {\n+                        self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n+                        j = j + 1;\n+                    }\n+                    _ = self.allSessionCookies.pop();\n+                    return;\n+                }\n+                k = k + 1;\n+            }\n+            // Removes the persistent cookie if it is in the persistent cookie store, which is matched with the given name, domain and path.\n+            var persistentCookieHandler = self.persistentCookieHandler;\n+            if (persistentCookieHandler is PersistentCookieHandler) {\n+                return persistentCookieHandler.removeCookie(name, domain, path);\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+        }\n+    }\n+\n+    # Removes cookies which match with the given domain.\n+    #\n+    # + domain - Domain of the cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing cookies by domain or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTIwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609205", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during removing expired cookies or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the removal of expired cookies or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:50:37Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByDomain(string domain) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.domain == domain) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n     }\n \n     # Removes a specific cookie.\n     #\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - Return true if the relevant cookie is removed, false otherwise\n-    public function removeCookie(string name, string domain, string path) returns boolean {\n-         lock {\n-             // Removes the session cookie in the cookie store, which is matched with the given name, domain and path.\n-             int k = 0;\n-             while (k < self.allSessionCookies.length()) {\n-                 if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n-                     int j = k;\n-                     while (j < self.allSessionCookies.length()-1) {\n-                         self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n-                         j = j + 1;\n-                     }\n-                     _ = self.allSessionCookies.pop();\n-                     return true;\n-                 }\n-                 k = k + 1;\n-             }\n-             return false;\n-         }\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns error? {\n+        lock {\n+            // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain and path.\n+            int k = 0;\n+            while (k < self.allSessionCookies.length()) {\n+                if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n+                    int j = k;\n+                    while (j < self.allSessionCookies.length()-1) {\n+                        self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n+                        j = j + 1;\n+                    }\n+                    _ = self.allSessionCookies.pop();\n+                    return;\n+                }\n+                k = k + 1;\n+            }\n+            // Removes the persistent cookie if it is in the persistent cookie store, which is matched with the given name, domain and path.\n+            var persistentCookieHandler = self.persistentCookieHandler;\n+            if (persistentCookieHandler is PersistentCookieHandler) {\n+                return persistentCookieHandler.removeCookie(name, domain, path);\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+        }\n+    }\n+\n+    # Removes cookies which match with the given domain.\n+    #\n+    # + domain - Domain of the cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing cookies by domain or else nil is returned\n+    public function removeCookiesByDomain(string domain) returns error? {\n+        Cookie[] allCookies = self.getAllCookies();\n+        lock {\n+            foreach var cookie in allCookies {\n+                if (cookie.domain != domain ) {\n+                    continue;\n+                }\n+                var cookieName = cookie.name;\n+                var cookiePath = cookie.path;\n+                if (cookieName is string && cookiePath is string) {\n+                    var result = self.removeCookie(cookieName, domain, cookiePath);\n+                    if (result is error) {\n+                        CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookies\", cause = result);\n+                        return err;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    # Removes all expired cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing expired cookies or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTI1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609254", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the removal all the cookies or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:50:52Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByDomain(string domain) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.domain == domain) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n     }\n \n     # Removes a specific cookie.\n     #\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - Return true if the relevant cookie is removed, false otherwise\n-    public function removeCookie(string name, string domain, string path) returns boolean {\n-         lock {\n-             // Removes the session cookie in the cookie store, which is matched with the given name, domain and path.\n-             int k = 0;\n-             while (k < self.allSessionCookies.length()) {\n-                 if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n-                     int j = k;\n-                     while (j < self.allSessionCookies.length()-1) {\n-                         self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n-                         j = j + 1;\n-                     }\n-                     _ = self.allSessionCookies.pop();\n-                     return true;\n-                 }\n-                 k = k + 1;\n-             }\n-             return false;\n-         }\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns error? {\n+        lock {\n+            // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain and path.\n+            int k = 0;\n+            while (k < self.allSessionCookies.length()) {\n+                if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n+                    int j = k;\n+                    while (j < self.allSessionCookies.length()-1) {\n+                        self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n+                        j = j + 1;\n+                    }\n+                    _ = self.allSessionCookies.pop();\n+                    return;\n+                }\n+                k = k + 1;\n+            }\n+            // Removes the persistent cookie if it is in the persistent cookie store, which is matched with the given name, domain and path.\n+            var persistentCookieHandler = self.persistentCookieHandler;\n+            if (persistentCookieHandler is PersistentCookieHandler) {\n+                return persistentCookieHandler.removeCookie(name, domain, path);\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+        }\n+    }\n+\n+    # Removes cookies which match with the given domain.\n+    #\n+    # + domain - Domain of the cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing cookies by domain or else nil is returned\n+    public function removeCookiesByDomain(string domain) returns error? {\n+        Cookie[] allCookies = self.getAllCookies();\n+        lock {\n+            foreach var cookie in allCookies {\n+                if (cookie.domain != domain ) {\n+                    continue;\n+                }\n+                var cookieName = cookie.name;\n+                var cookiePath = cookie.path;\n+                if (cookieName is string && cookiePath is string) {\n+                    var result = self.removeCookie(cookieName, domain, cookiePath);\n+                    if (result is error) {\n+                        CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookies\", cause = result);\n+                        return err;\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    # Removes all expired cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing expired cookies or else nil is returned\n+    public function removeExpiredCookies() returns error? {\n+        CookieHandlingError err;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing expired cookies\", cause = result);\n+                return err;\n+            } else {\n+                lock {\n+                    foreach var cookie in result {\n+                        if (!isExpired(cookie)) {\n+                            continue;\n+                        }\n+                        var cookieName = cookie.name;\n+                        var cookieDomain = cookie.domain;\n+                        var cookiePath = cookie.path;\n+                        if (cookieName is string && cookieDomain is string && cookiePath is string) {\n+                            var removeResult = persistentCookieHandler.removeCookie(cookieName, cookieDomain, cookiePath);\n+                            if (removeResult is error) {\n+                                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing expired cookies\", cause = removeResult);\n+                                return err;\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"No persistent cookie store to remove expired cookies\");\n+            return err;\n+        }\n     }\n \n     # Removes all the cookies.\n-    public function clear() {\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTM5MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609390", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // If cookie is not expired adds that cookie.\n          \n          \n            \n                    // If cookie is not expired, adds that cookie.", "author": "praneesha", "createdAt": "2020-01-28T04:51:42Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -261,46 +405,60 @@ function isExpiresAttributeValid(Cookie cookie) returns boolean {\n     }\n }\n \n+// Checks whether the user has requested a particular domain or a sub-domain of it previously or not.\n+function isFirstRequest(Cookie[] allSessionCookies, string domain) returns boolean {\n+    foreach var cookie in allSessionCookies {\n+       var cookieDomain = cookie.domain;\n+       if (((cookieDomain is string && (domain.endsWith(\".\" + cookieDomain) || cookieDomain.endsWith(\".\" + domain))) || cookie.domain == domain )) {\n+           return false;\n+       }\n+    }\n+    return true;\n+}\n+\n // Adds a persistent cookie to the cookie store according to the rules in [RFC-6265](https://tools.ietf.org/html/rfc6265#section-5.3 , https://tools.ietf.org/html/rfc6265#section-4.1.2).\n-function addPersistentCookie(Cookie? identicalCookie, Cookie cookie, string url, CookieStore cookieStore) {\n+function addPersistentCookie(Cookie? identicalCookie, Cookie cookie, string url, PersistentCookieHandler persistentCookieHandler, CookieStore cookieStore) returns error? {\n     if (identicalCookie is Cookie) {\n-        var temp1 = identicalCookie.name;\n-        var temp2 = identicalCookie.domain;\n-        var temp3 = identicalCookie.path;\n-        if (isExpired(cookie) && temp1 is string && temp2 is string && temp3 is string) {\n-            _ = cookieStore.removeCookie(temp1, temp2, temp3);\n+        var identicalCookieName = identicalCookie.name;\n+        var identicalCookieDomain = identicalCookie.domain;\n+        var identicalCookiePath = identicalCookie.path;\n+        if (isExpired(cookie) && identicalCookieName is string && identicalCookieDomain is string && identicalCookiePath is string) {\n+            return cookieStore.removeCookie(identicalCookieName, identicalCookieDomain, identicalCookiePath);\n         } else {\n             // Removes the old cookie and adds the new persistent cookie.\n-            if (((identicalCookie.httpOnly && url.startsWith(HTTP)) || identicalCookie.httpOnly == false) && temp1 is string && temp2 is string && temp3 is string) {\n-                _ = cookieStore.removeCookie(temp1, temp2, temp3);\n-                cookie.creationTime = identicalCookie.creationTime;\n+            if (((identicalCookie.httpOnly && url.startsWith(HTTP)) || identicalCookie.httpOnly == false) && identicalCookieName is string && identicalCookieDomain is string && identicalCookiePath is string) {\n+                var removeResult = cookieStore.removeCookie(identicalCookieName, identicalCookieDomain, identicalCookiePath);\n+                if (removeResult is error) {\n+                    return removeResult;\n+                }\n+                cookie.createdTime = identicalCookie.createdTime;\n                 cookie.lastAccessedTime = time:currentTime();\n-                // TODO:insert into the database.\n+                return persistentCookieHandler.storeCookie(cookie);\n             }\n         }\n     } else {\n         // If cookie is not expired adds that cookie.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTQ0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609447", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n          \n          \n            \n            # Represents a default persistent cookie handler, which stores persistent cookies in a CSV file.", "author": "praneesha", "createdAt": "2020-01-28T04:52:06Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwOTk4Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371609987", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:55:35Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDAzNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610035", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # Gets all persistent cookies.\n          \n          \n            \n                # Gets all the persistent cookies.", "author": "praneesha", "createdAt": "2020-01-28T04:55:50Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDEwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610100", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n          \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else the error is returned if one occurred during the retrieval of the cookies", "author": "praneesha", "createdAt": "2020-01-28T04:56:15Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDE3Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610172", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:56:35Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns @tainted Cookie[] | CookieHandlingError {\n+        Cookie[] cookies = [];\n+        if (file:exists(self.fileName)) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                foreach var rec in tblResult {\n+                    Cookie cookie = new(rec.name, rec.value);\n+                    cookie.domain = rec.domain;\n+                    cookie.path = rec.path;\n+                    cookie.expires = rec.expires == \"-\" ? () : rec.expires;\n+                    cookie.maxAge = rec.maxAge;\n+                    cookie.httpOnly = rec.httpOnly;\n+                    cookie.secure = rec.secure;\n+                    time:Time | error t1 = time:parse(rec.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t1 is time:Time) {\n+                        cookie.createdTime = t1;\n+                    }\n+                    time:Time | error t2 = time:parse(rec.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t2 is time:Time) {\n+                        cookie.lastAccessedTime = t2;\n+                    }\n+                    cookie.hostOnly = rec.hostOnly;\n+                    cookies.push(cookie);\n+                }\n+                return cookies;\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+       return cookies;\n+    }\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610215", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the removal of all the cookies or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:56:51Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns @tainted Cookie[] | CookieHandlingError {\n+        Cookie[] cookies = [];\n+        if (file:exists(self.fileName)) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                foreach var rec in tblResult {\n+                    Cookie cookie = new(rec.name, rec.value);\n+                    cookie.domain = rec.domain;\n+                    cookie.path = rec.path;\n+                    cookie.expires = rec.expires == \"-\" ? () : rec.expires;\n+                    cookie.maxAge = rec.maxAge;\n+                    cookie.httpOnly = rec.httpOnly;\n+                    cookie.secure = rec.secure;\n+                    time:Time | error t1 = time:parse(rec.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t1 is time:Time) {\n+                        cookie.createdTime = t1;\n+                    }\n+                    time:Time | error t2 = time:parse(rec.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t2 is time:Time) {\n+                        cookie.lastAccessedTime = t2;\n+                    }\n+                    cookie.hostOnly = rec.hostOnly;\n+                    cookies.push(cookie);\n+                }\n+                return cookies;\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+       return cookies;\n+    }\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns @tainted CookieHandlingError? {\n+        cookieNameToRemove = name;\n+        cookieDomainToRemove = domain;\n+        cookiePathToRemove = path;\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName)) {\n+            if(!self.cookiesTable.hasNext()) {\n+                var tblResult = readFile(self.fileName);\n+                if (tblResult is table<myCookie>) {\n+                    self.cookiesTable = tblResult;\n+                } else {\n+                    err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                    return err;\n+                }\n+            }\n+            int | error count = self.cookiesTable.remove(checkRemoveCriteria);\n+            if (count is error || count <= 0) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+            error? removeResults = file:remove(<@untainted> self.fileName);\n+            if (removeResults is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+                return err;\n+            }\n+            var writeResult = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+            if (writeResult is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = writeResult);\n+                return err;\n+            }\n+            return;\n+        }\n+        err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No persistent cookie store file to remove\");\n+        return err;\n+    }\n+\n+    # Removes all persistent cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDI1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610253", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Writes the updated table to file.\n          \n          \n            \n            // Writes the updated table to a file.", "author": "praneesha", "createdAt": "2020-01-28T04:57:02Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns @tainted Cookie[] | CookieHandlingError {\n+        Cookie[] cookies = [];\n+        if (file:exists(self.fileName)) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                foreach var rec in tblResult {\n+                    Cookie cookie = new(rec.name, rec.value);\n+                    cookie.domain = rec.domain;\n+                    cookie.path = rec.path;\n+                    cookie.expires = rec.expires == \"-\" ? () : rec.expires;\n+                    cookie.maxAge = rec.maxAge;\n+                    cookie.httpOnly = rec.httpOnly;\n+                    cookie.secure = rec.secure;\n+                    time:Time | error t1 = time:parse(rec.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t1 is time:Time) {\n+                        cookie.createdTime = t1;\n+                    }\n+                    time:Time | error t2 = time:parse(rec.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t2 is time:Time) {\n+                        cookie.lastAccessedTime = t2;\n+                    }\n+                    cookie.hostOnly = rec.hostOnly;\n+                    cookies.push(cookie);\n+                }\n+                return cookies;\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+       return cookies;\n+    }\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns @tainted CookieHandlingError? {\n+        cookieNameToRemove = name;\n+        cookieDomainToRemove = domain;\n+        cookiePathToRemove = path;\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName)) {\n+            if(!self.cookiesTable.hasNext()) {\n+                var tblResult = readFile(self.fileName);\n+                if (tblResult is table<myCookie>) {\n+                    self.cookiesTable = tblResult;\n+                } else {\n+                    err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                    return err;\n+                }\n+            }\n+            int | error count = self.cookiesTable.remove(checkRemoveCriteria);\n+            if (count is error || count <= 0) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+            error? removeResults = file:remove(<@untainted> self.fileName);\n+            if (removeResults is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+                return err;\n+            }\n+            var writeResult = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+            if (writeResult is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = writeResult);\n+                return err;\n+            }\n+            return;\n+        }\n+        err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No persistent cookie store file to remove\");\n+        return err;\n+    }\n+\n+    # Removes all persistent cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n+    public function removeAllCookies() returns CookieHandlingError? {\n+        error? removeResults = file:remove(self.fileName);\n+        if (removeResults is error) {\n+            CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+            return err;\n+        }\n+    }\n+};\n+\n+function validateFileExtension(string fileName) returns string|CookieHandlingError {\n+    if (fileName.toLowerAscii().endsWith(\".csv\")) {\n+        return fileName;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid file format\");\n+    return err;\n+}\n+\n+function readFile(string fileName) returns @tainted error | table<myCookie> {\n+    io:ReadableCSVChannel rCsvChannel2 = check io:openReadableCsvFile(fileName);\n+    var tblResult = rCsvChannel2.getTable(myCookie);\n+    closeReadableCSVChannel(rCsvChannel2);\n+    if (tblResult is table<record {| anydata...; |}>) {\n+        return <table<myCookie>>tblResult;\n+    } else {\n+        return  tblResult;\n+    }\n+}\n+\n+function closeReadableCSVChannel(io:ReadableCSVChannel csvChannel) {\n+    var result = csvChannel.close();\n+    if (result is error) {\n+        log:printError(\"Error occurred while closing the channel: \", err = result);\n+    }\n+}\n+\n+// Updates the table with new cookie.\n+function addNewCookieToTable(table<myCookie> cookiesTable, Cookie cookieToAdd) returns table<myCookie> | error {\n+    table<myCookie> tableToReturn = cookiesTable;\n+    var name = cookieToAdd.name;\n+    var value = cookieToAdd.value;\n+    var domain = cookieToAdd.domain;\n+    var path = cookieToAdd.path;\n+    var expires = cookieToAdd.expires;\n+    var createdTime = time:format(cookieToAdd.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    var lastAccessedTime = time:format(cookieToAdd.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    if (name is string && value is string && domain is string && path is string && createdTime is string && lastAccessedTime is string) {\n+        myCookie c1 = { name: name, value: value, domain: domain, path: path, expires: expires is string ? expires : \"-\", maxAge: cookieToAdd.maxAge, httpOnly: cookieToAdd.httpOnly, secure: cookieToAdd.secure, createdTime: createdTime, lastAccessedTime: lastAccessedTime, hostOnly: cookieToAdd.hostOnly };\n+        var result = tableToReturn.add(c1);\n+        if (result is error) {\n+            return result;\n+        }\n+        return tableToReturn;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid data types for cookie attributes\");\n+    return err;\n+}\n+\n+// Writes the updated table to file.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDI5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610297", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the storing process of the cookie or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:57:20Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# The representation of a persistent cookie handler for managing persistent cookies.\n+public type PersistentCookieHandler abstract object {\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDM0Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610342", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n          \n          \n            \n                # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during the retrieval of the cookies", "author": "praneesha", "createdAt": "2020-01-28T04:57:37Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# The representation of a persistent cookie handler for managing persistent cookies.\n+public type PersistentCookieHandler abstract object {\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDM2OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610368", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the removal of the cookie or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:57:52Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# The representation of a persistent cookie handler for managing persistent cookies.\n+public type PersistentCookieHandler abstract object {\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns Cookie[] | CookieHandlingError;\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDQwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610404", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n          \n          \n            \n                # + return - An error will be returned if there is any error occurred during the removal of all the cookies or else nil is returned", "author": "praneesha", "createdAt": "2020-01-28T04:58:03Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,43 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+# The representation of a persistent cookie handler for managing persistent cookies.\n+public type PersistentCookieHandler abstract object {\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns CookieHandlingError?;\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns Cookie[] | CookieHandlingError;\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns CookieHandlingError?;\n+\n+    # Removes all persistent cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDQ1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610453", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents the reason string for the `http:CookieHandlingError`\n          \n          \n            \n            # Represents the reason for the `http:CookieHandlingError`as a string.", "author": "praneesha", "createdAt": "2020-01-28T04:58:26Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -173,6 +173,11 @@ public const SSL_ERROR = \"{ballerina/http}SslError\";\n # Represents a client error that occurred due to SSL failure\n public type SslError error<SSL_ERROR, Detail>;\n \n+# Represents the reason string for the `http:CookieHandlingError`", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDQ5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610495", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Represents a cookie error that occurred when using cookies\n          \n          \n            \n            # Represents a cookie error that occurred when using the cookies", "author": "praneesha", "createdAt": "2020-01-28T04:58:36Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -173,6 +173,11 @@ public const SSL_ERROR = \"{ballerina/http}SslError\";\n # Represents a client error that occurred due to SSL failure\n public type SslError error<SSL_ERROR, Detail>;\n \n+# Represents the reason string for the `http:CookieHandlingError`\n+public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n+# Represents a cookie error that occurred when using cookies", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDUyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610520", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Ballerina Http Union Errors\n          \n          \n            \n            // Ballerina HTTP Union Errors", "author": "praneesha", "createdAt": "2020-01-28T04:58:47Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -173,6 +173,11 @@ public const SSL_ERROR = \"{ballerina/http}SslError\";\n # Represents a client error that occurred due to SSL failure\n public type SslError error<SSL_ERROR, Detail>;\n \n+# Represents the reason string for the `http:CookieHandlingError`\n+public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n+# Represents a cookie error that occurred when using cookies\n+public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n+\n // Ballerina Http Union Errors", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDU1Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610553", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Defines the resiliency error types that returned from client\n          \n          \n            \n            # Defines the resiliency error types that are returned from client", "author": "praneesha", "createdAt": "2020-01-28T04:58:57Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -173,6 +173,11 @@ public const SSL_ERROR = \"{ballerina/http}SslError\";\n # Represents a client error that occurred due to SSL failure\n public type SslError error<SSL_ERROR, Detail>;\n \n+# Represents the reason string for the `http:CookieHandlingError`\n+public const COOKIE_HANDLING_ERROR = \"{ballerina/http}CookieHandlingError\";\n+# Represents a cookie error that occurred when using cookies\n+public type CookieHandlingError error<COOKIE_HANDLING_ERROR, Detail>;\n+\n // Ballerina Http Union Errors\n # Defines the resiliency error types that returned from client", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDU3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610571", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            # Defines the listener error types that returned while sending outbound response\n          \n          \n            \n            # Defines the listener error types that are returned while sending outbound response", "author": "praneesha", "createdAt": "2020-01-28T04:59:04Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -197,12 +202,12 @@ public type InboundRequestError InitializingInboundRequestError|ReadingInboundRe\n # Defines the listener error types that returned while sending outbound response", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDY0Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610646", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add a cookie with unmatched path to cookie store\")\n          \n          \n            \n                @Test(description = \"Test to add a cookie with an unmatched path to the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T04:59:31Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -47,7 +47,7 @@ public void testAddCookieWithUnmatchedDomain() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"add a cookie with unmatched path to cookie store\")\n+    @Test(description = \"Test add a cookie with unmatched path to cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDczNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610737", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove a specific cookie which is not in the cookie store when persistent cookie \" +\n          \n          \n            \n                @Test(description = \"Test to remove a specific cookie, which is not in the cookie store when it is a persistent cookie \" +", "author": "praneesha", "createdAt": "2020-01-28T05:00:00Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -115,7 +115,8 @@ public void testGetCookieToUnmatchedPath2() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove a specific cookie which is not in the cookie store\")\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store when persistent cookie \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDgzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610830", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n          \n          \n            \n                @Test(description = \"Test to add more cookies than the number in `maxTotalCookieCount` in the cookie configuration\")", "author": "praneesha", "createdAt": "2020-01-28T05:00:29Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDg3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610879", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n          \n          \n            \n                @Test(description = \"Test to add more cookies than the number in `maxCookiesPerDomain` in the cookie configuration\")", "author": "praneesha", "createdAt": "2020-01-28T05:00:47Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMDk1OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371610959", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")\n          \n          \n            \n                @Test(description = \"Test to give an invalid file extension when creating a `CsvPersistentCookieHandler` object\")", "author": "praneesha", "createdAt": "2020-01-28T05:01:06Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n+    public void testCheckMaxCookiesPerDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxCookiesPerDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTAwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611006", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is a persistent \" +\n          \n          \n            \n                @Test(description = \"Test to remove a specific cookie, which is not in the cookie store when there is a persistent \" +", "author": "praneesha", "createdAt": "2020-01-28T05:01:21Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n+    public void testCheckMaxCookiesPerDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxCookiesPerDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")\n+    public void testAddPersistentCookieWithoutPersistentStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieWithoutPersistentStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is a persistent \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTA1OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611058", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is no persistent \" +\n          \n          \n            \n                @Test(description = \"Test to remove a specific cookie, which is not in the cookie store when there is no persistent \" +", "author": "praneesha", "createdAt": "2020-01-28T05:01:33Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n+    public void testCheckMaxCookiesPerDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxCookiesPerDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")\n+    public void testAddPersistentCookieWithoutPersistentStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieWithoutPersistentStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is a persistent \" +\n+            \"cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore_1() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore_1\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the Return Values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is no persistent \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTA4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611082", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove all cookies when there is no persistent cookie store\")\n          \n          \n            \n                @Test(description = \"Test to remove all cookies when there is no persistent cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:01:41Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionNegativeTest.java", "diffHunk": "@@ -124,4 +125,61 @@ public void testRemoveCookieFromCookieStore() {\n         BMap<String, BValue> bvalue = (BMap) returnVals[0];\n         Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n     }\n+\n+    @Test(description = \"Test add cookies more than the number in maxTotalCookieCount in cookie configuration\")\n+    public void testCheckMaxTotalCookieCount() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxTotalCookieCount\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add cookies more than the number in maxCookiesPerDomain in cookie configuration\")\n+    public void testCheckMaxCookiesPerDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testCheckMaxCookiesPerDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test give invalid file extension when creating a CsvPersistentCookieHandler object\")\n+    public void testAddPersistentCookieWithoutPersistentStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieWithoutPersistentStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is a persistent \" +\n+            \"cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore_1() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore_1\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the Return Values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific cookie which is not in the cookie store, when there is no persistent \" +\n+            \"cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore_2\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test remove all cookies when there is no persistent cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTExOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611119", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove all cookies from cookie store\")\n          \n          \n            \n                @Test(description = \"Test to remove all cookies from the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:01:55Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTE0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611144", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add persistent cookie into cookie store\")\n          \n          \n            \n                @Test(description = \"Test to add a persistent cookie into the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:02:07Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTE5Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611197", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n          \n          \n            \n                @Test(description = \"Test to add a persistent cookie with a value below 69 for the year in which it expires attribute\")", "author": "praneesha", "createdAt": "2020-01-28T05:02:31Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTIxOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611219", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n          \n          \n            \n                @Test(description = \"Test to get the relevant persistent cookie from the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:02:42Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTI0NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove a specific persistent cookie from cookie store\")\n          \n          \n            \n                @Test(description = \"Test to remove a specific persistent cookie from the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:02:51Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n+    public void testGetPersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetPersistentCookieFromCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific persistent cookie from cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTMwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611301", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie name\")\n          \n          \n            \n                @Test(description = \"Test to get all cookies from the cookie store, which match the given cookie name\")", "author": "praneesha", "createdAt": "2020-01-28T05:03:12Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n+    public void testGetPersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetPersistentCookieFromCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific persistent cookie from cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie name\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTM2Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611362", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +\n          \n          \n            \n                @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +\n          \n          \n            \n                @Test(description = \"Test to get all cookies from the cookie store, which match with the given cookie \" +", "author": "praneesha", "createdAt": "2020-01-28T05:03:37Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n+    public void testGetPersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetPersistentCookieFromCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific persistent cookie from cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie name\")\n+    public void testGetCookiesByName() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetCookiesByName\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTQ0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611448", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove all cookies from cookie store, which matched with the given name as the cookie \" +\n          \n          \n            \n                @Test(description = \"Test to remove all cookies from the cookie store, which match the given cookie \" +", "author": "praneesha", "createdAt": "2020-01-28T05:04:04Z", "path": "stdlib/http/src/test/java/org/ballerinalang/stdlib/services/nativeimpl/cookie/CookieNativeFunctionSuccessTest.java", "diffHunk": "@@ -225,9 +225,77 @@ public void testRemoveCookieFromCookieStore() {\n                           \"Cookie objects are in the Return Values\");\n     }\n \n-    @Test(description = \"Test remove all session cookies from cookie store\")\n-    public void testClearCookieStore() {\n-        BValue[] returnVals = BRunUtil.invoke(result, \"testClearAllCookiesInCookieStore\");\n+    @Test(description = \"Test remove all cookies from cookie store\")\n+    public void testRemoveAllCookiesInCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemoveAllCookiesInCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie into cookie store\")\n+    public void testAddPersistentCookieToCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test add persistent cookie with a value below 69 for the year in expires attribute\")\n+    public void testAddPersistentCookieToCookieStore_2() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testAddPersistentCookieToCookieStore_2\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get the relevant persistent cookie from cookie store\")\n+    public void testGetPersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetPersistentCookieFromCookieStore\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove a specific persistent cookie from cookie store\")\n+    public void testRemovePersistentCookieFromCookieStore() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testRemovePersistentCookieFromCookieStore\");\n+        Assert.assertTrue(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                          \"Cookie objects are in the Return Values\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie name\")\n+    public void testGetCookiesByName() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetCookiesByName\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 1);\n+        BMap<String, BValue> bvalue = (BMap) returnVals[0];\n+        Assert.assertEquals(bvalue.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test get all cookies from cookie store, which matched with the given name as the cookie \" +\n+            \"domain\")\n+    public void testGetCookiesByDomain() {\n+        BValue[] returnVals = BRunUtil.invoke(result, \"testGetCookiesByDomain\");\n+        Assert.assertFalse(returnVals == null || returnVals.length == 0 || returnVals[0] == null,\n+                           \"No cookie objects in the return values\");\n+        Assert.assertTrue(returnVals.length == 2);\n+        BMap<String, BValue> bvalue1 = (BMap) returnVals[0];\n+        BMap<String, BValue> bvalue2 = (BMap) returnVals[1];\n+        Assert.assertEquals(bvalue1.get(\"name\").stringValue(), \"SID001\");\n+        Assert.assertEquals(bvalue2.get(\"name\").stringValue(), \"SID002\");\n+    }\n+\n+    @Test(description = \"Test remove all cookies from cookie store, which matched with the given name as the cookie \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTcyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611722", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove persistent cookie by client\")\n          \n          \n            \n                @Test(description = \"Test to remove a persistent cookie by the client\")", "author": "praneesha", "createdAt": "2020-01-28T05:05:37Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTc2NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611764", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n          \n          \n            \n                @Test(description = \"Test to send similar persistent cookies in the response by server. The old cookie is replaced by \" +", "author": "praneesha", "createdAt": "2020-01-28T05:05:53Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTgwNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611806", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"new cookie in the cookie store\")\n          \n          \n            \n                        \"new cookie in the cookie store\")\n          \n      \n    \n    \n  \n\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"new cookie in the cookie store\")\n          \n          \n            \n                        \"the new cookie in the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:06:01Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n          \n          \n            \n                @Test(description = \"Test to send a session cookie and a similar persistent cookie in the response by server. The old \" +", "author": "praneesha", "createdAt": "2020-01-28T05:06:19Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTg3OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611879", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"session cookie is replaced by new persistent cookie in the cookie store\")\n          \n          \n            \n                        \"session cookie is replaced by the new persistent cookie in the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:06:29Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTk1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611951", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n          \n          \n            \n                @Test(description = \"Test to send a persistent cookie and a similar session cookie in the response by the server. The old \" +", "author": "praneesha", "createdAt": "2020-01-28T05:06:49Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMTk3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371611971", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"persistent cookie is replaced by new session cookie in the cookie store\")\n          \n          \n            \n                        \"persistent cookie is replaced by the new session cookie in the cookie store\")", "author": "praneesha", "createdAt": "2020-01-28T05:06:57Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n+            \"persistent cookie is replaced by new session cookie in the cookie store\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjAwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test remove persistent cookie by server\")\n          \n          \n            \n                @Test(description = \"Test to remove a persistent cookie by the server\")", "author": "praneesha", "createdAt": "2020-01-28T05:07:10Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n+            \"persistent cookie is replaced by new session cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_2() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_10.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by server\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjA1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612051", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test(description = \"Test send persistent cookies when persistentCookieHandler is not configured\")\n          \n          \n            \n                @Test(description = \"Test to send persistent cookies when the persistentCookieHandler is not configured\")", "author": "praneesha", "createdAt": "2020-01-28T05:07:25Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n+            \"persistent cookie is replaced by new session cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_2() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_10.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by server\")\n+    public void testRemovePersistentCookieByServer() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_11.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send persistent cookies when persistentCookieHandler is not configured\")", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjEwMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612103", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Second request is with cookie header and server sends more cookies in the response.\n          \n          \n            \n                // Second request is with a cookie header and server sends more cookies in the response.", "author": "praneesha", "createdAt": "2020-01-28T05:07:41Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_01.bal", "diffHunk": "@@ -16,22 +16,25 @@\n \n import ballerina/http;\n import ballerina/io;\n+import ballerina/file;\n \n public function main() {\n+    http:CsvPersistentCookieHandler myPersistentStore = new(\"./cookie-test-data/client-1.csv\");\n     http:Client cookieClientEndpoint = new (\"http://localhost:9253\", {\n-            cookieConfig: { enabled: true }\n+            cookieConfig: { enabled: true, persistentCookieHandler: myPersistentStore }\n         });\n     http:Request req = new;\n-    // Server sends the session cookies in the response for the first request.\n-    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend\", req);\n+    // Server sends the cookies in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_1\", req);\n     // Second request is with cookie header and server sends more cookies in the response.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjEzNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612137", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Third request is with cookie header including all relevant cookies.\n          \n          \n            \n                // Third request is with the cookie header including all relevant cookies.", "author": "praneesha", "createdAt": "2020-01-28T05:07:53Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_01.bal", "diffHunk": "@@ -16,22 +16,25 @@\n \n import ballerina/http;\n import ballerina/io;\n+import ballerina/file;\n \n public function main() {\n+    http:CsvPersistentCookieHandler myPersistentStore = new(\"./cookie-test-data/client-1.csv\");\n     http:Client cookieClientEndpoint = new (\"http://localhost:9253\", {\n-            cookieConfig: { enabled: true }\n+            cookieConfig: { enabled: true, persistentCookieHandler: myPersistentStore }\n         });\n     http:Request req = new;\n-    // Server sends the session cookies in the response for the first request.\n-    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend\", req);\n+    // Server sends the cookies in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_1\", req);\n     // Second request is with cookie header and server sends more cookies in the response.\n-    response = cookieClientEndpoint->get(\"/cookie/cookieBackend\", req);\n-    // Third request is with cookie header including all relevant session cookies.\n-    response = cookieClientEndpoint->get(\"/cookie/cookieBackend\", req);\n+    response = cookieClientEndpoint->get(\"/cookie/cookieBackend_1\", req);\n+    // Third request is with cookie header including all relevant cookies.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjIwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612205", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Second request is with cookie header and server sends more cookies in the response.\n          \n          \n            \n                // Second request is with the cookie header and server sends more cookies in the response.", "author": "praneesha", "createdAt": "2020-01-28T05:08:23Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_06.bal", "diffHunk": "@@ -36,20 +38,22 @@ public function main() {\n                 statusCodes: [400, 404, 500]\n             },\n             cookieConfig: {\n-                enabled: true\n+                enabled: true,\n+                persistentCookieHandler: myPersistentStore\n             }\n         });\n     http:Request req = new;\n-    // Server sends the session cookies in the response for the first request.\n-    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend\", req);\n+    // Server sends cookies in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_1\", req);\n     // Second request is with cookie header and server sends more cookies in the response.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjIzMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612230", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 // Third request is with cookie header including all relevant cookies.\n          \n          \n            \n                 // Third request is with the cookie header including all relevant cookies.", "author": "praneesha", "createdAt": "2020-01-28T05:08:31Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_06.bal", "diffHunk": "@@ -36,20 +38,22 @@ public function main() {\n                 statusCodes: [400, 404, 500]\n             },\n             cookieConfig: {\n-                enabled: true\n+                enabled: true,\n+                persistentCookieHandler: myPersistentStore\n             }\n         });\n     http:Request req = new;\n-    // Server sends the session cookies in the response for the first request.\n-    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend\", req);\n+    // Server sends cookies in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_1\", req);\n     // Second request is with cookie header and server sends more cookies in the response.\n-    response = cookieClientEndpoint->get(\"/cookie/cookieBackend\", req);\n-    // Third request is with cookie header including all relevant session cookies.\n-    response = cookieClientEndpoint->get(\"/cookie/cookieBackend\", req);\n+    response = cookieClientEndpoint->get(\"/cookie/cookieBackend_1\", req);\n+     // Third request is with cookie header including all relevant cookies.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjI4Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612282", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Sends second request after replacing the old cookie with the new.\n          \n          \n            \n                // Sends the second request after replacing the old cookie with the new.", "author": "praneesha", "createdAt": "2020-01-28T05:08:50Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_08.bal", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/file;\n+\n+public function main() {\n+    http:CsvPersistentCookieHandler myPersistentStore = new(\"./cookie-test-data/client-8.csv\");\n+    http:Client cookieClientEndpoint = new (\"http://localhost:9253\", {\n+            cookieConfig: { enabled: true, persistentCookieHandler: myPersistentStore }\n+        });\n+    http:Request req = new;\n+    // Server sends similar persistent cookies in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_4\", req);\n+    // Sends second request after replacing the old cookie with the new.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjMwOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612308", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Sends second request after replacing the session cookie with the new persistent cookie.\n          \n          \n            \n                // Sends the second request after replacing the session cookie with the new persistent cookie.", "author": "praneesha", "createdAt": "2020-01-28T05:09:02Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_09.bal", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/file;\n+\n+public function main() {\n+    http:CsvPersistentCookieHandler myPersistentStore = new(\"./cookie-test-data/client-9.csv\");\n+    http:Client cookieClientEndpoint = new (\"http://localhost:9253\", {\n+            cookieConfig: { enabled: true, persistentCookieHandler: myPersistentStore }\n+        });\n+    http:Request req = new;\n+    // Server sends a session cookie and a similar persistent cookie in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_5\", req);\n+    // Sends second request after replacing the session cookie with the new persistent cookie.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjM1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612351", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Sends second request after replacing the persistent cookie with the new session cookie.\n          \n          \n            \n                // Sends the second request after replacing the persistent cookie with the new session cookie.", "author": "praneesha", "createdAt": "2020-01-28T05:09:13Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_10.bal", "diffHunk": "@@ -0,0 +1,38 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/file;\n+\n+public function main() {\n+    http:CsvPersistentCookieHandler myPersistentStore = new(\"./cookie-test-data/client-10.csv\");\n+    http:Client cookieClientEndpoint = new (\"http://localhost:9253\", {\n+            cookieConfig: { enabled: true, persistentCookieHandler: myPersistentStore }\n+        });\n+    http:Request req = new;\n+    // Server sends a persistent cookie and a similar session cookie in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_6\", req);\n+    // Sends second request after replacing the persistent cookie with the new session cookie.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjQwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612400", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Third request after removing the cookie.\n          \n          \n            \n                // Third request is sent after removing the cookie.", "author": "praneesha", "createdAt": "2020-01-28T05:09:32Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_11.bal", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/file;\n+\n+public function main() {\n+    http:CsvPersistentCookieHandler myPersistentStore = new(\"./cookie-test-data/client-11.csv\");\n+    http:Client cookieClientEndpoint = new (\"http://localhost:9253\", {\n+            cookieConfig: { enabled: true, persistentCookieHandler: myPersistentStore }\n+        });\n+    http:Request req = new;\n+    // Server sends cookies in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_7\", req);\n+    // Server removes an existing persistent cookie in the cookie store by sending an expired cookie in the response.\n+    response = cookieClientEndpoint->get(\"/cookie/cookieBackend_7\", req);\n+    // Third request after removing the cookie.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjQzMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371612432", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Third request is with cookie header including all relevant cookies.\n          \n          \n            \n                // Third request is sent with the cookie header including all relevant cookies.", "author": "praneesha", "createdAt": "2020-01-28T05:09:45Z", "path": "tests/jballerina-integration-test/src/test/resources/http/src/cookie/cookieClient_12.bal", "diffHunk": "@@ -0,0 +1,40 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/io;\n+import ballerina/file;\n+\n+public function main() {\n+    http:CsvPersistentCookieHandler myPersistentStore = new(\"./cookie-test-data/client-12.csv\");\n+    http:Client cookieClientEndpoint = new (\"http://localhost:9253\", {\n+            cookieConfig: { enabled: true }\n+        });\n+    http:Request req = new;\n+    // Server sends the cookies in the response for the first request.\n+    var response = cookieClientEndpoint->get(\"/cookie/cookieBackend_1\", req);\n+    // Second request is with cookie header and server sends more cookies in the response.\n+    response = cookieClientEndpoint->get(\"/cookie/cookieBackend_1\", req);\n+    // Third request is with cookie header including all relevant cookies.", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzAyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371613029", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return  tblResult;\n          \n          \n            \n                    return tblResult;", "author": "chamil321", "createdAt": "2020-01-28T05:13:16Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns @tainted Cookie[] | CookieHandlingError {\n+        Cookie[] cookies = [];\n+        if (file:exists(self.fileName)) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                foreach var rec in tblResult {\n+                    Cookie cookie = new(rec.name, rec.value);\n+                    cookie.domain = rec.domain;\n+                    cookie.path = rec.path;\n+                    cookie.expires = rec.expires == \"-\" ? () : rec.expires;\n+                    cookie.maxAge = rec.maxAge;\n+                    cookie.httpOnly = rec.httpOnly;\n+                    cookie.secure = rec.secure;\n+                    time:Time | error t1 = time:parse(rec.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t1 is time:Time) {\n+                        cookie.createdTime = t1;\n+                    }\n+                    time:Time | error t2 = time:parse(rec.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t2 is time:Time) {\n+                        cookie.lastAccessedTime = t2;\n+                    }\n+                    cookie.hostOnly = rec.hostOnly;\n+                    cookies.push(cookie);\n+                }\n+                return cookies;\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+       return cookies;\n+    }\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns @tainted CookieHandlingError? {\n+        cookieNameToRemove = name;\n+        cookieDomainToRemove = domain;\n+        cookiePathToRemove = path;\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName)) {\n+            if(!self.cookiesTable.hasNext()) {\n+                var tblResult = readFile(self.fileName);\n+                if (tblResult is table<myCookie>) {\n+                    self.cookiesTable = tblResult;\n+                } else {\n+                    err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                    return err;\n+                }\n+            }\n+            int | error count = self.cookiesTable.remove(checkRemoveCriteria);\n+            if (count is error || count <= 0) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+            error? removeResults = file:remove(<@untainted> self.fileName);\n+            if (removeResults is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+                return err;\n+            }\n+            var writeResult = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+            if (writeResult is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = writeResult);\n+                return err;\n+            }\n+            return;\n+        }\n+        err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No persistent cookie store file to remove\");\n+        return err;\n+    }\n+\n+    # Removes all persistent cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n+    public function removeAllCookies() returns CookieHandlingError? {\n+        error? removeResults = file:remove(self.fileName);\n+        if (removeResults is error) {\n+            CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+            return err;\n+        }\n+    }\n+};\n+\n+function validateFileExtension(string fileName) returns string|CookieHandlingError {\n+    if (fileName.toLowerAscii().endsWith(\".csv\")) {\n+        return fileName;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid file format\");\n+    return err;\n+}\n+\n+function readFile(string fileName) returns @tainted error | table<myCookie> {\n+    io:ReadableCSVChannel rCsvChannel2 = check io:openReadableCsvFile(fileName);\n+    var tblResult = rCsvChannel2.getTable(myCookie);\n+    closeReadableCSVChannel(rCsvChannel2);\n+    if (tblResult is table<record {| anydata...; |}>) {\n+        return <table<myCookie>>tblResult;\n+    } else {\n+        return  tblResult;", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzExMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371613111", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function readFile(string fileName) returns @tainted error | table<myCookie> {\n          \n          \n            \n            function readFile(string fileName) returns @tainted error|table<myCookie> {", "author": "chamil321", "createdAt": "2020-01-28T05:13:39Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns @tainted Cookie[] | CookieHandlingError {\n+        Cookie[] cookies = [];\n+        if (file:exists(self.fileName)) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                foreach var rec in tblResult {\n+                    Cookie cookie = new(rec.name, rec.value);\n+                    cookie.domain = rec.domain;\n+                    cookie.path = rec.path;\n+                    cookie.expires = rec.expires == \"-\" ? () : rec.expires;\n+                    cookie.maxAge = rec.maxAge;\n+                    cookie.httpOnly = rec.httpOnly;\n+                    cookie.secure = rec.secure;\n+                    time:Time | error t1 = time:parse(rec.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t1 is time:Time) {\n+                        cookie.createdTime = t1;\n+                    }\n+                    time:Time | error t2 = time:parse(rec.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t2 is time:Time) {\n+                        cookie.lastAccessedTime = t2;\n+                    }\n+                    cookie.hostOnly = rec.hostOnly;\n+                    cookies.push(cookie);\n+                }\n+                return cookies;\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+       return cookies;\n+    }\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns @tainted CookieHandlingError? {\n+        cookieNameToRemove = name;\n+        cookieDomainToRemove = domain;\n+        cookiePathToRemove = path;\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName)) {\n+            if(!self.cookiesTable.hasNext()) {\n+                var tblResult = readFile(self.fileName);\n+                if (tblResult is table<myCookie>) {\n+                    self.cookiesTable = tblResult;\n+                } else {\n+                    err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                    return err;\n+                }\n+            }\n+            int | error count = self.cookiesTable.remove(checkRemoveCriteria);\n+            if (count is error || count <= 0) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+            error? removeResults = file:remove(<@untainted> self.fileName);\n+            if (removeResults is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+                return err;\n+            }\n+            var writeResult = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+            if (writeResult is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = writeResult);\n+                return err;\n+            }\n+            return;\n+        }\n+        err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No persistent cookie store file to remove\");\n+        return err;\n+    }\n+\n+    # Removes all persistent cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n+    public function removeAllCookies() returns CookieHandlingError? {\n+        error? removeResults = file:remove(self.fileName);\n+        if (removeResults is error) {\n+            CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+            return err;\n+        }\n+    }\n+};\n+\n+function validateFileExtension(string fileName) returns string|CookieHandlingError {\n+    if (fileName.toLowerAscii().endsWith(\".csv\")) {\n+        return fileName;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid file format\");\n+    return err;\n+}\n+\n+function readFile(string fileName) returns @tainted error | table<myCookie> {", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzM0Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371613343", "bodyText": "Can we fix other similar occurrences as well? It's better to remove spaces around |", "author": "chamil321", "createdAt": "2020-01-28T05:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzE3NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371613174", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (tblResult is table<record {| anydata...; |}>) {\n          \n          \n            \n                if (tblResult is table<record{| anydata...; |}>) {", "author": "chamil321", "createdAt": "2020-01-28T05:14:00Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns @tainted Cookie[] | CookieHandlingError {\n+        Cookie[] cookies = [];\n+        if (file:exists(self.fileName)) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                foreach var rec in tblResult {\n+                    Cookie cookie = new(rec.name, rec.value);\n+                    cookie.domain = rec.domain;\n+                    cookie.path = rec.path;\n+                    cookie.expires = rec.expires == \"-\" ? () : rec.expires;\n+                    cookie.maxAge = rec.maxAge;\n+                    cookie.httpOnly = rec.httpOnly;\n+                    cookie.secure = rec.secure;\n+                    time:Time | error t1 = time:parse(rec.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t1 is time:Time) {\n+                        cookie.createdTime = t1;\n+                    }\n+                    time:Time | error t2 = time:parse(rec.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t2 is time:Time) {\n+                        cookie.lastAccessedTime = t2;\n+                    }\n+                    cookie.hostOnly = rec.hostOnly;\n+                    cookies.push(cookie);\n+                }\n+                return cookies;\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+       return cookies;\n+    }\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns @tainted CookieHandlingError? {\n+        cookieNameToRemove = name;\n+        cookieDomainToRemove = domain;\n+        cookiePathToRemove = path;\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName)) {\n+            if(!self.cookiesTable.hasNext()) {\n+                var tblResult = readFile(self.fileName);\n+                if (tblResult is table<myCookie>) {\n+                    self.cookiesTable = tblResult;\n+                } else {\n+                    err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                    return err;\n+                }\n+            }\n+            int | error count = self.cookiesTable.remove(checkRemoveCriteria);\n+            if (count is error || count <= 0) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+            error? removeResults = file:remove(<@untainted> self.fileName);\n+            if (removeResults is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+                return err;\n+            }\n+            var writeResult = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+            if (writeResult is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = writeResult);\n+                return err;\n+            }\n+            return;\n+        }\n+        err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No persistent cookie store file to remove\");\n+        return err;\n+    }\n+\n+    # Removes all persistent cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n+    public function removeAllCookies() returns CookieHandlingError? {\n+        error? removeResults = file:remove(self.fileName);\n+        if (removeResults is error) {\n+            CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+            return err;\n+        }\n+    }\n+};\n+\n+function validateFileExtension(string fileName) returns string|CookieHandlingError {\n+    if (fileName.toLowerAscii().endsWith(\".csv\")) {\n+        return fileName;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid file format\");\n+    return err;\n+}\n+\n+function readFile(string fileName) returns @tainted error | table<myCookie> {\n+    io:ReadableCSVChannel rCsvChannel2 = check io:openReadableCsvFile(fileName);\n+    var tblResult = rCsvChannel2.getTable(myCookie);\n+    closeReadableCSVChannel(rCsvChannel2);\n+    if (tblResult is table<record {| anydata...; |}>) {", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzQxNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371613414", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function writeDataToCSVChannel(io:WritableCSVChannel csvChannel, string[]... data) returns error?{\n          \n          \n            \n            function writeDataToCSVChannel(io:WritableCSVChannel csvChannel, string[]... data) returns error? {", "author": "chamil321", "createdAt": "2020-01-28T05:15:34Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns @tainted Cookie[] | CookieHandlingError {\n+        Cookie[] cookies = [];\n+        if (file:exists(self.fileName)) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                foreach var rec in tblResult {\n+                    Cookie cookie = new(rec.name, rec.value);\n+                    cookie.domain = rec.domain;\n+                    cookie.path = rec.path;\n+                    cookie.expires = rec.expires == \"-\" ? () : rec.expires;\n+                    cookie.maxAge = rec.maxAge;\n+                    cookie.httpOnly = rec.httpOnly;\n+                    cookie.secure = rec.secure;\n+                    time:Time | error t1 = time:parse(rec.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t1 is time:Time) {\n+                        cookie.createdTime = t1;\n+                    }\n+                    time:Time | error t2 = time:parse(rec.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t2 is time:Time) {\n+                        cookie.lastAccessedTime = t2;\n+                    }\n+                    cookie.hostOnly = rec.hostOnly;\n+                    cookies.push(cookie);\n+                }\n+                return cookies;\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+       return cookies;\n+    }\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns @tainted CookieHandlingError? {\n+        cookieNameToRemove = name;\n+        cookieDomainToRemove = domain;\n+        cookiePathToRemove = path;\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName)) {\n+            if(!self.cookiesTable.hasNext()) {\n+                var tblResult = readFile(self.fileName);\n+                if (tblResult is table<myCookie>) {\n+                    self.cookiesTable = tblResult;\n+                } else {\n+                    err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                    return err;\n+                }\n+            }\n+            int | error count = self.cookiesTable.remove(checkRemoveCriteria);\n+            if (count is error || count <= 0) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+            error? removeResults = file:remove(<@untainted> self.fileName);\n+            if (removeResults is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+                return err;\n+            }\n+            var writeResult = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+            if (writeResult is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = writeResult);\n+                return err;\n+            }\n+            return;\n+        }\n+        err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No persistent cookie store file to remove\");\n+        return err;\n+    }\n+\n+    # Removes all persistent cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n+    public function removeAllCookies() returns CookieHandlingError? {\n+        error? removeResults = file:remove(self.fileName);\n+        if (removeResults is error) {\n+            CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+            return err;\n+        }\n+    }\n+};\n+\n+function validateFileExtension(string fileName) returns string|CookieHandlingError {\n+    if (fileName.toLowerAscii().endsWith(\".csv\")) {\n+        return fileName;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid file format\");\n+    return err;\n+}\n+\n+function readFile(string fileName) returns @tainted error | table<myCookie> {\n+    io:ReadableCSVChannel rCsvChannel2 = check io:openReadableCsvFile(fileName);\n+    var tblResult = rCsvChannel2.getTable(myCookie);\n+    closeReadableCSVChannel(rCsvChannel2);\n+    if (tblResult is table<record {| anydata...; |}>) {\n+        return <table<myCookie>>tblResult;\n+    } else {\n+        return  tblResult;\n+    }\n+}\n+\n+function closeReadableCSVChannel(io:ReadableCSVChannel csvChannel) {\n+    var result = csvChannel.close();\n+    if (result is error) {\n+        log:printError(\"Error occurred while closing the channel: \", err = result);\n+    }\n+}\n+\n+// Updates the table with new cookie.\n+function addNewCookieToTable(table<myCookie> cookiesTable, Cookie cookieToAdd) returns table<myCookie> | error {\n+    table<myCookie> tableToReturn = cookiesTable;\n+    var name = cookieToAdd.name;\n+    var value = cookieToAdd.value;\n+    var domain = cookieToAdd.domain;\n+    var path = cookieToAdd.path;\n+    var expires = cookieToAdd.expires;\n+    var createdTime = time:format(cookieToAdd.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    var lastAccessedTime = time:format(cookieToAdd.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    if (name is string && value is string && domain is string && path is string && createdTime is string && lastAccessedTime is string) {\n+        myCookie c1 = { name: name, value: value, domain: domain, path: path, expires: expires is string ? expires : \"-\", maxAge: cookieToAdd.maxAge, httpOnly: cookieToAdd.httpOnly, secure: cookieToAdd.secure, createdTime: createdTime, lastAccessedTime: lastAccessedTime, hostOnly: cookieToAdd.hostOnly };\n+        var result = tableToReturn.add(c1);\n+        if (result is error) {\n+            return result;\n+        }\n+        return tableToReturn;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid data types for cookie attributes\");\n+    return err;\n+}\n+\n+// Writes the updated table to file.\n+function writeToFile(table<myCookie> cookiesTable, string fileName) returns @tainted error? {\n+    io:WritableCSVChannel wCsvChannel2 = check io:openWritableCsvFile(fileName);\n+    foreach var entry in cookiesTable {\n+        string[] rec = [entry.name, entry.value, entry.domain, entry.path, entry.expires, entry.maxAge.toString(), entry.httpOnly.toString(), entry.secure.toString(), entry.createdTime, entry.lastAccessedTime, entry.hostOnly.toString()];\n+        var writeResult = writeDataToCSVChannel(wCsvChannel2, rec);\n+        if (writeResult is error) {\n+            return writeResult;\n+        }\n+    }\n+    closeWritableCSVChannel(wCsvChannel2);\n+}\n+\n+function writeDataToCSVChannel(io:WritableCSVChannel csvChannel, string[]... data) returns error?{", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNzYwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371617609", "bodyText": "Can we fix other similar occurrences as well? It's better to keep a spaces before {", "author": "chamil321", "createdAt": "2020-01-28T05:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMzQxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxNjc4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371616789", "bodyText": "Shall we simplify this as follows?\nreturn rec.name == cookieNameToRemove && rec.domain == cookieDomainToRemove && rec.path == cookiePathToRemove;", "author": "chamil321", "createdAt": "2020-01-28T05:34:47Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n+            return err;\n+        }\n+    }\n+\n+    # Gets all persistent cookies.\n+    #\n+    # + return - Array of persistent cookies stored in the cookie store or else error is returned if occurred during getting the cookies\n+    public function getAllCookies() returns @tainted Cookie[] | CookieHandlingError {\n+        Cookie[] cookies = [];\n+        if (file:exists(self.fileName)) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                foreach var rec in tblResult {\n+                    Cookie cookie = new(rec.name, rec.value);\n+                    cookie.domain = rec.domain;\n+                    cookie.path = rec.path;\n+                    cookie.expires = rec.expires == \"-\" ? () : rec.expires;\n+                    cookie.maxAge = rec.maxAge;\n+                    cookie.httpOnly = rec.httpOnly;\n+                    cookie.secure = rec.secure;\n+                    time:Time | error t1 = time:parse(rec.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t1 is time:Time) {\n+                        cookie.createdTime = t1;\n+                    }\n+                    time:Time | error t2 = time:parse(rec.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+                    if (t2 is time:Time) {\n+                        cookie.lastAccessedTime = t2;\n+                    }\n+                    cookie.hostOnly = rec.hostOnly;\n+                    cookies.push(cookie);\n+                }\n+                return cookies;\n+            } else {\n+                CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+       return cookies;\n+    }\n+\n+    # Removes a specific persistent cookie.\n+    #\n+    # + name - Name of the persistent cookie to be removed\n+    # + domain - Domain of the persistent cookie to be removed\n+    # + path - Path of the persistent cookie to be removed\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns @tainted CookieHandlingError? {\n+        cookieNameToRemove = name;\n+        cookieDomainToRemove = domain;\n+        cookiePathToRemove = path;\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName)) {\n+            if(!self.cookiesTable.hasNext()) {\n+                var tblResult = readFile(self.fileName);\n+                if (tblResult is table<myCookie>) {\n+                    self.cookiesTable = tblResult;\n+                } else {\n+                    err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                    return err;\n+                }\n+            }\n+            int | error count = self.cookiesTable.remove(checkRemoveCriteria);\n+            if (count is error || count <= 0) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No such cookie to remove\");\n+                return err;\n+            }\n+            error? removeResults = file:remove(<@untainted> self.fileName);\n+            if (removeResults is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+                return err;\n+            }\n+            var writeResult = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+            if (writeResult is error) {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = writeResult);\n+                return err;\n+            }\n+            return;\n+        }\n+        err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing cookie: No persistent cookie store file to remove\");\n+        return err;\n+    }\n+\n+    # Removes all persistent cookies.\n+    #\n+    # + return - An error will be returned if there is any error occurred during removing all the cookies or else nil is returned\n+    public function removeAllCookies() returns CookieHandlingError? {\n+        error? removeResults = file:remove(self.fileName);\n+        if (removeResults is error) {\n+            CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Error in removing the csv file\", cause = removeResults);\n+            return err;\n+        }\n+    }\n+};\n+\n+function validateFileExtension(string fileName) returns string|CookieHandlingError {\n+    if (fileName.toLowerAscii().endsWith(\".csv\")) {\n+        return fileName;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid file format\");\n+    return err;\n+}\n+\n+function readFile(string fileName) returns @tainted error | table<myCookie> {\n+    io:ReadableCSVChannel rCsvChannel2 = check io:openReadableCsvFile(fileName);\n+    var tblResult = rCsvChannel2.getTable(myCookie);\n+    closeReadableCSVChannel(rCsvChannel2);\n+    if (tblResult is table<record {| anydata...; |}>) {\n+        return <table<myCookie>>tblResult;\n+    } else {\n+        return  tblResult;\n+    }\n+}\n+\n+function closeReadableCSVChannel(io:ReadableCSVChannel csvChannel) {\n+    var result = csvChannel.close();\n+    if (result is error) {\n+        log:printError(\"Error occurred while closing the channel: \", err = result);\n+    }\n+}\n+\n+// Updates the table with new cookie.\n+function addNewCookieToTable(table<myCookie> cookiesTable, Cookie cookieToAdd) returns table<myCookie> | error {\n+    table<myCookie> tableToReturn = cookiesTable;\n+    var name = cookieToAdd.name;\n+    var value = cookieToAdd.value;\n+    var domain = cookieToAdd.domain;\n+    var path = cookieToAdd.path;\n+    var expires = cookieToAdd.expires;\n+    var createdTime = time:format(cookieToAdd.createdTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    var lastAccessedTime = time:format(cookieToAdd.lastAccessedTime, \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\");\n+    if (name is string && value is string && domain is string && path is string && createdTime is string && lastAccessedTime is string) {\n+        myCookie c1 = { name: name, value: value, domain: domain, path: path, expires: expires is string ? expires : \"-\", maxAge: cookieToAdd.maxAge, httpOnly: cookieToAdd.httpOnly, secure: cookieToAdd.secure, createdTime: createdTime, lastAccessedTime: lastAccessedTime, hostOnly: cookieToAdd.hostOnly };\n+        var result = tableToReturn.add(c1);\n+        if (result is error) {\n+            return result;\n+        }\n+        return tableToReturn;\n+    }\n+    CookieHandlingError err = error(COOKIE_HANDLING_ERROR, message = \"Invalid data types for cookie attributes\");\n+    return err;\n+}\n+\n+// Writes the updated table to file.\n+function writeToFile(table<myCookie> cookiesTable, string fileName) returns @tainted error? {\n+    io:WritableCSVChannel wCsvChannel2 = check io:openWritableCsvFile(fileName);\n+    foreach var entry in cookiesTable {\n+        string[] rec = [entry.name, entry.value, entry.domain, entry.path, entry.expires, entry.maxAge.toString(), entry.httpOnly.toString(), entry.secure.toString(), entry.createdTime, entry.lastAccessedTime, entry.hostOnly.toString()];\n+        var writeResult = writeDataToCSVChannel(wCsvChannel2, rec);\n+        if (writeResult is error) {\n+            return writeResult;\n+        }\n+    }\n+    closeWritableCSVChannel(wCsvChannel2);\n+}\n+\n+function writeDataToCSVChannel(io:WritableCSVChannel csvChannel, string[]... data) returns error?{\n+    foreach var rec in data {\n+        var returnedVal = csvChannel.write(rec);\n+        if (returnedVal is error) {\n+            return returnedVal;\n+        }\n+    }\n+}\n+\n+function closeWritableCSVChannel(io:WritableCSVChannel csvChannel) {\n+    var result = csvChannel.close();\n+    if (result is error) {\n+        log:printError(\"Error occurred while closing the channel: \", err = result);\n+    }\n+}\n+\n+function checkRemoveCriteria(myCookie rec) returns boolean {\n+    if (rec.name == cookieNameToRemove && rec.domain == cookieDomainToRemove && rec.path == cookiePathToRemove) {\n+        return true;\n+    }\n+    return false;", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMDgyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371620829", "bodyText": "Shouldn't we return the 'CookieHandlingError' here?", "author": "Bhashinee", "createdAt": "2020-01-28T05:56:01Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -58,62 +58,62 @@ public type Cookie object {\n         return true;\n     }\n \n-    // Returns true if the attributes of the cookie are in the correct format; false otherwise.\n+    // Returns true if the attributes of the cookie are in the correct format or else error is returned.\n     public function isValid() returns boolean | error {", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MDMzNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371740336", "bodyText": "+1 for returning CookieHandlingError.\nPlease check the other places as well.", "author": "ThisaruGuruge", "createdAt": "2020-01-28T11:11:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYyMDgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY0ODQwOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371648409", "bodyText": "Without saying 'invalid name', can't we specifically say that name cannot be empty? Because here we are checking whether the name is an empty string.  Applies to other places as well. (domain, value)", "author": "Bhashinee", "createdAt": "2020-01-28T07:50:00Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -58,62 +58,62 @@ public type Cookie object {\n         return true;\n     }\n \n-    // Returns true if the attributes of the cookie are in the correct format; false otherwise.\n+    // Returns true if the attributes of the cookie are in the correct format or else error is returned.\n     public function isValid() returns boolean | error {\n-        error invalidCookieError;\n-        var temp = self.name;\n-        if (temp is string) {\n-            temp = temp.trim();\n-            if (temp == \"\") {\n-                invalidCookieError = error(\"Invalid name\");\n-                return invalidCookieError;\n+        CookieHandlingError err;\n+        var name = self.name;\n+        if (name is string) {\n+            name = name.trim();\n+            if (name == \"\") {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Invalid name\");", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2MzM3MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371663371", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                while (j < self.allSessionCookies.length()-1) {\n          \n          \n            \n                                while (j < self.allSessionCookies.length() - 1) {", "author": "Bhashinee", "createdAt": "2020-01-28T08:33:38Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,157 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", err = result);\n+            } else {\n+                foreach var cookie in result {\n+                    allCookies.push(cookie);\n+                }\n+            }\n+        }\n+        return allCookies;\n+    }\n+\n+    # Gets all the cookies which have the given name as the name of the cookie.\n+    #\n+    # + cookieName - Name of the cookie\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByName(string cookieName) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.name == cookieName) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n+    }\n+\n+    # Gets all the cookies which have the given name as the domain of the cookie.\n+    #\n+    # + domain - name of the domain\n+    # + return - Array of all the matched cookie objects\n+    public function getCookiesByDomain(string domain) returns Cookie[] {\n+        Cookie[] cookiesToReturn = [];\n+        Cookie[] allCookies = self.getAllCookies();\n+        foreach var cookie in allCookies {\n+            if (cookie.domain == domain) {\n+                cookiesToReturn.push(cookie);\n+            }\n+        }\n+        return cookiesToReturn;\n     }\n \n     # Removes a specific cookie.\n     #\n     # + name - Name of the cookie to be removed\n     # + domain - Domain of the cookie to be removed\n     # + path - Path of the cookie to be removed\n-    # + return - Return true if the relevant cookie is removed, false otherwise\n-    public function removeCookie(string name, string domain, string path) returns boolean {\n-         lock {\n-             // Removes the session cookie in the cookie store, which is matched with the given name, domain and path.\n-             int k = 0;\n-             while (k < self.allSessionCookies.length()) {\n-                 if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n-                     int j = k;\n-                     while (j < self.allSessionCookies.length()-1) {\n-                         self.allSessionCookies[j] = self.allSessionCookies[j + 1];\n-                         j = j + 1;\n-                     }\n-                     _ = self.allSessionCookies.pop();\n-                     return true;\n-                 }\n-                 k = k + 1;\n-             }\n-             return false;\n-         }\n+    # + return - An error will be returned if there is any error occurred during removing the cookie or else nil is returned\n+    public function removeCookie(string name, string domain, string path) returns error? {\n+        lock {\n+            // Removes the session cookie if it is in the session cookies array, which is matched with the given name, domain and path.\n+            int k = 0;\n+            while (k < self.allSessionCookies.length()) {\n+                if (name == self.allSessionCookies[k].name && domain == self.allSessionCookies[k].domain && path ==  self.allSessionCookies[k].path) {\n+                    int j = k;\n+                    while (j < self.allSessionCookies.length()-1) {", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3MTg5Mg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371671892", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        path = requestPath.substring(0,index);\n          \n          \n            \n                         path = requestPath.substring(0, index);", "author": "suganyasuven", "createdAt": "2020-01-28T08:53:30Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -30,14 +37,22 @@ public type CookieStore object {\n     # + url - Target service URL\n     # + requestPath - Resource path\n     public function addCookie(Cookie cookie, CookieConfig cookieConfig, string url, string requestPath) {\n+        if (self.getAllCookies().length() == cookieConfig.maxTotalCookieCount) {\n+            log:printWarn(\"Number of total cookies in the cookie store can not exceed the maximum amount\");\n+            return;\n+        }\n         string domain = getDomain(url);\n+        if (self.getCookiesByDomain(domain).length() == cookieConfig.maxCookiesPerDomain) {\n+            log:printWarn(\"Number of total cookies for the domain: \" + domain + \" in the cookie store can not exceed the maximum amount per domain\");\n+            return;\n+        }\n         string path  = requestPath;\n         int? index = requestPath.indexOf(\"?\");\n         if (index is int) {\n             path = requestPath.substring(0,index);", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3MjM1NA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371672354", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    log:printError(\"Error in adding persistent cookies: \", err = result);\n          \n          \n            \n                                    log:printError(\"Error in adding persistent cookies: \", result);", "author": "suganyasuven", "createdAt": "2020-01-28T08:54:27Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -51,12 +66,20 @@ public type CookieStore object {\n                 return;\n             }\n             if (cookie.isPersistent()) {\n-                if (!cookieConfig.enablePersistence) {\n-                    return;\n+                var persistentCookieHandler = self.persistentCookieHandler;\n+                if (persistentCookieHandler is PersistentCookieHandler) {\n+                    var result = addPersistentCookie(identicalCookie, cookie, url, persistentCookieHandler, self);\n+                    if (result is error) {\n+                        log:printError(\"Error in adding persistent cookies: \", err = result);", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3NTQyNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371675424", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);\n          \n          \n            \n                        return error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);", "author": "suganyasuven", "createdAt": "2020-01-28T09:00:36Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/csv_persistent_cookie_handler.bal", "diffHunk": "@@ -0,0 +1,254 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/io;\n+import ballerina/log;\n+import ballerina/file;\n+import ballerina/time;\n+\n+type myCookie record {\n+    string name;\n+    string value;\n+    string domain;\n+    string path;\n+    string expires;\n+    int maxAge;\n+    boolean httpOnly;\n+    boolean secure;\n+    string createdTime;\n+    string lastAccessedTime;\n+    boolean hostOnly;\n+};\n+\n+string? cookieNameToRemove = ();\n+string? cookieDomainToRemove = ();\n+string? cookiePathToRemove = ();\n+\n+# Represents a default persistent cookie handler which stores persistent cookies in a CSV file.\n+#\n+# + fileName - Name of the CSV file to store persistent cookies\n+public type CsvPersistentCookieHandler object {\n+    *PersistentCookieHandler;\n+\n+    string fileName = \"\";\n+    table<myCookie> cookiesTable = table{};\n+\n+    public function __init(string fileName) {\n+        self.fileName = checkpanic validateFileExtension(fileName);\n+    }\n+\n+    # Adds a persistent cookie to the cookie store.\n+    #\n+    # + cookie - Cookie to be added\n+    # + return - An error will be returned if there is any error occurred during storing the cookie or else nil is returned\n+    public function storeCookie(Cookie cookie) returns @tainted CookieHandlingError? {\n+        CookieHandlingError err;\n+        if (file:exists(self.fileName) && !self.cookiesTable.hasNext()) {\n+            var tblResult = readFile(self.fileName);\n+            if (tblResult is table<myCookie>) {\n+                self.cookiesTable = tblResult;\n+            } else {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Error in reading the csv file\", cause = tblResult);\n+                return err;\n+            }\n+        }\n+        var tableUpdateResult = addNewCookieToTable(self.cookiesTable, cookie);\n+        if (tableUpdateResult is table<myCookie>) {\n+            self.cookiesTable = tableUpdateResult;\n+        } else {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in updating the records in csv file\", cause = tableUpdateResult);\n+            return err;\n+        }\n+        var result = writeToFile(self.cookiesTable, <@untainted> self.fileName);\n+        if (result is error) {\n+            err = error(COOKIE_HANDLING_ERROR, message = \"Error in writing the csv file\", cause = result);", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3NTY4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371675681", "bodyText": "Shall we merge this as one statement?", "author": "suganyasuven", "createdAt": "2020-01-28T09:01:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3NTQyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY3ODA1MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371678050", "bodyText": "Shall we rename the variable balFilepath to balFilePath?", "author": "suganyasuven", "createdAt": "2020-01-28T09:06:25Z", "path": "tests/jballerina-integration-test/src/test/java/org/ballerinalang/test/service/http/sample/HTTPCookiesTestCase.java", "diffHunk": "@@ -98,6 +98,75 @@ public void testSendRequestsByClient() throws BallerinaTestException {\n         BMainInstance bMainInstance = new BMainInstance(balServer);\n         String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n                 \"cookieClient_06.bal\"}, balFilepath);\n-        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34; SID001=239d4dmnmsddd34\"));\n+        Assert.assertTrue(output.contains(\"SID001=239d4dmnmsddd34; SID003=895gd4dmnmsddd34; SID002=178gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by client\")\n+    public void testRemovePersistentCookieByClient() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_07.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send similar persistent cookies in the response by server, old cookie is replaced by \" +\n+            \"new cookie in the cookie store\")\n+    public void testAddSimilarPersistentCookies() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_08.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID001=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a session cookie and a similar persistent cookie in the response by server, old \" +\n+            \"session cookie is replaced by new persistent cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_1() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_09.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=aeaa895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test send a persistent cookie and a similar session cookie in the response by server, old \" +\n+            \"persistent cookie is replaced by new session cookie in the cookie store\")\n+    public void testSendSimilarPersistentAndSessionCookies_2() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +\n+                                               File.separator + \"http\" + File.separator + \"src\" + File.separator +\n+                                               \"cookie\")).getAbsolutePath();\n+        BMainInstance bMainInstance = new BMainInstance(balServer);\n+        String output = bMainInstance.runMainAndReadStdOut(\"run\", new String[]{\n+                \"cookieClient_10.bal\"}, balFilepath);\n+        Assert.assertTrue(output.contains(\"SID003=895gd4dmnmsddd34\"));\n+    }\n+\n+    @Test(description = \"Test remove persistent cookie by server\")\n+    public void testRemovePersistentCookieByServer() throws BallerinaTestException {\n+        String balFilepath = (new File(\"src\" + File.separator + \"test\" + File.separator + \"resources\" +", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczOTIyOQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371739229", "bodyText": "OutboundResponseError is occurred at listener-side, while ClientError is occurred at the client-side. It does not seem correct to have the same error in both OutboundResponseError and ClientError types.\nAs per the discussion, shall we create a new Error type for Cookie-related errors in the listener-side ?", "author": "ThisaruGuruge", "createdAt": "2020-01-28T11:08:18Z", "path": "stdlib/http/src/main/ballerina/src/http/http_errors.bal", "diffHunk": "@@ -197,12 +202,12 @@ public type InboundRequestError InitializingInboundRequestError|ReadingInboundRe\n # Defines the listener error types that returned while sending outbound response\n public type OutboundResponseError InitializingOutboundResponseError|WritingOutboundResponseHeadersError|\n                             WritingOutboundResponseBodyError|Initiating100ContinueResponseError|\n-                            Writing100ContinueResponseError;\n+                            Writing100ContinueResponseError|CookieHandlingError;", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc0MTgyOA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r371741828", "bodyText": "Shall we add more specific error message? maybe like, Invalid value: Value cannot be empty. Check the other places as well.", "author": "ThisaruGuruge", "createdAt": "2020-01-28T11:14:41Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookie.bal", "diffHunk": "@@ -58,62 +58,62 @@ public type Cookie object {\n         return true;\n     }\n \n-    // Returns true if the attributes of the cookie are in the correct format; false otherwise.\n+    // Returns true if the attributes of the cookie are in the correct format or else error is returned.\n     public function isValid() returns boolean | error {\n-        error invalidCookieError;\n-        var temp = self.name;\n-        if (temp is string) {\n-            temp = temp.trim();\n-            if (temp == \"\") {\n-                invalidCookieError = error(\"Invalid name\");\n-                return invalidCookieError;\n+        CookieHandlingError err;\n+        var name = self.name;\n+        if (name is string) {\n+            name = name.trim();\n+            if (name == \"\") {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Invalid name\");\n+                return err;\n             }\n-            self.name = temp;\n-        }\n-        temp = self.value;\n-        if (temp is string) {\n-            temp = temp.trim();\n-            if (temp == \"\") {\n-                invalidCookieError = error(\"Invalid value\");\n-                return invalidCookieError;\n+            self.name = name;\n+        }\n+        var value = self.value;\n+        if (value is string) {\n+            value = value.trim();\n+            if (value == \"\") {\n+                err = error(COOKIE_HANDLING_ERROR, message = \"Invalid value\");", "originalCommit": "f07ec9842660728b8b36973efc601351ebc50a00", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "644da0f7bb4e0aa4d756d096274f3c273b9e55f2", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/644da0f7bb4e0aa4d756d096274f3c273b9e55f2", "message": "Resolve language and formatting issues", "committedDate": "2020-01-29T05:31:39Z", "type": "commit"}, {"oid": "5904687a24dd1c4e9750f868f3c24f2c0fa82ec3", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5904687a24dd1c4e9750f868f3c24f2c0fa82ec3", "message": "Change cookie store and csv persistent cookie handler", "committedDate": "2020-01-29T08:38:09Z", "type": "commit"}, {"oid": "2dc1c20a942b24e9df35743d38a80b9f5632cc10", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/2dc1c20a942b24e9df35743d38a80b9f5632cc10", "message": "Add InvalidCookieError", "committedDate": "2020-01-29T18:01:49Z", "type": "commit"}, {"oid": "dde5c1622d23eff1e427e98dfecc565d4801ee81", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dde5c1622d23eff1e427e98dfecc565d4801ee81", "message": "Change language server unit tests", "committedDate": "2020-01-30T04:55:32Z", "type": "commit"}, {"oid": "dde5c1622d23eff1e427e98dfecc565d4801ee81", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/dde5c1622d23eff1e427e98dfecc565d4801ee81", "message": "Change language server unit tests", "committedDate": "2020-01-30T04:55:32Z", "type": "forcePushed"}, {"oid": "ddda14f9127bb432140fcf8267888c42668f3d3e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ddda14f9127bb432140fcf8267888c42668f3d3e", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into apis-with-persistent-cookies", "committedDate": "2020-01-30T05:32:31Z", "type": "commit"}, {"oid": "e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "message": "Change completionWithinTransaction file", "committedDate": "2020-01-30T06:20:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4NTc4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r372785788", "bodyText": "Isn't this an error scenario? Someone wants to add cookie, but it can't be added. For me, that's an error. WDYT?", "author": "ThisaruGuruge", "createdAt": "2020-01-30T07:03:09Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -30,14 +37,22 @@ public type CookieStore object {\n     # + url - Target service URL\n     # + requestPath - Resource path\n     public function addCookie(Cookie cookie, CookieConfig cookieConfig, string url, string requestPath) {\n+        if (self.getAllCookies().length() == cookieConfig.maxTotalCookieCount) {\n+            log:printWarn(\"Number of total cookies in the cookie store can not exceed the maximum amount\");\n+            return;", "originalCommit": "e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4NzI4MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r372787281", "bodyText": "This too looks like an error scenario.", "author": "ThisaruGuruge", "createdAt": "2020-01-30T07:08:50Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -114,39 +140,150 @@ public type CookieStore object {\n     #\n     # + return - Array of all the cookie objects\n     public function getAllCookies() returns Cookie[] {\n-        return self.allSessionCookies;\n+        var persistentCookieHandler = self.persistentCookieHandler;\n+        Cookie[] allCookies = [];\n+        foreach var cookie in self.allSessionCookies {\n+            allCookies.push(cookie);\n+        }\n+        if (persistentCookieHandler is PersistentCookieHandler) {\n+            var result = persistentCookieHandler.getAllCookies();\n+            if (result is error) {\n+                log:printError(\"Error in getting persistent cookies: \", result);", "originalCommit": "e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4NDg0Nw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r372884847", "bodyText": "we call this function when a client sends a request , has to get cookies from the cookie store. So wants to return at least session cookies in a case we get an error from persistent cookies.if we,return an error because of the persistent cookies, session cookies also will not be returned. That's why, used a log to make aware about the error in persistent cookies and return only the session cookies.Returning only session cookies is not an error .", "author": "Tharuja", "createdAt": "2020-01-30T11:01:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4NzI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg5NzU4OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r372897588", "bodyText": "Right.", "author": "ThisaruGuruge", "createdAt": "2020-01-30T11:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc4NzI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5OTIxNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r372799215", "bodyText": "Shall we reduce this to return (exptime < curTime.time); ?", "author": "ThisaruGuruge", "createdAt": "2020-01-30T07:49:25Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -261,46 +398,60 @@ function isExpiresAttributeValid(Cookie cookie) returns boolean {\n     }\n }\n \n+// Checks whether the user has requested a particular domain or a sub-domain of it previously or not.\n+function isFirstRequest(Cookie[] allSessionCookies, string domain) returns boolean {\n+    foreach var cookie in allSessionCookies {\n+       var cookieDomain = cookie.domain;\n+       if (((cookieDomain is string && (domain.endsWith(\".\" + cookieDomain) || cookieDomain.endsWith(\".\" + domain))) || cookie.domain == domain )) {\n+           return false;\n+       }\n+    }\n+    return true;\n+}\n+\n // Adds a persistent cookie to the cookie store according to the rules in [RFC-6265](https://tools.ietf.org/html/rfc6265#section-5.3 , https://tools.ietf.org/html/rfc6265#section-4.1.2).\n-function addPersistentCookie(Cookie? identicalCookie, Cookie cookie, string url, CookieStore cookieStore) {\n+function addPersistentCookie(Cookie? identicalCookie, Cookie cookie, string url, PersistentCookieHandler persistentCookieHandler, CookieStore cookieStore) returns error? {\n     if (identicalCookie is Cookie) {\n-        var temp1 = identicalCookie.name;\n-        var temp2 = identicalCookie.domain;\n-        var temp3 = identicalCookie.path;\n-        if (isExpired(cookie) && temp1 is string && temp2 is string && temp3 is string) {\n-            _ = cookieStore.removeCookie(temp1, temp2, temp3);\n+        var identicalCookieName = identicalCookie.name;\n+        var identicalCookieDomain = identicalCookie.domain;\n+        var identicalCookiePath = identicalCookie.path;\n+        if (isExpired(cookie) && identicalCookieName is string && identicalCookieDomain is string && identicalCookiePath is string) {\n+            return cookieStore.removeCookie(identicalCookieName, identicalCookieDomain, identicalCookiePath);\n         } else {\n             // Removes the old cookie and adds the new persistent cookie.\n-            if (((identicalCookie.httpOnly && url.startsWith(HTTP)) || identicalCookie.httpOnly == false) && temp1 is string && temp2 is string && temp3 is string) {\n-                _ = cookieStore.removeCookie(temp1, temp2, temp3);\n-                cookie.creationTime = identicalCookie.creationTime;\n+            if (((identicalCookie.httpOnly && url.startsWith(HTTP)) || identicalCookie.httpOnly == false) && identicalCookieName is string && identicalCookieDomain is string && identicalCookiePath is string) {\n+                var removeResult = cookieStore.removeCookie(identicalCookieName, identicalCookieDomain, identicalCookiePath);\n+                if (removeResult is error) {\n+                    return removeResult;\n+                }\n+                cookie.createdTime = identicalCookie.createdTime;\n                 cookie.lastAccessedTime = time:currentTime();\n-                // TODO:insert into the database.\n+                return persistentCookieHandler.storeCookie(cookie);\n             }\n         }\n     } else {\n-        // If cookie is not expired adds that cookie.\n+        // If cookie is not expired, adds that cookie.\n         if (!isExpired(cookie)) {\n-            cookie.creationTime = time:currentTime();\n+            cookie.createdTime = time:currentTime();\n             cookie.lastAccessedTime = time:currentTime();\n-            // TODO:insert into the database.\n+            return persistentCookieHandler.storeCookie(cookie);\n         }\n     }\n }\n \n // Returns true if the cookie is expired according to the rules in [RFC-6265](https://tools.ietf.org/html/rfc6265#section-4.1.2.2).\n function isExpired(Cookie cookie) returns boolean {\n     if (cookie.maxAge > 0) {\n-        time:Time exptime = time:addDuration(cookie.creationTime, 0, 0, 0, 0, 0, cookie.maxAge, 0);\n+        time:Time exptime = time:addDuration(cookie.createdTime, 0, 0, 0, 0, 0, cookie.maxAge, 0);\n         time:Time curTime = time:currentTime();\n         if (exptime.time < curTime.time) {", "originalCommit": "e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5OTI3OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r372799278", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    time:Time exptime = time:addDuration(cookie.createdTime, 0, 0, 0, 0, 0, cookie.maxAge, 0);\n          \n          \n            \n                    time:Time expTime = time:addDuration(cookie.createdTime, 0, 0, 0, 0, 0, cookie.maxAge, 0);", "author": "ThisaruGuruge", "createdAt": "2020-01-30T07:49:38Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -261,46 +398,60 @@ function isExpiresAttributeValid(Cookie cookie) returns boolean {\n     }\n }\n \n+// Checks whether the user has requested a particular domain or a sub-domain of it previously or not.\n+function isFirstRequest(Cookie[] allSessionCookies, string domain) returns boolean {\n+    foreach var cookie in allSessionCookies {\n+       var cookieDomain = cookie.domain;\n+       if (((cookieDomain is string && (domain.endsWith(\".\" + cookieDomain) || cookieDomain.endsWith(\".\" + domain))) || cookie.domain == domain )) {\n+           return false;\n+       }\n+    }\n+    return true;\n+}\n+\n // Adds a persistent cookie to the cookie store according to the rules in [RFC-6265](https://tools.ietf.org/html/rfc6265#section-5.3 , https://tools.ietf.org/html/rfc6265#section-4.1.2).\n-function addPersistentCookie(Cookie? identicalCookie, Cookie cookie, string url, CookieStore cookieStore) {\n+function addPersistentCookie(Cookie? identicalCookie, Cookie cookie, string url, PersistentCookieHandler persistentCookieHandler, CookieStore cookieStore) returns error? {\n     if (identicalCookie is Cookie) {\n-        var temp1 = identicalCookie.name;\n-        var temp2 = identicalCookie.domain;\n-        var temp3 = identicalCookie.path;\n-        if (isExpired(cookie) && temp1 is string && temp2 is string && temp3 is string) {\n-            _ = cookieStore.removeCookie(temp1, temp2, temp3);\n+        var identicalCookieName = identicalCookie.name;\n+        var identicalCookieDomain = identicalCookie.domain;\n+        var identicalCookiePath = identicalCookie.path;\n+        if (isExpired(cookie) && identicalCookieName is string && identicalCookieDomain is string && identicalCookiePath is string) {\n+            return cookieStore.removeCookie(identicalCookieName, identicalCookieDomain, identicalCookiePath);\n         } else {\n             // Removes the old cookie and adds the new persistent cookie.\n-            if (((identicalCookie.httpOnly && url.startsWith(HTTP)) || identicalCookie.httpOnly == false) && temp1 is string && temp2 is string && temp3 is string) {\n-                _ = cookieStore.removeCookie(temp1, temp2, temp3);\n-                cookie.creationTime = identicalCookie.creationTime;\n+            if (((identicalCookie.httpOnly && url.startsWith(HTTP)) || identicalCookie.httpOnly == false) && identicalCookieName is string && identicalCookieDomain is string && identicalCookiePath is string) {\n+                var removeResult = cookieStore.removeCookie(identicalCookieName, identicalCookieDomain, identicalCookiePath);\n+                if (removeResult is error) {\n+                    return removeResult;\n+                }\n+                cookie.createdTime = identicalCookie.createdTime;\n                 cookie.lastAccessedTime = time:currentTime();\n-                // TODO:insert into the database.\n+                return persistentCookieHandler.storeCookie(cookie);\n             }\n         }\n     } else {\n-        // If cookie is not expired adds that cookie.\n+        // If cookie is not expired, adds that cookie.\n         if (!isExpired(cookie)) {\n-            cookie.creationTime = time:currentTime();\n+            cookie.createdTime = time:currentTime();\n             cookie.lastAccessedTime = time:currentTime();\n-            // TODO:insert into the database.\n+            return persistentCookieHandler.storeCookie(cookie);\n         }\n     }\n }\n \n // Returns true if the cookie is expired according to the rules in [RFC-6265](https://tools.ietf.org/html/rfc6265#section-4.1.2.2).\n function isExpired(Cookie cookie) returns boolean {\n     if (cookie.maxAge > 0) {\n-        time:Time exptime = time:addDuration(cookie.creationTime, 0, 0, 0, 0, 0, cookie.maxAge, 0);\n+        time:Time exptime = time:addDuration(cookie.createdTime, 0, 0, 0, 0, 0, cookie.maxAge, 0);", "originalCommit": "e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjgyMjMyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r372822322", "bodyText": "Shall we add a default value for the persistentCookieHandler value ?\nLike,\npublic function __init(PersistentCookieHandler? persistentCookieHandler = ()) ?\nThis way we can instantiate a CookieStore by\nCookieStore cookieStore = new;\ninstead of\nCookieStore cookieStore = new(()); which is kind of weird (for me)\nWDYT ?", "author": "ThisaruGuruge", "createdAt": "2020-01-30T08:51:25Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -14,14 +14,21 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+import ballerina/log;\n import ballerina/time;\n \n # Represents the cookie store.\n #\n # + allSessionCookies - Array to store all the session cookies\n+# + persistentCookieHandler - Persistent cookie handler to manage persistent cookies\n public type CookieStore object {\n \n     Cookie[] allSessionCookies = [];\n+    PersistentCookieHandler? persistentCookieHandler = ();\n+\n+    public function __init(PersistentCookieHandler? persistentCookieHandler) {", "originalCommit": "e910724ab92e79544e1bfd8accd2c522b1a4aa9c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg4NTYyMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20753#discussion_r372885620", "bodyText": "Shall we restrict this line to 120 characters? Please check in other places too.", "author": "parkavi11", "createdAt": "2020-01-30T11:02:50Z", "path": "stdlib/http/src/main/ballerina/src/http/cookie/cookieStore.bal", "diffHunk": "@@ -177,14 +214,14 @@ function getDomain(string url) returns string {\n # Identical cookie is the cookie, which has the same name, domain and path as the given cookie.\n #\n # + cookieToCompare - Cookie to be compared\n-# + allSessionCookies - Array which stores all the session cookies\n+# + cookieStore - Cookie store of the client\n # + return - Identical cookie if one exists, else `()`\n-function getIdenticalCookie(Cookie cookieToCompare, Cookie[] allSessionCookies) returns Cookie? {\n-    // Searches for the session cookies.\n+function getIdenticalCookie(Cookie cookieToCompare, CookieStore cookieStore) returns Cookie? {\n+    Cookie[] allCookies = cookieStore.getAllCookies();\n     int k = 0 ;\n-    while (k < allSessionCookies.length()) {\n-        if (cookieToCompare.name == allSessionCookies[k].name && cookieToCompare.domain == allSessionCookies[k].domain  && cookieToCompare.path ==  allSessionCookies[k].path) {\n-            return allSessionCookies[k];\n+    while (k < allCookies.length()) {\n+        if (cookieToCompare.name == allCookies[k].name && cookieToCompare.domain == allCookies[k].domain  && cookieToCompare.path ==  allCookies[k].path) {", "originalCommit": "7bfacf09f22df749224bca66340625d5d06ddee3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d3560997e8da6602240e2e42ae42f8e6bc7f4ecc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d3560997e8da6602240e2e42ae42f8e6bc7f4ecc", "message": "Change cookie store and tests", "committedDate": "2020-01-30T16:15:35Z", "type": "commit"}]}