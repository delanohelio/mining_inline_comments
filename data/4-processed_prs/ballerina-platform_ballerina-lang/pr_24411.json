{"pr_number": 24411, "pr_title": "Handle the parsed node in compiler front end", "pr_createdAt": "2020-06-22T11:48:42Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411", "timeline": [{"oid": "047d4b8b3132e0e6a030cd5d9866240309be5acc", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/047d4b8b3132e0e6a030cd5d9866240309be5acc", "message": "Add new tests", "committedDate": "2020-06-22T18:12:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2NzU0NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443967545", "bodyText": "shall we use TreeBuilder.createIdentifierNode(); instead of createIdentifier(null, \"\")?", "author": "SupunS", "createdAt": "2020-06-23T05:20:07Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/parser/BLangNodeTransformer.java", "diffHunk": "@@ -4033,6 +4033,11 @@ private BLangType createBuiltInTypeNode(Node type) {\n             BuiltinSimpleNameReferenceNode simpleNameRef = (BuiltinSimpleNameReferenceNode) type;\n             if (simpleNameRef.kind() == SyntaxKind.VAR_TYPE_DESC) {\n                 return null;\n+            } else if (simpleNameRef.name().isMissing()) {\n+                String name = missingNodesHelper.getNextMissingNodeName(diagnosticSource.pkgID);\n+                BLangIdentifier identifier = createIdentifier(getPosition(simpleNameRef.name()), name);\n+                BLangIdentifier pkgAlias = createIdentifier(null, \"\");", "originalCommit": "047d4b8b3132e0e6a030cd5d9866240309be5acc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NjU0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r444966548", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-06-24T15:08:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2NzU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk2OTQ4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443969489", "bodyText": "still need @Test(groups = { \"brokenOnNewParser\" })?", "author": "SupunS", "createdAt": "2020-06-23T05:25:43Z", "path": "tests/jballerina-unit-test/src/test/java/org/ballerinalang/test/types/globalvar/GlobalVarNegativeTest.java", "diffHunk": "@@ -33,11 +33,13 @@\n     public void testGlobalVarNegatives() {\n         CompileResult resultNegative = BCompileUtil.compile(\n                 \"test-src/statements/variabledef/global_variable_negative.bal\");\n-        Assert.assertEquals(resultNegative.getErrorCount(), 4);\n-        BAssertUtil.validateError(resultNegative, 0, \"invalid token 'int'\", 27, 8);\n-        BAssertUtil.validateError(resultNegative, 1, \"invalid token 'int'\", 29, 8);\n-        BAssertUtil.validateError(resultNegative, 2, \"mismatched input ';'. expecting '='\", 31, 46);\n-        BAssertUtil.validateError(resultNegative, 3, \"mismatched input ';'. expecting '='\", 33, 59);\n+        Assert.assertEquals(resultNegative.getErrorCount(), 6);", "originalCommit": "047d4b8b3132e0e6a030cd5d9866240309be5acc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDAyNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443970027", "bodyText": "I think we should continue, only if its the new parser.\nIf the old parser is in use, we should terminate like before", "author": "SupunS", "createdAt": "2020-06-23T05:27:19Z", "path": "compiler/ballerina-lang/src/main/java/org/wso2/ballerinalang/compiler/PackageLoader.java", "diffHunk": "@@ -378,9 +378,6 @@ public BLangPackage loadEntryPackage(PackageID pkgId, PackageID enclPackageId, P\n         }\n \n         BLangPackage packageNode = parse(pkgId, (PackageSource) pkgEntity);\n-        if (packageNode.diagCollector.hasErrors()) {", "originalCommit": "047d4b8b3132e0e6a030cd5d9866240309be5acc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NjYyMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r444966621", "bodyText": "Done", "author": "KavinduZoysa", "createdAt": "2020-06-24T15:08:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDY5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443970699", "bodyText": "should this be ff.bar() or f.bar()?", "author": "SupunS", "createdAt": "2020-06-23T05:29:13Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/resilient-parser.bal", "diffHunk": "@@ -0,0 +1,45 @@\n+public function (int a, int b) {\n+    int x1 = 2;\n+}\n+\n+public function foo1(int) {\n+    int x1 = 3;\n+}\n+\n+public function foo2(int a, = \"hello\") {\n+    int x1 = 3;\n+}\n+\n+public function foo2(int a =) {\n+    int x1 = 3;\n+    int x1 = 3;\n+}\n+\n+public function foo3(int a) {\n+    return a;\n+}\n+\n+public function foo4(int a) returns {\n+}\n+\n+public function foo5(int a, = \"hello\", int b =) {\n+    int x1 = 3;\n+    int[] arr = [10, 20,];\n+    arr[1 = 20;\n+    int x = arr[1;\n+    ar[2] = 40;\n+    int y = arr1];\n+}\n+\n+type Foo object {\n+    int x;\n+\n+    function bar () returns int {\n+        return 2;\n+    }\n+};\n+\n+public function foo6() {\n+    Foo f  new;\n+    int x = ff.bar();", "originalCommit": "047d4b8b3132e0e6a030cd5d9866240309be5acc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk2NjY4Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r444966683", "bodyText": "What I expect here is to get the error 'redeclared symbol'.", "author": "KavinduZoysa", "createdAt": "2020-06-24T15:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MDY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MjMwMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r443972300", "bodyText": "Shall we add some more tests like:\n\nImport with missing pieces (missing prefix, missing org-name, missing module-name etc..)\nObject/record type definitions, with missing object/record name\nNamespace decl with missing pieces\nService decl with missing pieces\n\nSimilarly, can add tests for all module level decls with missing parts: https://ballerina.io/ballerina-spec/spec.html#module_level", "author": "SupunS", "createdAt": "2020-06-23T05:35:20Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/parser/resilient-parser.bal", "diffHunk": "@@ -0,0 +1,45 @@\n+public function (int a, int b) {\n+    int x1 = 2;\n+}\n+\n+public function foo1(int) {\n+    int x1 = 3;\n+}\n+\n+public function foo2(int a, = \"hello\") {\n+    int x1 = 3;\n+}\n+\n+public function foo2(int a =) {\n+    int x1 = 3;\n+    int x1 = 3;\n+}\n+\n+public function foo3(int a) {\n+    return a;\n+}\n+\n+public function foo4(int a) returns {\n+}\n+\n+public function foo5(int a, = \"hello\", int b =) {\n+    int x1 = 3;\n+    int[] arr = [10, 20,];\n+    arr[1 = 20;\n+    int x = arr[1;\n+    ar[2] = 40;\n+    int y = arr1];\n+}\n+\n+type Foo object {\n+    int x;\n+\n+    function bar () returns int {\n+        return 2;\n+    }\n+};\n+\n+public function foo6() {\n+    Foo f  new;\n+    int x = ff.bar();\n+}", "originalCommit": "047d4b8b3132e0e6a030cd5d9866240309be5acc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2NjU4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24411#discussion_r446666580", "bodyText": "Add more tests.", "author": "KavinduZoysa", "createdAt": "2020-06-28T15:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzk3MjMwMA=="}], "type": "inlineReview"}, {"oid": "5b6a1a4e1db170c7f5fdc3c1646ae7f0b149364a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5b6a1a4e1db170c7f5fdc3c1646ae7f0b149364a", "message": "Add new tests", "committedDate": "2020-06-28T15:49:00Z", "type": "forcePushed"}, {"oid": "11d03fdf9326a711fc443797991df5055452c399", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/11d03fdf9326a711fc443797991df5055452c399", "message": "Add new tests", "committedDate": "2020-06-28T16:45:47Z", "type": "forcePushed"}, {"oid": "b77b167b34279fe0f3015a4aea55a68a94dce78f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b77b167b34279fe0f3015a4aea55a68a94dce78f", "message": "Add new tests", "committedDate": "2020-06-30T04:24:05Z", "type": "forcePushed"}, {"oid": "ab79234575643b5ccbe4c80bc330a7e09ed3a76a", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ab79234575643b5ccbe4c80bc330a7e09ed3a76a", "message": "Pass the errors to compilerDriver", "committedDate": "2020-07-01T04:12:17Z", "type": "commit"}, {"oid": "57baa064590dcc2e3ba561ead5ed2d0dea06a968", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/57baa064590dcc2e3ba561ead5ed2d0dea06a968", "message": "Fix failure tests", "committedDate": "2020-07-01T04:12:17Z", "type": "commit"}, {"oid": "eb7789ed230b18fc6a14d4fdffac1e15dc3a729f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/eb7789ed230b18fc6a14d4fdffac1e15dc3a729f", "message": "Add new tests", "committedDate": "2020-07-01T04:12:17Z", "type": "commit"}, {"oid": "50c58d7426a7b48e5fb6dbf4aa79625251f2f9a5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50c58d7426a7b48e5fb6dbf4aa79625251f2f9a5", "message": "Fix the suggestions", "committedDate": "2020-07-01T04:12:17Z", "type": "commit"}, {"oid": "263a629c73ab0098d79ed72f977126b03a60c21c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/263a629c73ab0098d79ed72f977126b03a60c21c", "message": "Add new tests", "committedDate": "2020-07-01T04:12:17Z", "type": "commit"}, {"oid": "263a629c73ab0098d79ed72f977126b03a60c21c", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/263a629c73ab0098d79ed72f977126b03a60c21c", "message": "Add new tests", "committedDate": "2020-07-01T04:12:17Z", "type": "forcePushed"}]}