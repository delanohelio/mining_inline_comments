{"pr_number": 24862, "pr_title": "Fix `is type` check for `readonly` fields", "pr_createdAt": "2020-07-21T08:46:33Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862", "timeline": [{"oid": "e1d77a88f55c2c9112ce965c19fa0b878f6cfe85", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/e1d77a88f55c2c9112ce965c19fa0b878f6cfe85", "message": "Consider field readonly-ness in is type check - phase I", "committedDate": "2020-07-10T14:58:06Z", "type": "commit"}, {"oid": "d311dd1f58e78441b983f182daa4301168699ea1", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d311dd1f58e78441b983f182daa4301168699ea1", "message": "Add basic tests for records", "committedDate": "2020-07-13T18:06:56Z", "type": "commit"}, {"oid": "826232641212ce95a07b4cc7d037efc77ec62cfb", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/826232641212ce95a07b4cc7d037efc77ec62cfb", "message": "Fix subtyping for objects with module-level visibility fields", "committedDate": "2020-07-20T05:47:11Z", "type": "commit"}, {"oid": "d66b2e23b7c3ecfcdfb8f3b2c163b14ca93b6c67", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d66b2e23b7c3ecfcdfb8f3b2c163b14ca93b6c67", "message": "Add tests", "committedDate": "2020-07-20T11:56:59Z", "type": "commit"}, {"oid": "5a40303998face0e7b8d435e3758db20b4938cf9", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/5a40303998face0e7b8d435e3758db20b4938cf9", "message": "Refactor code and use unresolved types for object field is type check", "committedDate": "2020-07-21T04:56:57Z", "type": "commit"}, {"oid": "519b7f40ff23002908c73fdeac34992a89bf6914", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/519b7f40ff23002908c73fdeac34992a89bf6914", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-07-21T06:00:02Z", "type": "commit"}, {"oid": "f075a5fa7aceab78f9e146501651751d7062518b", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f075a5fa7aceab78f9e146501651751d7062518b", "message": "Add tests", "committedDate": "2020-07-21T07:22:35Z", "type": "commit"}, {"oid": "89d22eb7f7e942abf06ad82febb4cb33835d0cdd", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89d22eb7f7e942abf06ad82febb4cb33835d0cdd", "message": "Remove unused variable", "committedDate": "2020-07-21T08:39:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTk3Ng==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r459995976", "bodyText": "I think HashSet is a better choice if we are searching in the unresolvedTypes.", "author": "KRVPerera", "createdAt": "2020-07-24T11:25:51Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -975,6 +1070,137 @@ private static boolean checkIsRecordType(BType sourceType, BRecordType targetTyp\n         return true;\n     }\n \n+    private static boolean checkRecordBelongsToAnydataType(MapValue sourceVal, BRecordType recordType,\n+                                                           List<TypePair> unresolvedTypes) {\n+        BType targetType = BTypes.typeAnydata;\n+        TypePair pair = new TypePair(recordType, targetType);\n+        if (unresolvedTypes.contains(pair)) {", "originalCommit": "89d22eb7f7e942abf06ad82febb4cb33835d0cdd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0ODE5Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r460648193", "bodyText": "This is passed on to checkIsType and in general we seem to be using lists in checkIsType and checkIsLikeType. Shall we do this change separately? Can you please create an issue with the suggestion?", "author": "MaryamZi", "createdAt": "2020-07-27T05:03:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTk3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIwNzc0MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r487207740", "bodyText": "Issue: #25293", "author": "KRVPerera", "createdAt": "2020-09-11T18:08:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk5NTk3Ng=="}], "type": "inlineReview"}, {"oid": "d6cb14f2973c5216909bf7c103ce6aea71befc12", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/d6cb14f2973c5216909bf7c103ce6aea71befc12", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-07-27T05:10:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4Mjg4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r466182889", "bodyText": "What's the reason to call checkIslikeType() for readonly fields and checkIsType() for non-readonly fields?", "author": "pubudu91", "createdAt": "2020-08-06T06:51:40Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -741,6 +796,46 @@ private static boolean checkIsMapType(BType sourceType, BMapType targetType, Lis\n         }\n     }\n \n+    private static boolean checkIsMapType(Object sourceVal, BType sourceType, BMapType targetType,\n+                                          List<TypePair> unresolvedTypes) {\n+        BType targetConstrainedType = targetType.getConstrainedType();\n+        switch (sourceType.getTag()) {\n+            case TypeTags.MAP_TAG:\n+                return checkConstraints(((BMapType) sourceType).getConstrainedType(), targetConstrainedType,\n+                                        unresolvedTypes);\n+            case TypeTags.RECORD_TYPE_TAG:\n+                MapValue sourceMapValue = (MapValue) sourceVal;\n+                BRecordType recType = (BRecordType) sourceType;\n+\n+                for (BField field : recType.getFields().values()) {\n+                    if (!Flags.isFlagOn(field.flags, Flags.READONLY)) {\n+                        if (!checkIsType(field.type, targetConstrainedType, unresolvedTypes)) {\n+                            return false;\n+                        }\n+                        continue;\n+                    }\n+\n+                    BString name = StringUtils.fromString(field.name);\n+\n+                    if (Flags.isFlagOn(field.flags, Flags.OPTIONAL) && !sourceMapValue.containsKey(name)) {\n+                        continue;\n+                    }\n+\n+                    if (!checkIsLikeType(sourceMapValue.get(name), targetConstrainedType)) {", "originalCommit": "d6cb14f2973c5216909bf7c103ce6aea71befc12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNzYxNg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r466907616", "bodyText": "A readonly field cannot be updated, and whatever the value that was initially set is guaranteed to be immutable.\nFor an immutable value, is type is the same as is like type (as though the \"inherent type\" changed).\nSo if there is a readonly field, we know that it can never change (the reference or the value). So if the value specified for that field looks like the target type it would mean that it belongs to the target type.\nThis is similar to how we call check-is-like-type when check-is-type is used with immutable values.", "author": "MaryamZi", "createdAt": "2020-08-07T08:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE4Mjg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0NzMyMw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r466347323", "bodyText": "We should consider the org name too right? Not sure whether the version should be considered though", "author": "pubudu91", "createdAt": "2020-08-06T11:30:34Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -1132,26 +1363,70 @@ private static boolean checkObjectEquivalency(BType sourceType, BObjectType targ\n             return false;\n         }\n \n+\n+        String targetTypeModule = Optional.ofNullable(targetType.getPackage()).map(BPackage::getName).orElse(\"\");\n+        String sourceTypeModule = Optional.ofNullable(sourceObjectType.getPackage()).map(BPackage::getName).orElse(\"\");", "originalCommit": "d6cb14f2973c5216909bf7c103ce6aea71befc12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY3MDUwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r467670505", "bodyText": "We should consider all 3 right? Two different versions of the same module can be considered as two different modules IMO, when considering visibility regions.\nWill fix, thanks.", "author": "MaryamZi", "createdAt": "2020-08-10T03:10:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0NzMyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODM1NzczMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r468357731", "bodyText": "Came across #25199 when trying to fix this. Both fixed in 8d23769.", "author": "MaryamZi", "createdAt": "2020-08-11T06:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM0NzMyMw=="}], "type": "inlineReview"}, {"oid": "34a4a21c5995a5e98cf15e0ac19c0b8ff758c20f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/34a4a21c5995a5e98cf15e0ac19c0b8ff758c20f", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-08-10T03:12:19Z", "type": "commit"}, {"oid": "8d23769ed66098c9697e620d5714559780588b0d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8d23769ed66098c9697e620d5714559780588b0d", "message": "Consider org-name/version for type equality and object subtyping", "committedDate": "2020-08-11T06:34:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1NTMxMA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r468455310", "bodyText": "targetTypeTag ? as you have already acquired it", "author": "Kishanthan", "createdAt": "2020-08-11T09:40:30Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -641,6 +642,60 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n         }\n     }\n \n+    private static boolean checkIsType(Object sourceVal, BType sourceType, BType targetType,\n+                                      List<TypePair> unresolvedTypes) {\n+        int sourceTypeTag = sourceType.getTag();\n+        int targetTypeTag = targetType.getTag();\n+\n+        if (sourceTypeTag != TypeTags.RECORD_TYPE_TAG && sourceTypeTag != TypeTags.OBJECT_TYPE_TAG) {\n+            return checkIsType(sourceType, targetType);\n+        }\n+\n+        if (targetType.getTag() == TypeTags.INTERSECTION_TAG) {", "originalCommit": "8d23769ed66098c9697e620d5714559780588b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1NzA4MA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r468457080", "bodyText": "this flag can move within the if body? as it is used only there.", "author": "Kishanthan", "createdAt": "2020-08-11T09:43:39Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -975,6 +1070,137 @@ private static boolean checkIsRecordType(BType sourceType, BRecordType targetTyp\n         return true;\n     }\n \n+    private static boolean checkRecordBelongsToAnydataType(MapValue sourceVal, BRecordType recordType,\n+                                                           List<TypePair> unresolvedTypes) {\n+        BType targetType = BTypes.typeAnydata;\n+        TypePair pair = new TypePair(recordType, targetType);\n+        if (unresolvedTypes.contains(pair)) {\n+            return true;\n+        }\n+        unresolvedTypes.add(pair);\n+\n+        Map<String, BField> fields = recordType.getFields();\n+\n+        for (BField field : fields.values()) {\n+            String fieldName = field.getFieldName();\n+\n+            boolean optionalField = Flags.isFlagOn(field.flags, Flags.OPTIONAL);", "originalCommit": "8d23769ed66098c9697e620d5714559780588b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1NzI2Mw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r468457263", "bodyText": "merge these two ifs", "author": "Kishanthan", "createdAt": "2020-08-11T09:43:59Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -975,6 +1070,137 @@ private static boolean checkIsRecordType(BType sourceType, BRecordType targetTyp\n         return true;\n     }\n \n+    private static boolean checkRecordBelongsToAnydataType(MapValue sourceVal, BRecordType recordType,\n+                                                           List<TypePair> unresolvedTypes) {\n+        BType targetType = BTypes.typeAnydata;\n+        TypePair pair = new TypePair(recordType, targetType);\n+        if (unresolvedTypes.contains(pair)) {\n+            return true;\n+        }\n+        unresolvedTypes.add(pair);\n+\n+        Map<String, BField> fields = recordType.getFields();\n+\n+        for (BField field : fields.values()) {\n+            String fieldName = field.getFieldName();\n+\n+            boolean optionalField = Flags.isFlagOn(field.flags, Flags.OPTIONAL);\n+\n+            if (Flags.isFlagOn(field.flags, Flags.READONLY)) {\n+                BString fieldNameBString = StringUtils.fromString(fieldName);\n+\n+                if (optionalField) {\n+                    if (!sourceVal.containsKey(fieldNameBString)) {", "originalCommit": "8d23769ed66098c9697e620d5714559780588b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ1ODQxMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r468458412", "bodyText": "nested ifs. can it be merged?", "author": "Kishanthan", "createdAt": "2020-08-11T09:45:55Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -975,6 +1070,137 @@ private static boolean checkIsRecordType(BType sourceType, BRecordType targetTyp\n         return true;\n     }\n \n+    private static boolean checkRecordBelongsToAnydataType(MapValue sourceVal, BRecordType recordType,\n+                                                           List<TypePair> unresolvedTypes) {\n+        BType targetType = BTypes.typeAnydata;\n+        TypePair pair = new TypePair(recordType, targetType);\n+        if (unresolvedTypes.contains(pair)) {\n+            return true;\n+        }\n+        unresolvedTypes.add(pair);\n+\n+        Map<String, BField> fields = recordType.getFields();\n+\n+        for (BField field : fields.values()) {\n+            String fieldName = field.getFieldName();\n+\n+            boolean optionalField = Flags.isFlagOn(field.flags, Flags.OPTIONAL);\n+\n+            if (Flags.isFlagOn(field.flags, Flags.READONLY)) {\n+                BString fieldNameBString = StringUtils.fromString(fieldName);\n+\n+                if (optionalField) {\n+                    if (!sourceVal.containsKey(fieldNameBString)) {\n+                        continue;\n+                    }\n+                }\n+\n+                if (!checkIsLikeType(sourceVal.get(fieldNameBString), targetType)) {\n+                    return false;\n+                }\n+            } else {\n+                if (!checkIsType(field.type, targetType, unresolvedTypes)) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        if (recordType.sealed) {\n+            return true;\n+        }\n+\n+        return checkIsType(recordType.restFieldType, targetType, unresolvedTypes);\n+    }\n+\n+    private static boolean checkIsRecordType(Object sourceVal, BType sourceType, BRecordType targetType,\n+                                             List<TypePair> unresolvedTypes) {\n+        if (sourceType.getTag() != TypeTags.RECORD_TYPE_TAG) {\n+            return false;\n+        }\n+\n+        TypePair pair = new TypePair(sourceType, targetType);\n+        if (unresolvedTypes.contains(pair)) {\n+            return true;\n+        }\n+        unresolvedTypes.add(pair);\n+\n+        BRecordType sourceRecordType = (BRecordType) sourceType;\n+        if (targetType.sealed && !sourceRecordType.sealed) {\n+            return false;\n+        }\n+\n+        if (!sourceRecordType.sealed &&\n+                !checkIsType(sourceRecordType.restFieldType, targetType.restFieldType, unresolvedTypes)) {\n+            return false;\n+        }\n+\n+        MapValue sourceRecordValue = (MapValue) sourceVal;\n+\n+        Map<String, BField> sourceFields = sourceRecordType.getFields();\n+        Set<String> targetFieldNames = targetType.getFields().keySet();\n+\n+        for (BField targetField : targetType.getFields().values()) {\n+            String fieldName = targetField.getFieldName();\n+            BField sourceField = sourceFields.get(fieldName);\n+\n+            if (sourceField == null) {\n+                return false;\n+            }\n+\n+            if (hasIncompatibleReadOnlyFlags(targetField, sourceField)) {\n+                return false;\n+            }\n+\n+            boolean optionalTargetField = Flags.isFlagOn(targetField.flags, Flags.OPTIONAL);\n+            boolean optionalSourceField = Flags.isFlagOn(sourceField.flags, Flags.OPTIONAL);\n+\n+            if (Flags.isFlagOn(sourceField.flags, Flags.READONLY)) {\n+                BString fieldNameBString = StringUtils.fromString(fieldName);\n+\n+                if (optionalSourceField) {\n+                    if (!sourceRecordValue.containsKey(fieldNameBString)) {", "originalCommit": "8d23769ed66098c9697e620d5714559780588b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ2MjAyMg==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r468462022", "bodyText": "EOF line?", "author": "Kishanthan", "createdAt": "2020-08-11T09:52:09Z", "path": "tests/jballerina-unit-test/src/test/resources/test-src/balo/test_projects/test_project_two/Ballerina.toml", "diffHunk": "@@ -0,0 +1,5 @@\n+[project]\n+org-name= \"testorgtwo\"\n+version= \"2.0.0\"\n+\n+[dependencies]", "originalCommit": "8d23769ed66098c9697e620d5714559780588b0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a1118d66df8f9e76d8c957f60024283cdc767bb7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a1118d66df8f9e76d8c957f60024283cdc767bb7", "message": "Address review suggestions", "committedDate": "2020-08-11T11:21:23Z", "type": "commit"}, {"oid": "3325b4cf811e9986121a0f5c112fb5f3d93e229d", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/3325b4cf811e9986121a0f5c112fb5f3d93e229d", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-08-17T04:12:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3ODA5NQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r472378095", "bodyText": "why we need another checkIsType method ? whats the purpose of this newly added method?", "author": "Kishanthan", "createdAt": "2020-08-18T17:53:26Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -641,6 +642,60 @@ public static boolean checkIsType(BType sourceType, BType targetType, List<TypeP\n         }\n     }\n \n+    private static boolean checkIsType(Object sourceVal, BType sourceType, BType targetType,", "originalCommit": "3325b4cf811e9986121a0f5c112fb5f3d93e229d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MDIwNA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r472590204", "bodyText": "The current checkIsType method is based solely on the source and target types. We check checkIsLikeType only if the entire source value is immutable.\nBut now with readonly fields, even though the entire source value is not immutable, due to the presence of readonly fields, an is check that fails for types, may pass for values.\nFor example, from the sample in the description:\nimport ballerina/io;\n\nconst HUNDRED = 100;\n\ntype Foo record {\n    HUNDRED i;\n};\n\ntype Bar record {\n    readonly string|int i;\n};\n\npublic function main() {\n    Bar b1 = {i: 123};\n    io:println(<any> b1 is Foo); // prints `false`\n\n    Bar b2 = {i: 100};\n    io:println(<any> b2 is Foo); // prints `true` now, since the `i` field of `b2` is and will continue to be `100`\n}\nHere if we just use the current checkIsType with Bar and Foo, it will evaluate to false, since the source has string|int as the type for i, while the target has HUNDRED as the type.\nBut since the i field in the source is a readonly field, we know that the value for this field cannot change, so we look at the actual value to see if it belongs to the target type. So, in the case of b1, where i is 123, it is still not a match, but for b2 since i is 100, and it can never change, the is check evaluates to true.\nWill add a comment too.", "author": "MaryamZi", "createdAt": "2020-08-19T01:56:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3ODA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODc4OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r472628789", "bodyText": "Added a comment in 24985b7.", "author": "MaryamZi", "createdAt": "2020-08-19T03:09:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3ODA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3ODc0OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r472378749", "bodyText": "This case seems to have a big logic. shall we move it to a separate method for better readability?", "author": "Kishanthan", "createdAt": "2020-08-18T17:54:33Z", "path": "bvm/ballerina-runtime/src/main/java/org/ballerinalang/jvm/TypeChecker.java", "diffHunk": "@@ -741,6 +796,46 @@ private static boolean checkIsMapType(BType sourceType, BMapType targetType, Lis\n         }\n     }\n \n+    private static boolean checkIsMapType(Object sourceVal, BType sourceType, BMapType targetType,\n+                                          List<TypePair> unresolvedTypes) {\n+        BType targetConstrainedType = targetType.getConstrainedType();\n+        switch (sourceType.getTag()) {\n+            case TypeTags.MAP_TAG:\n+                return checkConstraints(((BMapType) sourceType).getConstrainedType(), targetConstrainedType,\n+                                        unresolvedTypes);\n+            case TypeTags.RECORD_TYPE_TAG:", "originalCommit": "3325b4cf811e9986121a0f5c112fb5f3d93e229d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYyODIwMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/24862#discussion_r472628201", "bodyText": "Done in 24985b7.", "author": "MaryamZi", "createdAt": "2020-08-19T03:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3ODc0OQ=="}], "type": "inlineReview"}, {"oid": "24985b7034f8fc4d3262f537999ff4c35cb93272", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/24985b7034f8fc4d3262f537999ff4c35cb93272", "message": "Refactor code", "committedDate": "2020-08-19T03:05:15Z", "type": "commit"}, {"oid": "89b76682f90eb58e5521c08091638ae0374f140f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/89b76682f90eb58e5521c08091638ae0374f140f", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-08-25T04:44:21Z", "type": "commit"}, {"oid": "14fc6498828ae44d2ceb2ceef8c341b4ee1360b6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/14fc6498828ae44d2ceb2ceef8c341b4ee1360b6", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-08-28T05:15:43Z", "type": "commit"}, {"oid": "ad0723d42e1a559778f8fe81bfb439491f7ecf14", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ad0723d42e1a559778f8fe81bfb439491f7ecf14", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-09-06T17:59:23Z", "type": "commit"}, {"oid": "18af91f97821563e97351992d5a6959a751b7a69", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/18af91f97821563e97351992d5a6959a751b7a69", "message": "Resolve conflicts and Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-09-11T14:39:48Z", "type": "commit"}, {"oid": "b3632cbc6abece596b5b28152009556ba74ca158", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b3632cbc6abece596b5b28152009556ba74ca158", "message": "Fix issues due to class changes", "committedDate": "2020-09-11T17:23:50Z", "type": "commit"}, {"oid": "9ef2b523855a0442dad39528c7e57dd6aa350750", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9ef2b523855a0442dad39528c7e57dd6aa350750", "message": "Merge branch 'master' of https://github.com/ballerina-lang/ballerina into fix-is-type-for-readonly-fields", "committedDate": "2020-09-14T05:56:42Z", "type": "commit"}]}