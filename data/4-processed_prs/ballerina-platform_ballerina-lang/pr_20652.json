{"pr_number": 20652, "pr_title": "Add default serialisers and deserialisers to Kafka module", "pr_createdAt": "2020-01-17T07:16:52Z", "pr_url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652", "timeline": [{"oid": "df4f9f7f391df6f9bfddad434bb2c7f0ca3e0ea6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/df4f9f7f391df6f9bfddad434bb2c7f0ca3e0ea6", "message": "Remove unnecessary renaming object module", "committedDate": "2019-11-27T13:52:23Z", "type": "commit"}, {"oid": "7b4f652864a2bea3f267a296d35456444e05fb61", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/7b4f652864a2bea3f267a296d35456444e05fb61", "message": "Add default kafka SerDes types to config parameters", "committedDate": "2019-11-27T15:57:24Z", "type": "commit"}, {"oid": "fd77eb9939c99fa00686b66b04e3cb883a98c8d4", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fd77eb9939c99fa00686b66b04e3cb883a98c8d4", "message": "Generalize Kafka Consumers and Producers", "committedDate": "2019-11-27T16:22:46Z", "type": "commit"}, {"oid": "f92c61f019bfb7220edb637ae3af1ff187d0d999", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/f92c61f019bfb7220edb637ae3af1ff187d0d999", "message": "Make SerDes types specific", "committedDate": "2019-11-27T16:24:40Z", "type": "commit"}, {"oid": "1563c385ca8435bbdfeca2be299025fd181bc2c6", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/1563c385ca8435bbdfeca2be299025fd181bc2c6", "message": "Add default Serialization to producer", "committedDate": "2019-12-11T19:53:14Z", "type": "commit"}, {"oid": "043a486270e845f82c0ffd43cb3c27f994ed7a75", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/043a486270e845f82c0ffd43cb3c27f994ed7a75", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-default-serializers", "committedDate": "2020-01-16T07:13:37Z", "type": "commit"}, {"oid": "8f34c7974df56ab7289a5adf2bc675130e5118b5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/8f34c7974df56ab7289a5adf2bc675130e5118b5", "message": "Implement default SerDes types for consumer", "committedDate": "2020-01-16T11:05:14Z", "type": "commit"}, {"oid": "af6c722b097ac850ea30b490df2e5d7183101012", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/af6c722b097ac850ea30b490df2e5d7183101012", "message": "Validate3 consumer data types and add a test", "committedDate": "2020-01-16T15:17:54Z", "type": "commit"}, {"oid": "a180de69e612609a6a85797a1b04a2946c8de7ee", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/a180de69e612609a6a85797a1b04a2946c8de7ee", "message": "Change data type from KafkaData to Data", "committedDate": "2020-01-17T07:23:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MzI5OQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r367893299", "bodyText": "Since we are setting this value in the constructor, Do we need to initialize this with an empty string?", "author": "daneshk", "createdAt": "2020-01-17T11:33:30Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/consumer.bal", "diffHunk": "@@ -115,27 +119,46 @@ public type ConsumerConfig record {|\n # + timestamp - Timestamp of the record, in milliseconds since epoch.\n # + topic - Topic to which the record belongs to.\n public type ConsumerRecord record {|\n-    byte[] key;\n-    byte[] value;\n+    Data key;\n+    Data value;\n     int offset;\n     int partition;\n     int timestamp;\n     string topic;\n |};\n \n+# In-built Kafka byte array deserializer.\n+public const DES_BYTE_ARRAY = \"BYTE_ARRAY\";\n+\n+# In-built Kafka string deserializer.\n+public const DES_STRING = \"STRING\";\n+\n+# In-built Kafka int deserializer.\n+public const DES_INT = \"INT\";\n+\n+# In-built Kafka float deserializer.\n+public const DES_FLOAT = \"FLOAT\";\n+\n+# Kafka in-built deserializer type.\n+public type DeserializerType DES_BYTE_ARRAY|DES_STRING|DES_INT|DES_FLOAT;\n+\n # Represent a Kafka consumer endpoint.\n #\n # + consumerConfig - Used to store configurations related to a Kafka connection.\n public type Consumer client object {\n-    *lang:Listener;\n+    *'object:Listener;\n \n     public ConsumerConfig? consumerConfig = ();\n+    private string keyDeserializer = \"\";", "originalCommit": "a180de69e612609a6a85797a1b04a2946c8de7ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyODk0OA==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368228948", "bodyText": "Ah yes. Agreed.", "author": "ThisaruGuruge", "createdAt": "2020-01-18T14:13:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg5MzI5OQ=="}], "type": "inlineReview"}, {"oid": "87e5bb3c6cb96ccee63069eaee33d383a751dd5f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/87e5bb3c6cb96ccee63069eaee33d383a751dd5f", "message": "Remove unnecessary variable initialization", "committedDate": "2020-01-18T14:11:49Z", "type": "commit"}, {"oid": "b79eb30024bc11d187d92ef2cc1a7e26dbd65c82", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b79eb30024bc11d187d92ef2cc1a7e26dbd65c82", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-default-serializers", "committedDate": "2020-01-19T04:20:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMjcxNw==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368412717", "bodyText": "Shall we move these sub logic to a sub function?", "author": "wggihan", "createdAt": "2020-01-20T08:15:04Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,11 +199,176 @@ public type Producer client object {\n     # + partition - Partition to which the record should be sent.\n     # + timestamp - Timestamp of the record, in milliseconds since epoch.\n     # + return - Returns `kafka:ProducerError` if send action fails to send data, nil otherwise.\n-    public remote function send(byte[] value, string topic, public byte[]? key = (), public int? partition = (),\n+    public remote function send(Data value, string topic, public Data? key = (), public int? partition = (),\n                                 public int? timestamp = ()) returns ProducerError? {\n-        return producerSend(self, value, java:fromString(topic), key, partition, timestamp);\n-    }\n \n+        handle topicHandle = java:fromString(topic);\n+\n+        // Handle string values\n+        if (self.valueSerializer == SER_STRING) {\n+            if (value is string) {\n+                handle valueHandle = java:fromString(value);\n+\n+                if (key is ()) {\n+                    return producerSendString(self, valueHandle, topicHandle, partition, timestamp);\n+                }\n+\n+                if (self.keySerializer == SER_STRING) {\n+                    if (key is string) {\n+                        handle keyHandle = java:fromString(key);\n+                        return producerSendStringString(self, valueHandle, topicHandle, keyHandle, partition,\n+                                                        timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"string\");\n+                }\n+\n+                if (self.keySerializer == SER_INT) {\n+                    if (key is int) {\n+                        return producerSendStringInt(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"int\");\n+                }\n+\n+                if (self.keySerializer == SER_FLOAT) {\n+                    if (key is float) {\n+                        return producerSendStringFloat(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"float\");\n+                }\n+\n+                if (self.keySerializer == SER_BYTE_ARRAY) {\n+                    if (key is byte[]) {\n+                        return producerSendStringByteArray(self, valueHandle, topicHandle, key, partition, timestamp);\n+                    }\n+                    panic getKeyTypeMismatchError(\"byte[]\");\n+                }\n+            }\n+\n+            panic getValueTypeMismatchError(\"string\");\n+        }\n+\n+        // Handle int values\n+        if (self.valueSerializer == SER_INT) {", "originalCommit": "b79eb30024bc11d187d92ef2cc1a7e26dbd65c82", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMzg1MQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368533851", "bodyText": "Done", "author": "ThisaruGuruge", "createdAt": "2020-01-20T12:57:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMjcxNw=="}], "type": "inlineReview"}, {"oid": "fffb62e925ad1412f8692f9000ad53bd5ddaf3a7", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/fffb62e925ad1412f8692f9000ad53bd5ddaf3a7", "message": "bump kafka module version", "committedDate": "2020-01-20T09:38:46Z", "type": "commit"}, {"oid": "efab17d53ca8a396dfc0c241571f7f9622932564", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/efab17d53ca8a396dfc0c241571f7f9622932564", "message": "Move different send scenarios to separate functions", "committedDate": "2020-01-20T09:39:50Z", "type": "commit"}, {"oid": "b09cfa43cfa663a956864765daca5055060b58f5", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/b09cfa43cfa663a956864765daca5055060b58f5", "message": "Merge branch 'master' of https://github.com/ballerina-platform/ballerina-lang into kafka-default-serializers\n\n\u0001 Conflicts:\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Assign.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Close.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Commit.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/CommitOffset.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetAssignment.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetAvailableTopics.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetBeginningOffsets.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetCommittedOffset.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetEndOffsets.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetPausedPartitions.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetPositionOffset.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetSubscription.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/GetTopicPartitions.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Pause.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Resume.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Seek.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/SeekToBeginning.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/SeekToEnd.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Subscribe.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/SubscribeToPattern.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/SubscribeWithPartitionRebalance.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/consumer/Unsubscribe.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/Close.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/CommitConsumer.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/CommitConsumerOffsets.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/FlushRecords.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/GetTopicPartitions.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/nativeimpl/producer/Send.java\n\u0001\tstdlib/messaging/kafka/src/main/java/org/ballerinalang/messaging/kafka/utils/KafkaUtils.java", "committedDate": "2020-01-20T10:02:23Z", "type": "commit"}, {"oid": "50a2e10ed3d650320ff3ccfa81a69f6064982f37", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/50a2e10ed3d650320ff3ccfa81a69f6064982f37", "message": "Fix code style issues", "committedDate": "2020-01-20T12:17:29Z", "type": "commit"}, {"oid": "134f03a86ec563cb299bad228eee9aa2b300e887", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/134f03a86ec563cb299bad228eee9aa2b300e887", "message": "Fix non-blocking calls not returning errors issue", "committedDate": "2020-01-20T12:34:45Z", "type": "commit"}, {"oid": "9f71c4baa0b0e5750444e4bacab5d23feb86cd8e", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/9f71c4baa0b0e5750444e4bacab5d23feb86cd8e", "message": "Migrate SubscribeWithPartitionRebalance function to inter-op", "committedDate": "2020-01-20T12:55:15Z", "type": "commit"}, {"oid": "ca87e5861403af5fca6f20c65888deecb4ef246f", "url": "https://github.com/ballerina-platform/ballerina-lang/commit/ca87e5861403af5fca6f20c65888deecb4ef246f", "message": "Fix style issues in Kafka module code", "committedDate": "2020-01-20T13:42:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDIwNQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368814205", "bodyText": "Shall we change indentations as previous?", "author": "wggihan", "createdAt": "2020-01-21T05:12:44Z", "path": "stdlib/messaging/kafka/src/main/ballerina/src/kafka/producer.bal", "diffHunk": "@@ -174,13 +199,174 @@ public type Producer client object {\n     # + partition - Partition to which the record should be sent.\n     # + timestamp - Timestamp of the record, in milliseconds since epoch.\n     # + return - Returns `kafka:ProducerError` if send action fails to send data, nil otherwise.\n-    public remote function send(byte[] value, string topic, public byte[]? key = (), public int? partition = (),\n-                                public int? timestamp = ()) returns ProducerError? {\n-        return producerSend(self, value, java:fromString(topic), key, partition, timestamp);\n+    public remote function send(Data value, string topic, public Data? key = (), public int? partition = (),\n+                                                            public int? timestamp = ()) returns ProducerError? {", "originalCommit": "ca87e5861403af5fca6f20c65888deecb4ef246f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODg5ODIxMQ==", "url": "https://github.com/ballerina-platform/ballerina-lang/pull/20652#discussion_r368898211", "bodyText": "There are a few styling issues and also the java methods needed to re-arrange after the inter-op migration. This will be addressed in that PR.", "author": "ThisaruGuruge", "createdAt": "2020-01-21T09:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNDIwNQ=="}], "type": "inlineReview"}]}