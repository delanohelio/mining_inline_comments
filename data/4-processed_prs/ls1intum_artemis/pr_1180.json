{"pr_number": 1180, "pr_title": "Chore: Add tests for ModelingExerciseResource", "pr_createdAt": "2020-01-11T14:46:50Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1180", "timeline": [{"oid": "36db181b7f1e9dde94d881e9fc0a18026cad96de", "url": "https://github.com/ls1intum/Artemis/commit/36db181b7f1e9dde94d881e9fc0a18026cad96de", "message": "Remove unnecessary auth check", "committedDate": "2020-01-10T22:43:23Z", "type": "commit"}, {"oid": "9780f9f3bf98bdd8e52a203a99f1f536b87f6c95", "url": "https://github.com/ls1intum/Artemis/commit/9780f9f3bf98bdd8e52a203a99f1f536b87f6c95", "message": "Add test for delete method", "committedDate": "2020-01-10T23:19:23Z", "type": "commit"}, {"oid": "df22ac73526f43ca78aa165b1ea2c50013575fc1", "url": "https://github.com/ls1intum/Artemis/commit/df22ac73526f43ca78aa165b1ea2c50013575fc1", "message": "Add test for get method", "committedDate": "2020-01-10T23:29:00Z", "type": "commit"}, {"oid": "04ceeb0e518b649ca75dc923c9c5fa0872d5d9dd", "url": "https://github.com/ls1intum/Artemis/commit/04ceeb0e518b649ca75dc923c9c5fa0872d5d9dd", "message": "Add tests for get methods", "committedDate": "2020-01-11T01:36:58Z", "type": "commit"}, {"oid": "4350f23dba7b473c86196d7bc979bc6e881a78e9", "url": "https://github.com/ls1intum/Artemis/commit/4350f23dba7b473c86196d7bc979bc6e881a78e9", "message": "Add tests for create and update", "committedDate": "2020-01-11T03:44:47Z", "type": "commit"}, {"oid": "1a6e31937b67bc69e324398c7f2bcb341c883b57", "url": "https://github.com/ls1intum/Artemis/commit/1a6e31937b67bc69e324398c7f2bcb341c883b57", "message": "Add null check test for updateModelingExercise method", "committedDate": "2020-01-11T14:40:39Z", "type": "commit"}, {"oid": "20a0709a1d35f195216cb95d118726332b27c795", "url": "https://github.com/ls1intum/Artemis/commit/20a0709a1d35f195216cb95d118726332b27c795", "message": "Remove unused imports", "committedDate": "2020-01-11T14:41:33Z", "type": "commit"}, {"oid": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50", "url": "https://github.com/ls1intum/Artemis/commit/627253b73af2ce3b9ec69cdde6b82efe9ee02e50", "message": "Apply spotless", "committedDate": "2020-01-11T15:05:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUyNjEzMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365526131", "bodyText": "I think this auth check is not necessary since all users who do not have the user role ADMIN cannot access this endpoint (@PreAuthorize(\"hasAnyRole('ADMIN')\"))", "author": "lovaiible", "createdAt": "2020-01-11T15:07:00Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingExerciseResource.java", "diffHunk": "@@ -211,10 +210,6 @@ public ModelingExerciseResource(ModelingExerciseRepository modelingExerciseRepos\n     @PreAuthorize(\"hasAnyRole('ADMIN')\")\n     public ResponseEntity<Void> getCompassStatisticForExercise(@PathVariable Long exerciseId) {\n         ModelingExercise modelingExercise = modelingExerciseService.findOne(exerciseId);\n-        if (!authCheckService.isAdmin()) {", "originalCommit": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTAzOA==", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365531038", "bodyText": "is this really necessary? I would like to avoid this, because this would mean all tests use the courseService as SypBean", "author": "krusche", "createdAt": "2020-01-11T16:53:04Z", "path": "src/test/java/de/tum/in/www1/artemis/AbstractSpringIntegrationTest.java", "diffHunk": "@@ -42,4 +43,7 @@\n \n     @SpyBean\n     protected WebsocketMessagingService websocketMessagingService;\n+\n+    @SpyBean\n+    protected CourseService courseService;", "originalCommit": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MjY5OA==", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365542698", "bodyText": "@krusche Yes, you are right. I can add the SpyBean only to the ModelingExerciseIntegrationTest", "author": "lovaiible", "createdAt": "2020-01-11T21:19:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTEyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365531127", "bodyText": "Is this mocking behavior really necessary? I would like to avoid something like this and rather insert the data correctly into the database before executing a certain REST Call", "author": "krusche", "createdAt": "2020-01-11T16:54:57Z", "path": "src/test/java/de/tum/in/www1/artemis/ModelingExerciseIntegrationTest.java", "diffHunk": "@@ -59,4 +70,74 @@ public void getCompassStatistic_asInstructor_Forbidden() throws Exception {\n     public void getCompassStatistic_asAdmin_Success() throws Exception {\n         request.getNullable(\"/api/exercises/\" + classExercise.getId() + \"/compass-statistic\", HttpStatus.OK, String.class);\n     }\n+\n+    @Test\n+    @WithMockUser(username = \"user1\", roles = \"USER\")\n+    public void testGetModelingExercise_asStudent_Forbidden() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId(), HttpStatus.FORBIDDEN, ModelingExercise.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExercise_asTA() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId(), HttpStatus.OK, ModelingExercise.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExerciseForCourse_asTA() throws Exception {\n+        request.get(\"/api/courses/\" + classExercise.getCourse().getId() + \"/modeling-exercises\", HttpStatus.OK, List.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"tutor1\", roles = \"TA\")\n+    public void testGetModelingExerciseStatistics_asTA() throws Exception {\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/statistics\", HttpStatus.OK, String.class);\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + 1 + \"/statistics\", HttpStatus.NOT_FOUND, String.class);\n+\n+        classExercise.setDiagramType(CommunicationDiagram);\n+        exerciseRepo.save(classExercise);\n+        request.get(\"/api/modeling-exercises/\" + classExercise.getId() + \"/statistics\", HttpStatus.NOT_FOUND, String.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testCreateModelingExercise_asInstructor() throws Exception {\n+        ModelingExercise modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId());\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.CREATED);\n+\n+        modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId(), 1L);\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.BAD_REQUEST);\n+\n+        modelingExercise = modelingExerciseUtilService.createModelingExercise(2L);\n+        request.post(\"/api/modeling-exercises\", modelingExercise, HttpStatus.NOT_FOUND);\n+    }\n+\n+    @Test\n+    @WithMockUser(username = \"instructor1\", roles = \"INSTRUCTOR\")\n+    public void testUpdateModelingExercise_asInstructor() throws Exception {\n+        ModelingExercise modelingExercise = modelingExerciseUtilService.createModelingExercise(classExercise.getCourse().getId());\n+        ModelingExercise createdModelingExercise = request.putWithResponseBody(\"/api/modeling-exercises\", modelingExercise, ModelingExercise.class, HttpStatus.CREATED);\n+\n+        ModelingExercise modelingExerciseWithSubmission = modelingExerciseUtilService.addExampleSubmission(createdModelingExercise);\n+        ModelingExercise returnedModelingExercise = request.putWithResponseBody(\"/api/modeling-exercises\", modelingExerciseWithSubmission, ModelingExercise.class, HttpStatus.OK);\n+        assertThat(returnedModelingExercise.getExampleSubmissions().size()).isEqualTo(1);\n+\n+        when(courseService.findOne(classExercise.getCourse().getId())).thenReturn(null);", "originalCommit": "627253b73af2ce3b9ec69cdde6b82efe9ee02e50", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTU0MjY2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1180#discussion_r365542667", "bodyText": "@krusche  Yes, I added it because the ModelingExerciseResource checks if the course is null in the checkModelingExercise, even though courseService.findOne(modelingExercise.getCourse().getId()) throws an EntityNotFoundException if the course is null:\n\n  \n    \n      Artemis/src/main/java/de/tum/in/www1/artemis/web/rest/ModelingExerciseResource.java\n    \n    \n         Line 109\n      in\n      0919a20\n    \n    \n    \n    \n\n        \n          \n           if (course == null) {", "author": "lovaiible", "createdAt": "2020-01-11T21:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUzMTEyNw=="}], "type": "inlineReview"}, {"oid": "79857cff558e2834153773841b82a9c6697d36bc", "url": "https://github.com/ls1intum/Artemis/commit/79857cff558e2834153773841b82a9c6697d36bc", "message": "Apply feedback", "committedDate": "2020-01-11T21:20:29Z", "type": "commit"}, {"oid": "eb5cecfd26b51a9a554fa3fce15af0c18e0354e5", "url": "https://github.com/ls1intum/Artemis/commit/eb5cecfd26b51a9a554fa3fce15af0c18e0354e5", "message": "Apply spotless", "committedDate": "2020-01-11T21:49:17Z", "type": "commit"}]}