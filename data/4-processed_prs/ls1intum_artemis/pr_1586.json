{"pr_number": 1586, "pr_title": "Feature/jhipster registry", "pr_createdAt": "2020-06-07T09:12:19Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1586", "timeline": [{"oid": "e975c91bcf4405612f9ca01be9fd96d885d05085", "url": "https://github.com/ls1intum/Artemis/commit/e975c91bcf4405612f9ca01be9fd96d885d05085", "message": "Add jhipster registry & hazelcast.", "committedDate": "2020-05-11T21:45:32Z", "type": "commit"}, {"oid": "44213412f165236be423f8672f1abca837198a2a", "url": "https://github.com/ls1intum/Artemis/commit/44213412f165236be423f8672f1abca837198a2a", "message": "Remove ehcache config.", "committedDate": "2020-05-12T07:36:27Z", "type": "commit"}, {"oid": "221acb104fda23a15ea6609bb2013d85eb9d9411", "url": "https://github.com/ls1intum/Artemis/commit/221acb104fda23a15ea6609bb2013d85eb9d9411", "message": "Disable spring cloud config for now.", "committedDate": "2020-05-12T08:22:50Z", "type": "commit"}, {"oid": "3a3c203d0ae0708f3988cfb4b449454ea1db9c88", "url": "https://github.com/ls1intum/Artemis/commit/3a3c203d0ae0708f3988cfb4b449454ea1db9c88", "message": "Add documentation for hazelcastInstance.", "committedDate": "2020-05-12T08:37:48Z", "type": "commit"}, {"oid": "b9c1a4cc81ae9fcf046867728d594be9c82a6f92", "url": "https://github.com/ls1intum/Artemis/commit/b9c1a4cc81ae9fcf046867728d594be9c82a6f92", "message": "Add hazelcast management center.", "committedDate": "2020-05-12T15:33:07Z", "type": "commit"}, {"oid": "bd586465c29a7f6b034a2e7ddeb437da21341cb4", "url": "https://github.com/ls1intum/Artemis/commit/bd586465c29a7f6b034a2e7ddeb437da21341cb4", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-05-13T11:30:16Z", "type": "commit"}, {"oid": "7b565abfe28ae542088cc3b4ebec4d976c906aba", "url": "https://github.com/ls1intum/Artemis/commit/7b565abfe28ae542088cc3b4ebec4d976c906aba", "message": "Use dev deployment for now in prod profile for Hazelcast.", "committedDate": "2020-05-14T16:29:14Z", "type": "commit"}, {"oid": "61c5aa4d2f52366e31c43e68e2d6172564ed32b5", "url": "https://github.com/ls1intum/Artemis/commit/61c5aa4d2f52366e31c43e68e2d6172564ed32b5", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-05-25T07:17:50Z", "type": "commit"}, {"oid": "a84c416adfd84c969de68fd01dcfa7c57c9f3927", "url": "https://github.com/ls1intum/Artemis/commit/a84c416adfd84c969de68fd01dcfa7c57c9f3927", "message": "Resolve merge conflict.", "committedDate": "2020-05-25T07:59:33Z", "type": "commit"}, {"oid": "225eaa7879494f8d826d8c443373cf311da34aab", "url": "https://github.com/ls1intum/Artemis/commit/225eaa7879494f8d826d8c443373cf311da34aab", "message": "Unify duplicated keys in config.", "committedDate": "2020-05-25T09:54:08Z", "type": "commit"}, {"oid": "0b8501cb6a3a385c20d366d6f3700bf25b74b541", "url": "https://github.com/ls1intum/Artemis/commit/0b8501cb6a3a385c20d366d6f3700bf25b74b541", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-05-26T21:01:52Z", "type": "commit"}, {"oid": "600026ed1818088e8f93cc8d1afcf22f4505b2c4", "url": "https://github.com/ls1intum/Artemis/commit/600026ed1818088e8f93cc8d1afcf22f4505b2c4", "message": "Change some log messages to INFO.", "committedDate": "2020-05-27T21:24:59Z", "type": "commit"}, {"oid": "0e658dd559b373fa9e8e0847ee411f88b5ffafba", "url": "https://github.com/ls1intum/Artemis/commit/0e658dd559b373fa9e8e0847ee411f88b5ffafba", "message": "Merge remote-tracking branch 'origin/feature/jhipster-registry' into feature/jhipster-registry", "committedDate": "2020-05-27T21:27:11Z", "type": "commit"}, {"oid": "614331ce93910fba8ddd668cc5a396f5a3f6f8ab", "url": "https://github.com/ls1intum/Artemis/commit/614331ce93910fba8ddd668cc5a396f5a3f6f8ab", "message": "Start adding registry for websocket messages.", "committedDate": "2020-06-02T16:18:57Z", "type": "commit"}, {"oid": "2dd49ff2ab3b0fd475ce36ef288f411ff2ddc13b", "url": "https://github.com/ls1intum/Artemis/commit/2dd49ff2ab3b0fd475ce36ef288f411ff2ddc13b", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-06-02T16:20:48Z", "type": "commit"}, {"oid": "46d84727e9cb358874eb0f1de986f68650fc0249", "url": "https://github.com/ls1intum/Artemis/commit/46d84727e9cb358874eb0f1de986f68650fc0249", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-06-04T18:21:01Z", "type": "commit"}, {"oid": "30a009d25a2d609981700c4267b145a9ba8dfd54", "url": "https://github.com/ls1intum/Artemis/commit/30a009d25a2d609981700c4267b145a9ba8dfd54", "message": "Set User Destination & Registry Broadcast, change team map to hazelcast.", "committedDate": "2020-06-04T23:11:43Z", "type": "commit"}, {"oid": "79cf06e7ab3f8421f142674f0b01031e3cf1fab3", "url": "https://github.com/ls1intum/Artemis/commit/79cf06e7ab3f8421f142674f0b01031e3cf1fab3", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-06-07T09:12:49Z", "type": "commit"}, {"oid": "7a25dd7b9fa86e0c366444e8ee42bc10f295723d", "url": "https://github.com/ls1intum/Artemis/commit/7a25dd7b9fa86e0c366444e8ee42bc10f295723d", "message": "Revert \"Set User Destination & Registry Broadcast, change team map to hazelcast.\"\n\nThis reverts commit 30a009d25a2d609981700c4267b145a9ba8dfd54.", "committedDate": "2020-06-07T09:17:42Z", "type": "commit"}, {"oid": "8152a54adc6cc9c3f154869dab55f47656302ea1", "url": "https://github.com/ls1intum/Artemis/commit/8152a54adc6cc9c3f154869dab55f47656302ea1", "message": "Revert \"Start adding registry for websocket messages.\"\n\nThis reverts commit 614331ce93910fba8ddd668cc5a396f5a3f6f8ab.", "committedDate": "2020-06-07T09:18:54Z", "type": "commit"}, {"oid": "5e56db8423a366eac49a072c1c589ee316ce1ead", "url": "https://github.com/ls1intum/Artemis/commit/5e56db8423a366eac49a072c1c589ee316ce1ead", "message": "Add config values to application.yml", "committedDate": "2020-06-07T09:51:50Z", "type": "commit"}, {"oid": "412bc6b3b5581db179fa918dad449caa498e2165", "url": "https://github.com/ls1intum/Artemis/commit/412bc6b3b5581db179fa918dad449caa498e2165", "message": "Disable registry in dev profile.", "committedDate": "2020-06-07T10:48:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTIzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r436981237", "bodyText": "why do we need an earlier version?", "author": "krusche", "createdAt": "2020-06-08T20:29:40Z", "path": "build.gradle", "diffHunk": "@@ -182,22 +182,24 @@ dependencies {\n \n     implementation \"io.github.jhipster:jhipster-framework\"\n     implementation \"org.springframework.boot:spring-boot-starter-cache:${spring_boot_version}\"\n-    implementation \"io.micrometer:micrometer-registry-prometheus:1.5.1\"\n+    implementation \"io.micrometer:micrometer-registry-prometheus:1.3.5\"", "originalCommit": "412bc6b3b5581db179fa918dad449caa498e2165", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4MDg1Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437280853", "bodyText": "I cannot remember what was the initial cause, but I've just tested it with 1.5.1 and it seems to work, so I've reverted this change.", "author": "sleiss", "createdAt": "2020-06-09T09:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTIzNw=="}], "type": "inlineReview"}, {"oid": "78df486e19e84ffa98e0cd2bf4d0de8fe0cd03a2", "url": "https://github.com/ls1intum/Artemis/commit/78df486e19e84ffa98e0cd2bf4d0de8fe0cd03a2", "message": "Revert micrometer-registry-prometheus version.", "committedDate": "2020-06-09T09:42:17Z", "type": "commit"}, {"oid": "4fcf5432539d30b00500645ad2f1a266b6fe6f92", "url": "https://github.com/ls1intum/Artemis/commit/4fcf5432539d30b00500645ad2f1a266b6fe6f92", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-06-09T11:28:52Z", "type": "commit"}, {"oid": "f64e604b74b540f6ff0eb8c67d39c4c96ddcf817", "url": "https://github.com/ls1intum/Artemis/commit/f64e604b74b540f6ff0eb8c67d39c4c96ddcf817", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-06-09T15:30:43Z", "type": "commit"}, {"oid": "d59ae206f0089d65bd2fe677c862addec7382dc3", "url": "https://github.com/ls1intum/Artemis/commit/d59ae206f0089d65bd2fe677c862addec7382dc3", "message": "Merge branch 'develop' into feature/jhipster-registry", "committedDate": "2020-06-09T15:33:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjY2Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437672662", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.registration == null) {\n          \n          \n            \n                    if (registration == null) {\n          \n      \n    \n    \n  \n\nUnneeded this", "author": "jpbernius", "createdAt": "2020-06-09T19:39:21Z", "path": "src/main/java/de/tum/in/www1/artemis/config/CacheConfiguration.java", "diffHunk": "@@ -1,215 +1,127 @@\n package de.tum.in.www1.artemis.config;\n \n-import java.time.Duration;\n+import javax.annotation.PreDestroy;\n \n-import javax.cache.CacheManager;\n-\n-import org.ehcache.config.builders.CacheConfigurationBuilder;\n-import org.ehcache.config.builders.ExpiryPolicyBuilder;\n-import org.ehcache.config.builders.ResourcePoolsBuilder;\n-import org.ehcache.jsr107.Eh107Configuration;\n-import org.hibernate.cache.jcache.ConfigSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;\n-import org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.info.BuildProperties;\n import org.springframework.boot.info.GitProperties;\n+import org.springframework.cache.CacheManager;\n import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.cache.interceptor.KeyGenerator;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.client.serviceregistry.Registration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.Profiles;\n+\n+import com.hazelcast.config.*;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n \n-import de.tum.in.www1.artemis.domain.*;\n-import de.tum.in.www1.artemis.domain.exam.Exam;\n-import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n-import de.tum.in.www1.artemis.domain.exam.StudentExam;\n-import de.tum.in.www1.artemis.domain.modeling.*;\n-import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n-import de.tum.in.www1.artemis.domain.notification.Notification;\n-import de.tum.in.www1.artemis.domain.notification.SingleUserNotification;\n-import de.tum.in.www1.artemis.domain.notification.SystemNotification;\n-import de.tum.in.www1.artemis.domain.participation.Participation;\n-import de.tum.in.www1.artemis.domain.participation.TutorParticipation;\n-import de.tum.in.www1.artemis.domain.quiz.*;\n-import de.tum.in.www1.artemis.repository.UserRepository;\n+import io.github.jhipster.config.JHipsterConstants;\n import io.github.jhipster.config.JHipsterProperties;\n import io.github.jhipster.config.cache.PrefixedKeyGenerator;\n \n @Configuration\n @EnableCaching\n public class CacheConfiguration {\n \n+    private final Logger log = LoggerFactory.getLogger(CacheConfiguration.class);\n+\n     private GitProperties gitProperties;\n \n     private BuildProperties buildProperties;\n \n-    private final javax.cache.configuration.Configuration<Object, Object> jcacheConfiguration;\n+    private final Environment env;\n+\n+    private final ServerProperties serverProperties;\n \n-    public CacheConfiguration(JHipsterProperties jHipsterProperties) {\n-        JHipsterProperties.Cache.Ehcache ehcache = jHipsterProperties.getCache().getEhcache();\n+    private final DiscoveryClient discoveryClient;\n \n-        jcacheConfiguration = Eh107Configuration.fromEhcacheCacheConfiguration(\n-                CacheConfigurationBuilder.newCacheConfigurationBuilder(Object.class, Object.class, ResourcePoolsBuilder.heap(ehcache.getMaxEntries()))\n-                        .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(ehcache.getTimeToLiveSeconds()))).build());\n+    private Registration registration;\n+\n+    public CacheConfiguration(Environment env, ServerProperties serverProperties, DiscoveryClient discoveryClient) {\n+        this.env = env;\n+        this.serverProperties = serverProperties;\n+        this.discoveryClient = discoveryClient;\n+    }\n+\n+    @Autowired(required = false)\n+    public void setRegistration(Registration registration) {\n+        this.registration = registration;\n+    }\n+\n+    @PreDestroy\n+    public void destroy() {\n+        log.info(\"Closing Cache Manager\");\n+        Hazelcast.shutdownAll();\n     }\n \n     @Bean\n-    public HibernatePropertiesCustomizer hibernatePropertiesCustomizer(javax.cache.CacheManager cacheManager) {\n-        return hibernateProperties -> hibernateProperties.put(ConfigSettings.CACHE_MANAGER, cacheManager);\n+    public CacheManager cacheManager(HazelcastInstance hazelcastInstance) {\n+        log.debug(\"Starting HazelcastCacheManager\");\n+        return new com.hazelcast.spring.cache.HazelcastCacheManager(hazelcastInstance);\n     }\n \n     /**\n-     * @return the initialized cache manager\n+     * Setup the hazelcast instance based on the given jHipster properties and the enabled spring profiles.\n+     * @param jHipsterProperties the jhipster properties\n+     * @return the created HazelcastInstance\n      */\n     @Bean\n-    public JCacheManagerCustomizer cacheManagerCustomizer() {\n-        return cm -> {\n-            createIfNotExists(cm, UserRepository.USERS_CACHE, jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Authority.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".authorities\", jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".persistentTokens\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".exercises\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".exams\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".studentParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".exampleSubmissions\", jcacheConfiguration);\n-            createIfNotExists(cm, LtiOutcomeUrl.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, LtiUserId.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName() + \".results\", jcacheConfiguration);\n-            createIfNotExists(cm, Result.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelingExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizExercise.class.getName() + \".quizQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, SubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestion.class.getName() + \".answerOptions\", jcacheConfiguration);\n-            createIfNotExists(cm, AnswerOption.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceSubmittedAnswer.class.getName() + \".selectedOptions\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".dropLocations\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".dragItems\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".correctMappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DropLocation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragItem.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Submission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Submission.class.getName() + \".versions\", jcacheConfiguration);\n-            createIfNotExists(cm, SubmissionVersion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelingSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizSubmission.class.getName() + \".submittedAnswers\", jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TextSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, FileUploadSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestion.class.getName() + \".quizExercises\", jcacheConfiguration);\n-            createIfNotExists(cm, Result.class.getName() + \".feedbacks\", jcacheConfiguration);\n-            createIfNotExists(cm, Feedback.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, AnswerCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DropLocationCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".ratedPointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".unRatedPointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".ratedAnswerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".unRatedAnswerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".ratedDropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".unRatedDropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, QuizStatisticCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, PointCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".pointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".answerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".dropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragItem.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DropLocation.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropSubmittedAnswer.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropMapping.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ApollonDiagram.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName() + \".submissions\", jcacheConfiguration);\n-            createIfNotExists(cm, TextExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, FileUploadExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestionStatistic.class.getName() + \".shortAnswerSpotCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpotCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".spots\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".solutions\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".correctMappings\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpot.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSolution.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedAnswer.class.getName() + \".submittedTexts\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedText.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerMapping.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpot.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSolution.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, Complaint.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ComplaintResponse.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorParticipation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorParticipation.class.getName() + \".trainedExampleSubmissions\", jcacheConfiguration);\n-            createIfNotExists(cm, ExampleSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".tutorParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".lectures\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".tutorGroups\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".attachments\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestion.class.getName() + \".answers\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestionAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorGroup.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorGroup.class.getName() + \".students\", jcacheConfiguration);\n-            createIfNotExists(cm, Notification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, SystemNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GroupNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, SingleUserNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName() + \".attachments\", jcacheConfiguration);\n-            createIfNotExists(cm, Attachment.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".studentQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName() + \".studentQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, ModelAssessmentConflict.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelAssessmentConflict.class.getName() + \".resultsInConflict\", jcacheConfiguration);\n-            createIfNotExists(cm, ConflictingResult.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExampleSubmission.class.getName() + \".tutorParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingExerciseTestCase.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseHint.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GuidedTourSetting.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".guidedTourSettings\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".teams\", jcacheConfiguration);\n-            createIfNotExists(cm, Team.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Team.class.getName() + \".students\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".gradingCriteria\", jcacheConfiguration);\n-            createIfNotExists(cm, GradingInstruction.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GradingCriterion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GradingCriterion.class.getName() + \".structuredGradingInstructions\", jcacheConfiguration);\n-\n-            createIfNotExists(cm, Exam.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".exerciseGroups\", jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".studentExams\", jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".registeredUsers\", jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseGroup.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseGroup.class.getName() + \".exercises\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentExam.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, StudentExam.class.getName() + \".exercises\", jcacheConfiguration);\n-\n-            createIfNotExists(cm, \"files\", jcacheConfiguration);\n-        };\n-    }\n-\n-    // This method is a hotfix for the issue described in: https://github.com/jhipster/generator-jhipster/issues/5354.\n-    // During the execution of tests, spring boot will try to instantiate the same cache multiple times, leading to an error.\n-    // This issue appears if e.g. a MockBean is used in a test.\n-    private void createIfNotExists(CacheManager cacheManager, String cacheName, javax.cache.configuration.Configuration<Object, Object> cacheConfiguration) {\n-        if (cacheManager.getCache(cacheName) == null) {\n-            cacheManager.createCache(cacheName, cacheConfiguration);\n+    public HazelcastInstance hazelcastInstance(JHipsterProperties jHipsterProperties) {\n+        log.debug(\"Configuring Hazelcast\");\n+        HazelcastInstance hazelCastInstance = Hazelcast.getHazelcastInstanceByName(\"Artemis\");\n+        if (hazelCastInstance != null) {\n+            log.debug(\"Hazelcast already initialized\");\n+            return hazelCastInstance;\n+        }\n+        Config config = new Config();\n+        config.setInstanceName(\"Artemis\");\n+        config.getNetworkConfig().getJoin().getMulticastConfig().setEnabled(false);\n+        if (this.registration == null) {", "originalCommit": "d59ae206f0089d65bd2fe677c862addec7382dc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMTIyOA==", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437701228", "bodyText": "This was the auto generated code, I've applied your suggestion.", "author": "sleiss", "createdAt": "2020-06-09T20:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MjY2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MzA3NA==", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437673074", "bodyText": "Should \"Artemis\" be a constant? Or can we even inject and use spring.application.name OR hibernate.cache.hazelcast.instance_name?", "author": "jpbernius", "createdAt": "2020-06-09T19:40:08Z", "path": "src/main/java/de/tum/in/www1/artemis/config/CacheConfiguration.java", "diffHunk": "@@ -1,215 +1,127 @@\n package de.tum.in.www1.artemis.config;\n \n-import java.time.Duration;\n+import javax.annotation.PreDestroy;\n \n-import javax.cache.CacheManager;\n-\n-import org.ehcache.config.builders.CacheConfigurationBuilder;\n-import org.ehcache.config.builders.ExpiryPolicyBuilder;\n-import org.ehcache.config.builders.ResourcePoolsBuilder;\n-import org.ehcache.jsr107.Eh107Configuration;\n-import org.hibernate.cache.jcache.ConfigSettings;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.cache.JCacheManagerCustomizer;\n-import org.springframework.boot.autoconfigure.orm.jpa.HibernatePropertiesCustomizer;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.info.BuildProperties;\n import org.springframework.boot.info.GitProperties;\n+import org.springframework.cache.CacheManager;\n import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.cache.interceptor.KeyGenerator;\n+import org.springframework.cloud.client.ServiceInstance;\n+import org.springframework.cloud.client.discovery.DiscoveryClient;\n+import org.springframework.cloud.client.serviceregistry.Registration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import org.springframework.core.env.Profiles;\n+\n+import com.hazelcast.config.*;\n+import com.hazelcast.core.Hazelcast;\n+import com.hazelcast.core.HazelcastInstance;\n \n-import de.tum.in.www1.artemis.domain.*;\n-import de.tum.in.www1.artemis.domain.exam.Exam;\n-import de.tum.in.www1.artemis.domain.exam.ExerciseGroup;\n-import de.tum.in.www1.artemis.domain.exam.StudentExam;\n-import de.tum.in.www1.artemis.domain.modeling.*;\n-import de.tum.in.www1.artemis.domain.notification.GroupNotification;\n-import de.tum.in.www1.artemis.domain.notification.Notification;\n-import de.tum.in.www1.artemis.domain.notification.SingleUserNotification;\n-import de.tum.in.www1.artemis.domain.notification.SystemNotification;\n-import de.tum.in.www1.artemis.domain.participation.Participation;\n-import de.tum.in.www1.artemis.domain.participation.TutorParticipation;\n-import de.tum.in.www1.artemis.domain.quiz.*;\n-import de.tum.in.www1.artemis.repository.UserRepository;\n+import io.github.jhipster.config.JHipsterConstants;\n import io.github.jhipster.config.JHipsterProperties;\n import io.github.jhipster.config.cache.PrefixedKeyGenerator;\n \n @Configuration\n @EnableCaching\n public class CacheConfiguration {\n \n+    private final Logger log = LoggerFactory.getLogger(CacheConfiguration.class);\n+\n     private GitProperties gitProperties;\n \n     private BuildProperties buildProperties;\n \n-    private final javax.cache.configuration.Configuration<Object, Object> jcacheConfiguration;\n+    private final Environment env;\n+\n+    private final ServerProperties serverProperties;\n \n-    public CacheConfiguration(JHipsterProperties jHipsterProperties) {\n-        JHipsterProperties.Cache.Ehcache ehcache = jHipsterProperties.getCache().getEhcache();\n+    private final DiscoveryClient discoveryClient;\n \n-        jcacheConfiguration = Eh107Configuration.fromEhcacheCacheConfiguration(\n-                CacheConfigurationBuilder.newCacheConfigurationBuilder(Object.class, Object.class, ResourcePoolsBuilder.heap(ehcache.getMaxEntries()))\n-                        .withExpiry(ExpiryPolicyBuilder.timeToLiveExpiration(Duration.ofSeconds(ehcache.getTimeToLiveSeconds()))).build());\n+    private Registration registration;\n+\n+    public CacheConfiguration(Environment env, ServerProperties serverProperties, DiscoveryClient discoveryClient) {\n+        this.env = env;\n+        this.serverProperties = serverProperties;\n+        this.discoveryClient = discoveryClient;\n+    }\n+\n+    @Autowired(required = false)\n+    public void setRegistration(Registration registration) {\n+        this.registration = registration;\n+    }\n+\n+    @PreDestroy\n+    public void destroy() {\n+        log.info(\"Closing Cache Manager\");\n+        Hazelcast.shutdownAll();\n     }\n \n     @Bean\n-    public HibernatePropertiesCustomizer hibernatePropertiesCustomizer(javax.cache.CacheManager cacheManager) {\n-        return hibernateProperties -> hibernateProperties.put(ConfigSettings.CACHE_MANAGER, cacheManager);\n+    public CacheManager cacheManager(HazelcastInstance hazelcastInstance) {\n+        log.debug(\"Starting HazelcastCacheManager\");\n+        return new com.hazelcast.spring.cache.HazelcastCacheManager(hazelcastInstance);\n     }\n \n     /**\n-     * @return the initialized cache manager\n+     * Setup the hazelcast instance based on the given jHipster properties and the enabled spring profiles.\n+     * @param jHipsterProperties the jhipster properties\n+     * @return the created HazelcastInstance\n      */\n     @Bean\n-    public JCacheManagerCustomizer cacheManagerCustomizer() {\n-        return cm -> {\n-            createIfNotExists(cm, UserRepository.USERS_CACHE, jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Authority.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".authorities\", jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".persistentTokens\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".exercises\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".exams\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".studentParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".exampleSubmissions\", jcacheConfiguration);\n-            createIfNotExists(cm, LtiOutcomeUrl.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, LtiUserId.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName() + \".results\", jcacheConfiguration);\n-            createIfNotExists(cm, Result.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelingExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizExercise.class.getName() + \".quizQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, SubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestion.class.getName() + \".answerOptions\", jcacheConfiguration);\n-            createIfNotExists(cm, AnswerOption.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceSubmittedAnswer.class.getName() + \".selectedOptions\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".dropLocations\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".dragItems\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestion.class.getName() + \".correctMappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DropLocation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragItem.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Submission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Submission.class.getName() + \".versions\", jcacheConfiguration);\n-            createIfNotExists(cm, SubmissionVersion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelingSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizSubmission.class.getName() + \".submittedAnswers\", jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TextSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, FileUploadSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestion.class.getName() + \".quizExercises\", jcacheConfiguration);\n-            createIfNotExists(cm, Result.class.getName() + \".feedbacks\", jcacheConfiguration);\n-            createIfNotExists(cm, Feedback.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, AnswerCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DropLocationCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".ratedPointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".unRatedPointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".ratedAnswerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".unRatedAnswerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".ratedDropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".unRatedDropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, QuizStatisticCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, PointCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, QuizPointStatistic.class.getName() + \".pointCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, MultipleChoiceQuestionStatistic.class.getName() + \".answerCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropQuestionStatistic.class.getName() + \".dropLocationCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, DragItem.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DropLocation.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropSubmittedAnswer.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, DragAndDropMapping.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ApollonDiagram.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Participation.class.getName() + \".submissions\", jcacheConfiguration);\n-            createIfNotExists(cm, TextExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, FileUploadExercise.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestionStatistic.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestionStatistic.class.getName() + \".shortAnswerSpotCounters\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpotCounter.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".spots\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".solutions\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerQuestion.class.getName() + \".correctMappings\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpot.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSolution.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedAnswer.class.getName() + \".submittedTexts\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSubmittedText.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerMapping.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSpot.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, ShortAnswerSolution.class.getName() + \".mappings\", jcacheConfiguration);\n-            createIfNotExists(cm, Complaint.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ComplaintResponse.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorParticipation.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorParticipation.class.getName() + \".trainedExampleSubmissions\", jcacheConfiguration);\n-            createIfNotExists(cm, ExampleSubmission.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".tutorParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".lectures\", jcacheConfiguration);\n-            createIfNotExists(cm, Course.class.getName() + \".tutorGroups\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".attachments\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestion.class.getName() + \".answers\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentQuestionAnswer.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorGroup.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, TutorGroup.class.getName() + \".students\", jcacheConfiguration);\n-            createIfNotExists(cm, Notification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, SystemNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GroupNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, SingleUserNotification.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName() + \".attachments\", jcacheConfiguration);\n-            createIfNotExists(cm, Attachment.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".studentQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, Lecture.class.getName() + \".studentQuestions\", jcacheConfiguration);\n-            createIfNotExists(cm, ModelAssessmentConflict.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ModelAssessmentConflict.class.getName() + \".resultsInConflict\", jcacheConfiguration);\n-            createIfNotExists(cm, ConflictingResult.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExampleSubmission.class.getName() + \".tutorParticipations\", jcacheConfiguration);\n-            createIfNotExists(cm, ProgrammingExerciseTestCase.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseHint.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GuidedTourSetting.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, User.class.getName() + \".guidedTourSettings\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".teams\", jcacheConfiguration);\n-            createIfNotExists(cm, Team.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Team.class.getName() + \".students\", jcacheConfiguration);\n-            createIfNotExists(cm, Exercise.class.getName() + \".gradingCriteria\", jcacheConfiguration);\n-            createIfNotExists(cm, GradingInstruction.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GradingCriterion.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, GradingCriterion.class.getName() + \".structuredGradingInstructions\", jcacheConfiguration);\n-\n-            createIfNotExists(cm, Exam.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".exerciseGroups\", jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".studentExams\", jcacheConfiguration);\n-            createIfNotExists(cm, Exam.class.getName() + \".registeredUsers\", jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseGroup.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, ExerciseGroup.class.getName() + \".exercises\", jcacheConfiguration);\n-            createIfNotExists(cm, StudentExam.class.getName(), jcacheConfiguration);\n-            createIfNotExists(cm, StudentExam.class.getName() + \".exercises\", jcacheConfiguration);\n-\n-            createIfNotExists(cm, \"files\", jcacheConfiguration);\n-        };\n-    }\n-\n-    // This method is a hotfix for the issue described in: https://github.com/jhipster/generator-jhipster/issues/5354.\n-    // During the execution of tests, spring boot will try to instantiate the same cache multiple times, leading to an error.\n-    // This issue appears if e.g. a MockBean is used in a test.\n-    private void createIfNotExists(CacheManager cacheManager, String cacheName, javax.cache.configuration.Configuration<Object, Object> cacheConfiguration) {\n-        if (cacheManager.getCache(cacheName) == null) {\n-            cacheManager.createCache(cacheName, cacheConfiguration);\n+    public HazelcastInstance hazelcastInstance(JHipsterProperties jHipsterProperties) {\n+        log.debug(\"Configuring Hazelcast\");\n+        HazelcastInstance hazelCastInstance = Hazelcast.getHazelcastInstanceByName(\"Artemis\");", "originalCommit": "d59ae206f0089d65bd2fe677c862addec7382dc3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzcwMjk5OA==", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437702998", "bodyText": "I will change it to hibernate.cache.hazelcast.instance_name.", "author": "sleiss", "createdAt": "2020-06-09T20:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3MzA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3Nzg0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437677841", "bodyText": "This is duplicating your additions in application-dev.yml. Is this needed?", "author": "jpbernius", "createdAt": "2020-06-09T19:48:57Z", "path": "src/main/resources/config/application.yml", "diffHunk": "@@ -101,6 +101,10 @@ spring:\n             hibernate.order_updates: true\n #            hibernate.query.fail_on_pagination_over_collection_fetch: true  # not appropriate in our case: https://vladmihalcea.com/hibernate-query-fail-on-pagination-over-collection-fetch/\n             hibernate.query.in_clause_parameter_padding: true\n+            hibernate.cache.region.factory_class: com.hazelcast.hibernate.HazelcastCacheRegionFactory\n+            hibernate.cache.use_minimal_puts: true\n+            hibernate.cache.hazelcast.instance_name: Artemis\n+            hibernate.cache.hazelcast.use_lite_member: true", "originalCommit": "d59ae206f0089d65bd2fe677c862addec7382dc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY3ODUxMA==", "url": "https://github.com/ls1intum/Artemis/pull/1586#discussion_r437678510", "bodyText": "Also duplicated config here?", "author": "jpbernius", "createdAt": "2020-06-09T19:50:16Z", "path": "src/main/resources/config/application.yml", "diffHunk": "@@ -164,3 +168,41 @@ jhipster:\n         #max-age: 1800\n     mail:\n         from: artemis@localhost\n+    registry:\n+        password: AN-ADMIN-PASSWORD-THAT-MUST-BE-CHANGED (FROM REGISTRY CONFIG)\n+    cache: # Cache configuration\n+        hazelcast: # Hazelcast distributed cache\n+            time-to-live-seconds: 3600\n+            backup-count: 1\n+            management-center: # Full reference is available at: http://docs.hazelcast.org/docs/management-center/3.9/manual/html/Deploying_and_Starting.html\n+                enabled: false\n+                update-interval: 3\n+                url: http://localhost:8180/hazelcast-mancenter/", "originalCommit": "d59ae206f0089d65bd2fe677c862addec7382dc3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "18e7971672b191d0f53a409b3cc6c510ac57d819", "url": "https://github.com/ls1intum/Artemis/commit/18e7971672b191d0f53a409b3cc6c510ac57d819", "message": "Update src/main/java/de/tum/in/www1/artemis/config/CacheConfiguration.java\n\nCo-authored-by: Jan Philip Bernius <janphilip.bernius@tum.de>", "committedDate": "2020-06-09T20:33:40Z", "type": "commit"}, {"oid": "acb0e68b2769acde6033a30b2475ac2c82bd55e2", "url": "https://github.com/ls1intum/Artemis/commit/acb0e68b2769acde6033a30b2475ac2c82bd55e2", "message": "update server dependencies", "committedDate": "2020-06-09T20:35:24Z", "type": "commit"}, {"oid": "17e2a12e8923e5a11534f780613be7f1e83e1221", "url": "https://github.com/ls1intum/Artemis/commit/17e2a12e8923e5a11534f780613be7f1e83e1221", "message": "Merge branch 'feature/jhipster-registry' of https://github.com/ls1intum/Artemis into feature/jhipster-registry", "committedDate": "2020-06-09T20:35:57Z", "type": "commit"}, {"oid": "d4e5d76ef443eaf3eb57cfb3d6a32606cff2e689", "url": "https://github.com/ls1intum/Artemis/commit/d4e5d76ef443eaf3eb57cfb3d6a32606cff2e689", "message": "fix compile errors after upgrade", "committedDate": "2020-06-09T21:23:38Z", "type": "commit"}, {"oid": "f9adfd45498021a89ee8492db13e6724815bb432", "url": "https://github.com/ls1intum/Artemis/commit/f9adfd45498021a89ee8492db13e6724815bb432", "message": "change max size policy to Per_Node in Hazelcast", "committedDate": "2020-06-10T12:17:10Z", "type": "commit"}, {"oid": "5bd92c6fdd225ce6e23379dfcdc2ef05520b79d7", "url": "https://github.com/ls1intum/Artemis/commit/5bd92c6fdd225ce6e23379dfcdc2ef05520b79d7", "message": "fix weird test errors", "committedDate": "2020-06-10T12:49:48Z", "type": "commit"}, {"oid": "9155729f009b91e0ae2af70466b42b8696954412", "url": "https://github.com/ls1intum/Artemis/commit/9155729f009b91e0ae2af70466b42b8696954412", "message": "add entry to application.yml to prevent warning during tests", "committedDate": "2020-06-10T13:08:57Z", "type": "commit"}, {"oid": "d08f8a3e50e7bd2cf0f66221b6a7b05928481240", "url": "https://github.com/ls1intum/Artemis/commit/d08f8a3e50e7bd2cf0f66221b6a7b05928481240", "message": "Remove unneeded config values and load instance name from config.", "committedDate": "2020-06-10T14:29:09Z", "type": "commit"}, {"oid": "f8d17f65aaffa5bc342d11dd12031cf453206a9a", "url": "https://github.com/ls1intum/Artemis/commit/f8d17f65aaffa5bc342d11dd12031cf453206a9a", "message": "Remove more unneeded config values.", "committedDate": "2020-06-10T14:34:10Z", "type": "commit"}, {"oid": "8f730e5b056b29fb97e80c107b2ec2f524529d8d", "url": "https://github.com/ls1intum/Artemis/commit/8f730e5b056b29fb97e80c107b2ec2f524529d8d", "message": "Fix value injection.", "committedDate": "2020-06-10T15:14:00Z", "type": "commit"}, {"oid": "03fa1f44ad5af27a951aba01d29845a5e036a5bd", "url": "https://github.com/ls1intum/Artemis/commit/03fa1f44ad5af27a951aba01d29845a5e036a5bd", "message": "Add instance name to test config.", "committedDate": "2020-06-10T18:51:52Z", "type": "commit"}]}