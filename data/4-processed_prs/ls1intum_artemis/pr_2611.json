{"pr_number": 2611, "pr_title": "Add tests for exams-management.component.ts", "pr_createdAt": "2020-12-29T10:35:49Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2611", "timeline": [{"oid": "a14bd5f712ce8497295e02291c14314c7af6529a", "url": "https://github.com/ls1intum/Artemis/commit/a14bd5f712ce8497295e02291c14314c7af6529a", "message": "add tests for exam-management.component.ts", "committedDate": "2020-12-28T11:15:22Z", "type": "commit"}, {"oid": "c495ba8c65287099625d6c5d1604afbf87b353f3", "url": "https://github.com/ls1intum/Artemis/commit/c495ba8c65287099625d6c5d1604afbf87b353f3", "message": "add tests for exam-management.service.ts", "committedDate": "2020-12-29T10:34:06Z", "type": "commit"}, {"oid": "be220c952cbd7208df3d696129f4fe6f198f3018", "url": "https://github.com/ls1intum/Artemis/commit/be220c952cbd7208df3d696129f4fe6f198f3018", "message": "remove unused query function from exam-management.service.ts", "committedDate": "2020-12-29T10:34:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3MjM5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549672395", "bodyText": "Could you do me a favor and also add this code to the file. This would also reset all mocks after every test and is a good practice :)\n   afterEach(function () {\n        // completely restore all fakes created through the sandbox\n        sinon.restore();\n    });", "author": "stefanwaldhauser", "createdAt": "2020-12-29T11:36:41Z", "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -17,6 +17,7 @@ import { Exam } from 'app/entities/exam.model';\n import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n import { CourseManagementService } from 'app/course/manage/course-management.service';\n import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n ", "originalCommit": "be220c952cbd7208df3d696129f4fe6f198f3018", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3MjY1MA==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549672650", "bodyText": "Could you do me a favor and add this code to the test to reset all mocks, stub etc after every test.\nafterEach(function () {\n        sinon.restore();\n    });", "author": "stefanwaldhauser", "createdAt": "2020-12-29T11:37:39Z", "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+", "originalCommit": "be220c952cbd7208df3d696129f4fe6f198f3018", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549676905", "bodyText": "Why did you mock this? It would be useful to test the real function here", "author": "stefanwaldhauser", "createdAt": "2020-12-29T11:54:28Z", "path": "src/test/javascript/spec/component/exam/manage/exam-management.service.spec.ts", "diffHunk": "@@ -0,0 +1,405 @@\n+import { TestBed } from '@angular/core/testing';\n+import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\n+import { Course } from 'app/entities/course.model';\n+import { ArtemisTestModule } from '../../../test.module';\n+import { ExamManagementService } from 'app/exam/manage/exam-management.service';\n+import { Exam } from 'app/entities/exam.model';\n+import * as chai from 'chai';\n+import * as moment from 'moment';\n+import { ExamInformationDTO } from 'app/entities/exam-information.model';\n+import { StudentDTO } from 'app/entities/student-dto.model';\n+import { StudentExam } from 'app/entities/student-exam.model';\n+import { ExerciseGroup } from 'app/entities/exercise-group.model';\n+import { ExamScoreDTO } from 'app/exam/exam-scores/exam-score-dtos.model';\n+\n+const expect = chai.expect;\n+describe('Exam Management Service Tests', () => {\n+    let service: ExamManagementService;\n+    let httpMock: HttpTestingController;\n+\n+    const course = { id: 456 } as Course;\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            providers: [ExamManagementService],\n+            imports: [ArtemisTestModule, HttpClientTestingModule],\n+        });\n+\n+        service = TestBed.inject(ExamManagementService);\n+        httpMock = TestBed.inject(HttpTestingController);\n+    });\n+\n+    afterEach(() => {\n+        httpMock.verify();\n+    });\n+\n+    it('should create an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.create(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should update an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = {};\n+        const mockCopyExam = mockConvertDateFromClient(mockExam);\n+\n+        // WHEN\n+        service.update(course.id!, mockExam).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'PUT', url: `${service.resourceUrl}/${course.id!}/exams` });\n+        expect(req.request.body).to.include(mockCopyExam);\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find an exam with no students and no exercise groups', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.find(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExam));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}?withStudents=false&withExerciseGroups=false` });\n+        expect(req.request.url).to.equal(`${service.resourceUrl}/${course.id!}/exams/${mockExam.id}`);\n+        expect(req.request.params.get('withStudents')).to.be.false;\n+        expect(req.request.params.get('withExerciseGroups')).to.be.false;\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should get exam scores', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExamScore: ExamScoreDTO = { examId: mockExam.id!, title: '', averagePointsAchieved: 1, exerciseGroups: [], maxPoints: 1, studentResults: [] };\n+\n+        // WHEN\n+        service.getExamScores(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockExamScore));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/scores` });\n+\n+        // CLEANUP\n+        req.flush(mockExam);\n+    });\n+\n+    it('should find all exams for course', () => {\n+        // WHEN\n+        service.findAllExamsForCourse(course.id!).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams` });\n+    });\n+\n+    it('should find all current and upcoming exams', () => {\n+        // WHEN\n+        service.findAllCurrentAndUpcomingExams().subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/upcoming-exams` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=false', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, false).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-dashboard` });\n+    });\n+\n+    it('should getExamWithInterestingExercisesForAssessmentDashboard with isTestRun=true', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.getExamWithInterestingExercisesForAssessmentDashboard(course.id!, mockExam.id!, true).subscribe((res) => expect(res.body).to.equal([]));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id}/for-exam-tutor-test-run-dashboard` });\n+    });\n+\n+    it('should get latest individual end date of exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockResponse: ExamInformationDTO = { latestIndividualEndDate: moment() };\n+\n+        // WHEN\n+        service.getLatestIndividualEndDateOfExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockResponse));\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'GET', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/latest-end-date` });\n+    });\n+\n+    it('should delete an exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+\n+        // WHEN\n+        service.delete(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'DELETE', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}` });\n+    });\n+\n+    it('should add student to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.addStudentToExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}` });\n+    });\n+\n+    it('should add students to exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudents: StudentDTO[] = [\n+            { firstName: 'firstName1', lastName: 'lastName1', registrationNumber: '1' },\n+            { firstName: 'firstName2', lastName: 'lastName2', registrationNumber: '2' },\n+        ];\n+\n+        // WHEN\n+        service.addStudentsToExam(course.id!, mockExam.id!, mockStudents).subscribe((res) => expect(res.body).to.eq(mockStudents));\n+\n+        // THEN\n+        const req = httpMock.expectOne({ method: 'POST', url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students` });\n+        expect(req.request.body).to.eq(mockStudents);\n+\n+        // CLEAN\n+        req.flush(mockStudents);\n+    });\n+\n+    it('should remove student from exam with no participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=false`,\n+        });\n+\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should remove student from exam with participations and submission', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentLogin = 'studentLogin';\n+\n+        // WHEN\n+        service.removeStudentFromExam(course.id!, mockExam.id!, mockStudentLogin, true).subscribe((res) => expect(res.body).to.be.null);\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/students/${mockStudentLogin}?withParticipationsAndSubmission=true`,\n+        });\n+    });\n+\n+    it('should generate student exams', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam }];\n+\n+        // WHEN\n+        service.generateStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/generate-student-exams`,\n+        });\n+    });\n+\n+    it('should create test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam };\n+\n+        // WHEN\n+        service.createTestRun(course.id!, mockExam.id!, mockStudentExam).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id!}/exams/${mockExam.id!}/test-run`,\n+        });\n+    });\n+\n+    it('should delete test run', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExam: StudentExam = { exam: mockExam, id: 2 };\n+\n+        // WHEN\n+        service.deleteTestRun(course.id!, mockExam.id!, mockStudentExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExam));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'DELETE',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-run/${mockStudentExam.id}`,\n+        });\n+    });\n+\n+    it('should find all test runs for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.findAllTestRunsForExam(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'GET',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/test-runs`,\n+        });\n+    });\n+\n+    it('should generate missing student for exam', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.generateMissingStudentExams(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.eq(mockStudentExams));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/generate-missing-student-exams`,\n+        });\n+    });\n+\n+    it('should start exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockStudentExams: StudentExam[] = [{ exam: mockExam, id: 2 }];\n+\n+        // WHEN\n+        service.startExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockStudentExams.length));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/start-exercises`,\n+        });\n+    });\n+\n+    it('should evaluate quiz exercises', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockEvaluatedExercises = 1;\n+\n+        // WHEN\n+        service.evaluateQuizExercises(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockEvaluatedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/evaluate-quiz-exercises`,\n+        });\n+    });\n+\n+    it('should assess unsubmitted exam modelling and text participations', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockUnsubmittedExercises = 1;\n+\n+        // WHEN\n+        service.assessUnsubmittedExamModelingAndTextParticipations(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockUnsubmittedExercises));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/assess-unsubmitted-and-empty-student-exams`,\n+        });\n+    });\n+\n+    it('should unlock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.unlockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/unlock-all-repositories`,\n+        });\n+    });\n+\n+    it('should lock all repositories', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockRepoCount = 1;\n+\n+        // WHEN\n+        service.lockAllRepositories(course.id!, mockExam.id!).subscribe((res) => expect(res.body).to.equal(mockRepoCount));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'POST',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/student-exams/lock-all-repositories`,\n+        });\n+    });\n+\n+    it('should update order', () => {\n+        // GIVEN\n+        const mockExam: Exam = { id: 1 };\n+        const mockExerciseGroups: ExerciseGroup[] = [{ exam: mockExam, id: 1 }];\n+\n+        // WHEN\n+        service.updateOrder(course.id!, mockExam.id!, mockExerciseGroups).subscribe((res) => expect(res.body).to.equal(mockExerciseGroups));\n+\n+        // THEN\n+        httpMock.expectOne({\n+            method: 'PUT',\n+            url: `${service.resourceUrl}/${course.id}/exams/${mockExam.id}/exerciseGroupsOrder`,\n+        });\n+    });\n+});\n+\n+function mockConvertDateFromClient(exam: Exam): Exam {", "originalCommit": "be220c952cbd7208df3d696129f4fe6f198f3018", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNDA3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549724071", "bodyText": "Is it possible to test the real function (since it's private)?", "author": "ivanchimeno", "createdAt": "2020-12-29T14:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwODkyNg==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r550908926", "bodyText": "Afaik we can't test private functions, but would have to make it publicly accessible.", "author": "FrankeLukas", "createdAt": "2021-01-02T18:43:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE5ODUwNA==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r551198504", "bodyText": "Its not private in other services as far as I can see. Just remove the private and use the real function here imo", "author": "stefanwaldhauser", "createdAt": "2021-01-04T09:23:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NjkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NzQ0NA==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549677444", "bodyText": "I do not understand this test case? What do you mean by has information of other exams", "author": "stefanwaldhauser", "createdAt": "2020-12-29T11:56:19Z", "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {\n+        // GIVEN\n+        comp.examIdToExamInformation = new Map<number, ExamInformationDTO>();\n+\n+        // WHEN\n+        const examHasFinished = comp.examHasFinished(exam.id!);\n+\n+        // THEN\n+        expect(examHasFinished).to.be.true;\n+    });\n+\n+    it('Should return true for examHasFinished when component has information of other exams', () => {", "originalCommit": "be220c952cbd7208df3d696129f4fe6f198f3018", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTMyNg==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549725326", "bodyText": "Ah what is meant is that I pass a non-empty comp.examIdToExamInformation to the function", "author": "ivanchimeno", "createdAt": "2020-12-29T14:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3NzQ0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3Nzc5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549677792", "bodyText": "The tests are valid but I am questioning their usefulness somehow. This is a very simple method:\n    examHasFinished(examId: number): boolean {\n        if (this.examIdToExamInformation.has(examId)) {\n            return this.examIdToExamInformation.get(examId)!.latestIndividualEndDate.isBefore(moment());\n        }\n        return true;\n    }\n\nWriting that many test cases for it seems excessive. What do other reviewers say? @krusche", "author": "stefanwaldhauser", "createdAt": "2020-12-29T11:57:37Z", "path": "src/test/javascript/spec/component/exam/manage/exam-management.component.spec.ts", "diffHunk": "@@ -84,4 +85,53 @@ describe('Exam Management Component', () => {\n         // THEN\n         expect(service.delete).to.have.been.calledOnce;\n     });\n+\n+    it('Should return true for examHasFinished when component has no exam information ', () => {", "originalCommit": "be220c952cbd7208df3d696129f4fe6f198f3018", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyNTUzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r549725535", "bodyText": "Sadly I'm pretty new to testing so I don't know. The goal was to cover all branches in the function.", "author": "ivanchimeno", "createdAt": "2020-12-29T14:31:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3Nzc5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDkwOTk2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2611#discussion_r550909965", "bodyText": "I think the point was that usually a test covering the most common use case would be enough for a simple method. I don't think we should remove the tests now that we have them already.", "author": "FrankeLukas", "createdAt": "2021-01-02T18:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3Nzc5Mg=="}], "type": "inlineReview"}, {"oid": "245eeef8344a0da6abf2bff1948ad1604bb5497d", "url": "https://github.com/ls1intum/Artemis/commit/245eeef8344a0da6abf2bff1948ad1604bb5497d", "message": "add afterEach in exam-management.component.spec.ts", "committedDate": "2020-12-29T14:32:05Z", "type": "commit"}, {"oid": "38c462828d119b650097a10e8c874dd3c7ae7a2b", "url": "https://github.com/ls1intum/Artemis/commit/38c462828d119b650097a10e8c874dd3c7ae7a2b", "message": "Merge branch 'develop' into chore/test/exam-management", "committedDate": "2020-12-30T22:17:36Z", "type": "commit"}, {"oid": "350bd714a2f6f03e114949572a54ad01e054a00f", "url": "https://github.com/ls1intum/Artemis/commit/350bd714a2f6f03e114949572a54ad01e054a00f", "message": "Merge branch 'develop' into chore/test/exam-management", "committedDate": "2021-01-03T22:54:56Z", "type": "commit"}, {"oid": "194ca1b0ed8079b6980c56adcfcab8bb353516b8", "url": "https://github.com/ls1intum/Artemis/commit/194ca1b0ed8079b6980c56adcfcab8bb353516b8", "message": "Merge branch 'develop' into chore/test/exam-management", "committedDate": "2021-01-04T00:04:59Z", "type": "commit"}, {"oid": "b7d810213fb12316a32e27c5be99ac0826ab197d", "url": "https://github.com/ls1intum/Artemis/commit/b7d810213fb12316a32e27c5be99ac0826ab197d", "message": "remove mockConvertDateFromClient and use real function", "committedDate": "2021-01-04T09:44:54Z", "type": "commit"}]}