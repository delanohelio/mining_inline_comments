{"pr_number": 2430, "pr_title": "[Docs] Database Documentation and Best Practices", "pr_createdAt": "2020-11-19T08:57:01Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2430", "timeline": [{"oid": "642ef3c8bc938c6fb42c37c5f86b5ff383e75f80", "url": "https://github.com/ls1intum/Artemis/commit/642ef3c8bc938c6fb42c37c5f86b5ff383e75f80", "message": "add solution for issues that can come up", "committedDate": "2020-11-19T08:54:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwODA0NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r526708045", "bodyText": "then -> the.", "author": "FrankeLukas", "createdAt": "2020-11-19T09:21:27Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -152,3 +152,12 @@ Additional notes on the controller methods:\n * Use ``./gradlew spotlessCheck`` and ``./gradlew spotlessApply`` to check Java code style and to automatically fix it.\n \n Some parts of these guidelines are adapted from https://medium.com/@madhupathy/ultimate-clean-code-guide-for-java-spring-based-applications-4d4c9095cc2a\n+\n+15. Solution for known issues\n+==============================\n+* ``JpaSystemException: null index column for collection`` caused by ``@OrderColumn`` annotation\n+    #. Save the child entity (e.g. `Feedback <https://github.com/ls1intum/Artemis/blob/develop/src/main/java/de/tum/in/www1/artemis/domain/Feedback.java>`_) without connection to the parent entity (e.g. `Result <https://github.com/ls1intum/Artemis/blob/develop/src/main/java/de/tum/in/www1/artemis/domain/Result.java>`_)\n+    #. Add back then connection of the child entity to the parent entity", "originalCommit": "642ef3c8bc938c6fb42c37c5f86b5ff383e75f80", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE3OTIyMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r527179221", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                #. Add back then connection of the child entity to the parent entity\n          \n          \n            \n                #. Add back the connection of the child entity to the parent entity", "author": "fde312", "createdAt": "2020-11-19T20:32:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcwODA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEyNDEyMw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r527124123", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            15. Solution for known issues\n          \n          \n            \n            15. Solutions for known issues", "author": "kloessst", "createdAt": "2020-11-19T18:56:53Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -152,3 +152,12 @@ Additional notes on the controller methods:\n * Use ``./gradlew spotlessCheck`` and ``./gradlew spotlessApply`` to check Java code style and to automatically fix it.\n \n Some parts of these guidelines are adapted from https://medium.com/@madhupathy/ultimate-clean-code-guide-for-java-spring-based-applications-4d4c9095cc2a\n+\n+15. Solution for known issues", "originalCommit": "642ef3c8bc938c6fb42c37c5f86b5ff383e75f80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e7abaa88dff4d79c2f2deb19d49c032c2ebed1fc", "url": "https://github.com/ls1intum/Artemis/commit/e7abaa88dff4d79c2f2deb19d49c032c2ebed1fc", "message": "Apply suggestions from code review\n\nCo-authored-by: Stefan Kl\u00f6ss-Schuster <16407766+kloessst@users.noreply.github.com>", "committedDate": "2020-11-19T20:32:22Z", "type": "commit"}, {"oid": "b8e04a771d89d5a748dc4f5e9c7b88d8d2c35601", "url": "https://github.com/ls1intum/Artemis/commit/b8e04a771d89d5a748dc4f5e9c7b88d8d2c35601", "message": "add new database file and some more points", "committedDate": "2020-11-20T03:09:50Z", "type": "commit"}, {"oid": "5fff75924c0d4bd7c42c3b4bbcdca1b2862ae2fd", "url": "https://github.com/ls1intum/Artemis/commit/5fff75924c0d4bd7c42c3b4bbcdca1b2862ae2fd", "message": "Add documentation", "committedDate": "2020-11-20T10:39:59Z", "type": "commit"}, {"oid": "5424d3462f2f7a3d1070009d8db193011351a17a", "url": "https://github.com/ls1intum/Artemis/commit/5424d3462f2f7a3d1070009d8db193011351a17a", "message": "Add more content", "committedDate": "2020-11-20T12:58:47Z", "type": "commit"}, {"oid": "ba997c5b482a2a5db24844b0ce3d8cd3958a09c7", "url": "https://github.com/ls1intum/Artemis/commit/ba997c5b482a2a5db24844b0ce3d8cd3958a09c7", "message": "fix code", "committedDate": "2020-11-20T13:01:01Z", "type": "commit"}, {"oid": "4ac4fb973fe7b7824092140bd31d06297ff87a27", "url": "https://github.com/ls1intum/Artemis/commit/4ac4fb973fe7b7824092140bd31d06297ff87a27", "message": "rephrase", "committedDate": "2020-11-20T13:06:32Z", "type": "commit"}, {"oid": "3e69e56fb9231d1086c630dc29843d1a2c87e37c", "url": "https://github.com/ls1intum/Artemis/commit/3e69e56fb9231d1086c630dc29843d1a2c87e37c", "message": "Merge branch 'develop' into doc/server-guidelines/null-index-issue", "committedDate": "2020-11-20T13:09:33Z", "type": "commit"}, {"oid": "1983e5156632505ded01c5a9108170d13776237f", "url": "https://github.com/ls1intum/Artemis/commit/1983e5156632505ded01c5a9108170d13776237f", "message": "Merge branch 'develop' into doc/server-guidelines/null-index-issue", "committedDate": "2020-11-21T09:16:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MTI0NA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528181244", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need to association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n          \n          \n            \n            * If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0", "author": "FuchsDominik", "createdAt": "2020-11-21T10:49:03Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+=================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized)  to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet\n+\n+\n+Best Practices\n+===============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need to association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0", "originalCommit": "1983e5156632505ded01c5a9108170d13776237f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MTQ5Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528181497", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to be made to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n          \n          \n            \n              * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:", "author": "FuchsDominik", "createdAt": "2020-11-21T10:51:24Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+=================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized)  to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet\n+\n+\n+Best Practices\n+===============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need to association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to be made to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:", "originalCommit": "1983e5156632505ded01c5a9108170d13776237f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1398412106a785574106fbff126da4e7c8991fec", "url": "https://github.com/ls1intum/Artemis/commit/1398412106a785574106fbff126da4e7c8991fec", "message": "Apply suggestions from code review\n\nCo-authored-by: Dominik Fuchs <44401560+FuchsDominik@users.noreply.github.com>", "committedDate": "2020-11-21T12:42:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5Njk0NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528196945", "bodyText": "Shouldn't this be easier to implement instead of more difficult?", "author": "FrankeLukas", "createdAt": "2020-11-21T13:32:59Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|", "originalCommit": "1398412106a785574106fbff126da4e7c8991fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMTk0Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528601947", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n          \n          \n            \n            In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|", "author": "fde312", "createdAt": "2020-11-23T10:27:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5Njk0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NzI5NA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528197294", "bodyText": "with be stuck -> will be stuck", "author": "FrankeLukas", "createdAt": "2020-11-21T13:36:48Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. ", "originalCommit": "1398412106a785574106fbff126da4e7c8991fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDAwMw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528600003", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n          \n          \n            \n                    For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process will be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_.", "author": "fde312", "createdAt": "2020-11-23T10:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NzI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NzUwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528197500", "bodyText": "Double whitespace after (saved/updated/synchronized).", "author": "FrankeLukas", "createdAt": "2020-11-21T13:39:20Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+=================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized)  to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0", "originalCommit": "1398412106a785574106fbff126da4e7c8991fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDU2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528600567", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized)  to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n          \n          \n            \n            * ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized) to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0", "author": "fde312", "createdAt": "2020-11-23T10:25:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NzUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NzYzOA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528197638", "bodyText": "Missing fullstop.", "author": "FrankeLukas", "createdAt": "2020-11-21T13:40:16Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+=================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized)  to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet", "originalCommit": "1398412106a785574106fbff126da4e7c8991fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDkxNA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528600914", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Not used in Artemis yet\n          \n          \n            \n            Not used in Artemis yet.", "author": "fde312", "createdAt": "2020-11-23T10:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NzYzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NzY1NA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528197654", "bodyText": "One = too much here.", "author": "FrankeLukas", "createdAt": "2020-11-21T13:40:28Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+=================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized)  to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet\n+\n+\n+Best Practices\n+===============", "originalCommit": "1398412106a785574106fbff126da4e7c8991fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDk5Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528600997", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ===============\n          \n          \n            \n            ==============", "author": "fde312", "createdAt": "2020-11-23T10:25:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5NzY1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5Nzg4OA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528197888", "bodyText": "Four too many =.", "author": "FrankeLukas", "createdAt": "2020-11-21T13:42:31Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+=================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized)  to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet\n+\n+\n+Best Practices\n+===============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n+\n+       .. code-block:: java\n+\n+        // Course.java\n+        @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonIgnoreProperties(\"course\")\n+        private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+.. _ordered:\n+\n+  * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate it with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:\n+\n+       .. code-block:: java\n+\n+        //Result.java\n+        @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+        @OrderColumn\n+        @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonView(QuizView.Before.class)\n+        private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+       .. note::\n+        Hiberanate will take care of the ordering for you but you must create the order column in the database. This is not created automatically!\n+\n+\n+    With ordered collections, you have to be very careful with the way you persist the objects in the database. You must first persist the child object without a relation to the parent object. Then, you recreate the association and persist the parent object. Example of how to correctly persist objects in an ordered collection:\n+\n+       .. code-block:: java\n+\n+        // ProgrammingAssessmentService\n+        List<Feedback> savedFeedbacks = new ArrayList<>();\n+        result.getFeedbacks().forEach(feedback -> {\n+               // cut association to parent object\n+               feedback.setResult(null);\n+               // persist the child object without an association to the parent object. IMPORTANT: Use the object returned from the database!\n+               feedback = feedbackRepository.save(feedback);\n+               // restore the association to the parent object\n+               feedback.setResult(result);\n+               savedFeedbacks.add(feedback);\n+               });\n+\n+        // set the association of the parent to its child objects which are now persisted in the database\n+        result.setFeedbacks(savedFeedbacks);\n+        // persist the parent object\n+        return resultRepository.save(result);\n+\n+\n+Solutions for known issues\n+==============================", "originalCommit": "1398412106a785574106fbff126da4e7c8991fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMTM4Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528601382", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==============================\n          \n          \n            \n            ==========================", "author": "fde312", "createdAt": "2020-11-23T10:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5Nzg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5ODI5NA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528198294", "bodyText": "The indentation here looks off, considering we use 4 spaces below. I suggest:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                           // cut association to parent object\n          \n          \n            \n                           feedback.setResult(null);\n          \n          \n            \n                           // persist the child object without an association to the parent object. IMPORTANT: Use the object returned from the database!\n          \n          \n            \n                           feedback = feedbackRepository.save(feedback);\n          \n          \n            \n                           // restore the association to the parent object\n          \n          \n            \n                           feedback.setResult(result);\n          \n          \n            \n                           savedFeedbacks.add(feedback);\n          \n          \n            \n                           });\n          \n          \n            \n                       // cut association to parent object\n          \n          \n            \n                       feedback.setResult(null);\n          \n          \n            \n                       // persist the child object without an association to the parent object. IMPORTANT: Use the object returned from the database!\n          \n          \n            \n                       feedback = feedbackRepository.save(feedback);\n          \n          \n            \n                       // restore the association to the parent object\n          \n          \n            \n                       feedback.setResult(result);\n          \n          \n            \n                       savedFeedbacks.add(feedback);\n          \n          \n            \n                   });", "author": "FrankeLukas", "createdAt": "2020-11-21T13:46:55Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+=================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized)  to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet\n+\n+\n+Best Practices\n+===============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n+\n+       .. code-block:: java\n+\n+        // Course.java\n+        @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonIgnoreProperties(\"course\")\n+        private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+.. _ordered:\n+\n+  * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate it with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:\n+\n+       .. code-block:: java\n+\n+        //Result.java\n+        @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+        @OrderColumn\n+        @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonView(QuizView.Before.class)\n+        private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+       .. note::\n+        Hiberanate will take care of the ordering for you but you must create the order column in the database. This is not created automatically!\n+\n+\n+    With ordered collections, you have to be very careful with the way you persist the objects in the database. You must first persist the child object without a relation to the parent object. Then, you recreate the association and persist the parent object. Example of how to correctly persist objects in an ordered collection:\n+\n+       .. code-block:: java\n+\n+        // ProgrammingAssessmentService\n+        List<Feedback> savedFeedbacks = new ArrayList<>();\n+        result.getFeedbacks().forEach(feedback -> {\n+               // cut association to parent object\n+               feedback.setResult(null);\n+               // persist the child object without an association to the parent object. IMPORTANT: Use the object returned from the database!\n+               feedback = feedbackRepository.save(feedback);\n+               // restore the association to the parent object\n+               feedback.setResult(result);\n+               savedFeedbacks.add(feedback);\n+               });", "originalCommit": "1398412106a785574106fbff126da4e7c8991fec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5ODQwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528198400", "bodyText": "This also has one = too much.", "author": "FrankeLukas", "createdAt": "2020-11-21T13:47:51Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more difficult to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process with be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+=================", "originalCommit": "1398412106a785574106fbff126da4e7c8991fec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwMDI1Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528600253", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            =================\n          \n          \n            \n            ================", "author": "fde312", "createdAt": "2020-11-23T10:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE5ODQwMA=="}], "type": "inlineReview"}, {"oid": "dc660b91d7f23b27df92d1f72403d24eaa459e20", "url": "https://github.com/ls1intum/Artemis/commit/dc660b91d7f23b27df92d1f72403d24eaa459e20", "message": "Apply suggestions from code review\n\nCo-authored-by: Lukas Franke <72132281+FrankeLukas@users.noreply.github.com>", "committedDate": "2020-11-23T10:27:51Z", "type": "commit"}, {"oid": "88e1f680c3ba4b033bc6fa6a4e6f872393b25032", "url": "https://github.com/ls1intum/Artemis/commit/88e1f680c3ba4b033bc6fa6a4e6f872393b25032", "message": "Merge branch 'develop' into doc/server-guidelines/null-index-issue", "committedDate": "2020-11-23T11:10:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwNDA2OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528904069", "bodyText": "GitHub Actions complains now with Explicit markup ends without a blank line; unexpected unindent.. I think we just need to add an additional new line. (All the other code-blocks have two empty lines trailing.)", "author": "FrankeLukas", "createdAt": "2020-11-23T18:15:15Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,235 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process will be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized) to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet.\n+\n+\n+Best Practices\n+==============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n+\n+       .. code-block:: java\n+\n+        // Course.java\n+        @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonIgnoreProperties(\"course\")\n+        private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+.. _ordered:\n+\n+  * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate it with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:\n+\n+       .. code-block:: java\n+\n+        //Result.java\n+        @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+        @OrderColumn\n+        @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonView(QuizView.Before.class)\n+        private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+       .. note::\n+        Hiberanate will take care of the ordering for you but you must create the order column in the database. This is not created automatically!\n+\n+\n+    With ordered collections, you have to be very careful with the way you persist the objects in the database. You must first persist the child object without a relation to the parent object. Then, you recreate the association and persist the parent object. Example of how to correctly persist objects in an ordered collection:\n+\n+       .. code-block:: java\n+\n+        // ProgrammingAssessmentService\n+        List<Feedback> savedFeedbacks = new ArrayList<>();\n+        result.getFeedbacks().forEach(feedback -> {\n+           // cut association to parent object\n+           feedback.setResult(null);\n+           // persist the child object without an association to the parent object. IMPORTANT: Use the object returned from the database!\n+           feedback = feedbackRepository.save(feedback);\n+           // restore the association to the parent object\n+           feedback.setResult(result);\n+           savedFeedbacks.add(feedback);\n+       });", "originalCommit": "88e1f680c3ba4b033bc6fa6a4e6f872393b25032", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2MzQ2OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528963469", "bodyText": "Nice catch", "author": "anditurdiu", "createdAt": "2020-11-23T20:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkwNDA2OQ=="}], "type": "inlineReview"}, {"oid": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "url": "https://github.com/ls1intum/Artemis/commit/9eae9000251759d1c212d158d7e17c5f53c0f2f3", "message": "Update database.rst\n\nadd blank line", "committedDate": "2020-11-23T20:01:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2ODY2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528968661", "bodyText": "what do you mean with retrieving and building an object's relationship? I don't fully understand the first sentence: The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object.\nshould we use database language, like fetching an object vs joining tables?", "author": "TobiasPr", "createdAt": "2020-11-23T20:12:59Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3Nzg1Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528977853", "bodyText": "Retrieving and building refers to creating the java object and instantiating its relationships to other objects. Selecting the object refers to simply selecting an object from the database. I'm not sure how to reformulate this more clearly. Do you have a suggestion?", "author": "anditurdiu", "createdAt": "2020-11-23T20:31:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2ODY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NjMwNw==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528966307", "bodyText": "[...] inverse of an OneToMany relationship. [...]", "author": "JohannesWeiss", "createdAt": "2020-11-23T20:08:23Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. ", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk4MjI3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528982272", "bodyText": "... a OneToMany ... is actually the correct form here for the following reason:\nThe word \u201cone\u201d starts with a vowel, but the sound it makes is the consonant \u201cw.\u201d", "author": "balazs-czopf", "createdAt": "2020-11-23T20:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2NjMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2Njc2Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528966766", "bodyText": "[...] inverse of -a- itself. [...]", "author": "JohannesWeiss", "createdAt": "2020-11-23T20:09:17Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MDU0NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528970545", "bodyText": "In Java, .... in Java - you could leave the second one out just  a Collection or array type is used to hold...", "author": "TobiasPr", "createdAt": "2020-11-23T20:16:40Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a19edb51ab007c74cc8b6968f25faff885e22ab9", "url": "https://github.com/ls1intum/Artemis/commit/a19edb51ab007c74cc8b6968f25faff885e22ab9", "message": "Update database.rst\n\nfix typos", "committedDate": "2020-11-23T20:33:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk2ODgwNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528968805", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Database Relationship\n          \n          \n            \n            Database Relationships\n          \n      \n    \n    \n  \n\nmaybe use the plural here as you\u00b4re talking about relationships in general and not just one?", "author": "balazs-czopf", "createdAt": "2020-11-23T20:13:19Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MjE5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528972196", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n          \n          \n            \n            A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. If there is a relationship to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (containing both objects' primary keys). |br|", "author": "balazs-czopf", "createdAt": "2020-11-23T20:19:49Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4NzcxMg==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r529587712", "bodyText": "See cf269c7", "author": "anditurdiu", "createdAt": "2020-11-24T14:30:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MjE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3MzM0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528973349", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n          \n          \n            \n            * **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has a list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.", "author": "balazs-czopf", "createdAt": "2020-11-23T20:22:09Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NTM4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528975381", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n          \n          \n            \n            * ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, the corresponding ``Result`` is also deleted.", "author": "balazs-czopf", "createdAt": "2020-11-23T20:26:14Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process will be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized) to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODk3NzAwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r528977001", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Hiberanate will take care of the ordering for you but you must create the order column in the database. This is not created automatically!\n          \n          \n            \n                    Hibernate will take care of the ordering for you but you must create the order column in the database. This is not created automatically!", "author": "balazs-czopf", "createdAt": "2020-11-23T20:29:36Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationship\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used in Java to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of a **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of a itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process will be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized) to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, also the ``Result`` is deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet.\n+\n+\n+Best Practices\n+==============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n+\n+       .. code-block:: java\n+\n+        // Course.java\n+        @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonIgnoreProperties(\"course\")\n+        private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+.. _ordered:\n+\n+  * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate it with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:\n+\n+       .. code-block:: java\n+\n+        //Result.java\n+        @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+        @OrderColumn\n+        @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonView(QuizView.Before.class)\n+        private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+       .. note::\n+        Hiberanate will take care of the ordering for you but you must create the order column in the database. This is not created automatically!", "originalCommit": "9eae9000251759d1c212d158d7e17c5f53c0f2f3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0df105ae31e8ef4bc3b1ac0102fcae1cb04e9782", "url": "https://github.com/ls1intum/Artemis/commit/0df105ae31e8ef4bc3b1ac0102fcae1cb04e9782", "message": "Update docs/dev/guidelines/database.rst\n\nCo-authored-by: Balazs Czopf <63286106+balazs-czopf@users.noreply.github.com>", "committedDate": "2020-11-23T20:36:52Z", "type": "commit"}, {"oid": "6fa6a552f59b72cbdfa42a14627fe5c6eb1ce071", "url": "https://github.com/ls1intum/Artemis/commit/6fa6a552f59b72cbdfa42a14627fe5c6eb1ce071", "message": "Update docs/dev/guidelines/database.rst\n\nCo-authored-by: Balazs Czopf <63286106+balazs-czopf@users.noreply.github.com>", "committedDate": "2020-11-23T20:39:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAzMTY1MA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r529031650", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate it with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:\n          \n          \n            \n              * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for a ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate them with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:", "author": "kloessst", "createdAt": "2020-11-23T22:17:12Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationships\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of an **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process will be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized) to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, the corresponding ``Result`` is also deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet.\n+\n+\n+Best Practices\n+==============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n+\n+       .. code-block:: java\n+\n+        // Course.java\n+        @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonIgnoreProperties(\"course\")\n+        private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+.. _ordered:\n+\n+  * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate it with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:", "originalCommit": "6fa6a552f59b72cbdfa42a14627fe5c6eb1ce071", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAzNDE0NA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r529034144", "bodyText": "This block seems to be duplicated. This is already explained above. You could just reference the ordered collections section.", "author": "kloessst", "createdAt": "2020-11-23T22:22:15Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationships\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of an **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process will be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized) to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, the corresponding ``Result`` is also deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet.\n+\n+\n+Best Practices\n+==============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n+\n+       .. code-block:: java\n+\n+        // Course.java\n+        @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonIgnoreProperties(\"course\")\n+        private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+.. _ordered:\n+\n+  * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate it with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:\n+\n+       .. code-block:: java\n+\n+        //Result.java\n+        @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+        @OrderColumn\n+        @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonView(QuizView.Before.class)\n+        private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+       .. note::\n+        Hiberanate will take care of the ordering for you but you must create the order column in the database. This is not created automatically!\n+\n+\n+    With ordered collections, you have to be very careful with the way you persist the objects in the database. You must first persist the child object without a relation to the parent object. Then, you recreate the association and persist the parent object. Example of how to correctly persist objects in an ordered collection:\n+\n+       .. code-block:: java\n+\n+        // ProgrammingAssessmentService\n+        List<Feedback> savedFeedbacks = new ArrayList<>();\n+        result.getFeedbacks().forEach(feedback -> {\n+           // cut association to parent object\n+           feedback.setResult(null);\n+           // persist the child object without an association to the parent object. IMPORTANT: Use the object returned from the database!\n+           feedback = feedbackRepository.save(feedback);\n+           // restore the association to the parent object\n+           feedback.setResult(result);\n+           savedFeedbacks.add(feedback);\n+       });\n+       \n+\n+        // set the association of the parent to its child objects which are now persisted in the database\n+        result.setFeedbacks(savedFeedbacks);\n+        // persist the parent object\n+        return resultRepository.save(result);\n+\n+\n+Solutions for known issues\n+==========================\n+\n+* ``org.hibernate.LazyInitializationException : could not initialize proxy \u2013 no Session`` caused by ``fetchType.LAZY``. You must explicitly load the associated object from the database before trying to access those. Example of how to eagerly fetch the feedbacks with the result:\n+\n+ .. code-block:: java\n+\n+    // ResultRepository.java\n+    @Query(\"select r from Result r left join fetch r.feedbacks where r.id = :resultId\")\n+    Optional<Result> findByIdWithEagerFeedbacks(@Param(\"resultId\") Long id);\n+\n+\n+* ``JpaSystemException: null index column for collection`` caused by ``@OrderColumn`` annotation:\n+\n+ #. Save the child entity (e.g., `Feedback <https://github.com/ls1intum/Artemis/blob/develop/src/main/java/de/tum/in/www1/artemis/domain/Feedback.java>`_) without connection to the parent entity (e.g., `Result <https://github.com/ls1intum/Artemis/blob/develop/src/main/java/de/tum/in/www1/artemis/domain/Result.java>`_)\n+ #. Add back the connection of the child entity to the parent entity.\n+ #. Save the parent entity.\n+ #. Always use the returned value after saving the entity, see: ``feedback = feedbackRepository.save(feedback);``\n+\n+ .. code:: java\n+\n+    // ProgrammingAssessmentService\n+    List<Feedback> savedFeedbacks = new ArrayList<>();\n+    result.getFeedbacks().forEach(feedback -> {\n+        // cut association to parent object\n+        feedback.setResult(null);\n+        // persist the child object without an association to the parent object. IMPORTANT: Use the object returned from the database!\n+        feedback = feedbackRepository.save(feedback);\n+        // restore the association to the parent object\n+        feedback.setResult(result);\n+        savedFeedbacks.add(feedback);\n+    });", "originalCommit": "6fa6a552f59b72cbdfa42a14627fe5c6eb1ce071", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4NTg2MA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r529585860", "bodyText": "See e56ec3f", "author": "anditurdiu", "createdAt": "2020-11-24T14:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTAzNDE0NA=="}], "type": "inlineReview"}, {"oid": "8bad859115976de713e9c016db3657c27b42b681", "url": "https://github.com/ls1intum/Artemis/commit/8bad859115976de713e9c016db3657c27b42b681", "message": "Update docs/dev/guidelines/database.rst\n\nCo-authored-by: Balazs Czopf <63286106+balazs-czopf@users.noreply.github.com>", "committedDate": "2020-11-24T08:18:57Z", "type": "commit"}, {"oid": "7656ecb2966524e50cbdadd6b6b9cc91e786f11a", "url": "https://github.com/ls1intum/Artemis/commit/7656ecb2966524e50cbdadd6b6b9cc91e786f11a", "message": "Update docs/dev/guidelines/database.rst\n\nCo-authored-by: Stefan Kl\u00f6ss-Schuster <16407766+kloessst@users.noreply.github.com>", "committedDate": "2020-11-24T08:19:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MjkyMg==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r529282922", "bodyText": "Unfortunately the warnings are still here. :( (I assume because this line contains whitespaces and isn't empty.)", "author": "FrankeLukas", "createdAt": "2020-11-24T08:21:44Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,236 @@\n+**********************\n+Database Relationships\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. In Java, if a relationship is to a collection of other objects, a ``Collection`` or ``array`` type is used to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of an **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process will be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized) to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, the corresponding ``Result`` is also deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet.\n+\n+\n+Best Practices\n+==============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n+\n+       .. code-block:: java\n+\n+        // Course.java\n+        @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonIgnoreProperties(\"course\")\n+        private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+.. _ordered:\n+\n+  * **Ordered Collection**: When you want to order the collection of objects of the relationship, then always use a ``List``. It is important to note here that there is no inherent order in a database table. One could argue that you can use the ``id`` field for the ordering, but there are edge cases where this can lead to problems. Therefore, for a ordered collection, **always** annotate it with ``@OrderColumn``. An order column indicates to hibernate that we want to order our collection based on a specific column of our data table. By default, the column name it expects is *tablenameS\\_order*. For ordered collections, we also recommend that you annotate them with ``CascadeType.ALL`` and ``orphanRemoval = true``. E.g.:\n+\n+       .. code-block:: java\n+\n+        //Result.java\n+        @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+        @OrderColumn\n+        @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonView(QuizView.Before.class)\n+        private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+       .. note::\n+        Hibernate will take care of the ordering for you but you must create the order column in the database. This is not created automatically!\n+\n+\n+    With ordered collections, you have to be very careful with the way you persist the objects in the database. You must first persist the child object without a relation to the parent object. Then, you recreate the association and persist the parent object. Example of how to correctly persist objects in an ordered collection:\n+\n+       .. code-block:: java\n+\n+        // ProgrammingAssessmentService\n+        List<Feedback> savedFeedbacks = new ArrayList<>();\n+        result.getFeedbacks().forEach(feedback -> {\n+           // cut association to parent object\n+           feedback.setResult(null);\n+           // persist the child object without an association to the parent object. IMPORTANT: Use the object returned from the database!\n+           feedback = feedbackRepository.save(feedback);\n+           // restore the association to the parent object\n+           feedback.setResult(result);\n+           savedFeedbacks.add(feedback);\n+       });\n+       ", "originalCommit": "7656ecb2966524e50cbdadd6b6b9cc91e786f11a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4NTgzMA==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r529585830", "bodyText": "Should be fixed now: e56ec3f", "author": "anditurdiu", "createdAt": "2020-11-24T14:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI4MjkyMg=="}], "type": "inlineReview"}, {"oid": "61720d37a7ba52b2bbbcb433220268d3882a41fb", "url": "https://github.com/ls1intum/Artemis/commit/61720d37a7ba52b2bbbcb433220268d3882a41fb", "message": "Update database.rst", "committedDate": "2020-11-24T11:14:11Z", "type": "commit"}, {"oid": "e56ec3f2ed8b6d0083ef515321142acfe8b4125c", "url": "https://github.com/ls1intum/Artemis/commit/e56ec3f2ed8b6d0083ef515321142acfe8b4125c", "message": "Fix github actions warning & add feedback", "committedDate": "2020-11-24T14:25:48Z", "type": "commit"}, {"oid": "cf269c7dc128b5075c973f51d65bb863b0fb61e9", "url": "https://github.com/ls1intum/Artemis/commit/cf269c7dc128b5075c973f51d65bb863b0fb61e9", "message": "add feedback", "committedDate": "2020-11-24T14:29:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwNDg0Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r529604846", "bodyText": "Why is this .. ordered: needed?", "author": "JannisBittlmayer", "createdAt": "2020-11-24T14:52:44Z", "path": "docs/dev/guidelines/database.rst", "diffHunk": "@@ -0,0 +1,226 @@\n+**********************\n+Database Relationships\n+**********************\n+\n+WORK IN PROGRESS\n+\n+1. Retrieving and Building Objects\n+==================================\n+\n+The cost of retrieving and building an object's relationships far exceeds the cost of selecting the object. This is especially true for relationships where it would trigger the loading of every child through the relationship hierarchy. The solution to this issue is **lazy fetching** (lazy loading). Lazy fetching allows the fetching of a relationship to be deferred until it is accessed. This is important not only to avoid the database access, but also to avoid the cost of building the objects if they are not needed. |br|\n+\n+In JPA lazy fetching can be set on any relationship using the fetch attribute. The fetch can be set to either ``LAZY`` or ``EAGER`` as defined in the ``FetchType`` enum. The default fetch type is ``LAZY`` for all relationships except for **OneToOne** and **ManyToOne**, but in general it is a good idea to make every relationship ``LAZY``. The ``EAGER`` default for **OneToOne** and **ManyToOne** is for implementation reasons (more easier to implement), not because it is a good idea. |br|\n+\n+We **always** use ``FetchType.LAZY``, unless there is a very strong case to be made for ``FetchType.EAGER``.\n+\n+       .. note::\n+        Additional effort to use ``FetchType.LAZY`` does not count as a strong argument.\n+\n+2. Relationships\n+================\n+\n+A relationship is a reference from one object to another. In a relational database relationships are defined through foreign keys. The source row contains the primary key of the target row to define the relationship (and sometimes the inverse). A query must be performed to read the target objects of the relationship using the foreign key and primary key information. If there is a relationship to a collection of other objects, a ``Collection`` or ``array`` type is used to hold the contents of the relationship. In a relational database, collection relations are either defined by the target objects having a foreign key back to the source object's primary key, or by having an intermediate join table to store the relationship (containing both objects' primary keys). |br|\n+\n+In this section, we depict common entity relationships we use in Artemis and show some code snippets. \n+\n+* **OneToOne** A unique reference from one object to another. It is also inverse of itself. Example: one ``Complaint`` has a reference to one ``Result``.\n+\n+ .. code:: java\n+\n+    // Complaint.java\n+    @OneToOne\n+    @JoinColumn(unique = true)\n+    private Result result;\n+\n+* **OneToMany** A ``Collection`` or ``Map`` of objects. It is the inverse of a **ManyToOne** relationship. Example: one ``Result`` has a list of ``Feedback`` elements. For ordered OneToMany relations see :ref:`ordered collections <ordered>`.\n+\n+ .. code:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* **ManyToOne** A reference from one object to another. It is the inverse of an **OneToMany** relationship. Example: one ``Feedback`` has a reference to one ``Result``. \n+\n+ .. code:: java\n+\n+    // Feedback.java\n+    @ManyToOne\n+    @JsonIgnoreProperties(\"feedbacks\")\n+    private Result result;\n+\n+\n+* **ManyToMany** ``A Collection`` or ``Map`` of objects. It is the inverse of itself. Example: one ``Exercise`` has a list of ``LearningGoal`` elements, one ``LearningGoal`` has list of ``Exercise`` elements. In other words: many exercises are connected to many learning goals and vice-versa.\n+\n+ .. code:: java\n+\n+    // Exercise.java\n+    @ManyToMany(mappedBy = \"exercises\")\n+    public Set<LearningGoal> learningGoals = new HashSet<>();\n+\n+    // LearningGoal.java\n+    @ManyToMany\n+    @JoinTable(name = \"learning_goal_exercise\", joinColumns = @JoinColumn(name = \"learning_goal_id\", referencedColumnName = \"id\"), inverseJoinColumns = @JoinColumn(name = \"exercise_id\", referencedColumnName = \"id\"))\n+    @JsonIgnoreProperties(\"learningGoals\")\n+    private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+ .. warning::\n+        For **OneToMany**, **ManyToOne**, and **ManyToMany** relationships you must not forget to mark the associated elements with ``@JsonIgnoreProperties()``. Without this, the object serialization process will be stuck in an endless loop and throw an error. For more information check out the examples listed above and see: `Jackson and JsonIgnoreType <https://www.concretepage.com/jackson-api/jackson-jsonignore-jsonignoreproperties-and-jsonignoretype>`_. \n+\n+\n+2. Cascade Types\n+================\n+Entity relationships often depend on the existence of another entity \u2014 for example, the Result-Feedback relationship. Without the Result, the Feedback entity doesn't have any meaning of its own. When we delete the Result entity, our Feedback entity should also get deleted. For more information see: `jpa cascade types <https://www.baeldung.com/jpa-cascade-types>`_.\n+\n+* ``CascadeType.ALL`` Propagates all operations mentioned below from the parent object to the to child object. \n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToMany(mappedBy = \"result\", cascade = CascadeType.ALL, orphanRemoval = true)\n+    @OrderColumn\n+    @JsonIgnoreProperties(value = \"result\", allowSetters = true)\n+    @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+    @JsonView(QuizView.Before.class)\n+    private List<Feedback> feedbacks = new ArrayList<>();\n+\n+\n+* ``CascadeType.PERSIST`` When persisting a parent entity, it also persists the child entities held in its fields. This cascade rule is helpful for relationships where the parent acts as a *container* to the child entity. If you do not use this, you have to ensure that you persist the child entity first, otherwise an error will be thrown. Example: The code below propagates the **persist** operation from parent ``AnswerCounter`` to child ``AnswerOption``. When an ``AnswerCounter`` is persisted, its ``AnswerOption`` is persisted as well.\u00a0\n+\n+ .. code-block:: java\n+\n+    // AnswerCounter.java\n+    @OneToOne(cascade = { CascadeType.PERSIST })\n+    @JoinColumn(unique = true)\n+    private AnswerOption answer;\n+\n+\n+* ``CascadeType.MERGE`` If you merge the source entity (saved/updated/synchronized) to the database, the merge is cascaded to the target of the association. This rule applies to existing objects only. Use this type to always merge/synchronize the existing data in the table with the data in the object. Example below: whenever we merge a ``Result`` to the database, i.e. save the changes on the object, the ``Assessor`` object is also merged/saved.\u00a0\n+\n+ .. code-block:: java\n+\n+    // Result.java\n+    @OneToOne(cascade = CascadeType.MERGE, fetch = FetchType.LAZY)\n+    @JoinColumn(unique = false)\n+    private User assessor;\n+\n+\n+* ``CascadeType.REMOVE`` If the source entity is removed, the target of the association is also removed. Example below: propagates **remove** operation from parent ``Submission`` to child ``Result``. When a ``Submission`` is deleted, the corresponding ``Result`` is also deleted.\n+\n+ .. code-block:: java\n+\n+    // Submission.java\n+    @OneToOne(mappedBy = \"submission\", fetch = FetchType.LAZY, cascade = CascadeType.REMOVE)\n+    @JsonIgnoreProperties({ \"submission\", \"participation\" })\n+    @JoinColumn(unique = true)\n+    private Result result;\n+ \n+\n+* ``CascadeType.REFRESH`` If the source entity is refreshed, it cascades the refresh to the target of the association. This is used to refresh the data in the object and its associations. This is useful for cases where there is a change which needs to be synchronized FROM the database.\n+\n+Not used in Artemis yet.\n+\n+\n+Best Practices\n+==============\n+* If you want to create a ``@OneToMany`` relationship or ``@ManyToMany`` relationship, first think about if it is important for the association to be ordered. If you do not need the association to be ordered, then always go for a ``Set`` instead of ``List``. If you are unsure, start with a ``Set``.\u00a0\n+\n+  * **Unordered Collection**: A ``Set`` comes with certain advantages such as ensuring that there are no duplicates and null values in your collection. There are also performance arguments to use a ``Set``, especially for ``@ManyToMany`` relationships. For more information see this `stackoverflow thread <https://stackoverflow.com/questions/4655392/which-java-type-do-you-use-for-jpa-collections-and-why>`_. E.g.:\n+\n+       .. code-block:: java\n+\n+        // Course.java\n+        @OneToMany(mappedBy = \"course\", fetch = FetchType.LAZY)\n+        @Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+        @JsonIgnoreProperties(\"course\")\n+        private Set<Exercise> exercises = new HashSet<>();\n+\n+\n+.. _ordered:", "originalCommit": "cf269c7dc128b5075c973f51d65bb863b0fb61e9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxMzc2NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2430#discussion_r529613765", "bodyText": "This is a way to label specific sections in Markdown. We use this to reference this section from within the text.", "author": "anditurdiu", "createdAt": "2020-11-24T15:03:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYwNDg0Ng=="}], "type": "inlineReview"}, {"oid": "c2b115f95f5ecfe97f5b68c77c0f8bb153aa7576", "url": "https://github.com/ls1intum/Artemis/commit/c2b115f95f5ecfe97f5b68c77c0f8bb153aa7576", "message": "Merge branch 'develop' into doc/server-guidelines/null-index-issue", "committedDate": "2020-11-24T15:04:05Z", "type": "commit"}]}