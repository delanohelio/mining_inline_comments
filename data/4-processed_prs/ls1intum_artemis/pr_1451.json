{"pr_number": 1451, "pr_title": "Feature/#1369 add rating to text exercise", "pr_createdAt": "2020-05-11T13:38:44Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1451", "timeline": [{"oid": "c864205d06b265c9719ed1d6286bd9a1cce7c6d2", "url": "https://github.com/ls1intum/Artemis/commit/c864205d06b265c9719ed1d6286bd9a1cce7c6d2", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-02T20:00:10Z", "type": "commit"}, {"oid": "1fd5f2aae8863556951bb024222413b57ec0dccc", "url": "https://github.com/ls1intum/Artemis/commit/1fd5f2aae8863556951bb024222413b57ec0dccc", "message": "Fix method call that got renamed on develop", "committedDate": "2020-06-02T20:39:33Z", "type": "commit"}, {"oid": "377e50a9b26dca17b387f85c63ef0179a7162961", "url": "https://github.com/ls1intum/Artemis/commit/377e50a9b26dca17b387f85c63ef0179a7162961", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-02T20:51:07Z", "type": "commit"}, {"oid": "f02a3fd9ed2e98346b7e060b0d11736ebbf04078", "url": "https://github.com/ls1intum/Artemis/commit/f02a3fd9ed2e98346b7e060b0d11736ebbf04078", "message": "Add feedback_rating to database", "committedDate": "2020-05-10T14:05:54Z", "type": "commit"}, {"oid": "82f6ca475a80b64924b76f3a1f6f172173c03555", "url": "https://github.com/ls1intum/Artemis/commit/82f6ca475a80b64924b76f3a1f6f172173c03555", "message": "Add ng-starrating dependency", "committedDate": "2020-05-11T13:14:18Z", "type": "commit"}, {"oid": "bff35df2af7a6fd8dbd6637cf69006c876db6eb6", "url": "https://github.com/ls1intum/Artemis/commit/bff35df2af7a6fd8dbd6637cf69006c876db6eb6", "message": "Add rating feature with mocked setRating()", "committedDate": "2020-05-11T13:19:40Z", "type": "commit"}, {"oid": "f46d6b2f02ef10fe03ce874417fa9f63d6f720be", "url": "https://github.com/ls1intum/Artemis/commit/f46d6b2f02ef10fe03ce874417fa9f63d6f720be", "message": "Add rating feature with mocked setRating()", "committedDate": "2020-05-11T13:30:01Z", "type": "commit"}, {"oid": "6938329ccb1daa18d02c02ca058633523d9ef2c2", "url": "https://github.com/ls1intum/Artemis/commit/6938329ccb1daa18d02c02ca058633523d9ef2c2", "message": "Add feedback_rating to database", "committedDate": "2020-05-11T13:31:46Z", "type": "commit"}, {"oid": "806f2c6dd0a00db332248285247888e32a4fb9bc", "url": "https://github.com/ls1intum/Artemis/commit/806f2c6dd0a00db332248285247888e32a4fb9bc", "message": "Add ng-starrating dependency", "committedDate": "2020-05-11T13:31:46Z", "type": "commit"}, {"oid": "8b4b8c2c18d9b3466a42f8e0f25fabcf4d03eec0", "url": "https://github.com/ls1intum/Artemis/commit/8b4b8c2c18d9b3466a42f8e0f25fabcf4d03eec0", "message": "Add rating feature with mocked setRating()", "committedDate": "2020-05-11T13:31:46Z", "type": "commit"}, {"oid": "6d020ba7d4e5c12dcd5d923d8585d52c43e56d80", "url": "https://github.com/ls1intum/Artemis/commit/6d020ba7d4e5c12dcd5d923d8585d52c43e56d80", "message": "Add rating feature with mocked setRating()", "committedDate": "2020-05-11T13:31:46Z", "type": "commit"}, {"oid": "10fdb533b30b06eb75db3bf0805d2d9fff8ff0a3", "url": "https://github.com/ls1intum/Artemis/commit/10fdb533b30b06eb75db3bf0805d2d9fff8ff0a3", "message": "Merge branch 'feature/#1369-add-rating-to-text-exercise' of github.com:ls1intum/Artemis into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-05-11T13:32:18Z", "type": "commit"}, {"oid": "fc368bdb248d9d16b3ca2d4f19edb9dd6fb55439", "url": "https://github.com/ls1intum/Artemis/commit/fc368bdb248d9d16b3ca2d4f19edb9dd6fb55439", "message": "Add feedback_rating to database", "committedDate": "2020-05-15T15:33:29Z", "type": "commit"}, {"oid": "d39f26518b0964e60ac07e6e250d6e9738a97a6d", "url": "https://github.com/ls1intum/Artemis/commit/d39f26518b0964e60ac07e6e250d6e9738a97a6d", "message": "Add ng-starrating dependency", "committedDate": "2020-05-15T15:33:29Z", "type": "commit"}, {"oid": "123b466395d0fc79a3acbf04d78f8089455a623e", "url": "https://github.com/ls1intum/Artemis/commit/123b466395d0fc79a3acbf04d78f8089455a623e", "message": "Add rating feature with mocked setRating()", "committedDate": "2020-05-15T15:33:29Z", "type": "commit"}, {"oid": "c9e3d7c9881a7e7f63bb3e510142206946b45b23", "url": "https://github.com/ls1intum/Artemis/commit/c9e3d7c9881a7e7f63bb3e510142206946b45b23", "message": "Add rating feature with mocked setRating()", "committedDate": "2020-05-15T15:33:29Z", "type": "commit"}, {"oid": "fb9db456dbc26680e34d59a1606df4ce264aa0dc", "url": "https://github.com/ls1intum/Artemis/commit/fb9db456dbc26680e34d59a1606df4ce264aa0dc", "message": "Add rating feature with mocked setRating()", "committedDate": "2020-05-15T15:33:29Z", "type": "commit"}, {"oid": "d6ec3883d701d9c0779e56d9d13ae9e179bc31cb", "url": "https://github.com/ls1intum/Artemis/commit/d6ec3883d701d9c0779e56d9d13ae9e179bc31cb", "message": "Add rating feature with mocked setRating()", "committedDate": "2020-05-15T15:33:29Z", "type": "commit"}, {"oid": "647be15886c7cb6a9bd6b8ef1795bd7bc233b4c1", "url": "https://github.com/ls1intum/Artemis/commit/647be15886c7cb6a9bd6b8ef1795bd7bc233b4c1", "message": "Add ng-starrating component to package.json", "committedDate": "2020-05-15T15:33:30Z", "type": "commit"}, {"oid": "7ec91bc498978d8df7a68125710103cb70009b5e", "url": "https://github.com/ls1intum/Artemis/commit/7ec91bc498978d8df7a68125710103cb70009b5e", "message": "Add database config for result_rating", "committedDate": "2020-05-15T15:33:30Z", "type": "commit"}, {"oid": "0290fc8c7c83930434c72298cc217338ad77881d", "url": "https://github.com/ls1intum/Artemis/commit/0290fc8c7c83930434c72298cc217338ad77881d", "message": "Add backend support for rating.service.ts", "committedDate": "2020-05-15T15:33:30Z", "type": "commit"}, {"oid": "a04f61d00855f090c95789ecb61f3de73eee22e8", "url": "https://github.com/ls1intum/Artemis/commit/a04f61d00855f090c95789ecb61f3de73eee22e8", "message": "Add Rating component to Angular", "committedDate": "2020-05-15T15:33:30Z", "type": "commit"}, {"oid": "ed3ff754717afffd307c4db7c4477a900ccb2183", "url": "https://github.com/ls1intum/Artemis/commit/ed3ff754717afffd307c4db7c4477a900ccb2183", "message": "Add Rating support on Result level to text exercises", "committedDate": "2020-05-15T15:33:30Z", "type": "commit"}, {"oid": "ed3ff754717afffd307c4db7c4477a900ccb2183", "url": "https://github.com/ls1intum/Artemis/commit/ed3ff754717afffd307c4db7c4477a900ccb2183", "message": "Add Rating support on Result level to text exercises", "committedDate": "2020-05-15T15:33:30Z", "type": "forcePushed"}, {"oid": "145d1d736fe38c110b39478478171bc96491dba4", "url": "https://github.com/ls1intum/Artemis/commit/145d1d736fe38c110b39478478171bc96491dba4", "message": "Resolve merge conflict", "committedDate": "2020-05-15T16:42:36Z", "type": "commit"}, {"oid": "042fe29c816ad05c2fd8e29ce169280f8f208070", "url": "https://github.com/ls1intum/Artemis/commit/042fe29c816ad05c2fd8e29ce169280f8f208070", "message": "Add documentation", "committedDate": "2020-05-15T16:43:05Z", "type": "commit"}, {"oid": "8d26f5ca274b952db338965dfded654fc4129d30", "url": "https://github.com/ls1intum/Artemis/commit/8d26f5ca274b952db338965dfded654fc4129d30", "message": "Add rating check in RatingResource", "committedDate": "2020-05-15T17:10:29Z", "type": "commit"}, {"oid": "6f1d26243763e80ab8c66d5690c83d1fc9da3ec1", "url": "https://github.com/ls1intum/Artemis/commit/6f1d26243763e80ab8c66d5690c83d1fc9da3ec1", "message": "Fix failing test cases", "committedDate": "2020-05-17T07:36:42Z", "type": "commit"}, {"oid": "1b9539e87cbec7687d3d3d2d92a6cc255bdd78e1", "url": "https://github.com/ls1intum/Artemis/commit/1b9539e87cbec7687d3d3d2d92a6cc255bdd78e1", "message": "Remove debug logging and add TODO for UserAuthentification", "committedDate": "2020-05-18T09:01:52Z", "type": "commit"}, {"oid": "5811bb45159e3f9ce31a3f6d5537da10a83f07fc", "url": "https://github.com/ls1intum/Artemis/commit/5811bb45159e3f9ce31a3f6d5537da10a83f07fc", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-05-18T09:06:56Z", "type": "commit"}, {"oid": "55b3412b52c2bf0e41a09c65355569122da4e9c7", "url": "https://github.com/ls1intum/Artemis/commit/55b3412b52c2bf0e41a09c65355569122da4e9c7", "message": "Update server resources to use MapsId and small bugfixes", "committedDate": "2020-05-21T15:32:13Z", "type": "commit"}, {"oid": "0f195ef99303cf837c64ee6dc95750bb0d31195a", "url": "https://github.com/ls1intum/Artemis/commit/0f195ef99303cf837c64ee6dc95750bb0d31195a", "message": "Update liquibase to new PK strategy", "committedDate": "2020-05-21T15:32:55Z", "type": "commit"}, {"oid": "9917b18f10f8be283e987d8a9c40a7bd5f5af132", "url": "https://github.com/ls1intum/Artemis/commit/9917b18f10f8be283e987d8a9c40a7bd5f5af132", "message": "Add Integration Test for RatingResource", "committedDate": "2020-05-21T15:34:50Z", "type": "commit"}, {"oid": "86dfbc0ab9521b006e3830886f127e75f759a3a3", "url": "https://github.com/ls1intum/Artemis/commit/86dfbc0ab9521b006e3830886f127e75f759a3a3", "message": "Update rating to handle Not Found Error", "committedDate": "2020-05-21T16:00:16Z", "type": "commit"}, {"oid": "2e61a799c6534c9f3f56cb4bb3d19a3acfb36ef9", "url": "https://github.com/ls1intum/Artemis/commit/2e61a799c6534c9f3f56cb4bb3d19a3acfb36ef9", "message": "Add test case for result not found", "committedDate": "2020-05-21T22:00:07Z", "type": "commit"}, {"oid": "46d4daa1f0686abddcc6331186656516c6570f65", "url": "https://github.com/ls1intum/Artemis/commit/46d4daa1f0686abddcc6331186656516c6570f65", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-05-21T23:23:56Z", "type": "commit"}, {"oid": "120d9cc80a032b93098dd8c223fb65a8a0871e75", "url": "https://github.com/ls1intum/Artemis/commit/120d9cc80a032b93098dd8c223fb65a8a0871e75", "message": "fix bug where wrong column was adressed", "committedDate": "2020-05-23T09:01:35Z", "type": "commit"}, {"oid": "c9c8b7050d9470b3a1ca54b1677df17550a21774", "url": "https://github.com/ls1intum/Artemis/commit/c9c8b7050d9470b3a1ca54b1677df17550a21774", "message": "Update Javadoc", "committedDate": "2020-05-23T09:08:11Z", "type": "commit"}, {"oid": "151a5595c04f980ce88cebe32eed94f7a759c5d5", "url": "https://github.com/ls1intum/Artemis/commit/151a5595c04f980ce88cebe32eed94f7a759c5d5", "message": "Check that only the owner of the participation can change the rating and add integration test for this case", "committedDate": "2020-05-23T10:38:42Z", "type": "commit"}, {"oid": "d807195f4708e51f14e455b516d52c13ae3c843a", "url": "https://github.com/ls1intum/Artemis/commit/d807195f4708e51f14e455b516d52c13ae3c843a", "message": "Remove creation alert", "committedDate": "2020-05-24T21:11:20Z", "type": "commit"}, {"oid": "0bd6650c8debb040deab13d391db8779d941768f", "url": "https://github.com/ls1intum/Artemis/commit/0bd6650c8debb040deab13d391db8779d941768f", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-05-25T12:28:33Z", "type": "commit"}, {"oid": "d2a4b6b1322cd1d900d7143e6239457a713c494f", "url": "https://github.com/ls1intum/Artemis/commit/d2a4b6b1322cd1d900d7143e6239457a713c494f", "message": "Move auto generated test file into proper folder", "committedDate": "2020-05-25T16:51:43Z", "type": "commit"}, {"oid": "99935f8977138fccb6d7c61d56561509fd7c45b5", "url": "https://github.com/ls1intum/Artemis/commit/99935f8977138fccb6d7c61d56561509fd7c45b5", "message": "remove auto generated client test", "committedDate": "2020-05-25T17:03:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTY2Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430045666", "bodyText": "I don\u2019t think cascade makes sense here. This would mean a result is deleted when a rating is deleted", "author": "krusche", "createdAt": "2020-05-25T18:46:41Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Rating.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.MapsId;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * A Rating.\n+ */\n+@Entity\n+@Table(name = \"result_rating\")\n+@JsonInclude(Include.NON_EMPTY)\n+public class Rating implements Serializable {\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(name = \"rating\")\n+    private Integer rating;\n+\n+    @MapsId\n+    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)", "originalCommit": "99935f8977138fccb6d7c61d56561509fd7c45b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM0NDI3MA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430344270", "bodyText": "From my understanding Cascade.ALL propagates all operations \u2014 including Hibernate-specific ones \u2014 from a parent to a child entity. In an uni-directional 1-1 mapping using \"MapsId\", the referenced table is the parent entity and the referencing one is the child entity. Therefore I would delete the rating if the result ist deleted.", "author": "JonasPetry", "createdAt": "2020-05-26T11:31:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTY2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDI5MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r431920291", "bodyText": "Nevermind, I've tested it and you are right. I removed the cascading now!", "author": "JonasPetry", "createdAt": "2020-05-28T15:20:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTg4MA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430045880", "bodyText": "Please remove transactional here", "author": "krusche", "createdAt": "2020-05-25T18:47:31Z", "path": "src/main/java/de/tum/in/www1/artemis/service/RatingService.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+\n+import javax.transaction.Transactional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+/**\n+ * Service Implementation for managing {@link de.tum.in.www1.artemis.domain.Rating}.\n+ */\n+@Service\n+public class RatingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ResultService.class);\n+\n+    private final RatingRepository ratingRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public RatingService(RatingRepository ratingRepository, ResultRepository resultRepository) {\n+        this.ratingRepository = ratingRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Return Rating that refers to Result with id resultId\n+     * @param resultId - Id of Result that the rating refers to\n+     * @return Rating if it exists else null\n+     */\n+    public Optional<Rating> findRatingByResultId(Long resultId) {\n+        return ratingRepository.findById(resultId);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     * @param rating - Rating that should be persisted\n+     * @return persisted Rating\n+     */\n+    @Transactional", "originalCommit": "99935f8977138fccb6d7c61d56561509fd7c45b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2MzE5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430063195", "bodyText": "I've tried it in a few ways but I honestly did not figure out how to do it without using transactional. I've come across the book \"Spring Boot Persistence Best Practices: Optimize Java Persistence\" which recommended the way I've implemented it now.", "author": "JonasPetry", "createdAt": "2020-05-25T20:09:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2NzgzMg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430067832", "bodyText": "The book does not matter, we have design and coding guidelines in Artemis. Please do not use transactional except you have a very good reason for it. I don\u2019t see a good reason in the cases of this PR. Make sure to fetch objects (with related objects) directly from the database to avoid additional fetches. There are plenty of examples in the repositories how to do that", "author": "krusche", "createdAt": "2020-05-25T20:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQyNjM4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r431426387", "bodyText": "I think the @Transactional is needed in this case, because the Id is not automatically set otherwise.", "author": "JonasPetry", "createdAt": "2020-05-27T20:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NTk1Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430045952", "bodyText": "Please remove transactional here", "author": "krusche", "createdAt": "2020-05-25T18:47:46Z", "path": "src/main/java/de/tum/in/www1/artemis/service/RatingService.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+\n+import javax.transaction.Transactional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+/**\n+ * Service Implementation for managing {@link de.tum.in.www1.artemis.domain.Rating}.\n+ */\n+@Service\n+public class RatingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ResultService.class);\n+\n+    private final RatingRepository ratingRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public RatingService(RatingRepository ratingRepository, ResultRepository resultRepository) {\n+        this.ratingRepository = ratingRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Return Rating that refers to Result with id resultId\n+     * @param resultId - Id of Result that the rating refers to\n+     * @return Rating if it exists else null\n+     */\n+    public Optional<Rating> findRatingByResultId(Long resultId) {\n+        return ratingRepository.findById(resultId);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     * @param rating - Rating that should be persisted\n+     * @return persisted Rating\n+     */\n+    @Transactional\n+    public Rating saveRating(Rating rating) {\n+        Result result = resultRepository.findById(rating.getResult().getId()).orElseThrow();\n+        Rating serverRating = new Rating();\n+        serverRating.setRating(rating.getRating());\n+        serverRating.setResult(result);\n+        return ratingRepository.save(serverRating);\n+    }\n+\n+    /**\n+     * Update an existing Rating\n+     * @param rating - Updated Rating that should be persisted\n+     * @return updated rating\n+     */\n+    @Transactional", "originalCommit": "99935f8977138fccb6d7c61d56561509fd7c45b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjE2Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430046163", "bodyText": "Do you really need this?", "author": "krusche", "createdAt": "2020-05-25T18:48:42Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    @Value(\"${artemis.continuous-integration.artemis-authentication-token-value}\")\n+    private String ARTEMIS_AUTHENTICATION_TOKEN_VALUE = \"\";", "originalCommit": "99935f8977138fccb6d7c61d56561509fd7c45b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjMyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430046326", "bodyText": "The URL is incorrect. I suggest /results/{resultId}/rating", "author": "krusche", "createdAt": "2020-05-25T18:49:27Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    @Value(\"${artemis.continuous-integration.artemis-authentication-token-value}\")\n+    private String ARTEMIS_AUTHENTICATION_TOKEN_VALUE = \"\";\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/rating/result/{resultId}\")", "originalCommit": "99935f8977138fccb6d7c61d56561509fd7c45b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjM3NA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430046374", "bodyText": "Wrong url", "author": "krusche", "createdAt": "2020-05-25T18:49:43Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    @Value(\"${artemis.continuous-integration.artemis-authentication-token-value}\")\n+    private String ARTEMIS_AUTHENTICATION_TOKEN_VALUE = \"\";\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/rating/result/{resultId}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param rating - Rating that should be persisted\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "originalCommit": "99935f8977138fccb6d7c61d56561509fd7c45b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA0NjQyMw==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430046423", "bodyText": "Wrong url", "author": "krusche", "createdAt": "2020-05-25T18:49:55Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.web.rest.errors.BadRequestAlertException;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    @Value(\"${jhipster.clientApp.name}\")\n+    private String applicationName;\n+\n+    @Value(\"${artemis.continuous-integration.artemis-authentication-token-value}\")\n+    private String ARTEMIS_AUTHENTICATION_TOKEN_VALUE = \"\";\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/rating/result/{resultId}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param rating - Rating that should be persisted\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@RequestBody Rating rating) throws URISyntaxException {\n+        if (rating.getId() != null) {\n+            throw new BadRequestAlertException(\"The rating must not have an ID\", ENTITY_NAME, \"idDoesExist\");\n+        }\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(rating.getResult().getId());\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(rating);\n+        return ResponseEntity.created(new URI(\"/api/rating/\" + result.getId())).body(result);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param rating - updated Rating\n+     * @return updated Rating\n+     */\n+    @PutMapping(\"/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")", "originalCommit": "99935f8977138fccb6d7c61d56561509fd7c45b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cb735d16b5588efc246be1b4809177d5175d4bbc", "url": "https://github.com/ls1intum/Artemis/commit/cb735d16b5588efc246be1b4809177d5175d4bbc", "message": "Update URls according to feedback", "committedDate": "2020-05-25T21:26:21Z", "type": "commit"}, {"oid": "6f1fc82b20b697b98d289d1c34b1ea5fc067c016", "url": "https://github.com/ls1intum/Artemis/commit/6f1fc82b20b697b98d289d1c34b1ea5fc067c016", "message": "Remove transactional from update method", "committedDate": "2020-05-25T21:31:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MTgyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430251826", "bodyText": "You're adding the slash twice, resulting in a 500.", "author": "madwau", "createdAt": "2020-05-26T08:44:35Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.service.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { Rating } from 'app/entities/rating.model';\n+import { SERVER_API_URL } from 'app/app.constants';\n+\n+@Injectable({\n+    providedIn: 'root',\n+})\n+export class RatingService {\n+    private ratingResourceUrl = SERVER_API_URL + 'api/results/';", "originalCommit": "6f1fc82b20b697b98d289d1c34b1ea5fc067c016", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "114f290e1b160b024cca9dc827af4a60e6293337", "url": "https://github.com/ls1intum/Artemis/commit/114f290e1b160b024cca9dc827af4a60e6293337", "message": "Remove double slash in URL", "committedDate": "2020-05-26T08:50:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NjkxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430256916", "bodyText": "All the urls seem inconsistent with the server endpoints. Does rating.service.ts still need to be adapted to the latest changes in RatingResource?", "author": "madwau", "createdAt": "2020-05-26T08:52:55Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.service.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { Rating } from 'app/entities/rating.model';\n+import { SERVER_API_URL } from 'app/app.constants';\n+\n+@Injectable({\n+    providedIn: 'root',\n+})\n+export class RatingService {\n+    private ratingResourceUrl = SERVER_API_URL + 'api/results/';\n+\n+    constructor(private http: HttpClient) {}\n+\n+    /**\n+     * Update the student rating for feedback on the server.\n+     * @param rating - Rating for the result\n+     */\n+    setRating(rating: Rating): Observable<Rating> {\n+        return this.http.post<Rating>(this.ratingResourceUrl + `${rating.id}/rating/${rating.rating}`, rating);\n+    }\n+\n+    /**\n+     * Get rating for \"resultId\" Result\n+     * @param resultId - Id of Result who's rating is received\n+     */\n+    getRating(resultId: number): Observable<Rating> {\n+        return this.http.get<Rating>(this.ratingResourceUrl + `${resultId}/rating`);\n+    }\n+\n+    /**\n+     * Update rating for \"resultId\" Result\n+     * @param rating - Rating for the result\n+     */\n+    updateRating(rating: Rating): Observable<Rating> {\n+        return this.http.put<Rating>(this.ratingResourceUrl + `${rating.id}/rating/${rating.rating}`, rating);", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2MTYxNg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430261616", "bodyText": "The result id needs to be passed in. ${rating.id} should be ${result.id}.", "author": "madwau", "createdAt": "2020-05-26T09:00:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NjkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2NDA1OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430264059", "bodyText": "Although I guess it's technically correct since they are the same when MapsId is used.", "author": "madwau", "createdAt": "2020-05-26T09:04:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NjkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2NTQyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430265429", "bodyText": "I think the only real issue is in setRating then. It fails since rating.id is still undefined at that point.", "author": "madwau", "createdAt": "2020-05-26T09:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1NjkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2NjYzNg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430266636", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return \"Feedback{\" + \"id=\" + getId() + \", rating='\" + getRating() + \"'\" + \", resultId='\" + getId() + \"'}\";\n          \n          \n            \n                    return \"Rating{\" + \"id=\" + getId() + \", rating='\" + getRating() + \"'}\";", "author": "madwau", "createdAt": "2020-05-26T09:08:45Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Rating.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.MapsId;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * A Rating.\n+ */\n+@Entity\n+@Table(name = \"result_rating\")\n+@JsonInclude(Include.NON_EMPTY)\n+public class Rating implements Serializable {\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(name = \"rating\")\n+    private Integer rating;\n+\n+    @MapsId\n+    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n+    @JoinColumn(name = \"id\")\n+    private Result result;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public void setId(Long id) {\n+        this.id = id;\n+    }\n+\n+    public Integer getRating() {\n+        return rating;\n+    }\n+\n+    public void setRating(Integer rating) {\n+        this.rating = rating;\n+    }\n+\n+    public Result getResult() {\n+        return result;\n+    }\n+\n+    public void setResult(Result result) {\n+        this.result = result;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hashCode(getId());\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"Feedback{\" + \"id=\" + getId() + \", rating='\" + getRating() + \"'\" + \", resultId='\" + getId() + \"'}\";", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2NzUyNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430267525", "bodyText": "Maybe better call it updatedRating?", "author": "madwau", "createdAt": "2020-05-26T09:10:13Z", "path": "src/main/java/de/tum/in/www1/artemis/service/RatingService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+\n+import javax.transaction.Transactional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+/**\n+ * Service Implementation for managing {@link de.tum.in.www1.artemis.domain.Rating}.\n+ */\n+@Service\n+public class RatingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ResultService.class);\n+\n+    private final RatingRepository ratingRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public RatingService(RatingRepository ratingRepository, ResultRepository resultRepository) {\n+        this.ratingRepository = ratingRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Return Rating that refers to Result with id resultId\n+     *\n+     * @param resultId - Id of Result that the rating refers to\n+     * @return Rating if it exists else null\n+     */\n+    public Optional<Rating> findRatingByResultId(Long resultId) {\n+        return ratingRepository.findById(resultId);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be persisted\n+     * @param ratingValue - Value of the rating that should be persisted\n+     * @return persisted Rating\n+     */\n+    @Transactional\n+    public Rating saveRating(Long resultId, Integer ratingValue) {\n+        Result result = resultRepository.findById(resultId).orElseThrow();\n+        Rating serverRating = new Rating();\n+        serverRating.setRating(ratingValue);\n+        serverRating.setResult(result);\n+        return ratingRepository.save(serverRating);\n+    }\n+\n+    /**\n+     * Update an existing Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated rating\n+     */\n+    public Rating updateRating(Long resultId, Integer ratingValue) {\n+        Rating update = this.ratingRepository.findById(resultId).orElseThrow();", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI2OTU3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430269571", "bodyText": "I think we should avoid raising a 404 simply because a result doesn't have a rating yet. I think a 404 should mostly be reserved for actual unexpected not found errors since it will also end up in Sentry and the error statistics. Having a 404 raised every time someone looks at an assessed submission without result rating would generate a lot of 404s.", "author": "madwau", "createdAt": "2020-05-26T09:13:36Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MDAwOA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430270008", "bodyText": "this. is not needed.", "author": "madwau", "createdAt": "2020-05-26T09:14:24Z", "path": "src/main/java/de/tum/in/www1/artemis/service/RatingService.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.util.Optional;\n+\n+import javax.transaction.Transactional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+\n+/**\n+ * Service Implementation for managing {@link de.tum.in.www1.artemis.domain.Rating}.\n+ */\n+@Service\n+public class RatingService {\n+\n+    private final Logger log = LoggerFactory.getLogger(ResultService.class);\n+\n+    private final RatingRepository ratingRepository;\n+\n+    private final ResultRepository resultRepository;\n+\n+    public RatingService(RatingRepository ratingRepository, ResultRepository resultRepository) {\n+        this.ratingRepository = ratingRepository;\n+        this.resultRepository = resultRepository;\n+    }\n+\n+    /**\n+     * Return Rating that refers to Result with id resultId\n+     *\n+     * @param resultId - Id of Result that the rating refers to\n+     * @return Rating if it exists else null\n+     */\n+    public Optional<Rating> findRatingByResultId(Long resultId) {\n+        return ratingRepository.findById(resultId);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be persisted\n+     * @param ratingValue - Value of the rating that should be persisted\n+     * @return persisted Rating\n+     */\n+    @Transactional\n+    public Rating saveRating(Long resultId, Integer ratingValue) {\n+        Result result = resultRepository.findById(resultId).orElseThrow();\n+        Rating serverRating = new Rating();\n+        serverRating.setRating(ratingValue);\n+        serverRating.setResult(result);\n+        return ratingRepository.save(serverRating);\n+    }\n+\n+    /**\n+     * Update an existing Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated rating\n+     */\n+    public Rating updateRating(Long resultId, Integer ratingValue) {\n+        Rating update = this.ratingRepository.findById(resultId).orElseThrow();", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MDEwNg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430270106", "bodyText": "this. is not needed.", "author": "madwau", "createdAt": "2020-05-26T09:14:33Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MjI0Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430272242", "bodyText": "this. is not needed.", "author": "madwau", "createdAt": "2020-05-26T09:17:59Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Mjk2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430272964", "bodyText": "The name result is pretty confusing here since it's actually a Rating and not a Result. Better call it rating or savedRating.", "author": "madwau", "createdAt": "2020-05-26T09:19:15Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzM2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430273364", "bodyText": "Can be confusing for other developers since it assumes knowledge of the shared primary key.", "author": "madwau", "createdAt": "2020-05-26T09:19:57Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzQ4Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430273482", "bodyText": "Can be confusing for other developers since it assumes knowledge of the shared primary key.", "author": "madwau", "createdAt": "2020-05-26T09:20:07Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);\n+        return ResponseEntity.created(new URI(\"/api/results/\" + result.getId() + \"/rating\")).body(result);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzczMg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430273732", "bodyText": "this. is not needed.", "author": "madwau", "createdAt": "2020-05-26T09:20:32Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or 404 Not Found\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or 404 Not Found\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = this.ratingService.findRatingByResultId(resultId);\n+        if (rating.isEmpty()) {\n+            throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"Rating does not exist!\");\n+        }\n+        return ResponseEntity.ok(rating.get());\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.saveRating(resultId, ratingValue);\n+        return ResponseEntity.created(new URI(\"/api/results/\" + result.getId() + \"/rating\")).body(result);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param resultId    - Id of the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated Rating\n+     */\n+    @PutMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> updateRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);\n+        StudentParticipation participation = participationService.findOneStudentParticipation(res.getParticipation().getId());\n+        if (!authCheckService.isOwnerOfParticipation(participation, user)) {\n+            return forbidden();\n+        }\n+\n+        Rating result = this.ratingService.updateRating(resultId, ratingValue);", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Mzk0Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430273946", "bodyText": "The name result is pretty confusing here since it's actually a Rating and not a Result. Better call it rating or updatedRating.", "author": "madwau", "createdAt": "2020-05-26T09:20:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3MzczMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NzA2NA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430277064", "bodyText": "Constructor should be at the top.", "author": "madwau", "createdAt": "2020-05-26T09:26:04Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Component, Input } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    providers: [RatingService],\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent {\n+    // public ratingValue = 2;\n+    public rating: Rating;\n+    private _result: Result;\n+\n+    /**\n+     * Result Input of the result that the rating is for\n+     * @param result\n+     */\n+    @Input()\n+    public set result(result: Result) {\n+        if (!result || !result.submission) {\n+            return;\n+        }\n+        this._result = result;\n+        this.ratingService.getRating(result.id).subscribe(\n+            (rating) => {\n+                this.rating = rating;\n+            },\n+            () => {\n+                this.rating = new Rating(result, 0);\n+            },\n+        );\n+    }\n+\n+    constructor(public ratingService: RatingService) {}", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3Nzg1MA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430277850", "bodyText": "I don't think we use this syntax of prefixing private attributes with an underscore at the moment.", "author": "madwau", "createdAt": "2020-05-26T09:27:20Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Component, Input } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    providers: [RatingService],\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent {\n+    // public ratingValue = 2;\n+    public rating: Rating;\n+    private _result: Result;", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3ODEyNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430278125", "bodyText": "Can this be removed?", "author": "madwau", "createdAt": "2020-05-26T09:27:44Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Component, Input } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    providers: [RatingService],\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent {\n+    // public ratingValue = 2;", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3OTIzMw==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430279233", "bodyText": "I think the word update should be avoided here since it could be misinterpreted as: The rating already exists and we want to update it (even though this is not the case here, it is being created).", "author": "madwau", "createdAt": "2020-05-26T09:29:31Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.service.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { Rating } from 'app/entities/rating.model';\n+import { SERVER_API_URL } from 'app/app.constants';\n+\n+@Injectable({\n+    providedIn: 'root',\n+})\n+export class RatingService {\n+    private ratingResourceUrl = SERVER_API_URL + 'api/results/';\n+\n+    constructor(private http: HttpClient) {}\n+\n+    /**\n+     * Update the student rating for feedback on the server.", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3OTQ1MA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430279450", "bodyText": "I think createRating might be better to avoid confusion with updateRating.", "author": "madwau", "createdAt": "2020-05-26T09:29:54Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.service.ts", "diffHunk": "@@ -0,0 +1,38 @@\n+import { Injectable } from '@angular/core';\n+import { HttpClient } from '@angular/common/http';\n+import { Observable } from 'rxjs/Observable';\n+import { Rating } from 'app/entities/rating.model';\n+import { SERVER_API_URL } from 'app/app.constants';\n+\n+@Injectable({\n+    providedIn: 'root',\n+})\n+export class RatingService {\n+    private ratingResourceUrl = SERVER_API_URL + 'api/results/';\n+\n+    constructor(private http: HttpClient) {}\n+\n+    /**\n+     * Update the student rating for feedback on the server.\n+     * @param rating - Rating for the result\n+     */\n+    setRating(rating: Rating): Observable<Rating> {", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MTAzOA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430281038", "bodyText": "Is this construction needed compared to a normal @Input declaration and loading the result in ngOnInit?", "author": "madwau", "createdAt": "2020-05-26T09:32:35Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,59 @@\n+import { Component, Input } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    providers: [RatingService],\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent {\n+    // public ratingValue = 2;\n+    public rating: Rating;\n+    private _result: Result;\n+\n+    /**\n+     * Result Input of the result that the rating is for\n+     * @param result\n+     */\n+    @Input()\n+    public set result(result: Result) {", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MTgxNA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430281814", "bodyText": "It would be good to add some assertions on the saved entity, e.g. that it belongs to the correct result and that the rating value is correct.", "author": "madwau", "createdAt": "2020-05-26T09:33:53Z", "path": "src/test/java/de/tum/in/www1/artemis/RatingResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.tum.in.www1.artemis;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.TextExercise;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.domain.participation.Participation;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class RatingResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    UserService userService;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    RatingService ratingService;\n+\n+    @Autowired\n+    RatingRepository ratingRepo;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepo;\n+\n+    private TextExercise exercise;\n+\n+    private List<User> users;\n+\n+    private TextSubmission submission;\n+\n+    private Result result;\n+\n+    private Rating rating;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        users = database.addUsers(2, 1, 1);\n+        database.addCourseWithOneTextExercise();\n+        exercise = (TextExercise) exerciseRepo.findAll().get(0);\n+        User student1 = users.get(0);\n+        Participation participation = database.addParticipationForExercise(exercise, student1.getLogin());\n+\n+        submission = ModelFactory.generateTextSubmission(\"example text\", Language.ENGLISH, true);\n+        submission = database.addTextSubmission(exercise, submission, student1.getLogin());\n+\n+        result = ModelFactory.generateResult(true, 0);\n+        result = database.addResultToSubmission(submission);\n+\n+        rating = new Rating();\n+        rating.setResult(result);\n+        rating.setRating(2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        ratingRepo.deleteAll();\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testCreateRating_asUser() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.CREATED);", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MzExMw==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430283113", "bodyText": "The name result is confusing in this context. Should be changed to rating or savedRating. Then the this. is also not needed anymore.", "author": "madwau", "createdAt": "2020-05-26T09:35:57Z", "path": "src/test/java/de/tum/in/www1/artemis/RatingResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.tum.in.www1.artemis;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.TextExercise;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.domain.participation.Participation;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class RatingResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    UserService userService;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    RatingService ratingService;\n+\n+    @Autowired\n+    RatingRepository ratingRepo;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepo;\n+\n+    private TextExercise exercise;\n+\n+    private List<User> users;\n+\n+    private TextSubmission submission;\n+\n+    private Result result;\n+\n+    private Rating rating;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        users = database.addUsers(2, 1, 1);\n+        database.addCourseWithOneTextExercise();\n+        exercise = (TextExercise) exerciseRepo.findAll().get(0);\n+        User student1 = users.get(0);\n+        Participation participation = database.addParticipationForExercise(exercise, student1.getLogin());\n+\n+        submission = ModelFactory.generateTextSubmission(\"example text\", Language.ENGLISH, true);\n+        submission = database.addTextSubmission(exercise, submission, student1.getLogin());\n+\n+        result = ModelFactory.generateResult(true, 0);\n+        result = database.addResultToSubmission(submission);\n+\n+        rating = new Rating();\n+        rating.setResult(result);\n+        rating.setRating(2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        ratingRepo.deleteAll();\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testCreateRating_asUser() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.CREATED);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testCreateRating_asTutor_FORBIDDEN() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.OK, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser_NOT_FOUND() throws Exception {\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.NOT_FOUND, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testUpdateRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4MzgzNw==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430283837", "bodyText": "Assertions are missing. Also, what is being tested here? Wouldn't it be better if an actual change to the rating value was tested and verified?", "author": "madwau", "createdAt": "2020-05-26T09:37:12Z", "path": "src/test/java/de/tum/in/www1/artemis/RatingResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.tum.in.www1.artemis;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.TextExercise;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.domain.participation.Participation;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class RatingResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    UserService userService;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    RatingService ratingService;\n+\n+    @Autowired\n+    RatingRepository ratingRepo;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepo;\n+\n+    private TextExercise exercise;\n+\n+    private List<User> users;\n+\n+    private TextSubmission submission;\n+\n+    private Result result;\n+\n+    private Rating rating;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        users = database.addUsers(2, 1, 1);\n+        database.addCourseWithOneTextExercise();\n+        exercise = (TextExercise) exerciseRepo.findAll().get(0);\n+        User student1 = users.get(0);\n+        Participation participation = database.addParticipationForExercise(exercise, student1.getLogin());\n+\n+        submission = ModelFactory.generateTextSubmission(\"example text\", Language.ENGLISH, true);\n+        submission = database.addTextSubmission(exercise, submission, student1.getLogin());\n+\n+        result = ModelFactory.generateResult(true, 0);\n+        result = database.addResultToSubmission(submission);\n+\n+        rating = new Rating();\n+        rating.setResult(result);\n+        rating.setRating(2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        ratingRepo.deleteAll();\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testCreateRating_asUser() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.CREATED);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testCreateRating_asTutor_FORBIDDEN() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.OK, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser_NOT_FOUND() throws Exception {\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.NOT_FOUND, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testUpdateRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.put(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.OK);", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI4Mzk2OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430283969", "bodyText": "See above.", "author": "madwau", "createdAt": "2020-05-26T09:37:25Z", "path": "src/test/java/de/tum/in/www1/artemis/RatingResourceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.tum.in.www1.artemis;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.test.context.support.WithMockUser;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.TextExercise;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.domain.participation.Participation;\n+import de.tum.in.www1.artemis.repository.CourseRepository;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.repository.RatingRepository;\n+import de.tum.in.www1.artemis.repository.ResultRepository;\n+import de.tum.in.www1.artemis.repository.SubmissionRepository;\n+import de.tum.in.www1.artemis.repository.UserRepository;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.UserService;\n+import de.tum.in.www1.artemis.util.DatabaseUtilService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.util.RequestUtilService;\n+\n+public class RatingResourceIntegrationTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    CourseRepository courseRepository;\n+\n+    @Autowired\n+    ExerciseRepository exerciseRepo;\n+\n+    @Autowired\n+    ResultRepository resultRepo;\n+\n+    @Autowired\n+    UserService userService;\n+\n+    @Autowired\n+    DatabaseUtilService database;\n+\n+    @Autowired\n+    RequestUtilService request;\n+\n+    @Autowired\n+    UserRepository userRepository;\n+\n+    @Autowired\n+    RatingService ratingService;\n+\n+    @Autowired\n+    RatingRepository ratingRepo;\n+\n+    @Autowired\n+    SubmissionRepository submissionRepo;\n+\n+    private TextExercise exercise;\n+\n+    private List<User> users;\n+\n+    private TextSubmission submission;\n+\n+    private Result result;\n+\n+    private Rating rating;\n+\n+    @BeforeEach\n+    public void initTestCase() {\n+        users = database.addUsers(2, 1, 1);\n+        database.addCourseWithOneTextExercise();\n+        exercise = (TextExercise) exerciseRepo.findAll().get(0);\n+        User student1 = users.get(0);\n+        Participation participation = database.addParticipationForExercise(exercise, student1.getLogin());\n+\n+        submission = ModelFactory.generateTextSubmission(\"example text\", Language.ENGLISH, true);\n+        submission = database.addTextSubmission(exercise, submission, student1.getLogin());\n+\n+        result = ModelFactory.generateResult(true, 0);\n+        result = database.addResultToSubmission(submission);\n+\n+        rating = new Rating();\n+        rating.setResult(result);\n+        rating.setRating(2);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        ratingRepo.deleteAll();\n+        database.resetDatabase();\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testCreateRating_asUser() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.CREATED);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testCreateRating_asTutor_FORBIDDEN() throws Exception {\n+        request.post(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.FORBIDDEN);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.OK, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testGetRating_asUser_NOT_FOUND() throws Exception {\n+        request.get(\"/api/results/\" + result.getId() + \"/rating\", HttpStatus.NOT_FOUND, Rating.class);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"student1\", roles = \"USER\")\n+    public void testUpdateRating_asUser() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());\n+        request.put(\"/api/results/\" + result.getId() + \"/rating/\" + rating.getRating(), null, HttpStatus.OK);\n+    }\n+\n+    @Test\n+    @WithMockUser(value = \"tutor1\", roles = \"TA\")\n+    public void testUpdateRating_asTutor_FORBIDDEN() throws Exception {\n+        Rating result = ratingService.saveRating(this.result.getId(), rating.getRating());", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI5MzUzNg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r430293536", "bodyText": "Depending on the usage a @JsonIgnore could be added since right now the whole result is always serialized when a rating is returned by the server although it's not actually needed for the current use case as far as I can see.", "author": "madwau", "createdAt": "2020-05-26T09:53:46Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Rating.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.MapsId;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * A Rating.\n+ */\n+@Entity\n+@Table(name = \"result_rating\")\n+@JsonInclude(Include.NON_EMPTY)\n+public class Rating implements Serializable {\n+\n+    @Id\n+    private Long id;\n+\n+    @Column(name = \"rating\")\n+    private Integer rating;\n+\n+    @MapsId\n+    @OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)\n+    @JoinColumn(name = \"id\")\n+    private Result result;", "originalCommit": "114f290e1b160b024cca9dc827af4a60e6293337", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa1e6371fec77e2425e1eb1ac6444f7dd36ba1bd", "url": "https://github.com/ls1intum/Artemis/commit/fa1e6371fec77e2425e1eb1ac6444f7dd36ba1bd", "message": "Update src/main/java/de/tum/in/www1/artemis/domain/Rating.java\n\nCo-authored-by: Martin Wauligmann <martin@wauligmann.com>", "committedDate": "2020-05-26T10:16:51Z", "type": "commit"}, {"oid": "5f01ea379f5aa041be5798d2e960672427b22d17", "url": "https://github.com/ls1intum/Artemis/commit/5f01ea379f5aa041be5798d2e960672427b22d17", "message": "Implement first part of Martins feedback", "committedDate": "2020-05-26T10:49:50Z", "type": "commit"}, {"oid": "d59207d84166153103dba14e8fc171c88b7fd53c", "url": "https://github.com/ls1intum/Artemis/commit/d59207d84166153103dba14e8fc171c88b7fd53c", "message": "Change Input structure of rating.component.ts", "committedDate": "2020-05-26T11:11:00Z", "type": "commit"}, {"oid": "e5950ec2fd60f37d782d3e7ff4e5c115477244c6", "url": "https://github.com/ls1intum/Artemis/commit/e5950ec2fd60f37d782d3e7ff4e5c115477244c6", "message": "Remove unnecessary this. in RatingResource.java", "committedDate": "2020-05-26T11:11:54Z", "type": "commit"}, {"oid": "bd96d3946d4ffa884393d4b1cfce566852c51a5a", "url": "https://github.com/ls1intum/Artemis/commit/bd96d3946d4ffa884393d4b1cfce566852c51a5a", "message": "Adjust RatingResource to send null if there is no rating yet instead of 404 NOT FOUND", "committedDate": "2020-05-26T11:28:19Z", "type": "commit"}, {"oid": "392fb4975bbff4da24bb6fc35dcab53e2ecbc441", "url": "https://github.com/ls1intum/Artemis/commit/392fb4975bbff4da24bb6fc35dcab53e2ecbc441", "message": "Add more assertions to RatingResourceIntegrationTest", "committedDate": "2020-05-26T14:15:00Z", "type": "commit"}, {"oid": "632cc3ac2002668ba1bca2e82a2d88bfb11dad17", "url": "https://github.com/ls1intum/Artemis/commit/632cc3ac2002668ba1bca2e82a2d88bfb11dad17", "message": "Fix documentation", "committedDate": "2020-05-26T15:37:59Z", "type": "commit"}, {"oid": "3f6bc11a73fbe7fc84fee0e05953ef50f9345ed2", "url": "https://github.com/ls1intum/Artemis/commit/3f6bc11a73fbe7fc84fee0e05953ef50f9345ed2", "message": "Add JsonIgnore to Rating.java", "committedDate": "2020-05-27T20:41:15Z", "type": "commit"}, {"oid": "497dfb695e3b1a1bfeee5385189eecd69a3fa699", "url": "https://github.com/ls1intum/Artemis/commit/497dfb695e3b1a1bfeee5385189eecd69a3fa699", "message": "Add client tests", "committedDate": "2020-05-27T20:42:39Z", "type": "commit"}, {"oid": "5d6ce8944c1ca49972acec72e38128c0a70b2107", "url": "https://github.com/ls1intum/Artemis/commit/5d6ce8944c1ca49972acec72e38128c0a70b2107", "message": "Extend createRating Javadoc regarding Transactional", "committedDate": "2020-05-28T13:59:35Z", "type": "commit"}, {"oid": "80eaa3ea935298732ba2d25147088d31646e0c79", "url": "https://github.com/ls1intum/Artemis/commit/80eaa3ea935298732ba2d25147088d31646e0c79", "message": "Remove Cascading from Rating.java and remove unused body in update route", "committedDate": "2020-05-28T15:25:46Z", "type": "commit"}, {"oid": "9905dbbddf7842535a84f7f1151c6f47de655d41", "url": "https://github.com/ls1intum/Artemis/commit/9905dbbddf7842535a84f7f1151c6f47de655d41", "message": "Remove MapsId and Transactional", "committedDate": "2020-06-01T11:32:04Z", "type": "commit"}, {"oid": "5af8e704f3d8fd9f6aa6c7e2f165b79dd73790b1", "url": "https://github.com/ls1intum/Artemis/commit/5af8e704f3d8fd9f6aa6c7e2f165b79dd73790b1", "message": "Improve clients tests for rating.component to achieve 100% test coverage", "committedDate": "2020-06-01T12:09:20Z", "type": "commit"}, {"oid": "f520fba8d409db5f04a4c91f3460372e5b65909e", "url": "https://github.com/ls1intum/Artemis/commit/f520fba8d409db5f04a4c91f3460372e5b65909e", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-01T14:56:27Z", "type": "commit"}, {"oid": "0757b66b965cab93c8e8380c6a387c9dcaa5ade0", "url": "https://github.com/ls1intum/Artemis/commit/0757b66b965cab93c8e8380c6a387c9dcaa5ade0", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-01T17:14:57Z", "type": "commit"}, {"oid": "3a5f78141be0f20cab0ed2a4be12ba01802292e8", "url": "https://github.com/ls1intum/Artemis/commit/3a5f78141be0f20cab0ed2a4be12ba01802292e8", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-01T21:05:57Z", "type": "commit"}, {"oid": "2e807f993bfe03303c30fb44d94ae27afe0eb9a5", "url": "https://github.com/ls1intum/Artemis/commit/2e807f993bfe03303c30fb44d94ae27afe0eb9a5", "message": "Introduce seperate Id for Rating", "committedDate": "2020-06-01T22:11:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY1NTE4OA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433655188", "bodyText": "Can you remove the unnecessary parentheses here?", "author": "sascha11110", "createdAt": "2020-06-02T06:47:56Z", "path": "src/main/java/de/tum/in/www1/artemis/domain/Rating.java", "diffHunk": "@@ -0,0 +1,70 @@\n+package de.tum.in.www1.artemis.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+\n+/**\n+ * A Rating.\n+ */\n+@Entity\n+@Table(name = \"result_rating\")\n+@JsonInclude(Include.NON_EMPTY)\n+public class Rating implements Serializable {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(name = \"rating\")\n+    private Integer rating;\n+\n+    @OneToOne()", "originalCommit": "2e807f993bfe03303c30fb44d94ae27afe0eb9a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4MDYwNA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433680604", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-02T07:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY1NTE4OA=="}], "type": "inlineReview"}, {"oid": "dbf5054533dc471c1d4c35ee3420469f9d61c648", "url": "https://github.com/ls1intum/Artemis/commit/dbf5054533dc471c1d4c35ee3420469f9d61c648", "message": "Remove unnecessary parentheses in Rating.java", "committedDate": "2020-06-02T07:39:35Z", "type": "commit"}, {"oid": "8d9f726c7c71db18b737d41487fa1a3afc0ad0aa", "url": "https://github.com/ls1intum/Artemis/commit/8d9f726c7c71db18b737d41487fa1a3afc0ad0aa", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-02T07:55:31Z", "type": "commit"}, {"oid": "5e38bab8ef2f9a663cff5c4b0698b1fd3a592817", "url": "https://github.com/ls1intum/Artemis/commit/5e38bab8ef2f9a663cff5c4b0698b1fd3a592817", "message": "Handle bug where the initial creation of a rating takes longer such that double post requests are possible", "committedDate": "2020-06-02T10:28:10Z", "type": "commit"}, {"oid": "068a8877820e6420c90a581358490d4a898fbed1", "url": "https://github.com/ls1intum/Artemis/commit/068a8877820e6420c90a581358490d4a898fbed1", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-02T10:45:26Z", "type": "commit"}, {"oid": "44f5b034955b5cf45da6718898f1915b05209152", "url": "https://github.com/ls1intum/Artemis/commit/44f5b034955b5cf45da6718898f1915b05209152", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-02T10:51:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc4ODkwMA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433788900", "bodyText": "This means, everyone could access every rating in all courses, not a good solution.\nI think we should only allow this to users for results for their own participations.\nTAs and instructors can see all ratings in the course in which they are TAs / instructors.\nAdmins can see all ratings", "author": "krusche", "createdAt": "2020-06-02T10:54:00Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or null\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or null\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Optional<Rating>> getRatingForResult(@PathVariable Long resultId) {\n+        Optional<Rating> rating = ratingService.findRatingByResultId(resultId);", "originalCommit": "44f5b034955b5cf45da6718898f1915b05209152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyNzgxMg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433927812", "bodyText": "I've discussed this with @jpbernius and for now we will only allow the student who rated the result to see the rating.\nYour suggested changes would follow at a later point. Is that ok for you?", "author": "JonasPetry", "createdAt": "2020-06-02T14:38:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc4ODkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzMjkwMA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433932900", "bodyText": "That would be ok. It's just important to have access control here. You can easily integrate admins as well, I think this would be good! Please leave a TODO for tutors and instructors", "author": "krusche", "createdAt": "2020-06-02T14:45:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc4ODkwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0NTk1NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433945955", "bodyText": "Admins are now allowed as well and a TODO for instructors is added!", "author": "JonasPetry", "createdAt": "2020-06-02T15:02:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc4ODkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5MTE5NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433791195", "bodyText": "this means we have one additional REST call, when navigating into the page that shows the rating / allows the user to interact with it.\nCan you please do the following:\n\nOnly load the rating if it is not yet available (in the passed result) --> You might need to add rating as reference to result then\nCheck if you can load the rating together with the result. (using the fetch mechanism in the repository)", "author": "krusche", "createdAt": "2020-06-02T10:58:34Z", "path": "src/main/webapp/app/exercises/shared/rating/rating.component.ts", "diffHunk": "@@ -0,0 +1,58 @@\n+import { Component, Input, OnInit } from '@angular/core';\n+import { RatingService } from 'app/exercises/shared/rating/rating.service';\n+import { StarRatingComponent } from 'ng-starrating';\n+import { Result } from 'app/entities/result.model';\n+import { Rating } from 'app/entities/rating.model';\n+\n+@Component({\n+    selector: 'jhi-rating',\n+    templateUrl: './rating.component.html',\n+    styleUrls: ['./rating.component.scss'],\n+})\n+export class RatingComponent implements OnInit {\n+    public rating: Rating;\n+    public disableRating = false;\n+    @Input() result: Result;\n+\n+    constructor(public ratingService: RatingService) {}\n+\n+    ngOnInit(): void {\n+        if (!this.result || !this.result.submission) {\n+            return;\n+        }\n+        this.ratingService.getRating(this.result.id).subscribe((rating) => {", "originalCommit": "44f5b034955b5cf45da6718898f1915b05209152", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgxMDQyMQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433810421", "bodyText": "We use the same approach for complaints.\nFor those, we also do an extra network call to see if they are present.\nI think we need to do it that way if we want to keep our design goal of this being independent and integratable by a single line.\nRight now the Result does not know about ratings.\nIf we change this, we would need to update the Resources we well to include this for other exercise types.", "author": "jpbernius", "createdAt": "2020-06-02T11:37:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5MTE5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgyMDUzMg==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433820532", "bodyText": "That's exactly my concern, we then have 3 request: result, complaint and rating.\nWe can keep this for now, but I would like to have 1 request here in the future", "author": "krusche", "createdAt": "2020-06-02T11:57:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc5MTE5NQ=="}], "type": "inlineReview"}, {"oid": "bfa7e0399f7c65f8f635aa52c2571317078b6970", "url": "https://github.com/ls1intum/Artemis/commit/bfa7e0399f7c65f8f635aa52c2571317078b6970", "message": "Add user verification to get-request and encapsulate it in extra method", "committedDate": "2020-06-02T14:34:41Z", "type": "commit"}, {"oid": "0bef00727d40b04311277ae21ce36ee92e621fce", "url": "https://github.com/ls1intum/Artemis/commit/0bef00727d40b04311277ae21ce36ee92e621fce", "message": "Add check isOwnerOfParticipation to account.service.ts", "committedDate": "2020-06-02T14:34:41Z", "type": "commit"}, {"oid": "c8752e953e68ce18322b8ee5106ffc26330d0dbe", "url": "https://github.com/ls1intum/Artemis/commit/c8752e953e68ce18322b8ee5106ffc26330d0dbe", "message": "Add loaded participation to its result", "committedDate": "2020-06-02T14:34:42Z", "type": "commit"}, {"oid": "4eec8d7326f930b0a8732aebb9ec297915ec092a", "url": "https://github.com/ls1intum/Artemis/commit/4eec8d7326f930b0a8732aebb9ec297915ec092a", "message": "Implement client-side check that the user is the owner of the participation to prevent 403 Forbidden", "committedDate": "2020-06-02T14:34:42Z", "type": "commit"}, {"oid": "66694d42253bf1ee5b1e640580ee061864ac2f4f", "url": "https://github.com/ls1intum/Artemis/commit/66694d42253bf1ee5b1e640580ee061864ac2f4f", "message": "Adjust client tests to handle user verification", "committedDate": "2020-06-02T14:34:42Z", "type": "commit"}, {"oid": "ccbf7fa005c46f8608a88910c15ee597584d5c3e", "url": "https://github.com/ls1intum/Artemis/commit/ccbf7fa005c46f8608a88910c15ee597584d5c3e", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-02T14:38:31Z", "type": "commit"}, {"oid": "d02d93b55309e94d70408019d8ad7e72e34ca639", "url": "https://github.com/ls1intum/Artemis/commit/d02d93b55309e94d70408019d8ad7e72e34ca639", "message": "Allow Admins to view Ratings", "committedDate": "2020-06-02T14:54:31Z", "type": "commit"}, {"oid": "20b80adf98863b1dba76ea148ef158f4656028b0", "url": "https://github.com/ls1intum/Artemis/commit/20b80adf98863b1dba76ea148ef158f4656028b0", "message": "Insert TODO to allow Instructors to view ratings", "committedDate": "2020-06-02T14:59:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NzU2MA==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433957560", "bodyText": "can you reduce this to one database access to find the participation directly?", "author": "krusche", "createdAt": "2020-06-02T15:18:50Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/RatingResource.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static de.tum.in.www1.artemis.web.rest.util.ResponseUtil.forbidden;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import de.tum.in.www1.artemis.domain.Rating;\n+import de.tum.in.www1.artemis.domain.Result;\n+import de.tum.in.www1.artemis.domain.User;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.service.AuthorizationCheckService;\n+import de.tum.in.www1.artemis.service.ParticipationService;\n+import de.tum.in.www1.artemis.service.RatingService;\n+import de.tum.in.www1.artemis.service.ResultService;\n+import de.tum.in.www1.artemis.service.UserService;\n+\n+/**\n+ * REST controller for managing Rating.\n+ */\n+@RestController\n+@RequestMapping(\"/api\")\n+public class RatingResource {\n+\n+    private static final String ENTITY_NAME = \"rating\";\n+\n+    private final Logger log = LoggerFactory.getLogger(RatingResource.class);\n+\n+    private final RatingService ratingService;\n+\n+    private final UserService userService;\n+\n+    private final AuthorizationCheckService authCheckService;\n+\n+    private final ResultService resultService;\n+\n+    private final ParticipationService participationService;\n+\n+    public RatingResource(RatingService ratingService, UserService userService, AuthorizationCheckService authCheckService, ResultService resultService,\n+            ParticipationService participationService) {\n+        this.ratingService = ratingService;\n+        this.userService = userService;\n+        this.authCheckService = authCheckService;\n+        this.resultService = resultService;\n+        this.participationService = participationService;\n+    }\n+\n+    /**\n+     * Return Rating referencing resultId or null\n+     *\n+     * @param resultId - Id of result that is referenced with the rating\n+     * @return Rating or null\n+     */\n+    @GetMapping(\"/results/{resultId}/rating\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Optional<Rating>> getRatingForResult(@PathVariable Long resultId) {\n+        // TODO allow for Instructors\n+        if (!checkIfUserIsOwnerOfSubmission(resultId) && !authCheckService.isAdmin()) {\n+            return forbidden();\n+        }\n+        Optional<Rating> rating = ratingService.findRatingByResultId(resultId);\n+        return ResponseEntity.ok(rating);\n+    }\n+\n+    /**\n+     * Persist a new Rating\n+     *\n+     * @param resultId    - Id of result that is referenced with the rating that should be persisted\n+     * @param ratingValue - Value of the updated rating\n+     * @return inserted Rating\n+     * @throws URISyntaxException if the Location URI syntax is incorrect\n+     */\n+    @PostMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> createRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) throws URISyntaxException {\n+        if (!checkIfUserIsOwnerOfSubmission(resultId)) {\n+            return forbidden();\n+        }\n+\n+        Rating savedRating = ratingService.saveRating(resultId, ratingValue);\n+        return ResponseEntity.created(new URI(\"/api/results/\" + savedRating.getId() + \"/rating\")).body(savedRating);\n+    }\n+\n+    /**\n+     * Update a Rating\n+     *\n+     * @param resultId    - Id of result that is referenced with the rating that should be updated\n+     * @param ratingValue - Value of the updated rating\n+     * @return updated Rating\n+     */\n+    @PutMapping(\"/results/{resultId}/rating/{ratingValue}\")\n+    @PreAuthorize(\"hasAnyRole('USER', 'TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Rating> updateRatingForResult(@PathVariable Long resultId, @PathVariable Integer ratingValue) {\n+        if (!checkIfUserIsOwnerOfSubmission(resultId)) {\n+            return forbidden();\n+        }\n+\n+        Rating savedRating = ratingService.updateRating(resultId, ratingValue);\n+        return ResponseEntity.ok(savedRating);\n+    }\n+\n+    /**\n+     * Check if currently logged in user in the owner of the participation\n+     *\n+     * @param resultId - Id of the result that the participation belongs to\n+     * @return False if User is not Owner, True otherwise\n+     */\n+    private boolean checkIfUserIsOwnerOfSubmission(Long resultId) {\n+        User user = userService.getUser();\n+        Result res = resultService.findOne(resultId);", "originalCommit": "20b80adf98863b1dba76ea148ef158f4656028b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk5Nzg0MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1451#discussion_r433997841", "bodyText": "Done", "author": "JonasPetry", "createdAt": "2020-06-02T16:05:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NzU2MA=="}], "type": "inlineReview"}, {"oid": "0c78754a722fa69b9d870392900b2d8b8af33fde", "url": "https://github.com/ls1intum/Artemis/commit/0c78754a722fa69b9d870392900b2d8b8af33fde", "message": "Remove unnecessary database call in RatingResource.java", "committedDate": "2020-06-02T16:05:30Z", "type": "commit"}, {"oid": "09b41f7ef5a1390f37a4a6732808dafc0a8a04f6", "url": "https://github.com/ls1intum/Artemis/commit/09b41f7ef5a1390f37a4a6732808dafc0a8a04f6", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-02T16:06:13Z", "type": "commit"}, {"oid": "4e73293a79ced381e0c7ea7bbbb15f5525e92551", "url": "https://github.com/ls1intum/Artemis/commit/4e73293a79ced381e0c7ea7bbbb15f5525e92551", "message": "Fix master.xml", "committedDate": "2020-06-02T16:42:04Z", "type": "commit"}, {"oid": "931bc43cb6a97f1408510a123f94c63b3bc7c04e", "url": "https://github.com/ls1intum/Artemis/commit/931bc43cb6a97f1408510a123f94c63b3bc7c04e", "message": "Fix circular dependency in rating.component.ts", "committedDate": "2020-06-02T18:58:58Z", "type": "commit"}, {"oid": "c450c8110ebf4f1416a87e74dcfa0952f1a1bae1", "url": "https://github.com/ls1intum/Artemis/commit/c450c8110ebf4f1416a87e74dcfa0952f1a1bae1", "message": "Merge branch 'develop' into feature/#1369-add-rating-to-text-exercise", "committedDate": "2020-06-02T18:59:48Z", "type": "commit"}]}