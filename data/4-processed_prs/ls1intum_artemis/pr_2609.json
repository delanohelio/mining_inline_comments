{"pr_number": 2609, "pr_title": "Chore/apollon diagram tests", "pr_createdAt": "2020-12-28T23:53:14Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2609", "timeline": [{"oid": "c440d94d0838a03b9833eaaeb4ce60d7c1fd22a9", "url": "https://github.com/ls1intum/Artemis/commit/c440d94d0838a03b9833eaaeb4ce60d7c1fd22a9", "message": "add collectCoverageFrom option to collect tests from all files within webapp. Before that only the test coverage from files with existing tests was measured", "committedDate": "2020-12-20T18:47:26Z", "type": "commit"}, {"oid": "91f964ee0d9bc39186e1c36ccb11bc877aca99ba", "url": "https://github.com/ls1intum/Artemis/commit/91f964ee0d9bc39186e1c36ccb11bc877aca99ba", "message": "merge", "committedDate": "2020-12-28T19:58:42Z", "type": "commit"}, {"oid": "44f82443f8896c8135668486fa8b1f902aa53155", "url": "https://github.com/ls1intum/Artemis/commit/44f82443f8896c8135668486fa8b1f902aa53155", "message": "test generation of Apollon DragAndDropQuizzes for ClassDiagrams", "committedDate": "2020-12-28T22:55:18Z", "type": "commit"}, {"oid": "1a9aa2859e19aec8bb6fe0ad7de5676e1b199445", "url": "https://github.com/ls1intum/Artemis/commit/1a9aa2859e19aec8bb6fe0ad7de5676e1b199445", "message": "apollon diagram DnD exercise creation tests", "committedDate": "2020-12-28T23:51:19Z", "type": "commit"}, {"oid": "0f128a91151643d3ebb56fb452c0bcf7f41c827a", "url": "https://github.com/ls1intum/Artemis/commit/0f128a91151643d3ebb56fb452c0bcf7f41c827a", "message": "add more apollon diagram tests", "committedDate": "2021-01-01T16:20:12Z", "type": "commit"}, {"oid": "c350ed362d91af52e4b72435993b575d323cae6d", "url": "https://github.com/ls1intum/Artemis/commit/c350ed362d91af52e4b72435993b575d323cae6d", "message": "Merge branch 'develop' into chore/apollon-diagram-tests", "committedDate": "2021-01-01T16:40:49Z", "type": "commit"}, {"oid": "fabaea4ea0464321c4cc43df33d03cf86809181d", "url": "https://github.com/ls1intum/Artemis/commit/fabaea4ea0464321c4cc43df33d03cf86809181d", "message": "revert changes, did not read comment on failure prevention with large files", "committedDate": "2021-01-01T16:44:31Z", "type": "commit"}, {"oid": "8a129dd17f79db22d020f70fc5cd65c90cd1e1eb", "url": "https://github.com/ls1intum/Artemis/commit/8a129dd17f79db22d020f70fc5cd65c90cd1e1eb", "message": "rename directory to match production code structure\nadded tests", "committedDate": "2021-01-03T12:05:34Z", "type": "commit"}, {"oid": "d6fa2f6fe68be53ad373ca7c8b44eec7f7485a3e", "url": "https://github.com/ls1intum/Artemis/commit/d6fa2f6fe68be53ad373ca7c8b44eec7f7485a3e", "message": "move test diagrams to utils\nadd test class for shared modeling-editor", "committedDate": "2021-01-03T13:32:53Z", "type": "commit"}, {"oid": "6f435a9cf39782cd2627f9168a68326fcad4d420", "url": "https://github.com/ls1intum/Artemis/commit/6f435a9cf39782cd2627f9168a68326fcad4d420", "message": "Merge branch 'develop' into chore/apollon-diagram-tests", "committedDate": "2021-01-03T13:36:33Z", "type": "commit"}, {"oid": "0199f45859f257d01ec06ea9142d9a9dee119a78", "url": "https://github.com/ls1intum/Artemis/commit/0199f45859f257d01ec06ea9142d9a9dee119a78", "message": "further test cases", "committedDate": "2021-01-03T18:09:31Z", "type": "commit"}, {"oid": "610efdbc93f0dd96b11516bab04e801797f1f94c", "url": "https://github.com/ls1intum/Artemis/commit/610efdbc93f0dd96b11516bab04e801797f1f94c", "message": "Merge branch 'develop' into chore/apollon-diagram-tests", "committedDate": "2021-01-03T18:09:47Z", "type": "commit"}, {"oid": "c7944c83ea792431d7fb05d8794066635f6ec202", "url": "https://github.com/ls1intum/Artemis/commit/c7944c83ea792431d7fb05d8794066635f6ec202", "message": "Merge remote-tracking branch 'origin/chore/apollon-diagram-tests' into chore/apollon-diagram-tests", "committedDate": "2021-01-03T18:10:08Z", "type": "commit"}, {"oid": "403100acda170860da4310106d89b45370a464b4", "url": "https://github.com/ls1intum/Artemis/commit/403100acda170860da4310106d89b45370a464b4", "message": "refactor fullscreen code to fullscreen.util.ts", "committedDate": "2021-01-03T19:21:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2ODk1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551068951", "bodyText": "please remove the line, see Github warning", "author": "krusche", "createdAt": "2021-01-03T23:32:14Z", "path": "src/test/javascript/spec/component/apollon-diagrams/apollon-diagram-detail.component.spec.ts", "diffHunk": "@@ -0,0 +1,182 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, fakeAsync, flush, TestBed, tick } from '@angular/core/testing';\n+import { ApollonDiagramService } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram.service';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal, NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { HttpResponse } from '@angular/common/http';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { ApollonDiagramDetailComponent } from 'app/exercises/quiz/manage/apollon-diagrams/apollon-diagram-detail.component';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { UMLModel, Selection } from '@ls1intum/apollon';\n+import { ElementRef } from '@angular/core';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { convertRenderedSVGToPNG } from 'app/exercises/quiz/manage/apollon-diagrams/exercise-generation/svg-renderer';", "originalCommit": "403100acda170860da4310106d89b45370a464b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2ODk5Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551068996", "bodyText": "which deserialization issue do you mean? can you reference it here?\nIs it easy to fix or more complex?", "author": "krusche", "createdAt": "2021-01-03T23:32:48Z", "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import { UMLModel } from '@ls1intum/apollon';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { GuidedTourService } from 'app/guided-tour/guided-tour.service';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ArtemisTestModule } from '../../test.module';\n+import { cloneDeep } from 'lodash';\n+import { SimpleChange } from '@angular/core';\n+\n+// has to be overridden, because jsdom does not provide a getBBox() function for SVGTextElements\n+Text.size = () => {\n+    return { width: 0, height: 0 };\n+};\n+\n+describe('ModelingEditorComponent Component', () => {\n+    let fixture: ComponentFixture<ModelingEditorComponent>;\n+    const sandbox = sinon.createSandbox();\n+    const course: Course = { id: 123 } as Course;\n+    const diagram: ApollonDiagram = new ApollonDiagram(UMLDiagramType.ClassDiagram, course.id!);\n+\n+    beforeEach(() => {\n+        const route = ({ params: of({ id: 1, courseId: 123 }), snapshot: { paramMap: convertToParamMap({ courseId: course.id }) } } as any) as ActivatedRoute;\n+        diagram.id = 1;\n+        diagram.jsonRepresentation = JSON.stringify(testClassDiagram);\n+\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule, ArtemisTestModule, ArtemisSharedModule, ArtemisModelingEditorModule],\n+            declarations: [],\n+            providers: [\n+                JhiAlertService,\n+                JhiLanguageHelper,\n+                GuidedTourService,\n+                { provide: NgbModal, useClass: MockNgbModalService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: ActivatedRoute, useValue: route },\n+                { provide: Router, useValue: MockRouter },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+            ],\n+            schemas: [],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingEditorComponent);\n+            });\n+    });\n+\n+    afterEach(function () {\n+        sandbox.restore();\n+    });\n+\n+    it('ngAfterViewInit', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+\n+        // test\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+    });\n+\n+    it('ngOnDestroy', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        fixture.componentInstance.ngOnDestroy();\n+        expect(fixture.componentInstance['apollonEditor']).toBeFalsy();\n+    });\n+\n+    it('ngOnChanges', () => {\n+        // @ts-ignore\n+        const model = testClassDiagram as UMLModel;\n+        fixture.componentInstance.umlModel = model;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        const changedModel = cloneDeep(model);\n+        changedModel.elements = [];\n+        changedModel.relationships = [];\n+        changedModel.interactive = { elements: [], relationships: [] };\n+        changedModel.size = { height: 0, width: 0 };\n+\n+        // test\n+        fixture.componentInstance.ngOnChanges({\n+            umlModel: {\n+                currentValue: changedModel,\n+                previousValue: model,\n+            } as SimpleChange,\n+        });\n+\n+        expect(fixture.componentInstance['apollonEditor']!.model).toEqual(changedModel);\n+    });\n+\n+    it('isFullScreen false', () => {\n+        // test\n+        const fullScreen = fixture.componentInstance.isFullScreen;\n+        expect(fullScreen).toBeFalsy();\n+    });\n+\n+    it('getCurrentModel', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        const model = fixture.componentInstance.getCurrentModel();\n+        // TODO: uncomment after deserialization bugfix in Apollon libary", "originalCommit": "403100acda170860da4310106d89b45370a464b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NzI5MA==", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551557290", "bodyText": "ls1intum/Apollon#146\nNot sure about the complexity, I invested a bit of time and located the issue, but did not yet fully understand why it happens. Can post these information in the Apollon ticket", "author": "TobiasPr", "createdAt": "2021-01-04T20:42:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTA2ODk5Ng=="}], "type": "inlineReview"}, {"oid": "bc03b0a81153ad485f54e1e6014834df048f513c", "url": "https://github.com/ls1intum/Artemis/commit/bc03b0a81153ad485f54e1e6014834df048f513c", "message": "Merge branch 'develop' into chore/apollon-diagram-tests", "committedDate": "2021-01-04T00:05:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4MjE0Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551182147", "bodyText": "an alternative return statement of false would be good here, I suppose.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }\n          \n          \n            \n                }\n          \n          \n            \n                return false;", "author": "derLalla", "createdAt": "2021-01-04T08:48:34Z", "path": "src/main/webapp/app/shared/util/fullscreen.util.ts", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * checks if this component is the current fullscreen component\n+ */\n+export function isFullScreen() {\n+    const docElement = document as any;\n+    // check if this component is the current fullscreen component for different browser types\n+    if (docElement.fullscreenElement !== undefined) {\n+        return docElement.fullscreenElement;\n+    } else if (docElement.webkitFullscreenElement !== undefined) {\n+        return docElement.webkitFullscreenElement;\n+    } else if (docElement.mozFullScreenElement !== undefined) {\n+        return docElement.mozFullScreenElement;\n+    } else if (docElement.msFullscreenElement !== undefined) {\n+        return docElement.msFullscreenElement;\n+    }", "originalCommit": "bc03b0a81153ad485f54e1e6014834df048f513c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1OTAwNg==", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551559006", "bodyText": "Done", "author": "TobiasPr", "createdAt": "2021-01-04T20:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTE4MjE0Nw=="}], "type": "inlineReview"}, {"oid": "6bb877d8eb5ecc6d674e94e288f53909b6858bf5", "url": "https://github.com/ls1intum/Artemis/commit/6bb877d8eb5ecc6d674e94e288f53909b6858bf5", "message": "Merge branch 'develop' into chore/apollon-diagram-tests", "committedDate": "2021-01-04T20:32:34Z", "type": "commit"}, {"oid": "0c29a485a894e7d225c8d6edc04b228e6761d44f", "url": "https://github.com/ls1intum/Artemis/commit/0c29a485a894e7d225c8d6edc04b228e6761d44f", "message": "added type to isFullScreen util method + type annotations\nremoved unused import", "committedDate": "2021-01-04T20:45:02Z", "type": "commit"}, {"oid": "907f26c972d41b1b3683a19f87c4fdafabb7a2d0", "url": "https://github.com/ls1intum/Artemis/commit/907f26c972d41b1b3683a19f87c4fdafabb7a2d0", "message": "Merge remote-tracking branch 'origin/chore/apollon-diagram-tests' into chore/apollon-diagram-tests", "committedDate": "2021-01-04T20:45:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3MDMxNw==", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551570317", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // TODO: uncomment after deserialization bugfix in Apollon libary\n          \n          \n            \n                    // TODO: uncomment after deserialization bugfix in Apollon library, see https://github.com/ls1intum/Apollon/issues/146", "author": "krusche", "createdAt": "2021-01-04T21:09:54Z", "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import { UMLModel } from '@ls1intum/apollon';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { GuidedTourService } from 'app/guided-tour/guided-tour.service';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ArtemisTestModule } from '../../test.module';\n+import { cloneDeep } from 'lodash';\n+import { SimpleChange } from '@angular/core';\n+\n+// has to be overridden, because jsdom does not provide a getBBox() function for SVGTextElements\n+Text.size = () => {\n+    return { width: 0, height: 0 };\n+};\n+\n+describe('ModelingEditorComponent Component', () => {\n+    let fixture: ComponentFixture<ModelingEditorComponent>;\n+    const sandbox = sinon.createSandbox();\n+    const course: Course = { id: 123 } as Course;\n+    const diagram: ApollonDiagram = new ApollonDiagram(UMLDiagramType.ClassDiagram, course.id!);\n+\n+    beforeEach(() => {\n+        const route = ({ params: of({ id: 1, courseId: 123 }), snapshot: { paramMap: convertToParamMap({ courseId: course.id }) } } as any) as ActivatedRoute;\n+        diagram.id = 1;\n+        diagram.jsonRepresentation = JSON.stringify(testClassDiagram);\n+\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule, ArtemisTestModule, ArtemisSharedModule, ArtemisModelingEditorModule],\n+            declarations: [],\n+            providers: [\n+                JhiAlertService,\n+                JhiLanguageHelper,\n+                GuidedTourService,\n+                { provide: NgbModal, useClass: MockNgbModalService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: ActivatedRoute, useValue: route },\n+                { provide: Router, useValue: MockRouter },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+            ],\n+            schemas: [],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingEditorComponent);\n+            });\n+    });\n+\n+    afterEach(function () {\n+        sandbox.restore();\n+    });\n+\n+    it('ngAfterViewInit', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+\n+        // test\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+    });\n+\n+    it('ngOnDestroy', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        fixture.componentInstance.ngOnDestroy();\n+        expect(fixture.componentInstance['apollonEditor']).toBeFalsy();\n+    });\n+\n+    it('ngOnChanges', () => {\n+        // @ts-ignore\n+        const model = testClassDiagram as UMLModel;\n+        fixture.componentInstance.umlModel = model;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        const changedModel = cloneDeep(model);\n+        changedModel.elements = [];\n+        changedModel.relationships = [];\n+        changedModel.interactive = { elements: [], relationships: [] };\n+        changedModel.size = { height: 0, width: 0 };\n+\n+        // test\n+        fixture.componentInstance.ngOnChanges({\n+            umlModel: {\n+                currentValue: changedModel,\n+                previousValue: model,\n+            } as SimpleChange,\n+        });\n+\n+        expect(fixture.componentInstance['apollonEditor']!.model).toEqual(changedModel);\n+    });\n+\n+    it('isFullScreen false', () => {\n+        // test\n+        const fullScreen = fixture.componentInstance.isFullScreen;\n+        expect(fullScreen).toBeFalsy();\n+    });\n+\n+    it('getCurrentModel', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        const model = fixture.componentInstance.getCurrentModel();\n+        // TODO: uncomment after deserialization bugfix in Apollon libary", "originalCommit": "907f26c972d41b1b3683a19f87c4fdafabb7a2d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU3MDQ3OA==", "url": "https://github.com/ls1intum/Artemis/pull/2609#discussion_r551570478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    const model = fixture.componentInstance.getCurrentModel();\n          \n          \n            \n                    // const model = fixture.componentInstance.getCurrentModel();", "author": "krusche", "createdAt": "2021-01-04T21:10:18Z", "path": "src/test/javascript/spec/component/modeling-editor/modeling-editor.component.spec.ts", "diffHunk": "@@ -0,0 +1,175 @@\n+import { Course } from 'app/entities/course.model';\n+import * as sinon from 'sinon';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { ActivatedRoute, convertToParamMap, Router } from '@angular/router';\n+import { MockNgbModalService } from '../../helpers/mocks/service/mock-ngb-modal.service';\n+import { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n+import { of } from 'rxjs';\n+import { JhiAlertService } from 'ng-jhipster';\n+import { ApollonDiagram } from 'app/entities/apollon-diagram.model';\n+import { UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { HttpClientTestingModule } from '@angular/common/http/testing';\n+import { JhiLanguageHelper } from 'app/core/language/language.helper';\n+import { TranslateService } from '@ngx-translate/core';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { MockRouter } from '../../helpers/mocks/service/mock-route.service';\n+import { UMLModel } from '@ls1intum/apollon';\n+import { Text } from '@ls1intum/apollon/lib/utils/svg/text';\n+import { ModelingEditorComponent } from 'app/exercises/modeling/shared/modeling-editor.component';\n+import * as testClassDiagram from '../../util/modeling/test-models/class-diagram.json';\n+import { ArtemisSharedModule } from 'app/shared/shared.module';\n+import { GuidedTourService } from 'app/guided-tour/guided-tour.service';\n+import { ArtemisModelingEditorModule } from 'app/exercises/modeling/shared/modeling-editor.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { ArtemisTestModule } from '../../test.module';\n+import { cloneDeep } from 'lodash';\n+import { SimpleChange } from '@angular/core';\n+\n+// has to be overridden, because jsdom does not provide a getBBox() function for SVGTextElements\n+Text.size = () => {\n+    return { width: 0, height: 0 };\n+};\n+\n+describe('ModelingEditorComponent Component', () => {\n+    let fixture: ComponentFixture<ModelingEditorComponent>;\n+    const sandbox = sinon.createSandbox();\n+    const course: Course = { id: 123 } as Course;\n+    const diagram: ApollonDiagram = new ApollonDiagram(UMLDiagramType.ClassDiagram, course.id!);\n+\n+    beforeEach(() => {\n+        const route = ({ params: of({ id: 1, courseId: 123 }), snapshot: { paramMap: convertToParamMap({ courseId: course.id }) } } as any) as ActivatedRoute;\n+        diagram.id = 1;\n+        diagram.jsonRepresentation = JSON.stringify(testClassDiagram);\n+\n+        TestBed.configureTestingModule({\n+            imports: [HttpClientTestingModule, ArtemisTestModule, ArtemisSharedModule, ArtemisModelingEditorModule],\n+            declarations: [],\n+            providers: [\n+                JhiAlertService,\n+                JhiLanguageHelper,\n+                GuidedTourService,\n+                { provide: NgbModal, useClass: MockNgbModalService },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                { provide: ActivatedRoute, useValue: route },\n+                { provide: Router, useValue: MockRouter },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+            ],\n+            schemas: [],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(ModelingEditorComponent);\n+            });\n+    });\n+\n+    afterEach(function () {\n+        sandbox.restore();\n+    });\n+\n+    it('ngAfterViewInit', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+\n+        // test\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+    });\n+\n+    it('ngOnDestroy', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        fixture.componentInstance.ngOnDestroy();\n+        expect(fixture.componentInstance['apollonEditor']).toBeFalsy();\n+    });\n+\n+    it('ngOnChanges', () => {\n+        // @ts-ignore\n+        const model = testClassDiagram as UMLModel;\n+        fixture.componentInstance.umlModel = model;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        const changedModel = cloneDeep(model);\n+        changedModel.elements = [];\n+        changedModel.relationships = [];\n+        changedModel.interactive = { elements: [], relationships: [] };\n+        changedModel.size = { height: 0, width: 0 };\n+\n+        // test\n+        fixture.componentInstance.ngOnChanges({\n+            umlModel: {\n+                currentValue: changedModel,\n+                previousValue: model,\n+            } as SimpleChange,\n+        });\n+\n+        expect(fixture.componentInstance['apollonEditor']!.model).toEqual(changedModel);\n+    });\n+\n+    it('isFullScreen false', () => {\n+        // test\n+        const fullScreen = fixture.componentInstance.isFullScreen;\n+        expect(fullScreen).toBeFalsy();\n+    });\n+\n+    it('getCurrentModel', () => {\n+        // @ts-ignore\n+        fixture.componentInstance.umlModel = testClassDiagram as UMLModel;\n+        fixture.detectChanges();\n+        fixture.componentInstance.ngAfterViewInit();\n+        expect(fixture.componentInstance['apollonEditor']).toBeTruthy();\n+\n+        // test\n+        const model = fixture.componentInstance.getCurrentModel();", "originalCommit": "907f26c972d41b1b3683a19f87c4fdafabb7a2d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8768dee80e1f48816e7237ea4c3b5bb6ca55734d", "url": "https://github.com/ls1intum/Artemis/commit/8768dee80e1f48816e7237ea4c3b5bb6ca55734d", "message": "Apply suggestions from code review", "committedDate": "2021-01-04T21:10:30Z", "type": "commit"}]}