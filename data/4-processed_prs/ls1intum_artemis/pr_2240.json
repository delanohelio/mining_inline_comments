{"pr_number": 2240, "pr_title": "Server coding and design guidelines", "pr_createdAt": "2020-10-20T07:27:44Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2240", "timeline": [{"oid": "c6e7a7a68eccd8d66ce1f17fd7d381cdfd96c38f", "url": "https://github.com/ls1intum/Artemis/commit/c6e7a7a68eccd8d66ce1f17fd7d381cdfd96c38f", "message": "initial version of server guidelines", "committedDate": "2020-10-06T11:10:51Z", "type": "commit"}, {"oid": "201d771c7ed82e060c8e3ee41f08bd122d39d6f7", "url": "https://github.com/ls1intum/Artemis/commit/201d771c7ed82e060c8e3ee41f08bd122d39d6f7", "message": "Merge branch 'develop' into chore/github-guidelines", "committedDate": "2020-10-20T06:58:08Z", "type": "commit"}, {"oid": "9249703841955986c95c1d019f487477fe11c8f8", "url": "https://github.com/ls1intum/Artemis/commit/9249703841955986c95c1d019f487477fe11c8f8", "message": "improve documenation", "committedDate": "2020-10-20T07:24:57Z", "type": "commit"}, {"oid": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "url": "https://github.com/ls1intum/Artemis/commit/b098ee2e29da0b7e7d98f2fd0b55804e82665312", "message": "Merge branch 'develop' into chore/github-server-guidelines\n\n# Conflicts:\n#\tdocs/README.md", "committedDate": "2020-10-20T07:29:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1OTE2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508359161", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n          \n          \n            \n            Avoid code duplication. If we cannot reuse a method elsewhere, then the method is probably bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.", "author": "derLalla", "createdAt": "2020-10-20T09:42:58Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM1OTQ0Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508359446", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Encapsulate the code you feel might changed in future.\n          \n          \n            \n            * Encapsulate the code you feel might change in future.", "author": "anditurdiu", "createdAt": "2020-10-20T09:43:26Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDU3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508360572", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Write performant queries that can also deal with more 1000 objects in a reasonable time\n          \n          \n            \n            * Write performant queries that can also deal with more 1000 objects in a reasonable time.", "author": "anditurdiu", "createdAt": "2020-10-20T09:45:09Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MTExNw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508361117", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n          \n          \n            \n            * Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query no more than 3 associations at the same time.", "author": "anditurdiu", "createdAt": "2020-10-20T09:45:54Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MTIzNg==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508361236", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Think about lazy vs. eager fetching when modeling the data types\n          \n          \n            \n            * Think about lazy vs. eager fetching when modeling the data types.", "author": "anditurdiu", "createdAt": "2020-10-20T09:46:07Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MTMzOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508361339", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n          \n          \n            \n            * Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null.", "author": "anditurdiu", "createdAt": "2020-10-20T09:46:16Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MTQ0OA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508361448", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Use ``Timestamp`` instead of ``Datetime``\n          \n          \n            \n            * Use ``Timestamp`` instead of ``Datetime``.", "author": "anditurdiu", "createdAt": "2020-10-20T09:46:25Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NDAzMg==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508364032", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n          \n          \n            \n            Only write comments for complicated algorithms, to help other developers better understand them. We should only add a comment, if our code is not self-explanatory.", "author": "anditurdiu", "createdAt": "2020-10-20T09:50:17Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NTUyNw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508365527", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n          \n          \n            \n            Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your `@Configuration` into a single class. The `@Import` annotation can be used to import additional configuration classes.", "author": "anditurdiu", "createdAt": "2020-10-20T09:52:38Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NTk0OA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508365948", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n          \n          \n            \n            Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources, it is generally not recommended. You do not need to put all your `@Configuration` into a single class. The `@Import` annotation can be used to import additional configuration classes.", "author": "anditurdiu", "createdAt": "2020-10-20T09:53:17Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NzgzMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508367831", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * ARCHITECTURE FIRST, writing code without thinking of its architecture is useless in the same way as dreaming about your desires without a plan of achieving them.\n          \n          \n            \n            * ARCHITECTURE FIRST, writing code without thinking of the system's architecture is useless, in the same way as dreaming about your desires without a plan of achieving them.", "author": "anditurdiu", "createdAt": "2020-10-20T09:56:04Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.\n+* Never trust user input and check if the passed data exists in the database.\n+* Always use different response status codes to notify the client about errors on the server:\n+    * Forbidden - the user is not authorized to access the controller.\n+    * Bad Request - the request was wrong.\n+    * Not Found - can't find the requested data or it should be not accessible yet.\n+\n+12. Dependency injection:\n+=========================\n+\n+* Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.\n+* Use setter based DI only for optional dependencies.\n+* Avoid circular dependencies, try constructor and setter based DI for such cases.\n+\n+13. REST best practices:\n+========================\n+\n+* Verify that API endpoints perform appropriate authorization and authentication consistent with the rest of the code base.\n+* Check for other common weaknesses, e.g., weak configuration, malicious user input, missing log events, etc.\n+* Handle exceptions and errors with a standard response. Errors are very important in REST APIs. They inform clients that something went wrong, after all.\n+\n+14. Keep it simple and stupid:\n+==============================\n+\n+* Don\u2019t write complex code.\n+* Don\u2019t write code when you are tired or in a bad mood.\n+* Optimization vs Readability, always write code that is simple to read and which will be understandable for developers. Because time and resources that will be spent on hard readable code will be much higher than what you get from optimization.\n+* Commit messages should describe both what the commit changes and how it does it.\n+* ARCHITECTURE FIRST, writing code without thinking of its architecture is useless in the same way as dreaming about your desires without a plan of achieving them.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2ODcyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508368729", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Previously we used transactions very random, now we have to avoid using Transactional, if not sure that they are needed. Transactions can kill performance, introduce locking issues and database concurrency problems, and add complexity to our application. Good read: https://codete.com/blog/5-common-spring-transactional-pitfalls/\n          \n          \n            \n            * Previously we used transactions very randomly, now we have to avoid using `@Transactional`, if we are not sure that they are needed. Transactions can kill performance, introduce locking issues and database concurrency problems, and add complexity to our application. Good read: https://codete.com/blog/5-common-spring-transactional-pitfalls/", "author": "anditurdiu", "createdAt": "2020-10-20T09:57:25Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.\n+* Never trust user input and check if the passed data exists in the database.\n+* Always use different response status codes to notify the client about errors on the server:\n+    * Forbidden - the user is not authorized to access the controller.\n+    * Bad Request - the request was wrong.\n+    * Not Found - can't find the requested data or it should be not accessible yet.\n+\n+12. Dependency injection:\n+=========================\n+\n+* Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.\n+* Use setter based DI only for optional dependencies.\n+* Avoid circular dependencies, try constructor and setter based DI for such cases.\n+\n+13. REST best practices:\n+========================\n+\n+* Verify that API endpoints perform appropriate authorization and authentication consistent with the rest of the code base.\n+* Check for other common weaknesses, e.g., weak configuration, malicious user input, missing log events, etc.\n+* Handle exceptions and errors with a standard response. Errors are very important in REST APIs. They inform clients that something went wrong, after all.\n+\n+14. Keep it simple and stupid:\n+==============================\n+\n+* Don\u2019t write complex code.\n+* Don\u2019t write code when you are tired or in a bad mood.\n+* Optimization vs Readability, always write code that is simple to read and which will be understandable for developers. Because time and resources that will be spent on hard readable code will be much higher than what you get from optimization.\n+* Commit messages should describe both what the commit changes and how it does it.\n+* ARCHITECTURE FIRST, writing code without thinking of its architecture is useless in the same way as dreaming about your desires without a plan of achieving them.\n+\n+15. General best practices:\n+===========================\n+\n+* Always use the least possible access level, prefer using private over public access modifier (protected can be used as well).\n+* Previously we used transactions very random, now we have to avoid using Transactional, if not sure that they are needed. Transactions can kill performance, introduce locking issues and database concurrency problems, and add complexity to our application. Good read: https://codete.com/blog/5-common-spring-transactional-pitfalls/", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2OTMzNA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508369334", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Define a constant if the same value is used more than once. Constants allow to change code later a lot easier, instead of looking for the places where this variable was used, you only need to change it in only one place.\n          \n          \n            \n            * Define a constant if the same value is used more than once. Constants allow you to change code later a lot easier. Instead of looking for the places where this variable was used, you only need to change it in only one place.", "author": "anditurdiu", "createdAt": "2020-10-20T09:58:18Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.\n+* Never trust user input and check if the passed data exists in the database.\n+* Always use different response status codes to notify the client about errors on the server:\n+    * Forbidden - the user is not authorized to access the controller.\n+    * Bad Request - the request was wrong.\n+    * Not Found - can't find the requested data or it should be not accessible yet.\n+\n+12. Dependency injection:\n+=========================\n+\n+* Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.\n+* Use setter based DI only for optional dependencies.\n+* Avoid circular dependencies, try constructor and setter based DI for such cases.\n+\n+13. REST best practices:\n+========================\n+\n+* Verify that API endpoints perform appropriate authorization and authentication consistent with the rest of the code base.\n+* Check for other common weaknesses, e.g., weak configuration, malicious user input, missing log events, etc.\n+* Handle exceptions and errors with a standard response. Errors are very important in REST APIs. They inform clients that something went wrong, after all.\n+\n+14. Keep it simple and stupid:\n+==============================\n+\n+* Don\u2019t write complex code.\n+* Don\u2019t write code when you are tired or in a bad mood.\n+* Optimization vs Readability, always write code that is simple to read and which will be understandable for developers. Because time and resources that will be spent on hard readable code will be much higher than what you get from optimization.\n+* Commit messages should describe both what the commit changes and how it does it.\n+* ARCHITECTURE FIRST, writing code without thinking of its architecture is useless in the same way as dreaming about your desires without a plan of achieving them.\n+\n+15. General best practices:\n+===========================\n+\n+* Always use the least possible access level, prefer using private over public access modifier (protected can be used as well).\n+* Previously we used transactions very random, now we have to avoid using Transactional, if not sure that they are needed. Transactions can kill performance, introduce locking issues and database concurrency problems, and add complexity to our application. Good read: https://codete.com/blog/5-common-spring-transactional-pitfalls/\n+* Define a constant if the same value is used more than once. Constants allow to change code later a lot easier, instead of looking for the places where this variable was used, you only need to change it in only one place.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2OTkyMw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508369923", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Facilitate code reuse. Always move duplicated code to reusable methods. Intelij is very good at suggesting duplicated lines and even automatically extracting them. Also don't be shy to use Generics.\n          \n          \n            \n            * Facilitate code reuse. Always move duplicated code to reusable methods. IntelliJ is very good at suggesting duplicated lines and even automatically extracting them. Also don't be shy to use Generics.", "author": "anditurdiu", "createdAt": "2020-10-20T09:59:11Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.\n+* Never trust user input and check if the passed data exists in the database.\n+* Always use different response status codes to notify the client about errors on the server:\n+    * Forbidden - the user is not authorized to access the controller.\n+    * Bad Request - the request was wrong.\n+    * Not Found - can't find the requested data or it should be not accessible yet.\n+\n+12. Dependency injection:\n+=========================\n+\n+* Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.\n+* Use setter based DI only for optional dependencies.\n+* Avoid circular dependencies, try constructor and setter based DI for such cases.\n+\n+13. REST best practices:\n+========================\n+\n+* Verify that API endpoints perform appropriate authorization and authentication consistent with the rest of the code base.\n+* Check for other common weaknesses, e.g., weak configuration, malicious user input, missing log events, etc.\n+* Handle exceptions and errors with a standard response. Errors are very important in REST APIs. They inform clients that something went wrong, after all.\n+\n+14. Keep it simple and stupid:\n+==============================\n+\n+* Don\u2019t write complex code.\n+* Don\u2019t write code when you are tired or in a bad mood.\n+* Optimization vs Readability, always write code that is simple to read and which will be understandable for developers. Because time and resources that will be spent on hard readable code will be much higher than what you get from optimization.\n+* Commit messages should describe both what the commit changes and how it does it.\n+* ARCHITECTURE FIRST, writing code without thinking of its architecture is useless in the same way as dreaming about your desires without a plan of achieving them.\n+\n+15. General best practices:\n+===========================\n+\n+* Always use the least possible access level, prefer using private over public access modifier (protected can be used as well).\n+* Previously we used transactions very random, now we have to avoid using Transactional, if not sure that they are needed. Transactions can kill performance, introduce locking issues and database concurrency problems, and add complexity to our application. Good read: https://codete.com/blog/5-common-spring-transactional-pitfalls/\n+* Define a constant if the same value is used more than once. Constants allow to change code later a lot easier, instead of looking for the places where this variable was used, you only need to change it in only one place.\n+* Facilitate code reuse. Always move duplicated code to reusable methods. Intelij is very good at suggesting duplicated lines and even automatically extracting them. Also don't be shy to use Generics.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2MDk0Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508360946", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n          \n          \n            \n            * Default packages are not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.", "author": "sjagla27", "createdAt": "2020-10-20T09:45:42Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2NDcxOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508364719", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n          \n          \n            \n            Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong in a related class.", "author": "sjagla27", "createdAt": "2020-10-20T09:51:24Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM2Njc3Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508366772", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Always use @PreAuthorize tag to only allow certain roles to access the method.\n          \n          \n            \n            * Always use `@PreAuthorize` tag to only allow certain roles to access the method.", "author": "FuchsDominik", "createdAt": "2020-10-20T09:54:32Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM3MDcyMw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508370723", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.\n          \n          \n            \n            * Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the `@Autowired` annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.", "author": "FuchsDominik", "createdAt": "2020-10-20T10:00:22Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.\n+* Never trust user input and check if the passed data exists in the database.\n+* Always use different response status codes to notify the client about errors on the server:\n+    * Forbidden - the user is not authorized to access the controller.\n+    * Bad Request - the request was wrong.\n+    * Not Found - can't find the requested data or it should be not accessible yet.\n+\n+12. Dependency injection:\n+=========================\n+\n+* Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0NTI3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508645275", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n          \n          \n            \n            * Make variable and methods private by default and increasing access step by step like from a private to package-private or protected and not public.\n          \n      \n    \n    \n  \n\nI would always prefer package private if possible and when the class is not designed for inheritance.", "author": "MaisiKoleni", "createdAt": "2020-10-20T15:57:58Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1MDM4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508650381", "bodyText": "This reads a bit strange, I guess a the/a is missing?", "author": "MaisiKoleni", "createdAt": "2020-10-20T16:03:11Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1NDU2Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508654567", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n          \n          \n            \n            * Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises/{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).", "author": "MaisiKoleni", "createdAt": "2020-10-20T16:07:36Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY1OTAwOA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r508659008", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Always use the least possible access level, prefer using private over public access modifier (protected can be used as well).\n          \n          \n            \n            * Always use the least possible access level, prefer using private over public access modifier (package-private or protected can be used as well).", "author": "MaisiKoleni", "createdAt": "2020-10-20T16:11:48Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.\n+* Never trust user input and check if the passed data exists in the database.\n+* Always use different response status codes to notify the client about errors on the server:\n+    * Forbidden - the user is not authorized to access the controller.\n+    * Bad Request - the request was wrong.\n+    * Not Found - can't find the requested data or it should be not accessible yet.\n+\n+12. Dependency injection:\n+=========================\n+\n+* Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.\n+* Use setter based DI only for optional dependencies.\n+* Avoid circular dependencies, try constructor and setter based DI for such cases.\n+\n+13. REST best practices:\n+========================\n+\n+* Verify that API endpoints perform appropriate authorization and authentication consistent with the rest of the code base.\n+* Check for other common weaknesses, e.g., weak configuration, malicious user input, missing log events, etc.\n+* Handle exceptions and errors with a standard response. Errors are very important in REST APIs. They inform clients that something went wrong, after all.\n+\n+14. Keep it simple and stupid:\n+==============================\n+\n+* Don\u2019t write complex code.\n+* Don\u2019t write code when you are tired or in a bad mood.\n+* Optimization vs Readability, always write code that is simple to read and which will be understandable for developers. Because time and resources that will be spent on hard readable code will be much higher than what you get from optimization.\n+* Commit messages should describe both what the commit changes and how it does it.\n+* ARCHITECTURE FIRST, writing code without thinking of its architecture is useless in the same way as dreaming about your desires without a plan of achieving them.\n+\n+15. General best practices:\n+===========================\n+\n+* Always use the least possible access level, prefer using private over public access modifier (protected can be used as well).", "originalCommit": "b098ee2e29da0b7e7d98f2fd0b55804e82665312", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "url": "https://github.com/ls1intum/Artemis/commit/cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "message": "Merge branch 'develop' into chore/github-server-guidelines", "committedDate": "2020-10-20T21:56:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzODc4OA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r509038788", "bodyText": "Codacy found an issue: [heading-increment] Heading levels should increment by one level at a time", "author": "artemis-bot", "createdAt": "2020-10-21T07:10:10Z", "path": "README.md", "diffHunk": "@@ -11,45 +11,45 @@ Artemis was initially generated using JHipster 6.10.3. ([Documentation and help]\n \n [![Latest version)](https://img.shields.io/github/v/tag/ls1intum/Artemis?label=%20Latest%20version&sort=semver)](https://github.com/ls1intum/Artemis/releases/latest)\n \n-## Main features\n+### Main features", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAzODc5Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r509038792", "bodyText": "Codacy found an issue: [heading-increment] Heading levels should increment by one level at a time", "author": "artemis-bot", "createdAt": "2020-10-21T07:10:11Z", "path": "README.md", "diffHunk": "@@ -75,29 +75,38 @@ The following command can automate the deployment to a server. The example shows\n ./artemis-server-cli deploy username@artemistest.ase.in.tum.de -w build/libs/Artemis-4.4.5.war\n ```\n \n-## Deployment\n+## Architecture\n \n-The following UML deployment diagram shows a typical deployment of Artemis application server and application client. Student, Instructor and Teaching Assistant (TA) computers are all equipped equally with the Artemis application client being displayed in the browser.\n+The following diagram shows the top level design of Artemis which is decomposed into an application client (running as Angular web app in the browser) and an application server (based on Spring Boot). For programming exercises, the application server connects to a version control system (VCS) and a continuous integration system (CIS). Authentication is handled by an external user management system (UMS).\n \n-The Continuous Integration Server typically delegates the build jobs to local build agents within the university infrastructure or to remote build agents, e.g. hosted in the Amazon Cloud (AWS).\n+![Top-Level Design](docs/dev/system-design/TopLevelDesign.png \"Top-Level Design\")\n \n-![Deployment Overview](docs/dev/system-design/DeploymentOverview.svg \"Deployment Overview\")\n+While Artemis includes generic adapters to these three external systems with a defined protocol that can be instantiated to connect to any VCS, CIS or UMS, it also provides 3 concrete implementations for these adapters to connect to:\n \n+1. **VCS:** Atlassian Bitbucket Server\n+2. **CIS:** Atlassian Bamboo Server\n+3. **UMS:** Atlassian JIRA Server (more specifically Atlassian Crowd on the JIRA Server)\n \n-## Data Model\n+#### Server architecture", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyMjg5OA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510022898", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n          \n          \n            \n                    * liquibase - contains the ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create a new changelog file you can check existing changelog files or read the documentation: https://www.liquibase.org/documentation/databasechangelog.html.", "author": "balazs-czopf", "createdAt": "2020-10-22T09:39:23Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAyOTI4Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510029283", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n          \n          \n            \n                * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This can also be helpful when we want to provide specific exception handling logic.", "author": "balazs-czopf", "createdAt": "2020-10-22T09:49:07Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzMjY4NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510032685", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n          \n          \n            \n                * repository - list of repositories that we use to access the database. There are several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.", "author": "balazs-czopf", "createdAt": "2020-10-22T09:54:38Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzMjk5MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510032991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                * service - store Spring Boot services.\n          \n          \n            \n                * service - stores Spring Boot services.", "author": "balazs-czopf", "createdAt": "2020-10-22T09:55:04Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzNDI2MA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510034260", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n          \n          \n            \n            All variables, methods and classes should use CamelCase style. The only difference: the first letter of any class should be capital. Most importantly use intention-revealing, pronounceable names.", "author": "balazs-czopf", "createdAt": "2020-10-22T09:57:00Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzNjkzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510036935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n          \n          \n            \n            One method should be responsible for only one action, it should do it well and do nothing else. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.", "author": "balazs-czopf", "createdAt": "2020-10-22T10:01:26Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDAzNzAwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510037000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n          \n          \n            \n            There is no standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.", "author": "balazs-czopf", "createdAt": "2020-10-22T10:01:32Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0MDQzOA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510040438", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n          \n          \n            \n            * Make variables and methods private by default and increase access step by step by changing them from private to protected first and not public right away.", "author": "balazs-czopf", "createdAt": "2020-10-22T10:07:40Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0MDYxOA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510040618", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n          \n          \n            \n            * Classes, methods or functions should be Open for extension and Closed for modification (Open Closed Design Principle).", "author": "balazs-czopf", "createdAt": "2020-10-22T10:07:58Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0MTYwMA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510041600", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * If variable is used only in one method then it would be better to declare it as a local variable of this method.\n          \n          \n            \n            * If a variable is used only in one method then it would be better to declare it as a local variable of this method.", "author": "balazs-czopf", "createdAt": "2020-10-22T10:09:40Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0MjQxNQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510042415", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Write performant queries that can also deal with more 1000 objects in a reasonable time\n          \n          \n            \n            * Write performant queries that can also deal with more than 1000 objects in a reasonable time.", "author": "balazs-czopf", "createdAt": "2020-10-22T10:10:58Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA0NDAwNA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510044004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n          \n          \n            \n            Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You don't have to put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.", "author": "balazs-czopf", "createdAt": "2020-10-22T10:13:28Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3NzU1Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510077552", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Use plural for route's entities.\n          \n          \n            \n            * Use plural for a route's entities.", "author": "balazs-czopf", "createdAt": "2020-10-22T11:13:24Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA3OTU3Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510079577", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.\n          \n          \n            \n            * Some of you may argue with this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.", "author": "balazs-czopf", "createdAt": "2020-10-22T11:17:19Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.\n+* Never trust user input and check if the passed data exists in the database.\n+* Always use different response status codes to notify the client about errors on the server:\n+    * Forbidden - the user is not authorized to access the controller.\n+    * Bad Request - the request was wrong.\n+    * Not Found - can't find the requested data or it should be not accessible yet.\n+\n+12. Dependency injection:\n+=========================\n+\n+* Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA4MDg0NA==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510080844", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Optimization vs Readability, always write code that is simple to read and which will be understandable for developers. Because time and resources that will be spent on hard readable code will be much higher than what you get from optimization.\n          \n          \n            \n            * Optimization vs Readability, always write code that is simple to read and which will be understandable for developers. Because the time and resources spent on hard-to-read code cost much more than what we gain through optimization.", "author": "balazs-czopf", "createdAt": "2020-10-22T11:19:48Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:\n+==================================================\n+\n+* RestControllers should be stateless.\n+* RestControllers are by default singletons.\n+* RestControllers should not execute business logic but rely on delegation.\n+* RestControllers should deal with the HTTP layer of the application.\n+* RestControllers should be oriented around a use-case/business-capability.\n+\n+Route naming conventions:\n+\n+* Always use kebab-case (e.g. \"/exampleAssessment\" \u2192 \"/example-assessment\").\n+* The routes should follow the general structure entity > entityId > sub-entity ... (e.g. \"/exercises/{exerciseId}/participations\").\n+* Use plural for route's entities.\n+* Specify the key entity at the end of the route (e.g. \"text-editor/participations/{participationId}\" should be changed to \"participations/{participationId}/text-editor\").\n+* Never specify an id that is used only for consistency and not used in the code (e.g. GET \"/courses/{courseId}/exercises{exerciseId}/participations/{participationId}/submissions/{submissionId}\" can be simplified to GET \"/submissions/{submissionId}\" because all other entities than the submission are either not needed or can be loaded without the need to specify the id).\n+\n+Additional notes on the controller methods:\n+\n+* POST should return the newly created entity\n+* Always use @PreAuthorize tag to only allow certain roles to access the method.\n+* Never trust user input and check if the passed data exists in the database.\n+* Always use different response status codes to notify the client about errors on the server:\n+    * Forbidden - the user is not authorized to access the controller.\n+    * Bad Request - the request was wrong.\n+    * Not Found - can't find the requested data or it should be not accessible yet.\n+\n+12. Dependency injection:\n+=========================\n+\n+* Some of you may argue this, but by favoring constructor injection you can keep your business logic free from Spring. Not only is the @Autowired annotation optional on constructors, you also get the benefit of being able to easily instantiate your bean without Spring.\n+* Use setter based DI only for optional dependencies.\n+* Avoid circular dependencies, try constructor and setter based DI for such cases.\n+\n+13. REST best practices:\n+========================\n+\n+* Verify that API endpoints perform appropriate authorization and authentication consistent with the rest of the code base.\n+* Check for other common weaknesses, e.g., weak configuration, malicious user input, missing log events, etc.\n+* Handle exceptions and errors with a standard response. Errors are very important in REST APIs. They inform clients that something went wrong, after all.\n+\n+14. Keep it simple and stupid:\n+==============================\n+\n+* Don\u2019t write complex code.\n+* Don\u2019t write code when you are tired or in a bad mood.\n+* Optimization vs Readability, always write code that is simple to read and which will be understandable for developers. Because time and resources that will be spent on hard readable code will be much higher than what you get from optimization.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA4NTUzMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510085531", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            11. Keep your @RestController\u2019s clean and focused:\n          \n          \n            \n            11. Keep your ``@RestController``-s clean and focused:", "author": "balazs-czopf", "createdAt": "2020-10-22T11:28:32Z", "path": "docs/dev/guidelines/server.rst", "diffHunk": "@@ -0,0 +1,148 @@\n+*********************************************\n+Artemis server coding and design guidelines\n+*********************************************\n+\n+Folder structure\n+==================\n+\n+The main application is stored under ``/src/main`` and the main folders are:\n+\n+* resources - script, config files and templates are stored here.\n+    * config - different configurations (production, development, etc.) for application.\n+        * liquibase - contains ``master.xml`` file where all the changelogs from the changelog folder are specified. When you want to do some changes to the database, you will need to add a new changelog file here. To understand how to create new changelock file you can check existing changelog files or read documentation: https://www.liquibase.org/documentation/databasechangelog.html.\n+* java - Artemis Spring Boot application is located here. It contains the following folders:\n+    * config - different classes for configuring database, Sentry, Liquibase, etc.\n+    * domain - all the entities and data classes are located here.\n+    * exception - store custom types of exceptions here. We encourage to create custom exceptions to help other developers understand what problem exactly happened. This also can be helpful when we want to provide specific exception handling logic.\n+    * security - contains different POJOs (simple classes that don't implement/extend any interface/class and don't have annotations) and component classes related to security.\n+    * repository - list of repositories that are used to access the database. We use several techniques to query database: named queries, queries with SpEL expressions and Entity Graphs.\n+    * service - store Spring Boot services.\n+    * web - contains two folders:\n+        * rest - contains resources (REST controllers) represented by separate files.\n+        * websocket - contains files related to the Web Socket and you can use messagingTemplate to push data to the client from the server through them.\n+\n+1. Naming convention:\n+=====================\n+\n+All variables, methods and classes should use CamelCase style. The only difference: a first letter of class should be capital. Most importantly use intention-revealing, pronounceable names.\n+\n+2. Single responsibility principle:\n+===================================\n+\n+One method should be responsible only for one action, it should do it well and do it only. Reduce coupling, if our method does two or three different things at a time then we should consider splitting the functionality.\n+\n+3. Small methods:\n+=================\n+\n+There is not a standard pattern for method length among the developers. Someone can say 5, in some cases even 20 lines of code is okay. Just try to make methods as small as possible.\n+\n+4. Duplication:\n+===============\n+\n+Avoid code duplication. If we cannot reuse a method in other place then probably this method is bad and we should consider a better way to write this method. Use Abstraction to abstract common things in one place.\n+\n+5. Variables and methods declaration:\n+=================================\n+\n+* Encapsulate the code you feel might changed in future.\n+* Make variable and methods private by default and increasing access step by step like from a private to protected and not public.\n+* Classes, methods or functions should be Open for extension and Closed for modification(Open Closed Design Principle).\n+* Program for the interface and not for implementation, you should use interface type on variables, return types of a method or argument type of methods. Just like using SuperClass type to store object rather using SubClass.\n+* The use of interface is to facilitate polymorphism, client should not implement an interface method if its not needed.\n+\n+6. Structure your code correctly:\n+=================================\n+\n+* Default packages not allowed. It can cause particular problems for Spring Boot applications that use the ``@ComponentScan``, ``@EntityScan`` or ``@SpringBootApplication`` annotations since every class from every jar is read.\n+* All variables in the class should be declared at the top of the class.\n+* If variable is used only in one method then it would be better to declare it as a local variable of this method.\n+* Methods should be declared in the same order as they are used (from top to bottom).\n+* More important methods should be declared at the top of a class and minor methods at the end.\n+\n+7. Database:\n+============\n+\n+* Write performant queries that can also deal with more 1000 objects in a reasonable time\n+* Prefer one query that fetches additional data instead of many small queries, but don't overdo it. A good rule of thumb is to query not more than 3 associations at the same time.\n+* Think about lazy vs. eager fetching when modeling the data types\n+* Simple datatypes: immediately think about whether null should be supported as additional state or not. In most cases it is preferable to avoid null\n+* Use ``Timestamp`` instead of ``Datetime``\n+\n+8. Comments:\n+============\n+\n+Only if we are writing complicated algorithm and our comments will help other developers to better understand it. If we are adding a comment then our code is not self-explaining.\n+\n+9. Utility:\n+===========\n+\n+Utility methods can and should be placed in a class named for specific functionality, not \u201cmiscellaneous stuff related to project\u201d. Most of the time, our static methods belong on a related class.\n+\n+10. Auto configuration:\n+=======================\n+\n+Spring Boot favors Java-based configuration. Although it is possible to use Sprint Boot with XML sources but it\u2019s generally not recommended. You need not put all your @Configuration into a single class. The @Import annotation can be used to import additional configuration classes.\n+One of the flagship features of Spring Boot is its use of Auto-configuration. This is the part of Spring Boot that makes your code simply work. It gets activated when a particular jar file is detected on the classpath. The simplest way to make use of it is to rely on the Spring Boot Starters.\n+\n+11. Keep your @RestController\u2019s clean and focused:", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA4NjE4Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510086183", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [Read the Docs] (RtD) hosts the [Artemis documentation] for `develop` (latest) branch, as well as for git tags. The latest tag is always the _stable_ version.\n          \n          \n            \n            [Read the Docs] (RtD) hosts the [Artemis documentation] for the `develop` (latest) branch, as well as for git tags. The latest tag is always the _stable_ version.", "author": "balazs-czopf", "createdAt": "2020-10-22T11:29:43Z", "path": "docs/README.md", "diffHunk": "@@ -1,12 +1,11 @@\n # Artemis Documentation\n \n-We use [Sphinx] for creating the Artemis documentation.\n-Documentation is written in [reStructuredText] (RST).\n+We use [Sphinx] for creating the Artemis documentation using [reStructuredText] (RST).\n To get started with RST, check out the [Quickstart] or this [cheatsheet].\n \n ## Documentation Hosting\n \n-The [Artemis documentation] is hosted on [Read the Docs] (RtD) for the `develop` (latest) branch, as well as for git tags. The latest tag is always linked as the as _stable_ version.\n+[Read the Docs] (RtD) hosts the [Artemis documentation] for `develop` (latest) branch, as well as for git tags. The latest tag is always the _stable_ version.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDA5MDA0Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2240#discussion_r510090043", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Find here a guide on [how to contribute](/CONTRIBUTING.md) to Artemis.\n          \n          \n            \n            Here you can find a guide on [how to contribute](/CONTRIBUTING.md) to Artemis.", "author": "balazs-czopf", "createdAt": "2020-10-22T11:36:59Z", "path": "README.md", "diffHunk": "@@ -11,45 +11,45 @@ Artemis was initially generated using JHipster 6.10.3. ([Documentation and help]\n \n [![Latest version)](https://img.shields.io/github/v/tag/ls1intum/Artemis?label=%20Latest%20version&sort=semver)](https://github.com/ls1intum/Artemis/releases/latest)\n \n-## Main features\n+### Main features\n Artemis supports the following exercises:\n 1. **[Programming exercises](docs/user/exercises/programming.rst)** with version control and automatic assessment with test cases and continuous integration\n 2. **[Quiz exercises](docs/user/exercises/quiz.rst)** with multiple choice, drag and drop and short answer quiz questions\n 3. **[Modeling exercises](docs/user/exercises/modeling.rst)** with semi-automatic assessment using machine learning concepts\n 4. **[Text exercises](docs/user/exercises/textual.rst)** with manual (and experimental semi-automatic) assessment\n 5. **[File upload exercises](docs/user/exercises/file-upload.rst)** with manual assessment\n \n-All these exercises are supposed to be run either live in the lecture with instant feedback or as homework. Students can submit their solutions multiple times within the due date and use the (semi-)automatically provided feedback to improve their solution.\n+Artemis supports all these exercises to run either live in the lecture with instant feedback or as homework. Students can submit their solutions multiple times within the due date and use the (semi-)automatically provided feedback to improve their solution.\n \n-## Development setup\n+Artemis also supports an exam mode now. You can find more information on [Exam mode student features](https://artemis.ase.in.tum.de/#/features/students) and on [Exam mode instructor features](https://artemis.ase.in.tum.de/#/features/instructors).\n \n-Find here a guide on [how to set up your local development environment](docs/dev/setup.rst).\n+### Setup, guides and contributing\n \n-## Server Setup for Programming Exercises\n+#### Development setup, coding and design guidelines\n \n-You can find the guide for setting up Artemis in conjunction with Jenkins and GitLab [here](docs/dev/setup/jenkins-gitlab.rst) and Bamboo/Bitbucket/Jira [here](docs/dev/setup/bamboo-bitbucket-jira.rst)\n+* [How to set up your local development environment](docs/dev/setup.rst)\n+* [Server coding and design guidelines](docs/dev/guidelines/server.rst)\n+* [Client coding and design guidelines](docs/dev/guidelines/client.rst)\n \n-## Administration setup\n+#### Documentation\n \n-You can find information on how to setup user registration [here](docs/admin/registration.rst)\n+[Read the Docs](https://readthedocs.org) hosts the [Artemis documentation](https://artemis-platform.readthedocs.io).\n+You can find a guide on [how to write documentation](docs/README.md).\n \n-## Contributing \n+#### Server setup\n \n-Find here a guide on [how to contribute](/CONTRIBUTING.md) to Artemis.\n-\n-## Top-Level Design\n+You can find the guide for setting up Artemis in conjunction with either `GitLab and Jenkins` [here](docs/dev/setup/jenkins-gitlab.rst) or with `Jira, Bitbucket and Bamboo` [here](docs/dev/setup/bamboo-bitbucket-jira.rst).\n+Artemis uses these external tools for user management and the configuration of programming exercises.\n \n-The following diagram shows the top-level design of Artemis which is decomposed into an application client (running as Angular web app in the browser) and an application server (based on Spring Boot). For programming exercises, the application server connects to a version control system (VCS) and a continuous integration system (CIS). Authentication is handled by an external user management system (UMS).\n+#### Administration setup\n \n-![Top-Level Design](docs/dev/system-design/TopLevelDesign.png \"Top-Level Design\")\n+You can find information on how to set up user registration [here](docs/admin/registration.rst)\n \n-While Artemis includes generic adapters to these three external systems with a defined protocol that can be instantiated to connect to any VCS, CIS or UMS, it also provides 3 concrete implementations for these adapters to connect to:\n+#### Contributing \n \n-1. **VCS:** Atlassian Bitbucket Server\n-2. **CIS:** Atlassian Bamboo Server\n-3. **UMS:** Atlassian JIRA Server (more specifically Atlassian Crowd on the JIRA Server)\n+Find here a guide on [how to contribute](/CONTRIBUTING.md) to Artemis.", "originalCommit": "cd0fa09d1c19d4c2df6b3023d29d605edcf412e0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5530f4ac1aa0b51e808d7f558e07878323e5c058", "url": "https://github.com/ls1intum/Artemis/commit/5530f4ac1aa0b51e808d7f558e07878323e5c058", "message": "Merge branch 'develop' into chore/github-server-guidelines", "committedDate": "2020-11-03T08:26:34Z", "type": "commit"}, {"oid": "0b8f09a1b3e6d5b32005026c316c4c4e0283508d", "url": "https://github.com/ls1intum/Artemis/commit/0b8f09a1b3e6d5b32005026c316c4c4e0283508d", "message": "update according to feedback", "committedDate": "2020-11-03T19:49:46Z", "type": "commit"}, {"oid": "f4bfe26670cfe8c1c54610c3b1d36a58eb504371", "url": "https://github.com/ls1intum/Artemis/commit/f4bfe26670cfe8c1c54610c3b1d36a58eb504371", "message": "Merge branch 'develop' into chore/github-server-guidelines", "committedDate": "2020-11-03T19:50:01Z", "type": "commit"}, {"oid": "85a4b5d7516b0af90df3a72b3e1992b51c46bcf0", "url": "https://github.com/ls1intum/Artemis/commit/85a4b5d7516b0af90df3a72b3e1992b51c46bcf0", "message": "add link to server guidelines in pull request template", "committedDate": "2020-11-03T21:47:34Z", "type": "commit"}, {"oid": "c631bb1c2d34a001d4900fa65f34b38376509db0", "url": "https://github.com/ls1intum/Artemis/commit/c631bb1c2d34a001d4900fa65f34b38376509db0", "message": "add initial version of client guidelines\n\nmark as WORK IN PROGRESS and reference in PR template", "committedDate": "2020-11-03T22:21:49Z", "type": "commit"}, {"oid": "a25551468acb2c9f68fe1949645746945feba6fd", "url": "https://github.com/ls1intum/Artemis/commit/a25551468acb2c9f68fe1949645746945feba6fd", "message": "Merge branch 'develop' into chore/github-server-guidelines", "committedDate": "2020-11-03T22:23:04Z", "type": "commit"}, {"oid": "86911738177ce8727d22ec4e06c43b17c897ec98", "url": "https://github.com/ls1intum/Artemis/commit/86911738177ce8727d22ec4e06c43b17c897ec98", "message": "small improvement", "committedDate": "2020-11-03T22:24:51Z", "type": "commit"}]}