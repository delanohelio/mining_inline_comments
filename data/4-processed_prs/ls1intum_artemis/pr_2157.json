{"pr_number": 2157, "pr_title": "athene load balancer", "pr_createdAt": "2020-10-05T08:29:38Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2157", "timeline": [{"oid": "da92d8d9b8606a00f89a862a13de3108e82dfaa0", "url": "https://github.com/ls1intum/Artemis/commit/da92d8d9b8606a00f89a862a13de3108e82dfaa0", "message": "First working version", "committedDate": "2020-10-02T17:15:20Z", "type": "commit"}, {"oid": "eeaddc06c05fbd113773ebbb77761d605581f247", "url": "https://github.com/ls1intum/Artemis/commit/eeaddc06c05fbd113773ebbb77761d605581f247", "message": "Add athene submit-url to application-artemis", "committedDate": "2020-10-02T19:05:03Z", "type": "commit"}, {"oid": "3eaba821cb43790ca9571670fa13ead5f903cc9d", "url": "https://github.com/ls1intum/Artemis/commit/3eaba821cb43790ca9571670fa13ead5f903cc9d", "message": "Fix response Exception error", "committedDate": "2020-10-03T12:10:40Z", "type": "commit"}, {"oid": "4b5668da953cd2f0026845154379dabd8bb1fafc", "url": "https://github.com/ls1intum/Artemis/commit/4b5668da953cd2f0026845154379dabd8bb1fafc", "message": "Conversion to AtheneService", "committedDate": "2020-10-04T18:02:31Z", "type": "commit"}, {"oid": "6192253bedfa5059ccc6158f2261d751bb87ea0e", "url": "https://github.com/ls1intum/Artemis/commit/6192253bedfa5059ccc6158f2261d751bb87ea0e", "message": ".", "committedDate": "2020-10-04T18:02:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyOTgwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r499429801", "bodyText": "please move into a service", "author": "krusche", "createdAt": "2020-10-05T08:34:41Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AtheneResource.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.connectors.AtheneService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+\n+/**\n+ * REST controller for managing Athene results.\n+ */\n+@RestController\n+@RequestMapping(Constants.ATHENE_RESULT_API_PATH)\n+@Profile(\"athene\")\n+public class AtheneResource {\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneResource.class);\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final AtheneService atheneService;\n+\n+    public AtheneResource(TextBlockRepository textBlockRepository, TextClusterRepository textClusterRepository, TextAssessmentQueueService textAssessmentQueueService,\n+                          TextExerciseRepository textExerciseRepository, TextSubmissionService textSubmissionService, AtheneService atheneService) {\n+        this.textBlockRepository = textBlockRepository;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textSubmissionService = textSubmissionService;\n+        this.atheneService = atheneService;\n+    }\n+\n+    /**\n+     * Parse text blocks of type AtheneDTO.TextBlock to TextBlocks linked to their submission\n+     *\n+     * @param blocks The list of AtheneDTO-blocks to parse\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     * @return list of TextBlocks\n+     */\n+    private List<TextBlock> parseTextBlocks(List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        // Create submissionsMap for lookup\n+        List<TextSubmission> submissions = textSubmissionService.getTextSubmissionsByExerciseId(exerciseId, true, false);\n+        Map<Long, TextSubmission> submissionsMap = submissions.stream()\n+            .collect(toMap(/* Key: */ (submission -> submission.getId()), /* Value: */ (submission -> submission)));\n+\n+        // Map textBlocks to submissions\n+        List<TextBlock> textBlocks = new LinkedList();\n+        for (AtheneDTO.TextBlock t: blocks) {\n+            // Convert DTO-TextBlock (including the submissionId) to TextBlock Entity\n+            TextBlock newBlock = new TextBlock();\n+            newBlock.setId(t.id);\n+            newBlock.setText(t.text);\n+            newBlock.setStartIndex(t.startIndex);\n+            newBlock.setEndIndex(t.endIndex);\n+            newBlock.automatic();\n+\n+            // take the corresponding TextSubmission and add the text blocks.\n+            // The addBlocks method also sets the submission in the textBlock\n+            TextSubmission s = submissionsMap.get(t.submissionId);\n+            submissionsMap.get(t.submissionId).addBlock(newBlock);\n+            textBlocks.add(newBlock);\n+        }\n+\n+        return textBlocks;\n+\n+    }\n+\n+    /**\n+     * Process clusters and save to database\n+     *\n+     * @param clusterMap The map of clusters to process\n+     * @param textBlockMap The map of textBlocks belonging to the clusters\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     */\n+    private void processClusters(Map<Integer, TextCluster> clusterMap, Map<String, TextBlock> textBlockMap, Long exerciseId) {", "originalCommit": "6192253bedfa5059ccc6158f2261d751bb87ea0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ4MDUxNA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r499480514", "bodyText": "Done, thanks!", "author": "linusmichel", "createdAt": "2020-10-05T09:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyOTgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyOTg1MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r499429851", "bodyText": "please move into a service", "author": "krusche", "createdAt": "2020-10-05T08:34:47Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AtheneResource.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.connectors.AtheneService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+\n+/**\n+ * REST controller for managing Athene results.\n+ */\n+@RestController\n+@RequestMapping(Constants.ATHENE_RESULT_API_PATH)\n+@Profile(\"athene\")\n+public class AtheneResource {\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneResource.class);\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final AtheneService atheneService;\n+\n+    public AtheneResource(TextBlockRepository textBlockRepository, TextClusterRepository textClusterRepository, TextAssessmentQueueService textAssessmentQueueService,\n+                          TextExerciseRepository textExerciseRepository, TextSubmissionService textSubmissionService, AtheneService atheneService) {\n+        this.textBlockRepository = textBlockRepository;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textSubmissionService = textSubmissionService;\n+        this.atheneService = atheneService;\n+    }\n+\n+    /**\n+     * Parse text blocks of type AtheneDTO.TextBlock to TextBlocks linked to their submission\n+     *\n+     * @param blocks The list of AtheneDTO-blocks to parse\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     * @return list of TextBlocks\n+     */\n+    private List<TextBlock> parseTextBlocks(List<AtheneDTO.TextBlock> blocks, Long exerciseId) {", "originalCommit": "6192253bedfa5059ccc6158f2261d751bb87ea0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ3OTc5Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r499479797", "bodyText": "Done, thanks!", "author": "linusmichel", "createdAt": "2020-10-05T09:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyOTg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzMDA1MA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r499430050", "bodyText": "please avoid Transactional", "author": "krusche", "createdAt": "2020-10-05T08:35:05Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AtheneResource.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.connectors.AtheneService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+\n+/**\n+ * REST controller for managing Athene results.\n+ */\n+@RestController\n+@RequestMapping(Constants.ATHENE_RESULT_API_PATH)\n+@Profile(\"athene\")\n+public class AtheneResource {\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneResource.class);\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final AtheneService atheneService;\n+\n+    public AtheneResource(TextBlockRepository textBlockRepository, TextClusterRepository textClusterRepository, TextAssessmentQueueService textAssessmentQueueService,\n+                          TextExerciseRepository textExerciseRepository, TextSubmissionService textSubmissionService, AtheneService atheneService) {\n+        this.textBlockRepository = textBlockRepository;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textSubmissionService = textSubmissionService;\n+        this.atheneService = atheneService;\n+    }\n+\n+    /**\n+     * Parse text blocks of type AtheneDTO.TextBlock to TextBlocks linked to their submission\n+     *\n+     * @param blocks The list of AtheneDTO-blocks to parse\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     * @return list of TextBlocks\n+     */\n+    private List<TextBlock> parseTextBlocks(List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        // Create submissionsMap for lookup\n+        List<TextSubmission> submissions = textSubmissionService.getTextSubmissionsByExerciseId(exerciseId, true, false);\n+        Map<Long, TextSubmission> submissionsMap = submissions.stream()\n+            .collect(toMap(/* Key: */ (submission -> submission.getId()), /* Value: */ (submission -> submission)));\n+\n+        // Map textBlocks to submissions\n+        List<TextBlock> textBlocks = new LinkedList();\n+        for (AtheneDTO.TextBlock t: blocks) {\n+            // Convert DTO-TextBlock (including the submissionId) to TextBlock Entity\n+            TextBlock newBlock = new TextBlock();\n+            newBlock.setId(t.id);\n+            newBlock.setText(t.text);\n+            newBlock.setStartIndex(t.startIndex);\n+            newBlock.setEndIndex(t.endIndex);\n+            newBlock.automatic();\n+\n+            // take the corresponding TextSubmission and add the text blocks.\n+            // The addBlocks method also sets the submission in the textBlock\n+            TextSubmission s = submissionsMap.get(t.submissionId);\n+            submissionsMap.get(t.submissionId).addBlock(newBlock);\n+            textBlocks.add(newBlock);\n+        }\n+\n+        return textBlocks;\n+\n+    }\n+\n+    /**\n+     * Process clusters and save to database\n+     *\n+     * @param clusterMap The map of clusters to process\n+     * @param textBlockMap The map of textBlocks belonging to the clusters\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     */\n+    private void processClusters(Map<Integer, TextCluster> clusterMap, Map<String, TextBlock> textBlockMap, Long exerciseId) {\n+        // Remove Cluster with Key \"-1\" as it is only contains the blocks belonging to no cluster.\n+        clusterMap.remove(-1);\n+        final List<TextCluster> savedClusters = textClusterRepository.saveAll(clusterMap.values());\n+\n+        // Find exercise, which the clusters belong to\n+        Optional<TextExercise> optionalTextExercise = textExerciseRepository.findWithEagerTeamAssignmentConfigAndCategoriesById(exerciseId);\n+        if (optionalTextExercise.isEmpty()) {\n+            log.error(\"Error while processing Athene clusters. Exercise with id \" + exerciseId + \"not found\");\n+            new Error().printStackTrace();\n+            return;\n+        }\n+        TextExercise textExercise = optionalTextExercise.get();\n+\n+        // Link clusters with blocks\n+        for (TextCluster cluster : savedClusters) {\n+            cluster.setExercise(textExercise);\n+            List<TextBlock> updatedBlockReferences = cluster.getBlocks().parallelStream().map(block -> textBlockMap.get(block.getId())).peek(block -> block.setCluster(cluster))\n+                .collect(toList());\n+            textAssessmentQueueService.setAddedDistances(updatedBlockReferences, cluster);\n+            updatedBlockReferences = textBlockRepository.saveAll(updatedBlockReferences);\n+            cluster.setBlocks(updatedBlockReferences);\n+        }\n+\n+        // Save clusters in Database\n+        textClusterRepository.saveAll(savedClusters);\n+    }\n+\n+    /**\n+     * Saves automatic textAssessments of Athene\n+     *\n+     * @param exerciseId The exerciseId of the exercise which will be saved\n+     * @param requestBody The calculation results containing blocks and clusters\n+     * @param auth The secret for authorization\n+     * @return 200 Ok if successful or 401 unauthorized if secret is wrong\n+     */\n+    @PostMapping(value = \"/{exerciseId}\", consumes = APPLICATION_JSON_VALUE)\n+    @Transactional", "originalCommit": "6192253bedfa5059ccc6158f2261d751bb87ea0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ4MDAyNA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r499480024", "bodyText": "I think we need Transactional here since we write to the database", "author": "linusmichel", "createdAt": "2020-10-05T09:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzMDA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzMDQyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r499430429", "bodyText": "A resource should only check if the request is valid.\nAll processing logic (including db read and save) that is not necessary to checking the validity of the request should be done in a service", "author": "krusche", "createdAt": "2020-10-05T08:35:46Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AtheneResource.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.*;\n+import de.tum.in.www1.artemis.service.connectors.AtheneService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.*;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+\n+/**\n+ * REST controller for managing Athene results.\n+ */\n+@RestController\n+@RequestMapping(Constants.ATHENE_RESULT_API_PATH)\n+@Profile(\"athene\")\n+public class AtheneResource {\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneResource.class);\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final AtheneService atheneService;\n+\n+    public AtheneResource(TextBlockRepository textBlockRepository, TextClusterRepository textClusterRepository, TextAssessmentQueueService textAssessmentQueueService,\n+                          TextExerciseRepository textExerciseRepository, TextSubmissionService textSubmissionService, AtheneService atheneService) {\n+        this.textBlockRepository = textBlockRepository;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textSubmissionService = textSubmissionService;\n+        this.atheneService = atheneService;\n+    }\n+\n+    /**\n+     * Parse text blocks of type AtheneDTO.TextBlock to TextBlocks linked to their submission\n+     *\n+     * @param blocks The list of AtheneDTO-blocks to parse\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     * @return list of TextBlocks\n+     */\n+    private List<TextBlock> parseTextBlocks(List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        // Create submissionsMap for lookup\n+        List<TextSubmission> submissions = textSubmissionService.getTextSubmissionsByExerciseId(exerciseId, true, false);\n+        Map<Long, TextSubmission> submissionsMap = submissions.stream()\n+            .collect(toMap(/* Key: */ (submission -> submission.getId()), /* Value: */ (submission -> submission)));\n+\n+        // Map textBlocks to submissions\n+        List<TextBlock> textBlocks = new LinkedList();\n+        for (AtheneDTO.TextBlock t: blocks) {\n+            // Convert DTO-TextBlock (including the submissionId) to TextBlock Entity\n+            TextBlock newBlock = new TextBlock();\n+            newBlock.setId(t.id);\n+            newBlock.setText(t.text);\n+            newBlock.setStartIndex(t.startIndex);\n+            newBlock.setEndIndex(t.endIndex);\n+            newBlock.automatic();\n+\n+            // take the corresponding TextSubmission and add the text blocks.\n+            // The addBlocks method also sets the submission in the textBlock\n+            TextSubmission s = submissionsMap.get(t.submissionId);\n+            submissionsMap.get(t.submissionId).addBlock(newBlock);\n+            textBlocks.add(newBlock);\n+        }\n+\n+        return textBlocks;\n+\n+    }\n+\n+    /**\n+     * Process clusters and save to database\n+     *\n+     * @param clusterMap The map of clusters to process\n+     * @param textBlockMap The map of textBlocks belonging to the clusters\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     */\n+    private void processClusters(Map<Integer, TextCluster> clusterMap, Map<String, TextBlock> textBlockMap, Long exerciseId) {\n+        // Remove Cluster with Key \"-1\" as it is only contains the blocks belonging to no cluster.\n+        clusterMap.remove(-1);\n+        final List<TextCluster> savedClusters = textClusterRepository.saveAll(clusterMap.values());\n+\n+        // Find exercise, which the clusters belong to\n+        Optional<TextExercise> optionalTextExercise = textExerciseRepository.findWithEagerTeamAssignmentConfigAndCategoriesById(exerciseId);\n+        if (optionalTextExercise.isEmpty()) {\n+            log.error(\"Error while processing Athene clusters. Exercise with id \" + exerciseId + \"not found\");\n+            new Error().printStackTrace();\n+            return;\n+        }\n+        TextExercise textExercise = optionalTextExercise.get();\n+\n+        // Link clusters with blocks\n+        for (TextCluster cluster : savedClusters) {\n+            cluster.setExercise(textExercise);\n+            List<TextBlock> updatedBlockReferences = cluster.getBlocks().parallelStream().map(block -> textBlockMap.get(block.getId())).peek(block -> block.setCluster(cluster))\n+                .collect(toList());\n+            textAssessmentQueueService.setAddedDistances(updatedBlockReferences, cluster);\n+            updatedBlockReferences = textBlockRepository.saveAll(updatedBlockReferences);\n+            cluster.setBlocks(updatedBlockReferences);\n+        }\n+\n+        // Save clusters in Database\n+        textClusterRepository.saveAll(savedClusters);\n+    }\n+\n+    /**\n+     * Saves automatic textAssessments of Athene\n+     *\n+     * @param exerciseId The exerciseId of the exercise which will be saved\n+     * @param requestBody The calculation results containing blocks and clusters\n+     * @param auth The secret for authorization\n+     * @return 200 Ok if successful or 401 unauthorized if secret is wrong\n+     */\n+    @PostMapping(value = \"/{exerciseId}\", consumes = APPLICATION_JSON_VALUE)\n+    @Transactional\n+    public ResponseEntity<Result> saveAtheneResult(@PathVariable Long exerciseId, @RequestBody AtheneDTO requestBody, @RequestHeader(\"Authorization\") String auth) {\n+        log.debug(\"REST request to inform about new Athene results for exercise: {}\", exerciseId);\n+\n+        // Check Authorization header\n+        if (!auth.equals(API_SECRET)) {\n+            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();\n+        }\n+\n+        // Check if job should be running, otherwise reject results\n+        if (!atheneService.isTaskRunning(exerciseId)) {", "originalCommit": "6192253bedfa5059ccc6158f2261d751bb87ea0e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ4MDQzMA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r499480430", "bodyText": "The request is not valid, if there should not be a job running for the exercise.", "author": "linusmichel", "createdAt": "2020-10-05T09:57:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQzMDQyOQ=="}], "type": "inlineReview"}, {"oid": "ac948561c4fac13e850f91b2a5e8b29c0dc84ff1", "url": "https://github.com/ls1intum/Artemis/commit/ac948561c4fac13e850f91b2a5e8b29c0dc84ff1", "message": "Fixing codacy issues", "committedDate": "2020-10-05T09:36:27Z", "type": "commit"}, {"oid": "c4ffb4d561bb64737fb069762d087feccfbdfb07", "url": "https://github.com/ls1intum/Artemis/commit/c4ffb4d561bb64737fb069762d087feccfbdfb07", "message": "Fix PR comments", "committedDate": "2020-10-05T09:55:54Z", "type": "commit"}, {"oid": "87cbe7ad2184725f22231b01015844026e0b2e4b", "url": "https://github.com/ls1intum/Artemis/commit/87cbe7ad2184725f22231b01015844026e0b2e4b", "message": "Separate request-logic from processing-logic", "committedDate": "2020-10-05T10:13:56Z", "type": "commit"}, {"oid": "db25b4522bd838b91a2eb2ddae86c0dca5ece304", "url": "https://github.com/ls1intum/Artemis/commit/db25b4522bd838b91a2eb2ddae86c0dca5ece304", "message": "Remove unused variable", "committedDate": "2020-10-05T10:28:48Z", "type": "commit"}, {"oid": "faa39135b7ff1c70e111ceb90f190b994a8cfedd", "url": "https://github.com/ls1intum/Artemis/commit/faa39135b7ff1c70e111ceb90f190b994a8cfedd", "message": "Eliminate processing logic in AtheneResource", "committedDate": "2020-10-05T15:24:26Z", "type": "commit"}, {"oid": "6c4cdcdefcf3dfab7db34266b57fb771120b27d8", "url": "https://github.com/ls1intum/Artemis/commit/6c4cdcdefcf3dfab7db34266b57fb771120b27d8", "message": "Merge branch 'develop' into feature/athene-load-balancer", "committedDate": "2020-10-06T09:29:03Z", "type": "commit"}, {"oid": "06f5f86c5423d498999bbbd26254bca2c520439e", "url": "https://github.com/ls1intum/Artemis/commit/06f5f86c5423d498999bbbd26254bca2c520439e", "message": "Add Tests for AtheneService", "committedDate": "2020-10-20T11:12:53Z", "type": "commit"}, {"oid": "5c3fb5c47f5163ef1604b745d3bffb1e6f914213", "url": "https://github.com/ls1intum/Artemis/commit/5c3fb5c47f5163ef1604b745d3bffb1e6f914213", "message": "Remove old classes", "committedDate": "2020-10-20T11:29:27Z", "type": "commit"}, {"oid": "a5de7cb7c4243c14571c019647948fe673cb14b5", "url": "https://github.com/ls1intum/Artemis/commit/a5de7cb7c4243c14571c019647948fe673cb14b5", "message": "Get rid of old automaticText profile", "committedDate": "2020-10-20T11:30:01Z", "type": "commit"}, {"oid": "c91ca03c9f90325de88b4b033b7b9ffbf00f42ad", "url": "https://github.com/ls1intum/Artemis/commit/c91ca03c9f90325de88b4b033b7b9ffbf00f42ad", "message": "Fix codestyle issues", "committedDate": "2020-10-20T11:31:14Z", "type": "commit"}, {"oid": "d2eb85f846ea4b45d9e9a3ac8863b617837491d7", "url": "https://github.com/ls1intum/Artemis/commit/d2eb85f846ea4b45d9e9a3ac8863b617837491d7", "message": "Add Test properties", "committedDate": "2020-10-20T12:00:15Z", "type": "commit"}, {"oid": "bf5028bfa679f5ee8f721c3b74df0adf29dbb70b", "url": "https://github.com/ls1intum/Artemis/commit/bf5028bfa679f5ee8f721c3b74df0adf29dbb70b", "message": "Migrate old automatic-text variables to new athene profile", "committedDate": "2020-10-20T12:30:45Z", "type": "commit"}, {"oid": "f28a374e8c6d73f890b7b074d946a5fac1584068", "url": "https://github.com/ls1intum/Artemis/commit/f28a374e8c6d73f890b7b074d946a5fac1584068", "message": "Change config and documentation for new athene profile", "committedDate": "2020-10-20T13:07:34Z", "type": "commit"}, {"oid": "0148b1a06aa81fd71894fe5968399e78d91058fd", "url": "https://github.com/ls1intum/Artemis/commit/0148b1a06aa81fd71894fe5968399e78d91058fd", "message": "Merge commit 'a718e9f2c1575dbd6565b13b4972f15db1d15219' into feature/athene-load-balancer", "committedDate": "2020-10-20T13:39:28Z", "type": "commit"}, {"oid": "7b07029b9c77b9167c7c167a98751a3cfb34aceb", "url": "https://github.com/ls1intum/Artemis/commit/7b07029b9c77b9167c7c167a98751a3cfb34aceb", "message": "Undo changes in intellij run configuration", "committedDate": "2020-10-20T13:44:47Z", "type": "commit"}, {"oid": "7ec978887d24146940547d8ae7f3508d04d6746a", "url": "https://github.com/ls1intum/Artemis/commit/7ec978887d24146940547d8ae7f3508d04d6746a", "message": "Fix codacy issues", "committedDate": "2020-10-21T08:16:01Z", "type": "commit"}, {"oid": "6999784f2045a4ce803968dc1677734d580b7855", "url": "https://github.com/ls1intum/Artemis/commit/6999784f2045a4ce803968dc1677734d580b7855", "message": "Merge branch 'develop' into feature/athene-load-balancer", "committedDate": "2020-10-21T19:46:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1MTk5MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510251991", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Athene Service (Text Assessment Clustering)\n          \n          \n            \n            Athene Service", "author": "jpbernius", "createdAt": "2020-10-22T15:24:38Z", "path": "docs/dev/setup.rst", "diffHunk": "@@ -342,18 +339,18 @@ Other useful commands:\n -  Stop the client: ``docker-compose stop artemis-client`` (restart via\n    ``docker-compose start artemis-client``)\n \n-Text Assessment Clustering Service\n+Athene Service (Text Assessment Clustering)", "originalCommit": "6999784f2045a4ce803968dc1677734d580b7855", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1MzM0Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510253347", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n          \n          \n            \n                    private static List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {", "author": "jpbernius", "createdAt": "2020-10-22T15:26:13Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {", "originalCommit": "6999784f2045a4ce803968dc1677734d580b7855", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI1NjQ4OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510256489", "bodyText": "I think we can even skip this part. This should be done before assessing each submission. so only exit if there are < 10", "author": "jpbernius", "createdAt": "2020-10-22T15:30:19Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,288 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n+            return submissions.stream().map(textSubmission -> {\n+                final TextSubmission submission = new TextSubmission();\n+                submission.setText(textSubmission.getText());\n+                submission.setId(textSubmission.getId());\n+                return submission;\n+            }).collect(toList());\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        public String detail;\n+\n+    }\n+    // endregion\n+\n+    /**\n+     * Register an Athene task for an exercise as running\n+     * @param exerciseId the exerciseId which the Athene task is running for\n+     */\n+    public void startTask(Long exerciseId) {\n+        runningAtheneTasks.add(exerciseId);\n+    }\n+\n+    /**\n+     * Delete an Athene task for an exercise from the running tasks\n+     * @param exerciseId the exerciseId which the Athene task finished for\n+     */\n+    public void finishTask(Long exerciseId) {\n+        runningAtheneTasks.remove(exerciseId);\n+    }\n+\n+    /**\n+     * Check whether an Athene task is running for the given exerciseId\n+     * @param exerciseId the exerciseId to check for a running Athene task\n+     * @return true, if a task for the given exerciseId is running\n+     */\n+    public boolean isTaskRunning(Long exerciseId) {\n+        return runningAtheneTasks.contains(exerciseId);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     */\n+    public void submitJob(TextExercise exercise) {\n+        submitJob(exercise, 1);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * Falls back to naive splitting for less than 10 submissions\n+     * Note: See `TextSubmissionService:getTextSubmissionsByExerciseId` for selection of Submissions.\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     * @param maxRetries number of retries before the request will be canceled\n+     */\n+    public void submitJob(TextExercise exercise, int maxRetries) {\n+        log.debug(\"Start Athene Service for Text Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \").\");\n+\n+        // Find all submissions for Exercise\n+        List<TextSubmission> textSubmissions = textSubmissionService.getTextSubmissionsByExerciseId(exercise.getId(), true, false);\n+\n+        // We only support english languages so far, to prevent corruption of the clustering\n+        textSubmissions.removeIf(textSubmission -> textSubmission.getLanguage() != Language.ENGLISH);\n+\n+        // Athene only works if more than 10 submissions are available\n+        // else textBlockService is used\n+        if (textSubmissions.size() >= 10) {\n+\n+            log.info(\"Calling Remote Service to calculate automatic feedback for \" + textSubmissions.size() + \" submissions.\");\n+\n+            try {\n+                final Request request = new Request(exercise.getId(), textSubmissions, ARTEMIS_SERVER_URL + ATHENE_RESULT_API_PATH + exercise.getId());\n+                Response response = connector.invokeWithRetry(API_ENDPOINT, request, authorizationHeaderForSymmetricSecret(API_SECRET), maxRetries);\n+                log.info(\"Remote Service to calculate automatic feedback responded: \" + response.detail);\n+\n+                // Register task for exercise as running, AtheneResource calls finishTask on result receive\n+                startTask(exercise.getId());\n+            }\n+            catch (NetworkingError networkingError) {\n+                log.error(\"Error while calling Remote Service\", networkingError);\n+            }\n+\n+        }\n+        else {\n+\n+            log.info(\"More than 10 submissions needed to calculate automatic feedback. Falling back to naive splitting\");\n+\n+            List<TextBlock> set = new ArrayList<>();\n+\n+            // Split Submissions into Blocks\n+            for (TextSubmission textSubmission : textSubmissions) {\n+\n+                final List<TextBlock> blocks = textBlockService.splitSubmissionIntoBlocks(textSubmission);\n+                textSubmission.setBlocks(blocks);\n+                set.addAll(blocks);\n+\n+            }\n+\n+            textBlockRepository.saveAll(set);\n+\n+        }", "originalCommit": "6999784f2045a4ce803968dc1677734d580b7855", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NDQ0Mg==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510264442", "bodyText": "Not sure what @Profile does here. But I am happy to keep it if it does anything.", "author": "jpbernius", "createdAt": "2020-10-22T15:41:00Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/AtheneDTO.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package de.tum.in.www1.artemis.web.rest.dto;\n+\n+import java.util.*;\n+\n+import org.springframework.context.annotation.Profile;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.TextBlockType;\n+import de.tum.in.www1.artemis.domain.TextCluster;\n+\n+@Profile(\"athene\")", "originalCommit": "6999784f2045a4ce803968dc1677734d580b7855", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3Mjg2OA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510372868", "bodyText": "According to my research, it does not do anything in this case. I removed it", "author": "linusmichel", "createdAt": "2020-10-22T18:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NDQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDI2NzY5OA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510267698", "bodyText": "Please use the JUnit assertThat or assertEquals methods.", "author": "jpbernius", "createdAt": "2020-10-22T15:45:24Z", "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/AtheneServiceTest.java", "diffHunk": "@@ -0,0 +1,278 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static org.apache.commons.codec.digest.DigestUtils.sha1Hex;\n+import static org.mockito.Mockito.*;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+public class AtheneServiceTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    RestTemplate restTemplate;\n+\n+    @Autowired\n+    TextBlockService textBlockService;\n+\n+    @Autowired\n+    TextAssessmentQueueService textAssessmentQueueService;\n+\n+    @Mock\n+    TextExerciseRepository textExerciseRepository;\n+\n+    @Mock\n+    TextBlockRepository textBlockRepository;\n+\n+    @Mock\n+    TextSubmissionService textSubmissionService;\n+\n+    @Mock\n+    TextClusterRepository textClusterRepository;\n+\n+    private final String API_ENDPOINT = \"http://localhost/submit\";\n+\n+    AtheneService atheneService;\n+\n+    TextExercise exercise1;\n+\n+    /**\n+     * Initializes atheneService and example exercise\n+     */\n+    @BeforeEach\n+    public void init() {\n+        // Create atheneService and inject @Value fields\n+        atheneService = new AtheneService(textSubmissionService, textBlockRepository, textBlockService, textClusterRepository, textExerciseRepository, textAssessmentQueueService);\n+        ReflectionTestUtils.setField(atheneService, \"ARTEMIS_SERVER_URL\", ARTEMIS_SERVER_URL);\n+        ReflectionTestUtils.setField(atheneService, \"API_ENDPOINT\", API_ENDPOINT);\n+        String API_SECRET = \"YWVuaXF1YWRpNWNlaXJpNmFlbTZkb283dXphaVF1b29oM3J1MWNoYWlyNHRoZWUzb2huZ2FpM211bGVlM0VpcAo=\";\n+        ReflectionTestUtils.setField(atheneService, \"API_SECRET\", API_SECRET);\n+\n+        // Create example exercise\n+        ZonedDateTime pastTimestamp = ZonedDateTime.now().minusDays(5);\n+        ZonedDateTime futureTimestamp = ZonedDateTime.now().plusDays(5);\n+        Course course1 = ModelFactory.generateCourse(1L, pastTimestamp, futureTimestamp, new HashSet<>(), \"tumuser\", \"tutor\", \"instructor\");\n+        course1.setRegistrationEnabled(true);\n+        exercise1 = ModelFactory.generateTextExercise(pastTimestamp, futureTimestamp, futureTimestamp, course1);\n+        exercise1.setId(1L);\n+\n+        when(textExerciseRepository.findWithEagerTeamAssignmentConfigAndCategoriesById(exercise1.getId())).thenReturn(Optional.ofNullable(exercise1));\n+    }\n+\n+    /**\n+     * Submits a job to atheneService without any submissions\n+     */\n+    @Test\n+    public void submitJobWithoutSubmissions() {\n+        // Catch call of atheneService to the textBlockRepository\n+        when(textBlockRepository.saveAll(anyIterable())).thenAnswer(invocation -> {\n+            ArrayList<TextBlock> set = invocation.getArgument(0);\n+            // Check for correct number of textBlocks\n+            assert set.size() == 0;", "originalCommit": "6999784f2045a4ce803968dc1677734d580b7855", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9693a96a1c02526084fc4da15f3c686b13cd445", "url": "https://github.com/ls1intum/Artemis/commit/f9693a96a1c02526084fc4da15f3c686b13cd445", "message": "Apply suggestions from code review\n\nCo-authored-by: Jan Philip Bernius <janphilip.bernius@tum.de>", "committedDate": "2020-10-22T17:47:07Z", "type": "commit"}, {"oid": "7f64c8384b57d80487754a0e9a37524c95d44d6a", "url": "https://github.com/ls1intum/Artemis/commit/7f64c8384b57d80487754a0e9a37524c95d44d6a", "message": "Implement requested changes", "committedDate": "2020-10-22T18:28:13Z", "type": "commit"}, {"oid": "ead6b158e8d6c6eb41a29c2e6bc46c9a8c0dd792", "url": "https://github.com/ls1intum/Artemis/commit/ead6b158e8d6c6eb41a29c2e6bc46c9a8c0dd792", "message": "Merge branch 'feature/athene-load-balancer' of https://github.com/ls1intum/Artemis into feature/athene-load-balancer", "committedDate": "2020-10-22T18:29:09Z", "type": "commit"}, {"oid": "b81a76378d0898657ac0b861371fd33571b73121", "url": "https://github.com/ls1intum/Artemis/commit/b81a76378d0898657ac0b861371fd33571b73121", "message": "Merge branch 'develop' into feature/athene-load-balancer", "committedDate": "2020-10-22T19:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwODMyNw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510408327", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Transactional\n          \n      \n    \n    \n  \n\nDo we need this actually?", "author": "jpbernius", "createdAt": "2020-10-22T19:35:05Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private static List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n+            return submissions.stream().map(textSubmission -> {\n+                final TextSubmission submission = new TextSubmission();\n+                submission.setText(textSubmission.getText());\n+                submission.setId(textSubmission.getId());\n+                return submission;\n+            }).collect(toList());\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        public String detail;\n+\n+    }\n+    // endregion\n+\n+    /**\n+     * Register an Athene task for an exercise as running\n+     * @param exerciseId the exerciseId which the Athene task is running for\n+     */\n+    public void startTask(Long exerciseId) {\n+        runningAtheneTasks.add(exerciseId);\n+    }\n+\n+    /**\n+     * Delete an Athene task for an exercise from the running tasks\n+     * @param exerciseId the exerciseId which the Athene task finished for\n+     */\n+    public void finishTask(Long exerciseId) {\n+        runningAtheneTasks.remove(exerciseId);\n+    }\n+\n+    /**\n+     * Check whether an Athene task is running for the given exerciseId\n+     * @param exerciseId the exerciseId to check for a running Athene task\n+     * @return true, if a task for the given exerciseId is running\n+     */\n+    public boolean isTaskRunning(Long exerciseId) {\n+        return runningAtheneTasks.contains(exerciseId);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     */\n+    public void submitJob(TextExercise exercise) {\n+        submitJob(exercise, 1);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * Falls back to naive splitting for less than 10 submissions\n+     * Note: See `TextSubmissionService:getTextSubmissionsByExerciseId` for selection of Submissions.\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     * @param maxRetries number of retries before the request will be canceled\n+     */\n+    public void submitJob(TextExercise exercise, int maxRetries) {\n+        log.debug(\"Start Athene Service for Text Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \").\");\n+\n+        // Find all submissions for Exercise\n+        List<TextSubmission> textSubmissions = textSubmissionService.getTextSubmissionsByExerciseId(exercise.getId(), true, false);\n+\n+        // We only support english languages so far, to prevent corruption of the clustering\n+        textSubmissions.removeIf(textSubmission -> textSubmission.getLanguage() != Language.ENGLISH);\n+\n+        // Athene only works with 10 or more submissions\n+        if (textSubmissions.size() >= 10) {\n+\n+            log.info(\"Calling Remote Service to calculate automatic feedback for \" + textSubmissions.size() + \" submissions.\");\n+\n+            try {\n+                final Request request = new Request(exercise.getId(), textSubmissions, ARTEMIS_SERVER_URL + ATHENE_RESULT_API_PATH + exercise.getId());\n+                Response response = connector.invokeWithRetry(API_ENDPOINT, request, authorizationHeaderForSymmetricSecret(API_SECRET), maxRetries);\n+                log.info(\"Remote Service to calculate automatic feedback responded: \" + response.detail);\n+\n+                // Register task for exercise as running, AtheneResource calls finishTask on result receive\n+                startTask(exercise.getId());\n+            }\n+            catch (NetworkingError networkingError) {\n+                log.error(\"Error while calling Remote Service\", networkingError);\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Processes results coming back from the Athene system via callbackUrl (see AtheneResource)\n+     * @param clusters the Map of calculated clusters to save to the database\n+     * @param blocks the list of calculated textBlocks to save to the database\n+     * @param exerciseId the exercise the automatic feedback suggestions were calculated for\n+     */\n+    @Transactional", "originalCommit": "b81a76378d0898657ac0b861371fd33571b73121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNzQ2Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510427466", "bodyText": "Afaik yes. We otherwise cause a LazyInitializationException", "author": "linusmichel", "createdAt": "2020-10-22T20:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwODMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNzg4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510407886", "bodyText": "Can we remove transactional?", "author": "krusche", "createdAt": "2020-10-22T19:34:10Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private static List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n+            return submissions.stream().map(textSubmission -> {\n+                final TextSubmission submission = new TextSubmission();\n+                submission.setText(textSubmission.getText());\n+                submission.setId(textSubmission.getId());\n+                return submission;\n+            }).collect(toList());\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        public String detail;\n+\n+    }\n+    // endregion\n+\n+    /**\n+     * Register an Athene task for an exercise as running\n+     * @param exerciseId the exerciseId which the Athene task is running for\n+     */\n+    public void startTask(Long exerciseId) {\n+        runningAtheneTasks.add(exerciseId);\n+    }\n+\n+    /**\n+     * Delete an Athene task for an exercise from the running tasks\n+     * @param exerciseId the exerciseId which the Athene task finished for\n+     */\n+    public void finishTask(Long exerciseId) {\n+        runningAtheneTasks.remove(exerciseId);\n+    }\n+\n+    /**\n+     * Check whether an Athene task is running for the given exerciseId\n+     * @param exerciseId the exerciseId to check for a running Athene task\n+     * @return true, if a task for the given exerciseId is running\n+     */\n+    public boolean isTaskRunning(Long exerciseId) {\n+        return runningAtheneTasks.contains(exerciseId);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     */\n+    public void submitJob(TextExercise exercise) {\n+        submitJob(exercise, 1);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * Falls back to naive splitting for less than 10 submissions\n+     * Note: See `TextSubmissionService:getTextSubmissionsByExerciseId` for selection of Submissions.\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     * @param maxRetries number of retries before the request will be canceled\n+     */\n+    public void submitJob(TextExercise exercise, int maxRetries) {\n+        log.debug(\"Start Athene Service for Text Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \").\");\n+\n+        // Find all submissions for Exercise\n+        List<TextSubmission> textSubmissions = textSubmissionService.getTextSubmissionsByExerciseId(exercise.getId(), true, false);\n+\n+        // We only support english languages so far, to prevent corruption of the clustering\n+        textSubmissions.removeIf(textSubmission -> textSubmission.getLanguage() != Language.ENGLISH);\n+\n+        // Athene only works with 10 or more submissions\n+        if (textSubmissions.size() >= 10) {\n+\n+            log.info(\"Calling Remote Service to calculate automatic feedback for \" + textSubmissions.size() + \" submissions.\");\n+\n+            try {\n+                final Request request = new Request(exercise.getId(), textSubmissions, ARTEMIS_SERVER_URL + ATHENE_RESULT_API_PATH + exercise.getId());\n+                Response response = connector.invokeWithRetry(API_ENDPOINT, request, authorizationHeaderForSymmetricSecret(API_SECRET), maxRetries);\n+                log.info(\"Remote Service to calculate automatic feedback responded: \" + response.detail);\n+\n+                // Register task for exercise as running, AtheneResource calls finishTask on result receive\n+                startTask(exercise.getId());\n+            }\n+            catch (NetworkingError networkingError) {\n+                log.error(\"Error while calling Remote Service\", networkingError);\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Processes results coming back from the Athene system via callbackUrl (see AtheneResource)\n+     * @param clusters the Map of calculated clusters to save to the database\n+     * @param blocks the list of calculated textBlocks to save to the database\n+     * @param exerciseId the exercise the automatic feedback suggestions were calculated for\n+     */\n+    @Transactional", "originalCommit": "b81a76378d0898657ac0b861371fd33571b73121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNzE2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510427161", "bodyText": "Afaik not. We otherwise cause a LazyInitializationException", "author": "linusmichel", "createdAt": "2020-10-22T20:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNzg4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzODYzNg==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510438636", "bodyText": "Then you need to load all related objects from the database so that the operations can take place without such exceptions. We really would like to avoid @transactional in such cases, because loading proxy objects from the database is quite performance intense", "author": "krusche", "createdAt": "2020-10-22T20:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwNzg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwODYwMw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510408603", "bodyText": "We use RestTemplates for all other external connectors. Would this be possible here as well?", "author": "krusche", "createdAt": "2020-10-22T19:35:36Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/RemoteArtemisServiceConnector.java", "diffHunk": "@@ -123,4 +123,16 @@ static HttpHeaders authenticationHeaderForSecret(String secret) {\n         headers.setBearerAuth(secret);\n         return headers;\n     }\n+\n+    /**\n+     * Helper to generate HttpHeaders for a symmetric secret.\n+     *\n+     * @param secret Authorization secret\n+     * @return HttpHeaders\n+     */\n+    static HttpHeaders authorizationHeaderForSymmetricSecret(String secret) {\n+        HttpHeaders headers = new HttpHeaders();", "originalCommit": "b81a76378d0898657ac0b861371fd33571b73121", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNTU0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510425549", "bodyText": "We actually use a RestTemplate here with this special set of Headers", "author": "linusmichel", "createdAt": "2020-10-22T20:06:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwODYwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MTg1NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510441855", "bodyText": "Yes, but as far as I can see, you do not inject it and you do not use an Interceptor here.\nHave a look how this is done in BambooService, BambooAuthorizationInterceptor and in RestTemplateConfiguration.\nI would prefer that we use a consistent approach for the communication with external systems.", "author": "krusche", "createdAt": "2020-10-22T20:37:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQwODYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNjQzMw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510426433", "bodyText": "This should be trimmed to the headline length to be consistent with the rest of our docs:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Text Assessment Clustering Service\n          \n          \n            \n            Athene Service\n          \n          \n            \n            ----------------------------------\n          \n          \n            \n            Athene Service\n          \n          \n            \n            --------------", "author": "FrankeLukas", "createdAt": "2020-10-22T20:08:33Z", "path": "docs/dev/setup.rst", "diffHunk": "@@ -342,18 +339,18 @@ Other useful commands:\n -  Stop the client: ``docker-compose stop artemis-client`` (restart via\n    ``docker-compose start artemis-client``)\n \n-Text Assessment Clustering Service\n+Athene Service\n ----------------------------------", "originalCommit": "b81a76378d0898657ac0b861371fd33571b73121", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQyNjQ5MA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510426490", "bodyText": "Same here.", "author": "FrankeLukas", "createdAt": "2020-10-22T20:08:39Z", "path": "docs/dev/setup.rst", "diffHunk": "@@ -342,18 +339,18 @@ Other useful commands:\n -  Stop the client: ``docker-compose stop artemis-client`` (restart via\n    ``docker-compose start artemis-client``)\n \n-Text Assessment Clustering Service\n+Athene Service\n ----------------------------------\n \n The semi-automatic text assessment relies on the Athene_ service.\n To enable automatic text assessments, special configuration is required:\n \n-Enable the ``automaticText`` Spring profile:\n+Enable the ``athene`` Spring profile:\n ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^", "originalCommit": "b81a76378d0898657ac0b861371fd33571b73121", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa76f4dc5467d32171b6b8150b6f499f192049b6", "url": "https://github.com/ls1intum/Artemis/commit/fa76f4dc5467d32171b6b8150b6f499f192049b6", "message": "Fix rst style issues", "committedDate": "2020-10-22T20:14:34Z", "type": "commit"}, {"oid": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "url": "https://github.com/ls1intum/Artemis/commit/88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "message": "Merge branch 'feature/athene-load-balancer' of https://github.com/ls1intum/Artemis into feature/athene-load-balancer", "committedDate": "2020-10-22T20:15:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjE2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510436161", "bodyText": "we are now using camelCase for those variables.\nWhy is this one protected and not private?", "author": "krusche", "createdAt": "2020-10-22T20:26:34Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjIzMw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510436233", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                protected String ARTEMIS_SERVER_URL;\n          \n          \n            \n                private String artemisServerUrl;", "author": "krusche", "createdAt": "2020-10-22T20:26:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjE2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjQ4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510436487", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String API_ENDPOINT;\n          \n          \n            \n                private String submitApiEndpoint;", "author": "krusche", "createdAt": "2020-10-22T20:27:14Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNjU2MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510436561", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String API_SECRET;\n          \n          \n            \n                private String apiSecret;", "author": "krusche", "createdAt": "2020-10-22T20:27:24Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzNzU5OQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510437599", "bodyText": "this comment is not really helpful. Can you explain why you copy those elements?\nWhy is the method called submissionDTOs if there are no real DTOs involved here?\nI would rather call this method clone or copy", "author": "krusche", "createdAt": "2020-10-22T20:29:20Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTAwNA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510439004", "bodyText": "do we really need log.info here? And if yes, I would propose to add some additional information, e.g. which exerciseId is involved, how many results are processed, etc. otherwise the log does not really help", "author": "krusche", "createdAt": "2020-10-22T20:32:00Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private static List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n+            return submissions.stream().map(textSubmission -> {\n+                final TextSubmission submission = new TextSubmission();\n+                submission.setText(textSubmission.getText());\n+                submission.setId(textSubmission.getId());\n+                return submission;\n+            }).collect(toList());\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        public String detail;\n+\n+    }\n+    // endregion\n+\n+    /**\n+     * Register an Athene task for an exercise as running\n+     * @param exerciseId the exerciseId which the Athene task is running for\n+     */\n+    public void startTask(Long exerciseId) {\n+        runningAtheneTasks.add(exerciseId);\n+    }\n+\n+    /**\n+     * Delete an Athene task for an exercise from the running tasks\n+     * @param exerciseId the exerciseId which the Athene task finished for\n+     */\n+    public void finishTask(Long exerciseId) {\n+        runningAtheneTasks.remove(exerciseId);\n+    }\n+\n+    /**\n+     * Check whether an Athene task is running for the given exerciseId\n+     * @param exerciseId the exerciseId to check for a running Athene task\n+     * @return true, if a task for the given exerciseId is running\n+     */\n+    public boolean isTaskRunning(Long exerciseId) {\n+        return runningAtheneTasks.contains(exerciseId);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     */\n+    public void submitJob(TextExercise exercise) {\n+        submitJob(exercise, 1);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * Falls back to naive splitting for less than 10 submissions\n+     * Note: See `TextSubmissionService:getTextSubmissionsByExerciseId` for selection of Submissions.\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     * @param maxRetries number of retries before the request will be canceled\n+     */\n+    public void submitJob(TextExercise exercise, int maxRetries) {\n+        log.debug(\"Start Athene Service for Text Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \").\");\n+\n+        // Find all submissions for Exercise\n+        List<TextSubmission> textSubmissions = textSubmissionService.getTextSubmissionsByExerciseId(exercise.getId(), true, false);\n+\n+        // We only support english languages so far, to prevent corruption of the clustering\n+        textSubmissions.removeIf(textSubmission -> textSubmission.getLanguage() != Language.ENGLISH);\n+\n+        // Athene only works with 10 or more submissions\n+        if (textSubmissions.size() >= 10) {\n+\n+            log.info(\"Calling Remote Service to calculate automatic feedback for \" + textSubmissions.size() + \" submissions.\");\n+\n+            try {\n+                final Request request = new Request(exercise.getId(), textSubmissions, ARTEMIS_SERVER_URL + ATHENE_RESULT_API_PATH + exercise.getId());\n+                Response response = connector.invokeWithRetry(API_ENDPOINT, request, authorizationHeaderForSymmetricSecret(API_SECRET), maxRetries);\n+                log.info(\"Remote Service to calculate automatic feedback responded: \" + response.detail);\n+\n+                // Register task for exercise as running, AtheneResource calls finishTask on result receive\n+                startTask(exercise.getId());\n+            }\n+            catch (NetworkingError networkingError) {\n+                log.error(\"Error while calling Remote Service\", networkingError);\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Processes results coming back from the Athene system via callbackUrl (see AtheneResource)\n+     * @param clusters the Map of calculated clusters to save to the database\n+     * @param blocks the list of calculated textBlocks to save to the database\n+     * @param exerciseId the exercise the automatic feedback suggestions were calculated for\n+     */\n+    @Transactional\n+    public void processResult(Map<Integer, TextCluster> clusters, List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        log.info(\"Start processing incoming Athene results\");", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTE4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510439187", "bodyText": "do we really need log.info here? And if yes, I would propose to add some additional information, e.g. which exerciseId is involved, how many results are processed, etc. otherwise the log does not really help", "author": "krusche", "createdAt": "2020-10-22T20:32:23Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private static List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n+            return submissions.stream().map(textSubmission -> {\n+                final TextSubmission submission = new TextSubmission();\n+                submission.setText(textSubmission.getText());\n+                submission.setId(textSubmission.getId());\n+                return submission;\n+            }).collect(toList());\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        public String detail;\n+\n+    }\n+    // endregion\n+\n+    /**\n+     * Register an Athene task for an exercise as running\n+     * @param exerciseId the exerciseId which the Athene task is running for\n+     */\n+    public void startTask(Long exerciseId) {\n+        runningAtheneTasks.add(exerciseId);\n+    }\n+\n+    /**\n+     * Delete an Athene task for an exercise from the running tasks\n+     * @param exerciseId the exerciseId which the Athene task finished for\n+     */\n+    public void finishTask(Long exerciseId) {\n+        runningAtheneTasks.remove(exerciseId);\n+    }\n+\n+    /**\n+     * Check whether an Athene task is running for the given exerciseId\n+     * @param exerciseId the exerciseId to check for a running Athene task\n+     * @return true, if a task for the given exerciseId is running\n+     */\n+    public boolean isTaskRunning(Long exerciseId) {\n+        return runningAtheneTasks.contains(exerciseId);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     */\n+    public void submitJob(TextExercise exercise) {\n+        submitJob(exercise, 1);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * Falls back to naive splitting for less than 10 submissions\n+     * Note: See `TextSubmissionService:getTextSubmissionsByExerciseId` for selection of Submissions.\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     * @param maxRetries number of retries before the request will be canceled\n+     */\n+    public void submitJob(TextExercise exercise, int maxRetries) {\n+        log.debug(\"Start Athene Service for Text Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \").\");\n+\n+        // Find all submissions for Exercise\n+        List<TextSubmission> textSubmissions = textSubmissionService.getTextSubmissionsByExerciseId(exercise.getId(), true, false);\n+\n+        // We only support english languages so far, to prevent corruption of the clustering\n+        textSubmissions.removeIf(textSubmission -> textSubmission.getLanguage() != Language.ENGLISH);\n+\n+        // Athene only works with 10 or more submissions\n+        if (textSubmissions.size() >= 10) {\n+\n+            log.info(\"Calling Remote Service to calculate automatic feedback for \" + textSubmissions.size() + \" submissions.\");\n+\n+            try {\n+                final Request request = new Request(exercise.getId(), textSubmissions, ARTEMIS_SERVER_URL + ATHENE_RESULT_API_PATH + exercise.getId());\n+                Response response = connector.invokeWithRetry(API_ENDPOINT, request, authorizationHeaderForSymmetricSecret(API_SECRET), maxRetries);\n+                log.info(\"Remote Service to calculate automatic feedback responded: \" + response.detail);\n+\n+                // Register task for exercise as running, AtheneResource calls finishTask on result receive\n+                startTask(exercise.getId());\n+            }\n+            catch (NetworkingError networkingError) {\n+                log.error(\"Error while calling Remote Service\", networkingError);\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Processes results coming back from the Athene system via callbackUrl (see AtheneResource)\n+     * @param clusters the Map of calculated clusters to save to the database\n+     * @param blocks the list of calculated textBlocks to save to the database\n+     * @param exerciseId the exercise the automatic feedback suggestions were calculated for\n+     */\n+    @Transactional\n+    public void processResult(Map<Integer, TextCluster> clusters, List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        log.info(\"Start processing incoming Athene results\");\n+\n+        // Parse textBlocks (blocks will come as AtheneDTO.TextBlock with their submissionId and need to be parsed)\n+        List<TextBlock> textBlocks = parseTextBlocks(blocks, exerciseId);\n+\n+        // Save textBlocks in Database\n+        final Map<String, TextBlock> textBlockMap;\n+        textBlockMap = textBlockRepository.saveAll(textBlocks).stream().collect(toMap(TextBlock::getId, block -> block));\n+\n+        // Save clusters in Database\n+        processClusters(clusters, textBlockMap, exerciseId);\n+\n+        // Notify atheneService of finished task\n+        finishTask(exerciseId);\n+\n+        log.info(\"Finished processing incoming Athene results\");", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDAyNA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510440024", "bodyText": "please call the object in AtheneDTO TextBlockDTO to avoid confusion here", "author": "krusche", "createdAt": "2020-10-22T20:34:01Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private static List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n+            return submissions.stream().map(textSubmission -> {\n+                final TextSubmission submission = new TextSubmission();\n+                submission.setText(textSubmission.getText());\n+                submission.setId(textSubmission.getId());\n+                return submission;\n+            }).collect(toList());\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        public String detail;\n+\n+    }\n+    // endregion\n+\n+    /**\n+     * Register an Athene task for an exercise as running\n+     * @param exerciseId the exerciseId which the Athene task is running for\n+     */\n+    public void startTask(Long exerciseId) {\n+        runningAtheneTasks.add(exerciseId);\n+    }\n+\n+    /**\n+     * Delete an Athene task for an exercise from the running tasks\n+     * @param exerciseId the exerciseId which the Athene task finished for\n+     */\n+    public void finishTask(Long exerciseId) {\n+        runningAtheneTasks.remove(exerciseId);\n+    }\n+\n+    /**\n+     * Check whether an Athene task is running for the given exerciseId\n+     * @param exerciseId the exerciseId to check for a running Athene task\n+     * @return true, if a task for the given exerciseId is running\n+     */\n+    public boolean isTaskRunning(Long exerciseId) {\n+        return runningAtheneTasks.contains(exerciseId);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     */\n+    public void submitJob(TextExercise exercise) {\n+        submitJob(exercise, 1);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * Falls back to naive splitting for less than 10 submissions\n+     * Note: See `TextSubmissionService:getTextSubmissionsByExerciseId` for selection of Submissions.\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     * @param maxRetries number of retries before the request will be canceled\n+     */\n+    public void submitJob(TextExercise exercise, int maxRetries) {\n+        log.debug(\"Start Athene Service for Text Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \").\");\n+\n+        // Find all submissions for Exercise\n+        List<TextSubmission> textSubmissions = textSubmissionService.getTextSubmissionsByExerciseId(exercise.getId(), true, false);\n+\n+        // We only support english languages so far, to prevent corruption of the clustering\n+        textSubmissions.removeIf(textSubmission -> textSubmission.getLanguage() != Language.ENGLISH);\n+\n+        // Athene only works with 10 or more submissions\n+        if (textSubmissions.size() >= 10) {\n+\n+            log.info(\"Calling Remote Service to calculate automatic feedback for \" + textSubmissions.size() + \" submissions.\");\n+\n+            try {\n+                final Request request = new Request(exercise.getId(), textSubmissions, ARTEMIS_SERVER_URL + ATHENE_RESULT_API_PATH + exercise.getId());\n+                Response response = connector.invokeWithRetry(API_ENDPOINT, request, authorizationHeaderForSymmetricSecret(API_SECRET), maxRetries);\n+                log.info(\"Remote Service to calculate automatic feedback responded: \" + response.detail);\n+\n+                // Register task for exercise as running, AtheneResource calls finishTask on result receive\n+                startTask(exercise.getId());\n+            }\n+            catch (NetworkingError networkingError) {\n+                log.error(\"Error while calling Remote Service\", networkingError);\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Processes results coming back from the Athene system via callbackUrl (see AtheneResource)\n+     * @param clusters the Map of calculated clusters to save to the database\n+     * @param blocks the list of calculated textBlocks to save to the database\n+     * @param exerciseId the exercise the automatic feedback suggestions were calculated for\n+     */\n+    @Transactional\n+    public void processResult(Map<Integer, TextCluster> clusters, List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        log.info(\"Start processing incoming Athene results\");\n+\n+        // Parse textBlocks (blocks will come as AtheneDTO.TextBlock with their submissionId and need to be parsed)\n+        List<TextBlock> textBlocks = parseTextBlocks(blocks, exerciseId);\n+\n+        // Save textBlocks in Database\n+        final Map<String, TextBlock> textBlockMap;\n+        textBlockMap = textBlockRepository.saveAll(textBlocks).stream().collect(toMap(TextBlock::getId, block -> block));\n+\n+        // Save clusters in Database\n+        processClusters(clusters, textBlockMap, exerciseId);\n+\n+        // Notify atheneService of finished task\n+        finishTask(exerciseId);\n+\n+        log.info(\"Finished processing incoming Athene results\");\n+    }\n+\n+    /**\n+     * Parse text blocks of type AtheneDTO.TextBlock to TextBlocks linked to their submission\n+     *\n+     * @param blocks The list of AtheneDTO-blocks to parse\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     * @return list of TextBlocks\n+     */\n+    public List<TextBlock> parseTextBlocks(List<AtheneDTO.TextBlock> blocks, Long exerciseId) {", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDIxNg==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510440216", "bodyText": "t is not a good variable name", "author": "krusche", "createdAt": "2020-10-22T20:34:20Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private static List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n+            return submissions.stream().map(textSubmission -> {\n+                final TextSubmission submission = new TextSubmission();\n+                submission.setText(textSubmission.getText());\n+                submission.setId(textSubmission.getId());\n+                return submission;\n+            }).collect(toList());\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        public String detail;\n+\n+    }\n+    // endregion\n+\n+    /**\n+     * Register an Athene task for an exercise as running\n+     * @param exerciseId the exerciseId which the Athene task is running for\n+     */\n+    public void startTask(Long exerciseId) {\n+        runningAtheneTasks.add(exerciseId);\n+    }\n+\n+    /**\n+     * Delete an Athene task for an exercise from the running tasks\n+     * @param exerciseId the exerciseId which the Athene task finished for\n+     */\n+    public void finishTask(Long exerciseId) {\n+        runningAtheneTasks.remove(exerciseId);\n+    }\n+\n+    /**\n+     * Check whether an Athene task is running for the given exerciseId\n+     * @param exerciseId the exerciseId to check for a running Athene task\n+     * @return true, if a task for the given exerciseId is running\n+     */\n+    public boolean isTaskRunning(Long exerciseId) {\n+        return runningAtheneTasks.contains(exerciseId);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     */\n+    public void submitJob(TextExercise exercise) {\n+        submitJob(exercise, 1);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * Falls back to naive splitting for less than 10 submissions\n+     * Note: See `TextSubmissionService:getTextSubmissionsByExerciseId` for selection of Submissions.\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     * @param maxRetries number of retries before the request will be canceled\n+     */\n+    public void submitJob(TextExercise exercise, int maxRetries) {\n+        log.debug(\"Start Athene Service for Text Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \").\");\n+\n+        // Find all submissions for Exercise\n+        List<TextSubmission> textSubmissions = textSubmissionService.getTextSubmissionsByExerciseId(exercise.getId(), true, false);\n+\n+        // We only support english languages so far, to prevent corruption of the clustering\n+        textSubmissions.removeIf(textSubmission -> textSubmission.getLanguage() != Language.ENGLISH);\n+\n+        // Athene only works with 10 or more submissions\n+        if (textSubmissions.size() >= 10) {\n+\n+            log.info(\"Calling Remote Service to calculate automatic feedback for \" + textSubmissions.size() + \" submissions.\");\n+\n+            try {\n+                final Request request = new Request(exercise.getId(), textSubmissions, ARTEMIS_SERVER_URL + ATHENE_RESULT_API_PATH + exercise.getId());\n+                Response response = connector.invokeWithRetry(API_ENDPOINT, request, authorizationHeaderForSymmetricSecret(API_SECRET), maxRetries);\n+                log.info(\"Remote Service to calculate automatic feedback responded: \" + response.detail);\n+\n+                // Register task for exercise as running, AtheneResource calls finishTask on result receive\n+                startTask(exercise.getId());\n+            }\n+            catch (NetworkingError networkingError) {\n+                log.error(\"Error while calling Remote Service\", networkingError);\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Processes results coming back from the Athene system via callbackUrl (see AtheneResource)\n+     * @param clusters the Map of calculated clusters to save to the database\n+     * @param blocks the list of calculated textBlocks to save to the database\n+     * @param exerciseId the exercise the automatic feedback suggestions were calculated for\n+     */\n+    @Transactional\n+    public void processResult(Map<Integer, TextCluster> clusters, List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        log.info(\"Start processing incoming Athene results\");\n+\n+        // Parse textBlocks (blocks will come as AtheneDTO.TextBlock with their submissionId and need to be parsed)\n+        List<TextBlock> textBlocks = parseTextBlocks(blocks, exerciseId);\n+\n+        // Save textBlocks in Database\n+        final Map<String, TextBlock> textBlockMap;\n+        textBlockMap = textBlockRepository.saveAll(textBlocks).stream().collect(toMap(TextBlock::getId, block -> block));\n+\n+        // Save clusters in Database\n+        processClusters(clusters, textBlockMap, exerciseId);\n+\n+        // Notify atheneService of finished task\n+        finishTask(exerciseId);\n+\n+        log.info(\"Finished processing incoming Athene results\");\n+    }\n+\n+    /**\n+     * Parse text blocks of type AtheneDTO.TextBlock to TextBlocks linked to their submission\n+     *\n+     * @param blocks The list of AtheneDTO-blocks to parse\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     * @return list of TextBlocks\n+     */\n+    public List<TextBlock> parseTextBlocks(List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        // Create submissionsMap for lookup\n+        List<TextSubmission> submissions = textSubmissionService.getTextSubmissionsByExerciseId(exerciseId, true, false);\n+        Map<Long, TextSubmission> submissionsMap = submissions.stream().collect(toMap(/* Key: */ Submission::getId, /* Value: */ submission -> submission));\n+\n+        // Map textBlocks to submissions\n+        List<TextBlock> textBlocks = new LinkedList();\n+        for (AtheneDTO.TextBlock t : blocks) {", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDUwNw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510440507", "bodyText": "a bit more documentation would be nice.", "author": "krusche", "createdAt": "2020-10-22T20:34:56Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,269 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    protected String ARTEMIS_SERVER_URL;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String API_ENDPOINT;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextBlockService textBlockService;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextBlockService textBlockService,\n+            TextClusterRepository textClusterRepository, TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textBlockService = textBlockService;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {\n+\n+        public long courseId;\n+\n+        public String callbackUrl;\n+\n+        public List<TextSubmission> submissions;\n+\n+        Request(@NotNull long courseId, @NotNull List<TextSubmission> submissions, @NotNull String callbackUrl) {\n+            this.courseId = courseId;\n+            this.callbackUrl = callbackUrl;\n+            this.submissions = submissionDTOs(submissions);\n+        }\n+\n+        /**\n+         * Create new TextSubmission as DTO.\n+         */\n+        @NotNull\n+        private static List<TextSubmission> submissionDTOs(@NotNull List<TextSubmission> submissions) {\n+            return submissions.stream().map(textSubmission -> {\n+                final TextSubmission submission = new TextSubmission();\n+                submission.setText(textSubmission.getText());\n+                submission.setId(textSubmission.getId());\n+                return submission;\n+            }).collect(toList());\n+        }\n+    }\n+\n+    private static class Response {\n+\n+        public String detail;\n+\n+    }\n+    // endregion\n+\n+    /**\n+     * Register an Athene task for an exercise as running\n+     * @param exerciseId the exerciseId which the Athene task is running for\n+     */\n+    public void startTask(Long exerciseId) {\n+        runningAtheneTasks.add(exerciseId);\n+    }\n+\n+    /**\n+     * Delete an Athene task for an exercise from the running tasks\n+     * @param exerciseId the exerciseId which the Athene task finished for\n+     */\n+    public void finishTask(Long exerciseId) {\n+        runningAtheneTasks.remove(exerciseId);\n+    }\n+\n+    /**\n+     * Check whether an Athene task is running for the given exerciseId\n+     * @param exerciseId the exerciseId to check for a running Athene task\n+     * @return true, if a task for the given exerciseId is running\n+     */\n+    public boolean isTaskRunning(Long exerciseId) {\n+        return runningAtheneTasks.contains(exerciseId);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     */\n+    public void submitJob(TextExercise exercise) {\n+        submitJob(exercise, 1);\n+    }\n+\n+    /**\n+     * Calls the remote Athene service to submit a Job for calculating automatic feedback\n+     * Falls back to naive splitting for less than 10 submissions\n+     * Note: See `TextSubmissionService:getTextSubmissionsByExerciseId` for selection of Submissions.\n+     * @param exercise the exercise the automatic assessments should be calculated for\n+     * @param maxRetries number of retries before the request will be canceled\n+     */\n+    public void submitJob(TextExercise exercise, int maxRetries) {\n+        log.debug(\"Start Athene Service for Text Exercise \\\"\" + exercise.getTitle() + \"\\\" (#\" + exercise.getId() + \").\");\n+\n+        // Find all submissions for Exercise\n+        List<TextSubmission> textSubmissions = textSubmissionService.getTextSubmissionsByExerciseId(exercise.getId(), true, false);\n+\n+        // We only support english languages so far, to prevent corruption of the clustering\n+        textSubmissions.removeIf(textSubmission -> textSubmission.getLanguage() != Language.ENGLISH);\n+\n+        // Athene only works with 10 or more submissions\n+        if (textSubmissions.size() >= 10) {\n+\n+            log.info(\"Calling Remote Service to calculate automatic feedback for \" + textSubmissions.size() + \" submissions.\");\n+\n+            try {\n+                final Request request = new Request(exercise.getId(), textSubmissions, ARTEMIS_SERVER_URL + ATHENE_RESULT_API_PATH + exercise.getId());\n+                Response response = connector.invokeWithRetry(API_ENDPOINT, request, authorizationHeaderForSymmetricSecret(API_SECRET), maxRetries);\n+                log.info(\"Remote Service to calculate automatic feedback responded: \" + response.detail);\n+\n+                // Register task for exercise as running, AtheneResource calls finishTask on result receive\n+                startTask(exercise.getId());\n+            }\n+            catch (NetworkingError networkingError) {\n+                log.error(\"Error while calling Remote Service\", networkingError);\n+            }\n+\n+        }\n+    }\n+\n+    /**\n+     * Processes results coming back from the Athene system via callbackUrl (see AtheneResource)\n+     * @param clusters the Map of calculated clusters to save to the database\n+     * @param blocks the list of calculated textBlocks to save to the database\n+     * @param exerciseId the exercise the automatic feedback suggestions were calculated for\n+     */\n+    @Transactional\n+    public void processResult(Map<Integer, TextCluster> clusters, List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        log.info(\"Start processing incoming Athene results\");\n+\n+        // Parse textBlocks (blocks will come as AtheneDTO.TextBlock with their submissionId and need to be parsed)\n+        List<TextBlock> textBlocks = parseTextBlocks(blocks, exerciseId);\n+\n+        // Save textBlocks in Database\n+        final Map<String, TextBlock> textBlockMap;\n+        textBlockMap = textBlockRepository.saveAll(textBlocks).stream().collect(toMap(TextBlock::getId, block -> block));\n+\n+        // Save clusters in Database\n+        processClusters(clusters, textBlockMap, exerciseId);\n+\n+        // Notify atheneService of finished task\n+        finishTask(exerciseId);\n+\n+        log.info(\"Finished processing incoming Athene results\");\n+    }\n+\n+    /**\n+     * Parse text blocks of type AtheneDTO.TextBlock to TextBlocks linked to their submission\n+     *\n+     * @param blocks The list of AtheneDTO-blocks to parse\n+     * @param exerciseId The exerciseId of the exercise the blocks belong to\n+     * @return list of TextBlocks\n+     */\n+    public List<TextBlock> parseTextBlocks(List<AtheneDTO.TextBlock> blocks, Long exerciseId) {\n+        // Create submissionsMap for lookup\n+        List<TextSubmission> submissions = textSubmissionService.getTextSubmissionsByExerciseId(exerciseId, true, false);\n+        Map<Long, TextSubmission> submissionsMap = submissions.stream().collect(toMap(/* Key: */ Submission::getId, /* Value: */ submission -> submission));\n+\n+        // Map textBlocks to submissions\n+        List<TextBlock> textBlocks = new LinkedList();\n+        for (AtheneDTO.TextBlock t : blocks) {\n+            // Convert DTO-TextBlock (including the submissionId) to TextBlock Entity\n+            TextBlock newBlock = new TextBlock();\n+            newBlock.setId(t.id);\n+            newBlock.setText(t.text);\n+            newBlock.setStartIndex(t.startIndex);\n+            newBlock.setEndIndex(t.endIndex);\n+            newBlock.automatic();\n+\n+            // take the corresponding TextSubmission and add the text blocks.\n+            // The addBlocks method also sets the submission in the textBlock\n+            submissionsMap.get(t.submissionId).addBlock(newBlock);\n+            textBlocks.add(newBlock);\n+        }\n+\n+        return textBlocks;\n+    }\n+\n+    /**\n+     * Process clusters and save to database", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjQwNg==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510442406", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String API_SECRET;\n          \n          \n            \n                private String atheneApiSecret;", "author": "krusche", "createdAt": "2020-10-22T20:38:45Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AtheneResource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.service.connectors.AtheneService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+/**\n+ * REST controller for managing Athene results.\n+ */\n+@RestController\n+@RequestMapping(Constants.ATHENE_RESULT_API_PATH)\n+@Profile(\"athene\")\n+public class AtheneResource {\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MzAyOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510443029", "bodyText": "I would turn this around to avoid null pointer exceptions in case auth is null:\nIf (!atheneApiSecret.equals(auth)) {", "author": "krusche", "createdAt": "2020-10-22T20:39:57Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/AtheneResource.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package de.tum.in.www1.artemis.web.rest;\n+\n+import static org.springframework.http.MediaType.APPLICATION_JSON_VALUE;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+\n+import de.tum.in.www1.artemis.config.Constants;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.service.connectors.AtheneService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+/**\n+ * REST controller for managing Athene results.\n+ */\n+@RestController\n+@RequestMapping(Constants.ATHENE_RESULT_API_PATH)\n+@Profile(\"athene\")\n+public class AtheneResource {\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String API_SECRET;\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneResource.class);\n+\n+    private final AtheneService atheneService;\n+\n+    public AtheneResource(AtheneService atheneService) {\n+        this.atheneService = atheneService;\n+    }\n+\n+    /**\n+     * Saves automatic textAssessments of Athene\n+     *\n+     * @param exerciseId The exerciseId of the exercise which will be saved\n+     * @param requestBody The calculation results containing blocks and clusters\n+     * @param auth The secret for authorization\n+     * @return 200 Ok if successful or 401 unauthorized if secret is wrong\n+     */\n+    @PostMapping(value = \"/{exerciseId}\", consumes = APPLICATION_JSON_VALUE)\n+    public ResponseEntity<Result> saveAtheneResult(@PathVariable Long exerciseId, @RequestBody AtheneDTO requestBody, @RequestHeader(\"Authorization\") String auth) {\n+        log.debug(\"REST call to inform about new Athene results for exercise: {}\", exerciseId);\n+\n+        // Check Authorization header\n+        if (!auth.equals(API_SECRET)) {", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MzU2Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510443563", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static class TextBlock {\n          \n          \n            \n                public static class TextBlockDTO {", "author": "krusche", "createdAt": "2020-10-22T20:40:57Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/AtheneDTO.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.tum.in.www1.artemis.web.rest.dto;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.TextBlockType;\n+import de.tum.in.www1.artemis.domain.TextCluster;\n+\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class AtheneDTO {\n+\n+    public List<TextBlock> blocks = new ArrayList<>();\n+\n+    public Map<Integer, TextCluster> clusters = new LinkedHashMap<>();\n+\n+    // Inner DTO\n+    public static class TextBlock {", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MzY3MQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510443671", "bodyText": "please use private attributes and getters and setters here", "author": "krusche", "createdAt": "2020-10-22T20:41:11Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/AtheneDTO.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.tum.in.www1.artemis.web.rest.dto;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.TextBlockType;\n+import de.tum.in.www1.artemis.domain.TextCluster;\n+\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class AtheneDTO {\n+\n+    public List<TextBlock> blocks = new ArrayList<>();\n+\n+    public Map<Integer, TextCluster> clusters = new LinkedHashMap<>();\n+\n+    // Inner DTO\n+    public static class TextBlock {\n+\n+        public String id;\n+\n+        public long submissionId;", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0Mzc1NA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510443754", "bodyText": "please use private attributes and getters and setters here", "author": "krusche", "createdAt": "2020-10-22T20:41:22Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/dto/AtheneDTO.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.tum.in.www1.artemis.web.rest.dto;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+\n+import de.tum.in.www1.artemis.domain.TextBlockType;\n+import de.tum.in.www1.artemis.domain.TextCluster;\n+\n+@JsonInclude(JsonInclude.Include.NON_EMPTY)\n+public class AtheneDTO {\n+\n+    public List<TextBlock> blocks = new ArrayList<>();", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1NjY2Mw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510456663", "bodyText": "We are not consistent with how we handle this for DTOs in the code right now. I'd argue for dump DTOs that it is unneeded to add getters/setters.", "author": "jpbernius", "createdAt": "2020-10-22T21:05:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0Mzc1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NTYwMQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510445601", "bodyText": "why do you mock the repositories and services here? Please work with the actual repositories and services and rather mock the communication with Athene using restTemplates and mockProviders. Have a look at BambooRequestMockProvider\nAlso mocks here have the disadvantage that they significantly increase the test execution time, because the Artemis server needs to be restarted before this test is executed and needs to be restarted again after this test has been executed", "author": "krusche", "createdAt": "2020-10-22T20:45:02Z", "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/AtheneServiceTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static org.apache.commons.codec.digest.DigestUtils.sha1Hex;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+import static org.mockito.Mockito.*;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+public class AtheneServiceTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    RestTemplate restTemplate;\n+\n+    @Autowired\n+    TextBlockService textBlockService;\n+\n+    @Autowired\n+    TextAssessmentQueueService textAssessmentQueueService;\n+\n+    @Mock\n+    TextExerciseRepository textExerciseRepository;", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NjcyMA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510446720", "bodyText": "I consider ReflectionTestUtils.setField bad practice here.\nInstead let the application-artemis.yml in the test folder set those values for test cases automatically", "author": "krusche", "createdAt": "2020-10-22T20:47:07Z", "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/AtheneServiceTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static org.apache.commons.codec.digest.DigestUtils.sha1Hex;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+import static org.mockito.Mockito.*;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+public class AtheneServiceTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    RestTemplate restTemplate;\n+\n+    @Autowired\n+    TextBlockService textBlockService;\n+\n+    @Autowired\n+    TextAssessmentQueueService textAssessmentQueueService;\n+\n+    @Mock\n+    TextExerciseRepository textExerciseRepository;\n+\n+    @Mock\n+    TextBlockRepository textBlockRepository;\n+\n+    @Mock\n+    TextSubmissionService textSubmissionService;\n+\n+    @Mock\n+    TextClusterRepository textClusterRepository;\n+\n+    private final String API_ENDPOINT = \"http://localhost/submit\";\n+\n+    AtheneService atheneService;\n+\n+    TextExercise exercise1;\n+\n+    /**\n+     * Initializes atheneService and example exercise\n+     */\n+    @BeforeEach\n+    public void init() {\n+        // Create atheneService and inject @Value fields\n+        atheneService = new AtheneService(textSubmissionService, textBlockRepository, textBlockService, textClusterRepository, textExerciseRepository, textAssessmentQueueService);\n+        ReflectionTestUtils.setField(atheneService, \"ARTEMIS_SERVER_URL\", ARTEMIS_SERVER_URL);", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NjgzNA==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r510446834", "bodyText": "you don't need to mock a repository. just work with the actual database by saving the above exercise to the database!", "author": "krusche", "createdAt": "2020-10-22T20:47:18Z", "path": "src/test/java/de/tum/in/www1/artemis/service/connectors/AtheneServiceTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static org.apache.commons.codec.digest.DigestUtils.sha1Hex;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+import static org.mockito.Mockito.*;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.method;\n+import static org.springframework.test.web.client.match.MockRestRequestMatchers.requestTo;\n+import static org.springframework.test.web.client.response.MockRestResponseCreators.withSuccess;\n+\n+import java.time.ZonedDateTime;\n+import java.util.*;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.*;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import org.springframework.test.web.client.ExpectedCount;\n+import org.springframework.test.web.client.MockRestServiceServer;\n+import org.springframework.web.client.RestTemplate;\n+\n+import de.tum.in.www1.artemis.AbstractSpringIntegrationBambooBitbucketJiraTest;\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.repository.*;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextBlockService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.util.ModelFactory;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+public class AtheneServiceTest extends AbstractSpringIntegrationBambooBitbucketJiraTest {\n+\n+    @Autowired\n+    RestTemplate restTemplate;\n+\n+    @Autowired\n+    TextBlockService textBlockService;\n+\n+    @Autowired\n+    TextAssessmentQueueService textAssessmentQueueService;\n+\n+    @Mock\n+    TextExerciseRepository textExerciseRepository;\n+\n+    @Mock\n+    TextBlockRepository textBlockRepository;\n+\n+    @Mock\n+    TextSubmissionService textSubmissionService;\n+\n+    @Mock\n+    TextClusterRepository textClusterRepository;\n+\n+    private final String API_ENDPOINT = \"http://localhost/submit\";\n+\n+    AtheneService atheneService;\n+\n+    TextExercise exercise1;\n+\n+    /**\n+     * Initializes atheneService and example exercise\n+     */\n+    @BeforeEach\n+    public void init() {\n+        // Create atheneService and inject @Value fields\n+        atheneService = new AtheneService(textSubmissionService, textBlockRepository, textBlockService, textClusterRepository, textExerciseRepository, textAssessmentQueueService);\n+        ReflectionTestUtils.setField(atheneService, \"ARTEMIS_SERVER_URL\", ARTEMIS_SERVER_URL);\n+        ReflectionTestUtils.setField(atheneService, \"API_ENDPOINT\", API_ENDPOINT);\n+        String API_SECRET = \"YWVuaXF1YWRpNWNlaXJpNmFlbTZkb283dXphaVF1b29oM3J1MWNoYWlyNHRoZWUzb2huZ2FpM211bGVlM0VpcAo=\";\n+        ReflectionTestUtils.setField(atheneService, \"API_SECRET\", API_SECRET);\n+\n+        // Create example exercise\n+        ZonedDateTime pastTimestamp = ZonedDateTime.now().minusDays(5);\n+        ZonedDateTime futureTimestamp = ZonedDateTime.now().plusDays(5);\n+        Course course1 = ModelFactory.generateCourse(1L, pastTimestamp, futureTimestamp, new HashSet<>(), \"tumuser\", \"tutor\", \"instructor\");\n+        course1.setRegistrationEnabled(true);\n+        exercise1 = ModelFactory.generateTextExercise(pastTimestamp, futureTimestamp, futureTimestamp, course1);\n+        exercise1.setId(1L);\n+\n+        when(textExerciseRepository.findWithEagerTeamAssignmentConfigAndCategoriesById(exercise1.getId())).thenReturn(Optional.ofNullable(exercise1));", "originalCommit": "88e97c2f2a748b7d50b67f2645fd2afed85b40ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7a476669336de0fea96eea90f17e1154cfddbb4e", "url": "https://github.com/ls1intum/Artemis/commit/7a476669336de0fea96eea90f17e1154cfddbb4e", "message": "Remove Transactional", "committedDate": "2020-10-22T20:59:37Z", "type": "commit"}, {"oid": "f50434aa39a5bb2b8362a4b2e144365dc99eaff0", "url": "https://github.com/ls1intum/Artemis/commit/f50434aa39a5bb2b8362a4b2e144365dc99eaff0", "message": "TextBlock -> TextBlockDTO", "committedDate": "2020-10-22T21:03:08Z", "type": "commit"}, {"oid": "eaa30e028b4ab6e0c1a9b2edcbdef56964f5c625", "url": "https://github.com/ls1intum/Artemis/commit/eaa30e028b4ab6e0c1a9b2edcbdef56964f5c625", "message": "Implement requested changes", "committedDate": "2020-10-22T21:18:47Z", "type": "commit"}, {"oid": "df9e430e1741a861ceb84d27b7253046d90504a7", "url": "https://github.com/ls1intum/Artemis/commit/df9e430e1741a861ceb84d27b7253046d90504a7", "message": "merge commit", "committedDate": "2020-10-22T21:30:23Z", "type": "commit"}, {"oid": "1d30963a78ea6b384a9e5c67efc67f50b4c52d6f", "url": "https://github.com/ls1intum/Artemis/commit/1d30963a78ea6b384a9e5c67efc67f50b4c52d6f", "message": "Adjust variable name", "committedDate": "2020-10-22T21:34:05Z", "type": "commit"}, {"oid": "cca0e7fd0108a07c14e4df3d838c8fb65bc25284", "url": "https://github.com/ls1intum/Artemis/commit/cca0e7fd0108a07c14e4df3d838c8fb65bc25284", "message": "Fix codacy issues", "committedDate": "2020-10-23T06:25:23Z", "type": "commit"}, {"oid": "e2ff7a55ed1e75501a23816438877082ec4587d4", "url": "https://github.com/ls1intum/Artemis/commit/e2ff7a55ed1e75501a23816438877082ec4587d4", "message": "Merge branch 'develop' into feature/athene-load-balancer\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/service/connectors/TextAssessmentConflictService.java", "committedDate": "2020-10-25T18:54:41Z", "type": "commit"}, {"oid": "0224b6737adfc32d8b9471c8da6e3307db1cbab6", "url": "https://github.com/ls1intum/Artemis/commit/0224b6737adfc32d8b9471c8da6e3307db1cbab6", "message": "added AtheneRequestMockProvider and fixed tests related to feedback conflicts", "committedDate": "2020-10-25T22:26:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA5NTQ3Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r512095476", "bodyText": "can we use a better name here and append DTO?", "author": "krusche", "createdAt": "2020-10-26T16:27:36Z", "path": "src/main/java/de/tum/in/www1/artemis/service/connectors/AtheneService.java", "diffHunk": "@@ -0,0 +1,263 @@\n+package de.tum.in.www1.artemis.service.connectors;\n+\n+import static de.tum.in.www1.artemis.config.Constants.ATHENE_RESULT_API_PATH;\n+import static de.tum.in.www1.artemis.service.connectors.RemoteArtemisServiceConnector.authorizationHeaderForSymmetricSecret;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+\n+import java.util.*;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import org.hibernate.Hibernate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.*;\n+import de.tum.in.www1.artemis.domain.enumeration.Language;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.repository.TextClusterRepository;\n+import de.tum.in.www1.artemis.repository.TextExerciseRepository;\n+import de.tum.in.www1.artemis.service.TextAssessmentQueueService;\n+import de.tum.in.www1.artemis.service.TextSubmissionService;\n+import de.tum.in.www1.artemis.web.rest.dto.AtheneDTO;\n+\n+@Service\n+@Profile(\"athene\")\n+public class AtheneService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AtheneService.class);\n+\n+    @Value(\"${server.url}\")\n+    private String artemisServerUrl;\n+\n+    @Value(\"${artemis.athene.submit-url}\")\n+    private String submitApiEndpoint;\n+\n+    @Value(\"${artemis.athene.base64-secret}\")\n+    private String apiSecret;\n+\n+    private final TextAssessmentQueueService textAssessmentQueueService;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextClusterRepository textClusterRepository;\n+\n+    private final TextExerciseRepository textExerciseRepository;\n+\n+    private final TextSubmissionService textSubmissionService;\n+\n+    private final RemoteArtemisServiceConnector<Request, Response> connector = new RemoteArtemisServiceConnector<>(log, Response.class);\n+\n+    // Contains tasks submitted to Athene and currently processing\n+    private final List<Long> runningAtheneTasks = new ArrayList<>();\n+\n+    public AtheneService(TextSubmissionService textSubmissionService, TextBlockRepository textBlockRepository, TextClusterRepository textClusterRepository,\n+            TextExerciseRepository textExerciseRepository, TextAssessmentQueueService textAssessmentQueueService) {\n+        this.textSubmissionService = textSubmissionService;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textClusterRepository = textClusterRepository;\n+        this.textExerciseRepository = textExerciseRepository;\n+        this.textAssessmentQueueService = textAssessmentQueueService;\n+    }\n+\n+    // region Request/Response DTOs\n+    private static class Request {", "originalCommit": "0224b6737adfc32d8b9471c8da6e3307db1cbab6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "653daa3acbde3fdc8943e9ae6db16404a6edc341", "url": "https://github.com/ls1intum/Artemis/commit/653daa3acbde3fdc8943e9ae6db16404a6edc341", "message": "Merge branch 'develop' into feature/athene-load-balancer", "committedDate": "2020-10-26T17:17:49Z", "type": "commit"}, {"oid": "cf9586a2322e1f01e56822427852cf3291c26721", "url": "https://github.com/ls1intum/Artemis/commit/cf9586a2322e1f01e56822427852cf3291c26721", "message": "remove obsolete FeedbackConflictServiceTest.java", "committedDate": "2020-10-26T17:19:36Z", "type": "commit"}, {"oid": "dc8dac30e8f3ca6e8cfe17f4c1830a4836a4b77e", "url": "https://github.com/ls1intum/Artemis/commit/dc8dac30e8f3ca6e8cfe17f4c1830a4836a4b77e", "message": "fixed javadoc", "committedDate": "2020-10-26T17:43:20Z", "type": "commit"}, {"oid": "abe03f8735b66a9fcc466ff085975200b7832083", "url": "https://github.com/ls1intum/Artemis/commit/abe03f8735b66a9fcc466ff085975200b7832083", "message": "fixed failing tests in AutomaticFeedbackConflictServiceTest", "committedDate": "2020-10-26T18:13:34Z", "type": "commit"}, {"oid": "b90949393df0df420409be7d9026d3970d093926", "url": "https://github.com/ls1intum/Artemis/commit/b90949393df0df420409be7d9026d3970d093926", "message": "Add Integration Test for Athene Resource", "committedDate": "2020-10-28T15:44:02Z", "type": "commit"}, {"oid": "f99ba5e6723a7e8eb8d537dd220660b240ea0e0a", "url": "https://github.com/ls1intum/Artemis/commit/f99ba5e6723a7e8eb8d537dd220660b240ea0e0a", "message": "Log Networking Error Message", "committedDate": "2020-10-28T15:45:43Z", "type": "commit"}, {"oid": "c66397137ebe4af15c16f5557a0934c3547a6f47", "url": "https://github.com/ls1intum/Artemis/commit/c66397137ebe4af15c16f5557a0934c3547a6f47", "message": "Rename Test Constant", "committedDate": "2020-10-28T15:46:49Z", "type": "commit"}, {"oid": "76407f4d7e77df7d71c77db80699abb25057430d", "url": "https://github.com/ls1intum/Artemis/commit/76407f4d7e77df7d71c77db80699abb25057430d", "message": "Merge branch 'develop' into feature/athene-load-balancer", "committedDate": "2020-10-28T15:47:20Z", "type": "commit"}, {"oid": "22687b75ed5abe451e08696bb53c715f252bab24", "url": "https://github.com/ls1intum/Artemis/commit/22687b75ed5abe451e08696bb53c715f252bab24", "message": "Fix positionInCluster save\n\nSave Text Blocks after setting them them to the cluster.\nTextCluster:setBlocks sets the positionInCluster attribute.", "committedDate": "2020-10-28T16:14:02Z", "type": "commit"}, {"oid": "95bcc556c7ba925eddba1973ccf599870b24495c", "url": "https://github.com/ls1intum/Artemis/commit/95bcc556c7ba925eddba1973ccf599870b24495c", "message": "Extend Test to detect positionInCluster", "committedDate": "2020-10-28T16:18:43Z", "type": "commit"}, {"oid": "5fc615bf554bd71d4d03ec8862410ac45b8629fb", "url": "https://github.com/ls1intum/Artemis/commit/5fc615bf554bd71d4d03ec8862410ac45b8629fb", "message": "Spotless", "committedDate": "2020-10-28T16:22:31Z", "type": "commit"}, {"oid": "5aa2f3ef4f661d3c99d1d58f919370e957560649", "url": "https://github.com/ls1intum/Artemis/commit/5aa2f3ef4f661d3c99d1d58f919370e957560649", "message": "Request/Response -> DTO", "committedDate": "2020-10-28T16:24:30Z", "type": "commit"}, {"oid": "a6c6ebe37717ba40a69a98bd9f9a5c4d03b0f619", "url": "https://github.com/ls1intum/Artemis/commit/a6c6ebe37717ba40a69a98bd9f9a5c4d03b0f619", "message": "TeadDown Test", "committedDate": "2020-10-28T20:14:20Z", "type": "commit"}, {"oid": "f40d708c97fdbdb100dc8a026f630aed8fc204bd", "url": "https://github.com/ls1intum/Artemis/commit/f40d708c97fdbdb100dc8a026f630aed8fc204bd", "message": "Try to fix InvalidDataAccessApiUsageException", "committedDate": "2020-10-28T20:32:05Z", "type": "commit"}, {"oid": "7c2538c6652bafcb0849e100fe29edf477abc957", "url": "https://github.com/ls1intum/Artemis/commit/7c2538c6652bafcb0849e100fe29edf477abc957", "message": "Add JavaDoc for Test", "committedDate": "2020-10-28T20:34:29Z", "type": "commit"}, {"oid": "31ebbfcb4a6d6add0638643340532a5cf9e9b0b9", "url": "https://github.com/ls1intum/Artemis/commit/31ebbfcb4a6d6add0638643340532a5cf9e9b0b9", "message": "Fix up Imports", "committedDate": "2020-10-28T21:02:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2MTE3Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r513761177", "bodyText": "Codacy found an issue: The instance method name 'findByParticipation_ExerciseIdAndSubmittedIsTrue' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-28T21:07:50Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/TextSubmissionRepository.java", "diffHunk": "@@ -39,4 +40,20 @@\n \n     @EntityGraph(type = LOAD, attributePaths = { \"result\", \"result.assessor\", \"blocks\" })\n     Optional<TextSubmission> findByResult_Id(Long resultId);\n+\n+    /**\n+     * Gets all TextSubmissions which are submitted and loads all blocks\n+     * @param exerciseId the Id of the exercise\n+     * @return List of Text Submissions\n+     */\n+    @EntityGraph(type = LOAD, attributePaths = { \"blocks\" })\n+    List<TextSubmission> findByParticipation_ExerciseIdAndSubmittedIsTrue(Long exerciseId);", "originalCommit": "31ebbfcb4a6d6add0638643340532a5cf9e9b0b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc2MTE4NQ==", "url": "https://github.com/ls1intum/Artemis/pull/2157#discussion_r513761185", "bodyText": "Codacy found an issue: The instance method name 'findByParticipation_ExerciseIdAndSubmittedIsTrueAndLanguage' doesn't match '[a-z][a-zA-Z0-9]*'", "author": "artemis-bot", "createdAt": "2020-10-28T21:07:51Z", "path": "src/main/java/de/tum/in/www1/artemis/repository/TextSubmissionRepository.java", "diffHunk": "@@ -39,4 +40,20 @@\n \n     @EntityGraph(type = LOAD, attributePaths = { \"result\", \"result.assessor\", \"blocks\" })\n     Optional<TextSubmission> findByResult_Id(Long resultId);\n+\n+    /**\n+     * Gets all TextSubmissions which are submitted and loads all blocks\n+     * @param exerciseId the Id of the exercise\n+     * @return List of Text Submissions\n+     */\n+    @EntityGraph(type = LOAD, attributePaths = { \"blocks\" })\n+    List<TextSubmission> findByParticipation_ExerciseIdAndSubmittedIsTrue(Long exerciseId);\n+\n+    /**\n+     * Gets all TextSubmissions which are submitted, with matching and loads all blocks\n+     * @param exerciseId the Id of the exercise\n+     * @param language language of the exercise\n+     * @return List of Text Submissions\n+     */\n+    List<TextSubmission> findByParticipation_ExerciseIdAndSubmittedIsTrueAndLanguage(Long exerciseId, Language language);", "originalCommit": "31ebbfcb4a6d6add0638643340532a5cf9e9b0b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}