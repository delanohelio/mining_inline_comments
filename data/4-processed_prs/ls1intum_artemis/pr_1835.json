{"pr_number": 1835, "pr_title": "Submission Export for Text/Modeling/FileUpload Exercises", "pr_createdAt": "2020-07-08T13:43:04Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1835", "timeline": [{"oid": "69119a270d54fb68ba405e1ff669766a119ff9be", "url": "https://github.com/ls1intum/Artemis/commit/69119a270d54fb68ba405e1ff669766a119ff9be", "message": "duplicate files from programming repo export", "committedDate": "2020-07-07T14:00:30Z", "type": "commit"}, {"oid": "cfbdf3773dd3bd8fb91a86d8f12085bbcfb70c47", "url": "https://github.com/ls1intum/Artemis/commit/cfbdf3773dd3bd8fb91a86d8f12085bbcfb70c47", "message": "declare in module\nremove not needed code", "committedDate": "2020-07-07T14:39:32Z", "type": "commit"}, {"oid": "54273f6c01ac8535476829cee69fa7e8f96ca75d", "url": "https://github.com/ls1intum/Artemis/commit/54273f6c01ac8535476829cee69fa7e8f96ca75d", "message": "add server endpoints and export service stub", "committedDate": "2020-07-07T15:29:55Z", "type": "commit"}, {"oid": "4e3118fc4ce3958f1908dbc382dfc6e475fd5c43", "url": "https://github.com/ls1intum/Artemis/commit/4e3118fc4ce3958f1908dbc382dfc6e475fd5c43", "message": "fix typo", "committedDate": "2020-07-07T15:33:17Z", "type": "commit"}, {"oid": "a2c9c49b76d5fb851857d039cb53ac564cea1598", "url": "https://github.com/ls1intum/Artemis/commit/a2c9c49b76d5fb851857d039cb53ac564cea1598", "message": "add zipping logic", "committedDate": "2020-07-07T17:54:52Z", "type": "commit"}, {"oid": "eb054af3f3fa06e7cd208c3645283b0b6bda5be2", "url": "https://github.com/ls1intum/Artemis/commit/eb054af3f3fa06e7cd208c3645283b0b6bda5be2", "message": "fix imports", "committedDate": "2020-07-07T18:33:58Z", "type": "commit"}, {"oid": "b84b32387e0a4812406a1692abd07c033eb5ffc3", "url": "https://github.com/ls1intum/Artemis/commit/b84b32387e0a4812406a1692abd07c033eb5ffc3", "message": "Merge branch 'develop' into feature/download-submissions/text-exercises", "committedDate": "2020-07-07T18:44:50Z", "type": "commit"}, {"oid": "4e66566c52b321933e4a5d4cd9eea8439b14748f", "url": "https://github.com/ls1intum/Artemis/commit/4e66566c52b321933e4a5d4cd9eea8439b14748f", "message": "fix typo", "committedDate": "2020-07-08T09:26:11Z", "type": "commit"}, {"oid": "788cf28216c83ea0b36309f5a8422ddd633aa3d4", "url": "https://github.com/ls1intum/Artemis/commit/788cf28216c83ea0b36309f5a8422ddd633aa3d4", "message": "Merge branch 'feature/download-submissions/text-exercises' of https://github.com/ls1intum/Artemis into feature/download-submissions/text-exercises", "committedDate": "2020-07-08T09:26:21Z", "type": "commit"}, {"oid": "400764068ae477d2efa3b5f10226d674480ae5d0", "url": "https://github.com/ls1intum/Artemis/commit/400764068ae477d2efa3b5f10226d674480ae5d0", "message": "Merge branch 'develop' into feature/download-submissions/text-exercises", "committedDate": "2020-07-08T09:27:11Z", "type": "commit"}, {"oid": "4a0d8a4cb9c65671f989a94fa42f95cfc1a77954", "url": "https://github.com/ls1intum/Artemis/commit/4a0d8a4cb9c65671f989a94fa42f95cfc1a77954", "message": "refactor as exercise-type independent service", "committedDate": "2020-07-08T10:23:36Z", "type": "commit"}, {"oid": "6f1c43ae0fa40ce2c2aebc92b568da4473e8b4dd", "url": "https://github.com/ls1intum/Artemis/commit/6f1c43ae0fa40ce2c2aebc92b568da4473e8b4dd", "message": "fix reference", "committedDate": "2020-07-08T10:29:33Z", "type": "commit"}, {"oid": "b7130112a5478f448c5001d86eaf4c0a3ff446fb", "url": "https://github.com/ls1intum/Artemis/commit/b7130112a5478f448c5001d86eaf4c0a3ff446fb", "message": "move logic to export service", "committedDate": "2020-07-08T10:39:34Z", "type": "commit"}, {"oid": "44aea976eea92718dae0cbb70646863ee370caed", "url": "https://github.com/ls1intum/Artemis/commit/44aea976eea92718dae0cbb70646863ee370caed", "message": "add modeling export service", "committedDate": "2020-07-08T10:46:56Z", "type": "commit"}, {"oid": "5f715282dc11101dda52b390917934e5b092adb6", "url": "https://github.com/ls1intum/Artemis/commit/5f715282dc11101dda52b390917934e5b092adb6", "message": "java formatting", "committedDate": "2020-07-08T10:47:48Z", "type": "commit"}, {"oid": "67dc5b6a2ce077ff50a98b9fbd4db756700bc243", "url": "https://github.com/ls1intum/Artemis/commit/67dc5b6a2ce077ff50a98b9fbd4db756700bc243", "message": "js formatting", "committedDate": "2020-07-08T10:48:52Z", "type": "commit"}, {"oid": "e5a8915de1da119b3a7e8ab6a2bd6d71ca8f0eeb", "url": "https://github.com/ls1intum/Artemis/commit/e5a8915de1da119b3a7e8ab6a2bd6d71ca8f0eeb", "message": "fix module declaration", "committedDate": "2020-07-08T10:50:59Z", "type": "commit"}, {"oid": "b742e7828eb3b3f9f51e6a7656f0d542929a0554", "url": "https://github.com/ls1intum/Artemis/commit/b742e7828eb3b3f9f51e6a7656f0d542929a0554", "message": "add correct translations", "committedDate": "2020-07-08T11:19:45Z", "type": "commit"}, {"oid": "05599ae1eb9d192a2336f70135f22e21e2768566", "url": "https://github.com/ls1intum/Artemis/commit/05599ae1eb9d192a2336f70135f22e21e2768566", "message": "fix id check", "committedDate": "2020-07-08T12:44:39Z", "type": "commit"}, {"oid": "58ccc0c3543e3dddd0325ea69c491c21f4bf1b76", "url": "https://github.com/ls1intum/Artemis/commit/58ccc0c3543e3dddd0325ea69c491c21f4bf1b76", "message": "use submissions directly", "committedDate": "2020-07-08T13:21:40Z", "type": "commit"}, {"oid": "524dc3f288a92d67e5a08b575c1523c5db7a7e2f", "url": "https://github.com/ls1intum/Artemis/commit/524dc3f288a92d67e5a08b575c1523c5db7a7e2f", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises", "committedDate": "2020-07-08T13:43:19Z", "type": "commit"}, {"oid": "6c829cbcaf78e71a8fdf61140d5d532229cea6b1", "url": "https://github.com/ls1intum/Artemis/commit/6c829cbcaf78e71a8fdf61140d5d532229cea6b1", "message": "fix reference", "committedDate": "2020-07-08T13:45:57Z", "type": "commit"}, {"oid": "bf3227d782851ba5ce08880f1c80460ba089dc35", "url": "https://github.com/ls1intum/Artemis/commit/bf3227d782851ba5ce08880f1c80460ba089dc35", "message": "fix url path", "committedDate": "2020-07-08T14:02:10Z", "type": "commit"}, {"oid": "1a573f1ab05616171084a39bd30f8ce8ff3e690c", "url": "https://github.com/ls1intum/Artemis/commit/1a573f1ab05616171084a39bd30f8ce8ff3e690c", "message": "add java docs", "committedDate": "2020-07-08T14:02:17Z", "type": "commit"}, {"oid": "2689496851787d5803b357e4d99ffcee4c2dfbe2", "url": "https://github.com/ls1intum/Artemis/commit/2689496851787d5803b357e4d99ffcee4c2dfbe2", "message": "fix module declaration", "committedDate": "2020-07-08T14:16:52Z", "type": "commit"}, {"oid": "6aecbfc5c2b9820f050ee6f88cfd9bfe2b9a7b09", "url": "https://github.com/ls1intum/Artemis/commit/6aecbfc5c2b9820f050ee6f88cfd9bfe2b9a7b09", "message": "fix formatting", "committedDate": "2020-07-08T14:48:27Z", "type": "commit"}, {"oid": "26d589e3fe784065f6a7fa1352b3a7734a27177d", "url": "https://github.com/ls1intum/Artemis/commit/26d589e3fe784065f6a7fa1352b3a7734a27177d", "message": "fix service declaration", "committedDate": "2020-07-08T14:53:28Z", "type": "commit"}, {"oid": "24b85ff7ca8e7a85d35ea64ac7d8f1680768da10", "url": "https://github.com/ls1intum/Artemis/commit/24b85ff7ca8e7a85d35ea64ac7d8f1680768da10", "message": "fix modeling service", "committedDate": "2020-07-08T15:09:38Z", "type": "commit"}, {"oid": "cbca9e139d49a289f306bd4370f342ff410a5884", "url": "https://github.com/ls1intum/Artemis/commit/cbca9e139d49a289f306bd4370f342ff410a5884", "message": "fix double slash", "committedDate": "2020-07-08T16:00:35Z", "type": "commit"}, {"oid": "e5851f89f3792aa8ca4d439ff056458929bb7391", "url": "https://github.com/ls1intum/Artemis/commit/e5851f89f3792aa8ca4d439ff056458929bb7391", "message": "create directories for files", "committedDate": "2020-07-08T16:45:56Z", "type": "commit"}, {"oid": "52c591596d0565a039511dd6ae17d9c03a6619b4", "url": "https://github.com/ls1intum/Artemis/commit/52c591596d0565a039511dd6ae17d9c03a6619b4", "message": "adjust filenames", "committedDate": "2020-07-08T17:28:10Z", "type": "commit"}, {"oid": "2a0b50dbd9311773df038614932ae21cf3203d21", "url": "https://github.com/ls1intum/Artemis/commit/2a0b50dbd9311773df038614932ae21cf3203d21", "message": "set success message", "committedDate": "2020-07-08T18:03:30Z", "type": "commit"}, {"oid": "06182958274676751262dfbab013c0f77f026c83", "url": "https://github.com/ls1intum/Artemis/commit/06182958274676751262dfbab013c0f77f026c83", "message": "handle empty results", "committedDate": "2020-07-08T18:03:42Z", "type": "commit"}, {"oid": "4e685c37fc62729e348d322703c53c481644c49d", "url": "https://github.com/ls1intum/Artemis/commit/4e685c37fc62729e348d322703c53c481644c49d", "message": "specify error message", "committedDate": "2020-07-08T18:09:06Z", "type": "commit"}, {"oid": "c8ce776dca30d480fb72c7b285d96bc327742061", "url": "https://github.com/ls1intum/Artemis/commit/c8ce776dca30d480fb72c7b285d96bc327742061", "message": "add support for file upload exercises", "committedDate": "2020-07-08T18:58:08Z", "type": "commit"}, {"oid": "12e2c0169b96bf0271e65d321ab2e7bd5cac6cb1", "url": "https://github.com/ls1intum/Artemis/commit/12e2c0169b96bf0271e65d321ab2e7bd5cac6cb1", "message": "add basic text & modeling integration tests", "committedDate": "2020-07-08T20:17:50Z", "type": "commit"}, {"oid": "5aaa1d533ef8df7ba72b7eb67b4255f63fbe1209", "url": "https://github.com/ls1intum/Artemis/commit/5aaa1d533ef8df7ba72b7eb67b4255f63fbe1209", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises", "committedDate": "2020-07-09T09:01:41Z", "type": "commit"}, {"oid": "531efe4da96470b76cb4c53c6fdc9d921ad66eb8", "url": "https://github.com/ls1intum/Artemis/commit/531efe4da96470b76cb4c53c6fdc9d921ad66eb8", "message": "fix file upload exports", "committedDate": "2020-07-10T09:35:54Z", "type": "commit"}, {"oid": "8dffbd4ef37cf9d3d3fd1135b13540734b000c4c", "url": "https://github.com/ls1intum/Artemis/commit/8dffbd4ef37cf9d3d3fd1135b13540734b000c4c", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises", "committedDate": "2020-07-10T12:50:38Z", "type": "commit"}, {"oid": "a0a0403831a238029e08ffc5341d496fd738732e", "url": "https://github.com/ls1intum/Artemis/commit/a0a0403831a238029e08ffc5341d496fd738732e", "message": "add file upload export tests", "committedDate": "2020-07-10T12:52:46Z", "type": "commit"}, {"oid": "3819973b153f3f65f7e61198c5b4942c14efa14c", "url": "https://github.com/ls1intum/Artemis/commit/3819973b153f3f65f7e61198c5b4942c14efa14c", "message": "Merge branch 'feature/download-submissions/modeling-exercises' of https://github.com/ls1intum/Artemis into feature/download-submissions/modeling-exercises", "committedDate": "2020-07-10T12:53:15Z", "type": "commit"}, {"oid": "723144a5aa43cc6147471925ee15811a77160fcd", "url": "https://github.com/ls1intum/Artemis/commit/723144a5aa43cc6147471925ee15811a77160fcd", "message": "java formatting", "committedDate": "2020-07-10T13:06:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0MjU0Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452842546", "bodyText": "Use { }", "author": "kloessst", "createdAt": "2020-07-10T13:27:24Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2NDQ4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452864481", "bodyText": "Returning an Optional might be safer for the caller", "author": "kloessst", "createdAt": "2020-07-10T14:04:27Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg2NTEyNw==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452865127", "bodyText": "See above", "author": "kloessst", "createdAt": "2020-07-10T14:05:28Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg3MTA0OQ==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452871049", "bodyText": "Use { }", "author": "kloessst", "createdAt": "2020-07-10T14:15:18Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MzQ1NA==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452893454", "bodyText": "You could move this to outside the lambda as submissionsFolderPath has to be created only once.", "author": "kloessst", "createdAt": "2020-07-10T14:52:00Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NDIxMA==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452894210", "bodyText": "Could use Optional", "author": "kloessst", "createdAt": "2020-07-10T14:53:16Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    log.error(\"Couldn't create dir: \" + parent);\n+                    return Optional.<Path>empty();\n+                }\n+\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \"for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();\n+            }\n+\n+        }).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+\n+        if (submissionFilePaths.isEmpty())\n+            return null;", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkwOTUyNg==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452909526", "bodyText": "Would be nice if we could issue a warning in the UI if something went wrong and some submissions might be missing. But I guess this is out of scope.", "author": "kloessst", "createdAt": "2020-07-10T15:18:33Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    log.error(\"Couldn't create dir: \" + parent);\n+                    return Optional.<Path>empty();\n+                }\n+\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \"for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNTA0Ng==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452925046", "bodyText": "Shouldn't this folder already exist because zipFilePath parent is \".../zippedSubmissions\" and submissionFolderPath was already created and contains the path segment \".../zippedSubmissions\"?", "author": "kloessst", "createdAt": "2020-07-10T15:46:06Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    log.error(\"Couldn't create dir: \" + parent);\n+                    return Optional.<Path>empty();\n+                }\n+\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \"for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();\n+            }\n+\n+        }).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+\n+        if (submissionFilePaths.isEmpty())\n+            return null;\n+\n+        try {\n+\n+            File parent = zipFilePath.getParent().toFile();", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzMTUxNw==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452931517", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param paths the paths that should be zipped\n          \n          \n            \n                 * @param paths the paths that should be zipped\n          \n          \n            \n                 * @param pathsRoot the root path relative to <code>paths</code>", "author": "kloessst", "createdAt": "2020-07-10T15:57:35Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,249 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    public File exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty())\n+            return null;\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return null;\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    @Nullable\n+    private File createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter) throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null)\n+                return Optional.<Path>empty();\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+\n+                File parent = submissionFilePath.getParent().toFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    log.error(\"Couldn't create dir: \" + parent);\n+                    return Optional.<Path>empty();\n+                }\n+\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \"for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();\n+            }\n+\n+        }).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+\n+        if (submissionFilePaths.isEmpty())\n+            return null;\n+\n+        try {\n+\n+            File parent = zipFilePath.getParent().toFile();\n+            if (!parent.exists() && !parent.mkdirs()) {\n+                log.error(\"Couldn't create dir: \" + parent);\n+                return null;\n+            }\n+\n+            createZipFile(zipFilePath, submissionFilePaths, submissionsFolderPath);\n+        }\n+        finally {\n+            deleteTempFiles(submissionFilePaths);\n+        }\n+\n+        scheduleForDeletion(zipFilePath, 15);\n+\n+        return zipFilePath.toFile();\n+    }\n+\n+    protected abstract void saveSubmissionToFile(Exercise exercise, Submission submission, File file) throws IOException;\n+\n+    protected abstract String getFileEndingForSubmission(Submission submission);\n+\n+    /**\n+     * Create a zipfile of the given paths and save it in the zipFilePath\n+     *\n+     * @param zipFilePath path where the zip file should be saved\n+     * @param paths the paths that should be zipped", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NzcxMA==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452947710", "bodyText": "Should also check this on the server. if submissionExportOptions.exportAllParticipants is true but the user is just TA return forbidden()", "author": "kloessst", "createdAt": "2020-07-10T16:28:28Z", "path": "src/main/webapp/app/exercises/shared/submission-export/submission-export-dialog.component.html", "diffHunk": "@@ -0,0 +1,69 @@\n+<form *ngIf=\"!isLoading; else loadingContainer\" name=\"exportForm\" role=\"form\" (ngSubmit)=\"exportSubmissions(exercise.id)\" #exportForm=\"ngForm\">\n+    <div class=\"modal-header\">\n+        <h4 class=\"modal-title\" jhiTranslate=\"instructorDashboard.exportSubmissions.title\">Confirm export operation</h4>\n+        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"clear()\">&times;</button>\n+    </div>\n+    <div class=\"modal-body\">\n+        <jhi-alert-error></jhi-alert-error>\n+        <p [jhiTranslate]=\"'instructorDashboard.exportSubmissions.question'\" [translateValues]=\"{ exerciseTitle: exercise.title, courseTitle: exercise.course?.title }\">\n+            Confirm export\n+        </p>\n+        <textarea\n+            name=\"studentIds\"\n+            class=\"export-textarea\"\n+            [(ngModel)]=\"submissionExportOptions.participantIdentifierList\"\n+            required\n+            [disabled]=\"submissionExportOptions.exportAllParticipants\"\n+        ></textarea>\n+\n+        <!--\n+        Only show download all checkbox for instructors & admins.", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1MTAwNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452951005", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        [disabled]=\"!submissionExportOptions.participantIdentifierList && !submissionExportOptions.exportAllParticipants && !exportInProgress\"\n          \n          \n            \n                        [disabled]=\"(!submissionExportOptions.participantIdentifierList && !submissionExportOptions.exportAllParticipants) || exportInProgress\"", "author": "kloessst", "createdAt": "2020-07-10T16:34:52Z", "path": "src/main/webapp/app/exercises/shared/submission-export/submission-export-dialog.component.html", "diffHunk": "@@ -0,0 +1,69 @@\n+<form *ngIf=\"!isLoading; else loadingContainer\" name=\"exportForm\" role=\"form\" (ngSubmit)=\"exportSubmissions(exercise.id)\" #exportForm=\"ngForm\">\n+    <div class=\"modal-header\">\n+        <h4 class=\"modal-title\" jhiTranslate=\"instructorDashboard.exportSubmissions.title\">Confirm export operation</h4>\n+        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" (click)=\"clear()\">&times;</button>\n+    </div>\n+    <div class=\"modal-body\">\n+        <jhi-alert-error></jhi-alert-error>\n+        <p [jhiTranslate]=\"'instructorDashboard.exportSubmissions.question'\" [translateValues]=\"{ exerciseTitle: exercise.title, courseTitle: exercise.course?.title }\">\n+            Confirm export\n+        </p>\n+        <textarea\n+            name=\"studentIds\"\n+            class=\"export-textarea\"\n+            [(ngModel)]=\"submissionExportOptions.participantIdentifierList\"\n+            required\n+            [disabled]=\"submissionExportOptions.exportAllParticipants\"\n+        ></textarea>\n+\n+        <!--\n+        Only show download all checkbox for instructors & admins.\n+        -->\n+        <ng-container>\n+            <div *jhiHasAnyAuthority=\"['ROLE_ADMIN', 'ROLE_INSTRUCTOR']\" class=\"checkbox\">\n+                <label class=\"control-label\">\n+                    <input type=\"checkbox\" name=\"allStudents\" [(ngModel)]=\"submissionExportOptions.exportAllParticipants\" />\n+                    <strong [jhiTranslate]=\"'instructorDashboard.exportSubmissions.downloadAllStudents'\">\n+                        Or download the submissions of all students }}\n+                    </strong>\n+                </label>\n+            </div>\n+        </ng-container>\n+        <ng-container>\n+            <div class=\"checkbox\">\n+                <label class=\"control-label\">\n+                    <input type=\"checkbox\" name=\"filterLateSubmissions\" [(ngModel)]=\"this.submissionExportOptions.filterLateSubmissions\" />\n+                    <strong jhiTranslate=\"instructorDashboard.exportSubmissions.filterLateSubmissions\">Filter late submissions</strong>\n+                </label>\n+            </div>\n+            <div class=\"form-group\">\n+                <strong jhiTranslate=\"instructorDashboard.exportSubmissions.filterLateSubmissionsDate\"\n+                    >Date for filter late submissions (defaults to exercise due date if not set)</strong\n+                >\n+                <jhi-date-time-picker\n+                    [(ngModel)]=\"this.submissionExportOptions.filterLateSubmissionsDate\"\n+                    [disabled]=\"!this.submissionExportOptions.filterLateSubmissions\"\n+                    name=\"filterLateSubmissionsDate\"\n+                ></jhi-date-time-picker>\n+            </div>\n+        </ng-container>\n+    </div>\n+    <div class=\"modal-footer\">\n+        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" (click)=\"clear()\">\n+            <span class=\"glyphicon glyphicon-ban-circle\"></span>&nbsp;<span jhiTranslate=\"entity.action.cancel\">Cancel</span>\n+        </button>\n+        <button\n+            type=\"submit\"\n+            [disabled]=\"!submissionExportOptions.participantIdentifierList && !submissionExportOptions.exportAllParticipants && !exportInProgress\"", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1Nzc4Mg==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r452957782", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        \"question\": \"Tragen sie hier alle Kennungen der Studenten ein, die heruntergeladen werden sollen getrennt durch ein Komma (z.B. ga87fix,ga63dut)\",\n          \n          \n            \n                        \"question\": \"Tragen sie hier alle Kennungen der Studenten getrennt durch ein Komma ein, deren Abgaben heruntergeladen werden sollen (z.B. ga87fix,ga63dut)\",", "author": "kloessst", "createdAt": "2020-07-10T16:48:45Z", "path": "src/main/webapp/i18n/de/instructorDashboard.json", "diffHunk": "@@ -34,6 +34,14 @@\n             \"timeWarning\": \"<b>Achtung:</b> Diese Aktion kann abh\u00e4ngig von Gr\u00f6\u00dfe und Anzahl der Repositories mehrere Minuten dauern.\"\n         },\n         \"exportCSV\": \"Als CSV exportieren\",\n+        \"exportSubmissions\": {\n+            \"title\": \"Abgaben exportieren\",\n+            \"downloadAllStudents\": \"Oder lade die Abgaben aller Studenten herunter\",\n+            \"question\": \"Tragen sie hier alle Kennungen der Studenten ein, die heruntergeladen werden sollen getrennt durch ein Komma (z.B. ga87fix,ga63dut)\",", "originalCommit": "723144a5aa43cc6147471925ee15811a77160fcd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "85b016d80a4400ca7da3b784100a6b099e96dc7b", "url": "https://github.com/ls1intum/Artemis/commit/85b016d80a4400ca7da3b784100a6b099e96dc7b", "message": "proposed changes", "committedDate": "2020-07-10T21:10:26Z", "type": "commit"}, {"oid": "21c759c78045e39d8b89393ae76887e1616236d6", "url": "https://github.com/ls1intum/Artemis/commit/21c759c78045e39d8b89393ae76887e1616236d6", "message": "fix null submissions", "committedDate": "2020-07-11T12:57:04Z", "type": "commit"}, {"oid": "1183100c63e62e7c3bf9734a6e4a5c41fcc0bfd9", "url": "https://github.com/ls1intum/Artemis/commit/1183100c63e62e7c3bf9734a6e4a5c41fcc0bfd9", "message": "fix missing translation", "committedDate": "2020-07-11T13:07:06Z", "type": "commit"}, {"oid": "640db77285f34cfa639273aee7652687e24a9cf2", "url": "https://github.com/ls1intum/Artemis/commit/640db77285f34cfa639273aee7652687e24a9cf2", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises", "committedDate": "2020-07-11T13:07:28Z", "type": "commit"}, {"oid": "686abfc02382d55235cf1d469cd46cc19b9c7a90", "url": "https://github.com/ls1intum/Artemis/commit/686abfc02382d55235cf1d469cd46cc19b9c7a90", "message": "java code style", "committedDate": "2020-07-12T10:09:49Z", "type": "commit"}, {"oid": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "url": "https://github.com/ls1intum/Artemis/commit/ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises", "committedDate": "2020-07-12T10:11:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzNzk3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453337975", "bodyText": "Please use { and }.", "author": "sleiss", "createdAt": "2020-07-12T16:40:49Z", "path": "src/main/java/de/tum/in/www1/artemis/service/FileUploadSubmissionExportService.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.FileUploadSubmission;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+\n+@Service\n+public class FileUploadSubmissionExportService extends SubmissionExportService {\n+\n+    public FileUploadSubmissionExportService(ExerciseRepository exerciseRepository) {\n+        super(exerciseRepository);\n+    }\n+\n+    @Override\n+    protected void saveSubmissionToFile(Exercise exercise, Submission submission, File file) throws IOException {\n+\n+        if (((FileUploadSubmission) submission).getFilePath() == null) {\n+            throw new IOException(\"Could not find uploaded file for submission.\");\n+        }\n+\n+        // we need to get the 'real' file path here, the submission only has the api url path\n+        String filePath = FileUploadSubmission.buildFilePath(exercise.getId(), submission.getId());\n+        String[] apiFilePathParts = ((FileUploadSubmission) submission).getFilePath().split(\"/\");\n+\n+        Path submissionPath = Path.of(filePath, apiFilePathParts[apiFilePathParts.length - 1]);\n+\n+        if (!submissionPath.toFile().exists()) // throw if submission file does not exist", "originalCommit": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODAyNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338025", "bodyText": "Please use { and }.", "author": "sleiss", "createdAt": "2020-07-12T16:41:23Z", "path": "src/main/java/de/tum/in/www1/artemis/service/ModelingSubmissionExportService.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.modeling.ModelingSubmission;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+\n+@Service\n+public class ModelingSubmissionExportService extends SubmissionExportService {\n+\n+    public ModelingSubmissionExportService(ExerciseRepository exerciseRepository) {\n+        super(exerciseRepository);\n+    }\n+\n+    @Override\n+    protected void saveSubmissionToFile(Exercise exercise, Submission submission, File file) throws IOException {\n+        if (((ModelingSubmission) submission).getModel() == null) {\n+            if (!file.exists())", "originalCommit": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODEzNQ==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338135", "bodyText": "Please use { and }.", "author": "sleiss", "createdAt": "2020-07-12T16:42:25Z", "path": "src/main/java/de/tum/in/www1/artemis/service/SubmissionExportService.java", "diffHunk": "@@ -0,0 +1,242 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Course;\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.participation.StudentParticipation;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+import de.tum.in.www1.artemis.web.rest.dto.SubmissionExportOptionsDTO;\n+\n+@Service\n+public abstract class SubmissionExportService {\n+\n+    private final Logger log = LoggerFactory.getLogger(SubmissionExportService.class);\n+\n+    private final ExerciseRepository exerciseRepository;\n+\n+    public SubmissionExportService(ExerciseRepository exerciseRepository) {\n+        this.exerciseRepository = exerciseRepository;\n+    }\n+\n+    @Value(\"${artemis.submission-export-path}\")\n+    private String SUBMISSION_EXPORT_PATH;\n+\n+    /**\n+     * Exports student submissions to a zip file for an exercise\n+     * @param exerciseId the id of the exercise to be exported\n+     * @param submissionExportOptions the options for the expot\n+     * @return a reference to the zipped file\n+     * @throws IOException\n+     */\n+    public Optional<File> exportStudentSubmissions(Long exerciseId, SubmissionExportOptionsDTO submissionExportOptions) throws IOException {\n+\n+        Optional<Exercise> exerciseOpt = exerciseRepository.findWithEagerStudentParticipationsStudentAndSubmissionsById(exerciseId);\n+\n+        if (exerciseOpt.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        Exercise exercise = exerciseOpt.get();\n+\n+        // Select the participations that should be exported\n+        List<StudentParticipation> exportedStudentParticipations;\n+\n+        if (submissionExportOptions.isExportAllParticipants()) {\n+            exportedStudentParticipations = new ArrayList<>(exercise.getStudentParticipations());\n+        }\n+        else {\n+            List<String> participantIds = Arrays.stream(submissionExportOptions.getParticipantIdentifierList().split(\",\")).map(String::trim).collect(Collectors.toList());\n+\n+            exportedStudentParticipations = exercise.getStudentParticipations().stream().filter(participation -> participantIds.contains(participation.getParticipantIdentifier()))\n+                    .collect(Collectors.toList());\n+        }\n+\n+        if (exportedStudentParticipations.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        ZonedDateTime filterLateSubmissionsDate = null;\n+        if (submissionExportOptions.isFilterLateSubmissions()) {\n+            if (submissionExportOptions.getFilterLateSubmissionsDate() == null) {\n+                filterLateSubmissionsDate = exercise.getDueDate();\n+            }\n+            else {\n+                filterLateSubmissionsDate = submissionExportOptions.getFilterLateSubmissionsDate();\n+            }\n+        }\n+\n+        return this.createZipFileFromParticipations(exercise, exportedStudentParticipations, filterLateSubmissionsDate);\n+\n+    }\n+\n+    /**\n+     * Creates a zip file from a list of participations for an exercise\n+     * @param exercise the exercise in question\n+     * @param participations a list of participations to include\n+     * @param lateSubmissionFilter an optional date filter for submissions\n+     * @return the zipped file\n+     * @throws IOException\n+     */\n+    private Optional<File> createZipFileFromParticipations(Exercise exercise, List<StudentParticipation> participations, @Nullable ZonedDateTime lateSubmissionFilter)\n+            throws IOException {\n+\n+        Course course = exercise.getCourseViaExerciseGroupOrCourseMember();\n+\n+        String zipGroupName = course.getTitle() + \"-\" + exercise.getTitle() + \"-submissions\";\n+        String zipFileName = zipGroupName + \"-\" + ZonedDateTime.now(ZoneOffset.UTC).format(DateTimeFormatter.ISO_INSTANT) + \".zip\";\n+\n+        Path submissionsFolderPath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipGroupName);\n+        Path zipFilePath = Paths.get(SUBMISSION_EXPORT_PATH, \"zippedSubmissions\", zipFileName);\n+\n+        File submissionFolder = submissionsFolderPath.toFile();\n+        if (!submissionFolder.exists() && !submissionFolder.mkdirs()) {\n+            log.error(\"Couldn't create dir: \" + submissionFolder);\n+            return Optional.empty();\n+        }\n+\n+        // Save all Submissions\n+        List<Path> submissionFilePaths = participations.stream().map((participation) -> {\n+\n+            Set<Submission> submissions = participation.getSubmissions();\n+            Submission latestSubmission = null;\n+\n+            for (Submission s : submissions) {\n+                if (lateSubmissionFilter == null || s.getSubmissionDate().isBefore(lateSubmissionFilter)) {\n+                    if (latestSubmission == null || s.getSubmissionDate().isAfter(latestSubmission.getSubmissionDate())) {\n+                        latestSubmission = s;\n+                    }\n+                }\n+            }\n+\n+            if (latestSubmission == null) {\n+                return Optional.<Path>empty();\n+            }\n+\n+            String submissionFileName = exercise.getTitle() + \"-\" + participation.getParticipantIdentifier() + \"-\" + latestSubmission.getId()\n+                    + this.getFileEndingForSubmission(latestSubmission);\n+            Path submissionFilePath = Paths.get(submissionsFolderPath.toString(), submissionFileName);\n+\n+            try {\n+                this.saveSubmissionToFile(exercise, latestSubmission, submissionFilePath.toFile());\n+                return Optional.of(submissionFilePath);\n+            }\n+            catch (IOException ioException) {\n+                log.error(\"Could not create file \" + submissionFilePath.toString() + \" for exporting: \" + ioException.getMessage());\n+                return Optional.<Path>empty();\n+            }\n+\n+        }).filter(Optional::isPresent).map(Optional::get).collect(Collectors.toList());\n+\n+        if (submissionFilePaths.isEmpty())", "originalCommit": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODE3NQ==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338175", "bodyText": "Please use { and }.", "author": "sleiss", "createdAt": "2020-07-12T16:42:57Z", "path": "src/main/java/de/tum/in/www1/artemis/service/TextSubmissionExportService.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Exercise;\n+import de.tum.in.www1.artemis.domain.Submission;\n+import de.tum.in.www1.artemis.domain.TextSubmission;\n+import de.tum.in.www1.artemis.repository.ExerciseRepository;\n+\n+@Service\n+public class TextSubmissionExportService extends SubmissionExportService {\n+\n+    public TextSubmissionExportService(ExerciseRepository exerciseRepository) {\n+        super(exerciseRepository);\n+    }\n+\n+    @Override\n+    protected void saveSubmissionToFile(Exercise exercise, Submission submission, File file) throws IOException {\n+        if (((TextSubmission) submission).getText() == null) {\n+            if (!file.exists())", "originalCommit": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODY4MQ==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338681", "bodyText": "This check caused some problems for me during testing: If you are both instructor/admin AND tutor, you cannot download all submissions.\nI do not know if this is a real scenario in normal courses, but in test courses, this can happen.\nMaybe you should change the check to something like submissionExportOptions.isExportAllParticipants() && !authCheckService.isAtLeastInstructorInCourse.\nAlso, no error message was shown to me, so I had to check the source code to identify the issue. Maybe you can display error messages in a follow up or so.", "author": "sleiss", "createdAt": "2020-07-12T16:48:13Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/FileUploadExerciseResource.java", "diffHunk": "@@ -274,4 +284,51 @@ else if (!authCheckService.isAtLeastTeachingAssistantForExercise(fileUploadExerc\n         exerciseService.delete(exerciseId, false, false);\n         return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert(applicationName, true, ENTITY_NAME, fileUploadExercise.getTitle())).build();\n     }\n+\n+    /**\n+     * POST /file-upload-exercises/:exerciseId/export-submissions : sends exercise submissions as zip\n+     *\n+     * @param exerciseId the id of the exercise to get the repos from\n+     * @param submissionExportOptions the options that should be used for the export\n+     * @return ResponseEntity with status\n+     */\n+    @PostMapping(\"/file-upload-exercises/{exerciseId}/export-submissions\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Resource> exportSubmissions(@PathVariable long exerciseId, @RequestBody SubmissionExportOptionsDTO submissionExportOptions) {\n+\n+        Optional<FileUploadExercise> optionalFileUploadExercise = fileUploadExerciseRepository.findById(exerciseId);\n+        if (optionalFileUploadExercise.isEmpty()) {\n+            return notFound();\n+        }\n+\n+        FileUploadExercise fileUploadExercise = optionalFileUploadExercise.get();\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(fileUploadExercise)) {\n+            return forbidden();\n+        }\n+\n+        // ta's are not allowed to download all participations\n+        if (submissionExportOptions.isExportAllParticipants() && authCheckService.isTeachingAssistantInCourse(fileUploadExercise.getCourseViaExerciseGroupOrCourseMember(), null)) {", "originalCommit": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzODY5Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1835#discussion_r453338697", "bodyText": "See above.", "author": "sleiss", "createdAt": "2020-07-12T16:48:29Z", "path": "src/main/java/de/tum/in/www1/artemis/web/rest/ModelingExerciseResource.java", "diffHunk": "@@ -340,4 +351,50 @@ public ModelingExerciseResource(ModelingExerciseRepository modelingExerciseRepos\n         return ResponseEntity.created(new URI(\"/api/modeling-exercises/\" + newExercise.getId()))\n                 .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, newExercise.getId().toString())).body((ModelingExercise) newExercise);\n     }\n+\n+    /**\n+     * POST /modeling-exercises/:exerciseId/export-submissions : sends exercise submissions as zip\n+     *\n+     * @param exerciseId the id of the exercise to get the repos from\n+     * @param submissionExportOptions the options that should be used for the export\n+     * @return ResponseEntity with status\n+     */\n+    @PostMapping(\"/modeling-exercises/{exerciseId}/export-submissions\")\n+    @PreAuthorize(\"hasAnyRole('TA', 'INSTRUCTOR', 'ADMIN')\")\n+    public ResponseEntity<Resource> exportSubmissions(@PathVariable long exerciseId, @RequestBody SubmissionExportOptionsDTO submissionExportOptions) {\n+\n+        Optional<ModelingExercise> optionalModelingExercise = modelingExerciseRepository.findById(exerciseId);\n+        if (optionalModelingExercise.isEmpty()) {\n+            return notFound();\n+        }\n+        ModelingExercise modelingExercise = optionalModelingExercise.get();\n+\n+        if (!authCheckService.isAtLeastTeachingAssistantForExercise(modelingExercise)) {\n+            return forbidden();\n+        }\n+\n+        // ta's are not allowed to download all participations\n+        if (submissionExportOptions.isExportAllParticipants() && authCheckService.isTeachingAssistantInCourse(modelingExercise.getCourseViaExerciseGroupOrCourseMember(), null)) {", "originalCommit": "ce3cc6c0bb94d75070e9519a0216c784e5feef5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f8c3633e50915c8c740064a79575550c95fdb712", "url": "https://github.com/ls1intum/Artemis/commit/f8c3633e50915c8c740064a79575550c95fdb712", "message": "suggested changes", "committedDate": "2020-07-12T17:21:49Z", "type": "commit"}, {"oid": "178586331a717b30c834c3e54794a4a306a15124", "url": "https://github.com/ls1intum/Artemis/commit/178586331a717b30c834c3e54794a4a306a15124", "message": "Update src/main/webapp/i18n/de/instructorDashboard.json\n\nCo-authored-by: Stefan Kl\u00f6ss-Schuster <16407766+kloessst@users.noreply.github.com>", "committedDate": "2020-07-12T18:03:55Z", "type": "commit"}, {"oid": "94b4fe5908f35e909c7d48cc4986a250659b73d6", "url": "https://github.com/ls1intum/Artemis/commit/94b4fe5908f35e909c7d48cc4986a250659b73d6", "message": "Merge branch 'develop' into feature/download-submissions/modeling-exercises", "committedDate": "2020-07-12T18:10:16Z", "type": "commit"}]}