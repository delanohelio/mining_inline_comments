{"pr_number": 2580, "pr_title": "Allow sorting exercises by start date", "pr_createdAt": "2020-12-20T16:06:46Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2580", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjM5Njc2OA==", "url": "https://github.com/ls1intum/Artemis/pull/2580#discussion_r546396768", "bodyText": "Can be discussed how to handle this", "author": "1-alex98", "createdAt": "2020-12-20T16:11:03Z", "path": "src/main/webapp/app/overview/course-exercises/course-exercises.component.ts", "diffHunk": "@@ -190,7 +241,7 @@ export class CourseExercisesComponent implements OnInit, OnChanges, OnDestroy {\n                     groupedExercises[dateIndex] = {\n                         start: moment(dateValue).startOf('week'),\n                         end: moment(dateValue).endOf('week'),\n-                        isCollapsed: dateValue.isBefore(moment(), 'week'),\n+                        isCollapsed: this.sortingAttribute === this.DUE_DATE ? dateValue.isBefore(moment(), 'week') : dateValue.isBefore(moment().subtract(4, 'weeks'), 'week'),", "originalCommit": "d436466b6235a271e4f82e979811112f97434aaf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d8a2b60a611a473f9de2563c75775074c4c4a7e0", "url": "https://github.com/ls1intum/Artemis/commit/d8a2b60a611a473f9de2563c75775074c4c4a7e0", "message": "Allow sorting exercises by start date\n\nLet's the user choose on which date to sort\nFixes #2579", "committedDate": "2020-12-20T16:14:02Z", "type": "forcePushed"}, {"oid": "148cc801807368b32792ae5ca3edcc85825345ed", "url": "https://github.com/ls1intum/Artemis/commit/148cc801807368b32792ae5ca3edcc85825345ed", "message": "Allow sorting exercises by start date\n\nLet's the user choose on which date to sort\nFixes #2579\n\nAllow sorting exercises by start date\n\nLet's the user choose on which date to sort\nFixes #2579", "committedDate": "2020-12-20T16:14:45Z", "type": "forcePushed"}, {"oid": "da596275bea66e29614830769d44ed3327ed7f1b", "url": "https://github.com/ls1intum/Artemis/commit/da596275bea66e29614830769d44ed3327ed7f1b", "message": "Allow sorting exercises by start date\n\nLet's the user choose on which date to sort\nFixes #2579", "committedDate": "2020-12-20T17:22:06Z", "type": "commit"}, {"oid": "da596275bea66e29614830769d44ed3327ed7f1b", "url": "https://github.com/ls1intum/Artemis/commit/da596275bea66e29614830769d44ed3327ed7f1b", "message": "Allow sorting exercises by start date\n\nLet's the user choose on which date to sort\nFixes #2579", "committedDate": "2020-12-20T17:22:06Z", "type": "forcePushed"}, {"oid": "a8cd1a328330d132405de3cc86d93b6e6501ac3c", "url": "https://github.com/ls1intum/Artemis/commit/a8cd1a328330d132405de3cc86d93b6e6501ac3c", "message": "little refactoring of functionality and translations", "committedDate": "2021-01-15T12:57:52Z", "type": "commit"}, {"oid": "cf3199b6c9930237210853a0dadf9a523b07eb1c", "url": "https://github.com/ls1intum/Artemis/commit/cf3199b6c9930237210853a0dadf9a523b07eb1c", "message": "Merge branch 'develop' of https://github.com/ls1intum/Artemis into feature/frontend/#2579-sort-by-start-date", "committedDate": "2021-01-15T19:48:55Z", "type": "commit"}, {"oid": "44b65346cb6c2a9b7700b56c76933891ffc8b6fd", "url": "https://github.com/ls1intum/Artemis/commit/44b65346cb6c2a9b7700b56c76933891ffc8b6fd", "message": "added tests", "committedDate": "2021-01-16T10:06:05Z", "type": "commit"}, {"oid": "2d68f0b5e87bd8a1c682a0d904b1d2efa37a1021", "url": "https://github.com/ls1intum/Artemis/commit/2d68f0b5e87bd8a1c682a0d904b1d2efa37a1021", "message": "removed unreachable statement", "committedDate": "2021-01-16T10:25:28Z", "type": "commit"}, {"oid": "d4887e77d927362d7b79d4929dc984c603f69e99", "url": "https://github.com/ls1intum/Artemis/commit/d4887e77d927362d7b79d4929dc984c603f69e99", "message": "change tests", "committedDate": "2021-01-18T12:58:41Z", "type": "commit"}, {"oid": "cdc572347920a968b5b836b8132dc689cd588941", "url": "https://github.com/ls1intum/Artemis/commit/cdc572347920a968b5b836b8132dc689cd588941", "message": "change array filling code review", "committedDate": "2021-01-18T13:04:27Z", "type": "commit"}, {"oid": "1eab96776636fe79551452fa9040ecbd51bf6519", "url": "https://github.com/ls1intum/Artemis/commit/1eab96776636fe79551452fa9040ecbd51bf6519", "message": "Merge branch 'develop' into feature/frontend/#2579-sort-by-start-date", "committedDate": "2021-01-18T14:30:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYwNzc0Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2580#discussion_r559607747", "bodyText": "This is not needed in tests.", "author": "stefanwaldhauser", "createdAt": "2021-01-18T14:34:04Z", "path": "src/test/javascript/spec/component/course/course-exercises.component.spec.ts", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { CourseManagementService } from 'app/course/manage/course-management.service';\n+import { ArtemisTestModule } from '../../test.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { of } from 'rxjs/internal/observable/of';\n+import { Course } from 'app/entities/course.model';\n+import { MockComponent, MockDirective, MockPipe } from 'ng-mocks';\n+import { OrionFilterDirective } from 'app/shared/orion/orion-filter.directive';\n+import { AlertComponent } from 'app/shared/alert/alert.component';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { MockHasAnyAuthorityDirective } from '../../helpers/mocks/directive/mock-has-any-authority.directive';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { JhiSortByDirective, JhiSortDirective } from 'ng-jhipster';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\n+import { MomentModule } from 'ngx-moment';\n+import { CourseExercisesComponent, ExerciseFilter, ExerciseSortingOrder, SortingAttribute } from 'app/overview/course-exercises/course-exercises.component';\n+import { CourseExerciseRowComponent } from 'app/overview/course-exercises/course-exercise-row.component';\n+import { SidePanelComponent } from 'app/shared/side-panel/side-panel.component';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { ModelingExercise, UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { Exercise } from 'app/entities/exercise.model';\n+import { CourseScoreCalculationService } from 'app/overview/course-score-calculation.service';\n+import { stub } from 'sinon';\n+import { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\n+import * as sinon from 'sinon';\n+import * as moment from 'moment';\n+import { Subject } from 'rxjs';\n+import { MockTranslateValuesDirective } from './course-scores/course-scores.component.spec';\n+import { By } from '@angular/platform-browser';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+describe('CourseExercisesComponent', () => {\n+    let fixture: ComponentFixture<CourseExercisesComponent>;\n+    let component: CourseExercisesComponent;\n+    let service: CourseManagementService;\n+    let courseCalculation: CourseScoreCalculationService;\n+    let translateService: TranslateService;\n+    let exerciseService: ExerciseService;\n+    let localStorageService: LocalStorageService;\n+\n+    let course: Course;\n+    let exercise: Exercise;\n+    let courseCalculationSpy: sinon.SinonStub;\n+\n+    const parentRoute = ({ params: of({ courseId: '123' }) } as any) as ActivatedRoute;\n+    const route = ({ parent: parentRoute } as any) as ActivatedRoute;\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            imports: [ArtemisTestModule, RouterTestingModule.withRoutes([]), MomentModule],\n+            declarations: [\n+                CourseExercisesComponent,\n+                MockDirective(OrionFilterDirective),\n+                MockComponent(AlertComponent),\n+                MockComponent(CourseExerciseRowComponent),\n+                MockComponent(SidePanelComponent),\n+                MockDirective(MockHasAnyAuthorityDirective),\n+                MockDirective(JhiSortByDirective),\n+                MockPipe(TranslatePipe),\n+                MockDirective(JhiSortDirective),\n+                MockPipe(ArtemisDatePipe),\n+                MockDirective(DeleteButtonDirective),\n+                MockTranslateValuesDirective,\n+            ],\n+            providers: [\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                {\n+                    provide: ActivatedRoute,\n+                    useValue: route,\n+                },\n+            ],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(CourseExercisesComponent);\n+                component = fixture.componentInstance;\n+                service = TestBed.inject(CourseManagementService);\n+                courseCalculation = TestBed.inject(CourseScoreCalculationService);\n+                translateService = TestBed.inject(TranslateService);\n+                exerciseService = TestBed.inject(ExerciseService);\n+                localStorageService = TestBed.inject(LocalStorageService);\n+\n+                course = new Course();\n+                course.id = 123;\n+                exercise = new ModelingExercise(UMLDiagramType.ClassDiagram, course, undefined) as Exercise;\n+                exercise.dueDate = moment('2021-01-13T16:11:00+01:00').add(1, 'days');\n+                exercise.releaseDate = moment('2021-01-13T16:11:00+01:00').subtract(1, 'days');\n+                course.exercises = [exercise];\n+                spyOn(service, 'getCourseUpdates').and.returnValue(of(course));\n+                spyOn(translateService, 'onLangChange').and.returnValue(of(new Subject()));\n+                spyOn(localStorageService, 'retrieve').and.returnValue('OVERDUE,NEEDS_WORK');\n+                courseCalculationSpy = stub(courseCalculation, 'getCourse').returns(course);\n+\n+                fixture.detectChanges();\n+            });\n+    });\n+\n+    afterEach(() => {\n+        component.ngOnDestroy();", "originalCommit": "1eab96776636fe79551452fa9040ecbd51bf6519", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYwOTYxOA==", "url": "https://github.com/ls1intum/Artemis/pull/2580#discussion_r559609618", "bodyText": "You are not really asserting that the sorting worked here. I would expect to see some test that asserts that the sorting really happened", "author": "stefanwaldhauser", "createdAt": "2021-01-18T14:36:57Z", "path": "src/test/javascript/spec/component/course/course-exercises.component.spec.ts", "diffHunk": "@@ -0,0 +1,181 @@\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import { ComponentFixture, TestBed } from '@angular/core/testing';\n+import { CourseManagementService } from 'app/course/manage/course-management.service';\n+import { ArtemisTestModule } from '../../test.module';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import { of } from 'rxjs/internal/observable/of';\n+import { Course } from 'app/entities/course.model';\n+import { MockComponent, MockDirective, MockPipe } from 'ng-mocks';\n+import { OrionFilterDirective } from 'app/shared/orion/orion-filter.directive';\n+import { AlertComponent } from 'app/shared/alert/alert.component';\n+import { RouterTestingModule } from '@angular/router/testing';\n+import { MockHasAnyAuthorityDirective } from '../../helpers/mocks/directive/mock-has-any-authority.directive';\n+import { TranslatePipe, TranslateService } from '@ngx-translate/core';\n+import { JhiSortByDirective, JhiSortDirective } from 'ng-jhipster';\n+import { ArtemisDatePipe } from 'app/shared/pipes/artemis-date.pipe';\n+import { DeleteButtonDirective } from 'app/shared/delete-dialog/delete-button.directive';\n+import { MomentModule } from 'ngx-moment';\n+import { CourseExercisesComponent, ExerciseFilter, ExerciseSortingOrder, SortingAttribute } from 'app/overview/course-exercises/course-exercises.component';\n+import { CourseExerciseRowComponent } from 'app/overview/course-exercises/course-exercise-row.component';\n+import { SidePanelComponent } from 'app/shared/side-panel/side-panel.component';\n+import { MockTranslateService } from '../../helpers/mocks/service/mock-translate.service';\n+import { ActivatedRoute } from '@angular/router';\n+import { ModelingExercise, UMLDiagramType } from 'app/entities/modeling-exercise.model';\n+import { Exercise } from 'app/entities/exercise.model';\n+import { CourseScoreCalculationService } from 'app/overview/course-score-calculation.service';\n+import { stub } from 'sinon';\n+import { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\n+import * as sinon from 'sinon';\n+import * as moment from 'moment';\n+import { Subject } from 'rxjs';\n+import { MockTranslateValuesDirective } from './course-scores/course-scores.component.spec';\n+import { By } from '@angular/platform-browser';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+describe('CourseExercisesComponent', () => {\n+    let fixture: ComponentFixture<CourseExercisesComponent>;\n+    let component: CourseExercisesComponent;\n+    let service: CourseManagementService;\n+    let courseCalculation: CourseScoreCalculationService;\n+    let translateService: TranslateService;\n+    let exerciseService: ExerciseService;\n+    let localStorageService: LocalStorageService;\n+\n+    let course: Course;\n+    let exercise: Exercise;\n+    let courseCalculationSpy: sinon.SinonStub;\n+\n+    const parentRoute = ({ params: of({ courseId: '123' }) } as any) as ActivatedRoute;\n+    const route = ({ parent: parentRoute } as any) as ActivatedRoute;\n+\n+    beforeEach(() => {\n+        TestBed.configureTestingModule({\n+            imports: [ArtemisTestModule, RouterTestingModule.withRoutes([]), MomentModule],\n+            declarations: [\n+                CourseExercisesComponent,\n+                MockDirective(OrionFilterDirective),\n+                MockComponent(AlertComponent),\n+                MockComponent(CourseExerciseRowComponent),\n+                MockComponent(SidePanelComponent),\n+                MockDirective(MockHasAnyAuthorityDirective),\n+                MockDirective(JhiSortByDirective),\n+                MockPipe(TranslatePipe),\n+                MockDirective(JhiSortDirective),\n+                MockPipe(ArtemisDatePipe),\n+                MockDirective(DeleteButtonDirective),\n+                MockTranslateValuesDirective,\n+            ],\n+            providers: [\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+                { provide: TranslateService, useClass: MockTranslateService },\n+                {\n+                    provide: ActivatedRoute,\n+                    useValue: route,\n+                },\n+            ],\n+        })\n+            .compileComponents()\n+            .then(() => {\n+                fixture = TestBed.createComponent(CourseExercisesComponent);\n+                component = fixture.componentInstance;\n+                service = TestBed.inject(CourseManagementService);\n+                courseCalculation = TestBed.inject(CourseScoreCalculationService);\n+                translateService = TestBed.inject(TranslateService);\n+                exerciseService = TestBed.inject(ExerciseService);\n+                localStorageService = TestBed.inject(LocalStorageService);\n+\n+                course = new Course();\n+                course.id = 123;\n+                exercise = new ModelingExercise(UMLDiagramType.ClassDiagram, course, undefined) as Exercise;\n+                exercise.dueDate = moment('2021-01-13T16:11:00+01:00').add(1, 'days');\n+                exercise.releaseDate = moment('2021-01-13T16:11:00+01:00').subtract(1, 'days');\n+                course.exercises = [exercise];\n+                spyOn(service, 'getCourseUpdates').and.returnValue(of(course));\n+                spyOn(translateService, 'onLangChange').and.returnValue(of(new Subject()));\n+                spyOn(localStorageService, 'retrieve').and.returnValue('OVERDUE,NEEDS_WORK');\n+                courseCalculationSpy = stub(courseCalculation, 'getCourse').returns(course);\n+\n+                fixture.detectChanges();\n+            });\n+    });\n+\n+    afterEach(() => {\n+        component.ngOnDestroy();\n+        sinon.restore();\n+    });\n+\n+    it('should initialize', () => {\n+        expect(component.course).to.deep.equal(course);\n+        expect(courseCalculationSpy.callCount).to.equal(2);\n+        expect(courseCalculationSpy.getCall(0).calledWithExactly(course.id)).to.be.true;\n+        expect(courseCalculationSpy.getCall(1).calledWithExactly(course.id)).to.be.true;\n+    });\n+\n+    it('should invoke setSortingAttribute', () => {\n+        const sortingButton = fixture.debugElement.query(By.css('#dueDateSorting'));\n+        expect(sortingButton).to.exist;\n+        sortingButton.nativeElement.click();\n+        expect(component.sortingAttribute).to.equal(SortingAttribute.DUE_DATE);\n+    });\n+\n+    it('should react to changes', () => {\n+        spyOn(exerciseService, 'getNextExerciseForHours').and.returnValue(exercise);\n+        component.ngOnChanges();\n+        expect(component.nextRelevantExercise).to.deep.equal(exercise);\n+    });\n+\n+    it('should reorder all exercises', () => {\n+        component.sortingOrder = ExerciseSortingOrder.DESC;\n+        const sortingButton = fixture.debugElement.query(By.css('#flip'));\n+        expect(sortingButton).to.exist;\n+        sortingButton.nativeElement.click();\n+        expect(component.sortingOrder).to.equal(ExerciseSortingOrder.ASC);", "originalCommit": "1eab96776636fe79551452fa9040ecbd51bf6519", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTY1OTQ3Nw==", "url": "https://github.com/ls1intum/Artemis/pull/2580#discussion_r559659477", "bodyText": "Extended this test with some further expectations and calls, hope this hits the point what you expected (80405fb)", "author": "FuchsDominik", "createdAt": "2021-01-18T15:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1OTYwOTYxOA=="}], "type": "inlineReview"}, {"oid": "80405fbc1dea9ebf80621ffc70f83f0569ecd7bb", "url": "https://github.com/ls1intum/Artemis/commit/80405fbc1dea9ebf80621ffc70f83f0569ecd7bb", "message": "added extended flipOrder check", "committedDate": "2021-01-18T15:48:47Z", "type": "commit"}, {"oid": "0ac47ac0619a292a194f9182b03c9c04a608621d", "url": "https://github.com/ls1intum/Artemis/commit/0ac47ac0619a292a194f9182b03c9c04a608621d", "message": "Merge branch 'feature/frontend/#2579-sort-by-start-date' of https://github.com/ls1intum/Artemis into feature/frontend/#2579-sort-by-start-date", "committedDate": "2021-01-18T15:49:16Z", "type": "commit"}]}