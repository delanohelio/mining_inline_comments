{"pr_number": 2549, "pr_title": "[Chore] Improve test coverage (Programming Assessment)", "pr_createdAt": "2020-12-15T07:29:48Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/2549", "timeline": [{"oid": "3ea9b617c29dad032649baf931d7dc774294fb14", "url": "https://github.com/ls1intum/Artemis/commit/3ea9b617c29dad032649baf931d7dc774294fb14", "message": "fix bug in if block and increase test coverage", "committedDate": "2020-12-14T19:39:53Z", "type": "commit"}, {"oid": "6db0792f22cb38fd71714643651b58bd2716a8ea", "url": "https://github.com/ls1intum/Artemis/commit/6db0792f22cb38fd71714643651b58bd2716a8ea", "message": "refactor code", "committedDate": "2020-12-14T19:43:40Z", "type": "commit"}, {"oid": "1a5e3d4766eb4cf8ddd31f75979d95432d07a117", "url": "https://github.com/ls1intum/Artemis/commit/1a5e3d4766eb4cf8ddd31f75979d95432d07a117", "message": "remove unused imports", "committedDate": "2020-12-15T07:34:23Z", "type": "commit"}, {"oid": "a38e2830fb2ec0df37208e310e26cc59044f1144", "url": "https://github.com/ls1intum/Artemis/commit/a38e2830fb2ec0df37208e310e26cc59044f1144", "message": "extract method", "committedDate": "2020-12-15T07:42:27Z", "type": "commit"}, {"oid": "94bd034933595b6387345267eb3c79706a3f059c", "url": "https://github.com/ls1intum/Artemis/commit/94bd034933595b6387345267eb3c79706a3f059c", "message": "Merge branch 'develop' into chore/assessment/improve-repo-export-test", "committedDate": "2020-12-15T07:49:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NzE3MA==", "url": "https://github.com/ls1intum/Artemis/pull/2549#discussion_r543357170", "bodyText": "Are you sure participationIdList cannot be undefined?", "author": "FuchsDominik", "createdAt": "2020-12-15T13:51:46Z", "path": "src/main/webapp/app/exercises/programming/assess/repo-export/programming-assessment-repo-export-dialog.component.ts", "diffHunk": "@@ -82,7 +82,7 @@ export class ProgrammingAssessmentRepoExportDialogComponent implements OnInit {\n         }\n         this.exportInProgress = true;\n         // The participation ids take priority over the participant identifiers (student login or team names).\n-        if (this.participationIdList) {\n+        if (this.participationIdList.length) {", "originalCommit": "94bd034933595b6387345267eb3c79706a3f059c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzNjg3NA==", "url": "https://github.com/ls1intum/Artemis/pull/2549#discussion_r544236874", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (this.participationIdList.length) {\n          \n          \n            \n                    if (this.participationIdList?.length) {", "author": "krusche", "createdAt": "2020-12-16T11:51:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NzE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzNjk4Ng==", "url": "https://github.com/ls1intum/Artemis/pull/2549#discussion_r544236986", "bodyText": "might be saver to use the question mark operator here", "author": "krusche", "createdAt": "2020-12-16T11:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NzE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzODAyNA==", "url": "https://github.com/ls1intum/Artemis/pull/2549#discussion_r544238024", "bodyText": "oh no I am not. In the client test I couldn't assign undefined. But I will fix this.", "author": "derLalla", "createdAt": "2020-12-16T11:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NzE3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzOTk2MA==", "url": "https://github.com/ls1intum/Artemis/pull/2549#discussion_r544239960", "bodyText": "fixed in 6908cd8", "author": "derLalla", "createdAt": "2020-12-16T11:57:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NzE3MA=="}], "type": "inlineReview"}, {"oid": "6908cd85d14c0b02c33ca323da1fc2f7493e7862", "url": "https://github.com/ls1intum/Artemis/commit/6908cd85d14c0b02c33ca323da1fc2f7493e7862", "message": "Fix possible undefined error", "committedDate": "2020-12-16T11:55:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MjEyNA==", "url": "https://github.com/ls1intum/Artemis/pull/2549#discussion_r544252124", "bodyText": "The findExerciseId variable doesn't seem to be used. (If you need the stub statement I'd just remove the variable assignment.)", "author": "FrankeLukas", "createdAt": "2020-12-16T12:17:07Z", "path": "src/test/javascript/spec/component/programming-assessment/programming-assessment-repo-export-dialog.component.spec.ts", "diffHunk": "@@ -0,0 +1,128 @@\n+import { ComponentFixture, TestBed, tick, fakeAsync } from '@angular/core/testing';\n+import { TranslateModule } from '@ngx-translate/core';\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import { SinonStub, stub } from 'sinon';\n+import { of } from 'rxjs';\n+import { HttpResponse, HttpHeaders } from '@angular/common/http';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import * as moment from 'moment';\n+import { ArtemisTestModule } from '../../test.module';\n+import { ProgrammingAssessmentRepoExportDialogComponent } from 'app/exercises/programming/assess/repo-export/programming-assessment-repo-export-dialog.component';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { Course } from 'app/entities/course.model';\n+import { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\n+import { ProgrammingAssessmentRepoExportService } from 'app/exercises/programming/assess/repo-export/programming-assessment-repo-export.service';\n+import { ArtemisProgrammingAssessmentModule } from 'app/exercises/programming/assess/programming-assessment.module';\n+import { Exercise } from 'app/entities/exercise.model';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+const createBlobHttpResponse = () => {\n+    const blob = new Blob([JSON.stringify({ property: 'blob' })], { type: 'application/json' });\n+    const headers = new HttpHeaders().set('filename', 'blobfile');\n+    return new HttpResponse({ body: blob, headers });\n+};\n+\n+describe('ProgrammingAssessmentRepoExportDialogComponent', () => {\n+    let comp: ProgrammingAssessmentRepoExportDialogComponent;\n+    let fixture: ComponentFixture<ProgrammingAssessmentRepoExportDialogComponent>;\n+    let exerciseService: ExerciseService;\n+    let repoExportService: ProgrammingAssessmentRepoExportService;\n+\n+    // stubs\n+    let findExerciseId: SinonStub;\n+    global.URL.createObjectURL = jest.fn(() => 'http://some.test.com');\n+    global.URL.revokeObjectURL = jest.fn(() => '');\n+\n+    const exerciseId = 42;\n+    const participationIdList = [1];\n+    const singleParticipantMode = false;\n+    const programmingExercise = new ProgrammingExercise(new Course(), undefined);\n+    programmingExercise.id = exerciseId;\n+    programmingExercise.releaseDate = moment();\n+    programmingExercise.dueDate = moment().add(7, 'days');\n+\n+    beforeEach(async () => {\n+        return TestBed.configureTestingModule({\n+            imports: [TranslateModule.forRoot(), ArtemisTestModule, ArtemisProgrammingAssessmentModule],\n+            providers: [\n+                ExerciseService,\n+                ProgrammingAssessmentRepoExportService,\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+            ],\n+        })\n+            .overrideModule(ArtemisTestModule, { set: { declarations: [], exports: [] } })\n+            .compileComponents()\n+            .then(() => {\n+                // Ignore console errors\n+                console.error = () => false;\n+                fixture = TestBed.createComponent(ProgrammingAssessmentRepoExportDialogComponent);\n+                comp = fixture.componentInstance;\n+                exerciseService = fixture.debugElement.injector.get(ExerciseService);\n+                repoExportService = fixture.debugElement.injector.get(ProgrammingAssessmentRepoExportService);\n+\n+                // stubs\n+                findExerciseId = stub(exerciseService, 'find').returns(of({ body: programmingExercise } as HttpResponse<Exercise>));", "originalCommit": "6908cd85d14c0b02c33ca323da1fc2f7493e7862", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MjUwOQ==", "url": "https://github.com/ls1intum/Artemis/pull/2549#discussion_r544252509", "bodyText": "Is it necessary to fakeAsync here (without tick etc.)?", "author": "FrankeLukas", "createdAt": "2020-12-16T12:17:38Z", "path": "src/test/javascript/spec/component/programming-assessment/programming-assessment-repo-export-dialog.component.spec.ts", "diffHunk": "@@ -0,0 +1,128 @@\n+import { ComponentFixture, TestBed, tick, fakeAsync } from '@angular/core/testing';\n+import { TranslateModule } from '@ngx-translate/core';\n+import * as chai from 'chai';\n+import * as sinonChai from 'sinon-chai';\n+import { SinonStub, stub } from 'sinon';\n+import { of } from 'rxjs';\n+import { HttpResponse, HttpHeaders } from '@angular/common/http';\n+import { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n+import * as moment from 'moment';\n+import { ArtemisTestModule } from '../../test.module';\n+import { ProgrammingAssessmentRepoExportDialogComponent } from 'app/exercises/programming/assess/repo-export/programming-assessment-repo-export-dialog.component';\n+import { ProgrammingExercise } from 'app/entities/programming-exercise.model';\n+import { Course } from 'app/entities/course.model';\n+import { ExerciseService } from 'app/exercises/shared/exercise/exercise.service';\n+import { ProgrammingAssessmentRepoExportService } from 'app/exercises/programming/assess/repo-export/programming-assessment-repo-export.service';\n+import { ArtemisProgrammingAssessmentModule } from 'app/exercises/programming/assess/programming-assessment.module';\n+import { Exercise } from 'app/entities/exercise.model';\n+import { MockSyncStorage } from '../../helpers/mocks/service/mock-sync-storage.service';\n+\n+chai.use(sinonChai);\n+const expect = chai.expect;\n+\n+const createBlobHttpResponse = () => {\n+    const blob = new Blob([JSON.stringify({ property: 'blob' })], { type: 'application/json' });\n+    const headers = new HttpHeaders().set('filename', 'blobfile');\n+    return new HttpResponse({ body: blob, headers });\n+};\n+\n+describe('ProgrammingAssessmentRepoExportDialogComponent', () => {\n+    let comp: ProgrammingAssessmentRepoExportDialogComponent;\n+    let fixture: ComponentFixture<ProgrammingAssessmentRepoExportDialogComponent>;\n+    let exerciseService: ExerciseService;\n+    let repoExportService: ProgrammingAssessmentRepoExportService;\n+\n+    // stubs\n+    let findExerciseId: SinonStub;\n+    global.URL.createObjectURL = jest.fn(() => 'http://some.test.com');\n+    global.URL.revokeObjectURL = jest.fn(() => '');\n+\n+    const exerciseId = 42;\n+    const participationIdList = [1];\n+    const singleParticipantMode = false;\n+    const programmingExercise = new ProgrammingExercise(new Course(), undefined);\n+    programmingExercise.id = exerciseId;\n+    programmingExercise.releaseDate = moment();\n+    programmingExercise.dueDate = moment().add(7, 'days');\n+\n+    beforeEach(async () => {\n+        return TestBed.configureTestingModule({\n+            imports: [TranslateModule.forRoot(), ArtemisTestModule, ArtemisProgrammingAssessmentModule],\n+            providers: [\n+                ExerciseService,\n+                ProgrammingAssessmentRepoExportService,\n+                { provide: SessionStorageService, useClass: MockSyncStorage },\n+                { provide: LocalStorageService, useClass: MockSyncStorage },\n+            ],\n+        })\n+            .overrideModule(ArtemisTestModule, { set: { declarations: [], exports: [] } })\n+            .compileComponents()\n+            .then(() => {\n+                // Ignore console errors\n+                console.error = () => false;\n+                fixture = TestBed.createComponent(ProgrammingAssessmentRepoExportDialogComponent);\n+                comp = fixture.componentInstance;\n+                exerciseService = fixture.debugElement.injector.get(ExerciseService);\n+                repoExportService = fixture.debugElement.injector.get(ProgrammingAssessmentRepoExportService);\n+\n+                // stubs\n+                findExerciseId = stub(exerciseService, 'find').returns(of({ body: programmingExercise } as HttpResponse<Exercise>));\n+\n+                comp.exerciseId = exerciseId;\n+                comp.participationIdList = participationIdList;\n+                comp.singleParticipantMode = singleParticipantMode;\n+            });\n+    });\n+\n+    it('test initialization', () => {\n+        fixture.detectChanges();\n+        expect(comp.exerciseId).to.be.equal(42);\n+    });\n+\n+    it('Exerciseservice should find the correct programming exercise', fakeAsync(() => {\n+        fixture.detectChanges();\n+        expect(comp.exercise).to.be.equal(programmingExercise);\n+    }));", "originalCommit": "6908cd85d14c0b02c33ca323da1fc2f7493e7862", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}