{"pr_number": 1977, "pr_title": "Feature/automatic text/store feedback consistency", "pr_createdAt": "2020-07-27T20:00:57Z", "pr_url": "https://github.com/ls1intum/Artemis/pull/1977", "timeline": [{"oid": "724564791d58a04ba30e67de1760a208898fee08", "url": "https://github.com/ls1intum/Artemis/commit/724564791d58a04ba30e67de1760a208898fee08", "message": "liquibase change log for new table text_assessment_conflict", "committedDate": "2020-07-27T19:22:39Z", "type": "commit"}, {"oid": "6ed35ec8864052b7266034681c3578871c46fba0", "url": "https://github.com/ls1intum/Artemis/commit/6ed35ec8864052b7266034681c3578871c46fba0", "message": "TextAssessmentConflict entity class and update in Feedback entity class", "committedDate": "2020-07-27T19:23:43Z", "type": "commit"}, {"oid": "7a46c1a8fa6e08d0218c85057ca2a143c1de0e26", "url": "https://github.com/ls1intum/Artemis/commit/7a46c1a8fa6e08d0218c85057ca2a143c1de0e26", "message": "DTO classes used in communication with athene service", "committedDate": "2020-07-27T19:24:56Z", "type": "commit"}, {"oid": "0bfe42066f13058007058dd01be712ad0fb141c9", "url": "https://github.com/ls1intum/Artemis/commit/0bfe42066f13058007058dd01be712ad0fb141c9", "message": "text assessment conflict enumeration", "committedDate": "2020-07-27T19:25:37Z", "type": "commit"}, {"oid": "d080370278b2920b388c3df8b6e7a3c9410dd5f2", "url": "https://github.com/ls1intum/Artemis/commit/d080370278b2920b388c3df8b6e7a3c9410dd5f2", "message": "TextAssessmentConflictService.java service to communicate with Athene service", "committedDate": "2020-07-27T19:27:53Z", "type": "commit"}, {"oid": "dfb03143ac51a81e9443594c50080eeed620eb79", "url": "https://github.com/ls1intum/Artemis/commit/dfb03143ac51a81e9443594c50080eeed620eb79", "message": "TextAssessmentConflictRepository", "committedDate": "2020-07-27T19:28:23Z", "type": "commit"}, {"oid": "84a295b8132c33a31e1f29b724cfe3f17245b71b", "url": "https://github.com/ls1intum/Artemis/commit/84a295b8132c33a31e1f29b724cfe3f17245b71b", "message": "AutomaticTextAssessmentConflictService to make async calls to athene service", "committedDate": "2020-07-27T19:34:12Z", "type": "commit"}, {"oid": "9b8e0faa9f00b411936696c852616884f7be20b2", "url": "https://github.com/ls1intum/Artemis/commit/9b8e0faa9f00b411936696c852616884f7be20b2", "message": "call AutomaticTextAssessmentConflictService when a text assessment is submitted and automatic assessment is enabled", "committedDate": "2020-07-27T19:36:39Z", "type": "commit"}, {"oid": "d68f32df00b9e79446df8927c327dd3471fce9e4", "url": "https://github.com/ls1intum/Artemis/commit/d68f32df00b9e79446df8927c327dd3471fce9e4", "message": "fixed codacy issues", "committedDate": "2020-08-08T20:14:14Z", "type": "commit"}, {"oid": "357d44a5a1ba8ea333d612cf6be6b34fea083a81", "url": "https://github.com/ls1intum/Artemis/commit/357d44a5a1ba8ea333d612cf6be6b34fea083a81", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency\n\n# Conflicts:\n#\tsrc/main/java/de/tum/in/www1/artemis/domain/Feedback.java\n#\tsrc/main/java/de/tum/in/www1/artemis/web/rest/TextAssessmentResource.java\n#\tsrc/main/resources/config/liquibase/master.xml", "committedDate": "2020-08-10T19:37:48Z", "type": "commit"}, {"oid": "33c5c0145dd4006436330e4d9f87830be49d299f", "url": "https://github.com/ls1intum/Artemis/commit/33c5c0145dd4006436330e4d9f87830be49d299f", "message": "fixed more codacy issues", "committedDate": "2020-08-10T20:06:11Z", "type": "commit"}, {"oid": "af6802e236420174ddf83f25cf79232a58116880", "url": "https://github.com/ls1intum/Artemis/commit/af6802e236420174ddf83f25cf79232a58116880", "message": "feedback consistency url is added to application-artemis.yml", "committedDate": "2020-08-10T20:06:45Z", "type": "commit"}, {"oid": "c915f0cfd93d8f2d876c71cfb3b7d577e8c38858", "url": "https://github.com/ls1intum/Artemis/commit/c915f0cfd93d8f2d876c71cfb3b7d577e8c38858", "message": "Minor fix (get text blocks from TextBlockRepository to get cluster information)", "committedDate": "2020-08-22T14:10:59Z", "type": "commit"}, {"oid": "8ff83b84387558c93e1fa26ffd9e7031bb775ee5", "url": "https://github.com/ls1intum/Artemis/commit/8ff83b84387558c93e1fa26ffd9e7031bb775ee5", "message": "added test cases", "committedDate": "2020-08-29T23:08:34Z", "type": "commit"}, {"oid": "ac59ff18fa9725a3d068614d2f7dafc462f556fb", "url": "https://github.com/ls1intum/Artemis/commit/ac59ff18fa9725a3d068614d2f7dafc462f556fb", "message": "fixed codacy issues", "committedDate": "2020-08-30T10:27:57Z", "type": "commit"}, {"oid": "8cc2a3cb4f9ec0eb9d378c0d5d5982d4bf973f97", "url": "https://github.com/ls1intum/Artemis/commit/8cc2a3cb4f9ec0eb9d378c0d5d5982d4bf973f97", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency", "committedDate": "2020-08-30T10:38:26Z", "type": "commit"}, {"oid": "d0476d157b4ede38c44b20ac30635a8efb865a89", "url": "https://github.com/ls1intum/Artemis/commit/d0476d157b4ede38c44b20ac30635a8efb865a89", "message": "fixed more codacy issues", "committedDate": "2020-08-30T11:14:55Z", "type": "commit"}, {"oid": "d7ef2184cbeb954eef4cd08b6097a899c11fb04b", "url": "https://github.com/ls1intum/Artemis/commit/d7ef2184cbeb954eef4cd08b6097a899c11fb04b", "message": "updates and new method for checking if conflicts are solved", "committedDate": "2020-09-21T21:32:16Z", "type": "commit"}, {"oid": "d96604db5b0fe66e83aa670f6df6bc8076f29d8d", "url": "https://github.com/ls1intum/Artemis/commit/d96604db5b0fe66e83aa670f6df6bc8076f29d8d", "message": "added new tests for new methods in AutomaticTextAssessmentConflictService", "committedDate": "2020-09-21T21:37:37Z", "type": "commit"}, {"oid": "ed275a71fc17995f4f0e5d5bf25f4f22418b4512", "url": "https://github.com/ls1intum/Artemis/commit/ed275a71fc17995f4f0e5d5bf25f4f22418b4512", "message": "fixed codacy issues", "committedDate": "2020-09-21T21:44:46Z", "type": "commit"}, {"oid": "9173710ce746c87b52d60b15c1be16d112f5251c", "url": "https://github.com/ls1intum/Artemis/commit/9173710ce746c87b52d60b15c1be16d112f5251c", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency", "committedDate": "2020-09-21T21:47:57Z", "type": "commit"}, {"oid": "50927ec8d1033527e1d343968e2eeab939ec7675", "url": "https://github.com/ls1intum/Artemis/commit/50927ec8d1033527e1d343968e2eeab939ec7675", "message": "fixed codacy issues", "committedDate": "2020-09-21T21:52:11Z", "type": "commit"}, {"oid": "6c130e8aaa322f12a8ba24eb938302757ef25adc", "url": "https://github.com/ls1intum/Artemis/commit/6c130e8aaa322f12a8ba24eb938302757ef25adc", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency", "committedDate": "2020-09-24T09:12:28Z", "type": "commit"}, {"oid": "475a41183425dcc0468c21f168d8ccf9a02823c2", "url": "https://github.com/ls1intum/Artemis/commit/475a41183425dcc0468c21f168d8ccf9a02823c2", "message": "new test cases for deletion of entities", "committedDate": "2020-09-24T11:32:04Z", "type": "commit"}, {"oid": "84270bfd8decb2ce40d1fd5e16ae830137eb45cd", "url": "https://github.com/ls1intum/Artemis/commit/84270bfd8decb2ce40d1fd5e16ae830137eb45cd", "message": "update setup.rst", "committedDate": "2020-09-24T13:45:05Z", "type": "commit"}, {"oid": "52da7b644d26412e05f43379e1868f8d4dccc081", "url": "https://github.com/ls1intum/Artemis/commit/52da7b644d26412e05f43379e1868f8d4dccc081", "message": "Merge branch 'develop' into feature/automatic-text/store-feedback-consistency", "committedDate": "2020-09-28T21:10:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzQ4Nw==", "url": "https://github.com/ls1intum/Artemis/pull/1977#discussion_r496237487", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "artemis-bot", "createdAt": "2020-09-28T21:16:39Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AutomaticTextAssessmentConflictService.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Feedback;\n+import de.tum.in.www1.artemis.domain.TextAssessmentConflict;\n+import de.tum.in.www1.artemis.domain.TextBlock;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.FeedbackRepository;\n+import de.tum.in.www1.artemis.repository.TextAssessmentConflictRepository;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.service.connectors.TextAssessmentConflictService;\n+import de.tum.in.www1.artemis.service.dto.TextAssessmentConflictRequestDTO;\n+import de.tum.in.www1.artemis.service.dto.TextAssessmentConflictResponseDTO;\n+\n+@Service\n+@Profile(\"automaticText\")\n+public class AutomaticTextAssessmentConflictService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AutomaticTextAssessmentConflictService.class);\n+\n+    private final TextAssessmentConflictRepository textAssessmentConflictRepository;\n+\n+    private final FeedbackRepository feedbackRepository;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextAssessmentConflictService textAssessmentConflictService;\n+\n+    public AutomaticTextAssessmentConflictService(TextAssessmentConflictRepository textAssessmentConflictRepository, FeedbackRepository feedbackRepository,\n+            TextBlockRepository textBlockRepository, TextAssessmentConflictService textAssessmentConflictService) {\n+        this.textAssessmentConflictRepository = textAssessmentConflictRepository;\n+        this.feedbackRepository = feedbackRepository;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textAssessmentConflictService = textAssessmentConflictService;\n+    }\n+\n+    /**\n+     *  This function asynchronously calls remote Athene service to check feedback consistency for the assessed submission.\n+     *  The call is made if the automatic assessments are enabled and the passed text blocks belong to any cluster.\n+     *\n+     * @param textBlocks - all text blocks in the text assessment\n+     * @param feedbackList - all feedback in the text assessment\n+     * @param exerciseId - exercise id of the assessed text exercise\n+     */\n+    @Async\n+    public void asyncCheckFeedbackConsistency(List<TextBlock> textBlocks, List<Feedback> feedbackList, long exerciseId) {\n+        // remove the feedback that does not belong to any text block\n+        feedbackList.removeIf(f -> !f.hasReference());\n+\n+        // If text block doesn't have a cluster id don't create an object\n+        List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS = feedbackList.stream().flatMap(feedback -> {\n+            Optional<TextBlock> textBlock = textBlockRepository\n+                    .findById(textBlocks.stream().filter(block -> block.getId().equals(feedback.getReference())).findFirst().get().getId());\n+            if (textBlock.isPresent() && textBlock.get().getCluster() != null) {\n+                return Stream.of(new TextAssessmentConflictRequestDTO(textBlock.get().getId(), textBlock.get().getText(), textBlock.get().getCluster().getId(), feedback.getId(),\n+                        feedback.getDetailText(), feedback.getCredits()));\n+            }\n+            else {\n+                return Stream.empty();\n+            }\n+        }).collect(toList());\n+\n+        if (textAssessmentConflictRequestDTOS.isEmpty()) {\n+            return;\n+        }\n+\n+        // remote service call to athene\n+        final List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS;\n+        try {\n+            textAssessmentConflictResponseDTOS = textAssessmentConflictService.checkFeedbackConsistencies(textAssessmentConflictRequestDTOS, exerciseId, 0);\n+        }\n+        catch (NetworkingError networkingError) {\n+            log.error(networkingError.getMessage(), networkingError);\n+            return;\n+        }\n+\n+        // create an array to store conflicts\n+        List<TextAssessmentConflict> textAssessmentConflicts = new ArrayList<>();\n+\n+        // look for new conflicts\n+        // Athene may find conflicts with feedback ids that are not in the feedback repository any more. So check for them. (May happen if the feedback is deleted in Artemis but\n+        // already stored in Athene)\n+        textAssessmentConflictResponseDTOS.forEach(conflict -> {\n+            Optional<Feedback> firstFeedback = feedbackRepository.findById(conflict.getFirstFeedbackId());\n+            Optional<Feedback> secondFeedback = feedbackRepository.findById(conflict.getSecondFeedbackId());\n+            List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findByFirstAndSecondFeedback(conflict.getFirstFeedbackId(),\n+                    conflict.getSecondFeedbackId());\n+            // if the found conflict is present but its type has changed, update it\n+            if (!storedConflicts.isEmpty() && !storedConflicts.get(0).getType().equals(conflict.getType())) {\n+                storedConflicts.get(0).setType(conflict.getType());\n+                textAssessmentConflicts.add(storedConflicts.get(0));\n+            }\n+\n+            // new conflict\n+            if (firstFeedback.isPresent() && secondFeedback.isPresent() && storedConflicts.isEmpty()) {\n+                TextAssessmentConflict textAssessmentConflict = new TextAssessmentConflict();\n+                textAssessmentConflict.setConflict(true);\n+                textAssessmentConflict.setFirstFeedback(firstFeedback.get());\n+                textAssessmentConflict.setSecondFeedback(secondFeedback.get());\n+                textAssessmentConflict.setType(conflict.getType());\n+                textAssessmentConflict.setCreatedAt(ZonedDateTime.now());\n+                textAssessmentConflicts.add(textAssessmentConflict);\n+            }\n+        });\n+\n+        // find solved conflicts and add them to list\n+        textAssessmentConflicts.addAll(this.findSolvedConflicts(textAssessmentConflictRequestDTOS, textAssessmentConflictResponseDTOS));\n+\n+        textAssessmentConflictRepository.saveAll(textAssessmentConflicts);\n+    }\n+\n+    /**\n+     * Searches if the feedback that are sent to Athene already have conflicts in the database(storedConflicts),\n+     * If the stored conflicts are not returned from Athene after the consistency check, it means that they are solved and set as solved.\n+     *\n+     * @param textAssessmentConflictRequestDTOS the list sent to Athene for check\n+     * @param textAssessmentConflictResponseDTOS returned list with found conflicts.\n+     * @return solved conflicts\n+     */\n+    private List<TextAssessmentConflict> findSolvedConflicts(List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS,\n+            List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS) {\n+        List<Long> feedbackIds = textAssessmentConflictRequestDTOS.stream().map(TextAssessmentConflictRequestDTO::getFeedbackId).collect(toList());\n+        List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findAllByFeedbackList(feedbackIds);\n+\n+        storedConflicts.forEach(conflict -> {\n+            boolean isPresent = textAssessmentConflictResponseDTOS.stream().anyMatch(newConflicts -> (newConflicts.getFirstFeedbackId() == conflict.getFirstFeedback().getId()\n+                    && newConflicts.getSecondFeedbackId() == conflict.getSecondFeedback().getId())\n+                    || (newConflicts.getFirstFeedbackId() == conflict.getSecondFeedback().getId() && newConflicts.getSecondFeedbackId() == conflict.getFirstFeedback().getId()));", "originalCommit": "52da7b644d26412e05f43379e1868f8d4dccc081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzQ5Mw==", "url": "https://github.com/ls1intum/Artemis/pull/1977#discussion_r496237493", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "artemis-bot", "createdAt": "2020-09-28T21:16:40Z", "path": "src/main/java/de/tum/in/www1/artemis/service/AutomaticTextAssessmentConflictService.java", "diffHunk": "@@ -0,0 +1,152 @@\n+package de.tum.in.www1.artemis.service;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+import java.time.ZonedDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Service;\n+\n+import de.tum.in.www1.artemis.domain.Feedback;\n+import de.tum.in.www1.artemis.domain.TextAssessmentConflict;\n+import de.tum.in.www1.artemis.domain.TextBlock;\n+import de.tum.in.www1.artemis.exception.NetworkingError;\n+import de.tum.in.www1.artemis.repository.FeedbackRepository;\n+import de.tum.in.www1.artemis.repository.TextAssessmentConflictRepository;\n+import de.tum.in.www1.artemis.repository.TextBlockRepository;\n+import de.tum.in.www1.artemis.service.connectors.TextAssessmentConflictService;\n+import de.tum.in.www1.artemis.service.dto.TextAssessmentConflictRequestDTO;\n+import de.tum.in.www1.artemis.service.dto.TextAssessmentConflictResponseDTO;\n+\n+@Service\n+@Profile(\"automaticText\")\n+public class AutomaticTextAssessmentConflictService {\n+\n+    private final Logger log = LoggerFactory.getLogger(AutomaticTextAssessmentConflictService.class);\n+\n+    private final TextAssessmentConflictRepository textAssessmentConflictRepository;\n+\n+    private final FeedbackRepository feedbackRepository;\n+\n+    private final TextBlockRepository textBlockRepository;\n+\n+    private final TextAssessmentConflictService textAssessmentConflictService;\n+\n+    public AutomaticTextAssessmentConflictService(TextAssessmentConflictRepository textAssessmentConflictRepository, FeedbackRepository feedbackRepository,\n+            TextBlockRepository textBlockRepository, TextAssessmentConflictService textAssessmentConflictService) {\n+        this.textAssessmentConflictRepository = textAssessmentConflictRepository;\n+        this.feedbackRepository = feedbackRepository;\n+        this.textBlockRepository = textBlockRepository;\n+        this.textAssessmentConflictService = textAssessmentConflictService;\n+    }\n+\n+    /**\n+     *  This function asynchronously calls remote Athene service to check feedback consistency for the assessed submission.\n+     *  The call is made if the automatic assessments are enabled and the passed text blocks belong to any cluster.\n+     *\n+     * @param textBlocks - all text blocks in the text assessment\n+     * @param feedbackList - all feedback in the text assessment\n+     * @param exerciseId - exercise id of the assessed text exercise\n+     */\n+    @Async\n+    public void asyncCheckFeedbackConsistency(List<TextBlock> textBlocks, List<Feedback> feedbackList, long exerciseId) {\n+        // remove the feedback that does not belong to any text block\n+        feedbackList.removeIf(f -> !f.hasReference());\n+\n+        // If text block doesn't have a cluster id don't create an object\n+        List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS = feedbackList.stream().flatMap(feedback -> {\n+            Optional<TextBlock> textBlock = textBlockRepository\n+                    .findById(textBlocks.stream().filter(block -> block.getId().equals(feedback.getReference())).findFirst().get().getId());\n+            if (textBlock.isPresent() && textBlock.get().getCluster() != null) {\n+                return Stream.of(new TextAssessmentConflictRequestDTO(textBlock.get().getId(), textBlock.get().getText(), textBlock.get().getCluster().getId(), feedback.getId(),\n+                        feedback.getDetailText(), feedback.getCredits()));\n+            }\n+            else {\n+                return Stream.empty();\n+            }\n+        }).collect(toList());\n+\n+        if (textAssessmentConflictRequestDTOS.isEmpty()) {\n+            return;\n+        }\n+\n+        // remote service call to athene\n+        final List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS;\n+        try {\n+            textAssessmentConflictResponseDTOS = textAssessmentConflictService.checkFeedbackConsistencies(textAssessmentConflictRequestDTOS, exerciseId, 0);\n+        }\n+        catch (NetworkingError networkingError) {\n+            log.error(networkingError.getMessage(), networkingError);\n+            return;\n+        }\n+\n+        // create an array to store conflicts\n+        List<TextAssessmentConflict> textAssessmentConflicts = new ArrayList<>();\n+\n+        // look for new conflicts\n+        // Athene may find conflicts with feedback ids that are not in the feedback repository any more. So check for them. (May happen if the feedback is deleted in Artemis but\n+        // already stored in Athene)\n+        textAssessmentConflictResponseDTOS.forEach(conflict -> {\n+            Optional<Feedback> firstFeedback = feedbackRepository.findById(conflict.getFirstFeedbackId());\n+            Optional<Feedback> secondFeedback = feedbackRepository.findById(conflict.getSecondFeedbackId());\n+            List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findByFirstAndSecondFeedback(conflict.getFirstFeedbackId(),\n+                    conflict.getSecondFeedbackId());\n+            // if the found conflict is present but its type has changed, update it\n+            if (!storedConflicts.isEmpty() && !storedConflicts.get(0).getType().equals(conflict.getType())) {\n+                storedConflicts.get(0).setType(conflict.getType());\n+                textAssessmentConflicts.add(storedConflicts.get(0));\n+            }\n+\n+            // new conflict\n+            if (firstFeedback.isPresent() && secondFeedback.isPresent() && storedConflicts.isEmpty()) {\n+                TextAssessmentConflict textAssessmentConflict = new TextAssessmentConflict();\n+                textAssessmentConflict.setConflict(true);\n+                textAssessmentConflict.setFirstFeedback(firstFeedback.get());\n+                textAssessmentConflict.setSecondFeedback(secondFeedback.get());\n+                textAssessmentConflict.setType(conflict.getType());\n+                textAssessmentConflict.setCreatedAt(ZonedDateTime.now());\n+                textAssessmentConflicts.add(textAssessmentConflict);\n+            }\n+        });\n+\n+        // find solved conflicts and add them to list\n+        textAssessmentConflicts.addAll(this.findSolvedConflicts(textAssessmentConflictRequestDTOS, textAssessmentConflictResponseDTOS));\n+\n+        textAssessmentConflictRepository.saveAll(textAssessmentConflicts);\n+    }\n+\n+    /**\n+     * Searches if the feedback that are sent to Athene already have conflicts in the database(storedConflicts),\n+     * If the stored conflicts are not returned from Athene after the consistency check, it means that they are solved and set as solved.\n+     *\n+     * @param textAssessmentConflictRequestDTOS the list sent to Athene for check\n+     * @param textAssessmentConflictResponseDTOS returned list with found conflicts.\n+     * @return solved conflicts\n+     */\n+    private List<TextAssessmentConflict> findSolvedConflicts(List<TextAssessmentConflictRequestDTO> textAssessmentConflictRequestDTOS,\n+            List<TextAssessmentConflictResponseDTO> textAssessmentConflictResponseDTOS) {\n+        List<Long> feedbackIds = textAssessmentConflictRequestDTOS.stream().map(TextAssessmentConflictRequestDTO::getFeedbackId).collect(toList());\n+        List<TextAssessmentConflict> storedConflicts = this.textAssessmentConflictRepository.findAllByFeedbackList(feedbackIds);\n+\n+        storedConflicts.forEach(conflict -> {\n+            boolean isPresent = textAssessmentConflictResponseDTOS.stream().anyMatch(newConflicts -> (newConflicts.getFirstFeedbackId() == conflict.getFirstFeedback().getId()", "originalCommit": "52da7b644d26412e05f43379e1868f8d4dccc081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjIzNzUwMA==", "url": "https://github.com/ls1intum/Artemis/pull/1977#discussion_r496237500", "bodyText": "Codacy found an issue: Missing a Javadoc comment.", "author": "artemis-bot", "createdAt": "2020-09-28T21:16:41Z", "path": "src/test/java/de/tum/in/www1/artemis/util/ModelFactory.java", "diffHunk": "@@ -483,6 +483,16 @@ private static Feedback generateStaticCodeAnalysisFeedback(int index) {\n         return feedbacks; // total score should be 3P\n     }\n \n+    public static TextAssessmentConflict generateTextAssessmentConflictWithFeedback(Feedback firstFeedback, Feedback secondFeedback) {", "originalCommit": "52da7b644d26412e05f43379e1868f8d4dccc081", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}