{"pr_number": 678, "pr_title": "Participant manager [POST] /users endpoint implementation", "pr_createdAt": "2020-07-25T10:11:55Z", "pr_url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678", "timeline": [{"oid": "514410431f942cfde6a6abde47791ad2c2366358", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/514410431f942cfde6a6abde47791ad2c2366358", "message": "[POST] /users endpoint implementation", "committedDate": "2020-07-25T10:01:16Z", "type": "commit"}, {"oid": "276923f54a6fa2f0f7ac8d04a5c438fa3fc696fa", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/276923f54a6fa2f0f7ac8d04a5c438fa3fc696fa", "message": "nonsuper admin flow for addNewUser api deleted", "committedDate": "2020-07-27T15:07:52Z", "type": "commit"}, {"oid": "862331f11dddc05a149bd0e24ef08e70c83d715c", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/862331f11dddc05a149bd0e24ef08e70c83d715c", "message": "saveAdminDetails method moved to the end", "committedDate": "2020-07-27T15:12:51Z", "type": "commit"}, {"oid": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "message": "code formatted", "committedDate": "2020-07-27T15:26:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MjcwMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462692701", "bodyText": "Reactivate", "author": "saminguyen", "createdAt": "2020-07-30T02:11:07Z", "path": "common-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ErrorCode.java", "diffHunk": "@@ -135,7 +135,19 @@\n       \"EC_885\",\n       Constants.BAD_REQUEST,\n       \"This Site is associated with active and enrolled participants\"\n-          + \" and cannot be decomissioned\");\n+          + \" and cannot be decomissioned\"),\n+\n+  NOT_SUPER_ADMIN_ACCESS(\n+      403,\n+      \"EC_870\",\n+      HttpStatus.FORBIDDEN.toString(),\n+      \"You are not authorized to access this information\"),\n+\n+  PERMISSION_MISSING(\n+      400, \"EC_978\", Constants.BAD_REQUEST, \"Admin should have atleast one permission\"),\n+\n+  CANNOT_REACTIVE(\n+      400, \"EC_887\", Constants.BAD_REQUEST, \"Can't reactive an already active location\");", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMDMzNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462820337", "bodyText": "removed CANNOT_REACTIVE and used CANNOT_REACTIVATE.", "author": "chiranjibi009", "createdAt": "2020-07-30T08:01:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MjcwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MzIwNw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462693207", "bodyText": "Why this change", "author": "saminguyen", "createdAt": "2020-07-30T02:13:09Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/LocationServiceImpl.java", "diffHunk": "@@ -159,7 +156,7 @@ private ErrorCode validateUpdateLocationRequest(\n \n     if (ACTIVE_STATUS.equals(locationRequest.getStatus())\n         && ACTIVE_STATUS.equals(locationEntity.getStatus())) {\n-      return ErrorCode.CANNOT_REACTIVATE;\n+      return ErrorCode.CANNOT_REACTIVE;", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMTA2Ng==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462821066", "bodyText": "test cases were failing, hence changed to CANNOT_REACTIVE.", "author": "chiranjibi009", "createdAt": "2020-07-30T08:03:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5MzIwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NDIzNA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462694234", "bodyText": "any reason for this change here?", "author": "saminguyen", "createdAt": "2020-07-30T02:17:06Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "diffHunk": "@@ -126,7 +122,6 @@ public LocationEntity createLocation() {\n     LocationEntity locationEntity = newLocationEntity();\n     SiteEntity siteEntity = newSiteEntity();\n     locationEntity.addSiteEntity(siteEntity);\n-    siteEntity.setStudy(newStudyEntity());", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzAwOQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462823009", "bodyText": "siteEntity is already set at line number 124, hence there is no point of setting values for siteEntity.", "author": "chiranjibi009", "createdAt": "2020-07-30T08:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NDIzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTc1Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462695753", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                UserRegAdminEntity superAdminDeatils =\n          \n          \n            \n                UserRegAdminEntity superAdminDetails =", "author": "saminguyen", "createdAt": "2020-07-30T02:22:59Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import com.google.cloud.healthcare.fdamystudies.beans.AdminUserResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserAppPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserSitePermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserStudyPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.CommonConstants;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.mapper.UserMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class ManageUserServiceImpl implements ManageUserService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(ManageUserServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userAdminRepository;\n+\n+  @Autowired private AppRepository appRepository;\n+\n+  @Autowired private StudyRepository studyRepository;\n+\n+  @Autowired private SiteRepository siteRepository;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @Override\n+  @Transactional\n+  public AdminUserResponse createUser(UserRequest user) {\n+    logger.entry(String.format(\"createUser() with isSuperAdmin=%b\", user.isSuperAdmin()));\n+    ErrorCode errorCode = validateUserRequest(user);\n+    if (errorCode != null) {\n+      logger.exit(String.format(CommonConstants.ERROR_CODE_LOG, errorCode));\n+      return new AdminUserResponse(errorCode);\n+    }\n+\n+    AdminUserResponse userResponse =\n+        user.isSuperAdmin() ? saveSuperAdminDetails(user) : saveAdminDetails(user);\n+\n+    logger.exit(String.format(CommonConstants.STATUS_LOG, userResponse.getHttpStatusCode()));\n+    return userResponse;\n+  }\n+\n+  private ErrorCode validateUserRequest(UserRequest user) {\n+    logger.entry(\"validateUserRequest()\");\n+    Optional<UserRegAdminEntity> optAdminDetails =\n+        userAdminRepository.findById(user.getSuperAdminUserId());\n+    if (!optAdminDetails.isPresent()) {\n+      return ErrorCode.USER_NOT_FOUND;\n+    }\n+\n+    UserRegAdminEntity loggedInUserDeatils = optAdminDetails.get();\n+    if (!loggedInUserDeatils.isSuperAdmin()) {\n+      return ErrorCode.NOT_SUPER_ADMIN_ACCESS;\n+    }\n+\n+    if (!user.isSuperAdmin()\n+        && (CollectionUtils.isEmpty(user.getApps()) || !hasAtleastOnePermission(user))) {\n+      return ErrorCode.PERMISSION_MISSING;\n+    }\n+\n+    Optional<UserRegAdminEntity> optUsers = userAdminRepository.findByEmail(user.getEmail());\n+    logger.exit(\"Successfully validated user request\");\n+    return optUsers.isPresent() ? ErrorCode.EMAIL_EXISTS : null;\n+  }\n+\n+  private boolean hasAtleastOnePermission(UserRequest user) {\n+    logger.entry(\"hasAtleastOnePermission()\");\n+    Predicate<UserAppPermissionRequest> appPredicate = app -> app.isSelected();\n+    Predicate<UserStudyPermissionRequest> studyPredicate = study -> study.isSelected();\n+    Predicate<UserSitePermissionRequest> sitePredicate = site -> site.isSelected();\n+\n+    List<UserAppPermissionRequest> selectedApps =\n+        user.getApps().stream().filter(appPredicate).collect(Collectors.toList());\n+    if (CollectionUtils.isNotEmpty(selectedApps)) {\n+      return true;\n+    }\n+\n+    for (UserAppPermissionRequest appPermission : user.getApps()) {\n+      List<UserStudyPermissionRequest> selectedStudies =\n+          CollectionUtils.emptyIfNull(appPermission.getStudies())\n+              .stream()\n+              .filter(studyPredicate)\n+              .collect(Collectors.toList());\n+      if (CollectionUtils.isNotEmpty(selectedStudies)) {\n+        return true;\n+      }\n+\n+      for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n+        List<UserSitePermissionRequest> selectedSites =\n+            CollectionUtils.emptyIfNull(studyPermission.getSites())\n+                .stream()\n+                .filter(sitePredicate)\n+                .collect(Collectors.toList());\n+        if (CollectionUtils.isNotEmpty(selectedSites)) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    logger.exit(\"No permissions found, return false\");\n+    return false;\n+  }\n+\n+  private AdminUserResponse saveAdminDetails(UserRequest user) {\n+    logger.entry(\"saveAdminDetails()\");\n+    UserRegAdminEntity adminDetails =\n+        UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n+    adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n+    logger.exit(\"Successfully saved admin details.\");\n+    return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n+  }\n+\n+  private AdminUserResponse saveSuperAdminDetails(UserRequest user) {\n+    logger.entry(\"saveSuperAdminDetails()\");\n+    UserRegAdminEntity superAdminDeatils =", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzI0MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462823240", "bodyText": "typo fixed", "author": "chiranjibi009", "createdAt": "2020-07-30T08:07:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NTc1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjMzMQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462696331", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  UserRequest user, UserRegAdminEntity superAdminDeatils) {\n          \n          \n            \n                  UserRequest user, UserRegAdminEntity superAdminDetails) {", "author": "saminguyen", "createdAt": "2020-07-30T02:25:05Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import com.google.cloud.healthcare.fdamystudies.beans.AdminUserResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserAppPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserSitePermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserStudyPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.CommonConstants;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.mapper.UserMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class ManageUserServiceImpl implements ManageUserService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(ManageUserServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userAdminRepository;\n+\n+  @Autowired private AppRepository appRepository;\n+\n+  @Autowired private StudyRepository studyRepository;\n+\n+  @Autowired private SiteRepository siteRepository;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @Override\n+  @Transactional\n+  public AdminUserResponse createUser(UserRequest user) {\n+    logger.entry(String.format(\"createUser() with isSuperAdmin=%b\", user.isSuperAdmin()));\n+    ErrorCode errorCode = validateUserRequest(user);\n+    if (errorCode != null) {\n+      logger.exit(String.format(CommonConstants.ERROR_CODE_LOG, errorCode));\n+      return new AdminUserResponse(errorCode);\n+    }\n+\n+    AdminUserResponse userResponse =\n+        user.isSuperAdmin() ? saveSuperAdminDetails(user) : saveAdminDetails(user);\n+\n+    logger.exit(String.format(CommonConstants.STATUS_LOG, userResponse.getHttpStatusCode()));\n+    return userResponse;\n+  }\n+\n+  private ErrorCode validateUserRequest(UserRequest user) {\n+    logger.entry(\"validateUserRequest()\");\n+    Optional<UserRegAdminEntity> optAdminDetails =\n+        userAdminRepository.findById(user.getSuperAdminUserId());\n+    if (!optAdminDetails.isPresent()) {\n+      return ErrorCode.USER_NOT_FOUND;\n+    }\n+\n+    UserRegAdminEntity loggedInUserDeatils = optAdminDetails.get();\n+    if (!loggedInUserDeatils.isSuperAdmin()) {\n+      return ErrorCode.NOT_SUPER_ADMIN_ACCESS;\n+    }\n+\n+    if (!user.isSuperAdmin()\n+        && (CollectionUtils.isEmpty(user.getApps()) || !hasAtleastOnePermission(user))) {\n+      return ErrorCode.PERMISSION_MISSING;\n+    }\n+\n+    Optional<UserRegAdminEntity> optUsers = userAdminRepository.findByEmail(user.getEmail());\n+    logger.exit(\"Successfully validated user request\");\n+    return optUsers.isPresent() ? ErrorCode.EMAIL_EXISTS : null;\n+  }\n+\n+  private boolean hasAtleastOnePermission(UserRequest user) {\n+    logger.entry(\"hasAtleastOnePermission()\");\n+    Predicate<UserAppPermissionRequest> appPredicate = app -> app.isSelected();\n+    Predicate<UserStudyPermissionRequest> studyPredicate = study -> study.isSelected();\n+    Predicate<UserSitePermissionRequest> sitePredicate = site -> site.isSelected();\n+\n+    List<UserAppPermissionRequest> selectedApps =\n+        user.getApps().stream().filter(appPredicate).collect(Collectors.toList());\n+    if (CollectionUtils.isNotEmpty(selectedApps)) {\n+      return true;\n+    }\n+\n+    for (UserAppPermissionRequest appPermission : user.getApps()) {\n+      List<UserStudyPermissionRequest> selectedStudies =\n+          CollectionUtils.emptyIfNull(appPermission.getStudies())\n+              .stream()\n+              .filter(studyPredicate)\n+              .collect(Collectors.toList());\n+      if (CollectionUtils.isNotEmpty(selectedStudies)) {\n+        return true;\n+      }\n+\n+      for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n+        List<UserSitePermissionRequest> selectedSites =\n+            CollectionUtils.emptyIfNull(studyPermission.getSites())\n+                .stream()\n+                .filter(sitePredicate)\n+                .collect(Collectors.toList());\n+        if (CollectionUtils.isNotEmpty(selectedSites)) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    logger.exit(\"No permissions found, return false\");\n+    return false;\n+  }\n+\n+  private AdminUserResponse saveAdminDetails(UserRequest user) {\n+    logger.entry(\"saveAdminDetails()\");\n+    UserRegAdminEntity adminDetails =\n+        UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n+    adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n+    logger.exit(\"Successfully saved admin details.\");\n+    return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n+  }\n+\n+  private AdminUserResponse saveSuperAdminDetails(UserRequest user) {\n+    logger.entry(\"saveSuperAdminDetails()\");\n+    UserRegAdminEntity superAdminDeatils =\n+        UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n+\n+    List<AppPermissionEntity> appPermissions =\n+        getAppPermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getAppPermissions().addAll(appPermissions);\n+\n+    List<StudyPermissionEntity> studyPermissions =\n+        getStudyPermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getStudyPermissions().addAll(studyPermissions);\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        getSitePermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getSitePermissions().addAll(sitePermissions);\n+\n+    userAdminRepository.saveAndFlush(superAdminDeatils);\n+\n+    logger.exit(String.format(CommonConstants.MESSAGE_CODE_LOG, MessageCode.ADD_NEW_USER_SUCCESS));\n+    return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, superAdminDeatils.getId());\n+  }\n+\n+  private List<SitePermissionEntity> getSitePermissisonsForSuperAdmin(\n+      UserRequest user, UserRegAdminEntity superAdminDeatils) {", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzM3Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462823373", "bodyText": "typo fixed", "author": "chiranjibi009", "createdAt": "2020-07-30T08:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjMzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjM4OA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462696388", "bodyText": "typo here too", "author": "saminguyen", "createdAt": "2020-07-30T02:25:19Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import com.google.cloud.healthcare.fdamystudies.beans.AdminUserResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserAppPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserSitePermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserStudyPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.CommonConstants;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.mapper.UserMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class ManageUserServiceImpl implements ManageUserService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(ManageUserServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userAdminRepository;\n+\n+  @Autowired private AppRepository appRepository;\n+\n+  @Autowired private StudyRepository studyRepository;\n+\n+  @Autowired private SiteRepository siteRepository;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @Override\n+  @Transactional\n+  public AdminUserResponse createUser(UserRequest user) {\n+    logger.entry(String.format(\"createUser() with isSuperAdmin=%b\", user.isSuperAdmin()));\n+    ErrorCode errorCode = validateUserRequest(user);\n+    if (errorCode != null) {\n+      logger.exit(String.format(CommonConstants.ERROR_CODE_LOG, errorCode));\n+      return new AdminUserResponse(errorCode);\n+    }\n+\n+    AdminUserResponse userResponse =\n+        user.isSuperAdmin() ? saveSuperAdminDetails(user) : saveAdminDetails(user);\n+\n+    logger.exit(String.format(CommonConstants.STATUS_LOG, userResponse.getHttpStatusCode()));\n+    return userResponse;\n+  }\n+\n+  private ErrorCode validateUserRequest(UserRequest user) {\n+    logger.entry(\"validateUserRequest()\");\n+    Optional<UserRegAdminEntity> optAdminDetails =\n+        userAdminRepository.findById(user.getSuperAdminUserId());\n+    if (!optAdminDetails.isPresent()) {\n+      return ErrorCode.USER_NOT_FOUND;\n+    }\n+\n+    UserRegAdminEntity loggedInUserDeatils = optAdminDetails.get();\n+    if (!loggedInUserDeatils.isSuperAdmin()) {\n+      return ErrorCode.NOT_SUPER_ADMIN_ACCESS;\n+    }\n+\n+    if (!user.isSuperAdmin()\n+        && (CollectionUtils.isEmpty(user.getApps()) || !hasAtleastOnePermission(user))) {\n+      return ErrorCode.PERMISSION_MISSING;\n+    }\n+\n+    Optional<UserRegAdminEntity> optUsers = userAdminRepository.findByEmail(user.getEmail());\n+    logger.exit(\"Successfully validated user request\");\n+    return optUsers.isPresent() ? ErrorCode.EMAIL_EXISTS : null;\n+  }\n+\n+  private boolean hasAtleastOnePermission(UserRequest user) {\n+    logger.entry(\"hasAtleastOnePermission()\");\n+    Predicate<UserAppPermissionRequest> appPredicate = app -> app.isSelected();\n+    Predicate<UserStudyPermissionRequest> studyPredicate = study -> study.isSelected();\n+    Predicate<UserSitePermissionRequest> sitePredicate = site -> site.isSelected();\n+\n+    List<UserAppPermissionRequest> selectedApps =\n+        user.getApps().stream().filter(appPredicate).collect(Collectors.toList());\n+    if (CollectionUtils.isNotEmpty(selectedApps)) {\n+      return true;\n+    }\n+\n+    for (UserAppPermissionRequest appPermission : user.getApps()) {\n+      List<UserStudyPermissionRequest> selectedStudies =\n+          CollectionUtils.emptyIfNull(appPermission.getStudies())\n+              .stream()\n+              .filter(studyPredicate)\n+              .collect(Collectors.toList());\n+      if (CollectionUtils.isNotEmpty(selectedStudies)) {\n+        return true;\n+      }\n+\n+      for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n+        List<UserSitePermissionRequest> selectedSites =\n+            CollectionUtils.emptyIfNull(studyPermission.getSites())\n+                .stream()\n+                .filter(sitePredicate)\n+                .collect(Collectors.toList());\n+        if (CollectionUtils.isNotEmpty(selectedSites)) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    logger.exit(\"No permissions found, return false\");\n+    return false;\n+  }\n+\n+  private AdminUserResponse saveAdminDetails(UserRequest user) {\n+    logger.entry(\"saveAdminDetails()\");\n+    UserRegAdminEntity adminDetails =\n+        UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n+    adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n+    logger.exit(\"Successfully saved admin details.\");\n+    return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n+  }\n+\n+  private AdminUserResponse saveSuperAdminDetails(UserRequest user) {\n+    logger.entry(\"saveSuperAdminDetails()\");\n+    UserRegAdminEntity superAdminDeatils =\n+        UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n+\n+    List<AppPermissionEntity> appPermissions =\n+        getAppPermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getAppPermissions().addAll(appPermissions);\n+\n+    List<StudyPermissionEntity> studyPermissions =\n+        getStudyPermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getStudyPermissions().addAll(studyPermissions);\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        getSitePermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getSitePermissions().addAll(sitePermissions);\n+\n+    userAdminRepository.saveAndFlush(superAdminDeatils);\n+\n+    logger.exit(String.format(CommonConstants.MESSAGE_CODE_LOG, MessageCode.ADD_NEW_USER_SUCCESS));\n+    return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, superAdminDeatils.getId());\n+  }\n+\n+  private List<SitePermissionEntity> getSitePermissisonsForSuperAdmin(\n+      UserRequest user, UserRegAdminEntity superAdminDeatils) {\n+    logger.entry(\"getSitePermissisonsForSuperAdmin()\");\n+    List<SiteEntity> sites =\n+        (List<SiteEntity>) CollectionUtils.emptyIfNull(siteRepository.findAll());\n+    List<SitePermissionEntity> sitePermissions = new ArrayList<>();\n+    for (SiteEntity siteInfo : sites) {\n+      SitePermissionEntity sitePermission =\n+          UserMapper.newSitePermissionEntity(user, null, superAdminDeatils, siteInfo);\n+      sitePermissions.add(sitePermission);\n+    }\n+\n+    logger.exit(String.format(\"total site permissions=%d\", sitePermissions.size()));\n+    return sitePermissions;\n+  }\n+\n+  private List<StudyPermissionEntity> getStudyPermissisonsForSuperAdmin(\n+      UserRequest user, UserRegAdminEntity superAdminDeatils) {", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzUxNg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462823516", "bodyText": "typo fixed", "author": "chiranjibi009", "createdAt": "2020-07-30T08:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjQyMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462696422", "bodyText": "typo here too", "author": "saminguyen", "createdAt": "2020-07-30T02:25:25Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/ManageUserServiceImpl.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.ext.XLogger;\n+import org.slf4j.ext.XLoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+import com.google.cloud.healthcare.fdamystudies.beans.AdminUserResponse;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserAppPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserSitePermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserStudyPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.CommonConstants;\n+import com.google.cloud.healthcare.fdamystudies.common.ErrorCode;\n+import com.google.cloud.healthcare.fdamystudies.common.MessageCode;\n+import com.google.cloud.healthcare.fdamystudies.config.AppPropertyConfig;\n+import com.google.cloud.healthcare.fdamystudies.mapper.UserMapper;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+import com.google.cloud.healthcare.fdamystudies.repository.AppRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.SiteRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.StudyRepository;\n+import com.google.cloud.healthcare.fdamystudies.repository.UserRegAdminRepository;\n+\n+@Service\n+public class ManageUserServiceImpl implements ManageUserService {\n+\n+  private XLogger logger = XLoggerFactory.getXLogger(ManageUserServiceImpl.class.getName());\n+\n+  @Autowired private UserRegAdminRepository userAdminRepository;\n+\n+  @Autowired private AppRepository appRepository;\n+\n+  @Autowired private StudyRepository studyRepository;\n+\n+  @Autowired private SiteRepository siteRepository;\n+\n+  @Autowired private AppPropertyConfig appConfig;\n+\n+  @Override\n+  @Transactional\n+  public AdminUserResponse createUser(UserRequest user) {\n+    logger.entry(String.format(\"createUser() with isSuperAdmin=%b\", user.isSuperAdmin()));\n+    ErrorCode errorCode = validateUserRequest(user);\n+    if (errorCode != null) {\n+      logger.exit(String.format(CommonConstants.ERROR_CODE_LOG, errorCode));\n+      return new AdminUserResponse(errorCode);\n+    }\n+\n+    AdminUserResponse userResponse =\n+        user.isSuperAdmin() ? saveSuperAdminDetails(user) : saveAdminDetails(user);\n+\n+    logger.exit(String.format(CommonConstants.STATUS_LOG, userResponse.getHttpStatusCode()));\n+    return userResponse;\n+  }\n+\n+  private ErrorCode validateUserRequest(UserRequest user) {\n+    logger.entry(\"validateUserRequest()\");\n+    Optional<UserRegAdminEntity> optAdminDetails =\n+        userAdminRepository.findById(user.getSuperAdminUserId());\n+    if (!optAdminDetails.isPresent()) {\n+      return ErrorCode.USER_NOT_FOUND;\n+    }\n+\n+    UserRegAdminEntity loggedInUserDeatils = optAdminDetails.get();\n+    if (!loggedInUserDeatils.isSuperAdmin()) {\n+      return ErrorCode.NOT_SUPER_ADMIN_ACCESS;\n+    }\n+\n+    if (!user.isSuperAdmin()\n+        && (CollectionUtils.isEmpty(user.getApps()) || !hasAtleastOnePermission(user))) {\n+      return ErrorCode.PERMISSION_MISSING;\n+    }\n+\n+    Optional<UserRegAdminEntity> optUsers = userAdminRepository.findByEmail(user.getEmail());\n+    logger.exit(\"Successfully validated user request\");\n+    return optUsers.isPresent() ? ErrorCode.EMAIL_EXISTS : null;\n+  }\n+\n+  private boolean hasAtleastOnePermission(UserRequest user) {\n+    logger.entry(\"hasAtleastOnePermission()\");\n+    Predicate<UserAppPermissionRequest> appPredicate = app -> app.isSelected();\n+    Predicate<UserStudyPermissionRequest> studyPredicate = study -> study.isSelected();\n+    Predicate<UserSitePermissionRequest> sitePredicate = site -> site.isSelected();\n+\n+    List<UserAppPermissionRequest> selectedApps =\n+        user.getApps().stream().filter(appPredicate).collect(Collectors.toList());\n+    if (CollectionUtils.isNotEmpty(selectedApps)) {\n+      return true;\n+    }\n+\n+    for (UserAppPermissionRequest appPermission : user.getApps()) {\n+      List<UserStudyPermissionRequest> selectedStudies =\n+          CollectionUtils.emptyIfNull(appPermission.getStudies())\n+              .stream()\n+              .filter(studyPredicate)\n+              .collect(Collectors.toList());\n+      if (CollectionUtils.isNotEmpty(selectedStudies)) {\n+        return true;\n+      }\n+\n+      for (UserStudyPermissionRequest studyPermission : appPermission.getStudies()) {\n+        List<UserSitePermissionRequest> selectedSites =\n+            CollectionUtils.emptyIfNull(studyPermission.getSites())\n+                .stream()\n+                .filter(sitePredicate)\n+                .collect(Collectors.toList());\n+        if (CollectionUtils.isNotEmpty(selectedSites)) {\n+          return true;\n+        }\n+      }\n+    }\n+\n+    logger.exit(\"No permissions found, return false\");\n+    return false;\n+  }\n+\n+  private AdminUserResponse saveAdminDetails(UserRequest user) {\n+    logger.entry(\"saveAdminDetails()\");\n+    UserRegAdminEntity adminDetails =\n+        UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n+    adminDetails = userAdminRepository.saveAndFlush(adminDetails);\n+    logger.exit(\"Successfully saved admin details.\");\n+    return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, adminDetails.getId());\n+  }\n+\n+  private AdminUserResponse saveSuperAdminDetails(UserRequest user) {\n+    logger.entry(\"saveSuperAdminDetails()\");\n+    UserRegAdminEntity superAdminDeatils =\n+        UserMapper.fromUserRequest(user, Long.valueOf(appConfig.getSecurityCodeExpireDate()));\n+\n+    List<AppPermissionEntity> appPermissions =\n+        getAppPermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getAppPermissions().addAll(appPermissions);\n+\n+    List<StudyPermissionEntity> studyPermissions =\n+        getStudyPermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getStudyPermissions().addAll(studyPermissions);\n+\n+    List<SitePermissionEntity> sitePermissions =\n+        getSitePermissisonsForSuperAdmin(user, superAdminDeatils);\n+    superAdminDeatils.getSitePermissions().addAll(sitePermissions);\n+\n+    userAdminRepository.saveAndFlush(superAdminDeatils);\n+\n+    logger.exit(String.format(CommonConstants.MESSAGE_CODE_LOG, MessageCode.ADD_NEW_USER_SUCCESS));\n+    return new AdminUserResponse(MessageCode.ADD_NEW_USER_SUCCESS, superAdminDeatils.getId());\n+  }\n+\n+  private List<SitePermissionEntity> getSitePermissisonsForSuperAdmin(\n+      UserRequest user, UserRegAdminEntity superAdminDeatils) {\n+    logger.entry(\"getSitePermissisonsForSuperAdmin()\");\n+    List<SiteEntity> sites =\n+        (List<SiteEntity>) CollectionUtils.emptyIfNull(siteRepository.findAll());\n+    List<SitePermissionEntity> sitePermissions = new ArrayList<>();\n+    for (SiteEntity siteInfo : sites) {\n+      SitePermissionEntity sitePermission =\n+          UserMapper.newSitePermissionEntity(user, null, superAdminDeatils, siteInfo);\n+      sitePermissions.add(sitePermission);\n+    }\n+\n+    logger.exit(String.format(\"total site permissions=%d\", sitePermissions.size()));\n+    return sitePermissions;\n+  }\n+\n+  private List<StudyPermissionEntity> getStudyPermissisonsForSuperAdmin(\n+      UserRequest user, UserRegAdminEntity superAdminDeatils) {\n+    logger.entry(\"getStudyPermissisonsForSuperAdmin()\");\n+    List<StudyEntity> studies =\n+        (List<StudyEntity>) CollectionUtils.emptyIfNull(studyRepository.findAll());\n+    List<StudyPermissionEntity> studyPermissions = new ArrayList<>();\n+    for (StudyEntity studyInfo : studies) {\n+      StudyPermissionEntity studyPermission =\n+          UserMapper.newStudyPermissionEntity(user, superAdminDeatils, null, studyInfo);\n+      studyPermissions.add(studyPermission);\n+    }\n+\n+    logger.exit(String.format(\"total study permissions=%d\", studyPermissions.size()));\n+    return studyPermissions;\n+  }\n+\n+  private List<AppPermissionEntity> getAppPermissisonsForSuperAdmin(\n+      UserRequest user, UserRegAdminEntity superAdminDeatils) {", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzY1Mw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462823653", "bodyText": "typo fixed", "author": "chiranjibi009", "createdAt": "2020-07-30T08:08:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjY4OQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462696689", "bodyText": "Again why is this being changed in this PR", "author": "saminguyen", "createdAt": "2020-07-30T02:26:23Z", "path": "participant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java", "diffHunk": "@@ -13,7 +13,7 @@\n import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.USER_ID_HEADER;\n import static com.google.cloud.healthcare.fdamystudies.common.CommonConstants.YES;\n import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.ALREADY_DECOMMISSIONED;\n-import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.CANNOT_REACTIVATE;\n+import static com.google.cloud.healthcare.fdamystudies.common.ErrorCode.CANNOT_REACTIVE;", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyMzk5MA==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462823990", "bodyText": "test cases were failing, hence changed to CANNOT_REACTIVE.", "author": "chiranjibi009", "createdAt": "2020-07-30T08:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NjY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzQwMg==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462697402", "bodyText": "Do we have Permission enums/CommonConstants for this", "author": "saminguyen", "createdAt": "2020-07-30T02:29:10Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/UserMapper.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.mapper;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserAppPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserSitePermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserStudyPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.CommonConstants;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+\n+public final class UserMapper {\n+\n+  private UserMapper() {}\n+\n+  public static UserRegAdminEntity fromUserRequest(\n+      UserRequest userRequest, long securityCodeExpireTime) {\n+    UserRegAdminEntity admin = new UserRegAdminEntity();\n+    admin.setEmail(userRequest.getEmail());\n+    admin.setFirstName(userRequest.getFirstName());\n+    admin.setLastName(userRequest.getLastName());\n+    admin.setCreatedBy(userRequest.getSuperAdminUserId());\n+    admin.setEmailChanged(false);\n+    admin.setStatus(CommonConstants.INVITED_STATUS); // 2-> Invited, 0-> Deactivated, 1-> Active\n+    admin.setSuperAdmin(userRequest.isSuperAdmin());\n+    admin.setSecurityCode(IdGenerator.id());\n+    admin.setSecurityCodeExpireDate(\n+        new Timestamp(\n+            Instant.now().plus(securityCodeExpireTime, ChronoUnit.MINUTES).toEpochMilli()));\n+    int manageLocation = userRequest.isSuperAdmin() ? 2 : userRequest.getManageLocations();\n+    admin.setEditPermission(manageLocation);\n+    return admin;\n+  }\n+\n+  public static UserRegAdminEntity fromUpdateUserRequest(\n+      UserRequest userRequest, UserRegAdminEntity adminDetails) {\n+    adminDetails.setEmail(userRequest.getEmail());\n+    adminDetails.setFirstName(userRequest.getFirstName());\n+    adminDetails.setLastName(userRequest.getLastName());\n+    adminDetails.setSuperAdmin(userRequest.isSuperAdmin());\n+    int manageLocation = userRequest.isSuperAdmin() ? 2 : userRequest.getManageLocations();\n+    adminDetails.setEditPermission(manageLocation);\n+    return adminDetails;\n+  }\n+\n+  public static SitePermissionEntity newSitePermissionEntity(\n+      UserRequest user,\n+      UserSitePermissionRequest site,\n+      UserRegAdminEntity superAdminDeatils,\n+      SiteEntity siteDetails) {\n+    SitePermissionEntity sitePermission = new SitePermissionEntity();\n+    sitePermission.setAppInfo(siteDetails.getStudy().getAppInfo());\n+    sitePermission.setStudy(siteDetails.getStudy());\n+    sitePermission.setSite(siteDetails);\n+    sitePermission.setCreatedBy(user.getSuperAdminUserId());\n+    int edit = site != null && site.getPermission() == 1 ? 0 : 1;", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNTQwMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462825403", "bodyText": "Added Permission enum and CommonConstants for this.", "author": "chiranjibi009", "createdAt": "2020-07-30T08:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzUxMw==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462697513", "bodyText": "CAN_EDIT CommonConstants?", "author": "saminguyen", "createdAt": "2020-07-30T02:29:34Z", "path": "participant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/UserMapper.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2020 Google LLC\n+ *\n+ * Use of this source code is governed by an MIT-style\n+ * license that can be found in the LICENSE file or at\n+ * https://opensource.org/licenses/MIT.\n+ */\n+\n+package com.google.cloud.healthcare.fdamystudies.mapper;\n+\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.collections4.CollectionUtils;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserAppPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserSitePermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.beans.UserStudyPermissionRequest;\n+import com.google.cloud.healthcare.fdamystudies.common.CommonConstants;\n+import com.google.cloud.healthcare.fdamystudies.common.IdGenerator;\n+import com.google.cloud.healthcare.fdamystudies.model.AppEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.AppPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SiteEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.SitePermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.StudyPermissionEntity;\n+import com.google.cloud.healthcare.fdamystudies.model.UserRegAdminEntity;\n+\n+public final class UserMapper {\n+\n+  private UserMapper() {}\n+\n+  public static UserRegAdminEntity fromUserRequest(\n+      UserRequest userRequest, long securityCodeExpireTime) {\n+    UserRegAdminEntity admin = new UserRegAdminEntity();\n+    admin.setEmail(userRequest.getEmail());\n+    admin.setFirstName(userRequest.getFirstName());\n+    admin.setLastName(userRequest.getLastName());\n+    admin.setCreatedBy(userRequest.getSuperAdminUserId());\n+    admin.setEmailChanged(false);\n+    admin.setStatus(CommonConstants.INVITED_STATUS); // 2-> Invited, 0-> Deactivated, 1-> Active\n+    admin.setSuperAdmin(userRequest.isSuperAdmin());\n+    admin.setSecurityCode(IdGenerator.id());\n+    admin.setSecurityCodeExpireDate(\n+        new Timestamp(\n+            Instant.now().plus(securityCodeExpireTime, ChronoUnit.MINUTES).toEpochMilli()));\n+    int manageLocation = userRequest.isSuperAdmin() ? 2 : userRequest.getManageLocations();\n+    admin.setEditPermission(manageLocation);\n+    return admin;\n+  }\n+\n+  public static UserRegAdminEntity fromUpdateUserRequest(\n+      UserRequest userRequest, UserRegAdminEntity adminDetails) {\n+    adminDetails.setEmail(userRequest.getEmail());\n+    adminDetails.setFirstName(userRequest.getFirstName());\n+    adminDetails.setLastName(userRequest.getLastName());\n+    adminDetails.setSuperAdmin(userRequest.isSuperAdmin());\n+    int manageLocation = userRequest.isSuperAdmin() ? 2 : userRequest.getManageLocations();\n+    adminDetails.setEditPermission(manageLocation);\n+    return adminDetails;\n+  }\n+\n+  public static SitePermissionEntity newSitePermissionEntity(\n+      UserRequest user,\n+      UserSitePermissionRequest site,\n+      UserRegAdminEntity superAdminDeatils,\n+      SiteEntity siteDetails) {\n+    SitePermissionEntity sitePermission = new SitePermissionEntity();\n+    sitePermission.setAppInfo(siteDetails.getStudy().getAppInfo());\n+    sitePermission.setStudy(siteDetails.getStudy());\n+    sitePermission.setSite(siteDetails);\n+    sitePermission.setCreatedBy(user.getSuperAdminUserId());\n+    int edit = site != null && site.getPermission() == 1 ? 0 : 1;\n+    sitePermission.setCanEdit(edit);\n+    sitePermission.setUrAdminUser(superAdminDeatils);\n+    return sitePermission;\n+  }\n+\n+  public static SitePermissionEntity newSitePermissionEntity(\n+      UserRequest user,\n+      UserRegAdminEntity superAdminDeatils,\n+      UserStudyPermissionRequest study,\n+      StudyEntity studyDetails,\n+      SiteEntity site) {\n+    SitePermissionEntity sitePermission = new SitePermissionEntity();\n+    sitePermission.setAppInfo(studyDetails.getAppInfo());\n+    sitePermission.setCreatedBy(user.getSuperAdminUserId());\n+    int edit = study.getPermission() == 1 ? 0 : 1;\n+    sitePermission.setCanEdit(edit);\n+    sitePermission.setStudy(studyDetails);\n+    sitePermission.setSite(site);\n+    sitePermission.setUrAdminUser(superAdminDeatils);\n+    return sitePermission;\n+  }\n+\n+  public static List<SitePermissionEntity> newSitePermissionList(\n+      UserRequest user,\n+      UserRegAdminEntity superAdminDeatils,\n+      UserAppPermissionRequest app,\n+      AppEntity appDetails,\n+      List<SiteEntity> sites) {\n+    List<SitePermissionEntity> sitePermissions = new ArrayList<>();\n+    if (CollectionUtils.isNotEmpty(sites)) {\n+      for (SiteEntity siteEntity : sites) {\n+        SitePermissionEntity sitePermission = new SitePermissionEntity();\n+        sitePermission.setAppInfo(appDetails);\n+        sitePermission.setCreatedBy(user.getSuperAdminUserId());\n+        int edit = app != null && app.getPermission() == 1 ? 0 : 1;\n+        sitePermission.setCanEdit(edit);\n+        sitePermission.setStudy(siteEntity.getStudy());\n+        sitePermission.setSite(siteEntity);\n+        sitePermission.setUrAdminUser(superAdminDeatils);\n+        sitePermissions.add(sitePermission);\n+      }\n+    }\n+\n+    return sitePermissions;\n+  }\n+\n+  public static StudyPermissionEntity newStudyPermissionEntity(\n+      UserRequest user,\n+      UserRegAdminEntity superAdminDeatils,\n+      UserStudyPermissionRequest study,\n+      StudyEntity studyDetails) {\n+    StudyPermissionEntity studyPermission = new StudyPermissionEntity();\n+    studyPermission.setAppInfo(studyDetails.getAppInfo());\n+    studyPermission.setStudy(studyDetails);\n+    studyPermission.setCreatedBy(user.getSuperAdminUserId());\n+    int edit = study != null && study.getPermission() == 1 ? 0 : 1;\n+    studyPermission.setEdit(edit);\n+    studyPermission.setUrAdminUser(superAdminDeatils);\n+    return studyPermission;\n+  }\n+\n+  public static List<StudyPermissionEntity> newStudyPermissionList(\n+      UserRequest userRequest,\n+      UserRegAdminEntity superAdminDeatils,\n+      UserAppPermissionRequest appRequest,\n+      AppEntity appDetails,\n+      List<StudyEntity> studies) {\n+    List<StudyPermissionEntity> studyPermissions = new ArrayList<>();\n+    if (CollectionUtils.isNotEmpty(studies)) {\n+      for (StudyEntity studyEntity : studies) {\n+        StudyPermissionEntity studyPermission = new StudyPermissionEntity();\n+        studyPermission.setAppInfo(appDetails);\n+        studyPermission.setCreatedBy(userRequest.getSuperAdminUserId());\n+        int edit = appRequest != null && appRequest.getPermission() == 1 ? 0 : 1;\n+        studyPermission.setEdit(edit);\n+        studyPermission.setStudy(studyEntity);\n+        studyPermission.setUrAdminUser(superAdminDeatils);\n+        studyPermissions.add(studyPermission);\n+      }\n+    }\n+    return studyPermissions;\n+  }\n+\n+  public static AppPermissionEntity newAppPermissionEntity(\n+      UserRequest user, UserRegAdminEntity superAdminDeatils, AppEntity app) {\n+    AppPermissionEntity appPermission = new AppPermissionEntity();\n+    appPermission.setAppInfo(app);\n+    appPermission.setCreatedBy(user.getSuperAdminUserId());\n+    appPermission.setEdit(1);", "originalCommit": "9cbe97836f5661995bcc7ce3acc0e9aa5abfce12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjgyNTU0MQ==", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/pull/678#discussion_r462825541", "bodyText": "Added CommonConstants for this.", "author": "chiranjibi009", "createdAt": "2020-07-30T08:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjY5NzUxMw=="}], "type": "inlineReview"}, {"oid": "6883a03aa9e6e4845b8e9c9408ae733c748652a0", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/6883a03aa9e6e4845b8e9c9408ae733c748652a0", "message": "commented PR code resolved", "committedDate": "2020-07-30T07:57:49Z", "type": "commit"}, {"oid": "4f4d51e40189f693731aab654c6ceaa664a1b0f9", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/4f4d51e40189f693731aab654c6ceaa664a1b0f9", "message": "Merge branch 'get-app-participants-api' into participant-manager-add-new-user-common-module\n\n# Conflicts:\n#\tcommon-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/MessageCode.java\n#\tcommon-modules/common-service/src/main/java/com/google/cloud/healthcare/fdamystudies/model/SiteEntity.java\n#\tparticipant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java\n#\tparticipant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "committedDate": "2020-07-31T06:20:22Z", "type": "commit"}, {"oid": "2372cae7d9153b40b5285d2b2714e903a01a83fb", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/2372cae7d9153b40b5285d2b2714e903a01a83fb", "message": "Merge branch 'develop' into participant-manager-add-new-user-common-module", "committedDate": "2020-08-17T05:33:28Z", "type": "commit"}, {"oid": "007bd7d3b3d35419df7d35e2053ac742e7565b8d", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/007bd7d3b3d35419df7d35e2053ac742e7565b8d", "message": "Import statements formatting", "committedDate": "2020-08-17T05:35:41Z", "type": "commit"}, {"oid": "55354da0d7eab62c48c051b38064a84299f4ae39", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/55354da0d7eab62c48c051b38064a84299f4ae39", "message": "Merge branch 'participant-manager-add-new-user-common-module' of https://github.com/GoogleCloudPlatform/fda-mystudies into participant-manager-add-new-user-common-module\n\n# Conflicts:\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/beans/ParticipantRegistryDetail.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/common/ParticipantManagerAuditLogHelper.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/config/AppPropertyConfig.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/AppController.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/controller/LocationController.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/mapper/StudyMapper.java\n#\tparticipant-manager-module/participant-manager-service/src/main/java/com/google/cloud/healthcare/fdamystudies/service/SiteServiceImpl.java\n#\tparticipant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/controller/LocationControllerTest.java\n#\tparticipant-manager-module/participant-manager-service/src/test/java/com/google/cloud/healthcare/fdamystudies/helper/TestDataHelper.java", "committedDate": "2020-08-17T05:55:28Z", "type": "commit"}, {"oid": "7fe64770d80efb3f888f975399afee44878d0e80", "url": "https://github.com/GoogleCloudPlatform/fda-mystudies/commit/7fe64770d80efb3f888f975399afee44878d0e80", "message": "Merge branch 'develop' into participant-manager-add-new-user-common-module", "committedDate": "2020-08-17T13:14:26Z", "type": "commit"}]}