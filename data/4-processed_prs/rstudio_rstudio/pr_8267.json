{"pr_number": 8267, "pr_title": "Verify connection state of PostgreSQL connection pooled connection and re-establish if necessary", "pr_createdAt": "2020-11-02T17:58:12Z", "pr_url": "https://github.com/rstudio/rstudio/pull/8267", "timeline": [{"oid": "bf5b4f7a9b7c98c0b593762b371bb7c577804964", "url": "https://github.com/rstudio/rstudio/commit/bf5b4f7a9b7c98c0b593762b371bb7c577804964", "message": "Verify connection state of PostgreSQL connection pooled connection and re-establish if necessary.\n\nThis fixes a bug where restarts of PostgreSQL or transient network failures with the database would\ncause pooled DB connections to fail forever until service restart. This is because SOCI has no\nautomatic retry operation for failed connections.\n\nFixes #8266", "committedDate": "2020-11-02T17:54:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMxNjM5MQ==", "url": "https://github.com/rstudio/rstudio/pull/8267#discussion_r516316391", "bodyText": "Two questions here...\n\nDo we want to preserve/log the error which caused us to attempt a reconnect?\nDo we always want to reconnect regardless of the error returned? (i.e. are there some errors which are unrecoverable?)", "author": "jmcphers", "createdAt": "2020-11-02T23:08:30Z", "path": "src/cpp/core/Database.cpp", "diffHunk": "@@ -563,6 +563,42 @@ std::string PooledConnection::driverName() const\n    return connection_->driverName();\n }\n \n+ConnectionPool::ConnectionPool(const ConnectionOptions& options) :\n+   connectionOptions_(options)\n+{\n+}\n+\n+void ConnectionPool::testAndReconnect(boost::shared_ptr<Connection>& connection)\n+{\n+   // do not test Sqlite connections - there is no backend system to connect to in this case\n+   // so any errors on the file handle itself we do not want to gracefully recover from, as they would\n+   // indicate a very serious programming error\n+   if (connection->driver() == Driver::Sqlite)\n+      return;\n+\n+   // it is possible for connections to go stale (such as if the upstream connection is closed)\n+   // which will prevent it from being usable - we test for this by running a very efficient query\n+   // and checking to make sure that no error has occurred\n+   Error error = connection->executeStr(\"SELECT 1\");\n+   if (!error)", "originalCommit": "bf5b4f7a9b7c98c0b593762b371bb7c577804964", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY3Mjg1OQ==", "url": "https://github.com/rstudio/rstudio/pull/8267#discussion_r516672859", "bodyText": "@kfeinauer Is there any reason why we can't use that list of recoverable Postgres errors that RSC uses here?\nAnother thing, could we preserve the last error that happened in the database connection instead of having to execute a new query?", "author": "ricardofandrade", "createdAt": "2020-11-03T13:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMxNjM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5NzQyNg==", "url": "https://github.com/rstudio/rstudio/pull/8267#discussion_r517397426", "bodyText": "We need to execute this query whenever a connection is taken from the pool to make sure it is still alive. Unfortunately, the error codes that are returned by SOCI do not properly indicate if we had a connection issue - SOCI only returns that an Unknown error occurred on the connection. I verified this while testing - my original implementation depended on checking for that particular error state and re-opening the connection just for that error.\nHowever, since SELECT 1 should always succeed on a valid connection, this appears to be the most efficient way to determine that a connection error has actually occurred.\n@jmcphers I will go ahead and log the original SELECT 1 error - this will clutter the logs a little bit, but this should be a fairly rare occurrence and give us more diagnostic info should we need it.", "author": "kfeinauer", "createdAt": "2020-11-04T14:47:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMxNjM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwOTc2NQ==", "url": "https://github.com/rstudio/rstudio/pull/8267#discussion_r517409765", "bodyText": "@kfeinauer I recall it was possible to \"unwrap\" the original Postgres error code. I think I used this:\nhttps://github.com/SOCI/soci/blob/d4d50d65002ec2fb1486622634c31234b5f05686/src/backends/postgresql/error.cpp#L52\nLook a little above that. You'll see that SOCI itself does some error classification. It doesn't quite match the one used in RSC though.\nThe reason why it's important to decide between recoverable and unrecoverable errors is that we shouldn't insist in reconnecting if the error is permanent, the service should stop. Insisting could throw the entire instance(s) in an undefined behavior state (functional, not in the C++ sense) potentially causing other problems or misleading users/admins. @jmcphers I'll let you make the call whether this is important for 1.4.\n+1 for logging the SELECT 1 error. But if we stop on unrecoverable errors, there won't be that many logs.", "author": "ricardofandrade", "createdAt": "2020-11-04T15:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMxNjM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyMjMxNw==", "url": "https://github.com/rstudio/rstudio/pull/8267#discussion_r517422317", "bodyText": "I don't agree that we need to specifically look at the postgres error code here, and it would be more code to propagate that.\nIf you cannot successfully execute SELECT 1, then it's a connection issue. I think checking each and every error code like is done in the Connect case is a bit overkill here: https://github.com/rstudio/connect/blob/87ca7e50260fd48755101d4ed94dc509c22b965a/src/connect/store/store.go#L646. Certainly, encountering a scenario where there is a truly unrecoverable database error is very exceptional.\nAlso, running sessions do not need database access to function properly - it's only needed to sign new users into the system. Stopping RSP entirely because of a database failure seems overkill to me, considering the vast majority of our product doesn't care if there's a database or not.", "author": "kfeinauer", "createdAt": "2020-11-04T15:21:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMxNjM5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQyMzUyNg==", "url": "https://github.com/rstudio/rstudio/pull/8267#discussion_r517423526", "bodyText": "I also do not know from looking at the sample code and the postgresql_soci_error code specifically how these error codes map and should exactly be handled. That introduces more uncertainty into the code than I am comfortable with at this point in the release.", "author": "kfeinauer", "createdAt": "2020-11-04T15:23:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMxNjM5MQ=="}], "type": "inlineReview"}, {"oid": "bbc0015dd4ab49bb887f12d059d751c243dc8e44", "url": "https://github.com/rstudio/rstudio/commit/bbc0015dd4ab49bb887f12d059d751c243dc8e44", "message": "Add logging statement", "committedDate": "2020-11-04T15:09:45Z", "type": "commit"}]}