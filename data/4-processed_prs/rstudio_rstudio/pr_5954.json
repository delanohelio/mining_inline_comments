{"pr_number": 5954, "pr_title": "Exclude patterns and files from Find In Files search and replace", "pr_createdAt": "2020-01-03T01:39:34Z", "pr_url": "https://github.com/rstudio/rstudio/pull/5954", "timeline": [{"oid": "c951b2ef8deb5348dd441dea572af34d88483dbc", "url": "https://github.com/rstudio/rstudio/commit/c951b2ef8deb5348dd441dea572af34d88483dbc", "message": "update RPCs to send/accept excludeFilePatterns, remove gitIgnore code", "committedDate": "2019-12-18T19:55:52Z", "type": "commit"}, {"oid": "460e0fac3a2af9ab3f5591631c189977de525a3a", "url": "https://github.com/rstudio/rstudio/commit/460e0fac3a2af9ab3f5591631c189977de525a3a", "message": "fix display bugs", "committedDate": "2019-12-18T20:55:51Z", "type": "commit"}, {"oid": "589d0e8c315275dea9972371feffbdf8e8a2d4da", "url": "https://github.com/rstudio/rstudio/commit/589d0e8c315275dea9972371feffbdf8e8a2d4da", "message": "remove gitIgnore from cpp code,\nfix bug not defaulting to previous state after exclude custom selected", "committedDate": "2019-12-18T21:34:42Z", "type": "commit"}, {"oid": "77500a8e167e5b57da05c493b50913284cdd2300", "url": "https://github.com/rstudio/rstudio/commit/77500a8e167e5b57da05c493b50913284cdd2300", "message": "start implementing reading of gitignore (WIP)", "committedDate": "2019-12-18T22:58:52Z", "type": "commit"}, {"oid": "65a61db5aff68311d54995573bb0d779a1ffff43", "url": "https://github.com/rstudio/rstudio/commit/65a61db5aff68311d54995573bb0d779a1ffff43", "message": "Merge branch 'master' of https://github.com/rstudio/rstudio into feature/replace-git-ignore", "committedDate": "2019-12-20T18:13:38Z", "type": "commit"}, {"oid": "b2b9d258277b0ab84eeec048369c02e27b82b14f", "url": "https://github.com/rstudio/rstudio/commit/b2b9d258277b0ab84eeec048369c02e27b82b14f", "message": "fix initialization of excludeFilePatterns, ignore some files in .gitignore", "committedDate": "2019-12-23T20:24:30Z", "type": "commit"}, {"oid": "3b71600c0fe4857adc4b300660cf624dd91f5e87", "url": "https://github.com/rstudio/rstudio/commit/3b71600c0fe4857adc4b300660cf624dd91f5e87", "message": "refactor createGitIgnoreString, make string include every .gitignore file", "committedDate": "2019-12-23T21:50:52Z", "type": "commit"}, {"oid": "28d9212e344d10866dedef41915ee65bec964cc4", "url": "https://github.com/rstudio/rstudio/commit/28d9212e344d10866dedef41915ee65bec964cc4", "message": "remove code causing UI to fail", "committedDate": "2019-12-23T21:52:46Z", "type": "commit"}, {"oid": "12f77b688a1e70cc6281414366d3f6b9e99e39d5", "url": "https://github.com/rstudio/rstudio/commit/12f77b688a1e70cc6281414366d3f6b9e99e39d5", "message": "uncomment accessibility changes, now working as expected", "committedDate": "2020-01-02T18:49:16Z", "type": "commit"}, {"oid": "1cec3f5f6e4dc0b9bcc860184fd180e557169657", "url": "https://github.com/rstudio/rstudio/commit/1cec3f5f6e4dc0b9bcc860184fd180e557169657", "message": "Revert \"uncomment accessibility changes, now working as expected\"\n\nThis reverts commit 12f77b688a1e70cc6281414366d3f6b9e99e39d5.", "committedDate": "2020-01-02T19:20:27Z", "type": "commit"}, {"oid": "8da132dbbde0ca295f7f02f494b0cd3b2c18e81d", "url": "https://github.com/rstudio/rstudio/commit/8da132dbbde0ca295f7f02f494b0cd3b2c18e81d", "message": "Fix bug causing previously commented out code to work. Add aria properties to new span field.", "committedDate": "2020-01-02T21:08:49Z", "type": "commit"}, {"oid": "84455d4ab548706550771aa2660ddd2e34e66633", "url": "https://github.com/rstudio/rstudio/commit/84455d4ab548706550771aa2660ddd2e34e66633", "message": "fix case", "committedDate": "2020-01-02T22:27:16Z", "type": "commit"}, {"oid": "3887602ded78176480626489046144ea3f91863f", "url": "https://github.com/rstudio/rstudio/commit/3887602ded78176480626489046144ea3f91863f", "message": "fix git command to check for ignored files", "committedDate": "2020-01-03T01:05:20Z", "type": "commit"}, {"oid": "2291853c9ee7574532f861ebe862a4e05e207a20", "url": "https://github.com/rstudio/rstudio/commit/2291853c9ee7574532f861ebe862a4e05e207a20", "message": "rename gitignore variables to accurately represent exclude-standard functionality", "committedDate": "2020-01-03T01:23:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzA2MA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362927060", "bodyText": "Would it be simpler to use boost::algorithm::replace_all here?", "author": "jmcphers", "createdAt": "2020-01-03T19:14:43Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -975,20 +977,44 @@ struct ReplaceOptions\n       replacePattern(\"\")\n    {}\n \n-   ReplaceOptions(std::string replace, bool useGitIgnore) :\n+   ReplaceOptions(std::string replace) :\n       empty(false),\n       preview(false),\n-      useGitIgnore(useGitIgnore),\n       replacePattern(replace)\n    {}\n \n    bool empty;\n    bool preview;\n-   bool useGitIgnore;\n \n    const std::string replacePattern;\n };\n \n+core::Error createGitExclusionString(const FilePath& dirPath, std::string* pResultString)\n+{\n+   shell_utils::ShellCommand cmd(\"git\");\n+   cmd << \"-C\";\n+   cmd << string_utils::utf8ToSystem(dirPath.getAbsolutePath());\n+   cmd << \"ls-files\";\n+   cmd << \"-i\";\n+   cmd << \"--exclude-standard\";\n+\n+   core::system::ProcessResult result;\n+   core::system::ProcessOptions options;\n+\n+   core::Error error = runCommand(cmd,\n+                                  options,\n+                                  &result);\n+   if (error)\n+      return error;\n+\n+   *pResultString = result.stdOut;\n+   size_t splitAt;\n+   while ((splitAt = pResultString->find('\\n')) != pResultString->npos)", "originalCommit": "2291853c9ee7574532f861ebe862a4e05e207a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDM3Mw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362964373", "bodyText": "Yes, thank you!", "author": "melissa-barca", "createdAt": "2020-01-03T21:18:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzk0Nw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362927947", "bodyText": "getString() can throw when the Value is not a string, so for safety would recommend testing and skipping non-string values in the array (realize this is unlikely but the consequence of an exception here is a full session crash!)", "author": "jmcphers", "createdAt": "2020-01-03T19:17:13Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1060,12 +1086,33 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n       cmd << \"--include=\" + filePattern.getString();\n    }\n \n-   cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n-\n-\n    // Filepaths received from the client will be UTF-8 encoded;\n    // convert to system encoding here.\n    FilePath dirPath = module_context::resolveAliasedPath(grepOptions.directory);\n+   for (json::Value filePattern : grepOptions.excludeFilePatterns)\n+   {\n+      // to retrieve the git exclusions, we run a git command and parse the output\n+      if (filePattern.getString().compare(\"gitExclusions\") == 0)", "originalCommit": "2291853c9ee7574532f861ebe862a4e05e207a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDQzNA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362964434", "bodyText": "Fixed", "author": "melissa-barca", "createdAt": "2020-01-03T21:18:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyNzk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODU3OA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362928578", "bodyText": "Should this be [] since the function returns an array?", "author": "jmcphers", "createdAt": "2020-01-03T19:18:59Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -104,6 +100,18 @@ private native JsArrayString getFilePatternsNative() /*-{\n          return this.filePatterns;\n       }-*/;\n \n+      public final String[] getExcludeFilePatterns()\n+      {\n+         return JsUtil.toStringArray(getExcludeFilePatternsNative());\n+      }\n+\n+      private native JsArrayString getExcludeFilePatternsNative() /*-{\n+\n+         if (!this.excludeFilePatterns)\n+            this.excludeFilePatterns=\"\";", "originalCommit": "2291853c9ee7574532f861ebe862a4e05e207a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDQ5Ng==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362964496", "bodyText": "Fixed", "author": "melissa-barca", "createdAt": "2020-01-03T21:18:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODkyNg==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362928926", "bodyText": "Nit: for very complicated reasons, we prefer StringUtil.equals (GWT has actually changed the way string comparison works between releases!)", "author": "jmcphers", "createdAt": "2020-01-03T19:20:07Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -203,12 +225,26 @@ protected State collectInput()\n             list.add(trimmedPattern);\n       }\n \n+      String excludeFilePatterns =\n+         listPresetExcludeFilePatterns_.getValue(\n+               listPresetExcludeFilePatterns_.getSelectedIndex());\n+      if (excludeFilePatterns == \"custom\")", "originalCommit": "2291853c9ee7574532f861ebe862a4e05e207a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk2NDUzMA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362964530", "bodyText": "Fixed", "author": "melissa-barca", "createdAt": "2020-01-03T21:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkyODkyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMjM4Nw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r362932387", "bodyText": "ls-files can return an unbounded amount of output, but most operating systems have a pretty small bound on the size of a shell command, which is a recipe for trouble here since we're trying to add every line to the command. This could cause us to fail when there are a lot of ignored files with long paths.", "author": "jmcphers", "createdAt": "2020-01-03T19:30:52Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1060,12 +1086,33 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n       cmd << \"--include=\" + filePattern.getString();\n    }\n \n-   cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n-\n-\n    // Filepaths received from the client will be UTF-8 encoded;\n    // convert to system encoding here.\n    FilePath dirPath = module_context::resolveAliasedPath(grepOptions.directory);\n+   for (json::Value filePattern : grepOptions.excludeFilePatterns)\n+   {\n+      // to retrieve the git exclusions, we run a git command and parse the output\n+      if (filePattern.getString().compare(\"gitExclusions\") == 0)\n+      {\n+         std::string excludeGitExclusion;\n+         error = createGitExclusionString(dirPath, &excludeGitExclusion);\n+         if (error)\n+            return error;\n+\n+         std::istringstream stream(excludeGitExclusion);\n+         std::vector<std::string> results((std::istream_iterator<std::string>(stream)),\n+            std::istream_iterator<std::string>());\n+         for (std::string filePattern : results)\n+         {\n+            filePattern.insert(0, dirPath.getAbsolutePath() + \"/\");\n+            cmd << \"--exclude=\" + filePattern;", "originalCommit": "2291853c9ee7574532f861ebe862a4e05e207a20", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyNjQwMg==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365026402", "bodyText": "I remove the ls-files code and rewrote grep with git grep", "author": "melissa-barca", "createdAt": "2020-01-10T00:36:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkzMjM4Nw=="}], "type": "inlineReview"}, {"oid": "860bf4815925bf3201042e8f802fceb401568345", "url": "https://github.com/rstudio/rstudio/commit/860bf4815925bf3201042e8f802fceb401568345", "message": "refactor code to meet standards", "committedDate": "2020-01-03T21:17:23Z", "type": "commit"}, {"oid": "58b96168fa59d05f184f49cb8fd5f6022ac79076", "url": "https://github.com/rstudio/rstudio/commit/58b96168fa59d05f184f49cb8fd5f6022ac79076", "message": "use `git grep` when excluding standard git exclusions to prevent an unbounded amount of output", "committedDate": "2020-01-06T21:19:00Z", "type": "commit"}, {"oid": "58b96168fa59d05f184f49cb8fd5f6022ac79076", "url": "https://github.com/rstudio/rstudio/commit/58b96168fa59d05f184f49cb8fd5f6022ac79076", "message": "use `git grep` when excluding standard git exclusions to prevent an unbounded amount of output", "committedDate": "2020-01-06T21:19:00Z", "type": "forcePushed"}, {"oid": "186008596e64425c0221491401034e2c0a165763", "url": "https://github.com/rstudio/rstudio/commit/186008596e64425c0221491401034e2c0a165763", "message": "use `git grep` when excluding standard git exclusions to prevent an unbounded amount of output", "committedDate": "2020-01-06T22:04:31Z", "type": "commit"}, {"oid": "fc6fee43759e81cdc1a3b9246c9ee86e24ee076b", "url": "https://github.com/rstudio/rstudio/commit/fc6fee43759e81cdc1a3b9246c9ee86e24ee076b", "message": "Merge branch 'feature/replace-git-ignore' of https://github.com/rstudio/rstudio into feature/replace-git-ignore", "committedDate": "2020-01-06T23:43:08Z", "type": "commit"}, {"oid": "c829f1fe60fc4346daeb1935eff69026ae3a8f50", "url": "https://github.com/rstudio/rstudio/commit/c829f1fe60fc4346daeb1935eff69026ae3a8f50", "message": "remove extra function declaration (wip)", "committedDate": "2020-01-07T00:44:26Z", "type": "commit"}, {"oid": "fe0b89d58f71fcb6c5c14f2fbadb3e6d82f7101a", "url": "https://github.com/rstudio/rstudio/commit/fe0b89d58f71fcb6c5c14f2fbadb3e6d82f7101a", "message": "make Find in Files functional with `git grep`\n- standard output from `git grep` differs from `grep` and this needs to be accounted for when\n  parsing our results", "committedDate": "2020-01-08T00:43:53Z", "type": "commit"}, {"oid": "bdcbdf49cb58f41d626c3fe5f9285760514d4d75", "url": "https://github.com/rstudio/rstudio/commit/bdcbdf49cb58f41d626c3fe5f9285760514d4d75", "message": "update FindInFilesState to save data related to replace previews on pause\n- also made updateFrequency_ in progress const bc it shouldn't change", "committedDate": "2020-01-08T01:45:46Z", "type": "commit"}, {"oid": "bdcbdf49cb58f41d626c3fe5f9285760514d4d75", "url": "https://github.com/rstudio/rstudio/commit/bdcbdf49cb58f41d626c3fe5f9285760514d4d75", "message": "update FindInFilesState to save data related to replace previews on pause\n- also made updateFrequency_ in progress const bc it shouldn't change", "committedDate": "2020-01-08T01:45:46Z", "type": "forcePushed"}, {"oid": "113f6900220f3171af9780a6085b175423e33c1e", "url": "https://github.com/rstudio/rstudio/commit/113f6900220f3171af9780a6085b175423e33c1e", "message": "add unit tests for regexes used to parse stdout results\n- move regex retrieval to SessionFind.hpp\n- also fix bug where exclude no longer worked with git grep,\n  and never worked when multiple patterns were requested\n- renamed some existing unit test variables to match standards", "committedDate": "2020-01-08T21:24:22Z", "type": "commit"}, {"oid": "7803a4ddae43b2883f67c182e49fbe561a9bf002", "url": "https://github.com/rstudio/rstudio/commit/7803a4ddae43b2883f67c182e49fbe561a9bf002", "message": "update the UI so a user cannot input file patterns when using git exclusions\nas git grep doesn't have an equivalent to grep's --include", "committedDate": "2020-01-08T22:59:15Z", "type": "forcePushed"}, {"oid": "e4c94d03c45ebe6eebed798d04158a094e24575c", "url": "https://github.com/rstudio/rstudio/commit/e4c94d03c45ebe6eebed798d04158a094e24575c", "message": "update the UI so a user cannot input file patterns when using git exclusions\nas git grep doesn't have an equivalent to grep's --include", "committedDate": "2020-01-09T19:07:11Z", "type": "commit"}, {"oid": "e4c94d03c45ebe6eebed798d04158a094e24575c", "url": "https://github.com/rstudio/rstudio/commit/e4c94d03c45ebe6eebed798d04158a094e24575c", "message": "update the UI so a user cannot input file patterns when using git exclusions\nas git grep doesn't have an equivalent to grep's --include", "committedDate": "2020-01-09T19:07:11Z", "type": "forcePushed"}, {"oid": "becfd6961fc5f344369c4320e560952ca4a82cae", "url": "https://github.com/rstudio/rstudio/commit/becfd6961fc5f344369c4320e560952ca4a82cae", "message": "remove old comment", "committedDate": "2020-01-09T19:08:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1OTk4OA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365359988", "bodyText": "Naming: retrieve usually implies \"fetch from somewhere\" -- would suggest getFileLine... or just fileLine...", "author": "jmcphers", "createdAt": "2020-01-10T18:04:14Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1257,6 +1344,26 @@ core::Error initialize()\n    return initBlock.execute();\n }\n \n+boost::regex retrieveFileLineNumberLineRegex(bool gitFlag)", "originalCommit": "becfd6961fc5f344369c4320e560952ca4a82cae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MjIyNQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365452225", "bodyText": "Fixed in latest commit", "author": "melissa-barca", "createdAt": "2020-01-10T22:16:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM1OTk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjQwOA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365362408", "bodyText": "Because we now require git to make this work, selecting this option is always going to result in an error if (a) git is not installed, or (b) the directory to search is not a git repo. How do you feel about hiding or disabling it up front in these cases? (Both are pretty easy to deduce, and (a) is part of SessionInfo so would be an easy change)", "author": "jmcphers", "createdAt": "2020-01-10T18:10:19Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.ui.xml", "diffHunk": "@@ -56,6 +55,20 @@\n             <span ui:field=\"spanPatternExample_\" class=\"{style.example}\">Example: *.R, *.r, *.csv. Separate multiple types with commas.</span>\n          </div>\n       </p>\n+\n+      <p><rw:FormLabel ui:field=\"labelExcludeFilePatterns_\" text=\"Exclude these files:\"/>\n+         <g:ListBox ui:field=\"listPresetExcludeFilePatterns_\"\n+                    styleName=\"{style.presetFilePatterns}\">\n+            <g:item value=\"\">None</g:item>\n+            <g:item value=\"gitExclusions\">Standard Git exclusions</g:item>", "originalCommit": "becfd6961fc5f344369c4320e560952ca4a82cae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQwNTk1MQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r365405951", "bodyText": "I like the idea of enabling or disabling the option up front and locally implemented the check for if git is installed. Is it possible to determine if a directory is a git repo without a server call? (I think I figured this out TBD...)\nRight now I just have it implemented so the back end will alert the user when it starts processing the find request.", "author": "melissa-barca", "createdAt": "2020-01-10T19:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDIwMw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366070203", "bodyText": "I added a isGitDirectory RPC to Files Server and call this when the directory changes to check if it's a git repo or not - then enable/disable the git option accordingly. This is ready for another review.", "author": "melissa-barca", "createdAt": "2020-01-13T22:47:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MjQwOA=="}], "type": "inlineReview"}, {"oid": "f7dec99b9d8b96d946cf768f637cc8ef79979f5b", "url": "https://github.com/rstudio/rstudio/commit/f7dec99b9d8b96d946cf768f637cc8ef79979f5b", "message": "rename functions using retrieve because we are not fetching\nupdate include/exclude file patterns to use enums for readability\ndisable the Git option when git is not installed", "committedDate": "2020-01-10T22:15:07Z", "type": "commit"}, {"oid": "730d6520888f53207075ac99e4815f705dbcbcf0", "url": "https://github.com/rstudio/rstudio/commit/730d6520888f53207075ac99e4815f705dbcbcf0", "message": "fix issue where in rare cases ReplaceOperationEndedEvent wasn't getting called and the progress bar\nwas visible after the replace had completed\n- removed code unnsuccesfully trying to fix this", "committedDate": "2020-01-10T22:15:24Z", "type": "commit"}, {"oid": "395ca23a264350cade327bbb2f6896f33bab06c7", "url": "https://github.com/rstudio/rstudio/commit/395ca23a264350cade327bbb2f6896f33bab06c7", "message": "disable Standard Git Exclusions selection when git is not installed or a git repo isn't selected\nadd value change handler to Find In Files directory chooser, on changes check if the new directory\nis a git repository and if git is installed\nadd new Files Server operation to check if a directory is a git directory", "committedDate": "2020-01-13T22:39:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MTU5NA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366081594", "bodyText": "Nit: GWT has automatic unboxing so this could be simplified to dialog.setGitStatus(isGitDirectory)", "author": "jmcphers", "createdAt": "2020-01-13T23:22:18Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindOutputPresenter.java", "diffHunk": "@@ -509,6 +525,33 @@ public void onResponseReceived(String handle)\n          }\n       });\n \n+      dialog.getDirectoryChooser().addValueChangeHandler(new ValueChangeHandler<String>() {\n+         @Override\n+         public void onValueChange(ValueChangeEvent<String> event)\n+         {\n+            fileServer_.isGitDirectory(dialog.getDirectory(),\n+                                   new ServerRequestCallback<Boolean>() {\n+               @Override\n+               public void onResponseReceived(Boolean isGitDirectory)\n+               {\n+                  if (isGitDirectory)", "originalCommit": "395ca23a264350cade327bbb2f6896f33bab06c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5NjcxMg==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366096712", "bodyText": "Fixed", "author": "melissa-barca", "createdAt": "2020-01-14T00:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MTU5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MjMyNA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366082324", "bodyText": "Maybe we should only add this value change handler when session_.getSessionInfo().isVcsAvailable is true? (otherwise there's no point as we'd never show git options)", "author": "jmcphers", "createdAt": "2020-01-13T23:24:42Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindOutputPresenter.java", "diffHunk": "@@ -509,6 +525,33 @@ public void onResponseReceived(String handle)\n          }\n       });\n \n+      dialog.getDirectoryChooser().addValueChangeHandler(new ValueChangeHandler<String>() {", "originalCommit": "395ca23a264350cade327bbb2f6896f33bab06c7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5NjY3NQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366096675", "bodyText": "done \ud83d\udc4d", "author": "melissa-barca", "createdAt": "2020-01-14T00:16:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA4MjMyNA=="}], "type": "inlineReview"}, {"oid": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "url": "https://github.com/rstudio/rstudio/commit/6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "message": "only check if a directory is a git directory if git is installed", "committedDate": "2020-01-14T00:15:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0OTg3Nw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366549877", "bodyText": "Does gitFlag_ only mean find in files excluding standard git exclusions, or does it have other implications?", "author": "MariaSemple", "createdAt": "2020-01-14T20:13:01Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -195,13 +205,15 @@ class FindInFilesState : public boost::noncopyable\n                     const std::string& input,\n                     const std::string& path,\n                     bool asRegex,\n-                    bool ignoreCase)\n+                    bool ignoreCase,\n+                    bool gitFlag)\n    {\n       handle_ = handle;\n       input_ = input;\n       path_ = path;\n       regex_ = asRegex;\n       ignoreCase_ = ignoreCase;\n+      gitFlag_ = gitFlag;", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NDc0MA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366584740", "bodyText": "Yes, which requires use of git's grep command and corresponding parameters", "author": "melissa-barca", "createdAt": "2020-01-14T21:36:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU0OTg3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MDUyNg==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366550526", "bodyText": "Why do things which can be paused need to be tracked via JSON and things which don't don't?", "author": "MariaSemple", "createdAt": "2020-01-14T20:14:38Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -327,9 +348,12 @@ class FindInFilesState : public boost::noncopyable\n    bool running_;\n    bool replace_;\n    bool preview_;\n+   bool gitFlag_;\n    std::string replacePattern_;\n    json::Array replaceMatchOns_;\n-   json::Array replaceMatchOffs_;\n+   json::Array replaceMatchOffs_; \n+   // this is not tracked via json because it exclusively applies to replaces (not previews)\n+   // which can not currently be paused", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4NTM4Nw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366585387", "bodyText": "the json only gets read from the onResume function - the json is used to preserve the state during a pause.", "author": "melissa-barca", "createdAt": "2020-01-14T21:37:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MDUyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MzI5Nw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366553297", "bodyText": "I think there should be a check here to ensure that there are at least 3 match values. If there aren't this line will cause a crash.", "author": "MariaSemple", "createdAt": "2020-01-14T20:21:09Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -535,7 +559,8 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n          nUtf8CharactersProcessed += charSize;\n \n          // update the match state\n-         if (match[1] == \"01\")\n+         if ((match[2] == \"1\" && findResults().gitFlag()) ||", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMDkzNw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366600937", "bodyText": "Good catch! This wasn't an issue with the previous regex, but could be with the new one added for git grep. Fixed.", "author": "melissa-barca", "createdAt": "2020-01-14T22:13:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MzI5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDYyOA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366554628", "bodyText": "Do we need to check that match.size() > 1 here, or are we guaranteed that there are at least two entries if regex_utils::match returns true?", "author": "MariaSemple", "createdAt": "2020-01-14T20:24:12Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MDYzMw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366590633", "bodyText": "There are three capture groups in both regexes so there will always be three entries.", "author": "melissa-barca", "createdAt": "2020-01-14T21:49:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzQ3NQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366643475", "bodyText": "The paranoid part of me still thinks a check is a good idea. What if boost lies to us and then the whole IDE crashes?", "author": "MariaSemple", "createdAt": "2020-01-15T00:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDYyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0ODc3Mg==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366648772", "bodyText": "Ok - added \ud83d\ude38", "author": "melissa-barca", "createdAt": "2020-01-15T00:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDkwNA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366554904", "bodyText": "What is the purpose of this block?", "author": "MariaSemple", "createdAt": "2020-01-14T20:24:54Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -786,10 +811,16 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n          errorMessage.clear();\n          boost::smatch match;\n-         if (regex_utils::match(line, match, boost::regex(\"^((?:[a-zA-Z]:)?[^:]+):(\\\\d+):(.*)\")))\n+         if (regex_utils::match(\n+               line, match, getFileLineNumberLineRegex(findResults().gitFlag())))\n          {\n             std::string file = module_context::createAliasedPath(\n                   FilePath(string_utils::systemToUtf8(match[1])));\n+            if (findResults().gitFlag())\n+            {\n+               file.insert(0, \"/\");\n+               file.insert(0, findResults().path());\n+            }", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MjMyNA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366592324", "bodyText": "Git grep returns the directory path in terms of the repository, but to read the file we need to know the file's location in terms of the computer - this is stored in where the original search was done. I added a comment explaining this", "author": "melissa-barca", "createdAt": "2020-01-14T21:53:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0MzA1Mw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366643053", "bodyText": "Ah, makes sense - thanks!", "author": "MariaSemple", "createdAt": "2020-01-15T00:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1NDkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1OTg5Ng==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366559896", "bodyText": "I know there are some shared options between  git and regular grep, but I think this might be cleaner if there was a section that set up cmd completely for git grep and a separate section that set up cmd completely for regular grep. You could put the shared options into named variables so that if they need to be changed later you still only have to update them in one place.", "author": "MariaSemple", "createdAt": "2020-01-14T20:37:21Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1055,18 +1130,25 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n    if (!grepOptions.asRegex)\n       cmd << \"-F\";\n \n-   for (json::Value filePattern : grepOptions.filePatterns)\n+   if (!gitFlag)\n    {\n-      cmd << \"--include=\" + filePattern.getString();\n+      for (json::Value filePattern : grepOptions.filePatterns)\n+      {\n+         cmd << \"--include=\" + filePattern.getString();\n+      }\n+      for (std::string arg : excludeArgs)\n+         cmd << arg;\n+      cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n+      cmd << string_utils::utf8ToSystem(dirPath.getAbsolutePath());\n+   }\n+   else\n+   {\n+      for (json::Value filePattern : grepOptions.filePatterns)\n+      {\n+         cmd << shell_utils::EscapeFilesOnly << \"--\" << shell_utils::EscapeAll;\n+         cmd << filePattern.getString();\n+      }", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYxOTgxNg==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366619816", "bodyText": "Done! I left the constructor as is since we need to initialize it to something and in most cases I don't think we'll be using git grep.", "author": "melissa-barca", "createdAt": "2020-01-14T23:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1OTg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366564992", "bodyText": "Would it make sense for gitFlag to belong to the GrepOptions struct?", "author": "MariaSemple", "createdAt": "2020-01-14T20:49:10Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1081,7 +1163,8 @@ core::Error runGrepOperation(const GrepOptions& grepOptions, const ReplaceOption\n                              grepOptions.searchPattern,\n                              grepOptions.directory,\n                              grepOptions.asRegex,\n-                             grepOptions.ignoreCase);\n+                             grepOptions.ignoreCase,\n+                             gitFlag);", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5NzA1MA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366597050", "bodyText": "The issue I see with this is that all of the GrepOptions are set when we received the initial RPC - we won't know the value of gitFlag until we parse these options from grepOptions.filePatterns. For clarity's sake I don't like the idea of having all of the data set on initialization except for one variable.\nIf we move that parsing to happen earlier, we'd also need to store the other filePattern information in the struct which I don't really think is necessary.", "author": "melissa-barca", "createdAt": "2020-01-14T22:04:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NDE2NA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366644164", "bodyText": "Which other filePattern information?", "author": "MariaSemple", "createdAt": "2020-01-15T00:32:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NzExOQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366647119", "bodyText": "excludeFilePatterns stores other data that gets added to the --exclude argument in the grep command, which is currently handled in processExcludeFilePatterns. We could pretty easily just call this function before initializing GrepOptions since it needs to be called at some point, but it seems a little weird because it is building actual arguments for the command, not just setting up general arguments.", "author": "melissa-barca", "createdAt": "2020-01-15T00:44:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU5OTgyNA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r367599824", "bodyText": "Looking at processExcludeFilePatterns, I do think those would make sense to be part of GrepOptions since all of those fields both change the grep options that will be used and impact nothing else, unless I'm misunderstanding and there isn't a unique GrepOptions per search (and optionally replace) request.", "author": "MariaSemple", "createdAt": "2020-01-16T19:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzMTk4NA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r367631984", "bodyText": "Done \ud83c\udf89", "author": "melissa-barca", "createdAt": "2020-01-16T20:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NDk5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTY0NQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366565645", "bodyText": "Is there ever a case where we construct a LocalProgress with a different update frequency? If not, what do you think about making kUpdatePercent a static const member of LocalProgress?", "author": "MariaSemple", "createdAt": "2020-01-14T20:50:52Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -1181,16 +1267,17 @@ core::Error completeReplace(const json::JsonRpcRequest& request,\n                                   &ignoreCase,\n                                   &directory,\n                                   &filePatterns,\n+                                  &excludeFilePatterns,\n                                   &originalFindCount,\n-                                  &replacePattern,\n-                                  &useGitIgnore);\n+                                  &replacePattern);\n    if (error)\n       return error;\n \n    static const int kUpdatePercent = 5;\n    LocalProgress* pProgress = new LocalProgress(originalFindCount, kUpdatePercent);", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMTk2Ng==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366601966", "bodyText": "There aren't any cases where we use a different frequency but there's no reason this has to be 5 which is why I didn't include it in the class. I don't want there to be any future confusion if that changes and we want to vary it for some reason or if someone wants to use this as a code reference.", "author": "melissa-barca", "createdAt": "2020-01-14T22:16:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0NDYyMw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366644623", "bodyText": "Sure. I think either way a comment would clear it up, since 5 was chosen somewhat arbitrarily (presumably because it seemed to have the best balance of feeling responsive but not being overly frequent?). If you did any testing that led to the choice of 5%, I think it would be good to note it in the code! :)", "author": "MariaSemple", "createdAt": "2020-01-15T00:34:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTY0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjY0ODgxOQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366648819", "bodyText": "Ok added a comment", "author": "melissa-barca", "createdAt": "2020-01-15T00:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NTY0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NTg4Nw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366575887", "bodyText": "Nit: could you rename this includeFilePatterns to mirror excludeFilePatterns, as well as other occurrences? I think that would make it a bit clearer when just glancing over the code.", "author": "MariaSemple", "createdAt": "2020-01-14T21:15:43Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/output/find/FindInFilesDialog.java", "diffHunk": "@@ -58,15 +62,15 @@ public static native State createState(String query,\n                                              String path,\n                                              boolean regex,\n                                              boolean caseSensitive,\n-                                             boolean gitIgnore,\n-                                             JsArrayString filePatterns) /*-{\n+                                             JsArrayString filePatterns,", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYwMDA5Mg==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366600092", "bodyText": "Done", "author": "melissa-barca", "createdAt": "2020-01-14T22:11:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3NTg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MTM3MQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366581371", "bodyText": "We discussed on slack renaming this to getGrepOutputRegex.", "author": "MariaSemple", "createdAt": "2020-01-14T21:28:20Z", "path": "src/cpp/session/modules/SessionFind.hpp", "diffHunk": "@@ -31,6 +31,10 @@ core::json::Object findInFilesStateAsJson();\n \n core::Error initialize();\n \n+boost::regex getFileLineNumberLineRegex(bool gitFlag);", "originalCommit": "6cd4082277d1c3d5eb1ec0619b085777d1578ca4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5ODMzNw==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r366598337", "bodyText": "Fixed \ud83d\udc4d", "author": "melissa-barca", "createdAt": "2020-01-14T22:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU4MTM3MQ=="}], "type": "inlineReview"}, {"oid": "837672d7049b6189d4dad40fc216d29375274ecb", "url": "https://github.com/rstudio/rstudio/commit/837672d7049b6189d4dad40fc216d29375274ecb", "message": "refactor git grep changes for readability and bug fix\n- fix potential bug when regex doesn't return 3 matches\n- remame filePatterns to includeFilePatterns for clarity\n- create grep/git grep commands separately\n- renamed function to parse grep output", "committedDate": "2020-01-14T23:05:09Z", "type": "commit"}, {"oid": "2d8f27b4fa882783175980dc41ee422bcf3bf688", "url": "https://github.com/rstudio/rstudio/commit/2d8f27b4fa882783175980dc41ee422bcf3bf688", "message": "add safety check and add comment for clarity", "committedDate": "2020-01-15T00:50:49Z", "type": "commit"}, {"oid": "92ffa58d85cbd32f1a69ecb397dbe0bbb51fb677", "url": "https://github.com/rstudio/rstudio/commit/92ffa58d85cbd32f1a69ecb397dbe0bbb51fb677", "message": "fix initialization of excludeFilePatterns, ignore some files in .gitignore, improve accessibility\n\nrefactor createGitIgnoreString, make string include every .gitignore file", "committedDate": "2020-01-15T01:11:30Z", "type": "commit"}, {"oid": "5893773badcfa073c810d8a490903428d5fe03c8", "url": "https://github.com/rstudio/rstudio/commit/5893773badcfa073c810d8a490903428d5fe03c8", "message": "fix case\n\nfix git command to check for ignored files\n\nrename gitignore variables to accurately represent exclude-standard functionality\n\nrefactor code to meet standards", "committedDate": "2020-01-15T01:11:35Z", "type": "commit"}, {"oid": "3d9b24f7249afa25497042255eaf98f433d02102", "url": "https://github.com/rstudio/rstudio/commit/3d9b24f7249afa25497042255eaf98f433d02102", "message": "use `git grep` when excluding standard git exclusions to prevent an unbounded amount of output", "committedDate": "2020-01-15T01:11:43Z", "type": "commit"}, {"oid": "d5da1169b3d97a2f1c9e74c498b6aba824ea92a4", "url": "https://github.com/rstudio/rstudio/commit/d5da1169b3d97a2f1c9e74c498b6aba824ea92a4", "message": "make Find in Files functional with `git grep`\n- standard output from `git grep` differs from `grep` and this needs to be accounted for when\n  parsing our results", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "78018841564840c4ae777dc5018d68543e6b897c", "url": "https://github.com/rstudio/rstudio/commit/78018841564840c4ae777dc5018d68543e6b897c", "message": "update FindInFilesState to save data related to replace previews on pause\n- also made updateFrequency_ in progress const bc it shouldn't change", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "e01cd01dbb68041ee6b3bd293e11f3a86fe9d4ed", "url": "https://github.com/rstudio/rstudio/commit/e01cd01dbb68041ee6b3bd293e11f3a86fe9d4ed", "message": "add unit tests for regexes used to parse stdout results\n- move regex retrieval to SessionFind.hpp\n- also fix bug where exclude no longer worked with git grep,\n  and never worked when multiple patterns were requested\n- renamed some existing unit test variables to match standards", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "7000138961795e830f72eb19637f310bef436e3f", "url": "https://github.com/rstudio/rstudio/commit/7000138961795e830f72eb19637f310bef436e3f", "message": "update the UI so a user cannot input file patterns when using git exclusions\nas git grep doesn't have an equivalent to grep's --include", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "1473d510d7f510a8e03a774f509b385ab457a322", "url": "https://github.com/rstudio/rstudio/commit/1473d510d7f510a8e03a774f509b385ab457a322", "message": "rename functions using retrieve because we are not fetching\nupdate include/exclude file patterns to use enums for readability\ndisable the Git option when git is not installed", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "29c5a50ff304c9c5299d19f7f3aab400943a4f34", "url": "https://github.com/rstudio/rstudio/commit/29c5a50ff304c9c5299d19f7f3aab400943a4f34", "message": "fix issue where in rare cases ReplaceOperationEndedEvent wasn't getting called and the progress bar\nwas visible after the replace had completed\n- removed code unnsuccesfully trying to fix this", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "383f3f50077970e7376f619324eacb9b1a047ead", "url": "https://github.com/rstudio/rstudio/commit/383f3f50077970e7376f619324eacb9b1a047ead", "message": "disable Standard Git Exclusions selection when git is not installed or a git repo isn't selected\nadd value change handler to Find In Files directory chooser, on changes check if the new directory\nis a git repository and if git is installed\nadd new Files Server operation to check if a directory is a git directory", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "6822b2d9b1e080539f54ea89b12d25b287f500d3", "url": "https://github.com/rstudio/rstudio/commit/6822b2d9b1e080539f54ea89b12d25b287f500d3", "message": "only check if a directory is a git directory if git is installed", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "890eec1e0e8103dfd3cb37807128f600430bffe7", "url": "https://github.com/rstudio/rstudio/commit/890eec1e0e8103dfd3cb37807128f600430bffe7", "message": "refactor git grep changes for readability and bug fix\n- fix potential bug when regex doesn't return 3 matches\n- remame filePatterns to includeFilePatterns for clarity\n- create grep/git grep commands separately\n- renamed function to parse grep output", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "3820db91167b139d1192d21763d0004a0b9858c5", "url": "https://github.com/rstudio/rstudio/commit/3820db91167b139d1192d21763d0004a0b9858c5", "message": "add safety check and add comment for clarity", "committedDate": "2020-01-15T01:11:55Z", "type": "commit"}, {"oid": "c8feea1c5ed1cba80a31decabe75c8aa732691c6", "url": "https://github.com/rstudio/rstudio/commit/c8feea1c5ed1cba80a31decabe75c8aa732691c6", "message": "Merge branch 'feature/replace-git-ignore' of https://github.com/rstudio/rstudio into feature/replace-git-ignore", "committedDate": "2020-01-16T19:24:26Z", "type": "commit"}, {"oid": "0beef751656ddf7e66329446c1e499f2c8ef8090", "url": "https://github.com/rstudio/rstudio/commit/0beef751656ddf7e66329446c1e499f2c8ef8090", "message": "move excludeFilePatterns derivatives into GrepOptions and switch GrepOptions to a class", "committedDate": "2020-01-16T20:23:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNDMwOQ==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r367634309", "bodyText": "Nit: no need to return a const bool since you're returning by-value rather than by-reference.", "author": "MariaSemple", "createdAt": "2020-01-16T20:31:06Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -987,26 +987,93 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n \n } // namespace\n \n-struct GrepOptions\n+class GrepOptions : public boost::noncopyable\n {\n+public:\n+\n    GrepOptions(std::string search, std::string directory,\n       json::Array includeFilePatterns, json::Array excludeFilePatterns,\n       bool asRegex, bool ignoreCase) :\n-      asRegex(asRegex),\n-      ignoreCase(ignoreCase),\n-      searchPattern(search),\n-      directory(directory),\n-      includeFilePatterns(includeFilePatterns),\n-      excludeFilePatterns(excludeFilePatterns)\n-   {}\n+      asRegex_(asRegex),\n+      ignoreCase_(ignoreCase),\n+      searchPattern_(search),\n+      directory_(directory),\n+      includeFilePatterns_(includeFilePatterns),\n+      excludeFilePatterns_(excludeFilePatterns)\n+   {\n+      processExcludeFilePatterns();\n+   }\n+\n+   const bool asRegex() const\n+   {\n+      return asRegex_;\n+   }\n \n-   bool asRegex;\n-   bool ignoreCase;\n+   const bool ignoreCase() const\n+   {\n+      return ignoreCase_;\n+   }\n+\n+   const std::string& searchPattern() const\n+   {\n+      return searchPattern_;\n+   }\n+\n+   const std::string& directory() const\n+   {\n+      return directory_;\n+   }\n+\n+   const json::Array& includeFilePatterns() const\n+   {\n+      return includeFilePatterns_;\n+   }\n+\n+   const json::Array& excludeFilePatterns() const\n+   {\n+      return excludeFilePatterns_;\n+   }\n+\n+   const bool gitFlag() const", "originalCommit": "0beef751656ddf7e66329446c1e499f2c8ef8090", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNzU1MA==", "url": "https://github.com/rstudio/rstudio/pull/5954#discussion_r367637550", "bodyText": "fixed", "author": "melissa-barca", "createdAt": "2020-01-16T20:37:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzYzNDMwOQ=="}], "type": "inlineReview"}, {"oid": "318bfb8f512c55574dbbe004480b19b966e03004", "url": "https://github.com/rstudio/rstudio/commit/318bfb8f512c55574dbbe004480b19b966e03004", "message": "remove const when returning by-value", "committedDate": "2020-01-16T20:35:39Z", "type": "commit"}]}