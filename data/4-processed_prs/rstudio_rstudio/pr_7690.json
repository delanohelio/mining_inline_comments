{"pr_number": 7690, "pr_title": "fix range analysis warnings in newest clang", "pr_createdAt": "2020-08-31T19:19:40Z", "pr_url": "https://github.com/rstudio/rstudio/pull/7690", "timeline": [{"oid": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2", "url": "https://github.com/rstudio/rstudio/commit/16e12cdbba22385ec8d97fdeb19e651cbd7894e2", "message": "fix range analysis warnings in newest clang", "committedDate": "2020-08-31T19:17:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0ODMyNA==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480348324", "bodyText": "This method returns a pointer to stack-allocated memory (moral equivalent of return std::string().c_str()); given that it's unsafe I've decided to remove it. This didn't affect anything in open source; if something is effected in pro then I think we need to change those usages to be safer.", "author": "kevinushey", "createdAt": "2020-08-31T19:27:36Z", "path": "src/cpp/shared_core/json/Json.cpp", "diffHunk": "@@ -586,12 +586,6 @@ Object Value::getValue<Object>() const\n    return copy;\n }\n \n-template<>", "originalCommit": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTI4NQ==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480399285", "bodyText": "I agree - I don't see a reason why the caller couldn't get the string value and call c_str() themselves.", "author": "MariaSemple", "createdAt": "2020-08-31T21:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM0ODMyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480399824", "bodyText": "This compiles? The parameter is a const &, so I think we should use const & here to ensure that we won't accidentally gut something we shouldn't.", "author": "MariaSemple", "createdAt": "2020-08-31T21:08:10Z", "path": "src/cpp/shared_core/include/shared_core/json/Json.hpp", "diffHunk": "@@ -1790,7 +1790,7 @@ template <typename T>\n inline Value toJsonValue(const std::vector<T>& in_vector)\n {\n    Array results;\n-   for (const T& val : in_vector)\n+   for (auto&& val : in_vector)", "originalCommit": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMTY4MQ==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480431681", "bodyText": "It does -- this actually does deduce as const T& for a regular const std::vector<T>&. This is because it basically uses the result of decltype(*val.begin()), and for const vectors this will return a const interator which will yield a const T& when dereferenced. See e.g.\nhttps://godbolt.org/z/Ej973W\nIn other words, auto&& preserves the const-ness here because the container itself handles const-ness in its iterators.", "author": "kevinushey", "createdAt": "2020-08-31T22:22:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1NjE4NA==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480456184", "bodyText": "In that case, why change this away from const T& val to auto&& when we use const auto& in other places? I also think both const auto& and const T& are more obvious in their meaning to the reader.", "author": "MariaSemple", "createdAt": "2020-08-31T23:00:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQ1Nzc4Nw==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480457787", "bodyText": "Oh -  I see in the approach section it's because of the potential weirdness with std::vector<bool>", "author": "MariaSemple", "createdAt": "2020-08-31T23:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDIyMA==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480400220", "bodyText": "Is const & incorrect here?", "author": "MariaSemple", "createdAt": "2020-08-31T21:08:59Z", "path": "src/cpp/session/SessionMain.cpp", "diffHunk": "@@ -650,7 +650,8 @@ Error rInit(const rstudio::r::session::RInitInfo& rInitInfo)\n    error = rstudio::r::json::getRpcMethods(&rMethods);\n    if (error)\n       return error;\n-   for (const json::JsonRpcMethod& method : rMethods)\n+   \n+   for (json::JsonRpcMethod method : rMethods)", "originalCommit": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjc5MQ==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480432791", "bodyText": "It seems to be; at least, -Wrange-loop-analysis indicates that doing this avoids copies. I don't quite understand why but this makes the compiler happy.", "author": "kevinushey", "createdAt": "2020-08-31T22:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDIyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDgwNw==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480400807", "bodyText": "This is a copy instead of a reference because it's an enum type (and therefore just as fast/memory efficient to copy as to copy the reference of it)?", "author": "MariaSemple", "createdAt": "2020-08-31T21:10:14Z", "path": "src/cpp/core/ConfigProfile.cpp", "diffHunk": "@@ -88,7 +88,7 @@ Error ConfigProfile::parseString(const std::string& profileStr)\n    for (const ptree::value_type& child : profileTree)\n    {\n       boost::optional<Level> matchingLevel;\n-      for (const Level& level : sections_)\n+      for (Level level : sections_)", "originalCommit": "16e12cdbba22385ec8d97fdeb19e651cbd7894e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQzMjkxMQ==", "url": "https://github.com/rstudio/rstudio/pull/7690#discussion_r480432911", "bodyText": "Right, exactly.", "author": "kevinushey", "createdAt": "2020-08-31T22:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMDgwNw=="}], "type": "inlineReview"}]}