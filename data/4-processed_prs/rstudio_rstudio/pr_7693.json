{"pr_number": 7693, "pr_title": "Chunk grading", "pr_createdAt": "2020-08-31T22:48:36Z", "pr_url": "https://github.com/rstudio/rstudio/pull/7693", "timeline": [{"oid": "344f84beaeb2207be2358869188289689b08f9a5", "url": "https://github.com/rstudio/rstudio/commit/344f84beaeb2207be2358869188289689b08f9a5", "message": "add rstudioapi register and unregister chunk implementations", "committedDate": "2020-08-10T19:35:04Z", "type": "commit"}, {"oid": "59f39f0151fb32aa0c276903adc91fae4b053e02", "url": "https://github.com/rstudio/rstudio/commit/59f39f0151fb32aa0c276903adc91fae4b053e02", "message": "send html callback with chunk complete event", "committedDate": "2020-08-10T22:10:19Z", "type": "commit"}, {"oid": "046d9ee65dfe751fbfd5668c8659eacdc36eeffd", "url": "https://github.com/rstudio/rstudio/commit/046d9ee65dfe751fbfd5668c8659eacdc36eeffd", "message": "implement unregister chunk callback", "committedDate": "2020-08-11T17:42:40Z", "type": "commit"}, {"oid": "21016bc5e93db4a569f83455d8e67f8a073f83b9", "url": "https://github.com/rstudio/rstudio/commit/21016bc5e93db4a569f83455d8e67f8a073f83b9", "message": "render html after chunk output", "committedDate": "2020-08-11T21:55:34Z", "type": "commit"}, {"oid": "14916e1834707af5744238f48c8d3cc98a5ba941", "url": "https://github.com/rstudio/rstudio/commit/14916e1834707af5744238f48c8d3cc98a5ba941", "message": "don't use 'callback' name", "committedDate": "2020-08-19T14:38:12Z", "type": "commit"}, {"oid": "f6526a2ea57ee13358bd2c805c3e0597d0bd4ead", "url": "https://github.com/rstudio/rstudio/commit/f6526a2ea57ee13358bd2c805c3e0597d0bd4ead", "message": "update parameters, pass chunkcode to callback, create callback iframe under chunk output", "committedDate": "2020-08-28T16:32:26Z", "type": "commit"}, {"oid": "0067ac4ada520ebf8a3f48b1e749ff56ddd6be45", "url": "https://github.com/rstudio/rstudio/commit/0067ac4ada520ebf8a3f48b1e749ff56ddd6be45", "message": "move fillIFrame to DomUtils and fix spacing issues", "committedDate": "2020-08-31T14:51:49Z", "type": "commit"}, {"oid": "8981337bf37f711659bfdbe2c3c3a482a2d86269", "url": "https://github.com/rstudio/rstudio/commit/8981337bf37f711659bfdbe2c3c3a482a2d86269", "message": "display callback output for gallery view", "committedDate": "2020-08-31T16:58:17Z", "type": "commit"}, {"oid": "7fee438475ee77132e1428bf474fcfe0303feaff", "url": "https://github.com/rstudio/rstudio/commit/7fee438475ee77132e1428bf474fcfe0303feaff", "message": "code clean up", "committedDate": "2020-08-31T17:13:43Z", "type": "commit"}, {"oid": "d019b7e66f51a14586840bce93ad4a5aa1944312", "url": "https://github.com/rstudio/rstudio/commit/d019b7e66f51a14586840bce93ad4a5aa1944312", "message": "allow for a list of callbacks", "committedDate": "2020-08-31T19:46:04Z", "type": "commit"}, {"oid": "ab8e0f018bc46801e3f78842488ef84a9a32c3d0", "url": "https://github.com/rstudio/rstudio/commit/ab8e0f018bc46801e3f78842488ef84a9a32c3d0", "message": "pass the user-friendly chunk label to callback fn", "committedDate": "2020-08-31T21:48:03Z", "type": "commit"}, {"oid": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "url": "https://github.com/rstudio/rstudio/commit/f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "message": "show full width in output", "committedDate": "2020-09-01T14:23:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1NzgwNQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485057805", "bodyText": "For robustness you should check if the environment exists specifically in the tools environment.", "author": "jmcphers", "createdAt": "2020-09-08T16:42:58Z", "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+\n+   # if one does not already exist, add an environment which will host registered callbacks\n+   if (!exists(\".rs.notebookChunkCallbacks\"))", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1ODkxNA==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485058914", "bodyText": "I don't think this should have a default value since you'd never really want to register an no-op function as a callback.", "author": "jmcphers", "createdAt": "2020-09-08T16:44:49Z", "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA1OTkzMg==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485059932", "bodyText": "I think we should emit a warning here if (a) the environment doesn't exist or (b) the handle wasn't found in the environment.", "author": "jmcphers", "createdAt": "2020-09-08T16:46:33Z", "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+\n+   # if one does not already exist, add an environment which will host registered callbacks\n+   if (!exists(\".rs.notebookChunkCallbacks\"))\n+      assign(\".rs.notebookChunkCallbacks\",\n+             value = new.env(parent = emptyenv()),\n+             envir = .rs.toolsEnv())\n+\n+   data <- chunkCallback\n+   handler <- .Call(\"rs_createUUID\")\n+   assign(handler, value = data, envir = .rs.notebookChunkCallbacks)\n+\n+   return(handler)\n+})\n+\n+# unregister a chunk callback functions\n+.rs.addApiFunction(\"unregisterChunkCallback\", function(handle) {\n+  if (exists(\".rs.notebookChunkCallbacks\") &&", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MDUxOQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485060519", "bodyText": "This should be wrapped in a try/catch so we can tolerate failures occurring in the user-supplied chunkCallback function.", "author": "jmcphers", "createdAt": "2020-09-08T16:47:36Z", "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,21 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\"))\n+  {\n+     results <- list()\n+     handles <- ls(.rs.notebookChunkCallbacks)\n+     for (handle in handles) {\n+        chunkCallback <- get(handle, envir = .rs.notebookChunkCallbacks)\n+        results <- c(results, chunkCallback(chunkName, chunkCode))", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjE4Ng==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485062186", "bodyText": "At some point we will also need to pass the results into this R function. Those may be nontrivially expensive to collect, so we might consider asking R whether the chunk callback environment exists first.", "author": "jmcphers", "createdAt": "2020-09-08T16:50:34Z", "path": "src/cpp/session/modules/rmarkdown/SessionRmdNotebook.cpp", "diffHunk": "@@ -172,9 +173,25 @@ bool fixChunkFilename(int, const core::FilePath& path)\n \n void onChunkExecCompleted(const std::string& docId, \n                           const std::string& chunkId,\n+                          const std::string& code,\n+                          const std::string& label,\n                           const std::string& nbCtxId)\n {\n-   emitOutputFinished(docId, chunkId, ExecScopeChunk);\n+   r::sexp::Protect rProtect;\n+   SEXP resultSEXP = R_NilValue;\n+   json::Array results;\n+\n+   r::exec::RFunction func(\".rs.executeChunkCallback\");\n+   func.addParam(label);\n+   func.addParam(code);", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4NzIzNA==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485887234", "bodyText": "I updated the tools code so that the environment is always created rather than only once it is in use.", "author": "melissa-barca", "createdAt": "2020-09-09T20:00:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2MjE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NTEzNA==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485065134", "bodyText": "Why does this make the document dirty?", "author": "jmcphers", "createdAt": "2020-09-08T16:55:46Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/rmd/TextEditingTargetNotebook.java", "diffHunk": "@@ -793,6 +793,15 @@ else if (data.getType() == RmdChunkOutputFinishedEvent.TYPE_INTERACTIVE &&\n             setDirtyState();\n          }\n       }\n+\n+      if (outputs_.containsKey(data.getChunkId()) &&\n+          !data.getHtmlCallback().isEmpty())\n+      {\n+         ArrayList<String> callbacks = data.getHtmlCallback();\n+         for (String callback : callbacks)\n+            outputs_.get(data.getChunkId()).getOutputWidget().renderHtml(callback);\n+         setDirtyState();", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4ODA0MQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485888041", "bodyText": "It shouldn't be, removed!", "author": "melissa-barca", "createdAt": "2020-09-09T20:01:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA2NTEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNjgwMg==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485836802", "bodyText": "nit: use PACKAGE = \"(embedding)\" to make it clear to R that the routine we're trying to call is provided by RStudio as opposed to a separate loaded DLL", "author": "kevinushey", "createdAt": "2020-09-09T18:45:31Z", "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+\n+   # if one does not already exist, add an environment which will host registered callbacks\n+   if (!exists(\".rs.notebookChunkCallbacks\"))\n+      assign(\".rs.notebookChunkCallbacks\",\n+             value = new.env(parent = emptyenv()),\n+             envir = .rs.toolsEnv())\n+\n+   data <- chunkCallback\n+   handler <- .Call(\"rs_createUUID\")", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzI3NQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485837275", "bodyText": "This is also extra nitpicky but I'd call this a handle as opposed to a handler as it's just an opaque ID you can use as opposed to an object that knows how to \"handle\" things.", "author": "kevinushey", "createdAt": "2020-09-09T18:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNjgwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzNzc1MQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485837751", "bodyText": "It may also be worth validating that this is a function that accepts (at least) two parameters -- up to you if you think it's worth it. You can use formals(chunkCallback) to see what formals are declared for that function.", "author": "kevinushey", "createdAt": "2020-09-09T18:47:30Z", "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,33 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback = function(chunkName, chunkCode){}) {\n+\n+   if (!is.function(chunkCallback))", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0MzE2NQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485843165", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 handles <- ls(.rs.notebookChunkCallbacks)\n          \n          \n            \n                 handles <- ls(envir = .rs.notebookChunkCallbacks)", "author": "kevinushey", "createdAt": "2020-09-09T18:57:35Z", "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,21 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\"))\n+  {\n+     results <- list()\n+     handles <- ls(.rs.notebookChunkCallbacks)", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDc4MA==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485844780", "bodyText": "nit: feels awkward to have a static import of only this symbol and not the others; could we remove this and just qualify our usage?", "author": "kevinushey", "createdAt": "2020-09-09T19:00:29Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "diffHunk": "@@ -68,6 +68,8 @@\n import com.google.gwt.user.client.ui.SimplePanel;\n import com.google.gwt.user.client.ui.Widget;\n \n+import static org.rstudio.studio.client.rmarkdown.model.RmdChunkOutputUnit.TYPE_HTML;", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg4ODM3MQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485888371", "bodyText": "Oops, that was IntelliJ \"helping\". I've removed it.", "author": "melissa-barca", "createdAt": "2020-09-09T20:02:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NDc4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NTY3OQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485845679", "bodyText": "It looks like we create a render timer here but then never use it?", "author": "kevinushey", "createdAt": "2020-09-09T19:02:15Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/ChunkOutputWidget.java", "diffHunk": "@@ -274,7 +276,15 @@ public HandlerRegistration addExpansionStateChangeHandler(\n    {\n       return expansionState_.addValueChangeHandler(handler);\n    }\n-    \n+\n+   public void renderHtml(String htmlOutput)\n+   {\n+      if (StringUtil.isNullOrEmpty(htmlOutput))\n+         return;\n+      final RenderTimer renderTimer = new RenderTimer();", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTg0NzIyNQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r485847225", "bodyText": "Do we need to check for errors here?", "author": "kevinushey", "createdAt": "2020-09-09T19:05:16Z", "path": "src/cpp/session/modules/rmarkdown/SessionRmdNotebook.cpp", "diffHunk": "@@ -172,9 +173,25 @@ bool fixChunkFilename(int, const core::FilePath& path)\n \n void onChunkExecCompleted(const std::string& docId, \n                           const std::string& chunkId,\n+                          const std::string& code,\n+                          const std::string& label,\n                           const std::string& nbCtxId)\n {\n-   emitOutputFinished(docId, chunkId, ExecScopeChunk);\n+   r::sexp::Protect rProtect;\n+   SEXP resultSEXP = R_NilValue;\n+   json::Array results;\n+\n+   r::exec::RFunction func(\".rs.executeChunkCallback\");\n+   func.addParam(label);\n+   func.addParam(code);\n+\n+   core::Error error = func.call(&resultSEXP, &rProtect);\n+   if (error)\n+      LOG_ERROR(error);\n+   else if (!r::sexp::isNull(resultSEXP))\n+      Error error = r::json::jsonValueFromList(resultSEXP, &results);", "originalCommit": "f45be5a819c5aaf2bb69cf3f2b1e2224148ef14e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "255cbd6d035cdd12c6305054ec33a27d200ef9aa", "url": "https://github.com/rstudio/rstudio/commit/255cbd6d035cdd12c6305054ec33a27d200ef9aa", "message": "verify .rs.notebookChunkCallbacks is in the tools environment and remove default value for callback\n\nadd warnings for invalid parameters\n\ncreate the callback environment with the tools environment", "committedDate": "2020-09-09T19:25:35Z", "type": "commit"}, {"oid": "01ec533025731eb1960e346d67a01e033a262a4e", "url": "https://github.com/rstudio/rstudio/commit/01ec533025731eb1960e346d67a01e033a262a4e", "message": "specify parameter\n\nCo-authored-by: Kevin Ushey <kevin@rstudio.com>", "committedDate": "2020-09-09T19:28:47Z", "type": "commit"}, {"oid": "4421a4d47794ed79f70dac6bef74e60fe07f4aa4", "url": "https://github.com/rstudio/rstudio/commit/4421a4d47794ed79f70dac6bef74e60fe07f4aa4", "message": "improve error handling and variable names", "committedDate": "2020-09-09T19:57:53Z", "type": "commit"}, {"oid": "4421a4d47794ed79f70dac6bef74e60fe07f4aa4", "url": "https://github.com/rstudio/rstudio/commit/4421a4d47794ed79f70dac6bef74e60fe07f4aa4", "message": "improve error handling and variable names", "committedDate": "2020-09-09T19:57:53Z", "type": "forcePushed"}, {"oid": "741a9fe3a6fa9100ce186c89aadfd3a3ed723343", "url": "https://github.com/rstudio/rstudio/commit/741a9fe3a6fa9100ce186c89aadfd3a3ed723343", "message": "dynamically resize callback height", "committedDate": "2020-09-11T17:51:10Z", "type": "commit"}, {"oid": "9a2f51562ffa91b468f127f3ed6347ee05f48987", "url": "https://github.com/rstudio/rstudio/commit/9a2f51562ffa91b468f127f3ed6347ee05f48987", "message": "increase chunk output height", "committedDate": "2020-09-11T18:11:48Z", "type": "commit"}, {"oid": "e4362f224b6c8bd4977ee5a5968b58b075debb67", "url": "https://github.com/rstudio/rstudio/commit/e4362f224b6c8bd4977ee5a5968b58b075debb67", "message": "assign null default to unregisterChunkCallback", "committedDate": "2020-09-11T20:56:36Z", "type": "commit"}, {"oid": "13293fbb0a8fb2fe303d472729b0f1199b1dd898", "url": "https://github.com/rstudio/rstudio/commit/13293fbb0a8fb2fe303d472729b0f1199b1dd898", "message": "only accepts one chunk callback", "committedDate": "2020-09-11T21:51:59Z", "type": "commit"}, {"oid": "3005af956154ff53cd555cbe55d20d496b2716a1", "url": "https://github.com/rstudio/rstudio/commit/3005af956154ff53cd555cbe55d20d496b2716a1", "message": "check if environment is empty before processing callback", "committedDate": "2020-09-14T14:44:32Z", "type": "commit"}, {"oid": "9192342c6fa470cbeb4c2e3b083ae6029fc8973c", "url": "https://github.com/rstudio/rstudio/commit/9192342c6fa470cbeb4c2e3b083ae6029fc8973c", "message": "make function generic", "committedDate": "2020-09-14T15:51:51Z", "type": "commit"}, {"oid": "9192342c6fa470cbeb4c2e3b083ae6029fc8973c", "url": "https://github.com/rstudio/rstudio/commit/9192342c6fa470cbeb4c2e3b083ae6029fc8973c", "message": "make function generic", "committedDate": "2020-09-14T15:51:51Z", "type": "forcePushed"}, {"oid": "a85edd618910bb06cb9141b3816a46331864b405", "url": "https://github.com/rstudio/rstudio/commit/a85edd618910bb06cb9141b3816a46331864b405", "message": "make chunk gallery callbacks dynamic and pass evaluated parameters", "committedDate": "2020-09-14T16:51:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4NzQzNQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488087435", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  rm (list = id, envir = .rs.notebookChunkCallbacks)\n          \n          \n            \n                  rm(list = id, envir = .rs.notebookChunkCallbacks)", "author": "kevinushey", "createdAt": "2020-09-14T17:00:44Z", "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,38 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback) {\n+\n+   if (length(.rs.notebookChunkCallbacks) != 0)\n+      stop(\"Callback is already registered.\")\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+   if (length(formals(chunkCallback)) != 2)\n+      stop(\"'chunkCallback' must contain two parameters: chunkName and chunkCode\")\n+\n+   data <- chunkCallback\n+   handle <- .Call(\"rs_createUUID\",\n+                   PACKAGE = \"(embedding)\")\n+   assign(handle, value = data, envir = .rs.notebookChunkCallbacks)\n+\n+   return(handle)\n+})\n+\n+# unregister a chunk callback functions\n+.rs.addApiFunction(\"unregisterChunkCallback\", function(id = NULL) {\n+   if (length(.rs.notebookChunkCallbacks) == 0)\n+      warning(\"No registered callbacks found\")\n+   else if (!is.null(id) && !exists(id, envir = .rs.notebookChunkCallbacks))\n+      warning(\"Handle not found.\")\n+   else\n+   {\n+      id = ls(.rs.notebookChunkCallbacks)\n+      rm (list = id, envir = .rs.notebookChunkCallbacks)", "originalCommit": "a85edd618910bb06cb9141b3816a46331864b405", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4NzYwMQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488087601", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  id = ls(.rs.notebookChunkCallbacks)\n          \n          \n            \n                  id <- ls(envir = .rs.notebookChunkCallbacks)", "author": "kevinushey", "createdAt": "2020-09-14T17:01:02Z", "path": "src/cpp/r/R/Api.R", "diffHunk": "@@ -841,6 +841,38 @@ options(terminal.manager = list(terminalActivate = .rs.api.terminalActivate,\n    .Call(\"rs_systemUsername\", PACKAGE = \"(embedding)\")\n })\n \n+# store callback functions to be executed after a specified chunk\n+# and return a handle to unregister the chunk\n+.rs.addApiFunction(\"registerChunkCallback\", function(chunkCallback) {\n+\n+   if (length(.rs.notebookChunkCallbacks) != 0)\n+      stop(\"Callback is already registered.\")\n+   if (!is.function(chunkCallback))\n+      stop(\"'chunkCallback' must be a function\")\n+   if (length(formals(chunkCallback)) != 2)\n+      stop(\"'chunkCallback' must contain two parameters: chunkName and chunkCode\")\n+\n+   data <- chunkCallback\n+   handle <- .Call(\"rs_createUUID\",\n+                   PACKAGE = \"(embedding)\")\n+   assign(handle, value = data, envir = .rs.notebookChunkCallbacks)\n+\n+   return(handle)\n+})\n+\n+# unregister a chunk callback functions\n+.rs.addApiFunction(\"unregisterChunkCallback\", function(id = NULL) {\n+   if (length(.rs.notebookChunkCallbacks) == 0)\n+      warning(\"No registered callbacks found\")\n+   else if (!is.null(id) && !exists(id, envir = .rs.notebookChunkCallbacks))\n+      warning(\"Handle not found.\")\n+   else\n+   {\n+      id = ls(.rs.notebookChunkCallbacks)", "originalCommit": "a85edd618910bb06cb9141b3816a46331864b405", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODUyMA==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488088520", "bodyText": "Is there a reason why you defined this in Tools.R rather than e.g. at the top of Api.R? I think you could use .rs.setVar(\"notebookChunkCallbacks\", new.env(parent = emptyenv()) at the top of Api.R.", "author": "kevinushey", "createdAt": "2020-09-14T17:02:42Z", "path": "src/cpp/r/R/Tools.R", "diffHunk": "@@ -27,6 +27,9 @@ assign(\".rs.toolsEnv\", function()\n    .rs.Env\n }, envir = .rs.Env)\n \n+# Add enviornment with 'tools:rstudio' to store data for Api.R\n+assign(\".rs.notebookChunkCallbacks\", value = new.env(parent = emptyenv()), envir = .rs.toolsEnv())", "originalCommit": "a85edd618910bb06cb9141b3816a46331864b405", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExODIyMw==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488118223", "bodyText": "From my POV it makes more sense to have it in tools since that is the parent environment and where we assign functions to tools.", "author": "melissa-barca", "createdAt": "2020-09-14T17:54:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NTU5NQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488155595", "bodyText": "Maybe I'm misunderstanding your point, but the functions .rs.addFunction() and .rs.setVar()'s main responsibility is to define things in the tools environment. The call you have here is roughly equivalent to:\n.rs.setVar(\"notebookChunkCallbacks\", new.env(parent = emptyenv()))", "author": "kevinushey", "createdAt": "2020-09-14T19:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODUyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyNTI1Mw==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488225253", "bodyText": "Ah ok, I misunderstood. Fixed \ud83d\udc4d", "author": "melissa-barca", "createdAt": "2020-09-14T21:17:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODUyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4ODY3Mw==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488088673", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              if (exists(\".rs.notebookChunkCallbacks\") &&\n          \n          \n            \n              if (exists(\".rs.notebookChunkCallbacks\", envir = .rs.notebookChunkCallbacks) &&", "author": "kevinushey", "createdAt": "2020-09-14T17:02:58Z", "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,20 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\") &&", "originalCommit": "a85edd618910bb06cb9141b3816a46331864b405", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4OTMwNw==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488089307", "bodyText": "Now that there's only a single callback result, it seems unnecessary to create and then append the result to an R list -- why not just return the result directly?", "author": "kevinushey", "createdAt": "2020-09-14T17:04:13Z", "path": "src/cpp/session/modules/SessionRmdNotebook.R", "diffHunk": "@@ -1138,6 +1138,20 @@ assign(\".rs.notebookVersion\", envir = .rs.toolsEnv(), \"1.0\")\n    .rs.scalarListFromList(defaultOptions)\n })\n \n+.rs.addFunction(\"executeChunkCallback\", function(chunkName, chunkCode)\n+{\n+  if (exists(\".rs.notebookChunkCallbacks\") &&\n+      length(.rs.notebookChunkCallbacks) != 0)\n+  {\n+     results <- list()", "originalCommit": "a85edd618910bb06cb9141b3816a46331864b405", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODExOTM5NQ==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488119395", "bodyText": "Thank you, I've fixed this.", "author": "melissa-barca", "createdAt": "2020-09-14T17:56:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4OTMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MDE2OA==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488090168", "bodyText": "This feels a bit awkward: can we normalize the return value beforehand so that we don't have to \"guess\" where the HTML array lives?", "author": "kevinushey", "createdAt": "2020-09-14T17:05:46Z", "path": "src/gwt/src/org/rstudio/studio/client/rmarkdown/events/RmdChunkOutputFinishedEvent.java", "diffHunk": "@@ -52,6 +55,18 @@ public final native int getType() /*-{\n       public final native int getScope() /*-{\n          return this.scope;\n       }-*/;\n+      \n+      public final ArrayList<String> getHtmlCallback() {\n+         JsArray arr = getNativeHtmlCallbacks();\n+         ArrayList<String> results = new ArrayList<>();\n+         for (int i = 0; i < arr.length(); i++)\n+            results.add(arr.get(i).toString());\n+         return results;\n+      }\n+\n+      private native final JsArray getNativeHtmlCallbacks() /*-{\n+         return this[\"html_callback\"][0] || this[\"html_callback\"][\"html\"] || [];", "originalCommit": "a85edd618910bb06cb9141b3816a46331864b405", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0Njg0OA==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488146848", "bodyText": "Academy requested the callback function return a list in the original specs so I'm following up with them to see if it can return a string since that would make things simple.", "author": "melissa-barca", "createdAt": "2020-09-14T18:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MDE2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODIyNTcxMg==", "url": "https://github.com/rstudio/rstudio/pull/7693#discussion_r488225712", "bodyText": "The callback function returns a list with 'html' in it now in case we want to add other variables in the future. I moved all the management of that object to the back end code.", "author": "melissa-barca", "createdAt": "2020-09-14T21:18:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MDE2OA=="}], "type": "inlineReview"}, {"oid": "7fdf9102844cf78b93e9787eb392a65083d04a50", "url": "https://github.com/rstudio/rstudio/commit/7fdf9102844cf78b93e9787eb392a65083d04a50", "message": "simplify executeChunkCallback", "committedDate": "2020-09-14T18:46:30Z", "type": "commit"}, {"oid": "9689bc8551c0e2766a032e0a0c79bb5f29a4c991", "url": "https://github.com/rstudio/rstudio/commit/9689bc8551c0e2766a032e0a0c79bb5f29a4c991", "message": "Apply suggestions from code review\n\nCo-authored-by: Kevin Ushey <kevin@rstudio.com>", "committedDate": "2020-09-14T18:47:54Z", "type": "commit"}, {"oid": "7b3b69b5108f97e60412c352a5aaf774c4a908ff", "url": "https://github.com/rstudio/rstudio/commit/7b3b69b5108f97e60412c352a5aaf774c4a908ff", "message": "convert HTML callback to string before passing to front end", "committedDate": "2020-09-14T21:05:55Z", "type": "commit"}, {"oid": "227d709d7a61b75a1a145baf386a4f89e0841680", "url": "https://github.com/rstudio/rstudio/commit/227d709d7a61b75a1a145baf386a4f89e0841680", "message": "move environment declaration", "committedDate": "2020-09-14T21:09:03Z", "type": "commit"}, {"oid": "298679dd4ee5a493335ffb23b3882846225c51d9", "url": "https://github.com/rstudio/rstudio/commit/298679dd4ee5a493335ffb23b3882846225c51d9", "message": "remove extra space\n\nCo-authored-by: Kevin Ushey <kevin@rstudio.com>", "committedDate": "2020-09-14T21:20:25Z", "type": "commit"}, {"oid": "91788fc36e0be55b2d41fb55fe6bfe72f6a73d1b", "url": "https://github.com/rstudio/rstudio/commit/91788fc36e0be55b2d41fb55fe6bfe72f6a73d1b", "message": "Merge branch 'master' into feature/chunk-grading", "committedDate": "2020-09-16T22:56:12Z", "type": "commit"}]}