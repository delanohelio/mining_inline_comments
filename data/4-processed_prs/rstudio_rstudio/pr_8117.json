{"pr_number": 8117, "pr_title": "Ensure log file gets reopened if needed", "pr_createdAt": "2020-10-20T01:28:22Z", "pr_url": "https://github.com/rstudio/rstudio/pull/8117", "timeline": [{"oid": "6a2ae140bf6a13ef3d5b0f96f8f4a3d6b4ab0155", "url": "https://github.com/rstudio/rstudio/commit/6a2ae140bf6a13ef3d5b0f96f8f4a3d6b4ab0155", "message": "ensure log file gets reopened if needed", "committedDate": "2020-10-20T00:23:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3ODYxNw==", "url": "https://github.com/rstudio/rstudio/pull/8117#discussion_r508678617", "bodyText": "Is there ever a case where we could end up duplicating a message in the log output here? (Is it worth worrying about? Seems like maybe not since this should be a rare error case in theory at least)", "author": "kevinushey", "createdAt": "2020-10-20T16:38:44Z", "path": "src/cpp/shared_core/FileLogDestination.cpp", "diffHunk": "@@ -208,18 +208,36 @@ void FileLogDestination::writeLog(LogLevel in_logLevel, const std::string& in_me\n       return;\n \n    // Lock the mutex before attempting to write.\n-   boost::unique_lock<boost::mutex> lock(m_impl->Mutex);\n+   try\n+   {\n+      boost::lock_guard<boost::mutex> lock(m_impl->Mutex);\n \n-   // Open the log file if it's not open. If it fails to open, log nothing.\n-   if (!m_impl->LogOutputStream && !m_impl->openLogFile())\n-      return;\n+      // Open the log file if it's not open. If it fails to open, log nothing.\n+      if (!m_impl->openLogFile())\n+         return;\n \n-   // Rotate the log file if necessary. If it fails to rotate, log nothing.\n-   if (!m_impl->rotateLogFile())\n-      return;\n+      // Rotate the log file if necessary. If it fails to rotate, log nothing.\n+      if (!m_impl->rotateLogFile())\n+         return;\n \n-   (*m_impl->LogOutputStream) << in_message;\n-   m_impl->LogOutputStream->flush();\n+      (*m_impl->LogOutputStream) << in_message;\n+      m_impl->LogOutputStream->flush();\n+\n+      // If the output stream has bad state after writing, it might have been closed. Try re-opening it and writing the\n+      // message again. Often it is not possible to tell that a stream has failed until a write is attempted.\n+      if (!m_impl->LogOutputStream->good())\n+      {\n+         if (!m_impl->openLogFile())\n+            return;\n+\n+         (*m_impl->LogOutputStream) << in_message;", "originalCommit": "6a2ae140bf6a13ef3d5b0f96f8f4a3d6b4ab0155", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MTI3MQ==", "url": "https://github.com/rstudio/rstudio/pull/8117#discussion_r508791271", "bodyText": "I considered this - I think it's technically possible that some or all of a message is written before the stream fails and the badbit is set, but in my opinion it would be better to have the message logged twice than to be in the situation where the message (and subsequent messages) isn't logged at all.\nI also tried testing the streams goodness by writing \"\" to the stream, but that is a no-op it appears. I'd also rather have one log appear twice than have some non-log data appear in the stream every time we are going to log something.", "author": "MariaSemple", "createdAt": "2020-10-20T19:41:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3ODYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3ODk4MA==", "url": "https://github.com/rstudio/rstudio/pull/8117#discussion_r508678980", "bodyText": "Would it be worth checking if we get another log failure here? Is there anything we can or should do if both attempts to write to the logfile fail?", "author": "kevinushey", "createdAt": "2020-10-20T16:39:14Z", "path": "src/cpp/shared_core/FileLogDestination.cpp", "diffHunk": "@@ -208,18 +208,36 @@ void FileLogDestination::writeLog(LogLevel in_logLevel, const std::string& in_me\n       return;\n \n    // Lock the mutex before attempting to write.\n-   boost::unique_lock<boost::mutex> lock(m_impl->Mutex);\n+   try\n+   {\n+      boost::lock_guard<boost::mutex> lock(m_impl->Mutex);\n \n-   // Open the log file if it's not open. If it fails to open, log nothing.\n-   if (!m_impl->LogOutputStream && !m_impl->openLogFile())\n-      return;\n+      // Open the log file if it's not open. If it fails to open, log nothing.\n+      if (!m_impl->openLogFile())\n+         return;\n \n-   // Rotate the log file if necessary. If it fails to rotate, log nothing.\n-   if (!m_impl->rotateLogFile())\n-      return;\n+      // Rotate the log file if necessary. If it fails to rotate, log nothing.\n+      if (!m_impl->rotateLogFile())\n+         return;\n \n-   (*m_impl->LogOutputStream) << in_message;\n-   m_impl->LogOutputStream->flush();\n+      (*m_impl->LogOutputStream) << in_message;\n+      m_impl->LogOutputStream->flush();\n+\n+      // If the output stream has bad state after writing, it might have been closed. Try re-opening it and writing the\n+      // message again. Often it is not possible to tell that a stream has failed until a write is attempted.\n+      if (!m_impl->LogOutputStream->good())\n+      {\n+         if (!m_impl->openLogFile())\n+            return;\n+\n+         (*m_impl->LogOutputStream) << in_message;\n+         m_impl->LogOutputStream->flush();", "originalCommit": "6a2ae140bf6a13ef3d5b0f96f8f4a3d6b4ab0155", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MzkwOQ==", "url": "https://github.com/rstudio/rstudio/pull/8117#discussion_r508793909", "bodyText": "If both attempts fail, I don't think a third attempt to open it will work, and we can't attempt to log the failure because that will result in recursive logging attempts, even if there is another log destination available.\nThese changes are primarily to address what happens when we daemonize. We fork the original process and continue running in the child (for process group reasons, IIUC), which means that the output stream that was opened in the original process looks open in the child (the shared_ptr is not null, the goodbit is set on the stream), but really it's not open. In that case the behaviour we get is that the first attempt to write to the log file fails completely (no message is written) and we now detect the failure and re-open the log. To the user or admin, it appears as though the output stream never closed.", "author": "MariaSemple", "createdAt": "2020-10-20T19:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY3ODk4MA=="}], "type": "inlineReview"}]}