{"pr_number": 7823, "pr_title": "Retry open file operations when attempting to save source files / source database files", "pr_createdAt": "2020-09-17T20:08:37Z", "pr_url": "https://github.com/rstudio/rstudio/pull/7823", "timeline": [{"oid": "371297c527c9d73118e8129fd8b1b169960f460a", "url": "https://github.com/rstudio/rstudio/commit/371297c527c9d73118e8129fd8b1b169960f460a", "message": "Retry open file operations when attempting to save source files / source database files.\n\nWhen dropbox or other file syncing solutions are present and attempting to sync source files that are active in the editor, save operations on said files can fail due to the inability to open the file (as it is being read in exclusive mode by the backup software).\n\nThis change makes it so that now we retry these operations up to a certain amount of seconds, specified by a new user preference save_retry_timeout.", "committedDate": "2020-09-17T20:01:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2NDA2Mw==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r490564063", "bodyText": "It looks like this loop doesn't update opened below?", "author": "kevinushey", "createdAt": "2020-09-17T21:10:18Z", "path": "src/cpp/core/FileSerializer.cpp", "diffHunk": "@@ -24,13 +24,63 @@\n #include <boost/algorithm/string/trim.hpp>\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/iostreams/copy.hpp>\n+#include <boost/thread.hpp>\n \n #include <shared_core/FilePath.hpp>\n+#include <core/DateTime.hpp>\n #include <core/StringUtils.hpp>\n \n namespace rstudio {\n namespace core {\n \n+namespace {\n+\n+bool isFileLockedError(const Error& error)\n+{\n+   // exclusive file access is only present on Windows\n+#ifndef _WIN32\n+   return false;\n+#endif\n+   return (error && error.getCode() == ERROR_SHARING_VIOLATION);\n+}\n+\n+Error openFileForWritingWithRetry(const FilePath& filePath,\n+                                  bool truncate,\n+                                  int maxOpenRetrySeconds,\n+                                  std::shared_ptr<std::ostream>* pOfs)\n+{\n+   using namespace boost::posix_time;\n+\n+   bool opened = false;\n+   ptime startTime = second_clock::universal_time();\n+   Error lastError;\n+\n+   // do not allow negative values - regular signed int was chosen here for\n+   // easier integration with other parts of the codebase\n+   if (maxOpenRetrySeconds < 0)\n+      maxOpenRetrySeconds = 0;\n+\n+   while (!opened)", "originalCommit": "371297c527c9d73118e8129fd8b1b169960f460a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2NzEwNQ==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r490567105", "bodyText": "Thanks for that - this was some leftovers from my prior impl that was using do{}while();. Changed this to just be a while(true) since it either exits the loop via return or a break when the time has elapsed.", "author": "kfeinauer", "createdAt": "2020-09-17T21:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2NDA2Mw=="}], "type": "inlineReview"}, {"oid": "d967772c85371c727c4e919b953d951e51b6b1c5", "url": "https://github.com/rstudio/rstudio/commit/d967772c85371c727c4e919b953d951e51b6b1c5", "message": "Fix while loop condition", "committedDate": "2020-09-17T21:15:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2OTIwMg==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r490569202", "bodyText": "Does this actually pause the whole RPC thread? I'm a little concerned that if (a) we auto backup changes every 500ms (the default), and (b) every (other) attempt to write backups pauses the RPC thread for 500+ms as we wait for GDrive (etc) to release the lock, the RPC thread is going to spend a pathologically large time locked.", "author": "jmcphers", "createdAt": "2020-09-17T21:21:34Z", "path": "src/cpp/core/FileSerializer.cpp", "diffHunk": "@@ -24,13 +24,62 @@\n #include <boost/algorithm/string/trim.hpp>\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/iostreams/copy.hpp>\n+#include <boost/thread.hpp>\n \n #include <shared_core/FilePath.hpp>\n+#include <core/DateTime.hpp>\n #include <core/StringUtils.hpp>\n \n namespace rstudio {\n namespace core {\n \n+namespace {\n+\n+bool isFileLockedError(const Error& error)\n+{\n+   // exclusive file access is only present on Windows\n+#ifndef _WIN32\n+   return false;\n+#endif\n+   return (error && error.getCode() == ERROR_SHARING_VIOLATION);\n+}\n+\n+Error openFileForWritingWithRetry(const FilePath& filePath,\n+                                  bool truncate,\n+                                  int maxOpenRetrySeconds,\n+                                  std::shared_ptr<std::ostream>* pOfs)\n+{\n+   using namespace boost::posix_time;\n+\n+   ptime startTime = second_clock::universal_time();\n+   Error lastError;\n+\n+   // do not allow negative values - regular signed int was chosen here for\n+   // easier integration with other parts of the codebase\n+   if (maxOpenRetrySeconds < 0)\n+      maxOpenRetrySeconds = 0;\n+\n+   while (true)\n+   {\n+      lastError = filePath.openForWrite(*pOfs, truncate);\n+\n+      // if the error is a non file lock error, then we should just return it\n+      if (!isFileLockedError(lastError))\n+         return lastError;\n+\n+      // stop retrying if we've spent more than the requested amount of time\n+      if ((second_clock::universal_time() - startTime) >= seconds(maxOpenRetrySeconds))\n+         break;\n+\n+      // wait a moment before retrying\n+      boost::this_thread::sleep(milliseconds(500));", "originalCommit": "d967772c85371c727c4e919b953d951e51b6b1c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3Mzk0NA==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r490573944", "bodyText": "It does since it is sleeping. I did my testing with auto save on 500 ms and the performance seemed good. The vast majority of saves are non conflicting - I'd say one in every 15-20 saves produced a stall waiting for the file to become available in my testing. I didn't notice any ill effects from a UX perspective.\nThis also reduces a bunch of complexity as opposed to retrying the operations in the front end and having to re-queue operations.", "author": "kfeinauer", "createdAt": "2020-09-17T21:31:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU5NTYwOA==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r490595608", "bodyText": "Was your testing on a system with a fast SSD and internet connection? I think that GDrive and friends can have an exclusive lock for much longer on some environments, leading to more save conflicts.\nI think we need to give up faster on autosaves. The user generally has another chance to save the file (and will get warned if they try to exit with changes that have never been backed up); it feels wrong that there's a possibility of blocking the entire RPC thread for 15 seconds for an operation the user didn't initiate.\n15s isn't unreasonable for a change that must succeed, so I'd suggest a second pref for autosave (auto_save_retry_timeout?) as both a shorter fuse and an escape hatch; it could give up after a second or two, and setting it to 0 would result in a best-effort autosave that just attempts to write the file if it can (the front end could read this value and avoid popping up \"file is in use\" errors).", "author": "jmcphers", "createdAt": "2020-09-17T22:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2OTIwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYwNDk4Nw==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r490604987", "bodyText": "What about not retrying for autosaves period? The whole point of autosaves is that it saves continuously and periodically. Since most operations are successful, we could simply ignore this particular failure for autosaves entirely, with the knowledge that future autosaves will almost assuredly work (since the exclusive file lock will be given up as soon as syncing is done).\nWe can keep everything as is currently for manual saves, since they are a user initiated action.", "author": "kfeinauer", "createdAt": "2020-09-17T22:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU2OTIwMg=="}], "type": "inlineReview"}, {"oid": "ececfe5b911202dda97384babc1205e46ca9ab7f", "url": "https://github.com/rstudio/rstudio/commit/ececfe5b911202dda97384babc1205e46ca9ab7f", "message": "WIP: Only attempt to retry write operation if it was a user specified action. Do not retry writes for autosaves / lints. If not retrying the operation (because of autosave semantics), supress errors indicating that another process is using the file (as it is a transient issue).", "committedDate": "2020-09-18T22:13:59Z", "type": "commit"}, {"oid": "3972327cf580f16d402a6ee8d860c834d02e327e", "url": "https://github.com/rstudio/rstudio/commit/3972327cf580f16d402a6ee8d860c834d02e327e", "message": "Merge branch 'bugfix/google-drive-dropbox-save-enhancements' of https://github.com/rstudio/rstudio into bugfix/google-drive-dropbox-save-enhancements", "committedDate": "2020-09-18T22:15:09Z", "type": "commit"}, {"oid": "f9d09b29878d67343a47c125acd5b7dc0bb6b411", "url": "https://github.com/rstudio/rstudio/commit/f9d09b29878d67343a47c125acd5b7dc0bb6b411", "message": "Fix issue where lastKnownFileTime would be dropped if the file was successfully saved by the source database file properties were not. This would cause annoying prompts asking the user to reload the file as it hasd changed on disk, even though it really had not.", "committedDate": "2020-09-21T20:52:40Z", "type": "commit"}, {"oid": "ba77c20dff937e2d7705b71d9b3b99d68ddcee41", "url": "https://github.com/rstudio/rstudio/commit/ba77c20dff937e2d7705b71d9b3b99d68ddcee41", "message": "Hide autosave error dialog (when doing autosave backups) if the error is a transient exclusive access issue", "committedDate": "2020-09-21T21:29:06Z", "type": "commit"}, {"oid": "11ce679c326f04d8907c70f97418ae0830e7f5f8", "url": "https://github.com/rstudio/rstudio/commit/11ce679c326f04d8907c70f97418ae0830e7f5f8", "message": "Restart autosave if it fails silently", "committedDate": "2020-09-21T21:56:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2NDYzOQ==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r494664639", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // note: this only has an affect on Windows\n          \n          \n            \n            // note: this only has an effect on Windows", "author": "jmcphers", "createdAt": "2020-09-24T23:28:25Z", "path": "src/cpp/core/include/core/FileSerializer.hpp", "diffHunk": "@@ -291,10 +291,16 @@ Error readStringVectorFromFile(const core::FilePath& filePath,\n                                bool trimAndIgnoreBlankLines=true);\n \n // lineEnding is the type of line ending you want to end up on disk\n+//\n+// maxOpenRetrySeconds indicates whether or not we should retry attempts to open the file\n+// when it is in use by another process (common when using backup software), and if so\n+// how many seconds of elapsed time should we wait for the file to become available\n+// note: this only has an affect on Windows", "originalCommit": "11ce679c326f04d8907c70f97418ae0830e7f5f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2NDg0Mw==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r494664843", "bodyText": "Does this need to be a threadsafe map?", "author": "jmcphers", "createdAt": "2020-09-24T23:29:05Z", "path": "src/cpp/session/SessionSourceDatabase.cpp", "diffHunk": "@@ -71,13 +74,30 @@ namespace {\n // lookup)\n std::map<std::string, std::string> s_idToPath;\n \n+// cached mapping of document last write times\n+std::map<std::string, std::time_t> s_lastWriteTimes;", "originalCommit": "11ce679c326f04d8907c70f97418ae0830e7f5f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIxODY2Mw==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r495218663", "bodyText": "No - all of these routines execute only on the main thread (thread 0)", "author": "kfeinauer", "createdAt": "2020-09-25T20:36:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2NDg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2ODIwMw==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r494668203", "bodyText": "Can we amend the primary error object here with a property that indicates that we timed out (and possibly how many tries/attempts we made)? I also think this error would be worth logging and returning since a save failure can cause data loss.", "author": "jmcphers", "createdAt": "2020-09-24T23:40:36Z", "path": "src/cpp/core/FileSerializer.cpp", "diffHunk": "@@ -24,13 +24,62 @@\n #include <boost/algorithm/string/trim.hpp>\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/iostreams/copy.hpp>\n+#include <boost/thread.hpp>\n \n #include <shared_core/FilePath.hpp>\n+#include <core/DateTime.hpp>\n #include <core/StringUtils.hpp>\n \n namespace rstudio {\n namespace core {\n \n+namespace {\n+\n+bool isFileLockedError(const Error& error)\n+{\n+   // exclusive file access is only present on Windows\n+#ifndef _WIN32\n+   return false;\n+#endif\n+   return (error && error.getCode() == ERROR_SHARING_VIOLATION);\n+}\n+\n+Error openFileForWritingWithRetry(const FilePath& filePath,\n+                                  bool truncate,\n+                                  int maxOpenRetrySeconds,\n+                                  std::shared_ptr<std::ostream>* pOfs)\n+{\n+   using namespace boost::posix_time;\n+\n+   ptime startTime = second_clock::universal_time();\n+   Error lastError;\n+\n+   // do not allow negative values - regular signed int was chosen here for\n+   // easier integration with other parts of the codebase\n+   if (maxOpenRetrySeconds < 0)\n+      maxOpenRetrySeconds = 0;\n+\n+   while (true)\n+   {\n+      lastError = filePath.openForWrite(*pOfs, truncate);\n+\n+      // if the error is a non file lock error, then we should just return it\n+      if (!isFileLockedError(lastError))\n+         return lastError;\n+\n+      // stop retrying if we've spent more than the requested amount of time\n+      if ((second_clock::universal_time() - startTime) >= seconds(maxOpenRetrySeconds))\n+         break;", "originalCommit": "11ce679c326f04d8907c70f97418ae0830e7f5f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6596af405a49117ba68f1ca9dd1a9a46db879961", "url": "https://github.com/rstudio/rstudio/commit/6596af405a49117ba68f1ca9dd1a9a46db879961", "message": "Update src/cpp/core/include/core/FileSerializer.hpp\n\nCo-authored-by: Jonathan <jonathan@rstudio.com>", "committedDate": "2020-09-25T20:35:42Z", "type": "commit"}, {"oid": "a2af7f3d7d001f8c609aed0cbbf736c46943e7fb", "url": "https://github.com/rstudio/rstudio/commit/a2af7f3d7d001f8c609aed0cbbf736c46943e7fb", "message": "Code review feedback - log error and count number of failed open attempts", "committedDate": "2020-09-28T14:56:25Z", "type": "commit"}, {"oid": "31a9668d6756e62638a9c884058b11d39c3a83bc", "url": "https://github.com/rstudio/rstudio/commit/31a9668d6756e62638a9c884058b11d39c3a83bc", "message": "Merge branch 'bugfix/google-drive-dropbox-save-enhancements' of https://github.com/rstudio/rstudio into bugfix/google-drive-dropbox-save-enhancements", "committedDate": "2020-09-28T14:57:16Z", "type": "commit"}, {"oid": "fbd569814b3417b681771452adeaef77d0e38515", "url": "https://github.com/rstudio/rstudio/commit/fbd569814b3417b681771452adeaef77d0e38515", "message": "Code review feedback - prevent manual saves from queueing up while in-flight", "committedDate": "2020-09-28T14:58:26Z", "type": "commit"}, {"oid": "011eb11501950dd1c245656585880cef43b764e3", "url": "https://github.com/rstudio/rstudio/commit/011eb11501950dd1c245656585880cef43b764e3", "message": "Update TextEditingTarget.java\n\nFix whitespace issues", "committedDate": "2020-09-28T15:00:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MDg4OA==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r496070888", "bodyText": "Checking this based on the message rather than an error property or code seems fragile. Would it be feasible for us to send a proper error object (e.g. with an error code) that we could check here or something similar?", "author": "kevinushey", "createdAt": "2020-09-28T16:13:05Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/TextEditingTarget.java", "diffHunk": "@@ -376,8 +391,17 @@ public void onError(final String message)\n             @Override\n             public void execute()\n             {\n-               globalDisplay_.showErrorMessage(\"Error Saving File\",\n-                                               message);\n+               // do not show the error if it is a transient autosave related issue - this can occur fairly frequently\n+               // when attempting to save files that are being backed up by external software\n+               if (message.contains(\"The process cannot access the file because it is being used by another process\") && suppressFileLockError_)", "originalCommit": "011eb11501950dd1c245656585880cef43b764e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3NzkzNA==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r496077934", "bodyText": "I decided against that because we are using the ProgressIndicator interface here which is tied to error messages and is a very fundamental interface in the code. I didn't think extending this interface was worth it to propagate this one error code here as this would affect a sizable portion of the code base.", "author": "kfeinauer", "createdAt": "2020-09-28T16:23:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MDg4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MTU5NQ==", "url": "https://github.com/rstudio/rstudio/pull/7823#discussion_r496071595", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  new SaveProgressIndicator(path, type, false,null).onCompleted();\n          \n          \n            \n                  new SaveProgressIndicator(path, type, false, null).onCompleted();", "author": "kevinushey", "createdAt": "2020-09-28T16:14:12Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/TextEditingTarget.java", "diffHunk": "@@ -7708,7 +7760,7 @@ public void setPath(FileSystemItem path)\n       TextFileType type = fileTypeRegistry_.getTextTypeForFile(path);\n \n       // Simulate a completed save of the new path\n-      new SaveProgressIndicator(path, type, null).onCompleted();\n+      new SaveProgressIndicator(path, type, false,null).onCompleted();", "originalCommit": "011eb11501950dd1c245656585880cef43b764e3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f3b7745bbba2aeb2e723f261d88a2515c386ad3e", "url": "https://github.com/rstudio/rstudio/commit/f3b7745bbba2aeb2e723f261d88a2515c386ad3e", "message": "Update src/gwt/src/org/rstudio/studio/client/workbench/views/source/editors/text/TextEditingTarget.java\n\nCo-authored-by: Kevin Ushey <kevin@rstudio.com>", "committedDate": "2020-09-28T16:21:46Z", "type": "commit"}, {"oid": "3257c2cbb242e4f2ca6f72e69d2fbdf9038e5577", "url": "https://github.com/rstudio/rstudio/commit/3257c2cbb242e4f2ca6f72e69d2fbdf9038e5577", "message": "Update NEWS", "committedDate": "2020-09-29T18:33:25Z", "type": "commit"}, {"oid": "dc9763906aa55411ef7b414ddbf51261ea06114c", "url": "https://github.com/rstudio/rstudio/commit/dc9763906aa55411ef7b414ddbf51261ea06114c", "message": "Merge branch 'master' into bugfix/google-drive-dropbox-save-enhancements", "committedDate": "2020-09-29T18:34:31Z", "type": "commit"}]}