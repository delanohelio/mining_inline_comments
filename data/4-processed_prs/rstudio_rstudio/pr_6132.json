{"pr_number": 6132, "pr_title": "Adds changeOwnership and changeFileMode functions to FilePath", "pr_createdAt": "2020-02-01T00:46:36Z", "pr_url": "https://github.com/rstudio/rstudio/pull/6132", "timeline": [{"oid": "388ae9a9f8bce5251b9411aca66dd10f5b6d9f0f", "url": "https://github.com/rstudio/rstudio/commit/388ae9a9f8bce5251b9411aca66dd10f5b6d9f0f", "message": "fix #ifdef directive", "committedDate": "2020-01-30T02:02:58Z", "type": "commit"}, {"oid": "4898cd83b87a1262b099ac390edde749b1304c37", "url": "https://github.com/rstudio/rstudio/commit/4898cd83b87a1262b099ac390edde749b1304c37", "message": "move changeOwnership and fileMode functions to FilePath", "committedDate": "2020-01-30T04:14:10Z", "type": "commit"}, {"oid": "2195eea97b22d7ad2da76b17c8304d9e50b56625", "url": "https://github.com/rstudio/rstudio/commit/2195eea97b22d7ad2da76b17c8304d9e50b56625", "message": "rename enum values for shared_core style", "committedDate": "2020-01-30T04:34:08Z", "type": "commit"}, {"oid": "fc8bba16d2cb0b3198eb79cd54c36f1d3a0c4b28", "url": "https://github.com/rstudio/rstudio/commit/fc8bba16d2cb0b3198eb79cd54c36f1d3a0c4b28", "message": "Merge branch 'v1.4' into feature/file-path-change-owner-mode", "committedDate": "2020-01-31T23:42:24Z", "type": "commit"}, {"oid": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "url": "https://github.com/rstudio/rstudio/commit/7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "message": "add posix system utilities to shared_core", "committedDate": "2020-02-01T00:44:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODYzMg==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374268632", "bodyText": "In what contexts might this fail? I'm mainly wondering because (IIUC) this adds a new way for rserver to fail to start and just want to make sure we understand the failure modes (and are convinced they're rare or understandable + easy to diagnose).\nAlternatively: what do you think about using options.serverUser() by default, and having an error here be a warning rather than fatal? Or would this ultimately just fail somewhere else further down?", "author": "kevinushey", "createdAt": "2020-02-03T18:34:42Z", "path": "src/cpp/server/ServerMain.cpp", "diffHunk": "@@ -571,7 +572,12 @@ int main(int argc, char * const argv[])\n             return true;\n          };\n \n-         error = file_utils::changeOwnership(serverDataDir, options.serverUser(), true, shouldChown);\n+         system::User serverUser;", "originalCommit": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4MTQ4NQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374281485", "bodyText": "The work to get the system::User and the error check for that were done inside file_utils::changeOwnership before. The SDK options class has a Error error = serverUser(system::User& out_user) method, so I wanted this function to take the User object rather than the username.\nIt should only fail if the server user doesn't exist, which really shouldn't be possible at this point, since a misconfigured rserver.conf should have caused the process to fail much earlier than this.", "author": "MariaSemple", "createdAt": "2020-02-03T19:01:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMTk2MQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374311961", "bodyText": "That makes sense. Thanks!", "author": "kevinushey", "createdAt": "2020-02-03T20:03:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2ODYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI2OTQwMA==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374269400", "bodyText": "Similar question here.", "author": "kevinushey", "createdAt": "2020-02-03T18:36:21Z", "path": "src/cpp/server/auth/ServerAuthHandler.cpp", "diffHunk": "@@ -454,9 +454,17 @@ Error initialize()\n       return error;\n    }\n \n+   core::system::User serverUser;\n+   error = core::system::User::getUserFromIdentifier(options().serverUser(), serverUser);", "originalCommit": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDIyMQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374270221", "bodyText": "Is it worth documenting that only a subset of posix file mode strings are supported?", "author": "kevinushey", "createdAt": "2020-02-03T18:38:03Z", "path": "src/cpp/shared_core/include/shared_core/FilePath.hpp", "diffHunk": "@@ -231,6 +260,53 @@ class FilePath\n     */\n    static Error uniqueFilePath(const std::string& in_basePath, const std::string& in_extension, FilePath& out_filePath);\n \n+#ifndef _WIN32\n+   /**\n+    * @brief Changes the file mode to the specified file mode.\n+    *\n+    * @param in_fileModeStr     The posix file mode string. e.g. rwxr-xr-x.", "originalCommit": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4MjAzNQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374282035", "bodyText": "Yes, that seems worth it to me. I'm not sure which are supported and which aren't off-hand. Do you know where I can find that information? Or, if you happen to know feel free to suggest an edit.", "author": "MariaSemple", "createdAt": "2020-02-03T19:02:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxNDQ4Mw==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374314483", "bodyText": "Wait, I think I may have misunderstood -- I was looking at the code in \n  \n    \n      rstudio/src/cpp/core/include/core/system/FileMode.hpp\n    \n    \n        Lines 131 to 175\n      in\n      91d3851\n    \n    \n    \n    \n\n        \n          \n           inline Error getFileMode(const FilePath& filePath, FileMode* pFileMode) \n        \n\n        \n          \n           { \n        \n\n        \n          \n              struct stat st; \n        \n\n        \n          \n              if (::stat(filePath.getAbsolutePath().c_str(), &st) == -1) \n        \n\n        \n          \n              { \n        \n\n        \n          \n                 Error error = systemError(errno, ERROR_LOCATION); \n        \n\n        \n          \n                 error.addProperty(\"path\", filePath); \n        \n\n        \n          \n                 return error; \n        \n\n        \n          \n              } \n        \n\n        \n          \n            \n        \n\n        \n          \n              // extract the bits \n        \n\n        \n          \n              std::string mode(9, '-'); \n        \n\n        \n          \n              if ( st.st_mode & S_IRUSR ) mode[0] = 'r'; \n        \n\n        \n          \n              if ( st.st_mode & S_IWUSR ) mode[1] = 'w'; \n        \n\n        \n          \n              if ( st.st_mode & S_IXUSR ) mode[2] = 'x'; \n        \n\n        \n          \n            \n        \n\n        \n          \n              if ( st.st_mode & S_IRGRP ) mode[3] = 'r'; \n        \n\n        \n          \n              if ( st.st_mode & S_IWGRP ) mode[4] = 'w'; \n        \n\n        \n          \n              if ( st.st_mode & S_IXGRP ) mode[5] = 'x'; \n        \n\n        \n          \n            \n        \n\n        \n          \n              if ( st.st_mode & S_IROTH ) mode[6] = 'r'; \n        \n\n        \n          \n              if ( st.st_mode & S_IWOTH ) mode[7] = 'w'; \n        \n\n        \n          \n              if ( st.st_mode & S_IXOTH ) mode[8] = 'x'; \n        \n\n        \n          \n            \n        \n\n        \n          \n              if (mode ==      \"rw-------\") \n        \n\n        \n          \n                 *pFileMode = UserReadWriteMode; \n        \n\n        \n          \n              else if (mode == \"rwx------\") \n        \n\n        \n          \n                 *pFileMode = UserReadWriteExecuteMode; \n        \n\n        \n          \n              else if (mode == \"rw-r-----\") \n        \n\n        \n          \n                 *pFileMode = UserReadWriteGroupReadMode; \n        \n\n        \n          \n              else if (mode == \"rw-r--r--\") \n        \n\n        \n          \n                 *pFileMode = UserReadWriteGroupEveryoneReadMode; \n        \n\n        \n          \n              else if (mode == \"r--r--r--\") \n        \n\n        \n          \n                 *pFileMode = EveryoneReadMode; \n        \n\n        \n          \n              else if (mode == \"rw-rw-rw-\") \n        \n\n        \n          \n                 *pFileMode = EveryoneReadWriteMode; \n        \n\n        \n          \n              else if (mode == \"rwxrwxrwx\") \n        \n\n        \n          \n                 *pFileMode = EveryoneReadWriteExecuteMode; \n        \n\n        \n          \n              else if (mode == \"rwxr-xr-x\") \n        \n\n        \n          \n                 *pFileMode = UserReadWriteExecuteGroupEveryoneReadExecuteMode; \n        \n\n        \n          \n              else \n        \n\n        \n          \n                  return systemError(boost::system::errc::not_supported, ERROR_LOCATION); \n        \n\n        \n          \n            \n        \n\n        \n          \n              return Success(); \n        \n\n        \n          \n           } \n        \n    \n  \n\n and thought that denoted the \"supported\" file modes, but that appears to be something separate. Sorry!", "author": "kevinushey", "createdAt": "2020-02-03T20:08:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDIyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMDQyNQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374320425", "bodyText": "Oh okay!", "author": "MariaSemple", "createdAt": "2020-02-03T20:21:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDkwOQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374270909", "bodyText": "minor nit: the lines here are just long enough to force GitHub's PR UI to overflow horizontally a bit; e.g.\n\nNot sure if this is motivation enough for us to adjust our editor line widths down a bit.", "author": "kevinushey", "createdAt": "2020-02-03T18:39:32Z", "path": "src/cpp/shared_core/include/shared_core/FilePath.hpp", "diffHunk": "@@ -231,6 +260,53 @@ class FilePath\n     */\n    static Error uniqueFilePath(const std::string& in_basePath, const std::string& in_extension, FilePath& out_filePath);\n \n+#ifndef _WIN32\n+   /**\n+    * @brief Changes the file mode to the specified file mode.\n+    *\n+    * @param in_fileModeStr     The posix file mode string. e.g. rwxr-xr-x.\n+    *\n+    * @return Success if the file mode could be changed; Error otherwise.\n+    */\n+   Error changeFileMode(const std::string& in_fileModeStr) const;\n+\n+   /**\n+    * @brief Changes the file mode to the specified file mode.\n+    *\n+    * @param in_fileMode        The new file mode.\n+    * @param in_setStickyBit    Whether to set the sticky bit on this file.\n+    *\n+    * @return Success if the file mode could be changed; Error otherwise.\n+    */\n+   Error changeFileMode(FileMode in_fileMode, bool in_setStickyBit = false) const;\n+\n+   /**\n+    * @brief Changes the ownership of the file or directory to the specified user.\n+    *\n+    * @param in_newUser         The user who should own the file.\n+    * @param in_recursive       If this FilePath is a directory, whether to recursively change ownership on all files\n+    *                           and directories within this directory.\n+    * @param in_shouldChown     A recursive iteration function which allows the caller to filter files and directories.", "originalCommit": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMzMTkwNw==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374331907", "bodyText": "80? Did someone say 80?! ;-)", "author": "jmcphers", "createdAt": "2020-02-03T20:47:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3MDkwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NDU0Mg==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374274542", "bodyText": "Should we return a \"not supported\" error for __APPLE__? (maybe not as part of this PR since I'm guessing this is mostly just moving things into shared_core?)", "author": "kevinushey", "createdAt": "2020-02-03T18:47:03Z", "path": "src/cpp/shared_core/system/PosixSystem.cpp", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * PosixSystem.cpp\n+ *\n+ * Copyright (C) 2009-19 by RStudio, Inc.\n+ *\n+ * Unless you have received this program directly from RStudio pursuant to the terms of a commercial license agreement\n+ * with RStudio, then this program is licensed to you under the following terms:\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n+ * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n+ * permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n+ * Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n+ * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ *\n+ */\n+\n+#include <shared_core/system/PosixSystem.hpp>\n+\n+#include <csignal>\n+#include <grp.h>\n+#include <memory.h>\n+#include <pwd.h>\n+#include <sys/prctl.h>\n+\n+#include <shared_core/Error.hpp>\n+#include <shared_core/system/User.hpp>\n+\n+namespace rstudio {\n+namespace core {\n+namespace system {\n+namespace posix {\n+\n+Error enableCoreDumps()\n+{\n+#ifndef __APPLE__", "originalCommit": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4MzAwNw==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374283007", "bodyText": "That's correct, this just moves it from core to shared_core. Perhaps it's intentional that we silently fail if core dumps aren't supported? Maybe a warning or info message would be good here, rather than an error?", "author": "MariaSemple", "createdAt": "2020-02-03T19:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NDU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxNTAwNg==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374315006", "bodyText": "Looks like we exit on failure to enable core dumps in most places it's used so I think the current behavior is probably intentional. (A warning might be appropriate though.)", "author": "kevinushey", "createdAt": "2020-02-03T20:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NDU0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMDcyNQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374320725", "bodyText": "Sure I can log a warning here.", "author": "MariaSemple", "createdAt": "2020-02-03T20:21:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NDU0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NTA1OQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374275059", "bodyText": "Is there any easy way for us to convert the signal number to the signal name here? (just makes debugging a tad easier)", "author": "kevinushey", "createdAt": "2020-02-03T18:48:08Z", "path": "src/cpp/shared_core/system/PosixSystem.cpp", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * PosixSystem.cpp\n+ *\n+ * Copyright (C) 2009-19 by RStudio, Inc.\n+ *\n+ * Unless you have received this program directly from RStudio pursuant to the terms of a commercial license agreement\n+ * with RStudio, then this program is licensed to you under the following terms:\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n+ * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n+ * permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n+ * Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n+ * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ *\n+ */\n+\n+#include <shared_core/system/PosixSystem.hpp>\n+\n+#include <csignal>\n+#include <grp.h>\n+#include <memory.h>\n+#include <pwd.h>\n+#include <sys/prctl.h>\n+\n+#include <shared_core/Error.hpp>\n+#include <shared_core/system/User.hpp>\n+\n+namespace rstudio {\n+namespace core {\n+namespace system {\n+namespace posix {\n+\n+Error enableCoreDumps()\n+{\n+#ifndef __APPLE__\n+   int res = ::prctl(PR_SET_DUMPABLE, 1);\n+   if (res == -1)\n+      return systemError(errno, ERROR_LOCATION);\n+#endif\n+\n+   return Success();\n+}\n+\n+Error ignoreSignal(int in_signal)\n+{\n+   struct sigaction sa;\n+   ::memset(&sa, 0, sizeof(sa));\n+\n+   sa.sa_handler = SIG_IGN;\n+   int result = ::sigaction(in_signal, &sa, nullptr);\n+   if (result != 0)\n+   {\n+      Error error = systemError(result, ERROR_LOCATION);\n+      error.addProperty(\"signal\", in_signal);", "originalCommit": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4NDIxNA==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374284214", "bodyText": "In the IDE the system::ignoreSignal(SignalName name) function is still available from System.hpp. I just need this in the SDK to ignore SIG_PIPE and that's it. I actually had an ignoreSigPipe function, but I thought it would be better to not duplicate the code.\nAlso, I didn't want to move the SignalName enum because it's part of System.hpp as opposed to PosixSystem.hpp, so it may be used on other platforms. I'm open to suggestions on how to resolve that though.", "author": "MariaSemple", "createdAt": "2020-02-03T19:06:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NTA1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxNTg0Ng==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374315846", "bodyText": "It looks like some platforms may have the strsignal() function for this purpose: https://linux.die.net/man/3/strsignal", "author": "kevinushey", "createdAt": "2020-02-03T20:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3NTA1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3ODI4NQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374278285", "bodyText": "IIUC errors here and below would lead us to still having root, just not having the effective group set. Is it acceptable for us to end up in this state, or should we try to make sure this function is 'atomic'? (not sure atomic is the best word but it feels like the closest analogue here)", "author": "kevinushey", "createdAt": "2020-02-03T18:54:46Z", "path": "src/cpp/shared_core/system/PosixSystem.cpp", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * PosixSystem.cpp\n+ *\n+ * Copyright (C) 2009-19 by RStudio, Inc.\n+ *\n+ * Unless you have received this program directly from RStudio pursuant to the terms of a commercial license agreement\n+ * with RStudio, then this program is licensed to you under the following terms:\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n+ * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n+ * permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n+ * Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n+ * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ *\n+ */\n+\n+#include <shared_core/system/PosixSystem.hpp>\n+\n+#include <csignal>\n+#include <grp.h>\n+#include <memory.h>\n+#include <pwd.h>\n+#include <sys/prctl.h>\n+\n+#include <shared_core/Error.hpp>\n+#include <shared_core/system/User.hpp>\n+\n+namespace rstudio {\n+namespace core {\n+namespace system {\n+namespace posix {\n+\n+Error enableCoreDumps()\n+{\n+#ifndef __APPLE__\n+   int res = ::prctl(PR_SET_DUMPABLE, 1);\n+   if (res == -1)\n+      return systemError(errno, ERROR_LOCATION);\n+#endif\n+\n+   return Success();\n+}\n+\n+Error ignoreSignal(int in_signal)\n+{\n+   struct sigaction sa;\n+   ::memset(&sa, 0, sizeof(sa));\n+\n+   sa.sa_handler = SIG_IGN;\n+   int result = ::sigaction(in_signal, &sa, nullptr);\n+   if (result != 0)\n+   {\n+      Error error = systemError(result, ERROR_LOCATION);\n+      error.addProperty(\"signal\", in_signal);\n+      return error;\n+   }\n+\n+   return Success();\n+}\n+\n+bool realUserIsRoot()\n+{\n+   return ::getuid() == 0;\n+}\n+\n+Error restoreRoot()\n+{\n+   // Reset error state.\n+   errno = 0;\n+\n+   // Change the effective user to root.\n+   if (::seteuid(0) < 0)\n+      return systemError(errno, ERROR_LOCATION);\n+   // Verify\n+   if (::geteuid() != 0)\n+      return systemError(EACCES, ERROR_LOCATION);\n+\n+   // Get user info to use in group calls\n+   struct passwd* pPrivPasswd = ::getpwuid(0);", "originalCommit": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI4NTc4Ng==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374285786", "bodyText": "That's an interesting question. I think in the cases I've seen if this function returns an error the process exits. That being said, it would make the function more \"safe\", I think, which always seems like a good idea.\nAt any rate, this is the existing behaviour so I doubt it will cause issues if we don't change it.", "author": "MariaSemple", "createdAt": "2020-02-03T19:10:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3ODI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxNjA3MA==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374316070", "bodyText": "That makes sense. If failures here are handled as process exits then it's not worth changing anything here.", "author": "kevinushey", "createdAt": "2020-02-03T20:12:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3ODI4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyMTM0MQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374321341", "bodyText": "Sure, I'll double check the usages of this function.", "author": "MariaSemple", "createdAt": "2020-02-03T20:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3ODI4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI3ODc3NA==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r374278774", "bodyText": "Similar question re: atomicity in this function.", "author": "kevinushey", "createdAt": "2020-02-03T18:55:45Z", "path": "src/cpp/shared_core/system/PosixSystem.cpp", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * PosixSystem.cpp\n+ *\n+ * Copyright (C) 2009-19 by RStudio, Inc.\n+ *\n+ * Unless you have received this program directly from RStudio pursuant to the terms of a commercial license agreement\n+ * with RStudio, then this program is licensed to you under the following terms:\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\n+ * documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the\n+ * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\n+ * permit persons to whom the Software is furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\n+ * Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\n+ * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n+ * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n+ * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n+ *\n+ */\n+\n+#include <shared_core/system/PosixSystem.hpp>\n+\n+#include <csignal>\n+#include <grp.h>\n+#include <memory.h>\n+#include <pwd.h>\n+#include <sys/prctl.h>\n+\n+#include <shared_core/Error.hpp>\n+#include <shared_core/system/User.hpp>\n+\n+namespace rstudio {\n+namespace core {\n+namespace system {\n+namespace posix {\n+\n+Error enableCoreDumps()\n+{\n+#ifndef __APPLE__\n+   int res = ::prctl(PR_SET_DUMPABLE, 1);\n+   if (res == -1)\n+      return systemError(errno, ERROR_LOCATION);\n+#endif\n+\n+   return Success();\n+}\n+\n+Error ignoreSignal(int in_signal)\n+{\n+   struct sigaction sa;\n+   ::memset(&sa, 0, sizeof(sa));\n+\n+   sa.sa_handler = SIG_IGN;\n+   int result = ::sigaction(in_signal, &sa, nullptr);\n+   if (result != 0)\n+   {\n+      Error error = systemError(result, ERROR_LOCATION);\n+      error.addProperty(\"signal\", in_signal);\n+      return error;\n+   }\n+\n+   return Success();\n+}\n+\n+bool realUserIsRoot()\n+{\n+   return ::getuid() == 0;\n+}\n+\n+Error restoreRoot()\n+{\n+   // Reset error state.\n+   errno = 0;\n+\n+   // Change the effective user to root.\n+   if (::seteuid(0) < 0)\n+      return systemError(errno, ERROR_LOCATION);\n+   // Verify\n+   if (::geteuid() != 0)\n+      return systemError(EACCES, ERROR_LOCATION);\n+\n+   // Get user info to use in group calls\n+   struct passwd* pPrivPasswd = ::getpwuid(0);\n+   if (pPrivPasswd == nullptr)\n+      return systemError(errno, ERROR_LOCATION);\n+\n+   // Supplemental groups\n+   if (::initgroups(pPrivPasswd->pw_name, pPrivPasswd->pw_gid) < 0)\n+      return systemError(errno, ERROR_LOCATION);\n+\n+   // Set effective group\n+   if (::setegid(pPrivPasswd->pw_gid) < 0)\n+      return systemError(errno, ERROR_LOCATION);\n+   // Verify\n+   if (::getegid() != pPrivPasswd->pw_gid)\n+      return systemError(EACCES, ERROR_LOCATION);\n+\n+   return Success();\n+}\n+\n+Error temporarilyDropPriv(const system::User& in_user)\n+{\n+   // clear error state\n+   errno = 0;\n+\n+   // init supplemental group list\n+   // NOTE: if porting to CYGWIN may need to call getgroups/setgroups\n+   // after initgroups -- more research required to confirm\n+   if (::initgroups(in_user.getUsername().c_str(), in_user.getGroupId()) < 0)\n+      return systemError(errno, ERROR_LOCATION);\n+\n+   // set group and verify\n+   if (::setresgid(-1, in_user.getGroupId(), ::getegid()) < 0)", "originalCommit": "7e82a9ab9bff81e6ec591e2c4f861f22aac76c34", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5da47f0dc3a4a234cceb550a5c6f062660f75f8b", "url": "https://github.com/rstudio/rstudio/commit/5da47f0dc3a4a234cceb550a5c6f062660f75f8b", "message": "exit failure if root cannot be restored", "committedDate": "2020-02-03T21:16:09Z", "type": "commit"}, {"oid": "639307aa3df5ff882322ba4465235a6b8d861f71", "url": "https://github.com/rstudio/rstudio/commit/639307aa3df5ff882322ba4465235a6b8d861f71", "message": "Merge branch 'v1.4' into feature/file-path-change-owner-mode", "committedDate": "2020-02-03T23:11:37Z", "type": "commit"}, {"oid": "d3d12545b51fd31f715811a48da47bd90ef98652", "url": "https://github.com/rstudio/rstudio/commit/d3d12545b51fd31f715811a48da47bd90ef98652", "message": "add missing return", "committedDate": "2020-02-03T23:14:57Z", "type": "commit"}, {"oid": "cb53daafa28ed0930021e85a150a7065cb7bbf76", "url": "https://github.com/rstudio/rstudio/commit/cb53daafa28ed0930021e85a150a7065cb7bbf76", "message": "Merge branch 'v1.4' into feature/file-path-change-owner-mode", "committedDate": "2020-02-04T22:43:46Z", "type": "commit"}, {"oid": "9a178df5a598ade676e236a5890182b98b6878b9", "url": "https://github.com/rstudio/rstudio/commit/9a178df5a598ade676e236a5890182b98b6878b9", "message": "ordering cleanup", "committedDate": "2020-02-06T17:43:01Z", "type": "commit"}, {"oid": "685855f25f3e8e3e226b56f1875c561e4afddb03", "url": "https://github.com/rstudio/rstudio/commit/685855f25f3e8e3e226b56f1875c561e4afddb03", "message": "fix a compiler directive", "committedDate": "2020-02-06T17:48:14Z", "type": "commit"}, {"oid": "693a33f3161a16fcfd7dc50e2ea620cb25a3d21a", "url": "https://github.com/rstudio/rstudio/commit/693a33f3161a16fcfd7dc50e2ea620cb25a3d21a", "message": "move the rest of the FileMode functions to FilePath", "committedDate": "2020-02-06T18:33:07Z", "type": "commit"}, {"oid": "309a4da60553065d6122500554baae25ddca5959", "url": "https://github.com/rstudio/rstudio/commit/309a4da60553065d6122500554baae25ddca5959", "message": "add missing files from previous commit", "committedDate": "2020-02-06T21:37:31Z", "type": "commit"}, {"oid": "7e5a96edad3d2f609c6f99e53a5b44973b467c9a", "url": "https://github.com/rstudio/rstudio/commit/7e5a96edad3d2f609c6f99e53a5b44973b467c9a", "message": "Merge branch 'v1.4' into feature/file-path-change-owner-mode", "committedDate": "2020-02-06T21:38:41Z", "type": "commit"}, {"oid": "670d251691a2ce5fd2bfa531b0ea0ef45192cdc9", "url": "https://github.com/rstudio/rstudio/commit/670d251691a2ce5fd2bfa531b0ea0ef45192cdc9", "message": "fix copyrights in shared_core", "committedDate": "2020-02-06T21:43:18Z", "type": "commit"}, {"oid": "4f0533476ed90254cba9fd4c3884665cf5264343", "url": "https://github.com/rstudio/rstudio/commit/4f0533476ed90254cba9fd4c3884665cf5264343", "message": "add missing const declaration", "committedDate": "2020-02-07T06:41:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODYwMw==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r376638603", "bodyText": "Feels like this should be metadata attached to the error rather than logged separately?", "author": "jmcphers", "createdAt": "2020-02-07T22:31:57Z", "path": "src/cpp/server/auth/ServerAuthHandler.cpp", "diffHunk": "@@ -454,9 +453,17 @@ Error initialize()\n       return error;\n    }\n \n+   core::system::User serverUser;\n+   error = core::system::User::getUserFromIdentifier(options().serverUser(), serverUser);\n+   if (error)\n+   {\n+      LOG_ERROR_MESSAGE(\"Could not get server user details\");", "originalCommit": "4f0533476ed90254cba9fd4c3884665cf5264343", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODc0MQ==", "url": "https://github.com/rstudio/rstudio/pull/6132#discussion_r376638741", "bodyText": "(i.e.  we typically only LOG_ERROR_MESSAGE at the point when we abort an operation, not as part of bubbling an error through)", "author": "jmcphers", "createdAt": "2020-02-07T22:32:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYzODYwMw=="}], "type": "inlineReview"}, {"oid": "32ff102bdbb2e0afe9b5175c614a431c2d586e51", "url": "https://github.com/rstudio/rstudio/commit/32ff102bdbb2e0afe9b5175c614a431c2d586e51", "message": "change error/log behaviour re code review feedback", "committedDate": "2020-02-08T18:50:34Z", "type": "commit"}]}