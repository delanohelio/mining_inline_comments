{"pr_number": 7302, "pr_title": "navigate to bookdown xrefs in omni-search", "pr_createdAt": "2020-07-08T18:38:48Z", "pr_url": "https://github.com/rstudio/rstudio/pull/7302", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1MTA1MQ==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r451751051", "bodyText": "@jjallaire: are there any other reference types I should handle here?", "author": "kevinushey", "createdAt": "2020-07-08T18:40:06Z", "path": "src/cpp/session/modules/SessionCodeSearch.cpp", "diffHunk": "@@ -1543,6 +1552,100 @@ SourceItem fromCppDefinition(const clang::CppDefinition& cppDefinition)\n       safe_convert::numberTo<int>(cppDefinition.location.column, 1));\n }\n \n+void fillFromBookdownRefs(const std::string& term,\n+                          std::vector<SourceItem>* pSourceItems)\n+{\n+   // retrieve refs for this project\n+   core::json::Value bookdownIndex = module_context::bookdownXRefIndex();\n+   core::debug::print(bookdownIndex);\n+   \n+   // may be null if we have no bookdown refs (typically implies\n+   // we're not in a bookdown project)\n+   if (!bookdownIndex.isObject())\n+      return;\n+   \n+   std::string baseDir;\n+   core::json::Array bookdownRefs;\n+   \n+   Error error = core::json::readObject(\n+            bookdownIndex.getObject(),\n+            \"baseDir\", baseDir,\n+            \"refs\", bookdownRefs);\n+   \n+   if (error)\n+   {\n+      LOG_ERROR(error);\n+      return;\n+   }\n+   \n+   FilePath basePath = module_context::resolveAliasedPath(baseDir);\n+   \n+   // {\n+   //     \"file\": \"01-intro.Rmd\",\n+   //     \"type\": \"h1\",\n+   //     \"id\": \"intro\",\n+   //     \"title\": \"Introduction\"\n+   // }\n+   \n+   for (const json::Value& bookdownRef : bookdownRefs)\n+   {\n+      if (!bookdownRef.isObject())\n+         continue;\n+      \n+      std::string file, type, id, title;\n+      Error error = core::json::readObject(\n+               bookdownRef.getObject(),\n+               \"file\", file,\n+               \"type\", type,\n+               \"id\", id,\n+               \"title\", title);\n+      \n+      if (error)\n+      {\n+         LOG_ERROR(error);\n+         continue;\n+      }\n+      \n+      // figure out appropriate source item type\n+      SourceItem::Type sourceType = SourceItem::None;", "originalCommit": "5cfad3d781351e5794bd4781db7be4e26e6a74bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1OTMyMA==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452559320", "bodyText": "All the types are here (save for eq which I appear to have forgotten!): https://github.com/rstudio/rstudio/blob/master/src/gwt/panmirror/src/editor/src/api/xref.ts#L99", "author": "jjallaire", "createdAt": "2020-07-10T00:24:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTc1MTA1MQ=="}], "type": "inlineReview"}, {"oid": "fc8f15f3a94711c53e9c829cc358f93ce2805b2e", "url": "https://github.com/rstudio/rstudio/commit/fc8f15f3a94711c53e9c829cc358f93ce2805b2e", "message": "tweaks", "committedDate": "2020-07-08T21:47:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1ODMwOA==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452558308", "bodyText": "There's also equations and theorems (although the latter obscure enough that we probably don't need navigation for it).", "author": "jjallaire", "createdAt": "2020-07-10T00:20:28Z", "path": "src/cpp/session/modules/SessionCodeSearch.cpp", "diffHunk": "@@ -1399,13 +1401,16 @@ class SourceItem\n public:\n    enum Type\n    {\n-      None = 0,\n-      Function = 1,\n-      Method = 2,\n-      Class = 3,\n-      Enum = 4,\n+      None      = 0,\n+      Function  = 1,\n+      Method    = 2,\n+      Class     = 3,\n+      Enum      = 4,\n       EnumValue = 5,\n-      Namespace = 6\n+      Namespace = 6,\n+      Section   = 7,", "originalCommit": "fc8f15f3a94711c53e9c829cc358f93ce2805b2e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1ODYyMA==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452558620", "bodyText": "Do we want to distinguish between heading levels here? (Hadley had asked for distinguishing headings levels in xref completions b/c it's helpful context). Paul could do separate icons for H1-H6.", "author": "jjallaire", "createdAt": "2020-07-10T00:21:36Z", "path": "src/cpp/session/modules/SessionCodeSearch.cpp", "diffHunk": "@@ -1399,13 +1401,16 @@ class SourceItem\n public:\n    enum Type\n    {\n-      None = 0,\n-      Function = 1,\n-      Method = 2,\n-      Class = 3,\n-      Enum = 4,\n+      None      = 0,\n+      Function  = 1,\n+      Method    = 2,\n+      Class     = 3,\n+      Enum      = 4,\n       EnumValue = 5,\n-      Namespace = 6\n+      Namespace = 6,\n+      Section   = 7,", "originalCommit": "fc8f15f3a94711c53e9c829cc358f93ce2805b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NjE3MQ==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452796171", "bodyText": "Even just h1 vs h2 vs everything else would be useful", "author": "hadley", "createdAt": "2020-07-10T11:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU1ODYyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDA3OA==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452560078", "bodyText": "I'm torn as to whether we should be showing IDs here, at least for figures, tables, and equations -- as that's the 'identifier' that's being searched for (i.e. for functions we don't show the roxygen title if available we show the name of the function). I've also seen that figure and table captions can get quite long (even multiple sentences) and I think the id would be a better mental \"bookmark' in the case cases.\nFor section I can see the argument that we should use the actual title (since the id is typically algorithmically derived from the title).", "author": "jjallaire", "createdAt": "2020-07-10T00:27:40Z", "path": "src/cpp/session/modules/SessionCodeSearch.cpp", "diffHunk": "@@ -1543,6 +1552,99 @@ SourceItem fromCppDefinition(const clang::CppDefinition& cppDefinition)\n       safe_convert::numberTo<int>(cppDefinition.location.column, 1));\n }\n \n+void fillFromBookdownRefs(const std::string& term,\n+                          std::vector<SourceItem>* pSourceItems)\n+{\n+   // retrieve refs for this project\n+   core::json::Value bookdownIndex = module_context::bookdownXRefIndex();\n+   \n+   // may be null if we have no bookdown refs (typically implies\n+   // we're not in a bookdown project)\n+   if (!bookdownIndex.isObject())\n+      return;\n+   \n+   std::string baseDir;\n+   core::json::Array bookdownRefs;\n+   \n+   Error error = core::json::readObject(\n+            bookdownIndex.getObject(),\n+            \"baseDir\", baseDir,\n+            \"refs\", bookdownRefs);\n+   \n+   if (error)\n+   {\n+      LOG_ERROR(error);\n+      return;\n+   }\n+   \n+   FilePath basePath = module_context::resolveAliasedPath(baseDir);\n+   \n+   // {\n+   //     \"file\": \"01-intro.Rmd\",\n+   //     \"type\": \"h1\",\n+   //     \"id\": \"intro\",\n+   //     \"title\": \"Introduction\"\n+   // }\n+   \n+   for (const json::Value& bookdownRef : bookdownRefs)\n+   {\n+      if (!bookdownRef.isObject())\n+         continue;\n+      \n+      std::string file, type, id, title;\n+      Error error = core::json::readObject(\n+               bookdownRef.getObject(),\n+               \"file\", file,\n+               \"type\", type,\n+               \"id\", id,\n+               \"title\", title);\n+      \n+      if (error)\n+      {\n+         LOG_ERROR(error);\n+         continue;\n+      }\n+      \n+      // figure out appropriate source item type\n+      SourceItem::Type sourceType = SourceItem::None;\n+      if (type == \"fig\")\n+      {\n+         sourceType = SourceItem::Figure;\n+      }\n+      else if (type == \"tab\")\n+      {\n+         sourceType = SourceItem::Table;\n+      }\n+      else if (type == \"h1\" || type == \"h2\" || type == \"h3\" ||\n+               type == \"h4\" || type == \"h5\" || type == \"h6\")\n+      {\n+         sourceType = SourceItem::Section;\n+      }\n+      \n+      // form appropriate text for display\n+      std::string displayText = title;", "originalCommit": "fc8f15f3a94711c53e9c829cc358f93ce2805b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5NjY1MQ==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452796651", "bodyText": "How about both, like title (#id) ? Or is that likely to be too long?", "author": "hadley", "createdAt": "2020-07-10T11:54:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwODA5Mw==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452808093", "bodyText": "I think it will be too long (a section title would typically be ~ 10-30 characters which is already over the effective limit for the UI).", "author": "jjallaire", "createdAt": "2020-07-10T12:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNzk5Mw==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452937993", "bodyText": "If we think displaying the ID is necessary we could truncate the section title and always append the ID.", "author": "kevinushey", "createdAt": "2020-07-10T16:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk1NTA5MA==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452955090", "bodyText": "I'd say try it without, and then if it's frustrating we figure out how to add it.", "author": "hadley", "createdAt": "2020-07-10T16:43:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA2MTA5Mw==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r453061093", "bodyText": "I think no ID for sections/headers to start with is fine, but we definitely should use the IDs for figures, tables, and equations. In those cases that's the actual \"symbol\" they are navigating to (it's the chunk label).", "author": "jjallaire", "createdAt": "2020-07-10T20:24:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA5NzkzNA==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r453097934", "bodyText": "Sorry, to re-iterate: do we want to be able to search based on the contents of the caption (e.g. for a figure), or only based on the figure ID?", "author": "kevinushey", "createdAt": "2020-07-10T22:03:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDA3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDczMTMwOQ==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r454731309", "bodyText": "I think we should search based on contents, but we should show the id in the list", "author": "jjallaire", "createdAt": "2020-07-15T01:09:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MDA3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjIxNA==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452562214", "bodyText": "Perhaps it's accounted for elsewhere, but do we want to have fig:, tab:, etc. filter on xref type?", "author": "jjallaire", "createdAt": "2020-07-10T00:36:30Z", "path": "src/gwt/src/org/rstudio/studio/client/workbench/codesearch/CodeSearchOracle.java", "diffHunk": "@@ -192,51 +192,41 @@ public void requestSuggestions(final Request request,\n       // failed to short-circuit via the cache, hit the server\n       codeSearch_.enqueRequest(request, callback); \n    }\n-     \n+   \n+   // this method converts queries of the form 'foo:<line>:<col>' to\n+   // an appropriate navigation target, transforming the query and\n+   // file position as appropriate\n    public CodeNavigationTarget navigationTarget(String query,\n                                                 Suggestion suggestion)\n    {\n       CodeSearchSuggestion codeSearchSuggestion = (CodeSearchSuggestion) suggestion;\n+      CodeNavigationTarget target = codeSearchSuggestion.getNavigationTarget();\n       \n-      // Allow queries of the form e.g. 'foo:15' to go to line '15' of a file.\n-      // We parse the integer following the ':' if possible.\n-      FilePosition filePos = codeSearchSuggestion.getNavigationTarget().getPosition();\n-      if (codeSearchSuggestion.isFileTarget())\n-      {\n-         int colonIndex = query.indexOf(\":\");\n-         if (colonIndex > 0)\n-         {\n-            String[] splat = query.split(\":\");\n-            if (splat.length > 1)\n-            {\n-               int rowToNavigateTo = 0;\n-               try\n-               {\n-                  rowToNavigateTo = Integer.parseInt(splat[1]);\n-               }\n-               catch (Exception e)\n-               {}\n-               \n-               int colToNavigateTo = 0;\n-               if (splat.length > 2)\n-               {\n-                  try\n-                  {\n-                     colToNavigateTo = Integer.parseInt(splat[2]);\n-                  }\n-                  catch (Exception e)\n-                  {}\n-               }\n-               filePos = FilePosition.create(rowToNavigateTo, colToNavigateTo);\n-            }\n-            \n-         }\n-      }\n+      // nothing to do for non-file targets\n+      if (!codeSearchSuggestion.isFileTarget())\n+         return target;\n+      \n+      // nothing to do if the query doesn't have ':'\n+      int colonIndex = query.indexOf(\":\");", "originalCommit": "fc8f15f3a94711c53e9c829cc358f93ce2805b2e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc5Njk2OA==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452796968", "bodyText": "That would be nice but it's not very discoverable, so hard to know if people would ever use it.", "author": "hadley", "createdAt": "2020-07-10T11:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjIxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgwODI3NQ==", "url": "https://github.com/rstudio/rstudio/pull/7302#discussion_r452808275", "bodyText": "That's true. Probably not worth it then.", "author": "jjallaire", "createdAt": "2020-07-10T12:20:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU2MjIxNA=="}], "type": "inlineReview"}, {"oid": "92b4710fcd5ae1eb5c4b86395e7a53b09535e957", "url": "https://github.com/rstudio/rstudio/commit/92b4710fcd5ae1eb5c4b86395e7a53b09535e957", "message": "navigate to bookdown xrefs in omni-search", "committedDate": "2020-07-10T21:42:42Z", "type": "commit"}, {"oid": "13e0052a74f179b2faf08dc0c5a5a9635b2a88fd", "url": "https://github.com/rstudio/rstudio/commit/13e0052a74f179b2faf08dc0c5a5a9635b2a88fd", "message": "navigate to xrefs in text editor", "committedDate": "2020-07-10T21:42:42Z", "type": "commit"}, {"oid": "b77fe754906bb4bf91577ea9b0dd0890fead550a", "url": "https://github.com/rstudio/rstudio/commit/b77fe754906bb4bf91577ea9b0dd0890fead550a", "message": "remove debug print", "committedDate": "2020-07-10T21:42:42Z", "type": "commit"}, {"oid": "94b5580ab47dbe7607be4a84369bb13e2fa14101", "url": "https://github.com/rstudio/rstudio/commit/94b5580ab47dbe7607be4a84369bb13e2fa14101", "message": "consistent XRef capitalization", "committedDate": "2020-07-10T21:42:42Z", "type": "commit"}, {"oid": "e640536fa877e7ea2a16262cadba8061bfa8d588", "url": "https://github.com/rstudio/rstudio/commit/e640536fa877e7ea2a16262cadba8061bfa8d588", "message": "tweaks", "committedDate": "2020-07-10T21:42:42Z", "type": "commit"}, {"oid": "b2a0357a50972c111cd3c8c067dd978cc47df47e", "url": "https://github.com/rstudio/rstudio/commit/b2a0357a50972c111cd3c8c067dd978cc47df47e", "message": "use different icons for different headers", "committedDate": "2020-07-10T21:42:43Z", "type": "commit"}, {"oid": "b2a0357a50972c111cd3c8c067dd978cc47df47e", "url": "https://github.com/rstudio/rstudio/commit/b2a0357a50972c111cd3c8c067dd978cc47df47e", "message": "use different icons for different headers", "committedDate": "2020-07-10T21:42:43Z", "type": "forcePushed"}, {"oid": "de0b176a6afd48792c74109032f13a15586fbdf8", "url": "https://github.com/rstudio/rstudio/commit/de0b176a6afd48792c74109032f13a15586fbdf8", "message": "tweak display for id-containing items", "committedDate": "2020-07-13T16:21:30Z", "type": "commit"}, {"oid": "34d2d7becff53b577ebf68a8eb784f0e52a1f008", "url": "https://github.com/rstudio/rstudio/commit/34d2d7becff53b577ebf68a8eb784f0e52a1f008", "message": "Merge remote-tracking branch 'origin/master' into feature/bookdown-omni-search", "committedDate": "2020-07-20T23:04:32Z", "type": "commit"}]}