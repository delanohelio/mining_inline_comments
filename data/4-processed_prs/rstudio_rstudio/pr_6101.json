{"pr_number": 6101, "pr_title": "Check for write permissions before performing a global replace", "pr_createdAt": "2020-01-28T00:27:16Z", "pr_url": "https://github.com/rstudio/rstudio/pull/6101", "timeline": [{"oid": "36b6168f598e1c7a807b1745906e13bf43a7c693", "url": "https://github.com/rstudio/rstudio/commit/36b6168f598e1c7a807b1745906e13bf43a7c693", "message": "check for write permissions before performing a replace\nfix rare bug where --include broke the grep command", "committedDate": "2020-01-24T00:28:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTQ2Mg==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r371561462", "bodyText": "I'm not sure if there's a general use case for a test like this. If there is it would be good to have such a function in FilePath.hpp/cpp. What do you think @jmcphers?", "author": "MariaSemple", "createdAt": "2020-01-28T00:46:15Z", "path": "src/cpp/session/modules/SessionFind.cpp", "diffHunk": "@@ -470,6 +470,12 @@ class GrepOperation : public boost::enable_shared_from_this<GrepOperation>\n       }\n    }\n \n+   Error testWritePermissions(const FilePath& filePath)\n+   {\n+      std::shared_ptr<std::ostream> testStream;\n+      return filePath.openForWrite(testStream, /*in_truncate*/ false);\n+   }\n+", "originalCommit": "36b6168f598e1c7a807b1745906e13bf43a7c693", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE4MjYxNg==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r372182616", "bodyText": "@jmcphers There is a function in FileMode.hpp that does essentially the same thing isFileWriteable but doesn't work for Windows (in general, FileMode.hpp isn't supported on Windows). Where that function is called it looks like we don't do any type of check for Windows so it might make sense to add this somewhere more generic.", "author": "melissa-barca", "createdAt": "2020-01-29T04:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxMTUzMw==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r372511533", "bodyText": "There is a subtle distinction between \"does this file have the write access bit set for me\" and \"can I actually write to this file\". There is no way to validate the latter without actually opening a handle which can have some side effects (especially on NFS mounted volumes). I think it's fine to move this into FilePath itself but we might leave a comment about reading the access bits instead unless it's important to guarantee success.", "author": "jmcphers", "createdAt": "2020-01-29T17:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI1NjU4Nw==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374256587", "bodyText": "I added this to FilePath, in the same commit I fixed a bug I discovered in testing this where we were losing the detailed error message in certain cases. This is ready for re review.", "author": "melissa-barca", "createdAt": "2020-02-03T18:10:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU2MTQ2Mg=="}], "type": "inlineReview"}, {"oid": "987b8997146d0e89190aa21f27bb42f922a0b55c", "url": "https://github.com/rstudio/rstudio/commit/987b8997146d0e89190aa21f27bb42f922a0b55c", "message": "Merge branch 'bugfix/replace-respect-permissions' of https://github.com/rstudio/rstudio into bugfix/replace-respect-permissions", "committedDate": "2020-01-29T20:05:06Z", "type": "commit"}, {"oid": "5718f2de34bd15d80ac0ddc61ee48e7b88e82977", "url": "https://github.com/rstudio/rstudio/commit/5718f2de34bd15d80ac0ddc61ee48e7b88e82977", "message": "Move testWritePermissions to FilePath.*\nFix bug where detailed error message was being overwritten", "committedDate": "2020-02-03T18:09:50Z", "type": "commit"}, {"oid": "5718f2de34bd15d80ac0ddc61ee48e7b88e82977", "url": "https://github.com/rstudio/rstudio/commit/5718f2de34bd15d80ac0ddc61ee48e7b88e82977", "message": "Move testWritePermissions to FilePath.*\nFix bug where detailed error message was being overwritten", "committedDate": "2020-02-03T18:09:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI5NjU2Nw==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374296567", "bodyText": "Nit: methods in shared_core files are alphabetical. Could you move this just before the private: section? Also in the CPP file.", "author": "MariaSemple", "createdAt": "2020-02-03T19:31:52Z", "path": "src/cpp/shared_core/include/shared_core/FilePath.hpp", "diffHunk": "@@ -573,6 +573,14 @@ class FilePath\n     */\n    Error openForWrite(std::shared_ptr<std::ostream>& out_stream, bool in_truncate = true) const;\n \n+   /*", "originalCommit": "5718f2de34bd15d80ac0ddc61ee48e7b88e82977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjkxMg==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374312912", "bodyText": "Done", "author": "melissa-barca", "createdAt": "2020-02-03T20:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI5NjU2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI5NzIyNA==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374297224", "bodyText": "Nit: periods at the ends of the sentences and a blank comment line between the @brief and long descriptions.", "author": "MariaSemple", "createdAt": "2020-02-03T19:33:12Z", "path": "src/cpp/shared_core/include/shared_core/FilePath.hpp", "diffHunk": "@@ -573,6 +573,14 @@ class FilePath\n     */\n    Error openForWrite(std::shared_ptr<std::ostream>& out_stream, bool in_truncate = true) const;\n \n+   /*\n+    * @brief Checks if a file can be written to by opening the file", "originalCommit": "5718f2de34bd15d80ac0ddc61ee48e7b88e82977", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjc3MQ==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374312771", "bodyText": "Fixed \ud83d\udc4d", "author": "melissa-barca", "createdAt": "2020-02-03T20:04:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDI5NzIyNA=="}], "type": "inlineReview"}, {"oid": "b49b150ec91bff6db2994cfa9f234f5f99e4c811", "url": "https://github.com/rstudio/rstudio/commit/b49b150ec91bff6db2994cfa9f234f5f99e4c811", "message": "clean up testWritePermissions placement and comment", "committedDate": "2020-02-03T20:02:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjg5OA==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374312898", "bodyText": "Do you know if this could create an empty file on disk if the file doesn't exist? I'm not sure.", "author": "MariaSemple", "createdAt": "2020-02-03T20:05:05Z", "path": "src/cpp/shared_core/FilePath.cpp", "diffHunk": "@@ -1295,6 +1289,12 @@ void FilePath::setLastWriteTime(std::time_t in_time) const\n    }\n }\n \n+Error FilePath::testWritePermissions() const\n+{\n+   std::shared_ptr<std::ostream> testStream;\n+   return openForWrite(testStream, false);", "originalCommit": "b49b150ec91bff6db2994cfa9f234f5f99e4c811", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNzQ5Ng==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374327496", "bodyText": "Yes, it's very likely it will do this (good thought!)", "author": "jmcphers", "createdAt": "2020-02-03T20:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjg5OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1NDgyMw==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374354823", "bodyText": "I updated the function so it no longer calls openForWrite, but borrows similar modified logic so that it only opens the file if it exists. I also updated the comment if FilePath.hpp to reflect this.", "author": "melissa-barca", "createdAt": "2020-02-03T21:36:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMjg5OA=="}], "type": "inlineReview"}, {"oid": "f65e568ca2787d96b49d78d1fc508825e09f2aed", "url": "https://github.com/rstudio/rstudio/commit/f65e568ca2787d96b49d78d1fc508825e09f2aed", "message": "update testWritePermissions so it will not create the specified file if it doesn't exist", "committedDate": "2020-02-03T21:33:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1NTg4OA==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374355888", "bodyText": "Right now the ostream will be leaked if the function completes successfully. In openForWrite, the ownership is transferred to a smart pointer before the function exits. I think we should delete it before returning Success.\nThis also opens another question (which applies to the existing implementation of openForWrite) - is it possible for pResult to be initialized when an exception is thrown? In that case, the ostream would be leaked in that case as well. We could avoid this in both places by declaring the pResult outside of the try and deleting it in the catch if it's not null.", "author": "MariaSemple", "createdAt": "2020-02-03T21:38:51Z", "path": "src/cpp/shared_core/FilePath.cpp", "diffHunk": "@@ -1291,8 +1291,52 @@ void FilePath::setLastWriteTime(std::time_t in_time) const\n \n Error FilePath::testWritePermissions() const\n {\n-   std::shared_ptr<std::ostream> testStream;\n-   return openForWrite(testStream, false);\n+   try\n+   {\n+      std::ostream* pResult = nullptr;\n+#ifdef _WIN32\n+      using namespace boost::iostreams;\n+      HANDLE hFile = ::CreateFileW(m_impl->Path.wstring().c_str(),\n+                                   FILE_APPEND_DATA,\n+                                   0, // exclusive access\n+                                   nullptr,\n+                                   OPEN_EXISTING,\n+                                   0,\n+                                   nullptr);\n+      if (hFile == INVALID_HANDLE_VALUE)\n+      {\n+         Error error = LAST_SYSTEM_ERROR();\n+         error.addProperty(\"path\", getAbsolutePath());\n+         return error;\n+      }\n+      file_descriptor_sink fd;\n+      fd.open(hFile, close_handle);\n+      pResult = new boost::iostreams::stream<file_descriptor_sink>(fd);\n+#else\n+      using std::ios_base;\n+      ios_base::openmode flags = ios_base::in | ios_base::out | ios_base::binary;\n+      pResult = new std::ofstream(getAbsolutePath().c_str(), flags);\n+#endif\n+\n+      if (!(*pResult))\n+      {\n+         delete pResult;\n+\n+         Error error = systemError(boost::system::errc::no_such_file_or_directory, ERROR_LOCATION);\n+         error.addProperty(\"path\", getAbsolutePath());\n+         return error;\n+      }\n+   }\n+   catch(const std::exception& e)\n+   {\n+      Error error = systemError(boost::system::errc::io_error,\n+                                ERROR_LOCATION);\n+      error.addProperty(\"what\", e.what());\n+      error.addProperty(\"path\", getAbsolutePath());\n+      return error;\n+   }\n+", "originalCommit": "f65e568ca2787d96b49d78d1fc508825e09f2aed", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1ODAwNA==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374358004", "bodyText": "Alternately in this implementation we can use a local ostream rather than a pointer, which would solve both problems.", "author": "MariaSemple", "createdAt": "2020-02-03T21:43:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1NTg4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQzNTM2MQ==", "url": "https://github.com/rstudio/rstudio/pull/6101#discussion_r374435361", "bodyText": "Thanks for pointing this out. I cleaned up the deletes and updated openForRead as well. Unfortunately because of this line https://github.com/rstudio/rstudio/blob/bugfix/replace-respect-permissions/src/cpp/shared_core/FilePath.cpp#L1317 I think it's cleaner to use a pointer here than a local variable. I did some testing on windows using a local variable and got some strange results.", "author": "melissa-barca", "createdAt": "2020-02-04T01:40:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM1NTg4OA=="}], "type": "inlineReview"}, {"oid": "43da417dad06915de7faa7b63b41746d0b63fb91", "url": "https://github.com/rstudio/rstudio/commit/43da417dad06915de7faa7b63b41746d0b63fb91", "message": "modify FilePath functions to prevent leaks", "committedDate": "2020-02-04T01:42:32Z", "type": "forcePushed"}, {"oid": "7a52b167af893d0056947cbc41eae0cf16dd919e", "url": "https://github.com/rstudio/rstudio/commit/7a52b167af893d0056947cbc41eae0cf16dd919e", "message": "modify FilePath functions to prevent leaks", "committedDate": "2020-02-04T17:34:13Z", "type": "forcePushed"}, {"oid": "566a218ab54e9fe57504d76a0243fe15039fca3b", "url": "https://github.com/rstudio/rstudio/commit/566a218ab54e9fe57504d76a0243fe15039fca3b", "message": "modify FilePath functions to prevent leaks", "committedDate": "2020-02-04T17:35:24Z", "type": "commit"}, {"oid": "566a218ab54e9fe57504d76a0243fe15039fca3b", "url": "https://github.com/rstudio/rstudio/commit/566a218ab54e9fe57504d76a0243fe15039fca3b", "message": "modify FilePath functions to prevent leaks", "committedDate": "2020-02-04T17:35:24Z", "type": "forcePushed"}]}