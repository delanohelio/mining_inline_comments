{"pr_number": 296, "pr_title": "Plant UML diagram of Nivio backend architecture", "pr_createdAt": "2020-09-20T17:50:03Z", "pr_url": "https://github.com/dedica-team/nivio/pull/296", "timeline": [{"oid": "481dadd2d7d502ce2e320e5e687e0edb8e3be2b3", "url": "https://github.com/dedica-team/nivio/commit/481dadd2d7d502ce2e320e5e687e0edb8e3be2b3", "message": "Plant UML diagram of Nivio backend architecture", "committedDate": "2020-09-20T17:49:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNTYzMw==", "url": "https://github.com/dedica-team/nivio/pull/296#discussion_r491715633", "bodyText": "Is this the only one who triggers the Indexer?\nSo the Observers are only for registering file changes, right? And then an ApplicationEvent is fired, which in turn triggers the Indexer?\nDid I miss anything else? Are the ApplicationEvents used for anything else?", "author": "mfbieber", "createdAt": "2020-09-20T17:51:44Z", "path": "backend-architecture-api.puml", "diffHunk": "@@ -0,0 +1,178 @@\n+@startuml\n+\n+class ApiController {\n+    +Index index()\n+    +ResponseEntity<LandscapeImpl> landscape(String landscapeIdentifier)\n+    +ResponseEntity<Group> group(String landscapeIdentifier, String groupIdentifier)\n+    +ResponseEntity<Item> item(String landscapeIdentifier, String groupIdentifier, String itemIdentifier)\n+    +ProcessLog create(@RequestBody String body)\n+    +ProcessLog indexLandscape(String identifier, String format, String body)\n+    +ResponseEntity<ProcessLog> log(String identifier)\n+    +ResponseEntity<Set<Item>> search(String identifier, String query)\n+    +ResponseEntity<List<FacetResult>> facets(String identifier)\n+    +ProcessLog reindex(String landscape)\n+}\n+\n+ApiController o-- LandscapeRepository\n+ApiController o-- LandscapeDescriptionFactory\n+ApiController o-- ItemDescriptionFormatFactory\n+ApiController o-- Indexer\n+\n+class LandscapeImpl {\n+    -String identifier\n+    -String name\n+    -String contact\n+    -String description\n+    -String source\n+    -ItemIndex items\n+    -LandscapeConfig config\n+    -Map<String, GroupItem> groups\n+    -ProcessLog processLog\n+    -Map<String, String> labels\n+    -Map<String, Link> links\n+    -String owner\n+}\n+\n+class LandscapeConfig {\n+    -boolean greedy = true;\n+    -LayoutConfig groupLayoutConfig\n+    -LayoutConfig itemLayoutConfig\n+    -List<String> groupBlacklist\n+    -List<String> labelBlacklist\n+    -Branding branding\n+    -Map<String, KPIConfig> kpis\n+}\n+\n+class LayoutConfig {\n+    -Integer maxIterations\n+    -Float forceConstantFactor\n+    -Float maxDistanceLimitFactor\n+    -Float minDistanceLimitFactor\n+}\n+\n+LandscapeImpl o-- LandscapeConfig\n+LandscapeConfig o-- LayoutConfig\n+\n+class LandscapeRepository {\n+    +Optional<LandscapeImpl> findDistinctByIdentifier(String identifier)\n+    +void save(LandscapeImpl landscape)\n+    +Iterable<LandscapeImpl> findAll()\n+}\n+\n+LandscapeRepository o-- LandscapeImpl\n+\n+class LandscapeDescriptionFactory {\n+    +LandscapeDescription from(Landscape landscape)\n+    +LandscapeDescription from(URL url)\n+    +LandscapeDescription fromYaml(File file)\n+    +LandscapeDescription fromString(String yaml, String origin)\n+    +LandscapeDescription fromString(String yaml, URL url)\n+}\n+\n+LandscapeDescriptionFactory -- LandscapeDescription\n+\n+class LandscapeDescription{\n+    -String identifier\n+    -String name\n+    -String contact\n+    -String description\n+    -String owner\n+    -Map<String, ItemDescription> templates\n+    -String source\n+    -List<SourceReference> sources\n+    -ItemDescriptions itemDescriptions\n+    -LandscapeConfig config\n+    -boolean isPartial\n+    -Map<String, GroupItem> groups;\n+    -Map<String, Link> links\n+    -Map<String, String> labels\n+\n+}\n+\n+class ItemDescriptionFormatFactory {\n+    +ItemDescriptionFactory getFactory()\n+}\n+\n+class Indexer {\n+Triggered by ApplicationEvents fired by observing changes in files through the\n+FileSourceReferenceObserver\n+--\n+    -LandscapeRepository landscapeRepo", "originalCommit": "481dadd2d7d502ce2e320e5e687e0edb8e3be2b3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNjEwNg==", "url": "https://github.com/dedica-team/nivio/pull/296#discussion_r491716106", "bodyText": "The only way to trigger indexing is indeed an ApplicationEvent (IndexEvent). This happens at application start via SEED variable content, at observed changes or via API (not sure if that still works).", "author": "bonndan", "createdAt": "2020-09-20T17:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTcxNTYzMw=="}], "type": "inlineReview"}, {"oid": "0214337cf09895afe8ab45ef57e32eb25ca2bb4a", "url": "https://github.com/dedica-team/nivio/commit/0214337cf09895afe8ab45ef57e32eb25ca2bb4a", "message": "added text about the UML diagram to the readme", "committedDate": "2020-09-25T20:48:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyNTI2Nw==", "url": "https://github.com/dedica-team/nivio/pull/296#discussion_r495225267", "bodyText": "@bonndan : we discussed above that the Indexer is triggered only by an ApplicationEvent. In the ApiController though, the endpoints indexLandscape() and reindex() both also trigger the Indexer.\nIs my description correct?", "author": "mfbieber", "createdAt": "2020-09-25T20:52:47Z", "path": "readme.md", "diffHunk": "@@ -81,4 +81,30 @@ Clone nivio, build and run a Docker image:\n   \n   Open http://localhost:8080\n   \n-  If you want to contribute to our frontend, read further into our [Frontend Readme](https://github.com/dedica-team/nivio/tree/develop/src/main/app)\n\\ No newline at end of file\n+  If you want to contribute to our frontend, read further into our [Frontend Readme](https://github.com/dedica-team/nivio/tree/develop/src/main/app)\n+  \n+**Nivio Backend Architecture**\n+\n+If you want to contribute to our backend, maybe the following diagram is of use to you. It shows some of the most important classes and \n+interfaces. It is supposed to give you an idea on how the backend is structured, but note that not all details are displayed:\n+\n+ ![layoutedArtifact graph](backend_architecture_api.png)\n+ \n+ If you use the `ApiController` as the entry point to the backend, you can see that it retrieves information and triggers events\n+  to the most important parts of the application. \n+ \n+The `LandscapeRespository` gives access to the stored landscapes.\n+  \n+The `LandscapeDescriptionFactory` is used to generate a `LandscapeDescription` from various sources, such as a `String` input, \n+or e.g. from a yaml file. \n+\n+This `LandscapeDescription` has to be enriched with the `ItemDescription` for all items in the landscape.\n+This is managed by the `InputFormatHandler`, which are able to read several input formats such as e.g. kubernetes files, or the\n+nivio description format. Access to these handlers is managed by the `InputFormatHandlerFactory`.\n+\n+To actually create a landscape, the `Indexer` is used. This is able to compute the landscape graph from a `LandscapeDescription`.\n+The `Indexer` uses several `Resolver` to resolve groups and item relations in landscapes and e.g. the appearance of the graph.\n+\n+The `Indexer` can be triggered either directly through the `ApiController` to index or reindex a landscape, or it is triggered\n+by an observer mechanism on files. These are the files located under the path provided through the `SEED` environment variable.", "originalCommit": "0214337cf09895afe8ab45ef57e32eb25ca2bb4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyOTY4Nw==", "url": "https://github.com/dedica-team/nivio/pull/296#discussion_r495229687", "bodyText": "We should maybe consider limiting the triggering to events, this way the frontend is notified of the event, too.", "author": "bonndan", "createdAt": "2020-09-25T21:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyNTI2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIzNTExMw==", "url": "https://github.com/dedica-team/nivio/pull/296#discussion_r495235113", "bodyText": "I'll open a new ticket.", "author": "bonndan", "createdAt": "2020-09-25T21:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTIyNTI2Nw=="}], "type": "inlineReview"}]}