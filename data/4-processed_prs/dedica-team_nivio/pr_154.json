{"pr_number": 154, "pr_title": "[#147][140] removed DirectoryWatcher etc, polling for changes", "pr_createdAt": "2020-06-10T16:44:17Z", "pr_url": "https://github.com/dedica-team/nivio/pull/154", "timeline": [{"oid": "7f2a63f3636149a24dc3058d570a1e8d6afb6f02", "url": "https://github.com/dedica-team/nivio/commit/7f2a63f3636149a24dc3058d570a1e8d6afb6f02", "message": "[#147][140] removed DirectoryWatcher etc, polling for changes", "committedDate": "2020-06-10T16:43:11Z", "type": "commit"}, {"oid": "43b1062c8a3465e7853031424f1b8003b9a81cc5", "url": "https://github.com/dedica-team/nivio/commit/43b1062c8a3465e7853031424f1b8003b9a81cc5", "message": "[#147][#140] added log message", "committedDate": "2020-06-10T19:04:33Z", "type": "commit"}, {"oid": "9b96765805ed00808d69daeff36f618903cf9db1", "url": "https://github.com/dedica-team/nivio/commit/9b96765805ed00808d69daeff36f618903cf9db1", "message": "[#147][#140] concurrency fixes", "committedDate": "2020-06-10T20:53:44Z", "type": "commit"}, {"oid": "94b56b44f87535706390fc97cde3349d0c59ccd4", "url": "https://github.com/dedica-team/nivio/commit/94b56b44f87535706390fc97cde3349d0c59ccd4", "message": "[#147][#140] added comment", "committedDate": "2020-06-10T20:57:20Z", "type": "commit"}, {"oid": "e132e821b4356ad7462a67a2fc8750dd5bb14aaf", "url": "https://github.com/dedica-team/nivio/commit/e132e821b4356ad7462a67a2fc8750dd5bb14aaf", "message": "add new assessment page for manual", "committedDate": "2020-06-12T17:24:40Z", "type": "commit"}, {"oid": "71029f98013fcc134590d43a6abee7b4dde10c1e", "url": "https://github.com/dedica-team/nivio/commit/71029f98013fcc134590d43a6abee7b4dde10c1e", "message": "Merge branch '147_remove_directory_watcher' of github.com:dedica-team/nivio into 147_remove_directory_watcher", "committedDate": "2020-06-12T19:33:03Z", "type": "commit"}, {"oid": "050a21302abb895084b408d7ffbaa81faebfb356", "url": "https://github.com/dedica-team/nivio/commit/050a21302abb895084b408d7ffbaa81faebfb356", "message": "Merge branch 'develop' into 147_remove_directory_watcher", "committedDate": "2020-06-12T19:34:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMjY3NQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440422675", "bodyText": "Oh, we are using HATEOAS, nice!", "author": "mfbieber", "createdAt": "2020-06-15T20:17:42Z", "path": "src/main/java/de/bonndan/nivio/Application.java", "diffHunk": "@@ -4,12 +4,14 @@\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.core.task.TaskExecutor;\n-import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.hateoas.config.EnableHypermediaSupport;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n import org.springframework.web.servlet.config.annotation.CorsRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n @SpringBootApplication\n+@EnableHypermediaSupport(type = EnableHypermediaSupport.HypermediaType.HAL)", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMzM0MQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440423341", "bodyText": "Nice, this will do the reading of the file system changes?", "author": "mfbieber", "createdAt": "2020-06-15T20:19:05Z", "path": "src/main/java/de/bonndan/nivio/Application.java", "diffHunk": "@@ -4,12 +4,14 @@\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.core.task.TaskExecutor;\n-import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n+import org.springframework.hateoas.config.EnableHypermediaSupport;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n import org.springframework.web.servlet.config.annotation.CorsRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n \n @SpringBootApplication\n+@EnableHypermediaSupport(type = EnableHypermediaSupport.HypermediaType.HAL)\n+@EnableScheduling", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMDY4MA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441110680", "bodyText": "Yes, this triggers the polling.", "author": "bonndan", "createdAt": "2020-06-16T20:05:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyMzM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNTg5MA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440425890", "bodyText": "Sounds like it. So, for me to understand, the triggerer (== the event source) is what exactly? A change in a file, right?", "author": "mfbieber", "createdAt": "2020-06-15T20:24:30Z", "path": "src/main/java/de/bonndan/nivio/ProcessingFinishedEvent.java", "diffHunk": "@@ -12,7 +13,11 @@\n \n     private final Landscape landscape;\n \n-    public ProcessingFinishedEvent(Object source, Landscape landscape) {\n+    /**\n+     * @param source TODO is this a misuse of event source? We store the LandscapeDescription instead of the triggerer", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMDA4OA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440430088", "bodyText": "Well, actually it might be okay. The ApplicationEventsays:\n/**\n * Create a new {@code ApplicationEvent}.\n * @param source the object on which the event initially occurred or with\n * which the event is associated (never {@code null})\n*/\npublic ApplicationEvent(Object source) {\n\tsuper(source);\n\tthis.timestamp = System.currentTimeMillis();\n}\n\nSo the LandscapeDescription is the object with which the event is associated with. In other words, there has been a change on the LandscapeDescription, so that is the event.\nSounds right to me.", "author": "mfbieber", "createdAt": "2020-06-15T20:32:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNTkzNQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440605935", "bodyText": "Don't let @Matthimatiker hear this \ud83d\ude04\nWhat bothers me is that we carry the final graph \"Landscape\" with the processing events and now suddenly introduce the source (\"LandscapeDescription\") by using an existing field that has always been referencing the triggering instance. However, perhaps your view is right and the triggering instance is of no concern in our context anyways.", "author": "bonndan", "createdAt": "2020-06-16T06:07:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc2MjE2Nw==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440762167", "bodyText": "Don't worry, I won't tell him!\nWell, I just don't have a complete overview on our application's architecture yet. Of course, if we used to do it differently and now change only one pattern, this might not be consistent anymore - if that is the concern?\nSo, do I understand correctly: we carry the final Landscape around while processing. Meaning that we have an object which we construct in the process? And now we have the source, which we also can pass around. Does this mean that we could get rid of carrying the Landscapearound?", "author": "mfbieber", "createdAt": "2020-06-16T10:53:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5MDcxMQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441090711", "bodyText": "No the lanscape is the final graph - the only thing which is of interest to us usually. In the case of an event which triggers indexing (re-reading the whole sources), we also need the configuration that is the input for indexing, since we want to observe it for future changes.", "author": "bonndan", "createdAt": "2020-06-16T19:27:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQyNTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMzAwNA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440433004", "bodyText": "Don't we need to check here if the file is really a yaml/yml file?", "author": "mfbieber", "createdAt": "2020-06-15T20:38:30Z", "path": "src/main/java/de/bonndan/nivio/input/LandscapeDescriptionFactory.java", "diffHunk": "@@ -43,56 +44,41 @@ public LandscapeDescriptionFactory(ApplicationEventPublisher publisher, FileFetc\n     }\n \n     /**\n-     * Returns all {@link LandscapeDescription}s from config files named in the seed.\n+     * Returns a {@link LandscapeDescription}s from config file url.\n      *\n-     * @param seed seed object\n-     * @return list of fetched descriptions\n+     * @param old an outdated landscape / description\n+     * @return the description or null if the source is no URL\n      */\n-    public List<LandscapeDescription> getDescriptions(Seed seed) {\n-\n-        List<URL> locations = new ArrayList<>();\n+    @Nullable\n+    public LandscapeDescription from(Landscape old) {\n         try {\n-            if (seed.hasValue()) {\n-                locations = seed.getLocations();\n-            }\n-            if (!StringUtils.isEmpty(System.getenv(Seed.DEMO))) {\n-                locations.addAll(seed.getDemoFiles());\n-            }\n+            URL url = new URL(old.getSource());\n+            return from(url);\n         } catch (MalformedURLException e) {\n-            ProcessingException processingException = new ProcessingException(\"Failed to initialize watchers from seed\", e);\n-            publisher.publishEvent(new ProcessingErrorEvent(this, processingException));\n+            String msg = \"Source in landscape \" + old.getIdentifier() + \" might be no url: \" + old.getSource();\n+            LOGGER.info(msg);\n+            return null;\n         }\n+    }\n \n-        List<LandscapeDescription> descriptions = new ArrayList<>();\n-\n-        locations.forEach(url -> {\n-            LandscapeDescription env = null;\n+    @Nullable\n+    public LandscapeDescription from(URL url) {\n+        LandscapeDescription env = null;\n+        try {\n             if (URLHelper.isLocal(url)) {\n-                try {\n-                    File file = Paths.get(url.toURI()).toFile();\n-                    env = LandscapeDescriptionFactory.fromYaml(file);\n-                } catch (URISyntaxException | ProcessingException ex) {\n-                    if (ex instanceof URISyntaxException) {\n-                        publisher.publishEvent(new ProcessingErrorEvent(this, new ReadingException(\"Failed to handle file\", ex)));\n-                    } else {\n-                        publisher.publishEvent(new ProcessingErrorEvent(this, (ProcessingException) ex));\n-                    }\n-                    LOGGER.error(\"Failed to parse file {}\", url);\n-                }\n+                File file = Paths.get(url.toURI()).toFile();\n+                env = LandscapeDescriptionFactory.fromYaml(file);", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMzk0Ng==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440433946", "bodyText": "Is the file ending even relevant?", "author": "mfbieber", "createdAt": "2020-06-15T20:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMzAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5MTgxMA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441091810", "bodyText": "Yaml is the only input format at the moment for the base configuration (although other formats can be mentioned inside it). If it is not a properly formatted yaml, it won't parse.", "author": "bonndan", "createdAt": "2020-06-16T19:29:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMzAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEwMzQ2Nw==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441103467", "bodyText": "Mhm, then we should validate at least that we are really reading a yaml, or is this done somewhere else?", "author": "mfbieber", "createdAt": "2020-06-16T19:51:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMzAwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMTA4OQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441111089", "bodyText": "It's done implicitly by Jackson's ObjectMappers. It won't parse if not a yaml.", "author": "bonndan", "createdAt": "2020-06-16T20:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzMzAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNTM5Ng==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440435396", "bodyText": "The methods in this class and the implementation in FileFetcher are quite similar. FileFetcher is also reading the contents of the files, very similar as it is done here.\nI would suggest a little bit of refactoring to have less of URLHelper.isLocal() and Files.readAllBytes() in both classes. Just a little bit of cleaning up and reducing complexity. What do you think?", "author": "mfbieber", "createdAt": "2020-06-15T20:43:18Z", "path": "src/main/java/de/bonndan/nivio/input/LandscapeDescriptionFactory.java", "diffHunk": "@@ -149,6 +135,7 @@ public static LandscapeDescription fromString(String yaml, String origin) {\n      * @param url  for updates\n      * @return env description\n      */\n+    @NonNull\n     public static LandscapeDescription fromString(String yaml, URL url) {", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5MjI5Nw==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441092297", "bodyText": "\ud83d\udc4d  I am buried too deep in nivio.", "author": "bonndan", "createdAt": "2020-06-16T19:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNTM5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNTg4OQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441115889", "bodyText": "I've pushed some refactorings.", "author": "bonndan", "createdAt": "2020-06-16T20:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNTM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNjE1MA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440436150", "bodyText": "This method is never used (according to my IDE). What was the intention for it? Is this going to be used later somewhere?", "author": "mfbieber", "createdAt": "2020-06-15T20:44:53Z", "path": "src/main/java/de/bonndan/nivio/input/LandscapeUrlsFactory.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.ProcessingErrorEvent;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Paths;\n+import java.util.*;\n+\n+@Component\n+public class LandscapeUrlsFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LandscapeUrlsFactory.class);\n+\n+    private final ApplicationEventPublisher publisher;\n+\n+    private final FileFetcher fileFetcher;\n+\n+    public LandscapeUrlsFactory(ApplicationEventPublisher publisher, FileFetcher fileFetcher) {\n+        this.publisher = publisher;\n+        this.fileFetcher = fileFetcher;\n+    }\n+\n+    /**\n+     * Returns a list of URLs for a landscape description to watch for.\n+     *\n+     * @param seed the seed bean\n+     * @return a list of {@link URL}s per landscape.\n+     */\n+    public Map<Landscape, List<URL>> getLandscapeSourceLocations(Seed seed) {", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMTM2NQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441111365", "bodyText": "will be removed.", "author": "bonndan", "createdAt": "2020-06-16T20:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNjE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNjY5MA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440436690", "bodyText": "This is the same logic as in FileFetcher and LandscapeDescriptionFactory. See my comment above, we could clean this up a bit.", "author": "mfbieber", "createdAt": "2020-06-15T20:45:57Z", "path": "src/main/java/de/bonndan/nivio/input/LandscapeUrlsFactory.java", "diffHunk": "@@ -0,0 +1,114 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.ProcessingErrorEvent;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.io.File;\n+import java.net.MalformedURLException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.file.Paths;\n+import java.util.*;\n+\n+@Component\n+public class LandscapeUrlsFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LandscapeUrlsFactory.class);\n+\n+    private final ApplicationEventPublisher publisher;\n+\n+    private final FileFetcher fileFetcher;\n+\n+    public LandscapeUrlsFactory(ApplicationEventPublisher publisher, FileFetcher fileFetcher) {\n+        this.publisher = publisher;\n+        this.fileFetcher = fileFetcher;\n+    }\n+\n+    /**\n+     * Returns a list of URLs for a landscape description to watch for.\n+     *\n+     * @param seed the seed bean\n+     * @return a list of {@link URL}s per landscape.\n+     */\n+    public Map<Landscape, List<URL>> getLandscapeSourceLocations(Seed seed) {\n+\n+        List<URL> landscapeDescriptionLocations = getUrls(seed);\n+\n+        Map<Landscape, List<URL>> landscapeWatchLocations = new HashMap<>();\n+\n+        landscapeDescriptionLocations.forEach(url -> {\n+\n+            LandscapeDescription env = null;\n+\n+            try {", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExMTIzMQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441111231", "bodyText": "\ud83d\udc4d", "author": "bonndan", "createdAt": "2020-06-16T20:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQzNjY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0MDQwMA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440440400", "bodyText": "Cool, this is where you check the changes from the observerPool \ud83d\udc4d", "author": "mfbieber", "createdAt": "2020-06-15T20:53:16Z", "path": "src/main/java/de/bonndan/nivio/observation/ObserverRegistry.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.IndexEvent;\n+import de.bonndan.nivio.ProcessingFinishedEvent;\n+import de.bonndan.nivio.input.LandscapeDescriptionFactory;\n+import de.bonndan.nivio.input.LandscapeUrlsFactory;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Landscape;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Service;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.*;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Service to register landscapes to observe description source changes.\n+ */\n+@Service\n+public class ObserverRegistry implements ApplicationListener<ProcessingFinishedEvent> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ObserverRegistry.class);\n+\n+    private final Map<String, LandscapeObserverPool> observerMap = new ConcurrentHashMap<>();\n+    private final URLObserverFactory urlObserverFactory;\n+    private final LandscapeDescriptionFactory landscapeDescriptionFactory;\n+    private final LandscapeUrlsFactory landscapeUrlsFactory;\n+    private final ApplicationEventPublisher publisher;\n+\n+    public ObserverRegistry(URLObserverFactory urlObserverFactory,\n+                            LandscapeDescriptionFactory landscapeDescriptionFactory,\n+                            LandscapeUrlsFactory landscapeUrlsFactory,\n+                            ApplicationEventPublisher publisher\n+    ) {\n+        this.urlObserverFactory = urlObserverFactory;\n+        this.landscapeDescriptionFactory = landscapeDescriptionFactory;\n+        this.landscapeUrlsFactory = landscapeUrlsFactory;\n+        this.publisher = publisher;\n+    }\n+\n+    /**\n+     * Landscape are registered for observation here.\n+     * <p>\n+     * On processing success, {@link ProcessingFinishedEvent} is fired and read here to register the landscape.\n+     */\n+    @Override\n+    public void onApplicationEvent(ProcessingFinishedEvent event) {\n+        LandscapeDescription from = (LandscapeDescription) event.getSource();\n+        if (from == null) {\n+            LOGGER.warn(\"Landscape {} could not be registered for observation\", event.getLandscape().getIdentifier());\n+            return;\n+        }\n+\n+        URL sourceUrl = null;\n+        try {\n+            sourceUrl = new URL(from.getSource());\n+        } catch (MalformedURLException e) {\n+            LOGGER.info(\"Landscape {} does not seem to have a source\", from.getIdentifier());\n+        }\n+\n+        List<URL> landscapeSourceLocations = landscapeUrlsFactory.getLandscapeSourceLocations(from, sourceUrl);\n+        setLandscapeUrls(from, landscapeSourceLocations);\n+        LOGGER.info(\"Registered landscape {} for observation with {} urls.\", from, landscapeSourceLocations.size());\n+    }\n+\n+    /**\n+     * Polls for changes in landscapes.\n+     */\n+    @Scheduled(fixedDelay = 30000, initialDelay = 10000)\n+    public void poll() {\n+        LOGGER.info(\"Polling {} landscapes for changes.\", observerMap.size());\n+        observerMap.entrySet().parallelStream().forEach(e -> check(e.getValue()));", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0NDk2Mg==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r440444962", "bodyText": "Just for my understanding, since you have already done a join above in line 44, would a .get() also do the job?", "author": "mfbieber", "createdAt": "2020-06-15T21:01:55Z", "path": "src/main/java/de/bonndan/nivio/observation/LandscapeObserverPool.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.model.Landscape;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * A wrapper around observers to reduce the async results to a single boolean.\n+ *\n+ *\n+ */\n+public class LandscapeObserverPool {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LandscapeObserverPool.class);\n+    public static final String DELIM = \";\";\n+\n+    private final Landscape landscape;\n+    private final List<URLObserver> observers;\n+\n+    public LandscapeObserverPool(Landscape landscape, List<URLObserver> observers) {\n+        this.landscape = landscape;\n+        this.observers = observers;\n+    }\n+\n+    /**\n+     * @return the change\n+     */\n+    public Optional<String> hasChange() {\n+        LOGGER.info(\"Detecting changes in {} observers for landscape {}.\", observers.size(), landscape.getIdentifier());\n+\n+        CompletableFuture<String>[] futures = observers.stream().map(URLObserver::hasChange).toArray(CompletableFuture[]::new);\n+        CompletableFuture<Void> allDoneFuture = CompletableFuture.allOf(futures);\n+\n+        CompletableFuture<List<String>> listCompletableFuture = allDoneFuture.thenApply(\n+                v -> Stream.of(futures)\n+                        .map(CompletableFuture::join)\n+                        .filter(Objects::nonNull)\n+                        .collect(Collectors.toList())\n+        );\n+\n+        List<String> changes = listCompletableFuture.join();", "originalCommit": "050a21302abb895084b408d7ffbaa81faebfb356", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExOTExNQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r441119115", "bodyText": "The human brain is only capable to understand how CompletableFutures work right in the moment when reading the manual. I don't know who wrote this code.\nget() throws InterruptedException, join does not. Join would usually block, but there all fotures are already complete. I copied that from https://dzone.com/articles/java-8-completablefuture", "author": "bonndan", "createdAt": "2020-06-16T20:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0NDk2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY5NTE4MQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r444695181", "bodyText": "OK ;)", "author": "mfbieber", "createdAt": "2020-06-24T07:23:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ0NDk2Mg=="}], "type": "inlineReview"}, {"oid": "4c8f661e5ee817e681b136b77e65fddb57f0000e", "url": "https://github.com/dedica-team/nivio/commit/4c8f661e5ee817e681b136b77e65fddb57f0000e", "message": "[#147] refactorings/cleanup", "committedDate": "2020-06-16T20:15:49Z", "type": "commit"}, {"oid": "88a8e7e7176eb2d9603c8ce5bdf29bb8006d1820", "url": "https://github.com/dedica-team/nivio/commit/88a8e7e7176eb2d9603c8ce5bdf29bb8006d1820", "message": "attempt to fix readEnvVars test without trying to modify system environment variables", "committedDate": "2020-06-24T08:39:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczODg2NQ==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r444738865", "bodyText": "In my Windows 10 system, this is not able to modify the environment variables of the OS (although I see PRIVATE_TOKEN in a watcher while debugging in System.getenv()).\nWhat this test attempts to do is to verify that an env from the e.g. example_environment_vars.yml is read by the LandscapeDescriptionFactory, correct?\nSo reading e.g. just JAVA_HOME (which should be set on all OS we are using), will do the trick too? @bonndan : what do you think?", "author": "mfbieber", "createdAt": "2020-06-24T08:43:13Z", "path": "src/test/java/de/bonndan/nivio/input/LandscapeDescriptionFactoryTest.java", "diffHunk": "@@ -144,15 +146,13 @@ public void readEnvVars() throws IOException, NoSuchFieldException, IllegalAcces\n             if (\"java.util.Collections$UnmodifiableMap\".equals(c.getName())) {\n                 Field m = c.getDeclaredField(\"m\");\n                 m.setAccessible(true);\n-                var x = (Map<String, String>) m.get(System.getenv());\n-                x.put(\"PRIVATE_TOKEN\", \"veryPrivateToken\");", "originalCommit": "88a8e7e7176eb2d9603c8ce5bdf29bb8006d1820", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwODIwNw==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r445108207", "bodyText": "Yes, this is the purpose of the test and yes, reading JAVA_HOME would demonstrate that this env var can be read. Do you have time to change the test?", "author": "bonndan", "createdAt": "2020-06-24T19:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczODg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwOTUyOA==", "url": "https://github.com/dedica-team/nivio/pull/154#discussion_r445109528", "bodyText": "btw: the docker-compose stuff is outdated and left there for demo purposes. Since you tried to run it, something must be unclear in the documentation. Could you open an issue explaining the problem?", "author": "bonndan", "createdAt": "2020-06-24T19:05:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDczODg2NQ=="}], "type": "inlineReview"}, {"oid": "9228182d6a3b4a9b8ef7b663bd5c634196c2dd13", "url": "https://github.com/dedica-team/nivio/commit/9228182d6a3b4a9b8ef7b663bd5c634196c2dd13", "message": "removed unneded imports", "committedDate": "2020-06-24T08:45:12Z", "type": "commit"}, {"oid": "a39db566550460c2f6dd18e092139dfdd6cf2c19", "url": "https://github.com/dedica-team/nivio/commit/a39db566550460c2f6dd18e092139dfdd6cf2c19", "message": "Merge branch 'develop' into 147_remove_directory_watcher", "committedDate": "2020-06-28T16:00:17Z", "type": "commit"}]}