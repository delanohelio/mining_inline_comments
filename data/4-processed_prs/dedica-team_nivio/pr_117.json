{"pr_number": 117, "pr_title": "WiP: Refactoring/frontend typescript", "pr_createdAt": "2020-03-31T08:46:58Z", "pr_url": "https://github.com/dedica-team/nivio/pull/117", "timeline": [{"oid": "e240c8480bc349d93bb0b0ada5fba0502efe2741", "url": "https://github.com/dedica-team/nivio/commit/e240c8480bc349d93bb0b0ada5fba0502efe2741", "message": "forgot to commit the whole time damn...\nTODO's left: working manual, working landscape with svg panel, implement good styling (right now almost everything is styled in one css, some styling is inline), tests, remove all jquery code", "committedDate": "2020-03-20T21:26:08Z", "type": "commit"}, {"oid": "0f57b2f6bc005067c030e371e2942d2835e5367d", "url": "https://github.com/dedica-team/nivio/commit/0f57b2f6bc005067c030e371e2942d2835e5367d", "message": "remove modal context, its not needed, tried to implement it in app like command but that isn't useful and because re-renders wont work like they should and not every component needs a modal", "committedDate": "2020-03-20T22:21:15Z", "type": "commit"}, {"oid": "8dad1e388de11823a2a973470ac28167a2381590", "url": "https://github.com/dedica-team/nivio/commit/8dad1e388de11823a2a973470ac28167a2381590", "message": "fix shouldCloseOnEsc / shouldCloseOnOverlay in generic modal", "committedDate": "2020-03-31T05:42:46Z", "type": "commit"}, {"oid": "0d93bf96b482371e4e20e96705fdacfbd8bc2ece", "url": "https://github.com/dedica-team/nivio/commit/0d93bf96b482371e4e20e96705fdacfbd8bc2ece", "message": "implement fully functional manual, modal is now scrollable (still need to rework all css but it will do for now)", "committedDate": "2020-03-31T08:46:05Z", "type": "commit"}, {"oid": "73fcbbb7ec24049b3209f8042d67506f21756c36", "url": "https://github.com/dedica-team/nivio/commit/73fcbbb7ec24049b3209f8042d67506f21756c36", "message": "fix manual styling, <pre> tag in manual doesn't work right now", "committedDate": "2020-03-31T09:50:15Z", "type": "commit"}, {"oid": "8d748a3113ef41f868e1cf416f770500e40c8408", "url": "https://github.com/dedica-team/nivio/commit/8d748a3113ef41f868e1cf416f770500e40c8408", "message": "implement landscape, rename ItemModalContent to LandscapeItem", "committedDate": "2020-03-31T11:48:12Z", "type": "commit"}, {"oid": "5910b470bede6729e2c9b32e11ed5ec81c2bdb69", "url": "https://github.com/dedica-team/nivio/commit/5910b470bede6729e2c9b32e11ed5ec81c2bdb69", "message": "fix import", "committedDate": "2020-03-31T11:52:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg3MzYxOQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r400873619", "bodyText": "i'll try localStorage and reducer in landscape context", "author": "MarvinSchoening", "createdAt": "2020-03-31T12:30:06Z", "path": "src/main/app/src/Components/HomeComponent/Home.tsx", "diffHunk": "@@ -0,0 +1,95 @@\n+import React, { useState, useEffect, useContext, ReactElement } from 'react';\n+import {Link} from \"react-router-dom\";\n+\n+import {ILandscape} from \"../../interfaces\";\n+import GenericModal from \"../ModalComponent/GenericModal\";\n+import LandscapeLog from \"../LandscapeComponent/Log/LandscapeLog\";\n+import Command from '../CommandComponent/Command';\n+\n+import CommandContext from '../../Context/Command.context';\n+import LandscapeContext from '../../Context/Landscape.context';\n+\n+const Home: React.FC = () => {\n+    const [modalContent, setModalContent] = useState<string | ReactElement | ReactElement[] | null>(null);\n+    const [landscapes, setLandscapes] = useState<ILandscape[]>();\n+ \n+    // Needed for re-render, looking for another solution\n+    const commandContext = useContext(CommandContext);\n+    const landscapeContext = useContext(LandscapeContext);\n+\n+    /*\n+    TODO: Find a way to load all landscapes into context without having to access our home path", "originalCommit": "5910b470bede6729e2c9b32e11ed5ec81c2bdb69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "511b24404dfdc58fa319cd5823e27d9d03f6280c", "url": "https://github.com/dedica-team/nivio/commit/511b24404dfdc58fa319cd5823e27d9d03f6280c", "message": "format EVERYTHIIIIING", "committedDate": "2020-03-31T12:46:50Z", "type": "commit"}, {"oid": "1c6405683da2d3c818b782773415856243ded823", "url": "https://github.com/dedica-team/nivio/commit/1c6405683da2d3c818b782773415856243ded823", "message": "complete styling rework, removed all css files and build scss files, component based styling, all colors and fonts in variables for easy style rework/maybe light/dark theme later", "committedDate": "2020-04-02T13:01:52Z", "type": "commit"}, {"oid": "5e8be10187f2887e245cee126f97b4ef4e72df1e", "url": "https://github.com/dedica-team/nivio/commit/5e8be10187f2887e245cee126f97b4ef4e72df1e", "message": "add more color/font variables", "committedDate": "2020-04-02T13:07:54Z", "type": "commit"}, {"oid": "b0c2f7a5055cfa5bb7cdd19dc9fcf2ef4fe0d5ee", "url": "https://github.com/dedica-team/nivio/commit/b0c2f7a5055cfa5bb7cdd19dc9fcf2ef4fe0d5ee", "message": "landscape.jsx to .tsx, minor changes for landscapeItem", "committedDate": "2020-04-02T13:50:34Z", "type": "commit"}, {"oid": "e7e13e90caf679ca340b11a930a71acc633bbd33", "url": "https://github.com/dedica-team/nivio/commit/e7e13e90caf679ca340b11a930a71acc633bbd33", "message": "add a bit margin to command message", "committedDate": "2020-04-02T13:53:18Z", "type": "commit"}, {"oid": "9ce32b43ef8775369050ffce13028f2b47fbb146", "url": "https://github.com/dedica-team/nivio/commit/9ce32b43ef8775369050ffce13028f2b47fbb146", "message": "add icons", "committedDate": "2020-04-02T14:05:37Z", "type": "commit"}, {"oid": "1442acea873a577702e8d539a26ea1f8ca48de66", "url": "https://github.com/dedica-team/nivio/commit/1442acea873a577702e8d539a26ea1f8ca48de66", "message": "remove old react logo, remove images from manifest.json that arent available, margin in home content to fit content for our command console", "committedDate": "2020-04-02T14:13:46Z", "type": "commit"}, {"oid": "157c8c55bf26cbe4fe7e9572e149bf0b84f962e0", "url": "https://github.com/dedica-team/nivio/commit/157c8c55bf26cbe4fe7e9572e149bf0b84f962e0", "message": "change how command messages are handled, change landscape svg styling a bit, landscapes can now be reloaded, sim command implemented", "committedDate": "2020-04-02T16:03:59Z", "type": "commit"}, {"oid": "3df2214ef47b5212d4243365cce731ca0e3122c2", "url": "https://github.com/dedica-team/nivio/commit/3df2214ef47b5212d4243365cce731ca0e3122c2", "message": "remove unused console statement", "committedDate": "2020-04-02T16:28:45Z", "type": "commit"}, {"oid": "1103f3061c995ad8654d6772c48b3f7df11b9ea7", "url": "https://github.com/dedica-team/nivio/commit/1103f3061c995ad8654d6772c48b3f7df11b9ea7", "message": "make colors and font .scss to partial files so they wont get compiled to css", "committedDate": "2020-04-02T17:00:57Z", "type": "commit"}, {"oid": "ca20aedc57b2af4ddde6bf1d8c27c8ca27f94fca", "url": "https://github.com/dedica-team/nivio/commit/ca20aedc57b2af4ddde6bf1d8c27c8ca27f94fca", "message": "version bump", "committedDate": "2020-04-02T20:26:48Z", "type": "commit"}, {"oid": "8f6c96277e930695ac91b135240ee6d312b614bf", "url": "https://github.com/dedica-team/nivio/commit/8f6c96277e930695ac91b135240ee6d312b614bf", "message": "remove useEffect warning", "committedDate": "2020-04-02T21:19:40Z", "type": "commit"}, {"oid": "b70d28bf98d424346fef6b18f03b38cbcf649325", "url": "https://github.com/dedica-team/nivio/commit/b70d28bf98d424346fef6b18f03b38cbcf649325", "message": "cache to speed on png rendering", "committedDate": "2020-04-05T07:33:24Z", "type": "commit"}, {"oid": "4f26ae67f4307e55a321bc176bcb8cce687c2c26", "url": "https://github.com/dedica-team/nivio/commit/4f26ae67f4307e55a321bc176bcb8cce687c2c26", "message": "showing landscape preview on home screen", "committedDate": "2020-04-05T08:57:15Z", "type": "commit"}, {"oid": "ae8aa0d03315ead81ca679ddd2405b2a4ae9f8c2", "url": "https://github.com/dedica-team/nivio/commit/ae8aa0d03315ead81ca679ddd2405b2a4ae9f8c2", "message": "Merge remote-tracking branch 'origin/refactoring/frontend-typescript' into refactoring/frontend-typescript", "committedDate": "2020-04-05T08:57:30Z", "type": "commit"}, {"oid": "0a1e34ae10e3f4df5cf9c2227f53d404d1385864", "url": "https://github.com/dedica-team/nivio/commit/0a1e34ae10e3f4df5cf9c2227f53d404d1385864", "message": "material ui home dashboard poc", "committedDate": "2020-04-07T11:46:11Z", "type": "commit"}, {"oid": "1f7ea8edc71983be075201183fa32ce66f1c489f", "url": "https://github.com/dedica-team/nivio/commit/1f7ea8edc71983be075201183fa32ce66f1c489f", "message": "Merge pull request #120 from dedica-team/refactoring_material-ui\n\nmaterial ui home dashboard poc", "committedDate": "2020-04-08T15:52:54Z", "type": "commit"}, {"oid": "cc949759aeaa6dd4387d73a1aa17b180b00619d6", "url": "https://github.com/dedica-team/nivio/commit/cc949759aeaa6dd4387d73a1aa17b180b00619d6", "message": "[#119] lcars inspired gui", "committedDate": "2020-04-14T10:24:44Z", "type": "commit"}, {"oid": "a0fbf40a62d0f1d57546d88a5206158dd34d6c64", "url": "https://github.com/dedica-team/nivio/commit/a0fbf40a62d0f1d57546d88a5206158dd34d6c64", "message": "fix for item rendering ajax call (items without groups)", "committedDate": "2020-04-14T12:36:13Z", "type": "commit"}, {"oid": "4c308786512b419b7c9439b73ff68b237d57ecd6", "url": "https://github.com/dedica-team/nivio/commit/4c308786512b419b7c9439b73ff68b237d57ecd6", "message": "added comment", "committedDate": "2020-04-14T17:24:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyOTY2OQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408329669", "bodyText": "This comment is not correct anymore ;)", "author": "mfbieber", "createdAt": "2020-04-14T17:58:35Z", "path": "src/main/app/README.md", "diffHunk": "@@ -14,17 +14,17 @@ Run\n Run\n \n     cd src/main/app\n-    yarn run start\n+    npm run start\n     \n then go to the app and provide the correct host", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzA1NQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408343055", "bodyText": "yeah right didnt see that :D i'll do a full readme rework tomorrow", "author": "MarvinSchoening", "createdAt": "2020-04-14T18:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyOTY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNjY3MA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408316670", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-04-14T17:38:05Z", "path": "src/main/app/public/manifest.json", "diffHunk": "@@ -1,21 +1,17 @@\n {\n-  \"short_name\": \"React App\",\n-  \"name\": \"Create React App Sample\",\n+  \"short_name\": \"Nivio\",\n+  \"name\": \"Nivio - Monitoring for engineers\",", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2OTExNw==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408369117", "bodyText": "yeah i'll add some sort descriptions on components", "author": "MarvinSchoening", "createdAt": "2020-04-14T19:05:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNjY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzEzNw==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408317137", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-04-14T17:38:49Z", "path": "src/main/app/src/.prettierrc", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"trailingComma\": \"es5\",\n+  \"tabWidth\": 2,\n+  \"semi\": true,\n+  \"useTabs\": false,\n+  \"quoteProps\": \"consistent\",\n+  \"singleQuote\": true,\n+  \"jsxSingleQuote\": true,\n+  \"bracketSpacing\": true,\n+  \"printWidth\": 100\n+}", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyMTQ0MA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408321440", "bodyText": "I think it's easier to understand if we do not use the abbreviation sim as function name.\nWhen scanning the lines quickly (and without deep knowledge about the domain), naming this simulate would make it a bit easier to reason about the code.", "author": "Matthimatiker", "createdAt": "2020-04-14T17:45:42Z", "path": "src/main/app/src/Components/CommandComponent/Command.tsx", "diffHunk": "@@ -0,0 +1,81 @@\n+import React, { useContext, useState, useEffect } from 'react';\n+import { useHistory } from 'react-router-dom';\n+import Terminal from 'react-console-emulator';\n+import CommandContext from '../../Context/Command.context';\n+\n+import './Command.scss';\n+\n+const Command: React.FC = () => {\n+  const history = useHistory();\n+  const commandContext = useContext(CommandContext);\n+\n+  const [output, setOutput] = useState(commandContext.message);\n+\n+  useEffect(() => {\n+    setOutput(commandContext.message);\n+  }, [commandContext.message]);\n+\n+  const commands = () => {\n+    return {\n+      cd: {\n+        description: 'Back to the start.',\n+        usage: 'cd',\n+        fn: () => {\n+          commandContext.message = '';\n+          setOutput('');\n+          history.push('/');\n+        },\n+      },\n+      man: {\n+        description: 'Show the manual.',\n+        usage: 'man install|input|model|magic|extra|api',\n+        fn: (arg: string) => {\n+          if (!arg) {\n+            arg = 'install';\n+          }\n+          commandContext.message = 'RTFM: ' + arg;\n+          history.push('/man/' + arg);\n+        },\n+      },\n+      sim: {\n+        description: 'Simulate realtime updates.',\n+        usage: 'sim',\n+        fn: () => sim(),\n+      },\n+    };\n+  };\n+\n+  const sim = () => {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMyMjE5OA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408322198", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-04-14T17:46:58Z", "path": "src/main/app/src/Components/LandscapeComponent/Item/LandscapeItem.tsx", "diffHunk": "@@ -0,0 +1,35 @@\n+import React, { useEffect, useState } from 'react';\n+import ReactHtmlParser from 'html-react-parser';\n+\n+interface Props {\n+  host: string;\n+  element: Element;\n+}", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMDgzMA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408330830", "bodyText": "Wouldn't Value| null be sufficient here?\nconst [value, setValue] = useState<Value | null>(null);", "author": "Matthimatiker", "createdAt": "2020-04-14T18:00:27Z", "path": "src/main/app/src/Components/LandscapeComponent/Landscape/Landscape.tsx", "diffHunk": "@@ -0,0 +1,110 @@\n+import React, { useState, useEffect, useContext, ReactElement } from 'react';\n+\n+import { ReactSvgPanZoomLoader, SvgLoaderSelectElement } from 'react-svg-pan-zoom-loader';\n+import { ReactSVGPanZoom, TOOL_AUTO, Tool, Value } from 'react-svg-pan-zoom';\n+import { useParams } from 'react-router-dom';\n+\n+import LandscapeItem from '../Item/LandscapeItem';\n+import Command from '../../CommandComponent/Command';\n+import GenericModal from '../../ModalComponent/GenericModal';\n+import LandscapeContext from '../../../Context/Landscape.context';\n+import CommandContext from '../../../Context/Command.context';\n+\n+import './Landscape.scss';\n+import { ILandscape } from '../../../interfaces';\n+\n+const Landscape: React.FC = () => {\n+  const [tool, setTool] = useState<Tool>(TOOL_AUTO);\n+\n+  // It wants a value or null but if we defined it as null it throws an error that shouldn't use null\n+  // In their own documentation, they initialize it with {}, but that will invoke a typescript error\n+  // @ts-ignore\n+  const [value, setValue] = useState<Value>({});", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMjUzMQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408332531", "bodyText": "Looks like find() could be used here. But that's not a big deal here.\nI would at least rename i: Sound like a name for an index, but it contains the value of the array. landscape would be much better here.", "author": "Matthimatiker", "createdAt": "2020-04-14T18:03:14Z", "path": "src/main/app/src/Components/LandscapeComponent/Landscape/Landscape.tsx", "diffHunk": "@@ -0,0 +1,110 @@\n+import React, { useState, useEffect, useContext, ReactElement } from 'react';\n+\n+import { ReactSvgPanZoomLoader, SvgLoaderSelectElement } from 'react-svg-pan-zoom-loader';\n+import { ReactSVGPanZoom, TOOL_AUTO, Tool, Value } from 'react-svg-pan-zoom';\n+import { useParams } from 'react-router-dom';\n+\n+import LandscapeItem from '../Item/LandscapeItem';\n+import Command from '../../CommandComponent/Command';\n+import GenericModal from '../../ModalComponent/GenericModal';\n+import LandscapeContext from '../../../Context/Landscape.context';\n+import CommandContext from '../../../Context/Command.context';\n+\n+import './Landscape.scss';\n+import { ILandscape } from '../../../interfaces';\n+\n+const Landscape: React.FC = () => {\n+  const [tool, setTool] = useState<Tool>(TOOL_AUTO);\n+\n+  // It wants a value or null but if we defined it as null it throws an error that shouldn't use null\n+  // In their own documentation, they initialize it with {}, but that will invoke a typescript error\n+  // @ts-ignore\n+  const [value, setValue] = useState<Value>({});\n+  const [modalContent, setModalContent] = useState<string | ReactElement | null>(null);\n+  const [landscape, setLandscape] = useState<ILandscape | null>(null);\n+  const [reloadLandscape, setReloadLandscape] = useState<boolean>(false);\n+\n+  const landscapeContext = useContext(LandscapeContext);\n+  const commandContext = useContext(CommandContext);\n+  const { identifier } = useParams();\n+\n+  useEffect(() => {\n+    const index = landscapeContext.landscapes.findIndex(i => i.identifier === identifier);\n+    setLandscape(landscapeContext.landscapes[index]);", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNDYyMA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408334620", "bodyText": "Out of interest: I saw that this is used in a Button. Does the button handle the returned Promise on click?", "author": "Matthimatiker", "createdAt": "2020-04-14T18:06:44Z", "path": "src/main/app/src/Components/LandscapeComponent/Landscape/Landscape.tsx", "diffHunk": "@@ -0,0 +1,110 @@\n+import React, { useState, useEffect, useContext, ReactElement } from 'react';\n+\n+import { ReactSvgPanZoomLoader, SvgLoaderSelectElement } from 'react-svg-pan-zoom-loader';\n+import { ReactSVGPanZoom, TOOL_AUTO, Tool, Value } from 'react-svg-pan-zoom';\n+import { useParams } from 'react-router-dom';\n+\n+import LandscapeItem from '../Item/LandscapeItem';\n+import Command from '../../CommandComponent/Command';\n+import GenericModal from '../../ModalComponent/GenericModal';\n+import LandscapeContext from '../../../Context/Landscape.context';\n+import CommandContext from '../../../Context/Command.context';\n+\n+import './Landscape.scss';\n+import { ILandscape } from '../../../interfaces';\n+\n+const Landscape: React.FC = () => {\n+  const [tool, setTool] = useState<Tool>(TOOL_AUTO);\n+\n+  // It wants a value or null but if we defined it as null it throws an error that shouldn't use null\n+  // In their own documentation, they initialize it with {}, but that will invoke a typescript error\n+  // @ts-ignore\n+  const [value, setValue] = useState<Value>({});\n+  const [modalContent, setModalContent] = useState<string | ReactElement | null>(null);\n+  const [landscape, setLandscape] = useState<ILandscape | null>(null);\n+  const [reloadLandscape, setReloadLandscape] = useState<boolean>(false);\n+\n+  const landscapeContext = useContext(LandscapeContext);\n+  const commandContext = useContext(CommandContext);\n+  const { identifier } = useParams();\n+\n+  useEffect(() => {\n+    const index = landscapeContext.landscapes.findIndex(i => i.identifier === identifier);\n+    setLandscape(landscapeContext.landscapes[index]);\n+  }, [identifier, landscapeContext.landscapes, reloadLandscape]);\n+\n+  const reloadLandscapes = async () => {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTM0Ng==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408339346", "bodyText": "I guess this can be removed.", "author": "Matthimatiker", "createdAt": "2020-04-14T18:14:50Z", "path": "src/main/app/src/hexmap/PathFinder.js", "diffHunk": "@@ -1,87 +1,81 @@\n-import {HexUtils} from 'react-hexgrid';\n-import TilePath from \"./TilePath\";\n+import { HexUtils } from 'react-hexgrid';\n+import TilePath from './TilePath';\n \n class PathFinder {\n-\n-    constructor(occupied) {\n-        this.occupied = occupied;\n-    }\n-\n-    findPaths(paths, target) {\n-\n-        paths.forEach(path => {\n-            let source = path.tiles[path.tiles.length - 1];\n-            let distance = HexUtils.distance(source, target);\n-\n-            if (distance === 0) {\n-                path.close();\n-            }\n-\n-            let possibleSteps = HexUtils.neighbours(source)\n-                .filter(neigh => this.isSame(neigh, target) || !this.isOccupied(neigh))\n-                .filter(neigh => {\n-                    //return neighbours which are closer to the target\n-                    let ndist = HexUtils.distance(neigh, target);\n-                    return ndist < distance;\n-                });\n-            /*console.log(possibleSteps.length + \" poss. steps (\" +\n+  constructor(occupied) {\n+    this.occupied = occupied;\n+  }\n+\n+  findPaths(paths, target) {\n+    paths.forEach(path => {\n+      let source = path.tiles[path.tiles.length - 1];\n+      let distance = HexUtils.distance(source, target);\n+\n+      if (distance === 0) {\n+        path.close();\n+      }\n+\n+      let possibleSteps = HexUtils.neighbours(source)\n+        .filter(neigh => this.isSame(neigh, target) || !this.isOccupied(neigh))\n+        .filter(neigh => {\n+          //return neighbours which are closer to the target\n+          let ndist = HexUtils.distance(neigh, target);\n+          return ndist < distance;\n+        });\n+      /*console.log(possibleSteps.length + \" poss. steps (\" +\n                 possibleSteps.map(hex => hex.q + \",\" + hex.r).join(\"; \")\n                 + \") in distance \" + distance + \" from \" + source.q + \",\" + source.r\n                 + \" to \" + target.q + \",\" + target.r);\n              */\n ", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDIzNA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408340234", "bodyText": "Can also be removed.", "author": "Matthimatiker", "createdAt": "2020-04-14T18:16:28Z", "path": "src/main/app/src/hexmap/PathFinder.js", "diffHunk": "@@ -1,87 +1,81 @@\n-import {HexUtils} from 'react-hexgrid';\n-import TilePath from \"./TilePath\";\n+import { HexUtils } from 'react-hexgrid';\n+import TilePath from './TilePath';\n \n class PathFinder {\n-\n-    constructor(occupied) {\n-        this.occupied = occupied;\n-    }\n-\n-    findPaths(paths, target) {\n-\n-        paths.forEach(path => {\n-            let source = path.tiles[path.tiles.length - 1];\n-            let distance = HexUtils.distance(source, target);\n-\n-            if (distance === 0) {\n-                path.close();\n-            }\n-\n-            let possibleSteps = HexUtils.neighbours(source)\n-                .filter(neigh => this.isSame(neigh, target) || !this.isOccupied(neigh))\n-                .filter(neigh => {\n-                    //return neighbours which are closer to the target\n-                    let ndist = HexUtils.distance(neigh, target);\n-                    return ndist < distance;\n-                });\n-            /*console.log(possibleSteps.length + \" poss. steps (\" +\n+  constructor(occupied) {\n+    this.occupied = occupied;\n+  }\n+\n+  findPaths(paths, target) {\n+    paths.forEach(path => {\n+      let source = path.tiles[path.tiles.length - 1];\n+      let distance = HexUtils.distance(source, target);\n+\n+      if (distance === 0) {\n+        path.close();\n+      }\n+\n+      let possibleSteps = HexUtils.neighbours(source)\n+        .filter(neigh => this.isSame(neigh, target) || !this.isOccupied(neigh))\n+        .filter(neigh => {\n+          //return neighbours which are closer to the target\n+          let ndist = HexUtils.distance(neigh, target);\n+          return ndist < distance;\n+        });\n+      /*console.log(possibleSteps.length + \" poss. steps (\" +\n                 possibleSteps.map(hex => hex.q + \",\" + hex.r).join(\"; \")\n                 + \") in distance \" + distance + \" from \" + source.q + \",\" + source.r\n                 + \" to \" + target.q + \",\" + target.r);\n              */\n \n-            if (possibleSteps.length === 0) { //TODO wrong, wont go back\n-                path.close()\n-            } else {\n-\n-                //prolong path and create clones if there are more possibilties\n-                let template = new TilePath();\n-                template.tiles = path.tiles;\n-                path.tiles.push(possibleSteps.shift());\n-\n-                for (let i = 0; i < possibleSteps.length; i++) {\n-                    let clone = new TilePath();\n-                    path.tiles.forEach(tile => clone.tiles.push(tile));\n-                    clone.tiles.pop();\n-                    //console.log(\"cloned path to add \" + possibleSteps[i].q + \",\" + possibleSteps[i].r);\n-                    //console.log(\"new clone:\");\n-                    //console.log(clone);\n-                    clone.tiles.push(possibleSteps[i]);\n-                    paths.push(clone);\n-                }\n-            }\n-\n-        });\n-\n-        //continue search if unclosed paths remain\n-        if (paths.find(path => !path.closed) !== undefined) {\n-            this.findPaths(paths, target)\n-        } else {\n-            this.sortAndFilterPaths(paths);\n+      if (possibleSteps.length === 0) {\n+        //TODO wrong, wont go back\n+        path.close();\n+      } else {\n+        //prolong path and create clones if there are more possibilties\n+        let template = new TilePath();\n+        template.tiles = path.tiles;\n+        path.tiles.push(possibleSteps.shift());\n+\n+        for (let i = 0; i < possibleSteps.length; i++) {\n+          let clone = new TilePath();\n+          path.tiles.forEach(tile => clone.tiles.push(tile));\n+          clone.tiles.pop();\n+          //console.log(\"cloned path to add \" + possibleSteps[i].q + \",\" + possibleSteps[i].r);\n+          //console.log(\"new clone:\");\n+          //console.log(clone);", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDcxNw==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408340717", "bodyText": "What's t1``and t2`? The parameters would benefit from a better name and/or a type.", "author": "Matthimatiker", "createdAt": "2020-04-14T18:17:18Z", "path": "src/main/app/src/hexmap/PathFinder.js", "diffHunk": "@@ -1,87 +1,81 @@\n-import {HexUtils} from 'react-hexgrid';\n-import TilePath from \"./TilePath\";\n+import { HexUtils } from 'react-hexgrid';\n+import TilePath from './TilePath';\n \n class PathFinder {\n-\n-    constructor(occupied) {\n-        this.occupied = occupied;\n-    }\n-\n-    findPaths(paths, target) {\n-\n-        paths.forEach(path => {\n-            let source = path.tiles[path.tiles.length - 1];\n-            let distance = HexUtils.distance(source, target);\n-\n-            if (distance === 0) {\n-                path.close();\n-            }\n-\n-            let possibleSteps = HexUtils.neighbours(source)\n-                .filter(neigh => this.isSame(neigh, target) || !this.isOccupied(neigh))\n-                .filter(neigh => {\n-                    //return neighbours which are closer to the target\n-                    let ndist = HexUtils.distance(neigh, target);\n-                    return ndist < distance;\n-                });\n-            /*console.log(possibleSteps.length + \" poss. steps (\" +\n+  constructor(occupied) {\n+    this.occupied = occupied;\n+  }\n+\n+  findPaths(paths, target) {\n+    paths.forEach(path => {\n+      let source = path.tiles[path.tiles.length - 1];\n+      let distance = HexUtils.distance(source, target);\n+\n+      if (distance === 0) {\n+        path.close();\n+      }\n+\n+      let possibleSteps = HexUtils.neighbours(source)\n+        .filter(neigh => this.isSame(neigh, target) || !this.isOccupied(neigh))\n+        .filter(neigh => {\n+          //return neighbours which are closer to the target\n+          let ndist = HexUtils.distance(neigh, target);\n+          return ndist < distance;\n+        });\n+      /*console.log(possibleSteps.length + \" poss. steps (\" +\n                 possibleSteps.map(hex => hex.q + \",\" + hex.r).join(\"; \")\n                 + \") in distance \" + distance + \" from \" + source.q + \",\" + source.r\n                 + \" to \" + target.q + \",\" + target.r);\n              */\n \n-            if (possibleSteps.length === 0) { //TODO wrong, wont go back\n-                path.close()\n-            } else {\n-\n-                //prolong path and create clones if there are more possibilties\n-                let template = new TilePath();\n-                template.tiles = path.tiles;\n-                path.tiles.push(possibleSteps.shift());\n-\n-                for (let i = 0; i < possibleSteps.length; i++) {\n-                    let clone = new TilePath();\n-                    path.tiles.forEach(tile => clone.tiles.push(tile));\n-                    clone.tiles.pop();\n-                    //console.log(\"cloned path to add \" + possibleSteps[i].q + \",\" + possibleSteps[i].r);\n-                    //console.log(\"new clone:\");\n-                    //console.log(clone);\n-                    clone.tiles.push(possibleSteps[i]);\n-                    paths.push(clone);\n-                }\n-            }\n-\n-        });\n-\n-        //continue search if unclosed paths remain\n-        if (paths.find(path => !path.closed) !== undefined) {\n-            this.findPaths(paths, target)\n-        } else {\n-            this.sortAndFilterPaths(paths);\n+      if (possibleSteps.length === 0) {\n+        //TODO wrong, wont go back\n+        path.close();\n+      } else {\n+        //prolong path and create clones if there are more possibilties\n+        let template = new TilePath();\n+        template.tiles = path.tiles;\n+        path.tiles.push(possibleSteps.shift());\n+\n+        for (let i = 0; i < possibleSteps.length; i++) {\n+          let clone = new TilePath();\n+          path.tiles.forEach(tile => clone.tiles.push(tile));\n+          clone.tiles.pop();\n+          //console.log(\"cloned path to add \" + possibleSteps[i].q + \",\" + possibleSteps[i].r);\n+          //console.log(\"new clone:\");\n+          //console.log(clone);\n+          clone.tiles.push(possibleSteps[i]);\n+          paths.push(clone);\n         }\n-\n-        //TODO pick one path, mark tiles as occupied to avoid path crossings\n-\n+      }\n+    });\n+\n+    //continue search if unclosed paths remain\n+    if (paths.find(path => !path.closed) !== undefined) {\n+      this.findPaths(paths, target);\n+    } else {\n+      this.sortAndFilterPaths(paths);\n     }\n \n-    isOccupied(tile) {\n-        return this.occupied.find(o => this.isSame(o, tile)) !== undefined;\n-    }\n+    //TODO pick one path, mark tiles as occupied to avoid path crossings\n+  }\n \n-    isSame(t1, t2) {\n-        return t1.r === t2.r && t1.q === t2.q;\n-    }\n+  isOccupied(tile) {\n+    return this.occupied.find(o => this.isSame(o, tile)) !== undefined;\n+  }\n \n+  isSame(t1, t2) {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNTAxMA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408825010", "bodyText": "@bonndan", "author": "MarvinSchoening", "createdAt": "2020-04-15T13:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MDcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MTA2Mw==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408341063", "bodyText": "Looks like a leftover.", "author": "Matthimatiker", "createdAt": "2020-04-14T18:17:50Z", "path": "src/main/app/src/hexmap/TilePath.js", "diffHunk": "@@ -43,52 +36,50 @@ class TilePath {\n         }\n         this.tiles = reduced;\n          */\n+  }\n+\n+  getPoints(layout) {\n+    let points = 'M';\n+    for (var i = 0; i < this.tiles.length; i++) {\n+      let hex = this.tiles[i];\n+      if (this._isBend(hex)) {\n+        //cubic curve\n+        let prev = HexUtils.hexToPixel(this.tiles[i - 1], layout);\n+        let point = HexUtils.hexToPixel(this.tiles[i], layout);\n+        let next = HexUtils.hexToPixel(this.tiles[i + 1], layout);\n+\n+        let newBefore = {};\n+        newBefore.x = prev.x + (point.x - prev.x) / 2;\n+        newBefore.y = prev.y + (point.y - prev.y) / 2;\n+        points += ` ${newBefore.x},${newBefore.y} `;\n+        //points = points.substr(0, points.length-1);", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2OTM0MQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408369341", "bodyText": "Yes, the code is unused at the moment.", "author": "bonndan", "createdAt": "2020-04-14T19:05:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MTA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzIzMA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408343230", "bodyText": "Are there landscapes without name or identifier?", "author": "Matthimatiker", "createdAt": "2020-04-14T18:21:34Z", "path": "src/main/app/src/interfaces.ts", "diffHunk": "@@ -0,0 +1,13 @@\n+export interface ILandscape {\n+  name?: string;\n+  description?: string;\n+  identifier?: string;", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNTgxNg==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408825816", "bodyText": "the landscape interface is something that we have to take a look on together, i didnt know what was really necessary and what not so i just made (almost) everything optional for now that could be made optional", "author": "MarvinSchoening", "createdAt": "2020-04-15T13:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyOTIyNw==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408829227", "bodyText": "Landscapes must have identifiers and will very like have a name. The rest is indeed optional.", "author": "bonndan", "createdAt": "2020-04-15T13:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0Mzg5MA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408343890", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-04-14T18:22:38Z", "path": "src/main/app/src/serviceWorker.ts", "diffHunk": "@@ -54,7 +57,7 @@ export function register(config) {\n   }\n }\n \n-function registerValidSW(swUrl, config) {\n+function registerValidSW(swUrl: string, config?: Config) {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NDIzMA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408344230", "bodyText": "Is App_old a renaming accident?", "author": "Matthimatiker", "createdAt": "2020-04-14T18:23:13Z", "path": "src/main/app/src/serviceWorker.ts", "diffHunk": "@@ -120,16 +125,18 @@ function checkValidServiceWorker(swUrl, config) {\n       }\n     })\n     .catch(() => {\n-      console.log(\n-        'No internet connection found. App is running in offline mode.'\n-      );\n+      console.log('No internet connection found. App_old is running in offline mode.');", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NDcyNw==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408344727", "bodyText": "Nice!", "author": "Matthimatiker", "createdAt": "2020-04-14T18:23:58Z", "path": "src/main/java/de/bonndan/nivio/ProcessingFinishedEvent.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package de.bonndan.nivio;\n+\n+import de.bonndan.nivio.model.Landscape;\n+import org.springframework.context.ApplicationEvent;\n+\n+/**\n+ * Event is fired after successful indexing of a landscape.\n+ *\n+ *\n+ *\n+ */\n+public class ProcessingFinishedEvent extends ApplicationEvent {\n+\n+\n+    private final Landscape landscape;\n+\n+    public ProcessingFinishedEvent(Object source, Landscape landscape) {\n+        super(source);\n+        this.landscape = landscape;\n+    }\n+\n+    public Landscape getLandscape() {\n+        return landscape;\n+    }\n+}", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NTExMA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408345110", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-04-14T18:24:36Z", "path": "src/main/java/de/bonndan/nivio/input/MagicLabelRelations.java", "diffHunk": "@@ -37,7 +40,7 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n \n         input.getItemDescriptions().all().forEach(item -> itemMatches.put(item, getMatches(item, landscape, blacklistSpecs)));\n \n-        //search for targets in the landscape\n+        //search for targets in the landscape, i.e. where name or identifier of an item matches the \"possible targets\"", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzA5NA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408347094", "bodyText": "I would advise you not to use Date, if you have a choice.\nThe new, immutable date types like ZonedDateTime  or LocalDateTime are much better.", "author": "Matthimatiker", "createdAt": "2020-04-14T18:27:57Z", "path": "src/main/java/de/bonndan/nivio/input/ProcessLog.java", "diffHunk": "@@ -91,6 +91,15 @@ public String getError() {\n         return exception.getMessage();\n     }\n \n+    @JsonIgnore\n+    public Date getLastUpdate() {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MDIxMQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408380211", "bodyText": "Fixed in 348b9bf", "author": "bonndan", "createdAt": "2020-04-14T19:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0NzM2OQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408347369", "bodyText": "\ud83d\udc4d", "author": "Matthimatiker", "createdAt": "2020-04-14T18:28:23Z", "path": "src/main/java/de/bonndan/nivio/output/docs/DocsController.java", "diffHunk": "@@ -55,7 +55,9 @@ public DocsController(LandscapeRepository landscapeRepository, LocalServer local\n     /**\n      * Renders only a single item as html.\n      *\n+     *\n      */\n+    @Deprecated //item renderings should be generated within the GUI", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMjQ3Mw==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408332473", "bodyText": "What does this do? It is retrieving HTMLElements and changing properties - why? Were there no React Components for that available?", "author": "mfbieber", "createdAt": "2020-04-14T18:03:07Z", "path": "src/main/app/src/Components/CommandComponent/Command.tsx", "diffHunk": "@@ -0,0 +1,81 @@\n+import React, { useContext, useState, useEffect } from 'react';\n+import { useHistory } from 'react-router-dom';\n+import Terminal from 'react-console-emulator';\n+import CommandContext from '../../Context/Command.context';\n+\n+import './Command.scss';\n+\n+const Command: React.FC = () => {\n+  const history = useHistory();\n+  const commandContext = useContext(CommandContext);\n+\n+  const [output, setOutput] = useState(commandContext.message);\n+\n+  useEffect(() => {\n+    setOutput(commandContext.message);\n+  }, [commandContext.message]);\n+\n+  const commands = () => {\n+    return {\n+      cd: {\n+        description: 'Back to the start.',\n+        usage: 'cd',\n+        fn: () => {\n+          commandContext.message = '';\n+          setOutput('');\n+          history.push('/');\n+        },\n+      },\n+      man: {\n+        description: 'Show the manual.',\n+        usage: 'man install|input|model|magic|extra|api',\n+        fn: (arg: string) => {\n+          if (!arg) {\n+            arg = 'install';\n+          }\n+          commandContext.message = 'RTFM: ' + arg;\n+          history.push('/man/' + arg);\n+        },\n+      },\n+      sim: {\n+        description: 'Simulate realtime updates.',\n+        usage: 'sim',\n+        fn: () => sim(),\n+      },\n+    };\n+  };\n+\n+  const sim = () => {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMzYwMA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408333600", "bodyText": "I remember having used this before myself. Did you check how it behaves when you scale the page? I guess you did :)", "author": "mfbieber", "createdAt": "2020-04-14T18:05:02Z", "path": "src/main/app/src/Components/HomeComponent/Home.tsx", "diffHunk": "@@ -0,0 +1,230 @@\n+import React, {useState, useEffect, useContext, useCallback, ReactElement} from 'react';\n+\n+import {ILandscape} from '../../interfaces';\n+import GenericModal from '../ModalComponent/GenericModal';\n+import LandscapeLog from '../LandscapeComponent/Log/LandscapeLog';\n+import Command from '../CommandComponent/Command';\n+import {Link} from 'react-router-dom';\n+import {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\n+import CommandContext from '../../Context/Command.context';\n+import LandscapeContext from '../../Context/Landscape.context';\n+import Typography from '@material-ui/core/Typography';\n+import MenuIcon from '@material-ui/icons/Menu';\n+import Grid from '@material-ui/core/Grid';\n+import {Button, Fab} from '@material-ui/core';\n+import './Home.scss';\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+    createStyles({\n+        marginBottom: {\n+            marginBottom: theme.spacing(1),\n+        },\n+        extendedIcon: {\n+            marginRight: theme.spacing(1),\n+        },\n+    }),\n+);\n+\n+const Home: React.FC = () => {\n+    const [modalContent, setModalContent] = useState<string | ReactElement | ReactElement[] | null>(\n+        null\n+    );\n+    const [landscapes, setLandscapes] = useState<ILandscape[]>();\n+    const [loadLandscapes, setLoadLandscapes] = useState<boolean>(true);\n+\n+    const commandContext = useContext(CommandContext);\n+    const landscapeContext = useContext(LandscapeContext);\n+    const classes = useStyles();\n+    //Could be moved into useEffect but can be used for a reload button later on\n+    const getLandscapes = useCallback(async () => {\n+        if (loadLandscapes) {\n+            await fetch(process.env.REACT_APP_BACKEND_URL + '/api/')\n+                .then(response => {\n+                    return response.json();\n+                })\n+                .then(json => {\n+                    setLandscapes(json);\n+                    setLoadLandscapes(false);\n+                    landscapeContext.landscapes = json;\n+                    commandContext.message = 'Loaded landscapes.';\n+                });\n+        }\n+    }, [commandContext.message, landscapeContext.landscapes, loadLandscapes]);\n+\n+    //ComponentDidMount\n+    useEffect(() => {\n+        getLandscapes();\n+    }, [getLandscapes]);\n+\n+    const enterLog = (l: ILandscape) => {\n+        setModalContent(<LandscapeLog landscape={l}/>);\n+        commandContext.message = 'Showing log: ' + l.identifier;\n+    };\n+\n+    const enterLandscape = (l: ILandscape) => {\n+        commandContext.message = 'Entering landscape: ' + l.identifier;\n+    };\n+    // Render\n+    let content: string | ReactElement[] = 'Loading landscapes...';\n+    if (landscapes) {\n+\n+        content = landscapes.map(l => {\n+            return (\n+\n+\n+                <Grid key={l.identifier} className={'landscapeContainer'} container spacing={3}>\n+\n+                    <Grid item xs={12} sm={12}>", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyNzc4MQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408827781", "bodyText": "no it doesnt work properly on scaling, i'll sit down with daniel tomorrow and will talk with him abit about material ui and our requirements and goals for our styling", "author": "MarvinSchoening", "createdAt": "2020-04-15T13:09:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzMzYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNDIyNQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408334225", "bodyText": "My personal preference: it does not hurt to just use \"landscape\". I had to scroll to understand what \"l\" stood for ;)", "author": "mfbieber", "createdAt": "2020-04-14T18:06:02Z", "path": "src/main/app/src/Components/HomeComponent/Home.tsx", "diffHunk": "@@ -0,0 +1,230 @@\n+import React, {useState, useEffect, useContext, useCallback, ReactElement} from 'react';\n+\n+import {ILandscape} from '../../interfaces';\n+import GenericModal from '../ModalComponent/GenericModal';\n+import LandscapeLog from '../LandscapeComponent/Log/LandscapeLog';\n+import Command from '../CommandComponent/Command';\n+import {Link} from 'react-router-dom';\n+import {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\n+import CommandContext from '../../Context/Command.context';\n+import LandscapeContext from '../../Context/Landscape.context';\n+import Typography from '@material-ui/core/Typography';\n+import MenuIcon from '@material-ui/icons/Menu';\n+import Grid from '@material-ui/core/Grid';\n+import {Button, Fab} from '@material-ui/core';\n+import './Home.scss';\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+    createStyles({\n+        marginBottom: {\n+            marginBottom: theme.spacing(1),\n+        },\n+        extendedIcon: {\n+            marginRight: theme.spacing(1),\n+        },\n+    }),\n+);\n+\n+const Home: React.FC = () => {\n+    const [modalContent, setModalContent] = useState<string | ReactElement | ReactElement[] | null>(\n+        null\n+    );\n+    const [landscapes, setLandscapes] = useState<ILandscape[]>();\n+    const [loadLandscapes, setLoadLandscapes] = useState<boolean>(true);\n+\n+    const commandContext = useContext(CommandContext);\n+    const landscapeContext = useContext(LandscapeContext);\n+    const classes = useStyles();\n+    //Could be moved into useEffect but can be used for a reload button later on\n+    const getLandscapes = useCallback(async () => {\n+        if (loadLandscapes) {\n+            await fetch(process.env.REACT_APP_BACKEND_URL + '/api/')\n+                .then(response => {\n+                    return response.json();\n+                })\n+                .then(json => {\n+                    setLandscapes(json);\n+                    setLoadLandscapes(false);\n+                    landscapeContext.landscapes = json;\n+                    commandContext.message = 'Loaded landscapes.';\n+                });\n+        }\n+    }, [commandContext.message, landscapeContext.landscapes, loadLandscapes]);\n+\n+    //ComponentDidMount\n+    useEffect(() => {\n+        getLandscapes();\n+    }, [getLandscapes]);\n+\n+    const enterLog = (l: ILandscape) => {\n+        setModalContent(<LandscapeLog landscape={l}/>);\n+        commandContext.message = 'Showing log: ' + l.identifier;\n+    };\n+\n+    const enterLandscape = (l: ILandscape) => {\n+        commandContext.message = 'Entering landscape: ' + l.identifier;\n+    };\n+    // Render\n+    let content: string | ReactElement[] = 'Loading landscapes...';\n+    if (landscapes) {\n+\n+        content = landscapes.map(l => {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NTYzNg==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408365636", "bodyText": "yeah should change that, leftover from old app", "author": "MarvinSchoening", "createdAt": "2020-04-14T18:59:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNDIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNTAyNQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408335025", "bodyText": "This is a big component. The landscape could maybe be moved to an own component.", "author": "mfbieber", "createdAt": "2020-04-14T18:07:27Z", "path": "src/main/app/src/Components/HomeComponent/Home.tsx", "diffHunk": "@@ -0,0 +1,230 @@\n+import React, {useState, useEffect, useContext, useCallback, ReactElement} from 'react';\n+\n+import {ILandscape} from '../../interfaces';\n+import GenericModal from '../ModalComponent/GenericModal';\n+import LandscapeLog from '../LandscapeComponent/Log/LandscapeLog';\n+import Command from '../CommandComponent/Command';\n+import {Link} from 'react-router-dom';\n+import {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\n+import CommandContext from '../../Context/Command.context';\n+import LandscapeContext from '../../Context/Landscape.context';\n+import Typography from '@material-ui/core/Typography';\n+import MenuIcon from '@material-ui/icons/Menu';\n+import Grid from '@material-ui/core/Grid';\n+import {Button, Fab} from '@material-ui/core';\n+import './Home.scss';\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+    createStyles({\n+        marginBottom: {\n+            marginBottom: theme.spacing(1),\n+        },\n+        extendedIcon: {\n+            marginRight: theme.spacing(1),\n+        },\n+    }),\n+);\n+\n+const Home: React.FC = () => {\n+    const [modalContent, setModalContent] = useState<string | ReactElement | ReactElement[] | null>(\n+        null\n+    );\n+    const [landscapes, setLandscapes] = useState<ILandscape[]>();\n+    const [loadLandscapes, setLoadLandscapes] = useState<boolean>(true);\n+\n+    const commandContext = useContext(CommandContext);\n+    const landscapeContext = useContext(LandscapeContext);\n+    const classes = useStyles();\n+    //Could be moved into useEffect but can be used for a reload button later on\n+    const getLandscapes = useCallback(async () => {\n+        if (loadLandscapes) {\n+            await fetch(process.env.REACT_APP_BACKEND_URL + '/api/')\n+                .then(response => {\n+                    return response.json();\n+                })\n+                .then(json => {\n+                    setLandscapes(json);\n+                    setLoadLandscapes(false);\n+                    landscapeContext.landscapes = json;\n+                    commandContext.message = 'Loaded landscapes.';\n+                });\n+        }\n+    }, [commandContext.message, landscapeContext.landscapes, loadLandscapes]);\n+\n+    //ComponentDidMount\n+    useEffect(() => {\n+        getLandscapes();\n+    }, [getLandscapes]);\n+\n+    const enterLog = (l: ILandscape) => {\n+        setModalContent(<LandscapeLog landscape={l}/>);\n+        commandContext.message = 'Showing log: ' + l.identifier;\n+    };\n+\n+    const enterLandscape = (l: ILandscape) => {\n+        commandContext.message = 'Entering landscape: ' + l.identifier;\n+    };\n+    // Render\n+    let content: string | ReactElement[] = 'Loading landscapes...';\n+    if (landscapes) {\n+\n+        content = landscapes.map(l => {\n+            return (\n+\n+\n+                <Grid key={l.identifier} className={'landscapeContainer'} container spacing={3}>\n+\n+                    <Grid item xs={12} sm={12}>\n+                        <Grid container className={'bar'} spacing={2}>\n+                            <Grid item xs={1} sm={1} className={'first item'}></Grid>\n+                            <Grid item xs={4} sm={3} className={'title'}>{l.name}</Grid>\n+                            <Grid item xs={4} sm={5} className={'item'}></Grid>\n+                            <Grid item xs={1} sm={1} className={'no-item'}>\n+                                <Button onClick={() => enterLandscape(l)} fullWidth component={Link}\n+                                        className={'button'}\n+                                        to={`/landscape/${l.identifier}`}>enter</Button>\n+                            </Grid>\n+                            <Grid item xs={1} sm={1} className={'no-item'}>\n+                                <Button onClick={() => enterLog(l)} fullWidth className={'button'}>log</Button>\n+                            </Grid>\n+                            <Grid item xs={1} sm={1} className={'item'}></Grid>\n+                        </Grid>\n+                    </Grid>\n+\n+                    <Grid item xs={1} className={'previewItem'}>\n+\n+                        <Button component={Link}\n+                                to={`/landscape/${l.identifier}`} onClick={() => enterLandscape(l)}>\n+                            <img className={'preview'} alt={'preview'}\n+                                 src={process.env.REACT_APP_BACKEND_URL + '/render/' + l.identifier + '/graph.png'}\n+                                 style={{maxWidth: 100, float: 'left'}}/>\n+                        </Button>\n+\n+                    </Grid>\n+                    <Grid item xs={3}>\n+                        <Typography variant=\"overline\" display=\"block\" gutterBottom>\n+                            Info\n+                        </Typography>\n+                        {l.description}\n+                        <br/>\n+                        <br/>\n+                        Identifier: {l.identifier}\n+                        <br/>\n+                        Contact: {l.contact || '-'}\n+                        <br/>\n+                        Teams: {l.stats.teams.join(', ')}\n+                        <br/>\n+\n+                    </Grid>\n+\n+                    <Grid item xs={2}>\n+\n+                        <Typography variant=\"overline\" display=\"block\" gutterBottom>\n+                            State\n+                        </Typography>\n+                        {l.stats.overallState || '-'}\n+\n+                    </Grid>\n+\n+                    <Grid item xs={2}>\n+                        <Typography variant=\"overline\" display=\"block\" gutterBottom>\n+                            Items\n+                        </Typography>\n+                        <Typography variant=\"h2\" display=\"block\" gutterBottom>\n+                            {l.stats.items}\n+                        </Typography>\n+                        in {l.stats.groups} groups\n+                    </Grid>\n+\n+                    <Grid item xs={2}>\n+                        <Typography variant=\"overline\" display=\"block\" gutterBottom>\n+                            Last update\n+                        </Typography>\n+                        <Typography variant=\"h3\" display=\"block\">\n+                            {l.stats.lastUpdate?.split(' ')[0] || '-'}\n+                        </Typography>\n+\n+                        <div>{l.stats.lastUpdate?.split(' ')[1] || '-'}</div>\n+                    </Grid>\n+\n+                    <Grid item xs={2}>\n+                        <Typography variant=\"overline\" display=\"block\" gutterBottom>\n+                            More\n+                        </Typography>\n+                        <a target={'_blank'}\n+                           rel='noopener noreferrer'\n+                           href={process.env.REACT_APP_BACKEND_URL + '/render/' + l.identifier + '/map.svg'}>\n+                            Printable Graph\n+                        </a><br />\n+                        <a target={'_blank'}\n+                           rel='noopener noreferrer'\n+                           href={process.env.REACT_APP_BACKEND_URL + '/docs/' + l.identifier + '/report.html'}>\n+                            Printable Report\n+                        </a>\n+                    </Grid>\n+                </Grid>\n+\n+            );\n+        });\n+    }\n+", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2NjA1NQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408366055", "bodyText": "we could move it into a layout component (and maybe work with layout components in all components?)", "author": "MarvinSchoening", "createdAt": "2020-04-14T19:00:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNTAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzNzc2NQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408337765", "bodyText": "This could move to the LandscapeContext and in general REST calls could go to the corresponding contexts. By doing so, the components have less responsibilities and can concentrate on doing what they know how to do. In this case Home is really big already (see below), but still, even if it was smaller, it should only know how to do \"Home\" :)", "author": "mfbieber", "createdAt": "2020-04-14T18:12:04Z", "path": "src/main/app/src/Components/HomeComponent/Home.tsx", "diffHunk": "@@ -0,0 +1,230 @@\n+import React, {useState, useEffect, useContext, useCallback, ReactElement} from 'react';\n+\n+import {ILandscape} from '../../interfaces';\n+import GenericModal from '../ModalComponent/GenericModal';\n+import LandscapeLog from '../LandscapeComponent/Log/LandscapeLog';\n+import Command from '../CommandComponent/Command';\n+import {Link} from 'react-router-dom';\n+import {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\n+import CommandContext from '../../Context/Command.context';\n+import LandscapeContext from '../../Context/Landscape.context';\n+import Typography from '@material-ui/core/Typography';\n+import MenuIcon from '@material-ui/icons/Menu';\n+import Grid from '@material-ui/core/Grid';\n+import {Button, Fab} from '@material-ui/core';\n+import './Home.scss';\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+    createStyles({\n+        marginBottom: {\n+            marginBottom: theme.spacing(1),\n+        },\n+        extendedIcon: {\n+            marginRight: theme.spacing(1),\n+        },\n+    }),\n+);\n+\n+const Home: React.FC = () => {\n+    const [modalContent, setModalContent] = useState<string | ReactElement | ReactElement[] | null>(\n+        null\n+    );\n+    const [landscapes, setLandscapes] = useState<ILandscape[]>();\n+    const [loadLandscapes, setLoadLandscapes] = useState<boolean>(true);\n+\n+    const commandContext = useContext(CommandContext);\n+    const landscapeContext = useContext(LandscapeContext);\n+    const classes = useStyles();\n+    //Could be moved into useEffect but can be used for a reload button later on\n+    const getLandscapes = useCallback(async () => {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTIwOA==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408339208", "bodyText": "See my comment above, this is a case where the REST call logic could go into the context to make the Landscape component have less responsibilities. The LandscpaeContext would deliver the landscapes  (\"getLandscapes\" from above) and reload them (this reload) and you would only implement it once.", "author": "mfbieber", "createdAt": "2020-04-14T18:14:35Z", "path": "src/main/app/src/Components/LandscapeComponent/Landscape/Landscape.tsx", "diffHunk": "@@ -0,0 +1,110 @@\n+import React, { useState, useEffect, useContext, ReactElement } from 'react';\n+\n+import { ReactSvgPanZoomLoader, SvgLoaderSelectElement } from 'react-svg-pan-zoom-loader';\n+import { ReactSVGPanZoom, TOOL_AUTO, Tool, Value } from 'react-svg-pan-zoom';\n+import { useParams } from 'react-router-dom';\n+\n+import LandscapeItem from '../Item/LandscapeItem';\n+import Command from '../../CommandComponent/Command';\n+import GenericModal from '../../ModalComponent/GenericModal';\n+import LandscapeContext from '../../../Context/Landscape.context';\n+import CommandContext from '../../../Context/Command.context';\n+\n+import './Landscape.scss';\n+import { ILandscape } from '../../../interfaces';\n+\n+const Landscape: React.FC = () => {\n+  const [tool, setTool] = useState<Tool>(TOOL_AUTO);\n+\n+  // It wants a value or null but if we defined it as null it throws an error that shouldn't use null\n+  // In their own documentation, they initialize it with {}, but that will invoke a typescript error\n+  // @ts-ignore\n+  const [value, setValue] = useState<Value>({});\n+  const [modalContent, setModalContent] = useState<string | ReactElement | null>(null);\n+  const [landscape, setLandscape] = useState<ILandscape | null>(null);\n+  const [reloadLandscape, setReloadLandscape] = useState<boolean>(false);\n+\n+  const landscapeContext = useContext(LandscapeContext);\n+  const commandContext = useContext(CommandContext);\n+  const { identifier } = useParams();\n+\n+  useEffect(() => {\n+    const index = landscapeContext.landscapes.findIndex(i => i.identifier === identifier);\n+    setLandscape(landscapeContext.landscapes[index]);\n+  }, [identifier, landscapeContext.landscapes, reloadLandscape]);\n+\n+  const reloadLandscapes = async () => {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM2Njg4Mg==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408366882", "bodyText": "yeah i wasnt happy with that either, didnt have much experience with context, i'll try it,\nthanks for the recommendation", "author": "MarvinSchoening", "createdAt": "2020-04-14T19:01:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDgwNQ==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408350805", "bodyText": "Do you close the outputStream if an Exception occurrs during the flush? Better use try-with-resources for the AutoCloseable OutputStream :) (https://stackoverflow.com/questions/56112598/proper-way-to-close-an-autocloseable)", "author": "mfbieber", "createdAt": "2020-04-14T18:34:08Z", "path": "src/main/java/de/bonndan/nivio/output/map/PNGRenderCache.java", "diffHunk": "@@ -0,0 +1,110 @@\n+package de.bonndan.nivio.output.map;\n+\n+import com.mxgraph.model.mxCell;\n+import com.mxgraph.view.mxGraph;\n+import de.bonndan.nivio.ProcessingFinishedEvent;\n+import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import de.bonndan.nivio.output.RenderedArtifact;\n+import de.bonndan.nivio.output.jgraphx.JGraphXRenderer;\n+import de.bonndan.nivio.output.map.svg.MapStyleSheetFactory;\n+import de.bonndan.nivio.output.map.svg.SvgFactory;\n+import org.apache.batik.transcoder.Transcoder;\n+import org.apache.batik.transcoder.TranscoderException;\n+import org.apache.batik.transcoder.TranscoderInput;\n+import org.apache.batik.transcoder.TranscoderOutput;\n+import org.apache.batik.transcoder.image.PNGTranscoder;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * A service that caches expensive batik svg to png rendering.\n+ *\n+ */\n+@Service\n+public class PNGRenderCache implements ApplicationListener<ProcessingFinishedEvent> {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(PNGRenderCache.class);\n+\n+    private final Map<String, Pair<LandscapeImpl, byte[]>> renderings = new HashMap<>();\n+\n+    private final MapFactory<mxGraph, mxCell> mapFactory;\n+    private final MapStyleSheetFactory mapStyleSheetFactory;\n+\n+    public PNGRenderCache(MapFactory<mxGraph, mxCell> mapFactory, MapStyleSheetFactory mapStyleSheetFactory) {\n+        this.mapFactory = mapFactory;\n+        this.mapStyleSheetFactory = mapStyleSheetFactory;\n+    }\n+\n+    /**\n+     * Returns a png.\n+     *\n+     * @param landscape the landscape to render\n+     * @return the png as byte array, cached if available\n+     */\n+    public byte[] getPNG(LandscapeImpl landscape) {\n+\n+        Pair<LandscapeImpl, byte[]> landscapePair = renderings.get(landscape.getIdentifier());\n+        if (landscapePair == null || landscapePair.getLeft().getLog().getLastUpdate() != landscape.getLog().getLastUpdate()) {\n+            byte[] rendered = asByteArray(landscape);\n+            renderings.put(landscape.getIdentifier(), new ImmutablePair<>(landscape, rendered));\n+            return rendered;\n+        }\n+\n+        return landscapePair.getRight();\n+    }\n+\n+    /**\n+     * Returns an svg.\n+     *\n+     * @param landscape the landscape to render\n+     * @return the svg as string, uncached\n+     */\n+    public String getSVG(LandscapeImpl landscape) {\n+        JGraphXRenderer jGraphXRenderer = new JGraphXRenderer();\n+        RenderedArtifact<mxGraph, mxCell> render = jGraphXRenderer.render(landscape);\n+        mapFactory.applyArtifactValues(landscape, render);\n+\n+        SvgFactory svgFactory = new SvgFactory(landscape, mapStyleSheetFactory);\n+        return svgFactory.getXML();\n+    }\n+\n+    @Override\n+    public void onApplicationEvent(ProcessingFinishedEvent processingFinishedEvent) {\n+        Landscape landscape = processingFinishedEvent.getLandscape();\n+        if (landscape instanceof LandscapeImpl) {\n+            LOGGER.info(\"Generating PNG rendering of landscape {}\", landscape.getIdentifier());\n+            getPNG((LandscapeImpl) landscape);\n+        }\n+    }\n+\n+    private byte[] asByteArray(LandscapeImpl landscape) {\n+        TranscoderInput input_svg_image = new TranscoderInput(new ByteArrayInputStream(getSVG(landscape).getBytes()));\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+        TranscoderOutput transcoderOutput = new TranscoderOutput(outputStream);\n+        Transcoder transcoder = new PNGTranscoder();\n+        try {\n+            transcoder.transcode(input_svg_image, transcoderOutput);\n+        } catch (TranscoderException e) {\n+            throw new RuntimeException(\"Failed to create PNG\", e);\n+        }\n+        try {", "originalCommit": "4c308786512b419b7c9439b73ff68b237d57ecd6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1NDkyNw==", "url": "https://github.com/dedica-team/nivio/pull/117#discussion_r408354927", "bodyText": "But, for ByteArrayOutputStream, close() and flush() do nothing (check out the implementation). This try-catch-block is not necessary. I wonder now, what the exception message was intended for?", "author": "mfbieber", "createdAt": "2020-04-14T18:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MDgwNQ=="}], "type": "inlineReview"}, {"oid": "348b9bf2ae3ec6c0acb374c8ccb3b31d188dc129", "url": "https://github.com/dedica-team/nivio/commit/348b9bf2ae3ec6c0acb374c8ccb3b31d188dc129", "message": "[#117] replaced Date, ProcessLog entries transmitted as objects", "committedDate": "2020-04-14T19:21:52Z", "type": "commit"}, {"oid": "0a12a64a1435d6762d1b3fdef0f45c846587ecfd", "url": "https://github.com/dedica-team/nivio/commit/0a12a64a1435d6762d1b3fdef0f45c846587ecfd", "message": "readme rework, prettierignore, clean up package.json, set node version to 12.16.2 (LTS Version)", "committedDate": "2020-04-15T12:46:19Z", "type": "commit"}, {"oid": "d52df796402462dfbd27c6d27d6966edb48f604b", "url": "https://github.com/dedica-team/nivio/commit/d52df796402462dfbd27c6d27d6966edb48f604b", "message": "npm run format", "committedDate": "2020-04-15T12:48:03Z", "type": "commit"}, {"oid": "789682e11a3fb199f42dff1e72de42c175524ccd", "url": "https://github.com/dedica-team/nivio/commit/789682e11a3fb199f42dff1e72de42c175524ccd", "message": "implement most recommendations", "committedDate": "2020-04-18T02:30:14Z", "type": "commit"}, {"oid": "86d0f4f166b5cfcfa49e3e4025bef484c517f685", "url": "https://github.com/dedica-team/nivio/commit/86d0f4f166b5cfcfa49e3e4025bef484c517f685", "message": "add basic render tests and some small button click tests", "committedDate": "2020-04-18T02:30:57Z", "type": "commit"}, {"oid": "ed79d873082fae26b4dac3fd040e88ff2360b73f", "url": "https://github.com/dedica-team/nivio/commit/ed79d873082fae26b4dac3fd040e88ff2360b73f", "message": "provide some descriptions to components", "committedDate": "2020-04-18T02:50:50Z", "type": "commit"}, {"oid": "a55dbd00fe2b1d02a7c2b78eb35c1a4c9d68206a", "url": "https://github.com/dedica-team/nivio/commit/a55dbd00fe2b1d02a7c2b78eb35c1a4c9d68206a", "message": "fix seed url contains authority component", "committedDate": "2020-04-18T03:56:38Z", "type": "commit"}, {"oid": "a66948ef2d19b98d93a801eb29096e73caf19bb2", "url": "https://github.com/dedica-team/nivio/commit/a66948ef2d19b98d93a801eb29096e73caf19bb2", "message": "[#89] global event log with rest api, experimental websocket", "committedDate": "2020-04-18T08:41:04Z", "type": "commit"}, {"oid": "25baa28830f542494433948c592e529298c7ccc7", "url": "https://github.com/dedica-team/nivio/commit/25baa28830f542494433948c592e529298c7ccc7", "message": "[#89] experimental ui for events", "committedDate": "2020-04-18T09:03:46Z", "type": "commit"}, {"oid": "d4d95fb3c5f2bebd26b2913e4af7a5e95544b87a", "url": "https://github.com/dedica-team/nivio/commit/d4d95fb3c5f2bebd26b2913e4af7a5e95544b87a", "message": "small gui fix", "committedDate": "2020-04-18T10:04:08Z", "type": "commit"}, {"oid": "09ea506d456ef116a1081e9f510112892afaeb1d", "url": "https://github.com/dedica-team/nivio/commit/09ea506d456ef116a1081e9f510112892afaeb1d", "message": "remove debugger, npm run format", "committedDate": "2020-04-18T13:39:04Z", "type": "commit"}]}