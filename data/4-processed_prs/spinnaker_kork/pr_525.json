{"pr_number": 525, "pr_title": "feat(plugins): Adding Front50 FileDownloader", "pr_createdAt": "2020-02-20T22:38:57Z", "pr_url": "https://github.com/spinnaker/kork/pull/525", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5OTYyNQ==", "url": "https://github.com/spinnaker/kork/pull/525#discussion_r382299625", "bodyText": "This isn't really a good, long-term solution. I imagine some people will want to use Front50 for plugin info without necessarily downloading binaries from Front50 as well. This seemed like a bigger topic to bite off than what this PR is for. Do we add a CompositeFileDownloader class that lets FileDownloaders to inspect a URL and see if it's something they should be downloading? Seems like this might be the only path forward...?", "author": "robzienert", "createdAt": "2020-02-20T22:41:55Z", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/Front50PluginsConfiguration.java", "diffHunk": "@@ -58,28 +57,33 @@ public static UpdateRepository pluginFront50UpdateRepository(\n                         \"Unable to bind ok-http-client property to \"\n                             + OkHttpClientConfigurationProperties.class.getSimpleName()));\n \n-    PluginRepositoryProperties front50RepositoryProps =\n-        pluginRepositoriesConfig.get(PluginsConfigurationProperties.FRONT5O_REPOSITORY);\n-\n-    // We are a bit inconsistent with how we configure service URLs, so we proceed in this order:\n-    // 1) front.base-url\n-    // 2) service.front50.base-url\n-    // 3) spinnaker.extensibility.repositories.front50.url\n-    URL front50Url =\n-        Binder.get(environment)\n-            .bind(\"front50.base-url\", Bindable.of(URL.class))\n-            .orElseGet(\n-                () ->\n-                    Binder.get(environment)\n-                        .bind(\"services.front50.base-url\", Bindable.of(URL.class))\n-                        .orElseGet(front50RepositoryProps::getUrl));\n-\n     OkHttpClient okHttpClient =\n         new OkHttp3ClientConfiguration(okHttpClientProperties)\n             .create()\n             .retryOnConnectionFailure(okHttpClientProperties.isRetryOnConnectionFailure())\n             .build();\n \n+    return new PluginOkHttpClientProvider(okHttpClient);\n+  }\n+\n+  @Bean\n+  public static Front50FileDownloader front50FileDownloader(\n+      PluginOkHttpClientProvider pluginsOkHttpClientProvider) {\n+    return new Front50FileDownloader(pluginsOkHttpClientProvider.getOkHttpClient());\n+  }\n+\n+  @Bean\n+  public static UpdateRepository pluginFront50UpdateRepository(\n+      Environment environment,\n+      PluginOkHttpClientProvider pluginsOkHttpClientProvider,\n+      Map<String, PluginRepositoryProperties> pluginRepositoriesConfig,\n+      Front50FileDownloader front50FileDownloader) {", "originalCommit": "95c27252dbbfe5b8dcb71b51b10747b4c1acb24b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwODgxNQ==", "url": "https://github.com/spinnaker/kork/pull/525#discussion_r382308815", "bodyText": "What if we assign a  type of Downloader to a Plugin. ?  So when we register a plugin.. assign the Downloader type to it. That way we can dynamically swtich and allow us to be flexible.", "author": "srekapalli", "createdAt": "2020-02-20T23:05:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5OTYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwOTA0MA==", "url": "https://github.com/spinnaker/kork/pull/525#discussion_r382309040", "bodyText": "You are correct. We don't need to address this issue immdtly.", "author": "srekapalli", "createdAt": "2020-02-20T23:06:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5OTYyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODczNw==", "url": "https://github.com/spinnaker/kork/pull/525#discussion_r382318737", "bodyText": "Yh. CompositeFileDownloader with each FileDownloader saying the type/name of it which we can hold in PluginInfo instead of URL inspection strategy will be more clear I think.", "author": "srekapalli", "createdAt": "2020-02-20T23:35:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI5OTYyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMwODAxNQ==", "url": "https://github.com/spinnaker/kork/pull/525#discussion_r382308015", "bodyText": "With this we will loose the ability to download from github ? Correct.?", "author": "srekapalli", "createdAt": "2020-02-20T23:03:26Z", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/Front50PluginsConfiguration.java", "diffHunk": "@@ -58,28 +57,33 @@ public static UpdateRepository pluginFront50UpdateRepository(\n                         \"Unable to bind ok-http-client property to \"\n                             + OkHttpClientConfigurationProperties.class.getSimpleName()));\n \n-    PluginRepositoryProperties front50RepositoryProps =\n-        pluginRepositoriesConfig.get(PluginsConfigurationProperties.FRONT5O_REPOSITORY);\n-\n-    // We are a bit inconsistent with how we configure service URLs, so we proceed in this order:\n-    // 1) front.base-url\n-    // 2) service.front50.base-url\n-    // 3) spinnaker.extensibility.repositories.front50.url\n-    URL front50Url =\n-        Binder.get(environment)\n-            .bind(\"front50.base-url\", Bindable.of(URL.class))\n-            .orElseGet(\n-                () ->\n-                    Binder.get(environment)\n-                        .bind(\"services.front50.base-url\", Bindable.of(URL.class))\n-                        .orElseGet(front50RepositoryProps::getUrl));\n-\n     OkHttpClient okHttpClient =\n         new OkHttp3ClientConfiguration(okHttpClientProperties)\n             .create()\n             .retryOnConnectionFailure(okHttpClientProperties.isRetryOnConnectionFailure())\n             .build();\n \n+    return new PluginOkHttpClientProvider(okHttpClient);\n+  }\n+", "originalCommit": "95c27252dbbfe5b8dcb71b51b10747b4c1acb24b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4c22e912d9b7dd3b0c5558d64a28c9661856c81b", "url": "https://github.com/spinnaker/kork/commit/4c22e912d9b7dd3b0c5558d64a28c9661856c81b", "message": "feat(plugins): Adding Front50 FileDownloader", "committedDate": "2020-02-21T18:46:16Z", "type": "forcePushed"}, {"oid": "2a7910c0ddcc885977754cc1a2597cff296a79a2", "url": "https://github.com/spinnaker/kork/commit/2a7910c0ddcc885977754cc1a2597cff296a79a2", "message": "feat(plugins): Adding Front50 FileDownloader", "committedDate": "2020-02-21T18:53:53Z", "type": "forcePushed"}, {"oid": "78843aebf30aeb44db759f7b9b5e9bb550c1c922", "url": "https://github.com/spinnaker/kork/commit/78843aebf30aeb44db759f7b9b5e9bb550c1c922", "message": "feat(plugins): Adding Front50 FileDownloader", "committedDate": "2020-02-21T19:02:13Z", "type": "commit"}, {"oid": "78843aebf30aeb44db759f7b9b5e9bb550c1c922", "url": "https://github.com/spinnaker/kork/commit/78843aebf30aeb44db759f7b9b5e9bb550c1c922", "message": "feat(plugins): Adding Front50 FileDownloader", "committedDate": "2020-02-21T19:02:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3NzI2Mw==", "url": "https://github.com/spinnaker/kork/pull/525#discussion_r382777263", "bodyText": "neat!!", "author": "srekapalli", "createdAt": "2020-02-21T19:56:18Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/downloader/Front50FileDownloader.kt", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update.downloader\n+\n+import com.netflix.spinnaker.kork.web.exceptions.NotFoundException\n+import io.github.resilience4j.retry.Retry\n+import okhttp3.OkHttpClient\n+import okhttp3.Request\n+import java.net.URL\n+import java.nio.file.Files\n+import java.nio.file.Path\n+import java.nio.file.Paths\n+\n+/**\n+ * Downloads plugin binaries from Front50.\n+ */\n+class Front50FileDownloader(\n+  private val okHttpClient: OkHttpClient,\n+  private val front50BaseUrl: URL\n+) : SupportingFileDownloader {\n+", "originalCommit": "78843aebf30aeb44db759f7b9b5e9bb550c1c922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4ODkyNw==", "url": "https://github.com/spinnaker/kork/pull/525#discussion_r382788927", "bodyText": "\ud83d\udc4d", "author": "jonsie", "createdAt": "2020-02-21T20:24:24Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/internal/Front50Service.kt", "diffHunk": "@@ -12,10 +12,9 @@\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- *\n  */\n \n-package com.netflix.spinnaker.kork.plugins.update.front50\n+package com.netflix.spinnaker.kork.plugins.update.internal", "originalCommit": "78843aebf30aeb44db759f7b9b5e9bb550c1c922", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "73ef56217464c5789fd51b847a0ce4972e165b95", "url": "https://github.com/spinnaker/kork/commit/73ef56217464c5789fd51b847a0ce4972e165b95", "message": "Merge branch 'master' into front50-filedownloader", "committedDate": "2020-02-24T20:56:52Z", "type": "commit"}]}