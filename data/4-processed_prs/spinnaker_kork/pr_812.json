{"pr_number": 812, "pr_title": "v2 plugin framework: allow service-side extension injection without special handling", "pr_createdAt": "2020-10-14T19:35:08Z", "pr_url": "https://github.com/spinnaker/kork/pull/812", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMDQ2Mg==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r504930462", "bodyText": "The main idea is here. It creates lazy implementations for extension beans that will be created later on inside the plugin application context.", "author": "danielpeach", "createdAt": "2020-10-14T19:46:50Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "diffHunk": "@@ -84,7 +99,55 @@ class SpinnakerPluginService(\n         }\n \n         if (p is PluginContainer) {\n-          p.registerInitializer(registry)\n+          val pluginContext = p.pluginContext\n+          val pluginId = p.wrapper.pluginId\n+          val initializerBeanName = p.registerInitializer(registry)\n+\n+          // Find the plugin's SpinnakerExtensionPoints.\n+          ClassPathScanningCandidateComponentProvider(false).apply {", "originalCommit": "79c264ea5de03651b3f1e82c0122e5caa21c8d5d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyNjE4MA==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r505126180", "bodyText": "Have you run the service tests (like orca-plugin-tests, echo-plugin-tests, gate-plugin-tests) against this change?", "author": "jonsie", "createdAt": "2020-10-15T02:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMDQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYzMTEwNQ==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r505631105", "bodyText": "Yeah! All of the service plugin tests pass.", "author": "danielpeach", "createdAt": "2020-10-15T15:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMDQ2Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc0NTIzNw==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r505745237", "bodyText": "Nice.", "author": "jonsie", "createdAt": "2020-10-15T18:14:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMDQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDkzMTAxNQ==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r504931015", "bodyText": "There's no need for the bean promoter, since the proxies are injected into the parent context up front.", "author": "danielpeach", "createdAt": "2020-10-14T19:47:53Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpringPluginFactory.kt", "diffHunk": "@@ -39,16 +38,10 @@ class SpringPluginFactory(\n   private val sdkFactories: List<SdkFactory>,\n   private val configFactory: ConfigFactory,\n   private val serviceApplicationContext: GenericApplicationContext,\n-  private val invocationAspects: List<InvocationAspect<*>>\n ) : PluginFactory {\n \n   private val log = LoggerFactory.getLogger(javaClass)\n \n-  /**\n-   * [DefaultBeanPromoter] is the One True [BeanPromoter] for non-testing scenarios.\n-   */\n-  private val beanPromoter = DefaultBeanPromoter(serviceApplicationContext)", "originalCommit": "79c264ea5de03651b3f1e82c0122e5caa21c8d5d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "625cada71878338030650cdd7255ae0b71eacfa4", "url": "https://github.com/spinnaker/kork/commit/625cada71878338030650cdd7255ae0b71eacfa4", "message": "make lazy extension invocation proxy internal", "committedDate": "2020-10-14T19:50:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYxMzA0MQ==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509613041", "bodyText": "Docs need to be improved. It's not obvious why this class exists, or what it's used for based on the docs.", "author": "robzienert", "createdAt": "2020-10-21T19:34:08Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/LazyExtensionInvocationProxy.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Armory, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.proxy\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.api.internal.ExtensionInvocationHandler\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationAspect\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationState\n+import java.lang.reflect.Method\n+import java.lang.reflect.Proxy\n+\n+/**\n+ * A wrapper around [ExtensionInvocationProxy].\n+ * The provided `target` is resolved at method-call time.\n+ * */\n+internal class LazyExtensionInvocationProxy(", "originalCommit": "bfffccf3512cef0aa0e6767310f93653b6e218ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyMDgzMQ==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509620831", "bodyText": "This message could be improved - there's no context into what plugin context was not configured, etc.", "author": "robzienert", "createdAt": "2020-10-21T19:44:30Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "diffHunk": "@@ -84,7 +99,55 @@ class SpinnakerPluginService(\n         }\n \n         if (p is PluginContainer) {\n-          p.registerInitializer(registry)\n+          val pluginContext = p.pluginContext\n+          val pluginId = p.wrapper.pluginId\n+          val initializerBeanName = p.registerInitializer(registry)\n+\n+          // Find the plugin's SpinnakerExtensionPoints.\n+          ClassPathScanningCandidateComponentProvider(false).apply {\n+            addIncludeFilter(AssignableTypeFilter(SpinnakerExtensionPoint::class.java))\n+            resourceLoader = DefaultResourceLoader(p.wrapper.pluginClassLoader)\n+          }.findCandidateComponents(p.actual.basePackageName).forEach { extensionBeanDefinition ->\n+            val extensionBeanClass = p.wrapper.pluginClassLoader.loadClass(extensionBeanDefinition.beanClassName) as Class<out SpinnakerExtensionPoint>\n+\n+            // Find the name that the extension bean will (but hasn't yet) be given inside the plugin application context.\n+            // We'll use this to look up the extension inside the lazy loader.\n+            val pluginContextBeanName = AnnotationBeanNameGenerator.INSTANCE.generateBeanName(\n+              extensionBeanDefinition,\n+              pluginContext\n+            )\n+\n+            // Provide an implementation of the extension that can be injected immediately by service-level classes.\n+            val proxy = LazyExtensionInvocationProxy.proxy(\n+              lazy {\n+                // Force the plugin's initializer to run.\n+                pluginContext.parent?.also { it.getBean(initializerBeanName) }\n+                  ?: throw IllegalStateException(\"Plugin context was not configured with a parent context\")", "originalCommit": "bfffccf3512cef0aa0e6767310f93653b6e218ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyMzE0Ng==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509623146", "bodyText": "This is a little confusing. Can we get some docs on why this is necessary (vs just making target a property from the constructor)? Can we rename one of these variables?", "author": "robzienert", "createdAt": "2020-10-21T19:47:10Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/LazyExtensionInvocationProxy.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Armory, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.proxy\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.api.internal.ExtensionInvocationHandler\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationAspect\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationState\n+import java.lang.reflect.Method\n+import java.lang.reflect.Proxy\n+\n+/**\n+ * A wrapper around [ExtensionInvocationProxy].\n+ * The provided `target` is resolved at method-call time.\n+ * */\n+internal class LazyExtensionInvocationProxy(\n+  target: Lazy<SpinnakerExtensionPoint>,\n+  private val targetClass: Class<out SpinnakerExtensionPoint>,\n+  private val invocationAspects: List<InvocationAspect<InvocationState>>,\n+  private val descriptor: SpinnakerPluginDescriptor\n+) : ExtensionInvocationHandler {\n+\n+  private val target by target", "originalCommit": "bfffccf3512cef0aa0e6767310f93653b6e218ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyNDQwMQ==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509624401", "bodyText": "nit: Would like to see this block of code split into a different private method - really not a fan of a lot of logic directly nested inside of loops.", "author": "robzienert", "createdAt": "2020-10-21T19:49:12Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/v2/SpinnakerPluginService.kt", "diffHunk": "@@ -84,7 +99,55 @@ class SpinnakerPluginService(\n         }\n \n         if (p is PluginContainer) {\n-          p.registerInitializer(registry)\n+          val pluginContext = p.pluginContext", "originalCommit": "bfffccf3512cef0aa0e6767310f93653b6e218ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyNjYwNg==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r509626606", "bodyText": "A proxy of a proxy. This method still returns the correct results? https://github.com/spinnaker/kork/blob/master/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/internal/SpinnakerExtensionPoint.java#L31 (via https://github.com/spinnaker/kork/blob/master/kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/internal/ExtensionClassProvider.java#L24).\nBy the looks of it, I wouldn't expect it to.", "author": "robzienert", "createdAt": "2020-10-21T19:52:00Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/LazyExtensionInvocationProxy.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 Armory, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.proxy\n+\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginDescriptor\n+import com.netflix.spinnaker.kork.plugins.api.internal.ExtensionInvocationHandler\n+import com.netflix.spinnaker.kork.plugins.api.internal.SpinnakerExtensionPoint\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationAspect\n+import com.netflix.spinnaker.kork.plugins.proxy.aspects.InvocationState\n+import java.lang.reflect.Method\n+import java.lang.reflect.Proxy\n+\n+/**\n+ * A wrapper around [ExtensionInvocationProxy].\n+ * The provided `target` is resolved at method-call time.\n+ * */\n+internal class LazyExtensionInvocationProxy(\n+  target: Lazy<SpinnakerExtensionPoint>,\n+  private val targetClass: Class<out SpinnakerExtensionPoint>,\n+  private val invocationAspects: List<InvocationAspect<InvocationState>>,\n+  private val descriptor: SpinnakerPluginDescriptor\n+) : ExtensionInvocationHandler {\n+\n+  private val target by target\n+  private val delegate by lazy { ExtensionInvocationProxy(this.target, invocationAspects, descriptor) }", "originalCommit": "bfffccf3512cef0aa0e6767310f93653b6e218ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk1Mjg5Mw==", "url": "https://github.com/spinnaker/kork/pull/812#discussion_r512952893", "bodyText": "This works - added a test for it.", "author": "danielpeach", "createdAt": "2020-10-27T19:01:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTYyNjYwNg=="}], "type": "inlineReview"}, {"oid": "59a9ade2e1afa20620d82629e5ad5fa625095112", "url": "https://github.com/spinnaker/kork/commit/59a9ade2e1afa20620d82629e5ad5fa625095112", "message": "feat(plugins): allow service-side extension injection without special\nhandling", "committedDate": "2020-10-27T19:10:22Z", "type": "commit"}, {"oid": "59a9ade2e1afa20620d82629e5ad5fa625095112", "url": "https://github.com/spinnaker/kork/commit/59a9ade2e1afa20620d82629e5ad5fa625095112", "message": "feat(plugins): allow service-side extension injection without special\nhandling", "committedDate": "2020-10-27T19:10:22Z", "type": "forcePushed"}]}