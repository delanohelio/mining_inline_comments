{"pr_number": 526, "pr_title": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "pr_createdAt": "2020-02-21T02:05:56Z", "pr_url": "https://github.com/spinnaker/kork/pull/526", "timeline": [{"oid": "4fa9e20f884b5ff6bca215a17c9a24d1eb4476d7", "url": "https://github.com/spinnaker/kork/commit/4fa9e20f884b5ff6bca215a17c9a24d1eb4476d7", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T02:36:58Z", "type": "forcePushed"}, {"oid": "98c9ad592fe4275ba33706f8397edf9a6e7ee269", "url": "https://github.com/spinnaker/kork/commit/98c9ad592fe4275ba33706f8397edf9a6e7ee269", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T02:43:02Z", "type": "forcePushed"}, {"oid": "311e9537518c06e6fea2bd0b27d8bfa2a42afadb", "url": "https://github.com/spinnaker/kork/commit/311e9537518c06e6fea2bd0b27d8bfa2a42afadb", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T02:45:17Z", "type": "forcePushed"}, {"oid": "a29b97ef62523b0c1efe79ca38de30fafaa61b43", "url": "https://github.com/spinnaker/kork/commit/a29b97ef62523b0c1efe79ca38de30fafaa61b43", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T06:21:06Z", "type": "forcePushed"}, {"oid": "0a671422c9844b7db1e099fdc9ea6b4d010ba47d", "url": "https://github.com/spinnaker/kork/commit/0a671422c9844b7db1e099fdc9ea6b4d010ba47d", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T06:28:44Z", "type": "forcePushed"}, {"oid": "0811b565afce4a66ade5fb3f1604dcb5caa03774", "url": "https://github.com/spinnaker/kork/commit/0811b565afce4a66ade5fb3f1604dcb5caa03774", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T06:38:44Z", "type": "forcePushed"}, {"oid": "43013bb019821981f79dc8cf5c3eaee3103daaea", "url": "https://github.com/spinnaker/kork/commit/43013bb019821981f79dc8cf5c3eaee3103daaea", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T06:41:52Z", "type": "forcePushed"}, {"oid": "2e6dfb6821a99539ffc56cb05530164f91472767", "url": "https://github.com/spinnaker/kork/commit/2e6dfb6821a99539ffc56cb05530164f91472767", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T06:44:38Z", "type": "forcePushed"}, {"oid": "ab93205d97031eb9091d601c64eabbdea4c41512", "url": "https://github.com/spinnaker/kork/commit/ab93205d97031eb9091d601c64eabbdea4c41512", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T06:51:15Z", "type": "commit"}, {"oid": "ab93205d97031eb9091d601c64eabbdea4c41512", "url": "https://github.com/spinnaker/kork/commit/ab93205d97031eb9091d601c64eabbdea4c41512", "message": "feat(plugins): Use configured plugin version (falling back to latest if not specified) and check service version requirement constraints", "committedDate": "2020-02-21T06:51:15Z", "type": "forcePushed"}, {"oid": "0fdb537aa4b46976d8e102979d1c81fcd1869e45", "url": "https://github.com/spinnaker/kork/commit/0fdb537aa4b46976d8e102979d1c81fcd1869e45", "message": "fix(plugins): Add PluginNotFoundException", "committedDate": "2020-02-21T18:49:38Z", "type": "commit"}, {"oid": "51dd25a8e91b9aaeb2de41eb1d56ab9914f12aeb", "url": "https://github.com/spinnaker/kork/commit/51dd25a8e91b9aaeb2de41eb1d56ab9914f12aeb", "message": "fix(plugins): Add PluginDownloadException", "committedDate": "2020-02-21T19:00:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1Mzc3MA==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r382753770", "bodyText": "I don't understand the purpose of this flag. Can't the logic just be something like this:\nval version = attributes.getValue(\"Implementation-OSS-Version\") ?: attributes.getValue(\"Implementation-Version\")", "author": "robzienert", "createdAt": "2020-02-21T19:05:04Z", "path": "kork-core/src/main/java/com/netflix/spinnaker/kork/version/ManifestVersionResolver.java", "diffHunk": "@@ -35,18 +35,28 @@\n  *\n  * <p>This class iterates through matching JARs, rather than looking directly at itself, to support\n  * the use case where OSS services are being extended via a library pattern.\n+ *\n+ * <p>This class also supports reading the custom attribute `Implementation-OSS-Version`. This\n+ * attribute is useful if JARs are built in a process outside the context of OSS, but you need a\n+ * mechanism to get the underlining OSS version.\n  */\n @Slf4j\n public class ManifestVersionResolver implements VersionResolver {\n \n   private static final String GROUP = \"com.netflix.spinnaker\";\n \n   private final String group;\n+  private boolean ossAttribute = false;", "originalCommit": "51dd25a8e91b9aaeb2de41eb1d56ab9914f12aeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NjIyMQ==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r382756221", "bodyText": "Actually, my original intention here was to not fallback to Implementation-Version if Implementation-OSS-Version is desired (which I didn't do, got distracted but I will revisit this now).  I don't think we want to fallback if the OSS version is desired since that'll basically throw off all our service version constraint stuff.", "author": "jonsie", "createdAt": "2020-02-21T19:10:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1Mzc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxOTc1MQ==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r382819751", "bodyText": "This will now not fall through to Implementation-Version if the property use-oss-version-manifest-attribute is set in spinnaker.extensibility.", "author": "jonsie", "createdAt": "2020-02-21T21:43:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1Mzc3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2OTczNQ==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r384069735", "bodyText": "nit: How about spinnaker.extensibility.versioning.use-oss-version-manifest-attribute instead? I suspect we'll end up having other config informing Spinnaker how to resolve versions in the future, it'd be nice to have them all under one place.", "author": "robzienert", "createdAt": "2020-02-25T19:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1Mzc3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NDYzNg==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r382754636", "bodyText": "Should make this match case insensitive.", "author": "robzienert", "createdAt": "2020-02-21T19:06:48Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerServiceVersionManager.kt", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins\n+\n+import com.github.zafarkhaja.semver.Version\n+import org.pf4j.VersionManager\n+import org.pf4j.util.StringUtils\n+\n+/**\n+ * Since plugins can require multiple services, this class is necessary to ensure we are making the\n+ * constraint check against the correct service.\n+ */\n+class SpinnakerServiceVersionManager(\n+  private val serviceName: String\n+) : VersionManager {\n+\n+  override fun checkVersionConstraint(version: String, requires: String): Boolean {\n+    val serviceVersionRequirements =\n+      VersionRequirementsParser\n+        .parseAll(requires)\n+        .find { it.service == serviceName }", "originalCommit": "51dd25a8e91b9aaeb2de41eb1d56ab9914f12aeb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTgyNw==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r382755827", "bodyText": "Hmm, what object is this run on?", "author": "robzienert", "createdAt": "2020-02-21T19:09:24Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/PluginDownloadService.kt", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update\n+\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.events.PluginDownloaded\n+import com.netflix.spinnaker.kork.plugins.events.PluginDownloaded.Status.SUCCEEDED\n+import org.pf4j.PluginRuntimeException\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationEventPublisher\n+import java.io.File\n+import java.io.IOException\n+import java.lang.UnsupportedOperationException\n+import java.nio.file.Files\n+import java.nio.file.Path\n+import java.nio.file.StandardCopyOption\n+\n+/**\n+ * The [PluginDownloadService] is responsible for downloading the correct plugins from the plugin\n+ * update repositories.\n+ *\n+ * Plugins will not be loaded or started from this service.  All plugin loading and starting occurs\n+ * via [com.netflix.spinnaker.kork.plugins.ExtensionBeanDefinitionRegistryPostProcessor].\n+ *\n+ */\n+class PluginDownloadService(\n+  internal val updateManager: SpinnakerUpdateManager,\n+  internal val pluginManager: SpinnakerPluginManager,\n+  private val pluginStatusProvider: SpringPluginStatusProvider,\n+  private val applicationEventPublisher: ApplicationEventPublisher\n+) {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  /**\n+   * This is the algorithm for determining which plugins to download.\n+   *\n+   * This function first retrieves all available plugins from the plugin info cache.  It then filters\n+   * based on plugins that are enabled in the configuration for the service.  After that, it checks\n+   * the plugin version for the enabled plugin.  If the plugin version does not exist, then the latest\n+   * plugin release is selected.  Otherwise, it checks if the plugin has a version that matches the\n+   * configured plugin version AND the constraint for that version satisfies the service version\n+   * constraint (i.e., orca>=1.0.0 & <2.0.0).\n+   *\n+   * TODO(jonsie): Consider removing the fallback and throwing PluginNotFoundException once\n+   *  plugins are out of beta.\n+   */\n+  internal fun downloadPlugins() {\n+    val availablePlugins = updateManager.availablePlugins as MutableList<SpinnakerPluginInfo>\n+    log.info(\"Found '{}' available plugins\", availablePlugins.size)\n+\n+    availablePlugins\n+      .filter { !pluginStatusProvider.isPluginDisabled(it.id) }\n+      .forEach { enabledPlugin ->\n+        val configuredPluginVersion = pluginStatusProvider.configuredPluginVersion(enabledPlugin.id)\n+\n+        val pluginRelease = if (configuredPluginVersion == null) {\n+          val fallbackRelease = updateManager.getLastPluginRelease(enabledPlugin.id)\n+            ?: throw PluginNotFoundException(enabledPlugin.id, configuredPluginVersion)\n+          run {", "originalCommit": "51dd25a8e91b9aaeb2de41eb1d56ab9914f12aeb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc3OTMxMw==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r382779313", "bodyText": "it runs on PluginDownloadService but it's unnecessary - I removed this.", "author": "jonsie", "createdAt": "2020-02-21T20:00:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NTgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1NjE4OQ==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r382756189", "bodyText": "Great exception message.", "author": "robzienert", "createdAt": "2020-02-21T19:10:11Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/PluginDownloadService.kt", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.update\n+\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.events.PluginDownloaded\n+import com.netflix.spinnaker.kork.plugins.events.PluginDownloaded.Status.SUCCEEDED\n+import org.pf4j.PluginRuntimeException\n+import org.slf4j.LoggerFactory\n+import org.springframework.context.ApplicationEventPublisher\n+import java.io.File\n+import java.io.IOException\n+import java.lang.UnsupportedOperationException\n+import java.nio.file.Files\n+import java.nio.file.Path\n+import java.nio.file.StandardCopyOption\n+\n+/**\n+ * The [PluginDownloadService] is responsible for downloading the correct plugins from the plugin\n+ * update repositories.\n+ *\n+ * Plugins will not be loaded or started from this service.  All plugin loading and starting occurs\n+ * via [com.netflix.spinnaker.kork.plugins.ExtensionBeanDefinitionRegistryPostProcessor].\n+ *\n+ */\n+class PluginDownloadService(\n+  internal val updateManager: SpinnakerUpdateManager,\n+  internal val pluginManager: SpinnakerPluginManager,\n+  private val pluginStatusProvider: SpringPluginStatusProvider,\n+  private val applicationEventPublisher: ApplicationEventPublisher\n+) {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  /**\n+   * This is the algorithm for determining which plugins to download.\n+   *\n+   * This function first retrieves all available plugins from the plugin info cache.  It then filters\n+   * based on plugins that are enabled in the configuration for the service.  After that, it checks\n+   * the plugin version for the enabled plugin.  If the plugin version does not exist, then the latest\n+   * plugin release is selected.  Otherwise, it checks if the plugin has a version that matches the\n+   * configured plugin version AND the constraint for that version satisfies the service version\n+   * constraint (i.e., orca>=1.0.0 & <2.0.0).\n+   *\n+   * TODO(jonsie): Consider removing the fallback and throwing PluginNotFoundException once\n+   *  plugins are out of beta.\n+   */\n+  internal fun downloadPlugins() {\n+    val availablePlugins = updateManager.availablePlugins as MutableList<SpinnakerPluginInfo>\n+    log.info(\"Found '{}' available plugins\", availablePlugins.size)\n+\n+    availablePlugins\n+      .filter { !pluginStatusProvider.isPluginDisabled(it.id) }\n+      .forEach { enabledPlugin ->\n+        val configuredPluginVersion = pluginStatusProvider.configuredPluginVersion(enabledPlugin.id)\n+\n+        val pluginRelease = if (configuredPluginVersion == null) {\n+          val fallbackRelease = updateManager.getLastPluginRelease(enabledPlugin.id)\n+            ?: throw PluginNotFoundException(enabledPlugin.id, configuredPluginVersion)\n+          run {\n+              log.warn(\"'{}' is enabled but does not have a configured version, falling back to \" +\n+                \"version '{}'.\", enabledPlugin.id, fallbackRelease.version)\n+              fallbackRelease\n+          }\n+        } else {\n+          enabledPlugin.getReleases()\n+            .filter { release ->\n+              release.version == configuredPluginVersion\n+            }\n+            .firstOrNull { release ->\n+              pluginManager.versionManager.checkVersionConstraint(release.version, release.requires)\n+            } ?: throw PluginNotFoundException(enabledPlugin.id, configuredPluginVersion)\n+        }\n+\n+        log.debug(\"Downloading plugin '{}' with version '{}'\", enabledPlugin.id, pluginRelease.version)\n+        val downloaded = updateManager.downloadPluginRelease(enabledPlugin.id, pluginRelease.version)\n+        val succeeded = pluginManager.pluginsRoot.write(downloaded)\n+\n+        if (succeeded) {\n+          log.debug(\"Downloaded plugin '{}'\", enabledPlugin.id)\n+          applicationEventPublisher.publishEvent(\n+            PluginDownloaded(this, SUCCEEDED, enabledPlugin.id, pluginRelease.version)\n+          )\n+        } else {\n+          throw PluginDownloadException(enabledPlugin.id, pluginRelease.version)\n+        }\n+      }\n+  }\n+\n+  /**\n+   * Write the plugin, creating the the plugins root directory defined in [pluginManager] if\n+   * necessary.\n+   */\n+  private fun Path.write(downloaded: Path): Boolean {\n+    if (pluginManager.pluginsRoot == this) {\n+      val file = this.resolve(downloaded.fileName)\n+      File(this.toString()).mkdirs()\n+      try {\n+        return Files.move(downloaded, file, StandardCopyOption.REPLACE_EXISTING)\n+          .contains(downloaded.fileName)\n+      } catch (e: IOException) {\n+        throw PluginRuntimeException(e, \"Failed to write file '{}' to plugins folder\", file)\n+      }\n+    } else {\n+      throw UnsupportedOperationException(\"This operation is only supported on the specified plugins root directory.\")\n+    }\n+  }\n+\n+  internal class PluginNotFoundException(pluginId: String, configuredPluginVersion: String?) :\n+    IntegrationException(\n+      \"'$pluginId' is enabled with version '${configuredPluginVersion ?: \"undefined\" }', but a \" +\n+        \"release version could not be found that satisfies the version and/or the service \" +\n+        \"requirement constraints.\"\n+  )", "originalCommit": "51dd25a8e91b9aaeb2de41eb1d56ab9914f12aeb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1be4e265364e63e271ca164b02c2d2f9dbe5cce4", "url": "https://github.com/spinnaker/kork/commit/1be4e265364e63e271ca164b02c2d2f9dbe5cce4", "message": "fix(plugins): Ignore case, remove unnecessary run block, change oss version logic in ManifestVersionResolver, better comments", "committedDate": "2020-02-21T20:00:17Z", "type": "commit"}, {"oid": "06a9782238b96ace9d4c1c184ccaeb7af1302dad", "url": "https://github.com/spinnaker/kork/commit/06a9782238b96ace9d4c1c184ccaeb7af1302dad", "message": "fix(plugins): Service version resolution configuration", "committedDate": "2020-02-21T21:30:29Z", "type": "commit"}, {"oid": "52242677a8fef47d491cc4653c1b4828ae6b3f44", "url": "https://github.com/spinnaker/kork/commit/52242677a8fef47d491cc4653c1b4828ae6b3f44", "message": "fix(plugins): Use the Binder API for service resolution boolean instead of ConfigResolver", "committedDate": "2020-02-21T21:41:40Z", "type": "commit"}, {"oid": "03b2dc51217299307d75e9a26470a8efbeb743b9", "url": "https://github.com/spinnaker/kork/commit/03b2dc51217299307d75e9a26470a8efbeb743b9", "message": "fix(plugins): Use the Binder API for service resolution boolean instead of ConfigResolver", "committedDate": "2020-02-21T21:42:19Z", "type": "commit"}, {"oid": "3ed35718bcaf22e826b71b714511a60b007b8a58", "url": "https://github.com/spinnaker/kork/commit/3ed35718bcaf22e826b71b714511a60b007b8a58", "message": "Merge branch 'master' into feat-plugin-versions", "committedDate": "2020-02-25T02:51:19Z", "type": "commit"}, {"oid": "9735a2728e66c63301e99f6133014fd71ea0b091", "url": "https://github.com/spinnaker/kork/commit/9735a2728e66c63301e99f6133014fd71ea0b091", "message": "fix(plugins): Big refactor to support mutliple mechanisms for determing plugin releases and also pre-existing plugins on the filesystem", "committedDate": "2020-02-25T18:21:41Z", "type": "commit"}, {"oid": "c6c3a8fcd729e9ac1c113647b6fe5f00f8be2a6c", "url": "https://github.com/spinnaker/kork/commit/c6c3a8fcd729e9ac1c113647b6fe5f00f8be2a6c", "message": "fix(plugins): Spotless", "committedDate": "2020-02-25T18:28:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NTQzNw==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r384045437", "bodyText": "pluginManager.loadPlugins() needs to run before we download plugins so we know what is loaded and if there is a new version that should be downloaded.", "author": "jonsie", "createdAt": "2020-02-25T18:30:26Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/ExtensionBeanDefinitionRegistryPostProcessor.kt", "diffHunk": "@@ -47,8 +49,10 @@ class ExtensionBeanDefinitionRegistryPostProcessor(\n   override fun postProcessBeanDefinitionRegistry(registry: BeanDefinitionRegistry) {\n     val start = System.currentTimeMillis()\n     log.debug(\"Preparing plugins\")\n-    updateManagerService.checkForUpdates()\n     pluginManager.loadPlugins()\n+    updateManager.downloadPlugins(", "originalCommit": "c6c3a8fcd729e9ac1c113647b6fe5f00f8be2a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjMyMQ==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r384072321", "bodyText": "Code comment instead of PR comment. That's valuable context that shouldn't require hunting for this PR comment.", "author": "robzienert", "createdAt": "2020-02-25T19:19:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NTQzNw=="}], "type": "inlineReview"}, {"oid": "2a037be30609e3a0b3cb6c863743db0698a05ca8", "url": "https://github.com/spinnaker/kork/commit/2a037be30609e3a0b3cb6c863743db0698a05ca8", "message": "Merge branch 'master' into feat-plugin-versions", "committedDate": "2020-02-25T19:12:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjEwOA==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r384072108", "bodyText": "Worded a little confusingly. Perhaps:\n\nDefines what MANIFEST.MF attribute to use in determining a service version. By default, a service version is determined by reading the \"Implementation-Version\" attribute. If this property is set to true, however, \"Implementation-OSS-Version\" will be used to support use cases where services are being extended and rebuilt. Unless you're re-building services, this should remain its default value.", "author": "robzienert", "createdAt": "2020-02-25T19:19:08Z", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsConfigurationProperties.java", "diffHunk": "@@ -98,4 +98,12 @@ public boolean isEnabled() {\n       return enabled;\n     }\n   }\n+\n+  /**\n+   * If set to true, the service version resolution will use the MANIFEST.MF attribute\n+   * \"Implementation-OSS-Version\". By default, this is false which means the version attribute\n+   * lookup will be \"Implementation-Version\" -- for most OSS users that will still be the OSS\n+   * version.", "originalCommit": "2a037be30609e3a0b3cb6c863743db0698a05ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMDM5OA==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r384100398", "bodyText": "Appreciated.", "author": "jonsie", "createdAt": "2020-02-25T20:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjEwOA=="}], "type": "inlineReview"}, {"oid": "56c3200b169d4509788739d505212f56001da0de", "url": "https://github.com/spinnaker/kork/commit/56c3200b169d4509788739d505212f56001da0de", "message": "fix(plugins): Add PropertySourcePluginReleaseProviderTest", "committedDate": "2020-02-25T23:26:06Z", "type": "commit"}, {"oid": "60bebe9cd79b5896f4c78bd84f3a37e82e34350c", "url": "https://github.com/spinnaker/kork/commit/60bebe9cd79b5896f4c78bd84f3a37e82e34350c", "message": "fix(plugins): Slight renaming of things", "committedDate": "2020-02-26T00:03:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDIwMjQ2MA==", "url": "https://github.com/spinnaker/kork/pull/526#discussion_r384202460", "bodyText": "Feels like steps 1-4 could eventually be broken out into a separate service class - would make it much easier to test.", "author": "jonsie", "createdAt": "2020-02-26T00:05:32Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/ExtensionBeanDefinitionRegistryPostProcessor.kt", "diffHunk": "@@ -47,8 +49,19 @@ class ExtensionBeanDefinitionRegistryPostProcessor(\n   override fun postProcessBeanDefinitionRegistry(registry: BeanDefinitionRegistry) {\n     val start = System.currentTimeMillis()\n     log.debug(\"Preparing plugins\")\n-    updateManagerService.checkForUpdates()\n+\n+    // 1) Load plugins prior to downloading so we can resolve what needs to be updated\n     pluginManager.loadPlugins()\n+\n+    // 2) Determine the plugins for release from the list of available plugins\n+    val releases = pluginInfoReleaseProvider.getReleases(updateManager.availablePlugins)\n+\n+    // 3) Download releases, updating previously loaded plugins where necessary\n+    updateManager.downloadPluginReleases(releases).forEach { pluginPath ->\n+      pluginManager.loadPlugin(pluginPath)\n+    }\n+\n+    // 4) Start plugins - should only be called once in kork-plugins\n     pluginManager.startPlugins()", "originalCommit": "60bebe9cd79b5896f4c78bd84f3a37e82e34350c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "340f0b0da28656b25f35f7d54e590aeacb946cc3", "url": "https://github.com/spinnaker/kork/commit/340f0b0da28656b25f35f7d54e590aeacb946cc3", "message": "fix(plugins): SpinnakerUpdateManagerTest", "committedDate": "2020-02-26T01:15:34Z", "type": "commit"}, {"oid": "b1dd32e3e631b45cbab52654d4db01385635cfc9", "url": "https://github.com/spinnaker/kork/commit/b1dd32e3e631b45cbab52654d4db01385635cfc9", "message": "Merge branch 'master' into feat-plugin-versions", "committedDate": "2020-02-26T01:20:32Z", "type": "commit"}, {"oid": "35705cfb644e6f151e4c72bd86dc1c3e9723b7df", "url": "https://github.com/spinnaker/kork/commit/35705cfb644e6f151e4c72bd86dc1c3e9723b7df", "message": "fix(plugins): Add another test to SpinnakerUpdateManagerTest", "committedDate": "2020-02-26T01:40:26Z", "type": "commit"}]}