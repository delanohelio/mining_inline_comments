{"pr_number": 724, "pr_title": "Service client implementation", "pr_createdAt": "2020-07-14T01:03:31Z", "pr_url": "https://github.com/spinnaker/kork/pull/724", "timeline": [{"oid": "caafc2f0180f8cea6853e6163637e5d63a51a359", "url": "https://github.com/spinnaker/kork/commit/caafc2f0180f8cea6853e6163637e5d63a51a359", "message": "fix(misc): Service client implementation", "committedDate": "2020-07-14T00:47:47Z", "type": "commit"}, {"oid": "307d995b54d8faf544f32358073a941c4332365c", "url": "https://github.com/spinnaker/kork/commit/307d995b54d8faf544f32358073a941c4332365c", "message": "fix(misc): Service client implementation", "committedDate": "2020-07-14T01:01:50Z", "type": "commit"}, {"oid": "3594dead2ad56461ab32ba02d5af206e17b3c39b", "url": "https://github.com/spinnaker/kork/commit/3594dead2ad56461ab32ba02d5af206e17b3c39b", "message": "fix(misc): Service client implementation", "committedDate": "2020-07-14T03:34:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NzY2Nw==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r454477667", "bodyText": "these should all be implementation or runtimeOnly if this module doesn't expose a public interface", "author": "cfieber", "createdAt": "2020-07-14T16:18:12Z", "path": "kork-serviceclient-retrofit/kork-serviceclient-retrofit.gradle", "diffHunk": "@@ -0,0 +1,18 @@\n+apply plugin: \"java-library\"\n+\n+dependencies {\n+  api(platform(project(\":spinnaker-dependencies\")))\n+\n+  implementation project(\":kork-web\")\n+\n+  api \"com.squareup.retrofit:retrofit\"", "originalCommit": "3594dead2ad56461ab32ba02d5af206e17b3c39b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MTMzMg==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r454481332", "bodyText": "It will be interesting to see how often this method is needed in client code.\nI wonder if we could define an interface something like ServiceClientCustomizer<B>, and let customizations happen via beans that implement that as needed so this doesn't have to happen at the service client creation call site.\nJust a thought though", "author": "cfieber", "createdAt": "2020-07-14T16:23:34Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+\n+/**\n+ * Factory to build clients/builders that help to make remote http calls.\n+ *\n+ * @param <B> represents client builder type\n+ */\n+public interface ServiceClientFactory<B> {\n+\n+  /**\n+   * Builds a concrete client capable of making HTTP calls.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually a interface with all the remote method definitions.\n+   * @return a implementation of the type of client given.\n+   */\n+  public <T> T create(Class<T> type, ServiceEndpoint serviceEndpoint);\n+\n+  /**\n+   * Initializes and returns the underlying client builder implementation for further customizations\n+   * as needed.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually represents a interface with all the remote method\n+   *     definitions.\n+   * @return a client builder\n+   */\n+  public <T> B build(Class<T> type, ServiceEndpoint serviceEndpoint);", "originalCommit": "3594dead2ad56461ab32ba02d5af206e17b3c39b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzODY5NQ==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r454638695", "bodyText": "Good point. Probably worth having specialized clients also built the same way as default one by implementing the same interface.  Will put in a different approach.", "author": "srekapalli", "createdAt": "2020-07-14T20:54:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ4MTMzMg=="}], "type": "inlineReview"}, {"oid": "f7f6252c34012bcf309cba1717354a09382a4c67", "url": "https://github.com/spinnaker/kork/commit/f7f6252c34012bcf309cba1717354a09382a4c67", "message": "fix(misc): allow customizable service client factories to be injected later", "committedDate": "2020-07-14T22:17:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDcwNDUyNQ==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r454704525", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public default <T> boolean supports(Class<T> type, ServiceEndpoint serviceEndpoint) {\n          \n          \n            \n              public default boolean supports(Class<?> type, ServiceEndpoint serviceEndpoint) {\n          \n      \n    \n    \n  \n\nI think the type isn't going to be known for implementors of this method (if it is, <T> could be moved to the class level)", "author": "cfieber", "createdAt": "2020-07-14T23:35:01Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+\n+/** Factory to build clients/builders that help to make remote http calls. */\n+public interface ServiceClientFactory {\n+\n+  /**\n+   * Builds a concrete client capable of making HTTP calls.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually a interface with all the remote method definitions.\n+   * @return a implementation of the type of client given.\n+   */\n+  public <T> T getClient(Class<T> type, ServiceEndpoint serviceEndpoint);\n+\n+  /**\n+   * Decide if this factory can support the endpoint provided.\n+   *\n+   * @param type client type\n+   * @param serviceEndpoint endpoint configuration\n+   * @param <T> type of client , usually represents a interface with all the remote method\n+   *     definitions.\n+   * @return a client builder\n+   */\n+  public default <T> boolean supports(Class<T> type, ServiceEndpoint serviceEndpoint) {", "originalCommit": "f7f6252c34012bcf309cba1717354a09382a4c67", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5c5e6754924d22aafd5e53e14698cb53524fb282", "url": "https://github.com/spinnaker/kork/commit/5c5e6754924d22aafd5e53e14698cb53524fb282", "message": "fix(misc): allow customizable service client factories to be injected later", "committedDate": "2020-07-15T00:18:18Z", "type": "commit"}, {"oid": "f99426ba37cb2e77ce7965e9a7151fe8b4f16118", "url": "https://github.com/spinnaker/kork/commit/f99426ba37cb2e77ce7965e9a7151fe8b4f16118", "message": "fix(misc): service client implementation", "committedDate": "2020-07-20T06:31:10Z", "type": "commit"}, {"oid": "5a4a989686346265e51f3f5e923c65f1dd43350b", "url": "https://github.com/spinnaker/kork/commit/5a4a989686346265e51f3f5e923c65f1dd43350b", "message": "Merge branch 'master' into service_client", "committedDate": "2020-07-20T06:40:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYyMzgyNg==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457623826", "bodyText": "I would also change this to getService.", "author": "jonsie", "createdAt": "2020-07-20T18:55:46Z", "path": "kork-serviceclient-retrofit/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/DefaultServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import static retrofit.Endpoints.newFixedEndpoint;\n+\n+import com.jakewharton.retrofit.Ok3Client;\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import com.netflix.spinnaker.retrofit.Slf4jRetrofitLogger;\n+import retrofit.Endpoint;\n+import retrofit.RequestInterceptor;\n+import retrofit.RestAdapter;\n+import retrofit.converter.JacksonConverter;\n+\n+@NonnullByDefault\n+public class DefaultServiceClientFactory implements ServiceClientFactory {\n+\n+  private final RestAdapter.LogLevel retrofitLogLevel;\n+  private final OkHttpClientProvider clientProvider;\n+  private final RequestInterceptor spinnakerRequestInterceptor;\n+\n+  DefaultServiceClientFactory(\n+      RestAdapter.LogLevel retrofitLogLevel,\n+      OkHttpClientProvider clientProvider,\n+      RequestInterceptor spinnakerRequestInterceptor) {\n+    this.retrofitLogLevel = retrofitLogLevel;\n+    this.clientProvider = clientProvider;\n+    this.spinnakerRequestInterceptor = spinnakerRequestInterceptor;\n+  }\n+\n+  @Override\n+  public <T> T getClient(Class<T> type, ServiceEndpoint serviceEndpoint) {", "originalCommit": "5a4a989686346265e51f3f5e923c65f1dd43350b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bc123e951375865ced93ed96422b2cb2979f30c5", "url": "https://github.com/spinnaker/kork/commit/bc123e951375865ced93ed96422b2cb2979f30c5", "message": "fix(misc): rename the module and explcitly callout retrofit service provider", "committedDate": "2020-07-20T19:55:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyMjk0NQ==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457722945", "bodyText": "Probably change this to RetrofitServiceFactory too.", "author": "jonsie", "createdAt": "2020-07-20T22:17:10Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/ServiceClientFactory.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+\n+/** Factory to build a client for a service. */\n+public interface ServiceClientFactory {", "originalCommit": "bc123e951375865ced93ed96422b2cb2979f30c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNDA0NA==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457734044", "bodyText": "I will leave this as is (ServiceClientFactory), since it doesn't carry Retrofit knowledge.", "author": "srekapalli", "createdAt": "2020-07-20T22:47:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyMjk0NQ=="}], "type": "inlineReview"}, {"oid": "602d87936e23fe3504bca76370cdf8080aec65ce", "url": "https://github.com/spinnaker/kork/commit/602d87936e23fe3504bca76370cdf8080aec65ce", "message": "fix(misc): accept object mapper", "committedDate": "2020-07-20T22:26:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczOTU1Ng==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457739556", "bodyText": "Maybe this can just be called the RetrofitServiceFactory?", "author": "jonsie", "createdAt": "2020-07-20T23:02:25Z", "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/web/serviceclient/DefaultRetrofitServiceFactory.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.web.serviceclient;\n+\n+import static retrofit.Endpoints.newFixedEndpoint;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.jakewharton.retrofit.Ok3Client;\n+import com.netflix.spinnaker.config.DefaultServiceEndpoint;\n+import com.netflix.spinnaker.config.ServiceEndpoint;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import com.netflix.spinnaker.kork.annotations.NonnullByDefault;\n+import com.netflix.spinnaker.retrofit.Slf4jRetrofitLogger;\n+import retrofit.Endpoint;\n+import retrofit.RequestInterceptor;\n+import retrofit.RestAdapter;\n+import retrofit.converter.JacksonConverter;\n+\n+@NonnullByDefault\n+class DefaultRetrofitServiceFactory implements ServiceClientFactory {", "originalCommit": "602d87936e23fe3504bca76370cdf8080aec65ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ded018770f7ba47ab2b70bb35296f16967d7f26c", "url": "https://github.com/spinnaker/kork/commit/ded018770f7ba47ab2b70bb35296f16967d7f26c", "message": "fix(misc): rename pkgs", "committedDate": "2020-07-20T23:22:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NTc3Mg==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457775772", "bodyText": "Under what context would we disable this?", "author": "jonsie", "createdAt": "2020-07-21T01:05:59Z", "path": "kork-retrofit/src/main/java/com/netflix/spinnaker/kork/retrofit/RetrofitServiceFactoryAutoConfiguration.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.retrofit;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.netflix.spinnaker.config.okhttp3.OkHttpClientProvider;\n+import java.util.List;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n+import retrofit.RequestInterceptor;\n+import retrofit.RestAdapter;\n+\n+@Configuration\n+@ConditionalOnProperty(value = \"retrofit.enabled\", matchIfMissing = true)", "originalCommit": "ded018770f7ba47ab2b70bb35296f16967d7f26c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NzY3NQ==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457777675", "bodyText": "Probably never if we have this as a dependency in the application , but during test phase sometimes It's useful to turn off things if needed and wire up the bare minimum instead of making custom configurations.", "author": "srekapalli", "createdAt": "2020-07-21T01:13:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NTc3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3ODcyOQ==", "url": "https://github.com/spinnaker/kork/pull/724#discussion_r457778729", "bodyText": "Sounds good.", "author": "jonsie", "createdAt": "2020-07-21T01:16:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc3NTc3Mg=="}], "type": "inlineReview"}, {"oid": "2f5b26984e618a348d192c911f5b45de81962e7d", "url": "https://github.com/spinnaker/kork/commit/2f5b26984e618a348d192c911f5b45de81962e7d", "message": "fix(misc): rename pkgs", "committedDate": "2020-07-21T02:07:06Z", "type": "commit"}]}