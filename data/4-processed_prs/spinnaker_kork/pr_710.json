{"pr_number": 710, "pr_title": " refactor(eureka): Move Eureka out of kork-core into kork-eureka", "pr_createdAt": "2020-07-08T19:39:54Z", "pr_url": "https://github.com/spinnaker/kork/pull/710", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMjIyNQ==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451802225", "bodyText": "I think the only reason that we have archaius config in here is to bridge spring configuration to the legacy eureka client - I think this should move along into the kork-eureka module", "author": "cfieber", "createdAt": "2020-07-08T20:19:55Z", "path": "kork-core/kork-core.gradle", "diffHunk": "@@ -11,15 +11,13 @@ dependencies {\n   api \"org.springframework.boot:spring-boot-autoconfigure\"\n   api \"org.springframework.boot:spring-boot-starter-aop\"\n   api \"org.springframework.boot:spring-boot-starter-actuator\"\n-  api \"com.netflix.eureka:eureka-client\"\n   api \"com.netflix.spectator:spectator-api\"\n   api \"com.google.code.findbugs:jsr305\"\n   api \"io.github.resilience4j:resilience4j-annotations\"\n   api \"io.github.resilience4j:resilience4j-retry\"\n   api \"io.github.resilience4j:resilience4j-spring-boot2\"\n   api \"javax.inject:javax.inject:1\"\n \n-  implementation \"com.netflix.netflix-commons:netflix-eventbus\"\n   implementation \"com.netflix.archaius:archaius-core\"", "originalCommit": "a9c0f1d09244d75ecc3ba0266bcbc9374d987958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMzI4MQ==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451803281", "bodyText": "Well, there's other Archaius stuff in the module - I was going to deal with all that in a separate PR, but I'll investigate doing it in one shot.", "author": "robzienert", "createdAt": "2020-07-08T20:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwMjIyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzc0OA==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451807748", "bodyText": "I think there should be a spring.factories in here referencing this config, and I also think that PlatformComponents in kork-core needs to remove this from its Import but I don't see that change in here", "author": "cfieber", "createdAt": "2020-07-08T20:30:31Z", "path": "kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java", "diffHunk": "@@ -16,6 +16,8 @@\n \n package com.netflix.spinnaker.kork.eureka;", "originalCommit": "a9c0f1d09244d75ecc3ba0266bcbc9374d987958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTg2NDI1MQ==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451864251", "bodyText": "Ah, yarp. I did do that, but didn't push it.", "author": "robzienert", "createdAt": "2020-07-08T22:41:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwNzc0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTIzMQ==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451809231", "bodyText": "I think it might be worth adding another autoconfiguration class here conditional on eureka.enabled=false that publishes a Status UP event (I know something similar exists in orca and others that try to control polling activity based on in-service status for the case where there is no discovery service):\nhttps://github.com/spinnaker/orca/blob/master/orca-eureka/src/main/java/com/netflix/spinnaker/orca/eureka/NoDiscoveryApplicationStatusPublisher.java", "author": "cfieber", "createdAt": "2020-07-08T20:33:40Z", "path": "kork-eureka/src/main/java/com/netflix/spinnaker/kork/eureka/EurekaComponents.java", "diffHunk": "@@ -16,6 +16,8 @@\n \n package com.netflix.spinnaker.kork.eureka;\n \n+import static com.netflix.spinnaker.kork.eureka.InstanceStatusBridge.fromEureka;\n+\n import com.netflix.appinfo.*;", "originalCommit": "a9c0f1d09244d75ecc3ba0266bcbc9374d987958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTgwNA==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r451809804", "bodyText": "alternatively there could be an autoconfiguration in kork-core that supplies that ConditionalOnMissingBean, and this configuration could be flagged to AutoConfigureBefore that configuration so the conditional stuff actually works", "author": "cfieber", "createdAt": "2020-07-08T20:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgwOTIzMQ=="}], "type": "inlineReview"}, {"oid": "d284942b3f683e3f17a0a4d5b6a499da9709cc4c", "url": "https://github.com/spinnaker/kork/commit/d284942b3f683e3f17a0a4d5b6a499da9709cc4c", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T17:06:21Z", "type": "forcePushed"}, {"oid": "0130f6ca189f4ba556484f972d2bf04a6a90cb40", "url": "https://github.com/spinnaker/kork/commit/0130f6ca189f4ba556484f972d2bf04a6a90cb40", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T17:06:37Z", "type": "forcePushed"}, {"oid": "0d77525f5933a0e402110cf1b5f42625bf0a7a72", "url": "https://github.com/spinnaker/kork/commit/0d77525f5933a0e402110cf1b5f42625bf0a7a72", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T17:09:32Z", "type": "forcePushed"}, {"oid": "077b42ea9e8b2c18e047847ecf09b0a67d4c93cd", "url": "https://github.com/spinnaker/kork/commit/077b42ea9e8b2c18e047847ecf09b0a67d4c93cd", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T17:10:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MjU2MA==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r452392560", "bodyText": "nice addition, thanks!", "author": "cfieber", "createdAt": "2020-07-09T17:56:02Z", "path": "kork-eureka/src/test/kotlin/com/netflix/spinnaker/kork/EurekaSystemTest.kt", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package com.netflix.spinnaker.kork\n+\n+import com.netflix.spinnaker.kork.discovery.DiscoveryStatusPublisher\n+import com.netflix.spinnaker.kork.discovery.NoDiscoveryStatusPublisher\n+import com.netflix.spinnaker.kork.eureka.EurekaStatusSubscriber\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import io.micrometer.core.instrument.MeterRegistry\n+import io.micrometer.core.instrument.logging.LoggingMeterRegistry\n+import org.springframework.boot.actuate.autoconfigure.health.HealthContributorAutoConfiguration\n+import org.springframework.boot.actuate.autoconfigure.health.HealthEndpointAutoConfiguration\n+import org.springframework.boot.autoconfigure.AutoConfigurations\n+import org.springframework.boot.test.context.assertj.AssertableApplicationContext\n+import org.springframework.boot.test.context.runner.ApplicationContextRunner\n+import org.springframework.context.annotation.Bean\n+import org.springframework.context.annotation.Configuration\n+import org.springframework.context.annotation.Import\n+import strikt.api.expect\n+import strikt.assertions.isA\n+import strikt.assertions.isEqualTo\n+\n+class EurekaSystemTest : JUnit5Minutests {", "originalCommit": "077b42ea9e8b2c18e047847ecf09b0a67d4c93cd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MzEyMw==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r452393123", "bodyText": "does this still need to be transitive=false? (I had only flipped it that way to try and figure out what dependencies might have been confusing the groovy compiler)", "author": "cfieber", "createdAt": "2020-07-09T17:57:09Z", "path": "kork-security/kork-security.gradle", "diffHunk": "@@ -5,14 +5,17 @@ apply from: \"$rootDir/gradle/lombok.gradle\"\n dependencies {\n   api(platform(project(\":spinnaker-dependencies\")))\n \n-  api project(\":kork-core\")\n+  implementation(project(\":kork-core\")) { transitive = false }", "originalCommit": "077b42ea9e8b2c18e047847ecf09b0a67d4c93cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5OTE5OA==", "url": "https://github.com/spinnaker/kork/pull/710#discussion_r452399198", "bodyText": "Ah, no it appears not. Nice.", "author": "robzienert", "createdAt": "2020-07-09T18:08:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM5MzEyMw=="}], "type": "inlineReview"}, {"oid": "6365b6016a6f1c63d097688a3070c9196dd4d6fc", "url": "https://github.com/spinnaker/kork/commit/6365b6016a6f1c63d097688a3070c9196dd4d6fc", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T18:08:20Z", "type": "commit"}, {"oid": "6365b6016a6f1c63d097688a3070c9196dd4d6fc", "url": "https://github.com/spinnaker/kork/commit/6365b6016a6f1c63d097688a3070c9196dd4d6fc", "message": "refactor(eureka): Move Eureka out of kork-core into kork-eureka", "committedDate": "2020-07-09T18:08:20Z", "type": "forcePushed"}]}