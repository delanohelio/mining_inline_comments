{"pr_number": 545, "pr_title": "fix(plugins): Do not enable configuration properties class OkHttpClientConfigurationProperties in static configuration context", "pr_createdAt": "2020-03-06T00:41:50Z", "pr_url": "https://github.com/spinnaker/kork/pull/545", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0ODU2Mg==", "url": "https://github.com/spinnaker/kork/pull/545#discussion_r388648562", "bodyText": "Because we enabled configuration properties for OkHttpClientConfigurationProperties in this configuration static context (wherein beans are created early in the app lifecycle), I believe this properties object was being instantiated without all the parameters loaded from the configuration.  This resulted in missing configuration properties that are important for a functioning http client (like a keystore and a truststore, for example).", "author": "jonsie", "createdAt": "2020-03-06T00:43:22Z", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/HttpClientSdkConfiguration.java", "diffHunk": "@@ -25,30 +26,39 @@\n import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n import java.util.ArrayList;\n import java.util.List;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import javax.inject.Provider;\n+import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.boot.context.properties.bind.Bindable;\n+import org.springframework.boot.context.properties.bind.Binder;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Import;\n import org.springframework.core.env.Environment;\n \n @Configuration\n-@EnableConfigurationProperties(OkHttpClientConfigurationProperties.class)", "originalCommit": "0f4930473adf2f108ebf7c761fe757dc71959bba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "17a739263437e7dc76c9320172b9445f98cf577f", "url": "https://github.com/spinnaker/kork/commit/17a739263437e7dc76c9320172b9445f98cf577f", "message": "fix(plugins): Do not enable configuration properties class OkHttpClientConfigurationProperties in static configuration context", "committedDate": "2020-03-06T00:47:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY0OTk0Nw==", "url": "https://github.com/spinnaker/kork/pull/545#discussion_r388649947", "bodyText": "Unrelated test change I had locally, figure I may as well add it.", "author": "jonsie", "createdAt": "2020-03-06T00:48:22Z", "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/proxy/aspects/LogInvocationAspectTest.kt", "diffHunk": "@@ -49,12 +50,15 @@ class LogInvocationAspectTest : JUnit5Minutests {\n       expectThat(subject.supports(metricInvocationState.javaClass)).isFalse()\n     }\n \n-    test(\"Plugin ID and extension name added to the MDC before invocation\") {\n-      subject.before(target, proxy, method, args, spinnakerPluginDescriptor)\n-      val mdcPluginId = MDC.get(Header.PLUGIN_ID.header)\n-      val mdcPluginExtension = MDC.get(Header.PLUGIN_EXTENSION.header)\n-      expectThat(mdcPluginId).isEqualTo(spinnakerPluginDescriptor.pluginId)\n-      expectThat(mdcPluginExtension).isEqualTo(target.javaClass.simpleName.toString())\n+    test(\"Plugin ID and extension name added to the MDC before invocation, removes in finally\") {\n+      val invocatonState = subject.before(target, proxy, method, args, spinnakerPluginDescriptor)\n+      expectThat(MDC.get(Header.PLUGIN_ID.header)).isEqualTo(spinnakerPluginDescriptor.pluginId)\n+      expectThat(MDC.get(Header.PLUGIN_EXTENSION.header)).isEqualTo(target.javaClass.simpleName.toString())\n+\n+      subject.finally(invocatonState)\n+\n+      expectThat(MDC.get(Header.PLUGIN_ID.header)).isNull()\n+      expectThat(MDC.get(Header.PLUGIN_EXTENSION.header)).isNull()", "originalCommit": "17a739263437e7dc76c9320172b9445f98cf577f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "08596a3f537eed98c4ea0a3fded1943a64ac4833", "url": "https://github.com/spinnaker/kork/commit/08596a3f537eed98c4ea0a3fded1943a64ac4833", "message": "fix(plugins): Do not enable configuration properties class OkHttpClientConfigurationProperties in static configuration context", "committedDate": "2020-03-06T00:57:20Z", "type": "commit"}, {"oid": "08596a3f537eed98c4ea0a3fded1943a64ac4833", "url": "https://github.com/spinnaker/kork/commit/08596a3f537eed98c4ea0a3fded1943a64ac4833", "message": "fix(plugins): Do not enable configuration properties class OkHttpClientConfigurationProperties in static configuration context", "committedDate": "2020-03-06T00:57:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY1NDk5MA==", "url": "https://github.com/spinnaker/kork/pull/545#discussion_r388654990", "bodyText": "I'd also like to not wire HttpClientSdkConfiguration as we work through some additional issues with plugin http clients.", "author": "jonsie", "createdAt": "2020-03-06T00:58:25Z", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/PluginsAutoConfiguration.java", "diffHunk": "@@ -66,7 +66,7 @@\n \n @Configuration\n @EnableConfigurationProperties(PluginsConfigurationProperties.class)\n-@Import({Front50PluginsConfiguration.class, HttpClientSdkConfiguration.class})\n+@Import({Front50PluginsConfiguration.class})\n public class PluginsAutoConfiguration {", "originalCommit": "08596a3f537eed98c4ea0a3fded1943a64ac4833", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}