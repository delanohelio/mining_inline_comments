{"pr_number": 633, "pr_title": "feat(plugins): Add Meter annotation, limit metering extension invocation to methods annotated with @Meter", "pr_createdAt": "2020-05-04T02:53:12Z", "pr_url": "https://github.com/spinnaker/kork/pull/633", "timeline": [{"oid": "43c0a71ad6e2e293b9009c0b5c083443aa953136", "url": "https://github.com/spinnaker/kork/commit/43c0a71ad6e2e293b9009c0b5c083443aa953136", "message": "feat(plugins): Add Meter annotation, limit metering extension invocation to methods annotated with @Meter", "committedDate": "2020-05-04T02:57:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MTg4OQ==", "url": "https://github.com/spinnaker/kork/pull/633#discussion_r419551889", "bodyText": "I think you implicitly get invocation counts already from a timer metric (it keeps track of total time recorded and the count)", "author": "cfieber", "createdAt": "2020-05-04T16:10:15Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/aspects/MetricInvocationAspect.kt", "diffHunk": "@@ -123,36 +125,41 @@ class MetricInvocationAspect(\n       return null\n     } else {\n       return this.get(method) { m ->\n-        val metricIds = MetricIds(\n-          timingId = registry.createId(toMetricId(m, descriptor.pluginId, TIMING), mapOf(\n-            Pair(\"pluginVersion\", descriptor.version),\n-            Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n-          )),\n-          invocationId = registry.createId(toMetricId(m, descriptor.pluginId, INVOCATIONS), mapOf(\n-            Pair(\"pluginVersion\", descriptor.version),\n-            Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n-          ))\n-        )\n-\n-        for (mutableEntry in this.asMap()) {\n-          if (mutableEntry.value.invocationId.name() == metricIds.invocationId.name()) {\n-            throw MetricNameCollisionException(target, mutableEntry.key, m)\n+        m.declaredAnnotations\n+          .find { it is Meter }\n+          .let { meterAnnotation ->\n+            (meterAnnotation as Meter)\n+\n+            val metricIds = MetricIds(\n+              timingId = registry.createId(toMetricId(m, descriptor.pluginId, meterAnnotation.id, TIMING), mapOf(\n+                Pair(\"pluginVersion\", descriptor.version),\n+                Pair(\"pluginExtension\", target.javaClass.simpleName.toString())\n+              )),\n+              invocationId = registry.createId(toMetricId(m, descriptor.pluginId, meterAnnotation.id, INVOCATIONS), mapOf(", "originalCommit": "43c0a71ad6e2e293b9009c0b5c083443aa953136", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTYwNTU2Nw==", "url": "https://github.com/spinnaker/kork/pull/633#discussion_r419605567", "bodyText": "Well them, I shall remove this.", "author": "jonsie", "createdAt": "2020-05-04T17:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU1MTg4OQ=="}], "type": "inlineReview"}, {"oid": "473670f86fb84b6267d671274444b397ebb71b1b", "url": "https://github.com/spinnaker/kork/commit/473670f86fb84b6267d671274444b397ebb71b1b", "message": "feat(plugins): Add Meter annotation, limit metering extension invocation to methods annotated with @Meter", "committedDate": "2020-05-04T17:43:57Z", "type": "commit"}, {"oid": "473670f86fb84b6267d671274444b397ebb71b1b", "url": "https://github.com/spinnaker/kork/commit/473670f86fb84b6267d671274444b397ebb71b1b", "message": "feat(plugins): Add Meter annotation, limit metering extension invocation to methods annotated with @Meter", "committedDate": "2020-05-04T17:43:57Z", "type": "forcePushed"}]}