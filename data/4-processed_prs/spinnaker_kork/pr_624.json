{"pr_number": 624, "pr_title": "refactor(plugins): Add AggregatePluginInfoReleaseProvider that aggregates over list of PluginInfoReleaseSource", "pr_createdAt": "2020-04-25T04:05:08Z", "pr_url": "https://github.com/spinnaker/kork/pull/624", "timeline": [{"oid": "be724cbd0899ce08d76cdfda276ee25a431ffbb1", "url": "https://github.com/spinnaker/kork/commit/be724cbd0899ce08d76cdfda276ee25a431ffbb1", "message": "refactor(plugins): Add AggregatePluginInfoReleaseProvider that aggregates over list of PluginInfoReleaseSource", "committedDate": "2020-04-25T04:03:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk3MTk5Mw==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r414971993", "bodyText": "The motivation here is, I wanted to use something like this in Gate except I didn't want to bring in the fallback logic and I didn't want to bring in the versionManager (which turns out is unnecessary here, since it is called when the plugin is loaded).  So I started pulling stuff out of this class, and then I ended up with this draft.  \ud83e\udd37\u200d\u2642\ufe0f", "author": "jonsie", "createdAt": "2020-04-25T04:06:21Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/SpringPluginInfoReleaseProvider.kt", "diffHunk": "@@ -1,76 +0,0 @@\n-/*\n- * Copyright 2020 Netflix, Inc.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package com.netflix.spinnaker.kork.plugins.update.release\n-\n-import com.netflix.spinnaker.kork.plugins.SpinnakerPluginManager\n-import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n-import com.netflix.spinnaker.kork.plugins.SpringStrictPluginLoaderStatusProvider\n-import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n-import org.pf4j.VersionManager\n-import org.pf4j.update.PluginInfo\n-import org.slf4j.LoggerFactory\n-\n-/**\n- * Determines plugin releases based on Spring properties via [SpringPluginStatusProvider].\n- */\n-class SpringPluginInfoReleaseProvider(", "originalCommit": "be724cbd0899ce08d76cdfda276ee25a431ffbb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e7b8c5437b665e68e906e08f9baa331cc0d2585f", "url": "https://github.com/spinnaker/kork/commit/e7b8c5437b665e68e906e08f9baa331cc0d2585f", "message": "refactor(plugins): Test progress", "committedDate": "2020-04-27T19:59:56Z", "type": "commit"}, {"oid": "56340d16f4e5d08e7808c924ba37bf2ce1d9a479", "url": "https://github.com/spinnaker/kork/commit/56340d16f4e5d08e7808c924ba37bf2ce1d9a479", "message": "refactor(plugins): AggregatePluginInfoReleaseProvider test", "committedDate": "2020-04-27T23:43:29Z", "type": "commit"}, {"oid": "ea05af0268df70fa8b9c8ef9c86bfc4c17c21ed1", "url": "https://github.com/spinnaker/kork/commit/ea05af0268df70fa8b9c8ef9c86bfc4c17c21ed1", "message": "Merge branch 'master' into refactor-version-release-finding", "committedDate": "2020-04-27T23:44:24Z", "type": "commit"}, {"oid": "c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "url": "https://github.com/spinnaker/kork/commit/c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "message": "refactor(plugins): kotlin spotless", "committedDate": "2020-04-27T23:50:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyNzIzOA==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r416227238", "bodyText": "Filtering for enabled/disabled plugins shouldn't be something that the PluginInfoReleaseProvider cares about, so I moved this out.", "author": "jonsie", "createdAt": "2020-04-27T23:52:22Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/ExtensionBeanDefinitionRegistryPostProcessor.kt", "diffHunk": "@@ -50,8 +50,10 @@ class ExtensionBeanDefinitionRegistryPostProcessor(\n     // 1) Load plugins prior to downloading so we can resolve what needs to be updated\n     pluginManager.loadPlugins()\n \n-    // 2) Determine the plugins for release from the list of plugins\n-    val releases = pluginInfoReleaseProvider.getReleases(updateManager.plugins)\n+    // 2) Determine the plugins for release from the list of enabled plugins\n+    val releases = updateManager.plugins\n+      .filter { !pluginManager.statusProvider.isPluginDisabled(it.id) }", "originalCommit": "c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjIyNzQ3Mg==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r416227472", "bodyText": "I want to use this in Gate, but the root path to the Deck plugins will be something like spinnaker.extensibility.deck-proxy so I moved the root config to the constructor.", "author": "jonsie", "createdAt": "2020-04-27T23:52:57Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpringPluginStatusProvider.kt", "diffHunk": "@@ -15,21 +15,20 @@\n  */\n package com.netflix.spinnaker.kork.plugins\n \n-import com.netflix.spinnaker.config.PluginsConfigurationProperties.CONFIG_NAMESPACE\n-import com.netflix.spinnaker.config.PluginsConfigurationProperties.DEFAULT_ROOT_PATH\n+import com.netflix.spinnaker.kork.dynamicconfig.DynamicConfigService\n import kotlin.collections.set\n import org.pf4j.PluginStatusProvider\n import org.slf4j.LoggerFactory\n import org.springframework.boot.context.event.ApplicationEnvironmentPreparedEvent\n import org.springframework.context.ApplicationListener\n-import org.springframework.core.env.Environment\n import org.springframework.core.env.MapPropertySource\n \n /**\n  * Backs plugin status by the Spring environment, instead of using text files.\n  */\n class SpringPluginStatusProvider(\n-  private val environment: Environment\n+  private val dynamicConfigService: DynamicConfigService,\n+  private val rootConfig: String", "originalCommit": "c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjEwOTkzMQ==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r416109931", "bodyText": "nit: Should have isEnabled(it.id) so you don't need to negate.", "author": "robzienert", "createdAt": "2020-04-27T20:02:55Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/ExtensionBeanDefinitionRegistryPostProcessor.kt", "diffHunk": "@@ -50,8 +50,10 @@ class ExtensionBeanDefinitionRegistryPostProcessor(\n     // 1) Load plugins prior to downloading so we can resolve what needs to be updated\n     pluginManager.loadPlugins()\n \n-    // 2) Determine the plugins for release from the list of plugins\n-    val releases = pluginInfoReleaseProvider.getReleases(updateManager.plugins)\n+    // 2) Determine the plugins for release from the list of enabled plugins\n+    val releases = updateManager.plugins\n+      .filter { !pluginManager.statusProvider.isPluginDisabled(it.id) }", "originalCommit": "e7b8c5437b665e68e906e08f9baa331cc0d2585f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MDQ2MQ==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r416260461", "bodyText": "nit: Long conditionals like this, I think, should be extracted to their own methods. Something to the effect of missingPluginWithStrictLoading(pluginInfoReleases, plugin)", "author": "robzienert", "createdAt": "2020-04-28T01:26:29Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/provider/AggregatePluginInfoReleaseProvider.kt", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.release.provider\n+\n+import com.netflix.spinnaker.kork.plugins.SpringStrictPluginLoaderStatusProvider\n+import com.netflix.spinnaker.kork.plugins.update.release.PluginInfoRelease\n+import com.netflix.spinnaker.kork.plugins.update.release.source.PluginInfoReleaseSource\n+import org.pf4j.update.PluginInfo\n+\n+class AggregatePluginInfoReleaseProvider(\n+  private val pluginInfoReleaseSources: List<PluginInfoReleaseSource>,\n+  private val strictPluginLoaderStatusProvider: SpringStrictPluginLoaderStatusProvider\n+) : PluginInfoReleaseProvider {\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    val pluginInfoReleases: MutableSet<PluginInfoRelease> = mutableSetOf()\n+\n+    pluginInfoReleaseSources.forEach { source ->\n+      source.getReleases(pluginInfo).forEach { release ->\n+        val hit = pluginInfoReleases.find { it.pluginId == release.pluginId }\n+        if (hit != null) {\n+          pluginInfoReleases.remove(hit)\n+          pluginInfoReleases.add(release)\n+        } else {\n+          pluginInfoReleases.add(release)\n+        }\n+      }\n+\n+      source.processReleases(pluginInfoReleases)\n+    }\n+\n+    pluginInfo.forEach { plugin ->\n+      if (pluginInfoReleases.find { it.pluginId == plugin.id } == null &&\n+        strictPluginLoaderStatusProvider.isStrictPluginLoading()) {", "originalCommit": "c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MDg0NA==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r416260844", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Latest release version {} for plugin {}\", latestRelease.version, pluginInfo.id)\n          \n          \n            \n                  log.info(\"Latest release version '{}' for plugin '{}'\", latestRelease.version, pluginInfo.id)", "author": "robzienert", "createdAt": "2020-04-28T01:27:36Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/source/LatestPluginInfoReleaseSource.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.release.source\n+\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.PluginInfoRelease\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+import org.springframework.core.Ordered.HIGHEST_PRECEDENCE\n+\n+/**\n+ * Source the last published plugin info release.\n+ */\n+class LatestPluginInfoReleaseSource(\n+  private val updateManager: SpinnakerUpdateManager\n+) : PluginInfoReleaseSource {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    return pluginInfo.mapNotNull { pluginInfoRelease(it) }.toSet()\n+  }\n+\n+  private fun pluginInfoRelease(pluginInfo: PluginInfo): PluginInfoRelease? {\n+    val latestRelease = updateManager.getLastPluginRelease(pluginInfo.id)\n+    return if (latestRelease != null) {\n+      log.info(\"Latest release version {} for plugin {}\", latestRelease.version, pluginInfo.id)", "originalCommit": "c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MDkwNQ==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r416260905", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Latest release version not found for plugin {}\", pluginInfo.id)\n          \n          \n            \n                  log.info(\"Latest release version not found for plugin '{}'\", pluginInfo.id)", "author": "robzienert", "createdAt": "2020-04-28T01:27:47Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/source/LatestPluginInfoReleaseSource.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.release.source\n+\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerUpdateManager\n+import com.netflix.spinnaker.kork.plugins.update.release.PluginInfoRelease\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+import org.springframework.core.Ordered.HIGHEST_PRECEDENCE\n+\n+/**\n+ * Source the last published plugin info release.\n+ */\n+class LatestPluginInfoReleaseSource(\n+  private val updateManager: SpinnakerUpdateManager\n+) : PluginInfoReleaseSource {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    return pluginInfo.mapNotNull { pluginInfoRelease(it) }.toSet()\n+  }\n+\n+  private fun pluginInfoRelease(pluginInfo: PluginInfo): PluginInfoRelease? {\n+    val latestRelease = updateManager.getLastPluginRelease(pluginInfo.id)\n+    return if (latestRelease != null) {\n+      log.info(\"Latest release version {} for plugin {}\", latestRelease.version, pluginInfo.id)\n+      PluginInfoRelease(pluginInfo.id, latestRelease)\n+    } else {\n+      log.info(\"Latest release version not found for plugin {}\", pluginInfo.id)", "originalCommit": "c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MTEzNg==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r416261136", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Spring configured release version {} for plugin {}\", release.version, pluginInfo.id)\n          \n          \n            \n                  log.info(\"Spring configured release version '{}' for plugin '{}'\", release.version, pluginInfo.id)", "author": "robzienert", "createdAt": "2020-04-28T01:28:24Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/source/SpringPluginInfoReleaseSource.kt", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.release.source\n+\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.update.release.PluginInfoRelease\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+\n+/**\n+ * Sources plugin releases from Spring properties via [SpringPluginStatusProvider].\n+ */\n+class SpringPluginInfoReleaseSource(\n+  private val pluginStatusProvider: SpringPluginStatusProvider\n+) : PluginInfoReleaseSource {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    return pluginInfo.mapNotNull { pluginInfoRelease(it) }.toSet()\n+  }\n+\n+  private fun pluginInfoRelease(pluginInfo: PluginInfo): PluginInfoRelease? {\n+    val pluginVersion = pluginStatusProvider.pluginVersion(pluginInfo.id)\n+    val release = pluginInfo.releases.firstOrNull { it.version == pluginVersion }\n+    return if (release != null) {\n+      log.info(\"Spring configured release version {} for plugin {}\", release.version, pluginInfo.id)", "originalCommit": "c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI2MTE4MA==", "url": "https://github.com/spinnaker/kork/pull/624#discussion_r416261180", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.info(\"Spring configured release version not found for plugin {}\", pluginInfo.id)\n          \n          \n            \n                  log.info(\"Spring configured release version not found for plugin '{}'\", pluginInfo.id)", "author": "robzienert", "createdAt": "2020-04-28T01:28:32Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/source/SpringPluginInfoReleaseSource.kt", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.release.source\n+\n+import com.netflix.spinnaker.kork.plugins.SpringPluginStatusProvider\n+import com.netflix.spinnaker.kork.plugins.update.release.PluginInfoRelease\n+import org.pf4j.update.PluginInfo\n+import org.slf4j.LoggerFactory\n+\n+/**\n+ * Sources plugin releases from Spring properties via [SpringPluginStatusProvider].\n+ */\n+class SpringPluginInfoReleaseSource(\n+  private val pluginStatusProvider: SpringPluginStatusProvider\n+) : PluginInfoReleaseSource {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<PluginInfo>): Set<PluginInfoRelease> {\n+    return pluginInfo.mapNotNull { pluginInfoRelease(it) }.toSet()\n+  }\n+\n+  private fun pluginInfoRelease(pluginInfo: PluginInfo): PluginInfoRelease? {\n+    val pluginVersion = pluginStatusProvider.pluginVersion(pluginInfo.id)\n+    val release = pluginInfo.releases.firstOrNull { it.version == pluginVersion }\n+    return if (release != null) {\n+      log.info(\"Spring configured release version {} for plugin {}\", release.version, pluginInfo.id)\n+      PluginInfoRelease(pluginInfo.id, release)\n+    } else {\n+      log.info(\"Spring configured release version not found for plugin {}\", pluginInfo.id)", "originalCommit": "c2e73f5ef8af0e826f89713073f2acdaaa4b9a39", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e95eca989c55b9d947b0561c654b74613183ec4a", "url": "https://github.com/spinnaker/kork/commit/e95eca989c55b9d947b0561c654b74613183ec4a", "message": "refactor(plugins): Addressing comments", "committedDate": "2020-04-28T02:24:17Z", "type": "commit"}, {"oid": "656d4d7983c6f1182e145ab990084dbaf042c10d", "url": "https://github.com/spinnaker/kork/commit/656d4d7983c6f1182e145ab990084dbaf042c10d", "message": "fix(plugins): Fix tests", "committedDate": "2020-04-28T02:32:35Z", "type": "commit"}]}