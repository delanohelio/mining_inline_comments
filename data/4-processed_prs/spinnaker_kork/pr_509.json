{"pr_number": 509, "pr_title": "feat(plugins): Add ExtensionClassProvider to get proxied extension class", "pr_createdAt": "2020-02-07T21:00:19Z", "pr_url": "https://github.com/spinnaker/kork/pull/509", "timeline": [{"oid": "fc54db06da824f16424d9d8f03e6c85385df97fc", "url": "https://github.com/spinnaker/kork/commit/fc54db06da824f16424d9d8f03e6c85385df97fc", "message": "feat(plugins): Add ExtensionClassProvider to get proxied extension class", "committedDate": "2020-02-07T20:59:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwNTE2NA==", "url": "https://github.com/spinnaker/kork/pull/509#discussion_r376605164", "bodyText": "Just took this opportunity to fix up a small inconsistency here.", "author": "jonsie", "createdAt": "2020-02-07T21:00:37Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/proxy/ExtensionInvocationProxy.kt", "diffHunk": "@@ -35,9 +35,16 @@ class ExtensionInvocationProxy(\n   private val pluginDescriptor: SpinnakerPluginDescriptor\n ) : InvocationHandler {\n \n+  /**\n+   * Target class is exposed here so we can determine extension type via [ExtensionClassProvider]\n+   */\n+  internal fun getTargetClass(): Class<*> {\n+    return target.javaClass\n+  }\n+\n   override fun invoke(proxy: Any, method: Method, args: Array<out Any>?): Any {\n     val invocationStates: MutableSet<InvocationState> = mutableSetOf()\n-    invocationStates.create(proxy, method, args)\n+    invocationStates.before(proxy, method, args)", "originalCommit": "fc54db06da824f16424d9d8f03e6c85385df97fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f70906f72a49d7eb762cf98935d0c4df9fa0037f", "url": "https://github.com/spinnaker/kork/commit/f70906f72a49d7eb762cf98935d0c4df9fa0037f", "message": "fix(plugins): Small tweak to improve test", "committedDate": "2020-02-07T21:04:33Z", "type": "commit"}]}