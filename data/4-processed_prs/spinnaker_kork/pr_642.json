{"pr_number": 642, "pr_title": "feat(plugins): Add preferred plugin info release source", "pr_createdAt": "2020-05-08T00:00:45Z", "pr_url": "https://github.com/spinnaker/kork/pull/642", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg2MTY4MQ==", "url": "https://github.com/spinnaker/kork/pull/642#discussion_r421861681", "bodyText": "The order now is: latest plugin info release source -> spring configured plugin info release source -> preferred plugin info release source -> front50 version pinning.", "author": "jonsie", "createdAt": "2020-05-08T00:03:17Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/release/source/PreferredPluginInfoReleaseSource.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.release.source\n+\n+import com.netflix.spinnaker.kork.plugins.update.internal.SpinnakerPluginInfo\n+import com.netflix.spinnaker.kork.plugins.update.release.PluginInfoRelease\n+import org.slf4j.LoggerFactory\n+\n+class PreferredPluginInfoReleaseSource : PluginInfoReleaseSource {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  override fun getReleases(pluginInfo: List<SpinnakerPluginInfo>): Set<PluginInfoRelease> {\n+    return pluginInfo.mapNotNull { pluginInfoRelease(it) }.toSet()\n+  }\n+\n+  private fun pluginInfoRelease(pluginInfo: SpinnakerPluginInfo): PluginInfoRelease? {\n+    val release = pluginInfo.getReleases().find { it.preferred }\n+    return if (release != null) {\n+      log.info(\"Preferred release version '{}' for plugin '{}'\", release.version, pluginInfo.id)\n+      PluginInfoRelease(pluginInfo.id, release)\n+    } else {\n+      log.info(\"No preferred release version found for '{}'\", pluginInfo.id)\n+      null\n+    }\n+  }\n+\n+  override fun getOrder(): Int = 200", "originalCommit": "05bc7c204953979a7f99f6a47dd702a5bcd7ea6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "75ef18ed0ef4064877fb27eea17e289f30a847a5", "url": "https://github.com/spinnaker/kork/commit/75ef18ed0ef4064877fb27eea17e289f30a847a5", "message": "feat(plugins): Add preferred plugin info release source", "committedDate": "2020-05-08T00:08:05Z", "type": "commit"}, {"oid": "75ef18ed0ef4064877fb27eea17e289f30a847a5", "url": "https://github.com/spinnaker/kork/commit/75ef18ed0ef4064877fb27eea17e289f30a847a5", "message": "feat(plugins): Add preferred plugin info release source", "committedDate": "2020-05-08T00:08:05Z", "type": "forcePushed"}]}