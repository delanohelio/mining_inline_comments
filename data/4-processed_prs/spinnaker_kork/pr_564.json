{"pr_number": 564, "pr_title": "fix(plugins): allow for plugin configs on all services", "pr_createdAt": "2020-03-20T10:36:21Z", "pr_url": "https://github.com/spinnaker/kork/pull/564", "timeline": [{"oid": "4d317755f98a43fbe7a74b392945e691326653f4", "url": "https://github.com/spinnaker/kork/commit/4d317755f98a43fbe7a74b392945e691326653f4", "message": "fix(plugins): allow for plugin configs on all services", "committedDate": "2020-03-20T10:29:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc3NzgwMw==", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r395777803", "bodyText": "add a config / flag to allow for strict mode", "author": "link108", "createdAt": "2020-03-20T17:11:51Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -127,4 +131,14 @@ open class SpinnakerPluginManager(\n     .add(super.createPluginRepository())\n \n   override fun getPluginFactory(): PluginFactory = spinnakerPluginFactory\n+\n+  // TODO (link108): remove this override, once plugin deployments via halyard are fixed\n+  override fun loadPlugin(pluginPath: Path?): String? {", "originalCommit": "4d317755f98a43fbe7a74b392945e691326653f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a80671fe06307b9e8322d28d54d391324592b703", "url": "https://github.com/spinnaker/kork/commit/a80671fe06307b9e8322d28d54d391324592b703", "message": "feat(plugins): add property for strict plugin loading", "committedDate": "2020-03-24T08:53:30Z", "type": "commit"}, {"oid": "c69c6738de5de109e549144c9eced351cc2b7e4a", "url": "https://github.com/spinnaker/kork/commit/c69c6738de5de109e549144c9eced351cc2b7e4a", "message": "Merge branch 'master' into log-plugin-service-mismatch", "committedDate": "2020-03-24T17:58:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NDQ2NQ==", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397374465", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.warn(\"Downloaded plugin bundle: {}, does not have plugin for service: {}\", bundlePath.fileName, service)\n          \n          \n            \n                  log.warn(\"Downloaded plugin bundle '{}' does not have plugin for service: {}\", bundlePath.fileName, service)", "author": "robzienert", "createdAt": "2020-03-24T18:30:53Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/bundle/PluginBundleExtractor.kt", "diffHunk": "@@ -55,12 +58,20 @@ class PluginBundleExtractor {\n       return FileUtils.expandIfZip(servicePluginZipPath)\n     }\n \n-    // If thrown, this is an indicator that either: A) There's a bug in the plugin framework resolving which plugin\n-    // bundles should actually be downloaded, or B) The plugin author incorrectly identified this [service] as one\n-    // that the plugin extends (via the PluginInfo `requires` list).\n-    throw IntegrationException(\"Downloaded plugin bundle does not have plugin for service '$service'\")\n+    if (isStrictPluginLoading()) {\n+      // If thrown, this is an indicator that either: A) There's a bug in the plugin framework resolving which plugin\n+      // bundles should actually be downloaded, or B) The plugin author incorrectly identified this [service] as one\n+      // that the plugin extends (via the PluginInfo `requires` list).\n+      throw IntegrationException(\"Downloaded plugin bundle does not have plugin for service '$service'\")\n+    } else {\n+      log.warn(\"Downloaded plugin bundle: {}, does not have plugin for service: {}\", bundlePath.fileName, service)", "originalCommit": "c69c6738de5de109e549144c9eced351cc2b7e4a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NTE5Ng==", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397375196", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                require(!(pluginPath == null || Files.notExists(pluginPath))) { String.format(\"Specified plugin %s does not exist!\", pluginPath) }\n          \n          \n            \n                require(!(pluginPath == null || Files.notExists(pluginPath))) { \"Specified plugin '$pluginPath' does not exist!\" }", "author": "robzienert", "createdAt": "2020-03-24T18:32:11Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -127,4 +133,14 @@ open class SpinnakerPluginManager(\n     .add(super.createPluginRepository())\n \n   override fun getPluginFactory(): PluginFactory = spinnakerPluginFactory\n+\n+  // TODO (link108): remove this override, once plugin deployments via halyard are fixed\n+  override fun loadPlugin(pluginPath: Path?): String? {\n+    require(!(pluginPath == null || Files.notExists(pluginPath))) { String.format(\"Specified plugin %s does not exist!\", pluginPath) }", "originalCommit": "c69c6738de5de109e549144c9eced351cc2b7e4a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NjczMA==", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397376730", "bodyText": "!! is a code smell, let's avoid it when it's easy to do so:\nreturn loadPluginFromPath(pluginPath)\n  ?.let {\n    // try to resolve  the loaded plugin together with other possible plugins that depend on this plugin\n    resolvePlugins()\n    it.descriptor.pluginId\n  }", "author": "robzienert", "createdAt": "2020-03-24T18:34:38Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -127,4 +133,14 @@ open class SpinnakerPluginManager(\n     .add(super.createPluginRepository())\n \n   override fun getPluginFactory(): PluginFactory = spinnakerPluginFactory\n+\n+  // TODO (link108): remove this override, once plugin deployments via halyard are fixed\n+  override fun loadPlugin(pluginPath: Path?): String? {\n+    require(!(pluginPath == null || Files.notExists(pluginPath))) { String.format(\"Specified plugin %s does not exist!\", pluginPath) }\n+    log.debug(\"Loading plugin from '{}'\", pluginPath)\n+    val pluginWrapper = loadPluginFromPath(pluginPath) ?: return null\n+    // try to resolve  the loaded plugin together with other possible plugins that depend on this plugin\n+    resolvePlugins()\n+    return pluginWrapper!!.descriptor.pluginId", "originalCommit": "c69c6738de5de109e549144c9eced351cc2b7e4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ5NTYxOQ==", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397495619", "bodyText": "makes sense, updating \ud83d\udc4d", "author": "link108", "createdAt": "2020-03-24T22:17:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM3NjczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzMTIzOQ==", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397431239", "bodyText": "Nit: Mayne pass an instance of PluginBundleExtractor to the SpinnakerPluginManager and avoid adding a new member field environment which has the sole purpose of being used as a constructor arg for PluginBundleExtractor.", "author": "jonsie", "createdAt": "2020-03-24T20:12:18Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt", "diffHunk": "@@ -54,16 +57,19 @@ open class SpinnakerPluginManager(\n   val statusProvider: PluginStatusProvider,\n   configFactory: ConfigFactory,\n   sdkFactories: List<SdkFactory>,\n-  private val serviceName: String,\n-  pluginsRoot: Path\n+  val serviceName: String,\n+  pluginsRoot: Path,\n+  private val environment: Environment\n ) : DefaultPluginManager(pluginsRoot) {\n \n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n   private val springExtensionFactory: ExtensionFactory = SpinnakerExtensionFactory(\n     this,\n     configFactory,\n     sdkFactories\n   )\n-  private val bundleExtractor = PluginBundleExtractor()\n+  private val bundleExtractor = PluginBundleExtractor(environment)", "originalCommit": "c69c6738de5de109e549144c9eced351cc2b7e4a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxNTIzNw==", "url": "https://github.com/spinnaker/kork/pull/564#discussion_r397515237", "bodyText": "totally, I like that approach \ud83d\udc4d", "author": "link108", "createdAt": "2020-03-24T23:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzMTIzOQ=="}], "type": "inlineReview"}, {"oid": "6474d7ea8ffd50dd05f1b5e149e54e0e9c020506", "url": "https://github.com/spinnaker/kork/commit/6474d7ea8ffd50dd05f1b5e149e54e0e9c020506", "message": "Update kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/bundle/PluginBundleExtractor.kt\n\nCo-Authored-By: Rob Zienert <rob@robzienert.com>", "committedDate": "2020-03-24T21:39:06Z", "type": "commit"}, {"oid": "d127bbdda6ebdcc6afa2b7a832a7a10092102409", "url": "https://github.com/spinnaker/kork/commit/d127bbdda6ebdcc6afa2b7a832a7a10092102409", "message": "Update kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/SpinnakerPluginManager.kt\n\nCo-Authored-By: Rob Zienert <rob@robzienert.com>", "committedDate": "2020-03-24T21:45:31Z", "type": "commit"}, {"oid": "411b724d67a66c159840358bd13d001db7979c08", "url": "https://github.com/spinnaker/kork/commit/411b724d67a66c159840358bd13d001db7979c08", "message": "style(plugins): use safe call operator", "committedDate": "2020-03-24T23:06:57Z", "type": "commit"}, {"oid": "e98e96dc5fdcc396d62b4032a91f3b652c85a7ab", "url": "https://github.com/spinnaker/kork/commit/e98e96dc5fdcc396d62b4032a91f3b652c85a7ab", "message": "style(plugins): create PluginBundleExtractor Bean vs passing environment around", "committedDate": "2020-03-24T23:06:57Z", "type": "commit"}, {"oid": "33612ba5cdef54ab3b9a58313d22c84a6113a062", "url": "https://github.com/spinnaker/kork/commit/33612ba5cdef54ab3b9a58313d22c84a6113a062", "message": "Merge branch 'master' into log-plugin-service-mismatch", "committedDate": "2020-03-25T18:03:49Z", "type": "commit"}]}