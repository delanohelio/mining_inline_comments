{"pr_number": 782, "pr_title": "feat(plugins): Add remote extension synchronous read and write capabilities", "pr_createdAt": "2020-09-15T04:01:50Z", "pr_url": "https://github.com/spinnaker/kork/pull/782", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM2OTk0NA==", "url": "https://github.com/spinnaker/kork/pull/782#discussion_r488369944", "bodyText": "I'll follow up where necessary (Gate and internal libraries) with this change.", "author": "jonsie", "createdAt": "2020-09-15T04:05:22Z", "path": "kork-web/src/main/java/com/netflix/spinnaker/config/ServiceEndpoint.java", "diffHunk": "@@ -33,7 +33,7 @@\n \n   /** Misc. config necessary for the service client. */\n   @Nonnull\n-  public Map<String, Object> getConfig();\n+  public Map<String, String> getConfig();", "originalCommit": "a1cd88feb404034eab777fda06bb0eed9e23cce4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5bb4fc4074c9cde59ffd9e01d6730a74713b760", "url": "https://github.com/spinnaker/kork/commit/d5bb4fc4074c9cde59ffd9e01d6730a74713b760", "message": "feat(plugins): Add remote extension sychronous read and write capabilities\n\nTried to implement this in a transport agnostic way - ideally we should be able to swap the transport config out with a gRPC config and the interaction with `RemoteExtension` will stay the same.\n\n- Also includes a small breaking change to remove usage of M<S, O> in ServiceEndpoint\n- Remove usage of Provider in favor of ObjectProvider - I find the errors much easier to grok as they are native Spring errors, and the API is more robust.\n- Small remote plugin package refactor", "committedDate": "2020-09-15T04:09:05Z", "type": "commit"}, {"oid": "d5bb4fc4074c9cde59ffd9e01d6730a74713b760", "url": "https://github.com/spinnaker/kork/commit/d5bb4fc4074c9cde59ffd9e01d6730a74713b760", "message": "feat(plugins): Add remote extension sychronous read and write capabilities\n\nTried to implement this in a transport agnostic way - ideally we should be able to swap the transport config out with a gRPC config and the interaction with `RemoteExtension` will stay the same.\n\n- Also includes a small breaking change to remove usage of M<S, O> in ServiceEndpoint\n- Remove usage of Provider in favor of ObjectProvider - I find the errors much easier to grok as they are native Spring errors, and the API is more robust.\n- Small remote plugin package refactor", "committedDate": "2020-09-15T04:09:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNDk4Mg==", "url": "https://github.com/spinnaker/kork/pull/782#discussion_r488834982", "bodyText": "Interesting thought: We should support an in-process transport. I think it could be beneficial to converge on \"remote-first\" extension points, but still allowing in-process plugins to implement them. What do you think?", "author": "robzienert", "createdAt": "2020-09-15T17:22:23Z", "path": "kork-plugins/src/test/kotlin/com/netflix/spinnaker/kork/plugins/remote/extension/RemoteExtensionTest.kt", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.netflix.spinnaker.kork.plugins.remote.extension\n+\n+\n+import com.netflix.spinnaker.kork.plugins.remote.extension.transport.RemoteExtensionPayload\n+import com.netflix.spinnaker.kork.plugins.remote.extension.transport.RemoteExtensionQuery\n+import com.netflix.spinnaker.kork.plugins.remote.extension.transport.RemoteExtensionResponse\n+import com.netflix.spinnaker.kork.plugins.remote.extension.transport.RemoteExtensionTransport\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import io.mockk.every\n+import io.mockk.mockk\n+import strikt.api.expectThat\n+import strikt.assertions.isA\n+\n+class RemoteExtensionTest : JUnit5Minutests {\n+  fun tests() = rootContext<Fixture> {\n+    fixture {\n+      Fixture()\n+    }\n+\n+    test (\"Get config type\") {\n+      val result = subject.getTypedConfig<ConfigType>()\n+      expectThat(result).isA<ConfigType>()\n+    }\n+\n+    test(\"Invoke is void\") {\n+      val result = subject.invoke(remoteExtensionPayload)\n+      expectThat(result).isA<Unit>()\n+    }\n+\n+    test(\"Returns the write response\") {\n+      every { transport.write(any()) } returns writeResponse\n+      val result = subject.write<WriteResponse>(remoteExtensionPayload)\n+      expectThat(result).isA<WriteResponse>()\n+    }\n+\n+    test(\"Returns the read response\") {\n+      every { transport.read(any()) } returns readResponse\n+      val result = subject.read<ReadResponse>(remoteExtensionQuery)\n+      expectThat(result).isA<ReadResponse>()\n+    }\n+  }\n+\n+  private class Fixture {\n+    val writeResponse = WriteResponse()\n+    val readResponse = ReadResponse()\n+    val remoteExtensionPayload = Payload()\n+    val remoteExtensionQuery = Query()\n+    val transport: RemoteExtensionTransport = mockk(relaxed = true)", "originalCommit": "d5bb4fc4074c9cde59ffd9e01d6730a74713b760", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NjEzNA==", "url": "https://github.com/spinnaker/kork/pull/782#discussion_r488896134", "bodyText": "Yes.  This goes in-line with what I was thinking WRT making the OkHttp client provider an in-process extension point.  I think building remote extension points on-top of an extensible in-process transport is going to provide the flexibility we'll need for this to have wider adoption.", "author": "jonsie", "createdAt": "2020-09-15T18:57:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzNDk4Mg=="}], "type": "inlineReview"}, {"oid": "2018363b56ab3e60294c887d9812ba2b9bc7db5b", "url": "https://github.com/spinnaker/kork/commit/2018363b56ab3e60294c887d9812ba2b9bc7db5b", "message": "Merge branch 'master' into read-write-remote-extension", "committedDate": "2020-09-17T21:52:18Z", "type": "commit"}]}