{"pr_number": 507, "pr_title": "feat(plugins): HTTP client plugin API", "pr_createdAt": "2020-02-07T00:34:01Z", "pr_url": "https://github.com/spinnaker/kork/pull/507", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1ODc0NQ==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376158745", "bodyText": "I'm adding a new dependency for the kork-plugins-api. I think having @Nonnull and so-on are pretty valuable, and this dependency changes once in never.", "author": "robzienert", "createdAt": "2020-02-07T00:34:42Z", "path": "kork-plugins-api/kork-plugins-api.gradle", "diffHunk": "@@ -15,10 +15,12 @@\n  */\n \n apply plugin: \"java-library\"\n+apply from: \"$rootDir/gradle/kotlin-test.gradle\"\n \n dependencies {\n   api(platform(project(\":spinnaker-dependencies\")))\n \n+  api \"javax.annotation:javax.annotation-api\"", "originalCommit": "a36812a317c86d57be243fb5f9bc5005cab3862b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2NzYzMg==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376567632", "bodyText": "possible that we may have a concurrency/thread safety around accessing this method ?", "author": "srekapalli", "createdAt": "2020-02-07T19:30:38Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/httpclient/Ok3HttpClientProvider.kt", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.httpclient\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.OkHttp3ClientConfiguration\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClient\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientConfig\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientProvider\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties\n+import okhttp3.OkHttpClient\n+import org.springframework.context.ApplicationContext\n+\n+class Ok3HttpClientProvider(\n+  private val pluginId: String,\n+  private val applicationContext: ApplicationContext,\n+  private val objectMapper: ObjectMapper,\n+  okHttp3ClientConfiguration: OkHttp3ClientConfiguration\n+) : HttpClientProvider {\n+\n+  private val internalServicesClient = okHttp3ClientConfiguration.create().build()\n+  private val okClients: MutableMap<HttpClientConfig, OkHttpClient> = mutableMapOf()\n+  private val clients: MutableMap<String, Ok3HttpClient> = mutableMapOf()\n+\n+  override fun configure(name: String, baseUrl: String, config: HttpClientConfig) {\n+    clients.computeIfAbsent(\"$pluginId.$name\") {\n+      // Try to reduce the number of OkHttpClient instances that are floating around. We'll only create a new client\n+      // if the config is different from any other OkHttpClient.\n+      val okClient = okClients.computeIfAbsent(config) {\n+        OkHttp3ClientConfiguration(\n+          OkHttpClientConfigurationProperties().apply {\n+            config.connectionPool.keepAlive?.let {\n+              connectionPool.keepAliveDurationMs = it.toMillis().toInt()\n+            }\n+            config.connectionPool.maxIdleConnections?.let {\n+              connectionPool.maxIdleConnections = it\n+            }\n+\n+            config.connection.connectTimeout?.let {\n+              connectTimeoutMs = it.toMillis()\n+            }\n+            config.connection.readTimeout?.let {\n+              readTimeoutMs = it.toMillis()\n+            }\n+            retryOnConnectionFailure = config.connection.isRetryOnConnectionFailure\n+\n+            if (config.security.keyStorePath != null && config.security.trustStorePath != null) {\n+              keyStore = config.security.keyStorePath.toFile()\n+              keyStoreType = config.security.keyStoreType\n+              keyStorePassword = config.security.keyStorePassword\n+\n+              trustStore = config.security.trustStorePath.toFile()\n+              trustStoreType = config.security.trustStoreType\n+              trustStorePassword = config.security.trustStorePassword\n+\n+              tlsVersions = config.security.tlsVersions\n+              cipherSuites = config.security.cipherSuites\n+            }\n+          },\n+          applicationContext.getBean(OkHttp3MetricsInterceptor::class.java)\n+        ).create().build()\n+      }\n+\n+      Ok3HttpClient(\"$pluginId.$name\", baseUrl, okClient, objectMapper)\n+    }\n+  }\n+\n+  override fun get(name: String): HttpClient {\n+    return clients[\"$pluginId.$name\"] ?: throw IntegrationException(\"No client configured for '$name'\")\n+  }\n+", "originalCommit": "a36812a317c86d57be243fb5f9bc5005cab3862b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMTMxOQ==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376601319", "bodyText": "Prob. We can get the response Object straight back from the HTTP method and throw a error/exception back for unsuccessful calls. ?", "author": "srekapalli", "createdAt": "2020-02-07T20:50:46Z", "path": "kork-plugins-api/src/test/kotlin/com/netflix/spinnaker/kork/plugins/httpclient/HttpClientIntegrationTest.kt", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.httpclient\n+\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientProvider\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.Request\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import io.mockk.mockk\n+\n+class HttpClientIntegrationTest : JUnit5Minutests {\n+\n+  fun tests() = rootContext {\n+    test(\"wip - dsl\") {\n+      val clientProvider: HttpClientProvider = mockk(relaxed = true)\n+\n+      val front50 = clientProvider.getInternal(\"front50\")\n+", "originalCommit": "a36812a317c86d57be243fb5f9bc5005cab3862b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MjM0NA==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376752344", "bodyText": "I suspect there\u2019s value in by-default making it easy to access response headers, status codes, etc. which I believe this is supporting.\n(Versus just the object)", "author": "ajordens", "createdAt": "2020-02-09T03:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMTMxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3MzcwNw==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r377273707", "bodyText": "Yes, the extra information around a response is important (and in the case of a 204 response, the only stuff to action on).", "author": "robzienert", "createdAt": "2020-02-10T19:37:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMTMxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMTk4OA==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376601988", "bodyText": "How about getInternalServiceClient instead of getInternal ?", "author": "srekapalli", "createdAt": "2020-02-07T20:52:33Z", "path": "kork-plugins-api/src/test/kotlin/com/netflix/spinnaker/kork/plugins/httpclient/HttpClientIntegrationTest.kt", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.httpclient\n+\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientProvider\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.Request\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import io.mockk.mockk\n+\n+class HttpClientIntegrationTest : JUnit5Minutests {\n+\n+  fun tests() = rootContext {\n+    test(\"wip - dsl\") {\n+      val clientProvider: HttpClientProvider = mockk(relaxed = true)\n+", "originalCommit": "a36812a317c86d57be243fb5f9bc5005cab3862b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MjM5Mw==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376752393", "bodyText": "getBody(clazz) might be more idiomatic.", "author": "ajordens", "createdAt": "2020-02-09T03:45:06Z", "path": "kork-plugins-api/src/test/kotlin/com/netflix/spinnaker/kork/plugins/httpclient/HttpClientIntegrationTest.kt", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.httpclient\n+\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientProvider\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.Request\n+import dev.minutest.junit.JUnit5Minutests\n+import dev.minutest.rootContext\n+import io.mockk.mockk\n+\n+class HttpClientIntegrationTest : JUnit5Minutests {\n+\n+  fun tests() = rootContext {\n+    test(\"wip - dsl\") {\n+      val clientProvider: HttpClientProvider = mockk(relaxed = true)\n+\n+      val front50 = clientProvider.getInternal(\"front50\")\n+\n+      val response = front50.get(Request(\"getGate\", \"/v2/applications/gate\"))\n+\n+      val app = response.getPayload(Application::class.java)", "originalCommit": "a36812a317c86d57be243fb5f9bc5005cab3862b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4NjE2OQ==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r377286169", "bodyText": "+1", "author": "jonsie", "createdAt": "2020-02-10T20:02:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MjM5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MjYxMQ==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376752611", "bodyText": "Had an error response body or just returned a 4xx/5xx?", "author": "ajordens", "createdAt": "2020-02-09T03:50:45Z", "path": "kork-plugins-api/src/main/java/com/netflix/spinnaker/kork/plugins/api/httpclient/Response.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.api.httpclient;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.annotation.Nonnull;\n+\n+/** HTTP Response wrapper. */\n+public interface Response {\n+\n+  /** Get the response payload. */\n+  Object getPayload();\n+\n+  <T> T getPayload(@Nonnull Class<T> expectedType);\n+\n+  /** Get the error exception, if present. */\n+  Optional<Exception> getException();\n+\n+  /** Get the response code. */\n+  int getStatusCode();\n+\n+  /** Get the response headers. */\n+  Map<String, String> getHeaders();\n+\n+  /** Returns whether or not the request had an error. */\n+  default boolean isError() {", "originalCommit": "a36812a317c86d57be243fb5f9bc5005cab3862b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NDM3Ng==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r377274376", "bodyText": "Just 4xx/5xx. I don't want to build any smarts beyond the bare minimum on the SDK, since that would make it more coupled to our current idea of what an error response is (which varies service-to-service today).", "author": "robzienert", "createdAt": "2020-02-10T19:38:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MjYxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzMTgwOA==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r385831808", "bodyText": "At some point I thought I remembered this looking at a payload vs just status codes ... just 4xx/5xx makes sense to me tho!", "author": "ajordens", "createdAt": "2020-02-28T17:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MjYxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MjgwMA==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376752800", "bodyText": "Some of the existing services have this nested within services.BLAH.baseUrl.\nWe going to try and make that consistent or ...?", "author": "ajordens", "createdAt": "2020-02-09T03:55:37Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/httpclient/Ok3HttpClientProvider.kt", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.httpclient\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.OkHttp3ClientConfiguration\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClient\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientConfig\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientProvider\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties\n+import okhttp3.OkHttpClient\n+import org.springframework.context.ApplicationContext\n+\n+class Ok3HttpClientProvider(\n+  private val pluginId: String,\n+  private val applicationContext: ApplicationContext,\n+  private val objectMapper: ObjectMapper,\n+  okHttp3ClientConfiguration: OkHttp3ClientConfiguration\n+) : HttpClientProvider {\n+\n+  private val internalServicesClient = okHttp3ClientConfiguration.create().build()\n+  private val okClients: MutableMap<HttpClientConfig, OkHttpClient> = mutableMapOf()\n+  private val clients: MutableMap<String, Ok3HttpClient> = mutableMapOf()\n+\n+  override fun configure(name: String, baseUrl: String, config: HttpClientConfig) {\n+    clients.computeIfAbsent(\"$pluginId.$name\") {\n+      // Try to reduce the number of OkHttpClient instances that are floating around. We'll only create a new client\n+      // if the config is different from any other OkHttpClient.\n+      val okClient = okClients.computeIfAbsent(config) {\n+        OkHttp3ClientConfiguration(\n+          OkHttpClientConfigurationProperties().apply {\n+            config.connectionPool.keepAlive?.let {\n+              connectionPool.keepAliveDurationMs = it.toMillis().toInt()\n+            }\n+            config.connectionPool.maxIdleConnections?.let {\n+              connectionPool.maxIdleConnections = it\n+            }\n+\n+            config.connection.connectTimeout?.let {\n+              connectTimeoutMs = it.toMillis()\n+            }\n+            config.connection.readTimeout?.let {\n+              readTimeoutMs = it.toMillis()\n+            }\n+            retryOnConnectionFailure = config.connection.isRetryOnConnectionFailure\n+\n+            if (config.security.keyStorePath != null && config.security.trustStorePath != null) {\n+              keyStore = config.security.keyStorePath.toFile()\n+              keyStoreType = config.security.keyStoreType\n+              keyStorePassword = config.security.keyStorePassword\n+\n+              trustStore = config.security.trustStorePath.toFile()\n+              trustStoreType = config.security.trustStoreType\n+              trustStorePassword = config.security.trustStorePassword\n+\n+              tlsVersions = config.security.tlsVersions\n+              cipherSuites = config.security.cipherSuites\n+            }\n+          },\n+          applicationContext.getBean(OkHttp3MetricsInterceptor::class.java)\n+        ).create().build()\n+      }\n+\n+      Ok3HttpClient(\"$pluginId.$name\", baseUrl, okClient, objectMapper)\n+    }\n+  }\n+\n+  override fun get(name: String): HttpClient {\n+    return clients[\"$pluginId.$name\"] ?: throw IntegrationException(\"No client configured for '$name'\")\n+  }\n+\n+  override fun getInternal(name: String): HttpClient {\n+    val baseUrl = applicationContext.environment.getProperty(\"${name.toLowerCase()}.baseUrl\")", "originalCommit": "a36812a317c86d57be243fb5f9bc5005cab3862b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NDgxMA==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r377274810", "bodyText": "Oh yeah, I forgot about that inconsistency. I'll update the code to take that into account, but yes, there's strong desire - from me at least - to standardize / simplify our configs.", "author": "robzienert", "createdAt": "2020-02-10T19:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MjgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MzU4OA==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r376753588", "bodyText": "Cool beans, having the normal set of metrics will be handy.\nDo we think there would be any value in an additional tag to indicate the originating pluginId?", "author": "ajordens", "createdAt": "2020-02-09T04:17:56Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/httpclient/Ok3HttpClientProvider.kt", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.httpclient\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.OkHttp3ClientConfiguration\n+import com.netflix.spinnaker.kork.exceptions.IntegrationException\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClient\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientConfig\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.HttpClientProvider\n+import com.netflix.spinnaker.okhttp.OkHttp3MetricsInterceptor\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties\n+import okhttp3.OkHttpClient\n+import org.springframework.context.ApplicationContext\n+\n+class Ok3HttpClientProvider(\n+  private val pluginId: String,\n+  private val applicationContext: ApplicationContext,\n+  private val objectMapper: ObjectMapper,\n+  okHttp3ClientConfiguration: OkHttp3ClientConfiguration\n+) : HttpClientProvider {\n+\n+  private val internalServicesClient = okHttp3ClientConfiguration.create().build()\n+  private val okClients: MutableMap<HttpClientConfig, OkHttpClient> = mutableMapOf()\n+  private val clients: MutableMap<String, Ok3HttpClient> = mutableMapOf()\n+\n+  override fun configure(name: String, baseUrl: String, config: HttpClientConfig) {\n+    clients.computeIfAbsent(\"$pluginId.$name\") {\n+      // Try to reduce the number of OkHttpClient instances that are floating around. We'll only create a new client\n+      // if the config is different from any other OkHttpClient.\n+      val okClient = okClients.computeIfAbsent(config) {\n+        OkHttp3ClientConfiguration(\n+          OkHttpClientConfigurationProperties().apply {\n+            config.connectionPool.keepAlive?.let {\n+              connectionPool.keepAliveDurationMs = it.toMillis().toInt()\n+            }\n+            config.connectionPool.maxIdleConnections?.let {\n+              connectionPool.maxIdleConnections = it\n+            }\n+\n+            config.connection.connectTimeout?.let {\n+              connectTimeoutMs = it.toMillis()\n+            }\n+            config.connection.readTimeout?.let {\n+              readTimeoutMs = it.toMillis()\n+            }\n+            retryOnConnectionFailure = config.connection.isRetryOnConnectionFailure\n+\n+            if (config.security.keyStorePath != null && config.security.trustStorePath != null) {\n+              keyStore = config.security.keyStorePath.toFile()\n+              keyStoreType = config.security.keyStoreType\n+              keyStorePassword = config.security.keyStorePassword\n+\n+              trustStore = config.security.trustStorePath.toFile()\n+              trustStoreType = config.security.trustStoreType\n+              trustStorePassword = config.security.trustStorePassword\n+\n+              tlsVersions = config.security.tlsVersions\n+              cipherSuites = config.security.cipherSuites\n+            }\n+          },\n+          applicationContext.getBean(OkHttp3MetricsInterceptor::class.java)", "originalCommit": "a36812a317c86d57be243fb5f9bc5005cab3862b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NTAzMw==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r377275033", "bodyText": "Oh, yes, that's a good call. I'll work on getting that squeezed in, too!", "author": "robzienert", "createdAt": "2020-02-10T19:40:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc1MzU4OA=="}], "type": "inlineReview"}, {"oid": "9fdd5c4ab5e5c0a23f707f9c8b5ea4088b2e0e62", "url": "https://github.com/spinnaker/kork/commit/9fdd5c4ab5e5c0a23f707f9c8b5ea4088b2e0e62", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-23T18:48:46Z", "type": "forcePushed"}, {"oid": "8338924b3423bb0531fc3df0dd79db3b955458dd", "url": "https://github.com/spinnaker/kork/commit/8338924b3423bb0531fc3df0dd79db3b955458dd", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-24T21:13:34Z", "type": "forcePushed"}, {"oid": "195b16b1e1401abddcf1596f7f231b4c6f4088c2", "url": "https://github.com/spinnaker/kork/commit/195b16b1e1401abddcf1596f7f231b4c6f4088c2", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-25T19:59:00Z", "type": "forcePushed"}, {"oid": "db92a070af2121d9425b7cd9ae4bfea99ac7ca5c", "url": "https://github.com/spinnaker/kork/commit/db92a070af2121d9425b7cd9ae4bfea99ac7ca5c", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-25T20:00:27Z", "type": "forcePushed"}, {"oid": "778d6c4b1ccce510340e7acd708fc24729d38e43", "url": "https://github.com/spinnaker/kork/commit/778d6c4b1ccce510340e7acd708fc24729d38e43", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-25T20:07:34Z", "type": "forcePushed"}, {"oid": "00384b739b37aff5cc5aa87eec7b97ece874e5d4", "url": "https://github.com/spinnaker/kork/commit/00384b739b37aff5cc5aa87eec7b97ece874e5d4", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-25T20:10:30Z", "type": "forcePushed"}, {"oid": "ed23c2da019ea27635570d4234aa8092781430a3", "url": "https://github.com/spinnaker/kork/commit/ed23c2da019ea27635570d4234aa8092781430a3", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-25T20:13:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3MzIxNA==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r384273214", "bodyText": "Oh my goodness c-3PO!", "author": "jonsie", "createdAt": "2020-02-26T04:49:15Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/sdk/httpclient/HttpClientSdkFactory.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.sdk.httpclient\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.config.OkHttp3ClientConfiguration\n+import com.netflix.spinnaker.kork.plugins.sdk.IdResolver\n+import com.netflix.spinnaker.kork.plugins.sdk.SdkFactory\n+import com.netflix.spinnaker.kork.plugins.sdk.httpclient.internal.CompositeOkHttpClientFactory\n+import org.pf4j.PluginWrapper\n+import org.springframework.core.env.Environment\n+\n+/**\n+ * Creates [Ohc3HttpClientRegistry]s for a given extension.\n+ */\n+class HttpClientSdkFactory(\n+  private val okHttpClientFactory: CompositeOkHttpClientFactory,\n+  private val environment: Environment,\n+  private val objectMapper: ObjectMapper,\n+  private val okHttp3ClientConfiguration: OkHttp3ClientConfiguration\n+) : SdkFactory {\n+  override fun create(extensionClass: Class<*>, pluginWrapper: PluginWrapper?): Any {\n+    return Ohc3HttpClientRegistry(", "originalCommit": "ed23c2da019ea27635570d4234aa8092781430a3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3MzQ1Nw==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r384273457", "bodyText": "Going deep with the rename, I like it.", "author": "jonsie", "createdAt": "2020-02-26T04:50:29Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/sdk/httpclient/Ohc3Response.kt", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.netflix.spinnaker.kork.plugins.sdk.httpclient\n+\n+import com.fasterxml.jackson.databind.ObjectMapper\n+import com.netflix.spinnaker.kork.plugins.api.httpclient.Response\n+import okhttp3.ResponseBody\n+import java.io.InputStream\n+import java.lang.Exception\n+import java.util.Optional\n+\n+class Ohc3Response(", "originalCommit": "ed23c2da019ea27635570d4234aa8092781430a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcwMTM4Mw==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r384701383", "bodyText": "It was getting confusing having so many various OkHttpClient various classes. It's not great, but it was the least bad.", "author": "robzienert", "createdAt": "2020-02-26T19:06:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcyNDEzOQ==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r384724139", "bodyText": "What about just calling it Ok3HttpClient? Instead of Ohc3HttpClient.", "author": "jonsie", "createdAt": "2020-02-26T19:45:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3MzQ1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI4MDU3Mg==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r385280572", "bodyText": "Ah, good suggestion - changed.", "author": "robzienert", "createdAt": "2020-02-27T18:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI3MzQ1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2ODAwOA==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r384768008", "bodyText": "I wonder if we should use ObjectProvider instead of Provider?  I have run into situations wherein Provider was not on the classpath (haven't actually tracked down exactly where this gets pulled in, but last I checked it was not part of kork-plugins).  ObjectProvider is the modern Spring way, as far as I can tell, and I've used it before for this purpose - https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/ObjectProvider.html", "author": "jonsie", "createdAt": "2020-02-26T21:12:02Z", "path": "kork-web/src/main/groovy/com/netflix/spinnaker/config/OkHttpClientComponents.groovy", "diffHunk": "@@ -36,17 +38,17 @@ class OkHttpClientComponents {\n \n   @Bean\n   OkHttpMetricsInterceptor okHttpMetricsInterceptor(\n-    Registry registry,\n-    @Value('${ok-http-client.interceptor.skip-header-check:false}') boolean skipHeaderCheck) {\n+    Provider<Registry> registry,", "originalCommit": "ed23c2da019ea27635570d4234aa8092781430a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3OTkyOQ==", "url": "https://github.com/spinnaker/kork/pull/507#discussion_r385279929", "bodyText": "Provider is part of javax.inject - it's definitely on the classpath. I don't really see the value in using ObjectProvider. It's certainly fancier, but I don't need any of the methods that it uses.", "author": "robzienert", "createdAt": "2020-02-27T18:05:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2ODAwOA=="}], "type": "inlineReview"}, {"oid": "d610685007ee72c6fa72646d71516510f20e0864", "url": "https://github.com/spinnaker/kork/commit/d610685007ee72c6fa72646d71516510f20e0864", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-27T18:07:06Z", "type": "commit"}, {"oid": "d610685007ee72c6fa72646d71516510f20e0864", "url": "https://github.com/spinnaker/kork/commit/d610685007ee72c6fa72646d71516510f20e0864", "message": "feat(plugins): HTTP client plugin API", "committedDate": "2020-02-27T18:07:06Z", "type": "forcePushed"}, {"oid": "ed2ff253fef6b0eb3b4626edc711e53b06177111", "url": "https://github.com/spinnaker/kork/commit/ed2ff253fef6b0eb3b4626edc711e53b06177111", "message": "Merge branch 'master' into http-builder", "committedDate": "2020-02-27T18:24:39Z", "type": "commit"}, {"oid": "d34b033c3559ec203ec8b3f279763defcf4512c2", "url": "https://github.com/spinnaker/kork/commit/d34b033c3559ec203ec8b3f279763defcf4512c2", "message": "Merge branch 'master' into http-builder", "committedDate": "2020-03-02T20:56:57Z", "type": "commit"}]}