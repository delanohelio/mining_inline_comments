{"pr_number": 474, "pr_title": "feat(plugins): Front50UpdateRepository and required configuration", "pr_createdAt": "2020-01-16T23:57:20Z", "pr_url": "https://github.com/spinnaker/kork/pull/474", "timeline": [{"oid": "c874252d6818cbe0f128c1e39890831e796f0edf", "url": "https://github.com/spinnaker/kork/commit/c874252d6818cbe0f128c1e39890831e796f0edf", "message": "feat(plugins): Front50UpdateRepository and required configuration", "committedDate": "2020-01-16T23:55:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5NTg0Ng==", "url": "https://github.com/spinnaker/kork/pull/474#discussion_r368095846", "bodyText": "This is a no for me, dog.\n\nUse BeanCreationException\nWe need a message to go along with this so we can be helpful to anyone that hits this (and by extension, helpful to us when an issue is reported).", "author": "robzienert", "createdAt": "2020-01-17T19:20:00Z", "path": "kork-plugins/src/main/java/com/netflix/spinnaker/config/Front50UpdateRepositoryConfiguration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.config;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.SerializationFeature;\n+import com.netflix.spinnaker.config.PluginsConfigurationProperties.PluginRepositoryProperties;\n+import com.netflix.spinnaker.kork.plugins.update.downloader.FileDownloaderProvider;\n+import com.netflix.spinnaker.kork.plugins.update.front50.Front50Service;\n+import com.netflix.spinnaker.kork.plugins.update.front50.Front50UpdateRepository;\n+import com.netflix.spinnaker.okhttp.OkHttpClientConfigurationProperties;\n+import java.util.Map;\n+import okhttp3.OkHttpClient;\n+import org.pf4j.update.UpdateRepository;\n+import org.pf4j.update.verifier.CompoundVerifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.context.properties.bind.Bindable;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.env.Environment;\n+import retrofit2.Retrofit;\n+import retrofit2.converter.jackson.JacksonConverterFactory;\n+\n+@Configuration\n+@ConditionalOnProperty(value = \"spinnaker.extensibility.repositories.front50.enabled\")\n+public class Front50UpdateRepositoryConfiguration {\n+\n+  @Bean\n+  public static UpdateRepository pluginFront50UpdateRepository(\n+      Environment environment,\n+      ApplicationContext applicationContext,\n+      Map<String, PluginRepositoryProperties> pluginRepositoriesConfig) {\n+\n+    OkHttpClientConfigurationProperties okHttpClientProperties =\n+        Binder.get(environment)\n+            .bind(\"ok-http-client\", Bindable.of(OkHttpClientConfigurationProperties.class))\n+            .orElseThrow(IllegalStateException::new);", "originalCommit": "c874252d6818cbe0f128c1e39890831e796f0edf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5NzA3NA==", "url": "https://github.com/spinnaker/kork/pull/474#discussion_r368097074", "bodyText": "Docs on interfaces.", "author": "robzienert", "createdAt": "2020-01-17T19:22:54Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/front50/Front50Service.kt", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.front50\n+\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerPluginInfo\n+import retrofit2.http.GET\n+import retrofit2.http.Path\n+import retrofit2.http.Query\n+\n+interface Front50Service {", "originalCommit": "c874252d6818cbe0f128c1e39890831e796f0edf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5NzEyNw==", "url": "https://github.com/spinnaker/kork/pull/474#discussion_r368097127", "bodyText": "Docs on this guy.", "author": "robzienert", "createdAt": "2020-01-17T19:23:02Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/front50/Front50UpdateRepository.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.front50\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerPluginInfo\n+import org.pf4j.update.FileDownloader\n+import org.pf4j.update.FileVerifier\n+import org.pf4j.update.SimpleFileDownloader\n+import org.pf4j.update.UpdateRepository\n+import org.pf4j.update.verifier.CompoundVerifier\n+import org.slf4j.LoggerFactory\n+import retrofit2.HttpException\n+import java.net.URL\n+\n+class Front50UpdateRepository(", "originalCommit": "c874252d6818cbe0f128c1e39890831e796f0edf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA5ODA4Mg==", "url": "https://github.com/spinnaker/kork/pull/474#discussion_r368098082", "bodyText": "nit: You could use plugins.computeIfAbsent(key, supplier).", "author": "robzienert", "createdAt": "2020-01-17T19:25:06Z", "path": "kork-plugins/src/main/kotlin/com/netflix/spinnaker/kork/plugins/update/front50/Front50UpdateRepository.kt", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Netflix, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.netflix.spinnaker.kork.plugins.update.front50\n+\n+import com.netflix.spinnaker.kork.exceptions.SystemException\n+import com.netflix.spinnaker.kork.plugins.update.SpinnakerPluginInfo\n+import org.pf4j.update.FileDownloader\n+import org.pf4j.update.FileVerifier\n+import org.pf4j.update.SimpleFileDownloader\n+import org.pf4j.update.UpdateRepository\n+import org.pf4j.update.verifier.CompoundVerifier\n+import org.slf4j.LoggerFactory\n+import retrofit2.HttpException\n+import java.net.URL\n+\n+class Front50UpdateRepository(\n+  private val repositoryName: String,\n+  private val applicationName: String,\n+  private val url: URL,\n+  private val downloader: FileDownloader = SimpleFileDownloader(),\n+  private val verifier: FileVerifier = CompoundVerifier(),\n+  private val front50Service: Front50Service\n+) : UpdateRepository {\n+\n+  private val log by lazy { LoggerFactory.getLogger(javaClass) }\n+\n+  private var plugins: MutableMap<String, SpinnakerPluginInfo> = mutableMapOf()\n+\n+  override fun getUrl(): URL {\n+    return url\n+  }\n+\n+  override fun getId(): String {\n+    return repositoryName\n+  }\n+\n+  override fun getPlugins(): MutableMap<String, SpinnakerPluginInfo> {\n+    if (plugins.isEmpty()) {\n+      val front50Plugins = try {\n+        log.debug(\"Populating plugin info cache from front50.\")\n+        front50Service.list(applicationName)\n+      } catch (e: HttpException) {\n+        throw SystemException(\"Unable to list front50 plugin info\", e)\n+      }\n+\n+      plugins = front50Plugins.associateByTo(plugins) { it.id }\n+      return plugins\n+    }\n+\n+    return plugins\n+  }\n+\n+  override fun getPlugin(id: String): SpinnakerPluginInfo {\n+    val pluginInfo = plugins[id]\n+\n+    if (pluginInfo == null) {\n+      val front50PluginInfo = try {\n+        front50Service.getById(id)\n+      } catch (e: HttpException) {\n+        throw SystemException(\"Unable to get the requested plugin info `$id` from front50\", e)\n+      }\n+\n+      plugins[id] = front50PluginInfo\n+      return front50PluginInfo\n+    }\n+\n+    return pluginInfo", "originalCommit": "c874252d6818cbe0f128c1e39890831e796f0edf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1f0b12a09862061edd385a2010a008473bd5e819", "url": "https://github.com/spinnaker/kork/commit/1f0b12a09862061edd385a2010a008473bd5e819", "message": "fix(plugins): add docs and switch to use of Kotlin Maps ifEmpty and getOrPut", "committedDate": "2020-01-17T20:52:27Z", "type": "commit"}, {"oid": "5482c4ed027def8b2e8b94628f45eaa8e766f4ac", "url": "https://github.com/spinnaker/kork/commit/5482c4ed027def8b2e8b94628f45eaa8e766f4ac", "message": "fix(plugins): Add KotlinModule", "committedDate": "2020-01-17T21:23:30Z", "type": "commit"}]}