{"pr_number": 1586, "pr_title": "[JBPM-8991] Allow for process initiator to be set using 'initiator' value from process data", "pr_createdAt": "2020-01-28T11:36:25Z", "pr_url": "https://github.com/kiegroup/jbpm/pull/1586", "timeline": [{"oid": "fe55278f1ea3de389935731628282f32df389bd7", "url": "https://github.com/kiegroup/jbpm/commit/fe55278f1ea3de389935731628282f32df389bd7", "message": "Add kie-server-api to get access to KieServerConstants", "committedDate": "2020-01-28T11:23:54Z", "type": "commit"}, {"oid": "459f9a3d4b55ce551b8c8cddfbf9628d9c567e93", "url": "https://github.com/kiegroup/jbpm/commit/459f9a3d4b55ce551b8c8cddfbf9628d9c567e93", "message": "Added possibility to set initiator from rocess metadata when building ProcessInstanceLog for ProcessStartedEvent\n\nIf user auth bypass is set and process metadata has initiator set, it will use initiator from processmetadata", "committedDate": "2020-01-28T11:26:20Z", "type": "commit"}, {"oid": "08e9c4c869f2c4f356d06e266b1cfc59be666812", "url": "https://github.com/kiegroup/jbpm/commit/08e9c4c869f2c4f356d06e266b1cfc59be666812", "message": "Added tests to ServicesAwareAuditEventBuilder", "committedDate": "2020-01-28T11:26:42Z", "type": "commit"}, {"oid": "01a74e5c278141fcdd4353f3fe0c3297f445e84c", "url": "https://github.com/kiegroup/jbpm/commit/01a74e5c278141fcdd4353f3fe0c3297f445e84c", "message": "Fix some code formatting", "committedDate": "2020-01-28T11:29:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxMzk4NA==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372013984", "bodyText": "we can't use this dependency as it will cause cyclic dependency issue as kie server is built after JBPM", "author": "mswiderski", "createdAt": "2020-01-28T19:37:12Z", "path": "jbpm-services/jbpm-kie-services/pom.xml", "diffHunk": "@@ -106,6 +106,11 @@\n       <artifactId>kie-soup-maven-support</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>org.kie.server</groupId>\n+      <artifactId>kie-server-api</artifactId>", "originalCommit": "01a74e5c278141fcdd4353f3fe0c3297f445e84c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MzI1Nw==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372263257", "bodyText": "Dependency removed.", "author": "fsou", "createdAt": "2020-01-29T09:10:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxMzk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNDIwNg==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372014206", "bodyText": "just copy the name instead of referring to kieserverconstants", "author": "mswiderski", "createdAt": "2020-01-28T19:37:40Z", "path": "jbpm-services/jbpm-kie-services/src/main/java/org/jbpm/kie/services/impl/audit/ServicesAwareAuditEventBuilder.java", "diffHunk": "@@ -13,72 +13,77 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.jbpm.kie.services.impl.audit;\n \n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n import org.jbpm.process.audit.NodeInstanceLog;\n import org.jbpm.process.audit.ProcessInstanceLog;\n import org.jbpm.process.audit.VariableInstanceLog;\n import org.jbpm.process.audit.event.AuditEvent;\n import org.jbpm.process.audit.event.DefaultAuditEventBuilderImpl;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.process.instance.ProcessInstance;\n+import org.jbpm.process.instance.context.variable.VariableScopeInstance;\n import org.kie.api.event.process.ProcessCompletedEvent;\n import org.kie.api.event.process.ProcessNodeLeftEvent;\n import org.kie.api.event.process.ProcessNodeTriggeredEvent;\n import org.kie.api.event.process.ProcessStartedEvent;\n import org.kie.api.event.process.ProcessVariableChangedEvent;\n import org.kie.internal.identity.IdentityProvider;\n-\n+import org.kie.server.api.KieServerConstants;\n \n public class ServicesAwareAuditEventBuilder extends DefaultAuditEventBuilderImpl {\n \n-    private IdentityProvider identityProvider;    \n-    \n+    private IdentityProvider identityProvider;\n+\n     private String deploymentUnitId;\n \n+    private final Boolean allowSetInitiator = Boolean.parseBoolean(System.getProperty(KieServerConstants.CFG_BYPASS_AUTH_USER, \"false\"));", "originalCommit": "01a74e5c278141fcdd4353f3fe0c3297f445e84c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MzQyMQ==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372263421", "bodyText": "Change done.\nUsing property name instead.", "author": "fsou", "createdAt": "2020-01-29T09:11:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjAxNDIwNg=="}], "type": "inlineReview"}, {"oid": "0bf7dff976e258b9668ac61664c1c19715e5207b", "url": "https://github.com/kiegroup/jbpm/commit/0bf7dff976e258b9668ac61664c1c19715e5207b", "message": "Revert kie-server-api dependency", "committedDate": "2020-01-29T08:59:10Z", "type": "commit"}, {"oid": "f5e956d80b727ee03801f79add7decc74a19c5e2", "url": "https://github.com/kiegroup/jbpm/commit/f5e956d80b727ee03801f79add7decc74a19c5e2", "message": "Remove usage of KieServerConstants", "committedDate": "2020-01-29T09:09:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2Nzk4NA==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372267984", "bodyText": "What about the 4th possible scenario - bypass is true but there is no initiator? Will the identity be null?", "author": "MarianMacik", "createdAt": "2020-01-29T09:21:22Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/audit/ServicesAwareAuditEventBuilderTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.audit;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.drools.core.event.ProcessStartedEventImpl;\n+import org.jbpm.kie.services.test.ProcessServiceImplTest;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.process.audit.ProcessInstanceLog;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.process.instance.context.variable.VariableScopeInstance;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.core.WorkflowProcess;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.junit.runner.RunWith;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.process.CorrelationKey;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ServicesAwareAuditEventBuilderTest extends AbstractKieServicesBaseTest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(ProcessServiceImplTest.class);\n+\n+    private Map<String, Object> processMetadata = new HashMap<>();\n+\n+    @Mock\n+    ProcessInstanceImpl processInstance;\n+\n+    @Mock\n+    KieSession kieRuntime;\n+\n+    @Mock\n+    WorkflowProcess process;\n+\n+    @Mock\n+    CorrelationKey correlationKey;\n+\n+    @Mock\n+    VariableScopeInstance variableScope;\n+\n+    @Override\n+    public void setUp() throws Exception {\n+        super.setUp();\n+        processMetadata.put(\"CorrelationKey\", correlationKey);\n+\n+        setUpMocks();\n+    }\n+\n+    private void setUpMocks() {\n+        when(kieRuntime.getIdentifier()).thenReturn(2L);\n+\n+        when(processInstance.getId()).thenReturn(1L);\n+        when(processInstance.getDescription()).thenReturn(\"Some test Process\");\n+        when(processInstance.getSlaCompliance()).thenReturn(0);\n+        when(processInstance.getSlaDueDate()).thenReturn(null);\n+        when(processInstance.getMetaData()).thenReturn(processMetadata);\n+\n+        when(processInstance.getProcess()).thenReturn(process);\n+        when(process.getProcessType()).thenReturn(WorkflowProcess.PROCESS_TYPE);\n+        when(process.getName()).thenReturn(\"test-process\");\n+        when(process.getVersion()).thenReturn(VERSION);\n+\n+        when(processInstance.getContextInstance(eq(VariableScope.VARIABLE_SCOPE))).thenReturn(variableScope);\n+        when(variableScope.getVariables()).thenReturn(processMetadata);\n+\n+        when(correlationKey.toExternalForm()).thenReturn(\"1\");\n+    }\n+\n+    /**\n+     * Test build the ProcessInstanceLog for a regular process start\n+     */\n+    @Test\n+    public void testBuildProcessStartedEvent() {\n+        ServicesAwareAuditEventBuilder builder = new ServicesAwareAuditEventBuilder();\n+        builder.setIdentityProvider(identityProvider);\n+\n+        ProcessStartedEvent pse = new ProcessStartedEventImpl(processInstance, kieRuntime);\n+        ProcessInstanceLog log = (ProcessInstanceLog) builder.buildEvent(pse);\n+\n+        assertEquals(\"testUser\", log.getIdentity());\n+    }\n+\n+    /**\n+     * Test build the ProcessInstanceLog for a process with initiator metadata\n+     * and user auth bypasss not enabled\n+     */\n+    @Test\n+    public void testBuildProcessStartedEventWithInitiatorAndNoUserAuthBypass() {\n+\n+        processMetadata.put(\"initiator\", \"john\");\n+\n+        ServicesAwareAuditEventBuilder builder = new ServicesAwareAuditEventBuilder();\n+        builder.setIdentityProvider(identityProvider);\n+\n+        ProcessStartedEvent pse = new ProcessStartedEventImpl(processInstance, kieRuntime);\n+        ProcessInstanceLog log = (ProcessInstanceLog) builder.buildEvent(pse);\n+\n+        assertEquals(\"testUser\", log.getIdentity());\n+    }\n+\n+    /**\n+     * Test build the ProcessInstanceLog for a process with initiator metadata\n+     * and user auth bypasss enabled\n+     */\n+    @Test\n+    public void testBuildProcessStartedEventWithInitiatorAndUserAuthBypassEnabled() {\n+\n+        processMetadata.put(\"initiator\", \"john\");\n+\n+        ServicesAwareAuditEventBuilder builder = new ServicesAwareAuditEventBuilder();\n+        builder.setIdentityProvider(identityProvider);\n+\n+        enableSetInitiator(builder);\n+\n+        ProcessStartedEvent pse = new ProcessStartedEventImpl(processInstance, kieRuntime);\n+        ProcessInstanceLog log = (ProcessInstanceLog) builder.buildEvent(pse);\n+\n+        assertEquals(\"john\", log.getIdentity());\n+    }", "originalCommit": "f5e956d80b727ee03801f79add7decc74a19c5e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2ODU4OQ==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372268589", "bodyText": "No, it will use the data from the identity provider.\nBut I'll make a test for it.", "author": "fsou", "createdAt": "2020-01-29T09:22:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2Nzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MTI3NQ==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372281275", "bodyText": "Test done", "author": "fsou", "createdAt": "2020-01-29T09:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2Nzk4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAzNjExOQ==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r373036119", "bodyText": "Sure, I thought that if you bypass auth then the identity provider will return nothing, but of course there has to be something set, it will just not use the auth for engine operations... Anyway, thanks for adding the test!", "author": "MarianMacik", "createdAt": "2020-01-30T15:58:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2Nzk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MzY0MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372273641", "bodyText": "Would be good to organizm imports", "author": "mswiderski", "createdAt": "2020-01-29T09:32:52Z", "path": "jbpm-services/jbpm-kie-services/src/test/java/org/jbpm/kie/services/impl/audit/ServicesAwareAuditEventBuilderTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jbpm.kie.services.impl.audit;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.drools.core.event.ProcessStartedEventImpl;\n+import org.jbpm.kie.services.test.ProcessServiceImplTest;\n+import org.jbpm.kie.test.util.AbstractKieServicesBaseTest;\n+import org.jbpm.process.audit.ProcessInstanceLog;\n+import org.jbpm.process.core.context.variable.VariableScope;\n+import org.jbpm.process.instance.context.variable.VariableScopeInstance;\n+import org.jbpm.process.instance.impl.ProcessInstanceImpl;\n+import org.jbpm.workflow.core.WorkflowProcess;\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.junit.runner.RunWith;\n+import org.kie.api.event.process.ProcessStartedEvent;\n+import org.kie.api.runtime.KieSession;\n+import org.kie.internal.process.CorrelationKey;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;", "originalCommit": "f5e956d80b727ee03801f79add7decc74a19c5e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MTc4MQ==", "url": "https://github.com/kiegroup/jbpm/pull/1586#discussion_r372281781", "bodyText": "imports organized.\nThought maven would warn me for this but it didn't.", "author": "fsou", "createdAt": "2020-01-29T09:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MzY0MQ=="}], "type": "inlineReview"}, {"oid": "6c3a33bdd17d0389355384c3007a00b797c0230f", "url": "https://github.com/kiegroup/jbpm/commit/6c3a33bdd17d0389355384c3007a00b797c0230f", "message": "Added test case for bypass enabled but no initiator process data\n\nRefactored test class and organized imports", "committedDate": "2020-01-29T09:47:17Z", "type": "commit"}]}