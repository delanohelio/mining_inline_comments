{"pr_number": 1203, "pr_title": "Schema Auto-detection", "pr_createdAt": "2020-08-21T12:47:26Z", "pr_url": "https://github.com/cdapio/hydrator-plugins/pull/1203", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1MDA4OA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r475850088", "bodyText": "format context should be nullable", "author": "CuriousVini", "createdAt": "2020-08-24T19:40:06Z", "path": "format-delimited/src/main/java/io/cdap/plugin/format/delimited/input/DelimitedConfig.java", "diffHunk": "@@ -49,4 +66,103 @@\n   public boolean getSkipHeader() {\n     return skipHeader == null ? false : skipHeader;\n   }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema() {\n+    if (containsMacro(NAME_SCHEMA)) {\n+      return null;\n+    }\n+    if (schema == null || schema.equals(\"\")) {\n+      try {\n+        return getDefaultSchema(null);\n+      } catch (IOException e) {\n+        throw new IllegalArgumentException(\"Invalid schema: \" + e.getMessage(), e);\n+      }\n+    }\n+    return super.getSchema();\n+  }\n+\n+  /**\n+   * Reads delimiter from config\n+   * If not available returns default delimiter based on format\n+   * @return delimiter\n+   */\n+  private String getDefaultDelimiter() {\n+    String delimiter = getProperties().getProperties().get(DELIMITER);\n+    if (delimiter != null) {\n+      return delimiter;\n+    }\n+    final String format = getProperties().getProperties().get(FORMAT);\n+    switch (format) {\n+      case \"tsv\":\n+        return \"\\t\";\n+      default:\n+        return \",\";\n+    }\n+  }\n+\n+  /**\n+   * Extract schema from file\n+   *\n+   * @param context {@link FormatContext}\n+   * @return {@link Schema}\n+   * @throws IOException raised when error occurs during schema extraction\n+   */\n+  public Schema getDefaultSchema(FormatContext context) throws IOException {", "originalCommit": "e7cb4f400c213120e75acc88ecc970dd7d2a5466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1Mzk5Mw==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r475853993", "bodyText": "what would this return?", "author": "CuriousVini", "createdAt": "2020-08-24T19:48:02Z", "path": "format-avro/src/main/java/io/cdap/plugin/format/avro/input/AvroInputFormatProvider.java", "diffHunk": "@@ -56,4 +73,78 @@ protected void addFormatProperties(Map<String, String> properties) {\n       properties.put(\"avro.schema.input.key\", schema.toString());\n     }\n   }\n+\n+  /**\n+   * Common config for Avro format\n+   */\n+  public static class Conf extends PathTrackingConfig {\n+\n+    @Macro\n+    @Nullable\n+    @Description(NAME_SCHEMA)\n+    public String schema;\n+\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema(FormatContext context) {\n+    if (conf.containsMacro(\"schema\")) {\n+      return super.getSchema(context);", "originalCommit": "e7cb4f400c213120e75acc88ecc970dd7d2a5466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxOTE4OQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r482819189", "bodyText": "@CuriousVini it would fallback to getSchema of PathTrackingInputFormatProvider which depending on when it's called would either return the existing output schema or null.", "author": "ailegion", "createdAt": "2020-09-03T08:57:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1Mzk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1NDA5OQ==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r475854099", "bodyText": "should be annotated as nullable", "author": "CuriousVini", "createdAt": "2020-08-24T19:48:16Z", "path": "format-avro/src/main/java/io/cdap/plugin/format/avro/input/AvroInputFormatProvider.java", "diffHunk": "@@ -56,4 +73,78 @@ protected void addFormatProperties(Map<String, String> properties) {\n       properties.put(\"avro.schema.input.key\", schema.toString());\n     }\n   }\n+\n+  /**\n+   * Common config for Avro format\n+   */\n+  public static class Conf extends PathTrackingConfig {\n+\n+    @Macro\n+    @Nullable\n+    @Description(NAME_SCHEMA)\n+    public String schema;\n+\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema(FormatContext context) {\n+    if (conf.containsMacro(\"schema\")) {\n+      return super.getSchema(context);\n+    }\n+    if (!Strings.isNullOrEmpty(conf.schema)) {\n+      return super.getSchema(context);\n+    }\n+    String filePath = conf.getProperties().getProperties().getOrDefault(\"path\", null);\n+    if (filePath == null) {\n+      return super.getSchema(context);\n+    }\n+    try {\n+      return getDefaultSchema(context);\n+    } catch (IOException e) {\n+      throw new IllegalArgumentException(\"Invalid schema: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * Extract schema from file\n+   *\n+   * @param context {@link FormatContext}\n+   * @return {@link Schema}\n+   * @throws IOException raised when error occurs during schema extraction\n+   */\n+  public Schema getDefaultSchema(FormatContext context) throws IOException {", "originalCommit": "e7cb4f400c213120e75acc88ecc970dd7d2a5466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTg1NDI2OA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r475854268", "bodyText": "nit: can be in one line", "author": "CuriousVini", "createdAt": "2020-08-24T19:48:37Z", "path": "format-avro/src/main/java/io/cdap/plugin/format/avro/input/AvroInputFormatProvider.java", "diffHunk": "@@ -56,4 +73,78 @@ protected void addFormatProperties(Map<String, String> properties) {\n       properties.put(\"avro.schema.input.key\", schema.toString());\n     }\n   }\n+\n+  /**\n+   * Common config for Avro format\n+   */\n+  public static class Conf extends PathTrackingConfig {\n+\n+    @Macro\n+    @Nullable\n+    @Description(NAME_SCHEMA)\n+    public String schema;\n+\n+  }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema(FormatContext context) {\n+    if (conf.containsMacro(\"schema\")) {\n+      return super.getSchema(context);\n+    }\n+    if (!Strings.isNullOrEmpty(conf.schema)) {\n+      return super.getSchema(context);\n+    }\n+    String filePath = conf.getProperties().getProperties().getOrDefault(\"path\", null);\n+    if (filePath == null) {\n+      return super.getSchema(context);\n+    }\n+    try {\n+      return getDefaultSchema(context);\n+    } catch (IOException e) {\n+      throw new IllegalArgumentException(\"Invalid schema: \" + e.getMessage(), e);\n+    }\n+  }\n+\n+  /**\n+   * Extract schema from file\n+   *\n+   * @param context {@link FormatContext}\n+   * @return {@link Schema}\n+   * @throws IOException raised when error occurs during schema extraction\n+   */\n+  public Schema getDefaultSchema(FormatContext context) throws IOException {\n+    String filePath = conf.getProperties().getProperties().getOrDefault(\"path\", null);\n+    SeekableInput seekableInput = null;\n+    FileReader<GenericRecord> dataFileReader = null;\n+    try {\n+      Job job = JobUtils.createInstance();\n+      Configuration hconf = job.getConfiguration();\n+      // set entries here, before FileSystem is used\n+      for (Map.Entry<String, String> entry : conf.getFileSystemProperties().entrySet()) {\n+        hconf.set(entry.getKey(), entry.getValue());\n+      }\n+      Path file = conf.getFilePathForSchemaGeneration(filePath, NAME, hconf);\n+      DatumReader<GenericRecord> dataReader = new GenericDatumReader<>();\n+      seekableInput = new FsInput(file, hconf);\n+      dataFileReader = DataFileReader\n+        .openReader(seekableInput, dataReader);", "originalCommit": "e7cb4f400c213120e75acc88ecc970dd7d2a5466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0NTk1OA==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r477645958", "bodyText": "@bdmogal  This schema generation goes a long way in auto detecting the column names. But we may have to extend this to infer other types as well.", "author": "meetdestiny", "createdAt": "2020-08-26T23:03:16Z", "path": "format-delimited/src/main/java/io/cdap/plugin/format/delimited/input/DelimitedConfig.java", "diffHunk": "@@ -49,4 +66,103 @@\n   public boolean getSkipHeader() {\n     return skipHeader == null ? false : skipHeader;\n   }\n+\n+  @Nullable\n+  @Override\n+  public Schema getSchema() {\n+    if (containsMacro(NAME_SCHEMA)) {\n+      return null;\n+    }\n+    if (schema == null || schema.equals(\"\")) {\n+      try {\n+        return getDefaultSchema(null);\n+      } catch (IOException e) {\n+        throw new IllegalArgumentException(\"Invalid schema: \" + e.getMessage(), e);\n+      }\n+    }\n+    return super.getSchema();\n+  }\n+\n+  /**\n+   * Reads delimiter from config\n+   * If not available returns default delimiter based on format\n+   * @return delimiter\n+   */\n+  private String getDefaultDelimiter() {\n+    String delimiter = getProperties().getProperties().get(DELIMITER);\n+    if (delimiter != null) {\n+      return delimiter;\n+    }\n+    final String format = getProperties().getProperties().get(FORMAT);\n+    switch (format) {\n+      case \"tsv\":\n+        return \"\\t\";\n+      default:\n+        return \",\";\n+    }\n+  }\n+\n+  /**\n+   * Extract schema from file\n+   *\n+   * @param context {@link FormatContext}\n+   * @return {@link Schema}\n+   * @throws IOException raised when error occurs during schema extraction\n+   */\n+  public Schema getDefaultSchema(FormatContext context) throws IOException {\n+    final String format = getProperties().getProperties().getOrDefault(FORMAT, \"delimited\");\n+    String delimiter = getProperties().getProperties().get(DELIMITER);\n+    if (format.equals(\"delimited\") && Strings.isNullOrEmpty(delimiter)) {\n+      throw new IllegalArgumentException(\"Delimiter is required when format is set to 'delimited'.\");\n+    }\n+    List<Schema.Field> fields = new ArrayList<>();\n+    String path = getProperties().getProperties().getOrDefault(\n+      \"path\", \"\"\n+    );\n+\n+    Job job = JobUtils.createInstance();\n+    Configuration conf = job.getConfiguration();\n+    // set entries here, before FileSystem is used\n+    for (Map.Entry<String, String> entry : getFileSystemProperties().entrySet()) {\n+      conf.set(entry.getKey(), entry.getValue());\n+    }\n+    FSDataInputStream input = null;\n+    BufferedReader bufferedReader = null;\n+    String line = null;\n+    try {\n+      final Path file = getFilePathForSchemaGeneration(path,\n+                                                       format.equals(\"delimited\") ? null : format, conf);\n+      final FileSystem fileSystem = FileSystem.get(file.toUri(), conf);\n+      input = fileSystem.open(file);\n+      bufferedReader = new BufferedReader(new InputStreamReader(input));\n+      line = bufferedReader.readLine();\n+      if (line == null) {\n+        return null;\n+      }\n+    } finally {\n+      if (bufferedReader != null) {\n+        bufferedReader.close();\n+      }\n+      if (input != null) {\n+        input.close();\n+      }\n+    }\n+    String[] columns = line.split(getDefaultDelimiter());\n+    int count = 1;\n+    for (String column : columns) {\n+      if (getSkipHeader()) {\n+        fields.add(Schema.Field.of(column, Schema.of(Schema.Type.STRING)));", "originalCommit": "e7cb4f400c213120e75acc88ecc970dd7d2a5466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Nzg0NjQxNg==", "url": "https://github.com/cdapio/hydrator-plugins/pull/1203#discussion_r477846416", "bodyText": "Sure, for CSV, the current requirement was to treat it as all strings, since that's how Wrangler does it today. However, happy to hear thoughts about how you are extending it to other types.\nWe can track that separately", "author": "bdmogal", "createdAt": "2020-08-27T01:08:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzY0NTk1OA=="}], "type": "inlineReview"}, {"oid": "a929cdb8caf4c77573950dee09928ce359fa55a8", "url": "https://github.com/cdapio/hydrator-plugins/commit/a929cdb8caf4c77573950dee09928ce359fa55a8", "message": "added: SchemaAutodetection support for delimited formats", "committedDate": "2020-09-18T09:21:50Z", "type": "commit"}, {"oid": "a929cdb8caf4c77573950dee09928ce359fa55a8", "url": "https://github.com/cdapio/hydrator-plugins/commit/a929cdb8caf4c77573950dee09928ce359fa55a8", "message": "added: SchemaAutodetection support for delimited formats", "committedDate": "2020-09-18T09:21:50Z", "type": "forcePushed"}]}