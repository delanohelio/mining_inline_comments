{"pr_number": 740, "pr_title": "feat(engine): set removal time to auth when identity link is added", "pr_createdAt": "2020-03-18T15:44:10Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/740", "timeline": [{"oid": "cbd62054664c534ade0375344b3560e22d4ececa", "url": "https://github.com/camunda/camunda-bpm-platform/commit/cbd62054664c534ade0375344b3560e22d4ececa", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-19T13:24:58Z", "type": "forcePushed"}, {"oid": "bdd022a1aca7c6350de8c649495815f136b20bf9", "url": "https://github.com/camunda/camunda-bpm-platform/commit/bdd022a1aca7c6350de8c649495815f136b20bf9", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-20T14:55:15Z", "type": "forcePushed"}, {"oid": "89fdcef1f0a957b75fa707d24f2a5204b16a694f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/89fdcef1f0a957b75fa707d24f2a5204b16a694f", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-23T17:23:32Z", "type": "forcePushed"}, {"oid": "551b0e6d5e1817c54949ec9d6de5a881c340422c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/551b0e6d5e1817c54949ec9d6de5a881c340422c", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-25T16:28:16Z", "type": "forcePushed"}, {"oid": "b61320cc696524b53a5c4890ff80c18becc6eb27", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b61320cc696524b53a5c4890ff80c18becc6eb27", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-25T16:38:11Z", "type": "forcePushed"}, {"oid": "5b3ceaf2631992fa79ee0a57562ffe6f5f024de2", "url": "https://github.com/camunda/camunda-bpm-platform/commit/5b3ceaf2631992fa79ee0a57562ffe6f5f024de2", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-25T16:53:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNTQ3MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399125471", "bodyText": "The logic in the lines above (setting root instance id and removal time) is only necessary when the authorization is created, not when it is updated. I think it would be good to only perform it in the creation case to avoid unnecessary queries for the root process instance.", "author": "ThorbenLindhauer", "createdAt": "2020-03-27T09:12:37Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/auth/DefaultAuthorizationProvider.java", "diffHunk": "@@ -292,10 +294,53 @@\n           updateAuthorization(historyAuthorization, userId, groupId, HISTORIC_TASK,\n               taskId, HistoricTaskPermissions.READ);\n \n+      String rootProcessInstanceId = getRootProcessInstanceId(task);\n+\n+      historyAuthorization.setRootProcessInstanceId(rootProcessInstanceId);\n+\n+      if (isHistoryRemovalTimeStrategyStart()) {\n+        HistoryEvent rootProcessInstance = findHistoricProcessInstance(rootProcessInstanceId);\n+\n+        Date removalTime = null;\n+        if (rootProcessInstance != null) {\n+          removalTime = rootProcessInstance.getRemovalTime();\n+\n+        }\n+\n+        historyAuthorization.setRemovalTime(removalTime);\n+      }\n+", "originalCommit": "5b3ceaf2631992fa79ee0a57562ffe6f5f024de2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1NDI1MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399154251", "bodyText": "When we only do it on creation, we miss the following case:\n\nA user creates a historic task authorization manually\nThe user (1) realizes later that there is a typo in the task id or (2) wants to change the authorization from ANY to a concrete task id\nNo root process instance id is assigned\n\nThis is counter-intuitive for the user.", "author": "tasso94", "createdAt": "2020-03-27T10:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4NjUxNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399186516", "bodyText": "Isn't that case covered by the changes you made in SaveAuthorizationCmd via CAM-11617? When the user fixes the authorization, then it automatically receives the root instance id.", "author": "ThorbenLindhauer", "createdAt": "2020-03-27T11:02:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNTQ3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE5MDc0MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399190741", "bodyText": "Sorry, I did not pay enough attention to the exact code and mixed both places up. I think you are right.", "author": "tasso94", "createdAt": "2020-03-27T11:11:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyNTQ3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyODM3NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399128374", "bodyText": "In case of standalone tasks (root instance id == null), we don't have to go looking for the root instance.\nWhich removal time should a standalone task permissions receive?", "author": "ThorbenLindhauer", "createdAt": "2020-03-27T09:17:34Z", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/auth/DefaultAuthorizationProvider.java", "diffHunk": "@@ -292,10 +294,53 @@\n           updateAuthorization(historyAuthorization, userId, groupId, HISTORIC_TASK,\n               taskId, HistoricTaskPermissions.READ);\n \n+      String rootProcessInstanceId = getRootProcessInstanceId(task);\n+\n+      historyAuthorization.setRootProcessInstanceId(rootProcessInstanceId);\n+\n+      if (isHistoryRemovalTimeStrategyStart()) {", "originalCommit": "5b3ceaf2631992fa79ee0a57562ffe6f5f024de2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1NTU2OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399155569", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-03-27T10:05:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEyODM3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMzMwMA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399133300", "bodyText": "This is a bit inconsistent with removal time not being part of the authorization's persistent state (#getPersistentState). I don't see a concrete problem here and believe both of the following should work:\n\nRemove REMOVAL_TIME_ from the update mapping: With removal time strategy start, we always set the removal time when the permission is inserted and it can never change later\nAdd removalTime to the persistent state. This makes it consistent, although probably not strictly necessary as the removal time is never updated on its own. Could avoid future bugs though.", "author": "ThorbenLindhauer", "createdAt": "2020-03-27T09:26:06Z", "path": "engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/Authorization.xml", "diffHunk": "@@ -55,11 +59,20 @@\n       USER_ID_ = #{userId, jdbcType=VARCHAR},\n       RESOURCE_TYPE_ = #{resourceType, jdbcType=INTEGER},\n       RESOURCE_ID_ = #{resourceId, jdbcType=VARCHAR},\n-      PERMS_ = #{permissions, jdbcType=INTEGER}\n+      PERMS_ = #{permissions, jdbcType=INTEGER},\n+      REMOVAL_TIME_ = #{removalTime, jdbcType=TIMESTAMP}", "originalCommit": "5b3ceaf2631992fa79ee0a57562ffe6f5f024de2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE1OTYyMA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399159620", "bodyText": "Respecting the case in my comment before [1], I would prefer the second option.\n[1] #740 (comment)", "author": "tasso94", "createdAt": "2020-03-27T10:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMzMwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2MjcyNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r400162727", "bodyText": "I would still prefer the second option since we need to update the authorization in CAM-11617.", "author": "tasso94", "createdAt": "2020-03-30T12:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTEzMzMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0MTk3Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399141977", "bodyText": "Why was this test changed?", "author": "ThorbenLindhauer", "createdAt": "2020-03-27T09:41:10Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/HistoricRootProcessInstanceTest.java", "diffHunk": "@@ -588,9 +592,11 @@ public void shouldResolveUserOperationLog_ClaimTask() {\n \n     ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n \n+    String taskId = taskService.createTaskQuery().singleResult().getId();\n+\n     // when\n     identityService.setAuthenticatedUserId(\"aUserId\");\n-    taskService.claim(taskService.createTaskQuery().singleResult().getId(), \"aUserId\");\n+    taskService.setAssignee(taskId, \"aUserId\");", "originalCommit": "5b3ceaf2631992fa79ee0a57562ffe6f5f024de2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2OTYwNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399169605", "bodyText": "An already assigned task cannot be claimed. Consider these changes [1]\nThe purpose of the test is covering the identity link behavior in general; It does not really matter which API method is called to create the identity link\nMy proposal would be to rename the test method\n\n[1] https://github.com/camunda/camunda-bpm-platform/pull/740/files/3db981226a34ce7701440a08a49e5e01c27339ef..5b3ceaf2631992fa79ee0a57562ffe6f5f024de2#diff-c557285d6812e516c93a0a07f4b309c3R75-R77", "author": "tasso94", "createdAt": "2020-03-27T10:30:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0MTk3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE4ODczMg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399188732", "bodyText": "I see, thanks for clarifying. Renaming would be good then, I agree.", "author": "ThorbenLindhauer", "createdAt": "2020-03-27T11:07:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0MTk3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0NDQzNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399144435", "bodyText": "Nitpicking: The //then part of the test begins here. For me, the most important aspect of the given-when-then structure is that I can quickly understand which functionality is tested, so the when part should contain only the statements that trigger the code under test.", "author": "ThorbenLindhauer", "createdAt": "2020-03-27T09:45:27Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java", "diffHunk": "@@ -349,6 +353,92 @@ public void shouldResolveHistoricTaskInstance() {\n     assertThat(historicTaskInstance.getRemovalTime(), is(removalTime));\n   }\n \n+  @Test\n+  public void shouldWriteHistoryAndResolveHistoricTaskAuthorizationInDifferentTransactions() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n+\n+    String taskId = taskService.createTaskQuery().singleResult().getId();\n+\n+    enabledAuth();\n+    taskService.setAssignee(taskId, \"myUserId\");\n+    disableAuth();\n+\n+    Authorization authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_TASK)\n+        .singleResult();\n+\n+    // assume\n+    assertThat(authorization.getRemovalTime(), nullValue());\n+\n+    ClockUtil.setCurrentTime(END_DATE);\n+\n+    // when\n+    taskService.complete(taskId);\n+\n+    authorization = authorizationService.createAuthorizationQuery()", "originalCommit": "5b3ceaf2631992fa79ee0a57562ffe6f5f024de2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2MTc4OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399161789", "bodyText": "My understanding is the following:\n\nwhen refers to the next line of code\nthen refers to the assertions\ncode lines between when+ 1 and then retrieve data in preparation of the assertions", "author": "tasso94", "createdAt": "2020-03-27T10:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0NDQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2NDg2Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399164863", "bodyText": "Okay, I see the role of then differently. It should include the code that fetches the data. I can already find assertions easily by looking for assert* lines. Maybe we can discuss this in the next team meeting and clarify our testing best practice. I don't mind if we merge this PR in one way or the other.", "author": "ThorbenLindhauer", "createdAt": "2020-03-27T10:21:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0NDQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE2NjQ0Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/740#discussion_r399166442", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-03-27T10:24:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0NDQzNQ=="}], "type": "inlineReview"}, {"oid": "93d3547ebbae88e27cf5b4c565c01803da7c1ff1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/93d3547ebbae88e27cf5b4c565c01803da7c1ff1", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-30T13:13:08Z", "type": "forcePushed"}, {"oid": "c270402e06c71b8a6db5ef57c85fa42ae673d222", "url": "https://github.com/camunda/camunda-bpm-platform/commit/c270402e06c71b8a6db5ef57c85fa42ae673d222", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-31T07:08:33Z", "type": "forcePushed"}, {"oid": "4ba0cafabeaeb80feec14993ef480608b9e6d66f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4ba0cafabeaeb80feec14993ef480608b9e6d66f", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-31T11:37:42Z", "type": "commit"}, {"oid": "4ba0cafabeaeb80feec14993ef480608b9e6d66f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4ba0cafabeaeb80feec14993ef480608b9e6d66f", "message": "feat(engine): set removal time to auth when identity link is added\n\nrelated to CAM-11646", "committedDate": "2020-03-31T11:37:42Z", "type": "forcePushed"}]}