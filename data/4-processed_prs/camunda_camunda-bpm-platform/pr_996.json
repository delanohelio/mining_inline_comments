{"pr_number": 996, "pr_title": "CAM-10797 added check for non-existing group and user", "pr_createdAt": "2020-09-20T17:22:47Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/996", "timeline": [{"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/8ee2a20d4123df82198df53eb9ac8f492731fe3c", "message": "CAM-10797 added check for non-existing group and user", "committedDate": "2020-09-20T17:19:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494318840", "bodyText": "Instead of the complex try, catch and instanceof check, you could simply expect an exception of type NullValueException with the ExpectedExceptionRule. You can also use this rule to expect a certain exception message.", "author": "mboskamp", "createdAt": "2020-09-24T13:31:37Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }", "originalCommit": "8ee2a20d4123df82198df53eb9ac8f492731fe3c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyMDQ1NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494320454", "bodyText": "Example: https://github.com/camunda/camunda-bpm-platform/blob/master/engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java#L367-L373", "author": "mboskamp", "createdAt": "2020-09-24T13:33:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NDM5Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494874392", "bodyText": "@mboskamp thanks for your inputs. will do the changes.", "author": "hirenpandit", "createdAt": "2020-09-25T09:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA1ODUyNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r495058524", "bodyText": "@mboskamp done!", "author": "hirenpandit", "createdAt": "2020-09-25T15:17:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxOTA4OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494319089", "bodyText": "Same as above", "author": "mboskamp", "createdAt": "2020-09-24T13:31:57Z", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }\n   }\n \n   @Test\n   public void testCreateMembershipUnexistingUser() {\n     Group sales = identityService.newGroup(\"sales\");\n     identityService.saveGroup(sales);\n+    try {\n+      identityService.createMembership(\"unexistinguser\", sales.getId());\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No user found with id 'unexistinguser'.: user is null\", ex.getMessage());\n+    }\n \n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(\"unexistinguser\", sales.getId());\n   }", "originalCommit": "8ee2a20d4123df82198df53eb9ac8f492731fe3c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "78fe85e1e3cae0e39d34df76f32d3ee82b3be48f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/78fe85e1e3cae0e39d34df76f32d3ee82b3be48f", "message": "Merge branch 'master' of https://github.com/camunda/camunda-bpm-platform", "committedDate": "2020-09-25T14:44:43Z", "type": "commit"}, {"oid": "b3bfa62dfa8c71bb5f6a5a317673720b15f747c4", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b3bfa62dfa8c71bb5f6a5a317673720b15f747c4", "message": "CAM-10797 updated tests", "committedDate": "2020-09-25T15:15:58Z", "type": "commit"}]}