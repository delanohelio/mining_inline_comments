{"pr_number": 1142, "pr_title": "CAM-12752: add DB matrix stages", "pr_createdAt": "2020-11-24T13:32:03Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/1142", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0OTY2MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529549661", "bodyText": "Do we still need this file?", "author": "yanavasileva", "createdAt": "2020-11-24T13:36:48Z", "path": ".ci/maven/nexus-settings.xml", "diffHunk": "@@ -0,0 +1,141 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"", "originalCommit": "db9d389208064074cffca28e7d21be929b2e8958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NTkzNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529565936", "bodyText": "Removed it. I added it for testing purposes and forgot to remove it.", "author": "koevskinikola", "createdAt": "2020-11-24T14:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0OTY2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MzcyNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529553727", "bodyText": "Do we need the first agent?", "author": "yanavasileva", "createdAt": "2020-11-24T13:42:55Z", "path": "Jenkinsfile", "diffHunk": "@@ -351,46 +350,233 @@ pipeline {\n         }\n       }\n     }\n+    stage(\"engine-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+//        when {\n+//          anyOf {\n+//            branch 'pipeline-master';\n+//            allOf {\n+//              changeRequest();\n+//              expression {\n+//                withLabels(\"all-db\") || withDbLabel(env.DB)\n+//              }\n+//            }\n+//          }\n+//        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)", "originalCommit": "db9d389208064074cffca28e7d21be929b2e8958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzNTQ3MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529635470", "bodyText": "I'm not sure about this. I'll check and let you know.", "author": "koevskinikola", "createdAt": "2020-11-24T15:28:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MzcyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDIwMzM2Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r530203362", "bodyText": "You're right, we don't need the first one! I'll also adjust it in the daily pipeline since I added the same thing there.", "author": "koevskinikola", "createdAt": "2020-11-25T08:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MzcyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzM0Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529557342", "bodyText": "We need more memory for this one otherwise, it will fail", "author": "yanavasileva", "createdAt": "2020-11-24T13:48:16Z", "path": "Jenkinsfile", "diffHunk": "@@ -351,46 +350,233 @@ pipeline {\n         }\n       }\n     }\n+    stage(\"engine-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+//        when {\n+//          anyOf {\n+//            branch 'pipeline-master';\n+//            allOf {\n+//              changeRequest();\n+//              expression {\n+//                withLabels(\"all-db\") || withDbLabel(env.DB)\n+//              }\n+//            }\n+//          }\n+//        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"engine-UNIT\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'engine/', 'clean test -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"engine-UNIT-authorizations DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16) + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"engine-UNIT-authorizations\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'engine/', 'clean test -PcfgAuthorizationCheckRevokesAlways' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"webapp-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"webapp-UNIT\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'webapps/', 'clean test -Dskip.frontend.build=true -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"webapp-UNIT-authorizations DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"webapp-UNIT-authorizations\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'webapps/', 'clean test -Dskip.frontend.build=true -PcfgAuthorizationCheckRevokesAlways' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n     stage('db tests + CE webapps IT + EE platform') {\n       parallel {\n         stage('engine-api-compatibility') {\n           agent {\n             kubernetes {\n-              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+              yaml getAgent()", "originalCommit": "db9d389208064074cffca28e7d21be929b2e8958", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzQ1Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529557456", "bodyText": "same here", "author": "yanavasileva", "createdAt": "2020-11-24T13:48:28Z", "path": "Jenkinsfile", "diffHunk": "@@ -351,46 +350,233 @@ pipeline {\n         }\n       }\n     }\n+    stage(\"engine-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+//        when {\n+//          anyOf {\n+//            branch 'pipeline-master';\n+//            allOf {\n+//              changeRequest();\n+//              expression {\n+//                withLabels(\"all-db\") || withDbLabel(env.DB)\n+//              }\n+//            }\n+//          }\n+//        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"engine-UNIT\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'engine/', 'clean test -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"engine-UNIT-authorizations DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16) + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"engine-UNIT-authorizations\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'engine/', 'clean test -PcfgAuthorizationCheckRevokesAlways' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"webapp-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"webapp-UNIT\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'webapps/', 'clean test -Dskip.frontend.build=true -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"webapp-UNIT-authorizations DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"webapp-UNIT-authorizations\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'webapps/', 'clean test -Dskip.frontend.build=true -PcfgAuthorizationCheckRevokesAlways' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n     stage('db tests + CE webapps IT + EE platform') {\n       parallel {\n         stage('engine-api-compatibility') {\n           agent {\n             kubernetes {\n-              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+              yaml getAgent()\n             }\n           }\n           steps{\n-            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'maven-nexus-settings') {\n+            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n               runMaven(true, false, false, 'engine/', 'clean verify -Pcheck-api-compatibility')\n             }\n           }\n         }\n         stage('engine-UNIT-plugins') {\n           agent {\n             kubernetes {\n-              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+              yaml getAgent()", "originalCommit": "db9d389208064074cffca28e7d21be929b2e8958", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1ODE0Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529558142", "bodyText": "We should not change this file", "author": "yanavasileva", "createdAt": "2020-11-24T13:49:28Z", "path": "settings/maven/nexus-settings.xml", "diffHunk": "@@ -2,26 +2,40 @@\n <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n+  <interactiveMode>false</interactiveMode>\n   <mirrors>\n     <mirror>\n       <id>camunda-nexus</id>\n       <mirrorOf>*</mirrorOf>\n       <name>Camunda Nexus</name>\n-      <url>https://app.camunda.com/nexus/content/groups/public</url>\n+      <url>http://repository-ci-camunda-cloud.nexus:8081/content/groups/internal/</url>", "originalCommit": "db9d389208064074cffca28e7d21be929b2e8958", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU2NTQxOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529565419", "bodyText": "Reverted the changes. Made them during testing.", "author": "koevskinikola", "createdAt": "2020-11-24T13:59:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1ODE0Mg=="}], "type": "inlineReview"}, {"oid": "8749339dabc08b79a3e14f63b6620a8b66046c01", "url": "https://github.com/camunda/camunda-bpm-platform/commit/8749339dabc08b79a3e14f63b6620a8b66046c01", "message": "feat(pipeline): add db matrices\n\nRelated to CAM-12712, CAM-12752", "committedDate": "2020-11-25T09:23:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3ODIzNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r530278236", "bodyText": "Is it a typo?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            void withDbLabels(String dbLabel) {\n          \n          \n            \n            void withDbLabel(String dbLabel) {", "author": "yanavasileva", "createdAt": "2020-11-25T10:48:17Z", "path": "Jenkinsfile", "diffHunk": "@@ -434,3 +641,85 @@ void withLabels(String... labels) {\n     pullRequest.labels.contains(labelName)\n   }\n }\n+\n+void withDbLabels(String dbLabel) {", "originalCommit": "8749339dabc08b79a3e14f63b6620a8b66046c01", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5NDMzMA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r530294330", "bodyText": "Yes it is. Thanks!", "author": "koevskinikola", "createdAt": "2020-11-25T11:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3ODIzNg=="}], "type": "inlineReview"}, {"oid": "5d53172dd0f16b9728a203ac7d8a1fc6ff6b12f6", "url": "https://github.com/camunda/camunda-bpm-platform/commit/5d53172dd0f16b9728a203ac7d8a1fc6ff6b12f6", "message": "feat(pipeline): add missing second step stages\n\n* Include engine-UNIT-db-table-prefix, engine-UNIT-wls-compatibility\n* Include IT-wildfly-domain and IT-wildfly-servlet\n\nRelated to CAM-12712, CAM-12752", "committedDate": "2020-11-25T13:09:02Z", "type": "commit"}, {"oid": "995721109edfa37f8d8eef10b8762aa372110922", "url": "https://github.com/camunda/camunda-bpm-platform/commit/995721109edfa37f8d8eef10b8762aa372110922", "message": "feat(pipeline): add db matrices\n\nRelated to CAM-12712, CAM-12752", "committedDate": "2020-11-25T13:20:33Z", "type": "commit"}, {"oid": "995721109edfa37f8d8eef10b8762aa372110922", "url": "https://github.com/camunda/camunda-bpm-platform/commit/995721109edfa37f8d8eef10b8762aa372110922", "message": "feat(pipeline): add db matrices\n\nRelated to CAM-12712, CAM-12752", "committedDate": "2020-11-25T13:20:33Z", "type": "forcePushed"}]}