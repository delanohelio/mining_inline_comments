{"pr_number": 1184, "pr_title": "CAM-12863: Pipeline extract artifact logic", "pr_createdAt": "2020-12-10T14:04:43Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/1184", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4ODI0OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1184#discussion_r540888248", "bodyText": "Since we're generally not using exclusion patterns when archiving artifacts, can we provide refactor the existing cambpmArchiveArtifacts method, or create a new one that will accept a varargs argument where we can provide all of the patterns as an array?", "author": "koevskinikola", "createdAt": "2020-12-11T11:41:58Z", "path": "Jenkinsfile", "diffHunk": "@@ -78,15 +78,15 @@ pipeline {\n \n           // archive all .jar, .pom, .xml, .txt runtime artifacts + required .war/.zip/.tar.gz for EE pipeline\n           // add a new line for each group of artifacts\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/*.jar,.m2/org/camunda/**/*-SNAPSHOT/**/*.pom,.m2/org/camunda/**/*-SNAPSHOT/**/*.xml,.m2/org/camunda/**/*-SNAPSHOT/**/*.txt', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*frontend-sources.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/license-book*.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-jboss-modules*.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-*-assembly*.tar.gz', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-h2-webapp*.war', followSymlinks: false\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/*.jar,.m2/org/camunda/**/*-SNAPSHOT/**/*.pom,.m2/org/camunda/**/*-SNAPSHOT/**/*.xml,.m2/org/camunda/**/*-SNAPSHOT/**/*.txt')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*frontend-sources.zip')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/license-book*.zip')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-jboss-modules*.zip')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-*-assembly*.tar.gz')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*.war')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-h2-webapp*.war')", "originalCommit": "303bf7a1a0d5aadf91b6f3ef83b851d2dbd884bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cdf833443437640de9d9059f93ca80e7bd8a769c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/cdf833443437640de9d9059f93ca80e7bd8a769c", "message": "chore(ci): extract artifact logic", "committedDate": "2020-12-14T11:34:56Z", "type": "commit"}, {"oid": "4909c2e4b4ff9d25ed4a6735a3f4e507d397a01b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4909c2e4b4ff9d25ed4a6735a3f4e507d397a01b", "message": "review hints", "committedDate": "2020-12-14T11:34:59Z", "type": "commit"}, {"oid": "4909c2e4b4ff9d25ed4a6735a3f4e507d397a01b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4909c2e4b4ff9d25ed4a6735a3f4e507d397a01b", "message": "review hints", "committedDate": "2020-12-14T11:34:59Z", "type": "forcePushed"}]}