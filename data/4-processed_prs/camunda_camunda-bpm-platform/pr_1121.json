{"pr_number": 1121, "pr_title": "chore(cockpit): add process instance provider", "pr_createdAt": "2020-11-12T09:53:02Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/1121", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzI4MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121#discussion_r521997280", "bodyText": "With Complex Objects, we should not add every key as a prop directly. Instead, let's create a processInstance prop with the query result. This way, processInstance and processDefinition providers would not override the id prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <Component {...useContext(ProcessInstanceContext)} {...props} />\n          \n          \n            \n              <Component processInstance={useContext(ProcessInstanceContext)} {...props} />", "author": "marstamm", "createdAt": "2020-11-12T10:24:46Z", "path": "webapps/ui/cockpit/src/components/ProcessInstance/HOC/withProcessInstance.js", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useEffect, useState, createContext, useContext } from \"react\";\n+\n+import { get } from \"utils/request\";\n+\n+const ProcessInstanceContext = createContext();\n+\n+export function ProcessInstanceProvider({ processInstanceId, children }) {\n+  const [processInstance, setProcessInstance] = useState(null);\n+\n+  useEffect(() => {\n+    const loadProcessInstance = async () => {\n+      return await (await get(\n+        `%ENGINE_API%/process-instance/${processInstanceId}`\n+      )).json();\n+    };\n+\n+    loadProcessInstance().then(processInstance => {\n+      setProcessInstance(processInstance);\n+    });\n+  }, [processInstanceId]);\n+\n+  return (\n+    <ProcessInstanceContext.Provider value={processInstance}>\n+      {children}\n+    </ProcessInstanceContext.Provider>\n+  );\n+}\n+\n+export default Component => props => (\n+  <Component {...useContext(ProcessInstanceContext)} {...props} />", "originalCommit": "f957691da3ecfe331761084a235566fb5e6279bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxMDY3NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121#discussion_r522010674", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-11-12T10:45:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzI4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5Nzg3Ng==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121#discussion_r521997876", "bodyText": "Note: Only works when initialized, as mentioned in the top comment 2. Can be worked around by initializing the context with {} instead of null\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function CancelProcessInstance({ id, definitionId }) {\n          \n          \n            \n            function CancelProcessInstance({ processInstance }) {\n          \n          \n            \n              const {id, definitionId} = processInstance;", "author": "marstamm", "createdAt": "2020-11-12T10:25:43Z", "path": "webapps/ui/cockpit/src/modules/components/processInstance/CancelProcessInstance/CancelProcessInstance.js", "diffHunk": "@@ -37,10 +38,9 @@ const STATUS = Object.freeze({\n   NOT_FOUND: 6\n });\n \n-export default function CancelProcessInstance({ processInstanceId }) {\n+function CancelProcessInstance({ id, definitionId }) {", "originalCommit": "f957691da3ecfe331761084a235566fb5e6279bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2OTk0NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121#discussion_r522069944", "bodyText": "\ud83d\udc4d", "author": "tasso94", "createdAt": "2020-11-12T12:29:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5Nzg3Ng=="}], "type": "inlineReview"}, {"oid": "7686465cd9d16888d6461346b23bd3eec0bef3ac", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7686465cd9d16888d6461346b23bd3eec0bef3ac", "message": "chore(cockpit): add process instance provider\n\nrelated to CAM-12720", "committedDate": "2020-11-12T15:51:59Z", "type": "commit"}, {"oid": "ee2da794e0d7e41751df71df558e5940f794d054", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ee2da794e0d7e41751df71df558e5940f794d054", "message": "SQUASH ME: follow review hints", "committedDate": "2020-11-12T15:52:02Z", "type": "commit"}, {"oid": "2d4ec1cad9084f86e041c42c7394b50127fbbd3c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2d4ec1cad9084f86e041c42c7394b50127fbbd3c", "message": "SQUASH ME: avoid recreation of default wrapper", "committedDate": "2020-11-12T15:52:02Z", "type": "commit"}, {"oid": "a9560e1b0a913ed1981bc39e24ba1eadc07b66de", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9560e1b0a913ed1981bc39e24ba1eadc07b66de", "message": "SQUASH ME", "committedDate": "2020-11-12T15:52:44Z", "type": "commit"}, {"oid": "a9560e1b0a913ed1981bc39e24ba1eadc07b66de", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9560e1b0a913ed1981bc39e24ba1eadc07b66de", "message": "SQUASH ME", "committedDate": "2020-11-12T15:52:44Z", "type": "forcePushed"}]}