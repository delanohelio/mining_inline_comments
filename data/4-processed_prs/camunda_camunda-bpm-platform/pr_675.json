{"pr_number": 675, "pr_title": "chore(rest-openapi): add readme file", "pr_createdAt": "2020-02-20T15:31:25Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/675", "timeline": [{"oid": "85865690ad8b474cbde2ad8abaed1dade5c45e6a", "url": "https://github.com/camunda/camunda-bpm-platform/commit/85865690ad8b474cbde2ad8abaed1dade5c45e6a", "message": "chore(rest-openapi): add readme file", "committedDate": "2020-02-20T15:30:59Z", "type": "commit"}, {"oid": "f0e183ec98545a93f4f8417e1d0dce2705d48c92", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f0e183ec98545a93f4f8417e1d0dce2705d48c92", "message": "add TODOs", "committedDate": "2020-02-20T15:37:00Z", "type": "commit"}, {"oid": "abac0c2752a570125d5a481a1f575aaac0e02a6b", "url": "https://github.com/camunda/camunda-bpm-platform/commit/abac0c2752a570125d5a481a1f575aaac0e02a6b", "message": "dynamic paths", "committedDate": "2020-02-20T15:44:42Z", "type": "commit"}, {"oid": "07cba8e5be757558a6477749356b9f44cc55482e", "url": "https://github.com/camunda/camunda-bpm-platform/commit/07cba8e5be757558a6477749356b9f44cc55482e", "message": "add macros link", "committedDate": "2020-02-20T15:47:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5NjE1Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382496157", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n          \n          \n            \n            * Generation of a formatted openapi.json file by parsing the [templates](./src/main/templates)", "author": "koevskinikola", "createdAt": "2020-02-21T10:05:02Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5NjQ0OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382496448", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * Generation of java client from the openapi.json file\n          \n          \n            \n            * Generation of a java client from the openapi.json file", "author": "koevskinikola", "createdAt": "2020-02-21T10:05:42Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5NjgxNQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382496815", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n          \n          \n            \n            For the generation of the documentation, we use the [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:", "author": "koevskinikola", "createdAt": "2020-02-21T10:06:27Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5NzkyMw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382497923", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n          \n          \n            \n            Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situations, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.", "author": "koevskinikola", "createdAt": "2020-02-21T10:08:46Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5ODE5OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382498199", "bodyText": "It can also be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n          \n          \n            \n            Try to get familiar with them as they are heavily used in the templates. Keep in mind that in a certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.", "author": "koevskinikola", "createdAt": "2020-02-21T10:09:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5NzkyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5OTU1Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382499553", "bodyText": "I think, since it's an acronym, it should be with capital letters:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This folder contains all of the dto used in the request and response bodies. Instructions:\n          \n          \n            \n            This folder contains all of the DTOs used in the request and response bodies. Instructions:", "author": "koevskinikola", "createdAt": "2020-02-21T10:12:23Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ5OTg1Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382499853", "bodyText": "Same as the previous comment:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n          \n          \n            \n            * use the name and package structure of the Rest DTOs when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))", "author": "koevskinikola", "createdAt": "2020-02-21T10:13:01Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMDM0OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382500348", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * the dto that have sorting or pagination properties should use the [common templates](#commons).\n          \n          \n            \n            * the DTOs that have sorting or pagination properties should use the [common templates](#commons).", "author": "koevskinikola", "createdAt": "2020-02-21T10:14:10Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n+* use the macros from the previous section when possible\n+* for the `property` macros DO NOT forget to put `last = true` param for the last property, that will take care for the comas in the json file\n+* the dto that have sorting or pagination properties should use the [common templates](#commons).", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMDg2OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382500869", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * the dinamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`\n          \n          \n            \n            * the dynamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`", "author": "koevskinikola", "createdAt": "2020-02-21T10:15:19Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n+* use the macros from the previous section when possible\n+* for the `property` macros DO NOT forget to put `last = true` param for the last property, that will take care for the comas in the json file\n+* the dto that have sorting or pagination properties should use the [common templates](#commons).\n+\n+### paths\n+\n+Contains the endpoints definitions of the Rest API. Instructions:\n+* each resource has its own folder under /paths (e.g. `/process-instance`, `/deployment`)\n+* each resource directory contains `all.ftl` file that contains endpoint paths, methods and includes endpoint definition templates.\n+* the path of the endpoint is resolved to a folder structure (e.g. get process instance count `GET /process-instance/count` goes to `/paths/process-instance/count`).\n+* the dinamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMTQ1NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382501454", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * each endpoint definition has unique `operationId` that will be used for the generation of clients. Most of the cases the java method name should be used (e.g. `deleteProcessInstancesAsync`). When this is not possible please define it according to the Java conventions.\n          \n          \n            \n            * each endpoint definition has a unique `operationId` that will be used for the generation of clients. In most of the cases, the java method name should be used (e.g. `deleteProcessInstancesAsync`). When this is not possible, please define it according to the Java conventions.", "author": "koevskinikola", "createdAt": "2020-02-21T10:16:34Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n+* use the macros from the previous section when possible\n+* for the `property` macros DO NOT forget to put `last = true` param for the last property, that will take care for the comas in the json file\n+* the dto that have sorting or pagination properties should use the [common templates](#commons).\n+\n+### paths\n+\n+Contains the endpoints definitions of the Rest API. Instructions:\n+* each resource has its own folder under /paths (e.g. `/process-instance`, `/deployment`)\n+* each resource directory contains `all.ftl` file that contains endpoint paths, methods and includes endpoint definition templates.\n+* the path of the endpoint is resolved to a folder structure (e.g. get process instance count `GET /process-instance/count` goes to `/paths/process-instance/count`).\n+* the dinamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`\n+* the name of the method's request (GET, POST, PUT, DELETE, OPTIONS) is the name of the template file (get.ftl, post.frl, etc.).\n+* each endpoint definition has unique `operationId` that will be used for the generation of clients. Most of the cases the java method name should be used (e.g. `deleteProcessInstancesAsync`). When this is not possible please define it according to the Java conventions.", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMTY0MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382501640", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * each endpoint definition contains tag of its resource (e.g. `Process instance`, `Deployment`).\n          \n          \n            \n            * each endpoint definition contains a tag of its resource (e.g. `Process instance`, `Deployment`).", "author": "koevskinikola", "createdAt": "2020-02-21T10:17:02Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n+* use the macros from the previous section when possible\n+* for the `property` macros DO NOT forget to put `last = true` param for the last property, that will take care for the comas in the json file\n+* the dto that have sorting or pagination properties should use the [common templates](#commons).\n+\n+### paths\n+\n+Contains the endpoints definitions of the Rest API. Instructions:\n+* each resource has its own folder under /paths (e.g. `/process-instance`, `/deployment`)\n+* each resource directory contains `all.ftl` file that contains endpoint paths, methods and includes endpoint definition templates.\n+* the path of the endpoint is resolved to a folder structure (e.g. get process instance count `GET /process-instance/count` goes to `/paths/process-instance/count`).\n+* the dinamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`\n+* the name of the method's request (GET, POST, PUT, DELETE, OPTIONS) is the name of the template file (get.ftl, post.frl, etc.).\n+* each endpoint definition has unique `operationId` that will be used for the generation of clients. Most of the cases the java method name should be used (e.g. `deleteProcessInstancesAsync`). When this is not possible please define it according to the Java conventions.\n+* each endpoint definition contains tag of its resource (e.g. `Process instance`, `Deployment`).", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMTczNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382501734", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * each endpoint definition contains description.\n          \n          \n            \n            * each endpoint definition contains a description.", "author": "koevskinikola", "createdAt": "2020-02-21T10:17:15Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n+* use the macros from the previous section when possible\n+* for the `property` macros DO NOT forget to put `last = true` param for the last property, that will take care for the comas in the json file\n+* the dto that have sorting or pagination properties should use the [common templates](#commons).\n+\n+### paths\n+\n+Contains the endpoints definitions of the Rest API. Instructions:\n+* each resource has its own folder under /paths (e.g. `/process-instance`, `/deployment`)\n+* each resource directory contains `all.ftl` file that contains endpoint paths, methods and includes endpoint definition templates.\n+* the path of the endpoint is resolved to a folder structure (e.g. get process instance count `GET /process-instance/count` goes to `/paths/process-instance/count`).\n+* the dinamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`\n+* the name of the method's request (GET, POST, PUT, DELETE, OPTIONS) is the name of the template file (get.ftl, post.frl, etc.).\n+* each endpoint definition has unique `operationId` that will be used for the generation of clients. Most of the cases the java method name should be used (e.g. `deleteProcessInstancesAsync`). When this is not possible please define it according to the Java conventions.\n+* each endpoint definition contains tag of its resource (e.g. `Process instance`, `Deployment`).\n+* each endpoint definition contains description.", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMzM1Nw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382503357", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            * each endpoint definition contains at least one response defined.\n          \n          \n            \n            * each endpoint definition contains at least one HTTP response object defined.", "author": "koevskinikola", "createdAt": "2020-02-21T10:20:36Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n+* use the macros from the previous section when possible\n+* for the `property` macros DO NOT forget to put `last = true` param for the last property, that will take care for the comas in the json file\n+* the dto that have sorting or pagination properties should use the [common templates](#commons).\n+\n+### paths\n+\n+Contains the endpoints definitions of the Rest API. Instructions:\n+* each resource has its own folder under /paths (e.g. `/process-instance`, `/deployment`)\n+* each resource directory contains `all.ftl` file that contains endpoint paths, methods and includes endpoint definition templates.\n+* the path of the endpoint is resolved to a folder structure (e.g. get process instance count `GET /process-instance/count` goes to `/paths/process-instance/count`).\n+* the dinamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`\n+* the name of the method's request (GET, POST, PUT, DELETE, OPTIONS) is the name of the template file (get.ftl, post.frl, etc.).\n+* each endpoint definition has unique `operationId` that will be used for the generation of clients. Most of the cases the java method name should be used (e.g. `deleteProcessInstancesAsync`). When this is not possible please define it according to the Java conventions.\n+* each endpoint definition contains tag of its resource (e.g. `Process instance`, `Deployment`).\n+* each endpoint definition contains description.\n+* each endpoint definition contains at least one response defined.", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwMzk1OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382503958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Use whenever `firstResult` and `maxResults` are part of the endpoint parameters. Do not forget to assigne `last=true` param in case those are the last parameters:\n          \n          \n            \n            Use whenever `firstResult` and `maxResults` are part of the endpoint parameters. Do not forget to assign `last=true` param in case those are the last parameters:", "author": "koevskinikola", "createdAt": "2020-02-21T10:21:45Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n+* use the macros from the previous section when possible\n+* for the `property` macros DO NOT forget to put `last = true` param for the last property, that will take care for the comas in the json file\n+* the dto that have sorting or pagination properties should use the [common templates](#commons).\n+\n+### paths\n+\n+Contains the endpoints definitions of the Rest API. Instructions:\n+* each resource has its own folder under /paths (e.g. `/process-instance`, `/deployment`)\n+* each resource directory contains `all.ftl` file that contains endpoint paths, methods and includes endpoint definition templates.\n+* the path of the endpoint is resolved to a folder structure (e.g. get process instance count `GET /process-instance/count` goes to `/paths/process-instance/count`).\n+* the dinamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`\n+* the name of the method's request (GET, POST, PUT, DELETE, OPTIONS) is the name of the template file (get.ftl, post.frl, etc.).\n+* each endpoint definition has unique `operationId` that will be used for the generation of clients. Most of the cases the java method name should be used (e.g. `deleteProcessInstancesAsync`). When this is not possible please define it according to the Java conventions.\n+* each endpoint definition contains tag of its resource (e.g. `Process instance`, `Deployment`).\n+* each endpoint definition contains description.\n+* each endpoint definition contains at least one response defined.\n+* use the macros from the previous section when possible\n+* for the `property` and `param` macros DO NOT forget to put last = true param for the last property/parameter, that will take care for the comas in the json file\n+* the endpoints that have sorting or pagination properties/parameter should use the [common templates](#commons).\n+\n+#### commons\n+\n+Contains common templates that can be reused when it's possible.\n+\n+##### sorting\n+\n+* [sort-params.ftl](./src/main/templates/paths/commons/sort-params.ftl)\n+* [sort-props.ftl](./src/main/templates/paths/commons/sort-props.ftl)\n+\n+Please set the `sortByValues` enumeration whenever the template is in use and do not forget to assign the `last = true` if this is the last parameter/property (taking care for the commas in the json):\n+```\n+<#-- <#assign last = true >  --> <#-- remove comment if last param  -->\n+<#assign sortByValues = ['\"instanceId\"', '\"definitionId\"', '\"definitionKey\"', '\"definitionName\"', '\"definitionVersion\"', '\"businessKey\"', '\"startTime\"', '\"endTime\"', '\"duration\"', '\"tenantId\"']>\n+<#include \"/paths/commons/sort-props.ftl\" >\n+```\n+\n+##### pagination\n+\n+* [pagination-params.ftl](./src/main/templates/paths/commons/pagination-params.ftl)\n+\n+Use whenever `firstResult` and `maxResults` are part of the endpoint parameters. Do not forget to assigne `last=true` param in case those are the last parameters:", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwNDI3Mg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/675#discussion_r382504272", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Sometimes the same bunch of parameters are used in multiple endpoint, feel free to create an template and reuse it.\n          \n          \n            \n            Sometimes the same bunch of parameters are used in multiple endpoints. In cases like there, feel free to create a template and reuse it.", "author": "koevskinikola", "createdAt": "2020-02-21T10:22:25Z", "path": "engine-rest/engine-rest-openapi/README.md", "diffHunk": "@@ -0,0 +1,146 @@\n+REST API - OpenAPI documentation\n+========\n+\n+ This project generates a single openapi.json containing the OpeanAPI documentation of the Engine Rest API. Alligned with OpeanAPI specification version [3.0.2](https://github.com/OAI/OpenAPI-Specification/blob/3.0.2/versions/3.0.2.md).\n+\n+# Table of Contents\n+1. [Build and phases](#build-and-phases)\n+2. [Contribution](#contribution)\n+TODO do we need it? if yes --> fill it up at the end\n+\n+## Build and phases\n+\n+To build the artifact run: `mvn clean install`\n+\n+The build contains:\n+* Generation of formatted openapi.json file by parsing the [templates](./src/main/templates)\n+* Validation of the generated file against [schema.json](./src/main/openapi/schema.json)\n+* Generation of java client from the openapi.json file\n+* Run of smoke tests against that client (the tests use [WireMock](http://wiremock.org/docs/))\n+\n+## Contribution\n+\n+NOTE: Please follow the next step to get familiar with the structure and the instructions that follow.\n+\n+For the generation of the documentation, we use [Freemarker](https://freemarker.apache.org/docs/index.html) templating language. The structure of the template is:\n+```\n+ +--main.ftl\n+ +--lib\n+ | +--macros.ftl\n+ +--models\n+ | +--org/camunda/bpm/engine/rest/dto\n+ | | +--ExceptionDto.ftl\n+ | | +--history\n+ | | | +--HistoricProcessInstanceQueryDto.ftl\n+ | | +--repository\n+ | | | +--DeploymentDto.ftl\n+ | | | +--ProcessDefinitionDto.ftl\n+ | | +--runtime\n+ | | | +--ActivityInstanceDto.ftl\n+ +--paths\n+ | +--commons\n+ | | +--pagination-params.ftl\n+ | | +--process-instance-query-params.ftl\n+ | | +--sort-params.ftl\n+ | | +--sort-props.ftl\n+ | +--deployment\n+ | | +--all.ftl\n+ | | +--create\n+ | | | +--post.ftl\n+ | +--process-instance\n+ | | +--all.ftl\n+ | | +--get.ftl\n+ | | +--suspended\n+ | | | +--put.ftl\n+ | | +--{id}\n+ | | | +--delete.ftl\n+ | | | +--variables\n+ | | | | +--{varName}\n+ | | | | | +--data\n+ | | | | | | +--get.ftl\n+ | | | | | | +--post.ftl\n+ | | | | | +--delete.ftl\n+```\n+\n+### main.ftl\n+\n+The `main.ftl` contains the general information of the OpenAPI doc:\n+* OpenAPI spec version\n+* info\n+* externalDocs\n+* servers (default and named)\n+* tags (each resource has a tag)\n+* wrap up of pats and components\n+\n+By parsing this file the end .json file is generated.\n+\n+### macros\n+\n+Contains all of the [macros](https://freemarker.apache.org/docs/ref_directive_macro.html) used in paths and models:\n+* `parameter` (used in paths)\n+* `property` (used in paths and models)\n+* `requestBody` (used in paths)\n+* `response` (used in paths)\n+\n+Try to get familiar with them as they are heavily used in the templates. Keep in mind that in certain situation, it is fine to not use them, if the endpoint/dto is too complex for example. Feel free to add missing parameters to the macros, however, do not forget to reflect your changes to all usages of the macros.\n+Some parameters are required (`name` and `description` in most of the cases) and some need to be provided if necessary (nice to have - `minimum`,`defaultValue`, `deprecated`). \n+\n+### models\n+\n+This folder contains all of the dto used in the request and response bodies. Instructions:\n+* use the name and package structure of the Rest dtos when possible ([org.camunda.bpm.engine.rest.dto.ExceptionDto.java](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/ExceptionDto.java) --> [org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl](https://github.com/camunda/camunda-bpm-platform/blob/master/engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/ExceptionDto.ftl))\n+* use the macros from the previous section when possible\n+* for the `property` macros DO NOT forget to put `last = true` param for the last property, that will take care for the comas in the json file\n+* the dto that have sorting or pagination properties should use the [common templates](#commons).\n+\n+### paths\n+\n+Contains the endpoints definitions of the Rest API. Instructions:\n+* each resource has its own folder under /paths (e.g. `/process-instance`, `/deployment`)\n+* each resource directory contains `all.ftl` file that contains endpoint paths, methods and includes endpoint definition templates.\n+* the path of the endpoint is resolved to a folder structure (e.g. get process instance count `GET /process-instance/count` goes to `/paths/process-instance/count`).\n+* the dinamic endpoints should be structured with brakes like `process-instance/{id}/variables/{varName}/data`, then the path parameters (`id` and `varName`) should be always included in the endpoint definition and marked as `required`\n+* the name of the method's request (GET, POST, PUT, DELETE, OPTIONS) is the name of the template file (get.ftl, post.frl, etc.).\n+* each endpoint definition has unique `operationId` that will be used for the generation of clients. Most of the cases the java method name should be used (e.g. `deleteProcessInstancesAsync`). When this is not possible please define it according to the Java conventions.\n+* each endpoint definition contains tag of its resource (e.g. `Process instance`, `Deployment`).\n+* each endpoint definition contains description.\n+* each endpoint definition contains at least one response defined.\n+* use the macros from the previous section when possible\n+* for the `property` and `param` macros DO NOT forget to put last = true param for the last property/parameter, that will take care for the comas in the json file\n+* the endpoints that have sorting or pagination properties/parameter should use the [common templates](#commons).\n+\n+#### commons\n+\n+Contains common templates that can be reused when it's possible.\n+\n+##### sorting\n+\n+* [sort-params.ftl](./src/main/templates/paths/commons/sort-params.ftl)\n+* [sort-props.ftl](./src/main/templates/paths/commons/sort-props.ftl)\n+\n+Please set the `sortByValues` enumeration whenever the template is in use and do not forget to assign the `last = true` if this is the last parameter/property (taking care for the commas in the json):\n+```\n+<#-- <#assign last = true >  --> <#-- remove comment if last param  -->\n+<#assign sortByValues = ['\"instanceId\"', '\"definitionId\"', '\"definitionKey\"', '\"definitionName\"', '\"definitionVersion\"', '\"businessKey\"', '\"startTime\"', '\"endTime\"', '\"duration\"', '\"tenantId\"']>\n+<#include \"/paths/commons/sort-props.ftl\" >\n+```\n+\n+##### pagination\n+\n+* [pagination-params.ftl](./src/main/templates/paths/commons/pagination-params.ftl)\n+\n+Use whenever `firstResult` and `maxResults` are part of the endpoint parameters. Do not forget to assigne `last=true` param in case those are the last parameters:\n+```\n+    <#-- <#assign last = true >  --> <#-- remove comment if last param  -->\n+    <#include \"/paths/commons/pagination-params.ftl\" >\n+```\n+\n+##### more\n+Sometimes the same bunch of parameters are used in multiple endpoint, feel free to create an template and reuse it.", "originalCommit": "07cba8e5be757558a6477749356b9f44cc55482e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "027e97962ee3a61e3f103061891f2062b784839f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/027e97962ee3a61e3f103061891f2062b784839f", "message": "move commons to lib", "committedDate": "2020-02-21T12:56:06Z", "type": "commit"}, {"oid": "6bbda1b53c138713763e3e4d26b6973f1a2d4411", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6bbda1b53c138713763e3e4d26b6973f1a2d4411", "message": "fix typos and add TOC", "committedDate": "2020-02-21T14:03:05Z", "type": "commit"}, {"oid": "a4c5cae804971d4c1c4258964445b6706626fdb6", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a4c5cae804971d4c1c4258964445b6706626fdb6", "message": "adjust TOC", "committedDate": "2020-02-21T14:16:03Z", "type": "commit"}, {"oid": "f0e5e9e882e7a1fd5f1ef56dfa1b6a39758d2a86", "url": "https://github.com/camunda/camunda-bpm-platform/commit/f0e5e9e882e7a1fd5f1ef56dfa1b6a39758d2a86", "message": "fix TOC", "committedDate": "2020-02-21T14:29:10Z", "type": "commit"}]}