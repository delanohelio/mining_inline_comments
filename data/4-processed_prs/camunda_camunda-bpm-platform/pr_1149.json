{"pr_number": 1149, "pr_title": "CAM-12793: chore(pipelines): resolve pr labels", "pr_createdAt": "2020-11-26T08:22:30Z", "pr_url": "https://github.com/camunda/camunda-bpm-platform/pull/1149", "timeline": [{"oid": "7868dd5714e7c4d17603196dfb19a8f9e79694e1", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7868dd5714e7c4d17603196dfb19a8f9e79694e1", "message": "test rest api jobs", "committedDate": "2020-11-26T08:54:34Z", "type": "forcePushed"}, {"oid": "717aba1653492bb46eb354ef261fdf5dd3049e9d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/717aba1653492bb46eb354ef261fdf5dd3049e9d", "message": "test rest api jobs", "committedDate": "2020-11-26T09:12:01Z", "type": "forcePushed"}, {"oid": "75290a638e59527ff902672e93fa1358df3615aa", "url": "https://github.com/camunda/camunda-bpm-platform/commit/75290a638e59527ff902672e93fa1358df3615aa", "message": "test rest api jobs", "committedDate": "2020-11-26T10:08:41Z", "type": "forcePushed"}, {"oid": "7c9bbca878622226dd408a5cb06295738fd8a4b4", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7c9bbca878622226dd408a5cb06295738fd8a4b4", "message": "test separate trigger of QA pipeline", "committedDate": "2020-11-26T10:31:01Z", "type": "forcePushed"}, {"oid": "3153f3e01919673578144d00d46089d6cc5b13bd", "url": "https://github.com/camunda/camunda-bpm-platform/commit/3153f3e01919673578144d00d46089d6cc5b13bd", "message": "test separate trigger of QA pipeline", "committedDate": "2020-11-26T10:31:47Z", "type": "forcePushed"}, {"oid": "a5e6899fb9c354f743ef4fc3433305428d742325", "url": "https://github.com/camunda/camunda-bpm-platform/commit/a5e6899fb9c354f743ef4fc3433305428d742325", "message": "test separate trigger of QA pipeline", "committedDate": "2020-11-26T10:37:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MzE1Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r531063153", "bodyText": "I think now this env.EE_BRANCH_NAME should be pram.EE_BRANCH_NAME to use the default value.", "author": "aabouzaid", "createdAt": "2020-11-26T14:25:07Z", "path": "Jenkinsfile", "diffHunk": "@@ -49,50 +49,77 @@ pipeline {\n       string defaultValue: 'pipeline-master', description: 'The name of the EE branch to run the EE pipeline on', name: 'EE_BRANCH_NAME'\n   }\n   stages {\n-    stage('ASSEMBLY') {\n+    stage('Test 0') {\n       agent {\n         kubernetes {\n           yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n         }\n       }\n-      steps {\n-        withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n-          nodejs('nodejs-14.6.0'){\n-             configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {\n-               sh \"\"\"\n-                 mvn -s \\$MAVEN_SETTINGS_XML clean install source:jar -Pdistro,distro-ce,distro-wildfly,distro-webjar -DskipTests -Dmaven.repo.local=\\${WORKSPACE}/.m2 com.mycila:license-maven-plugin:check -B\n-               \"\"\"\n-             }\n-          }\n+      stages('Test 1') {\n+        stage('ASSEMBLY') {\n+          agent none\n+          steps {\n+            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+              nodejs('nodejs-14.6.0'){\n+                 configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {\n+                   sh \"\"\"\n+                     mvn -s \\$MAVEN_SETTINGS_XML clean install source:jar -Pdistro,distro-ce,distro-wildfly,distro-webjar -DskipTests -Dmaven.repo.local=\\${WORKSPACE}/.m2 com.mycila:license-maven-plugin:check -B\n+                   \"\"\"\n+                 }\n+              }\n+            \n+              // archive all .jar, .pom, .xml, .txt runtime artifacts + required .war/.zip/.tar.gz for EE pipeline\n+              // add a new line for each group of artifacts\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/*.jar,.m2/org/camunda/**/*-SNAPSHOT/**/*.pom,.m2/org/camunda/**/*-SNAPSHOT/**/*.xml,.m2/org/camunda/**/*-SNAPSHOT/**/*.txt', followSymlinks: false\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*frontend-sources.zip', followSymlinks: false\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/license-book*.zip', followSymlinks: false\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-jboss-modules*.zip', followSymlinks: false\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-*-assembly*.tar.gz', followSymlinks: false\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*.war', followSymlinks: false\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war', followSymlinks: false\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war', followSymlinks: false\n+              archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-h2-webapp*.war', followSymlinks: false\n+            \n+              stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n+              stash name: \"platform-stash-archives\", includes: \".m2/org/camunda/bpm/**/*-SNAPSHOT/**/*.zip,.m2/org/camunda/bpm/**/*-SNAPSHOT/**/*.tar.gz\"\n+              stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+            }\n \n-          // archive all .jar, .pom, .xml, .txt runtime artifacts + required .war/.zip/.tar.gz for EE pipeline\n-          // add a new line for each group of artifacts\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/*.jar,.m2/org/camunda/**/*-SNAPSHOT/**/*.pom,.m2/org/camunda/**/*-SNAPSHOT/**/*.xml,.m2/org/camunda/**/*-SNAPSHOT/**/*.txt', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*frontend-sources.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/license-book*.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-jboss-modules*.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-*-assembly*.tar.gz', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-h2-webapp*.war', followSymlinks: false\n+            build job: \"cambpm-jenkins-pipelines-ee/${env.EE_BRANCH_NAME}\", parameters: [", "originalCommit": "a5e6899fb9c354f743ef4fc3433305428d742325", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDQyNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r531064427", "bodyText": "\ud83d\udc4d", "author": "yanavasileva", "createdAt": "2020-11-26T14:27:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MzE1Mw=="}], "type": "inlineReview"}, {"oid": "784b6614e56334968ec06b20e5e3065000ce93f7", "url": "https://github.com/camunda/camunda-bpm-platform/commit/784b6614e56334968ec06b20e5e3065000ce93f7", "message": "split downstream", "committedDate": "2020-11-26T14:31:06Z", "type": "forcePushed"}, {"oid": "127b68d3a7b1a4086b7f149ef7dd8b3143fa236a", "url": "https://github.com/camunda/camunda-bpm-platform/commit/127b68d3a7b1a4086b7f149ef7dd8b3143fa236a", "message": "test", "committedDate": "2020-11-26T16:37:06Z", "type": "forcePushed"}, {"oid": "7a1fb179dfa28ab39e0bf8f921f072c2dfb3fc2c", "url": "https://github.com/camunda/camunda-bpm-platform/commit/7a1fb179dfa28ab39e0bf8f921f072c2dfb3fc2c", "message": "test", "committedDate": "2020-11-26T16:42:30Z", "type": "forcePushed"}, {"oid": "2e6fe8e8257886b33d2e325b9b766c95c1748bd5", "url": "https://github.com/camunda/camunda-bpm-platform/commit/2e6fe8e8257886b33d2e325b9b766c95c1748bd5", "message": "test pr", "committedDate": "2020-11-27T15:54:41Z", "type": "forcePushed"}, {"oid": "6316c183ee05197b12c881d5777f4a00b1ca8481", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6316c183ee05197b12c881d5777f4a00b1ca8481", "message": "no-build", "committedDate": "2020-11-30T07:50:42Z", "type": "forcePushed"}, {"oid": "8b63038da7b893d2bf622f159de46415e85f11cf", "url": "https://github.com/camunda/camunda-bpm-platform/commit/8b63038da7b893d2bf622f159de46415e85f11cf", "message": "no-build", "committedDate": "2020-11-30T07:58:28Z", "type": "forcePushed"}, {"oid": "1a88946cedacb60aac9f0bafee5343216ab4db39", "url": "https://github.com/camunda/camunda-bpm-platform/commit/1a88946cedacb60aac9f0bafee5343216ab4db39", "message": "no-build", "committedDate": "2020-11-30T08:05:52Z", "type": "forcePushed"}, {"oid": "ce7cbf8ceb22b528086931ff14845bc6d4a5f2ee", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ce7cbf8ceb22b528086931ff14845bc6d4a5f2ee", "message": "no-build", "committedDate": "2020-11-30T08:17:21Z", "type": "forcePushed"}, {"oid": "5d541364217138bd08b20308a96af10cc99d874f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/5d541364217138bd08b20308a96af10cc99d874f", "message": "fix EE trigger", "committedDate": "2020-11-30T09:33:59Z", "type": "forcePushed"}, {"oid": "8af81ce42c6005e20893fb7d747c5155bb7815f4", "url": "https://github.com/camunda/camunda-bpm-platform/commit/8af81ce42c6005e20893fb7d747c5155bb7815f4", "message": "fix EE trigger", "committedDate": "2020-11-30T09:38:54Z", "type": "forcePushed"}, {"oid": "ac97d45173244d7f3a65c00160847815ee5c1ff4", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ac97d45173244d7f3a65c00160847815ee5c1ff4", "message": "test", "committedDate": "2020-12-01T07:46:59Z", "type": "forcePushed"}, {"oid": "b35274eb6a2291f3a6f57c796ac26c2133072626", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b35274eb6a2291f3a6f57c796ac26c2133072626", "message": "fix withLabels", "committedDate": "2020-12-01T07:49:30Z", "type": "forcePushed"}, {"oid": "ccc5ad3f1f354747da291bbc3c80c41bac6eead6", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ccc5ad3f1f354747da291bbc3c80c41bac6eead6", "message": "test", "committedDate": "2020-12-01T08:54:53Z", "type": "forcePushed"}, {"oid": "96b5f131c8e90f9338dd06059f9fb0898fcdbc67", "url": "https://github.com/camunda/camunda-bpm-platform/commit/96b5f131c8e90f9338dd06059f9fb0898fcdbc67", "message": "chore(pipelines): resolve pr labels", "committedDate": "2020-12-01T09:19:12Z", "type": "forcePushed"}, {"oid": "4b19bd3a92b7295bc4a34c6c60f728a7fe57aff8", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4b19bd3a92b7295bc4a34c6c60f728a7fe57aff8", "message": "fix matrix label resolving", "committedDate": "2020-12-02T07:47:53Z", "type": "forcePushed"}, {"oid": "b279699dc0660720385c015e744d31921851e5eb", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b279699dc0660720385c015e744d31921851e5eb", "message": "fix matrix label resolving", "committedDate": "2020-12-02T07:58:00Z", "type": "forcePushed"}, {"oid": "dc42cac202bb9d1735177d8e7c6aa4bc5cd4cc74", "url": "https://github.com/camunda/camunda-bpm-platform/commit/dc42cac202bb9d1735177d8e7c6aa4bc5cd4cc74", "message": "fix matrix label resolving", "committedDate": "2020-12-02T08:05:13Z", "type": "forcePushed"}, {"oid": "fe8fb79345161037fe841734569a11cc9ed9999a", "url": "https://github.com/camunda/camunda-bpm-platform/commit/fe8fb79345161037fe841734569a11cc9ed9999a", "message": "fix matrix label resolving", "committedDate": "2020-12-02T09:52:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMTQ2MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533401461", "bodyText": "The return type should be boolean here.", "author": "koevskinikola", "createdAt": "2020-12-01T13:21:17Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -355,18 +320,31 @@ void runMaven(boolean runtimeStash, boolean archivesStash, boolean qaStash, Stri\n   if (qaStash) unstash \"platform-stash-qa\"\n   String forkCount = singleThreaded? \"-DforkCount=1\" : '';\n   configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {\n-    sh(\"cd ${directory} && mvn -s \\$MAVEN_SETTINGS_XML ${forkCount} ${cmd} -nsu -Dmaven.repo.local=\\${WORKSPACE}/.m2 -B\")\n+    sh(\"mvn -s \\$MAVEN_SETTINGS_XML ${forkCount} ${cmd} -nsu -Dmaven.repo.local=\\${WORKSPACE}/.m2 -B -f ${directory}/pom.xml\")\n   }\n }\n \n void withLabels(String... labels) {", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwMzY0OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533403648", "bodyText": "Same here, the return type should be boolean.", "author": "koevskinikola", "createdAt": "2020-12-01T13:24:50Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -355,18 +320,31 @@ void runMaven(boolean runtimeStash, boolean archivesStash, boolean qaStash, Stri\n   if (qaStash) unstash \"platform-stash-qa\"\n   String forkCount = singleThreaded? \"-DforkCount=1\" : '';\n   configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {\n-    sh(\"cd ${directory} && mvn -s \\$MAVEN_SETTINGS_XML ${forkCount} ${cmd} -nsu -Dmaven.repo.local=\\${WORKSPACE}/.m2 -B\")\n+    sh(\"mvn -s \\$MAVEN_SETTINGS_XML ${forkCount} ${cmd} -nsu -Dmaven.repo.local=\\${WORKSPACE}/.m2 -B -f ${directory}/pom.xml\")\n   }\n }\n \n void withLabels(String... labels) {\n-  for ( l in labels) {\n-    pullRequest.labels.contains(labelName)\n+  if (env.BRANCH == 'pipeline-master') {\n+    return true;\n+  } else if (!params.STANDALONE) {\n+    for (l in labels) {\n+      if (new JsonSlurper().parseText(params.PR_LABELS).contains(l)) {\n+        return true;\n+      }\n+    }\n+  } else {\n+    for (l in labels) {\n+      if (pullRequest.labels.contains(l)) {\n+        return true;  \n+      }\n+    }\n   }\n+  return false;\n }\n \n void withDbLabels(String dbLabel) {", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNDU1OA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533404558", "bodyText": "Shouldn't this be an array?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n          \n          \n            \n                      labels: ['all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'] ],", "author": "koevskinikola", "createdAt": "2020-12-01T13:26:16Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -452,27 +430,32 @@ String resolveMavenProfileInfo(String profile) {\n       'check-sql': [\n           directory: 'distro/sql-script/',\n           command: 'install -Pcheck-sql,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNDc0Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533404743", "bodyText": "Shouldn't this be an array?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n          \n          \n            \n                      labels: ['all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'] ],", "author": "koevskinikola", "createdAt": "2020-12-01T13:26:34Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -452,27 +430,32 @@ String resolveMavenProfileInfo(String profile) {\n       'check-sql': [\n           directory: 'distro/sql-script/',\n           command: 'install -Pcheck-sql,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n      'upgrade-db': [\n           directory: 'qa/test-db-upgrade/',\n           command: 'verify -Pupgrade-db,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNTAxNw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533405017", "bodyText": "Same as above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      labels: ''],\n          \n          \n            \n                      labels: [] ],", "author": "koevskinikola", "createdAt": "2020-12-01T13:27:04Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -452,27 +430,32 @@ String resolveMavenProfileInfo(String profile) {\n       'check-sql': [\n           directory: 'distro/sql-script/',\n           command: 'install -Pcheck-sql,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n      'upgrade-db': [\n           directory: 'qa/test-db-upgrade/',\n           command: 'verify -Pupgrade-db,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n       'instance-migration': [\n           directory: 'qa/test-db-instance-migration/',\n           command: 'verify -Pinstance-migration,',\n-          qaStash: true],\n+          qaStash: true,\n+          labels: ''],", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNTA4NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533405084", "bodyText": "Same as above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      labels: ''],\n          \n          \n            \n                      labels: [] ],", "author": "koevskinikola", "createdAt": "2020-12-01T13:27:11Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -452,27 +430,32 @@ String resolveMavenProfileInfo(String profile) {\n       'check-sql': [\n           directory: 'distro/sql-script/',\n           command: 'install -Pcheck-sql,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n      'upgrade-db': [\n           directory: 'qa/test-db-upgrade/',\n           command: 'verify -Pupgrade-db,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n       'instance-migration': [\n           directory: 'qa/test-db-instance-migration/',\n           command: 'verify -Pinstance-migration,',\n-          qaStash: true],\n+          qaStash: true,\n+          labels: ''],\n       'old-engine': [\n           directory: 'qa/',\n           command: 'verify -Pold-engine,',\n           qaStash: false],\n       'rolling-update': [\n           directory: 'qa/test-db-rolling-update/',\n           command: 'verify -Prolling-update,',\n-          qaStash: true],\n+          qaStash: true,\n+          labels: ''],", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNTE4MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533405180", "bodyText": "Same as above\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      labels: '']\n          \n          \n            \n                      labels: [] ],", "author": "koevskinikola", "createdAt": "2020-12-01T13:27:18Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -452,27 +430,32 @@ String resolveMavenProfileInfo(String profile) {\n       'check-sql': [\n           directory: 'distro/sql-script/',\n           command: 'install -Pcheck-sql,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n      'upgrade-db': [\n           directory: 'qa/test-db-upgrade/',\n           command: 'verify -Pupgrade-db,',\n-          qaStash: false],\n+          qaStash: false,\n+          labels: 'all-db','db2','mysql','oracle','mariadb','sqlserver','postgresql'],\n       'instance-migration': [\n           directory: 'qa/test-db-instance-migration/',\n           command: 'verify -Pinstance-migration,',\n-          qaStash: true],\n+          qaStash: true,\n+          labels: ''],\n       'old-engine': [\n           directory: 'qa/',\n           command: 'verify -Pold-engine,',\n           qaStash: false],\n       'rolling-update': [\n           directory: 'qa/test-db-rolling-update/',\n           command: 'verify -Prolling-update,',\n-          qaStash: true],\n+          qaStash: true,\n+          labels: ''],\n       'large-data-tests': [\n           directory: 'qa/large-data-tests/',\n           command: 'verify -Plarge-data-tests,',\n-          qaStash: false]\n+          qaStash: false,\n+          labels: '']", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNjA1MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533406050", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return withLabels('default-build')\n          \n          \n            \n                        withLabels('default-build')", "author": "koevskinikola", "createdAt": "2020-12-01T13:28:38Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -296,22 +266,17 @@ pipeline {\n             values 'openjdk-jdk-8-latest', 'openjdk-jdk-14-latest'\n           }\n         }\n+        when {\n+          expression {\n+            return withLabels('default-build')", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNjYzOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533406639", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels(getLabels(env.PROFILE))\n          \n          \n            \n                          withLabels(getLabels(env.PROFILE))", "author": "koevskinikola", "createdAt": "2020-12-01T13:29:27Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -260,20 +232,18 @@ pipeline {\n             values 'check-sql', 'upgrade-db', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'\n           }\n         }\n-        agent {\n-          kubernetes {\n-            yaml getDbAgent(env.DB)\n-          }\n-        }\n         when {\n           anyOf {\n             branch 'pipeline-master';\n-            allOf {\n-              changeRequest();\n-//              expression {\n-//                withLabels('all-db') || withDbLabel(env.DB)\n-//              }\n+            expression {\n+              return withLabels(getLabels(env.PROFILE))", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNjgwOA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533406808", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('h2', 'all-db')\n          \n          \n            \n                          withLabels('h2', 'all-db')", "author": "koevskinikola", "createdAt": "2020-12-01T13:29:41Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -84,45 +88,35 @@ pipeline {\n     stage('H2 QA tests') {\n       parallel {\n         stage('sql-scripts-h2') {\n+          when {\n+            expression {\n+              return withLabels('h2', 'all-db')", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNjkyOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533406929", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('h2', 'all-db')\n          \n          \n            \n                          withLabels('h2', 'all-db')", "author": "koevskinikola", "createdAt": "2020-12-01T13:29:51Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -84,45 +88,35 @@ pipeline {\n     stage('H2 QA tests') {\n       parallel {\n         stage('sql-scripts-h2') {\n+          when {\n+            expression {\n+              return withLabels('h2', 'all-db')\n+            }\n+            beforeAgent true\n+          }\n           agent {\n             kubernetes {\n               yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n             }\n           }\n-          when {\n-            anyOf {\n-              branch 'pipeline-master';\n-              allOf {\n-                changeRequest();\n-                expression {\n-                  withLabels('qa')\n-                }\n-              }\n-            }\n-          }\n           steps {\n             withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n               runMaven(true, false, false, 'distro/sql-script/', 'install -Pcheck-sql,h2')\n             }\n           }\n         }\n         stage('UPGRADE-databases-from-714-h2') {\n+          when {\n+            expression {\n+              return withLabels('h2', 'all-db')", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNzAzMA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533407030", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('default-build', 'migration')\n          \n          \n            \n                          withLabels('default-build', 'migration')", "author": "koevskinikola", "createdAt": "2020-12-01T13:30:00Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -135,22 +129,17 @@ pipeline {\n           }\n         }\n         stage('UPGRADE-instance-migration-h2') {\n+          when {\n+            expression {\n+              return withLabels('default-build', 'migration')", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNzIzNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533407234", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('h2', 'all-db')\n          \n          \n            \n                          withLabels('h2', 'all-db')", "author": "koevskinikola", "createdAt": "2020-12-01T13:30:14Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -163,22 +152,17 @@ pipeline {\n           }\n         }\n         stage('UPGRADE-old-engine-from-714-h2') {\n+          when {\n+            expression {\n+              return withLabels('h2', 'all-db')", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwNzMzNA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533407334", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('rolling-update', 'default-build')\n          \n          \n            \n                          withLabels('rolling-update', 'default-build')", "author": "koevskinikola", "createdAt": "2020-12-01T13:30:25Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -191,22 +175,17 @@ pipeline {\n           }\n         }\n         stage('UPGRADE-rolling-update-h2') {\n+          when {\n+            expression {\n+              return withLabels('rolling-update', 'default-build')", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQwODk3Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533408973", "bodyText": "We can put these labels into a list, but since it's not used anywhere else, this is okay.", "author": "koevskinikola", "createdAt": "2020-12-01T13:32:54Z", "path": "Jenkinsfile", "diffHunk": "@@ -76,36 +84,47 @@ pipeline {\n           archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war', followSymlinks: false\n           archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war', followSymlinks: false\n           archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-h2-webapp*.war', followSymlinks: false\n-\n+        \n           stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n           stash name: \"platform-stash-archives\", includes: \".m2/org/camunda/bpm/**/*-SNAPSHOT/**/*.zip,.m2/org/camunda/bpm/**/*-SNAPSHOT/**/*.tar.gz\"\n           stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+        \n         }\n-\n-        build job: \"cambpm-jenkins-pipelines-ee/${env.EE_BRANCH_NAME}\", parameters: [\n-            string(name: 'copyArtifactSelector', value: '<TriggeredBuildSelector plugin=\"copyartifact@1.45.1\">  <upstreamFilterStrategy>UseGlobalSetting</upstreamFilterStrategy>  <allowUpstreamDependencies>false</allowUpstreamDependencies></TriggeredBuildSelector>'),\n-            booleanParam(name: 'STANDALONE', value: false),\n-            string(name: 'CE_BRANCH_NAME', value: \"${BRANCH_NAME}\")\n-        ], quietPeriod: 10, wait: false\n-        build job: \"cambpm-jenkins-pipelines-daily/${env.BRANCH_NAME}\", parameters: [\n-            string(name: 'copyArtifactSelector', value: '<TriggeredBuildSelector plugin=\"copyartifact@1.45.1\">  <upstreamFilterStrategy>UseGlobalSetting</upstreamFilterStrategy>  <allowUpstreamDependencies>false</allowUpstreamDependencies></TriggeredBuildSelector>'),\n-            booleanParam(name: 'STANDALONE', value: false)\n+        \n+        build job: \"cambpm-jenkins-pipelines-ee/${params.EE_BRANCH_NAME}\", parameters: [\n+                string(name: 'copyArtifactSelector', value: '<TriggeredBuildSelector plugin=\"copyartifact@1.45.1\">  <upstreamFilterStrategy>UseGlobalSetting</upstreamFilterStrategy>  <allowUpstreamDependencies>false</allowUpstreamDependencies></TriggeredBuildSelector>'),\n+                booleanParam(name: 'STANDALONE', value: false),\n+                string(name: 'CE_BRANCH_NAME', value: \"${env.BRANCH_NAME}\"),\n+                string(name: 'PR_LABELS', value: JsonOutput.toJson(pullRequest.labels))\n         ], quietPeriod: 10, wait: false\n+\n+        script {\n+          if (withLabels('default-build','rolling-update','migration','all-db','h2','db2','mysql','oracle','mariadb','sqlserver','postgresql','cockroachdb')) {", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxNDA3MQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533414071", "bodyText": "These changes should be reverted, since they remove the webapps-* and engine-unit-authorizations tests.", "author": "koevskinikola", "createdAt": "2020-12-01T13:40:49Z", "path": "Jenkinsfile", "diffHunk": "@@ -364,33 +336,23 @@ pipeline {\n             name 'DB'\n             values 'postgresql_96', 'mariadb_103'\n           }\n-          axis {\n-            name 'PROFILE'\n-            values 'engine-unit', 'engine-unit-authorizations', 'webapps-unit', 'webapps-unit-authorizations'\n-          }\n         }\n         when {\n-          anyOf {\n-            branch 'pipeline-master';\n-            allOf {\n-              changeRequest();\n-//              expression {\n-//                withLabels(\"all-db\") || withDbLabel(env.DB)\n-//              }\n-            }\n+          expression {\n+            return withLabels(\"all-db\") || withDbLabel(env.DB)\n           }\n+          beforeAgent true\n         }\n         agent {\n           kubernetes {\n             yaml getDbAgent(env.DB)\n           }\n         }\n         stages {\n-          stage('UNIT test') {\n+          stage(\"engine-UNIT\") {\n             steps {\n-              echo(\"UNIT DB Test Stage: ${env.PROFILE}-${env.DB}\")\n               withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n-                runMaven(true, false, false, getMavenProfileDir(env.PROFILE), getMavenProfileCmd(env.PROFILE) + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+                runMaven(true, false, false, 'engine/', 'clean test -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxNTE1OQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533415159", "bodyText": "I think we should define a global variable called DEFAULT_BRANCH and use this variable in the when block. It would be easier to update when we need to change it.", "author": "koevskinikola", "createdAt": "2020-12-01T13:42:28Z", "path": "Jenkinsfile", "diffHunk": "@@ -272,15 +261,8 @@ pipeline {\n         }\n         stage('webapp-IT-standalone-wildfly') {\n           when {\n-            anyOf {\n-              branch 'pipeline-master';\n-              allOf {\n-                changeRequest();\n-                expression {\n-                  withLabels('webapps', 'IT')\n-                }\n-              }\n-            }\n+            branch 'pipeline-master';", "originalCommit": "8fe851c757c6c9d20d4f55959c5638b2ba5ef3cb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyMzQ0NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r535123444", "bodyText": "A method called defaultBranch() is also good. I guess we will tackle this further when we create the Shared Library.", "author": "koevskinikola", "createdAt": "2020-12-03T11:19:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQxNTE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5Nzk3MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533997970", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('h2', 'rolling-update', 'migration')\n          \n          \n            \n                          withLabels('h2', 'rolling-update', 'migration')", "author": "koevskinikola", "createdAt": "2020-12-02T09:00:32Z", "path": "Jenkinsfile", "diffHunk": "@@ -76,36 +85,47 @@ pipeline {\n           archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war', followSymlinks: false\n           archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war', followSymlinks: false\n           archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-h2-webapp*.war', followSymlinks: false\n-\n+        \n           stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n           stash name: \"platform-stash-archives\", includes: \".m2/org/camunda/bpm/**/*-SNAPSHOT/**/*.zip,.m2/org/camunda/bpm/**/*-SNAPSHOT/**/*.tar.gz\"\n           stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+        \n         }\n-\n-        build job: \"cambpm-jenkins-pipelines-ee/${env.EE_BRANCH_NAME}\", parameters: [\n-            string(name: 'copyArtifactSelector', value: '<TriggeredBuildSelector plugin=\"copyartifact@1.45.1\">  <upstreamFilterStrategy>UseGlobalSetting</upstreamFilterStrategy>  <allowUpstreamDependencies>false</allowUpstreamDependencies></TriggeredBuildSelector>'),\n-            booleanParam(name: 'STANDALONE', value: false),\n-            string(name: 'CE_BRANCH_NAME', value: \"${BRANCH_NAME}\")\n-        ], quietPeriod: 10, wait: false\n-        build job: \"cambpm-jenkins-pipelines-daily/${env.BRANCH_NAME}\", parameters: [\n-            string(name: 'copyArtifactSelector', value: '<TriggeredBuildSelector plugin=\"copyartifact@1.45.1\">  <upstreamFilterStrategy>UseGlobalSetting</upstreamFilterStrategy>  <allowUpstreamDependencies>false</allowUpstreamDependencies></TriggeredBuildSelector>'),\n-            booleanParam(name: 'STANDALONE', value: false)\n+        \n+        build job: \"cambpm-jenkins-pipelines-ee/${params.EE_BRANCH_NAME}\", parameters: [\n+                string(name: 'copyArtifactSelector', value: '<TriggeredBuildSelector plugin=\"copyartifact@1.45.1\">  <upstreamFilterStrategy>UseGlobalSetting</upstreamFilterStrategy>  <allowUpstreamDependencies>false</allowUpstreamDependencies></TriggeredBuildSelector>'),\n+                booleanParam(name: 'STANDALONE', value: false),\n+                string(name: 'CE_BRANCH_NAME', value: \"${env.BRANCH_NAME}\"),\n+                string(name: 'PR_LABELS', value: JsonOutput.toJson(pullRequest.labels))\n         ], quietPeriod: 10, wait: false\n+\n+        script {\n+          if (withLabels('default-build','rolling-update','migration','all-db','h2','db2','mysql','oracle','mariadb','sqlserver','postgresql','cockroachdb')) {\n+           build job: \"cambpm-jenkins-pipelines-daily/${env.BRANCH_NAME}\", parameters: [\n+               string(name: 'copyArtifactSelector', value: '<TriggeredBuildSelector plugin=\"copyartifact@1.45.1\">  <upstreamFilterStrategy>UseGlobalSetting</upstreamFilterStrategy>  <allowUpstreamDependencies>false</allowUpstreamDependencies></TriggeredBuildSelector>'),\n+               booleanParam(name: 'STANDALONE', value: false),\n+               string(name: 'PR_LABELS', value: JsonOutput.toJson(pullRequest.labels))\n+           ], quietPeriod: 10, wait: false\n+          }\n+\n+          if (env.BRANCH_NAME == 'master') {\n+            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+              configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {\n+               sh 'mvn -s \\$MAVEN_SETTINGS_XML org.sonatype.plugins:nexus-staging-maven-plugin:deploy-staged -DaltStagingDirectory=${WORKSPACE}/staging -Dmaven.repo.local=${WORKSPACE}/.m2 -DskipStaging=true -B'\n+              }\n+            }\n+          }\n+        }\n       }\n     }\n     stage('h2 tests') {\n       parallel {\n         stage('engine-UNIT-h2') {\n           when {\n-            anyOf {\n-              branch 'pipeline-master';\n-              allOf {\n-                changeRequest();\n-                expression {\n-                  withLabels('h2')\n-                }\n-              }\n+            expression {\n+              return withLabels('h2', 'rolling-update', 'migration')", "originalCommit": "dc42cac202bb9d1735177d8e7c6aa4bc5cd4cc74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5ODE3MA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533998170", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('h2')\n          \n          \n            \n                          withLabels('h2')", "author": "koevskinikola", "createdAt": "2020-12-02T09:00:51Z", "path": "Jenkinsfile", "diffHunk": "@@ -120,15 +140,10 @@ pipeline {\n         }\n         stage('engine-UNIT-authorizations-h2') {\n           when {\n-            anyOf {\n-              branch 'pipeline-master';\n-              allOf {\n-                changeRequest();\n-                expression {\n-                  withLabels('h2')\n-                }\n-              }\n+            expression {\n+              return withLabels('h2')", "originalCommit": "dc42cac202bb9d1735177d8e7c6aa4bc5cd4cc74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5ODM2NA==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533998364", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('rest-api')\n          \n          \n            \n                          withLabels('rest-api')", "author": "koevskinikola", "createdAt": "2020-12-02T09:01:13Z", "path": "Jenkinsfile", "diffHunk": "@@ -143,15 +158,10 @@ pipeline {\n         }\n         stage('engine-rest-UNIT-jersey-2') {\n           when {\n-            anyOf {\n-              branch 'pipeline-master';\n-              allOf {\n-                changeRequest();\n-                expression {\n-                  withLabels('rest')\n-                }\n-              }\n+            expression {\n+              return withLabels('rest-api')", "originalCommit": "dc42cac202bb9d1735177d8e7c6aa4bc5cd4cc74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5ODYyOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533998629", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('rest-api')\n          \n          \n            \n                          withLabels('rest-api')", "author": "koevskinikola", "createdAt": "2020-12-02T09:01:39Z", "path": "Jenkinsfile", "diffHunk": "@@ -166,15 +176,10 @@ pipeline {\n         }\n         stage('engine-rest-UNIT-resteasy3') {\n           when {\n-            anyOf {\n-              branch 'pipeline-master';\n-              allOf {\n-                changeRequest();\n-                expression {\n-                  withLabels('rest')\n-                }\n-              }\n+            expression {\n+              return withLabels('rest-api')", "originalCommit": "dc42cac202bb9d1735177d8e7c6aa4bc5cd4cc74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzk5ODgwNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r533998806", "bodyText": "I don't think the return statement is needed here, if you set the return type to boolean for the withLabels method.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          return withLabels('default-build')\n          \n          \n            \n                          withLabels('default-build')", "author": "koevskinikola", "createdAt": "2020-12-02T09:01:54Z", "path": "Jenkinsfile", "diffHunk": "@@ -189,15 +194,10 @@ pipeline {\n         }\n         stage('webapp-UNIT-h2') {\n           when {\n-            anyOf {\n-              branch 'pipeline-master';\n-              allOf {\n-                changeRequest();\n-                expression {\n-                  withLabels('webapps')\n-                }\n-              }\n+            expression {\n+              return withLabels('default-build')", "originalCommit": "dc42cac202bb9d1735177d8e7c6aa4bc5cd4cc74", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzNTk1Mw==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r534035953", "bodyText": "Should we add the default-build label here? I think JDK jobs were included in it.", "author": "koevskinikola", "createdAt": "2020-12-02T09:55:39Z", "path": ".ci/daily/Jenkinsfile", "diffHunk": "@@ -296,22 +266,17 @@ pipeline {\n             values 'openjdk-jdk-8-latest', 'openjdk-jdk-14-latest'\n           }\n         }\n+        when {\n+          expression {\n+            return withLabels('default-build')\n+          }\n+          beforeAgent true\n+        }\n         agent {\n           kubernetes {\n             yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n           }\n         }\n-        when {", "originalCommit": "fe8fb79345161037fe841734569a11cc9ed9999a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2NDExOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r534064119", "bodyText": "Yep, 5 rows above. I moved every when block before agent blocks.", "author": "yanavasileva", "createdAt": "2020-12-02T10:37:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzNTk1Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyMTEyOQ==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r535121129", "bodyText": "You're right, somehow I managed to miss it, sorry.", "author": "koevskinikola", "createdAt": "2020-12-03T11:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzNTk1Mw=="}], "type": "inlineReview"}, {"oid": "488c7eaaf1f7d61a711d3db89030e72cafd6cbae", "url": "https://github.com/camunda/camunda-bpm-platform/commit/488c7eaaf1f7d61a711d3db89030e72cafd6cbae", "message": "fix matrix label resolving", "committedDate": "2020-12-02T10:05:01Z", "type": "forcePushed"}, {"oid": "e17eda43218cdb9e219b5126beef06ba94cd5854", "url": "https://github.com/camunda/camunda-bpm-platform/commit/e17eda43218cdb9e219b5126beef06ba94cd5854", "message": "chore(pipelines): resolve pr labels", "committedDate": "2020-12-03T07:57:23Z", "type": "commit"}, {"oid": "b662997bed66e09cd5353398628f77624fd7efe0", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b662997bed66e09cd5353398628f77624fd7efe0", "message": "fix matrix label resolving", "committedDate": "2020-12-03T07:57:23Z", "type": "commit"}, {"oid": "80009bffa9821ec5ac859b10d91725fe382cb22f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/80009bffa9821ec5ac859b10d91725fe382cb22f", "message": "return boolean for withLabels", "committedDate": "2020-12-03T07:57:23Z", "type": "commit"}, {"oid": "6d22647c53be2c09d80e0b56a407ea846c1335c4", "url": "https://github.com/camunda/camunda-bpm-platform/commit/6d22647c53be2c09d80e0b56a407ea846c1335c4", "message": "defaultBranch", "committedDate": "2020-12-03T07:57:23Z", "type": "commit"}, {"oid": "4604b8f1d70dee8bb22de384acbe92cc97d8ba0f", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4604b8f1d70dee8bb22de384acbe92cc97d8ba0f", "message": "test", "committedDate": "2020-12-03T07:57:24Z", "type": "forcePushed"}, {"oid": "4fe2d568ca14126a51e39e2778e83dd1f56093c7", "url": "https://github.com/camunda/camunda-bpm-platform/commit/4fe2d568ca14126a51e39e2778e83dd1f56093c7", "message": "test", "committedDate": "2020-12-03T08:29:56Z", "type": "forcePushed"}, {"oid": "ca955ccac6f4344ccd49473b6ae9adf8b89b8455", "url": "https://github.com/camunda/camunda-bpm-platform/commit/ca955ccac6f4344ccd49473b6ae9adf8b89b8455", "message": "test", "committedDate": "2020-12-03T09:56:18Z", "type": "forcePushed"}, {"oid": "b5626c51f962bc0c1ee0f1c6eece7b457d8d76e4", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b5626c51f962bc0c1ee0f1c6eece7b457d8d76e4", "message": "test", "committedDate": "2020-12-03T10:50:40Z", "type": "commit"}, {"oid": "b5626c51f962bc0c1ee0f1c6eece7b457d8d76e4", "url": "https://github.com/camunda/camunda-bpm-platform/commit/b5626c51f962bc0c1ee0f1c6eece7b457d8d76e4", "message": "test", "committedDate": "2020-12-03T10:50:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMzkxNg==", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1149#discussion_r535133916", "bodyText": "These changes should be reverted, since they remove the webapps-* and engine-unit-authorizations tests.", "author": "koevskinikola", "createdAt": "2020-12-03T11:29:11Z", "path": "Jenkinsfile", "diffHunk": "@@ -364,33 +337,23 @@ pipeline {\n             name 'DB'\n             values 'postgresql_96', 'mariadb_103'\n           }\n-          axis {\n-            name 'PROFILE'\n-            values 'engine-unit', 'engine-unit-authorizations', 'webapps-unit', 'webapps-unit-authorizations'\n-          }\n         }\n         when {\n-          anyOf {\n-            branch 'pipeline-master';\n-            allOf {\n-              changeRequest();\n-//              expression {\n-//                withLabels(\"all-db\") || withDbLabel(env.DB)\n-//              }\n-            }\n+          expression {\n+            withLabels(\"all-db\") || withDbLabel(env.DB)\n           }\n+          beforeAgent true\n         }\n         agent {\n           kubernetes {\n             yaml getDbAgent(env.DB)\n           }\n         }\n         stages {\n-          stage('UNIT test') {\n+          stage(\"engine-UNIT\") {\n             steps {\n-              echo(\"UNIT DB Test Stage: ${env.PROFILE}-${env.DB}\")\n               withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n-                runMaven(true, false, false, getMavenProfileDir(env.PROFILE), getMavenProfileCmd(env.PROFILE) + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+                runMaven(true, false, false, 'engine/', 'clean test -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)", "originalCommit": "b5626c51f962bc0c1ee0f1c6eece7b457d8d76e4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cdacc33dcb1929d302f1c61f1172d793f5399133", "url": "https://github.com/camunda/camunda-bpm-platform/commit/cdacc33dcb1929d302f1c61f1172d793f5399133", "message": "revert engine-UNIT changes", "committedDate": "2020-12-03T12:36:27Z", "type": "commit"}, {"oid": "287b58071d77f5e3569e8596ff701748ada6c63d", "url": "https://github.com/camunda/camunda-bpm-platform/commit/287b58071d77f5e3569e8596ff701748ada6c63d", "message": "SQUASH ME: revert removed PROFILE axis in DB matrix", "committedDate": "2020-12-03T13:03:07Z", "type": "commit"}, {"oid": "c3e6bd6b6a839d66c378e431364e7f5dc6ed9215", "url": "https://github.com/camunda/camunda-bpm-platform/commit/c3e6bd6b6a839d66c378e431364e7f5dc6ed9215", "message": "fix when expression for `QA DB tests`", "committedDate": "2020-12-03T14:20:49Z", "type": "commit"}, {"oid": "c3e6bd6b6a839d66c378e431364e7f5dc6ed9215", "url": "https://github.com/camunda/camunda-bpm-platform/commit/c3e6bd6b6a839d66c378e431364e7f5dc6ed9215", "message": "fix when expression for `QA DB tests`", "committedDate": "2020-12-03T14:20:49Z", "type": "forcePushed"}, {"oid": "0d2cebbf9710b4d5a1486f8c57325cfff47b7fc3", "url": "https://github.com/camunda/camunda-bpm-platform/commit/0d2cebbf9710b4d5a1486f8c57325cfff47b7fc3", "message": "fix", "committedDate": "2020-12-03T15:18:59Z", "type": "commit"}, {"oid": "5555688275ef44914cd8e91308f925323007a288", "url": "https://github.com/camunda/camunda-bpm-platform/commit/5555688275ef44914cd8e91308f925323007a288", "message": "squash", "committedDate": "2020-12-03T16:30:10Z", "type": "commit"}]}