{"pr_number": 287, "pr_title": "[aws-datastore] Wait for initialization before attempting operations", "pr_createdAt": "2020-02-28T06:49:25Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/287", "timeline": [{"oid": "4219853c8f301346ce6d212fbf828d0297bc8891", "url": "https://github.com/aws-amplify/amplify-android/commit/4219853c8f301346ce6d212fbf828d0297bc8891", "message": "[aws-datastore] Wait for initialization before attempting operations\n\nThe initialize() category behavior is called on a background thread, and\nthe Amplify framework does not wait around for it to complete. However,\na user may attempt to use a category before initialize() has completed.\n\nAs a work-around to this problem, for DataStore only, listen for an\nevent that signifies initialization is complete. Only after this, begin\nexecuting DataStore operations.", "committedDate": "2020-02-28T06:49:50Z", "type": "commit"}, {"oid": "4219853c8f301346ce6d212fbf828d0297bc8891", "url": "https://github.com/aws-amplify/amplify-android/commit/4219853c8f301346ce6d212fbf828d0297bc8891", "message": "[aws-datastore] Wait for initialization before attempting operations\n\nThe initialize() category behavior is called on a background thread, and\nthe Amplify framework does not wait around for it to complete. However,\na user may attempt to use a category before initialize() has completed.\n\nAs a work-around to this problem, for DataStore only, listen for an\nevent that signifies initialization is complete. Only after this, begin\nexecuting DataStore operations.", "committedDate": "2020-02-28T06:49:50Z", "type": "forcePushed"}, {"oid": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69", "url": "https://github.com/aws-amplify/amplify-android/commit/457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69", "message": "Merge remote-tracking branch 'origin/master' into wait_for_init_datastore", "committedDate": "2020-03-05T17:14:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMTQ1NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r388501455", "bodyText": "Minor nit but maybe since this is effectively the latch variable we're using for concurrency management in category initialization we could have explicit naming of categoryInitializationLatch?", "author": "undefobj", "createdAt": "2020-03-05T19:07:57Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -56,13 +60,17 @@\n     // local storage adapter, and a remote API\n     private final Orchestrator orchestrator;\n \n+    // Keeps track of whether of not the category is initialized yet\n+    private final CountDownLatch categoryInitializationsPending;", "originalCommit": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzY1Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r389063656", "bodyText": "The naming here is awkward, agreed. The logic here was that it's a count that starts at 1 and then goes to 0, so it's like, how can I name this count in a reasonable way? Quantity of things that still need some operation..., etc.", "author": "jamesonwilliams", "createdAt": "2020-03-06T18:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMTQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNTQ2Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r388505462", "bodyText": "I like this refactor out of the individual overrides, basically lifecycle checks. I wonder do we need a separate beforeInitialization to ensure everything is in a good state? Could that be used for the race condition issue we saw the other day on app startup instead of requiring a singleton?", "author": "undefobj", "createdAt": "2020-03-05T19:14:48Z", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -314,20 +329,24 @@ public Cancelable observe(\n             },\n             onObservationFailure,\n             onObservationCompleted\n-        );\n+        )));\n     }\n \n-    @SuppressWarnings(\"checkstyle:WhitespaceAround\") // () -> {}\n-    @NonNull\n     @Override\n-    public <T extends Model> Cancelable observe(\n+    public <T extends Model> void observe(\n             @NonNull Class<T> itemClass,\n             @NonNull QueryPredicate selectionCriteria,\n+            @NonNull Consumer<Cancelable> onObservationStarted,\n             @NonNull Consumer<DataStoreItemChange<T>> onDataStoreItemChange,\n             @NonNull Consumer<DataStoreException> onObservationFailure,\n             @NonNull Action onObservationCompleted) {\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n-        return () -> {};\n+    }\n+\n+    private void afterInitialization(@NonNull final Runnable runnable) {", "originalCommit": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MjU3Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r389062577", "bodyText": "Hm, yea we could. Right now, afterInitialization is just only a method in this implementation class, not anything fancier. And there logically is some beforeInitialization, stuff (basically, setup a listener). Right now, the configure(...) is being used for both configuration and for this \"before\" initialization step.", "author": "jamesonwilliams", "createdAt": "2020-03-06T18:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNTQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNTg2MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r388525860", "bodyText": "I really like the new State enum here but I will admit that readability of the if-not-equals-get is a bit much and someone could introduce a bug in the future if they're not careful. Not sure I have an answer just calling it out.", "author": "undefobj", "createdAt": "2020-03-05T19:51:02Z", "path": "core/src/main/java/com/amplifyframework/core/category/Category.java", "diffHunk": "@@ -101,25 +98,47 @@ public final boolean isConfigured() {\n      * the category has been successfully configured. Whereas configuration is a short-lived\n      * synchronous phase of setup, initialization may require disk/network resources, etc.\n      * @param context An Android Context\n-     * @param onInitializationAttempted Called when initialization has been attempted.\n-     *                                  The result contains information about each plugin,\n-     *                                  and whether or not its initialization succeeded.\n+     * @return A category initialization result\n      */\n-    public final synchronized void initialize(\n-            @NonNull Context context,\n-            @NonNull Consumer<CategoryInitializationResult> onInitializationAttempted) {\n-        Map<String, InitializationResult> pluginInitializationResults = new HashMap<>();\n-        for (P plugin : getPlugins()) {\n-            InitializationResult result;\n-            try {\n-                plugin.initialize(context);\n-                result = InitializationResult.success();\n-            } catch (AmplifyException pluginInitializationFailure) {\n-                result = InitializationResult.failure(pluginInitializationFailure);\n+    @NonNull\n+    @WorkerThread\n+    public final synchronized CategoryInitializationResult initialize(@NonNull Context context) {\n+        final Map<String, InitializationResult> pluginInitializationResults = new HashMap<>();\n+        if (!State.CONFIGURED.equals(state.get())) {", "originalCommit": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MjEwMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r389062100", "bodyText": "The enum is a decent way to handle the state machine, however, I would have liked to avoid the state machine. Hopefully this can be revisited ...", "author": "jamesonwilliams", "createdAt": "2020-03-06T18:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNTg2MA=="}], "type": "inlineReview"}]}