{"pr_number": 312, "pr_title": "[Analytics] Add api to attach user information to the endpoint", "pr_createdAt": "2020-03-19T18:55:28Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/312", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1NTE5MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395255190", "bodyText": "Important: add equals(...), toString(), and hashCode() for this Location class.\nHow many of these fields are optional? Can you add @Nullable to getters and constructor params for any that aren't required? And @NonNull for those that must exist?\nIf latitude == null means \"it wasn't provided\", that would be a good thing to document also. Otherwise, use just the primitive double if your location class will always have lat/long.\nThe ideal situation is that all fields are @NonNull, and you use primitive doubles. This way, there's no guess work for the user. If a Location was able to be constructed, that means its fields are populated, and the user can just use it without fear of NullPointerException: location.getRegion(), etc.", "author": "jamesonwilliams", "createdAt": "2020-03-19T19:03:37Z", "path": "core/src/main/java/com/amplifyframework/analytics/AnalyticsUserProfile.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class AnalyticsUserProfile {\n+    private String name;\n+    private String email;\n+    private String plan;\n+    private Location location;\n+    private Properties customProperties;\n+\n+    public AnalyticsUserProfile(final String name,\n+                         final String email,\n+                         final String plan,\n+                         final Location location,\n+                         final Properties customProperties) {\n+        this.name = name;\n+        this.email = email;\n+        this.plan = plan;\n+        this.location = location;\n+        this.customProperties = customProperties;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    public String getPlan() {\n+        return plan;\n+    }\n+\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    public Properties getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    public static final class Location {\n+        private Double latitude;\n+        private Double longitude;\n+        private String postalCode;\n+        private String city;\n+        private String region;\n+        private String country;\n+\n+        public Location(final Double latitude,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NTc0NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395865745", "bodyText": "Added null notations where ever applicable.", "author": "desokroshan", "createdAt": "2020-03-20T20:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1NTE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1Nzg2OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395257869", "bodyText": "Which fields are @Nullable, @NonNull?\nImplement hashCode(), toString(), and equals() for any DTOs like this, that would be used in production.\nCan this be called just a UserProfile? Do we need to prefix everything with AnalyticsUserProfile? Are there other common UserProfile classes that it would clash with, if we call it that?", "author": "jamesonwilliams", "createdAt": "2020-03-19T19:08:32Z", "path": "core/src/main/java/com/amplifyframework/analytics/AnalyticsUserProfile.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class AnalyticsUserProfile {\n+    private String name;\n+    private String email;\n+    private String plan;\n+    private Location location;\n+    private Properties customProperties;\n+\n+    public AnalyticsUserProfile(final String name,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NTkwMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395865903", "bodyText": "Added null notations.", "author": "desokroshan", "createdAt": "2020-03-20T20:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1Nzg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1ODc0Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395258746", "bodyText": "Which components is this lock guarding? Is it to synchronize access to the boolean? Or what's the intention?", "author": "jamesonwilliams", "createdAt": "2020-03-19T19:10:12Z", "path": "core/src/main/java/com/amplifyframework/analytics/AnalyticsCategory.java", "diffHunk": "@@ -60,21 +60,25 @@ public CategoryType getCategoryType() {\n     }\n \n     @Override\n-    public void identifyUser(@NonNull String userId, @NonNull AnalyticsProfile profile) {\n-        throw new UnsupportedOperationException(\"This operation is currently not supported.\");\n+    public void identifyUser(@NonNull String userId, @NonNull AnalyticsUserProfile profile) {\n+        if (enabled) {\n+            getSelectedPlugin().identifyUser(userId, profile);\n+        }\n     }\n \n     @Override\n     public void disable() {\n         synchronized (LOCK) {\n             enabled = false;\n+            getSelectedPlugin().disable();\n         }\n     }\n \n     @Override\n     public void enable() {\n         synchronized (LOCK) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMTQzNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395421436", "bodyText": "Its guarding the access to boolean flag enabled.", "author": "desokroshan", "createdAt": "2020-03-20T03:08:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1ODc0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1OTU2OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395259569", "bodyText": "Looks like you want a builder. :-D If some of these fields are required, then consider a step builder. (That way, you could check if required fields are present at build time, not just runtime.)", "author": "jamesonwilliams", "createdAt": "2020-03-19T19:11:44Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AmazonPinpointAnalyticsPlugin.java", "diffHunk": "@@ -79,8 +93,71 @@ public void enable() {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void identifyUser(@NonNull String userId, @NonNull AnalyticsProfile profile) {\n-        throw new UnsupportedOperationException(\"This operation has not been implemented yet.\");\n+    public void identifyUser(@NonNull String userId, @NonNull AnalyticsUserProfile profile) {\n+        EndpointProfile endpointProfile = targetingClient.currentEndpoint();\n+        // Assign userId to the endpoint.\n+        EndpointProfileUser user = new EndpointProfileUser();\n+        user.setUserId(userId);\n+        endpointProfile.setUser(user);\n+        // Add user-specific data to the endpoint\n+        addUserProfileToEndpoint(endpointProfile, profile);\n+        // update endpoint\n+        targetingClient.updateEndpointProfile();\n+    }\n+\n+    /**\n+     * Add user specific data from {@link AnalyticsUserProfile} to the endpoint profile.\n+     * @param endpointProfile endpoint profile.\n+     * @param userProfile user specific data to be added to the endpoint.\n+     */\n+    private void addUserProfileToEndpoint(EndpointProfile endpointProfile,\n+                                          AnalyticsUserProfile userProfile) {\n+        endpointProfile.addAttribute(\"email\", Arrays.asList(userProfile.getEmail()));\n+        endpointProfile.addAttribute(\"name\", Arrays.asList(userProfile.getName()));\n+        endpointProfile.addAttribute(\"plan\", Arrays.asList(userProfile.getPlan()));\n+        // Add location\n+        addLocation(endpointProfile.getLocation(), userProfile.getLocation());\n+        // Add custom properties\n+        addCustomProperties(endpointProfile, userProfile.getCustomProperties());\n+    }\n+\n+    /**\n+     * Add custom user properties to the endpoint profile.\n+     * @param endpointProfile endpoint profile.\n+     * @param customProperties custom user properties to be added to the endpoint profile.\n+     */\n+    private void addCustomProperties(EndpointProfile endpointProfile,\n+                                     Properties customProperties) {\n+        if (customProperties != null) {\n+            for (Map.Entry<String, Property<?>> entry : customProperties.get().entrySet()) {\n+                if (entry.getValue() instanceof StringProperty) {\n+                    endpointProfile.addAttribute(entry.getKey(),\n+                            Arrays.asList(((StringProperty) entry.getValue()).getValue()));\n+                } else if (entry.getValue() instanceof DoubleProperty) {\n+                    endpointProfile.addMetric(entry.getKey(),\n+                            ((DoubleProperty) entry.getValue()).getValue());\n+                } else {\n+                    Amplify.Hub.publish(HubChannel.ANALYTICS, HubEvent.create(\"Analytics.identifyUser\",\n+                            \"Invalid property type detected. AmazonPinpointAnalyticsPlugin supports\" +\n+                                    \" only StringProperty or DoubleProperty. Refer to the documentation for details.\"));\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Add location details to the endpoint profile location.\n+     * @param endpointProfileLocation endpoint location.\n+     * @param location location details.\n+     */\n+    private void addLocation(EndpointProfileLocation endpointProfileLocation,\n+                             AnalyticsUserProfile.Location location) {\n+        endpointProfileLocation.setLatitude(location.getLatitude());\n+        endpointProfileLocation.setLongitude(location.getLongitude());\n+        endpointProfileLocation.setPostalCode(location.getPostalCode());\n+        endpointProfileLocation.setCity(location.getCity());\n+        endpointProfileLocation.setRegion(location.getRegion());\n+        endpointProfileLocation.setCountry(location.getCountry());", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjcwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395866704", "bodyText": "I agree EndpointProfileLocation can benefit from Builder because of so many optional params. We discussed not to do it since EndpointProfileLocation is a part of pinpoint sdk.", "author": "desokroshan", "createdAt": "2020-03-20T20:09:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1OTU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2MTkzOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395261939", "bodyText": "This behavior seems reasonable, but I'm not sold on the details of the HubEvent.\n\n\nCan you get the event name into a shared enum? The other categories currently enumerate the possible event names in a central location, and have a pattern for what the event names should look like. Analytics should do likewise.\n\n\nSince something exceptional has occurred, the payload type of the event should probably be an AnalyticsException. \"Refer to the documentation\" isn't an adequate recovery suggestion. If you'll point a user at documentation, it should include a link URL. But, the issue here is probably more like they tried to supply a property type that isn't supported, and so they should try to use one of the supported property types, instead. The supported property types are (state them here.)", "author": "jamesonwilliams", "createdAt": "2020-03-19T19:16:10Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AmazonPinpointAnalyticsPlugin.java", "diffHunk": "@@ -79,8 +93,71 @@ public void enable() {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void identifyUser(@NonNull String userId, @NonNull AnalyticsProfile profile) {\n-        throw new UnsupportedOperationException(\"This operation has not been implemented yet.\");\n+    public void identifyUser(@NonNull String userId, @NonNull AnalyticsUserProfile profile) {\n+        EndpointProfile endpointProfile = targetingClient.currentEndpoint();\n+        // Assign userId to the endpoint.\n+        EndpointProfileUser user = new EndpointProfileUser();\n+        user.setUserId(userId);\n+        endpointProfile.setUser(user);\n+        // Add user-specific data to the endpoint\n+        addUserProfileToEndpoint(endpointProfile, profile);\n+        // update endpoint\n+        targetingClient.updateEndpointProfile();\n+    }\n+\n+    /**\n+     * Add user specific data from {@link AnalyticsUserProfile} to the endpoint profile.\n+     * @param endpointProfile endpoint profile.\n+     * @param userProfile user specific data to be added to the endpoint.\n+     */\n+    private void addUserProfileToEndpoint(EndpointProfile endpointProfile,\n+                                          AnalyticsUserProfile userProfile) {\n+        endpointProfile.addAttribute(\"email\", Arrays.asList(userProfile.getEmail()));\n+        endpointProfile.addAttribute(\"name\", Arrays.asList(userProfile.getName()));\n+        endpointProfile.addAttribute(\"plan\", Arrays.asList(userProfile.getPlan()));\n+        // Add location\n+        addLocation(endpointProfile.getLocation(), userProfile.getLocation());\n+        // Add custom properties\n+        addCustomProperties(endpointProfile, userProfile.getCustomProperties());\n+    }\n+\n+    /**\n+     * Add custom user properties to the endpoint profile.\n+     * @param endpointProfile endpoint profile.\n+     * @param customProperties custom user properties to be added to the endpoint profile.\n+     */\n+    private void addCustomProperties(EndpointProfile endpointProfile,\n+                                     Properties customProperties) {\n+        if (customProperties != null) {\n+            for (Map.Entry<String, Property<?>> entry : customProperties.get().entrySet()) {\n+                if (entry.getValue() instanceof StringProperty) {\n+                    endpointProfile.addAttribute(entry.getKey(),\n+                            Arrays.asList(((StringProperty) entry.getValue()).getValue()));\n+                } else if (entry.getValue() instanceof DoubleProperty) {\n+                    endpointProfile.addMetric(entry.getKey(),\n+                            ((DoubleProperty) entry.getValue()).getValue());\n+                } else {\n+                    Amplify.Hub.publish(HubChannel.ANALYTICS, HubEvent.create(\"Analytics.identifyUser\",", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2NjkzNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395866937", "bodyText": "Added enum and updated the event payload to be an exception.", "author": "desokroshan", "createdAt": "2020-03-20T20:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2MTkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2MjcyNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395262725", "bodyText": "The thing in the value position here is called a \"singleton list,\" a list with one element. Java Collections utility provides a more efficient utility for constructing these things, Collections.singletonList(ofOneItem).", "author": "jamesonwilliams", "createdAt": "2020-03-19T19:17:41Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AmazonPinpointAnalyticsPlugin.java", "diffHunk": "@@ -79,8 +93,71 @@ public void enable() {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void identifyUser(@NonNull String userId, @NonNull AnalyticsProfile profile) {\n-        throw new UnsupportedOperationException(\"This operation has not been implemented yet.\");\n+    public void identifyUser(@NonNull String userId, @NonNull AnalyticsUserProfile profile) {\n+        EndpointProfile endpointProfile = targetingClient.currentEndpoint();\n+        // Assign userId to the endpoint.\n+        EndpointProfileUser user = new EndpointProfileUser();\n+        user.setUserId(userId);\n+        endpointProfile.setUser(user);\n+        // Add user-specific data to the endpoint\n+        addUserProfileToEndpoint(endpointProfile, profile);\n+        // update endpoint\n+        targetingClient.updateEndpointProfile();\n+    }\n+\n+    /**\n+     * Add user specific data from {@link AnalyticsUserProfile} to the endpoint profile.\n+     * @param endpointProfile endpoint profile.\n+     * @param userProfile user specific data to be added to the endpoint.\n+     */\n+    private void addUserProfileToEndpoint(EndpointProfile endpointProfile,\n+                                          AnalyticsUserProfile userProfile) {\n+        endpointProfile.addAttribute(\"email\", Arrays.asList(userProfile.getEmail()));\n+        endpointProfile.addAttribute(\"name\", Arrays.asList(userProfile.getName()));\n+        endpointProfile.addAttribute(\"plan\", Arrays.asList(userProfile.getPlan()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2NTQzMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395265433", "bodyText": "Instead of splitting the magic data between class-level constants, and inline literals, I would just keep it all locally defined. In other words, the instance of AnalyticsUserProfile.Location itself is magic data, not just its constituent fields:\n@SuppressWarning(\"checkstye:MagicNumber\") // Seattle's location is magic. Snow-capped volcanos, Orcas swimming in the Puget Sound, and the smell of fresh roasted coffee wafting on the pier...\nUserProfile.Location locationOfSeattle = UserProfile.Location.builder()\n    .latitute(47.6154086)\n    .longitude(-122.3349685)\n    .zipcode(\"98122\")\n    .city(\"Seattle\")\n    .locality(\"WA\") // locality? TODO: what is the generic term for this, that accounts for states/provinces?\n    .country(\"USA\")\n    .build();", "author": "jamesonwilliams", "createdAt": "2020-03-19T19:22:34Z", "path": "aws-analytics-pinpoint/src/androidTest/java/com/amplifyframework/analytics/pinpoint/AnalyticsPinpointInstrumentedTest.java", "diffHunk": "@@ -191,6 +200,43 @@ public void testUnregisterGlobalProperties() throws AnalyticsException {\n         assertFalse(analyticsClient.getAllEvents().get(0).has(\"attributes\"));\n     }\n \n+    @Test\n+    public void testIdentifyUser() {\n+        // Create a location object\n+        AnalyticsUserProfile.Location location = new AnalyticsUserProfile.Location(SEATTLE_LATITUDE,\n+                SEATTLE_LONGITUDE,\n+                \"98122\",\n+                \"Seattle\",\n+                \"WA\",\n+                \"USA\");", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2NzI2Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395267263", "bodyText": "Once you get equals() working correctly on these POJOs, you want to end up with something like a single assertEquals() call, on the top-level object:\nassertEquals(expectedComplexType, actualComplexType);\n\nInternally, assertEquals will call equals() on the object. And those should cascade through the fields, determining equality.\nOr, closer to what you'll actually have:\nassertEquals(\n    // Expected data. Build one here, inline, that contains the field values you _expect_ to see.\n    EndpoingProfile.builder()\n        .addAttribute(\"name\", Collections.singletonList(\"test-user\"))\n        .addAttribute(\"...\", \"... etc. \"'\")\n       .build(),\n    // The actual expirementally obtained copy ...\n   endpointProfile\n);\n\nAlso, as a note - in your assertEquals(expected, actual) calls, you currently have the expected and actual positions backwards. (Expected data should be first position, you have it as second position.) This makes a difference when the test fails, and jUnit goes to print out the error. It ordinarily would say something like \"Expected \"Seatte\", but got \"Toledo\".\" Yours would end up saying something like \"Expected \"Toledo\", but got \"Seattle\".\"", "author": "jamesonwilliams", "createdAt": "2020-03-19T19:25:37Z", "path": "aws-analytics-pinpoint/src/androidTest/java/com/amplifyframework/analytics/pinpoint/AnalyticsPinpointInstrumentedTest.java", "diffHunk": "@@ -191,6 +200,43 @@ public void testUnregisterGlobalProperties() throws AnalyticsException {\n         assertFalse(analyticsClient.getAllEvents().get(0).has(\"attributes\"));\n     }\n \n+    @Test\n+    public void testIdentifyUser() {\n+        // Create a location object\n+        AnalyticsUserProfile.Location location = new AnalyticsUserProfile.Location(SEATTLE_LATITUDE,\n+                SEATTLE_LONGITUDE,\n+                \"98122\",\n+                \"Seattle\",\n+                \"WA\",\n+                \"USA\");\n+        PinpointProperties pinpointProperties = PinpointProperties.builder()\n+                .add(\"TestStringProperty\", \"TestStringValue\")\n+                .add(\"TestDoubleProperty\", 1.0)\n+                .build();\n+        AnalyticsUserProfile userProfile = new AnalyticsUserProfile(\"test-user\",\n+                \"user@test.com\",\n+                \"test-plan\",\n+                location,\n+                pinpointProperties);\n+\n+        Amplify.Analytics.identifyUser(\"userId\", userProfile);\n+\n+        // Test endpoint attributes and metrics.\n+        EndpointProfile endpointProfile = targetingClient.currentEndpoint();\n+        EndpointProfileLocation endpointProfileLocation = endpointProfile.getLocation();\n+        assertEquals(endpointProfile.getAttribute(\"email\").get(0), \"user@test.com\");\n+        assertEquals(endpointProfile.getAttribute(\"name\").get(0), \"test-user\");\n+        assertEquals(endpointProfile.getAttribute(\"plan\").get(0), \"test-plan\");\n+        assertEquals(endpointProfileLocation.getLatitude(), (Double) SEATTLE_LATITUDE);\n+        assertEquals(endpointProfileLocation.getLongitude(), (Double) SEATTLE_LONGITUDE);\n+        assertEquals(endpointProfileLocation.getPostalCode(), \"98122\");\n+        assertEquals(endpointProfileLocation.getCity(), \"Seattle\");\n+        assertEquals(endpointProfileLocation.getRegion(), \"WA\");\n+        assertEquals(endpointProfileLocation.getCountry(), \"USA\");\n+        assertEquals(endpointProfile.getAttribute(\"TestStringProperty\").get(0), \"TestStringValue\");\n+        assertEquals(endpointProfile.getMetric(\"TestDoubleProperty\"), (Double) 1.0);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "071899d9eeeb45bb5c35011426377cbc3e6ec8b9", "url": "https://github.com/aws-amplify/amplify-android/commit/071899d9eeeb45bb5c35011426377cbc3e6ec8b9", "message": "Add api to attach user information to the endpoint", "committedDate": "2020-03-20T03:24:52Z", "type": "commit"}, {"oid": "071899d9eeeb45bb5c35011426377cbc3e6ec8b9", "url": "https://github.com/aws-amplify/amplify-android/commit/071899d9eeeb45bb5c35011426377cbc3e6ec8b9", "message": "Add api to attach user information to the endpoint", "committedDate": "2020-03-20T03:24:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMjQwOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395422408", "bodyText": "These ones can be final", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:14:43Z", "path": "core/src/main/java/com/amplifyframework/analytics/UserProfile.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class UserProfile {\n+    private String name;\n+    private String email;\n+    private String plan;\n+    private Location location;\n+    private Properties customProperties;\n+\n+    public UserProfile(Builder builder) {\n+        this.name = builder.name;\n+        this.email = builder.email;\n+        this.plan = builder.plan;\n+        this.location = builder.location;\n+        this.customProperties = builder.customProperties;\n+    }\n+\n+    @Nullable\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    @Nullable\n+    public String getPlan() {\n+        return plan;\n+    }\n+\n+    @Nullable\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    @Nullable\n+    public Properties getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:NeedBraces\")\n+    @Override\n+    public boolean equals(Object object) {\n+        if (this == object) return true;\n+        if (object == null || getClass() != object.getClass()) return false;\n+\n+        UserProfile that = (UserProfile) object;\n+\n+        if (name != null ? !name.equals(that.name) : that.name != null) return false;\n+        if (email != null ? !email.equals(that.email) : that.email != null) return false;\n+        if (plan != null ? !plan.equals(that.plan) : that.plan != null) return false;\n+        if (location != null ? !location.equals(that.location) : that.location != null)\n+            return false;\n+        return customProperties != null ? customProperties.equals(that.customProperties) :\n+                that.customProperties == null;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:MagicNumber\")\n+    @Override\n+    public int hashCode() {\n+        int result = name != null ? name.hashCode() : 0;\n+        result = 31 * result + (email != null ? email.hashCode() : 0);\n+        result = 31 * result + (plan != null ? plan.hashCode() : 0);\n+        result = 31 * result + (location != null ? location.hashCode() : 0);\n+        result = 31 * result + (customProperties != null ? customProperties.hashCode() : 0);\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"UserProfile{\" +\n+                \"name='\" + name + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", plan='\" + plan + '\\'' +\n+                \", location=\" + location +\n+                \", customProperties=\" + customProperties +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+        private String name;\n+        private String email;\n+        private String plan;\n+        private Location location;\n+        private Properties customProperties;\n+\n+        public Builder name(@NonNull final String name) {\n+            Objects.requireNonNull(name);\n+            this.name = name;\n+            return this;\n+        }\n+\n+        public Builder email(@NonNull final String email) {\n+            Objects.requireNonNull(email);\n+            this.email = email;\n+            return this;\n+        }\n+\n+        public Builder plan(@NonNull final String plan) {\n+            Objects.requireNonNull(plan);\n+            this.plan = plan;\n+            return this;\n+        }\n+\n+        public Builder location(@NonNull final Location location) {\n+            Objects.requireNonNull(location);\n+            this.location = location;\n+            return this;\n+        }\n+\n+        public Builder customProperties(@NonNull final Properties properties) {\n+            Objects.requireNonNull(properties);\n+            this.customProperties = properties;\n+            return this;\n+        }\n+\n+        public UserProfile build() {\n+            if (name == null &&\n+                email == null &&\n+                plan == null &&\n+                location == null &&\n+                customProperties == null\n+            ) {\n+                throw new IllegalArgumentException(\"You must set at least one user attribute to \" +\n+                        \"construct a valid user profile\");\n+            }\n+            return new UserProfile(this);\n+        }\n+    }\n+\n+    public static final class Location {\n+        private Double latitude;\n+        private Double longitude;\n+        private String postalCode;\n+        private String city;\n+        private String region;\n+        private String country;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMjQ0Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395422442", "bodyText": "@NonNull", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:14:58Z", "path": "core/src/main/java/com/amplifyframework/analytics/UserProfile.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class UserProfile {\n+    private String name;\n+    private String email;\n+    private String plan;\n+    private Location location;\n+    private Properties customProperties;\n+\n+    public UserProfile(Builder builder) {\n+        this.name = builder.name;\n+        this.email = builder.email;\n+        this.plan = builder.plan;\n+        this.location = builder.location;\n+        this.customProperties = builder.customProperties;\n+    }\n+\n+    @Nullable\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    @Nullable\n+    public String getPlan() {\n+        return plan;\n+    }\n+\n+    @Nullable\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    @Nullable\n+    public Properties getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:NeedBraces\")\n+    @Override\n+    public boolean equals(Object object) {\n+        if (this == object) return true;\n+        if (object == null || getClass() != object.getClass()) return false;\n+\n+        UserProfile that = (UserProfile) object;\n+\n+        if (name != null ? !name.equals(that.name) : that.name != null) return false;\n+        if (email != null ? !email.equals(that.email) : that.email != null) return false;\n+        if (plan != null ? !plan.equals(that.plan) : that.plan != null) return false;\n+        if (location != null ? !location.equals(that.location) : that.location != null)\n+            return false;\n+        return customProperties != null ? customProperties.equals(that.customProperties) :\n+                that.customProperties == null;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:MagicNumber\")\n+    @Override\n+    public int hashCode() {\n+        int result = name != null ? name.hashCode() : 0;\n+        result = 31 * result + (email != null ? email.hashCode() : 0);\n+        result = 31 * result + (plan != null ? plan.hashCode() : 0);\n+        result = 31 * result + (location != null ? location.hashCode() : 0);\n+        result = 31 * result + (customProperties != null ? customProperties.hashCode() : 0);\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"UserProfile{\" +\n+                \"name='\" + name + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", plan='\" + plan + '\\'' +\n+                \", location=\" + location +\n+                \", customProperties=\" + customProperties +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+        private String name;\n+        private String email;\n+        private String plan;\n+        private Location location;\n+        private Properties customProperties;\n+\n+        public Builder name(@NonNull final String name) {\n+            Objects.requireNonNull(name);\n+            this.name = name;\n+            return this;\n+        }\n+\n+        public Builder email(@NonNull final String email) {\n+            Objects.requireNonNull(email);\n+            this.email = email;\n+            return this;\n+        }\n+\n+        public Builder plan(@NonNull final String plan) {\n+            Objects.requireNonNull(plan);\n+            this.plan = plan;\n+            return this;\n+        }\n+\n+        public Builder location(@NonNull final Location location) {\n+            Objects.requireNonNull(location);\n+            this.location = location;\n+            return this;\n+        }\n+\n+        public Builder customProperties(@NonNull final Properties properties) {\n+            Objects.requireNonNull(properties);\n+            this.customProperties = properties;\n+            return this;\n+        }\n+\n+        public UserProfile build() {\n+            if (name == null &&\n+                email == null &&\n+                plan == null &&\n+                location == null &&\n+                customProperties == null\n+            ) {\n+                throw new IllegalArgumentException(\"You must set at least one user attribute to \" +\n+                        \"construct a valid user profile\");\n+            }\n+            return new UserProfile(this);\n+        }\n+    }\n+\n+    public static final class Location {\n+        private Double latitude;\n+        private Double longitude;\n+        private String postalCode;\n+        private String city;\n+        private String region;\n+        private String country;\n+\n+        public Location(Builder builder) {\n+            this.latitude = builder.latitude;\n+            this.longitude = builder.longitude;\n+            this.postalCode = builder.postalCode;\n+            this.city = builder.city;\n+            this.region = builder.region;\n+            this.country = builder.country;\n+        }\n+\n+        @Nullable\n+        public Double getLatitude() {\n+            return latitude;\n+        }\n+\n+        @Nullable\n+        public Double getLongitude() {\n+            return longitude;\n+        }\n+\n+        @Nullable\n+        public String getPostalCode() {\n+            return postalCode;\n+        }\n+\n+        @Nullable\n+        public String getCity() {\n+            return city;\n+        }\n+\n+        @Nullable\n+        public String getRegion() {\n+            return region;\n+        }\n+\n+        @Nullable\n+        public String getCountry() {\n+            return country;\n+        }\n+\n+        public static Builder builder() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMjcxMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395422712", "bodyText": "Since the check is so unlikely to trigger, it may not be worth it to maintain this code. Might be better off just allowing an object with all nulls`.", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:16:34Z", "path": "core/src/main/java/com/amplifyframework/analytics/UserProfile.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class UserProfile {\n+    private String name;\n+    private String email;\n+    private String plan;\n+    private Location location;\n+    private Properties customProperties;\n+\n+    public UserProfile(Builder builder) {\n+        this.name = builder.name;\n+        this.email = builder.email;\n+        this.plan = builder.plan;\n+        this.location = builder.location;\n+        this.customProperties = builder.customProperties;\n+    }\n+\n+    @Nullable\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    @Nullable\n+    public String getPlan() {\n+        return plan;\n+    }\n+\n+    @Nullable\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    @Nullable\n+    public Properties getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:NeedBraces\")\n+    @Override\n+    public boolean equals(Object object) {\n+        if (this == object) return true;\n+        if (object == null || getClass() != object.getClass()) return false;\n+\n+        UserProfile that = (UserProfile) object;\n+\n+        if (name != null ? !name.equals(that.name) : that.name != null) return false;\n+        if (email != null ? !email.equals(that.email) : that.email != null) return false;\n+        if (plan != null ? !plan.equals(that.plan) : that.plan != null) return false;\n+        if (location != null ? !location.equals(that.location) : that.location != null)\n+            return false;\n+        return customProperties != null ? customProperties.equals(that.customProperties) :\n+                that.customProperties == null;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:MagicNumber\")\n+    @Override\n+    public int hashCode() {\n+        int result = name != null ? name.hashCode() : 0;\n+        result = 31 * result + (email != null ? email.hashCode() : 0);\n+        result = 31 * result + (plan != null ? plan.hashCode() : 0);\n+        result = 31 * result + (location != null ? location.hashCode() : 0);\n+        result = 31 * result + (customProperties != null ? customProperties.hashCode() : 0);\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"UserProfile{\" +\n+                \"name='\" + name + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", plan='\" + plan + '\\'' +\n+                \", location=\" + location +\n+                \", customProperties=\" + customProperties +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+        private String name;\n+        private String email;\n+        private String plan;\n+        private Location location;\n+        private Properties customProperties;\n+\n+        public Builder name(@NonNull final String name) {\n+            Objects.requireNonNull(name);\n+            this.name = name;\n+            return this;\n+        }\n+\n+        public Builder email(@NonNull final String email) {\n+            Objects.requireNonNull(email);\n+            this.email = email;\n+            return this;\n+        }\n+\n+        public Builder plan(@NonNull final String plan) {\n+            Objects.requireNonNull(plan);\n+            this.plan = plan;\n+            return this;\n+        }\n+\n+        public Builder location(@NonNull final Location location) {\n+            Objects.requireNonNull(location);\n+            this.location = location;\n+            return this;\n+        }\n+\n+        public Builder customProperties(@NonNull final Properties properties) {\n+            Objects.requireNonNull(properties);\n+            this.customProperties = properties;\n+            return this;\n+        }\n+\n+        public UserProfile build() {\n+            if (name == null &&\n+                email == null &&\n+                plan == null &&\n+                location == null &&\n+                customProperties == null\n+            ) {\n+                throw new IllegalArgumentException(\"You must set at least one user attribute to \" +\n+                        \"construct a valid user profile\");\n+            }\n+            return new UserProfile(this);\n+        }\n+    }\n+\n+    public static final class Location {\n+        private Double latitude;\n+        private Double longitude;\n+        private String postalCode;\n+        private String city;\n+        private String region;\n+        private String country;\n+\n+        public Location(Builder builder) {\n+            this.latitude = builder.latitude;\n+            this.longitude = builder.longitude;\n+            this.postalCode = builder.postalCode;\n+            this.city = builder.city;\n+            this.region = builder.region;\n+            this.country = builder.country;\n+        }\n+\n+        @Nullable\n+        public Double getLatitude() {\n+            return latitude;\n+        }\n+\n+        @Nullable\n+        public Double getLongitude() {\n+            return longitude;\n+        }\n+\n+        @Nullable\n+        public String getPostalCode() {\n+            return postalCode;\n+        }\n+\n+        @Nullable\n+        public String getCity() {\n+            return city;\n+        }\n+\n+        @Nullable\n+        public String getRegion() {\n+            return region;\n+        }\n+\n+        @Nullable\n+        public String getCountry() {\n+            return country;\n+        }\n+\n+        public static Builder builder() {\n+            return new Builder();\n+        }\n+\n+        @SuppressWarnings(\"checkstyle:NeedBraces\")\n+        @Override\n+        public boolean equals(Object object) {\n+            if (this == object) return true;\n+            if (object == null || getClass() != object.getClass()) return false;\n+\n+            Location location = (Location) object;\n+\n+            if (latitude != null ? !latitude.equals(location.latitude) : location.latitude != null)\n+                return false;\n+            if (longitude != null ? !longitude.equals(location.longitude) : location.longitude != null)\n+                return false;\n+            if (postalCode != null ? !postalCode.equals(location.postalCode) : location.postalCode != null)\n+                return false;\n+            if (city != null ? !city.equals(location.city) : location.city != null) return false;\n+            if (region != null ? !region.equals(location.region) : location.region != null)\n+                return false;\n+            return country != null ? country.equals(location.country) : location.country == null;\n+        }\n+\n+        @SuppressWarnings(\"checkstyle:MagicNumber\")\n+        @Override\n+        public int hashCode() {\n+            int result = latitude != null ? latitude.hashCode() : 0;\n+            result = 31 * result + (longitude != null ? longitude.hashCode() : 0);\n+            result = 31 * result + (postalCode != null ? postalCode.hashCode() : 0);\n+            result = 31 * result + (city != null ? city.hashCode() : 0);\n+            result = 31 * result + (region != null ? region.hashCode() : 0);\n+            result = 31 * result + (country != null ? country.hashCode() : 0);\n+            return result;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Location{\" +\n+                    \"latitude=\" + latitude +\n+                    \", longitude=\" + longitude +\n+                    \", postalCode='\" + postalCode + '\\'' +\n+                    \", city='\" + city + '\\'' +\n+                    \", region='\" + region + '\\'' +\n+                    \", country='\" + country + '\\'' +\n+                    '}';\n+        }\n+\n+        public static final class Builder {\n+            private Double latitude;\n+            private Double longitude;\n+            private String postalCode;\n+            private String city;\n+            private String region;\n+            private String country;\n+\n+            public Builder latitude(@NonNull Double latitude) {\n+                Objects.requireNonNull(latitude);\n+                this.latitude = latitude;\n+                return this;\n+            }\n+\n+            public Builder longitude(@NonNull Double longitude) {\n+                Objects.requireNonNull(longitude);\n+                this.longitude = longitude;\n+                return this;\n+            }\n+\n+            public Builder postalCode(@NonNull String postalCode) {\n+                Objects.requireNonNull(postalCode);\n+                this.postalCode = postalCode;\n+                return this;\n+            }\n+\n+            public Builder city(@NonNull String city) {\n+                Objects.requireNonNull(city);\n+                this.city = city;\n+                return this;\n+            }\n+\n+            public Builder region(@NonNull String region) {\n+                Objects.requireNonNull(region);\n+                this.region = region;\n+                return this;\n+            }\n+\n+            public Builder country(@NonNull String country) {\n+                Objects.requireNonNull(country);\n+                this.country = country;\n+                return this;\n+            }\n+\n+            public Location build() {\n+                if (latitude == null &&\n+                    longitude == null &&\n+                    postalCode == null &&\n+                    city == null &&\n+                    region == null &&\n+                    country == null) {\n+                    throw new IllegalArgumentException(\"At least on parameter must be non-null to \" +\n+                            \"construct a Location object\");\n+                }", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMjgzOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395422838", "bodyText": "@NonNull", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:17:25Z", "path": "core/src/main/java/com/amplifyframework/analytics/UserProfile.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class UserProfile {\n+    private String name;\n+    private String email;\n+    private String plan;\n+    private Location location;\n+    private Properties customProperties;\n+\n+    public UserProfile(Builder builder) {\n+        this.name = builder.name;\n+        this.email = builder.email;\n+        this.plan = builder.plan;\n+        this.location = builder.location;\n+        this.customProperties = builder.customProperties;\n+    }\n+\n+    @Nullable\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    @Nullable\n+    public String getPlan() {\n+        return plan;\n+    }\n+\n+    @Nullable\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    @Nullable\n+    public Properties getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    public static Builder builder() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMzExNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395423116", "bodyText": "These Builder methods all should return @NonNull.\nYou can configure your IDE to warn when things don't have these annotations, actually. (I have this setup.)\nOur code base is too far \"off\" right now to enable it with an automated tool at compile time. But it's still possible to get the suggestions in the IDE.", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:18:47Z", "path": "core/src/main/java/com/amplifyframework/analytics/UserProfile.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class UserProfile {\n+    private String name;\n+    private String email;\n+    private String plan;\n+    private Location location;\n+    private Properties customProperties;\n+\n+    public UserProfile(Builder builder) {\n+        this.name = builder.name;\n+        this.email = builder.email;\n+        this.plan = builder.plan;\n+        this.location = builder.location;\n+        this.customProperties = builder.customProperties;\n+    }\n+\n+    @Nullable\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    @Nullable\n+    public String getPlan() {\n+        return plan;\n+    }\n+\n+    @Nullable\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    @Nullable\n+    public Properties getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:NeedBraces\")\n+    @Override\n+    public boolean equals(Object object) {\n+        if (this == object) return true;\n+        if (object == null || getClass() != object.getClass()) return false;\n+\n+        UserProfile that = (UserProfile) object;\n+\n+        if (name != null ? !name.equals(that.name) : that.name != null) return false;\n+        if (email != null ? !email.equals(that.email) : that.email != null) return false;\n+        if (plan != null ? !plan.equals(that.plan) : that.plan != null) return false;\n+        if (location != null ? !location.equals(that.location) : that.location != null)\n+            return false;\n+        return customProperties != null ? customProperties.equals(that.customProperties) :\n+                that.customProperties == null;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:MagicNumber\")\n+    @Override\n+    public int hashCode() {\n+        int result = name != null ? name.hashCode() : 0;\n+        result = 31 * result + (email != null ? email.hashCode() : 0);\n+        result = 31 * result + (plan != null ? plan.hashCode() : 0);\n+        result = 31 * result + (location != null ? location.hashCode() : 0);\n+        result = 31 * result + (customProperties != null ? customProperties.hashCode() : 0);\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"UserProfile{\" +\n+                \"name='\" + name + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", plan='\" + plan + '\\'' +\n+                \", location=\" + location +\n+                \", customProperties=\" + customProperties +\n+                '}';\n+    }\n+\n+    public static final class Builder {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyMzYxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395423619", "bodyText": "Can you get these keys into an enum or StringDef, too? PinpointProfileAttribute.EMAIL, etc.? You could add a little helper method like:\nprivate void addAttribute(EndpointProfile profile, @PinpointProfileAttribute String profileAttribute, String value) {\n    profile.addAttribute(profileAttribute, Collections.singletonList(value));\n}\n\n^^ Above, the at-PinpointProfileAttribute is a StringDef", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:21:40Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AmazonPinpointAnalyticsPlugin.java", "diffHunk": "@@ -93,32 +96,45 @@ public void enable() {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void identifyUser(@NonNull String userId, @NonNull AnalyticsUserProfile profile) {\n+    public void identifyUser(@NonNull String userId, @Nullable UserProfile userProfile) {\n+        Objects.requireNonNull(userId);\n         EndpointProfile endpointProfile = targetingClient.currentEndpoint();\n         // Assign userId to the endpoint.\n         EndpointProfileUser user = new EndpointProfileUser();\n         user.setUserId(userId);\n         endpointProfile.setUser(user);\n         // Add user-specific data to the endpoint\n-        addUserProfileToEndpoint(endpointProfile, profile);\n+        addUserProfileToEndpoint(endpointProfile, userProfile);\n         // update endpoint\n         targetingClient.updateEndpointProfile();\n     }\n \n     /**\n-     * Add user specific data from {@link AnalyticsUserProfile} to the endpoint profile.\n+     * Add user specific data from {@link UserProfile} to the endpoint profile.\n      * @param endpointProfile endpoint profile.\n      * @param userProfile user specific data to be added to the endpoint.\n      */\n     private void addUserProfileToEndpoint(EndpointProfile endpointProfile,\n-                                          AnalyticsUserProfile userProfile) {\n-        endpointProfile.addAttribute(\"email\", Arrays.asList(userProfile.getEmail()));\n-        endpointProfile.addAttribute(\"name\", Arrays.asList(userProfile.getName()));\n-        endpointProfile.addAttribute(\"plan\", Arrays.asList(userProfile.getPlan()));\n+                                          UserProfile userProfile) {\n+        if (userProfile.getEmail() != null) {\n+            endpointProfile.addAttribute(\"email\", Collections.singletonList(userProfile.getEmail()));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyNjY1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395426653", "bodyText": "If you make this nullable, add a note to the javadoc about what happens when it is null / what the null means.", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:38:58Z", "path": "core/src/main/java/com/amplifyframework/analytics/AnalyticsCategoryBehavior.java", "diffHunk": "@@ -33,7 +34,7 @@\n      * @param userId The unique identifier for the user\n      * @param profile User specific data (e.g. plan, accountType, email, age, location, etc)\n      */\n-    void identifyUser(@NonNull String userId, @NonNull AnalyticsProfile profile);\n+    void identifyUser(@NonNull String userId, @Nullable UserProfile profile);", "originalCommit": "071899d9eeeb45bb5c35011426377cbc3e6ec8b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyNzA1Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395427052", "bodyText": "Right now, if userProfile is null, then it will get passed down into addUserProfileToEndpoint(...), where userProfile.getSomething() happens, and will generate aNullPointerException.\nSo, either you should guard if (userProfile != null) { useIt(); }, or you should dis-allow null by requireNonNull(...) immediately after receiving the value.\nIt's possible that null for htis param is supposed to mean \"clear the identified user.\"?", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:41:17Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AmazonPinpointAnalyticsPlugin.java", "diffHunk": "@@ -79,8 +96,84 @@ public void enable() {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void identifyUser(@NonNull String userId, @NonNull AnalyticsProfile profile) {\n-        throw new UnsupportedOperationException(\"This operation has not been implemented yet.\");\n+    public void identifyUser(@NonNull String userId, @Nullable UserProfile userProfile) {", "originalCommit": "071899d9eeeb45bb5c35011426377cbc3e6ec8b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2ODk5OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395868999", "bodyText": "Added null check for userProfile. userProfile = null means that the endpoint will have userId as the only information about the user and nothing more.", "author": "desokroshan", "createdAt": "2020-03-20T20:15:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyNzA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQyNzI0MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395427240", "bodyText": "All of these things that return a Builder will all return @NonNull, too. Might as well add it everywhere you can on public/protected members. It makes a big help for Kotlin code that calls this stuff.", "author": "jamesonwilliams", "createdAt": "2020-03-20T03:42:25Z", "path": "core/src/main/java/com/amplifyframework/analytics/UserProfile.java", "diffHunk": "@@ -0,0 +1,313 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class UserProfile {\n+    private String name;\n+    private String email;\n+    private String plan;\n+    private Location location;\n+    private Properties customProperties;\n+\n+    public UserProfile(Builder builder) {\n+        this.name = builder.name;\n+        this.email = builder.email;\n+        this.plan = builder.plan;\n+        this.location = builder.location;\n+        this.customProperties = builder.customProperties;\n+    }\n+\n+    @Nullable\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    @Nullable\n+    public String getPlan() {\n+        return plan;\n+    }\n+\n+    @Nullable\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    @Nullable\n+    public Properties getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:NeedBraces\")\n+    @Override\n+    public boolean equals(Object object) {\n+        if (this == object) return true;\n+        if (object == null || getClass() != object.getClass()) return false;\n+\n+        UserProfile that = (UserProfile) object;\n+\n+        if (name != null ? !name.equals(that.name) : that.name != null) return false;\n+        if (email != null ? !email.equals(that.email) : that.email != null) return false;\n+        if (plan != null ? !plan.equals(that.plan) : that.plan != null) return false;\n+        if (location != null ? !location.equals(that.location) : that.location != null)\n+            return false;\n+        return customProperties != null ? customProperties.equals(that.customProperties) :\n+                that.customProperties == null;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:MagicNumber\")\n+    @Override\n+    public int hashCode() {\n+        int result = name != null ? name.hashCode() : 0;\n+        result = 31 * result + (email != null ? email.hashCode() : 0);\n+        result = 31 * result + (plan != null ? plan.hashCode() : 0);\n+        result = 31 * result + (location != null ? location.hashCode() : 0);\n+        result = 31 * result + (customProperties != null ? customProperties.hashCode() : 0);\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"UserProfile{\" +\n+                \"name='\" + name + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", plan='\" + plan + '\\'' +\n+                \", location=\" + location +\n+                \", customProperties=\" + customProperties +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+        private String name;\n+        private String email;\n+        private String plan;\n+        private Location location;\n+        private Properties customProperties;\n+\n+        public Builder name(@NonNull final String name) {\n+            Objects.requireNonNull(name);\n+            this.name = name;\n+            return this;\n+        }\n+\n+        public Builder email(@NonNull final String email) {\n+            Objects.requireNonNull(email);\n+            this.email = email;\n+            return this;\n+        }\n+\n+        public Builder plan(@NonNull final String plan) {\n+            Objects.requireNonNull(plan);\n+            this.plan = plan;\n+            return this;\n+        }\n+\n+        public Builder location(@NonNull final Location location) {\n+            Objects.requireNonNull(location);\n+            this.location = location;\n+            return this;\n+        }\n+\n+        public Builder customProperties(@NonNull final Properties properties) {\n+            Objects.requireNonNull(properties);\n+            this.customProperties = properties;\n+            return this;\n+        }\n+\n+        public UserProfile build() {\n+            if (name == null &&\n+                email == null &&\n+                plan == null &&\n+                location == null &&\n+                customProperties == null\n+            ) {\n+                throw new IllegalArgumentException(\"You must set at least one user attribute to \" +\n+                        \"construct a valid user profile\");\n+            }\n+            return new UserProfile(this);\n+        }\n+    }\n+\n+    public static final class Location {\n+        private Double latitude;\n+        private Double longitude;\n+        private String postalCode;\n+        private String city;\n+        private String region;\n+        private String country;\n+\n+        public Location(Builder builder) {\n+            this.latitude = builder.latitude;\n+            this.longitude = builder.longitude;\n+            this.postalCode = builder.postalCode;\n+            this.city = builder.city;\n+            this.region = builder.region;\n+            this.country = builder.country;\n+        }\n+\n+        @Nullable\n+        public Double getLatitude() {\n+            return latitude;\n+        }\n+\n+        @Nullable\n+        public Double getLongitude() {\n+            return longitude;\n+        }\n+\n+        @Nullable\n+        public String getPostalCode() {\n+            return postalCode;\n+        }\n+\n+        @Nullable\n+        public String getCity() {\n+            return city;\n+        }\n+\n+        @Nullable\n+        public String getRegion() {\n+            return region;\n+        }\n+\n+        @Nullable\n+        public String getCountry() {\n+            return country;\n+        }\n+\n+        public static Builder builder() {\n+            return new Builder();\n+        }\n+\n+        @SuppressWarnings(\"checkstyle:NeedBraces\")\n+        @Override\n+        public boolean equals(Object object) {\n+            if (this == object) return true;\n+            if (object == null || getClass() != object.getClass()) return false;\n+\n+            Location location = (Location) object;\n+\n+            if (latitude != null ? !latitude.equals(location.latitude) : location.latitude != null)\n+                return false;\n+            if (longitude != null ? !longitude.equals(location.longitude) : location.longitude != null)\n+                return false;\n+            if (postalCode != null ? !postalCode.equals(location.postalCode) : location.postalCode != null)\n+                return false;\n+            if (city != null ? !city.equals(location.city) : location.city != null) return false;\n+            if (region != null ? !region.equals(location.region) : location.region != null)\n+                return false;\n+            return country != null ? country.equals(location.country) : location.country == null;\n+        }\n+\n+        @SuppressWarnings(\"checkstyle:MagicNumber\")\n+        @Override\n+        public int hashCode() {\n+            int result = latitude != null ? latitude.hashCode() : 0;\n+            result = 31 * result + (longitude != null ? longitude.hashCode() : 0);\n+            result = 31 * result + (postalCode != null ? postalCode.hashCode() : 0);\n+            result = 31 * result + (city != null ? city.hashCode() : 0);\n+            result = 31 * result + (region != null ? region.hashCode() : 0);\n+            result = 31 * result + (country != null ? country.hashCode() : 0);\n+            return result;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"Location{\" +\n+                    \"latitude=\" + latitude +\n+                    \", longitude=\" + longitude +\n+                    \", postalCode='\" + postalCode + '\\'' +\n+                    \", city='\" + city + '\\'' +\n+                    \", region='\" + region + '\\'' +\n+                    \", country='\" + country + '\\'' +\n+                    '}';\n+        }\n+\n+        public static final class Builder {\n+            private Double latitude;\n+            private Double longitude;\n+            private String postalCode;\n+            private String city;\n+            private String region;\n+            private String country;\n+\n+            public Builder latitude(@NonNull Double latitude) {\n+                Objects.requireNonNull(latitude);\n+                this.latitude = latitude;\n+                return this;\n+            }\n+\n+            public Builder longitude(@NonNull Double longitude) {\n+                Objects.requireNonNull(longitude);\n+                this.longitude = longitude;\n+                return this;\n+            }\n+\n+            public Builder postalCode(@NonNull String postalCode) {\n+                Objects.requireNonNull(postalCode);\n+                this.postalCode = postalCode;\n+                return this;\n+            }\n+\n+            public Builder city(@NonNull String city) {\n+                Objects.requireNonNull(city);\n+                this.city = city;\n+                return this;\n+            }\n+\n+            public Builder region(@NonNull String region) {\n+                Objects.requireNonNull(region);\n+                this.region = region;\n+                return this;\n+            }\n+\n+            public Builder country(@NonNull String country) {", "originalCommit": "071899d9eeeb45bb5c35011426377cbc3e6ec8b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a62f3d7a7bc388e4f36c0e1203b6e126518c41ff", "url": "https://github.com/aws-amplify/amplify-android/commit/a62f3d7a7bc388e4f36c0e1203b6e126518c41ff", "message": "Add nullity annotations and apply other feedback", "committedDate": "2020-03-20T20:55:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMzcxMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395923711", "bodyText": "nit: to help break up the groupings, add an empty line after the constants, before the Application declaration.", "author": "jamesonwilliams", "createdAt": "2020-03-20T22:55:29Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AmazonPinpointAnalyticsPlugin.java", "diffHunk": "@@ -18,35 +18,58 @@\n import android.app.Application;\n import android.content.Context;\n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringDef;\n \n+import com.amplifyframework.analytics.AnalyticsChannelEventName;\n import com.amplifyframework.analytics.AnalyticsEvent;\n import com.amplifyframework.analytics.AnalyticsException;\n import com.amplifyframework.analytics.AnalyticsPlugin;\n-import com.amplifyframework.analytics.AnalyticsProfile;\n import com.amplifyframework.analytics.Properties;\n import com.amplifyframework.analytics.Property;\n+import com.amplifyframework.analytics.UserProfile;\n import com.amplifyframework.core.Amplify;\n import com.amplifyframework.hub.HubChannel;\n import com.amplifyframework.hub.HubEvent;\n \n import com.amazonaws.mobileconnectors.pinpoint.PinpointManager;\n import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.targeting.TargetingClient;\n+import com.amazonaws.mobileconnectors.pinpoint.targeting.endpointProfile.EndpointProfile;\n+import com.amazonaws.mobileconnectors.pinpoint.targeting.endpointProfile.EndpointProfileLocation;\n+import com.amazonaws.mobileconnectors.pinpoint.targeting.endpointProfile.EndpointProfileUser;\n import com.amazonaws.regions.Regions;\n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.util.Collections;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n /**\n  * The plugin implementation for Amazon Pinpoint in Analytics category.\n  */\n public final class AmazonPinpointAnalyticsPlugin extends AnalyticsPlugin<Object> {\n+    @SuppressWarnings(\"checkstyle:WhitespaceAround\")\n+    @Retention(RetentionPolicy.SOURCE)\n+    @StringDef({\n+        USER_NAME,\n+        USER_EMAIL,\n+        USER_PLAN\n+    })\n+    private @interface PinpointUserProfileAttribute {}\n+    private static final String USER_NAME = \"name\";\n+    private static final String USER_EMAIL = \"email\";\n+    private static final String USER_PLAN = \"plan\";\n     private final Application application;", "originalCommit": "a62f3d7a7bc388e4f36c0e1203b6e126518c41ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyMzkwMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395923900", "bodyText": "This class is final, and can't be extended. So protected isn't of much value, here. I think maybe you want just default package-local access, here?", "author": "jamesonwilliams", "createdAt": "2020-03-20T22:56:09Z", "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AmazonPinpointAnalyticsPlugin.java", "diffHunk": "@@ -65,6 +88,14 @@ protected AnalyticsClient getAnalyticsClient() {\n         return analyticsClient;\n     }\n \n+    /**\n+     * Accessor method for pinpoint targeting client.\n+     * @return returns pinpoint targeting client.\n+     */\n+    protected TargetingClient getTargetingClient() {", "originalCommit": "a62f3d7a7bc388e4f36c0e1203b6e126518c41ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyNDQyMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395924421", "bodyText": "If you make this as private UserProfile(Builder builder), then only you will be able to call this constructor, and you don't have to worry about the builder being null (you'll be able to ensure that, with your own code in this file.)", "author": "jamesonwilliams", "createdAt": "2020-03-20T22:58:08Z", "path": "core/src/main/java/com/amplifyframework/analytics/UserProfile.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class UserProfile {\n+    private final String name;\n+    private final String email;\n+    private final String plan;\n+    private final Location location;\n+    private final Properties customProperties;\n+\n+    public UserProfile(@NonNull Builder builder) {", "originalCommit": "a62f3d7a7bc388e4f36c0e1203b6e126518c41ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkyNDcwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r395924701", "bodyText": "Same deal here, you can probably make this private Location(Builder builder), and then as long as you always pass non-null from build(), you don't need to check Objects.requireNonNull(...), since that's the only single place it'll ever be possible.", "author": "jamesonwilliams", "createdAt": "2020-03-20T22:59:21Z", "path": "core/src/main/java/com/amplifyframework/analytics/UserProfile.java", "diffHunk": "@@ -0,0 +1,314 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Represents user specific data such as name, email, plan, location etc.\n+ */\n+public final class UserProfile {\n+    private final String name;\n+    private final String email;\n+    private final String plan;\n+    private final Location location;\n+    private final Properties customProperties;\n+\n+    public UserProfile(@NonNull Builder builder) {\n+        Objects.requireNonNull(builder);\n+        this.name = builder.name;\n+        this.email = builder.email;\n+        this.plan = builder.plan;\n+        this.location = builder.location;\n+        this.customProperties = builder.customProperties;\n+    }\n+\n+    @Nullable\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Nullable\n+    public String getEmail() {\n+        return email;\n+    }\n+\n+    @Nullable\n+    public String getPlan() {\n+        return plan;\n+    }\n+\n+    @Nullable\n+    public Location getLocation() {\n+        return location;\n+    }\n+\n+    @Nullable\n+    public Properties getCustomProperties() {\n+        return customProperties;\n+    }\n+\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:NeedBraces\")\n+    @Override\n+    public boolean equals(@Nullable Object object) {\n+        if (this == object) return true;\n+        if (object == null || getClass() != object.getClass()) return false;\n+\n+        UserProfile that = (UserProfile) object;\n+\n+        if (name != null ? !name.equals(that.name) : that.name != null) return false;\n+        if (email != null ? !email.equals(that.email) : that.email != null) return false;\n+        if (plan != null ? !plan.equals(that.plan) : that.plan != null) return false;\n+        if (location != null ? !location.equals(that.location) : that.location != null)\n+            return false;\n+        return customProperties != null ? customProperties.equals(that.customProperties) :\n+                that.customProperties == null;\n+    }\n+\n+    @SuppressWarnings(\"checkstyle:MagicNumber\")\n+    @Override\n+    public int hashCode() {\n+        int result = name != null ? name.hashCode() : 0;\n+        result = 31 * result + (email != null ? email.hashCode() : 0);\n+        result = 31 * result + (plan != null ? plan.hashCode() : 0);\n+        result = 31 * result + (location != null ? location.hashCode() : 0);\n+        result = 31 * result + (customProperties != null ? customProperties.hashCode() : 0);\n+        return result;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"UserProfile{\" +\n+                \"name='\" + name + '\\'' +\n+                \", email='\" + email + '\\'' +\n+                \", plan='\" + plan + '\\'' +\n+                \", location=\" + location +\n+                \", customProperties=\" + customProperties +\n+                '}';\n+    }\n+\n+    public static final class Builder {\n+        private String name;\n+        private String email;\n+        private String plan;\n+        private Location location;\n+        private Properties customProperties;\n+\n+        @NonNull\n+        public Builder name(@NonNull final String name) {\n+            Objects.requireNonNull(name);\n+            this.name = name;\n+            return this;\n+        }\n+\n+        @NonNull\n+        public Builder email(@NonNull final String email) {\n+            Objects.requireNonNull(email);\n+            this.email = email;\n+            return this;\n+        }\n+\n+        @NonNull\n+        public Builder plan(@NonNull final String plan) {\n+            Objects.requireNonNull(plan);\n+            this.plan = plan;\n+            return this;\n+        }\n+\n+        @NonNull\n+        public Builder location(@NonNull final Location location) {\n+            Objects.requireNonNull(location);\n+            this.location = location;\n+            return this;\n+        }\n+\n+        @NonNull\n+        public Builder customProperties(@NonNull final Properties properties) {\n+            Objects.requireNonNull(properties);\n+            this.customProperties = properties;\n+            return this;\n+        }\n+\n+        @NonNull\n+        public UserProfile build() {\n+            return new UserProfile(this);\n+        }\n+    }\n+\n+    public static final class Location {\n+        private final Double latitude;\n+        private final Double longitude;\n+        private final String postalCode;\n+        private final String city;\n+        private final String region;\n+        private final String country;\n+\n+        public Location(@NonNull Builder builder) {", "originalCommit": "a62f3d7a7bc388e4f36c0e1203b6e126518c41ff", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "bd0a6fec6e3f901242da67681dd4812572798ca3", "url": "https://github.com/aws-amplify/amplify-android/commit/bd0a6fec6e3f901242da67681dd4812572798ca3", "message": "Clean-ups", "committedDate": "2020-03-21T18:19:59Z", "type": "commit"}, {"oid": "05d2181828597a4633e828c5b64e0f489d6281d9", "url": "https://github.com/aws-amplify/amplify-android/commit/05d2181828597a4633e828c5b64e0f489d6281d9", "message": "Minimize the accessibility modifiers", "committedDate": "2020-03-23T19:47:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjcxOTk4Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/312#discussion_r396719982", "bodyText": "The comments in this test aren't very useful. I would just remove them.\n// Create a location object, and // Test endpoint attributes and metrics.\nYou could say something like:\n// Expect the properties from Amplify's UserProfile to be populated into the Pinpoint data structures.\n\nOr, this is straight-forward enough, maybe it's clearest without any comment at all.", "author": "jamesonwilliams", "createdAt": "2020-03-23T19:56:34Z", "path": "aws-analytics-pinpoint/src/androidTest/java/com/amplifyframework/analytics/pinpoint/AnalyticsPinpointInstrumentedTest.java", "diffHunk": "@@ -191,6 +198,48 @@ public void testUnregisterGlobalProperties() throws AnalyticsException {\n         assertFalse(analyticsClient.getAllEvents().get(0).has(\"attributes\"));\n     }\n \n+    @SuppressWarnings(\"checkstyle:MagicNumber\")\n+    @Test\n+    public void testIdentifyUser() {\n+        // Create a location object", "originalCommit": "05d2181828597a4633e828c5b64e0f489d6281d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eabb741c0963f29563d73cb8bbc8140f8d937d5d", "url": "https://github.com/aws-amplify/amplify-android/commit/eabb741c0963f29563d73cb8bbc8140f8d937d5d", "message": "Remove comments from test", "committedDate": "2020-03-23T20:28:22Z", "type": "commit"}]}