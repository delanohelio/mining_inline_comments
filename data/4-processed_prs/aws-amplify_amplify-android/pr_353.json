{"pr_number": 353, "pr_title": "[aws-analytics-pinpoint] Introduce builder for AnalyticsEvent", "pr_createdAt": "2020-04-05T15:00:26Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/353", "timeline": [{"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjg2NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403716864", "bodyText": "Stronger assertion possible:\nassertEquals(\"PropertyValue\", event1Attributes.getString(\"Property\"));", "author": "jamesonwilliams", "createdAt": "2020-04-05T15:25:30Z", "path": "aws-analytics-pinpoint/src/androidTest/java/com/amplifyframework/analytics/pinpoint/AnalyticsPinpointInstrumentedTest.java", "diffHunk": "@@ -145,52 +166,66 @@ public void testAutoFlush() throws AnalyticsException {\n \n     /**\n      * Registers a global property and ensures that all recorded events have the global property.\n-     * @throws AnalyticsException Caused by incorrect usage of the Analytics API.\n+     *\n      * @throws JSONException Caused by unexpected event structure.\n      */\n     @Test\n-    public void testRegisterGlobalProperties() throws AnalyticsException, JSONException {\n-        // Register a global property\n-        registerGobalProperty();\n-\n-        BasicAnalyticsEvent event = new BasicAnalyticsEvent(\"Amplify-event\" + UUID.randomUUID().toString(),\n-                PinpointProperties.builder()\n-                        .add(\"Property\", \"PropertyValue\")\n-                        .build());\n+    public void testRegisterGlobalProperties() throws JSONException {\n+        // Arrange: Register global properties and create an event\n+        Amplify.Analytics.registerGlobalProperties(\n+                Properties.builder()\n+                        .add(\"GlobalProperty\", \"globalVal\")\n+                        .build()\n+        );\n+        BasicAnalyticsEvent event = BasicAnalyticsEvent.builder()\n+                .type(\"Amplify-event\" + UUID.randomUUID().toString())\n+                .addProperty(\"Property\", \"PropertyValue\")\n+                .build();\n+\n+        // Act: Record two events: the one created above and another just with a key\n         Amplify.Analytics.recordEvent(event);\n         Amplify.Analytics.recordEvent(\"amplify-test-event\");\n \n-        JSONObject eventAttributes =\n-                new JSONObject(analyticsClient.getAllEvents().get(0).get(\"attributes\").toString());\n-        JSONObject event2Attributes =\n-                new JSONObject(analyticsClient.getAllEvents().get(1).get(\"attributes\").toString());\n+        // Assert: Verify two event were recorded and global attributes are present on both\n+        List<JSONObject> events = analyticsClient.getAllEvents();\n+        assertEquals(2, events.size());\n+        JSONObject event1Attributes = (JSONObject) events.get(0).get(\"attributes\");\n+        JSONObject event2Attributes = (JSONObject) events.get(1).get(\"attributes\");\n \n-        assertEquals(2, analyticsClient.getAllEvents().size());\n-        assertTrue(eventAttributes.has(\"Property\"));\n-        assertTrue(eventAttributes.has(\"GlobalProperty\"));\n-        assertFalse(event2Attributes.has(\"Property\"));\n+        // Global properties are attached to all events\n+        assertTrue(event1Attributes.has(\"GlobalProperty\"));\n         assertTrue(event2Attributes.has(\"GlobalProperty\"));\n+\n+        // Local properties are only attached is passed explicitly as in event\n+        assertTrue(event1Attributes.has(\"Property\"));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4MjczMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403782730", "bodyText": "\ud83d\udc4d", "author": "jpignata", "createdAt": "2020-04-06T00:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NzcxOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403777718", "bodyText": "All of the methods in this builder can also be marked as @NonNull, I believe. (A human wouldn't benefit from the cue, on this file. But, a lint-ing program / Kotlin type interpreter, could.)\nFor the values that we pass into the builder - should we allow them to be null, or no? If no, we have a convention of using Objects.requireNonNull(...) to \"fail fast\" as soon as we see a bad user-provided value, at its first location of use.", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:10:05Z", "path": "core/src/main/java/com/amplifyframework/analytics/BasicAnalyticsEvent.java", "diffHunk": "@@ -15,31 +15,148 @@\n \n package com.amplifyframework.analytics;\n \n+import androidx.annotation.NonNull;\n+\n /**\n- * Represents event in its most general form and can have different properties.\n+ * BasicAnalyticsEvent is a custom analytics event that holds a type and a number of\n+ * {@link Properties}. This data object is used to indicate an event occurred such as a user taking\n+ * an action in your application.\n+ *\n+ * <pre>\n+ *     BasicAnalyticsEvent event = BasicAnalyticsEvent.builder()\n+ *          .type(\"LikedPost\")\n+ *          .addProperty(\"PostType\", \"UserImage\")\n+ *          .addProperty(\"LikedUserID\", 78219)\n+ *          .addProperty(\"FirstLike\", true)\n+ *          .build();\n+ * </pre>\n+ *\n+ * Once built, a BasicAnalyticsEvent can be submitted to an analytics plugin through\n+ * {@link AnalyticsCategory#recordEvent(AnalyticsEvent)}.\n  */\n public final class BasicAnalyticsEvent implements AnalyticsEvent {\n-    private final String name;\n+    private final String type;\n     private final Properties properties;\n \n-    /**\n-     * Construct a general analytics event.\n-     *\n-     * @param name name for the event.\n-     * @param properties event properties.\n-     */\n-    public BasicAnalyticsEvent(String name, Properties properties) {\n-        this.name = name;\n+    private BasicAnalyticsEvent(String type, Properties properties) {\n+        this.type = type;\n         this.properties = properties;\n     }\n \n+    /**\n+     * Returns the type of the event.\n+     *\n+     * @return The type of the event\n+     */\n     @Override\n-    public String getName() {\n-        return name;\n+    @NonNull\n+    public String getType() {\n+        return type;\n     }\n \n+    /**\n+     * Returns the {@link Properties} of the event.\n+     *\n+     * @return The {@link Properties} of the event\n+     */\n     @Override\n+    @NonNull\n     public Properties getProperties() {\n         return properties;\n     }\n+\n+    /**\n+     * Returns a new {@link Builder} to configure an instance of BasicAnalyticsEvent.\n+     *\n+     * @return a {@link Builder}\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Builder is used to create and configure an instance of {@link BasicAnalyticsEvent}. Its\n+     * methods return the Builder instance to allow for fluent method chaining. This Builder reuses\n+     * {@link Properties.Builder} to construct the properties to store in the event.\n+     *\n+     * @see Properties\n+     */\n+    public static final class Builder {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NDE0OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403784148", "bodyText": "Ahh, yes, you are correct. Thanks! I'll get the hang of this eventually. Adding the fail-fast incantation where appropriate.", "author": "jpignata", "createdAt": "2020-04-06T00:57:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3NzcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3ODAwMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403778000", "bodyText": "Potentially, BooleanProperty(Objects.requireNonNull(value))  (Same for all of the arguments to various FooProperty factories.)", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:12:22Z", "path": "core/src/main/java/com/amplifyframework/analytics/BooleanProperty.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+\n+/**\n+ * BooleanProperty wraps a Boolean value to store in {@link Properties}.\n+ */\n+public final class BooleanProperty implements Property<Boolean> {\n+    private final Boolean value;\n+\n+    private BooleanProperty(Boolean value) {\n+        this.value = value;\n+    }\n+\n+    /**\n+     * getValue returns the wrapped Boolean value stored in the property.\n+     *\n+     * @return The wrapped Boolean value\n+     */\n+    @Override\n+    public Boolean getValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Factory method to instantiate a {@link BooleanProperty} from a {@link Boolean} value.\n+     *\n+     * @param value a boolean value\n+     * @return an instance of {@link BooleanProperty}\n+     */\n+    public static BooleanProperty from(@NonNull Boolean value) {\n+        return new BooleanProperty(value);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3ODIyNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403778224", "bodyText": "The docs you've added in this PR are first-class, @jpignata!", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:13:53Z", "path": "core/src/main/java/com/amplifyframework/analytics/Properties.java", "diffHunk": "@@ -15,34 +15,152 @@\n \n package com.amplifyframework.analytics;\n \n-import com.amplifyframework.util.Immutable;\n+import androidx.annotation.NonNull;\n \n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n \n /**\n- * Wrapper for {@link Map} to restrict the types that may be passed in.\n+ * Properties provides key/value pairs to represent attributes of an {@link AnalyticsEvent}. While\n+ * different analytics services will have support for different datatypes, Properties provides a\n+ * baseline of support for String, Boolean, Double, and Integer. If one of these aren't available in\n+ * a given service, the plugin is expected to cast it to something supported. (e.g., convert Boolean", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3ODQwNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403778405", "bodyText": "Would return primitive int, which can't be null, anyway.", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:15:17Z", "path": "core/src/main/java/com/amplifyframework/analytics/Properties.java", "diffHunk": "@@ -15,34 +15,152 @@\n \n package com.amplifyframework.analytics;\n \n-import com.amplifyframework.util.Immutable;\n+import androidx.annotation.NonNull;\n \n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n \n /**\n- * Wrapper for {@link Map} to restrict the types that may be passed in.\n+ * Properties provides key/value pairs to represent attributes of an {@link AnalyticsEvent}. While\n+ * different analytics services will have support for different datatypes, Properties provides a\n+ * baseline of support for String, Boolean, Double, and Integer. If one of these aren't available in\n+ * a given service, the plugin is expected to cast it to something supported. (e.g., convert Boolean\n+ * true to the String \"true\")\n+ *\n+ * <pre>\n+ *     Properties properties = Properties.builder()\n+ *          .add(\"PostType\", \"UserImage\")\n+ *          .add(\"LikedUserID\", 78219)\n+ *          .add(\"FirstLike\", true)\n+ *          .build();\n+ * </pre>\n  */\n-public class Properties {\n+public final class Properties implements Iterable<Map.Entry<String, Property<?>>> {\n+    private final Map<String, Property<?>> properties;\n+\n+    private Properties(Map<String, Property<?>> properties) {\n+        this.properties = properties;\n+    }\n+\n+    /**\n+     * Iterator allows Properties to support foreach operations.\n+     *\n+     * <pre>\n+     *      for (Map.Entry&lt;String, Property&lt;?&gt;&gt; entry : properties) {\n+     *          String key = entry.getKey();\n+     *          Property&lt;?&gt; value = entry.getValue();\n+     *\n+     *          // Do something with key and value\n+     *      }\n+     * </pre>\n+     *\n+     * @return An {@link Iterator} of the underlying {@link Map#entrySet()} to enable foreach access\n+     */\n+    @Override\n+    @NonNull\n+    public Iterator<Map.Entry<String, Property<?>>> iterator() {\n+        return properties.entrySet().iterator();\n+    }\n+\n+    /**\n+     * size returns the number of properties.\n+     *\n+     * @return The number of properties\n+     */\n+    @NonNull\n+    public Integer size() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3ODU2Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403778562", "bodyText": "If I pass a non-existing property name, this would currently return null, but the flag says @NonNull. I think we need some logic like:\nProperty<?> property = properties.get(propertyName);\nif (property == null) {\n   // there was no match ... throw an exception?\n}\nreturn property;", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:16:32Z", "path": "core/src/main/java/com/amplifyframework/analytics/Properties.java", "diffHunk": "@@ -15,34 +15,152 @@\n \n package com.amplifyframework.analytics;\n \n-import com.amplifyframework.util.Immutable;\n+import androidx.annotation.NonNull;\n \n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n \n /**\n- * Wrapper for {@link Map} to restrict the types that may be passed in.\n+ * Properties provides key/value pairs to represent attributes of an {@link AnalyticsEvent}. While\n+ * different analytics services will have support for different datatypes, Properties provides a\n+ * baseline of support for String, Boolean, Double, and Integer. If one of these aren't available in\n+ * a given service, the plugin is expected to cast it to something supported. (e.g., convert Boolean\n+ * true to the String \"true\")\n+ *\n+ * <pre>\n+ *     Properties properties = Properties.builder()\n+ *          .add(\"PostType\", \"UserImage\")\n+ *          .add(\"LikedUserID\", 78219)\n+ *          .add(\"FirstLike\", true)\n+ *          .build();\n+ * </pre>\n  */\n-public class Properties {\n+public final class Properties implements Iterable<Map.Entry<String, Property<?>>> {\n+    private final Map<String, Property<?>> properties;\n+\n+    private Properties(Map<String, Property<?>> properties) {\n+        this.properties = properties;\n+    }\n+\n+    /**\n+     * Iterator allows Properties to support foreach operations.\n+     *\n+     * <pre>\n+     *      for (Map.Entry&lt;String, Property&lt;?&gt;&gt; entry : properties) {\n+     *          String key = entry.getKey();\n+     *          Property&lt;?&gt; value = entry.getValue();\n+     *\n+     *          // Do something with key and value\n+     *      }\n+     * </pre>\n+     *\n+     * @return An {@link Iterator} of the underlying {@link Map#entrySet()} to enable foreach access\n+     */\n+    @Override\n+    @NonNull\n+    public Iterator<Map.Entry<String, Property<?>>> iterator() {\n+        return properties.entrySet().iterator();\n+    }\n+\n+    /**\n+     * size returns the number of properties.\n+     *\n+     * @return The number of properties\n+     */\n+    @NonNull\n+    public Integer size() {\n+        return properties.size();\n+    }\n \n     /**\n-     * Map to hold analytics properties.\n+     * get returns a specific {@link Property} by its name.\n+     *\n+     * @param propertyName The name of the property to retrieve\n+     * @return The corresponding {@link Property}\n      */\n-    @SuppressWarnings(\"VisibilityModifier\")\n-    protected final Map<String, Property<?>> properties;\n+    @NonNull\n+    public Property<?> get(@NonNull String propertyName) {\n+        return properties.get(propertyName);", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4OTg3OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403789878", "bodyText": "I suppose we could also remove the @nonnull and embrace the null-ness as this method is mainly used for test purposes. I gave it a shot by raising NoSuchElementException.", "author": "jpignata", "createdAt": "2020-04-06T01:34:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3ODU2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3ODg5Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403778892", "bodyText": "Hm, I forget. Since this is part of the core spec: Do we need an <T, P extends Property<T>> Builder add(String, P property) method on this builder, as well? That way the user has an extension point, if they're using a property other than the ones our plugin does? (That is, another plugin might only work with GizmoProperty values.)", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:18:53Z", "path": "core/src/main/java/com/amplifyframework/analytics/Properties.java", "diffHunk": "@@ -15,34 +15,152 @@\n \n package com.amplifyframework.analytics;\n \n-import com.amplifyframework.util.Immutable;\n+import androidx.annotation.NonNull;\n \n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n \n /**\n- * Wrapper for {@link Map} to restrict the types that may be passed in.\n+ * Properties provides key/value pairs to represent attributes of an {@link AnalyticsEvent}. While\n+ * different analytics services will have support for different datatypes, Properties provides a\n+ * baseline of support for String, Boolean, Double, and Integer. If one of these aren't available in\n+ * a given service, the plugin is expected to cast it to something supported. (e.g., convert Boolean\n+ * true to the String \"true\")\n+ *\n+ * <pre>\n+ *     Properties properties = Properties.builder()\n+ *          .add(\"PostType\", \"UserImage\")\n+ *          .add(\"LikedUserID\", 78219)\n+ *          .add(\"FirstLike\", true)\n+ *          .build();\n+ * </pre>\n  */\n-public class Properties {\n+public final class Properties implements Iterable<Map.Entry<String, Property<?>>> {\n+    private final Map<String, Property<?>> properties;\n+\n+    private Properties(Map<String, Property<?>> properties) {\n+        this.properties = properties;\n+    }\n+\n+    /**\n+     * Iterator allows Properties to support foreach operations.\n+     *\n+     * <pre>\n+     *      for (Map.Entry&lt;String, Property&lt;?&gt;&gt; entry : properties) {\n+     *          String key = entry.getKey();\n+     *          Property&lt;?&gt; value = entry.getValue();\n+     *\n+     *          // Do something with key and value\n+     *      }\n+     * </pre>\n+     *\n+     * @return An {@link Iterator} of the underlying {@link Map#entrySet()} to enable foreach access\n+     */\n+    @Override\n+    @NonNull\n+    public Iterator<Map.Entry<String, Property<?>>> iterator() {\n+        return properties.entrySet().iterator();\n+    }\n+\n+    /**\n+     * size returns the number of properties.\n+     *\n+     * @return The number of properties\n+     */\n+    @NonNull\n+    public Integer size() {\n+        return properties.size();\n+    }\n \n     /**\n-     * Map to hold analytics properties.\n+     * get returns a specific {@link Property} by its name.\n+     *\n+     * @param propertyName The name of the property to retrieve\n+     * @return The corresponding {@link Property}\n      */\n-    @SuppressWarnings(\"VisibilityModifier\")\n-    protected final Map<String, Property<?>> properties;\n+    @NonNull\n+    public Property<?> get(@NonNull String propertyName) {\n+        return properties.get(propertyName);\n+    }\n \n     /**\n-     * Properties constructor that initializes the underlying map.\n+     * Returns a new {@link Builder} to configure an instance of Properties.\n+     *\n+     * @return a {@link Builder}\n      */\n-    public Properties() {\n-        properties = new HashMap<>();\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n     }\n \n     /**\n-     * Returns the underlying property map.\n-     * @return underlying properties map\n+     * Builder is used to create and configure an instance of {@link Properties}. Its\n+     * methods return the Builder instance to allow for fluent method chaining.\n      */\n-    public final Map<String, Property<?>> get() {\n-        return Immutable.of(properties);\n+    public static final class Builder {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4NjIxMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403786212", "bodyText": "Thank you for noting this. I thought about this this morning a while and wasn't sure of the best way to present an extension point. Will grab you tomorrow to chat about it.", "author": "jpignata", "createdAt": "2020-04-06T01:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3ODg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3OTMwMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403779302", "bodyText": "The convention in the rest of the project is to declare the field using its type of least specificity (Liskov Principle); here, this would be just Set<String>.", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:22:09Z", "path": "core/src/main/java/com/amplifyframework/analytics/PropertyNames.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+\n+/**\n+ * PropertyNames holds the names of {@link Property} objects used in configuration calls.\n+ *\n+ * <pre>\n+ *     PropertyNames propertyNames = PropertyNames.of(\"Height\", \"HairColor\", \"StarSign\");\n+ * </pre>\n+ */\n+public final class PropertyNames implements Iterable<String> {\n+    private final HashSet<String> propertyNames;", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3OTQwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403779401", "bodyText": "(Suggest to use primitive int for size methods.)", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:22:49Z", "path": "core/src/main/java/com/amplifyframework/analytics/PropertyNames.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+\n+/**\n+ * PropertyNames holds the names of {@link Property} objects used in configuration calls.\n+ *\n+ * <pre>\n+ *     PropertyNames propertyNames = PropertyNames.of(\"Height\", \"HairColor\", \"StarSign\");\n+ * </pre>\n+ */\n+public final class PropertyNames implements Iterable<String> {\n+    private final HashSet<String> propertyNames;\n+\n+    private PropertyNames() {\n+        propertyNames = new HashSet<>();\n+    }\n+\n+    /**\n+     * of is a static factory method that takes a variable number of String labels representing\n+     * property names and returns an instance of PropertyNames.\n+     *\n+     * @param names A variable number of String property names\n+     * @return An instance of PropertyNames\n+     */\n+    @NonNull\n+    public static PropertyNames of(@NonNull String... names) {\n+        PropertyNames propertyNames = new PropertyNames();\n+\n+        for (String name : names) {\n+            propertyNames.add(name);\n+        }\n+\n+        return propertyNames;\n+    }\n+\n+    /**\n+     * Iterator allows PropertyNames to support foreach operations.\n+     *\n+     * <pre>\n+     *      for (String propertyName : propertyNames) {\n+     *          // do something with PropertyName\n+     *      }\n+     * </pre>\n+     *\n+     * @return An {@link Iterator} to enable foreach access\n+     */\n+    @NonNull\n+    @Override\n+    public Iterator<String> iterator() {\n+        return propertyNames.iterator();\n+    }\n+\n+    /**\n+     * size returns the number of names contained in PropertyNames.\n+     *\n+     * @return The number of names contained\n+     */\n+    @NonNull\n+    public Integer size() {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3OTY3Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403779676", "bodyText": "Not part of this PR -- but just mentioning while I'm here --\nI've been meaning to do a PR that adds MagicNumber to the checkstyle-suppressions.xml when found under src/test or src/androidTest (these trees tend to have lots of abitrarily arranged data values.)", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:24:30Z", "path": "core/src/test/java/com/amplifyframework/analytics/BasicAnalyticsEventTest.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class BasicAnalyticsEventTest {\n+\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\")", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4ODc3OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403788779", "bodyText": "In the spirit of the annotations slightly irking me, I've tackled that in a commit in this pull. If you'd rather, I can split it out.", "author": "jpignata", "createdAt": "2020-04-06T01:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc3OTY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc4MDAzMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403780032", "bodyText": "(By the time you get this returning a primitive, I think the case will go away, and the assertEquals(int, int) would be automatically selected, instead of assertEquals(long, long), as it is now (or assertEquals(Object, Object), as it might have been without the primitive casting.)", "author": "jamesonwilliams", "createdAt": "2020-04-06T00:27:20Z", "path": "core/src/test/java/com/amplifyframework/analytics/PropertyNamesTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class PropertyNamesTest {\n+\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\")\n+    public void of() {\n+        // Arrange: Use the static factory method to create a PropertyNames instance\n+        Set<String> names = new HashSet<>(Arrays.asList(\"Height\", \"Weight\", \"StarSign\"));\n+\n+        PropertyNames propertyNames;\n+        propertyNames = PropertyNames.of(names.toArray(new String[names.size()]));\n+\n+        // Assert: Iterate through the items and remove each name from the set, then check all items\n+        // were removed after iteration\n+        assertEquals(3, (long) propertyNames.size());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MTA2NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403841064", "bodyText": "nit: the JavaDoc is floating above the class with an empty line in between, should be \"snug\"", "author": "jamesonwilliams", "createdAt": "2020-04-06T05:42:32Z", "path": "core/src/main/java/com/amplifyframework/analytics/StringProperty.java", "diffHunk": "@@ -13,31 +13,41 @@\n  * permissions and limitations under the License.\n  */\n \n-package com.amplifyframework.analytics.pinpoint;\n+package com.amplifyframework.analytics;\n \n-import com.amplifyframework.analytics.Property;\n+import androidx.annotation.NonNull;\n+\n+import java.util.Objects;\n \n /**\n- * Represent pinpoint attributes.\n+ * StringProperty wraps a String value to store in {@link Properties}.\n  */\n+", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0Mzg2MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403843861", "bodyText": "Skippiing boxing -\nassertEquals(Boolean.TRUE, trueProperty.getValue());\nassertEquals(Boolean.FALSE, falseProperty.getValue());", "author": "jamesonwilliams", "createdAt": "2020-04-06T05:52:41Z", "path": "core/src/test/java/com/amplifyframework/analytics/BooleanPropertyTest.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class BooleanPropertyTest {\n+\n+    @Test\n+    public void fromReturnsBooleanPropertyWithPassedValue() {\n+        // Arrange: Create the properties\n+        BooleanProperty trueProperty = BooleanProperty.from(true);\n+        BooleanProperty falseProperty = BooleanProperty.from(false);\n+\n+        // Assert: Check that the wrapped values are what was passed in the static factory methods\n+        assertEquals(true, trueProperty.getValue());\n+        assertEquals(false, falseProperty.getValue());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0NDM2OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403844368", "bodyText": "Same nit-picking, being more careful about the boxing on the return types --\nassertEquals(4, properties.size());\nassertEquals(\"EDT\", timeZone);\nassertEquals(Boolean.FALSE, inGeoFence);\nassertEquals(Double.valueOf(98.36), loginDuration);\nassertEquals(Long.valueOf(2), profileCount);", "author": "jamesonwilliams", "createdAt": "2020-04-06T05:54:30Z", "path": "core/src/test/java/com/amplifyframework/analytics/BasicAnalyticsEventTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class BasicAnalyticsEventTest {\n+\n+    @Test\n+    public void builderConfiguresCompleteBasicAnalyticsEvent() {\n+        // Arrange: Build a new BasicAnalyticsEvent\n+        BasicAnalyticsEvent analyticsEvent = BasicAnalyticsEvent.builder()\n+                .type(\"user.login\")\n+                .addProperty(\"TimeZone\", \"EDT\")\n+                .addProperty(\"inGeoFence\", false)\n+                .addProperty(\"LoginDuration\", 98.36)\n+                .addProperty(\"ProfileCount\", 2)\n+                .build();\n+\n+        // Assert: Verify the builder correctly constructed the BasicAnalyticsEvent\n+        assertEquals(\"user.login\", analyticsEvent.getType());\n+\n+        final Properties properties = analyticsEvent.getProperties();\n+        final String timeZone = ((StringProperty) properties.get(\"TimeZone\")).getValue();\n+        final Boolean inGeoFence = ((BooleanProperty) properties.get(\"inGeoFence\")).getValue();\n+        final Double loginDuration = ((DoubleProperty) properties.get(\"LoginDuration\")).getValue();\n+        final Integer profileCount = ((IntegerProperty) properties.get(\"ProfileCount\")).getValue();\n+\n+        assertEquals(4, (long) properties.size());\n+        assertEquals(\"EDT\", timeZone);\n+        assertEquals(false, inGeoFence);\n+        assertEquals(new Double(98.36), loginDuration);\n+        assertEquals(2, (long) profileCount);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0NTYyMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403845620", "bodyText": "assertEquals(Integer.valueOf(5040), property.getValue());\n\n^ A subtly different test, more direct against your return value, this will be equivalent to assertTrue(Integer.valueOf(5040).equals(property.getValue())", "author": "jamesonwilliams", "createdAt": "2020-04-06T05:58:51Z", "path": "core/src/test/java/com/amplifyframework/analytics/IntegerPropertyTest.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class IntegerPropertyTest {\n+\n+    @Test\n+    public void fromReturnsIntegerPropertyWithPassedValue() {\n+        // Arrange: Create the property\n+        IntegerProperty property = IntegerProperty.from(5040);\n+\n+        // Assert: Check that the wrapped value is what was passed in the static factory method\n+        assertEquals(5040, (long) property.getValue());", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0NTk1Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r403845956", "bodyText": "assertEquals(4, properties.size());\nassertEquals(\"EDT\", timeZone);\nassertEquals(Boolean.FALSE, inGeoFence);\nassertEquals(Double.valueOf(98.36), loginDuration);\nassertEquals(Integer.valueOf(2), profileCount);", "author": "jamesonwilliams", "createdAt": "2020-04-06T06:00:10Z", "path": "core/src/test/java/com/amplifyframework/analytics/PropertiesTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import org.junit.Test;\n+\n+import java.util.NoSuchElementException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class PropertiesTest {\n+\n+    @Test\n+    public void builderConfiguresCompleteProperties() {\n+        // Arrange: Build a new Properties object\n+        Properties properties = Properties.builder()\n+                .add(\"TimeZone\", \"EDT\")\n+                .add(\"inGeoFence\", false)\n+                .add(\"LoginDuration\", 98.36)\n+                .add(\"ProfileCount\", 2)\n+                .build();\n+\n+        // Assert: Verify the builder correctly constructed the Properties\n+        assertEquals(4, (long) properties.size());\n+\n+        final String timeZone = ((StringProperty) properties.get(\"TimeZone\")).getValue();\n+        final Boolean inGeoFence = ((BooleanProperty) properties.get(\"inGeoFence\")).getValue();\n+        final Double loginDuration = ((DoubleProperty) properties.get(\"LoginDuration\")).getValue();\n+        final Integer profileCount = ((IntegerProperty) properties.get(\"ProfileCount\")).getValue();\n+\n+        assertEquals(4, properties.size());\n+        assertEquals(\"EDT\", timeZone);\n+        assertEquals(false, inGeoFence);\n+        assertEquals(new Double(98.36), loginDuration);\n+        assertEquals(2, (long) profileCount);", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMzYxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r405123617", "bodyText": "AnalyticsProperties? and each Property -> AnalyticsProperty?\n\nwould we benefit having a less genericly named \"Property\" class and builder, in case \"Property\" is used else where in the future?\nby having this, developer experience would be:\n\nAmplify.Analytics.registerGlobalProperties(\n    AnalyticsProperties.builder()\n        .add(\"Key1\", \"Value1\")\n        .add(\"Key2\", \"Value2\")\n        .build()\n);", "author": "lawmicha", "createdAt": "2020-04-07T21:27:14Z", "path": "core/src/main/java/com/amplifyframework/analytics/Properties.java", "diffHunk": "@@ -15,34 +15,181 @@\n \n package com.amplifyframework.analytics;\n \n-import com.amplifyframework.util.Immutable;\n+import androidx.annotation.NonNull;\n \n import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Objects;\n \n /**\n- * Wrapper for {@link Map} to restrict the types that may be passed in.\n+ * Properties provides key/value pairs to represent attributes of an {@link AnalyticsEvent}. While\n+ * different analytics services will have support for different datatypes, Properties provides a\n+ * baseline of support for String, Boolean, Double, and Integer. If one of these aren't available in\n+ * a given service, the plugin is expected to cast it to something supported. (e.g., convert Boolean\n+ * true to the String \"true\")\n+ *\n+ * <pre>\n+ *     Properties properties = Properties.builder()\n+ *          .add(\"PostType\", \"UserImage\")\n+ *          .add(\"LikedUserID\", 78219)\n+ *          .add(\"FirstLike\", true)\n+ *          .build();\n+ * </pre>\n  */\n-public class Properties {\n+public final class Properties implements Iterable<Map.Entry<String, Property<?>>> {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"oid": "5063d189556d7aa18901702349f6fe3a30c16796", "url": "https://github.com/aws-amplify/amplify-android/commit/5063d189556d7aa18901702349f6fe3a30c16796", "message": "[aws-analytics-pinpoint] Introduce Builder for AnalyticsEvent\n\nPreviously, to send an event using the Amazon Pinpoint plugin, a\ndeveloper had to build a PinpointProperties object and pass it to the\nconstructor of AnalyticsEvent. This change exposes a fluent builder that\nconfigures and returns a complete AnalyticsEvent. This moves Analytics\ncloser to the design document and the iOS implementation.\n\nThe new syntax for creating an AnalyticsEvent is:\n\n```java\nAnalyticsEvent event = AnalyticsEvent.builder()\n     .name(\"EventName\")\n     .addProperty(\"StringProperty\", \"Pancakes\")\n     .addProperty(\"BooleanProperty\", true)\n     .addProperty(\"DoubleProperty\", 3.14)\n     .addProperty(\"IntegerProperty\", 42)\n     .build();\n```\n\nThis change also cleans up some of the related interfaces and behavior:\n\n- Rename AnalyticsEvent (the interface) to AnalyticsEventBehavior and\n  BasicAnalyticsEvent (the implementation) to AnalyticsEvent\n- Remove the concept of PinpointProperties and instead hoist\n  Property-related classes into the Category itself; prefix all\n  of these classes with \"Analytics\"\n- Expand Properties to support Boolean and Integer as well as String and\n  Double by adding AnalyticsBooleanProperty and AnalyticsIntegerProperty\n  and handling their conversion in the Pinpoint plugin\n- Add a generic add method to allow AnalyticsProperties.Builder to\n  handle any type that implements AnalyticsPropertyBehavior<T>\n- Change the signature of\n  AnalyticsCategoryBehavior#unregisterGlobalProperties to accept a\n  variable number of Strings instead of a Set\n- Stop guarding configuration methods like registering and unregistering\n  properties with an enabled check\n- Add iterator, size, and get methods to AnalyticsProperties to\n  encapsulate the underlying Map", "committedDate": "2020-04-09T02:02:19Z", "type": "commit"}, {"oid": "23b6445b85b079c8517a5bd36eef900713a96fa0", "url": "https://github.com/aws-amplify/amplify-android/commit/23b6445b85b079c8517a5bd36eef900713a96fa0", "message": "Suppress MagicNumber rule in test files\n\nIt's common to use MagicNumbers in the arrange and assert activities of\na test, and we were often using a SuppressWarnings annotation for this\npurpose. This change suppresses this rule for any file in test or\nandroidTest directories to allow us to use static numbers for test\npurposes.", "committedDate": "2020-04-09T02:02:19Z", "type": "commit"}, {"oid": "23b6445b85b079c8517a5bd36eef900713a96fa0", "url": "https://github.com/aws-amplify/amplify-android/commit/23b6445b85b079c8517a5bd36eef900713a96fa0", "message": "Suppress MagicNumber rule in test files\n\nIt's common to use MagicNumbers in the arrange and assert activities of\na test, and we were often using a SuppressWarnings annotation for this\npurpose. This change suppresses this rule for any file in test or\nandroidTest directories to allow us to use static numbers for test\npurposes.", "committedDate": "2020-04-09T02:02:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjA4OTQxNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/353#discussion_r406089415", "bodyText": "nit: could be marked as a static final class", "author": "jamesonwilliams", "createdAt": "2020-04-09T09:51:59Z", "path": "core/src/test/java/com/amplifyframework/analytics/AnalyticsPropertiesTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics;\n+\n+import org.junit.Test;\n+\n+import java.util.Date;\n+import java.util.NoSuchElementException;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class AnalyticsPropertiesTest {\n+    @Test\n+    public void builderConfiguresCompleteProperties() {\n+        // Arrange: Build a new AnalyticsProperties object\n+        AnalyticsProperties properties = AnalyticsProperties.builder()\n+                .add(\"TimeZone\", \"EDT\")\n+                .add(\"inGeoFence\", false)\n+                .add(\"LoginDuration\", 98.36)\n+                .add(\"ProfileCount\", 2)\n+                .build();\n+\n+        // Assert: Verify the builder correctly constructed the AnalyticsProperties\n+        assertEquals(4, properties.size());\n+\n+        final String timeZone = ((AnalyticsStringProperty) properties.get(\"TimeZone\")).getValue();\n+        final Boolean inGeoFence = ((AnalyticsBooleanProperty) properties.get(\"inGeoFence\")).getValue();\n+        final Double loginDuration = ((AnalyticsDoubleProperty) properties.get(\"LoginDuration\")).getValue();\n+        final Integer profileCount = ((AnalyticsIntegerProperty) properties.get(\"ProfileCount\")).getValue();\n+\n+        assertEquals(4, properties.size());\n+        assertEquals(\"EDT\", timeZone);\n+        assertEquals(Boolean.FALSE, inGeoFence);\n+        assertEquals(Double.valueOf(98.36), loginDuration);\n+        assertEquals(Integer.valueOf(2), profileCount);\n+    }\n+\n+    @Test\n+    public void builderCanAcceptTypesThatImplementAnalyticsPropertiesBehavior() {\n+        // Arrange: Build a FooProperty and pass it to an AnalyticsProperties Builder\n+        Date date = new Date();\n+        FooProperty property = new FooProperty(date);\n+        AnalyticsProperties properties = AnalyticsProperties.builder()\n+                .add(\"SignUpDate\", property)\n+                .build();\n+\n+        // Assert: Ensure we can retrieve the FooProperty value\n+        assertEquals(date, properties.get(\"SignUpDate\").getValue());\n+    }\n+\n+    @Test\n+    public void getRaisesNoSuchElementExceptionWhenPropertyNotFound() {\n+        AnalyticsProperties properties = AnalyticsProperties.builder().build();\n+\n+        assertThrows(NoSuchElementException.class, () -> {\n+            properties.get(\"key-that-doesnt-exist\");\n+        });\n+    }\n+\n+    class FooProperty implements AnalyticsPropertyBehavior<Date> {", "originalCommit": "23b6445b85b079c8517a5bd36eef900713a96fa0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}