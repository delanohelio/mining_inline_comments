{"pr_number": 1057, "pr_title": "A Kotlin-centric Facade for Amplify Android", "pr_createdAt": "2020-12-16T10:34:23Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/1057", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwOTgyOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r544409829", "bodyText": "We're going to have to start generating Kotlin models, too. We'll need to add a \"which language?\" prompt to the CLI.", "author": "jamesonwilliams", "createdAt": "2020-12-16T15:50:51Z", "path": "kotlin-extensions/src/test/java/com/amplifyframework/ktx/DataStoreCategoryExtTest.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.ktx\n+\n+import androidx.test.core.app.ApplicationProvider.getApplicationContext\n+\n+import com.amplifyframework.core.Amplify\n+import com.amplifyframework.core.AmplifyConfiguration\n+import com.amplifyframework.core.Consumer\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import com.amplifyframework.datastore.DataStoreItemChange.Initiator.LOCAL\n+import com.amplifyframework.datastore.DataStoreItemChange.Type.CREATE\n+import com.amplifyframework.datastore.DataStorePlugin\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner\n+\n+import kotlinx.coroutines.runBlocking\n+import org.json.JSONObject\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.mockito.Mockito.`when`\n+import org.mockito.Mockito.any\n+import org.mockito.Mockito.eq\n+import org.mockito.Mockito.mock\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class DataStoreCategoryExtTest {\n+    private lateinit var mockPlugin: DataStorePlugin<*>\n+    private lateinit var blogOwner: BlogOwner\n+    private lateinit var values: MutableList<BlogOwner>\n+\n+    @Before\n+    fun setupMockDataStorePlugin() {\n+        // When items are saved, store them in a local buffer.\n+        values = mutableListOf()\n+\n+        // We'll mock away the plugin.\n+        mockPlugin = mock(DataStorePlugin::class.java)\n+\n+        // Prepare an item to save.\n+        blogOwner = BlogOwner.builder()\n+            .name(\"Tony Danielsen, J.D.\")\n+            .build()\n+\n+        `when`(mockPlugin.pluginKey).thenReturn(\"fakeDataStorePlugin\")\n+\n+        // When its saved, fire success on the plugin with a DataStoreItemChange.\n+        // Also save the the item to the buffer.\n+        `when`(mockPlugin.save(eq(blogOwner), any(), any())).thenAnswer {\n+            val onResult = it.getArgument<Consumer<DataStoreItemChange<BlogOwner>>>(1)\n+            val value = it.getArgument<BlogOwner>(0)\n+            values.add(value)\n+            val change = DataStoreItemChange.builder<BlogOwner>()\n+                .initiator(LOCAL)\n+                .item(value)\n+                .itemClass(BlogOwner::class.java)\n+                .type(CREATE)\n+                .build()\n+            onResult.accept(change)\n+        }\n+\n+        // When the plugin is queried, fake a response by just returning\n+        // the saved list.\n+        `when`(mockPlugin.query(eq(BlogOwner::class.java), any(), any())).thenAnswer {\n+            val onResult = it.getArgument<Consumer<Iterator<BlogOwner>>>(1)\n+            onResult.accept(values.iterator())\n+        }\n+\n+        // Okay, now add the plugin.\n+        Amplify.addPlugin(mockPlugin)\n+        val config = AmplifyConfiguration.fromJson(JSONObject())\n+        Amplify.configure(config, getApplicationContext())\n+    }\n+\n+    @Test\n+    fun highlightDeveloperExperience() {\n+        runBlocking {\n+            Amplify.DataStore.save(blogOwner)\n+            val results = Amplify.DataStore.query(BlogOwner::class.java)", "originalCommit": "768420d71538c206b63e9d331a22c5c1fd78714a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA5OTEyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545099122", "bodyText": "What makes you say we will \"have\" to? Not that I necessarily disagree, just curious", "author": "aajtodd", "createdAt": "2020-12-17T13:43:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwOTgyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyNjA1OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545126059", "bodyText": "\"Have\" was the wrong word. \"Should,\" I mean. I think they'd make more sense as data classes.", "author": "jamesonwilliams", "createdAt": "2020-12-17T14:21:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwOTgyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMTc0MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545101741", "bodyText": "Yeah I don't love ktx for some reason.\nYou could just use the original package name since these are extensions to those models or perhaps coroutines.\nAll just bike shedding though.", "author": "aajtodd", "createdAt": "2020-12-17T13:47:07Z", "path": "kotlin-extensions/src/main/java/com/amplifyframework/ktx/DataStoreCategoryExt.kt", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+@file:Suppress(\"unused\")\n+\n+package com.amplifyframework.ktx // TODO: or .datastore?", "originalCommit": "768420d71538c206b63e9d331a22c5c1fd78714a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIzOTk1MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r550239950", "bodyText": "^ As I've thought about this more, I don't think it makes sense to make a separate library for this work. I can add these extensions directly to our core Java library. Our existing APIs will continue to work, but people who are using Kotlin will automatically get the goodness.", "author": "jamesonwilliams", "createdAt": "2020-12-30T15:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMTc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI0MTI3MA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r550241270", "bodyText": "The only downside to that is the additional dependency/dependencies introduced (I'm guessing that's coroutines and kotlin-stdlib?).", "author": "aajtodd", "createdAt": "2020-12-30T15:55:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMTc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY4NDMxMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r556684312", "bodyText": "^ I keep going back and forth on this. The current version of the PR keeps the extensions as a separate module, mostly because of the new dependencies. The Android platform also tends to segregate out its Kotlin extension libraries. So, that's probably a good way to go for cultural consistency.", "author": "jamesonwilliams", "createdAt": "2021-01-13T17:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMTc0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NTU3Mzg4MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r575573881", "bodyText": "I ended up changing this to .kotlin.", "author": "jamesonwilliams", "createdAt": "2021-02-12T23:32:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMTc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNTAyNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545105027", "bodyText": "You can also do something like:\nsuspend inline fun <reified T: Model> DataStoreCategory.query(): Iterator<T> {\n    return suspendCoroutine { continuation ->\n        query(\n            T::class.java,\n            { continuation.resume(it) },\n            { continuation.resumeWithException(it) }\n        )\n    }\n}\nWhich allows callers to do:\nval results: Iterator<MyItem> = store.query()\n// OR\nval results = store.query<MyItem>()\n\nSee: https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters", "author": "aajtodd", "createdAt": "2020-12-17T13:51:54Z", "path": "kotlin-extensions/src/main/java/com/amplifyframework/ktx/DataStoreCategoryExt.kt", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+@file:Suppress(\"unused\")\n+\n+package com.amplifyframework.ktx // TODO: or .datastore?\n+\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.datastore.DataStoreCategory\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.channels.sendBlocking\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.save(item: T) {\n+    return suspendCoroutine { continuation ->\n+        save(item,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.save(item: T, predicate: QueryPredicate) {\n+    return suspendCoroutine { continuation ->\n+        save(item, predicate,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.delete(item: T) {\n+    return suspendCoroutine { continuation ->\n+        delete(item,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.delete(item: T, predicate: QueryPredicate) {\n+    return suspendCoroutine { continuation ->\n+        delete(item, predicate,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.query(clazz: Class<T>): Iterator<T> {", "originalCommit": "768420d71538c206b63e9d331a22c5c1fd78714a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjY4NTYxOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r556685618", "bodyText": "In the current version of the PR, I have updated query() to return a Flow<T>.\nI do still have the Class<T> as an argument. My concern is that storage.query() isn't explicit enough about the user's intention, since the behavior can change depending on the implicit type.\nThis would be a good topic to discuss in design review.", "author": "jamesonwilliams", "createdAt": "2021-01-13T17:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNTAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNzAyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545107022", "bodyText": "This is fine. If you're using coroutines you're already depending on the kotlinx-coroutines-core", "author": "aajtodd", "createdAt": "2020-12-17T13:54:39Z", "path": "kotlin-extensions/src/main/java/com/amplifyframework/ktx/DataStoreCategoryExt.kt", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+@file:Suppress(\"unused\")\n+\n+package com.amplifyframework.ktx // TODO: or .datastore?\n+\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.datastore.DataStoreCategory\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.channels.sendBlocking\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.save(item: T) {\n+    return suspendCoroutine { continuation ->\n+        save(item,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.save(item: T, predicate: QueryPredicate) {\n+    return suspendCoroutine { continuation ->\n+        save(item, predicate,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.delete(item: T) {\n+    return suspendCoroutine { continuation ->\n+        delete(item,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.delete(item: T, predicate: QueryPredicate) {\n+    return suspendCoroutine { continuation ->\n+        delete(item, predicate,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.query(clazz: Class<T>): Iterator<T> {\n+    return suspendCoroutine { continuation ->\n+        query(\n+            clazz,\n+            { continuation.resume(it) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.query(clazz: Class<T>, predicate: QueryPredicate): Iterator<T> {\n+    return suspendCoroutine { continuation ->\n+        query(\n+            clazz,\n+            predicate,\n+            { continuation.resume(it) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.query(clazz: Class<T>, options: QueryOptions): Iterator<T> {\n+    return suspendCoroutine { continuation ->\n+        query(\n+            clazz,\n+            options,\n+            { continuation.resume(it) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+// TOOD: Flow is from kotlinx, which requires another dependency,", "originalCommit": "768420d71538c206b63e9d331a22c5c1fd78714a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e8196e99439d4795016c31f36700e86055940418", "url": "https://github.com/aws-amplify/amplify-android/commit/e8196e99439d4795016c31f36700e86055940418", "message": "feature(core-ktx): A Kotlin-first API for Amplify\n\nThis commit introduces a new, optional core-ktx module. The module\nincludes improved support for using Amplify from Kotlin.\n\n```gradle\ndependencies {\n    implementation \"com.amplifyframework:core-ktx:$version\"\n}\n```\n\ncore-ktx is largely comprised of extension functions, which provide new\nmeans of interacting with the various Amplify categories (API, Auth,\nDataStore, Predictions, Storage.) These functions include several\nimprovements to the Kotlin developer experience, mainly by adding\nsupport for Coroutines.\n\nAmplify has several types of APIs. Some are synchronous calls, which\nimmediately return a value. However, most Amplify behaviors are\nasynchronous calls. Among the async calls, there are a few broad\ncategories:\n\n 1. Functions that return a single value, and cannot be canceled;\n 2. Functions that return a single value, and can be canceled;\n 3. Functions that emit a stream of values\n 4. Functions that emit multiple types of values\n\nMost Amplify behaviors are of type (1). Auth and Predictions are\nentirely comprised of type (1). The Kotlin flavors of these behaviors\nare expressed as suspending functions, e.g.:\n\n```kotlin\nsuspend fun AuthCategory.signOut() {\n   ...\n}\n```\n\nThe simplest developer experience to invoke this method will be:\n```kotlin\nrunBlocking {\n    Amplify.Auth.signOut()\n}\n```\n\nSome single-valued functions, such as the `mutate(...)` behavior in the\nAPI category, may be canceled before rendering a result. The Kotlin\nversion of `mutate(...)` is expressed this way:\n\n```kotlin\nsuspend fun <R> ApiCategory.mutate(\n        graphQlRequest: GraphQLRequest<R>): GraphQLResponse<R> {\n    ...\n}\n```\n\nThe user may cancel the behavior via Kotlin's `Job` construct:\n```kotlin\nval job = launch(Dispatchers.IO) {\n    Amplify.API.mutate(request)\n}\n...\njob.cancel()\n```\n\nThere are also some Amplify beahviors which a stream of values.\nDataStore's `observe()` is a canonical example. It's extension function\nis expressed as:\n\n```kotlin\nfun DataStoreCategory.observe(): Flow<DataStoreItemChange<out Model>> {\n    ...\n}\n```\n\nA developer may interact with the flow in this way:\n```kotlin\nAmplify.DataStore.observe()\n    .collect { print(it) }\n```\n\nAPI's `subscribe()` also emits a stream of values. However, it is also\nimportant to know about the _lifecycle_ of a GraphQL subscription. So,\nthis method returns an operation structure, which envelopes two flows:\n```kotlin\nfun <T> ApiCategory.subscribe(\n        graphQlRequest: GraphQLRequest<T>): GraphQLSubscriptionOperation<T> {\n    ...\n}\n```\n\nA developer can inspect the connection state, as well as the stream of\nsubscription data:\n```kotlin\nval subscription = Amplify.API.subscribe(request)\nsubscription.events.collect {\n    print(\"Got a subscription event: $it\")\n}\nsubscription.connectionState.collect {\n    print(\"Connection state changed: $it\")\n}\n```\n\nThe Storage category's various upload and download functions also\nexhibit a similar pattern. We want obtain the result, but we may also\nlike to observe a stream of progress updates. The signature looks like:\n```kotlin\nfun StorageCategory.downloadFile(\n        key: String,\n        local: File,\n): InProgressStorageOperation<StorageDownloadFileResult> {\n```\n\nA developer can observe the download progress via a Flow:\n```kotlin\nval download = Amplify.Storage.downloadFile(\"s3Key\", local)\ndownload.progress.collect { print(\"Progress: $it\") }\n```\nOr, the developer can access the result of the download via a suspend\nfunction exposed on the download operation:\n```kotlin\nval result = runBlocking { download.result }\n```\n\nRefer: https://github.com/aws-amplify/amplify-android/issues/605", "committedDate": "2021-01-13T16:55:43Z", "type": "forcePushed"}, {"oid": "7356734439514c303ee43e9d09673c2de598b984", "url": "https://github.com/aws-amplify/amplify-android/commit/7356734439514c303ee43e9d09673c2de598b984", "message": "feature(core-ktx): A Kotlin-first API for Amplify\n\nThis commit introduces a new, optional core-ktx module. The module\nincludes improved support for using Amplify from Kotlin.\n\nTo use the Kotlin facade, include this dependency:\n```gradle\ndependencies {\n    implementation \"com.amplifyframework:core-ktx:$version\"\n}\n```\nAnd import the Kotlin facade instead of the one in `core`:\n```kotlin\nimport com.amplifyframework.kotlin.Amplify\n```\n\ncore-ktx introduces an alternate `Amplify` facade, which provides new\nmeans of interacting with the various Amplify categories (API, Auth,\nDataStore, Predictions, Storage.) The new facade include several\nimprovements to the Kotlin developer experience, mainly by adding\nsupport for Coroutines.\n\nAmplify has several types of APIs. Some are synchronous calls, which\nimmediately return a value. However, most Amplify behaviors are\nasynchronous calls. Among the async calls, there are a few broad\ncategories:\n\n 1. Functions that return a single value, and cannot be canceled;\n 2. Functions that return a single value, and can be canceled;\n 3. Functions that emit a stream of values\n 4. Functions that emit multiple types of values\n\nMost Amplify behaviors are of type (1). Auth and Predictions are\nentirely comprised of type (1). The Kotlin flavors of these behaviors\nare expressed as suspending functions, e.g.:\n\n```kotlin\nsuspend fun signOut() {\n   ...\n}\n```\n\nThe simplest developer experience to invoke this method will be:\n```kotlin\nrunBlocking {\n    Amplify.Auth.signOut()\n}\n```\n\nSome single-valued functions, such as the `mutate(...)` behavior in the\nAPI category, may be canceled before rendering a result. The Kotlin\nversion of `mutate(...)` is expressed this way:\n\n```kotlin\nsuspend fun <R> ApiCategory.mutate(\n        request: GraphQLRequest<R>, apiName: String? = null)\n        : GraphQLResponse<R> {\n    ...\n}\n```\n\nThe user may cancel the behavior via Kotlin's `Job` construct:\n```kotlin\nval job = launch(Dispatchers.IO) {\n    Amplify.API.mutate(request)\n}\n...\njob.cancel()\n```\n\nThere are also some Amplify behaviors which emit a stream of values.\nDataStore's `observe()` is a canonical example. It's extension function\nis expressed as:\n\n```kotlin\nfun observe(): Flow<DataStoreItemChange<out Model>> {\n    ...\n}\n```\n\nA developer may interact with the flow in this way:\n```kotlin\nAmplify.DataStore.observe()\n    .collect { print(it) }\n```\n\nAPI's `subscribe()` also emits a stream of values. However, it is also\nimportant to know about the _lifecycle_ of a GraphQL subscription. So,\nthis method returns an operation structure, which envelopes two flows:\n```kotlin\nfun <T> ApiCategory.subscribe(\n        request: GraphQLRequest<T>, apiName: String? = null)\n        : GraphQLSubscriptionOperation<T> {\n    ...\n}\n```\n\nA developer can inspect the connection state, as well as the stream of\nsubscription data:\n```kotlin\nval subscription = Amplify.API.subscribe(request)\nsubscription.subscriptionData.collect {\n    print(\"Got a subscription data: $it\")\n}\nsubscription.connectionState.collect {\n    print(\"Connection state changed: $it\")\n}\n```\n\nThe Storage category's various upload and download functions also\nexhibit a similar pattern. We want obtain the result, but we may also\nlike to observe a stream of progress updates. The signature looks like:\n```kotlin\nfun StorageCategory.downloadFile(\n        key: String,\n        local: File,\n): InProgressStorageOperation<StorageDownloadFileResult> {\n```\n\nA developer can access the result of the download via a suspend\nfunction exposed on the download operation:\n```kotlin\nval result = runBlocking { download.result() }\n```\n\nRefer: https://github.com/aws-amplify/amplify-android/issues/605", "committedDate": "2021-02-12T23:28:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MjUwMw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576342503", "bodyText": "Perhaps this should be com.amplifyframework.core.kotlin instead?  Without the core, it sort of limits us to only being able to have a Kotlin facade for core.  Perhaps we may want to add Kotlin facades for other modules in the future, which, following my suggested pattern, could be com.amplifyframework.api.kotlin.", "author": "richardmcclellan", "createdAt": "2021-02-15T17:31:29Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Amplify.kt", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIyMzUyMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577223522", "bodyText": "To be sure we're on the same page -- .api, .datastore, etc. are in the core module, in the existing codebase.\nIn this current PR, I've suggested to introduce Kotlin interfaces in a single JVM package (com.amplifyframework.kotlin), and in a single library module (core-ktx.)\nHere's how the package names for existing interfaces map to new Kotlin-centric ones:\n\n\n\ncore interface\ncore-ktx interface\n\n\n\n\ncom.amplifyframework.core.Amplify\ncom.amplifyframework.kotlin.Amplify\n\n\ncom.amplifyframework.auth.AuthCategoryBehavior\ncom.amplifyframework.kotlin.Auth\n\n\ncom.amplifyframework.datastore.DataStoreCategoryBehavior\ncom.amplifyframework.kotlin.DataStore\n\n\netc...\netc...\n\n\n\nIf I understand your suggestion correctly, we could use more fine-grained JVM packages for each category, that more closely resembled the structuring inside of core. Perhaps like:\n\n\n\ncore interface\ncore-ktx interface\n\n\n\n\ncom.amplifyframework.core.Amplify\ncom.amplifyframework.core.kotlin.Amplify\n\n\ncom.amplifyframework.auth.AuthCategoryBehavior\ncom.amplifyframework.auth.kotlin.Auth\n\n\ncom.amplifyframework.datastore.DataStoreCategoryBehavior\ncom.amplifyframework.datastore.kotlin.DataStore\n\n\netc...\netc...\n\n\n\nI don't prefer this, but I also don't feel strongly about it. I doubt we'll see a ton of new category growth in core, and we have fewer components for each category.\nIf a future all-Kotlin plugin is created, I doubt it would use kotlin in its namespace, either. It'd probably just be like org.nosemaj.auxilary.auth.plugin, or something.", "author": "jamesonwilliams", "createdAt": "2021-02-17T00:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MjUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc4Nzc4Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577787786", "bodyText": "Thanks for your detailed explanation!\nThis PR adds a core-ktx module, which provides Kotlin extensions for the core module.  In the future, we might want to add a aws-datastore-ktx module, which provides Kotlin extensions for the aws-datastore module.  For example, we might want let customers provide a coroutine that returns a QueryPredicate, when configuring sync expressions for selective sync in their DataStoreConfiguration.  Basically I just want to make sure we have a logical path to support more Kotlin extensions in the future.\nPutting all Kotlin extension interfaces in the same package (com.amplifyframework.kotlin) seems like an anti-pattern though, for all the same reasons that putting your entire project in a single package would be a bad idea (name collisions, limiting scope, etc).\nAfter you laid it out above though, I don't like my original suggestion to insert .kotlin as the 4th component of the package.  What if, instead, we insert it as the 3rd component, like this?\n\n\n\ncore interface\ncore-ktx interface\n\n\n\n\ncom.amplifyframework.core.Amplify\ncom.amplifyframework.kotlin.core.Amplify\n\n\ncom.amplifyframework.auth.AuthCategoryBehavior\ncom.amplifyframework.kotlin.auth.Auth\n\n\ncom.amplifyframework.datastore.DataStoreCategoryBehavior\ncom.amplifyframework.kotlin.datastore.DataStore\n\n\netc...\netc...\n\n\n\nThen, there is no ambiguity around what the package name for a Kotlin extension is, given the package of the corresponding Java interface.\n\nIf a future all-Kotlin plugin is created, I doubt it would use kotlin in its namespace, either.\n\nI agree.   My suggestion above only applies to these Kotlin extensions where we are providing a layer on top of the Java interfaces.", "author": "richardmcclellan", "createdAt": "2021-02-17T17:07:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MjUwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzk5MDIxNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577990215", "bodyText": "We chatted about this offline and agree to go with the com.amplifyframework.kotlin.<whatever_was_in_core> approach.", "author": "jamesonwilliams", "createdAt": "2021-02-17T22:29:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MjUwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MzM0OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576343349", "bodyText": "Given that there is a core-ktx dependency, perhaps we should disambiguate our module by calling it core-kotlin?  That would also match the package name a little better.", "author": "richardmcclellan", "createdAt": "2021-02-15T17:33:29Z", "path": "build.gradle", "diffHunk": "@@ -63,6 +71,7 @@ ext {\n             annotation: 'androidx.annotation:annotation:1.1.0',\n             appcompat: 'androidx.appcompat:appcompat:1.2.0',\n             core: 'androidx.core:core:1.3.2',\n+            core_ktx: 'androidx.core:core-ktx:1.3.2',", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIyMDU2NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577220565", "bodyText": "@aajtodd Also had this same feedback. And particularly now that this PR doesn't even use Kotlin Extensions, ktx probably doesn't make sense. Resolution: I'll update this.", "author": "jamesonwilliams", "createdAt": "2021-02-16T23:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MzM0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc5NzQ3NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577797474", "bodyText": "Ahh, right!  This doesn't use Kotlin extensions, so yeah, we probably shouldn't use ktx.", "author": "richardmcclellan", "createdAt": "2021-02-17T17:19:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MzM0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NTQ5NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576355495", "bodyText": "The default value for AuthSignInOptions here is null, while the default for AuthSignUpOptions, in the signUp method above, is AuthSignUpOptions.builder().build().\nIs that intentional?  Should they both be the same instead?", "author": "richardmcclellan", "createdAt": "2021-02-15T18:00:10Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Auth.kt", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import android.app.Activity\n+import android.content.Intent\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails\n+import com.amplifyframework.auth.AuthDevice\n+import com.amplifyframework.auth.AuthException\n+import com.amplifyframework.auth.AuthProvider\n+import com.amplifyframework.auth.AuthSession\n+import com.amplifyframework.auth.AuthUser\n+import com.amplifyframework.auth.AuthUserAttribute\n+import com.amplifyframework.auth.AuthUserAttributeKey\n+import com.amplifyframework.auth.options.AuthSignInOptions\n+import com.amplifyframework.auth.options.AuthSignOutOptions\n+import com.amplifyframework.auth.options.AuthSignUpOptions\n+import com.amplifyframework.auth.options.AuthWebUISignInOptions\n+import com.amplifyframework.auth.result.AuthResetPasswordResult\n+import com.amplifyframework.auth.result.AuthSignInResult\n+import com.amplifyframework.auth.result.AuthSignUpResult\n+import com.amplifyframework.auth.result.AuthUpdateAttributeResult\n+\n+/**\n+ * Defines Authentication behaviors available from Kotlin.\n+ */\n+interface Auth {\n+\n+    /**\n+     * Creates a new user account with the specified username and password.\n+     * Can also pass in user attributes to associate with the user through\n+     * the options object.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @param password The user's password\n+     * @param options Advanced options such as additional attributes of the user\n+     *                or validation data.\n+     *                If not provided, default options will be used.\n+     * @return A sign-up result; check the nextStep field to determine which\n+     *         action to take next. The next step is typically to confirm a\n+     *         code sent over email/SMS.\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signUp(\n+        username: String,\n+        password: String,\n+        options: AuthSignUpOptions = AuthSignUpOptions.builder().build()\n+    ):\n+        AuthSignUpResult\n+\n+    /**\n+     * If you have attribute confirmation enabled, this will allow the user\n+     * to enter the confirmation code they received to activate their account.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @param confirmationCode The confirmation code the user received\n+     * @return A sign-up result; if the code has been confirmed successfully, the result\n+     *         will show true for isSignUpComplete().\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun confirmSignUp(username: String, confirmationCode: String): AuthSignUpResult\n+\n+    /**\n+     * If the user's code expires or they just missed it, this method can\n+     * be used to send them a new one.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @return A sign-up result; if the code is requested, typically the result will\n+     *         include a next step requiring confirmation of the re-sent code.\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun resendSignUpCode(username: String): AuthSignUpResult\n+\n+    /**\n+     * Basic authentication to the app with a username and password or, if custom auth is setup,\n+     * you can send null for those and the necessary authentication details in the options object.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number, depending on configuration.\n+     *                 May be omitted or null when using custom auth.\n+     * @param password User's password for normal sign-up. May be omitted or null if custom auth or\n+     *                 password-less configurations are in use\n+     * @param options Advanced options such as a map of auth information for custom auth,\n+     *                If not provided, default options will be used\n+     * @return A sign-in result. The nextStep field may indicate additional actions to be taken\n+     *         to confirm the sign-in, or it may show isSignInComplete as true, in which case\n+     *         an authenticated session is available\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signIn(\n+        username: String? = null,\n+        password: String? = null,\n+        options: AuthSignInOptions? = null", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIyODAxMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577228010", "bodyText": "Yes! Good eye. Most of the other APIs in this PR have some kind of default object that I can use as a default parameter.\nAuthSignInOptions is an abstract class. As is right now, I can't instantiate it, so I sued null instead.\nOne alternative would be to add a factory method to that abstract class, like:\nAuthSignInOptions.defaults()\nIt would create a new sentinel object, DefaultAuthSignInOptions. We could look for that type inside our implementation and treat it specially.\nOn second thought, this does seem like the better approach. I can update the code base to add this mechanism, if it sounds good to you.", "author": "jamesonwilliams", "createdAt": "2021-02-17T00:12:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NTQ5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc5ODk2OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577798968", "bodyText": "I can update the code base to add this mechanism, if it sounds good to you.\n\nSounds reasonable.  I think the current approach is fine too.  Either way seems fine to me!", "author": "richardmcclellan", "createdAt": "2021-02-17T17:22:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NTQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NjMyMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576356320", "bodyText": "I don't think this method actually throws an AuthException, does it?", "author": "richardmcclellan", "createdAt": "2021-02-15T18:02:10Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Auth.kt", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import android.app.Activity\n+import android.content.Intent\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails\n+import com.amplifyframework.auth.AuthDevice\n+import com.amplifyframework.auth.AuthException\n+import com.amplifyframework.auth.AuthProvider\n+import com.amplifyframework.auth.AuthSession\n+import com.amplifyframework.auth.AuthUser\n+import com.amplifyframework.auth.AuthUserAttribute\n+import com.amplifyframework.auth.AuthUserAttributeKey\n+import com.amplifyframework.auth.options.AuthSignInOptions\n+import com.amplifyframework.auth.options.AuthSignOutOptions\n+import com.amplifyframework.auth.options.AuthSignUpOptions\n+import com.amplifyframework.auth.options.AuthWebUISignInOptions\n+import com.amplifyframework.auth.result.AuthResetPasswordResult\n+import com.amplifyframework.auth.result.AuthSignInResult\n+import com.amplifyframework.auth.result.AuthSignUpResult\n+import com.amplifyframework.auth.result.AuthUpdateAttributeResult\n+\n+/**\n+ * Defines Authentication behaviors available from Kotlin.\n+ */\n+interface Auth {\n+\n+    /**\n+     * Creates a new user account with the specified username and password.\n+     * Can also pass in user attributes to associate with the user through\n+     * the options object.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @param password The user's password\n+     * @param options Advanced options such as additional attributes of the user\n+     *                or validation data.\n+     *                If not provided, default options will be used.\n+     * @return A sign-up result; check the nextStep field to determine which\n+     *         action to take next. The next step is typically to confirm a\n+     *         code sent over email/SMS.\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signUp(\n+        username: String,\n+        password: String,\n+        options: AuthSignUpOptions = AuthSignUpOptions.builder().build()\n+    ):\n+        AuthSignUpResult\n+\n+    /**\n+     * If you have attribute confirmation enabled, this will allow the user\n+     * to enter the confirmation code they received to activate their account.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @param confirmationCode The confirmation code the user received\n+     * @return A sign-up result; if the code has been confirmed successfully, the result\n+     *         will show true for isSignUpComplete().\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun confirmSignUp(username: String, confirmationCode: String): AuthSignUpResult\n+\n+    /**\n+     * If the user's code expires or they just missed it, this method can\n+     * be used to send them a new one.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @return A sign-up result; if the code is requested, typically the result will\n+     *         include a next step requiring confirmation of the re-sent code.\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun resendSignUpCode(username: String): AuthSignUpResult\n+\n+    /**\n+     * Basic authentication to the app with a username and password or, if custom auth is setup,\n+     * you can send null for those and the necessary authentication details in the options object.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number, depending on configuration.\n+     *                 May be omitted or null when using custom auth.\n+     * @param password User's password for normal sign-up. May be omitted or null if custom auth or\n+     *                 password-less configurations are in use\n+     * @param options Advanced options such as a map of auth information for custom auth,\n+     *                If not provided, default options will be used\n+     * @return A sign-in result. The nextStep field may indicate additional actions to be taken\n+     *         to confirm the sign-in, or it may show isSignInComplete as true, in which case\n+     *         an authenticated session is available\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signIn(\n+        username: String? = null,\n+        password: String? = null,\n+        options: AuthSignInOptions? = null\n+    ):\n+        AuthSignInResult\n+\n+    /**\n+     * Submit the confirmation code received as part of multi-factor Authentication during sign in.\n+     * @param confirmationCode The code received as part of the multi-factor authentication process\n+     * @return A sign-in result; check the nextStep field for cues on additional sign-in challenges\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun confirmSignIn(confirmationCode: String): AuthSignInResult\n+\n+    /**\n+     * Launch the specified auth provider's web UI sign in experience. You should also put the\n+     * {@link #handleWebUISignInResponse(Intent)} method in your activity's onNewIntent method to\n+     * capture the response which comes back from the UI flow.\n+     * @param provider The auth provider you want to launch the web ui for (e.g. Facebook, Google, etc.)\n+     * @param callingActivity The activity in your app you are calling this from\n+     * @param options Advanced options for signing in with an auth provider's hosted web ui.\n+     *                If not provided, default options will be used.\n+     * @return A sign-in result; check the nextStep for additional sign-in confirmation requirements\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signInWithSocialWebUI(\n+        provider: AuthProvider,\n+        callingActivity: Activity,\n+        options: AuthWebUISignInOptions = AuthWebUISignInOptions.builder().build()\n+    ):\n+        AuthSignInResult\n+\n+    /**\n+     * Launch a hosted web sign in UI flow. You should also put the {@link #handleWebUISignInResponse(Intent)}\n+     * method in your activity's onNewIntent method to capture the response which comes back from the UI flow.\n+     * @param callingActivity The activity in your app you are calling this from\n+     * @param options Advanced options for signing in with a hosted web ui.\n+     *                If not provided, default options will be used.\n+     * @return A sign-in result; check the nextStep for additional sign-in confirmation requirements\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signInWithWebUI(\n+        callingActivity: Activity,\n+        options: AuthWebUISignInOptions = AuthWebUISignInOptions.builder().build()\n+    ):\n+        AuthSignInResult\n+\n+    /**\n+     * Handles the response which comes back from {@link #signInWithWebUI(Activity, Consumer, Consumer)}.\n+     * @param intent The app activity's intent\n+     */\n+    @Throws(AuthException::class)", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIyODMxOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577228318", "bodyText": "It doesn't, you're right -- good catch. Will remove.", "author": "jamesonwilliams", "createdAt": "2021-02-17T00:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NjMyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1OTkzNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576359934", "bodyText": "This should return a DataStoreItemChange<T>, right?", "author": "richardmcclellan", "createdAt": "2021-02-15T18:11:13Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/DataStore.kt", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.Where\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.flow.Flow\n+\n+/**\n+ * A local object store with cloud synchronization.\n+ */\n+interface DataStore {\n+    /**\n+     * Save an item into the DataStore.\n+     * @param item Item to save\n+     * @param predicate Conditions that must be true before save can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> save(item: T, predicate: QueryPredicate = QueryPredicates.all())", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIyOTU5NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577229595", "bodyText": "In more recent versions of the Amplify API, we have decided not to include this change param on save or delete. iOS does not include anything like this. Rx bindings returns a value-less Completable, here. Flutter returns a Future<void>. Even though this is technically more than just wrapping the low-level API, I'm inclined to drop the DataStoreItemChange to be more like iOS & Flutter.", "author": "jamesonwilliams", "createdAt": "2021-02-17T00:17:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1OTkzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzgwMDYxOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577800619", "bodyText": "Got it!  Given that iOS/Flutter and our Rx bindings don't return a DataStoreItemChange, I agree we don't need to return it here.", "author": "richardmcclellan", "createdAt": "2021-02-17T17:24:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1OTkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MDAxOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576360018", "bodyText": "This should return a DataStoreItemChange<T> as well, right?", "author": "richardmcclellan", "createdAt": "2021-02-15T18:11:26Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/DataStore.kt", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.Where\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.flow.Flow\n+\n+/**\n+ * A local object store with cloud synchronization.\n+ */\n+interface DataStore {\n+    /**\n+     * Save an item into the DataStore.\n+     * @param item Item to save\n+     * @param predicate Conditions that must be true before save can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> save(item: T, predicate: QueryPredicate = QueryPredicates.all())\n+\n+    /**\n+     * Delete an item from the DataStore.\n+     * @param item Item to delete\n+     * @param predicate Conditions that must be true before delete can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> delete(item: T, predicate: QueryPredicate = QueryPredicates.all())", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc5NzMxMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578797311", "bodyText": "(Same here as in save(...): we decided to be more like iOS/Flutter and to drop the result value.)", "author": "jamesonwilliams", "createdAt": "2021-02-18T22:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MDAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MzI1MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576363251", "bodyText": "I think you are missing this one:\n/**\n * Deletes every item of given type from the DataStore that meets the provided\n * conditions. If there is no match, then nothing is deleted and operation\n * succeeds.\n * @param itemClass Item type to delete from the DataStore\n * @param predicate Predicate condition to filter items to delete\n */\n@Throws(DataStoreException::class)\nsuspend fun <T : Model> delete(itemClass: Class<T>, predicate: QueryPredicate = QueryPredicates.all()): DataStoreItemChange<T>", "author": "richardmcclellan", "createdAt": "2021-02-15T18:19:31Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/DataStore.kt", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.Where\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.flow.Flow\n+\n+/**\n+ * A local object store with cloud synchronization.\n+ */\n+interface DataStore {\n+    /**\n+     * Save an item into the DataStore.\n+     * @param item Item to save\n+     * @param predicate Conditions that must be true before save can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> save(item: T, predicate: QueryPredicate = QueryPredicates.all())\n+\n+    /**\n+     * Delete an item from the DataStore.\n+     * @param item Item to delete\n+     * @param predicate Conditions that must be true before delete can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> delete(item: T, predicate: QueryPredicate = QueryPredicates.all())\n+", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODc5ODMyMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578798320", "bodyText": "Yes! Good catch. Will add now.", "author": "jamesonwilliams", "createdAt": "2021-02-18T22:41:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MzI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNDY3OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576414678", "bodyText": "Is it okay that we are not exposing the onObservationStarted callback to the customer?\nFor a customer building a real time UI, they likely want to do something like:\nAmplify.DataStore.observe(\n    { onObservationStarted -> {\n          Amplify.DataStore.query(Todo.class, \n              { /* display results on UI */ }\n              { /* handle errors */ } \n         )\n    },\n    { onDataStoreItemChange -> /* display item on UI */ },\n    { /* handle errors */ }\n    { / * completion */ }\n}\n\nWith these extensions, it doesn't look like there is a way to ensure query is not called until after observe is started.\nPerhaps as a solution, this could be a suspend function that returns as soon as observations have started.  Then, after observations are started, it returns a Flow<DataStoreItemChange>.   What do you think?", "author": "richardmcclellan", "createdAt": "2021-02-15T20:45:18Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/facades/KotlinDataStoreFacade.kt", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin.facades\n+\n+import com.amplifyframework.core.Amplify\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.datastore.DataStoreCategoryBehavior as Delegate\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import com.amplifyframework.kotlin.DataStore\n+import java.util.concurrent.atomic.AtomicReference\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.channels.sendBlocking\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+\n+class KotlinDataStoreFacade(private val delegate: Delegate = Amplify.DataStore) : DataStore {\n+    @Throws(DataStoreException::class)\n+    override suspend fun <T : Model> save(item: T, predicate: QueryPredicate) {\n+        return suspendCoroutine { continuation ->\n+            delegate.save(\n+                item,\n+                predicate,\n+                { continuation.resume(Unit) },\n+                { continuation.resumeWithException(it) }\n+            )\n+        }\n+    }\n+\n+    @Throws(DataStoreException::class)\n+    override suspend fun <T : Model> delete(item: T, predicate: QueryPredicate) {\n+        return suspendCoroutine { continuation ->\n+            delegate.delete(\n+                item,\n+                predicate,\n+                { continuation.resume(Unit) },\n+                { continuation.resumeWithException(it) }\n+            )\n+        }\n+    }\n+\n+    @ExperimentalCoroutinesApi\n+    @Throws(DataStoreException::class)\n+    override fun <T : Model> query(itemClass: Class<T>, options: QueryOptions): Flow<T> {\n+        return callbackFlow {\n+            delegate.query(\n+                itemClass,\n+                options,\n+                {\n+                    while (it.hasNext()) {\n+                        sendBlocking(it.next())\n+                    }\n+                    close()\n+                },\n+                { close(it) }\n+            )\n+            awaitClose {}\n+        }\n+    }\n+\n+    @ExperimentalCoroutinesApi\n+    @Throws(DataStoreException::class)\n+    override fun observe(): Flow<DataStoreItemChange<out Model>> {\n+        return callbackFlow {\n+            val cancelable = AtomicReference<Cancelable?>()\n+            delegate.observe(\n+                { cancelable.set(it) },", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk0NTgxNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578945817", "bodyText": "Ah, yea. Actually I just prototyped this, and it is awesome.\nWith Rx, It would have been like a Single<Observable<DataStoreItemChange<T>>, and it would be kind of ugly to deal with.\nBut since coroutines get rid of the await-style boiler plate, I implemented your solution and literally didn't have to change my unit tests. Everything was already getting launched in a coroutine scope and it just worked.", "author": "jamesonwilliams", "createdAt": "2021-02-19T05:52:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNDY3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk1MDQxNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578950414", "bodyText": "Awesome!  Would a similar approach work for API.subscribe too?", "author": "richardmcclellan", "createdAt": "2021-02-19T06:07:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNDY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNjg1OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576416859", "bodyText": "Instead of returning a Subscription data object which wraps two Flows, could you simplify and instead make this a suspend function that completes when the subscription is started, and then returns a Flow<GraphQLResponse<T>>?", "author": "richardmcclellan", "createdAt": "2021-02-15T20:51:14Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/GraphQL.kt", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.api.ApiException\n+import com.amplifyframework.api.graphql.GraphQLRequest\n+import com.amplifyframework.api.graphql.GraphQLResponse\n+import com.amplifyframework.core.async.Cancelable\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.FlowPreview\n+import kotlinx.coroutines.flow.Flow\n+\n+interface GraphQL {\n+    /**\n+     * Query a GraphQL API.\n+     * @param request Query request\n+     * @param apiName The name of an API as configured in your configuration file;\n+     *                if not provided, the first GraphQL API in your config is used\n+     * @return Response\n+     */\n+    @Throws(ApiException::class)\n+    suspend fun <T> query(request: GraphQLRequest<T>, apiName: String? = null): GraphQLResponse<T>\n+\n+    /**\n+     * Run a mutation against a GraphQL API.\n+     * @param request Mutation request\n+     * @param apiName The name of an API as configured in your configuration file;\n+     *                if not provided, the first GraphQL API in your config is used\n+     * @return Response\n+     */\n+    @Throws(ApiException::class)\n+    suspend fun <T> mutate(request: GraphQLRequest<T>, apiName: String? = null): GraphQLResponse<T>\n+\n+    /**\n+     * Subscribe to realtime events observed on a GraphQL API.\n+     * @param request Subscription request\n+     * @param apiName The name of an API as configured in your configuration file;\n+     *                if not provided, the first GraphQL API in your config is used\n+     * @return A subscription object. Inspect its connectionState and subscriptionData.\n+     */\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun <T> subscribe(request: GraphQLRequest<T>, apiName: String? = null): Subscription<T>", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk1ODE5NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578958195", "bodyText": "This one worked out, too. Done.", "author": "jamesonwilliams", "createdAt": "2021-02-19T06:30:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNjg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNzkwMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576417901", "bodyText": "This is just a synchronous function, right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                suspend fun publish(channel: HubChannel, event: HubEvent<*>)\n          \n          \n            \n               fun publish(channel: HubChannel, event: HubEvent<*>)", "author": "richardmcclellan", "createdAt": "2021-02-15T20:54:30Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Hub.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.hub.HubChannel\n+import com.amplifyframework.hub.HubEvent\n+import com.amplifyframework.hub.HubEventFilter\n+import com.amplifyframework.hub.HubEventFilters\n+import kotlinx.coroutines.flow.Flow\n+\n+interface Hub {\n+    /**\n+     * Publish an event to a particular channel of the Hub.\n+     * @param channel Hub channel onto which to publish\n+     * @param event Event to publish\n+     */\n+    suspend fun publish(channel: HubChannel, event: HubEvent<*>)", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIyMDg5Mg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577220892", "bodyText": "Yes! Good catch, thanks.", "author": "jamesonwilliams", "createdAt": "2021-02-16T23:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNzkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ0NTMzNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576445336", "bodyText": "So, it sounds like a Flow is cold, and a SharedFlow is hot, right?   Most of the other Kotlin extensions in this PR return (cold) Flow's. Why does this one use (hot) SharedFlows?\nWouldn't it be easier for customers to understand to use one or the other throughout?\nIt also seems strange that the upload is started as soon as uploadFile is called.  Instead, I think I would expect the upload to start whenever I subscribe to (or collect, I think?) to the results Flow.", "author": "richardmcclellan", "createdAt": "2021-02-15T22:02:51Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/facades/KotlinStorageFacade.kt", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin.facades\n+\n+import com.amplifyframework.core.Amplify\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.kotlin.Storage\n+import com.amplifyframework.kotlin.Storage.InProgressStorageOperation\n+import com.amplifyframework.storage.StorageCategoryBehavior as Delegate\n+import com.amplifyframework.storage.StorageException\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions\n+import com.amplifyframework.storage.options.StorageGetUrlOptions\n+import com.amplifyframework.storage.options.StorageListOptions\n+import com.amplifyframework.storage.options.StorageRemoveOptions\n+import com.amplifyframework.storage.options.StorageUploadFileOptions\n+import com.amplifyframework.storage.options.StorageUploadInputStreamOptions\n+import com.amplifyframework.storage.result.StorageDownloadFileResult\n+import com.amplifyframework.storage.result.StorageGetUrlResult\n+import com.amplifyframework.storage.result.StorageListResult\n+import com.amplifyframework.storage.result.StorageRemoveResult\n+import com.amplifyframework.storage.result.StorageTransferProgress\n+import com.amplifyframework.storage.result.StorageUploadFileResult\n+import com.amplifyframework.storage.result.StorageUploadInputStreamResult\n+import java.io.File\n+import java.io.InputStream\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.FlowPreview\n+import kotlinx.coroutines.flow.MutableSharedFlow\n+import kotlinx.coroutines.flow.asSharedFlow\n+\n+class KotlinStorageFacade(private val delegate: Delegate = Amplify.Storage) : Storage {\n+    @Throws(StorageException::class)\n+    override suspend fun getUrl(key: String, options: StorageGetUrlOptions):\n+        StorageGetUrlResult {\n+            return suspendCoroutine { continuation ->\n+                delegate.getUrl(\n+                    key,\n+                    options,\n+                    { continuation.resume(it) },\n+                    { continuation.resumeWithException(it) }\n+                )\n+            }\n+        }\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    override fun downloadFile(key: String, local: File, options: StorageDownloadFileOptions):\n+        InProgressStorageOperation<StorageDownloadFileResult> {\n+            val progress = MutableSharedFlow<StorageTransferProgress>(replay = 0)\n+            val results = MutableSharedFlow<StorageDownloadFileResult>(replay = 1)\n+            val errors = MutableSharedFlow<StorageException>(replay = 1)\n+            val operation = delegate.downloadFile(\n+                key,\n+                local,\n+                options,\n+                { progress.tryEmit(it) },\n+                { results.tryEmit(it) },\n+                { errors.tryEmit(it) }\n+            )\n+            return InProgressStorageOperation(\n+                results.asSharedFlow(),\n+                progress.asSharedFlow(),\n+                errors.asSharedFlow(),\n+                operation as Cancelable\n+            )\n+        }\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    override fun uploadFile(key: String, local: File, options: StorageUploadFileOptions):\n+        InProgressStorageOperation<StorageUploadFileResult> {\n+            val progress = MutableSharedFlow<StorageTransferProgress>(replay = 0)\n+            val results = MutableSharedFlow<StorageUploadFileResult>(replay = 1)", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIzNTcxNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577235716", "bodyText": "A \"cold\" flow is initiated by the collector, whereas a \"hot\" flow has its own lifecycle that the collector can't change.\nIn our code base, these are (intuitively) cold:\n\nDataStore query\n\nAnd these are hot:\n\nDataStore observe (lifecycle calls on someone else calling save/delete -- or subscription event)\nHub subscribe (lifecycle depends on someone else calling publish)\nDownload progress events (lifecycle depends on the network)\nAPI subscribe (lifecycle depends on external forces.)\n\nMutableSharedFlow and MutableSharedState are the current generation of utilities for hot flows in Kotlin. Even the ConflatedBroadcastChannel is marked obsolete and shouldn't be used.\nI'm publish an update to this PR which makes everything hot.\n\nSecond matter: this is something Tim and I deliberated while working on the Rx Bindings & Combine support. Both of those API surfaces do work this way.\nOne reasonable alternative is to use a single flow which emits different types of events on the same flow. Then, the use could initiate the thing at collect time. We could use a Kotlin sealed class to build out the various events on the single flow. I believe this gets to your other point about the result() in Storage.kt.", "author": "jamesonwilliams", "createdAt": "2021-02-17T00:33:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ0NTMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODgxMjY3Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578812677", "bodyText": "In this PR's current state, these are cold:\n\nDataStore.query\nDataStore.observe\nHub.subscribe\n\nand these are hot:\n\nAPI.subscribe\nStorage progress\n\nI think it probably makes sense to make them match what they \"intuitively\" map to, as you laid out above.\nCan you clarify what your plan is on this?  I think you wanted to leave this PR as is, but maybe open another PR that makes DataStore.observe and Hub.subscribe hot so we could compare the two approaches?", "author": "richardmcclellan", "createdAt": "2021-02-18T23:12:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ0NTMzNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODk1OTM4OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578959388", "bodyText": "I had to read and think more about this, I don't think I got this completely right.\nIt's true that we don't control the timing of those external forces (network events, Hub publications, DataStore changes).\nHowever, here's how the callbackFlow defines \"cold\":\n\nThe resulting flow is cold, which means that block is called every time a terminal operator is applied to the resulting flow.\n\nAll this means is that we start watching what's going on at the time the user calls collect. That does seem like a desirable behavior. What's more, the SharedFlow/StateFlow have some annoying properties, like not being able to explicitly close them.\nI think the lifecycle we care about is the setup/teardown lifecycle -- not the timing of the emissions.", "author": "jamesonwilliams", "createdAt": "2021-02-19T06:34:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ0NTMzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ0NjE4OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576446188", "bodyText": "lol", "author": "richardmcclellan", "createdAt": "2021-02-15T22:05:50Z", "path": "core-ktx/src/test/java/com/amplifyframework/kotlin/facades/KotlinAuthFacadeTest.kt", "diffHunk": "@@ -0,0 +1,828 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin.facades\n+\n+import android.app.Activity\n+import android.content.Intent\n+import com.amplifyframework.auth.AuthCategoryBehavior\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails.DeliveryMedium.SMS\n+import com.amplifyframework.auth.AuthDevice\n+import com.amplifyframework.auth.AuthException\n+import com.amplifyframework.auth.AuthProvider\n+import com.amplifyframework.auth.AuthSession\n+import com.amplifyframework.auth.AuthUser\n+import com.amplifyframework.auth.AuthUserAttribute\n+import com.amplifyframework.auth.AuthUserAttributeKey\n+import com.amplifyframework.auth.result.AuthResetPasswordResult\n+import com.amplifyframework.auth.result.AuthSignInResult\n+import com.amplifyframework.auth.result.AuthSignUpResult\n+import com.amplifyframework.auth.result.AuthUpdateAttributeResult\n+import com.amplifyframework.core.Action\n+import com.amplifyframework.core.Consumer\n+import io.mockk.every\n+import io.mockk.mockk\n+import io.mockk.verify\n+import kotlinx.coroutines.runBlocking\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+\n+/**\n+ * Tests that the various facade APIs in the KotlinAuthFacade are wired\n+ * to the delegate AuthCategoryBehavior correctly.\n+ */\n+@Suppress(\"UNCHECKED_CAST\") // The more things change, the more they stay the same.", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MTg1NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576461854", "bodyText": "Instead of having two Flow's, (results and errors), could you just have results, and in the facade implementation emit success, as an item, or failure, as an error, directly to results?\nThen, make result public, and you don't need this method at all any more.", "author": "richardmcclellan", "createdAt": "2021-02-15T23:01:33Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Storage.kt", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.storage.StorageException\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions\n+import com.amplifyframework.storage.options.StorageGetUrlOptions\n+import com.amplifyframework.storage.options.StorageListOptions\n+import com.amplifyframework.storage.options.StorageRemoveOptions\n+import com.amplifyframework.storage.options.StorageUploadFileOptions\n+import com.amplifyframework.storage.options.StorageUploadInputStreamOptions\n+import com.amplifyframework.storage.result.StorageDownloadFileResult\n+import com.amplifyframework.storage.result.StorageGetUrlResult\n+import com.amplifyframework.storage.result.StorageListResult\n+import com.amplifyframework.storage.result.StorageRemoveResult\n+import com.amplifyframework.storage.result.StorageTransferProgress\n+import com.amplifyframework.storage.result.StorageUploadFileResult\n+import com.amplifyframework.storage.result.StorageUploadInputStreamResult\n+import java.io.File\n+import java.io.InputStream\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.FlowPreview\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.first\n+import kotlinx.coroutines.flow.flattenMerge\n+import kotlinx.coroutines.flow.flowOf\n+import kotlinx.coroutines.flow.map\n+import kotlinx.coroutines.flow.onEach\n+\n+@Suppress(\"unused\")\n+interface Storage {\n+    @Throws(StorageException::class)\n+    suspend fun getUrl(\n+        key: String,\n+        options: StorageGetUrlOptions = StorageGetUrlOptions.defaultInstance()\n+    ):\n+        StorageGetUrlResult\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun downloadFile(\n+        key: String,\n+        local: File,\n+        options: StorageDownloadFileOptions = StorageDownloadFileOptions.defaultInstance()\n+    ):\n+        InProgressStorageOperation<StorageDownloadFileResult>\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun uploadFile(\n+        key: String,\n+        local: File,\n+        options: StorageUploadFileOptions = StorageUploadFileOptions.defaultInstance()\n+    ):\n+        InProgressStorageOperation<StorageUploadFileResult>\n+\n+    @FlowPreview\n+    @ExperimentalCoroutinesApi\n+    fun uploadInputStream(\n+        key: String,\n+        local: InputStream,\n+        options: StorageUploadInputStreamOptions = StorageUploadInputStreamOptions.defaultInstance()\n+    ): InProgressStorageOperation<StorageUploadInputStreamResult>\n+\n+    @Throws(StorageException::class)\n+    suspend fun remove(\n+        key: String,\n+        options: StorageRemoveOptions = StorageRemoveOptions.defaultInstance()\n+    ): StorageRemoveResult\n+\n+    @Throws(StorageException::class)\n+    suspend fun list(\n+        path: String,\n+        options: StorageListOptions = StorageListOptions.defaultInstance()\n+    ): StorageListResult\n+\n+    @FlowPreview\n+    data class InProgressStorageOperation<T>(\n+        private val results: Flow<T>,\n+        private val progress: Flow<StorageTransferProgress>,\n+        private val errors: Flow<StorageException>,\n+        private val delegate: Cancelable?\n+    ) : Cancelable {\n+\n+        override fun cancel() {\n+            delegate?.cancel()\n+        }\n+\n+        @Suppress(\"UNCHECKED_CAST\")\n+        suspend fun result(): T {\n+            // We want to take the first item from either one,\n+            // without waiting for the other.\n+            // Maybe there's a cleaner way to achieve this.", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIzODIwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577238204", "bodyText": "The Rx Bindings and Combine APIs work this way, today. The way you're suggesting is also a very reasonable mechanism. We can go the route you're suggesting, I'm open to it! It will mean changing all of our Flow APIs in this PR to use a single Flow, emitting sealed classes. This will ultimately work differently from any other API in iOS, Flutter, or Android -- but it might be the most ergonomic for the user?\nIf I understand you correctly, you're suggesting we do something like this?\nAmplify.Storage.download(remoteKey, localFile)\n    .collect {\n        when (it) {\n            is ProgressUpdate -> {\n            },\n            is TransferComplete -> {\n            },\n            is Error -> {\n            }\n    }\n\nsealed class StorageEvent {\n    data class ProgressUpdate(val increment, val total): StorageEvent\n    data class TransferComplete<T>(result: T): StorageEvent\n    data class Error(cause: StorageException): StorageEvent\n}", "author": "jamesonwilliams", "createdAt": "2021-02-17T00:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzY5OTIyOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577699229", "bodyText": "I haven't done much with Flows so take this with a grain of salt. It's mostly academic.\nWith regards to errors, one approach could be to allow customers to use the catch operator of the Flow. Unless we're doing any other processing of that error internally, I don't know that it makes sense to emit a special value for errors. So I think you would end up with something like this:\nAmplify.Storage.download(remoteKey, localFile)\n    .collect {\n        when (it) {\n            is ProgressUpdate -> {\n            },\n            is TransferComplete -> {\n            }\n    }\n    .catch { storageExceptioon -> /* do whatever */ }\nFor progress updates, the sealed class approach seems solid. I do understand the concern with keeping it consistent with the other platforms, but we should also keep in mind what approach feels more idiomatic for each of the dev stacks.", "author": "rjuliano", "createdAt": "2021-02-17T15:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzcyMjMxNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577722316", "bodyText": "FWIW, the current code should facilitate use of .catch { } as you mention. DataStore query & observe and API subscribe will currently emit errors like this. Storage upload/download will throw the error from the result() suspending function (it's like a single valued Flow, I suppose), but the progress() Flow never throws.", "author": "jamesonwilliams", "createdAt": "2021-02-17T15:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzczNjQ2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577736466", "bodyText": "Ah...got itt. So they would do something like this, correct?\nAmplify.Storage.download(remoteKey, localFile)\n    .results\n    .collect {\n        when (it) {\n            is ProgressUpdate -> {\n            },\n            is TransferComplete -> {\n            }\n    }\n    .catch { storageExceptioon -> /* do whatever */ }", "author": "rjuliano", "createdAt": "2021-02-17T16:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzgwMTg0Nw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577801847", "bodyText": "The download result is the odd-one-out. It works like a regular suspending function, e.g.:\nval download = Amplify.Storage.downloadFile(remoteKey, localFile)\ntry {\n    val result = download.result()\n} catch (error: StorageException) {\n    Log.w(\"DemoApp\", \"Failed to complete download\", error)\n}\nThe API subscribe has two Flows in the operation. It does work the way you suggested:\nAmplify.API.subscribe(request)\n    .subscriptionData\n    .catch { Log.w(\"DemoApp\", \"Error ended subscription\", it) }\n    .collect { Log.i(\"DemoApp\", \"New subscription event! $it\") }", "author": "jamesonwilliams", "createdAt": "2021-02-17T17:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MjEzMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576462132", "bodyText": "Make this public, so customers can access it?  I don't see a way for customers to access progress, currently.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private val progress: Flow<StorageTransferProgress>,\n          \n          \n            \n                   val progress: Flow<StorageTransferProgress>,", "author": "richardmcclellan", "createdAt": "2021-02-15T23:02:43Z", "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Storage.kt", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.storage.StorageException\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions\n+import com.amplifyframework.storage.options.StorageGetUrlOptions\n+import com.amplifyframework.storage.options.StorageListOptions\n+import com.amplifyframework.storage.options.StorageRemoveOptions\n+import com.amplifyframework.storage.options.StorageUploadFileOptions\n+import com.amplifyframework.storage.options.StorageUploadInputStreamOptions\n+import com.amplifyframework.storage.result.StorageDownloadFileResult\n+import com.amplifyframework.storage.result.StorageGetUrlResult\n+import com.amplifyframework.storage.result.StorageListResult\n+import com.amplifyframework.storage.result.StorageRemoveResult\n+import com.amplifyframework.storage.result.StorageTransferProgress\n+import com.amplifyframework.storage.result.StorageUploadFileResult\n+import com.amplifyframework.storage.result.StorageUploadInputStreamResult\n+import java.io.File\n+import java.io.InputStream\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.FlowPreview\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.first\n+import kotlinx.coroutines.flow.flattenMerge\n+import kotlinx.coroutines.flow.flowOf\n+import kotlinx.coroutines.flow.map\n+import kotlinx.coroutines.flow.onEach\n+\n+@Suppress(\"unused\")\n+interface Storage {\n+    @Throws(StorageException::class)\n+    suspend fun getUrl(\n+        key: String,\n+        options: StorageGetUrlOptions = StorageGetUrlOptions.defaultInstance()\n+    ):\n+        StorageGetUrlResult\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun downloadFile(\n+        key: String,\n+        local: File,\n+        options: StorageDownloadFileOptions = StorageDownloadFileOptions.defaultInstance()\n+    ):\n+        InProgressStorageOperation<StorageDownloadFileResult>\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun uploadFile(\n+        key: String,\n+        local: File,\n+        options: StorageUploadFileOptions = StorageUploadFileOptions.defaultInstance()\n+    ):\n+        InProgressStorageOperation<StorageUploadFileResult>\n+\n+    @FlowPreview\n+    @ExperimentalCoroutinesApi\n+    fun uploadInputStream(\n+        key: String,\n+        local: InputStream,\n+        options: StorageUploadInputStreamOptions = StorageUploadInputStreamOptions.defaultInstance()\n+    ): InProgressStorageOperation<StorageUploadInputStreamResult>\n+\n+    @Throws(StorageException::class)\n+    suspend fun remove(\n+        key: String,\n+        options: StorageRemoveOptions = StorageRemoveOptions.defaultInstance()\n+    ): StorageRemoveResult\n+\n+    @Throws(StorageException::class)\n+    suspend fun list(\n+        path: String,\n+        options: StorageListOptions = StorageListOptions.defaultInstance()\n+    ): StorageListResult\n+\n+    @FlowPreview\n+    data class InProgressStorageOperation<T>(\n+        private val results: Flow<T>,\n+        private val progress: Flow<StorageTransferProgress>,", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIyOTk3MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577229971", "bodyText": "Whoops! I actually have another commit, where I go back and update this mechanism. Yes, you're absolutely right. This current PR doesn't expose any ability for the customer to view progress. Will update.", "author": "jamesonwilliams", "createdAt": "2021-02-17T00:18:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MjEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA3NzEyOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577077128", "bodyText": "very klever \ud83d\ude06", "author": "rjuliano", "createdAt": "2021-02-16T19:22:33Z", "path": "core-ktx/build.gradle", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+apply plugin: 'org.jlleitschuh.gradle.ktlint'\n+apply from: rootProject.file(\"configuration/publishing.gradle\")\n+\n+dependencies {\n+    implementation dependency.kotlin.stdlib\n+    implementation dependency.kotlin.coroutines\n+    implementation dependency.androidx.core_ktx\n+    implementation project(':core')\n+\n+    testImplementation dependency.androidx.test.core\n+    testImplementation dependency.junit\n+    testImplementation dependency.mockk", "originalCommit": "7356734439514c303ee43e9d09673c2de598b984", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODgzMDAwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578830004", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * the delegate When delegate succeeds, so too does the coroutine API.\n          \n          \n            \n                 * the delegate.  When delegate succeeds, so too does the coroutine API.", "author": "richardmcclellan", "createdAt": "2021-02-18T23:56:29Z", "path": "core-kotlin/src/test/java/com/amplifyframework/kotlin/datastore/KotlinDataStoreFacadeTest.kt", "diffHunk": "@@ -100,11 +100,11 @@ class KotlinDataStoreFacadeTest {\n     }\n \n     /**\n-     * When delete() coroutine is called, it passes through to the delegate.\n-     * When delegate succeeds, so too does the coroutine API.\n+     * When item-based delete() coroutine is called, it passes through to\n+     * the delegate When delegate succeeds, so too does the coroutine API.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": null, "url": null, "message": null, "committedDate": null, "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ3OTI1MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579479251", "bodyText": "Maybe name this variable itemClass, for consistency with the query method below?", "author": "richardmcclellan", "createdAt": "2021-02-19T21:14:28Z", "path": "core-kotlin/src/main/java/com/amplifyframework/kotlin/datastore/DataStore.kt", "diffHunk": "@@ -47,6 +48,18 @@ interface DataStore {\n     @Throws(DataStoreException::class)\n     suspend fun <T : Model> delete(item: T, predicate: QueryPredicate = QueryPredicates.all())\n \n+    /**\n+     * Delete item(s) of a given class from the DataStore.\n+     * @param byClass The class of item(s) being deleted\n+     * @param filter Items must additionally match this filter, to be targeted for deletion.\n+     *               If no filter is specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> delete(\n+        byClass: KClass<T>,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4ODc5Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579488796", "bodyText": "Done!", "author": "jamesonwilliams", "createdAt": "2021-02-19T21:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ3OTI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4MzA4OQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579483089", "bodyText": "Maybe call this itemId?  Just a thought, though I don't feel strongly one way or the other.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    uniqueId: String\n          \n          \n            \n                    itemId: String", "author": "richardmcclellan", "createdAt": "2021-02-19T21:22:36Z", "path": "core-kotlin/src/main/java/com/amplifyframework/kotlin/datastore/DataStore.kt", "diffHunk": "@@ -73,33 +73,45 @@ interface DataStore {\n \n     /**\n      * Observe all changes to items in the DataStore.\n+     * This function suspends until observation has been setup.\n+     * Once the observation begins, the function resumes and returns a Flow.\n+     * The returned Flow represents a stream of changes to the DataStore.\n      * @return A flow of changes to the items in the DataStore\n      */\n     @ExperimentalCoroutinesApi\n     @Throws(DataStoreException::class)\n-    fun observe(): Flow<DataStoreItemChange<out Model>>\n+    suspend fun observe(): Flow<DataStoreItemChange<out Model>>\n \n     /**\n      * Observe the DataStore for changes to a particular item.\n+     * This function suspends until observation has been setup.\n+     * Once the observation begins, the function resumes and returns a Flow.\n+     * The returned Flow represents a stream of changes to the DataStore.\n      * @param itemClass The class of the model being observed\n      * @param uniqueId The ID of the item being observed\n      * @return A flow of changes to the requested model\n      */\n     @ExperimentalCoroutinesApi\n     @Throws(DataStoreException::class)\n-    fun <T : Model> observe(itemClass: Class<T>, uniqueId: String): Flow<DataStoreItemChange<T>>\n+    suspend fun <T : Model> observe(\n+        itemClass: Class<T>,\n+        uniqueId: String", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4ODYzNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579488634", "bodyText": "Will do! Update coming ...", "author": "jamesonwilliams", "createdAt": "2021-02-19T21:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4MzA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4NDM5Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579484393", "bodyText": "This is super awesome! \ud83d\ude0e", "author": "richardmcclellan", "createdAt": "2021-02-19T21:25:26Z", "path": "core-kotlin/src/main/java/com/amplifyframework/kotlin/datastore/KotlinDataStoreFacade.kt", "diffHunk": "@@ -170,4 +176,38 @@ class KotlinDataStoreFacade(private val delegate: Delegate = Amplify.DataStore)\n             )\n         }\n     }\n+\n+    internal class Observation<T>(\n+        internal val starts: MutableSharedFlow<Cancelable> = MutableSharedFlow(1),\n+        internal val changes: MutableSharedFlow<T> = MutableSharedFlow(1),\n+        internal val failures: MutableSharedFlow<DataStoreException> = MutableSharedFlow(1),\n+        internal val completions: MutableSharedFlow<Unit> = MutableSharedFlow(1)\n+    ) {\n+        @Suppress(\"UNCHECKED_CAST\")\n+        @FlowPreview\n+        internal suspend fun waitForStart(): Flow<T> {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4NzU4Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579487583", "bodyText": "Thanks! Appreciate you Insisting on High Standards here. With our back and forth on these Flow APIs, I do feel like we ultimately ended up with a better result for the customer.", "author": "jamesonwilliams", "createdAt": "2021-02-19T21:32:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4NDM5Mw=="}], "type": "inlineReview"}, {"oid": "8da7132d67819d5259c450e023b9c8c4241cb11f", "url": "https://github.com/aws-amplify/amplify-android/commit/8da7132d67819d5259c450e023b9c8c4241cb11f", "message": "feature(core-ktx): A Kotlin-first API for Amplify\n\nThis commit introduces a new, optional core-ktx module. The module\nincludes improved support for using Amplify from Kotlin.\n\nTo use the Kotlin facade, include this dependency:\n```gradle\ndependencies {\n    implementation \"com.amplifyframework:core-ktx:$version\"\n}\n```\nAnd import the Kotlin facade instead of the one in `core`:\n```kotlin\nimport com.amplifyframework.kotlin.Amplify\n```\n\ncore-ktx introduces an alternate `Amplify` facade, which provides new\nmeans of interacting with the various Amplify categories (API, Auth,\nDataStore, Predictions, Storage.) The new facade include several\nimprovements to the Kotlin developer experience, mainly by adding\nsupport for Coroutines.\n\nAmplify has several types of APIs. Some are synchronous calls, which\nimmediately return a value. However, most Amplify behaviors are\nasynchronous calls. Among the async calls, there are a few broad\ncategories:\n\n 1. Functions that return a single value, and cannot be canceled;\n 2. Functions that return a single value, and can be canceled;\n 3. Functions that emit a stream of values\n 4. Functions that emit multiple types of values\n\nMost Amplify behaviors are of type (1). Auth and Predictions are\nentirely comprised of type (1). The Kotlin flavors of these behaviors\nare expressed as suspending functions, e.g.:\n\n```kotlin\nsuspend fun signOut() {\n   ...\n}\n```\n\nThe simplest developer experience to invoke this method will be:\n```kotlin\nrunBlocking {\n    Amplify.Auth.signOut()\n}\n```\n\nSome single-valued functions, such as the `mutate(...)` behavior in the\nAPI category, may be canceled before rendering a result. The Kotlin\nversion of `mutate(...)` is expressed this way:\n\n```kotlin\nsuspend fun <R> ApiCategory.mutate(\n        request: GraphQLRequest<R>, apiName: String? = null)\n        : GraphQLResponse<R> {\n    ...\n}\n```\n\nThe user may cancel the behavior via Kotlin's `Job` construct:\n```kotlin\nval job = launch(Dispatchers.IO) {\n    Amplify.API.mutate(request)\n}\n...\njob.cancel()\n```\n\nThere are also some Amplify behaviors which emit a stream of values.\nDataStore's `observe()` is a canonical example. It's extension function\nis expressed as:\n\n```kotlin\nfun observe(): Flow<DataStoreItemChange<out Model>> {\n    ...\n}\n```\n\nA developer may interact with the flow in this way:\n```kotlin\nAmplify.DataStore.observe()\n    .collect { print(it) }\n```\n\nAPI's `subscribe()` also emits a stream of values. However, it is also\nimportant to know about the _lifecycle_ of a GraphQL subscription. So,\nthis method returns an operation structure, which envelopes two flows:\n```kotlin\nfun <T> ApiCategory.subscribe(\n        request: GraphQLRequest<T>, apiName: String? = null)\n        : GraphQLSubscriptionOperation<T> {\n    ...\n}\n```\n\nA developer can inspect the connection state, as well as the stream of\nsubscription data:\n```kotlin\nval subscription = Amplify.API.subscribe(request)\nsubscription.subscriptionData.collect {\n    print(\"Got a subscription data: $it\")\n}\nsubscription.connectionState.collect {\n    print(\"Connection state changed: $it\")\n}\n```\n\nThe Storage category's various upload and download functions also\nexhibit a similar pattern. We want obtain the result, but we may also\nlike to observe a stream of progress updates. The signature looks like:\n```kotlin\nfun StorageCategory.downloadFile(\n        key: String,\n        local: File,\n): InProgressStorageOperation<StorageDownloadFileResult> {\n```\n\nA developer can access the result of the download via a suspend\nfunction exposed on the download operation:\n```kotlin\nval result = runBlocking { download.result() }\n```\n\nRefer: https://github.com/aws-amplify/amplify-android/issues/605", "committedDate": "2021-02-19T22:29:05Z", "type": "commit"}, {"oid": "79478f1b86cdb04270a9b22c51eb89caf5ea7f27", "url": "https://github.com/aws-amplify/amplify-android/commit/79478f1b86cdb04270a9b22c51eb89caf5ea7f27", "message": "Update core-ktx/src/main/java/com/amplifyframework/kotlin/Hub.kt\n\nCo-authored-by: Richard McClellan <ricmccle@amazon.com>", "committedDate": "2021-02-19T22:29:07Z", "type": "commit"}, {"oid": "5a6740011e0faaf4a4069a5260f15c7ce1253493", "url": "https://github.com/aws-amplify/amplify-android/commit/5a6740011e0faaf4a4069a5260f15c7ce1253493", "message": "Mixed valued functions use SharedFlow & StateFlow", "committedDate": "2021-02-19T22:29:07Z", "type": "commit"}, {"oid": "84644a9bd99180348e02a0063d14e46fc984b92d", "url": "https://github.com/aws-amplify/amplify-android/commit/84644a9bd99180348e02a0063d14e46fc984b92d", "message": "fixup from web inclusion", "committedDate": "2021-02-19T22:29:07Z", "type": "commit"}, {"oid": "7078e1485e3fa1b45e5a418c3f630e3df25fb880", "url": "https://github.com/aws-amplify/amplify-android/commit/7078e1485e3fa1b45e5a418c3f630e3df25fb880", "message": "handleWebSignInResponse doesn't actually throw an AuthException", "committedDate": "2021-02-19T22:29:07Z", "type": "commit"}, {"oid": "ded186434ab8f8e6ac03123fecb6194a53fdfbab", "url": "https://github.com/aws-amplify/amplify-android/commit/ded186434ab8f8e6ac03123fecb6194a53fdfbab", "message": "touchup: rename module from core-ktx to core-kotlin", "committedDate": "2021-02-19T22:29:08Z", "type": "commit"}, {"oid": "9eedd7434fe2addbfdfe42558a1560210b022954", "url": "https://github.com/aws-amplify/amplify-android/commit/9eedd7434fe2addbfdfe42558a1560210b022954", "message": "feat: add default param type for sign in options\n\nThe AuthSignInOptions are currently an abstract class in the core\nmodule. There are no concrete implementations in core. As a result, this\nmeans we have no value to provide as a default in the Kotlin signIn()\nAPI, even though it would be useful for the customer to use a default if\nno value is explicitly provided.\n\nTo improve the Kotlin signIn() API experience, we introduce a new\nDefaultAuthSignInOptions class which may be instantiated exactly one\nway:\n\n```kotlin\nAuthSignInOptions.defaults()\n```\n\nA small bit of internal rewiring is necessary to watch for this type and\nthen maintain the correct forking logic when it is seen in the Cognito\nplugin.\n\nThis is intended *not* to be a breaking change.", "committedDate": "2021-02-19T22:29:08Z", "type": "commit"}, {"oid": "96aa953737cdff52109b7348c3933c3c0d88803a", "url": "https://github.com/aws-amplify/amplify-android/commit/96aa953737cdff52109b7348c3933c3c0d88803a", "message": "fixup: remove a file that was not intended for commit", "committedDate": "2021-02-19T22:29:08Z", "type": "commit"}, {"oid": "ccfc98d593089426bae1d478d8b34950505acaa2", "url": "https://github.com/aws-amplify/amplify-android/commit/ccfc98d593089426bae1d478d8b34950505acaa2", "message": "update java packages per PR feedback", "committedDate": "2021-02-19T22:29:08Z", "type": "commit"}, {"oid": "3b524879eb653d122a36d061c1c29b6e76effa5d", "url": "https://github.com/aws-amplify/amplify-android/commit/3b524879eb653d122a36d061c1c29b6e76effa5d", "message": "fixup ktlint issues", "committedDate": "2021-02-19T22:29:08Z", "type": "commit"}, {"oid": "7ed9aa27407b43da4a0ebc8446c4d86399cb2ac8", "url": "https://github.com/aws-amplify/amplify-android/commit/7ed9aa27407b43da4a0ebc8446c4d86399cb2ac8", "message": "Add missing delete(byClass, ...) API to DataStore.kt", "committedDate": "2021-02-19T22:29:09Z", "type": "commit"}, {"oid": "f6147e4450c36e56665457acf20559251f5f24b8", "url": "https://github.com/aws-amplify/amplify-android/commit/f6147e4450c36e56665457acf20559251f5f24b8", "message": "Await onObservationStarted in DataStore observe() functions.\n\nAs of yet, the Kotlin DataStore observe() methods did not wait for the\nonObservationStarted signal from the delegate. This meant that the\nfunctions would return a Flow which might not actually be usable. As a\nresult, it would be possible for customers to miss some changes.\n\nobserve() APIs have been updated to become suspending functions. The\nfunctions suspend until the observation is ready. When it is, the\nfunctions continue to return the usable Flow.", "committedDate": "2021-02-19T22:29:09Z", "type": "commit"}, {"oid": "448d2b8e445c62451cb05df32fed8b772781eec2", "url": "https://github.com/aws-amplify/amplify-android/commit/448d2b8e445c62451cb05df32fed8b772781eec2", "message": "Rework API subscribe() to suspend until established\n\nInstead of using two separate Flows, one for data and one for connection\nlifecycle, we can simplify to a single data Flow.\n\nThe subscribe() function will suspend until a connection is established.\nIf there is an error establishing a connection then it will throw at\nthis phase.\n\nOnce established, a Flow of GraphQLResponse can be collected. This Flow\ncan complete gracefully if the user cancels the subscription -- or it\ncan throw an error (say, if the network goes down.)", "committedDate": "2021-02-19T22:29:09Z", "type": "commit"}, {"oid": "c6d94f51b2eec3f32cfe7bb4ed976920fc4d53a0", "url": "https://github.com/aws-amplify/amplify-android/commit/c6d94f51b2eec3f32cfe7bb4ed976920fc4d53a0", "message": "Use KClass instead of Class in all DataStore APIs", "committedDate": "2021-02-19T22:29:09Z", "type": "commit"}, {"oid": "05092b4c8cc28738afbd7b91a46e90326b2d2b50", "url": "https://github.com/aws-amplify/amplify-android/commit/05092b4c8cc28738afbd7b91a46e90326b2d2b50", "message": "Update a few DataStore parameter names", "committedDate": "2021-02-19T22:29:09Z", "type": "commit"}, {"oid": "05092b4c8cc28738afbd7b91a46e90326b2d2b50", "url": "https://github.com/aws-amplify/amplify-android/commit/05092b4c8cc28738afbd7b91a46e90326b2d2b50", "message": "Update a few DataStore parameter names", "committedDate": "2021-02-19T22:29:09Z", "type": "forcePushed"}]}