{"pr_number": 254, "pr_title": "[Storage] Refactor and component test", "pr_createdAt": "2020-01-30T22:53:32Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/254", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NjYwNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373246607", "bodyText": "Our StorageService is already scoped into this S3 plugin, so I think it'd be fair to just bake an S3 gizmo right into it. Maybe we should use a non-final AWSS3StorageService?", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:21:16Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/AWSS3StoragePlugin.java", "diffHunk": "@@ -138,7 +161,7 @@ public void configure(@NonNull JSONObject pluginConfiguration, @NonNull Context\n     @NonNull\n     @Override\n     public AmazonS3Client getEscapeHatch() {\n-        return storageService.getClient();\n+        return ((AWSS3StorageService) storageService).getClient();", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk4MTEyNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r374981124", "bodyText": "I personally dont even like the fact that StorageService directly interacts with TransferObserver. Considering that our ultimate goal is to not rely on TransferUtility, we should look into re-factoring it in the near future", "author": "raphkim", "createdAt": "2020-02-04T23:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NjYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NjkxMQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373246911", "bodyText": "Although this ternary is simple logic, it is repeated enough times that we might as well have a getTargetIdentityId() and getUserIdentityId(), that we can in-line to all of these request creations.", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:22:25Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/AWSS3StoragePlugin.java", "diffHunk": "@@ -190,13 +220,17 @@ public AmazonS3Client getEscapeHatch() {\n             @NonNull String local,\n             @NonNull StorageUploadFileOptions options,\n             @NonNull Consumer<StorageUploadFileResult> onSuccess,\n-            @NonNull Consumer<StorageException> onError) {\n-\n+            @NonNull Consumer<StorageException> onError\n+    ) {\n         AWSS3StorageUploadFileRequest request = new AWSS3StorageUploadFileRequest(\n                 key,\n                 local,\n-                options.getAccessLevel() != null ? options.getAccessLevel() : defaultAccessLevel,\n-                options.getTargetIdentityId(),\n+                options.getAccessLevel() != null\n+                        ? options.getAccessLevel()\n+                        : defaultAccessLevel,\n+                options.getTargetIdentityId() != null\n+                        ? options.getTargetIdentityId()\n+                        : userIdentityId,", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNjM5Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r375436396", "bodyText": "I thought about it, but that required passing in options parameter to the helper method also, which kind of looked ugly.", "author": "raphkim", "createdAt": "2020-02-05T18:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NjkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NzEzOQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373247139", "bodyText": "We should figure out what an Identity ID actually is (lol), and update the Javadoc ...", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:23:12Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/IdentityIdProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3;\n+\n+/**\n+ * Interface for providing identity ID of the authorized\n+ * requester.\n+ */\n+public interface IdentityIdProvider {\n+    /**\n+     * Returns the identity ID.", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NzY2OA==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373247668", "bodyText": "Can you catch (AMoreSpecificException specificProblem)?\nRef: PMD's AvoidCatchingGenericException lint documentation", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:25:00Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageDownloadFileOperation.java", "diffHunk": "@@ -69,63 +69,49 @@ public AWSS3StorageDownloadFileOperation(\n     public void start() {\n         // Only start if it hasn't already been started\n         if (transferObserver == null) {\n-            String identityId;\n+            String serviceKey = S3RequestUtils.getServiceKey(\n+                    getRequest().getAccessLevel(),\n+                    getRequest().getTargetIdentityId(),\n+                    getRequest().getKey()\n+            );\n+\n+            this.file = new File(getRequest().getLocal()); //TODO: Add error handling if path is invalid\n \n             try {\n-                identityId = AWSMobileClient.getInstance().getIdentityId();\n+                transferObserver = storageService.downloadToFile(serviceKey, file);\n+            } catch (Exception exception) {", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxNDE4MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r374914181", "bodyText": "I agree with this, but it is non-trivial to look for all possible ways that TransferUtility could throw a runtime exception due to its complexity. For example, it throws IllegalArgumentException for multiple reasons and it becomes kind of pointless to catch it and give a generic message for it (and repeat the process for other types of runtime exceptions it could potentially throw).", "author": "raphkim", "createdAt": "2020-02-04T20:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0NzY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0ODExMg==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373248112", "bodyText": "Any change to catch (SpecificThingOne fineGrainedCatch), catch (SpecificThingTwo fineGrainedThignTwo) ? Will help create a less generic error message in the StorageException that you create", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:26:28Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageListOperation.java", "diffHunk": "@@ -64,35 +65,21 @@ public AWSS3StorageListOperation(\n     @Override\n     public void start() {\n         executorService.submit(() -> {\n-            String identityId;\n-\n             try {\n-                identityId = AWSMobileClient.getInstance().getIdentityId();\n-\n-                try {\n-                    StorageListResult result = storageService.listFiles(\n-                        S3RequestUtils.getServiceKey(\n-                            getRequest().getAccessLevel(),\n-                            identityId,\n-                            getRequest().getPath(),\n-                            getRequest().getTargetIdentityId()\n-                        )\n-                    );\n+                List<StorageItem> listedItems = storageService.listFiles(\n+                    S3RequestUtils.getServiceKey(\n+                        getRequest().getAccessLevel(),\n+                        getRequest().getTargetIdentityId(),\n+                        getRequest().getPath()\n+                    )\n+                );\n \n-                    onSuccess.accept(result);\n-                } catch (Exception exception) {\n-                    onError.accept(new StorageException(\n-                        \"Something went wrong with your AWS S3 Storage list operation\",\n-                        exception,\n-                        \"See attached exception for more information and suggestions\"\n-                    ));\n-                }\n+                onSuccess.accept(StorageListResult.fromItems(listedItems));\n             } catch (Exception exception) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0ODIwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373248204", "bodyText": "Here's another one", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:26:43Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageRemoveOperation.java", "diffHunk": "@@ -64,29 +63,16 @@ public AWSS3StorageRemoveOperation(\n     @Override\n     public void start() {\n         executorService.submit(() -> {\n-            String identityId;\n-\n             try {\n-                identityId = AWSMobileClient.getInstance().getIdentityId();\n-\n-                try {\n-                    storageService.deleteObject(\n-                        S3RequestUtils.getServiceKey(\n-                            getRequest().getAccessLevel(),\n-                            identityId,\n-                            getRequest().getKey(),\n-                            getRequest().getTargetIdentityId()\n-                        )\n-                    );\n+                storageService.deleteObject(\n+                    S3RequestUtils.getServiceKey(\n+                        getRequest().getAccessLevel(),\n+                        getRequest().getTargetIdentityId(),\n+                        getRequest().getKey()\n+                    )\n+                );\n \n-                    onSuccess.accept(StorageRemoveResult.fromKey(getRequest().getKey()));\n-                } catch (Exception exception) {\n-                    onError.accept(new StorageException(\n-                        \"Something went wrong with your AWS S3 Storage remove operation\",\n-                        exception,\n-                        \"See attached exception for more information and suggestions\"\n-                    ));\n-                }\n+                onSuccess.accept(StorageRemoveResult.fromKey(getRequest().getKey()));\n             } catch (Exception exception) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0ODMwNA==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373248304", "bodyText": "One more", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:27:01Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadFileOperation.java", "diffHunk": "@@ -69,68 +69,55 @@ public AWSS3StorageUploadFileOperation(\n     public void start() {\n         // Only start if it hasn't already been started\n         if (transferObserver == null) {\n-            String identityId;\n \n-            try {\n-                identityId = AWSMobileClient.getInstance().getIdentityId();\n-\n-                String serviceKey = S3RequestUtils.getServiceKey(\n-                        getRequest().getAccessLevel(),\n-                        identityId,\n-                        getRequest().getKey(),\n-                        getRequest().getTargetIdentityId()\n-                );\n-                this.file = new File(getRequest().getLocal()); //TODO: Add error handling if path is invalid\n-\n-                try {\n-                    if (getRequest().getMetadata() == null || getRequest().getMetadata().isEmpty()) {\n-                        transferObserver = storageService.uploadFile(serviceKey, file);\n-                    } else {\n-                        transferObserver = storageService.uploadFile(serviceKey, file, getRequest().getMetadata());\n-                    }\n+            String serviceKey = S3RequestUtils.getServiceKey(\n+                    getRequest().getAccessLevel(),\n+                    getRequest().getTargetIdentityId(),\n+                    getRequest().getKey()\n+            );\n+            this.file = new File(getRequest().getLocal()); //TODO: Add error handling if path is invalid\n \n-                } catch (Exception exception) {\n-                    onError.accept(new StorageException(\n-                        \"Issue uploading file\",\n-                        exception,\n-                        \"See included exception for more details and suggestions to fix.\"\n-                    ));\n+            try {\n+                if (getRequest().getMetadata().isEmpty()) {\n+                    transferObserver = storageService.uploadFile(serviceKey, file);\n+                } else {\n+                    transferObserver = storageService.uploadFile(serviceKey, file, getRequest().getMetadata());\n                 }\n \n-                transferObserver.setTransferListener(new TransferListener() {\n-                    @Override\n-                    public void onStateChanged(int transferId, TransferState state) {\n-                        // TODO: dispatch event to hub\n-                        if (TransferState.COMPLETED == state) {\n-                            onSuccess.accept(StorageUploadFileResult.fromKey(getRequest().getKey()));\n-                        }\n-                    }\n-\n-                    @SuppressWarnings(\"checkstyle:MagicNumber\")\n-                    @Override\n-                    public void onProgressChanged(int transferId, long bytesCurrent, long bytesTotal) {\n-                        @SuppressWarnings(\"unused\")\n-                        int percentage = (int) (bytesCurrent / bytesTotal * 100);\n-                        // TODO: dispatch event to hub\n-                    }\n-\n-                    @Override\n-                    public void onError(int transferId, Exception exception) {\n-                        onError.accept(new StorageException(\n-                            \"Something went wrong with your AWS S3 Storage upload file operation\",\n-                            exception,\n-                            \"See attached exception for more information and suggestions\"\n-                        ));\n-                    }\n-                });\n             } catch (Exception exception) {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0OTAzNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373249035", "bodyText": "In a separate CR, we should update the checkstyle rules once and for all so that can have empty one-line {} bodies on lambdas and constructors", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:29:28Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/utils/S3RequestUtils.java", "diffHunk": "@@ -23,29 +25,46 @@\n  * A utility to help form requests to S3.\n  */\n public final class S3RequestUtils {\n-    private S3RequestUtils() { }\n \n-    @SuppressWarnings(\"JavadocMethod\") // TODO: Add missing documentation\n+    @SuppressWarnings(\"WhitespaceAround\") // Looks better this way\n+    private S3RequestUtils() {}", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0OTExOA==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373249118", "bodyText": "This Java doc is AWSOME. Thanks.", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:29:48Z", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/utils/S3RequestUtils.java", "diffHunk": "@@ -23,29 +25,46 @@\n  * A utility to help form requests to S3.\n  */\n public final class S3RequestUtils {\n-    private S3RequestUtils() { }\n \n-    @SuppressWarnings(\"JavadocMethod\") // TODO: Add missing documentation\n+    @SuppressWarnings(\"WhitespaceAround\") // Looks better this way\n+    private S3RequestUtils() {}\n+\n+    /**\n+     * Amplify Storage implementation with S3 integrates access level", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI0OTk5Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373249996", "bodyText": "Might as well add hashCode(), equals(), and toString() on this to be safe. I see you are using it in collections (needs hash code) and using it in a jUnit assertion (needs equals).", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:32:59Z", "path": "core/src/main/java/com/amplifyframework/storage/StorageItem.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Date;\n+\n+/**\n+ * Used to store the data on each item in a storage.\n+ */\n+public final class StorageItem {", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1MDQ5NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373250494", "bodyText": "Ugh, yea. Does checkstyle not like it as:\n    })\n    .alignedToSameCol()\n\n?\nI think I have been getting around this by dropping the first argument to a newline and adding +4 ...\ndoAnswer(\n    invocation -> {\n    })\n    .when(observer)\n    .setTransfer(...)", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:34:51Z", "path": "aws-storage-s3/src/test/java/com/amplifyframework/storage/s3/StorageComponentTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.storage.StorageCategory;\n+import com.amplifyframework.storage.StorageCategoryConfiguration;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.StorageItem;\n+import com.amplifyframework.storage.result.StorageDownloadFileResult;\n+import com.amplifyframework.storage.result.StorageListResult;\n+import com.amplifyframework.storage.result.StorageRemoveResult;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.testutils.Await;\n+import com.amplifyframework.testutils.RandomString;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that storage category correctly invokes the methods via\n+ * AWSS3StoragePlugin.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class StorageComponentTest {\n+\n+    private StorageCategory storage;\n+    private StorageService storageService;\n+\n+    /**\n+     * Sets up Storage category by registering a mock AWSS3StoragePlugin\n+     * instance to Amplify and configuring.\n+     * @throws AmplifyException if Amplify fails to configure with mock\n+     *         Storage category configuration.\n+     */\n+    @Before\n+    public void setup() throws AmplifyException {\n+        this.storage = new StorageCategory();\n+        this.storageService = mock(StorageService.class);\n+        StorageService.Factory storageServiceFactory = (context, region, bucket) -> storageService;\n+        IdentityIdProvider identityIdProvider = RandomString::string;\n+        this.storage.addPlugin(new AWSS3StoragePlugin(storageServiceFactory, identityIdProvider));\n+        this.storage.configure(buildConfiguration(), mock(Context.class));\n+    }\n+\n+    private static StorageCategoryConfiguration buildConfiguration() {\n+        StorageCategoryConfiguration configuration = new StorageCategoryConfiguration();\n+        JSONObject storageJson;\n+        try {\n+            storageJson = new JSONObject()\n+                .put(\"plugins\", new JSONObject()\n+                    .put(\"awsS3StoragePlugin\", new JSONObject()\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"bucket\", \"hamburger-bucket\")));\n+            configuration.populateFromJSON(storageJson);\n+        } catch (JSONException jsonException) {\n+            throw new RuntimeException(jsonException);\n+        }\n+        return configuration;\n+    }\n+\n+    /**\n+     * Test that calling download file method from Storage category correctly\n+     * invokes the registered AWSS3StoragePlugin instance and returns a\n+     * {@link StorageDownloadFileResult} with correct file path.\n+     * @throws StorageException when an error is encountered while downloading\n+     */\n+    @Test\n+    public void testDownloadToFileGetsFile() throws StorageException {\n+        final String fromRemoteKey = RandomString.string();\n+        final String toLocalPath = RandomString.string();\n+\n+        // Since we use a mock StorageService, it will return a null\n+        // result by default. We need a non-null transfer observer.\n+        // One option is to mock that, too.\n+        TransferObserver observer = mock(TransferObserver.class);\n+        when(storageService.downloadToFile(anyString(), any(File.class)))\n+                .thenReturn(observer);\n+\n+        // Since we use a mock TransferObserver, it has no internal logic\n+        // to know to call back the listener! So, we simulate the success\n+        // callback, as part of our \"happy path\" test.\n+        doAnswer(invocation -> {\n+            TransferListener listener = invocation.getArgument(0);\n+            listener.onStateChanged(0, TransferState.COMPLETED);\n+            return null;\n+        })\n+                .when(observer)\n+                .setTransferListener(any(TransferListener.class));\n+\n+        StorageDownloadFileResult result =\n+                Await.<StorageDownloadFileResult, StorageException>result((onResult, onError) ->\n+                    storage.downloadFile(\n+                        fromRemoteKey,\n+                        toLocalPath,\n+                        onResult,\n+                        onError\n+                    )\n+                );\n+\n+        assertEquals(toLocalPath, result.getFile().toString());\n+    }\n+\n+    /**\n+     * Test that calling upload file method from Storage category correctly\n+     * invokes the registered AWSS3StoragePlugin instance and returns a\n+     * {@link StorageUploadFileResult} with correct remote key.\n+     * @throws StorageException when an error is encountered while uploading\n+     */\n+    @Test\n+    public void testUploadFileGetsKey() throws StorageException {\n+        final String toRemoteKey = RandomString.string();\n+        final String fromLocalPath = RandomString.string();\n+\n+        // Since we use a mock StorageService, it will return a null\n+        // result by default. We need a non-null transfer observer.\n+        // One option is to mock that, too.\n+        TransferObserver observer = mock(TransferObserver.class);\n+        when(storageService.uploadFile(anyString(), any(File.class)))\n+                .thenReturn(observer);\n+\n+        // Since we use a mock TransferObserver, it has no internal logic\n+        // to know to call back the listener! So, we simulate the success\n+        // callback, as part of our \"happy path\" test.\n+        doAnswer(invocation -> {\n+            TransferListener listener = invocation.getArgument(0);\n+            listener.onStateChanged(0, TransferState.COMPLETED);\n+            return null;\n+        })\n+                .when(observer)\n+                .setTransferListener(any(TransferListener.class));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1MTA5MQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373251091", "bodyText": "Ah yea, since you are using RobolectricTestRunner.class at this point, you might as well pass in a context from that framework, e.g. ApplicationProvider.getApplicationContext() from dependency.androidx.test.core", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:36:46Z", "path": "aws-storage-s3/src/test/java/com/amplifyframework/storage/s3/StorageComponentTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.storage.StorageCategory;\n+import com.amplifyframework.storage.StorageCategoryConfiguration;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.StorageItem;\n+import com.amplifyframework.storage.result.StorageDownloadFileResult;\n+import com.amplifyframework.storage.result.StorageListResult;\n+import com.amplifyframework.storage.result.StorageRemoveResult;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.testutils.Await;\n+import com.amplifyframework.testutils.RandomString;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that storage category correctly invokes the methods via\n+ * AWSS3StoragePlugin.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class StorageComponentTest {\n+\n+    private StorageCategory storage;\n+    private StorageService storageService;\n+\n+    /**\n+     * Sets up Storage category by registering a mock AWSS3StoragePlugin\n+     * instance to Amplify and configuring.\n+     * @throws AmplifyException if Amplify fails to configure with mock\n+     *         Storage category configuration.\n+     */\n+    @Before\n+    public void setup() throws AmplifyException {\n+        this.storage = new StorageCategory();\n+        this.storageService = mock(StorageService.class);\n+        StorageService.Factory storageServiceFactory = (context, region, bucket) -> storageService;\n+        IdentityIdProvider identityIdProvider = RandomString::string;\n+        this.storage.addPlugin(new AWSS3StoragePlugin(storageServiceFactory, identityIdProvider));\n+        this.storage.configure(buildConfiguration(), mock(Context.class));", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1MTQ0NA==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373251444", "bodyText": "I realized later, this might as well be:\ntry {\n    configuration.populateFromJson(new JSONObject()\n\nwithout all the extra ceremony (currently) to keep the JSONObject at method scope.", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:37:44Z", "path": "aws-storage-s3/src/test/java/com/amplifyframework/storage/s3/StorageComponentTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.storage.StorageCategory;\n+import com.amplifyframework.storage.StorageCategoryConfiguration;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.StorageItem;\n+import com.amplifyframework.storage.result.StorageDownloadFileResult;\n+import com.amplifyframework.storage.result.StorageListResult;\n+import com.amplifyframework.storage.result.StorageRemoveResult;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.testutils.Await;\n+import com.amplifyframework.testutils.RandomString;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that storage category correctly invokes the methods via\n+ * AWSS3StoragePlugin.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class StorageComponentTest {\n+\n+    private StorageCategory storage;\n+    private StorageService storageService;\n+\n+    /**\n+     * Sets up Storage category by registering a mock AWSS3StoragePlugin\n+     * instance to Amplify and configuring.\n+     * @throws AmplifyException if Amplify fails to configure with mock\n+     *         Storage category configuration.\n+     */\n+    @Before\n+    public void setup() throws AmplifyException {\n+        this.storage = new StorageCategory();\n+        this.storageService = mock(StorageService.class);\n+        StorageService.Factory storageServiceFactory = (context, region, bucket) -> storageService;\n+        IdentityIdProvider identityIdProvider = RandomString::string;\n+        this.storage.addPlugin(new AWSS3StoragePlugin(storageServiceFactory, identityIdProvider));\n+        this.storage.configure(buildConfiguration(), mock(Context.class));\n+    }\n+\n+    private static StorageCategoryConfiguration buildConfiguration() {\n+        StorageCategoryConfiguration configuration = new StorageCategoryConfiguration();\n+        JSONObject storageJson;\n+        try {\n+            storageJson = new JSONObject()", "originalCommit": null, "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1MjYzNg==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r373252636", "bodyText": "You could probably pull this out to a helper method, like:\nmockTransferListenerResult(TransferState.COMPLETED);\n\nprivate void mockTransferListenerResult(TransferState transferState) {\n    doAnswer(invocation -> {\n        TransferListener listener = invocation.getArgument(0);\n        listener.onStateChanged(0, transferState);\n        return null;\n    }).when(observer)\n      .setTransferListener(any(TransferListener.class));\n}\n\nIt'd be cool to add a few more tests that test what happens when the transfer state is FAILED, or whatever -- other states than COMPLETE.", "author": "jamesonwilliams", "createdAt": "2020-01-30T23:42:07Z", "path": "aws-storage-s3/src/test/java/com/amplifyframework/storage/s3/StorageComponentTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.storage.StorageCategory;\n+import com.amplifyframework.storage.StorageCategoryConfiguration;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.StorageItem;\n+import com.amplifyframework.storage.result.StorageDownloadFileResult;\n+import com.amplifyframework.storage.result.StorageListResult;\n+import com.amplifyframework.storage.result.StorageRemoveResult;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.testutils.Await;\n+import com.amplifyframework.testutils.RandomString;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.io.File;\n+import java.util.Collections;\n+import java.util.Date;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that storage category correctly invokes the methods via\n+ * AWSS3StoragePlugin.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class StorageComponentTest {\n+\n+    private StorageCategory storage;\n+    private StorageService storageService;\n+\n+    /**\n+     * Sets up Storage category by registering a mock AWSS3StoragePlugin\n+     * instance to Amplify and configuring.\n+     * @throws AmplifyException if Amplify fails to configure with mock\n+     *         Storage category configuration.\n+     */\n+    @Before\n+    public void setup() throws AmplifyException {\n+        this.storage = new StorageCategory();\n+        this.storageService = mock(StorageService.class);\n+        StorageService.Factory storageServiceFactory = (context, region, bucket) -> storageService;\n+        IdentityIdProvider identityIdProvider = RandomString::string;\n+        this.storage.addPlugin(new AWSS3StoragePlugin(storageServiceFactory, identityIdProvider));\n+        this.storage.configure(buildConfiguration(), mock(Context.class));\n+    }\n+\n+    private static StorageCategoryConfiguration buildConfiguration() {\n+        StorageCategoryConfiguration configuration = new StorageCategoryConfiguration();\n+        JSONObject storageJson;\n+        try {\n+            storageJson = new JSONObject()\n+                .put(\"plugins\", new JSONObject()\n+                    .put(\"awsS3StoragePlugin\", new JSONObject()\n+                        .put(\"region\", \"us-east-1\")\n+                        .put(\"bucket\", \"hamburger-bucket\")));\n+            configuration.populateFromJSON(storageJson);\n+        } catch (JSONException jsonException) {\n+            throw new RuntimeException(jsonException);\n+        }\n+        return configuration;\n+    }\n+\n+    /**\n+     * Test that calling download file method from Storage category correctly\n+     * invokes the registered AWSS3StoragePlugin instance and returns a\n+     * {@link StorageDownloadFileResult} with correct file path.\n+     * @throws StorageException when an error is encountered while downloading\n+     */\n+    @Test\n+    public void testDownloadToFileGetsFile() throws StorageException {\n+        final String fromRemoteKey = RandomString.string();\n+        final String toLocalPath = RandomString.string();\n+\n+        // Since we use a mock StorageService, it will return a null\n+        // result by default. We need a non-null transfer observer.\n+        // One option is to mock that, too.\n+        TransferObserver observer = mock(TransferObserver.class);\n+        when(storageService.downloadToFile(anyString(), any(File.class)))\n+                .thenReturn(observer);\n+\n+        // Since we use a mock TransferObserver, it has no internal logic\n+        // to know to call back the listener! So, we simulate the success\n+        // callback, as part of our \"happy path\" test.\n+        doAnswer(invocation -> {\n+            TransferListener listener = invocation.getArgument(0);\n+            listener.onStateChanged(0, TransferState.COMPLETED);\n+            return null;\n+        })\n+                .when(observer)\n+                .setTransferListener(any(TransferListener.class));", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNTYwNw==", "url": "https://github.com/aws-amplify/amplify-android/pull/254#discussion_r375435607", "bodyText": "Storage operations, as currently implemented, does not handle other transfer states. Not sure if that's by design.", "author": "raphkim", "createdAt": "2020-02-05T18:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzI1MjYzNg=="}], "type": "inlineReview"}, {"oid": "3157f745916c5d35ac141bef06e4b9ca83d00cd8", "url": "https://github.com/aws-amplify/amplify-android/commit/3157f745916c5d35ac141bef06e4b9ca83d00cd8", "message": "[WIP][aws-storage-s3] Start onboarding Storage component test\n\nUse the AWS S3 Storage Plugin, and exercise it through the\nStorageCategory.\n\nMock out all S3 SDK dependencies with Mockito (TransferUtility, etc).\n\nRefactor the storage plugin to use delegate interfaces for obtaining\nIdentity materials (IdentityIdProvider), and for creating storage\nservice (StorageService.Factory).", "committedDate": "2020-02-04T20:35:40Z", "type": "commit"}, {"oid": "6116795d1a0d4a2abba11234a58edd812d01be3a", "url": "https://github.com/aws-amplify/amplify-android/commit/6116795d1a0d4a2abba11234a58edd812d01be3a", "message": "Last few tweaks - test passes now, lol", "committedDate": "2020-02-04T20:35:40Z", "type": "commit"}, {"oid": "8d14e4c6f354a551ea08e6c09ed3c3d7f72e3d3b", "url": "https://github.com/aws-amplify/amplify-android/commit/8d14e4c6f354a551ea08e6c09ed3c3d7f72e3d3b", "message": "Add list and remove", "committedDate": "2020-02-04T20:35:40Z", "type": "commit"}, {"oid": "c46fa9f07fd0232c1d4aabf2efa3c1631f935562", "url": "https://github.com/aws-amplify/amplify-android/commit/c46fa9f07fd0232c1d4aabf2efa3c1631f935562", "message": "Major refactor of Storage", "committedDate": "2020-02-04T20:35:40Z", "type": "commit"}, {"oid": "c46fa9f07fd0232c1d4aabf2efa3c1631f935562", "url": "https://github.com/aws-amplify/amplify-android/commit/c46fa9f07fd0232c1d4aabf2efa3c1631f935562", "message": "Major refactor of Storage", "committedDate": "2020-02-04T20:35:40Z", "type": "forcePushed"}, {"oid": "b08ddae6152d31caa44f8b9d8f920a561e6c015b", "url": "https://github.com/aws-amplify/amplify-android/commit/b08ddae6152d31caa44f8b9d8f920a561e6c015b", "message": "Apply suggestions", "committedDate": "2020-02-04T22:45:11Z", "type": "commit"}]}