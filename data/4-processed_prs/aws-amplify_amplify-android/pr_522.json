{"pr_number": 522, "pr_title": "Fix Windows support in IDE integration", "pr_createdAt": "2020-05-24T17:22:04Z", "pr_url": "https://github.com/aws-amplify/amplify-android/pull/522", "timeline": [{"oid": "f85ca6ea394a824d8123c65b8e3e637ccbb008de", "url": "https://github.com/aws-amplify/amplify-android/commit/f85ca6ea394a824d8123c65b8e3e637ccbb008de", "message": "Android Studio Reformat (\u2325\u2318-L)", "committedDate": "2020-05-24T16:33:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1ODYyMA==", "url": "https://github.com/aws-amplify/amplify-android/pull/522#discussion_r429658620", "bodyText": "Should we update this file, across multiple plugin runs, in case the project config has changed in between? Either way, is it warranted to log an Info for this condition?", "author": "jamesonwilliams", "createdAt": "2020-05-24T17:37:37Z", "path": "amplify-tools/amplify-tools-gradle-plugin/src/main/groovy/com/amplifyframework/tools/gradle/plugin/AmplifyTools.groovy", "diffHunk": "@@ -5,228 +5,222 @@ import groovy.json.JsonSlurper\n import groovy.json.JsonOutput\n \n class AmplifyTools implements Plugin<Project> {\n-\tvoid apply(Project project) {\n-\t\tdef doesNodeExist = true\n-\t\tdef doesGradleConfigExist\n-\n-\t\t// profile name can be changed in amplify-gradle-config\n-\t\tdef profile = 'default'\n-\t\tdef accessKeyId = null\n-\t\tdef secretAccessKey = null\n-\t\tdef region = null\n-\t\tdef envName = 'amplify'\n-\t\tdef syncEnabled = 'true'\n-\n-\t\tproject.task('verifyNode') {\n-\t\t\ttry {\n-\t\t\t\tproject.exec {\n-\t\t\t\t\tcommandLine 'npx', '-v'\n-\t\t\t\t\tstandardOutput = new ByteArrayOutputStream()\n-\t\t\t\t}\n-\t\t\t} catch (commandLineFailure) {\n-\t\t\t\tdoesNodeExist = false\n-\t\t\t\tprintln(\"Node is not installed. Visit https://nodejs.org/en/download/ to install it\")\n-\t\t\t}\n-\t\t}\n-\n-\t\tproject.task('createAmplifyApp') {\n-\t\t\tdoesGradleConfigExist = project.file('amplify-gradle-config.json').isFile()\n-\t\t\tif (doesNodeExist && !doesGradleConfigExist) {\n-\t\t\t\tif(Os.isFamily(Os.FAMILY_WINDOWS)) {\n-\t\t\t\t\tproject.exec {\n-\t\t\t\t\t\tcommandLine 'npx.cmd', 'amplify-app', '--platform', 'android'\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tproject.exec {\n-\t\t\t\t\t\tcommandLine 'npx', 'amplify-app', '--platform', 'android'\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tproject.createAmplifyApp.dependsOn('verifyNode')\n-\n-\t\tproject.task('getConfig') {\n-\t\t\tdef inputConfigFile = project.file('amplify-gradle-config.json')\n-\t\t\tif (inputConfigFile.isFile()) {\n-\t\t\t\tdef configText = inputConfigFile.text\n-\t\t\t\tdef jsonSlurper = new JsonSlurper()\n-\t\t\t\tdef configJson = jsonSlurper.parseText(configText)\n-\t\t\t\tprofile = configJson.profile\n-\t\t\t\taccessKeyId = configJson.accessKeyId\n-\t\t\t\tsecretAccessKey = configJson.secretAccessKeyId\n-\t\t\t\tregion = configJson.region\n-\t\t\t\tenvName = configJson.envName\n-\t\t\t\tsyncEnabled = configJson.syncEnabled\n-\t\t\t}\n-\t\t}\n-\t\tproject.getConfig.dependsOn('createAmplifyApp')\n-\n-\t\tproject.task('datastoreSync') {\n-\t\t\tdef transformConfFile = project.file('amplify/backend/api/amplifyDatasource/transform.conf.json')\n-\t\t\tif (project.file('amplify/backend/api').exists()) {\n-\t\t\t\tnew File('amplify/backend/api').eachFileRecurse(groovy.io.FileType.FILES) {\n-\t\t\t\t\tif (it.name.endsWith('transform.conf.json')) {\n-\t\t\t\t\t\ttransformConfFile = project.file(it)\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (transformConfFile.isFile()) {\n-\t\t\t\tdef tranformConfText = transformConfFile.text\n-\t\t\t\tdef jsonSlurper = new JsonSlurper()\n-\t\t\t\tdef transformConfJson = jsonSlurper.parseText(tranformConfText)\n-\n-\t\t\t\tdef resolverConfigMap = [\n-\t\t\t\t\t'ResolverConfig': [\n-\t\t\t\t\t\t'project': [\n-\t\t\t\t\t\t\t'ConflictHandler'  : 'AUTOMERGE',\n-\t\t\t\t\t\t\t'ConflictDetection': 'VERSION'\n-\t\t\t\t\t\t]\n-\t\t\t\t\t]\n-\t\t\t\t]\n-\t\t\t\tif (!syncEnabled) {\n-\t\t\t\t\ttransformConfJson.remove('ResolverConfig')\n-\t\t\t\t} else if (!transformConfJson.ResolverConfig) {\n-\t\t\t\t\ttransformConfJson << resolverConfigMap\n-\t\t\t\t}\n-\t\t\t\tdef transformConfJsonStr = JsonOutput.toJson(transformConfJson)\n-\t\t\t\tdef transformConfJsonStrPretty = JsonOutput.prettyPrint(transformConfJsonStr)\n-\t\t\t\ttransformConfFile.write(transformConfJsonStrPretty)\n-\t\t\t}\n-\t\t}\n-\t\tproject.datastoreSync.dependsOn('getConfig')\n-\n-\t\tproject.task('modelgen') {\n-\t\t\tdoLast {\n-\t\t\t\tproject.exec { commandLine 'amplify', 'codegen', 'model' }\n-\t\t\t}\n-\t\t}\n-\t\tproject.modelgen.dependsOn('datastoreSync')\n-\n-\t\tproject.task('amplifyPush') {\n-\t\t\tdef AWSCLOUDFORMATIONCONFIG\n-\t\t\tif (!accessKeyId || !secretAccessKey || !region) {\n-\t\t\t\tAWSCLOUDFORMATIONCONFIG = [\n-\t\t\t\t\t'configLevel': 'project',\n-\t\t\t\t\t'useProfile': true,\n-\t\t\t\t\t'profileName': profile,\n-\t\t\t\t]\n-\t\t\t} else {\n-\t\t\t\tAWSCLOUDFORMATIONCONFIG = [\n-\t\t\t\t\t'configLevel':'project',\n-\t\t\t\t\t'useProfile': true,\n-\t\t\t\t\t'profileName':profile,\n-\t\t\t\t\t'accessKeyId':accessKeyId,\n-\t\t\t\t\t'secretAccessKey':secretAccessKey,\n-\t\t\t\t\t'region':region,\n-\t\t\t\t]\n-\t\t\t}\n-\n-\t\t\tdef AMPLIFY\n-\t\t\tif (!envName) {\n-\t\t\t\tAMPLIFY = JsonOutput.toJson([\n-\t\t\t\t\t'envName':'amplify',\n-\t\t\t\t])\n-\t\t\t} else {\n-\t\t\t\tAMPLIFY = JsonOutput.toJson([\n-\t\t\t\t\t'envName': envName,\n-\t\t\t\t])\n-\t\t\t}\n-\n-\t\t\tdef PROVIDERS = JsonOutput.toJson([\n-\t\t\t\t'awscloudformation': AWSCLOUDFORMATIONCONFIG,\n-\t\t\t])\n-\n-\t\t\tdoLast {\n-\t\t\t\tdef doesLocalEnvExist = project.file('./amplify/.config/local-env-info.json').exists()\n-\t\t\t\tif (doesLocalEnvExist) {\n-\t\t\t\t\tif(Os.isFamily(Os.FAMILY_WINDOWS)) {\n-\t\t\t\t\t\tproject.exec { commandLine 'amplify.cmd', 'push', '--yes' }\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tproject.exec { commandLine 'amplify', 'push', '--yes' }\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tif(Os.isFamily(Os.FAMILY_WINDOWS)) {\n-\t\t\t\t\t\tproject.exec {\n-\t\t\t\t\t\t\tcommandLine 'amplify.cmd', 'init', '--amplify', AMPLIFY, '--providers', PROVIDERS, '--yes'\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tproject.exec {\n-\t\t\t\t\t\t\tcommandLine 'amplify', 'init', '--amplify', AMPLIFY, '--providers', PROVIDERS, '--yes'\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tproject.amplifyPush.dependsOn('datastoreSync')\n-\n-\t\tproject.task('addModelgenToWorkspace') {\n-\t\t\tif(project.file('./.idea/workspace.xml').exists()) {\n-\t\t\t\t//Open XML file\n-\t\t\t\tdef xml = new XmlParser().parse('./.idea/workspace.xml')\n-\t\t\t\tdef RunManagerNode = xml.component.find { it.'@name' == 'RunManager' } as Node\n-\t\t\t\tdef configModelgenCheck = RunManagerNode.children().find { it.'@name' == 'modelgen' } as Node\n-\n-\t\t\t\tif (!configModelgenCheck) {\n-\t\t\t\t\t// Nested nodes for modelgen run configuration\n-\t\t\t\t\tdef configurationNode = new Node(null, 'configuration', [name: \"modelgen\", type:\"GradleRunConfiguration\", factoryName:\"Gradle\", nameIsGenerated:\"true\"])\n-\t\t\t\t\tdef externalSystemNode = new Node(configurationNode, 'ExternalSystemSettings')\n-\t\t\t\t\tdef executionOption = new Node(externalSystemNode, 'option', [name: \"executionName\"])\n-\t\t\t\t\tdef projectPathOption = new Node(externalSystemNode, 'option', [name: \"externalProjectPath\", value: \"\\$PROJECT_DIR\\$\"])\n-\t\t\t\t\tdef externalSystemIdOption = new Node(externalSystemNode, 'option', [name: \"externalSystemIdString\", value: \"GRADLE\"])\n-\t\t\t\t\tdef scriptParametersOption = new Node(externalSystemNode, 'option', [name: \"scriptParameters\", value: \"\"])\n-\t\t\t\t\tdef taskDescriptionsOption = new Node(externalSystemNode, 'option', [name: \"taskDescriptions\"])\n-\t\t\t\t\tdef descriptionList = new Node(taskDescriptionsOption, 'list')\n-\t\t\t\t\tdef taskNamesOption = new Node(externalSystemNode, 'option', [name: \"taskNames\"])\n-\t\t\t\t\tdef nameList = new Node(taskNamesOption, 'list')\n-\t\t\t\t\tdef modelgenOption = new Node(nameList, 'option', [value: \"modelgen\"])\n-\t\t\t\t\tdef vmOption = new Node(externalSystemNode, 'option', [name: \"vmOptions\", value: \"\"])\n-\t\t\t\t\tdef systemDebugNode = new Node(configurationNode, 'GradleScriptDebugEnabled', null, true)\n-\t\t\t\t\tdef methodNode = new Node(configurationNode, 'method', [v:\"2\"])\n-\n-\t\t\t\t\tRunManagerNode.append(configurationNode)\n-\n-\t\t\t\t\t//Save File\n-\t\t\t\t\tdef writer = new FileWriter('./.idea/workspace.xml')\n-\n-\t\t\t\t\t//Pretty print XML\n-\t\t\t\t\tgroovy.xml.XmlUtil.serialize(xml, writer)\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tproject.task('addAmplifyPushToWorkspace') {\n-\t\t\tif(project.file('./.idea/workspace.xml').exists()) {\n-\t\t\t\t//Open file\n-\t\t\t\tdef xml = new XmlParser().parse('./.idea/workspace.xml')\n-\t\t\t\tdef RunManagerNode = xml.component.find { it.'@name' == 'RunManager' } as Node\n-\t\t\t\tdef configAmplifyPushCheck = RunManagerNode.children().find { it.'@name' == 'amplifyPush' } as Node\n-\n-\t\t\t\tif (!configAmplifyPushCheck) {\n-\t\t\t\t\t// Nested nodes for amplifyPush run configuration\n-\t\t\t\t\tdef configurationNode = new Node(null, 'configuration', [name: \"amplifyPush\", type:\"GradleRunConfiguration\", factoryName:\"Gradle\", nameIsGenerated:\"true\"])\n-\t\t\t\t\tdef externalSystemNode = new Node(configurationNode, 'ExternalSystemSettings')\n-\t\t\t\t\tdef executionOption = new Node(externalSystemNode, 'option', [name: \"executionName\"])\n-\t\t\t\t\tdef projectPathOption = new Node(externalSystemNode, 'option', [name: \"externalProjectPath\", value: \"\\$PROJECT_DIR\\$\"])\n-\t\t\t\t\tdef externalSystemIdOption = new Node(externalSystemNode, 'option', [name: \"externalSystemIdString\", value: \"GRADLE\"])\n-\t\t\t\t\tdef scriptParametersOption = new Node(externalSystemNode, 'option', [name: \"scriptParameters\", value: \"\"])\n-\t\t\t\t\tdef taskDescriptionsOption = new Node(externalSystemNode, 'option', [name: \"taskDescriptions\"])\n-\t\t\t\t\tdef descriptionList = new Node(taskDescriptionsOption, 'list')\n-\t\t\t\t\tdef taskNamesOption = new Node(externalSystemNode, 'option', [name: \"taskNames\"])\n-\t\t\t\t\tdef nameList = new Node(taskNamesOption, 'list')\n-\t\t\t\t\tdef amplifyPushOption = new Node(nameList, 'option', [value: \"amplifyPush\"])\n-\t\t\t\t\tdef vmOption = new Node(externalSystemNode, 'option', [name: \"vmOptions\", value: \"\"])\n-\t\t\t\t\tdef systemDebugNode = new Node(configurationNode, 'GradleScriptDebugEnabled', null, true)\n-\t\t\t\t\tdef methodNode = new Node(configurationNode, 'method', [v:\"2\"])\n-\n-\t\t\t\t\tRunManagerNode.append(configurationNode)\n-\n-\t\t\t\t\t//Save File\n-\t\t\t\t\tdef writer = new FileWriter('./.idea/workspace.xml')\n-\n-\t\t\t\t\t//Pretty print XML\n-\t\t\t\t\tgroovy.xml.XmlUtil.serialize(xml, writer)\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    void apply(Project project) {\n+        // profile name can be changed in amplify-gradle-config\n+        def profile = 'default'\n+        def accessKeyId = null\n+        def secretAccessKey = null\n+        def region = null\n+        def envName = 'amplify'\n+        def syncEnabled = 'true'\n+        def gradleConfigFileName = 'amplify-gradle-config.json'\n+\n+        project.task('createAmplifyApp') {\n+            def npx = 'npx'\n+\n+            if (project.file(gradleConfigFileName).exists()) {\n+                return", "originalCommit": null, "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1OTA2Ng==", "url": "https://github.com/aws-amplify/amplify-android/pull/522#discussion_r429659066", "bodyText": "I don't think we want to run it each time. Since this runs amplify-app, it could conceivably clobber other state. I'm also slightly skeptical on logging as I think this will be noise as first time users won't encounter this state. I think!", "author": "jpignata", "createdAt": "2020-05-24T17:43:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY1ODYyMA=="}], "type": "inlineReview"}, {"oid": "17396d4aaef7ed8f8a66e5f026ea50709530612c", "url": "https://github.com/aws-amplify/amplify-android/commit/17396d4aaef7ed8f8a66e5f026ea50709530612c", "message": "Fix IDE integrations for Windows\n\nThe verifyNode task only worked on macOS and Linux, and really isn't\nnecessary anyway. Kill it, and instead just try to run the command. If\nit's missing, throw an error.\n\nAlso, throw an exception instead of printing the error. This has two\nadvantages: 1) the error is red and angry and obvious 2) the user can\ntry again via Android Studio without modifying the gradle.build file", "committedDate": "2020-05-24T17:47:57Z", "type": "commit"}, {"oid": "17396d4aaef7ed8f8a66e5f026ea50709530612c", "url": "https://github.com/aws-amplify/amplify-android/commit/17396d4aaef7ed8f8a66e5f026ea50709530612c", "message": "Fix IDE integrations for Windows\n\nThe verifyNode task only worked on macOS and Linux, and really isn't\nnecessary anyway. Kill it, and instead just try to run the command. If\nit's missing, throw an error.\n\nAlso, throw an exception instead of printing the error. This has two\nadvantages: 1) the error is red and angry and obvious 2) the user can\ntry again via Android Studio without modifying the gradle.build file", "committedDate": "2020-05-24T17:47:57Z", "type": "forcePushed"}, {"oid": "0a738e104d13a4429ef53a0f6aa2e8f1de7337e1", "url": "https://github.com/aws-amplify/amplify-android/commit/0a738e104d13a4429ef53a0f6aa2e8f1de7337e1", "message": "Fix modelgen\n\nThis also wouldn't work on Windows as it wasn't running\namplify.cmd.", "committedDate": "2020-05-24T18:07:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTQ2NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/522#discussion_r429665465", "bodyText": "Maybe we should say that npx was not found instead since node could be installed without npx", "author": "nikhname", "createdAt": "2020-05-24T19:03:05Z", "path": "amplify-tools/amplify-tools-gradle-plugin/src/main/groovy/com/amplifyframework/tools/gradle/plugin/AmplifyTools.groovy", "diffHunk": "@@ -5,228 +5,230 @@ import groovy.json.JsonSlurper\n import groovy.json.JsonOutput\n \n class AmplifyTools implements Plugin<Project> {\n-\tvoid apply(Project project) {\n-\t\tdef doesNodeExist = true\n-\t\tdef doesGradleConfigExist\n-\n-\t\t// profile name can be changed in amplify-gradle-config\n-\t\tdef profile = 'default'\n-\t\tdef accessKeyId = null\n-\t\tdef secretAccessKey = null\n-\t\tdef region = null\n-\t\tdef envName = 'amplify'\n-\t\tdef syncEnabled = 'true'\n-\n-\t\tproject.task('verifyNode') {\n-\t\t\ttry {\n-\t\t\t\tproject.exec {\n-\t\t\t\t\tcommandLine 'npx', '-v'\n-\t\t\t\t\tstandardOutput = new ByteArrayOutputStream()\n-\t\t\t\t}\n-\t\t\t} catch (commandLineFailure) {\n-\t\t\t\tdoesNodeExist = false\n-\t\t\t\tprintln(\"Node is not installed. Visit https://nodejs.org/en/download/ to install it\")\n-\t\t\t}\n-\t\t}\n-\n-\t\tproject.task('createAmplifyApp') {\n-\t\t\tdoesGradleConfigExist = project.file('amplify-gradle-config.json').isFile()\n-\t\t\tif (doesNodeExist && !doesGradleConfigExist) {\n-\t\t\t\tif(Os.isFamily(Os.FAMILY_WINDOWS)) {\n-\t\t\t\t\tproject.exec {\n-\t\t\t\t\t\tcommandLine 'npx.cmd', 'amplify-app', '--platform', 'android'\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tproject.exec {\n-\t\t\t\t\t\tcommandLine 'npx', 'amplify-app', '--platform', 'android'\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tproject.createAmplifyApp.dependsOn('verifyNode')\n-\n-\t\tproject.task('getConfig') {\n-\t\t\tdef inputConfigFile = project.file('amplify-gradle-config.json')\n-\t\t\tif (inputConfigFile.isFile()) {\n-\t\t\t\tdef configText = inputConfigFile.text\n-\t\t\t\tdef jsonSlurper = new JsonSlurper()\n-\t\t\t\tdef configJson = jsonSlurper.parseText(configText)\n-\t\t\t\tprofile = configJson.profile\n-\t\t\t\taccessKeyId = configJson.accessKeyId\n-\t\t\t\tsecretAccessKey = configJson.secretAccessKeyId\n-\t\t\t\tregion = configJson.region\n-\t\t\t\tenvName = configJson.envName\n-\t\t\t\tsyncEnabled = configJson.syncEnabled\n-\t\t\t}\n-\t\t}\n-\t\tproject.getConfig.dependsOn('createAmplifyApp')\n-\n-\t\tproject.task('datastoreSync') {\n-\t\t\tdef transformConfFile = project.file('amplify/backend/api/amplifyDatasource/transform.conf.json')\n-\t\t\tif (project.file('amplify/backend/api').exists()) {\n-\t\t\t\tnew File('amplify/backend/api').eachFileRecurse(groovy.io.FileType.FILES) {\n-\t\t\t\t\tif (it.name.endsWith('transform.conf.json')) {\n-\t\t\t\t\t\ttransformConfFile = project.file(it)\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (transformConfFile.isFile()) {\n-\t\t\t\tdef tranformConfText = transformConfFile.text\n-\t\t\t\tdef jsonSlurper = new JsonSlurper()\n-\t\t\t\tdef transformConfJson = jsonSlurper.parseText(tranformConfText)\n-\n-\t\t\t\tdef resolverConfigMap = [\n-\t\t\t\t\t'ResolverConfig': [\n-\t\t\t\t\t\t'project': [\n-\t\t\t\t\t\t\t'ConflictHandler'  : 'AUTOMERGE',\n-\t\t\t\t\t\t\t'ConflictDetection': 'VERSION'\n-\t\t\t\t\t\t]\n-\t\t\t\t\t]\n-\t\t\t\t]\n-\t\t\t\tif (!syncEnabled) {\n-\t\t\t\t\ttransformConfJson.remove('ResolverConfig')\n-\t\t\t\t} else if (!transformConfJson.ResolverConfig) {\n-\t\t\t\t\ttransformConfJson << resolverConfigMap\n-\t\t\t\t}\n-\t\t\t\tdef transformConfJsonStr = JsonOutput.toJson(transformConfJson)\n-\t\t\t\tdef transformConfJsonStrPretty = JsonOutput.prettyPrint(transformConfJsonStr)\n-\t\t\t\ttransformConfFile.write(transformConfJsonStrPretty)\n-\t\t\t}\n-\t\t}\n-\t\tproject.datastoreSync.dependsOn('getConfig')\n-\n-\t\tproject.task('modelgen') {\n-\t\t\tdoLast {\n-\t\t\t\tproject.exec { commandLine 'amplify', 'codegen', 'model' }\n-\t\t\t}\n-\t\t}\n-\t\tproject.modelgen.dependsOn('datastoreSync')\n-\n-\t\tproject.task('amplifyPush') {\n-\t\t\tdef AWSCLOUDFORMATIONCONFIG\n-\t\t\tif (!accessKeyId || !secretAccessKey || !region) {\n-\t\t\t\tAWSCLOUDFORMATIONCONFIG = [\n-\t\t\t\t\t'configLevel': 'project',\n-\t\t\t\t\t'useProfile': true,\n-\t\t\t\t\t'profileName': profile,\n-\t\t\t\t]\n-\t\t\t} else {\n-\t\t\t\tAWSCLOUDFORMATIONCONFIG = [\n-\t\t\t\t\t'configLevel':'project',\n-\t\t\t\t\t'useProfile': true,\n-\t\t\t\t\t'profileName':profile,\n-\t\t\t\t\t'accessKeyId':accessKeyId,\n-\t\t\t\t\t'secretAccessKey':secretAccessKey,\n-\t\t\t\t\t'region':region,\n-\t\t\t\t]\n-\t\t\t}\n-\n-\t\t\tdef AMPLIFY\n-\t\t\tif (!envName) {\n-\t\t\t\tAMPLIFY = JsonOutput.toJson([\n-\t\t\t\t\t'envName':'amplify',\n-\t\t\t\t])\n-\t\t\t} else {\n-\t\t\t\tAMPLIFY = JsonOutput.toJson([\n-\t\t\t\t\t'envName': envName,\n-\t\t\t\t])\n-\t\t\t}\n-\n-\t\t\tdef PROVIDERS = JsonOutput.toJson([\n-\t\t\t\t'awscloudformation': AWSCLOUDFORMATIONCONFIG,\n-\t\t\t])\n-\n-\t\t\tdoLast {\n-\t\t\t\tdef doesLocalEnvExist = project.file('./amplify/.config/local-env-info.json').exists()\n-\t\t\t\tif (doesLocalEnvExist) {\n-\t\t\t\t\tif(Os.isFamily(Os.FAMILY_WINDOWS)) {\n-\t\t\t\t\t\tproject.exec { commandLine 'amplify.cmd', 'push', '--yes' }\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tproject.exec { commandLine 'amplify', 'push', '--yes' }\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tif(Os.isFamily(Os.FAMILY_WINDOWS)) {\n-\t\t\t\t\t\tproject.exec {\n-\t\t\t\t\t\t\tcommandLine 'amplify.cmd', 'init', '--amplify', AMPLIFY, '--providers', PROVIDERS, '--yes'\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tproject.exec {\n-\t\t\t\t\t\t\tcommandLine 'amplify', 'init', '--amplify', AMPLIFY, '--providers', PROVIDERS, '--yes'\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tproject.amplifyPush.dependsOn('datastoreSync')\n-\n-\t\tproject.task('addModelgenToWorkspace') {\n-\t\t\tif(project.file('./.idea/workspace.xml').exists()) {\n-\t\t\t\t//Open XML file\n-\t\t\t\tdef xml = new XmlParser().parse('./.idea/workspace.xml')\n-\t\t\t\tdef RunManagerNode = xml.component.find { it.'@name' == 'RunManager' } as Node\n-\t\t\t\tdef configModelgenCheck = RunManagerNode.children().find { it.'@name' == 'modelgen' } as Node\n-\n-\t\t\t\tif (!configModelgenCheck) {\n-\t\t\t\t\t// Nested nodes for modelgen run configuration\n-\t\t\t\t\tdef configurationNode = new Node(null, 'configuration', [name: \"modelgen\", type:\"GradleRunConfiguration\", factoryName:\"Gradle\", nameIsGenerated:\"true\"])\n-\t\t\t\t\tdef externalSystemNode = new Node(configurationNode, 'ExternalSystemSettings')\n-\t\t\t\t\tdef executionOption = new Node(externalSystemNode, 'option', [name: \"executionName\"])\n-\t\t\t\t\tdef projectPathOption = new Node(externalSystemNode, 'option', [name: \"externalProjectPath\", value: \"\\$PROJECT_DIR\\$\"])\n-\t\t\t\t\tdef externalSystemIdOption = new Node(externalSystemNode, 'option', [name: \"externalSystemIdString\", value: \"GRADLE\"])\n-\t\t\t\t\tdef scriptParametersOption = new Node(externalSystemNode, 'option', [name: \"scriptParameters\", value: \"\"])\n-\t\t\t\t\tdef taskDescriptionsOption = new Node(externalSystemNode, 'option', [name: \"taskDescriptions\"])\n-\t\t\t\t\tdef descriptionList = new Node(taskDescriptionsOption, 'list')\n-\t\t\t\t\tdef taskNamesOption = new Node(externalSystemNode, 'option', [name: \"taskNames\"])\n-\t\t\t\t\tdef nameList = new Node(taskNamesOption, 'list')\n-\t\t\t\t\tdef modelgenOption = new Node(nameList, 'option', [value: \"modelgen\"])\n-\t\t\t\t\tdef vmOption = new Node(externalSystemNode, 'option', [name: \"vmOptions\", value: \"\"])\n-\t\t\t\t\tdef systemDebugNode = new Node(configurationNode, 'GradleScriptDebugEnabled', null, true)\n-\t\t\t\t\tdef methodNode = new Node(configurationNode, 'method', [v:\"2\"])\n-\n-\t\t\t\t\tRunManagerNode.append(configurationNode)\n-\n-\t\t\t\t\t//Save File\n-\t\t\t\t\tdef writer = new FileWriter('./.idea/workspace.xml')\n-\n-\t\t\t\t\t//Pretty print XML\n-\t\t\t\t\tgroovy.xml.XmlUtil.serialize(xml, writer)\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\tproject.task('addAmplifyPushToWorkspace') {\n-\t\t\tif(project.file('./.idea/workspace.xml').exists()) {\n-\t\t\t\t//Open file\n-\t\t\t\tdef xml = new XmlParser().parse('./.idea/workspace.xml')\n-\t\t\t\tdef RunManagerNode = xml.component.find { it.'@name' == 'RunManager' } as Node\n-\t\t\t\tdef configAmplifyPushCheck = RunManagerNode.children().find { it.'@name' == 'amplifyPush' } as Node\n-\n-\t\t\t\tif (!configAmplifyPushCheck) {\n-\t\t\t\t\t// Nested nodes for amplifyPush run configuration\n-\t\t\t\t\tdef configurationNode = new Node(null, 'configuration', [name: \"amplifyPush\", type:\"GradleRunConfiguration\", factoryName:\"Gradle\", nameIsGenerated:\"true\"])\n-\t\t\t\t\tdef externalSystemNode = new Node(configurationNode, 'ExternalSystemSettings')\n-\t\t\t\t\tdef executionOption = new Node(externalSystemNode, 'option', [name: \"executionName\"])\n-\t\t\t\t\tdef projectPathOption = new Node(externalSystemNode, 'option', [name: \"externalProjectPath\", value: \"\\$PROJECT_DIR\\$\"])\n-\t\t\t\t\tdef externalSystemIdOption = new Node(externalSystemNode, 'option', [name: \"externalSystemIdString\", value: \"GRADLE\"])\n-\t\t\t\t\tdef scriptParametersOption = new Node(externalSystemNode, 'option', [name: \"scriptParameters\", value: \"\"])\n-\t\t\t\t\tdef taskDescriptionsOption = new Node(externalSystemNode, 'option', [name: \"taskDescriptions\"])\n-\t\t\t\t\tdef descriptionList = new Node(taskDescriptionsOption, 'list')\n-\t\t\t\t\tdef taskNamesOption = new Node(externalSystemNode, 'option', [name: \"taskNames\"])\n-\t\t\t\t\tdef nameList = new Node(taskNamesOption, 'list')\n-\t\t\t\t\tdef amplifyPushOption = new Node(nameList, 'option', [value: \"amplifyPush\"])\n-\t\t\t\t\tdef vmOption = new Node(externalSystemNode, 'option', [name: \"vmOptions\", value: \"\"])\n-\t\t\t\t\tdef systemDebugNode = new Node(configurationNode, 'GradleScriptDebugEnabled', null, true)\n-\t\t\t\t\tdef methodNode = new Node(configurationNode, 'method', [v:\"2\"])\n-\n-\t\t\t\t\tRunManagerNode.append(configurationNode)\n-\n-\t\t\t\t\t//Save File\n-\t\t\t\t\tdef writer = new FileWriter('./.idea/workspace.xml')\n-\n-\t\t\t\t\t//Pretty print XML\n-\t\t\t\t\tgroovy.xml.XmlUtil.serialize(xml, writer)\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n+    void apply(Project project) {\n+        // profile name can be changed in amplify-gradle-config\n+        def profile = 'default'\n+        def accessKeyId = null\n+        def secretAccessKey = null\n+        def region = null\n+        def envName = 'amplify'\n+        def syncEnabled = 'true'\n+        def gradleConfigFileName = 'amplify-gradle-config.json'\n+\n+        project.task('createAmplifyApp') {\n+            def npx = 'npx'\n+\n+            if (project.file(gradleConfigFileName).exists()) {\n+                return\n+            }\n+\n+            if (Os.isFamily(Os.FAMILY_WINDOWS)) {\n+                npx += '.cmd'\n+            }\n+\n+            try {\n+                project.exec {\n+                    commandLine npx, 'amplify-app', '--platform', 'android'\n+                }\n+            } catch (commandLineFailure) {\n+                throw new Exception('Node.js is not installed. Visit https://nodejs.org/en/download/ to install it.')", "originalCommit": "0a738e104d13a4429ef53a0f6aa2e8f1de7337e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTU0NQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/522#discussion_r429665545", "bodyText": "Hm, I don't agree, because most Android developers don't know what npx is. We have a better shot if we say node.js at comprehension.", "author": "jpignata", "createdAt": "2020-05-24T19:04:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMDIzNQ==", "url": "https://github.com/aws-amplify/amplify-android/pull/522#discussion_r429700235", "bodyText": "Does npx come bundled with node? I thought my laptop had been in a state at one point where I had node, but not npx?", "author": "jamesonwilliams", "createdAt": "2020-05-25T01:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcwMTc1Mw==", "url": "https://github.com/aws-amplify/amplify-android/pull/522#discussion_r429701753", "bodyText": "npx comes bundled with npm (after version 5.something), which comes bundled with node. In Node 10+, all users who have node installed should also have npx installed. I tested this on a new system with Windows, installed Node 12 installed, and have npx available.", "author": "jpignata", "createdAt": "2020-05-25T01:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTY2NTQ2NQ=="}], "type": "inlineReview"}, {"oid": "cd4d97c85e6b64147723450f69a0ec8887cac790", "url": "https://github.com/aws-amplify/amplify-android/commit/cd4d97c85e6b64147723450f69a0ec8887cac790", "message": "Fix amplifyPush\n\nThis also didn't work! In order for this to run properly on Windows, the\nJSON documents passed in via the command-line arguments must be escaped.\nAlso did some minor refactoring.", "committedDate": "2020-05-24T20:08:41Z", "type": "commit"}, {"oid": "111230d40175f92358a9556586b99a906a2972c2", "url": "https://github.com/aws-amplify/amplify-android/commit/111230d40175f92358a9556586b99a906a2972c2", "message": "Set VERSION_NAME to master\n\nThis will allow local debugging via publishToMavenLocal.", "committedDate": "2020-05-24T20:08:41Z", "type": "commit"}, {"oid": "111230d40175f92358a9556586b99a906a2972c2", "url": "https://github.com/aws-amplify/amplify-android/commit/111230d40175f92358a9556586b99a906a2972c2", "message": "Set VERSION_NAME to master\n\nThis will allow local debugging via publishToMavenLocal.", "committedDate": "2020-05-24T20:08:41Z", "type": "forcePushed"}]}