{"pr_number": 2514, "pr_title": "Add system-time WMs design", "pr_createdAt": "2020-09-10T13:28:22Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2514", "timeline": [{"oid": "b8401b4da7672b12963b9ae74f360c321352133a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b8401b4da7672b12963b9ae74f360c321352133a", "message": "Add system-time WMs design", "committedDate": "2020-09-10T13:27:44Z", "type": "commit"}, {"oid": "f99d97c6e9e9c18bb332153be15a8e62c2ad1a5c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f99d97c6e9e9c18bb332153be15a8e62c2ad1a5c", "message": "Touch up wording", "committedDate": "2020-09-10T14:43:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4NzczMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2514#discussion_r486787732", "bodyText": "In newer versions (since the website) we no longer have any documentation on WatermarkPolicy, so  for non-experts it might not be obvious how they can make use of it. Maybe, at least, add some links to javadoc here or explain a bit more?", "author": "jbartok", "createdAt": "2020-09-11T05:49:16Z", "path": "site/docs/design-docs/013-system-time-watermarks.md", "diffHunk": "@@ -0,0 +1,50 @@\n+---\n+title: 013 - Resolving Sparse Events Issue with System-Time Watermarks\n+description: Make the time progress independently from the event rate\n+---\n+\n+*Target Release*: 4.3\n+\n+## The _Sparse Events Issue_\n+\n+When using event time, time progresses only through the ingestion of new\n+events. If the events are sparse, time will effectively stop until a\n+newer event arrives. This causes high latency for time-sensitive\n+operations such as window aggregation. In addition, Jet tracks event\n+time for every source partition separately, and if just one partition\n+has sparse events, time progress in the whole job is hindered.\n+\n+## Ingestion Time\n+\n+When you use `withIngestionTime()` on the pipeline, Jet won't extract\n+the timestamp from the event, but will set it according to the local\n+system time on the server. This way of assigning timestamps is inferior\n+because the event isn't associated with the time at which it occurred,\n+but at which Jet received it, causing inaccuracy in the calculations. A\n+specifically bad problem is that, if the job restarts due to a crash,\n+Jet must receive again some of the events it already received and\n+processed before the crash. These events will now get different\n+timestamps, affecting a different piece of the aggregation state.\n+\n+On the other hand, this timestamping approach provides the best latency:\n+the job will never wait for delayed items, there's no need to allow any\n+event lag as with event-time processing.\n+\n+## The Improvement\n+\n+We first implemented `WatermarkPolicy.limitingRealTimeLag()`. This\n+policy emits a watermark that lags behind the system clock by a fixed\n+amount. This policy doesn't depend on the events processed, it\n+depends solely on the system clock. Currently, this policy is available\n+only in Core API.", "originalCommit": "f99d97c6e9e9c18bb332153be15a8e62c2ad1a5c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc5NjQ0Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2514#discussion_r486796447", "bodyText": "This is a design document for us and for expert users...\nDocumentation for normal users is in Javadoc.\nAnd for non-experts stumbling over this doc some exposure to internals is good...", "author": "viliam-durina", "createdAt": "2020-09-11T06:15:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc4NzczMg=="}], "type": "inlineReview"}]}