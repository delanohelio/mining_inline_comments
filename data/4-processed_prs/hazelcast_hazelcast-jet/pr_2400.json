{"pr_number": 2400, "pr_title": "Add 4.2 docs", "pr_createdAt": "2020-07-13T09:09:19Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2400", "timeline": [{"oid": "1430d2b01fb210449ea4a549162e7004169c4506", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1430d2b01fb210449ea4a549162e7004169c4506", "message": "remove extra text from release notes", "committedDate": "2020-07-13T09:06:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyMzU3OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453523579", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:38:22Z", "path": "site/website/versioned_docs/version-4.2/enterprise/operator-openshift.md", "diffHunk": "@@ -0,0 +1,329 @@\n+---\n+title: Installation on Red Hat OpenShift\n+description: Step-by-step guide to install Hazelcast Jet Enteprise Operator on Red Hat Openshift and deploying a sample job.\n+id: version-4.2-operator-openshift\n+original_id: operator-openshift\n+---\n+\n+[OpenShift](https://www.openshift.com/learn/what-is-openshift) is a\n+hybrid cloud, enterprise Kubernetes application platform from RedHat.\n+[Red Hat Marketplace](https://marketplace.redhat.com/en-us), an open\n+cloud marketplace that enables discovery and access to a certified\n+software which is available to deploy on any Red Hat OpenShift cluster.\n+\n+[Hazelcast Jet\n+Enterprise](https://marketplace.redhat.com/en-us/products/hazelcast-jet)\n+is available to you on Red Hat Marketplace as a Certified Enterprise\n+Ready Software.\n+\n+## Prerequisites\n+\n+- A running OpenShift cluster with administration rights.\n+\n+## How to install Operator from Developer Catalog\n+\n+Hazelcast Jet Enterprise operator needs to be installed to create and\n+manage Hazelcast Jet Enterprise clusters.\n+\n+To install the operator, navigate to the OperatorHub page under\n+Operators section in the Administrator view.\n+\n+![OperatorHub](assets/operatorhub.png)\n+\n+Find the `Hazelcast Jet Enterprise Operator` in the catalog either by\n+scrolling down or you can filter by typing in `jet`\n+\n+![Hazelcast Jet Enterprise Operator](assets/operatorhub-jet.png)\n+\n+Click to `Hazelcast Jet Enterprise Operator` card to continue the\n+installation process.\n+\n+![Hazelcast Jet Enterprise Operator Install\n+Screen](assets/operatorhub-jet-install.png)\n+\n+Click to `Install` button. When clicked you'd see a screen with various\n+configuration options regarding the installation.\n+\n+### Installing for a specific namespace\n+\n+Hazelcast Jet Enterprise Operator can be installed to a specific\n+namespace and operates only in that namespace. It cannot respond to\n+requests from any other namespace.\n+\n+![Single Namespace](assets/operatorhub-jet-install-single-ns.png)\n+\n+### Installing for all namespaces\n+\n+Hazelcast Jet Enterprise Operator can be installed to all namespaces and\n+operates Hazelcast Jet Enterprise clusters in any namespace on the\n+cluster. In this mode, operator will be installed to\n+`openshift-operators` namespace, but it will listen for changes in all\n+namespaces.\n+\n+![All Namespaces](assets/operatorhub-jet-install-all-ns.png)\n+\n+### Finishing the Installation\n+\n+After you've selected the installation mode, then click to `Subscribe`\n+button, it will create necessary resources to make the operator work\n+properly. You should be able to see `Hazelcast Jet Enterprise` operator\n+in the `Installed Operators` section under `Operators` menu.\n+\n+![Subscribe](assets/operatorhub-jet-installed.png)\n+\n+> Note: In this example we choose to install the operator to all\n+namespaces so it's installed in the `openshift-operators` namespace.\n+\n+## Creating the Cluster\n+\n+Let's switch to the `Developer` view and follow the instructions below\n+to create a Hazelcast Jet Enterprise cluster.  \n+\n+### Creating a License Key Secret\n+\n+You'll need a license key to start a Hazelcast Jet Enterprise cluster.\n+To pass the license key to the cluster to be started, we need to create\n+a `Secret` object which holds our license key.\n+\n+To create a Licese Key Secret, click to `Add` link from left menu then\n+click `From YAML` card.\n+\n+```yaml\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: jet-license-key-secret\n+stringData:\n+  key: YOUR_LICENSE_KEY\n+```\n+\n+Paste the YAML content above with your License Key replaced to the\n+editor on the screen like below and click `Create` button.\n+\n+![Create License Key Secret](assets/developer-jet-license.png)\n+\n+Alternatively, if you do have an access to the `oc` command line\n+utility, you can run the command below:\n+\n+```bash\n+oc create secret generic jet-license-key-secret --from-literal=key=your-license-key\n+```\n+\n+Click to `Add` from left menu then click `From Catalog` card.\n+\n+![Developer View](assets/developer.png)\n+\n+Find the `Hazelcast Jet Enterprise` in the catalog either by scrolling\n+down or you can filter items by typing in `jet`\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet.png)\n+\n+Click to `Hazelcast Jet Enterprise` card, then click to `Create` button\n+on the new section.\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-install.png)\n+\n+It will show a YAML editor like below, you can configure the Hazelcast\n+Jet Enterprise cluster here. Default configuration will create a 2 node\n+cluster.\n+\n+You can use [this\n+file](https://github.com/hazelcast/hazelcast-jet-operator/blob/master/hazelcast-jet-enterprise-operator/hazelcast-jet-enterprise-full.yaml)\n+for configuration options reference.\n+\n+Click to `Create` button at the bottom to create the cluster.\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-install-2.png)\n+\n+> Note that we are passing in the name of secret which we created\n+earlier that holds our license key information in the\n+`jet.licenseKeySecretName` property.\n+\n+You should be able to see the cluster has been created like below:\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-installed.png)\n+\n+If you navigate to the `Topology` view from the left menu, you can see\n+that Hazelcast Jet Enterprise and Hazelcast Jet Management Center\n+deployment/statefulsets has been created by Hazelcast Jet Enterprise\n+Operator.\n+\n+![Topology View](assets/developer-jet-topology.png)\n+\n+## Checking the Logs\n+\n+### Check Hazelcast Jet Enterprise Logs\n+\n+Navigate to the `Topology` view and click to the resource which has the\n+`hazelcast-jet-enterprise` suffix. It will show a section on the right\n+which shows the details of that resource like below:\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology.png)\n+\n+Then click to `View logs` link to see the logs of corresponding pod.\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology-logs.png)\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+Enterprise cluster formed successfully.\n+\n+### Check Hazelcast Jet Management Center Logs\n+\n+Navigate to the `Topology` view and click to the resource which has the\n+`hazelcast-jet-enterprise-management-center` suffix. It will show a\n+section on the right which shows the details of that resource like\n+below:\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology-mc.png)\n+\n+Then click to `View logs` link to see the logs of corresponding pod.\n+\n+![Hazelcast Jet Management Center\n+Logs](assets/developer-jet-topology-mc-logs.png)\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+Enterprise cluster and Management Center application connected to it\n+successfully.\n+\n+## Submitting the Sample Job\n+\n+To access this cluster inside Openshift environment from outside, we\n+need do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll make port forwarding from a Hazelcast Jet\n+Enterprise pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded. We will retrieve the pod name from the\n+`Topology` view. Click to the `jet-hazelcast-jet-enterprise` stateful\n+set, a new panel will be shown on the right side. You can use any pods\n+listed in the `Pods` section.\n+\n+>If you've installed operator into a specific namespace, switch to that\n+>namespace first with the following:\n+>\n+>```bash\n+>$ oc project my-namespace\n+>Now using project \"my-namespace\" on server \"XXXXXX\"\n+>```\n+\n+Run the command below with to make port forwarding happen:\n+\n+```bash\n+$ oc port-forward pods/jet-hazelcast-jet-enterprise-0 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyMzYzOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453523638", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:38:28Z", "path": "site/website/versioned_docs/version-4.2/enterprise/operator-openshift.md", "diffHunk": "@@ -0,0 +1,329 @@\n+---\n+title: Installation on Red Hat OpenShift\n+description: Step-by-step guide to install Hazelcast Jet Enteprise Operator on Red Hat Openshift and deploying a sample job.\n+id: version-4.2-operator-openshift\n+original_id: operator-openshift\n+---\n+\n+[OpenShift](https://www.openshift.com/learn/what-is-openshift) is a\n+hybrid cloud, enterprise Kubernetes application platform from RedHat.\n+[Red Hat Marketplace](https://marketplace.redhat.com/en-us), an open\n+cloud marketplace that enables discovery and access to a certified\n+software which is available to deploy on any Red Hat OpenShift cluster.\n+\n+[Hazelcast Jet\n+Enterprise](https://marketplace.redhat.com/en-us/products/hazelcast-jet)\n+is available to you on Red Hat Marketplace as a Certified Enterprise\n+Ready Software.\n+\n+## Prerequisites\n+\n+- A running OpenShift cluster with administration rights.\n+\n+## How to install Operator from Developer Catalog\n+\n+Hazelcast Jet Enterprise operator needs to be installed to create and\n+manage Hazelcast Jet Enterprise clusters.\n+\n+To install the operator, navigate to the OperatorHub page under\n+Operators section in the Administrator view.\n+\n+![OperatorHub](assets/operatorhub.png)\n+\n+Find the `Hazelcast Jet Enterprise Operator` in the catalog either by\n+scrolling down or you can filter by typing in `jet`\n+\n+![Hazelcast Jet Enterprise Operator](assets/operatorhub-jet.png)\n+\n+Click to `Hazelcast Jet Enterprise Operator` card to continue the\n+installation process.\n+\n+![Hazelcast Jet Enterprise Operator Install\n+Screen](assets/operatorhub-jet-install.png)\n+\n+Click to `Install` button. When clicked you'd see a screen with various\n+configuration options regarding the installation.\n+\n+### Installing for a specific namespace\n+\n+Hazelcast Jet Enterprise Operator can be installed to a specific\n+namespace and operates only in that namespace. It cannot respond to\n+requests from any other namespace.\n+\n+![Single Namespace](assets/operatorhub-jet-install-single-ns.png)\n+\n+### Installing for all namespaces\n+\n+Hazelcast Jet Enterprise Operator can be installed to all namespaces and\n+operates Hazelcast Jet Enterprise clusters in any namespace on the\n+cluster. In this mode, operator will be installed to\n+`openshift-operators` namespace, but it will listen for changes in all\n+namespaces.\n+\n+![All Namespaces](assets/operatorhub-jet-install-all-ns.png)\n+\n+### Finishing the Installation\n+\n+After you've selected the installation mode, then click to `Subscribe`\n+button, it will create necessary resources to make the operator work\n+properly. You should be able to see `Hazelcast Jet Enterprise` operator\n+in the `Installed Operators` section under `Operators` menu.\n+\n+![Subscribe](assets/operatorhub-jet-installed.png)\n+\n+> Note: In this example we choose to install the operator to all\n+namespaces so it's installed in the `openshift-operators` namespace.\n+\n+## Creating the Cluster\n+\n+Let's switch to the `Developer` view and follow the instructions below\n+to create a Hazelcast Jet Enterprise cluster.  \n+\n+### Creating a License Key Secret\n+\n+You'll need a license key to start a Hazelcast Jet Enterprise cluster.\n+To pass the license key to the cluster to be started, we need to create\n+a `Secret` object which holds our license key.\n+\n+To create a Licese Key Secret, click to `Add` link from left menu then\n+click `From YAML` card.\n+\n+```yaml\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: jet-license-key-secret\n+stringData:\n+  key: YOUR_LICENSE_KEY\n+```\n+\n+Paste the YAML content above with your License Key replaced to the\n+editor on the screen like below and click `Create` button.\n+\n+![Create License Key Secret](assets/developer-jet-license.png)\n+\n+Alternatively, if you do have an access to the `oc` command line\n+utility, you can run the command below:\n+\n+```bash\n+oc create secret generic jet-license-key-secret --from-literal=key=your-license-key\n+```\n+\n+Click to `Add` from left menu then click `From Catalog` card.\n+\n+![Developer View](assets/developer.png)\n+\n+Find the `Hazelcast Jet Enterprise` in the catalog either by scrolling\n+down or you can filter items by typing in `jet`\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet.png)\n+\n+Click to `Hazelcast Jet Enterprise` card, then click to `Create` button\n+on the new section.\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-install.png)\n+\n+It will show a YAML editor like below, you can configure the Hazelcast\n+Jet Enterprise cluster here. Default configuration will create a 2 node\n+cluster.\n+\n+You can use [this\n+file](https://github.com/hazelcast/hazelcast-jet-operator/blob/master/hazelcast-jet-enterprise-operator/hazelcast-jet-enterprise-full.yaml)\n+for configuration options reference.\n+\n+Click to `Create` button at the bottom to create the cluster.\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-install-2.png)\n+\n+> Note that we are passing in the name of secret which we created\n+earlier that holds our license key information in the\n+`jet.licenseKeySecretName` property.\n+\n+You should be able to see the cluster has been created like below:\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-installed.png)\n+\n+If you navigate to the `Topology` view from the left menu, you can see\n+that Hazelcast Jet Enterprise and Hazelcast Jet Management Center\n+deployment/statefulsets has been created by Hazelcast Jet Enterprise\n+Operator.\n+\n+![Topology View](assets/developer-jet-topology.png)\n+\n+## Checking the Logs\n+\n+### Check Hazelcast Jet Enterprise Logs\n+\n+Navigate to the `Topology` view and click to the resource which has the\n+`hazelcast-jet-enterprise` suffix. It will show a section on the right\n+which shows the details of that resource like below:\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology.png)\n+\n+Then click to `View logs` link to see the logs of corresponding pod.\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology-logs.png)\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+Enterprise cluster formed successfully.\n+\n+### Check Hazelcast Jet Management Center Logs\n+\n+Navigate to the `Topology` view and click to the resource which has the\n+`hazelcast-jet-enterprise-management-center` suffix. It will show a\n+section on the right which shows the details of that resource like\n+below:\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology-mc.png)\n+\n+Then click to `View logs` link to see the logs of corresponding pod.\n+\n+![Hazelcast Jet Management Center\n+Logs](assets/developer-jet-topology-mc-logs.png)\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+Enterprise cluster and Management Center application connected to it\n+successfully.\n+\n+## Submitting the Sample Job\n+\n+To access this cluster inside Openshift environment from outside, we\n+need do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll make port forwarding from a Hazelcast Jet\n+Enterprise pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded. We will retrieve the pod name from the\n+`Topology` view. Click to the `jet-hazelcast-jet-enterprise` stateful\n+set, a new panel will be shown on the right side. You can use any pods\n+listed in the `Pods` section.\n+\n+>If you've installed operator into a specific namespace, switch to that\n+>namespace first with the following:\n+>\n+>```bash\n+>$ oc project my-namespace\n+>Now using project \"my-namespace\" on server \"XXXXXX\"\n+>```\n+\n+Run the command below with to make port forwarding happen:\n+\n+```bash\n+$ oc port-forward pods/jet-hazelcast-jet-enterprise-0 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz\n+cd hazelcast-jet-4.1.1/", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyMzY4NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453523685", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:38:33Z", "path": "site/website/versioned_docs/version-4.2/enterprise/operator-openshift.md", "diffHunk": "@@ -0,0 +1,329 @@\n+---\n+title: Installation on Red Hat OpenShift\n+description: Step-by-step guide to install Hazelcast Jet Enteprise Operator on Red Hat Openshift and deploying a sample job.\n+id: version-4.2-operator-openshift\n+original_id: operator-openshift\n+---\n+\n+[OpenShift](https://www.openshift.com/learn/what-is-openshift) is a\n+hybrid cloud, enterprise Kubernetes application platform from RedHat.\n+[Red Hat Marketplace](https://marketplace.redhat.com/en-us), an open\n+cloud marketplace that enables discovery and access to a certified\n+software which is available to deploy on any Red Hat OpenShift cluster.\n+\n+[Hazelcast Jet\n+Enterprise](https://marketplace.redhat.com/en-us/products/hazelcast-jet)\n+is available to you on Red Hat Marketplace as a Certified Enterprise\n+Ready Software.\n+\n+## Prerequisites\n+\n+- A running OpenShift cluster with administration rights.\n+\n+## How to install Operator from Developer Catalog\n+\n+Hazelcast Jet Enterprise operator needs to be installed to create and\n+manage Hazelcast Jet Enterprise clusters.\n+\n+To install the operator, navigate to the OperatorHub page under\n+Operators section in the Administrator view.\n+\n+![OperatorHub](assets/operatorhub.png)\n+\n+Find the `Hazelcast Jet Enterprise Operator` in the catalog either by\n+scrolling down or you can filter by typing in `jet`\n+\n+![Hazelcast Jet Enterprise Operator](assets/operatorhub-jet.png)\n+\n+Click to `Hazelcast Jet Enterprise Operator` card to continue the\n+installation process.\n+\n+![Hazelcast Jet Enterprise Operator Install\n+Screen](assets/operatorhub-jet-install.png)\n+\n+Click to `Install` button. When clicked you'd see a screen with various\n+configuration options regarding the installation.\n+\n+### Installing for a specific namespace\n+\n+Hazelcast Jet Enterprise Operator can be installed to a specific\n+namespace and operates only in that namespace. It cannot respond to\n+requests from any other namespace.\n+\n+![Single Namespace](assets/operatorhub-jet-install-single-ns.png)\n+\n+### Installing for all namespaces\n+\n+Hazelcast Jet Enterprise Operator can be installed to all namespaces and\n+operates Hazelcast Jet Enterprise clusters in any namespace on the\n+cluster. In this mode, operator will be installed to\n+`openshift-operators` namespace, but it will listen for changes in all\n+namespaces.\n+\n+![All Namespaces](assets/operatorhub-jet-install-all-ns.png)\n+\n+### Finishing the Installation\n+\n+After you've selected the installation mode, then click to `Subscribe`\n+button, it will create necessary resources to make the operator work\n+properly. You should be able to see `Hazelcast Jet Enterprise` operator\n+in the `Installed Operators` section under `Operators` menu.\n+\n+![Subscribe](assets/operatorhub-jet-installed.png)\n+\n+> Note: In this example we choose to install the operator to all\n+namespaces so it's installed in the `openshift-operators` namespace.\n+\n+## Creating the Cluster\n+\n+Let's switch to the `Developer` view and follow the instructions below\n+to create a Hazelcast Jet Enterprise cluster.  \n+\n+### Creating a License Key Secret\n+\n+You'll need a license key to start a Hazelcast Jet Enterprise cluster.\n+To pass the license key to the cluster to be started, we need to create\n+a `Secret` object which holds our license key.\n+\n+To create a Licese Key Secret, click to `Add` link from left menu then\n+click `From YAML` card.\n+\n+```yaml\n+apiVersion: v1\n+kind: Secret\n+metadata:\n+  name: jet-license-key-secret\n+stringData:\n+  key: YOUR_LICENSE_KEY\n+```\n+\n+Paste the YAML content above with your License Key replaced to the\n+editor on the screen like below and click `Create` button.\n+\n+![Create License Key Secret](assets/developer-jet-license.png)\n+\n+Alternatively, if you do have an access to the `oc` command line\n+utility, you can run the command below:\n+\n+```bash\n+oc create secret generic jet-license-key-secret --from-literal=key=your-license-key\n+```\n+\n+Click to `Add` from left menu then click `From Catalog` card.\n+\n+![Developer View](assets/developer.png)\n+\n+Find the `Hazelcast Jet Enterprise` in the catalog either by scrolling\n+down or you can filter items by typing in `jet`\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet.png)\n+\n+Click to `Hazelcast Jet Enterprise` card, then click to `Create` button\n+on the new section.\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-install.png)\n+\n+It will show a YAML editor like below, you can configure the Hazelcast\n+Jet Enterprise cluster here. Default configuration will create a 2 node\n+cluster.\n+\n+You can use [this\n+file](https://github.com/hazelcast/hazelcast-jet-operator/blob/master/hazelcast-jet-enterprise-operator/hazelcast-jet-enterprise-full.yaml)\n+for configuration options reference.\n+\n+Click to `Create` button at the bottom to create the cluster.\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-install-2.png)\n+\n+> Note that we are passing in the name of secret which we created\n+earlier that holds our license key information in the\n+`jet.licenseKeySecretName` property.\n+\n+You should be able to see the cluster has been created like below:\n+\n+![Hazelcast Jet Enterprise](assets/developer-jet-installed.png)\n+\n+If you navigate to the `Topology` view from the left menu, you can see\n+that Hazelcast Jet Enterprise and Hazelcast Jet Management Center\n+deployment/statefulsets has been created by Hazelcast Jet Enterprise\n+Operator.\n+\n+![Topology View](assets/developer-jet-topology.png)\n+\n+## Checking the Logs\n+\n+### Check Hazelcast Jet Enterprise Logs\n+\n+Navigate to the `Topology` view and click to the resource which has the\n+`hazelcast-jet-enterprise` suffix. It will show a section on the right\n+which shows the details of that resource like below:\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology.png)\n+\n+Then click to `View logs` link to see the logs of corresponding pod.\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology-logs.png)\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+Enterprise cluster formed successfully.\n+\n+### Check Hazelcast Jet Management Center Logs\n+\n+Navigate to the `Topology` view and click to the resource which has the\n+`hazelcast-jet-enterprise-management-center` suffix. It will show a\n+section on the right which shows the details of that resource like\n+below:\n+\n+![Hazelcast Jet Enterprise Logs](assets/developer-jet-topology-mc.png)\n+\n+Then click to `View logs` link to see the logs of corresponding pod.\n+\n+![Hazelcast Jet Management Center\n+Logs](assets/developer-jet-topology-mc-logs.png)\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+Enterprise cluster and Management Center application connected to it\n+successfully.\n+\n+## Submitting the Sample Job\n+\n+To access this cluster inside Openshift environment from outside, we\n+need do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll make port forwarding from a Hazelcast Jet\n+Enterprise pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded. We will retrieve the pod name from the\n+`Topology` view. Click to the `jet-hazelcast-jet-enterprise` stateful\n+set, a new panel will be shown on the right side. You can use any pods\n+listed in the `Pods` section.\n+\n+>If you've installed operator into a specific namespace, switch to that\n+>namespace first with the following:\n+>\n+>```bash\n+>$ oc project my-namespace\n+>Now using project \"my-namespace\" on server \"XXXXXX\"\n+>```\n+\n+Run the command below with to make port forwarding happen:\n+\n+```bash\n+$ oc port-forward pods/jet-hazelcast-jet-enterprise-0 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz\n+cd hazelcast-jet-4.1.1/\n+```\n+\n+Verify that CLI can connect to the cluster with the command below:\n+\n+```bash\n+$ bin/jet cluster\n+State: ACTIVE\n+Version: 4.1", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyNTQwNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453525404", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:41:26Z", "path": "site/website/versioned_docs/version-4.2/operations/kubernetes.md", "diffHunk": "@@ -0,0 +1,381 @@\n+---\n+title: Deployment On Kubernetes\n+description: Using Kubernetes for orchestrating Jet clusters.\n+id: version-4.2-kubernetes\n+original_id: kubernetes\n+---\n+\n+Hazelcast Jet has built-in support for Kubernetes deployments. It only\n+takes a few configuration parameters to make Hazelcast Jet cluster in\n+Kubernetes environments. Official Helm packages are also available to\n+bootstrap Hazelcast Jet deployments with a single command. Below are\n+the different ways to install Hazelcast Jet to a Kubernetes cluster.\n+\n+- [Install using Helm](#install-using-helm)\n+- [Install using Operator](../how-tos/operator)\n+- [Install without any 3rd party tool](#install-without-any-3rd-party-tool)\n+\n+## How it works\n+\n+Hazelcast Jet shipped with Hazelcast Kubernetes Discovery plugin which\n+handles automatic member discovery in Kubernetes.\n+\n+The plugin talks to Kubernetes API Server to resolve IP addresses of\n+the Hazelcast Jet pods.  \n+\n+The plugin also supports member discovery using DNS resolution.\n+\n+Each mode has its own advantages and drawbacks. You can find a\n+detailed comparison between two discovery methods in [this table](https://github.com/hazelcast/hazelcast-kubernetes#understanding-discovery-modes)\n+.\n+\n+You might want to check out concrete details of the Kubernetes\n+discovery in the [relevant](discovery#kubernetes) section.\n+\n+## Install using Helm\n+\n+The easiest way to install Hazelcast Jet on Kubernetes is using Helm\n+charts, Hazelcast Jet provides stable Helm charts for open-source and\n+enterprise versions also for Hazelcast Jet Management Center.\n+\n+### Prerequisites\n+\n+- Kubernetes 1.9+\n+- Helm CLI\n+\n+### Installing the Chart\n+\n+Hazelcast Official Chart Repository has sources hosted at\n+[https://github.com/hazelcast/charts](https://github.com/hazelcast/charts).\n+\n+Following command will add Hazelcast Official Chart Repository to your\n+helm client.\n+\n+```bash\n+helm repo add hazelcast https://hazelcast-charts.s3.amazonaws.com/\n+helm repo update\n+```\n+\n+You can install the latest version with default configuration values\n+using below command:\n+\n+```bash\n+helm install my-cluster hazelcast/hazelcast-jet\n+```\n+\n+This will create a cluster with the name `my-cluster` and with default\n+configuration values. To change various configuration options you can\n+use `\u2013set key=value`:\n+\n+```bash\n+helm install my-cluster --set cluster.memberCount=3 hazelcast/hazelcast-jet\n+```\n+\n+Or you can create a `values.yaml` file which contains custom\n+configuration options. This file may contain custom `hazelcast` and\n+`hazelcast-jet` yaml files in it too.\n+\n+```bash\n+helm install my-cluster -f values.yaml hazelcast/hazelcast-jet\n+```\n+\n+### Uninstalling the Chart\n+\n+To uninstall/delete the `my-release` deployment:\n+\n+```bash\n+helm uninstall my-release\n+```\n+\n+The command removes all the Kubernetes components associated with the\n+chart and deletes the release.\n+\n+### Configuration\n+\n+The following table lists some  configurable parameters of the\n+Hazelcast Jet chart, and their default values.\n+\n+| Parameter                  | Description                                                                    | Default                    |\n+|:---------------------------|:-------------------------------------------------------------------------------|:---------------------------|\n+| `image.repository`         | Hazelcast Jet Image name                                                       | `hazelcast/hazelcast-jet`  |\n+| `image.tag`                | Hazelcast Jet Image tag                                                        | {VERSION}                  |\n+| `cluster.memberCount`      | Number of Hazelcast Jet members                                                | 2                          |\n+| `jet.yaml.hazelcast-jet`   | Hazelcast Jet Configuration (`hazelcast-jet.yaml` embedded into `values.yaml`) | `{DEFAULT_JET_YAML}`       |\n+| `jet.yaml.hazelcast`       | Hazelcast IMDG Configuration (`hazelcast.yaml` embedded into `values.yaml`)    | `{DEFAULT_HAZELCAST_YAML}` |\n+| `managementcenter.enabled` | Turn on and off Hazelcast Jet Management Center application                    | `true`                     |\n+\n+See\n+[stable charts repository](https://github.com/helm/charts/tree/master/stable/hazelcast-jet)\n+for more information and configuration options.\n+\n+## Install without any 3rd party tool\n+\n+Hazelcast Jet provides Kubernetes-ready Docker images, these images use\n+the Hazelcast Kubernetes plugin to discover other Hazelcast Jet members\n+by interacting with the Kubernetes APIs. See [relevant](discovery#kubernetes)\n+section for more details.\n+\n+### Role Based Access Control\n+\n+To communicate with the Kubernetes APIs, create the Role\n+Based Access Control definition, (`rbac.yaml`), with the following\n+content and apply it:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: default-cluster\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: view\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: default\n+```\n+\n+```bash\n+kubectl apply -f rbac.yaml\n+```\n+\n+### ConfigMap\n+\n+Then we need to configure Hazelcast Jet to use Kubernetes Discovery to\n+form the cluster. Create a file named `hazelcast-jet-config.yaml` with\n+following content and apply it. This will create a ConfigMap object.\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: hazelcast-jet-configuration\n+data:\n+  hazelcast.yaml: |-\n+    hazelcast:\n+      network:\n+        join:\n+          multicast:\n+            enabled: false\n+          kubernetes:\n+            enabled: true\n+            namespace: default\n+            service-name: hazelcast-jet-service\n+        rest-api:\n+          enabled: true\n+          endpoint-groups:\n+            HEALTH_CHECK:\n+              enabled: true\n+```\n+\n+```bash\n+kubectl apply -f hazelcast-jet-config.yaml\n+```\n+\n+### StatefulSet and Service\n+\n+Now we need to create a *StatefulSet* and a *Service* which defines the\n+container spec. You can configure the environment options and the\n+cluster size here. Create a file named `hazelcast-jet.yaml` with\n+following content and apply it.\n+\n+```yaml\n+apiVersion: apps/v1\n+kind: StatefulSet\n+metadata:\n+  name: hazelcast-jet\n+  labels:\n+    app: hazelcast-jet\n+spec:\n+  replicas: 2\n+  serviceName: hazelcast-jet-service\n+  selector:\n+    matchLabels:\n+      app: hazelcast-jet\n+  template:\n+    metadata:\n+      labels:\n+        app: hazelcast-jet\n+    spec:\n+      containers:\n+      - name: hazelcast-jet\n+        image: hazelcast/hazelcast-jet:latest\n+        imagePullPolicy: IfNotPresent\n+        ports:\n+        - name: hazelcast-jet\n+          containerPort: 5701\n+        livenessProbe:\n+          httpGet:\n+            path: /hazelcast/health/node-state\n+            port: 5701\n+          initialDelaySeconds: 30\n+          periodSeconds: 10\n+          timeoutSeconds: 5\n+          successThreshold: 1\n+          failureThreshold: 3\n+        readinessProbe:\n+          httpGet:\n+            path: /hazelcast/health/node-state\n+            port: 5701\n+          initialDelaySeconds: 30\n+          periodSeconds: 10\n+          timeoutSeconds: 1\n+          successThreshold: 1\n+          failureThreshold: 1\n+        volumeMounts:\n+        - name: hazelcast-jet-storage\n+          mountPath: /data/hazelcast-jet\n+        env:\n+        - name: JAVA_OPTS\n+          value: \"-Dhazelcast.config=/data/hazelcast-jet/hazelcast.yaml\"\n+      volumes:\n+      - name: hazelcast-jet-storage\n+        configMap:\n+          name: hazelcast-jet-configuration\n+---\n+apiVersion: v1\n+kind: Service\n+metadata:\n+  name: hazelcast-jet-service\n+spec:\n+  selector:\n+    app: hazelcast-jet\n+  ports:\n+  - protocol: TCP\n+    port: 5701\n+```\n+\n+```bash\n+kubectl apply -f hazelcast-jet.yaml\n+```\n+\n+After deploying it, we can check the status of pods with the following\n+ command:\n+\n+```bash\n+$ kubectl get pods\n+NAME              READY   STATUS    RESTARTS   AGE\n+hazelcast-jet-0   1/1     Running   0          2m23s\n+hazelcast-jet-1   1/1     Running   0          103s\n+```\n+\n+Then we can verify from the logs of the pods that they formed a cluster\n+with the following command:\n+\n+```log\n+$ kubectl logs hazelcast-jet-0\n+...\n+...\n+...\n+2020-03-05 10:02:44,698  INFO [c.h.i.c.ClusterService] [main]\n+\n+Members {size:1, ver:1} [\n+ Member [172.17.0.6]:5701 - 03a22d3c-d88a-40bf-81b0-8f85e16acb0f this\n+]\n+\n+2020-03-05 10:02:44,725  INFO [c.h.c.LifecycleService] [main] - [172.17.0.6]:5701 is STARTED\n+2020-03-05 10:03:20,387  INFO [c.h.i.n.t.TcpIpConnection] [hz.distracted_bartik.IO.thread-in-2] - [Initialized new cluster connection between /172.17.0.6:5701 and /172.17.0.7:49103\n+2020-03-05 10:03:27,381  INFO [c.h.i.c.ClusterService] [hz.distracted_bartik.priority-generic-operation.thread-0]\n+\n+Members {size:2, ver:2} [\n+ Member [172.17.0.6]:5701 - 03a22d3c-d88a-40bf-81b0-8f85e16acb0f this\n+ Member [172.17.0.7]:5701 - a7295b91-939b-4181-acae-208145f773e6\n+]\n+```\n+\n+## Deploying Jobs\n+\n+To access this cluster inside Kubernetes environment from outside, we\n+need to do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll do port forwarding from a Hazelcast Jet\n+pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded.\n+\n+Run the command below with to do port forwarding happen:\n+\n+```bash\n+$ kubectl port-forward pod/hazelcast-jet-0 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/download) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyNTQ1OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453525459", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:41:30Z", "path": "site/website/versioned_docs/version-4.2/operations/kubernetes.md", "diffHunk": "@@ -0,0 +1,381 @@\n+---\n+title: Deployment On Kubernetes\n+description: Using Kubernetes for orchestrating Jet clusters.\n+id: version-4.2-kubernetes\n+original_id: kubernetes\n+---\n+\n+Hazelcast Jet has built-in support for Kubernetes deployments. It only\n+takes a few configuration parameters to make Hazelcast Jet cluster in\n+Kubernetes environments. Official Helm packages are also available to\n+bootstrap Hazelcast Jet deployments with a single command. Below are\n+the different ways to install Hazelcast Jet to a Kubernetes cluster.\n+\n+- [Install using Helm](#install-using-helm)\n+- [Install using Operator](../how-tos/operator)\n+- [Install without any 3rd party tool](#install-without-any-3rd-party-tool)\n+\n+## How it works\n+\n+Hazelcast Jet shipped with Hazelcast Kubernetes Discovery plugin which\n+handles automatic member discovery in Kubernetes.\n+\n+The plugin talks to Kubernetes API Server to resolve IP addresses of\n+the Hazelcast Jet pods.  \n+\n+The plugin also supports member discovery using DNS resolution.\n+\n+Each mode has its own advantages and drawbacks. You can find a\n+detailed comparison between two discovery methods in [this table](https://github.com/hazelcast/hazelcast-kubernetes#understanding-discovery-modes)\n+.\n+\n+You might want to check out concrete details of the Kubernetes\n+discovery in the [relevant](discovery#kubernetes) section.\n+\n+## Install using Helm\n+\n+The easiest way to install Hazelcast Jet on Kubernetes is using Helm\n+charts, Hazelcast Jet provides stable Helm charts for open-source and\n+enterprise versions also for Hazelcast Jet Management Center.\n+\n+### Prerequisites\n+\n+- Kubernetes 1.9+\n+- Helm CLI\n+\n+### Installing the Chart\n+\n+Hazelcast Official Chart Repository has sources hosted at\n+[https://github.com/hazelcast/charts](https://github.com/hazelcast/charts).\n+\n+Following command will add Hazelcast Official Chart Repository to your\n+helm client.\n+\n+```bash\n+helm repo add hazelcast https://hazelcast-charts.s3.amazonaws.com/\n+helm repo update\n+```\n+\n+You can install the latest version with default configuration values\n+using below command:\n+\n+```bash\n+helm install my-cluster hazelcast/hazelcast-jet\n+```\n+\n+This will create a cluster with the name `my-cluster` and with default\n+configuration values. To change various configuration options you can\n+use `\u2013set key=value`:\n+\n+```bash\n+helm install my-cluster --set cluster.memberCount=3 hazelcast/hazelcast-jet\n+```\n+\n+Or you can create a `values.yaml` file which contains custom\n+configuration options. This file may contain custom `hazelcast` and\n+`hazelcast-jet` yaml files in it too.\n+\n+```bash\n+helm install my-cluster -f values.yaml hazelcast/hazelcast-jet\n+```\n+\n+### Uninstalling the Chart\n+\n+To uninstall/delete the `my-release` deployment:\n+\n+```bash\n+helm uninstall my-release\n+```\n+\n+The command removes all the Kubernetes components associated with the\n+chart and deletes the release.\n+\n+### Configuration\n+\n+The following table lists some  configurable parameters of the\n+Hazelcast Jet chart, and their default values.\n+\n+| Parameter                  | Description                                                                    | Default                    |\n+|:---------------------------|:-------------------------------------------------------------------------------|:---------------------------|\n+| `image.repository`         | Hazelcast Jet Image name                                                       | `hazelcast/hazelcast-jet`  |\n+| `image.tag`                | Hazelcast Jet Image tag                                                        | {VERSION}                  |\n+| `cluster.memberCount`      | Number of Hazelcast Jet members                                                | 2                          |\n+| `jet.yaml.hazelcast-jet`   | Hazelcast Jet Configuration (`hazelcast-jet.yaml` embedded into `values.yaml`) | `{DEFAULT_JET_YAML}`       |\n+| `jet.yaml.hazelcast`       | Hazelcast IMDG Configuration (`hazelcast.yaml` embedded into `values.yaml`)    | `{DEFAULT_HAZELCAST_YAML}` |\n+| `managementcenter.enabled` | Turn on and off Hazelcast Jet Management Center application                    | `true`                     |\n+\n+See\n+[stable charts repository](https://github.com/helm/charts/tree/master/stable/hazelcast-jet)\n+for more information and configuration options.\n+\n+## Install without any 3rd party tool\n+\n+Hazelcast Jet provides Kubernetes-ready Docker images, these images use\n+the Hazelcast Kubernetes plugin to discover other Hazelcast Jet members\n+by interacting with the Kubernetes APIs. See [relevant](discovery#kubernetes)\n+section for more details.\n+\n+### Role Based Access Control\n+\n+To communicate with the Kubernetes APIs, create the Role\n+Based Access Control definition, (`rbac.yaml`), with the following\n+content and apply it:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: default-cluster\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: view\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: default\n+```\n+\n+```bash\n+kubectl apply -f rbac.yaml\n+```\n+\n+### ConfigMap\n+\n+Then we need to configure Hazelcast Jet to use Kubernetes Discovery to\n+form the cluster. Create a file named `hazelcast-jet-config.yaml` with\n+following content and apply it. This will create a ConfigMap object.\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: hazelcast-jet-configuration\n+data:\n+  hazelcast.yaml: |-\n+    hazelcast:\n+      network:\n+        join:\n+          multicast:\n+            enabled: false\n+          kubernetes:\n+            enabled: true\n+            namespace: default\n+            service-name: hazelcast-jet-service\n+        rest-api:\n+          enabled: true\n+          endpoint-groups:\n+            HEALTH_CHECK:\n+              enabled: true\n+```\n+\n+```bash\n+kubectl apply -f hazelcast-jet-config.yaml\n+```\n+\n+### StatefulSet and Service\n+\n+Now we need to create a *StatefulSet* and a *Service* which defines the\n+container spec. You can configure the environment options and the\n+cluster size here. Create a file named `hazelcast-jet.yaml` with\n+following content and apply it.\n+\n+```yaml\n+apiVersion: apps/v1\n+kind: StatefulSet\n+metadata:\n+  name: hazelcast-jet\n+  labels:\n+    app: hazelcast-jet\n+spec:\n+  replicas: 2\n+  serviceName: hazelcast-jet-service\n+  selector:\n+    matchLabels:\n+      app: hazelcast-jet\n+  template:\n+    metadata:\n+      labels:\n+        app: hazelcast-jet\n+    spec:\n+      containers:\n+      - name: hazelcast-jet\n+        image: hazelcast/hazelcast-jet:latest\n+        imagePullPolicy: IfNotPresent\n+        ports:\n+        - name: hazelcast-jet\n+          containerPort: 5701\n+        livenessProbe:\n+          httpGet:\n+            path: /hazelcast/health/node-state\n+            port: 5701\n+          initialDelaySeconds: 30\n+          periodSeconds: 10\n+          timeoutSeconds: 5\n+          successThreshold: 1\n+          failureThreshold: 3\n+        readinessProbe:\n+          httpGet:\n+            path: /hazelcast/health/node-state\n+            port: 5701\n+          initialDelaySeconds: 30\n+          periodSeconds: 10\n+          timeoutSeconds: 1\n+          successThreshold: 1\n+          failureThreshold: 1\n+        volumeMounts:\n+        - name: hazelcast-jet-storage\n+          mountPath: /data/hazelcast-jet\n+        env:\n+        - name: JAVA_OPTS\n+          value: \"-Dhazelcast.config=/data/hazelcast-jet/hazelcast.yaml\"\n+      volumes:\n+      - name: hazelcast-jet-storage\n+        configMap:\n+          name: hazelcast-jet-configuration\n+---\n+apiVersion: v1\n+kind: Service\n+metadata:\n+  name: hazelcast-jet-service\n+spec:\n+  selector:\n+    app: hazelcast-jet\n+  ports:\n+  - protocol: TCP\n+    port: 5701\n+```\n+\n+```bash\n+kubectl apply -f hazelcast-jet.yaml\n+```\n+\n+After deploying it, we can check the status of pods with the following\n+ command:\n+\n+```bash\n+$ kubectl get pods\n+NAME              READY   STATUS    RESTARTS   AGE\n+hazelcast-jet-0   1/1     Running   0          2m23s\n+hazelcast-jet-1   1/1     Running   0          103s\n+```\n+\n+Then we can verify from the logs of the pods that they formed a cluster\n+with the following command:\n+\n+```log\n+$ kubectl logs hazelcast-jet-0\n+...\n+...\n+...\n+2020-03-05 10:02:44,698  INFO [c.h.i.c.ClusterService] [main]\n+\n+Members {size:1, ver:1} [\n+ Member [172.17.0.6]:5701 - 03a22d3c-d88a-40bf-81b0-8f85e16acb0f this\n+]\n+\n+2020-03-05 10:02:44,725  INFO [c.h.c.LifecycleService] [main] - [172.17.0.6]:5701 is STARTED\n+2020-03-05 10:03:20,387  INFO [c.h.i.n.t.TcpIpConnection] [hz.distracted_bartik.IO.thread-in-2] - [Initialized new cluster connection between /172.17.0.6:5701 and /172.17.0.7:49103\n+2020-03-05 10:03:27,381  INFO [c.h.i.c.ClusterService] [hz.distracted_bartik.priority-generic-operation.thread-0]\n+\n+Members {size:2, ver:2} [\n+ Member [172.17.0.6]:5701 - 03a22d3c-d88a-40bf-81b0-8f85e16acb0f this\n+ Member [172.17.0.7]:5701 - a7295b91-939b-4181-acae-208145f773e6\n+]\n+```\n+\n+## Deploying Jobs\n+\n+To access this cluster inside Kubernetes environment from outside, we\n+need to do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll do port forwarding from a Hazelcast Jet\n+pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded.\n+\n+Run the command below with to do port forwarding happen:\n+\n+```bash\n+$ kubectl port-forward pod/hazelcast-jet-0 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/download) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz\n+cd hazelcast-jet-4.1.1/", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyNTUxNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453525516", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:41:35Z", "path": "site/website/versioned_docs/version-4.2/operations/kubernetes.md", "diffHunk": "@@ -0,0 +1,381 @@\n+---\n+title: Deployment On Kubernetes\n+description: Using Kubernetes for orchestrating Jet clusters.\n+id: version-4.2-kubernetes\n+original_id: kubernetes\n+---\n+\n+Hazelcast Jet has built-in support for Kubernetes deployments. It only\n+takes a few configuration parameters to make Hazelcast Jet cluster in\n+Kubernetes environments. Official Helm packages are also available to\n+bootstrap Hazelcast Jet deployments with a single command. Below are\n+the different ways to install Hazelcast Jet to a Kubernetes cluster.\n+\n+- [Install using Helm](#install-using-helm)\n+- [Install using Operator](../how-tos/operator)\n+- [Install without any 3rd party tool](#install-without-any-3rd-party-tool)\n+\n+## How it works\n+\n+Hazelcast Jet shipped with Hazelcast Kubernetes Discovery plugin which\n+handles automatic member discovery in Kubernetes.\n+\n+The plugin talks to Kubernetes API Server to resolve IP addresses of\n+the Hazelcast Jet pods.  \n+\n+The plugin also supports member discovery using DNS resolution.\n+\n+Each mode has its own advantages and drawbacks. You can find a\n+detailed comparison between two discovery methods in [this table](https://github.com/hazelcast/hazelcast-kubernetes#understanding-discovery-modes)\n+.\n+\n+You might want to check out concrete details of the Kubernetes\n+discovery in the [relevant](discovery#kubernetes) section.\n+\n+## Install using Helm\n+\n+The easiest way to install Hazelcast Jet on Kubernetes is using Helm\n+charts, Hazelcast Jet provides stable Helm charts for open-source and\n+enterprise versions also for Hazelcast Jet Management Center.\n+\n+### Prerequisites\n+\n+- Kubernetes 1.9+\n+- Helm CLI\n+\n+### Installing the Chart\n+\n+Hazelcast Official Chart Repository has sources hosted at\n+[https://github.com/hazelcast/charts](https://github.com/hazelcast/charts).\n+\n+Following command will add Hazelcast Official Chart Repository to your\n+helm client.\n+\n+```bash\n+helm repo add hazelcast https://hazelcast-charts.s3.amazonaws.com/\n+helm repo update\n+```\n+\n+You can install the latest version with default configuration values\n+using below command:\n+\n+```bash\n+helm install my-cluster hazelcast/hazelcast-jet\n+```\n+\n+This will create a cluster with the name `my-cluster` and with default\n+configuration values. To change various configuration options you can\n+use `\u2013set key=value`:\n+\n+```bash\n+helm install my-cluster --set cluster.memberCount=3 hazelcast/hazelcast-jet\n+```\n+\n+Or you can create a `values.yaml` file which contains custom\n+configuration options. This file may contain custom `hazelcast` and\n+`hazelcast-jet` yaml files in it too.\n+\n+```bash\n+helm install my-cluster -f values.yaml hazelcast/hazelcast-jet\n+```\n+\n+### Uninstalling the Chart\n+\n+To uninstall/delete the `my-release` deployment:\n+\n+```bash\n+helm uninstall my-release\n+```\n+\n+The command removes all the Kubernetes components associated with the\n+chart and deletes the release.\n+\n+### Configuration\n+\n+The following table lists some  configurable parameters of the\n+Hazelcast Jet chart, and their default values.\n+\n+| Parameter                  | Description                                                                    | Default                    |\n+|:---------------------------|:-------------------------------------------------------------------------------|:---------------------------|\n+| `image.repository`         | Hazelcast Jet Image name                                                       | `hazelcast/hazelcast-jet`  |\n+| `image.tag`                | Hazelcast Jet Image tag                                                        | {VERSION}                  |\n+| `cluster.memberCount`      | Number of Hazelcast Jet members                                                | 2                          |\n+| `jet.yaml.hazelcast-jet`   | Hazelcast Jet Configuration (`hazelcast-jet.yaml` embedded into `values.yaml`) | `{DEFAULT_JET_YAML}`       |\n+| `jet.yaml.hazelcast`       | Hazelcast IMDG Configuration (`hazelcast.yaml` embedded into `values.yaml`)    | `{DEFAULT_HAZELCAST_YAML}` |\n+| `managementcenter.enabled` | Turn on and off Hazelcast Jet Management Center application                    | `true`                     |\n+\n+See\n+[stable charts repository](https://github.com/helm/charts/tree/master/stable/hazelcast-jet)\n+for more information and configuration options.\n+\n+## Install without any 3rd party tool\n+\n+Hazelcast Jet provides Kubernetes-ready Docker images, these images use\n+the Hazelcast Kubernetes plugin to discover other Hazelcast Jet members\n+by interacting with the Kubernetes APIs. See [relevant](discovery#kubernetes)\n+section for more details.\n+\n+### Role Based Access Control\n+\n+To communicate with the Kubernetes APIs, create the Role\n+Based Access Control definition, (`rbac.yaml`), with the following\n+content and apply it:\n+\n+```yaml\n+apiVersion: rbac.authorization.k8s.io/v1\n+kind: ClusterRoleBinding\n+metadata:\n+  name: default-cluster\n+roleRef:\n+  apiGroup: rbac.authorization.k8s.io\n+  kind: ClusterRole\n+  name: view\n+subjects:\n+- kind: ServiceAccount\n+  name: default\n+  namespace: default\n+```\n+\n+```bash\n+kubectl apply -f rbac.yaml\n+```\n+\n+### ConfigMap\n+\n+Then we need to configure Hazelcast Jet to use Kubernetes Discovery to\n+form the cluster. Create a file named `hazelcast-jet-config.yaml` with\n+following content and apply it. This will create a ConfigMap object.\n+\n+```yaml\n+apiVersion: v1\n+kind: ConfigMap\n+metadata:\n+  name: hazelcast-jet-configuration\n+data:\n+  hazelcast.yaml: |-\n+    hazelcast:\n+      network:\n+        join:\n+          multicast:\n+            enabled: false\n+          kubernetes:\n+            enabled: true\n+            namespace: default\n+            service-name: hazelcast-jet-service\n+        rest-api:\n+          enabled: true\n+          endpoint-groups:\n+            HEALTH_CHECK:\n+              enabled: true\n+```\n+\n+```bash\n+kubectl apply -f hazelcast-jet-config.yaml\n+```\n+\n+### StatefulSet and Service\n+\n+Now we need to create a *StatefulSet* and a *Service* which defines the\n+container spec. You can configure the environment options and the\n+cluster size here. Create a file named `hazelcast-jet.yaml` with\n+following content and apply it.\n+\n+```yaml\n+apiVersion: apps/v1\n+kind: StatefulSet\n+metadata:\n+  name: hazelcast-jet\n+  labels:\n+    app: hazelcast-jet\n+spec:\n+  replicas: 2\n+  serviceName: hazelcast-jet-service\n+  selector:\n+    matchLabels:\n+      app: hazelcast-jet\n+  template:\n+    metadata:\n+      labels:\n+        app: hazelcast-jet\n+    spec:\n+      containers:\n+      - name: hazelcast-jet\n+        image: hazelcast/hazelcast-jet:latest\n+        imagePullPolicy: IfNotPresent\n+        ports:\n+        - name: hazelcast-jet\n+          containerPort: 5701\n+        livenessProbe:\n+          httpGet:\n+            path: /hazelcast/health/node-state\n+            port: 5701\n+          initialDelaySeconds: 30\n+          periodSeconds: 10\n+          timeoutSeconds: 5\n+          successThreshold: 1\n+          failureThreshold: 3\n+        readinessProbe:\n+          httpGet:\n+            path: /hazelcast/health/node-state\n+            port: 5701\n+          initialDelaySeconds: 30\n+          periodSeconds: 10\n+          timeoutSeconds: 1\n+          successThreshold: 1\n+          failureThreshold: 1\n+        volumeMounts:\n+        - name: hazelcast-jet-storage\n+          mountPath: /data/hazelcast-jet\n+        env:\n+        - name: JAVA_OPTS\n+          value: \"-Dhazelcast.config=/data/hazelcast-jet/hazelcast.yaml\"\n+      volumes:\n+      - name: hazelcast-jet-storage\n+        configMap:\n+          name: hazelcast-jet-configuration\n+---\n+apiVersion: v1\n+kind: Service\n+metadata:\n+  name: hazelcast-jet-service\n+spec:\n+  selector:\n+    app: hazelcast-jet\n+  ports:\n+  - protocol: TCP\n+    port: 5701\n+```\n+\n+```bash\n+kubectl apply -f hazelcast-jet.yaml\n+```\n+\n+After deploying it, we can check the status of pods with the following\n+ command:\n+\n+```bash\n+$ kubectl get pods\n+NAME              READY   STATUS    RESTARTS   AGE\n+hazelcast-jet-0   1/1     Running   0          2m23s\n+hazelcast-jet-1   1/1     Running   0          103s\n+```\n+\n+Then we can verify from the logs of the pods that they formed a cluster\n+with the following command:\n+\n+```log\n+$ kubectl logs hazelcast-jet-0\n+...\n+...\n+...\n+2020-03-05 10:02:44,698  INFO [c.h.i.c.ClusterService] [main]\n+\n+Members {size:1, ver:1} [\n+ Member [172.17.0.6]:5701 - 03a22d3c-d88a-40bf-81b0-8f85e16acb0f this\n+]\n+\n+2020-03-05 10:02:44,725  INFO [c.h.c.LifecycleService] [main] - [172.17.0.6]:5701 is STARTED\n+2020-03-05 10:03:20,387  INFO [c.h.i.n.t.TcpIpConnection] [hz.distracted_bartik.IO.thread-in-2] - [Initialized new cluster connection between /172.17.0.6:5701 and /172.17.0.7:49103\n+2020-03-05 10:03:27,381  INFO [c.h.i.c.ClusterService] [hz.distracted_bartik.priority-generic-operation.thread-0]\n+\n+Members {size:2, ver:2} [\n+ Member [172.17.0.6]:5701 - 03a22d3c-d88a-40bf-81b0-8f85e16acb0f this\n+ Member [172.17.0.7]:5701 - a7295b91-939b-4181-acae-208145f773e6\n+]\n+```\n+\n+## Deploying Jobs\n+\n+To access this cluster inside Kubernetes environment from outside, we\n+need to do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll do port forwarding from a Hazelcast Jet\n+pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded.\n+\n+Run the command below with to do port forwarding happen:\n+\n+```bash\n+$ kubectl port-forward pod/hazelcast-jet-0 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/download) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz\n+cd hazelcast-jet-4.1.1/\n+```\n+\n+Verify that CLI can connect to the cluster with the command below:\n+\n+```bash\n+$ bin/jet cluster\n+State: ACTIVE\n+Version: 4.1.1", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyOTg3MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453529871", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:48:49Z", "path": "site/website/versioned_docs/version-4.2/how-tos/operator.md", "diffHunk": "@@ -0,0 +1,334 @@\n+---\n+title: Install Kubernetes Operator\n+description: A step-by-step guide on how to install Hazelcast Jet Kubernetes Operator on your Kubernetes Cluster.\n+id: version-4.2-operator\n+original_id: operator\n+---\n+\n+The [Operator Framework](https://github.com/operator-framework) is an\n+open source toolkit to manage Kubernetes native applications, called\n+operators, in an effective, automated, and scalable way.\n+\n+Hazelcast Jet provides an Operator to simplify deployment on Kubernetes\n+clusters. This is a step-by-step guide how to deploy Hazelcast Jet\n+cluster together with Management Center on your Kubernetes cluster.\n+\n+## Prerequisites\n+\n+- Kubernetes cluster (with admin rights) and the `kubectl` command\n+  configured (you may use [Minikube](https://kubernetes.io/docs/getting-started-guides/minikube/)\n+  )\n+\n+## Installation\n+\n+Hazelcast Jet Operator is published on [OperatorHub.io](https://operatorhub.io/)\n+, registry for Kubernetes Operators. It can be either installed via\n+Operator Lifecycle Manager or manually.\n+\n+### Installing with Operator Lifecycle Manager(OLM)\n+\n+Operator Lifecycle Manager helps you to install, update, and generally\n+manage the lifecycle of all of the operators (and their associated\n+services) running across your clusters.\n+\n+#### Installing the OLM\n+\n+You need to install the OLM to your cluster if it's not yet installed.\n+\n+Check out the [latest releases on GitHub](https://github.com/operator-framework/operator-lifecycle-manager/releases)\n+for release-specific install instructions for OLM.\n+\n+To install the OLM, Download the `install.sh` script from the Github\n+Releases page and execute it with the latest OLM version like below:\n+\n+```bash\n+chmod +x install.sh\n+./install.sh <olm-version>\n+```\n+\n+Then you can verify that the OLM is installed and running on your cluster\n+with the command below:\n+\n+```bash\n+$ kubectl get pods -n olm\n+NAME                                READY   STATUS    RESTARTS   AGE\n+catalog-operator-66cf4f96f4-d9t4w   1/1     Running   0          1m\n+olm-operator-9b64f8547-cd67m        1/1     Running   0          1m\n+operatorhubio-catalog-7z5wh         1/1     Running   0          1m\n+packageserver-854879f5cf-49z64      1/1     Running   0          1m\n+packageserver-854879f5cf-r7kzz      1/1     Running   0          1m\n+```\n+\n+#### Installing the Hazelcast Jet Operator\n+\n+Install the Hazelcast Jet Operator by running the following command:\n+\n+```bash\n+kubectl create -f https://operatorhub.io/install/hazelcast-jet-operator.yaml\n+```\n+\n+Hazelcast Jet Operator will be installed in the `operators` namespace\n+and will be usable from all namespaces in the cluster.\n+\n+After install, watch your operator come up using the following command.\n+It might take around a minute for installation to be succeed.\n+\n+```bash\n+$ kubectl get csv -n operators\n+NAME                            DISPLAY                  VERSION   REPLACES   PHASE\n+hazelcast-jet-operator.v0.1.0   Hazelcast Jet Operator   0.1.0                Succeeded\n+```\n+\n+### Manual Installation\n+\n+If you'd like to manually install the Hazelcast Jet Operator without\n+installing the OLM, please follow the README on [Hazelcast Jet Operator](https://github.com/hazelcast/hazelcast-jet-operator/tree/master/hazelcast-jet-operator)\n+GitHub repository.\n+\n+## Creating a Hazelcast Jet Cluster\n+\n+After successfully installing the Hazelcast Jet Operator to your cluster\n+we can now create Hazelcast Jet clusters with the `HazelcastJet` custom\n+resource.\n+\n+Create a file name `hazelcast-jet.yaml` with the contents below:\n+\n+```yaml\n+apiVersion: hazelcast.com/v1alpha1\n+kind: HazelcastJet\n+metadata:\n+  name: jet-cluster\n+spec:\n+  cluster:\n+    memberCount: 2\n+  securityContext:\n+    runAsUser: \"\"\n+    runAsGroup: \"\"\n+    fsGroup: \"\"\n+```\n+\n+**Note:** You can use [this\n+file](https://github.com/hazelcast/hazelcast-jet-operator/blob/master/hazelcast-jet-operator/hazelcast-jet-full.yaml)\n+for configuration options reference.\n+\n+>### Setting the License Key for Management Center (Optional)\n+>\n+>If you do have an\n+>active license subscription for Hazelcast Jet Management Center, use\n+>the configuration below to start your cluster. You can\n+>apply for a 30-day trial if you don't have one from [Hazelcast Website](https://hazelcast.com/get-started/#deploymenttype-jet)\n+>. This step is optional and only for Hazelcast Jet Management Center.\n+> Hazelcast Jet doesn't require a license key. You can also skip the\n+> deployment of Management Center altogether by setting the `managementcenter.enabled`\n+> property to `false`.\n+>\n+>```yaml\n+>apiVersion: hazelcast.com/v1alpha1\n+>kind: HazelcastJet\n+>metadata:\n+>  name: jet-cluster\n+>spec:\n+>  cluster:\n+>    memberCount: 2\n+>  securityContext:\n+>    runAsUser: \"\"\n+>    runAsGroup: \"\"\n+>    fsGroup: \"\"\n+>  managementcenter:\n+>    licenseKey: <YOUR_LICENSE_KEY>\n+>```\n+\n+Start Hazelcast Jet cluster with the following command.\n+\n+```bash\n+kubectl apply -f hazelcast-jet.yaml\n+```\n+\n+Your Hazelcast Jet cluster (together with Hazelcast Jet Management Center)\n+should be created.\n+\n+```bash\n+$ kubectl get all\n+NAME                                                               READY   STATUS    RESTARTS   AGE\n+pod/jet-cluster-hazelcast-jet-0                                    1/1     Running   0          6m28s\n+pod/jet-cluster-hazelcast-jet-1                                    1/1     Running   0          5m54s\n+pod/jet-cluster-hazelcast-jet-management-center-85bbf6948b-p5n5h   1/1     Running   0          6m30s\n+\n+NAME                                                  TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)                        AGE\n+service/jet-cluster-hazelcast-jet                     ClusterIP      None           <none>          5701/TCP                       6m32s\n+service/jet-cluster-hazelcast-jet-management-center   LoadBalancer   10.47.244.94   34.72.142.219   8081:32476/TCP,443:32535/TCP   6m32s\n+service/kubernetes                                    ClusterIP      10.47.240.1    <none>          443/TCP                        2d22h\n+\n+NAME                                                          READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/jet-cluster-hazelcast-jet-management-center   1/1     1            1           6m32s\n+\n+NAME                                                                     DESIRED   CURRENT   READY   AGE\n+replicaset.apps/jet-cluster-hazelcast-jet-management-center-85bbf6948b   1         1         1       6m32s\n+\n+NAME                                         READY   AGE\n+statefulset.apps/jet-cluster-hazelcast-jet   2/2     6m33s\n+```\n+\n+Check the logs of the Hazelcast Jet nodes to verify cluster formation\n+with the command below:\n+\n+```bash\n+$ kubectl logs pod/jet-cluster-hazelcast-jet-1\n+...\n+...\n+2020-05-11 07:42:50,785 [ INFO] [hz.naughty_mendel.generic-operation.thread-0] [c.h.i.c.ClusterService]:\n+\n+Members {size:2, ver:2} [\n+ Member [10.44.1.11]:5701 - a720a93f-418a-4656-82a9-ae69eaeba99d\n+ Member [10.44.2.9]:5701 - 5ac07dd4-e631-444e-a9ab-5e5faf1cd617 this\n+]\n+\n+2020-05-11 07:42:51,747 [ INFO] [main] [c.h.c.LifecycleService]: [10.44.2.9]:5701 is STARTED\n+...\n+```\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+cluster formed successfully.\n+\n+## Submitting the Sample Job\n+\n+To access this cluster inside Kubernetes environment from outside, we\n+need to do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll do port forwarding from a Hazelcast Jet\n+pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded.\n+\n+Run the command below with to do port forwarding happen:\n+\n+```bash\n+$ kubectl port-forward pod/jet-cluster-hazelcast-jet-1 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/download) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyOTkxOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453529918", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:48:54Z", "path": "site/website/versioned_docs/version-4.2/how-tos/operator.md", "diffHunk": "@@ -0,0 +1,334 @@\n+---\n+title: Install Kubernetes Operator\n+description: A step-by-step guide on how to install Hazelcast Jet Kubernetes Operator on your Kubernetes Cluster.\n+id: version-4.2-operator\n+original_id: operator\n+---\n+\n+The [Operator Framework](https://github.com/operator-framework) is an\n+open source toolkit to manage Kubernetes native applications, called\n+operators, in an effective, automated, and scalable way.\n+\n+Hazelcast Jet provides an Operator to simplify deployment on Kubernetes\n+clusters. This is a step-by-step guide how to deploy Hazelcast Jet\n+cluster together with Management Center on your Kubernetes cluster.\n+\n+## Prerequisites\n+\n+- Kubernetes cluster (with admin rights) and the `kubectl` command\n+  configured (you may use [Minikube](https://kubernetes.io/docs/getting-started-guides/minikube/)\n+  )\n+\n+## Installation\n+\n+Hazelcast Jet Operator is published on [OperatorHub.io](https://operatorhub.io/)\n+, registry for Kubernetes Operators. It can be either installed via\n+Operator Lifecycle Manager or manually.\n+\n+### Installing with Operator Lifecycle Manager(OLM)\n+\n+Operator Lifecycle Manager helps you to install, update, and generally\n+manage the lifecycle of all of the operators (and their associated\n+services) running across your clusters.\n+\n+#### Installing the OLM\n+\n+You need to install the OLM to your cluster if it's not yet installed.\n+\n+Check out the [latest releases on GitHub](https://github.com/operator-framework/operator-lifecycle-manager/releases)\n+for release-specific install instructions for OLM.\n+\n+To install the OLM, Download the `install.sh` script from the Github\n+Releases page and execute it with the latest OLM version like below:\n+\n+```bash\n+chmod +x install.sh\n+./install.sh <olm-version>\n+```\n+\n+Then you can verify that the OLM is installed and running on your cluster\n+with the command below:\n+\n+```bash\n+$ kubectl get pods -n olm\n+NAME                                READY   STATUS    RESTARTS   AGE\n+catalog-operator-66cf4f96f4-d9t4w   1/1     Running   0          1m\n+olm-operator-9b64f8547-cd67m        1/1     Running   0          1m\n+operatorhubio-catalog-7z5wh         1/1     Running   0          1m\n+packageserver-854879f5cf-49z64      1/1     Running   0          1m\n+packageserver-854879f5cf-r7kzz      1/1     Running   0          1m\n+```\n+\n+#### Installing the Hazelcast Jet Operator\n+\n+Install the Hazelcast Jet Operator by running the following command:\n+\n+```bash\n+kubectl create -f https://operatorhub.io/install/hazelcast-jet-operator.yaml\n+```\n+\n+Hazelcast Jet Operator will be installed in the `operators` namespace\n+and will be usable from all namespaces in the cluster.\n+\n+After install, watch your operator come up using the following command.\n+It might take around a minute for installation to be succeed.\n+\n+```bash\n+$ kubectl get csv -n operators\n+NAME                            DISPLAY                  VERSION   REPLACES   PHASE\n+hazelcast-jet-operator.v0.1.0   Hazelcast Jet Operator   0.1.0                Succeeded\n+```\n+\n+### Manual Installation\n+\n+If you'd like to manually install the Hazelcast Jet Operator without\n+installing the OLM, please follow the README on [Hazelcast Jet Operator](https://github.com/hazelcast/hazelcast-jet-operator/tree/master/hazelcast-jet-operator)\n+GitHub repository.\n+\n+## Creating a Hazelcast Jet Cluster\n+\n+After successfully installing the Hazelcast Jet Operator to your cluster\n+we can now create Hazelcast Jet clusters with the `HazelcastJet` custom\n+resource.\n+\n+Create a file name `hazelcast-jet.yaml` with the contents below:\n+\n+```yaml\n+apiVersion: hazelcast.com/v1alpha1\n+kind: HazelcastJet\n+metadata:\n+  name: jet-cluster\n+spec:\n+  cluster:\n+    memberCount: 2\n+  securityContext:\n+    runAsUser: \"\"\n+    runAsGroup: \"\"\n+    fsGroup: \"\"\n+```\n+\n+**Note:** You can use [this\n+file](https://github.com/hazelcast/hazelcast-jet-operator/blob/master/hazelcast-jet-operator/hazelcast-jet-full.yaml)\n+for configuration options reference.\n+\n+>### Setting the License Key for Management Center (Optional)\n+>\n+>If you do have an\n+>active license subscription for Hazelcast Jet Management Center, use\n+>the configuration below to start your cluster. You can\n+>apply for a 30-day trial if you don't have one from [Hazelcast Website](https://hazelcast.com/get-started/#deploymenttype-jet)\n+>. This step is optional and only for Hazelcast Jet Management Center.\n+> Hazelcast Jet doesn't require a license key. You can also skip the\n+> deployment of Management Center altogether by setting the `managementcenter.enabled`\n+> property to `false`.\n+>\n+>```yaml\n+>apiVersion: hazelcast.com/v1alpha1\n+>kind: HazelcastJet\n+>metadata:\n+>  name: jet-cluster\n+>spec:\n+>  cluster:\n+>    memberCount: 2\n+>  securityContext:\n+>    runAsUser: \"\"\n+>    runAsGroup: \"\"\n+>    fsGroup: \"\"\n+>  managementcenter:\n+>    licenseKey: <YOUR_LICENSE_KEY>\n+>```\n+\n+Start Hazelcast Jet cluster with the following command.\n+\n+```bash\n+kubectl apply -f hazelcast-jet.yaml\n+```\n+\n+Your Hazelcast Jet cluster (together with Hazelcast Jet Management Center)\n+should be created.\n+\n+```bash\n+$ kubectl get all\n+NAME                                                               READY   STATUS    RESTARTS   AGE\n+pod/jet-cluster-hazelcast-jet-0                                    1/1     Running   0          6m28s\n+pod/jet-cluster-hazelcast-jet-1                                    1/1     Running   0          5m54s\n+pod/jet-cluster-hazelcast-jet-management-center-85bbf6948b-p5n5h   1/1     Running   0          6m30s\n+\n+NAME                                                  TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)                        AGE\n+service/jet-cluster-hazelcast-jet                     ClusterIP      None           <none>          5701/TCP                       6m32s\n+service/jet-cluster-hazelcast-jet-management-center   LoadBalancer   10.47.244.94   34.72.142.219   8081:32476/TCP,443:32535/TCP   6m32s\n+service/kubernetes                                    ClusterIP      10.47.240.1    <none>          443/TCP                        2d22h\n+\n+NAME                                                          READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/jet-cluster-hazelcast-jet-management-center   1/1     1            1           6m32s\n+\n+NAME                                                                     DESIRED   CURRENT   READY   AGE\n+replicaset.apps/jet-cluster-hazelcast-jet-management-center-85bbf6948b   1         1         1       6m32s\n+\n+NAME                                         READY   AGE\n+statefulset.apps/jet-cluster-hazelcast-jet   2/2     6m33s\n+```\n+\n+Check the logs of the Hazelcast Jet nodes to verify cluster formation\n+with the command below:\n+\n+```bash\n+$ kubectl logs pod/jet-cluster-hazelcast-jet-1\n+...\n+...\n+2020-05-11 07:42:50,785 [ INFO] [hz.naughty_mendel.generic-operation.thread-0] [c.h.i.c.ClusterService]:\n+\n+Members {size:2, ver:2} [\n+ Member [10.44.1.11]:5701 - a720a93f-418a-4656-82a9-ae69eaeba99d\n+ Member [10.44.2.9]:5701 - 5ac07dd4-e631-444e-a9ab-5e5faf1cd617 this\n+]\n+\n+2020-05-11 07:42:51,747 [ INFO] [main] [c.h.c.LifecycleService]: [10.44.2.9]:5701 is STARTED\n+...\n+```\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+cluster formed successfully.\n+\n+## Submitting the Sample Job\n+\n+To access this cluster inside Kubernetes environment from outside, we\n+need to do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll do port forwarding from a Hazelcast Jet\n+pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded.\n+\n+Run the command below with to do port forwarding happen:\n+\n+```bash\n+$ kubectl port-forward pod/jet-cluster-hazelcast-jet-1 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/download) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz\n+cd hazelcast-jet-4.1.1/", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyOTk2Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2400#discussion_r453529966", "bodyText": "should be 4.2", "author": "olukas", "createdAt": "2020-07-13T09:48:59Z", "path": "site/website/versioned_docs/version-4.2/how-tos/operator.md", "diffHunk": "@@ -0,0 +1,334 @@\n+---\n+title: Install Kubernetes Operator\n+description: A step-by-step guide on how to install Hazelcast Jet Kubernetes Operator on your Kubernetes Cluster.\n+id: version-4.2-operator\n+original_id: operator\n+---\n+\n+The [Operator Framework](https://github.com/operator-framework) is an\n+open source toolkit to manage Kubernetes native applications, called\n+operators, in an effective, automated, and scalable way.\n+\n+Hazelcast Jet provides an Operator to simplify deployment on Kubernetes\n+clusters. This is a step-by-step guide how to deploy Hazelcast Jet\n+cluster together with Management Center on your Kubernetes cluster.\n+\n+## Prerequisites\n+\n+- Kubernetes cluster (with admin rights) and the `kubectl` command\n+  configured (you may use [Minikube](https://kubernetes.io/docs/getting-started-guides/minikube/)\n+  )\n+\n+## Installation\n+\n+Hazelcast Jet Operator is published on [OperatorHub.io](https://operatorhub.io/)\n+, registry for Kubernetes Operators. It can be either installed via\n+Operator Lifecycle Manager or manually.\n+\n+### Installing with Operator Lifecycle Manager(OLM)\n+\n+Operator Lifecycle Manager helps you to install, update, and generally\n+manage the lifecycle of all of the operators (and their associated\n+services) running across your clusters.\n+\n+#### Installing the OLM\n+\n+You need to install the OLM to your cluster if it's not yet installed.\n+\n+Check out the [latest releases on GitHub](https://github.com/operator-framework/operator-lifecycle-manager/releases)\n+for release-specific install instructions for OLM.\n+\n+To install the OLM, Download the `install.sh` script from the Github\n+Releases page and execute it with the latest OLM version like below:\n+\n+```bash\n+chmod +x install.sh\n+./install.sh <olm-version>\n+```\n+\n+Then you can verify that the OLM is installed and running on your cluster\n+with the command below:\n+\n+```bash\n+$ kubectl get pods -n olm\n+NAME                                READY   STATUS    RESTARTS   AGE\n+catalog-operator-66cf4f96f4-d9t4w   1/1     Running   0          1m\n+olm-operator-9b64f8547-cd67m        1/1     Running   0          1m\n+operatorhubio-catalog-7z5wh         1/1     Running   0          1m\n+packageserver-854879f5cf-49z64      1/1     Running   0          1m\n+packageserver-854879f5cf-r7kzz      1/1     Running   0          1m\n+```\n+\n+#### Installing the Hazelcast Jet Operator\n+\n+Install the Hazelcast Jet Operator by running the following command:\n+\n+```bash\n+kubectl create -f https://operatorhub.io/install/hazelcast-jet-operator.yaml\n+```\n+\n+Hazelcast Jet Operator will be installed in the `operators` namespace\n+and will be usable from all namespaces in the cluster.\n+\n+After install, watch your operator come up using the following command.\n+It might take around a minute for installation to be succeed.\n+\n+```bash\n+$ kubectl get csv -n operators\n+NAME                            DISPLAY                  VERSION   REPLACES   PHASE\n+hazelcast-jet-operator.v0.1.0   Hazelcast Jet Operator   0.1.0                Succeeded\n+```\n+\n+### Manual Installation\n+\n+If you'd like to manually install the Hazelcast Jet Operator without\n+installing the OLM, please follow the README on [Hazelcast Jet Operator](https://github.com/hazelcast/hazelcast-jet-operator/tree/master/hazelcast-jet-operator)\n+GitHub repository.\n+\n+## Creating a Hazelcast Jet Cluster\n+\n+After successfully installing the Hazelcast Jet Operator to your cluster\n+we can now create Hazelcast Jet clusters with the `HazelcastJet` custom\n+resource.\n+\n+Create a file name `hazelcast-jet.yaml` with the contents below:\n+\n+```yaml\n+apiVersion: hazelcast.com/v1alpha1\n+kind: HazelcastJet\n+metadata:\n+  name: jet-cluster\n+spec:\n+  cluster:\n+    memberCount: 2\n+  securityContext:\n+    runAsUser: \"\"\n+    runAsGroup: \"\"\n+    fsGroup: \"\"\n+```\n+\n+**Note:** You can use [this\n+file](https://github.com/hazelcast/hazelcast-jet-operator/blob/master/hazelcast-jet-operator/hazelcast-jet-full.yaml)\n+for configuration options reference.\n+\n+>### Setting the License Key for Management Center (Optional)\n+>\n+>If you do have an\n+>active license subscription for Hazelcast Jet Management Center, use\n+>the configuration below to start your cluster. You can\n+>apply for a 30-day trial if you don't have one from [Hazelcast Website](https://hazelcast.com/get-started/#deploymenttype-jet)\n+>. This step is optional and only for Hazelcast Jet Management Center.\n+> Hazelcast Jet doesn't require a license key. You can also skip the\n+> deployment of Management Center altogether by setting the `managementcenter.enabled`\n+> property to `false`.\n+>\n+>```yaml\n+>apiVersion: hazelcast.com/v1alpha1\n+>kind: HazelcastJet\n+>metadata:\n+>  name: jet-cluster\n+>spec:\n+>  cluster:\n+>    memberCount: 2\n+>  securityContext:\n+>    runAsUser: \"\"\n+>    runAsGroup: \"\"\n+>    fsGroup: \"\"\n+>  managementcenter:\n+>    licenseKey: <YOUR_LICENSE_KEY>\n+>```\n+\n+Start Hazelcast Jet cluster with the following command.\n+\n+```bash\n+kubectl apply -f hazelcast-jet.yaml\n+```\n+\n+Your Hazelcast Jet cluster (together with Hazelcast Jet Management Center)\n+should be created.\n+\n+```bash\n+$ kubectl get all\n+NAME                                                               READY   STATUS    RESTARTS   AGE\n+pod/jet-cluster-hazelcast-jet-0                                    1/1     Running   0          6m28s\n+pod/jet-cluster-hazelcast-jet-1                                    1/1     Running   0          5m54s\n+pod/jet-cluster-hazelcast-jet-management-center-85bbf6948b-p5n5h   1/1     Running   0          6m30s\n+\n+NAME                                                  TYPE           CLUSTER-IP     EXTERNAL-IP     PORT(S)                        AGE\n+service/jet-cluster-hazelcast-jet                     ClusterIP      None           <none>          5701/TCP                       6m32s\n+service/jet-cluster-hazelcast-jet-management-center   LoadBalancer   10.47.244.94   34.72.142.219   8081:32476/TCP,443:32535/TCP   6m32s\n+service/kubernetes                                    ClusterIP      10.47.240.1    <none>          443/TCP                        2d22h\n+\n+NAME                                                          READY   UP-TO-DATE   AVAILABLE   AGE\n+deployment.apps/jet-cluster-hazelcast-jet-management-center   1/1     1            1           6m32s\n+\n+NAME                                                                     DESIRED   CURRENT   READY   AGE\n+replicaset.apps/jet-cluster-hazelcast-jet-management-center-85bbf6948b   1         1         1       6m32s\n+\n+NAME                                         READY   AGE\n+statefulset.apps/jet-cluster-hazelcast-jet   2/2     6m33s\n+```\n+\n+Check the logs of the Hazelcast Jet nodes to verify cluster formation\n+with the command below:\n+\n+```bash\n+$ kubectl logs pod/jet-cluster-hazelcast-jet-1\n+...\n+...\n+2020-05-11 07:42:50,785 [ INFO] [hz.naughty_mendel.generic-operation.thread-0] [c.h.i.c.ClusterService]:\n+\n+Members {size:2, ver:2} [\n+ Member [10.44.1.11]:5701 - a720a93f-418a-4656-82a9-ae69eaeba99d\n+ Member [10.44.2.9]:5701 - 5ac07dd4-e631-444e-a9ab-5e5faf1cd617 this\n+]\n+\n+2020-05-11 07:42:51,747 [ INFO] [main] [c.h.c.LifecycleService]: [10.44.2.9]:5701 is STARTED\n+...\n+```\n+\n+As you can verify from the logs that we do have a 2 node Hazelcast Jet\n+cluster formed successfully.\n+\n+## Submitting the Sample Job\n+\n+To access this cluster inside Kubernetes environment from outside, we\n+need to do port forwarding. Port forwarding makes a port of a pod in the\n+remote Kubernetes cluster available to the local environment.\n+\n+To submit a job, we'll do port forwarding from a Hazelcast Jet\n+pod on port 5701 to local port 5701. The command requires to\n+use a pod name to be forwarded.\n+\n+Run the command below with to do port forwarding happen:\n+\n+```bash\n+$ kubectl port-forward pod/jet-cluster-hazelcast-jet-1 5701:5701\n+Forwarding from 127.0.0.1:5701 -> 5701\n+Forwarding from [::1]:5701 -> 5701\n+...\n+```\n+\n+Download and unpack Hazelcast Jet distribution from [Jet\n+Website](https://jet-start.sh/download) to use sample job packaged with it.\n+\n+In a different terminal window, unpack and navigate to the distribution\n+folder with the commands below:\n+\n+```bash\n+tar xf hazelcast-jet-4.1.1.tar.gz\n+cd hazelcast-jet-4.1.1/\n+```\n+\n+Verify that CLI can connect to the cluster with the command below:\n+\n+```bash\n+$ bin/jet cluster\n+State: ACTIVE\n+Version: 4.1", "originalCommit": "517e823f579651a97c537f7c6f1cfb7595b9e6f5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "08e69fee74bc42ec4a876be13bb841d9d2b889e7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/08e69fee74bc42ec4a876be13bb841d9d2b889e7", "message": "fix version tags", "committedDate": "2020-07-13T10:05:12Z", "type": "commit"}, {"oid": "efd66ea2d6655bcab6947ce3616f13d635b36272", "url": "https://github.com/hazelcast/hazelcast-jet/commit/efd66ea2d6655bcab6947ce3616f13d635b36272", "message": "add javadoc", "committedDate": "2020-07-13T10:05:36Z", "type": "commit"}, {"oid": "3822c27c9f3bafe31a014bf63186dbe5531f8dec", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3822c27c9f3bafe31a014bf63186dbe5531f8dec", "message": "add version to list", "committedDate": "2020-07-13T10:05:43Z", "type": "commit"}, {"oid": "7fdde0ff24e8c945f46b299308d89cef70754c71", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7fdde0ff24e8c945f46b299308d89cef70754c71", "message": "Add versioned docs", "committedDate": "2020-07-13T10:08:59Z", "type": "commit"}, {"oid": "7fdde0ff24e8c945f46b299308d89cef70754c71", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7fdde0ff24e8c945f46b299308d89cef70754c71", "message": "Add versioned docs", "committedDate": "2020-07-13T10:08:59Z", "type": "forcePushed"}, {"oid": "90034501f6e75a728ee4ece62bf3788f7e460710", "url": "https://github.com/hazelcast/hazelcast-jet/commit/90034501f6e75a728ee4ece62bf3788f7e460710", "message": "Update javadoc", "committedDate": "2020-07-13T10:42:47Z", "type": "commit"}, {"oid": "27c3951384f40aa06a6a1b3014feb71b568e92ab", "url": "https://github.com/hazelcast/hazelcast-jet/commit/27c3951384f40aa06a6a1b3014feb71b568e92ab", "message": "Update jet version in enterprise operator-openshift.md", "committedDate": "2020-07-13T11:07:22Z", "type": "commit"}]}