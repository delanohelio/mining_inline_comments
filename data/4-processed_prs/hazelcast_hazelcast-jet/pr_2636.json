{"pr_number": 2636, "pr_title": "Add Jet SQL reference manual", "pr_createdAt": "2020-11-02T15:36:36Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2636", "timeline": [{"oid": "01478757912f5b2730099097ff4edc0e08d0ad36", "url": "https://github.com/hazelcast/hazelcast-jet/commit/01478757912f5b2730099097ff4edc0e08d0ad36", "message": "Add Jet SQL reference manual", "committedDate": "2020-11-02T15:33:26Z", "type": "commit"}, {"oid": "7599b6d3ac21101f8f0cfd0419311809706219e0", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7599b6d3ac21101f8f0cfd0419311809706219e0", "message": "Minor", "committedDate": "2020-11-03T07:54:44Z", "type": "commit"}, {"oid": "b06ef134d728dcef8865d06bdf5ca78a1abda590", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b06ef134d728dcef8865d06bdf5ca78a1abda590", "message": "Introduce Jet SQL", "committedDate": "2020-11-03T16:52:26Z", "type": "commit"}, {"oid": "392feefbc7f469a0a4015eb775791501bcfb1250", "url": "https://github.com/hazelcast/hazelcast-jet/commit/392feefbc7f469a0a4015eb775791501bcfb1250", "message": "WIP", "committedDate": "2020-11-04T11:16:18Z", "type": "commit"}, {"oid": "7713ce2bbde16fbec57d7381f69b9b273f9c4bff", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7713ce2bbde16fbec57d7381f69b9b273f9c4bff", "message": "Fix the sample", "committedDate": "2020-11-04T13:12:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2ODQ0Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r517968442", "bodyText": "Possibly leftover (TODO). There are many TODOs in other places as well.", "author": "devozerov", "createdAt": "2020-11-05T11:06:27Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,141 @@\n+---\n+title: SQL Introduction\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet SQL service executes distributed SQL statements over\n+Hazelcast collections and external data sets.\n+\n+It allows you to specify Jet jobs using the well-known SQL language.\n+\n+**Note:** _The service is in beta state. Behavior and API might change in\n+future releases. Binary compatibility is not guaranteed between minor or\n+patch releases._\n+\n+## Overview\n+\n+In the first release Jet SQL supports following features:\n+\n+- SQL Queries over [Apache Kafka topics](05-kafka-connector.md) and\n+[Files (local and remote)](04-files-connector.md)\n+- Joining Kafka or file data with local IMaps (enrichment)\n+- Filtering and projection using [SQL expressions\n+](https://docs.hazelcast.org/docs/latest-dev/manual/html-single/index.html#expressions)  \n+- Aggregating data from files using predefined\n+[aggregate functions](00a-basic-commands#aggregation-functions)\n+- Receiving query results via Jet client (Java) or writing the results\n+to an [IMap](03-imap-connector.md) in the Jet cluster\n+- Running continuous (streaming) and batch queries, see\n+[Job Management](02-job-management.md)\n+\n+Notably, the following features are currently unsupported: joins\n+arbitrary external data sources, window aggregation, JDBC. We plan to\n+support these in the future.\n+\n+## Example: How to query Kafka using SQL\n+\n+Consider that we have a topic called `trades` that contain ticker\n+updates. Trades are encoded as JSON messages:\n+\n+```json\n+{ key: ticker, value: price }\n+```\n+\n+To use a remote topic as a table in Jet, an EXTERNAL MAPPING must be\n+created first. This maps the JSON messages to a fixed list of columns\n+with data types:\n+\n+```java\n+// TODO", "originalCommit": "b06ef134d728dcef8865d06bdf5ca78a1abda590", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2ODkzNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r517968937", "bodyText": "Sorry if I am mistaken, but AFAIU from the SQL PR we support only IMap and Kafka in this release, but not files. Is this the case?", "author": "devozerov", "createdAt": "2020-11-05T11:07:24Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,141 @@\n+---\n+title: SQL Introduction\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet SQL service executes distributed SQL statements over\n+Hazelcast collections and external data sets.\n+\n+It allows you to specify Jet jobs using the well-known SQL language.\n+\n+**Note:** _The service is in beta state. Behavior and API might change in\n+future releases. Binary compatibility is not guaranteed between minor or\n+patch releases._\n+\n+## Overview\n+\n+In the first release Jet SQL supports following features:\n+\n+- SQL Queries over [Apache Kafka topics](05-kafka-connector.md) and\n+[Files (local and remote)](04-files-connector.md)", "originalCommit": "b06ef134d728dcef8865d06bdf5ca78a1abda590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA5OTUzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r518099534", "bodyText": "We plan to have files in the 1st release. We'll re-review the refman before releasing.", "author": "viliam-durina", "createdAt": "2020-11-05T14:38:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk2ODkzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MDQxOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r517970419", "bodyText": "This first statement blurs the difference between IMDG and Jet SQL a bit. There is only one collection supported at the moment - IMap.  How an end-user should decide which product to use? Maybe instead we may mention here that Jet SQL extends IMDG SQL, providing new use cases and features as described in the \"Overview\" section?", "author": "devozerov", "createdAt": "2020-11-05T11:10:01Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,141 @@\n+---\n+title: SQL Introduction\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet SQL service executes distributed SQL statements over\n+Hazelcast collections and external data sets.", "originalCommit": "b06ef134d728dcef8865d06bdf5ca78a1abda590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEwMjAyNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r518102026", "bodyText": "I agree. My original text was much more clear on this, @vladoschreiner rewrite it this way. I'd prefer to be clear about the architecture and possible confusion. @vladoschreiner, wdyt?", "author": "viliam-durina", "createdAt": "2020-11-05T14:41:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MDQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3MTQ1OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r517971458", "bodyText": "Since the streaming query possibly never ends, the example above is an infinite loop in the general case.  Maybe it makes sense to rewrite it a bit, to demonstrate how to finish the execution of the infinite query?", "author": "devozerov", "createdAt": "2020-11-05T11:11:56Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,141 @@\n+---\n+title: SQL Introduction\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet SQL service executes distributed SQL statements over\n+Hazelcast collections and external data sets.\n+\n+It allows you to specify Jet jobs using the well-known SQL language.\n+\n+**Note:** _The service is in beta state. Behavior and API might change in\n+future releases. Binary compatibility is not guaranteed between minor or\n+patch releases._\n+\n+## Overview\n+\n+In the first release Jet SQL supports following features:\n+\n+- SQL Queries over [Apache Kafka topics](05-kafka-connector.md) and\n+[Files (local and remote)](04-files-connector.md)\n+- Joining Kafka or file data with local IMaps (enrichment)\n+- Filtering and projection using [SQL expressions\n+](https://docs.hazelcast.org/docs/latest-dev/manual/html-single/index.html#expressions)  \n+- Aggregating data from files using predefined\n+[aggregate functions](00a-basic-commands#aggregation-functions)\n+- Receiving query results via Jet client (Java) or writing the results\n+to an [IMap](03-imap-connector.md) in the Jet cluster\n+- Running continuous (streaming) and batch queries, see\n+[Job Management](02-job-management.md)\n+\n+Notably, the following features are currently unsupported: joins\n+arbitrary external data sources, window aggregation, JDBC. We plan to\n+support these in the future.\n+\n+## Example: How to query Kafka using SQL\n+\n+Consider that we have a topic called `trades` that contain ticker\n+updates. Trades are encoded as JSON messages:\n+\n+```json\n+{ key: ticker, value: price }\n+```\n+\n+To use a remote topic as a table in Jet, an EXTERNAL MAPPING must be\n+created first. This maps the JSON messages to a fixed list of columns\n+with data types:\n+\n+```java\n+// TODO\n+CREATE MAPPING trade_topic (\n+    __key VARCHAR,\n+    field1 INT)\n+TYPE IMap\n+OPTIONS (\n+    keyFormat 'json',\n+    valueFormat 'json')\n+```\n+\n+Jet SQL queries can now use the `trade_topic` as a table:\n+\n+```java\n+JetInstance inst = ...;\n+try (SqlResult result = inst.getSql().execute(\"SELECT ...\")) {\n+    for (SqlRow row : result) {\n+        // Process the row.\n+    }\n+}\n+\n+```\n+\n+The query now runs in the Jet cluster and streams results to the Jet", "originalCommit": "b06ef134d728dcef8865d06bdf5ca78a1abda590", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3Mjg1Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r517972853", "bodyText": "Which statements are meant here - DML or DML+SELECT?", "author": "devozerov", "createdAt": "2020-11-05T11:14:32Z", "path": "site/docs/sql/00a-basic-commands.md", "diffHunk": "@@ -0,0 +1,125 @@\n+---\n+title: Basic commands\n+description: Description of SELECT, INSERT and SINK commands\n+---\n+\n+\n+## SELECT statement\n+\n+### Synopsis\n+\n+```sql\n+SELECT [ ALL | DISTINCT ] [ * | expression [ [ AS ] expression_alias ] [, ...] ]\n+FROM [schema_name.]table_name [ [ AS ] table_alias ]\n+[ WHERE condition ]\n+[ GROUP BY { expression | expression_index } [, ...] ]\n+[ HAVING condition [, ...] ]\n+```\n+\n+The clauses above are standard SQL clauses. The `table_name` is a\n+mapping name, either as created using [DDL](01-ddl.md) or one created\n+automatically for non-empty IMaps.\n+\n+Jet supports all operators and functions supported by IMDG. For\n+reference, find the _SQL_ section in the _Hazelcast IMDG Reference\n+Manual_. Additionally, Jet supports the aggregation functions.\n+\n+### Aggregation functions\n+\n+Jet supports these aggregation functions:\n+\n+| Name<img width='350'/> | Description |\n+|--|--|\n+|`COUNT(*)` :: `BIGINT` | Computes the number of input rows. |\n+|`COUNT(any)` :: `BIGINT` | Computes the number of input rows in which the input value is not null. |\n+|`SUM(BIGINT)` :: `BIGINT`<br>`SUM(DECIMAL)` :: `DECIMAL`<br>`SUM(DOUBLE)` :: `DOUBLE` | Computes the sum of the non-null input values. |\n+|`AVG(DECIMAL)` :: `DECIMAL`<br>`AVG(DOUBLE)` :: `DOUBLE` | Computes the average (arithmetic mean) of all the non-null input values. |\n+|`MIN(any)` :: _same as input_ | Computes the minimum of the non-null input values. Applicable also to OBJECT type, if the underlying value is `java.lang.Comparable` |\n+|`MAX(any)` :: _same as input_ | Computes the maximum of the non-null input values. Applicable also to OBJECT type, if the underlying value is `java.lang.Comparable` |\n+\n+Except for `COUNT` the functions return NULL when no rows are\n+aggregated. The functions cannot be applied to streaming inputs: they\n+need to accumulate the whole of input to produce some results and you\n+can't do this with input data. Currently, aggregation functions also\n+can't be used for data coming from IMaps because Jet currently doesn't\n+support reading from IMaps.\n+\n+The argument to any aggregation function can be prepended with\n+`DISTINCT` keyword. In this case only distinct values are supplied to\n+the aggregation function. In case of MIN/MAX it makes no difference and\n+the keyword is ignored. For example, this query calculates the number of\n+distinct colors cars in the table have:\n+\n+```sql\n+SELECT COUNT(DISTINCT color)\n+FROM cars\n+```\n+\n+#### Memory considerations\n+\n+The batch aggregation always maintains intermediate results in memory.\n+If you use the `DISTINCT` keyword, Jet also needs increased memory to\n+store the distinct values. Jet currently does not have any memory\n+management. If the number of groups in the result is high, it can lead\n+to `OutOfMemoryException`, after which the cluster might be unusable.\n+Also Jet never does streaming accumulation in case the input is already\n+sorted according to the grouping. This will be done in the future when\n+aggregation functions are supported by the default SQL engine.\n+\n+### Isolation level\n+\n+The isolation level is defined by the individual connectors used by\n+tables involved in the query. In general it's _read-committed_. One\n+aspect of this mode is that it doesn't prevent reading different\n+versions of a single row while executing a single query. In streaming\n+mode this behavior is even desired: for example, if you join a record\n+from an IMap to rows from a Kafka topic, this query can run for months\n+and you want to see the current version of the IMap entry, not the\n+version from the time when the query was started.\n+\n+## INSERT/SINK statement\n+\n+### Synopsis\n+\n+```sql\n+[ INSERT | SINK ] INTO [schema_name.]table_name[(column_name [, ...])]\n+{ SELECT ... | VALUES(expression, [, ...]) }\n+```\n+\n+Jet jobs typically read from some source(s) and write to a sink.\n+However, writing to the sink doesn't directly map to SQL commands. A Jet\n+sink isn't limited to only insert or delete rows, even the SQL standard\n+`MERGE` statement isn't easily applicable.\n+\n+As a solution, Jet uses the non-standard `SINK INTO` command. Its\n+semantics is defined by the each connector. Jet takes the output of the\n+SELECT statement and sends it to the sink to process. For example, when\n+writing to IMap, the value associated with the key is overwritten, one\n+key can be overwritten multiple times.\n+\n+Some connectors support the `INSERT INTO` statement. If they do, the\n+behavior is defined by the SQL standard. For example, the Apache Kafka\n+connector supports it. Jet doesn't support `DELETE` or `UPDATE`\n+statements.\n+\n+### Transactional behavior\n+\n+In SQL a statement is always atomic. In streaming SQL this is not", "originalCommit": "b06ef134d728dcef8865d06bdf5ca78a1abda590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEwMjk0NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r518102944", "bodyText": "Any statement, generally, including DDL. But we don't follow this behavior. I tried to explain that we even can't.", "author": "viliam-durina", "createdAt": "2020-11-05T14:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3Mjg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NDU1Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r517974556", "bodyText": "Instead of having an \"other\" section, we may move ALTER JOB to a job-related section, and introduce a separate snapshot section. It could make the structure a little bit more clear to users.", "author": "devozerov", "createdAt": "2020-11-05T11:17:37Z", "path": "site/docs/sql/02-job-management.md", "diffHunk": "@@ -0,0 +1,99 @@\n+---\n+title: Job Management\n+description: Commands to manage SQL jobs\n+---\n+\n+## CREATE/DROP JOB\n+\n+Creates a job from a query that is not tied to the client session. When\n+you submit an INSERT query, its lifecycle is tied to the client session:\n+if the client disconnects, the query is cancelled, even though it\n+doesn't deliver results to the client.\n+\n+If you want to submit a statement that is independent from the client\n+session, use the `CREATE JOB` command. Such a query will return quickly\n+and the job will run on the cluster. It can also be configured to be\n+fault tolerant.\n+\n+### CREATE JOB Synopsis\n+\n+```sql\n+CREATE JOB [IF NOT EXISTS] job_name\n+[ OPTIONS ( option_name 'option_value' [, ...] ) ]\n+AS query_spec\n+```\n+\n+- `job_name`: a unique name identifying the job.\n+\n+- `query_spec`: the query to run by the job. It must not return rows to\n+  the client, that is it must not start with `SELECT`. Currently we\n+  support `INSERT INTO` or `SINK INTO` queries.\n+\n+- `option_name`, `option_value`: the job configuration options. The list\n+  of options matches the methods in the `JobConfig` class.\n+\n+#### Example\n+\n+```sql\n+CREATE JOB myJob\n+OPTIONS (\n+    processingGuarantee 'exactlyOnce',\n+    snapshotIntervalMillis '5000',\n+    metricsEnabled 'true'\n+) AS\n+INSERT INTO my_sink_topic\n+SELECT * FROM my_source_topic\n+```\n+\n+### DROP JOB Synopsis\n+\n+```sql\n+DROP JOB [IF EXISTS] job_name [WITH SNAPSHOT snapshot_name]\n+```\n+\n+- `IF EXISTS`: don't throw an error if the job doesn't exist\n+\n+- `WITH SNAPSHOT`: export a named snapshot before cancelling the job\n+  (enterprise feature)\n+\n+## Other job operations", "originalCommit": "b06ef134d728dcef8865d06bdf5ca78a1abda590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODExMTYwNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r518111605", "bodyText": "Agree, fixed", "author": "viliam-durina", "createdAt": "2020-11-05T14:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NDU1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NDgxMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r517974812", "bodyText": "Remove?", "author": "devozerov", "createdAt": "2020-11-05T11:18:08Z", "path": "site/docs/sql/04-files-connector.md", "diffHunk": "@@ -0,0 +1,5 @@\n+---\n+title: Files Connector", "originalCommit": "b06ef134d728dcef8865d06bdf5ca78a1abda590", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEwNDMwMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r518104301", "bodyText": "Same as above. I converted the PR to draft, we'll merge after the sql-file branch is merged.", "author": "viliam-durina", "createdAt": "2020-11-05T14:44:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzk3NDgxMg=="}], "type": "inlineReview"}, {"oid": "5acb21f2b275744393547345cc7e49b6d8b2fe00", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5acb21f2b275744393547345cc7e49b6d8b2fe00", "message": "Merge remote-tracking branch 'remotes/hazelcast/master' into sql-refman", "committedDate": "2020-11-05T14:15:01Z", "type": "commit"}, {"oid": "58eb5c1c79903d29a67ad057064e7a5f0e1e6281", "url": "https://github.com/hazelcast/hazelcast-jet/commit/58eb5c1c79903d29a67ad057064e7a5f0e1e6281", "message": "Touch up the docs", "committedDate": "2020-11-05T14:43:13Z", "type": "commit"}, {"oid": "a2e55a2a76643a87757b1c83bbfcffdc363bf276", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a2e55a2a76643a87757b1c83bbfcffdc363bf276", "message": "WIP", "committedDate": "2020-11-05T14:58:47Z", "type": "commit"}, {"oid": "14c3b567db39ad8afc22028ff8b9c67e9045c7ff", "url": "https://github.com/hazelcast/hazelcast-jet/commit/14c3b567db39ad8afc22028ff8b9c67e9045c7ff", "message": "Edit Basic Commands, fix Refman links", "committedDate": "2020-11-06T10:21:05Z", "type": "commit"}, {"oid": "0b5d7ae39d4aa66423101b365e9ccb898a80a5d5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0b5d7ae39d4aa66423101b365e9ccb898a80a5d5", "message": "Tweaks", "committedDate": "2020-11-06T11:29:59Z", "type": "commit"}, {"oid": "ff9deec0825d2c3f508e191d5227c0cb0a1176b5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ff9deec0825d2c3f508e191d5227c0cb0a1176b5", "message": "Edit SQL sections", "committedDate": "2020-11-06T15:20:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NDk2NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r522154964", "bodyText": "price -> value", "author": "olukas", "createdAt": "2020-11-12T14:39:22Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,202 @@\n+---\n+title: Hazelcast Jet SQL\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet allows you to create a Jet processing job using the\n+familiar SQL language. It can execute distributed SQL statements over\n+Hazelcast IMaps and external data sets.\n+\n+**Note:** _The service is in beta state. Behavior and API might change\n+in future releases. Binary compatibility is not guaranteed between minor\n+or patch releases._\n+\n+## Overview\n+\n+In the first release, Jet SQL supports the following features:\n+\n+- SQL Queries over [Apache Kafka topics](05-kafka-connector.md) and\n+[files (local and remote)](04-files-connector.md)\n+- Joining Kafka or file data with local IMaps (enrichment)\n+- Filtering and projection using [SQL\n+expressions](https://docs.hazelcast.org/docs/{imdg-version}/manual/html-single/index.html#expressions)\n+- Aggregating data from files using predefined\n+[aggregate functions](00a-basic-commands#aggregation-functions)\n+- Receiving query results via Jet client (Java) or writing the results\n+to an [IMap](03-imap-connector.md) in the Jet cluster\n+- Running continuous (streaming) and batch queries, see\n+[Job Management](02-job-management.md)\n+\n+These are some of the features on our roadmap:\n+\n+- Joins with arbitrary external data sources\n+- Windowed aggregation\n+- JDBC\n+\n+## Example: How to query Apache Kafka using SQL\n+\n+We have a topic called `trades` with stock trade events. Trades are\n+encoded as JSON messages:\n+\n+```json\n+{ \"ticker\": \"ABCD\", \"price\": 5.5 }", "originalCommit": "ff9deec0825d2c3f508e191d5227c0cb0a1176b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk0Mjg3Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r523942877", "bodyText": "What do you mean?", "author": "viliam-durina", "createdAt": "2020-11-16T07:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NDk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg4MjYxOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r525882619", "bodyText": "I meant we have json { \"ticker\": \"ABCD\", \"price\": 5.5 } and mapping CREATE MAPPING trades (ticker VARCHAR, value DECIMAL). It should be json { \"ticker\": \"ABCD\", \"value\": 5.5 }.", "author": "olukas", "createdAt": "2020-11-18T08:06:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NDk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NTU5OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r522155598", "bodyText": "JsonSerializer -> JsonDeserializer", "author": "olukas", "createdAt": "2020-11-12T14:40:03Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,202 @@\n+---\n+title: Hazelcast Jet SQL\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet allows you to create a Jet processing job using the\n+familiar SQL language. It can execute distributed SQL statements over\n+Hazelcast IMaps and external data sets.\n+\n+**Note:** _The service is in beta state. Behavior and API might change\n+in future releases. Binary compatibility is not guaranteed between minor\n+or patch releases._\n+\n+## Overview\n+\n+In the first release, Jet SQL supports the following features:\n+\n+- SQL Queries over [Apache Kafka topics](05-kafka-connector.md) and\n+[files (local and remote)](04-files-connector.md)\n+- Joining Kafka or file data with local IMaps (enrichment)\n+- Filtering and projection using [SQL\n+expressions](https://docs.hazelcast.org/docs/{imdg-version}/manual/html-single/index.html#expressions)\n+- Aggregating data from files using predefined\n+[aggregate functions](00a-basic-commands#aggregation-functions)\n+- Receiving query results via Jet client (Java) or writing the results\n+to an [IMap](03-imap-connector.md) in the Jet cluster\n+- Running continuous (streaming) and batch queries, see\n+[Job Management](02-job-management.md)\n+\n+These are some of the features on our roadmap:\n+\n+- Joins with arbitrary external data sources\n+- Windowed aggregation\n+- JDBC\n+\n+## Example: How to query Apache Kafka using SQL\n+\n+We have a topic called `trades` with stock trade events. Trades are\n+encoded as JSON messages:\n+\n+```json\n+{ \"ticker\": \"ABCD\", \"price\": 5.5 }\n+```\n+\n+To use a remote topic as a table in Jet, first create an `EXTERNAL\n+MAPPING`. It maps the JSON messages to a fixed list of columns with\n+data types:\n+\n+```sql\n+CREATE MAPPING trades (\n+    ticker VARCHAR,\n+    value DECIMAL)\n+TYPE Kafka\n+OPTIONS (\n+    valueFormat 'json',\n+    \"bootstrap.servers\" '1.2.3.4',\n+    \"value.deserializer\" 'org.apache.kafka.connect.json.JsonSerializer')", "originalCommit": "ff9deec0825d2c3f508e191d5227c0cb0a1176b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1NjAyNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r522156027", "bodyText": "We should also put key.deserializer into OPTIONS here", "author": "olukas", "createdAt": "2020-11-12T14:40:38Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,202 @@\n+---\n+title: Hazelcast Jet SQL\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet allows you to create a Jet processing job using the\n+familiar SQL language. It can execute distributed SQL statements over\n+Hazelcast IMaps and external data sets.\n+\n+**Note:** _The service is in beta state. Behavior and API might change\n+in future releases. Binary compatibility is not guaranteed between minor\n+or patch releases._\n+\n+## Overview\n+\n+In the first release, Jet SQL supports the following features:\n+\n+- SQL Queries over [Apache Kafka topics](05-kafka-connector.md) and\n+[files (local and remote)](04-files-connector.md)\n+- Joining Kafka or file data with local IMaps (enrichment)\n+- Filtering and projection using [SQL\n+expressions](https://docs.hazelcast.org/docs/{imdg-version}/manual/html-single/index.html#expressions)\n+- Aggregating data from files using predefined\n+[aggregate functions](00a-basic-commands#aggregation-functions)\n+- Receiving query results via Jet client (Java) or writing the results\n+to an [IMap](03-imap-connector.md) in the Jet cluster\n+- Running continuous (streaming) and batch queries, see\n+[Job Management](02-job-management.md)\n+\n+These are some of the features on our roadmap:\n+\n+- Joins with arbitrary external data sources\n+- Windowed aggregation\n+- JDBC\n+\n+## Example: How to query Apache Kafka using SQL\n+\n+We have a topic called `trades` with stock trade events. Trades are\n+encoded as JSON messages:\n+\n+```json\n+{ \"ticker\": \"ABCD\", \"price\": 5.5 }\n+```\n+\n+To use a remote topic as a table in Jet, first create an `EXTERNAL\n+MAPPING`. It maps the JSON messages to a fixed list of columns with\n+data types:\n+\n+```sql\n+CREATE MAPPING trades (\n+    ticker VARCHAR,\n+    value DECIMAL)\n+TYPE Kafka\n+OPTIONS (", "originalCommit": "ff9deec0825d2c3f508e191d5227c0cb0a1176b5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1ODYyNg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r522158626", "bodyText": "Since trades  is streaming job which means it will never finish isn't this actually example of \"how this should not be used\"?", "author": "olukas", "createdAt": "2020-11-12T14:44:05Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,202 @@\n+---\n+title: Hazelcast Jet SQL\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet allows you to create a Jet processing job using the\n+familiar SQL language. It can execute distributed SQL statements over\n+Hazelcast IMaps and external data sets.\n+\n+**Note:** _The service is in beta state. Behavior and API might change\n+in future releases. Binary compatibility is not guaranteed between minor\n+or patch releases._\n+\n+## Overview\n+\n+In the first release, Jet SQL supports the following features:\n+\n+- SQL Queries over [Apache Kafka topics](05-kafka-connector.md) and\n+[files (local and remote)](04-files-connector.md)\n+- Joining Kafka or file data with local IMaps (enrichment)\n+- Filtering and projection using [SQL\n+expressions](https://docs.hazelcast.org/docs/{imdg-version}/manual/html-single/index.html#expressions)\n+- Aggregating data from files using predefined\n+[aggregate functions](00a-basic-commands#aggregation-functions)\n+- Receiving query results via Jet client (Java) or writing the results\n+to an [IMap](03-imap-connector.md) in the Jet cluster\n+- Running continuous (streaming) and batch queries, see\n+[Job Management](02-job-management.md)\n+\n+These are some of the features on our roadmap:\n+\n+- Joins with arbitrary external data sources\n+- Windowed aggregation\n+- JDBC\n+\n+## Example: How to query Apache Kafka using SQL\n+\n+We have a topic called `trades` with stock trade events. Trades are\n+encoded as JSON messages:\n+\n+```json\n+{ \"ticker\": \"ABCD\", \"price\": 5.5 }\n+```\n+\n+To use a remote topic as a table in Jet, first create an `EXTERNAL\n+MAPPING`. It maps the JSON messages to a fixed list of columns with\n+data types:\n+\n+```sql\n+CREATE MAPPING trades (\n+    ticker VARCHAR,\n+    value DECIMAL)\n+TYPE Kafka\n+OPTIONS (\n+    valueFormat 'json',\n+    \"bootstrap.servers\" '1.2.3.4',\n+    \"value.deserializer\" 'org.apache.kafka.connect.json.JsonSerializer')\n+```\n+\n+To submit the above query, use the Java API (we plan JDBC support and\n+support in non-Java clients in the future):\n+\n+```java\n+JetInstance inst = ...;\n+inst.getSql().execute( /* query text */ );\n+```\n+\n+A SQL query can now be used to read from the `trades` topic, as if it\n+was a table:\n+\n+```java\n+JetInstance inst = ...;\n+try (SqlResult result = inst.getSql().execute(\"SELECT * FROM trades\")) {\n+    for (SqlRow row : result) {", "originalCommit": "ff9deec0825d2c3f508e191d5227c0cb0a1176b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MTU2Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r523951566", "bodyText": "Why not? You can have a command-line client that prints the contents of a topic, until it's killed with ctrl-c. It's clearly noted below.", "author": "viliam-durina", "createdAt": "2020-11-16T07:57:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1ODYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1OTk3MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r522159970", "bodyText": "\"Aggregating data from files\" - data from Kafka cannot be aggregated?", "author": "olukas", "createdAt": "2020-11-12T14:45:43Z", "path": "site/docs/sql/00-intro.md", "diffHunk": "@@ -0,0 +1,202 @@\n+---\n+title: Hazelcast Jet SQL\n+description: Introduction to Hazelcast Jet SQL features.\n+---\n+\n+Hazelcast Jet allows you to create a Jet processing job using the\n+familiar SQL language. It can execute distributed SQL statements over\n+Hazelcast IMaps and external data sets.\n+\n+**Note:** _The service is in beta state. Behavior and API might change\n+in future releases. Binary compatibility is not guaranteed between minor\n+or patch releases._\n+\n+## Overview\n+\n+In the first release, Jet SQL supports the following features:\n+\n+- SQL Queries over [Apache Kafka topics](05-kafka-connector.md) and\n+[files (local and remote)](04-files-connector.md)\n+- Joining Kafka or file data with local IMaps (enrichment)\n+- Filtering and projection using [SQL\n+expressions](https://docs.hazelcast.org/docs/{imdg-version}/manual/html-single/index.html#expressions)\n+- Aggregating data from files using predefined", "originalCommit": "ff9deec0825d2c3f508e191d5227c0cb0a1176b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MjE4Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r523952183", "bodyText": "Nope, you can't aggregate a streaming data - you need complete data and they are never complete. For imap it doesn't work either, but in this case just because it isn't implemented yet.", "author": "viliam-durina", "createdAt": "2020-11-16T07:58:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1OTk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1MzQwMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r522953402", "bodyText": "We should be more certain here because it seems that some of them are supported (for example processingGuarantee) but some of them not (for example name). I think it's also ambiguous - it's not clear whether name should be processingGuarantee or setProcessingGuarantee (it's can be understand from example but I think it should be mentioned here clearly).", "author": "olukas", "createdAt": "2020-11-13T13:35:59Z", "path": "site/docs/sql/02-job-management.md", "diffHunk": "@@ -0,0 +1,104 @@\n+---\n+title: Job Management\n+description: Commands to manage SQL jobs\n+---\n+\n+## CREATE/DROP/ALTER JOB\n+\n+These statements create a potentially long-running Jet job that is not\n+tied to the client session.\n+\n+When you submit a standard INSERT query, its lifecycle is tied to the\n+client session: if the client disconnects, the query is cancelled, even\n+if it is supposed deliver results somewhere else (not back to the\n+client).\n+\n+If you want to submit a statement that is independent from the client\n+session, use the `CREATE JOB` statement. Such a statement will complete\n+quickly and let the job running in the cluster. You can also configure\n+it to be fault-tolerant.\n+\n+### CREATE JOB Synopsis\n+\n+```sql\n+CREATE JOB [IF NOT EXISTS] job_name\n+[ OPTIONS ( option_name 'option_value' [, ...] ) ]\n+AS query_spec\n+```\n+\n+- `job_name`: a unique name identifying the job.\n+\n+- `query_spec`: the query the job will run. Currently we support `INSERT\n+  INTO` and `SINK INTO` queries. `SELECT` is not supported by design\n+  because it returns the results to the client.\n+\n+- `option_name`, `option_value`: the job configuration options. The list\n+  of options matches the methods in the `JobConfig` class.", "originalCommit": "ff9deec0825d2c3f508e191d5227c0cb0a1176b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MjU5OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2636#discussion_r523952598", "bodyText": "will create a new issue about this.", "author": "viliam-durina", "createdAt": "2020-11-16T07:59:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1MzQwMg=="}], "type": "inlineReview"}, {"oid": "5c2602514522af9e3c0bcfa97d3bad89843b2f97", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5c2602514522af9e3c0bcfa97d3bad89843b2f97", "message": "Merge remote-tracking branch 'remotes/hazelcast/master' into sql-refman", "committedDate": "2020-11-16T07:31:58Z", "type": "commit"}, {"oid": "e805c09a91637def15822e2815828ab4acb0e97c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e805c09a91637def15822e2815828ab4acb0e97c", "message": "Remove empty files page", "committedDate": "2020-11-16T07:33:49Z", "type": "commit"}]}