{"pr_number": 2419, "pr_title": "[005] Define behaviour and network tests for MySQL CDC", "pr_createdAt": "2020-07-27T11:37:04Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2419", "timeline": [{"oid": "f202a248c7a6a4c2ab24646ff04cbbc8862abadb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f202a248c7a6a4c2ab24646ff04cbbc8862abadb", "message": "Define behaviour and network tests for MySQL", "committedDate": "2020-07-27T11:32:55Z", "type": "commit"}, {"oid": "3328e8c7f1844ad829358a5009e8c8e129f77944", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3328e8c7f1844ad829358a5009e8c8e129f77944", "message": "Make tests more deterministic", "committedDate": "2020-07-28T07:18:51Z", "type": "commit"}, {"oid": "ebaf6ebf99768263b33b56bdfb6d67f181c8f622", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ebaf6ebf99768263b33b56bdfb6d67f181c8f622", "message": "Add reconnect tests for Postgres", "committedDate": "2020-07-28T12:14:14Z", "type": "commit"}, {"oid": "8d41842e2b44f237dd6d125ea94763c24fd4409a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8d41842e2b44f237dd6d125ea94763c24fd4409a", "message": "Add javadoc", "committedDate": "2020-07-29T08:39:01Z", "type": "commit"}, {"oid": "3c84ec571d488674b69d8cfeef9288f3d79556ac", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3c84ec571d488674b69d8cfeef9288f3d79556ac", "message": "Add javadoc and adjust tests for Postgres too", "committedDate": "2020-07-29T11:41:07Z", "type": "commit"}, {"oid": "d797c00dedaeea1ae3298611cb1e81970bdf7d7e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d797c00dedaeea1ae3298611cb1e81970bdf7d7e", "message": "Make the connect/disconnect methods private", "committedDate": "2020-08-05T08:48:02Z", "type": "commit"}, {"oid": "dbedbc490a6d4014a97caac1e172567a16586155", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dbedbc490a6d4014a97caac1e172567a16586155", "message": "Make sure task is always set to a fully initialized value", "committedDate": "2020-08-05T09:03:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4ODIwMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r465588200", "bodyText": "threats -> treats", "author": "mtopolnik", "createdAt": "2020-08-05T09:15:33Z", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -45,12 +45,60 @@ private MySqlCdcSources() {\n      * Creates a CDC source that streams change data from a MySQL database to\n      * Hazelcast Jet.\n      * <p>\n-     * <b>KNOWN ISSUE:</b> If Jet can't reach the database when it attempts to\n-     * start the source or if it looses the connection to the database from an\n-     * already running source, it throws an exception and terminate the\n-     * execution of the job. This behaviour is not ideal, would be much better\n-     * to try to reconnect, at least for a certain amount of time. Future\n-     * versions will address the problem.\n+     * Behaviour of the source on connection disruptions to the database is\n+     * configurable and is governed by the {@code setReconnectBehaviour(String)}\n+     * setting (as far as the underlying Debezium connector cooperates, read\n+     * further for details).\n+     * <p>\n+     * The default reconnect behaviour is <em>FAIL</em>, which threats any", "originalCommit": "3c84ec571d488674b69d8cfeef9288f3d79556ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4ODk1Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r465588957", "bodyText": "each-other -> each other", "author": "mtopolnik", "createdAt": "2020-08-05T09:16:49Z", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -45,12 +45,60 @@ private MySqlCdcSources() {\n      * Creates a CDC source that streams change data from a MySQL database to\n      * Hazelcast Jet.\n      * <p>\n-     * <b>KNOWN ISSUE:</b> If Jet can't reach the database when it attempts to\n-     * start the source or if it looses the connection to the database from an\n-     * already running source, it throws an exception and terminate the\n-     * execution of the job. This behaviour is not ideal, would be much better\n-     * to try to reconnect, at least for a certain amount of time. Future\n-     * versions will address the problem.\n+     * Behaviour of the source on connection disruptions to the database is\n+     * configurable and is governed by the {@code setReconnectBehaviour(String)}\n+     * setting (as far as the underlying Debezium connector cooperates, read\n+     * further for details).\n+     * <p>\n+     * The default reconnect behaviour is <em>FAIL</em>, which threats any\n+     * connection failure as an unrecoverable problem and produces the failure\n+     * of the source and the entire job. (How Jet handles job failures and what\n+     * ways there are for recovering from them, is a generic issue not discussed\n+     * here.)\n+     * <p>\n+     * The other two behaviour options, <em>RECONNECT</em> and\n+     * <em>CLEAR_STATE_AND_RECONNECT</em>, instruct the source to try to\n+     * automatically recover from any connection failure by reconnecting,\n+     * either via the connector's internal reconnect mechanisms or by restarting\n+     * the whole source. The two types of behaviour differ from each-other in", "originalCommit": "3c84ec571d488674b69d8cfeef9288f3d79556ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU4OTI0MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r465589241", "bodyText": "if they -> whether they\nor if they -> or they", "author": "mtopolnik", "createdAt": "2020-08-05T09:17:19Z", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -45,12 +45,60 @@ private MySqlCdcSources() {\n      * Creates a CDC source that streams change data from a MySQL database to\n      * Hazelcast Jet.\n      * <p>\n-     * <b>KNOWN ISSUE:</b> If Jet can't reach the database when it attempts to\n-     * start the source or if it looses the connection to the database from an\n-     * already running source, it throws an exception and terminate the\n-     * execution of the job. This behaviour is not ideal, would be much better\n-     * to try to reconnect, at least for a certain amount of time. Future\n-     * versions will address the problem.\n+     * Behaviour of the source on connection disruptions to the database is\n+     * configurable and is governed by the {@code setReconnectBehaviour(String)}\n+     * setting (as far as the underlying Debezium connector cooperates, read\n+     * further for details).\n+     * <p>\n+     * The default reconnect behaviour is <em>FAIL</em>, which threats any\n+     * connection failure as an unrecoverable problem and produces the failure\n+     * of the source and the entire job. (How Jet handles job failures and what\n+     * ways there are for recovering from them, is a generic issue not discussed\n+     * here.)\n+     * <p>\n+     * The other two behaviour options, <em>RECONNECT</em> and\n+     * <em>CLEAR_STATE_AND_RECONNECT</em>, instruct the source to try to\n+     * automatically recover from any connection failure by reconnecting,\n+     * either via the connector's internal reconnect mechanisms or by restarting\n+     * the whole source. The two types of behaviour differ from each-other in\n+     * how exactly they handle the source restart, if they preserve the current", "originalCommit": "3c84ec571d488674b69d8cfeef9288f3d79556ac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f80f3956f135d61fb4b65e6526c2c391867625db", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f80f3956f135d61fb4b65e6526c2c391867625db", "message": "Re-raise interrupted flag on InterruptedException", "committedDate": "2020-08-05T09:38:10Z", "type": "commit"}, {"oid": "41f160cebbadc2e07ed836785c2093d6a886a393", "url": "https://github.com/hazelcast/hazelcast-jet/commit/41f160cebbadc2e07ed836785c2093d6a886a393", "message": "Remove explicit sleeping", "committedDate": "2020-08-05T09:49:52Z", "type": "commit"}, {"oid": "8c1956874136f5f69f1a97fb48a5d85cc3c95955", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8c1956874136f5f69f1a97fb48a5d85cc3c95955", "message": "Simplify reconnect logic", "committedDate": "2020-08-05T10:50:54Z", "type": "commit"}, {"oid": "028db78bf70fcf25700458683cc6f92bd952fd18", "url": "https://github.com/hazelcast/hazelcast-jet/commit/028db78bf70fcf25700458683cc6f92bd952fd18", "message": "Fix phrasing issues", "committedDate": "2020-08-05T10:54:11Z", "type": "commit"}, {"oid": "d1be3097e2b6beda8a7112b7468a2fb4b2d0808f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d1be3097e2b6beda8a7112b7468a2fb4b2d0808f", "message": "Merge branch 'master' into cdc-disconnect", "committedDate": "2020-08-06T06:11:25Z", "type": "commit"}, {"oid": "72e0d977d9d8cb782d0b149de61a7acb5cca4dfb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/72e0d977d9d8cb782d0b149de61a7acb5cca4dfb", "message": "Fix licence issue", "committedDate": "2020-08-06T07:05:10Z", "type": "commit"}, {"oid": "d3527a82061b1867514b116116f80b8bbd882988", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d3527a82061b1867514b116116f80b8bbd882988", "message": "Revert some changes", "committedDate": "2020-08-06T07:05:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NDU1NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466194554", "bodyText": "Seems like some leftover?", "author": "olukas", "createdAt": "2020-08-06T07:16:46Z", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -100,11 +108,106 @@ public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<T> buf) {\n                     state.setOffset(partition, offset);\n                 }\n             }\n-        } catch (InterruptedException e) {\n+        } catch (ConnectException ce) {\n+            reconnect(reconnectBehaviour, ce);\n+        } catch (InterruptedException ie) {\n+            logger.warning(\"Waiting for data interrupted\");\n+            Thread.currentThread().interrupt();\n+        } catch (Exception e) {\n+            throw rethrow(e);\n+        }\n+    }\n+\n+    private boolean isSleepNeeded() {\n+        if (sleepUntilNanoTime != null) {\n+            if (System.nanoTime() < sleepUntilNanoTime) {\n+                return true;\n+            }\n+            sleepUntilNanoTime = null;\n+        }\n+        return false;\n+    }\n+\n+    private boolean isConnectorReady() {\n+        try {\n+            if (connector == null) {\n+                connector = startNewConnector();\n+                taskConfig = connector.taskConfigs(1).get(0);\n+            }\n+            return true;\n+        } catch (Exception e) {\n             throw rethrow(e);\n         }\n     }\n \n+    private SourceConnector startNewConnector() throws Exception {\n+        SourceConnector connector = newInstance(properties, CONNECTOR_CLASS_PROPERTY);\n+        connector.initialize(new JetConnectorContext());\n+        connector.start((Map) properties);\n+        return connector;\n+    }\n+\n+    private boolean isTaskReady() {\n+        try {\n+            if (task == null) {\n+                task = startNewTask();\n+            }\n+            return true;\n+        } catch (Exception e) {\n+            switch (reconnectBehaviour) {\n+                case FAIL:\n+                    logger.warning(\"Initializing connector task failed, giving up: \" + e.getMessage());\n+                    throw new JetException(\"Initializing connector task failed\", e);\n+                case RECONNECT:\n+                case CLEAR_STATE_AND_RECONNECT:\n+                    logger.warning(\"Initializing connector task failed, retrying in \" +\n+                            NANOSECONDS.toMillis(reconnectIntervalNanos) + \"ms: \" + e.getMessage());\n+                    sleepUntilNanoTime = System.nanoTime() + reconnectIntervalNanos;\n+                    break;\n+                default:\n+                    throw new RuntimeException(\"Programming error, unhandled reconnect behaviour: \" + reconnectBehaviour);\n+            }\n+            return false;\n+        }\n+    }\n+\n+    private SourceTask startNewTask() throws Exception {\n+        SourceTask task = (SourceTask) connector.taskClass().getConstructor().newInstance();\n+        task.initialize(new JetSourceTaskContext());\n+\n+        // Our DatabaseHistory implementation will be created by the\n+        // following start() call, on this thread (blocking worker\n+        // thread) and this is how we pass it the list it should\n+        // use for storing history records.\n+        THREAD_LOCAL_HISTORY.set(state.historyRecords);\n+        task.start(taskConfig);\n+        System.err.println(\"### task START\");", "originalCommit": "d3527a82061b1867514b116116f80b8bbd882988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NjY5NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466196695", "bodyText": "Why we take String here? Would not be better to take ReconnectBehaviour directly?", "author": "olukas", "createdAt": "2020-08-06T07:21:03Z", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -301,6 +352,42 @@ public Builder setSslTruststorePassword(@Nonnull String password) {\n             return this;\n         }\n \n+        /**\n+         * Interval in milliseconds after which to do periodic connection checking\n+         * and initiate reconnect, if necessary. Defaults to\n+         * {@value CdcSource#DEFAULT_RECONNECT_INTERVAL_MS} milliseconds.\n+         */\n+        @Nonnull\n+        public Builder setReconnectIntervalMs(long intervalMs) {\n+            config.setProperty(CdcSource.RECONNECT_INTERVAL_MS, intervalMs);\n+            config.setProperty(\"connect.keep.alive.interval.ms\", intervalMs);\n+            return this;\n+        }\n+\n+        /**\n+         * Specifies how the connector should behave when it detects that the\n+         * backing database has been shut down (note: temporary connection\n+         * disruptions will not be interpreted in this way; after simple\n+         * network outages the connector will automatically reconnect,\n+         * regardless of this setting).\n+         * <p>\n+         * Possible values are (they are <em>not</em> case sensitive):\n+         * <ul>\n+         *     <li><em>FAIL</em>: will cause the whole job to fail</li>\n+         *     <li><em>CLEAR_STATE_AND_RECONNECT</em>: will reconnect to\n+         *      database, but will clear all internal state first, thus behaving\n+         *      as if it would be connecting the first time (for example\n+         *      snapshotting will be repeated)</li>\n+         *     <li><em>RECONNECT</em>: will reconnect as is, in the same state\n+         *      as it was at the moment of the disconnect </li>\n+         * </ul>\n+         */\n+        @Nonnull\n+        public Builder setReconnectBehaviour(String behaviour) {", "originalCommit": "d3527a82061b1867514b116116f80b8bbd882988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMTg4OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466221888", "bodyText": "I don't want to expose that implementation code + this will probably be rewritten to a new abstraction taken from https://resilience4j.readme.io/docs/retry anyways.", "author": "jbartok", "createdAt": "2020-08-06T08:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5NjY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5OTM0MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466199341", "bodyText": "From users point of view - isn't periodical reconnect interval just an implementation detail? I think more useful would be to have some max timeout - once it would exceed this timeout then job should fail. Or maybe better this reconnectIntervalMs + max reconnection attempts. WDYT?", "author": "olukas", "createdAt": "2020-08-06T07:25:50Z", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -301,6 +352,42 @@ public Builder setSslTruststorePassword(@Nonnull String password) {\n             return this;\n         }\n \n+        /**\n+         * Interval in milliseconds after which to do periodic connection checking\n+         * and initiate reconnect, if necessary. Defaults to\n+         * {@value CdcSource#DEFAULT_RECONNECT_INTERVAL_MS} milliseconds.\n+         */\n+        @Nonnull\n+        public Builder setReconnectIntervalMs(long intervalMs) {", "originalCommit": "d3527a82061b1867514b116116f80b8bbd882988", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyMjY2MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466222661", "bodyText": "Yes, I agree and the rewrite to https://resilience4j.readme.io/docs/retry should make it so.", "author": "jbartok", "createdAt": "2020-08-06T08:07:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5OTM0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE5OTgwMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466199803", "bodyText": "All tests in this class are NightlyTest. Can we move this category to class level to have it more clear?", "author": "olukas", "createdAt": "2020-08-06T07:26:45Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlCdcNetworkIntegrationTest.java", "diffHunk": "@@ -0,0 +1,341 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.github.dockerjava.api.command.CreateContainerCmd;\n+import com.github.dockerjava.api.model.ExposedPort;\n+import com.github.dockerjava.api.model.PortBinding;\n+import com.github.dockerjava.api.model.Ports;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.cdc.AbstractCdcIntegrationTest;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import com.hazelcast.test.HazelcastSerialParametersRunnerFactory;\n+import com.hazelcast.test.annotation.NightlyTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.testcontainers.containers.MySQLContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.hazelcast.jet.Util.entry;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.CLEAR_STATE_AND_RECONNECT;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.FAIL;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.RECONNECT;\n+import static com.hazelcast.jet.core.JobStatus.FAILED;\n+import static com.hazelcast.jet.core.JobStatus.RUNNING;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.runners.Parameterized.Parameter;\n+import static org.junit.runners.Parameterized.Parameters;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastSerialParametersRunnerFactory.class)\n+public class MySqlCdcNetworkIntegrationTest extends AbstractCdcIntegrationTest {\n+\n+    private static final long CONNECTION_KEEPALIVE_MS = SECONDS.toMillis(1);\n+\n+    @Parameter\n+    public ReconnectBehaviour reconnectBehaviour;\n+\n+    @Parameters(name = \"{index}: behaviour={0}\")\n+    public static Iterable<?> parameters() {\n+        return Arrays.asList(FAIL, RECONNECT, CLEAR_STATE_AND_RECONNECT);\n+    }\n+\n+    @Test\n+    @Category(NightlyTest.class)", "originalCommit": "d3527a82061b1867514b116116f80b8bbd882988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwMDA1MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466200051", "bodyText": "All tests in this class are NightlyTest. Can we move this category to class level to have it more clear?", "author": "olukas", "createdAt": "2020-08-06T07:27:15Z", "path": "extensions/cdc-postgres/src/test/java/com/hazelcast/jet/cdc/postgres/PostgresCdcNetworkIntegrationTest.java", "diffHunk": "@@ -0,0 +1,368 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.postgres;\n+\n+import com.github.dockerjava.api.command.CreateContainerCmd;\n+import com.github.dockerjava.api.model.ExposedPort;\n+import com.github.dockerjava.api.model.PortBinding;\n+import com.github.dockerjava.api.model.Ports;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.cdc.AbstractCdcIntegrationTest;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import com.hazelcast.test.HazelcastSerialParametersRunnerFactory;\n+import com.hazelcast.test.annotation.NightlyTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.PostgreSQLContainer;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import javax.annotation.Nonnull;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.function.Consumer;\n+\n+import static com.hazelcast.jet.Util.entry;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.CLEAR_STATE_AND_RECONNECT;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.FAIL;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.RECONNECT;\n+import static com.hazelcast.jet.core.JobStatus.FAILED;\n+import static com.hazelcast.jet.core.JobStatus.RUNNING;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.testcontainers.containers.PostgreSQLContainer.POSTGRESQL_PORT;\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastSerialParametersRunnerFactory.class)\n+public class PostgresCdcNetworkIntegrationTest extends AbstractCdcIntegrationTest {\n+\n+    private static final long RECONNECT_INTERVAL_MS = SECONDS.toMillis(1);\n+\n+    @Parameter\n+    public ReconnectBehaviour reconnectBehaviour;\n+\n+    @Parameterized.Parameters(name = \"{index}: behaviour={0}\")\n+    public static Iterable<?> parameters() {\n+        return Arrays.asList(FAIL, RECONNECT, CLEAR_STATE_AND_RECONNECT);\n+    }\n+\n+    @Test\n+    @Category(NightlyTest.class)", "originalCommit": "d3527a82061b1867514b116116f80b8bbd882988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIwMDM3Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466200372", "bodyText": "Can we please check that the job failed with expected exception? (and do the same for other failed jobs in this test and in PostgresCdcNetworkIntegrationTest)", "author": "olukas", "createdAt": "2020-08-06T07:27:54Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlCdcNetworkIntegrationTest.java", "diffHunk": "@@ -0,0 +1,341 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.github.dockerjava.api.command.CreateContainerCmd;\n+import com.github.dockerjava.api.model.ExposedPort;\n+import com.github.dockerjava.api.model.PortBinding;\n+import com.github.dockerjava.api.model.Ports;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.cdc.AbstractCdcIntegrationTest;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import com.hazelcast.test.HazelcastSerialParametersRunnerFactory;\n+import com.hazelcast.test.annotation.NightlyTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.testcontainers.containers.MySQLContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+\n+import static com.hazelcast.jet.Util.entry;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.CLEAR_STATE_AND_RECONNECT;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.FAIL;\n+import static com.hazelcast.jet.cdc.impl.CdcSource.ReconnectBehaviour.RECONNECT;\n+import static com.hazelcast.jet.core.JobStatus.FAILED;\n+import static com.hazelcast.jet.core.JobStatus.RUNNING;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.runners.Parameterized.Parameter;\n+import static org.junit.runners.Parameterized.Parameters;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastSerialParametersRunnerFactory.class)\n+public class MySqlCdcNetworkIntegrationTest extends AbstractCdcIntegrationTest {\n+\n+    private static final long CONNECTION_KEEPALIVE_MS = SECONDS.toMillis(1);\n+\n+    @Parameter\n+    public ReconnectBehaviour reconnectBehaviour;\n+\n+    @Parameters(name = \"{index}: behaviour={0}\")\n+    public static Iterable<?> parameters() {\n+        return Arrays.asList(FAIL, RECONNECT, CLEAR_STATE_AND_RECONNECT);\n+    }\n+\n+    @Test\n+    @Category(NightlyTest.class)\n+    public void when_noDatabaseToConnectTo() {\n+        Pipeline pipeline = initPipeline(\"localhost\", MYSQL_PORT);\n+\n+        // when job starts\n+        JetInstance jet = createJetMembers(2)[0];\n+        Job job = jet.newJob(pipeline);\n+\n+        // then can't connect to DB\n+        assertTrueEventually(() -> assertTrue(job.getStatus().equals(RUNNING) || job.getStatus().equals(FAILED)));\n+        assertTrueAllTheTime(() -> assertTrue(jet.getMap(\"results\").isEmpty()),\n+                2 * MILLISECONDS.toSeconds(CONNECTION_KEEPALIVE_MS));\n+\n+        // when DB starts\n+        MySQLContainer<?> mysql = initMySql(null, MYSQL_PORT);\n+\n+        try {\n+            // then\n+            if (FAIL.equals(reconnectBehaviour)) {\n+                // then job fails\n+                assertJobStatusEventually(job, FAILED);", "originalCommit": "d3527a82061b1867514b116116f80b8bbd882988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxNzk3MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r466217971", "bodyText": "We should remove incorrectAddress() also from PostgresCdcAuthAndConnectionIntegrationTest since it is duplicated by PostgresCdcNetworkIntegrationTest.when_noDatabaseToConnectTo() test.", "author": "olukas", "createdAt": "2020-08-06T07:59:21Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlCdcAuthIntegrationTest.java", "diffHunk": "@@ -57,31 +56,6 @@ public void wrongPassword() {\n                 .hasStackTraceContaining(\"Access denied for user\");\n     }\n \n-    @Test\n-    public void incorrectAddress() {", "originalCommit": "d3527a82061b1867514b116116f80b8bbd882988", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a71af69935e101e973a63628b43c25858e13e9c5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a71af69935e101e973a63628b43c25858e13e9c5", "message": "Make the random nature of some tests more explicit", "committedDate": "2020-08-06T08:02:24Z", "type": "commit"}, {"oid": "c60cd9a617e6b7c23c11b0b06a58ab083e84e53c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c60cd9a617e6b7c23c11b0b06a58ab083e84e53c", "message": "Move test category to class level", "committedDate": "2020-08-06T08:09:01Z", "type": "commit"}, {"oid": "0bdb3ce2247e0e9f2783e959c39881862f267122", "url": "https://github.com/hazelcast/hazelcast-jet/commit/0bdb3ce2247e0e9f2783e959c39881862f267122", "message": "Remove redundant test", "committedDate": "2020-08-06T08:10:34Z", "type": "commit"}, {"oid": "874345affa702d716ec8fdd0533cdcc69a94fb27", "url": "https://github.com/hazelcast/hazelcast-jet/commit/874345affa702d716ec8fdd0533cdcc69a94fb27", "message": "Remove leftover", "committedDate": "2020-08-06T08:11:31Z", "type": "commit"}, {"oid": "d6e2344f5b4fee5a27300403a6376319409c2dd9", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d6e2344f5b4fee5a27300403a6376319409c2dd9", "message": "Check failure exceptions when possible", "committedDate": "2020-08-06T09:01:46Z", "type": "commit"}, {"oid": "71f4622a650e7eaa26ce9254da2052abeeeb7062", "url": "https://github.com/hazelcast/hazelcast-jet/commit/71f4622a650e7eaa26ce9254da2052abeeeb7062", "message": "Remove leftover", "committedDate": "2020-08-06T09:03:39Z", "type": "commit"}, {"oid": "ef1282cf7a39b5810cc4dd915bf6bb82848fa16e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ef1282cf7a39b5810cc4dd915bf6bb82848fa16e", "message": "Check failure exceptions in more places", "committedDate": "2020-08-06T09:14:06Z", "type": "commit"}, {"oid": "6ba834bdf798df2e876b17a994e489bdc1f7441c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6ba834bdf798df2e876b17a994e489bdc1f7441c", "message": "Improve connection failure exception roots", "committedDate": "2020-08-06T11:00:42Z", "type": "commit"}, {"oid": "2e590cf6908d15781fe12cc4080655823a1b9485", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2e590cf6908d15781fe12cc4080655823a1b9485", "message": "Add missing @Nonnull annotations", "committedDate": "2020-08-06T11:01:45Z", "type": "commit"}, {"oid": "93e2b5ff9ee21b38c1d2bd8aa7296245534181bd", "url": "https://github.com/hazelcast/hazelcast-jet/commit/93e2b5ff9ee21b38c1d2bd8aa7296245534181bd", "message": "Simplify logic, add more exception handling", "committedDate": "2020-08-07T08:04:24Z", "type": "commit"}, {"oid": "fa09c4955976238b62d4efe27b8679f236cb1bdd", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fa09c4955976238b62d4efe27b8679f236cb1bdd", "message": "Improve exception handling further", "committedDate": "2020-08-07T10:58:49Z", "type": "commit"}, {"oid": "f4dbfbf5c533349f683141658f4577bad9bfbc94", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f4dbfbf5c533349f683141658f4577bad9bfbc94", "message": "Extend NOTICE file", "committedDate": "2020-08-10T06:01:15Z", "type": "commit"}, {"oid": "29ee6778b091247962d15df5a6e8c34c4264085a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/29ee6778b091247962d15df5a6e8c34c4264085a", "message": "Attempt to fix network test issue on Jenkins", "committedDate": "2020-08-11T08:42:49Z", "type": "commit"}, {"oid": "ad6d7fe04b1fd4ee6563f26e9dd2a070aee0d38f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ad6d7fe04b1fd4ee6563f26e9dd2a070aee0d38f", "message": "Use try-with-resource in some tests", "committedDate": "2020-08-17T09:36:50Z", "type": "commit"}, {"oid": "9bd90b8df0f7879c77fcc8d074ba52c284990edc", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9bd90b8df0f7879c77fcc8d074ba52c284990edc", "message": "Define and use generic retry strategies", "committedDate": "2020-08-18T11:49:16Z", "type": "commit"}, {"oid": "cc9803cb22b26d278dee0eb74549f0b8ec4424be", "url": "https://github.com/hazelcast/hazelcast-jet/commit/cc9803cb22b26d278dee0eb74549f0b8ec4424be", "message": "Adjust javadoc", "committedDate": "2020-08-21T07:03:41Z", "type": "commit"}, {"oid": "e96d8f06dcfab428699a6c40f9095939c99d68ce", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e96d8f06dcfab428699a6c40f9095939c99d68ce", "message": "Attempt to fix occasional test failures on Jenkins", "committedDate": "2020-08-21T11:02:40Z", "type": "commit"}, {"oid": "760a9c1ea2d33642b400e0c31877b6754e2f1852", "url": "https://github.com/hazelcast/hazelcast-jet/commit/760a9c1ea2d33642b400e0c31877b6754e2f1852", "message": "Try fixing test by using different ports in the various scenarios", "committedDate": "2020-08-21T12:26:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1NjIwNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474656207", "bodyText": "American standard is \"behavior\"", "author": "mtopolnik", "createdAt": "2020-08-21T12:09:00Z", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -48,44 +55,51 @@\n \n     public static final String CONNECTOR_CLASS_PROPERTY = \"connector.class\";\n     public static final String SEQUENCE_EXTRACTOR_CLASS_PROPERTY = \"sequence.extractor.class\";\n+    public static final String RECONNECT_BEHAVIOUR_PROPERTY = \"reconnect.behaviour\";", "originalCommit": "e96d8f06dcfab428699a6c40f9095939c99d68ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1OTM5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474659392", "bodyText": "\"Interrupted while waiting for data\"", "author": "mtopolnik", "createdAt": "2020-08-21T12:16:04Z", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -100,8 +114,76 @@ public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<T> buf) {\n                     state.setOffset(partition, offset);\n                 }\n             }\n-        } catch (InterruptedException e) {\n-            throw rethrow(e);\n+        } catch (InterruptedException ie) {\n+            logger.warning(\"Waiting for data interrupted\");", "originalCommit": "e96d8f06dcfab428699a6c40f9095939c99d68ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1OTQ5NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474659495", "bodyText": "\"Failed to initialize the connector task\"", "author": "mtopolnik", "createdAt": "2020-08-21T12:16:19Z", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -100,8 +114,76 @@ public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<T> buf) {\n                     state.setOffset(partition, offset);\n                 }\n             }\n-        } catch (InterruptedException e) {\n-            throw rethrow(e);\n+        } catch (InterruptedException ie) {\n+            logger.warning(\"Waiting for data interrupted\");\n+            Thread.currentThread().interrupt();\n+        } catch (RuntimeException re) {\n+            reconnect(re);\n+        }\n+    }\n+\n+    private boolean isConnectionUp() {\n+        try {\n+            if (connector == null) {\n+                connector = startNewConnector();\n+                taskConfig = connector.taskConfigs(1).get(0);\n+            }\n+            if (task == null) {\n+                task = startNewTask();\n+            }\n+            reconnectTracker.reset();\n+            return true;\n+        } catch (JetException je) {\n+            throw shutDownAndThrow(je);\n+        } catch (RuntimeException re) {\n+            handleConnectException(re);\n+            return false;\n+        }\n+    }\n+\n+    private void handleConnectException(RuntimeException ce) {\n+        reconnectTracker.attemptFailed();\n+        if (reconnectTracker.shouldTryAgain()) {\n+            long waitTimeMs = reconnectTracker.getNextWaitTimeMs();\n+            logger.warning(\"Initializing connector task failed, retrying in \" + waitTimeMs + \"ms\" + getCause(ce));", "originalCommit": "e96d8f06dcfab428699a6c40f9095939c99d68ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1OTY1MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474659650", "bodyText": "\"Failed to connect to the database\"", "author": "mtopolnik", "createdAt": "2020-08-21T12:16:36Z", "path": "extensions/cdc-debezium/src/main/java/com/hazelcast/jet/cdc/impl/CdcSource.java", "diffHunk": "@@ -100,8 +114,76 @@ public void fillBuffer(SourceBuilder.TimestampedSourceBuffer<T> buf) {\n                     state.setOffset(partition, offset);\n                 }\n             }\n-        } catch (InterruptedException e) {\n-            throw rethrow(e);\n+        } catch (InterruptedException ie) {\n+            logger.warning(\"Waiting for data interrupted\");\n+            Thread.currentThread().interrupt();\n+        } catch (RuntimeException re) {\n+            reconnect(re);\n+        }\n+    }\n+\n+    private boolean isConnectionUp() {\n+        try {\n+            if (connector == null) {\n+                connector = startNewConnector();\n+                taskConfig = connector.taskConfigs(1).get(0);\n+            }\n+            if (task == null) {\n+                task = startNewTask();\n+            }\n+            reconnectTracker.reset();\n+            return true;\n+        } catch (JetException je) {\n+            throw shutDownAndThrow(je);\n+        } catch (RuntimeException re) {\n+            handleConnectException(re);\n+            return false;\n+        }\n+    }\n+\n+    private void handleConnectException(RuntimeException ce) {\n+        reconnectTracker.attemptFailed();\n+        if (reconnectTracker.shouldTryAgain()) {\n+            long waitTimeMs = reconnectTracker.getNextWaitTimeMs();\n+            logger.warning(\"Initializing connector task failed, retrying in \" + waitTimeMs + \"ms\" + getCause(ce));\n+        } else {\n+            throw shutDownAndThrow(new JetException(\"Failed connecting to database\" + getCause(ce)));", "originalCommit": "e96d8f06dcfab428699a6c40f9095939c99d68ce", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2NzQ3MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474667471", "bodyText": "You can configure how the source will behave if the database connection breaks, by passing one of the {@linkplain RetryStrategy retry strategies} to {@link #setReconnectBehavior()}", "author": "mtopolnik", "createdAt": "2020-08-21T12:32:57Z", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -45,12 +49,60 @@ private MySqlCdcSources() {\n      * Creates a CDC source that streams change data from a MySQL database to\n      * Hazelcast Jet.\n      * <p>\n-     * <b>KNOWN ISSUE:</b> If Jet can't reach the database when it attempts to\n-     * start the source or if it looses the connection to the database from an\n-     * already running source, it throws an exception and terminate the\n-     * execution of the job. This behaviour is not ideal, would be much better\n-     * to try to reconnect, at least for a certain amount of time. Future\n-     * versions will address the problem.\n+     * Behaviour of the source on connection disruptions to the database is", "originalCommit": "760a9c1ea2d33642b400e0c31877b6754e2f1852", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY2ODM4MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474668380", "bodyText": "if -> whether", "author": "mtopolnik", "createdAt": "2020-08-21T12:34:57Z", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -45,12 +49,60 @@ private MySqlCdcSources() {\n      * Creates a CDC source that streams change data from a MySQL database to\n      * Hazelcast Jet.\n      * <p>\n-     * <b>KNOWN ISSUE:</b> If Jet can't reach the database when it attempts to\n-     * start the source or if it looses the connection to the database from an\n-     * already running source, it throws an exception and terminate the\n-     * execution of the job. This behaviour is not ideal, would be much better\n-     * to try to reconnect, at least for a certain amount of time. Future\n-     * versions will address the problem.\n+     * Behaviour of the source on connection disruptions to the database is\n+     * configurable and is governed by the {@link RetryStrategy} passed into\n+     * {@code setReconnectBehaviour())} (as far as the underlying Debezium\n+     * connector cooperates, read further for details).\n+     * <p>\n+     * The default reconnect behaviour is <em>never</em>, which treats any\n+     * connection failure as an unrecoverable problem and triggers the failure\n+     * of the source and the entire job. (How Jet handles job failures and what\n+     * ways there are for recovering from them, is a generic issue not discussed\n+     * here.)\n+     * <p>\n+     * Other behaviour options, which specify that retry attempts should be\n+     * made, will result in the source initiating reconnects to the database,\n+     * either via the Debezium connector's internal reconnect mechanisms or by\n+     * restarting the whole source.\n+     * <p>\n+     * There is a further setting influencing reconnect behaviour, specified via\n+     * {@code setShouldStateBeResetOnReconnect()}. The boolean flag passed in\n+     * specifies what should happen to the connector's state on reconnect, if it", "originalCommit": "760a9c1ea2d33642b400e0c31877b6754e2f1852", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3Mzc0OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474673748", "bodyText": "that computes", "author": "mtopolnik", "createdAt": "2020-08-21T12:46:05Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/retry/IntervalFunction.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.retry;\n+\n+import com.hazelcast.jet.retry.impl.IntervalFunctions;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Function that can compute the wait time necessary for each subsequent retry", "originalCommit": "760a9c1ea2d33642b400e0c31877b6754e2f1852", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3NDk2OA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474674968", "bodyText": "I'd drop this overload, we don't take TimeUnit elsewhere in the API and using SECONDS.toMillis(n) is not much more verbose.", "author": "mtopolnik", "createdAt": "2020-08-21T12:48:32Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/retry/IntervalFunction.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.retry;\n+\n+import com.hazelcast.jet.retry.impl.IntervalFunctions;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Function that can compute the wait time necessary for each subsequent retry\n+ * attempt. The input is the sequence number of the attempt (1 = first failed\n+ * attempt, 2 = second failed attempt and so on), the output is the wait time in\n+ * milliseconds.\n+ *\n+ * @since 4.3\n+ */\n+@FunctionalInterface\n+public interface IntervalFunction extends Serializable {\n+\n+    /**\n+     * Creates an {@code IntervalFunction} which returns a fixed interval in\n+     * milliseconds.\n+     */\n+    static IntervalFunction constant(long intervalValue, TimeUnit intervalUnit) {\n+        return constant(intervalUnit.toMillis(intervalValue));\n+    }\n+\n+    /**\n+     * Creates an {@code IntervalFunction} which returns a fixed interval in\n+     * milliseconds.\n+     */\n+    static IntervalFunction constant(long intervalMs) {\n+        return IntervalFunctions.constant(intervalMs);\n+    }\n+\n+    /**\n+     * Creates an {@code IntervalFunction} which starts from the specified wait\n+     * interval, on the first attempt, and for each subsequent attempt uses\n+     * a longer interval, equal to the previous wait duration multiplied by the\n+     * provided scaling factor (so for example: 1, 2, 4, 8, ...).\n+     */\n+    static IntervalFunction exponentialBackoff(long intervalValue, TimeUnit intervalUnit, double multiplier) {", "originalCommit": "760a9c1ea2d33642b400e0c31877b6754e2f1852", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3NjAwNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474676005", "bodyText": "success", "author": "mtopolnik", "createdAt": "2020-08-21T12:50:25Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/retry/RetryStrategy.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.retry;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Description of a strategy to be followed when retrying a failed action, like\n+ * connecting to a server. A typical strategy for this scenario could be for\n+ * example: \"attempt to reconnect 3 times, wait 5 seconds between each attempt,\n+ * if all of them fail, then give up\".\n+ * <p>\n+ * The lifecycle of a retry strategy begins whenever its covered action fails\n+ * and ends in one of two ways: either a retry of the action is successful (the\n+ * action is successfully undertaken, for example reconnect to a server\n+ * succeeds) or the strategy gives up (for example it had a specified maximum\n+ * number of retries, all of them had been attempted and none was successful).\n+ *\n+ * @since 4.3\n+ */\n+public interface RetryStrategy extends Serializable {\n+\n+    /**\n+     * Maximum number of retry attempt that should be made before giving up.\n+     * <p>\n+     * A value of 0 should be interpreted as \"give up on first failure, without\n+     * any retries\".\n+     * <p>\n+     * A negative value should be interpreted as \"retry indefinitely, until\n+     * succeeds\".", "originalCommit": "760a9c1ea2d33642b400e0c31877b6754e2f1852", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY3NjU3Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r474676573", "bodyText": "Could be simplified to\n\nCan specify a constant wait time, exponential backoff or any other, arbitrarily complex wait strategy.", "author": "mtopolnik", "createdAt": "2020-08-21T12:51:36Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/retry/RetryStrategy.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.retry;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Description of a strategy to be followed when retrying a failed action, like\n+ * connecting to a server. A typical strategy for this scenario could be for\n+ * example: \"attempt to reconnect 3 times, wait 5 seconds between each attempt,\n+ * if all of them fail, then give up\".\n+ * <p>\n+ * The lifecycle of a retry strategy begins whenever its covered action fails\n+ * and ends in one of two ways: either a retry of the action is successful (the\n+ * action is successfully undertaken, for example reconnect to a server\n+ * succeeds) or the strategy gives up (for example it had a specified maximum\n+ * number of retries, all of them had been attempted and none was successful).\n+ *\n+ * @since 4.3\n+ */\n+public interface RetryStrategy extends Serializable {\n+\n+    /**\n+     * Maximum number of retry attempt that should be made before giving up.\n+     * <p>\n+     * A value of 0 should be interpreted as \"give up on first failure, without\n+     * any retries\".\n+     * <p>\n+     * A negative value should be interpreted as \"retry indefinitely, until\n+     * succeeds\".\n+     */\n+    int getMaxAttempts();\n+\n+    /**\n+     * Function specifying how much time to wait before each retry attempt. Can\n+     * specify constant wait times, exponential backoff, basically any", "originalCommit": "760a9c1ea2d33642b400e0c31877b6754e2f1852", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b4b7f45c4ab4029c3baf4d96ec3014d3f15c414e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b4b7f45c4ab4029c3baf4d96ec3014d3f15c414e", "message": "Adjust test that's still failing", "committedDate": "2020-08-22T05:17:13Z", "type": "commit"}, {"oid": "5dd9585b61b5b880ca7c6abab6cffeecc61f991e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5dd9585b61b5b880ca7c6abab6cffeecc61f991e", "message": "Further improve tests", "committedDate": "2020-08-24T06:45:35Z", "type": "commit"}, {"oid": "9b8d42978a6df66856b53b7c93c183b752b64df7", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9b8d42978a6df66856b53b7c93c183b752b64df7", "message": "Fix \"behaviour\" spelling", "committedDate": "2020-08-24T06:57:32Z", "type": "commit"}, {"oid": "75145d6d8ee3394aaf0b77555850a09a92c51615", "url": "https://github.com/hazelcast/hazelcast-jet/commit/75145d6d8ee3394aaf0b77555850a09a92c51615", "message": "Further improve tests", "committedDate": "2020-08-24T08:10:05Z", "type": "commit"}, {"oid": "8aad8c5c8978d7deede5d716a1818c1db6a14954", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8aad8c5c8978d7deede5d716a1818c1db6a14954", "message": "Address review concerns", "committedDate": "2020-08-24T09:27:49Z", "type": "commit"}, {"oid": "1ea600ad03bfdd8a19ec15231589927f10745d2a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1ea600ad03bfdd8a19ec15231589927f10745d2a", "message": "Use right localhost address in tests, even in Docker", "committedDate": "2020-08-26T07:10:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0MDMzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r477240334", "bodyText": "Do we actually need findRandomOpenPortInRange method? It seems findRandomOpenPort() could be ok.", "author": "olukas", "createdAt": "2020-08-26T11:50:44Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlCdcNetworkIntegrationTest.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.github.dockerjava.api.command.CreateContainerCmd;\n+import com.github.dockerjava.api.model.ExposedPort;\n+import com.github.dockerjava.api.model.PortBinding;\n+import com.github.dockerjava.api.model.Ports;\n+import com.hazelcast.jet.JetException;\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.cdc.AbstractCdcIntegrationTest;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import com.hazelcast.jet.retry.RetryStrategies;\n+import com.hazelcast.jet.retry.RetryStrategy;\n+import com.hazelcast.jet.test.SerialTest;\n+import com.hazelcast.test.HazelcastSerialParametersRunnerFactory;\n+import com.hazelcast.test.annotation.NightlyTest;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.testcontainers.containers.MySQLContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.ToxiproxyContainer;\n+\n+import java.io.IOException;\n+import java.net.ServerSocket;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import static com.hazelcast.jet.Util.entry;\n+import static com.hazelcast.jet.core.JobStatus.RUNNING;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.runners.Parameterized.Parameter;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(HazelcastSerialParametersRunnerFactory.class)\n+@Category({SerialTest.class, NightlyTest.class})\n+public class MySqlCdcNetworkIntegrationTest extends AbstractCdcIntegrationTest {\n+\n+    private static final long RECONNECT_INTERVAL_MS = SECONDS.toMillis(1);\n+\n+    @Parameter(value = 0)\n+    public RetryStrategy reconnectBehavior;\n+\n+    @Parameter(value = 1)\n+    public boolean resetStateOnReconnect;\n+\n+    @Parameter(value = 2)\n+    public String testName;\n+\n+    @Parameters(name = \"{2}\")\n+    public static Collection<Object[]> data() {\n+        return Arrays.asList(new Object[][] {\n+                { RetryStrategies.never(), false, \"fail\"},\n+                { RetryStrategies.indefinitely(RECONNECT_INTERVAL_MS), false, \"reconnect\"},\n+                { RetryStrategies.indefinitely(RECONNECT_INTERVAL_MS), true, \"reconnect w/ state reset\"}\n+        });\n+    }\n+\n+    @Test\n+    public void when_noDatabaseToConnectTo() throws Exception {\n+        MySQLContainer<?> mysql = initMySql(null, 0);\n+        String containerIpAddress = mysql.getContainerIpAddress();\n+        stopContainer(mysql);\n+\n+        int port = findRandomOpenPortInRange(MYSQL_PORT + 100, MYSQL_PORT + 1000);", "originalCommit": "1ea600ad03bfdd8a19ec15231589927f10745d2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3MDkyNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r478170925", "bodyText": "My reasoning was to use this ranged method in situations when we don't immediately occupy the free port we detect. Maybe in these situations, being on a machine with lots of activity, the port gets occupied before we attempt to do so ourselves. Whereas if you use a specific range the likelihood of this happening seems smaller. I might be completely off though, this might not match how the OS actually allocates ports. On the other hand: do we really gain anything by removing it?", "author": "jbartok", "createdAt": "2020-08-27T06:18:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0MDMzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIwMjU0MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r478202540", "bodyText": "Let's keep it as it is. You're right that we do not gain anything by removing it.", "author": "olukas", "createdAt": "2020-08-27T07:07:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI0MDMzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc1MDgwMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r481750802", "bodyText": "we should say it is maximum number of reconnection be more clear here - for example if it is set to 2 then it tries to connect 3 times (i.e. reconnect 2 times).", "author": "olukas", "createdAt": "2020-09-02T05:56:20Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/retry/RetryStrategies.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.retry;\n+\n+import com.hazelcast.jet.retry.impl.RetryStrategyImpl;\n+\n+/**\n+ * Collection of factory methods for creating the most frequently used\n+ * {@link RetryStrategy RetryStrategies}.\n+ *\n+ * @since 4.3\n+ */\n+public final class RetryStrategies {\n+\n+    private static final int DEFAULT_MAX_ATTEMPTS = -1;\n+    private static final long DEFAULT_WAIT_DURATION_MS = 500;\n+    private static final IntervalFunction DEFAULT_INTERVAL_FUNCTION = IntervalFunction.constant(DEFAULT_WAIT_DURATION_MS);\n+\n+    private RetryStrategies() {\n+    }\n+\n+    /**\n+     * Create a strategy which will not retry a failed action.\n+     */\n+    public static RetryStrategy never() {\n+        return new Builder().maxAttempts(0).build();\n+    }\n+\n+    /**\n+     * Create a strategy which will retry failed actions indefinitely and will\n+     * wait for a fixed amount of time between any two subsequent attempts.\n+     */\n+    public static RetryStrategy indefinitely(long intervalMillis) {\n+        return new Builder().intervalFunction(IntervalFunction.constant(intervalMillis)).build();\n+    }\n+\n+    /**\n+     * Create a builder which can be used for setting up an arbitrarily complex\n+     * strategy.\n+     */\n+    public static Builder custom() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Builder for custom retry strategies.\n+     */\n+    public static final class Builder {\n+\n+        private int maxAttempts = DEFAULT_MAX_ATTEMPTS;\n+        private IntervalFunction intervalFunction = DEFAULT_INTERVAL_FUNCTION;\n+\n+        private Builder() {\n+        }\n+\n+        /**\n+         * Sets the maximum number of attempts", "originalCommit": "1ea600ad03bfdd8a19ec15231589927f10745d2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc1MjE5OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r481752199", "bodyText": "shouldn't it be public? (and the same for PostgresCdcSources)", "author": "olukas", "createdAt": "2020-09-02T05:57:43Z", "path": "extensions/cdc-mysql/src/main/java/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.java", "diffHunk": "@@ -301,6 +353,33 @@ public Builder setSslTruststorePassword(@Nonnull String password) {\n             return this;\n         }\n \n+        /**\n+         * Specifies how the source should behave when it detects that the\n+         * backing database has been shut down (read class javadoc for details\n+         * and special cases).\n+         * <p>\n+         * Defaults to {@link RetryStrategies#never()}.\n+         */\n+        @Nonnull\n+        public Builder setReconnectBehavior(RetryStrategy retryStrategy) {\n+            config.setProperty(RECONNECT_BEHAVIOR_PROPERTY, retryStrategy);\n+            return this;\n+        }\n+\n+        /**\n+         * Specifies if the source's state should be kept or discarded during\n+         * reconnect attempts to the database. If the state is kept, then\n+         * snapshotting should not be repeated and streaming the binlog should\n+         * resume at the position where it left off. If the state is reset, then\n+         * the source will behave as if it were its initial start, so will do a\n+         * snapshot and will start trailing the binlog where it syncs with the\n+         * snapshot's end.\n+         */\n+        @Nonnull Builder setShouldStateBeResetOnReconnect(boolean reset) {", "originalCommit": "1ea600ad03bfdd8a19ec15231589927f10745d2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc1MzkyMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r481753920", "bodyText": "shouldn't it be when_attemptsPositive_doRetry", "author": "olukas", "createdAt": "2020-09-02T05:59:21Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/retry/impl/RetryTrackerTest.java", "diffHunk": "@@ -0,0 +1,186 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.retry.impl;\n+\n+import com.hazelcast.jet.retry.IntervalFunction;\n+import com.hazelcast.jet.retry.RetryStrategies;\n+import com.hazelcast.jet.retry.RetryStrategy;\n+import org.junit.Test;\n+\n+import java.util.function.LongSupplier;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class RetryTrackerTest {\n+\n+    private final NanoTimeSupplier timeSupplier = new NanoTimeSupplier();\n+\n+    @Test\n+    public void when_attemptsNegative_retryIndefinitely() {\n+        RetryStrategy strategy = RetryStrategies.custom()\n+                .maxAttempts(-1)\n+                .build();\n+        RetryTracker tracker = new RetryTracker(strategy, timeSupplier);\n+        assertFalse(tracker.needsToWait());\n+\n+        for (int i = 0; i < 1_000_000; i++) {\n+            tracker.attemptFailed();\n+            assertTrue(tracker.shouldTryAgain());\n+            assertTrue(tracker.needsToWait());\n+            advanceTime(tracker.getNextWaitTimeMs());\n+            assertFalse(tracker.needsToWait());\n+        }\n+    }\n+\n+    @Test\n+    public void when_attemptsZero_doNotRetry() {\n+        RetryStrategy strategy = RetryStrategies.custom()\n+                .maxAttempts(0)\n+                .build();\n+        RetryTracker tracker = new RetryTracker(strategy, timeSupplier);\n+        assertFalse(tracker.needsToWait());\n+        tracker.attemptFailed();\n+        assertFalse(tracker.shouldTryAgain());\n+    }\n+\n+    @Test\n+    public void when_attemptsPositive_doNotRetry() {", "originalCommit": "1ea600ad03bfdd8a19ec15231589927f10745d2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6313eb3c0fe1c22062f1b3ca811662dcf85895a8", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6313eb3c0fe1c22062f1b3ca811662dcf85895a8", "message": "Fix \"inconsistent emphasis style\" problem in blog post", "committedDate": "2020-09-07T12:09:49Z", "type": "commit"}, {"oid": "b92be5a811e6055b38192a8a761a91aad10ee37e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b92be5a811e6055b38192a8a761a91aad10ee37e", "message": "Move some of the javadoc content to the ops guide", "committedDate": "2020-09-07T12:10:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxOTkzMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2419#discussion_r484419932", "bodyText": "We should be rather more precise here and instead of snapshotting use database snapshotting or something like that otherwise it is not clear whether we talk about db snapshotting of jet snapshotting.", "author": "olukas", "createdAt": "2020-09-07T13:03:26Z", "path": "site/docs/operations/cdc.md", "diffHunk": "@@ -312,3 +312,91 @@ of a standby.\n There are discussions in the PostgreSQL community around a feature\n called *failover slots* which would help mitigate this problem, but as\n of version 12 they have not been implemented yet.\n+\n+## Troubleshooting\n+\n+### MySQL\n+\n+The general behaviour of the MySQL connector when loosing connection to\n+the database is governed by a configurable reconnect strategy and a\n+boolean flag specifying if state should be reset on reconnects or not.\n+For details see the\n+[javadoc](/javadoc/{jet-version}/com/hazelcast/jet/cdc/mysql/MySqlCdcSources.html).\n+\n+There are however some discrepancies and peculiarities in the behavior.\n+\n+#### During snapshotting\n+\n+If the connection to the database fails during the snapshotting phase", "originalCommit": "b92be5a811e6055b38192a8a761a91aad10ee37e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7aef9335c5dee483e1632ca58900523e724a274a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7aef9335c5dee483e1632ca58900523e724a274a", "message": "Address review concerns", "committedDate": "2020-09-08T05:59:01Z", "type": "commit"}, {"oid": "70a1eeb3a75ec9c60f407a066771da5ea7ae1018", "url": "https://github.com/hazelcast/hazelcast-jet/commit/70a1eeb3a75ec9c60f407a066771da5ea7ae1018", "message": "Merge branch 'master' into cdc-disconnect", "committedDate": "2020-09-08T05:59:30Z", "type": "commit"}]}