{"pr_number": 2519, "pr_title": "Change Evergreen Cache tutorial to proper CDC sink", "pr_createdAt": "2020-09-15T10:37:38Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2519", "timeline": [{"oid": "f8cba78e4e91a4f5f6d5a4581ddc5a74cf2627ad", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f8cba78e4e91a4f5f6d5a4581ddc5a74cf2627ad", "message": "Change tutorial to proper CDC sink", "committedDate": "2020-09-15T10:34:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNjA2OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r488706069", "bodyText": "Why the dash? This is not German :)", "author": "viliam-durina", "createdAt": "2020-09-15T14:19:30Z", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -205,16 +205,14 @@ data, depending on the underlying disk technology.\n \n [Hazelcast Jet](https://jet-start.sh/) is a distributed stream\n processing framework built on Hazelcast and combines a cache with\n-fault-tolerant data processing.\n-It has sources and sinks to integrate with several file, messaging and\n-database systems (such as Amazon S3, Kafka, message brokers and\n-relational databases).\n+fault-tolerant data processing. It has sources and sinks to integrate\n+with various file-, messaging- and database systems (such as Amazon S3,", "originalCommit": "f8cba78e4e91a4f5f6d5a4581ddc5a74cf2627ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNjk4Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r488706986", "bodyText": "No comma", "author": "viliam-durina", "createdAt": "2020-09-15T14:20:37Z", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -270,28 +268,26 @@ The pipeline definition is quite straightforward:\n ```java\n pipeline.readFrom(source)                                       //1\n         .withoutTimestamps()\n-        .map(r -> {\n-            Person person = r.value().toObject(Person.class);   //2\n-            return Util.entry(person.id, person);               //3\n-        })\n-        .writeTo(Sinks.remoteMap(                               //4\n-                \"entities\",                                     //5\n-                new CustomClientConfig(env.get(\"CACHE_HOST\"))   //6\n+        .writeTo(CdcSinks.remoteMap(                            //2\n+                \"entities\",                                     //3\n+                new CustomClientConfig(env.get(\"CACHE_HOST\")),  //4\n+                r -> r.key().toMap().get(\"id\"),                 //5\n+                r -> r.value().toObject(Person.class)           //6\n         ));\n ```\n \n-1. Get a stream of Jet `ChangeRecord`\n+1. Get a stream of Jet `ChangeRecord` items\n \n-2. Convert `ChangeRecord` to a regular `Person` POJO\n+2. Create the sink to write to, a remote map", "originalCommit": "f8cba78e4e91a4f5f6d5a4581ddc5a74cf2627ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyOTA3Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489229077", "bodyText": "I don't think it's ok to remove the comma: https://owl.purdue.edu/owl/general_writing/punctuation/commas/commas_with_nonessential_elements.html", "author": "jbartok", "createdAt": "2020-09-16T07:41:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNjk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI1OTAyOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489259029", "bodyText": "\"Create a sink to write to a remote map\" parses differently than \"Create a sink to write to, a remote map\". But you could say \"Create a sink to write to (a remote map)\".", "author": "mtopolnik", "createdAt": "2020-09-16T08:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNjk4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyMTcxMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489321710", "bodyText": "Ahh, now I understand what Viliam was saying. Yes, I did actually intend to say Create a sink to write to, a remote map, but now I realise that Create a sink to write to a remote map makes much more sense, even though it is not what I initially intended. Will fix.", "author": "jbartok", "createdAt": "2020-09-16T10:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcwNjk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDMyOA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r488730328", "bodyText": "Can you keep the line breaks? It renders the same (or so I hope), and is easier on the eyes for reading.", "author": "nfrankel", "createdAt": "2020-09-15T14:50:00Z", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -205,16 +205,14 @@ data, depending on the underlying disk technology.\n \n [Hazelcast Jet](https://jet-start.sh/) is a distributed stream\n processing framework built on Hazelcast and combines a cache with\n-fault-tolerant data processing.\n-It has sources and sinks to integrate with several file, messaging and\n-database systems (such as Amazon S3, Kafka, message brokers and\n-relational databases).\n+fault-tolerant data processing. It has sources and sinks to integrate\n+with various file-, messaging- and database systems (such as Amazon S3,\n+Kafka, message brokers and relational databases).\n \n Jet also provides a Debezium module where it can process change events\n directly from the database and write them to its distributed key-value\n-store.\n-This avoids having to write the intermediate messages to Kafka and then\n-read again to be written to a separate cache.\n+store. This avoids having to write the intermediate messages to Kafka", "originalCommit": "f8cba78e4e91a4f5f6d5a4581ddc5a74cf2627ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxOTA1Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489219056", "bodyText": "We don't use arbitrary line breaks, if it's the same paragraph, it should flow until the margin.", "author": "mtopolnik", "createdAt": "2020-09-16T07:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzMDU3Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489230577", "bodyText": "I can't really decide if it's easier on my eyes or if it annoys me greatly. I think I will just not touch it again.", "author": "jbartok", "createdAt": "2020-09-16T07:43:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NjYxNQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489296615", "bodyText": "IIRC there were many instances of this in the document and it annoyed me: it looks like a new paragraph, but actually it's not.", "author": "viliam-durina", "createdAt": "2020-09-16T09:27:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMxNDkzMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489314932", "bodyText": "Those LB are not arbitrary. I put them after each ., : or ;. It helps a lot while writing/reading a post.\nI don't see the point in removing them in the course of a PR that has nothing to do with it.\nIt's similar to changing tabs to spaces while fixing a bug.\nBut since you all agree, it's up to you now.", "author": "nfrankel", "createdAt": "2020-09-16T09:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTMyMzc4MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489323780", "bodyText": "I'm with Nicolas on this (can't believe I'm actually uttering these words... ;) ). I don't particularly like his formatting style either, but it's not harming anybody, so we shouldn't mess with it, especially not in a completely unrelated PR. I will revert my initial \"fixes\".", "author": "jbartok", "createdAt": "2020-09-16T10:12:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDMyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM3Njc1MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489376751", "bodyText": "I didn't realize this was a blog post, we can have some personal style in them, but for the docs that are team-maintained, we have some policies on formatting.", "author": "mtopolnik", "createdAt": "2020-09-16T11:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMDMyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMTQzMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r488731430", "bodyText": "Provide a mapping function to extract the cache key from the ChangeRecord", "author": "nfrankel", "createdAt": "2020-09-15T14:51:30Z", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -270,28 +268,26 @@ The pipeline definition is quite straightforward:\n ```java\n pipeline.readFrom(source)                                       //1\n         .withoutTimestamps()\n-        .map(r -> {\n-            Person person = r.value().toObject(Person.class);   //2\n-            return Util.entry(person.id, person);               //3\n-        })\n-        .writeTo(Sinks.remoteMap(                               //4\n-                \"entities\",                                     //5\n-                new CustomClientConfig(env.get(\"CACHE_HOST\"))   //6\n+        .writeTo(CdcSinks.remoteMap(                            //2\n+                \"entities\",                                     //3\n+                new CustomClientConfig(env.get(\"CACHE_HOST\")),  //4\n+                r -> r.key().toMap().get(\"id\"),                 //5\n+                r -> r.value().toObject(Person.class)           //6\n         ));\n ```\n \n-1. Get a stream of Jet `ChangeRecord`\n+1. Get a stream of Jet `ChangeRecord` items\n \n-2. Convert `ChangeRecord` to a regular `Person` POJO\n+2. Create the sink to write to, a remote map\n \n-3. Wrap `Person` objects into `Map.Entry`s keyed by ID\n+3. Name of the remote map\n \n-4. Create the sink to write to, a remote map\n+4. Client configuration so it can connect to the right host, cluster\n+and instance\n \n-5. Name of the remote map\n+5. Provide mapping from `ChangeRecord` to cache key", "originalCommit": "f8cba78e4e91a4f5f6d5a4581ddc5a74cf2627ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMTg3Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r488731872", "bodyText": "Provide a mapping function to extract the cache value (the Person POJO) from the ChangeRecord", "author": "nfrankel", "createdAt": "2020-09-15T14:52:05Z", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -270,28 +268,26 @@ The pipeline definition is quite straightforward:\n ```java\n pipeline.readFrom(source)                                       //1\n         .withoutTimestamps()\n-        .map(r -> {\n-            Person person = r.value().toObject(Person.class);   //2\n-            return Util.entry(person.id, person);               //3\n-        })\n-        .writeTo(Sinks.remoteMap(                               //4\n-                \"entities\",                                     //5\n-                new CustomClientConfig(env.get(\"CACHE_HOST\"))   //6\n+        .writeTo(CdcSinks.remoteMap(                            //2\n+                \"entities\",                                     //3\n+                new CustomClientConfig(env.get(\"CACHE_HOST\")),  //4\n+                r -> r.key().toMap().get(\"id\"),                 //5\n+                r -> r.value().toObject(Person.class)           //6\n         ));\n ```\n \n-1. Get a stream of Jet `ChangeRecord`\n+1. Get a stream of Jet `ChangeRecord` items\n \n-2. Convert `ChangeRecord` to a regular `Person` POJO\n+2. Create the sink to write to, a remote map\n \n-3. Wrap `Person` objects into `Map.Entry`s keyed by ID\n+3. Name of the remote map\n \n-4. Create the sink to write to, a remote map\n+4. Client configuration so it can connect to the right host, cluster\n+and instance\n \n-5. Name of the remote map\n+5. Provide mapping from `ChangeRecord` to cache key\n \n-6. Client configuration so it can connect to the right host, cluster\n-  and instance\n+6. Provide mapping from `ChangeRecord` to cache value (`Person` POJO)", "originalCommit": "f8cba78e4e91a4f5f6d5a4581ddc5a74cf2627ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMzE4Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r488733187", "bodyText": "This API is more compact than the previous one, but it's more complex to get the hang on when you're unfamiliar with it.\nDo you intend to freeze the API at some point?", "author": "nfrankel", "createdAt": "2020-09-15T14:53:46Z", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -270,28 +268,26 @@ The pipeline definition is quite straightforward:\n ```java\n pipeline.readFrom(source)                                       //1\n         .withoutTimestamps()\n-        .map(r -> {\n-            Person person = r.value().toObject(Person.class);   //2\n-            return Util.entry(person.id, person);               //3\n-        })\n-        .writeTo(Sinks.remoteMap(                               //4\n-                \"entities\",                                     //5\n-                new CustomClientConfig(env.get(\"CACHE_HOST\"))   //6\n+        .writeTo(CdcSinks.remoteMap(                            //2", "originalCommit": "f8cba78e4e91a4f5f6d5a4581ddc5a74cf2627ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIzMjgyNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489232827", "bodyText": "It's not a matter of API. There was no API change, the pipeline simply wasn't using the right sink. This sink is the right one because it handles deletions too. The old one wasn't.", "author": "jbartok", "createdAt": "2020-09-16T07:47:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODczMzE4Nw=="}], "type": "inlineReview"}, {"oid": "1684f356d1beb483faae3d93075226457f455da5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/1684f356d1beb483faae3d93075226457f455da5", "message": "Address review concerns", "committedDate": "2020-09-16T07:49:02Z", "type": "commit"}, {"oid": "3037008538d7a5c87078f10450b473bc75d8d92e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3037008538d7a5c87078f10450b473bc75d8d92e", "message": "Address review concerns", "committedDate": "2020-09-16T10:14:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2NDQyOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r489464429", "bodyText": "Is this some leftover change? It doesn't seem to improve anything.", "author": "mtopolnik", "createdAt": "2020-09-16T14:05:15Z", "path": "site/website/blog/2020-07-16-designing-evergreen-cache-cdc.md", "diffHunk": "@@ -206,9 +206,9 @@ data, depending on the underlying disk technology.\n [Hazelcast Jet](https://jet-start.sh/) is a distributed stream\n processing framework built on Hazelcast and combines a cache with\n fault-tolerant data processing.\n-It has sources and sinks to integrate with several file, messaging and\n-database systems (such as Amazon S3, Kafka, message brokers and\n-relational databases).\n+It has sources and sinks to integrate", "originalCommit": "3037008538d7a5c87078f10450b473bc75d8d92e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAyNDIxMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2519#discussion_r490024210", "bodyText": "Yes, leftover, fixed it.", "author": "jbartok", "createdAt": "2020-09-17T07:19:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ2NDQyOQ=="}], "type": "inlineReview"}, {"oid": "31a3cf2b44c12922ed19206995a47087129d667b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/31a3cf2b44c12922ed19206995a47087129d667b", "message": "Fix formatting", "committedDate": "2020-09-17T07:18:54Z", "type": "commit"}]}