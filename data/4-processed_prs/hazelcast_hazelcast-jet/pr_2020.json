{"pr_number": 2020, "pr_title": "Support job-level serializers in ReceiverTasklet", "pr_createdAt": "2020-02-26T15:36:54Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2020", "timeline": [{"oid": "c29b9e5fc0746e33110cad3466424db5c6caf197", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c29b9e5fc0746e33110cad3466424db5c6caf197", "message": "Add DataInput/DataOutput.", "committedDate": "2020-02-26T15:36:14Z", "type": "commit"}, {"oid": "6e6976eb21e40110c538fbc388b99faec472f52f", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6e6976eb21e40110c538fbc388b99faec472f52f", "message": "Add DataInput/DataOutput.", "committedDate": "2020-02-27T07:53:24Z", "type": "commit"}, {"oid": "a177ca2125ef4aafc188c03886a88482e79fcd4a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a177ca2125ef4aafc188c03886a88482e79fcd4a", "message": "Add DataInput/DataOutput.", "committedDate": "2020-02-27T08:22:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NDE2OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384974169", "bodyText": "Don't use exclamation marks in exceptions :). No need to shout at the user. Also no trailing periods...", "author": "viliam-durina", "createdAt": "2020-02-27T08:26:42Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInput.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.Bits;\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public class ByteArrayDataInput implements DataInput {\n+\n+    private byte[] buffer;\n+    private int position;\n+\n+    ByteArrayDataInput(byte[] buffer) {\n+        this.buffer = buffer;\n+        this.position = 0;\n+    }\n+\n+    @Override\n+    public int readInt() {\n+        checkAvailable(Integer.BYTES);\n+        int value = Bits.readInt(buffer, position, false);\n+        position += Integer.BYTES;\n+        return value;\n+    }\n+\n+    @Override\n+    public long readLong() {\n+        checkAvailable(Long.BYTES);\n+        long value = Bits.readLong(buffer, position, false);\n+        position += Long.BYTES;\n+        return value;\n+    }\n+\n+    private void checkAvailable(int length) {\n+        if (position + length > buffer.length) {\n+            throw new RuntimeException(\"Cannot read \" + length + \" bytes!\");", "originalCommit": "6e6976eb21e40110c538fbc388b99faec472f52f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NDQ2NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384974465", "bodyText": "Can't we reuse the buffer if position is 0? I guess it's common.", "author": "viliam-durina", "createdAt": "2020-02-27T08:27:28Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInput.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.Bits;\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public class ByteArrayDataInput implements DataInput {\n+\n+    private byte[] buffer;\n+    private int position;\n+\n+    ByteArrayDataInput(byte[] buffer) {\n+        this.buffer = buffer;\n+        this.position = 0;\n+    }\n+\n+    @Override\n+    public int readInt() {\n+        checkAvailable(Integer.BYTES);\n+        int value = Bits.readInt(buffer, position, false);\n+        position += Integer.BYTES;\n+        return value;\n+    }\n+\n+    @Override\n+    public long readLong() {\n+        checkAvailable(Long.BYTES);\n+        long value = Bits.readLong(buffer, position, false);\n+        position += Long.BYTES;\n+        return value;\n+    }\n+\n+    private void checkAvailable(int length) {\n+        if (position + length > buffer.length) {\n+            throw new RuntimeException(\"Cannot read \" + length + \" bytes!\");\n+        }\n+    }\n+\n+    @Override\n+    public int position() {\n+        return position;\n+    }\n+\n+    @Override\n+    public BufferObjectDataInput toObjectInput(AbstractSerializationService serializationService) {\n+        byte[] bytes = new byte[buffer.length - position];", "originalCommit": "6e6976eb21e40110c538fbc388b99faec472f52f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NTQwOQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384975409", "bodyText": "This is confusing with the standard java.io.DataInput. We should use different name, esp. when the purpose is similar. Maybe JetDataInput. I was confused how come you implement just few methods when DataInput has many more.", "author": "viliam-durina", "createdAt": "2020-02-27T08:29:30Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/serialization/DataInput.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.impl.AbstractSerializationService;\n+\n+public interface DataInput {", "originalCommit": "6e6976eb21e40110c538fbc388b99faec472f52f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk3NjkzMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r384976930", "bodyText": "We use when_AAA_then_BBB, the underscore is after when and then.", "author": "viliam-durina", "createdAt": "2020-02-27T08:32:55Z", "path": "hazelcast-jet-core/src/test/java/com/hazelcast/jet/impl/serialization/ByteArrayDataInputTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.impl.serialization;\n+\n+import org.junit.Test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+public class ByteArrayDataInputTest {\n+\n+    @Test\n+    public void whenNotEnoughBytesToRead_thenThrowsException() {", "originalCommit": "6e6976eb21e40110c538fbc388b99faec472f52f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "454306a55534826bd1147d9723604c3de060c41b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/454306a55534826bd1147d9723604c3de060c41b", "message": "Add DataInput/DataOutput.", "committedDate": "2020-02-27T08:47:40Z", "type": "commit"}, {"oid": "34ffe5bf20b5a3158e222b36970094aa38f5d74b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/34ffe5bf20b5a3158e222b36970094aa38f5d74b", "message": "Add DataInput/DataOutput", "committedDate": "2020-02-27T09:01:33Z", "type": "commit"}, {"oid": "e6ab4bbac5dd2d1ba8484331afd6a8bc0385c3de", "url": "https://github.com/hazelcast/hazelcast-jet/commit/e6ab4bbac5dd2d1ba8484331afd6a8bc0385c3de", "message": "Add DataInput/DataOutput", "committedDate": "2020-02-27T09:07:51Z", "type": "commit"}, {"oid": "001bcabe6a38134b8487c0cf8ceabd93efb8c909", "url": "https://github.com/hazelcast/hazelcast-jet/commit/001bcabe6a38134b8487c0cf8ceabd93efb8c909", "message": "Add DataInput/DataOutput", "committedDate": "2020-02-27T09:33:18Z", "type": "commit"}, {"oid": "7b3b4022e83d0d59f56dfdce20c69348905dfcec", "url": "https://github.com/hazelcast/hazelcast-jet/commit/7b3b4022e83d0d59f56dfdce20c69348905dfcec", "message": "Add DataInput/DataOutput", "committedDate": "2020-02-27T10:32:36Z", "type": "commit"}, {"oid": "b64f1f3709cc9fd93d4740164f76dd79cba76fdf", "url": "https://github.com/hazelcast/hazelcast-jet/commit/b64f1f3709cc9fd93d4740164f76dd79cba76fdf", "message": "Add DataInput/DataOutput", "committedDate": "2020-02-27T10:42:50Z", "type": "commit"}, {"oid": "95edf20891d1ebab490072fcac899e85c8d0ef82", "url": "https://github.com/hazelcast/hazelcast-jet/commit/95edf20891d1ebab490072fcac899e85c8d0ef82", "message": "Add DataInput/DataOutput", "committedDate": "2020-02-27T11:06:42Z", "type": "commit"}, {"oid": "d3a3ac276c46b6cf8fd246df9e873e3cbc90c7da", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d3a3ac276c46b6cf8fd246df9e873e3cbc90c7da", "message": "Merge branch 'master' into serializness_networking\n\n# Conflicts:\n#\tpom.xml", "committedDate": "2020-02-27T11:46:41Z", "type": "commit"}, {"oid": "01aa369f5e6065ee52c6ea47d3b6bc3721701806", "url": "https://github.com/hazelcast/hazelcast-jet/commit/01aa369f5e6065ee52c6ea47d3b6bc3721701806", "message": "Add DataInput/DataOutput", "committedDate": "2020-02-27T11:54:45Z", "type": "commit"}, {"oid": "254fd66d3b3c3c4495471869ff308b604d3a82ca", "url": "https://github.com/hazelcast/hazelcast-jet/commit/254fd66d3b3c3c4495471869ff308b604d3a82ca", "message": "Merge branch 'master' into serializness_networking", "committedDate": "2020-02-27T12:34:25Z", "type": "commit"}, {"oid": "dec4d9c82eea8c86729364b40a042ff7c008f990", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dec4d9c82eea8c86729364b40a042ff7c008f990", "message": "Add DataInput/DataOutput", "committedDate": "2020-02-27T14:06:07Z", "type": "commit"}, {"oid": "79bfadc3587c57b14263987eff2e50ae721c7191", "url": "https://github.com/hazelcast/hazelcast-jet/commit/79bfadc3587c57b14263987eff2e50ae721c7191", "message": "Fix tests", "committedDate": "2020-02-27T14:41:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE4NDI4NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385184284", "bodyText": "The default was 1 << 15... which seems a little bit excessive. Is there any sensible average I could default to?", "author": "gierlachg", "createdAt": "2020-02-27T15:26:24Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/Networking.java", "diffHunk": "@@ -17,33 +17,35 @@\n package com.hazelcast.jet.impl;\n \n import com.hazelcast.cluster.Address;\n-import com.hazelcast.internal.nio.BufferObjectDataInput;\n-import com.hazelcast.internal.nio.BufferObjectDataOutput;\n import com.hazelcast.internal.nio.Connection;\n import com.hazelcast.internal.nio.Packet;\n import com.hazelcast.jet.impl.execution.ExecutionContext;\n import com.hazelcast.jet.impl.execution.SenderTasklet;\n+import com.hazelcast.jet.impl.serialization.MemoryDataInput;\n+import com.hazelcast.jet.impl.serialization.DataInputFactory;\n+import com.hazelcast.jet.impl.serialization.MemoryDataOutput;\n+import com.hazelcast.jet.impl.serialization.DataOutputFactory;\n import com.hazelcast.logging.ILogger;\n import com.hazelcast.spi.impl.NodeEngine;\n import com.hazelcast.spi.impl.NodeEngineImpl;\n \n-import java.io.IOException;\n import java.util.Map;\n import java.util.Optional;\n import java.util.concurrent.ScheduledFuture;\n \n import static com.hazelcast.internal.nio.Packet.FLAG_JET_FLOW_CONTROL;\n import static com.hazelcast.internal.nio.Packet.FLAG_URGENT;\n import static com.hazelcast.jet.Util.idToString;\n-import static com.hazelcast.jet.impl.util.ExceptionUtil.sneakyThrow;\n-import static com.hazelcast.jet.impl.util.ImdgUtil.createObjectDataInput;\n-import static com.hazelcast.jet.impl.util.ImdgUtil.createObjectDataOutput;\n import static com.hazelcast.jet.impl.util.ImdgUtil.getMemberConnection;\n import static com.hazelcast.jet.impl.util.ImdgUtil.getRemoteMembers;\n import static com.hazelcast.jet.impl.util.Util.uncheckRun;\n import static java.util.concurrent.TimeUnit.MILLISECONDS;\n \n public class Networking {\n+\n+    private static final int PACKET_HEADER_SIZE = 16;\n+    private static final int FLOW_PACKET_INITIAL_SIZE = 128; // TODO:", "originalCommit": "79bfadc3587c57b14263987eff2e50ae721c7191", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4bb2d4263aef1903a55396ad897991aceee3701b", "url": "https://github.com/hazelcast/hazelcast-jet/commit/4bb2d4263aef1903a55396ad897991aceee3701b", "message": "Simplify bytes writing & reading", "committedDate": "2020-02-28T10:25:07Z", "type": "commit"}, {"oid": "91cb86e9aae490b3b282428fc9c94ad062c9849e", "url": "https://github.com/hazelcast/hazelcast-jet/commit/91cb86e9aae490b3b282428fc9c94ad062c9849e", "message": "Extract MemoryWriter & MemoryReader", "committedDate": "2020-02-28T11:54:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTY1Njg1Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385656852", "bodyText": "This is one additional allocation, if we are concerned about it we can use MemoryReader directly in trade of readability/maintainability... WDYT?", "author": "gierlachg", "createdAt": "2020-02-28T11:56:47Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/Networking.java", "diffHunk": "@@ -63,33 +63,29 @@ void shutdown() {\n         flowControlSender.cancel(false);\n     }\n \n-    void handle(Packet packet) throws IOException {\n+    void handle(Packet packet) {\n         if (!packet.isFlagRaised(FLAG_JET_FLOW_CONTROL)) {\n             handleStreamPacket(packet);\n             return;\n         }\n         handleFlowControlPacket(packet.getConn().getEndPoint(), packet.toByteArray());\n     }\n \n-    private void handleStreamPacket(Packet packet) throws IOException {\n-        BufferObjectDataInput in = createObjectDataInput(nodeEngine, packet.toByteArray());\n-        long executionId = in.readLong();\n-        int vertexId = in.readInt();\n-        int ordinal = in.readInt();\n+    private void handleStreamPacket(Packet packet) {\n+        MemoryDataInput input = new MemoryDataInput(packet.toByteArray());", "originalCommit": "91cb86e9aae490b3b282428fc9c94ad062c9849e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMTU2NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385601564", "bodyText": "could you add the PR number?", "author": "cangencer", "createdAt": "2020-02-28T09:53:19Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/internal/serialization/impl/CustomInputOutputFactory.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.internal.serialization.impl;\n+\n+import com.hazelcast.internal.nio.BufferObjectDataInput;\n+import com.hazelcast.internal.serialization.InternalSerializationService;\n+\n+import java.nio.ByteOrder;\n+\n+// remove when `InternalSerializationService.createObjectDataInput(byte[] data, int offset)` is there...", "originalCommit": "79bfadc3587c57b14263987eff2e50ae721c7191", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNTQzMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r386835433", "bodyText": "what about a PR for 4.0.1-SNAPSHOT?", "author": "cangencer", "createdAt": "2020-03-03T07:20:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMTU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMjA0MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r385602041", "bodyText": "is this exception handled somewhere else?", "author": "cangencer", "createdAt": "2020-02-28T09:54:16Z", "path": "hazelcast-jet-core/src/main/java/com/hazelcast/jet/impl/JetService.java", "diffHunk": "@@ -232,11 +230,7 @@ public ClassLoader getClassLoader(long jobId) {\n     }\n \n     void handlePacket(Packet packet) {\n-        try {\n-            networking.handle(packet);\n-        } catch (IOException e) {\n-            throw sneakyThrow(e);\n-        }\n+        networking.handle(packet);", "originalCommit": "79bfadc3587c57b14263987eff2e50ae721c7191", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI0NzA1NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2020#discussion_r386247055", "bodyText": "The callee might throw RuntimeException.", "author": "gierlachg", "createdAt": "2020-03-02T08:19:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYwMjA0MQ=="}], "type": "inlineReview"}, {"oid": "6f730dc3e06639647269cb6f6fbf786e4dbca95a", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6f730dc3e06639647269cb6f6fbf786e4dbca95a", "message": "Add PR link to @Deprecated comment", "committedDate": "2020-03-02T08:13:27Z", "type": "commit"}, {"oid": "3c2f0290cf0877a8d4ad2ea7c59cec0e94ef9945", "url": "https://github.com/hazelcast/hazelcast-jet/commit/3c2f0290cf0877a8d4ad2ea7c59cec0e94ef9945", "message": "Replace MemoryDataInput with MemoryReader to avoid allocation", "committedDate": "2020-03-02T08:50:27Z", "type": "commit"}, {"oid": "5d09475761c52ecd34d222df9c28da3a68b04694", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5d09475761c52ecd34d222df9c28da3a68b04694", "message": "Replace MemoryDataInput with MemoryReader to avoid allocation", "committedDate": "2020-03-02T08:54:35Z", "type": "commit"}, {"oid": "48448109ac38d13610359f0caadb0aaa8f8451cb", "url": "https://github.com/hazelcast/hazelcast-jet/commit/48448109ac38d13610359f0caadb0aaa8f8451cb", "message": "Remember last flow packet size", "committedDate": "2020-03-02T11:17:09Z", "type": "commit"}]}