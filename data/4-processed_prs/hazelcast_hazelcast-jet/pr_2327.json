{"pr_number": 2327, "pr_title": "Add tests for cdc-mysql connector", "pr_createdAt": "2020-06-15T06:15:57Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2327", "timeline": [{"oid": "fc2294fd00f0c753168cead79d17d9696d32cdd0", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fc2294fd00f0c753168cead79d17d9696d32cdd0", "message": "Add tests for cdc-mysql connector", "committedDate": "2020-06-12T13:13:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MTI5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r439951292", "bodyText": "If you introduce such a parent test class, then would be nice to modify the already existing integration test to use it too.", "author": "jbartok", "createdAt": "2020-06-15T06:19:03Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/AbstractMySqlIntegrationTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.hazelcast.jet.accumulator.LongAccumulator;\n+import com.hazelcast.jet.cdc.AbstractIntegrationTest;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.Operation;\n+import com.hazelcast.jet.cdc.RecordPart;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Objects;\n+import org.junit.Rule;\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import static com.hazelcast.jet.Util.entry;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class AbstractMySqlIntegrationTest extends AbstractIntegrationTest {", "originalCommit": "fc2294fd00f0c753168cead79d17d9696d32cdd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NTM5Ng==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r439975396", "bodyText": "Make sense, I'll update it.", "author": "olukas", "createdAt": "2020-06-15T07:20:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MTI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MTg0Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r439951842", "bodyText": "Maybe use database whitelisting (source configuration option) instead of filtering in the pipeline (unless that's what you want to test).", "author": "jbartok", "createdAt": "2020-06-15T06:20:40Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/AbstractMySqlIntegrationTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.hazelcast.jet.accumulator.LongAccumulator;\n+import com.hazelcast.jet.cdc.AbstractIntegrationTest;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.Operation;\n+import com.hazelcast.jet.cdc.RecordPart;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Objects;\n+import org.junit.Rule;\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import static com.hazelcast.jet.Util.entry;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class AbstractMySqlIntegrationTest extends AbstractIntegrationTest {\n+\n+    protected static final String DATABASE = \"testDb\";\n+    protected static final String SINK_MAP_NAME = \"resultsMap\";\n+\n+    @Rule\n+    public MySQLContainer<?> mysql = new MySQLContainer<>(\"debezium/example-mysql:1.2\")\n+            .withUsername(\"mysqluser\")\n+            .withPassword(\"mysqlpw\");\n+\n+    protected MySqlCdcSources.Builder initialSourceBuilder() {\n+        return MySqlCdcSources.mysql(\"cdcMysql\")\n+                .setDatabaseAddress(mysql.getContainerIpAddress())\n+                .setDatabasePort(mysql.getMappedPort(MYSQL_PORT))\n+                .setDatabaseUser(\"debezium\")\n+                .setDatabasePassword(\"dbz\")\n+                .setClusterName(\"dbserver1\");\n+    }\n+\n+    protected Pipeline preparePipeline(StreamSource<ChangeRecord> source) {\n+        Pipeline pipeline = Pipeline.create();\n+        pipeline.readFrom(source)\n+                .withNativeTimestamps(0)\n+                .filter(t -> t.database().startsWith(DATABASE))", "originalCommit": "fc2294fd00f0c753168cead79d17d9696d32cdd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NTgxMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r439975812", "bodyText": "Ok, I will use this pipeline only for tests for whitelist and blacklist and for other tests i will use whitelisting.", "author": "olukas", "createdAt": "2020-06-15T07:21:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MTg0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MjAyMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r439952022", "bodyText": "No need to set local parallelism, the source by default has a single instance.", "author": "jbartok", "createdAt": "2020-06-15T06:21:16Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/AbstractMySqlIntegrationTest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.hazelcast.jet.accumulator.LongAccumulator;\n+import com.hazelcast.jet.cdc.AbstractIntegrationTest;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.cdc.Operation;\n+import com.hazelcast.jet.cdc.RecordPart;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.SQLException;\n+import java.util.Objects;\n+import org.junit.Rule;\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import static com.hazelcast.jet.Util.entry;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+public class AbstractMySqlIntegrationTest extends AbstractIntegrationTest {\n+\n+    protected static final String DATABASE = \"testDb\";\n+    protected static final String SINK_MAP_NAME = \"resultsMap\";\n+\n+    @Rule\n+    public MySQLContainer<?> mysql = new MySQLContainer<>(\"debezium/example-mysql:1.2\")\n+            .withUsername(\"mysqluser\")\n+            .withPassword(\"mysqlpw\");\n+\n+    protected MySqlCdcSources.Builder initialSourceBuilder() {\n+        return MySqlCdcSources.mysql(\"cdcMysql\")\n+                .setDatabaseAddress(mysql.getContainerIpAddress())\n+                .setDatabasePort(mysql.getMappedPort(MYSQL_PORT))\n+                .setDatabaseUser(\"debezium\")\n+                .setDatabasePassword(\"dbz\")\n+                .setClusterName(\"dbserver1\");\n+    }\n+\n+    protected Pipeline preparePipeline(StreamSource<ChangeRecord> source) {\n+        Pipeline pipeline = Pipeline.create();\n+        pipeline.readFrom(source)\n+                .withNativeTimestamps(0)\n+                .filter(t -> t.database().startsWith(DATABASE))\n+                .setLocalParallelism(1)", "originalCommit": "fc2294fd00f0c753168cead79d17d9696d32cdd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA1MDMyMw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r440050323", "bodyText": "actually, by default local parallelism for filter is 4:\ndigraph DAG {\n\t\"cdcMysql\" [localParallelism=1];\n\t\"filter\" [localParallelism=4];\n\t\"filter_timestamps\" [localParallelism=1];\n        ...", "author": "olukas", "createdAt": "2020-06-15T09:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1MjAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1Njc4OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r439956789", "bodyText": "The tests you describe here are conceptually non-DB specific, but I'm not sure you can rely on every connector to every DB behaving the same way, so it would be safest to threat it as MySQL specific tests.", "author": "jbartok", "createdAt": "2020-06-15T06:34:38Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/AuthAndConnectionIntegrationTest.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (c) 2008-2020, Hazelcast, Inc. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.hazelcast.jet.cdc.mysql;\n+\n+import com.hazelcast.jet.JetInstance;\n+import com.hazelcast.jet.Job;\n+import com.hazelcast.jet.cdc.ChangeRecord;\n+import com.hazelcast.jet.core.JetTestSupport;\n+import com.hazelcast.jet.pipeline.Pipeline;\n+import com.hazelcast.jet.pipeline.Sinks;\n+import com.hazelcast.jet.pipeline.StreamSource;\n+import com.hazelcast.test.annotation.NightlyTest;\n+import java.sql.SQLException;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.testcontainers.containers.MySQLContainer;\n+\n+import static com.hazelcast.jet.core.JobStatus.FAILED;\n+import static com.hazelcast.test.HazelcastTestSupport.assertEqualsEventually;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.testcontainers.containers.MySQLContainer.MYSQL_PORT;\n+\n+@Category(NightlyTest.class)\n+public class AuthAndConnectionIntegrationTest extends JetTestSupport {", "originalCommit": "fc2294fd00f0c753168cead79d17d9696d32cdd0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1NjkzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r439956934", "bodyText": "Threat it and NAME it like MySQL specific tests.", "author": "jbartok", "createdAt": "2020-06-15T06:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1Njc4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk3NjI4Nw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r439976287", "bodyText": "This test is in cdc-mysql module. Do we need to mention MySQL also in test name?", "author": "olukas", "createdAt": "2020-06-15T07:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk1Njc4OQ=="}], "type": "inlineReview"}, {"oid": "63514ad18ca1d176799455ae5d877e8d3abae4be", "url": "https://github.com/hazelcast/hazelcast-jet/commit/63514ad18ca1d176799455ae5d877e8d3abae4be", "message": "Addressed PR review comments", "committedDate": "2020-06-15T09:42:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTM1MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r440071350", "bodyText": "Maybe drop initial, just call it sourceBuilder?", "author": "jbartok", "createdAt": "2020-06-15T10:11:08Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlIntegrationTest.java", "diffHunk": "@@ -298,12 +289,7 @@ public void cdcMapSink() throws Exception {\n \n     @Nonnull\n     private StreamSource<ChangeRecord> source(String tableName) {\n-        return MySqlCdcSources.mysql(tableName)\n-                .setDatabaseAddress(mysql.getContainerIpAddress())\n-                .setDatabasePort(mysql.getMappedPort(MYSQL_PORT))\n-                .setDatabaseUser(\"debezium\")\n-                .setDatabasePassword(\"dbz\")\n-                .setClusterName(\"dbserver1\")\n+        return initialSourceBuilder(tableName)", "originalCommit": "63514ad18ca1d176799455ae5d877e8d3abae4be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3MTcwNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2327#discussion_r440071704", "bodyText": "Maybe drop prepare from the method name?", "author": "jbartok", "createdAt": "2020-06-15T10:11:49Z", "path": "extensions/cdc-mysql/src/test/java/com/hazelcast/jet/cdc/mysql/MySqlListenWhiteBlackListIntegrationTest.java", "diffHunk": "@@ -314,6 +320,30 @@ private void test(StreamSource<ChangeRecord> source, List<String> expectedRecord\n         }\n     }\n \n+    private Pipeline preparePipeline(StreamSource<ChangeRecord> source) {", "originalCommit": "63514ad18ca1d176799455ae5d877e8d3abae4be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f06b6fdcdd516d5b0d4ccb5120e8a7a48bfb1877", "url": "https://github.com/hazelcast/hazelcast-jet/commit/f06b6fdcdd516d5b0d4ccb5120e8a7a48bfb1877", "message": "Some renaming", "committedDate": "2020-06-15T10:57:25Z", "type": "commit"}]}