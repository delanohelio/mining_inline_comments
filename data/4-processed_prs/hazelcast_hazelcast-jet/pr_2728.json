{"pr_number": 2728, "pr_title": "Mqtt design decision regarding fault tolerence ", "pr_createdAt": "2020-12-04T07:00:49Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2728", "timeline": [{"oid": "2681ee4fd3e444b7a297360690e6a5756b2e888c", "url": "https://github.com/hazelcast/hazelcast-jet/commit/2681ee4fd3e444b7a297360690e6a5756b2e888c", "message": "clarify persistence and fault tolerence for source", "committedDate": "2020-12-02T08:25:33Z", "type": "commit"}, {"oid": "6c6133739a620f6293d5591abc1fab86af435b36", "url": "https://github.com/hazelcast/hazelcast-jet/commit/6c6133739a620f6293d5591abc1fab86af435b36", "message": "more changes", "committedDate": "2020-12-04T06:59:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwNTYzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2728#discussion_r536005634", "bodyText": "An alternative text:\n##### Source\n\nTo support fault tolerance for a source, Jet needs the remote system to\nsupport one of these:\n\n- provide an offset. After a failure, we'll use that offset and replay\nthe messages\n\n- support manual acknowledgement. Jet will ack the messages in the\nsecond phase of the snapshot\n\nMQTT provides acknowledgements, however, the Paho client we use\nacknowledges the messages automatically. There are other clients that\nsupport manual acknowledgements, however the whole MQTT protocol is\ndesigned for IoT and small resource usage. Many brokers (for example\nMosquitto) limit the number of non-acknowledged messages to a low value\n(100 in case of Mosquitto). Therefore we can't really rely on this\nfeature.\n\nWe've also considered an option where Jet itself would save the messages\nreceived since the last snapshot. We cannot save it to the snapshot\nbecause the snapshot stores state created _before_ the snapshot is\ntaken, but we need to save messages received _after_ the snapshot. We\ncould save them to an IMap and maybe we could provide a persistence\nimplementation for Paho that we'll be able to \"roll back\". However, we\ndidn't implement a PoC for this option. We decided to not support any\nfault tolerance for the MQTT source. It can be implemented in the future\nif there's demand. Currently, if a fault-tolerant job fails, the source\nwill simply start where it left off and the messages acked since the\nlast snapshot will be lost.\n\n##### Sink\n\nThe MQTT sink provides at-least-once guarantee - it sends the messages\nsynchronously. If a job fails and restarts, the same messages will be\nsent again.", "author": "viliam-durina", "createdAt": "2020-12-04T10:43:08Z", "path": "site/docs/design-docs/015-mqtt-connector.md", "diffHunk": "@@ -200,11 +200,24 @@ MqttSources.builder()\n \n #### Fault Tolerance\n \n-MQTT protocol defines these levels of quality of service for subscribing\n-to the topics: `AT_MOST_ONCE`, `AT_LEAST_ONCE`, `EXACTLY_ONCE`. But I've\n-confirmed a loss of messages with `EXACTLY_ONCE` configuration even when\n-the client restarted gracefully. I've tried both Paho client and HiveMQ\n-client, the results are same.\n+MQTT protocol defines these levels of quality of service (QoS) for", "originalCommit": "6c6133739a620f6293d5591abc1fab86af435b36", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c446f5bfeadc932d819e2171345e5c336fb428d4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/c446f5bfeadc932d819e2171345e5c336fb428d4", "message": "alternative text", "committedDate": "2020-12-04T10:49:07Z", "type": "commit"}]}