{"pr_number": 2208, "pr_title": "Grpc how to guide", "pr_createdAt": "2020-04-22T07:35:09Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2208", "timeline": [{"oid": "dbbe962fc14043f39df80eb72371643b7adde5d6", "url": "https://github.com/hazelcast/hazelcast-jet/commit/dbbe962fc14043f39df80eb72371643b7adde5d6", "message": "Use bidirectional streaming service in gRPC example", "committedDate": "2020-04-22T07:31:04Z", "type": "commit"}, {"oid": "a429cce8078fd521d90a0b06b751e0a03c84fe12", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a429cce8078fd521d90a0b06b751e0a03c84fe12", "message": "Create gRPC how to guide", "committedDate": "2020-04-22T07:34:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTQzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r412745434", "bodyText": "add dependency where? where do you get the module and put it on the classpath?", "author": "cangencer", "createdAt": "2020-04-22T07:38:49Z", "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services", "originalCommit": "a429cce8078fd521d90a0b06b751e0a03c84fe12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTYzMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r412745631", "bodyText": "should use the placeholder version tag", "author": "cangencer", "createdAt": "2020-04-22T07:39:07Z", "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>", "originalCommit": "a429cce8078fd521d90a0b06b751e0a03c84fe12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMTI0NQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r413301245", "bodyText": "this is still unresolved. I believe we also show dependencies as gradle, so let's follow the standard there.", "author": "cangencer", "createdAt": "2020-04-22T20:19:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTYzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NTg4OQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r412745889", "bodyText": "you also need definition of ProductInfoRequest and ProductionInfoReply", "author": "cangencer", "createdAt": "2020-04-22T07:39:34Z", "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>\n+</dependency>\n+```\n+\n+## Unary service\n+\n+A unary service allows to send a single request and receive a response,\n+similar to a normal function call.\n+\n+For example, given the protobuf definition below\n+\n+```proto\n+service ProductService {\n+  rpc ProductInfo (ProductInfoRequest) returns (ProductInfoReply) {}", "originalCommit": "a429cce8078fd521d90a0b06b751e0a03c84fe12", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NjM5Mg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r412746392", "bodyText": "for bidirectional we may show the server-side implementation as well, because it's not immediately obvious perhaps? just as a snippet, we probably don't need the full code.", "author": "cangencer", "createdAt": "2020-04-22T07:40:17Z", "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,183 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless Transforms](../api/stateless-transforms.md#mapusingservice)\n+section shows how to call and use services to transform items in the\n+pipeline. One way to implement a remote service is using\n+[gRPC](https://grpc.io/) - an open source universal RPC framework, which\n+is available for many platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a\n+gRPC service. Currently, two types of gRPC services are supported:\n+\n+- unary service\n+- bidirectional streaming service.\n+\n+This how to guide shows how to use these services in your pipeline.\n+\n+## Module dependency\n+\n+Add a dependency on `hazelcast-jet-grpc` module to use the gRPC services\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>\n+</dependency>\n+```\n+\n+## Unary service\n+\n+A unary service allows to send a single request and receive a response,\n+similar to a normal function call.\n+\n+For example, given the protobuf definition below\n+\n+```proto\n+service ProductService {\n+  rpc ProductInfo (ProductInfoRequest) returns (ProductInfoReply) {}\n+}\n+```\n+\n+We can create the following service factory using\n+`GrpcServices.unaryService()` method:\n+\n+```java\n+ServiceFactory<?, ? extends GrpcService<ProductInfoRequest, ProductInfoReply>> productService = unaryService(\n+    () -> ManagedChannelBuilder.forAddress(\"localhost\", PORT).useTransportSecurity().usePlaintext(),\n+    channel -> ProductServiceGrpc.newStub(channel)::productInfo\n+);\n+```\n+\n+The first parameter is a supplier returning a channel builder. Modify\n+the builder settings as required, e.g. to enable TLS via\n+`io.grpc.ManagedChannelBuilder.useTransportSecurity()`.  \n+\n+The second parameter is a function which, given a channel, creates the\n+stub (the `ProductServiceGrpc` class is auto-generated by the protobuf\n+compiler) and returns a function that calls the stub given\n+the input item and the observer. Again you may modify the stub according\n+to your needs. The returned function will be called once per input item.\n+\n+The full type of the second parameter is as follows (with wildcards\n+omitted):\n+\n+```java\n+FunctionEx<ManagedChannel, BiConsumerEx<T, StreamObserver<R>>> callStubFn\n+```\n+\n+Now the service factory can be used in any of the `mapUsingService*`\n+methods, preferably the `mapUsingServiceAsync`.\n+\n+```java\n+StreamStage<Trade> trades = ...\n+trades.mapUsingServiceAsync(productService,\n+(service, trade) -> {\n+    ProductInfoRequest request = ProductInfoRequest.newBuilder().setId(trade.productId()).build();\n+    return service.call(request).thenApply(productReply -> tuple2(trade, productReply.getProductName()));\n+})\n+```\n+\n+## Bidirectional streaming service", "originalCommit": "a429cce8078fd521d90a0b06b751e0a03c84fe12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNjgzNA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r413526834", "bodyText": "I think the user either already knows gRPC and just wants to use it from Jet, or doesn't and in that case would need to follow some other tutorial to create the server. A snippet from e.g. here wouldn't be enough\n\n  \n    \n      hazelcast-jet/examples/grpc/src/main/java/com/hazelcast/jet/examples/grpc/BrokerServiceImpl.java\n    \n    \n         Line 38\n      in\n      dbbe962\n    \n    \n    \n    \n\n        \n          \n           public StreamObserver<BrokerInfoRequest> brokerInfo(StreamObserver<BrokerInfoReply> responseObserver) {", "author": "frant-hartm", "createdAt": "2020-04-23T05:49:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc0NjM5Mg=="}], "type": "inlineReview"}, {"oid": "bc8b32c5b8ddf9d1e9e81c6fefa39c11e85bc328", "url": "https://github.com/hazelcast/hazelcast-jet/commit/bc8b32c5b8ddf9d1e9e81c6fefa39c11e85bc328", "message": "Clean up code sample and other docs", "committedDate": "2020-04-22T14:13:01Z", "type": "commit"}, {"oid": "9de553fdb0e8d61ec5ce89771296952a6f5c9227", "url": "https://github.com/hazelcast/hazelcast-jet/commit/9de553fdb0e8d61ec5ce89771296952a6f5c9227", "message": "Improve the gRPC howto", "committedDate": "2020-04-22T14:13:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMTE1MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2208#discussion_r413301150", "bodyText": "doesn't these two contradict each other? plaintext and transportSecurity?", "author": "cangencer", "createdAt": "2020-04-22T20:19:21Z", "path": "site/docs/how-tos/grpc.md", "diffHunk": "@@ -0,0 +1,224 @@\n+---\n+title: Call gRPC service\n+description: How to call unary or bidirectional streaming gRPC service from a pipeline.\n+---\n+\n+The [Stateless\n+Transforms](../api/stateless-transforms.md#mapusingservice) section\n+shows how to use external services to transform items in a Jet pipeline.\n+One way to expose a remote service is using [gRPC](https://grpc.io/)\n+&mdash; an open-source universal RPC framework available for many\n+platforms and languages.\n+\n+The `hazelcast-jet-grpc` module makes it easy to perform calls to a gRPC\n+service. We support two kinds of [gRPC service\n+methods](https://grpc.io/docs/guides/concepts/):\n+\n+- unary RPC\n+- bidirectional streaming RPC\n+\n+Here we'll show you how to use these services in your pipeline.\n+\n+## Dependencies\n+\n+Add this dependency to your Java project:\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-grpc</artifactId>\n+    <version>4.1</version>\n+</dependency>\n+```\n+\n+The Hazelcast Jet cluster must also have this module on the classpath.\n+It is in the `opt` directory of the distribution package so you can just\n+move it to the `lib` directory and restart the cluster.\n+\n+## Unary RPC\n+\n+The classical request-response RPC pattern is what gRPC calls \"unary\n+RPC\". You send a single request message and get a single response\n+message back, just like a plain function call.\n+\n+Let's use this protobuf definition as an example:\n+\n+```proto\n+service ProductService {\n+  rpc ProductInfo (ProductInfoRequest)\n+      returns (ProductInfoReply) {}\n+}\n+```\n+\n+To call this service, use `GrpcServices.unaryService()`:\n+\n+```java\n+ServiceFactory<?, ? extends GrpcService<ProductInfoRequest, ProductInfoReply>>\n+productService = unaryService(\n+    () -> ManagedChannelBuilder.forAddress(\"localhost\", PORT)\n+                               .useTransportSecurity()\n+                               .usePlaintext(),", "originalCommit": "9de553fdb0e8d61ec5ce89771296952a6f5c9227", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd6e71efbbd1cd6c2e76227fd3e1e83d28d3ddf5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/fd6e71efbbd1cd6c2e76227fd3e1e83d28d3ddf5", "message": "Update grpc based on feedback", "committedDate": "2020-04-23T05:55:03Z", "type": "commit"}, {"oid": "67f34d24123d8507c1c44137b27e5d235f1ae7b9", "url": "https://github.com/hazelcast/hazelcast-jet/commit/67f34d24123d8507c1c44137b27e5d235f1ae7b9", "message": "Revert changes unrelated to grpc", "committedDate": "2020-04-23T06:01:26Z", "type": "commit"}]}