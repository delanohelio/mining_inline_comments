{"pr_number": 2124, "pr_title": "Add Protocol Buffers serialization docs", "pr_createdAt": "2020-03-31T16:15:23Z", "pr_url": "https://github.com/hazelcast/hazelcast-jet/pull/2124", "timeline": [{"oid": "5c94c8f82b185c609c0754a96259092d2f511123", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5c94c8f82b185c609c0754a96259092d2f511123", "message": "Add job-level serializer & addClass/addPackage docs", "committedDate": "2020-03-31T07:27:56Z", "type": "commit"}, {"oid": "712e13ebe7ec4a8671a315b118838641366d47f4", "url": "https://github.com/hazelcast/hazelcast-jet/commit/712e13ebe7ec4a8671a315b118838641366d47f4", "message": "Improving serialization docs", "committedDate": "2020-03-31T11:44:45Z", "type": "commit"}, {"oid": "d95e384aeb4ba5a05fa735259bb9938a96f03835", "url": "https://github.com/hazelcast/hazelcast-jet/commit/d95e384aeb4ba5a05fa735259bb9938a96f03835", "message": "Improving serialization docs", "committedDate": "2020-03-31T12:34:14Z", "type": "commit"}, {"oid": "056e553d804db6f46bbf6185cb9c7c127ebd34d0", "url": "https://github.com/hazelcast/hazelcast-jet/commit/056e553d804db6f46bbf6185cb9c7c127ebd34d0", "message": "Improving serialization docs", "committedDate": "2020-03-31T12:58:45Z", "type": "commit"}, {"oid": "8a14a7fdd007952b9ec69eec6aed4bb3bacd5687", "url": "https://github.com/hazelcast/hazelcast-jet/commit/8a14a7fdd007952b9ec69eec6aed4bb3bacd5687", "message": "Add Protocol Buffers docs", "committedDate": "2020-03-31T14:58:27Z", "type": "commit"}, {"oid": "ecccec6985a6ebe403824484316b06200ad24062", "url": "https://github.com/hazelcast/hazelcast-jet/commit/ecccec6985a6ebe403824484316b06200ad24062", "message": "Merge branch 'master' into protobuf_docs", "committedDate": "2020-03-31T16:14:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzcwMA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401577700", "bodyText": "do you need to add any additional classes ? (Protobuf specific) or just registering serializer is enough, without calling addClass ?", "author": "cangencer", "createdAt": "2020-04-01T12:31:17Z", "path": "site/docs/api/serialization.md", "diffHunk": "@@ -321,3 +321,56 @@ a jar file. Moreover, used type ids have to be unique across all\n serializers. Despite those limitations cluster level serializers offer\n full support for IMDG [sources and sinks](sources-sinks.md) - in particular\n the possibility to query & update `Map`s as well as read from `EventJournal`.\n+\n+### 3rd Party Serialization Support\n+\n+#### Google Protocol Buffers\n+\n+As Google Protocol Buffers types already implement `Serializable` interface\n+they are natively supported and don't need custom serializer. However, for\n+best performance we encourage using Protocol Buffers specific serialization.\n+Jet extensions already contain an adapter and hook (supporting Protocol\n+Buffers v3) that allow you to make use of it.\n+\n+To include Maven dependency add following to your pom:\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-protobuf</artifactId>\n+    <classifier>jar-with-dependencies</classifier>\n+    <version>${hazelcast.jet.version}</version>\n+</dependency>\n+```\n+\n+If you want to use it with just a job, implement provided adapter:", "originalCommit": "ecccec6985a6ebe403824484316b06200ad24062", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3ODgwMg==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401578802", "bodyText": "You need to addJar() the extension obviously.", "author": "gierlachg", "createdAt": "2020-04-01T12:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzcwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MDUxNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401580517", "bodyText": "this should be in the docs. what about dependencies of the JAR? does it shade protobuf dependencies?", "author": "cangencer", "createdAt": "2020-04-01T12:36:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3NzcwMA=="}], "type": "inlineReview"}, {"oid": "a8201e5e20fc106e93371da8ef40c95649a2d3ab", "url": "https://github.com/hazelcast/hazelcast-jet/commit/a8201e5e20fc106e93371da8ef40c95649a2d3ab", "message": "Improving protobuf docs", "committedDate": "2020-04-01T13:19:02Z", "type": "commit"}, {"oid": "23579a855af43fa8d04c83c34c3f9069a5a5bce3", "url": "https://github.com/hazelcast/hazelcast-jet/commit/23579a855af43fa8d04c83c34c3f9069a5a5bce3", "message": "Improving protobuf docs", "committedDate": "2020-04-01T14:05:30Z", "type": "commit"}, {"oid": "beb60e3b8ff31c91831e25b0c2415c3f8e130cb5", "url": "https://github.com/hazelcast/hazelcast-jet/commit/beb60e3b8ff31c91831e25b0c2415c3f8e130cb5", "message": "Improving protobuf docs", "committedDate": "2020-04-01T14:29:34Z", "type": "commit"}, {"oid": "cb6e0ad23357a68d4c9bf111f0cb9fe65a08bb66", "url": "https://github.com/hazelcast/hazelcast-jet/commit/cb6e0ad23357a68d4c9bf111f0cb9fe65a08bb66", "message": "Improve serialization page", "committedDate": "2020-04-01T16:09:10Z", "type": "commit"}, {"oid": "5bf66f2406ca822bdccb3f72e3b2ecf271246d45", "url": "https://github.com/hazelcast/hazelcast-jet/commit/5bf66f2406ca822bdccb3f72e3b2ecf271246d45", "message": "Undo changing title (breaks links)", "committedDate": "2020-04-01T16:12:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MDgzNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401740837", "bodyText": "since it's reworded, we don't need to depend on the fat JAR here, and we should also include the equivalent gradle snippet as the first option (this is the convention throughout the documentation)", "author": "cangencer", "createdAt": "2020-04-01T16:18:29Z", "path": "site/docs/api/serialization.md", "diffHunk": "@@ -315,9 +316,58 @@ hazelcast:\n         \"class-name\": \"com.hazelcast.jet.examples.PersonSerializer\"\n ```\n \n-All the classes - data types, serializers & hooks - should be present\n-on the cluster classpath, ideally in server's `lib` directory packaged as\n-a jar file. Moreover, used type ids have to be unique across all\n-serializers. Despite those limitations cluster level serializers offer\n-full support for IMDG [sources and sinks](sources-sinks.md) - in particular\n-the possibility to query & update `Map`s as well as read from `EventJournal`.\n+Put the JAR containing the serializer hook and related classes in the\n+`<jet_home>/lib` directory. Make sure that ecah registered serializer\n+has a unique type ID.\n+\n+The advantage of a cluster-level serializer is that it is supported in\n+all Hazelcast Jet features.\n+\n+## 3rd-Party Serialization Support\n+\n+### Google Protocol Buffers\n+\n+Since the classes generated by Google Protocol Buffers (Protobuf)\n+already implement `java.io.Serializable`, Hazelcast Jet automatically\n+supports them without a custom serializer. However, for best performance\n+we encourage registering a Protobuf-specific serializer. There is a Jet\n+extension module that simplifies this for Protobuf version 3.\n+\n+Add the extension as a dependency to your Jet job's Maven project:\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-protobuf</artifactId>\n+    <classifier>jar-with-dependencies</classifier>", "originalCommit": "5bf66f2406ca822bdccb3f72e3b2ecf271246d45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MTUxNw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401751517", "bodyText": "We actually want to support both approaches, with the extension installed on the Jet cluster and used just inside a job. We should update the docs in that direction.", "author": "mtopolnik", "createdAt": "2020-04-01T16:34:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MDgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTQxMQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401741411", "bodyText": "wouldn't it be easier to use the registerSerializer(ProtobufSerializer.from(..) option?", "author": "cangencer", "createdAt": "2020-04-01T16:19:16Z", "path": "site/docs/api/serialization.md", "diffHunk": "@@ -315,9 +316,58 @@ hazelcast:\n         \"class-name\": \"com.hazelcast.jet.examples.PersonSerializer\"\n ```\n \n-All the classes - data types, serializers & hooks - should be present\n-on the cluster classpath, ideally in server's `lib` directory packaged as\n-a jar file. Moreover, used type ids have to be unique across all\n-serializers. Despite those limitations cluster level serializers offer\n-full support for IMDG [sources and sinks](sources-sinks.md) - in particular\n-the possibility to query & update `Map`s as well as read from `EventJournal`.\n+Put the JAR containing the serializer hook and related classes in the\n+`<jet_home>/lib` directory. Make sure that ecah registered serializer\n+has a unique type ID.\n+\n+The advantage of a cluster-level serializer is that it is supported in\n+all Hazelcast Jet features.\n+\n+## 3rd-Party Serialization Support\n+\n+### Google Protocol Buffers\n+\n+Since the classes generated by Google Protocol Buffers (Protobuf)\n+already implement `java.io.Serializable`, Hazelcast Jet automatically\n+supports them without a custom serializer. However, for best performance\n+we encourage registering a Protobuf-specific serializer. There is a Jet\n+extension module that simplifies this for Protobuf version 3.\n+\n+Add the extension as a dependency to your Jet job's Maven project:\n+\n+```xml\n+<dependency>\n+    <groupId>com.hazelcast.jet</groupId>\n+    <artifactId>hazelcast-jet-protobuf</artifactId>\n+    <classifier>jar-with-dependencies</classifier>\n+    <version>${hazelcast.jet.version}</version>\n+</dependency>\n+```\n+\n+If you want to use it locally within a Jet job, implement an adapter\n+by extending the provided class:\n+\n+```java\n+class PersonSerializer extends ProtobufSerializer<Person> {", "originalCommit": "5bf66f2406ca822bdccb3f72e3b2ecf271246d45", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0Mzg3Mw==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401743873", "bodyText": "registerSerializer() takes serializer by class right now", "author": "gierlachg", "createdAt": "2020-04-01T16:22:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0OTI4MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401749281", "bodyText": "would it make sense to support instance as well?", "author": "cangencer", "createdAt": "2020-04-01T16:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2MDQ2MA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401760460", "bodyText": "I guess we could do that, wanted to keep it simple.", "author": "gierlachg", "createdAt": "2020-04-01T16:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc3MTE1NA==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r401771154", "bodyText": "However, in case of Protobuf adapter which isn't Serializable (Parser is not Serializable) that would not be very useful.", "author": "gierlachg", "createdAt": "2020-04-01T17:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTQxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4ODY5MQ==", "url": "https://github.com/hazelcast/hazelcast-jet/pull/2124#discussion_r402088691", "bodyText": "ok I see. \ud83d\udc4d", "author": "cangencer", "createdAt": "2020-04-02T06:53:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTQxMQ=="}], "type": "inlineReview"}, {"oid": "682837e8f5b753c373587b5de82a6f2b62d7a1bc", "url": "https://github.com/hazelcast/hazelcast-jet/commit/682837e8f5b753c373587b5de82a6f2b62d7a1bc", "message": "Add gradle/maven protobuf dependency section", "committedDate": "2020-04-01T17:02:00Z", "type": "commit"}]}