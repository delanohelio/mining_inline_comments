{"pr_number": 2884, "pr_title": "batch copy or move process #2753", "pr_createdAt": "2020-06-03T04:02:00Z", "pr_url": "https://github.com/apache/dolphinscheduler/pull/2884", "timeline": [{"oid": "53c2ba2a008cb48e8f41e012eb0febeacdee0b42", "url": "https://github.com/apache/dolphinscheduler/commit/53c2ba2a008cb48e8f41e012eb0febeacdee0b42", "message": "batch copy or move process", "committedDate": "2020-06-03T03:57:54Z", "type": "commit"}, {"oid": "9a4ad29147776d933a13c5af9512cdd663fa2a8b", "url": "https://github.com/apache/dolphinscheduler/commit/9a4ad29147776d933a13c5af9512cdd663fa2a8b", "message": "batch copy or move process", "committedDate": "2020-06-03T04:37:46Z", "type": "commit"}, {"oid": "247503a31f79ab9d923aafac0dedf3b3dba2a47e", "url": "https://github.com/apache/dolphinscheduler/commit/247503a31f79ab9d923aafac0dedf3b3dba2a47e", "message": "batch copy or move process", "committedDate": "2020-06-03T06:50:44Z", "type": "commit"}, {"oid": "55a21cd03bfc9ff551b550ebea1de5e049babcf3", "url": "https://github.com/apache/dolphinscheduler/commit/55a21cd03bfc9ff551b550ebea1de5e049babcf3", "message": "batch copy or move process", "committedDate": "2020-06-03T08:41:27Z", "type": "commit"}, {"oid": "309fa0cf098aaa2d51791dc9ff7246db23759e68", "url": "https://github.com/apache/dolphinscheduler/commit/309fa0cf098aaa2d51791dc9ff7246db23759e68", "message": "batch copy or move process", "committedDate": "2020-06-03T09:00:17Z", "type": "commit"}, {"oid": "4694500f8c9a713f4d3515a9732570de7408d5a8", "url": "https://github.com/apache/dolphinscheduler/commit/4694500f8c9a713f4d3515a9732570de7408d5a8", "message": "batch copy or move process", "committedDate": "2020-06-03T09:16:41Z", "type": "commit"}, {"oid": "bb41a4f119f3887922203b663feabc2809c52ee3", "url": "https://github.com/apache/dolphinscheduler/commit/bb41a4f119f3887922203b663feabc2809c52ee3", "message": "batch copy or move process", "committedDate": "2020-06-03T10:44:40Z", "type": "commit"}, {"oid": "2b71e4e64e524e9e0cba9c716fb17f86745f3882", "url": "https://github.com/apache/dolphinscheduler/commit/2b71e4e64e524e9e0cba9c716fb17f86745f3882", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-06T08:21:01Z", "type": "commit"}, {"oid": "a273966d4213ca48ae9234176b163d2528a06ae3", "url": "https://github.com/apache/dolphinscheduler/commit/a273966d4213ca48ae9234176b163d2528a06ae3", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-10T02:54:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNzAyOQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438527029", "bodyText": "Please add parameters to ApiImplicitParams()", "author": "wen-hemin", "createdAt": "2020-06-11T03:48:48Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -95,27 +95,33 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     }\n \n     /**\n-     * copy process definition\n+     * copy or move process definition\n      *\n      * @param loginUser   login user\n      * @param projectName project name\n-     * @param processId   process definition id\n+     * @param isCopy  isCopy\n+     * @param processDefinitionIds   process definition ids\n+     * @param targetProjectName target project name\n      * @return copy result code\n      */\n-    @ApiOperation(value = \"copyProcessDefinition\", notes= \"COPY_PROCESS_DEFINITION_NOTES\")\n+    @ApiOperation(value = \"copyOrMoveProcessDefinition\", notes= \"COPY_OR_MOVE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-            @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", required = true, dataType = \"String\", example = \"3,4\")\n     })\n-    @PostMapping(value = \"/copy\")\n+    @PostMapping(value = \"/copy-or-move\")\n     @ResponseStatus(HttpStatus.OK)\n-    @ApiException(COPY_PROCESS_DEFINITION_ERROR)\n-    public Result copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                        @RequestParam(value = \"processId\", required = true) int processId) throws JsonProcessingException {\n-        logger.info(\"copy process definition, login user:{}, project name:{}, process definition id:{}\",\n-                loginUser.getUserName(), projectName, processId);\n-        Map<String, Object> result = processDefinitionService.copyProcessDefinition(loginUser, projectName, processId);\n-        return returnDataList(result);\n+    @ApiException(COPY_OR_MOVE_PROCESS_DEFINITION_ERROR)\n+    public Result copyOrMoveProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                              @RequestParam(value = \"processDefinitionIds\", required = true) String processDefinitionIds,\n+                                              @RequestParam(value = \"targetProjectName\",required = true) String targetProjectName,\n+                                              @RequestParam(value = \"isCopy\", required = true) boolean isCopy)  {", "originalCommit": "a273966d4213ca48ae9234176b163d2528a06ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxMjgwNA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r442612804", "bodyText": "problem fixed", "author": "zixi0825", "createdAt": "2020-06-19T03:32:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNzAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNzE2Nw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438527167", "bodyText": "Please add parameters to log", "author": "wen-hemin", "createdAt": "2020-06-11T03:49:31Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -95,27 +95,33 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     }\n \n     /**\n-     * copy process definition\n+     * copy or move process definition\n      *\n      * @param loginUser   login user\n      * @param projectName project name\n-     * @param processId   process definition id\n+     * @param isCopy  isCopy\n+     * @param processDefinitionIds   process definition ids\n+     * @param targetProjectName target project name\n      * @return copy result code\n      */\n-    @ApiOperation(value = \"copyProcessDefinition\", notes= \"COPY_PROCESS_DEFINITION_NOTES\")\n+    @ApiOperation(value = \"copyOrMoveProcessDefinition\", notes= \"COPY_OR_MOVE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-            @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", required = true, dataType = \"String\", example = \"3,4\")\n     })\n-    @PostMapping(value = \"/copy\")\n+    @PostMapping(value = \"/copy-or-move\")\n     @ResponseStatus(HttpStatus.OK)\n-    @ApiException(COPY_PROCESS_DEFINITION_ERROR)\n-    public Result copyProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                        @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                        @RequestParam(value = \"processId\", required = true) int processId) throws JsonProcessingException {\n-        logger.info(\"copy process definition, login user:{}, project name:{}, process definition id:{}\",\n-                loginUser.getUserName(), projectName, processId);\n-        Map<String, Object> result = processDefinitionService.copyProcessDefinition(loginUser, projectName, processId);\n-        return returnDataList(result);\n+    @ApiException(COPY_OR_MOVE_PROCESS_DEFINITION_ERROR)\n+    public Result copyOrMoveProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n+                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                              @RequestParam(value = \"processDefinitionIds\", required = true) String processDefinitionIds,\n+                                              @RequestParam(value = \"targetProjectName\",required = true) String targetProjectName,\n+                                              @RequestParam(value = \"isCopy\", required = true) boolean isCopy)  {\n+\n+\n+        logger.info(\"batch {} process definition, login user:{}, project name:{}, process definition ids:{}\uff0ctarget project name:{}\",\n+                isCopy?\"copy\":\"move\",StringUtils.replaceNRTtoUnderline(loginUser.getUserName()), StringUtils.replaceNRTtoUnderline(projectName), StringUtils.replaceNRTtoUnderline(processDefinitionIds),StringUtils.replaceNRTtoUnderline(targetProjectName));", "originalCommit": "a273966d4213ca48ae9234176b163d2528a06ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxMjk0MQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r442612941", "bodyText": "Parameters already exist", "author": "zixi0825", "createdAt": "2020-06-19T03:33:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNzE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODIzMA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438528230", "bodyText": "10148 repeat\narranged in order", "author": "wen-hemin", "createdAt": "2020-06-11T03:54:14Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java", "diffHunk": "@@ -176,6 +176,10 @@\n     DELETE_WORKER_GROUP_FAIL(10147,\"delete worker group fail \", \"\u5220\u9664worker\u5206\u7ec4\u5931\u8d25\"),\n     COPY_PROCESS_DEFINITION_ERROR(10148,\"copy process definition error\", \"\u590d\u5236\u5de5\u4f5c\u6d41\u9519\u8bef\"),\n     USER_DISABLED(10149,\"The current user is disabled\", \"\u5f53\u524d\u7528\u6237\u5df2\u505c\u7528\"),\n+    QUERY_USER_CREATED_PROJECT_ERROR(10151,\"query user created project error error\", \"\u67e5\u8be2\u7528\u6237\u521b\u5efa\u7684\u9879\u76ee\u9519\u8bef\"),\n+    PROCESS_DEFINITION_IDS_IS_EMPTY(10152,\"process definition ids is empty\", \"\u5de5\u4f5c\u6d41IDS\u4e0d\u80fd\u4e3a\u7a7a\"),\n+    COPY_OR_MOVE_PROCESS_DEFINITION_ERROR(10148,\"copy or move process definition error\", \"\u590d\u5236\u6216\u8005\u79fb\u52a8\u5de5\u4f5c\u6d41\u9519\u8bef\"),\n+    MOVE_PROCESS_DEFINITION_ERROR(10150,\"move process definition error\", \"\u79fb\u52a8\u5de5\u4f5c\u6d41\u9519\u8bef\"),", "originalCommit": "a273966d4213ca48ae9234176b163d2528a06ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxMjk5NQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r442612995", "bodyText": "problem fixed", "author": "zixi0825", "createdAt": "2020-06-19T03:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODQ4NQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438528485", "bodyText": "Annotate is wrong", "author": "wen-hemin", "createdAt": "2020-06-11T03:55:20Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,36 +295,188 @@ private String getResourceIds(ProcessData processData) {\n \n     /**\n      * copy process definition\n-     *\n      * @param loginUser   login user\n-     * @param projectName project name\n      * @param processId   process definition id\n      * @return copy result code\n      */", "originalCommit": "a273966d4213ca48ae9234176b163d2528a06ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNDcxNw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r442614717", "bodyText": "problem fixed", "author": "zixi0825", "createdAt": "2020-06-19T03:41:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyODQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDAyOQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438530029", "bodyText": "It is recommended to use the project ID.\nFuture projects will be logic delete, The project name may be duplicated.", "author": "wen-hemin", "createdAt": "2020-06-11T04:02:21Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,36 +295,188 @@ private String getResourceIds(ProcessData processData) {\n \n     /**\n      * copy process definition\n-     *\n      * @param loginUser   login user\n-     * @param projectName project name\n      * @param processId   process definition id\n      * @return copy result code\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     String targetProjectName) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n+\n+        ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n+        if (processDefinition == null) {\n+            putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n+            return result;\n+        } else {\n+            Project targetProject = projectMapper.queryByName(targetProjectName);", "originalCommit": "a273966d4213ca48ae9234176b163d2528a06ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNDc0MQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r442614741", "bodyText": "problem fixed", "author": "zixi0825", "createdAt": "2020-06-19T03:41:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5ODI0Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r446498242", "bodyText": "Hi, This is not fixed.", "author": "wen-hemin", "createdAt": "2020-06-27T07:49:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDAyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM2OTQwMA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r447369400", "bodyText": "What you see should be old code\uff0c the new code has fixed.", "author": "zixi0825", "createdAt": "2020-06-30T02:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDAyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MTk5Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r438561993", "bodyText": "It is recommended the error message return project name.", "author": "wen-hemin", "createdAt": "2020-06-11T06:08:31Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,36 +295,188 @@ private String getResourceIds(ProcessData processData) {\n \n     /**\n      * copy process definition\n-     *\n      * @param loginUser   login user\n-     * @param projectName project name\n      * @param processId   process definition id\n      * @return copy result code\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     String targetProjectName) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n+\n+        ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n+        if (processDefinition == null) {\n+            putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n+            return result;\n+        } else {\n+            Project targetProject = projectMapper.queryByName(targetProjectName);\n+            if(targetProject == null){\n+                putMsg(result, Status.PROJECT_NOT_FOUNT, targetProjectName);\n+                return result;\n+            }else{\n+                return createProcessDefinition(\n+                        loginUser,\n+                        targetProjectName,\n+                        processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n+                        processDefinition.getProcessDefinitionJson(),\n+                        processDefinition.getDescription(),\n+                        processDefinition.getLocations(),\n+                        processDefinition.getConnects());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * batch copy or move process definition\n+     * @param loginUser loginUser\n+     * @param projectName projectName\n+     * @param processDefinitionIds processDefinitionIds\n+     * @param targetProjectName targetProjectName\n+     * @return\n+     */\n+    public Map<String, Object> batchCopyOrMoveProcessDefinition(User loginUser,\n+                                                          String projectName,\n+                                                          String processDefinitionIds,\n+                                                          String targetProjectName, boolean isCopy){\n+        Map<String, Object> result = new HashMap<>(5);\n+        List<String> failedIdList = new ArrayList<>();\n+\n+        if (StringUtils.isEmpty(processDefinitionIds)) {\n+            putMsg(result, Status.PROCESS_DEFINITION_IDS_IS_EMPTY, targetProjectName);\n+            return result;\n+        }\n+\n+        //check src project auth\n+        Map<String, Object> checkResult = checkProjectAndAuth(loginUser, projectName);\n+        if (checkResult != null) {\n+            return checkResult;\n+        }\n+\n+        if(!targetProjectName.equals(projectName)){\n+            Map<String, Object> checkTargetProjectResult = checkProjectAndAuth(loginUser, targetProjectName);\n+            if (checkTargetProjectResult != null) {\n+                return checkTargetProjectResult;\n+            }\n+        }\n+\n+        String[] processDefinitionIdList = processDefinitionIds.split(Constants.COMMA);\n+        if(isCopy){\n+            doBatchCopyProcessDefinition(loginUser, targetProjectName, failedIdList, processDefinitionIdList);\n+        }else{\n+            doBatchMoveProcessDefinition(targetProjectName, failedIdList, processDefinitionIdList);\n+        }\n+\n+        checkBatchOperateResult(result, failedIdList);\n+\n+        return result;\n+    }\n+\n+    /**\n+     * batch move process definition\n+     * @param targetProjectName targetProjectName\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchMoveProcessDefinition(String targetProjectName, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> moveProcessDefinitionResult =\n+                        moveProcessDefinition(Integer.valueOf(processDefinitionId),targetProjectName);\n+                if (!Status.SUCCESS.equals(moveProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add(processDefinitionId);\n+                    logger.error((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * batch copy process definition\n+     * @param loginUser loginUser\n+     * @param targetProjectName targetProjectName\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchCopyProcessDefinition(User loginUser, String targetProjectName, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> copyProcessDefinitionResult =\n+                        copyProcessDefinition(loginUser,Integer.valueOf(processDefinitionId),targetProjectName);\n+                if (!Status.SUCCESS.equals(copyProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add(processDefinitionId);\n+                    logger.error((String) copyProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * check project and auth\n+     * @param loginUser\n+     * @param projectName\n+     * @return\n+     */\n+    private Map<String, Object> checkProjectAndAuth(User loginUser, String projectName) {\n         Project project = projectMapper.queryByName(projectName);\n \n+        //check user access for project\n         Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n         Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n+\n         if (resultStatus != Status.SUCCESS) {\n             return checkResult;\n         }\n+        return null;\n+    }\n+\n+    /**\n+     * move process definition\n+     * @param processId processId\n+     * @param targetProjectName targetProjectName\n+     * @return move result code\n+     */\n+    private Map<String, Object> moveProcessDefinition(Integer processId,\n+                                                     String targetProjectName) {\n+\n+        Map<String, Object> result = new HashMap<>(5);\n \n         ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n         if (processDefinition == null) {\n             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n             return result;\n         } else {\n-            return createProcessDefinition(\n-                    loginUser,\n-                    projectName,\n-                    processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n-                    processDefinition.getProcessDefinitionJson(),\n-                    processDefinition.getDescription(),\n-                    processDefinition.getLocations(),\n-                    processDefinition.getConnects());\n+            Project targetProject = projectMapper.queryByName(targetProjectName);\n+            if(targetProject == null){\n+                putMsg(result, Status.PROJECT_NOT_FOUNT, processId);\n+                return result;\n+            }else{\n+                processDefinition.setProjectId(targetProject.getId());\n+                processDefinition.setUpdateTime(new Date());\n+                if (processDefineMapper.updateById(processDefinition) > 0) {\n+                    putMsg(result, Status.SUCCESS);\n+                } else {\n+                    putMsg(result, Status.UPDATE_PROCESS_DEFINITION_ERROR);\n+                }\n+                return result;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * check batch operate result\n+     * @param result\n+     * @param failedIdList\n+     */\n+    private void checkBatchOperateResult(Map<String, Object> result, List<String> failedIdList) {\n+        if (!failedIdList.isEmpty()) {\n+            putMsg(result, Status.MOVE_PROCESS_DEFINITION_ERROR, String.join(\",\", failedIdList));", "originalCommit": "a273966d4213ca48ae9234176b163d2528a06ae3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNDg2OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r442614869", "bodyText": "already add project name", "author": "zixi0825", "createdAt": "2020-06-19T03:42:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MTk5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5ODM1Nw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r446498357", "bodyText": "failedIdList -> failedNameList", "author": "wen-hemin", "createdAt": "2020-06-27T07:50:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MTk5Mw=="}], "type": "inlineReview"}, {"oid": "97815cd2d29014adda1a33d884b13cf913c9d43c", "url": "https://github.com/apache/dolphinscheduler/commit/97815cd2d29014adda1a33d884b13cf913c9d43c", "message": "batch copy or move process sovle code smell", "committedDate": "2020-06-18T10:45:26Z", "type": "commit"}, {"oid": "79504d950a2cafab57e99dc008334428f21b4f60", "url": "https://github.com/apache/dolphinscheduler/commit/79504d950a2cafab57e99dc008334428f21b4f60", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-06-18T10:45:45Z", "type": "commit"}, {"oid": "19794cadacbc24fc242a6981f442caaadc4e3ab9", "url": "https://github.com/apache/dolphinscheduler/commit/19794cadacbc24fc242a6981f442caaadc4e3ab9", "message": "batch copy or move process sovle code smell", "committedDate": "2020-06-18T11:12:59Z", "type": "commit"}, {"oid": "1ed2361b67aa0700c25dafcb105d2b5d94be138b", "url": "https://github.com/apache/dolphinscheduler/commit/1ed2361b67aa0700c25dafcb105d2b5d94be138b", "message": "batch copy or move process sovle code smell", "committedDate": "2020-06-18T12:08:20Z", "type": "commit"}, {"oid": "5ede5e341a0c8666761c11754f712488176f393d", "url": "https://github.com/apache/dolphinscheduler/commit/5ede5e341a0c8666761c11754f712488176f393d", "message": "batch copy or move process sovle code smell", "committedDate": "2020-06-18T12:15:48Z", "type": "commit"}, {"oid": "0431b9d8bfd8a74984d26a7c07532638470a22dd", "url": "https://github.com/apache/dolphinscheduler/commit/0431b9d8bfd8a74984d26a7c07532638470a22dd", "message": "batch copy or move process sovle code smell", "committedDate": "2020-06-18T12:22:47Z", "type": "commit"}, {"oid": "c18e98b16d6801188eb945606547a97c4bcc086d", "url": "https://github.com/apache/dolphinscheduler/commit/c18e98b16d6801188eb945606547a97c4bcc086d", "message": "batch copy or move process sovle code smell", "committedDate": "2020-06-19T02:12:44Z", "type": "commit"}, {"oid": "81c9d08a194b948ee05fa276e652e830e8fece8b", "url": "https://github.com/apache/dolphinscheduler/commit/81c9d08a194b948ee05fa276e652e830e8fece8b", "message": "batch copy or move process sovle code smell", "committedDate": "2020-06-19T03:02:58Z", "type": "commit"}, {"oid": "6ac6186f57912e3cc36d44a0fde6523fcdfde203", "url": "https://github.com/apache/dolphinscheduler/commit/6ac6186f57912e3cc36d44a0fde6523fcdfde203", "message": "batch copy or move process sovle code smell", "committedDate": "2020-06-19T03:45:51Z", "type": "commit"}, {"oid": "8317b00b1887d436579f7a414476031f04885043", "url": "https://github.com/apache/dolphinscheduler/commit/8317b00b1887d436579f7a414476031f04885043", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-19T11:42:38Z", "type": "commit"}, {"oid": "32695ec4d66a399c8c8501663f57a8a8a0fc06f2", "url": "https://github.com/apache/dolphinscheduler/commit/32695ec4d66a399c8c8501663f57a8a8a0fc06f2", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-22T01:57:47Z", "type": "commit"}, {"oid": "d49376b9f64a24b27f82915094aab6749ce0b066", "url": "https://github.com/apache/dolphinscheduler/commit/d49376b9f64a24b27f82915094aab6749ce0b066", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-23T11:52:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2Nzc1Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444267752", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "author": "samz406", "createdAt": "2020-06-23T14:28:13Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,38 +294,209 @@ private String getResourceIds(ProcessData processData) {\n     /**\n      * copy process definition\n      *\n-     * @param loginUser   login user\n-     * @param projectName project name\n-     * @param processId   process definition id\n-     * @return copy result code\n+     * @param loginUser loginUser\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return\n+     * @throws JsonProcessingException\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     Project targetProject) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n-        Project project = projectMapper.queryByName(projectName);\n-\n-        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n-        Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n-        if (resultStatus != Status.SUCCESS) {\n-            return checkResult;\n-        }\n \n         ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n         if (processDefinition == null) {\n             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n             return result;\n         } else {\n+\n             return createProcessDefinition(\n                     loginUser,\n-                    projectName,\n+                    targetProject.getName(),\n                     processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n                     processDefinition.getProcessDefinitionJson(),\n                     processDefinition.getDescription(),\n                     processDefinition.getLocations(),\n                     processDefinition.getConnects());\n+\n+        }\n+    }\n+\n+    /**\n+     * batch copy or move process definition\n+     * @param loginUser loginUser\n+     * @param projectName projectName\n+     * @param processDefinitionIds processDefinitionIds\n+     * @param targetProjectId targetProjectId\n+     * @param isCopy isCopy\n+     * @return\n+     */\n+    public Map<String, Object> batchCopyOrMoveProcessDefinition(User loginUser,\n+                                                          String projectName,\n+                                                          String processDefinitionIds,\n+                                                          int targetProjectId, boolean isCopy){\n+        Map<String, Object> result = new HashMap<>(5);", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxMDA1Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444610053", "bodyText": "The initial value of HashMap in all Controller and Service in DolphinScheduler is 5, so if you want to modify it, then it is best to unify all changes after discussion\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\u5728DolphinScheduler\u4e2d\u6240\u6709\u7684Controller\u548cService\u4e2dHashMap\u7684\u521d\u59cb\u503c\u90fd\u4e3a5\uff0c\u6240\u4ee5\u5982\u679c\u8981\u4fee\u6539\u7684\u8bdd\uff0c\u90a3\u4e48\u6700\u597d\u7ecf\u8fc7\u8ba8\u8bba\u4ee5\u540e\uff0c\u7edf\u4e00\u5168\u90e8\u4fee\u6539", "author": "zixi0825", "createdAt": "2020-06-24T02:30:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2Nzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY4MjgzNw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444682837", "bodyText": "This was discussed before, you can send an email and change it in a unified way\n\u8fd9\u4e2a\u4e4b\u524d\u8ba8\u8bba\u8fc7\uff0c\u4f60\u53ef\u4ee5\u53d1\u4e2a\u90ae\u4ef6\uff0c\u7edf\u4e00\u6539\u4e86", "author": "samz406", "createdAt": "2020-06-24T06:55:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2Nzc1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NzE2MQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r446587161", "bodyText": "OK!", "author": "zixi0825", "createdAt": "2020-06-28T01:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2Nzc1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MjI3Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444282276", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "author": "samz406", "createdAt": "2020-06-23T14:46:36Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,38 +294,209 @@ private String getResourceIds(ProcessData processData) {\n     /**\n      * copy process definition\n      *\n-     * @param loginUser   login user\n-     * @param projectName project name\n-     * @param processId   process definition id\n-     * @return copy result code\n+     * @param loginUser loginUser\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return\n+     * @throws JsonProcessingException\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     Project targetProject) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MjU2OQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444282569", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "author": "samz406", "createdAt": "2020-06-23T14:46:57Z", "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java", "diffHunk": "@@ -179,16 +181,33 @@ public void testQueryProcessDefinitionById() throws Exception {\n     }\n \n     @Test\n-    public void testCopyProcessDefinition() throws Exception {\n+    public void testBatchCopyProcessDefinition() throws Exception {\n \n         String projectName = \"test\";\n-        int id = 1;\n+        int targetProjectId = 2;\n+        String id = \"1\";\n+\n+        Map<String, Object> result = new HashMap<>(5);", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4Mjc0OA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444282748", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "author": "samz406", "createdAt": "2020-06-23T14:47:10Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,38 +294,209 @@ private String getResourceIds(ProcessData processData) {\n     /**\n      * copy process definition\n      *\n-     * @param loginUser   login user\n-     * @param projectName project name\n-     * @param processId   process definition id\n-     * @return copy result code\n+     * @param loginUser loginUser\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return\n+     * @throws JsonProcessingException\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     Project targetProject) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n-        Project project = projectMapper.queryByName(projectName);\n-\n-        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n-        Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n-        if (resultStatus != Status.SUCCESS) {\n-            return checkResult;\n-        }\n \n         ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n         if (processDefinition == null) {\n             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n             return result;\n         } else {\n+\n             return createProcessDefinition(\n                     loginUser,\n-                    projectName,\n+                    targetProject.getName(),\n                     processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n                     processDefinition.getProcessDefinitionJson(),\n                     processDefinition.getDescription(),\n                     processDefinition.getLocations(),\n                     processDefinition.getConnects());\n+\n+        }\n+    }\n+\n+    /**\n+     * batch copy or move process definition\n+     * @param loginUser loginUser\n+     * @param projectName projectName\n+     * @param processDefinitionIds processDefinitionIds\n+     * @param targetProjectId targetProjectId\n+     * @param isCopy isCopy\n+     * @return\n+     */\n+    public Map<String, Object> batchCopyOrMoveProcessDefinition(User loginUser,\n+                                                          String projectName,\n+                                                          String processDefinitionIds,\n+                                                          int targetProjectId, boolean isCopy){\n+        Map<String, Object> result = new HashMap<>(5);\n+        List<String> failedIdList = new ArrayList<>();\n+\n+        if (StringUtils.isEmpty(processDefinitionIds)) {\n+            putMsg(result, Status.PROCESS_DEFINITION_IDS_IS_EMPTY, processDefinitionIds);\n+            return result;\n+        }\n+\n+        //check src project auth\n+        Map<String, Object> checkResult = checkProjectAndAuth(loginUser, projectName);\n+        if (checkResult != null) {\n+            return checkResult;\n+        }\n+\n+        Project targetProject = projectMapper.queryDetailById(targetProjectId);\n+        if(targetProject == null){\n+            putMsg(result, Status.PROJECT_NOT_FOUNT, targetProjectId);\n+            return result;\n+        }\n+\n+        if(!(targetProject.getName()).equals(projectName)){\n+            Map<String, Object> checkTargetProjectResult = checkProjectAndAuth(loginUser, targetProject.getName());\n+            if (checkTargetProjectResult != null) {\n+                return checkTargetProjectResult;\n+            }\n+        }\n+\n+        String[] processDefinitionIdList = processDefinitionIds.split(Constants.COMMA);\n+        if(isCopy){\n+            doBatchCopyProcessDefinition(loginUser, targetProject, failedIdList, processDefinitionIdList);\n+        }else{\n+            doBatchMoveProcessDefinition(targetProject, failedIdList, processDefinitionIdList);\n+        }\n+\n+        checkBatchOperateResult(projectName,targetProject.getName(),result, failedIdList,isCopy);\n+\n+        return result;\n+    }\n+\n+    /**\n+     * batch move process definition\n+     * @param targetProject targetProject\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchMoveProcessDefinition(Project targetProject, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> moveProcessDefinitionResult =\n+                        moveProcessDefinition(Integer.valueOf(processDefinitionId),targetProject);\n+                if (!Status.SUCCESS.equals(moveProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                    logger.error((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * batch copy process definition\n+     * @param loginUser loginUser\n+     * @param targetProject targetProject\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchCopyProcessDefinition(User loginUser, Project targetProject, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> copyProcessDefinitionResult =\n+                        copyProcessDefinition(loginUser,Integer.valueOf(processDefinitionId),targetProject);\n+                if (!Status.SUCCESS.equals(copyProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add((String) copyProcessDefinitionResult.get(Constants.MSG));\n+                    logger.error((String) copyProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * check project and auth\n+     * @param loginUser\n+     * @param projectName\n+     * @return\n+     */\n+    private Map<String, Object> checkProjectAndAuth(User loginUser, String projectName) {\n+        Project project = projectMapper.queryByName(projectName);\n+\n+        //check user access for project\n+        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n+        Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n+\n+        if (resultStatus != Status.SUCCESS) {\n+            return checkResult;\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * move process definition\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return move result code\n+     */\n+    private Map<String, Object> moveProcessDefinition(Integer processId,\n+                                                     Project targetProject) {\n+\n+        Map<String, Object> result = new HashMap<>(5);", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MzA4Nw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444283087", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "author": "samz406", "createdAt": "2020-06-23T14:47:37Z", "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionServiceTest.java", "diffHunk": "@@ -224,8 +226,52 @@ public void testCopyProcessDefinition()  throws Exception{\n                 definition.getLocations(),\n                 definition.getConnects())).thenReturn(createProcessResult);\n \n-        Map<String, Object> successRes = processDefinitionService.copyProcessDefinition(loginUser,\n-                \"project_test1\", 46);\n+        Map<String, Object> successRes = processDefinitionService.batchCopyOrMoveProcessDefinition(loginUser,\"project_test1\",\n+                 \"46\",1,true);\n+\n+        Assert.assertEquals(Status.SUCCESS, successRes.get(Constants.STATUS));\n+    }\n+\n+    @Test\n+    public void testBatchMoveProcessDefinition()  throws Exception{\n+        String projectName = \"project_test1\";\n+        Mockito.when(projectMapper.queryByName(projectName)).thenReturn(getProject(projectName));\n+\n+        String projectName2 = \"project_test2\";\n+        Mockito.when(projectMapper.queryByName(projectName2)).thenReturn(getProject(projectName2));\n+\n+        int targetProjectId = 2;\n+        Mockito.when(projectMapper.queryDetailById(targetProjectId)).thenReturn(getProjectById(targetProjectId));\n+\n+        Project project = getProject(projectName);\n+        Project targetProject = getProjectById(targetProjectId);\n+\n+        User loginUser = new User();\n+        loginUser.setId(-1);\n+        loginUser.setUserType(UserType.GENERAL_USER);\n+\n+        Map<String, Object> result = new HashMap<>(5);", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4MzMzNg==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444283336", "bodyText": "Hashmap does not recommend the initial value odd\uff0cNo need to initialize", "author": "samz406", "createdAt": "2020-06-23T14:47:57Z", "path": "dolphinscheduler-api/src/test/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionControllerTest.java", "diffHunk": "@@ -179,16 +181,33 @@ public void testQueryProcessDefinitionById() throws Exception {\n     }\n \n     @Test\n-    public void testCopyProcessDefinition() throws Exception {\n+    public void testBatchCopyProcessDefinition() throws Exception {\n \n         String projectName = \"test\";\n-        int id = 1;\n+        int targetProjectId = 2;\n+        String id = \"1\";\n+\n+        Map<String, Object> result = new HashMap<>(5);\n+        putMsg(result, Status.SUCCESS);\n+\n+        Mockito.when(processDefinitionService.batchCopyOrMoveProcessDefinition(user,projectName,id,targetProjectId,true)).thenReturn(result);\n+        Result response = processDefinitionController.copyOrMoveProcessDefinition(user, projectName,id,targetProjectId,true);\n+\n+        Assert.assertEquals(Status.SUCCESS.getCode(),response.getCode().intValue());\n+    }\n+\n+    @Test\n+    public void testBatchMoveProcessDefinition() throws Exception {\n+\n+        String projectName = \"test\";\n+        int targetProjectId = 2;\n+        String id = \"1\";\n \n         Map<String, Object> result = new HashMap<>(5);", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MDc5Nw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444290797", "bodyText": "i think failedIdList   should store the id, but there added may be a failed description statement not the id", "author": "samz406", "createdAt": "2020-06-23T14:57:24Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -295,38 +294,209 @@ private String getResourceIds(ProcessData processData) {\n     /**\n      * copy process definition\n      *\n-     * @param loginUser   login user\n-     * @param projectName project name\n-     * @param processId   process definition id\n-     * @return copy result code\n+     * @param loginUser loginUser\n+     * @param processId processId\n+     * @param targetProject targetProject\n+     * @return\n+     * @throws JsonProcessingException\n      */\n-    public Map<String, Object> copyProcessDefinition(User loginUser, String projectName, Integer processId) throws JsonProcessingException {\n+    private Map<String, Object> copyProcessDefinition(User loginUser,\n+                                                     Integer processId,\n+                                                     Project targetProject) throws JsonProcessingException {\n \n         Map<String, Object> result = new HashMap<>(5);\n-        Project project = projectMapper.queryByName(projectName);\n-\n-        Map<String, Object> checkResult = projectService.checkProjectAndAuth(loginUser, project, projectName);\n-        Status resultStatus = (Status) checkResult.get(Constants.STATUS);\n-        if (resultStatus != Status.SUCCESS) {\n-            return checkResult;\n-        }\n \n         ProcessDefinition processDefinition = processDefineMapper.selectById(processId);\n         if (processDefinition == null) {\n             putMsg(result, Status.PROCESS_DEFINE_NOT_EXIST, processId);\n             return result;\n         } else {\n+\n             return createProcessDefinition(\n                     loginUser,\n-                    projectName,\n+                    targetProject.getName(),\n                     processDefinition.getName() + \"_copy_\" + System.currentTimeMillis(),\n                     processDefinition.getProcessDefinitionJson(),\n                     processDefinition.getDescription(),\n                     processDefinition.getLocations(),\n                     processDefinition.getConnects());\n+\n+        }\n+    }\n+\n+    /**\n+     * batch copy or move process definition\n+     * @param loginUser loginUser\n+     * @param projectName projectName\n+     * @param processDefinitionIds processDefinitionIds\n+     * @param targetProjectId targetProjectId\n+     * @param isCopy isCopy\n+     * @return\n+     */\n+    public Map<String, Object> batchCopyOrMoveProcessDefinition(User loginUser,\n+                                                          String projectName,\n+                                                          String processDefinitionIds,\n+                                                          int targetProjectId, boolean isCopy){\n+        Map<String, Object> result = new HashMap<>(5);\n+        List<String> failedIdList = new ArrayList<>();\n+\n+        if (StringUtils.isEmpty(processDefinitionIds)) {\n+            putMsg(result, Status.PROCESS_DEFINITION_IDS_IS_EMPTY, processDefinitionIds);\n+            return result;\n+        }\n+\n+        //check src project auth\n+        Map<String, Object> checkResult = checkProjectAndAuth(loginUser, projectName);\n+        if (checkResult != null) {\n+            return checkResult;\n+        }\n+\n+        Project targetProject = projectMapper.queryDetailById(targetProjectId);\n+        if(targetProject == null){\n+            putMsg(result, Status.PROJECT_NOT_FOUNT, targetProjectId);\n+            return result;\n+        }\n+\n+        if(!(targetProject.getName()).equals(projectName)){\n+            Map<String, Object> checkTargetProjectResult = checkProjectAndAuth(loginUser, targetProject.getName());\n+            if (checkTargetProjectResult != null) {\n+                return checkTargetProjectResult;\n+            }\n+        }\n+\n+        String[] processDefinitionIdList = processDefinitionIds.split(Constants.COMMA);\n+        if(isCopy){\n+            doBatchCopyProcessDefinition(loginUser, targetProject, failedIdList, processDefinitionIdList);\n+        }else{\n+            doBatchMoveProcessDefinition(targetProject, failedIdList, processDefinitionIdList);\n+        }\n+\n+        checkBatchOperateResult(projectName,targetProject.getName(),result, failedIdList,isCopy);\n+\n+        return result;\n+    }\n+\n+    /**\n+     * batch move process definition\n+     * @param targetProject targetProject\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchMoveProcessDefinition(Project targetProject, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> moveProcessDefinitionResult =\n+                        moveProcessDefinition(Integer.valueOf(processDefinitionId),targetProject);\n+                if (!Status.SUCCESS.equals(moveProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                    logger.error((String) moveProcessDefinitionResult.get(Constants.MSG));\n+                }\n+            } catch (Exception e) {\n+                failedIdList.add(processDefinitionId);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * batch copy process definition\n+     * @param loginUser loginUser\n+     * @param targetProject targetProject\n+     * @param failedIdList failedIdList\n+     * @param processDefinitionIdList processDefinitionIdList\n+     */\n+    private void doBatchCopyProcessDefinition(User loginUser, Project targetProject, List<String> failedIdList, String[] processDefinitionIdList) {\n+        for(String processDefinitionId:processDefinitionIdList){\n+            try {\n+                Map<String, Object> copyProcessDefinitionResult =\n+                        copyProcessDefinition(loginUser,Integer.valueOf(processDefinitionId),targetProject);\n+                if (!Status.SUCCESS.equals(copyProcessDefinitionResult.get(Constants.STATUS))) {\n+                    failedIdList.add((String) copyProcessDefinitionResult.get(Constants.MSG));", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYwODE2NA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444608164", "bodyText": "In my opinion, simply returning the id does not fully express the reason for the failure, I designed it to return a more complete cause of the error\n\n\u5728\u6211\u770b\u6765\uff0c\u4ec5\u4ec5\u8fd4\u56deid\u5e76\u4e0d\u80fd\u5b8c\u5168\u8868\u8fbe\u5931\u8d25\u7684\u539f\u56e0\uff0c\u6211\u8fd9\u4e48\u8bbe\u8ba1\u662f\u4e3a\u4e86\u8fd4\u56de\u66f4\u52a0\u5b8c\u6574\u7684\u9519\u8bef\u539f\u56e0", "author": "zixi0825", "createdAt": "2020-06-24T02:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY4NjMzNQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444686335", "bodyText": "I have two questions:\n1 Follow your current design. There may be a splicing return. Part of the error description and part of the id situation are not clear.\n2 I think that the id should not be returned here, the process name should be returned, and the front end should be prompted, which of the several process errors is ok. If the id is returned, the front-end operator does not understand which process problem these id refers to\n\u6211\u6709\u4e24\u70b9\u7591\u95ee\uff0c\n1 \u6309\u7167\u4f60\u73b0\u5728\u8bbe\u8ba1\u3002\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u62fc\u63a5\u8fd4\u56de \u4e00\u90e8\u5206\u662f\u9519\u8bef\u63cf\u8ff0\uff0c\u4e00\u90e8\u5206\u662fid\u60c5\u51b5 ,\u8fd9\u6837\u63cf\u8ff0\u4e0d\u6e05\u6670\u4e86\u3002\n2 \u6211\u89c9\u5f97\u8fd9\u91cc\u4e0d\u5e94\u8be5\u8fd4\u56deid\uff0c\u5e94\u8be5\u8fd4\u56de\u6d41\u7a0b\u540d\u79f0\u3002\u7ed9\u524d\u7aef\u63d0\u793a\uff0c\u54ea\u4e2a\u51e0\u4e2a\u6d41\u7a0b\u9519\u8bef\u5c31ok\u4e86\uff0c\u5982\u679c\u8fd4\u56deid\uff0c\u524d\u7aef\u64cd\u4f5c\u4eba\u5458\u4e5f\u4e0d\u7406\u89e3\u8fd9\u4e9bid\u6307\u7684\u662f\u54ea\u4e2a\u6d41\u7a0b\u95ee\u9898\u3002\u4f60\u89c9\u5f97\u4e86", "author": "samz406", "createdAt": "2020-06-24T07:03:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0MzE1Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444843156", "bodyText": "I have changed it to the name of the workflow that returned the error. If the error information is returned, it cannot be ruled out that the information is incomplete\n\u6211\u5df2\u7ecf\u5c06\u5176\u4fee\u6539\u4e3a\u8fd4\u56de\u51fa\u9519\u7684\u5de5\u4f5c\u6d41\u540d\u79f0\u4e86\uff0c\u8fd4\u56de\u9519\u8bef\u63cf\u8ff0\u7684\u8bdd\u786e\u5b9e\u4e0d\u80fd\u6392\u9664\u4fe1\u606f\u4e0d\u5b8c\u6574\u7684\u60c5\u51b5\n\u4f8b\u5b50\uff1a\u5982\u679c\u5de5\u4f5c\u6d41\u4e0d\u5b58\u5728\u7684\u8bdd\uff0c\u8fd4\u56de\u7684\u4fe1\u606f\u5982\u4e0b\uff1a\n\u4eceproject_test1\u590d\u5236\u5de5\u4f5c\u6d41\u5230project_test1\u9519\u8bef : 47[null]", "author": "zixi0825", "createdAt": "2020-06-24T12:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5MDc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5NjU0MA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444296540", "bodyText": "Modify note description", "author": "samz406", "createdAt": "2020-06-23T15:05:24Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProjectService.java", "diffHunk": "@@ -43,7 +43,7 @@\n  *HttpTask./", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzMDg2Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444830862", "bodyText": "Makes no sense, I changed it back", "author": "zixi0825", "createdAt": "2020-06-24T11:36:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI5NjU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNzgxNQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444307815", "bodyText": "queryProjectCreatedByUser can define a parameter, you can not userid", "author": "samz406", "createdAt": "2020-06-23T15:21:08Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProjectController.java", "diffHunk": "@@ -226,6 +227,23 @@ public Result queryAuthorizedProject(@ApiIgnore @RequestAttribute(value = Consta\n         return returnDataList(result);\n     }\n \n+    /**\n+     * query user created project\n+     *\n+     * @param loginUser login user\n+     * @return projects which the user create\n+     */\n+    @ApiOperation(value = \"queryProjectCreatedByUser\", notes = \"QUERY_USER_CREATED_PROJECT_NOTES\")\n+\n+    @GetMapping(value = \"/login-user-created-project\")\n+    @ResponseStatus(HttpStatus.OK)\n+    @ApiException(QUERY_USER_CREATED_PROJECT_ERROR)\n+    public Result queryProjectCreatedByUser(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser) {\n+        logger.info(\"login user {}, query authorized project by user id: {}.\", StringUtils.replaceNRTtoUnderline(loginUser.getUserName()), StringUtils.replaceNRTtoUnderline(String.valueOf(loginUser.getId())));\n+        Map<String, Object> result = projectService.queryProjectCreatedByUser(loginUser, loginUser.getId());", "originalCommit": "d49376b9f64a24b27f82915094aab6749ce0b066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxMjE3Mg==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444612172", "bodyText": "The purpose of this function design is to get the project created by the logged-in user, so I think there is no problem using userid\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\n\u8fd9\u4e2a\u51fd\u6570\u8bbe\u8ba1\u7684\u76ee\u7684\u5c31\u662f\u83b7\u53d6\u767b\u5f55\u7528\u6237\u6240\u521b\u5efa\u7684\u9879\u76ee\uff0c\u6240\u4ee5\u6211\u8ba4\u4e3a\u4f7f\u7528userid\u6ca1\u6709\u95ee\u9898", "author": "zixi0825", "createdAt": "2020-06-24T02:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNzgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY4MjE4Ng==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444682186", "bodyText": "queryProjectCreatedByUser \u65b9\u6cd5\u5176\u5b9e\u4f20loginUser \u503c\u5c31\u53ef\u4ee5\u4e86\u554a\u3002\u5728\u65b9\u6cd5\u91cc\u9762\u76f4\u63a5loginUser.getId() \u83b7\u53d6userid\u3002\u4e0d\u5f71\u54cd\u529f\u80fd\u554a\u3002", "author": "samz406", "createdAt": "2020-06-24T06:54:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNzgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcwMjgwMg==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r444702802", "bodyText": "You're right", "author": "zixi0825", "createdAt": "2020-06-24T07:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwNzgxNQ=="}], "type": "inlineReview"}, {"oid": "b7187b8eb43e81a3fb85c7a32cebce3ed1dc04ba", "url": "https://github.com/apache/dolphinscheduler/commit/b7187b8eb43e81a3fb85c7a32cebce3ed1dc04ba", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-24T06:11:57Z", "type": "commit"}, {"oid": "25ae29b12a522eaaf8dcc45c87a4c31be5df038d", "url": "https://github.com/apache/dolphinscheduler/commit/25ae29b12a522eaaf8dcc45c87a4c31be5df038d", "message": "batch copy or move process", "committedDate": "2020-06-24T11:32:00Z", "type": "commit"}, {"oid": "f70cd74f2e84088ae408314f775002bb5439ff2b", "url": "https://github.com/apache/dolphinscheduler/commit/f70cd74f2e84088ae408314f775002bb5439ff2b", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-06-24T11:32:11Z", "type": "commit"}, {"oid": "9ad759204f9c05e828848bd71733c1f8969e783c", "url": "https://github.com/apache/dolphinscheduler/commit/9ad759204f9c05e828848bd71733c1f8969e783c", "message": "Merge branch 'batch_copy_or_move_process' of https://github.com/zixi0825/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-06-24T11:32:56Z", "type": "commit"}, {"oid": "2d3f32c07b78c170a141a94c76f092ac8f6514b8", "url": "https://github.com/apache/dolphinscheduler/commit/2d3f32c07b78c170a141a94c76f092ac8f6514b8", "message": "batch copy or move process", "committedDate": "2020-06-24T11:56:48Z", "type": "commit"}, {"oid": "e286313fdcf80cbf76ccab964b6a430c0dc29227", "url": "https://github.com/apache/dolphinscheduler/commit/e286313fdcf80cbf76ccab964b6a430c0dc29227", "message": "batch copy or move process", "committedDate": "2020-06-24T11:59:40Z", "type": "commit"}, {"oid": "b495b3b5c843434760009d2ca22b7bf9cf85825e", "url": "https://github.com/apache/dolphinscheduler/commit/b495b3b5c843434760009d2ca22b7bf9cf85825e", "message": "batch copy or move process", "committedDate": "2020-06-24T11:59:57Z", "type": "commit"}, {"oid": "14a2c73b5c4f12e422638c6aba85a9d9fc1fea41", "url": "https://github.com/apache/dolphinscheduler/commit/14a2c73b5c4f12e422638c6aba85a9d9fc1fea41", "message": "batch copy or move process", "committedDate": "2020-06-28T02:15:45Z", "type": "commit"}, {"oid": "d268fd49f39bb2dc2692c838c66fbc4a4302e8c2", "url": "https://github.com/apache/dolphinscheduler/commit/d268fd49f39bb2dc2692c838c66fbc4a4302e8c2", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-06-28T02:16:04Z", "type": "commit"}, {"oid": "c8c3cb9cbf44d47930ba4ebdb8d38d0891521efd", "url": "https://github.com/apache/dolphinscheduler/commit/c8c3cb9cbf44d47930ba4ebdb8d38d0891521efd", "message": "batch copy or move process", "committedDate": "2020-06-28T02:38:48Z", "type": "commit"}, {"oid": "02c65291300db80c07b2dcfd6582653fa271c4f1", "url": "https://github.com/apache/dolphinscheduler/commit/02c65291300db80c07b2dcfd6582653fa271c4f1", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-06-28T02:38:54Z", "type": "commit"}, {"oid": "ac4f15fc8b736e5da4c16d61b7383485534ffa84", "url": "https://github.com/apache/dolphinscheduler/commit/ac4f15fc8b736e5da4c16d61b7383485534ffa84", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-28T02:53:06Z", "type": "commit"}, {"oid": "7cdc4324fd8ea2c8b216d4d405e01257500e865b", "url": "https://github.com/apache/dolphinscheduler/commit/7cdc4324fd8ea2c8b216d4d405e01257500e865b", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-29T03:08:22Z", "type": "commit"}, {"oid": "68695b8a1324d487e97290629d50c077dc180381", "url": "https://github.com/apache/dolphinscheduler/commit/68695b8a1324d487e97290629d50c077dc180381", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-06-30T11:47:07Z", "type": "commit"}, {"oid": "33e636c37a55bbab5aea3eb75e0ac50529511d04", "url": "https://github.com/apache/dolphinscheduler/commit/33e636c37a55bbab5aea3eb75e0ac50529511d04", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-07-02T12:10:24Z", "type": "commit"}, {"oid": "0c46ee8035862bb1f6c8b812d6dc69acf940d779", "url": "https://github.com/apache/dolphinscheduler/commit/0c46ee8035862bb1f6c8b812d6dc69acf940d779", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-07-08T08:09:27Z", "type": "commit"}, {"oid": "d747553114356a4f7758c4b009831510b215da63", "url": "https://github.com/apache/dolphinscheduler/commit/d747553114356a4f7758c4b009831510b215da63", "message": "Roll back the package.json file", "committedDate": "2020-07-10T02:41:05Z", "type": "commit"}, {"oid": "b257d1e0a39cffc63d92340f352ea78f55f4a007", "url": "https://github.com/apache/dolphinscheduler/commit/b257d1e0a39cffc63d92340f352ea78f55f4a007", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-07-10T02:41:21Z", "type": "commit"}, {"oid": "d9fee86950d3fd17f560f8647ee5f0cf667f3553", "url": "https://github.com/apache/dolphinscheduler/commit/d9fee86950d3fd17f560f8647ee5f0cf667f3553", "message": "Merge branch 'batch_copy_or_move_process' of https://github.com/zixi0825/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-07-10T02:42:19Z", "type": "commit"}, {"oid": "11a5f50dd5c0fc2c0c22baef33ab259c400df795", "url": "https://github.com/apache/dolphinscheduler/commit/11a5f50dd5c0fc2c0c22baef33ab259c400df795", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-07-10T04:52:14Z", "type": "commit"}, {"oid": "b38b0125bb668dadfc004bc491dc6223c6de9123", "url": "https://github.com/apache/dolphinscheduler/commit/b38b0125bb668dadfc004bc491dc6223c6de9123", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-07-11T06:08:00Z", "type": "commit"}, {"oid": "ef5478525cd349970fc988e3688a24ce04f17c81", "url": "https://github.com/apache/dolphinscheduler/commit/ef5478525cd349970fc988e3688a24ce04f17c81", "message": "fix conflicts in MonitorService", "committedDate": "2020-07-18T02:02:57Z", "type": "commit"}, {"oid": "a4428dd322a16e1da6410dd2338e800b01cd5b1a", "url": "https://github.com/apache/dolphinscheduler/commit/a4428dd322a16e1da6410dd2338e800b01cd5b1a", "message": "Merge branch 'batch_copy_or_move_process' of https://github.com/zixi0825/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-07-18T02:04:05Z", "type": "commit"}, {"oid": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "url": "https://github.com/apache/dolphinscheduler/commit/76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "message": "rerun test", "committedDate": "2020-07-19T05:59:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzOTQwNA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461539404", "bodyText": "Hi,\nPlease revert this blank.", "author": "yangyichao-mango", "createdAt": "2020-07-28T12:26:56Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * base service\n  */\n-public class BaseService {\n+public class BaseService{", "originalCommit": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzOTQxMA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461539410", "bodyText": "Hi,\nPlease revert this blank.", "author": "yangyichao-mango", "createdAt": "2020-07-28T12:26:57Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/BaseService.java", "diffHunk": "@@ -32,7 +32,7 @@\n /**\n  * base service\n  */\n-public class BaseService {\n+public class BaseService{", "originalCommit": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0MDQxMQ==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461540411", "bodyText": "Please revert this changes", "author": "yangyichao-mango", "createdAt": "2020-07-28T12:28:42Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/ProcessDefinitionService.java", "diffHunk": "@@ -1256,7 +1427,7 @@ public void importSubProcess(User loginUser, Project targetProject, ArrayNode js\n      * @return tree view json data\n      * @throws Exception exception\n      */\n-    public Map<String, Object> viewTree(Integer processId, Integer limit) throws Exception {\n+    public Map<String, Object> viewTree(Integer processId, Integer limit) throws Exception{", "originalCommit": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYwNTA3Mw==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461605073", "bodyText": "Hi,\nWill it be better to split copy and move to two api for single responsibility?", "author": "yangyichao-mango", "createdAt": "2020-07-28T14:03:26Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -95,27 +95,39 @@ public Result createProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     }\n \n     /**\n-     * copy process definition\n+     * copy or move process definition\n      *\n      * @param loginUser   login user\n      * @param projectName project name\n-     * @param processId   process definition id\n+     * @param isCopy  isCopy\n+     * @param processDefinitionIds   process definition ids\n+     * @param targetProjectId target project id\n      * @return copy result code\n      */\n-    @ApiOperation(value = \"copyProcessDefinition\", notes= \"COPY_PROCESS_DEFINITION_NOTES\")\n+    @ApiOperation(value = \"copyOrMoveProcessDefinition\", notes= \"COPY_OR_MOVE_PROCESS_DEFINITION_NOTES\")\n     @ApiImplicitParams({\n-            @ApiImplicitParam(name = \"processId\", value = \"PROCESS_DEFINITION_ID\", required = true, dataType = \"Int\", example = \"100\")\n+            @ApiImplicitParam(name = \"processDefinitionIds\", value = \"PROCESS_DEFINITION_IDS\", required = true, dataType = \"String\", example = \"3,4\"),\n+            @ApiImplicitParam(name = \"targetProjectId\", value = \"TARGET_PROJECT_ID\", required = true, type = \"Integer\"),\n+            @ApiImplicitParam(name = \"isCopy\", value = \"IS_COPY\", required = true, type = \"boolean\")\n     })\n-    @PostMapping(value = \"/copy\")\n+    @PostMapping(value = \"/copy-or-move\")", "originalCommit": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYwNTQyNA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461605424", "bodyText": "Please revert this changes.", "author": "yangyichao-mango", "createdAt": "2020-07-28T14:03:55Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -205,9 +217,9 @@ public Result updateProcessDefinition(@ApiIgnore @RequestAttribute(value = Const\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(RELEASE_PROCESS_DEFINITION_ERROR)\n     public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                            @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                            @RequestParam(value = \"processId\", required = true) int processId,\n-                                            @RequestParam(value = \"releaseState\", required = true) int releaseState) {\n+                                           @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                           @RequestParam(value = \"processId\", required = true) int processId,\n+                                           @RequestParam(value = \"releaseState\", required = true) int releaseState) {", "originalCommit": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYwNzU1MA==", "url": "https://github.com/apache/dolphinscheduler/pull/2884#discussion_r461607550", "bodyText": "Please revert the changes about blank, thx a lot, it is suggested to add the blank according to the checkstyle.xml, you can configure the checkstyle.xml[1] to your ide.\n[1] https://github.com/apache/incubator-dolphinscheduler/blob/dev/style/checkstyle.xml", "author": "yangyichao-mango", "createdAt": "2020-07-28T14:06:50Z", "path": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/controller/ProcessDefinitionController.java", "diffHunk": "@@ -231,8 +243,8 @@ public Result releaseProcessDefinition(@ApiIgnore @RequestAttribute(value = Cons\n     @ResponseStatus(HttpStatus.OK)\n     @ApiException(QUERY_DATAIL_OF_PROCESS_DEFINITION_ERROR)\n     public Result queryProcessDefinitionById(@ApiIgnore @RequestAttribute(value = Constants.SESSION_USER) User loginUser,\n-                                              @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n-                                              @RequestParam(\"processId\") Integer processId\n+                                             @ApiParam(name = \"projectName\", value = \"PROJECT_NAME\", required = true) @PathVariable String projectName,\n+                                             @RequestParam(\"processId\") Integer processId", "originalCommit": "76cf566b1abc022330ee2ec6b51ccf3b36edd1ea", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "123e272f980bfceccb49cf12b8e6f37b48bc107a", "url": "https://github.com/apache/dolphinscheduler/commit/123e272f980bfceccb49cf12b8e6f37b48bc107a", "message": "revert blank", "committedDate": "2020-07-29T02:23:11Z", "type": "commit"}, {"oid": "a86b4e18dbc3b0ed7fb14ec42b7b22bec01bba99", "url": "https://github.com/apache/dolphinscheduler/commit/a86b4e18dbc3b0ed7fb14ec42b7b22bec01bba99", "message": "Merge branch 'dev' of https://github.com/apache/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-07-29T02:23:25Z", "type": "commit"}, {"oid": "23897a4ab5cbfad28424aa40da7e4e60551dbcce", "url": "https://github.com/apache/dolphinscheduler/commit/23897a4ab5cbfad28424aa40da7e4e60551dbcce", "message": "Merge branch 'batch_copy_or_move_process' of https://github.com/zixi0825/incubator-dolphinscheduler into batch_copy_or_move_process", "committedDate": "2020-07-29T02:25:11Z", "type": "commit"}, {"oid": "2153681fc9926e895e19ecd4e92d2d533e2cb62c", "url": "https://github.com/apache/dolphinscheduler/commit/2153681fc9926e895e19ecd4e92d2d533e2cb62c", "message": "Merge branch 'dev' into batch_copy_or_move_process", "committedDate": "2020-08-01T06:55:42Z", "type": "commit"}, {"oid": "47edf929b3571e7cb7a8e9d8bdbb786f12a77dea", "url": "https://github.com/apache/dolphinscheduler/commit/47edf929b3571e7cb7a8e9d8bdbb786f12a77dea", "message": "resolve conflicts", "committedDate": "2020-08-11T07:01:08Z", "type": "commit"}, {"oid": "240b71243edb62a42bab793d73e4f42b7b657f3f", "url": "https://github.com/apache/dolphinscheduler/commit/240b71243edb62a42bab793d73e4f42b7b657f3f", "message": "resolve conflicts", "committedDate": "2020-08-11T07:19:05Z", "type": "commit"}, {"oid": "a8b7c952d26982138a3ae51d1715c43daa9f40a1", "url": "https://github.com/apache/dolphinscheduler/commit/a8b7c952d26982138a3ae51d1715c43daa9f40a1", "message": "resolve conflicts", "committedDate": "2020-08-11T07:22:42Z", "type": "commit"}, {"oid": "002b2e613b9f8ba34e67246f720b84cab62f996e", "url": "https://github.com/apache/dolphinscheduler/commit/002b2e613b9f8ba34e67246f720b84cab62f996e", "message": "resolve ut error", "committedDate": "2020-08-11T07:37:17Z", "type": "commit"}, {"oid": "ee4f85ef6923df621912ef06178c18b12a39c6b7", "url": "https://github.com/apache/dolphinscheduler/commit/ee4f85ef6923df621912ef06178c18b12a39c6b7", "message": "resolve sonar error", "committedDate": "2020-08-11T08:04:51Z", "type": "commit"}]}