{"pr_number": 1288, "pr_title": "On chain group management api changes", "pr_createdAt": "2020-08-10T06:40:19Z", "pr_url": "https://github.com/hyperledger/besu/pull/1288", "timeline": [{"oid": "0a661701985ffc3fb712b0161e2a3ef09a2dcf40", "url": "https://github.com/hyperledger/besu/commit/0a661701985ffc3fb712b0161e2a3ef09a2dcf40", "message": "before removing enclave keys from APIs\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-07-10T05:19:30Z", "type": "commit"}, {"oid": "c30832c3f14d055c59f1612d7ade58b81fa5733c", "url": "https://github.com/hyperledger/besu/commit/c30832c3f14d055c59f1612d7ade58b81fa5733c", "message": "before removing enclave keys from APIs\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-07-10T05:19:59Z", "type": "commit"}, {"oid": "ed74e18cb05eb4e9feaff1ee160fddcf02f61e57", "url": "https://github.com/hyperledger/besu/commit/ed74e18cb05eb4e9feaff1ee160fddcf02f61e57", "message": "Merge branch 'master' of github.com:hyperledger/besu into HEAD", "committedDate": "2020-07-16T10:27:35Z", "type": "commit"}, {"oid": "63e8b323235b4e578e08464b11b415389f2907c4", "url": "https://github.com/hyperledger/besu/commit/63e8b323235b4e578e08464b11b415389f2907c4", "message": "Merge branch 'master' of github.com:hyperledger/besu into HEAD", "committedDate": "2020-08-10T01:21:47Z", "type": "commit"}, {"oid": "4afaa60d59939a7280594526386a65d30a2487c5", "url": "https://github.com/hyperledger/besu/commit/4afaa60d59939a7280594526386a65d30a2487c5", "message": "On-chain group management changes: additional API to check whether someone is allowed to update the contract, and remove enclave key as a parameter to contract APIs\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-10T06:04:51Z", "type": "commit"}, {"oid": "ed8b4e84d13835371fbbaae28ca16ed4a12b6063", "url": "https://github.com/hyperledger/besu/commit/ed8b4e84d13835371fbbaae28ca16ed4a12b6063", "message": "On-chain group management changes: additional API to check whether someone is allowed to update the contract, and remove enclave key as a parameter to contract APIs\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-10T07:08:30Z", "type": "commit"}, {"oid": "1a8e87481b6da3b61573ddb86d1c5d440ac040a2", "url": "https://github.com/hyperledger/besu/commit/1a8e87481b6da3b61573ddb86d1c5d440ac040a2", "message": "fix AT\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-10T22:20:49Z", "type": "commit"}, {"oid": "b6ba836384050b2e0bede64f7f61e0a916686aff", "url": "https://github.com/hyperledger/besu/commit/b6ba836384050b2e0bede64f7f61e0a916686aff", "message": "Merge branch 'master' into on-chain_group_management_api", "committedDate": "2020-08-10T22:53:08Z", "type": "commit"}, {"oid": "9581efefb54b47a9c7ee62899545cbdeab19f25a", "url": "https://github.com/hyperledger/besu/commit/9581efefb54b47a9c7ee62899545cbdeab19f25a", "message": "Merge branch 'master' into on-chain_group_management_api", "committedDate": "2020-08-11T01:10:53Z", "type": "commit"}, {"oid": "479149f83058168f67c265124fbcef87462908bd", "url": "https://github.com/hyperledger/besu/commit/479149f83058168f67c265124fbcef87462908bd", "message": "Merge branch 'master' into on-chain_group_management_api", "committedDate": "2020-08-11T07:12:42Z", "type": "commit"}, {"oid": "cbd8aee2ff65c42127954a1df3886cc918003ec3", "url": "https://github.com/hyperledger/besu/commit/cbd8aee2ff65c42127954a1df3886cc918003ec3", "message": "add some tests\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-12T07:50:01Z", "type": "commit"}, {"oid": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "url": "https://github.com/hyperledger/besu/commit/4c3cd4fccafed1a4d34f8136bf04dea972730567", "message": "Merge branch 'master' into on-chain_group_management_api", "committedDate": "2020-08-12T22:51:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNTgwNA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469605804", "bodyText": "Maye we could have a overloaded version of this method instead of changing every call. For most tests, having the node key signing the transaction is enough, isn't it?", "author": "lucassaldanha", "createdAt": "2020-08-12T23:38:49Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/transaction/privacy/PrivacyRequestFactory.java", "diffHunk": "@@ -127,18 +128,20 @@ public String getTransactionKey() {\n   }\n \n   public String privxAddToPrivacyGroup(", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNjM3Mw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469606373", "bodyText": "The same applies to the other methods in this class.", "author": "lucassaldanha", "createdAt": "2020-08-12T23:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNTgwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0OTIzOA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469649238", "bodyText": "I thought that it would be nice to make it obvious who is signing the transaction ...", "author": "pinges", "createdAt": "2020-08-13T01:46:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwNTgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwODEzNQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469608135", "bodyText": "Did you forget to delete this?", "author": "lucassaldanha", "createdAt": "2020-08-12T23:46:40Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,33 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    bob.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, bob));\n+    //    boolean b = true;\n+    //    while (b) {\n+    //      int i = 0;\n+    //      if (i == 1) b = false;\n+    //    }", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMTMxMw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469631313", "bodyText": "Yep! Deleted!\nThat is what you have to do to do some debugging :-)", "author": "pinges", "createdAt": "2020-08-13T00:53:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwODEzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTA0NA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469609044", "bodyText": "Either we remove this Sys.out or we replace it with a log msg.", "author": "lucassaldanha", "createdAt": "2020-08-12T23:49:42Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -457,6 +488,15 @@ public void addMembersToTwoGroupsInTheSameBlock() throws InterruptedException {\n    * @return the id of the privacy group\n    */\n   private String createOnChainPrivacyGroup(final PrivacyNode... members) {\n+\n+    System.out.println(\"Public keys start:\");", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMTYyMg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469631622", "bodyText": "Removed!", "author": "pinges", "createdAt": "2020-08-13T00:54:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTkwNQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469609905", "bodyText": "I'd rather have two separate test cases:\n\nOwner successfully upgrades contract\nNon-owner can't upgrade contract", "author": "lucassaldanha", "createdAt": "2020-08-12T23:52:07Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/contracts/PrivacyProxyTest.java", "diffHunk": "@@ -67,47 +76,39 @@ public void rlp() throws Exception {\n     contractVerifier\n         .validTransactionReceipt(onChainPrivacyGroupManagementProxy.getContractAddress())\n         .verify(onChainPrivacyGroupManagementProxy);\n-    // 0x0b0235be\n-    assertThat(RAW_FIRST_PARTICIPANT)\n-        .isEqualTo(\n-            onChainPrivacyGroupManagementProxy\n-                .getParticipants(firstParticipant.raw())\n-                .encodeFunctionCall());\n-    // 0xf744b089\n+    assertThat(RAW_GET_PARTICIPANTS)\n+        .isEqualTo(onChainPrivacyGroupManagementProxy.getParticipants().encodeFunctionCall());\n     assertThat(RAW_ADD_PARTICIPANT)\n         .isEqualTo(\n             onChainPrivacyGroupManagementProxy\n-                .addParticipants(firstParticipant.raw(), Collections.emptyList())\n+                .addParticipants(Collections.emptyList())\n                 .encodeFunctionCall());\n   }\n \n   @Ignore(\"return 0x which causes web3j to throw exception instead of return empty list\")\n   @Test\n   public void deploysWithNoParticipant() throws Exception {\n-    final List<byte[]> participants =\n-        onChainPrivacyGroupManagementProxy.getParticipants(firstParticipant.raw()).send();\n+    final List<byte[]> participants = onChainPrivacyGroupManagementProxy.getParticipants().send();\n     assertThat(participants.size()).isEqualTo(0);\n   }\n \n   @Test\n   public void canAddParticipants() throws Exception {\n     onChainPrivacyGroupManagementProxy\n-        .addParticipants(firstParticipant.raw(), Collections.singletonList(secondParticipant.raw()))\n+        .addParticipants(Arrays.asList(firstParticipant.raw(), secondParticipant.raw()))\n         .send();\n-    final List<byte[]> participants =\n-        onChainPrivacyGroupManagementProxy.getParticipants(firstParticipant.raw()).send();\n+    final List<byte[]> participants = onChainPrivacyGroupManagementProxy.getParticipants().send();\n     assertThat(participants.size()).isEqualTo(2);\n     assertThat(firstParticipant.raw()).isEqualTo(participants.get(0));\n     assertThat(secondParticipant.raw()).isEqualTo(participants.get(1));\n   }\n \n   @Test\n-  public void canUpgrade() throws Exception {\n+  public void onlyOwnerCanUpgrade() throws Exception {", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNjYzOA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469636638", "bodyText": "Done!", "author": "pinges", "createdAt": "2020-08-13T01:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwOTkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDY3OA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469610678", "bodyText": "I feel like this would be easier to read if we join the two if's together:\nif (maybePrivacyGroup.isEmpty() && !privacyController.isGroupAdditionTransaction(privateTransaction))", "author": "lucassaldanha", "createdAt": "2020-08-12T23:54:55Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -95,8 +95,11 @@ public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n         maybePrivacyGroup =\n             privacyController.retrieveOnChainPrivacyGroup(\n                 maybePrivacyGroupId.get(), enclavePublicKey);\n-        if (maybePrivacyGroup.isEmpty()\n-            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+        if (maybePrivacyGroup.isEmpty()) {\n+          if (!privacyController.isGroupAdditionTransaction(privateTransaction)) {", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNzE0MQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469637141", "bodyText": "but then I can't do the else in line 102 ...\nCould be done, but I would prefer not to do that :-)", "author": "pinges", "createdAt": "2020-08-13T01:10:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMDY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTQ1Mg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469611452", "bodyText": "This shouldn't be logged as an error. The system is behaving exactly as expected.\nIt should be a DEBUG or TRACE to help investigations or bug fixing.", "author": "lucassaldanha", "createdAt": "2020-08-12T23:57:25Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.error(", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNzM5Mw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469637393", "bodyText": "You are right, I'll change it to debug!", "author": "pinges", "createdAt": "2020-08-13T01:10:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTQ1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTkwNA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469611904", "bodyText": "Can't we add this to the class that encapsulates the interaction with the contract? OnchainPrivacyGroupContract", "author": "lucassaldanha", "createdAt": "2020-08-12T23:59:02Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.error(\n+          \"PrivateTransaction with hash {} cannot execute in privacy group {} because private from {} is not a member.\",\n+          messageFrame.getTransactionHash(),\n+          privacyGroupId.toBase64String(),\n+          privateFrom.toBase64String());\n       return false;\n     }\n+\n     return true;\n   }\n \n+  private boolean isMemberOfPrivacyGroup(\n+      final boolean isAddingParticipant,\n+      final PrivateTransaction privateTransaction,\n+      final Bytes privateFrom,\n+      final Bytes32 privacyGroupId,\n+      final MessageFrame messageFrame,\n+      final ProcessableBlockHeader currentBlockHeader,\n+      final WorldUpdater publicWorldState,\n+      final Blockchain blockchain,\n+      final MutableWorldState disposablePrivateState,\n+      final WorldUpdater privateWorldStateUpdater) {\n+    final PrivateTransactionProcessor.Result result =\n+        simulateTransaction(\n+            messageFrame,\n+            currentBlockHeader,\n+            publicWorldState,\n+            privacyGroupId,\n+            blockchain,\n+            disposablePrivateState,\n+            privateWorldStateUpdater,\n+            OnChainGroupManagement.GET_PARTICIPANTS_METHOD_SIGNATURE);\n+    final List<Bytes> list = getMembersFromResult(result);", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzNzk0MQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469637941", "bodyText": "I think you are right, we should have one (or maybe two) classes that encapsulate the interaction with the management contracts. BUT I would prefer to do that as a separate PR ...", "author": "pinges", "createdAt": "2020-08-13T01:12:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTkwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY3MDUxMA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469670510", "bodyText": "This will be done in a seperate PR. See https://app.zenhub.com/workspaces/team-revenant-5e6accf93892a67e1d7a7f34/issues/hyperledger/besu/1303", "author": "pinges", "createdAt": "2020-08-13T03:09:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjEzOQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469612139", "bodyText": "Are these TODOs things that we need to discuss before merging this PR?", "author": "lucassaldanha", "createdAt": "2020-08-12T23:59:40Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "diffHunk": "@@ -134,14 +136,29 @@ public Bytes compute(final Bytes input, final MessageFrame messageFrame) {\n     final PrivateTransaction privateTransaction =\n         PrivateTransaction.readFrom(bytesValueRLPInput.readAsRlp());\n \n-    if (!privateFromMatchesSenderKey(\n-        privateTransaction.getPrivateFrom(), receiveResponse.getSenderKey())) {\n+    final Bytes privateFrom = privateTransaction.getPrivateFrom();\n+    if (!privateFromMatchesSenderKey(privateFrom, receiveResponse.getSenderKey())) {\n       return Bytes.EMPTY;\n     }\n \n     final Bytes32 privacyGroupId =\n         Bytes32.wrap(Bytes.fromBase64String(receiveResponse.getPrivacyGroupId()));\n \n+    try {\n+      // TODO: Do we need to check anything for legacy private transactions\n+      if (privateTransaction.getPrivateFor().isEmpty()\n+          && !enclave\n+              .retrievePrivacyGroup(privacyGroupId.toBase64String())\n+              .getMembers()\n+              .contains(privateFrom.toBase64String())) {\n+        return Bytes.EMPTY;\n+      }\n+    } catch (final EnclaveClientException e) {\n+      // TODO: do I have to catch anything else here? This exception is thrown when the privacy\n+      // group can not be found\n+      return Bytes.EMPTY;\n+    }", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzODAzNA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469638034", "bodyText": "Yes!", "author": "pinges", "createdAt": "2020-08-13T01:13:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjY5NA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469612694", "bodyText": "NIT: we can return the value directly instead of assigning it to maybePrivacyGroup.", "author": "lucassaldanha", "createdAt": "2020-08-13T00:01:27Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -234,11 +234,7 @@ public boolean isGroupAdditionTransaction(final PrivateTransaction privateTransa\n       final Bytes privacyGroupId, final String enclavePublicKey) {\n     final Optional<PrivacyGroup> maybePrivacyGroup =\n         privacyController.retrieveOnChainPrivacyGroup(privacyGroupId, enclavePublicKey);", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0ODA3Mg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469648072", "bodyText": "This is returning Optional because the off-chain equivalent does it ...", "author": "pinges", "createdAt": "2020-08-13T01:42:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjY5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0NTE3Mg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471245172", "bodyText": "Done", "author": "pinges", "createdAt": "2020-08-17T05:51:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMjY5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMzYwMw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469613603", "bodyText": "Just to confirm. We are setting the owner when we inject the contract into the newly created private state, correct?", "author": "lucassaldanha", "createdAt": "2020-08-13T00:04:01Z", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -3,6 +3,7 @@ import \"./OnChainPrivacyGroupManagementInterface.sol\";\n \n contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupManagementInterface {\n \n+    address private _owner;", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0ODUzMg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469648532", "bodyText": "The owner is set when the addParticipants is called the first time:\nfunction addParticipants(bytes32[] memory _accounts) public returns (bool) {\nrequire(!_canExecute);\nif (_owner == address(0x0)) {\n_owner = tx.origin;\n}\n...", "author": "pinges", "createdAt": "2020-08-13T01:44:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMzYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNDYwOA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469614608", "bodyText": "The owner check can be simplified using a function modifier. Check this example:\nhttps://solidity.readthedocs.io/en/v0.6.2/contracts.html#function-modifiers", "author": "lucassaldanha", "createdAt": "2020-08-13T00:07:29Z", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MDA3Nw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469650077", "bodyText": "Let's talk about that ...", "author": "pinges", "createdAt": "2020-08-13T01:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNDYwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNDc0Mg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469614742", "bodyText": "I don't understand why we are doing this.", "author": "lucassaldanha", "createdAt": "2020-08-13T00:07:54Z", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {\n         require(!_canExecute);\n-        if(distributionList.length == 0) {\n-            addParticipant(_enclaveKey);\n+        if (_owner == address(0x0)) {\n+            _owner = tx.origin;\n         }", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0OTkzMg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469649932", "bodyText": "Setting the owner when the method is called the first time (just after injecting it)", "author": "pinges", "createdAt": "2020-08-13T01:49:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNDc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTIxNQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469615215", "bodyText": "I know that this was already here, but I don't like the fact we are calling the enclaveKey accounts.\nGiven we are changing the contract, can we fix this (for all methods)?", "author": "lucassaldanha", "createdAt": "2020-08-13T00:09:31Z", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MDYxNg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469650616", "bodyText": "Good plan! Would you just call it enclave keys?", "author": "pinges", "createdAt": "2020-08-13T01:52:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTIxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI0NDYwMw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471244603", "bodyText": "Done", "author": "pinges", "createdAt": "2020-08-17T05:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTg5Mw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469615893", "bodyText": "This seems a bit weird. Aren't we supposed to return true or false?\nI feel like we could have: return tx.origin == _owner.\nAm I missing something?", "author": "lucassaldanha", "createdAt": "2020-08-13T00:11:50Z", "path": "privacy-contracts/src/main/solidity/DefaultOnChainPrivacyGroupManagementContract.sol", "diffHunk": "@@ -12,54 +13,58 @@ contract DefaultOnChainPrivacyGroupManagementContract is OnChainPrivacyGroupMana\n         return _version;\n     }\n \n-    // overrides\n     function canExecute() external view returns (bool) {\n         return _canExecute;\n     }\n \n     function lock() public {\n         require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = false;\n     }\n \n     function unlock() public {\n         require(!_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         _canExecute = true;\n     }\n \n-    function addParticipants(bytes32 _enclaveKey, bytes32[] memory _accounts) public returns (bool) {\n+    function addParticipants(bytes32[] memory _accounts) public returns (bool) {\n         require(!_canExecute);\n-        if(distributionList.length == 0) {\n-            addParticipant(_enclaveKey);\n+        if (_owner == address(0x0)) {\n+            _owner = tx.origin;\n         }\n-        require(isMember(_enclaveKey));\n-        bool result = addAll(_enclaveKey, _accounts);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n+        bool result = addAll(_accounts);\n         _canExecute = true;\n         updateVersion();\n         return result;\n     }\n \n-    function removeParticipant(bytes32 _enclaveKey, bytes32 _account) public returns (bool) {\n-        require(isMember(_enclaveKey));\n+    function removeParticipant(bytes32 _account) public returns (bool) {\n+        require(_canExecute);\n+        require(tx.origin == _owner, \"Origin not the owner.\");\n         bool result = removeInternal(_account);\n         updateVersion();\n+        emit ParticipantRemoved(result, _account);\n         return result;\n     }\n \n-    function getParticipants(bytes32 _enclaveKey) public view returns (bytes32[] memory) {\n-        require(isMember(_enclaveKey));\n+    function getParticipants() public view returns (bytes32[] memory) {\n         return distributionList;\n     }\n \n+    function canUpgrade() external returns (bool) {\n+        require(tx.origin == _owner, \"Origin not the owner.\");", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzMDU1OA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469630558", "bodyText": "is there an implicit return true in solidity?", "author": "macfarla", "createdAt": "2020-08-13T00:50:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTg5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MTI4NQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469651285", "bodyText": "Good catch!", "author": "pinges", "createdAt": "2020-08-13T01:54:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNTg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNzIxOA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469617218", "bodyText": "Which version is the required one? We shouldn't have two :P", "author": "lucassaldanha", "createdAt": "2020-08-13T00:16:39Z", "path": "privacy-contracts/src/main/solidity/OnChainPrivacyGroupManagementProxy.sol", "diffHunk": "@@ -1,5 +1,6 @@\n pragma solidity ^0.5.12;\n \n+pragma solidity ^0.5.9;", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MjQ2Nw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469652467", "bodyText": "My local version does only have the 0.5.9 .... Weird!", "author": "pinges", "createdAt": "2020-08-13T01:59:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxNzIxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNDg5Mw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469624893", "bodyText": "commented out code", "author": "macfarla", "createdAt": "2020-08-13T00:30:38Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,33 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());\n \n     checkOnChainPrivacyGroupExists(privacyGroupId, alice, bob);\n \n-    bob.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, bob));\n+    //    boolean b = true;\n+    //    while (b) {\n+    //      int i = 0;\n+    //      if (i == 1) b = false;\n+    //    }", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MjU2NA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469652564", "bodyText": "Done", "author": "pinges", "createdAt": "2020-08-13T01:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNDg5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNTAyMQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469625021", "bodyText": "debug code", "author": "macfarla", "createdAt": "2020-08-13T00:31:08Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -457,6 +488,15 @@ public void addMembersToTwoGroupsInTheSameBlock() throws InterruptedException {\n    * @return the id of the privacy group\n    */\n   private String createOnChainPrivacyGroup(final PrivacyNode... members) {\n+\n+    System.out.println(\"Public keys start:\");\n+    Arrays.stream(members)\n+        .map(m -> m.getOrion().getPublicKeys())\n+        .forEach(\n+            k -> {\n+              System.out.println(k);\n+            });\n+    System.out.println(\"Public keys end!\");", "originalCommit": "4c3cd4fccafed1a4d34f8136bf04dea972730567", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY1MjYwNw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r469652607", "bodyText": "Done", "author": "pinges", "createdAt": "2020-08-13T01:59:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyNTAyMQ=="}], "type": "inlineReview"}, {"oid": "0a90e0a8b4a638747446a20c104e28fcfc4f5c54", "url": "https://github.com/hyperledger/besu/commit/0a90e0a8b4a638747446a20c104e28fcfc4f5c54", "message": "changes after review\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-17T23:09:23Z", "type": "commit"}, {"oid": "08a3f3039536259bc77c483183b45ab176688ec0", "url": "https://github.com/hyperledger/besu/commit/08a3f3039536259bc77c483183b45ab176688ec0", "message": "Merge branch 'on-chain_group_management_api' of github.com:pinges/besu into on-chain_group_management_api", "committedDate": "2020-08-17T23:09:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MTQ2Mg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471841462", "bodyText": "s/On-Chain/Onchain", "author": "macfarla", "createdAt": "2020-08-18T00:12:31Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,15 @@\n # Changelog\n \n+## 1.5.3\n+\n+### Breaking Changes\n+\n+When upgrading to 1.5.3, ensure you've taken into account the following breaking changes.\n+\n+#### On-Chain Privacy Group Management", "originalCommit": "08a3f3039536259bc77c483183b45ab176688ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODY1OQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471858659", "bodyText": "Done", "author": "pinges", "createdAt": "2020-08-18T01:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MTQ2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MTU2NA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471841564", "bodyText": "s/on-chain/onchain", "author": "macfarla", "createdAt": "2020-08-18T00:12:53Z", "path": "CHANGELOG.md", "diffHunk": "@@ -1,5 +1,15 @@\n # Changelog\n \n+## 1.5.3\n+\n+### Breaking Changes\n+\n+When upgrading to 1.5.3, ensure you've taken into account the following breaking changes.\n+\n+#### On-Chain Privacy Group Management\n+\n+This early access feature was changed in a way that makes on-chain privacy groups created with previous versions no longer usable. ", "originalCommit": "08a3f3039536259bc77c483183b45ab176688ec0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MjQzMQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471842431", "bodyText": "should this say \"privateFrom\" rather than \"private from\"?", "author": "macfarla", "createdAt": "2020-08-18T00:15:59Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/OnChainPrivacyPrecompiledContract.java", "diffHunk": "@@ -226,11 +242,97 @@ boolean canExecute(\n         blockchain,\n         disposablePrivateState,\n         privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"Privacy group version mismatch while trying to execute transaction with commitment {}\",\n+          messageFrame.getTransactionHash());\n+      return false;\n+    }\n+\n+    if (!isMemberOfPrivacyGroup(\n+        isAddingParticipant,\n+        privateTransaction,\n+        privateFrom,\n+        privacyGroupId,\n+        messageFrame,\n+        currentBlockHeader,\n+        publicWorldState,\n+        blockchain,\n+        disposablePrivateState,\n+        privateWorldStateUpdater)) {\n+      LOG.debug(\n+          \"PrivateTransaction with hash {} cannot execute in privacy group {} because private from {} is not a member.\",", "originalCommit": "08a3f3039536259bc77c483183b45ab176688ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODY0Mw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471858643", "bodyText": "Done", "author": "pinges", "createdAt": "2020-08-18T01:16:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MjQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0Mjc5NA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471842794", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOG.error(\"Can not communicate with enclave is it up?\", e);\n          \n          \n            \n                  LOG.error(\"Can not communicate with enclave, is it up?\", e);", "author": "macfarla", "createdAt": "2020-08-18T00:17:21Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/precompiles/privacy/PrivacyPrecompiledContract.java", "diffHunk": "@@ -134,14 +136,32 @@ public Bytes compute(final Bytes input, final MessageFrame messageFrame) {\n     final PrivateTransaction privateTransaction =\n         PrivateTransaction.readFrom(bytesValueRLPInput.readAsRlp());\n \n-    if (!privateFromMatchesSenderKey(\n-        privateTransaction.getPrivateFrom(), receiveResponse.getSenderKey())) {\n+    final Bytes privateFrom = privateTransaction.getPrivateFrom();\n+    if (!privateFromMatchesSenderKey(privateFrom, receiveResponse.getSenderKey())) {\n       return Bytes.EMPTY;\n     }\n \n     final Bytes32 privacyGroupId =\n         Bytes32.wrap(Bytes.fromBase64String(receiveResponse.getPrivacyGroupId()));\n \n+    try {\n+      if (!enclave\n+          .retrievePrivacyGroup(privacyGroupId.toBase64String())\n+          .getMembers()\n+          .contains(privateFrom.toBase64String())) {\n+        return Bytes.EMPTY;\n+      }\n+    } catch (final EnclaveClientException e) {\n+      // This exception is thrown when the privacy group can not be found\n+      return Bytes.EMPTY;\n+    } catch (final EnclaveServerException e) {\n+      LOG.error(\"Enclave is responding with an error, perhaps it has a misconfiguration?\", e);\n+      throw e;\n+    } catch (final EnclaveIOException e) {\n+      LOG.error(\"Can not communicate with enclave is it up?\", e);", "originalCommit": "08a3f3039536259bc77c483183b45ab176688ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1ODYwNQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471858605", "bodyText": "Done", "author": "pinges", "createdAt": "2020-08-18T01:16:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0Mjc5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MzQyNw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471843427", "bodyText": "do we need the SPDX header even for generated files?", "author": "macfarla", "createdAt": "2020-08-18T00:19:44Z", "path": "privacy-contracts/src/main/java/org/hyperledger/besu/privacy/contracts/generated/OnChainPrivacyGroupManagementInterface.java", "diffHunk": "@@ -1,17 +1,3 @@\n-/*\n- * Copyright ConsenSys AG.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n- * the License. You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n- * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n- * specific language governing permissions and limitations under the License.\n- *\n- * SPDX-License-Identifier: Apache-2.0\n- */", "originalCommit": "08a3f3039536259bc77c483183b45ab176688ec0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg1MzgxNQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r471853815", "bodyText": "Yes, unfotunately ... :-)", "author": "pinges", "createdAt": "2020-08-18T00:59:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTg0MzQyNw=="}], "type": "inlineReview"}, {"oid": "fecc8447069843c18c8a28aa93aa5a434e71016c", "url": "https://github.com/hyperledger/besu/commit/fecc8447069843c18c8a28aa93aa5a434e71016c", "message": "fix spdx\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-18T00:52:11Z", "type": "commit"}, {"oid": "93b491f6cf18d8e90340a45ffb276dd19670719d", "url": "https://github.com/hyperledger/besu/commit/93b491f6cf18d8e90340a45ffb276dd19670719d", "message": "fixed spelling\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-18T01:17:34Z", "type": "commit"}, {"oid": "93b491f6cf18d8e90340a45ffb276dd19670719d", "url": "https://github.com/hyperledger/besu/commit/93b491f6cf18d8e90340a45ffb276dd19670719d", "message": "fixed spelling\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-18T01:17:34Z", "type": "forcePushed"}, {"oid": "3cdf3115addaa895aeb44ada1b65fe359ddc227d", "url": "https://github.com/hyperledger/besu/commit/3cdf3115addaa895aeb44ada1b65fe359ddc227d", "message": "merge master and fix conflict\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-18T01:20:06Z", "type": "commit"}, {"oid": "f8466512b174e64df5152d9c3ef82373b4b4c241", "url": "https://github.com/hyperledger/besu/commit/f8466512b174e64df5152d9c3ef82373b4b4c241", "message": "fix web3 legacy tests\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-18T11:58:56Z", "type": "commit"}, {"oid": "b61a8b235ff5ede541b31df474bdeca9887f25ee", "url": "https://github.com/hyperledger/besu/commit/b61a8b235ff5ede541b31df474bdeca9887f25ee", "message": "Merge branch 'master' into on-chain_group_management_api", "committedDate": "2020-08-18T22:16:04Z", "type": "commit"}, {"oid": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2", "url": "https://github.com/hyperledger/besu/commit/3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2", "message": "Merge branch 'master' into on-chain_group_management_api", "committedDate": "2020-08-19T00:33:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTA5Ng==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591096", "bodyText": "You left a sys.out here", "author": "lucassaldanha", "createdAt": "2020-08-19T02:00:11Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/Ibft2PrivacyClusterAcceptanceTest.java", "diffHunk": "@@ -144,16 +144,25 @@ public void canInteractWithMultiplePrivacyGroups() {\n                 bob.getEnclaveKey()));\n \n     // alice gets receipt from charlie's interaction\n-    final PrivateTransactionReceipt firstExpectedReceipt =\n+    final PrivateTransactionReceipt aliceReceipt =\n         alice.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n \n+    final PrivateTransactionReceipt bobReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+    final PrivateTransactionReceipt charlieReceipt =\n+        bob.execute(privacyTransactions.getPrivateTransactionReceipt(firstTransactionHash));\n+\n+    System.out.println(", "originalCommit": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTI2MA==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591260", "bodyText": "Also, are we using bobReceipt and charlieReceipt for anything?", "author": "lucassaldanha", "createdAt": "2020-08-19T02:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5NzIzMg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472597232", "bodyText": "Used that for debugging :-)\nGone now!", "author": "pinges", "createdAt": "2020-08-19T02:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTA5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5ODA3Mg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472598072", "bodyText": "it's still there @pinges - do you have changes that aren't pushed?", "author": "macfarla", "createdAt": "2020-08-19T02:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTYxNw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591617", "bodyText": "NIT: we could assign Credentials.create(alice.getTransactionSigningKey()) to a variable aliceCredentials to make the code easier to read.", "author": "lucassaldanha", "createdAt": "2020-08-19T02:02:01Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -100,8 +101,9 @@ public void canAddParticipantToGroup() {\n \n     charlie.verify(privateTransactionVerifier.noPrivateTransactionReceipt(commitmentHash));\n \n-    lockPrivacyGroup(privacyGroupId, alice);\n-    addMembersToPrivacyGroup(privacyGroupId, alice, charlie);\n+    lockPrivacyGroup(privacyGroupId, alice, Credentials.create(alice.getTransactionSigningKey()));", "originalCommit": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5Nzg2Nw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472597867", "bodyText": "Done", "author": "pinges", "createdAt": "2020-08-19T02:20:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTgxNw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591817", "bodyText": "Left another sys.out :)", "author": "lucassaldanha", "createdAt": "2020-08-19T02:02:50Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,28 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);", "originalCommit": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5ODMyMw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472598323", "bodyText": "Gone", "author": "pinges", "createdAt": "2020-08-19T02:21:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTgxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTg4Mg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472591882", "bodyText": "Yet another sys.out...", "author": "lucassaldanha", "createdAt": "2020-08-19T02:03:05Z", "path": "acceptance-tests/tests/src/test/java/org/hyperledger/besu/tests/web3j/privacy/OnChainPrivacyAcceptanceTest.java", "diffHunk": "@@ -252,14 +259,28 @@ public void bobCanAddCharlieAfterBeingAddedByAlice() {\n             eventEmitter.getContractAddress(), alice.getAddress().toString())\n         .verify(eventEmitter);\n \n+    final Credentials aliceCredentials = Credentials.create(alice.getTransactionSigningKey());\n     final String aliceLockHash =\n-        alice.execute(privacyTransactions.privxLockPrivacyGroupAndCheck(privacyGroupId, alice));\n+        alice.execute(\n+            privacyTransactions.privxLockPrivacyGroupAndCheck(\n+                privacyGroupId, alice, aliceCredentials));\n+\n+    final String hash =\n+        alice.execute(\n+            privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, aliceCredentials, bob));\n \n-    alice.execute(privacyTransactions.addToPrivacyGroup(privacyGroupId, alice, bob));\n+    System.out.println(hash);\n+\n+    final Object[] aliceKeys = alice.getOrion().getPublicKeys().toArray();\n+    final Object[] bobKeys = bob.getOrion().getPublicKeys().toArray();\n+    final Address aliceAddress = alice.getAddress();\n+\n+    System.out.println(aliceKeys.length + bobKeys.length + aliceAddress.toString());", "originalCommit": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5ODU5OQ==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472598599", "bodyText": "Gone", "author": "pinges", "createdAt": "2020-08-19T02:21:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MTg4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MzkxNw==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472593917", "bodyText": "Instead of always emitting the event with a status, why don't we only emit the event when the participant is removed successfully?", "author": "lucassaldanha", "createdAt": "2020-08-19T02:10:33Z", "path": "privacy-contracts/src/main/solidity/OnChainPrivacyGroupManagementProxy.sol", "diffHunk": "@@ -10,28 +11,25 @@ contract OnChainPrivacyGroupManagementProxy is OnChainPrivacyGroupManagementInte\n         implementation = _implementation;\n     }\n \n-    function upgradeTo(address _newImplementation) external {\n-        require(implementation != _newImplementation);\n-        _setImplementation(_newImplementation);\n-    }\n-\n     function _setImplementation(address _newImp) internal {\n         implementation = _newImp;\n     }\n \n-    function addParticipants(bytes32 enclaveKey, bytes32[] memory participants) public returns (bool) {\n+    function addParticipants(bytes32[] memory _publicEnclaveKeys) public returns (bool) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.addParticipants(enclaveKey, participants);\n+        return privacyInterface.addParticipants(_publicEnclaveKeys);\n     }\n \n-    function getParticipants(bytes32 enclaveKey) view public returns (bytes32[] memory) {\n+    function getParticipants() view public returns (bytes32[] memory) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.getParticipants(enclaveKey);\n+        return privacyInterface.getParticipants();\n     }\n \n-    function removeParticipant(bytes32 enclaveKey, bytes32 account) public returns (bool) {\n+    function removeParticipant(bytes32 _member) public returns (bool) {\n         OnChainPrivacyGroupManagementInterface privacyInterface = OnChainPrivacyGroupManagementInterface(implementation);\n-        return privacyInterface.removeParticipant(enclaveKey, account);\n+        bool result = privacyInterface.removeParticipant(_member);\n+        emit ParticipantRemoved(result, _member);", "originalCommit": "3760fd1a864bc14a9b53e239f9b4a0b83ba1c5b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYwMDU3Mg==", "url": "https://github.com/hyperledger/besu/pull/1288#discussion_r472600572", "bodyText": "Good plan!", "author": "pinges", "createdAt": "2020-08-19T02:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU5MzkxNw=="}], "type": "inlineReview"}, {"oid": "3c014f2729fe7718b3634e0352f63f75e53962a7", "url": "https://github.com/hyperledger/besu/commit/3c014f2729fe7718b3634e0352f63f75e53962a7", "message": "Remove sys outs and make minor change in proxy conract\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-19T02:31:39Z", "type": "commit"}, {"oid": "c5baf1eb98f2d49ac960e0bf44f28d75128a007d", "url": "https://github.com/hyperledger/besu/commit/c5baf1eb98f2d49ac960e0bf44f28d75128a007d", "message": "Merge branch 'on-chain_group_management_api' of github.com:pinges/besu into on-chain_group_management_api", "committedDate": "2020-08-19T02:31:49Z", "type": "commit"}, {"oid": "02f002e89f93857c8b1c988dff1cb0ea3a9f0e6e", "url": "https://github.com/hyperledger/besu/commit/02f002e89f93857c8b1c988dff1cb0ea3a9f0e6e", "message": "add headers AGAIN\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-08-19T02:47:30Z", "type": "commit"}]}