{"pr_number": 594, "pr_title": "Refactor EeaSendRawTransaction", "pr_createdAt": "2020-03-27T06:32:54Z", "pr_url": "https://github.com/hyperledger/besu/pull/594", "timeline": [{"oid": "32e0f1ff390f98f241d3e6ca1fd20fdee51fc285", "url": "https://github.com/hyperledger/besu/commit/32e0f1ff390f98f241d3e6ca1fd20fdee51fc285", "message": "refactor EeaSendRawTransaction\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-03-27T06:30:36Z", "type": "commit"}, {"oid": "31953a5e144a8efb85ecdc5f65be70d12a7cdc0d", "url": "https://github.com/hyperledger/besu/commit/31953a5e144a8efb85ecdc5f65be70d12a7cdc0d", "message": "Merge branch 'master' into refactorEeaSendRawTransaction", "committedDate": "2020-03-27T06:33:11Z", "type": "commit"}, {"oid": "d994fd48e1303e26d2e2c2c2224120f1c66ef793", "url": "https://github.com/hyperledger/besu/commit/d994fd48e1303e26d2e2c2c2224120f1c66ef793", "message": "fix unit test\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-03-27T07:10:13Z", "type": "commit"}, {"oid": "ca1a9c780475e273d933438a51879b7d1a4eb5bd", "url": "https://github.com/hyperledger/besu/commit/ca1a9c780475e273d933438a51879b7d1a4eb5bd", "message": "fix unit test\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-03-27T07:29:54Z", "type": "commit"}, {"oid": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "url": "https://github.com/hyperledger/besu/commit/402fe0dcd00713cedbaa2c800e203cf832e3eaac", "message": "spotless\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-03-27T07:32:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MDkxMA==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400480910", "bodyText": "NIT: If we are renaming the JsonRpcError, should we also rename this enum value to be consistent?", "author": "lucassaldanha", "createdAt": "2020-03-30T20:42:15Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcErrorConverter.java", "diffHunk": "@@ -44,7 +44,7 @@ public static JsonRpcError convertTransactionInvalidReason(\n       case GAS_PRICE_TOO_LOW:\n         return JsonRpcError.GAS_PRICE_TOO_LOW;\n       case PRIVACY_GROUP_DOES_NOT_EXIST:", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNzc2NQ==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400727765", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-31T08:21:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MDkxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MjAwNA==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400482004", "bodyText": "I believe Offchain and Onchain are the spelling we use across the board.", "author": "lucassaldanha", "createdAt": "2020-03-30T20:44:17Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/response/JsonRpcError.java", "diffHunk": "@@ -115,10 +115,15 @@\n   VALUE_NOT_ZERO(-50100, \"We cannot transfer ether in private transaction yet.\"),\n   DECODE_ERROR(-50100, \"Unable to decode the private signed raw transaction\"),\n   GET_PRIVATE_TRANSACTION_NONCE_ERROR(-50100, \"Unable to determine nonce for account in group.\"),\n-  PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"Privacy group does not exist.\"),\n+  OFFCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"OffChain Privacy group does not exist.\"),\n+  ONCCHAIN_PRIVACY_GROUP_DOES_NOT_EXIST(-50100, \"OnChain Privacy group does not exist.\"),", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyNzg1Ng==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400727856", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-31T08:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4MjAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NDgyNw==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400484827", "bodyText": "Can we change this method to return an Optional?", "author": "lucassaldanha", "createdAt": "2020-03-30T20:49:26Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -284,16 +286,13 @@ public PrivacyGroup retrievePrivacyGroup(final String privacyGroupId, final Stri\n       final RLPInput rlpInput =\n           RLP.input(privateTransactionSimulatorResultOptional.get().getOutput());\n       if (rlpInput.nextSize() > 0) {\n-        return decodeList(rlpInput.raw());\n+        return new PrivacyGroup(\n+            privacyGroupId.toBase64String(), Type.ONCHAIN, \"\", \"\", decodeList(rlpInput.raw()));\n       } else {\n-        return Collections.emptyList();\n+        return null;", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcyODc1MA==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400728750", "bodyText": "done", "author": "pinges", "createdAt": "2020-03-31T08:23:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NDgyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NDk3Mg==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400484972", "bodyText": "Can we change this method to return an Optional?", "author": "lucassaldanha", "createdAt": "2020-03-30T20:49:42Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/DefaultPrivacyController.java", "diffHunk": "@@ -245,7 +246,8 @@ public long determineBesuNonce(\n   }\n \n   @Override\n-  public PrivacyGroup retrievePrivacyGroup(final String privacyGroupId, final String enclaveKey) {\n+  public PrivacyGroup retrieveOffChainPrivacyGroup(", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMDIwNw==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400730207", "bodyText": "done", "author": "pinges", "createdAt": "2020-03-31T08:25:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NDk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NjE1Mg==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400486152", "bodyText": "Can privateTransaction.getPrivateFrom() be null? Do we need to be careful here?", "author": "lucassaldanha", "createdAt": "2020-03-30T20:51:53Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMTU4Ng==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400731586", "bodyText": "I think the PrivateTransaction.readFrom does not return null ..", "author": "pinges", "createdAt": "2020-03-31T08:27:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NjE1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4Njg4OQ==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400486889", "bodyText": "We probably don't need this comment. The JsonRpcError name could be a bit simpler I think:\nJsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE", "author": "lucassaldanha", "createdAt": "2020-03-30T20:53:22Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, PRIVATE_FROM_DOES_NOT_MATCH_ENCLAVE_PUBLIC_KEY);\n       }\n \n-      final String enclaveKey =\n-          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n-      final Transaction privacyMarkerTransaction;\n-      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-        PrivacyGroup privacyGroup = null;\n-        try {\n-          privacyGroup =\n-              privacyController.retrievePrivacyGroup(\n-                  privateTransaction.getPrivacyGroupId().get().toBase64String(),\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        } catch (final EnclaveClientException e) {\n-          // it is an onchain group\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0ODk0OQ==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r401248949", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-31T22:19:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4Njg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NzE1Nw==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400487157", "bodyText": "I think we can remove this comment. The code is clear on what is happening.", "author": "lucassaldanha", "createdAt": "2020-03-30T20:53:53Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/eea/EeaSendRawTransaction.java", "diffHunk": "@@ -77,87 +72,100 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n-      final ValidationResult<TransactionInvalidReason> validationResult =\n-          privacyController.validatePrivateTransaction(privateTransaction, enclavePublicKey);\n-      if (!validationResult.isValid()) {\n-        return new JsonRpcErrorResponse(\n-            id, convertTransactionInvalidReason(validationResult.getInvalidReason()));\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, PRIVATE_FROM_DOES_NOT_MATCH_ENCLAVE_PUBLIC_KEY);\n       }\n \n-      final String enclaveKey =\n-          privacyController.sendTransaction(privateTransaction, enclavePublicKey);\n-      final Transaction privacyMarkerTransaction;\n-      if (privateTransaction.getPrivacyGroupId().isPresent()) {\n-        PrivacyGroup privacyGroup = null;\n-        try {\n-          privacyGroup =\n-              privacyController.retrievePrivacyGroup(\n-                  privateTransaction.getPrivacyGroupId().get().toBase64String(),\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-        } catch (final EnclaveClientException e) {\n-          // it is an onchain group\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);\n         }\n+        privacyGroup =\n+            privacyController.retrieveOnChainPrivacyGroup(\n+                maybePrivacyGroupId.get(), enclavePublicKey);\n         if (privacyGroup == null\n-            || !privacyGroup\n-                .getMembers()\n-                .contains(enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()))) {\n-\n-          if (!isOnchainPrivacyGroupEnabled) {\n-            return new JsonRpcErrorResponse(id, ONCHAIN_PRIVACY_GROUP_NOT_ENABLED);\n-          }\n-\n-          final Optional<String> addPayloadEnclaveKey =\n-              privacyController.buildAndSendAddPayload(\n-                  privateTransaction,\n-                  enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser()));\n-\n-          privacyMarkerTransaction =\n-              privacyController.createPrivacyMarkerTransaction(\n-                  buildCompoundKey(enclaveKey, addPayloadEnclaveKey),\n-                  privateTransaction,\n-                  Address.ONCHAIN_PRIVACY);\n-        } else {\n-          if (isOnchainPrivacyGroupEnabled) {\n-            return new JsonRpcErrorResponse(id, OFFCHAIN_PRIVACY_GROUP_NOT_ENABLED);\n-          }\n-\n-          privacyMarkerTransaction =\n-              privacyController.createPrivacyMarkerTransaction(enclaveKey, privateTransaction);\n+            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+          // on-chain privacy enabled, but on-chain privacy group does not exist and is not an\n+          // on-chain privacy group creation", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0OTIzMA==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r401249230", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-31T22:20:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4NzE1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODMxMA==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400488310", "bodyText": "No need for this comment :)", "author": "lucassaldanha", "createdAt": "2020-03-30T20:55:52Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,15 +66,46 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, ENCLAVE_ERROR);\n+      }\n+\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0OTU0NQ==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r401249545", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-31T22:20:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODMxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODM2OA==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r400488368", "bodyText": "No need for this comment :)", "author": "lucassaldanha", "createdAt": "2020-03-30T20:55:58Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivDistributeRawTransaction.java", "diffHunk": "@@ -60,15 +66,46 @@ public String getName() {\n \n   @Override\n   public JsonRpcResponse response(final JsonRpcRequestContext requestContext) {\n-    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n     final Object id = requestContext.getRequest().getId();\n+    final String rawPrivateTransaction = requestContext.getRequiredParameter(0, String.class);\n \n     try {\n       final PrivateTransaction privateTransaction =\n           PrivateTransaction.readFrom(RLP.input(Bytes.fromHexString(rawPrivateTransaction)));\n \n       final String enclavePublicKey =\n           enclavePublicKeyProvider.getEnclaveKey(requestContext.getUser());\n+\n+      if (!privateTransaction.getPrivateFrom().equals(Bytes.fromBase64String(enclavePublicKey))) {\n+        return new JsonRpcErrorResponse(id, ENCLAVE_ERROR);\n+      }\n+\n+      PrivacyGroup privacyGroup = null;\n+      final Optional<Bytes> maybePrivacyGroupId = privateTransaction.getPrivacyGroupId();\n+      if (onchainPrivacyGroupsEnabled) {\n+        if (!maybePrivacyGroupId.isPresent()) {\n+          // on-chain private transaction does not contain privacy group ID\n+          return new JsonRpcErrorResponse(\n+              id, JsonRpcError.PRIVACY_GROUP_ID_NOT_AVAILABLE_WHILE_ON_CHAIN_PRIVACY_IS_ENABLED);\n+        }\n+        privacyGroup =\n+            privacyController.retrieveOnChainPrivacyGroup(\n+                maybePrivacyGroupId.get(), enclavePublicKey);\n+        if (privacyGroup == null\n+            && !privacyController.isGroupAdditionTransaction(privateTransaction)) {\n+          // on-chain privacy enabled, but on-chain privacy group does not exist and is not an\n+          // on-chain privacy group creation", "originalCommit": "402fe0dcd00713cedbaa2c800e203cf832e3eaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI0OTU5Mw==", "url": "https://github.com/hyperledger/besu/pull/594#discussion_r401249593", "bodyText": "Done", "author": "pinges", "createdAt": "2020-03-31T22:20:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ4ODM2OA=="}], "type": "inlineReview"}, {"oid": "f9827d78b1edb54c28de61e731d5d9c040b70412", "url": "https://github.com/hyperledger/besu/commit/f9827d78b1edb54c28de61e731d5d9c040b70412", "message": "Merge branch 'master' into refactorEeaSendRawTransaction", "committedDate": "2020-03-31T08:17:29Z", "type": "commit"}, {"oid": "b051e8e3307d86d9703dfcce1ee4f169e187046f", "url": "https://github.com/hyperledger/besu/commit/b051e8e3307d86d9703dfcce1ee4f169e187046f", "message": "changes after review\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-03-31T22:45:29Z", "type": "commit"}, {"oid": "5f703a6d71fc48e308ec69b036d725848537a4dc", "url": "https://github.com/hyperledger/besu/commit/5f703a6d71fc48e308ec69b036d725848537a4dc", "message": "Merge branch 'master' into refactorEeaSendRawTransaction", "committedDate": "2020-04-01T01:09:39Z", "type": "commit"}, {"oid": "6a0ac7fd868e016ba874eb0347cfb667e150d358", "url": "https://github.com/hyperledger/besu/commit/6a0ac7fd868e016ba874eb0347cfb667e150d358", "message": "spotless\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-04-01T01:12:51Z", "type": "commit"}, {"oid": "a25d3bd4d956e3a5d7a01e088dde364a04e92e79", "url": "https://github.com/hyperledger/besu/commit/a25d3bd4d956e3a5d7a01e088dde364a04e92e79", "message": "fix tests\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-04-01T03:17:56Z", "type": "commit"}, {"oid": "2f6a15109f8e35e8dd31b2efa4e9a6b245d8591e", "url": "https://github.com/hyperledger/besu/commit/2f6a15109f8e35e8dd31b2efa4e9a6b245d8591e", "message": "conflicts\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-04-01T03:42:25Z", "type": "commit"}, {"oid": "292f7e5f95012501a8819259e5e577327430642b", "url": "https://github.com/hyperledger/besu/commit/292f7e5f95012501a8819259e5e577327430642b", "message": "spotless\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-04-01T03:46:37Z", "type": "commit"}, {"oid": "8d5d3a1999aee7191cc693a92d089876ec04131a", "url": "https://github.com/hyperledger/besu/commit/8d5d3a1999aee7191cc693a92d089876ec04131a", "message": "fix onchain acceptance tests\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-04-01T04:34:02Z", "type": "commit"}, {"oid": "c43ab4b7531d97dd1934b42a50fc074ee4954d54", "url": "https://github.com/hyperledger/besu/commit/c43ab4b7531d97dd1934b42a50fc074ee4954d54", "message": "fix another acceptance test\n\nSigned-off-by: Stefan Pingel <stefan.pingel@consensys.net>", "committedDate": "2020-04-01T05:59:28Z", "type": "commit"}, {"oid": "1f2276e711dde400a733c4b2e9ab6e77aec57dd8", "url": "https://github.com/hyperledger/besu/commit/1f2276e711dde400a733c4b2e9ab6e77aec57dd8", "message": "Merge branch 'master' into refactorEeaSendRawTransaction", "committedDate": "2020-04-01T06:12:17Z", "type": "commit"}]}