{"pr_number": 1557, "pr_title": "Add tracing support for internals and JSON-RPC", "pr_createdAt": "2020-11-12T22:33:00Z", "pr_url": "https://github.com/hyperledger/besu/pull/1557", "timeline": [{"oid": "c10a225fa8be3af446cbcf2d06c986d636585970", "url": "https://github.com/hyperledger/besu/commit/c10a225fa8be3af446cbcf2d06c986d636585970", "message": "Add tracing support for internals and JSON-RPC\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-12T22:37:43Z", "type": "forcePushed"}, {"oid": "9303e60ecf23fe1f9f4384a9ea273ba6a8ce39ad", "url": "https://github.com/hyperledger/besu/commit/9303e60ecf23fe1f9f4384a9ea273ba6a8ce39ad", "message": "Add tracing support for internals and JSON-RPC\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-12T23:39:24Z", "type": "forcePushed"}, {"oid": "be459ee0ab92e10a33d659cb71d25d2a50fb3d3c", "url": "https://github.com/hyperledger/besu/commit/be459ee0ab92e10a33d659cb71d25d2a50fb3d3c", "message": "Add tracing support for internals and JSON-RPC\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-13T00:25:08Z", "type": "forcePushed"}, {"oid": "00db98d9cc39157b007da6c0663a4320be8c2ab5", "url": "https://github.com/hyperledger/besu/commit/00db98d9cc39157b007da6c0663a4320be8c2ab5", "message": "Remove traces around trie tree as they slow down syncing significantly\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-11-19T01:07:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxNjQyMg==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529516422", "bodyText": "org.hyperledger instead of io.hyperledger?", "author": "shemnon", "createdAt": "2020-11-24T12:43:36Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/mainnet/AbstractBlockProcessor.java", "diffHunk": "@@ -46,6 +50,9 @@ TransactionReceipt create(\n \n   private static final Logger LOG = LogManager.getLogger();\n \n+  private static final Tracer tracer =\n+      OpenTelemetry.getGlobalTracer(\"io.hyperledger.besu.block\", \"1.0.0\");", "originalCommit": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNTY1NQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529825655", "bodyText": "Fixed.", "author": "atoulme", "createdAt": "2020-11-24T19:28:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxNjQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxNzAwMg==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529517002", "bodyText": "org.hyperledger instead of io.hyperledger?", "author": "shemnon", "createdAt": "2020-11-24T12:44:33Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -169,6 +198,7 @@ private JsonRpcHttpService(\n     this.authenticationService = authenticationService;\n     this.livenessService = livenessService;\n     this.readinessService = readinessService;\n+    this.tracer = OpenTelemetry.getGlobalTracer(\"io.hyperledger.besu.jsonrpc\", \"1.0.0\");", "originalCommit": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529518814", "bodyText": "Is OpenTelemetry \"always on\"?  Should there be a way for the end user to \"opt out\" like we do for other metrics collection?", "author": "shemnon", "createdAt": "2020-11-24T12:47:31Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/JsonRpcHttpService.java", "diffHunk": "@@ -279,6 +310,32 @@ private Router buildRouter() {\n     return router;\n   }\n \n+  private void createSpan(final RoutingContext routingContext) {", "originalCommit": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjMyNg==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529826326", "bodyText": "Asking for the best way on this.", "author": "atoulme", "createdAt": "2020-11-24T19:29:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzMTc1Nw==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529831757", "bodyText": "If it was just the one create span call it would be easy, but it looks like every request has to possibly add a span, so plumbing the metrics configs through seems a bit much... unless performance suffers.  We have a benchmark where rpcs is the bottleneck, so if it's a problem I'd expect those benchmarks to fail.  If you are willing to risk a call for a revert if performance takes a hit it can stay as-is.", "author": "shemnon", "createdAt": "2020-11-24T19:39:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0Mzk2NQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529843965", "bodyText": "So I'm asking, and so far if we don't use a metrics backend, the spans are created, but in the words of OpenTelemetry devs, they then \"fall to the floor\" as there is no export enabled.\nIf we want to even avoid the object allocation of creating span objects, we can add a check in the Besu code that disables creating span objects.", "author": "atoulme", "createdAt": "2020-11-24T20:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NDg4MQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529974881", "bodyText": "Object allocation is my worry, but I'm thinking if it matters it will only show up under load, which we have a test set up to detect (but only for committed code).\nSo if the test shows a regression the worst case scenario of a commit is a rollback and then a fix.", "author": "shemnon", "createdAt": "2020-11-24T22:59:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ2NTI4MQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r547465281", "bodyText": "I am willing to try this out and see how the performance is impacted.\nInitially I had a span collecting trie performance, but I reverted it, as it was too verbose. I believe the AbstractBlockProcessor might be too verbose as well.\nWe'll see - it would be great to understand better if there are specific use cases (block imports, mining) where tracing helps specifically.", "author": "atoulme", "createdAt": "2020-12-22T19:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUxODgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDI5OQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529520299", "bodyText": "Ugghh... shaded jars.  Is this necessary?  They have a tendency of making security based library upgrades difficult for the shaded classes.", "author": "shemnon", "createdAt": "2020-11-24T12:50:02Z", "path": "gradle/versions.gradle", "diffHunk": "@@ -45,18 +45,21 @@ dependencyManagement {\n \n     dependency 'info.picocli:picocli:4.5.0'\n \n-    dependency 'io.grpc:grpc-netty:1.33.0'\n+    dependency 'io.grpc:grpc-netty-shaded:1.33.1'", "originalCommit": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNTg2Mw==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529825863", "bodyText": "Asking the otel folks about this.", "author": "atoulme", "createdAt": "2020-11-24T19:28:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk0NDcxMQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529944711", "bodyText": "Some pushback, as the grpc project relies and documents the shaded jar as their distribution of choice. That said, your concern is valid, and I'll put in the work to replace the shaded jar with the detail of dependencies.", "author": "atoulme", "createdAt": "2020-11-24T22:31:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzAzNjE0Ng==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r547036146", "bodyText": "OK, I have taken care of the shaded jar.", "author": "atoulme", "createdAt": "2020-12-22T02:45:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDg5NA==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529520894", "bodyText": "unneeded.  please remove.  it makes assessing the history of the file difficult.", "author": "shemnon", "createdAt": "2020-11-24T12:51:04Z", "path": "gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,5 +1,6 @@\n+#Wed Nov 18 15:38:00 PST 2020", "originalCommit": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjAyNA==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529826024", "bodyText": "Sorry, oversight. Removed.", "author": "atoulme", "createdAt": "2020-11-24T19:28:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMDg5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMTc0Ng==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529521746", "bodyText": "Again, is the shaded version really necessary? I have concerns about proper security auditing.", "author": "shemnon", "createdAt": "2020-11-24T12:52:30Z", "path": "metrics/core/build.gradle", "diffHunk": "@@ -38,11 +38,12 @@ dependencies {\n   implementation project(':plugin-api')\n \n   implementation 'com.google.guava:guava'\n-  implementation 'io.grpc:grpc-netty'\n+  implementation 'io.grpc:grpc-netty-shaded'", "originalCommit": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMjUxMw==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529522513", "bodyText": "org.hyperledger not io.hyperledger", "author": "shemnon", "createdAt": "2020-11-24T12:53:48Z", "path": "services/pipeline/src/main/java/org/hyperledger/besu/services/pipeline/Pipeline.java", "diffHunk": "@@ -37,6 +41,8 @@\n   private final Collection<Pipe<?>> pipes;\n   private final CompleterStage<?> completerStage;\n   private final AtomicBoolean started = new AtomicBoolean(false);\n+  private final Tracer tracer =\n+      OpenTelemetry.getGlobalTracer(\"io.hyperledger.besu.services.pipeline\", \"1.0.0\");", "originalCommit": "f5d47a8f0d45959a4e9ac701ebd50cfa42d8bd7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgyNjE4NQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r529826185", "bodyText": "Fixed", "author": "atoulme", "createdAt": "2020-11-24T19:29:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTUyMjUxMw=="}], "type": "inlineReview"}, {"oid": "017596ec9bf0bbe8451c8adcfd29c86644e2cb78", "url": "https://github.com/hyperledger/besu/commit/017596ec9bf0bbe8451c8adcfd29c86644e2cb78", "message": "Add tracing support for internals and JSON-RPC\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:13:36Z", "type": "commit"}, {"oid": "8ef03ea81bc325c8fd52287248ceab2d3837f8b6", "url": "https://github.com/hyperledger/besu/commit/8ef03ea81bc325c8fd52287248ceab2d3837f8b6", "message": "Remove rocksdb tracing as it slows down execution too much\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:13:39Z", "type": "commit"}, {"oid": "edea3bbcf17341f221e9863a8bfe65b2daeabd9f", "url": "https://github.com/hyperledger/besu/commit/edea3bbcf17341f221e9863a8bfe65b2daeabd9f", "message": "Add B3 headers extraction on JSON-RPC requests\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:13:39Z", "type": "commit"}, {"oid": "710bd02930e8df051e8bd31df52210dbdfd7579b", "url": "https://github.com/hyperledger/besu/commit/710bd02930e8df051e8bd31df52210dbdfd7579b", "message": "Remove traces around trie tree as they slow down syncing significantly\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:15:51Z", "type": "commit"}, {"oid": "6efba27c7c9091d0f5e3d84cd84372a4ce7f9f93", "url": "https://github.com/hyperledger/besu/commit/6efba27c7c9091d0f5e3d84cd84372a4ce7f9f93", "message": "Add tracing to fast sync pipeline\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:15:53Z", "type": "commit"}, {"oid": "22f2e9794063b2afc1f5ea807dedb8b617ba917b", "url": "https://github.com/hyperledger/besu/commit/22f2e9794063b2afc1f5ea807dedb8b617ba917b", "message": "Add tracing for all pipelines\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:15:54Z", "type": "commit"}, {"oid": "6fcc971c96320d06e3b12d6d27e7d6d449725b83", "url": "https://github.com/hyperledger/besu/commit/6fcc971c96320d06e3b12d6d27e7d6d449725b83", "message": "Address code review\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:15:54Z", "type": "commit"}, {"oid": "38a2fe3f26980e94cbd85b8d10c906f23b84f8d2", "url": "https://github.com/hyperledger/besu/commit/38a2fe3f26980e94cbd85b8d10c906f23b84f8d2", "message": "Add acceptance tests and break out the shaded dependency\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:33:08Z", "type": "commit"}, {"oid": "38a2fe3f26980e94cbd85b8d10c906f23b84f8d2", "url": "https://github.com/hyperledger/besu/commit/38a2fe3f26980e94cbd85b8d10c906f23b84f8d2", "message": "Add acceptance tests and break out the shaded dependency\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:33:08Z", "type": "forcePushed"}, {"oid": "75687788ad35258bcb8d56b22cbfd4c0b11b06f6", "url": "https://github.com/hyperledger/besu/commit/75687788ad35258bcb8d56b22cbfd4c0b11b06f6", "message": "Fix tracer id\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:46:20Z", "type": "commit"}, {"oid": "f8afca167e966d4ad5c731c28c96e17bf5859454", "url": "https://github.com/hyperledger/besu/commit/f8afca167e966d4ad5c731c28c96e17bf5859454", "message": "Revert changes to trie\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-22T02:48:58Z", "type": "commit"}, {"oid": "3fccb91812f94021d6f36295759a2a3530dcd071", "url": "https://github.com/hyperledger/besu/commit/3fccb91812f94021d6f36295759a2a3530dcd071", "message": "Upgrade otel to latest, remove old tracing\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-23T22:25:00Z", "type": "forcePushed"}, {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848", "url": "https://github.com/hyperledger/besu/commit/c6f2ccd1ff097b1514448ce7fe03a7816976e848", "message": "Upgrade otel to latest, remove old tracing\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-23T23:26:47Z", "type": "commit"}, {"oid": "c6f2ccd1ff097b1514448ce7fe03a7816976e848", "url": "https://github.com/hyperledger/besu/commit/c6f2ccd1ff097b1514448ce7fe03a7816976e848", "message": "Upgrade otel to latest, remove old tracing\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2020-12-23T23:26:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMDc2OA==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551430768", "bodyText": "Wrap these two lines inside an if (node.isMetricsEnabled() || metricsConfiguration.isPushEnabled()) { ... }", "author": "shemnon", "createdAt": "2021-01-04T16:40:11Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/node/ProcessBesuNodeRunner.java", "diffHunk": "@@ -204,6 +204,8 @@ public void startNode(final BesuNode node) {\n         params.add(\"--metrics-category\");\n         params.add(((Enum<?>) category).name());\n       }\n+      params.add(\"--metrics-protocol\");", "originalCommit": "c6f2ccd1ff097b1514448ce7fe03a7816976e848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1Nzk2Nw==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551457967", "bodyText": "Done", "author": "atoulme", "createdAt": "2021-01-04T17:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMDc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMzgwMA==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551433800", "bodyText": "What changed so that we no longer need the java agent for OTEL?  I'm not seeing anything code-wise so I'm concerned this is an accidental deletion.", "author": "shemnon", "createdAt": "2021-01-04T16:44:55Z", "path": "build.gradle", "diffHunk": "@@ -504,19 +502,6 @@ def tweakStartScript(createScriptTask) {\n \n   createScriptTask.unixScript.text = createScriptTask.unixScript.text.replace('BESU_HOME', '\\$APP_HOME')\n   createScriptTask.windowsScript.text = createScriptTask.windowsScript.text.replace('BESU_HOME', '%~dp0..')\n-  // OpenTelemetry Wiring for unix scripts\n-  def agentFileName = configurations.javaAgent.singleFile.toPath().getFileName()\n-  def unixRegex = $/exec \"$$JAVACMD\" /$\n-  def forwardSlash = \"/\"\n-  def unixReplacement = $/if [ -n \"$$TRACING\" ];then\n- TRACING_AGENT=\"-javaagent:$$APP_HOME/agent${forwardSlash}${agentFileName}\"\n-fi\n-exec \"$$JAVACMD\" $$TRACING_AGENT /$\n-  createScriptTask.unixScript.text = createScriptTask.unixScript.text.replace(unixRegex, unixReplacement)\n-  // OpenTelemetry Wiring for windows scripts\n-  def windowsRegex = $/\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS%/$\n-  def windowsReplacement = $/if Defined TRACING (TRACING_AGENT=\"-javaagent:\" \"%APP_HOME%\\agent\\/$ + agentFileName + '\")\\r\\n\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %TRACING_AGENT%'\n-  createScriptTask.windowsScript.text = createScriptTask.windowsScript.text.replace(windowsRegex, windowsReplacement)", "originalCommit": "c6f2ccd1ff097b1514448ce7fe03a7816976e848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MDM1OA==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551450358", "bodyText": "The agent inspects the code and injects changes at runtime to create traces from well-known libraries such as SQL querying or HTTP. We now do this manually and in a much more targeted fashion. We no longer need to use automatic instrumentation. Automatic instrumentation could also create extra traces that don't provide as much value.", "author": "atoulme", "createdAt": "2021-01-04T17:12:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzMzgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNTIxNw==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551435217", "bodyText": "Should we add counter name as a logging arg?  Same for timer and gauge.", "author": "shemnon", "createdAt": "2021-01-04T16:47:11Z", "path": "metrics/core/src/main/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetrySystem.java", "diffHunk": "@@ -151,6 +151,7 @@ private Object extractValue(final MetricData.Type type, final MetricData.Point p\n       final String name,\n       final String help,\n       final String... labelNames) {\n+    LOG.trace(\"Creating a counter\");", "originalCommit": "c6f2ccd1ff097b1514448ce7fe03a7816976e848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1ODAxOQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551458019", "bodyText": "Done", "author": "atoulme", "createdAt": "2021-01-04T17:26:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNTIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjY5OQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551436699", "bodyText": "style nit:  7.0 would be less likely to be confused with hex encoded 125.", "author": "shemnon", "createdAt": "2021-01-04T16:49:29Z", "path": "metrics/core/src/test/java/org/hyperledger/besu/metrics/opentelemetry/OpenTelemetryMetricsSystemTest.java", "diffHunk": "@@ -175,12 +172,9 @@ public void shouldCreateObservationFromGauge() {\n     final ObservableMetricsSystem localMetricSystem =\n         MetricsSystemFactory.create(metricsConfiguration);\n     localMetricSystem.createGauge(RPC, \"myValue\", \"Help\", () -> 7d);\n-    List<MetricData.ValueAtPercentile> values = new ArrayList<>();\n-    values.add(MetricData.ValueAtPercentile.create(0, 7d));\n-    values.add(MetricData.ValueAtPercentile.create(100, 7d));\n \n     assertThat(localMetricSystem.streamObservations())\n-        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", values, emptyList()));\n+        .containsExactlyInAnyOrder(new Observation(RPC, \"myValue\", 7d, emptyList()));", "originalCommit": "c6f2ccd1ff097b1514448ce7fe03a7816976e848", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1Mzc0Mw==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551453743", "bodyText": "d stands for double - I'll edit to make sure it's all .0 instead, it's indeed surprising.", "author": "atoulme", "createdAt": "2021-01-04T17:18:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1ODA3OQ==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551458079", "bodyText": "Done", "author": "atoulme", "createdAt": "2021-01-04T17:26:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjY5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0MDM2OA==", "url": "https://github.com/hyperledger/besu/pull/1557#discussion_r551540368", "bodyText": "Some style guides I've seen insist on one case for 0xhex encoded letters and another case for type designators.  Typically capitals for the types and lower case for actual digits.", "author": "shemnon", "createdAt": "2021-01-04T20:07:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQzNjY5OQ=="}], "type": "inlineReview"}, {"oid": "80f73489e68e5c97d0cd0da65a3d431f720b0cc1", "url": "https://github.com/hyperledger/besu/commit/80f73489e68e5c97d0cd0da65a3d431f720b0cc1", "message": "Code review comments\n\nSigned-off-by: Antoine Toulme <antoine@lunar-ocean.com>", "committedDate": "2021-01-04T17:26:06Z", "type": "commit"}]}