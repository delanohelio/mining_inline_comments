{"pr_number": 686, "pr_title": "Implemented priv_getLogs", "pr_createdAt": "2020-04-08T22:40:56Z", "pr_url": "https://github.com/hyperledger/besu/pull/686", "timeline": [{"oid": "4af9d1c9ab1d4c9cd2bda06eb3592bb6a58a6d85", "url": "https://github.com/hyperledger/besu/commit/4af9d1c9ab1d4c9cd2bda06eb3592bb6a58a6d85", "message": "Implemented priv_getLogs\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-08T22:42:21Z", "type": "forcePushed"}, {"oid": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "url": "https://github.com/hyperledger/besu/commit/9a5976865f191fd2d7a804d5a4e59b13318b7dab", "message": "Implemented priv_getLogs\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-08T22:45:55Z", "type": "forcePushed"}, {"oid": "c5296a576408828686be133a90bcaee3a533145d", "url": "https://github.com/hyperledger/besu/commit/c5296a576408828686be133a90bcaee3a533145d", "message": "Implemented priv_getLogs\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-14T02:58:53Z", "type": "commit"}, {"oid": "b03eca0a0c936a7b58b414b9bb41cb5365e4bf37", "url": "https://github.com/hyperledger/besu/commit/b03eca0a0c936a7b58b414b9bb41cb5365e4bf37", "message": "Removing comment\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-14T02:59:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODU1Mw==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407808553", "bodyText": "The filter parameters are a bit confusing.  I understand that one of them has to be set, but what takes precedence if a from/to is set and the hash as well? Should that fail?", "author": "pinges", "createdAt": "2020-04-14T01:15:02Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/parameters/FilterParameter.java", "diffHunk": "@@ -73,6 +73,14 @@ public Hash getBlockhash() {\n     return blockhash;\n   }\n \n+  public boolean isValid() {\n+    if (!getFromBlock().isLatest() && !getToBlock().isLatest() && getBlockhash() != null) {", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2OTU4Ng==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407869586", "bodyText": "The rules are confusing. Basically, if from/to aren't latest, you can't specify the blockhash.\nTo be frank, I think we have a bug in this validation. When I compare with the JSON-RPC spec.\nThe spec says that you can't use fromBlock/toBlock with blockhash at all.\nI've talked to Madeline about it and she will raise a JI to review and fix this behaviour.\nWe are using the exact same logic as eth_getLogs. That's why we decided to keep the same behaviour until we review it. And, if we need to change anything, we change in both methods in the future.", "author": "lucassaldanha", "createdAt": "2020-04-14T05:06:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgwODU1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTU0MA==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407811540", "bodyText": "Can we do that check before we are building the query?", "author": "pinges", "createdAt": "2020-04-14T01:25:51Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogs.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.priv;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.RpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.methods.JsonRpcMethod;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.FilterParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.LogsResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.LogsQuery;\n+import org.hyperledger.besu.ethereum.api.query.PrivacyQueries;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+public class PrivGetLogs implements JsonRpcMethod {\n+\n+  private final BlockchainQueries blockchainQueries;\n+  private final PrivacyQueries privacyQueries;\n+  private final PrivacyController privacyController;\n+  private final EnclavePublicKeyProvider enclavePublicKeyProvider;\n+\n+  public PrivGetLogs(\n+      final BlockchainQueries blockchainQueries,\n+      final PrivacyQueries privacyQueries,\n+      final PrivacyController privacyController,\n+      final EnclavePublicKeyProvider enclavePublicKeyProvider) {\n+    this.blockchainQueries = blockchainQueries;\n+    this.privacyQueries = privacyQueries;\n+    this.privacyController = privacyController;\n+    this.enclavePublicKeyProvider = enclavePublicKeyProvider;\n+  }\n+\n+  @Override\n+  public String getName() {\n+    return RpcMethod.PRIV_GET_LOGS.getMethodName();\n+  }\n+\n+  @Override\n+  public JsonRpcResponse response(final JsonRpcRequestContext request) {\n+    final String privacyGroupId = request.getRequiredParameter(0, String.class);\n+    final FilterParameter filter = request.getRequiredParameter(1, FilterParameter.class);\n+\n+    checkIfPrivacyGroupMatchesAuthenticatedEnclaveKey(request, privacyGroupId);\n+\n+    final LogsQuery query =\n+        new LogsQuery.Builder().addresses(filter.getAddresses()).topics(filter.getTopics()).build();\n+\n+    if (!filter.isValid()) {", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg2OTkyMw==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407869923", "bodyText": "Sure! :)", "author": "lucassaldanha", "createdAt": "2020-04-14T05:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxMTU0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxODgwMQ==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407818801", "bodyText": "Why don't you just call it \"privateTransactionMetadataList\"?", "author": "pinges", "createdAt": "2020-04-14T01:52:14Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/PrivacyQueries.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.query;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogWithMetadata;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransactionReceipt;\n+import org.hyperledger.besu.ethereum.privacy.PrivateWorldStateReader;\n+import org.hyperledger.besu.ethereum.privacy.storage.PrivateTransactionMetadata;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+\n+public class PrivacyQueries {\n+\n+  private final Blockchain blockchain;\n+  private final PrivateWorldStateReader privateWorldStateReader;\n+\n+  public PrivacyQueries(\n+      final Blockchain blockchain, final PrivateWorldStateReader privateWorldStateReader) {\n+    this.blockchain = blockchain;\n+    this.privateWorldStateReader = privateWorldStateReader;\n+  }\n+\n+  public List<LogWithMetadata> matchingLogs(\n+      final String privacyGroupId,\n+      final long fromBlockNumber,\n+      final long toBlockNumber,\n+      final LogsQuery query) {\n+\n+    return LongStream.rangeClosed(fromBlockNumber, toBlockNumber)\n+        .mapToObj(blockchain::getBlockHashByNumber)\n+        .takeWhile(Optional::isPresent)\n+        .map(Optional::get)\n+        .map(hash -> matchingLogs(privacyGroupId, hash, query))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public List<LogWithMetadata> matchingLogs(\n+      final String privacyGroupId, final Hash blockHash, final LogsQuery query) {\n+\n+    final Optional<BlockHeader> blockHeader = blockchain.getBlockHeader(blockHash);\n+    if (blockHeader.isEmpty()) {\n+      return Collections.emptyList();\n+    }\n+\n+    final List<PrivateTransactionMetadata> privateTransactionMetadatas =", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MDA0OQ==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407870049", "bodyText": "Done!", "author": "lucassaldanha", "createdAt": "2020-04-14T05:08:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgxODgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNzE0MA==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407827140", "bodyText": "privateTransactionReceiptList?", "author": "pinges", "createdAt": "2020-04-14T02:22:42Z", "path": "ethereum/api/src/main/java/org/hyperledger/besu/ethereum/api/query/PrivacyQueries.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.query;\n+\n+import org.hyperledger.besu.ethereum.chain.Blockchain;\n+import org.hyperledger.besu.ethereum.core.BlockHeader;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogWithMetadata;\n+import org.hyperledger.besu.ethereum.privacy.PrivateTransactionReceipt;\n+import org.hyperledger.besu.ethereum.privacy.PrivateWorldStateReader;\n+import org.hyperledger.besu.ethereum.privacy.storage.PrivateTransactionMetadata;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+\n+public class PrivacyQueries {\n+\n+  private final Blockchain blockchain;\n+  private final PrivateWorldStateReader privateWorldStateReader;\n+\n+  public PrivacyQueries(\n+      final Blockchain blockchain, final PrivateWorldStateReader privateWorldStateReader) {\n+    this.blockchain = blockchain;\n+    this.privateWorldStateReader = privateWorldStateReader;\n+  }\n+\n+  public List<LogWithMetadata> matchingLogs(\n+      final String privacyGroupId,\n+      final long fromBlockNumber,\n+      final long toBlockNumber,\n+      final LogsQuery query) {\n+\n+    return LongStream.rangeClosed(fromBlockNumber, toBlockNumber)\n+        .mapToObj(blockchain::getBlockHashByNumber)\n+        .takeWhile(Optional::isPresent)\n+        .map(Optional::get)\n+        .map(hash -> matchingLogs(privacyGroupId, hash, query))\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public List<LogWithMetadata> matchingLogs(\n+      final String privacyGroupId, final Hash blockHash, final LogsQuery query) {\n+\n+    final Optional<BlockHeader> blockHeader = blockchain.getBlockHeader(blockHash);\n+    if (blockHeader.isEmpty()) {\n+      return Collections.emptyList();\n+    }\n+\n+    final List<PrivateTransactionMetadata> privateTransactionMetadatas =\n+        privateWorldStateReader.getPrivateTransactionsMetadata(privacyGroupId, blockHash);\n+\n+    final List<PrivateTransactionReceipt> privateTransactionReceipts =", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MDIyMg==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407870222", "bodyText": "Done!", "author": "lucassaldanha", "createdAt": "2020-04-14T05:09:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgyNzE0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTI2Ng==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407835266", "bodyText": "You should just use assertThatThrownBy() ...", "author": "pinges", "createdAt": "2020-04-14T02:52:51Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogsTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.exception.InvalidJsonRpcParameters;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.FilterParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.LogsResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.LogsQuery;\n+import org.hyperledger.besu.ethereum.api.query.PrivacyQueries;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogTopic;\n+import org.hyperledger.besu.ethereum.core.LogWithMetadata;\n+import org.hyperledger.besu.ethereum.privacy.MultiTenancyValidationException;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import com.google.common.collect.Lists;\n+import io.vertx.ext.auth.User;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrivGetLogsTest {\n+\n+  private final String ENCLAVE_KEY = \"enclave_key\";\n+  private final String PRIVACY_GROUP_ID = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+  @Mock private BlockchainQueries blockchainQueries;\n+  @Mock private PrivacyQueries privacyQueries;\n+  @Mock private PrivacyController privacyController;\n+  @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n+\n+  private PrivGetLogs method;\n+\n+  @Before\n+  public void before() {\n+    method =\n+        new PrivGetLogs(\n+            blockchainQueries, privacyQueries, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Test\n+  public void getMethodReturnsCorrectMethodName() {\n+    assertThat(method.getName()).isEqualTo(\"priv_getLogs\");\n+  }\n+\n+  @Test\n+  public void privacyGroupIdIsRequired() {\n+    final JsonRpcRequestContext request = privGetLogRequest(null, mock(FilterParameter.class));\n+\n+    final Throwable thrown = catchThrowable(() -> method.response(request));", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MDc3Mg==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407870772", "bodyText": "Duh! I always forget about it! Done!", "author": "lucassaldanha", "createdAt": "2020-04-14T05:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNTI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzNjE3OA==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407836178", "bodyText": "s.a.", "author": "pinges", "createdAt": "2020-04-14T02:56:11Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogsTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.exception.InvalidJsonRpcParameters;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.FilterParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.LogsResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.LogsQuery;\n+import org.hyperledger.besu.ethereum.api.query.PrivacyQueries;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogTopic;\n+import org.hyperledger.besu.ethereum.core.LogWithMetadata;\n+import org.hyperledger.besu.ethereum.privacy.MultiTenancyValidationException;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import com.google.common.collect.Lists;\n+import io.vertx.ext.auth.User;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrivGetLogsTest {\n+\n+  private final String ENCLAVE_KEY = \"enclave_key\";\n+  private final String PRIVACY_GROUP_ID = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+  @Mock private BlockchainQueries blockchainQueries;\n+  @Mock private PrivacyQueries privacyQueries;\n+  @Mock private PrivacyController privacyController;\n+  @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n+\n+  private PrivGetLogs method;\n+\n+  @Before\n+  public void before() {\n+    method =\n+        new PrivGetLogs(\n+            blockchainQueries, privacyQueries, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Test\n+  public void getMethodReturnsCorrectMethodName() {\n+    assertThat(method.getName()).isEqualTo(\"priv_getLogs\");\n+  }\n+\n+  @Test\n+  public void privacyGroupIdIsRequired() {\n+    final JsonRpcRequestContext request = privGetLogRequest(null, mock(FilterParameter.class));\n+\n+    final Throwable thrown = catchThrowable(() -> method.response(request));\n+\n+    assertThat(thrown)\n+        .isInstanceOf(InvalidJsonRpcParameters.class)\n+        .hasMessageContaining(\"Missing required json rpc parameter at index 0\");\n+  }\n+\n+  @Test\n+  public void filterParameterIsRequired() {\n+    final JsonRpcRequestContext request = privGetLogRequest(PRIVACY_GROUP_ID, null);\n+\n+    final Throwable thrown = catchThrowable(() -> method.response(request));", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg0NjE0Mg==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407846142", "bodyText": "assertThatThrownBy?", "author": "pinges", "createdAt": "2020-04-14T03:33:48Z", "path": "ethereum/api/src/test/java/org/hyperledger/besu/ethereum/api/jsonrpc/internal/privacy/methods/priv/PrivGetLogsTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright ConsenSys AG.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ *\n+ * SPDX-License-Identifier: Apache-2.0\n+ */\n+package org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.priv;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequest;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.JsonRpcRequestContext;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.exception.InvalidJsonRpcParameters;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.parameters.FilterParameter;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.privacy.methods.EnclavePublicKeyProvider;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcError;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcErrorResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.response.JsonRpcSuccessResponse;\n+import org.hyperledger.besu.ethereum.api.jsonrpc.internal.results.LogsResult;\n+import org.hyperledger.besu.ethereum.api.query.BlockchainQueries;\n+import org.hyperledger.besu.ethereum.api.query.LogsQuery;\n+import org.hyperledger.besu.ethereum.api.query.PrivacyQueries;\n+import org.hyperledger.besu.ethereum.core.Address;\n+import org.hyperledger.besu.ethereum.core.Hash;\n+import org.hyperledger.besu.ethereum.core.LogTopic;\n+import org.hyperledger.besu.ethereum.core.LogWithMetadata;\n+import org.hyperledger.besu.ethereum.privacy.MultiTenancyValidationException;\n+import org.hyperledger.besu.ethereum.privacy.PrivacyController;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+import com.google.common.collect.Lists;\n+import io.vertx.ext.auth.User;\n+import org.apache.tuweni.bytes.Bytes;\n+import org.apache.tuweni.bytes.Bytes32;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class PrivGetLogsTest {\n+\n+  private final String ENCLAVE_KEY = \"enclave_key\";\n+  private final String PRIVACY_GROUP_ID = \"B1aVtMxLCUHmBVHXoZzzBgPbW/wj5axDpW9X8l91SGo=\";\n+\n+  @Mock private BlockchainQueries blockchainQueries;\n+  @Mock private PrivacyQueries privacyQueries;\n+  @Mock private PrivacyController privacyController;\n+  @Mock private EnclavePublicKeyProvider enclavePublicKeyProvider;\n+\n+  private PrivGetLogs method;\n+\n+  @Before\n+  public void before() {\n+    method =\n+        new PrivGetLogs(\n+            blockchainQueries, privacyQueries, privacyController, enclavePublicKeyProvider);\n+  }\n+\n+  @Test\n+  public void getMethodReturnsCorrectMethodName() {\n+    assertThat(method.getName()).isEqualTo(\"priv_getLogs\");\n+  }\n+\n+  @Test\n+  public void privacyGroupIdIsRequired() {\n+    final JsonRpcRequestContext request = privGetLogRequest(null, mock(FilterParameter.class));\n+\n+    final Throwable thrown = catchThrowable(() -> method.response(request));\n+\n+    assertThat(thrown)\n+        .isInstanceOf(InvalidJsonRpcParameters.class)\n+        .hasMessageContaining(\"Missing required json rpc parameter at index 0\");\n+  }\n+\n+  @Test\n+  public void filterParameterIsRequired() {\n+    final JsonRpcRequestContext request = privGetLogRequest(PRIVACY_GROUP_ID, null);\n+\n+    final Throwable thrown = catchThrowable(() -> method.response(request));\n+\n+    assertThat(thrown)\n+        .isInstanceOf(InvalidJsonRpcParameters.class)\n+        .hasMessageContaining(\"Missing required json rpc parameter at index 1\");\n+  }\n+\n+  @Test\n+  public void filterWithInvalidParameters() {\n+    final FilterParameter invalidFilter =\n+        new FilterParameter(\n+            \"earliest\",\n+            \"earliest\",\n+            Collections.emptyList(),\n+            Collections.emptyList(),\n+            Hash.ZERO.toHexString());\n+\n+    final JsonRpcRequestContext request = privGetLogRequest(PRIVACY_GROUP_ID, invalidFilter);\n+\n+    final JsonRpcResponse expectedResponse =\n+        new JsonRpcErrorResponse(null, JsonRpcError.INVALID_PARAMS);\n+\n+    final JsonRpcResponse response = method.response(request);\n+\n+    assertThat(response).usingRecursiveComparison().isEqualTo(expectedResponse);\n+  }\n+\n+  @Test\n+  public void logQueryIsBuiltCorrectly() {\n+    final Hash blockHash = Hash.hash(Bytes32.random());\n+    final List<Address> addresses = List.of(Address.ZERO);\n+    final List<List<LogTopic>> logTopics = List.of(List.of(LogTopic.of(Bytes32.random())));\n+\n+    final FilterParameter blockHashFilter =\n+        new FilterParameter(null, null, addresses, logTopics, blockHash.toHexString());\n+\n+    final LogsQuery expectedQuery =\n+        new LogsQuery.Builder().addresses(addresses).topics(logTopics).build();\n+\n+    final JsonRpcRequestContext request = privGetLogRequest(PRIVACY_GROUP_ID, blockHashFilter);\n+    method.response(request);\n+\n+    verify(privacyQueries).matchingLogs(eq(PRIVACY_GROUP_ID), eq(blockHash), eq((expectedQuery)));\n+  }\n+\n+  @Test\n+  public void filterWithBlockHashQueriesOneBlockByHash() {\n+    final Hash blockHash = Hash.hash(Bytes32.random());\n+    final FilterParameter blockHashFilter =\n+        new FilterParameter(\n+            null, null, Collections.emptyList(), Collections.emptyList(), blockHash.toHexString());\n+\n+    final List<LogWithMetadata> logWithMetadataList = logWithMetadataList(3);\n+    final LogsResult expectedLogsResult = new LogsResult(logWithMetadataList);\n+\n+    when(privacyQueries.matchingLogs(eq(PRIVACY_GROUP_ID), eq(blockHash), any(LogsQuery.class)))\n+        .thenReturn(logWithMetadataList);\n+\n+    final JsonRpcRequestContext request = privGetLogRequest(PRIVACY_GROUP_ID, blockHashFilter);\n+    final JsonRpcSuccessResponse response = (JsonRpcSuccessResponse) method.response(request);\n+    final LogsResult logsResult = (LogsResult) response.getResult();\n+\n+    assertThat(logsResult).usingRecursiveComparison().isEqualTo(expectedLogsResult);\n+  }\n+\n+  @Test\n+  public void filterWithBlockRangeQueriesRangeOfBlock() {\n+    long chainHeadBlockNumber = 3L;\n+    final FilterParameter blockHashFilter =\n+        new FilterParameter(\n+            \"earliest\", \"latest\", Collections.emptyList(), Collections.emptyList(), null);\n+    final List<LogWithMetadata> logWithMetadataList = logWithMetadataList(3);\n+    final LogsResult expectedLogsResult = new LogsResult(logWithMetadataList);\n+\n+    when(blockchainQueries.headBlockNumber()).thenReturn(chainHeadBlockNumber);\n+    when(privacyQueries.matchingLogs(\n+            eq(PRIVACY_GROUP_ID), eq(0L), eq(chainHeadBlockNumber), any(LogsQuery.class)))\n+        .thenReturn(logWithMetadataList);\n+\n+    final JsonRpcRequestContext request = privGetLogRequest(PRIVACY_GROUP_ID, blockHashFilter);\n+    final JsonRpcSuccessResponse response = (JsonRpcSuccessResponse) method.response(request);\n+    final LogsResult logsResult = (LogsResult) response.getResult();\n+\n+    assertThat(logsResult).usingRecursiveComparison().isEqualTo(expectedLogsResult);\n+  }\n+\n+  @Test\n+  public void multiTenancyCheckFailure() {\n+    final User user = mock(User.class);\n+    final FilterParameter filterParameter = mock(FilterParameter.class);\n+\n+    when(enclavePublicKeyProvider.getEnclaveKey(any())).thenReturn(ENCLAVE_KEY);\n+    doThrow(new MultiTenancyValidationException(\"msg\"))\n+        .when(privacyController)\n+        .verifyPrivacyGroupContainsEnclavePublicKey(eq(PRIVACY_GROUP_ID), eq(ENCLAVE_KEY));\n+\n+    final JsonRpcRequestContext request =\n+        privGetLogRequestWithUser(PRIVACY_GROUP_ID, filterParameter, user);\n+    final Throwable thrown = catchThrowable(() -> method.response(request));\n+\n+    assertThat(thrown).isInstanceOf(MultiTenancyValidationException.class);", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NDE2Nw==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407854167", "bodyText": "are you sure that the privacyGroup cannot be null?", "author": "pinges", "createdAt": "2020-04-14T04:06:16Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyController.java", "diffHunk": "@@ -236,7 +236,8 @@ private void verifyPrivateFromMatchesEnclavePublicKey(\n     }\n   }\n \n-  private void verifyPrivacyGroupContainsEnclavePublicKey(\n+  @Override\n+  public void verifyPrivacyGroupContainsEnclavePublicKey(\n       final String privacyGroupId, final String enclavePublicKey) {\n     final PrivacyGroup privacyGroup = enclave.retrievePrivacyGroup(privacyGroupId);", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MjQ3MQ==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407872471", "bodyText": "Well, if it is null you won't find any matching privacy group, right?\nAnd in the json-rpc method we are make the privacy group id a required parameter. I don't think we need to be extra defensive here in this internal class.", "author": "lucassaldanha", "createdAt": "2020-04-14T05:17:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NDE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NDg4MQ==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407854881", "bodyText": "should that be \"getPrivateTransactionMetadataList\"?", "author": "pinges", "createdAt": "2020-04-14T04:09:18Z", "path": "ethereum/core/src/main/java/org/hyperledger/besu/ethereum/privacy/PrivateWorldStateReader.java", "diffHunk": "@@ -46,4 +54,20 @@ public PrivateWorldStateReader(\n         .flatMap(worldState -> Optional.ofNullable(worldState.get(contractAddress)))\n         .flatMap(account -> Optional.ofNullable(account.getCode()));\n   }\n+\n+  public List<PrivateTransactionMetadata> getPrivateTransactionsMetadata(", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MjU5Ng==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407872596", "bodyText": "Done", "author": "lucassaldanha", "createdAt": "2020-04-14T05:18:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NDg4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NzEzMw==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407857133", "bodyText": "Could create a const privacy group ... The same one is used twice.", "author": "pinges", "createdAt": "2020-04-14T04:18:24Z", "path": "ethereum/core/src/test/java/org/hyperledger/besu/ethereum/privacy/MultiTenancyPrivacyControllerTest.java", "diffHunk": "@@ -418,4 +419,26 @@ public void getContractCodeFailsForInvalidEnclaveKey() {\n                     PRIVACY_GROUP_ID, Address.ZERO, Hash.ZERO, ENCLAVE_PUBLIC_KEY2))\n         .hasMessage(\"Privacy group must contain the enclave public key\");\n   }\n+\n+  @Test\n+  public void verifyPrivacyGroupMatchesEnclaveKeySucceeds() {\n+    final PrivacyGroup privacyGroup =\n+        new PrivacyGroup(PRIVACY_GROUP_ID, Type.PANTHEON, \"\", \"\", List.of(ENCLAVE_PUBLIC_KEY1));", "originalCommit": "9a5976865f191fd2d7a804d5a4e59b13318b7dab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg4MTMxOA==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407881318", "bodyText": "Done :)", "author": "lucassaldanha", "createdAt": "2020-04-14T05:47:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NzEzMw=="}], "type": "inlineReview"}, {"oid": "1092f30885eebe4bcd869cf47fbaa7b80fb9f1f1", "url": "https://github.com/hyperledger/besu/commit/1092f30885eebe4bcd869cf47fbaa7b80fb9f1f1", "message": "PR comments\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-14T05:51:22Z", "type": "commit"}, {"oid": "0e97569f70ee8d51acf2e289cc6986c21f8f5a1a", "url": "https://github.com/hyperledger/besu/commit/0e97569f70ee8d51acf2e289cc6986c21f8f5a1a", "message": "priv_getLogs ATs\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-14T05:52:52Z", "type": "commit"}, {"oid": "0e97569f70ee8d51acf2e289cc6986c21f8f5a1a", "url": "https://github.com/hyperledger/besu/commit/0e97569f70ee8d51acf2e289cc6986c21f8f5a1a", "message": "priv_getLogs ATs\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-14T05:52:52Z", "type": "forcePushed"}, {"oid": "e61cc169a6c711a87a919abd5f74673034931f5d", "url": "https://github.com/hyperledger/besu/commit/e61cc169a6c711a87a919abd5f74673034931f5d", "message": "Merge branch 'master' into priv_getLogs\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-14T05:55:01Z", "type": "commit"}, {"oid": "9f724ed40e96a7f45f33fa977f1e1d77352854c4", "url": "https://github.com/hyperledger/besu/commit/9f724ed40e96a7f45f33fa977f1e1d77352854c4", "message": "Fix finals\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-14T06:01:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg5NDU2NQ==", "url": "https://github.com/hyperledger/besu/pull/686#discussion_r407894565", "bodyText": "nit: can be final", "author": "pinges", "createdAt": "2020-04-14T06:26:43Z", "path": "acceptance-tests/dsl/src/main/java/org/hyperledger/besu/tests/acceptance/dsl/privacy/contract/CallPrivateSmartContractFunction.java", "diffHunk": "@@ -46,22 +48,65 @@ public CallPrivateSmartContractFunction(\n       final long chainId,\n       final String privateFrom,\n       final List<String> privateFor) {\n+    this(\n+        contractAddress,\n+        encodedFunction,\n+        transactionSigningKey,\n+        chainId,\n+        privateFrom,\n+        privateFor,\n+        null);\n+  }\n+\n+  public CallPrivateSmartContractFunction(\n+      final String contractAddress,\n+      final String encodedFunction,\n+      final String transactionSigningKey,\n+      final long chainId,\n+      final String privateFrom,\n+      final String privacyGroupId) {\n+    this(\n+        contractAddress,\n+        encodedFunction,\n+        transactionSigningKey,\n+        chainId,\n+        privateFrom,\n+        null,\n+        privacyGroupId);\n+  }\n+\n+  private CallPrivateSmartContractFunction(\n+      final String contractAddress,\n+      final String encodedFunction,\n+      final String transactionSigningKey,\n+      final long chainId,\n+      final String privateFrom,\n+      final List<String> privateFor,\n+      final String privacyGroupId) {\n \n     this.contractAddress = contractAddress;\n     this.encodedFunction = encodedFunction;\n     this.senderCredentials = Credentials.create(transactionSigningKey);\n     this.chainId = chainId;\n     this.privateFrom = Base64String.wrap(privateFrom);\n-    this.privateFor = Base64String.wrapList(privateFor);\n+    this.privateFor = privateFor != null ? Base64String.wrapList(privateFor) : null;\n+    this.privacyGroupId = privacyGroupId != null ? Base64String.wrap(privacyGroupId) : null;\n   }\n \n   @Override\n   public String execute(final NodeRequests node) {\n     final Besu besu = node.privacy().getBesuClient();\n \n-    final PrivateTransactionManager privateTransactionManager =\n-        new LegacyPrivateTransactionManager(\n-            besu, GAS_PROVIDER, senderCredentials, chainId, privateFrom, privateFor);\n+    PrivateTransactionManager privateTransactionManager;", "originalCommit": "0e97569f70ee8d51acf2e289cc6986c21f8f5a1a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f1ce56fc6c5f689e5cc240029a7ec74f114eb39", "url": "https://github.com/hyperledger/besu/commit/9f1ce56fc6c5f689e5cc240029a7ec74f114eb39", "message": "Fix tests\n\nSigned-off-by: Lucas Saldanha <lucas.saldanha@consensys.net>", "committedDate": "2020-04-14T07:48:30Z", "type": "commit"}]}