{"pr_number": 10008, "pr_title": "Include array classes in GetClassLoaderClasses", "pr_createdAt": "2020-06-24T20:05:11Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10008", "timeline": [{"oid": "e5b1abff7e8acac7422a0e88a8a47c62f3621290", "url": "https://github.com/eclipse-openj9/openj9/commit/e5b1abff7e8acac7422a0e88a8a47c62f3621290", "message": "Include array classes in GetClassLoaderClasses\n\nGetClassLoaderClasses returns the list of classes whose loading was\ninitiated by the given class loader. Array classes defined by the loader\nmust be considered to be initiated from it.\n\nFixes: #9965\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-06-24T20:36:42Z", "type": "forcePushed"}, {"oid": "2e5bc25c78c36464a563b71a1ff669767d40c802", "url": "https://github.com/eclipse-openj9/openj9/commit/2e5bc25c78c36464a563b71a1ff669767d40c802", "message": "Include array classes in GetClassLoaderClasses\n\nGetClassLoaderClasses returns the list of classes whose loading was\ninitiated by the given class loader, including the base type primitive\narray classes. All array classes of these classes must also be returned.\n\nFixes: #9965\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-06-29T16:13:20Z", "type": "forcePushed"}, {"oid": "b345ea88c3b430b1ece478f2c886ac0a1d678b93", "url": "https://github.com/eclipse-openj9/openj9/commit/b345ea88c3b430b1ece478f2c886ac0a1d678b93", "message": "Include array classes in GetClassLoaderClasses\n\nGetClassLoaderClasses returns the list of classes whose loading was\ninitiated by the given class loader, including the base type primitive\narray classes. All array classes of these classes must also be returned.\n\nFixes: #9965\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-06-29T16:16:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNTQ2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10008#discussion_r447125465", "bodyText": "Can you cache the vm->internalVMFunctions table in a local?  A minor thing but might be a small benefit for deep array chains...", "author": "DanHeidinga", "createdAt": "2020-06-29T17:11:36Z", "path": "runtime/jvmti/jvmtiClass.c", "diffHunk": "@@ -1367,15 +1381,20 @@ copyInitiatedClass(J9Class * clazz, J9JVMTIClassStats * results)\n \n \t\tJ9JavaVM * vm = results->vm;\n \t\tJNIEnv * jniEnv = (JNIEnv *)results->currentThread;\n-\t\tjint slot = (jint)results->classCount - 1;\n-\n-\t\t/* Reverse fill */\n-\t\tif (slot >= 0) {\n-\t\t\tj9object_t classObject = J9VM_J9CLASS_TO_HEAPCLASS(clazz);\n-\t\t\t\n-\t\t\tresults->classRefs[slot] = (jclass)vm->internalVMFunctions->j9jni_createLocalRef(jniEnv, classObject);\n-\t\t\tresults->classCount = slot;\n-\t\t}\n+\n+\t\tdo {\n+\t\t\tjint slot = (jint)results->classCount - 1;\n+\n+\t\t\t/* Reverse fill */\n+\t\t\tif (slot >= 0) {\n+\t\t\t\tj9object_t classObject = J9VM_J9CLASS_TO_HEAPCLASS(clazz);\n+\t\t\t\t\n+\t\t\t\tresults->classRefs[slot] = (jclass)vm->internalVMFunctions->j9jni_createLocalRef(jniEnv, classObject);", "originalCommit": "b345ea88c3b430b1ece478f2c886ac0a1d678b93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyOTcxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10008#discussion_r447129711", "bodyText": "Done.", "author": "gacholio", "createdAt": "2020-06-29T17:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNjY3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10008#discussion_r447126673", "bodyText": "I think we've been leaning towards retiring the use of ++ for non-primitive indexes and preferring an explicit  += 1.", "author": "DanHeidinga", "createdAt": "2020-06-29T17:13:53Z", "path": "runtime/jvmti/jvmtiClass.c", "diffHunk": "@@ -237,39 +239,48 @@ jvmtiGetClassLoaderClasses(jvmtiEnv* env,\n \n \t\tomrthread_monitor_enter(vm->classTableMutex);\n \n-\t\tmemset(&stats, 0, sizeof(J9JVMTIClassStats));\n-\n \t\tstats.vm = vm;\n \t\tstats.currentThread = currentThread;\n \n \t\t/* Search for classes who have this class loader as the initiating loader (wind up count) */\n-\t\tclazz = vm->internalVMFunctions->hashClassTableStartDo(loader, &walkState);\n+\t\tclazz = vmFuncs->hashClassTableStartDo(loader, &hashWalkState);\n \t\twhile (clazz != NULL) {\n \t\t\tcountInitiatedClass(clazz, &stats);\n-\t\t\tclazz = vm->internalVMFunctions->hashClassTableNextDo(&walkState);\n+\t\t\tclazz = vmFuncs->hashClassTableNextDo(&hashWalkState);\n \t\t}\n \n+\t\t/* The base type primitive array classes must also be added */\n+\t\tprimitiveArray = &vm->booleanArrayClass;\n+\t\tdo {\n+\t\t\tcountInitiatedClass(*primitiveArray++, &stats);\t\t\t\n+\t\t} while (primitiveArray <= &vm->longArrayClass);\n+\n \t\tstats.classRefs = j9mem_allocate_memory(stats.classCount * sizeof(jclass), J9MEM_CATEGORY_JVMTI_ALLOCATE);\n \t\tif (stats.classRefs == NULL) {\n \t\t\trc = JVMTI_ERROR_OUT_OF_MEMORY;\n \t\t} else {\n-\n \t\t\t/* Save count before it gets modified below... */\n \t\t\trv_class_count = (jint) stats.classCount;\n \t\t\trv_classes = stats.classRefs;\n \n \t\t\t/* Record classes who have this class loader as the initiating loader (wind down count) */\n-\t\t\tclazz = vm->internalVMFunctions->hashClassTableStartDo(loader, &walkState);\n+\t\t\tclazz = vmFuncs->hashClassTableStartDo(loader, &hashWalkState);\n \t\t\twhile (clazz != NULL) {\n \t\t\t\tcopyInitiatedClass(clazz, &stats);\n-\t\t\t\tclazz = vm->internalVMFunctions->hashClassTableNextDo(&walkState);\n+\t\t\t\tclazz = vmFuncs->hashClassTableNextDo(&hashWalkState);\n \t\t\t}\n+\n+\t\t\t/* The base type primitive array classes must also be added */\n+\t\t\tprimitiveArray = &vm->booleanArrayClass;\n+\t\t\tdo {\n+\t\t\t\tcopyInitiatedClass(*primitiveArray++, &stats);\t\t\t", "originalCommit": "b345ea88c3b430b1ece478f2c886ac0a1d678b93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyOTc5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10008#discussion_r447129795", "bodyText": "Done.", "author": "gacholio", "createdAt": "2020-06-29T17:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyNjY3Mw=="}], "type": "inlineReview"}, {"oid": "d1e12595f6a4556d614ecefeb78127b350b92f27", "url": "https://github.com/eclipse-openj9/openj9/commit/d1e12595f6a4556d614ecefeb78127b350b92f27", "message": "Include array classes in GetClassLoaderClasses\n\nGetClassLoaderClasses returns the list of classes whose loading was\ninitiated by the given class loader, including the base type primitive\narray classes. All array classes of these classes must also be returned.\n\nFixes: #9965\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-06-29T17:18:46Z", "type": "commit"}, {"oid": "d1e12595f6a4556d614ecefeb78127b350b92f27", "url": "https://github.com/eclipse-openj9/openj9/commit/d1e12595f6a4556d614ecefeb78127b350b92f27", "message": "Include array classes in GetClassLoaderClasses\n\nGetClassLoaderClasses returns the list of classes whose loading was\ninitiated by the given class loader, including the base type primitive\narray classes. All array classes of these classes must also be returned.\n\nFixes: #9965\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-06-29T17:18:46Z", "type": "forcePushed"}]}