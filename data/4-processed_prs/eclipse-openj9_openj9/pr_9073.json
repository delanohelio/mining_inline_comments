{"pr_number": 9073, "pr_title": "Prepare Power UnresolvedDataSnippet for OMR changes", "pr_createdAt": "2020-04-01T17:20:17Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9073", "timeline": [{"oid": "1d3135fe74e3f8579e37b25ced1a43a274623fd8", "url": "https://github.com/eclipse-openj9/openj9/commit/1d3135fe74e3f8579e37b25ced1a43a274623fd8", "message": "Prepare Power UnresolvedDataSnippet for OMR changes\n\nPreviously, Power's UnresolvedDataSnippet took the address of the\ninstruction it should patch within the binary-encoded buffer. However,\nthe binary encoder refactors currently happening in OMR will make\nunresolved-related expansion occur before binary encoding, making it\nimpossible to provide this information at that time. Instead, the\nTR::Instruction object of the corresponding instruction will need to be\nused instead.\n\nTo avoid breaking OpenJ9, it's necessary to make sure it can handle both\nmethods of passing the instruction until the refactor is complete. To\naccomplish this, Power's UnresolvedDataSnippet will determine which\nmethod to use at runtime for the time being by overriding\ngetAddressOfDataReference. Once the refactors are complete, this hack\ncan be removed and the TR::Instruction method can be used\nunconditionally.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>", "committedDate": "2020-04-01T17:22:00Z", "type": "commit"}, {"oid": "1d3135fe74e3f8579e37b25ced1a43a274623fd8", "url": "https://github.com/eclipse-openj9/openj9/commit/1d3135fe74e3f8579e37b25ced1a43a274623fd8", "message": "Prepare Power UnresolvedDataSnippet for OMR changes\n\nPreviously, Power's UnresolvedDataSnippet took the address of the\ninstruction it should patch within the binary-encoded buffer. However,\nthe binary encoder refactors currently happening in OMR will make\nunresolved-related expansion occur before binary encoding, making it\nimpossible to provide this information at that time. Instead, the\nTR::Instruction object of the corresponding instruction will need to be\nused instead.\n\nTo avoid breaking OpenJ9, it's necessary to make sure it can handle both\nmethods of passing the instruction until the refactor is complete. To\naccomplish this, Power's UnresolvedDataSnippet will determine which\nmethod to use at runtime for the time being by overriding\ngetAddressOfDataReference. Once the refactors are complete, this hack\ncan be removed and the TR::Instruction method can be used\nunconditionally.\n\nSigned-off-by: Ben Thomas <ben@benthomas.ca>", "committedDate": "2020-04-01T17:22:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMzE5MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9073#discussion_r401803190", "bodyText": "Will this return null at the time of the merge?", "author": "gita-omr", "createdAt": "2020-04-01T17:55:57Z", "path": "runtime/compiler/p/codegen/J9UnresolvedDataSnippet.cpp", "diffHunk": "@@ -66,6 +67,13 @@ J9::Power::UnresolvedDataSnippet::UnresolvedDataSnippet(\n    {\n    }\n \n+uint8_t *J9::Power::UnresolvedDataSnippet::getAddressOfDataReference()\n+   {\n+   if (self()->getDataReferenceInstruction())", "originalCommit": "1d3135fe74e3f8579e37b25ced1a43a274623fd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgyODYxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9073#discussion_r401828617", "bodyText": "Yes, this currently returns NULL on Power. Other codegens do use this, but the Power codegen doesn't ever populate this field.", "author": "aviansie-ben", "createdAt": "2020-04-01T18:39:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMzE5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMzk1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9073#discussion_r401803953", "bodyText": "With the new expansion phase, will the binary encoding address be available at that time?", "author": "gita-omr", "createdAt": "2020-04-01T17:57:16Z", "path": "runtime/compiler/p/codegen/J9UnresolvedDataSnippet.cpp", "diffHunk": "@@ -66,6 +67,13 @@ J9::Power::UnresolvedDataSnippet::UnresolvedDataSnippet(\n    {\n    }\n \n+uint8_t *J9::Power::UnresolvedDataSnippet::getAddressOfDataReference()\n+   {\n+   if (self()->getDataReferenceInstruction())\n+      return self()->getDataReferenceInstruction()->getBinaryEncoding();", "originalCommit": "1d3135fe74e3f8579e37b25ced1a43a274623fd8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgzMDMyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9073#discussion_r401830329", "bodyText": "The binary encoding address is not available during instruction expansion, since that runs before binary encoding. This method is later called when populating the snippet after binary encoding is already run, so the binary encoding address is available at that time.", "author": "aviansie-ben", "createdAt": "2020-04-01T18:42:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTgwMzk1Mw=="}], "type": "inlineReview"}]}