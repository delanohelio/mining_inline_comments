{"pr_number": 10761, "pr_title": "Add jextract option to disable buildID check", "pr_createdAt": "2020-10-01T17:44:35Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10761", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNzE1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498427151", "bodyText": "This is using uninitialized variables. Also total is unused outside of this disabled block of code.", "author": "pshipton", "createdAt": "2020-10-01T18:07:36Z", "path": "runtime/jextractnatives/jextractnatives.c", "diffHunk": "@@ -461,37 +455,38 @@ flushCache(void)\n /**\n  * This function implements a very simple caching scheme to accelerate the reading of small objects.\n  * A more sophisticated scheme is implemented in the Java code. This cache allows us to bypass\n- * the relatively expensive call-in to Java for most objects. During a normal jextract run we expect \n+ * the relatively expensive call-in to Java for most objects. During a normal jextract run we expect\n  * the cache to have a hit rate of over 90%.\n  */\n-static void \n+static void\n readCachedMemory(UDATA address, void *structure, UDATA size, UDATA *bytesRead)\n {\n-\tstatic UDATA hits, total;\n+\tstatic UDATA hits;\n+\tstatic UDATA total;\n \n \tdbgCacheElement* thisElement = NULL;\n \tUDATA lineStart = address & ~(UDATA)(sizeof(thisElement->data) - 1);\n \tUDATA endAddress = address + size;\n \n #if 0\n-\tif ( ((++total) % (16 * 1024)) == 0) {\n-\t\tdbgPrint(\"Cache hit rate: %.2f\\n\", (float)hits / (float)(total));\n+\tif (((++total) % (16 * 1024)) == 0) {", "originalCommit": "c4b4e9cecb78a98b9d88cd211085d810133574f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0NTQyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498445424", "bodyText": "The C language guarantees that static variables are initialized to zero.\nI'll make that explicit and make all the statistical stuff conditional.", "author": "keithc-ca", "createdAt": "2020-10-01T18:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNzE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjgyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498436828", "bodyText": "I think the option to disable the check should be mentioned in this message.", "author": "pshipton", "createdAt": "2020-10-01T18:26:07Z", "path": "runtime/jextractnatives/jextractnatives.c", "diffHunk": "@@ -127,70 +120,76 @@ validateDump(JNIEnv *env)\n \t\treturn JNI_FALSE;\n \t}\n \n-#if !defined (J9VM_RAS_EYECATCHERS)\n+#if !defined(J9VM_RAS_EYECATCHERS)\n \t(*env)->ThrowNew(env, errorClazz, \"RAS is not enabled on this platform\");\n \treturn JNI_FALSE;\n #else\n-\n-\n \tfor(;;) {\n \t\tJ9RAS *ras = NULL;\n-\t\tconst char* rasString = \"J9VMRAS\";\n+\t\tconst char *rasString = \"J9VMRAS\";\n \n \t\tif (callFindPattern((U_8*)rasString, sizeof(rasString), 8, startFrom, &eyecatcher)) {\n \t\t\t(*env)->ThrowNew(env, errorClazz, \"An error occurred while searching for the J9VMRAS eyecatcher\");\n \t\t\treturn JNI_FALSE;\n \t\t}\n \n \t\tif (eyecatcher == (jlong)-1) {\n-\t\t\tj9str_printf(PORTLIB, \n-\t\t\t\t\terrBuf, sizeof(errBuf), \n+\t\t\tj9str_printf(PORTLIB,\n+\t\t\t\t\terrBuf, sizeof(errBuf),\n \t\t\t\t\t\"JVM anchor block (J9VMRAS) not found in dump. Dump may be truncated, corrupted or contains a partially initialized JVM.\");\n \t\t\t(*env)->ThrowNew(env, errorClazz, errBuf);\n \t\t\treturn JNI_FALSE;\n \t\t}\n \n-#if !defined (J9VM_ENV_DATA64)\n-\t\tif ( (U_64)eyecatcher > (U_64)0xFFFFFFFF ) {\n-\t\t\tj9str_printf(PORTLIB, \n-\t\t\t\terrBuf, sizeof(errBuf), \n-\t\t\t\t\"J9RAS is out of range for a 32-bit pointer (0x%16.16llx). This version of jextract is incompatible with this dump.\", \n+#if !defined(J9VM_ENV_DATA64)\n+\t\tif ((U_64)eyecatcher > (U_64)0xFFFFFFFF) {\n+\t\t\tj9str_printf(PORTLIB,\n+\t\t\t\terrBuf, sizeof(errBuf),\n+\t\t\t\t\"J9RAS is out of range for a 32-bit pointer (0x%16.16llx). This version of jextract is incompatible with this dump.\",\n \t\t\t\teyecatcher);\n \t\t\t(*env)->ThrowNew(env, errorClazz, errBuf);\n \t\t\treturn JNI_FALSE;\n \t\t}\n #endif\n-\t\t/* Allocate this, since on 64bit platforms we want to know now that we can't allocate\n-\t\t * the scratch space. This allows us to exit early with a simple error message */\n+\t\t/* Allocate this, since on 64-bit platforms we want to know now that we can't allocate\n+\t\t * the scratch space. This allows us to exit early with a simple error message.\n+\t\t */\n \t\tras = dbgMallocAndRead(sizeof(J9RAS), (void *)(UDATA)eyecatcher);\n \t\tif (ras != NULL) {\n \t\t\tif (ras->bitpattern1 == 0xaa55aa55 && ras->bitpattern2 == 0xaa55aa55) {\n \t\t\t\tif (ras->version != J9RASVersion) {\n-\t\t\t\t\tj9str_printf(PORTLIB, \n-\t\t\t\t\t\terrBuf, sizeof(errBuf), \n-\t\t\t\t\t\t\"J9RAS.version is incorrect (found %u, expecting %u). This version of jextract is incompatible with this dump.\", \n+\t\t\t\t\tj9str_printf(PORTLIB,\n+\t\t\t\t\t\terrBuf, sizeof(errBuf),\n+\t\t\t\t\t\t\"J9RAS.version is incorrect (found %u, expecting %u). This version of jextract is incompatible with this dump.\",\n \t\t\t\t\t\tras->version,\n \t\t\t\t\t\tJ9RASVersion);\n \t\t\t\t\t(*env)->ThrowNew(env, errorClazz, errBuf);\n \t\t\t\t\treturn JNI_FALSE;\n \t\t\t\t}\n \t\t\t\tif (ras->length != sizeof(J9RAS)) {\n-\t\t\t\t\tj9str_printf(PORTLIB, \n-\t\t\t\t\t\terrBuf, sizeof(errBuf), \n-\t\t\t\t\t\t\"J9RAS.length is incorrect (found %u, expecting %u). This version of jextract is incompatible with this dump.\", \n+\t\t\t\t\tj9str_printf(PORTLIB,\n+\t\t\t\t\t\terrBuf, sizeof(errBuf),\n+\t\t\t\t\t\t\"J9RAS.length is incorrect (found %u, expecting %u). This version of jextract is incompatible with this dump.\",\n \t\t\t\t\t\tras->length,\n \t\t\t\t\t\tsizeof(J9RAS));\n \t\t\t\t\t(*env)->ThrowNew(env, errorClazz, errBuf);\n \t\t\t\t\treturn JNI_FALSE;\n \t\t\t\t}\n \t\t\t\tif (ras->buildID != J9UniqueBuildID) {\n-\t\t\t\t\tj9str_printf(PORTLIB, \n-\t\t\t\t\t\terrBuf, sizeof(errBuf), \n-\t\t\t\t\t\t\"J9RAS.buildID is incorrect (found %llx, expecting %llx). This version of jextract is incompatible with this dump.\", \n+\t\t\t\t\tj9str_printf(PORTLIB,\n+\t\t\t\t\t\terrBuf, sizeof(errBuf),\n+\t\t\t\t\t\t\"J9RAS.buildID is incorrect (found %llx, expecting %llx). This version of jextract is incompatible with this dump.\",", "originalCommit": "c4b4e9cecb78a98b9d88cd211085d810133574f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ0NDg2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498444866", "bodyText": "I thought of that, but I wasn't sure how obscure the bypass should be. If we're going to explicitly call it out, perhaps it should just be a normal command-line option?", "author": "keithc-ca", "createdAt": "2020-10-01T18:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NDEwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498454109", "bodyText": "I'm not sure how big the impact to service will be. If it turns out some customers are running jextract from a different JVM version, we should mitigate the impact by making it easy to find the workaround. I don't have strong feelings either way for sticking with the current option or making it a command line option.", "author": "pshipton", "createdAt": "2020-10-01T18:59:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ1NjQ5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498456497", "bodyText": "It's both easier to talk about and use if it's a command-line option: how about -r (relax checking)?\nI'll also document the remaining supported options.", "author": "keithc-ca", "createdAt": "2020-10-01T19:04:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjgyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ2MzM1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498463356", "bodyText": "Seems consistent with the other options in the help, -f and -v.", "author": "pshipton", "createdAt": "2020-10-01T19:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzNjgyOA=="}], "type": "inlineReview"}, {"oid": "741c5953c6816da7c5f0dc40071dd65b89c887df", "url": "https://github.com/eclipse-openj9/openj9/commit/741c5953c6816da7c5f0dc40071dd65b89c887df", "message": "Add jextract option to disable buildID check\n\nDisable check if '-r' option is present.\n\n* always query environment pointer before analyzing dump\n* clean up jextract support code\n* describe all options in '-help' output\n* generate J9VM_UNIQUE_BUILD_ID randomly for cmake builds\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-10-01T19:39:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4ODk0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498488943", "bodyText": "-interactive is no longer useful, it was replaced by DDR. We kept it alive after DDR was available to support the trprint subcommand, but trying to run that, it doesn't seem to work very well any more and I don't think anybody uses it. Bottom line, it shouldn't be included in the help, and I expect we could delete all the associated code.", "author": "pshipton", "createdAt": "2020-10-01T20:13:49Z", "path": "jcl/src/openj9.dtfj/share/classes/com/ibm/jvm/j9/dump/extract/Main.java", "diffHunk": "@@ -367,20 +353,18 @@ private static void ensure(boolean condition, String errorMessage) {\n \t}\n \n \tprivate static void usageMessage(String message, int code) {\n-\t\treport(\"Usage: jextract dump_name [output_filename] [options]\"); //$NON-NLS-1$\n-\t\treport(\" output filename defaults to dump_name.zip\"); //$NON-NLS-1$\n-\t\treport(\" options:\"); //$NON-NLS-1$\n-\t\treport(\"   -f executable_name override executable name\"); //$NON-NLS-1$\n-\t\treport(\"   -help              print this usage message\"); //$NON-NLS-1$\n-\t\treport(\"   -v                 enable verbose output\"); //$NON-NLS-1$\n-\t\tif (_throwExceptions) {\n-\t\t\tthrow new JExtractFatalException(message, code);\n-\t\t} else {\n-\t\t\tif (message != null) {\n-\t\t\t\treport(message);\n-\t\t\t}\n-\t\t\tSystem.exit(code);\n-\t\t}\n+\t\treport(\"Usage: jextract [options] dump_name [output_filename]\"); //$NON-NLS-1$\n+\t\treport(\"  output filename defaults to dump_name.zip\"); //$NON-NLS-1$\n+\t\treport(\"  options:\"); //$NON-NLS-1$\n+\t\treport(\"    -e                  throw exceptions instead of calling System.exit()\"); //$NON-NLS-1$\n+\t\treport(\"    -f executable_name  override executable name\"); //$NON-NLS-1$\n+\t\treport(\"    -help               print this usage message\"); //$NON-NLS-1$\n+\t\treport(\"    -interactive        start an interactive session\"); //$NON-NLS-1$", "originalCommit": "741c5953c6816da7c5f0dc40071dd65b89c887df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5Mzc3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498493773", "bodyText": "Ok, I won't mention -interactive. I created #10764 to track removing the option and the support infrastructure.", "author": "keithc-ca", "createdAt": "2020-10-01T20:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4ODk0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4OTQyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498489429", "bodyText": "I don't understand the purpose of this, perhaps a more detailed message is appropriate.", "author": "pshipton", "createdAt": "2020-10-01T20:14:48Z", "path": "jcl/src/openj9.dtfj/share/classes/com/ibm/jvm/j9/dump/extract/Main.java", "diffHunk": "@@ -367,20 +353,18 @@ private static void ensure(boolean condition, String errorMessage) {\n \t}\n \n \tprivate static void usageMessage(String message, int code) {\n-\t\treport(\"Usage: jextract dump_name [output_filename] [options]\"); //$NON-NLS-1$\n-\t\treport(\" output filename defaults to dump_name.zip\"); //$NON-NLS-1$\n-\t\treport(\" options:\"); //$NON-NLS-1$\n-\t\treport(\"   -f executable_name override executable name\"); //$NON-NLS-1$\n-\t\treport(\"   -help              print this usage message\"); //$NON-NLS-1$\n-\t\treport(\"   -v                 enable verbose output\"); //$NON-NLS-1$\n-\t\tif (_throwExceptions) {\n-\t\t\tthrow new JExtractFatalException(message, code);\n-\t\t} else {\n-\t\t\tif (message != null) {\n-\t\t\t\treport(message);\n-\t\t\t}\n-\t\t\tSystem.exit(code);\n-\t\t}\n+\t\treport(\"Usage: jextract [options] dump_name [output_filename]\"); //$NON-NLS-1$\n+\t\treport(\"  output filename defaults to dump_name.zip\"); //$NON-NLS-1$\n+\t\treport(\"  options:\"); //$NON-NLS-1$\n+\t\treport(\"    -e                  throw exceptions instead of calling System.exit()\"); //$NON-NLS-1$\n+\t\treport(\"    -f executable_name  override executable name\"); //$NON-NLS-1$\n+\t\treport(\"    -help               print this usage message\"); //$NON-NLS-1$\n+\t\treport(\"    -interactive        start an interactive session\"); //$NON-NLS-1$\n+\t\treport(\"    -p prefix           prefix for all paths (absolute or relative)\"); //$NON-NLS-1$\n+\t\treport(\"    -r                  relax version checking\"); //$NON-NLS-1$\n+\t\treport(\"    -v                  enable verbose output\"); //$NON-NLS-1$\n+\t\treport(\"    --                  mark end of options\"); //$NON-NLS-1$", "originalCommit": "741c5953c6816da7c5f0dc40071dd65b89c887df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NTUzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498495530", "bodyText": "This is a commonly supported option with the meaning that subsequent arguments are not treated as options (even if they begin with -). A (perhaps unlikely) example:\njextract -r -- -v\n\nconsiders the file named -v to be the core file.", "author": "keithc-ca", "createdAt": "2020-10-01T20:27:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4OTQyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5NzM0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10761#discussion_r498497346", "bodyText": "I think it's a GNU convention; see the bash manual, for example.", "author": "keithc-ca", "createdAt": "2020-10-01T20:31:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ4OTQyOQ=="}], "type": "inlineReview"}, {"oid": "26b7b6c3c3906047f54dc17eb5c696c8809e81bc", "url": "https://github.com/eclipse-openj9/openj9/commit/26b7b6c3c3906047f54dc17eb5c696c8809e81bc", "message": "Add jextract option to disable buildID check\n\nDisable check if '-r' option is present.\n\n* always query environment pointer before analyzing dump\n* clean up jextract support code\n* describe all options in '-help' output\n* generate J9VM_UNIQUE_BUILD_ID randomly for cmake builds\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-10-01T20:32:27Z", "type": "forcePushed"}, {"oid": "d3544d45a0f10ccb31e8a1d5405ed1c0e07b4ca8", "url": "https://github.com/eclipse-openj9/openj9/commit/d3544d45a0f10ccb31e8a1d5405ed1c0e07b4ca8", "message": "Add jextract option to disable buildID check\n\nDisable check if '-r' option is present.\n\n* always query environment pointer before analyzing dump\n* clean up jextract support code\n* describe all options in '-help' output\n* generate J9VM_UNIQUE_BUILD_ID randomly for cmake builds\n* UMA: generate the same unique buildID for compressed and default\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-10-02T16:06:36Z", "type": "commit"}, {"oid": "d3544d45a0f10ccb31e8a1d5405ed1c0e07b4ca8", "url": "https://github.com/eclipse-openj9/openj9/commit/d3544d45a0f10ccb31e8a1d5405ed1c0e07b4ca8", "message": "Add jextract option to disable buildID check\n\nDisable check if '-r' option is present.\n\n* always query environment pointer before analyzing dump\n* clean up jextract support code\n* describe all options in '-help' output\n* generate J9VM_UNIQUE_BUILD_ID randomly for cmake builds\n* UMA: generate the same unique buildID for compressed and default\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-10-02T16:06:36Z", "type": "forcePushed"}]}