{"pr_number": 9139, "pr_title": "Avoid value type inline allocations", "pr_createdAt": "2020-04-06T19:03:58Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9139", "timeline": [{"oid": "2874c11efd6c2dc4efb6bd5efddb1676030f567d", "url": "https://github.com/eclipse-openj9/openj9/commit/2874c11efd6c2dc4efb6bd5efddb1676030f567d", "message": "Ensure that jitNewObject for value type is not evaluated inline\n\nIn the prototype implementation of value types, if the class specified\nfor the NEW bytecode instruction is a value type, an InstantiationError\nmust be thrown.  Value type instances are only created through the\ndefaultvalue and withfield bytecode instructions.\n\nIf the class passed to the jitNewObject helper is known to be a value\ntype, have canAllocateInlineClass return false for it.  That prevents\nthe JIT from generating inline code for allocating an instance,\nincluding preventing it from being eligible for escape analysis.  That\nensures the helper is called at runtime, allowing it to throw the\nrequired InstantiationError.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-04-06T14:18:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDAzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r405804030", "bodyText": "Just to clarify, \"unflattened value type\" means a value type that is not the reference project of the type?", "author": "Leonardo2718", "createdAt": "2020-04-08T20:46:03Z", "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -1076,6 +1076,23 @@ int32_t TR_EscapeAnalysis::performAnalysisOnce()\n                traceMsg(comp(), \"   Make [%p] non-local because we can't have locking when candidate escapes in cold blocks\\n\", candidate->_node);\n             }\n \n+         // Value type fields of objects created with a NEW bytecode must be initialized\n+         // with their default values.  EA is not yet set up to perform such iniitialization,\n+         // so remove the candidate from consideration.\n+         if (candidate->_kind == TR::New)\n+            {\n+            TR_OpaqueClassBlock *clazz = (TR_OpaqueClassBlock *)candidate->_node->getFirstChild()->getSymbol()->getStaticSymbol()->getStaticAddress();\n+\n+            if (!TR::Compiler->cls.isZeroInitializable(clazz))\n+               {\n+               if (trace())\n+                  traceMsg(comp(), \"   Fail [%p] because the candidate is not zero initializable (that is, it has a field that is an unflattened value type)\\n\", candidate->_node);", "originalCommit": "89a6f471bd5000458aefa91d54a9f0b17ff1cfdc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMDM5Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406210392", "bodyText": "It means the fields of the value type field haven't been \"inlined\" into the class that contains that field.  I will reword this to make things more clear.", "author": "hzongaro", "createdAt": "2020-04-09T13:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDAzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3Njk0MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r407676940", "bodyText": "Revised wording in commit d897b43", "author": "hzongaro", "createdAt": "2020-04-13T19:42:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNDAzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNTgxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r405805819", "bodyText": "Can I suggest making this a const?", "author": "Leonardo2718", "createdAt": "2020-04-08T20:49:13Z", "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -617,6 +617,8 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n \n    bool generateArraylets = self()->generateArraylets();\n \n+   bool areValueTypesEnabled = TR::Compiler->om.areValueTypesEnabled();", "originalCommit": "ed0d00d2bc63a98162302a40aab45f56c785ae18", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NjU3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r407676576", "bodyText": "Added const in commit b27c9e6", "author": "hzongaro", "createdAt": "2020-04-13T19:41:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNTgxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5OTE2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406199166", "bodyText": "How does this fail happen - the trace says there is a failure, but the candidate isn't removed?", "author": "andrewcraik", "createdAt": "2020-04-09T13:22:18Z", "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -1169,6 +1187,16 @@ int32_t TR_EscapeAnalysis::performAnalysisOnce()\n                rememoize(candidate);\n                _candidates.remove(candidate);\n                }\n+            else\n+               {\n+               TR_OpaqueClassBlock *clazz = (TR_OpaqueClassBlock*)classNode->getSymbol()->castToStaticSymbol()->getStaticAddress();\n+\n+               if (TR::Compiler->cls.isValueTypeClass(clazz))\n+                  {\n+                  if (trace())\n+                     traceMsg(comp(), \"   Fail [%p] because array has value type elements\\n\", candidate->_node);", "originalCommit": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxMTAwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406211000", "bodyText": "Thanks for catching that mistake.", "author": "hzongaro", "createdAt": "2020-04-09T13:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5OTE2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NjIzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r407676234", "bodyText": "Corrected in commit d897b43", "author": "hzongaro", "createdAt": "2020-04-13T19:40:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE5OTE2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMDMwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406200309", "bodyText": "This is a pretty big thing since the dynamic allocations won't work - can we have a debug counter and a trace statement? Ultimately we would want to check at runtime if we could do the inline allocation otherwise call out, but this is fine as a first step for functional correctness.", "author": "andrewcraik", "createdAt": "2020-04-09T13:23:54Z", "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -665,11 +667,12 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n       {\n       classRef      = node->getSecondChild();\n \n-      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation\n+      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation,\n+      // unless value types are enabled, in which case return -1 to prevent inline allocation\n       if (classRef->getOpCodeValue() != TR::loadaddr)\n          {\n          classInfo = NULL;\n-         return 0;\n+         return areValueTypesEnabled ? -1 : 0;", "originalCommit": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY3NTU4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r407675580", "bodyText": "Good point!  Added a new debug counter in this revised commit:  b27c9e6", "author": "hzongaro", "createdAt": "2020-04-13T19:39:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwMDMwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTg1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406251856", "bodyText": "I'd like to see TraceAssert added to inlineAllocateIndexableObject and similar helpers to validate that we're not passing any classes that have the J9ClassContainsUnflattenedFlattenables bit set.\nThe assert should be guarded by J9VM_OPT_VALHALLA_VALUE_TYPES.  FYI @tajila", "author": "DanHeidinga", "createdAt": "2020-04-09T14:37:19Z", "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -756,7 +756,7 @@ class VM_VMHelpers\n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n \t\tif (J9_IS_J9CLASS_FLATTENED(arrayClass)) {\n \t\t\tinstance = objectAllocate->inlineAllocateIndexableValueTypeObject(currentThread, arrayClass, size, initializeSlots, memoryBarrier, sizeCheck);\n-\t\t} else\n+\t\t} else if (J9_ARE_NO_BITS_SET(arrayClass->classFlags, J9ClassContainsUnflattenedFlattenables))", "originalCommit": "e91dcf5de46b3fb00e676d5474e337e7d3e411ab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1NTczMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406255731", "bodyText": "Looking at the interpreter code, I think we have different semantics there and may trip up on a case like:\ninline class I {\n   int a;\n   int b;\n}\n\nclass Bad {\n  I i;\n  int c;\n}\n\nnew Bad[10];\nSee\nhttps://github.com/eclipse/openj9/blob/c6b594b6c03f957bb6a07f5d234a6d996037a17f/runtime/vm/BytecodeInterpreter.hpp#L1079-L1087\nwhich calls:\nhttps://github.com/eclipse/openj9/blob/c6b594b6c03f957bb6a07f5d234a6d996037a17f/runtime/vm/BytecodeInterpreter.hpp#L1051-L1061\nwhich means either the inline allocate code already handles this or the interpreter needs to be fixed too", "author": "DanHeidinga", "createdAt": "2020-04-09T14:42:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTg1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MzkzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r406283934", "bodyText": "Based on @tajila's response, the code I missed is in the anewarray implementation:\nhttps://github.com/eclipse/openj9/blob/c6b594b6c03f957bb6a07f5d234a6d996037a17f/runtime/vm/BytecodeInterpreter.hpp#L7569-L7574", "author": "DanHeidinga", "createdAt": "2020-04-09T15:22:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MTg1Ng=="}], "type": "inlineReview"}, {"oid": "d897b437a02626a45d5be525d10a50d192db14c1", "url": "https://github.com/eclipse-openj9/openj9/commit/d897b437a02626a45d5be525d10a50d192db14c1", "message": "Avoid Escape Analysis for objects or arrays involving value types\n\nA value type field of an object created by the NEW bytecode must be\ninitialized with the default value of the field.  Escape Analysis is\nnot yet prepared to perform that initialization, so for now such objects\nmust not be stack allocated.\n\nSimilarly, an array whose element type is a value type has its elements\ninitialized by the ANEWARRAY or MULTIANEWARRAY bytecode with the\ndefault value of the type, but Escape Analysis is not yet set up to\nperform such initialization, so such arrays must not be stack allocated\nfor now.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-04-13T18:09:23Z", "type": "commit"}, {"oid": "b50419689b2cd71d4ad7306e2d6e3995a5ab0802", "url": "https://github.com/eclipse-openj9/openj9/commit/b50419689b2cd71d4ad7306e2d6e3995a5ab0802", "message": "Check for array elements with value type fields\n\nCheck whether array elements have value type fields that have not been\nflattened in deciding whether inline allocation can be used to allocate\nthe array.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-04-13T18:09:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1Nzk1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r409657950", "bodyText": "Windows build failure due to the reference to the uninitialized size variable in the call to traceMsg.", "author": "hzongaro", "createdAt": "2020-04-16T15:41:48Z", "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -665,11 +667,26 @@ J9::Compilation::canAllocateInline(TR::Node* node, TR_OpaqueClassBlock* &classIn\n       {\n       classRef      = node->getSecondChild();\n \n-      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation\n+      // In the case of dynamic array allocation, return 0 indicating variable dynamic array allocation,\n+      // unless value types are enabled, in which case return -1 to prevent inline allocation\n       if (classRef->getOpCodeValue() != TR::loadaddr)\n          {\n          classInfo = NULL;\n-         return 0;\n+         if (areValueTypesEnabled)\n+            {\n+            if (self()->getOption(TR_TraceCG))\n+               {\n+               traceMsg(self(), \"cannot inline array allocation @ node %p because value types are enabled\\n\", node, size);", "originalCommit": "b50419689b2cd71d4ad7306e2d6e3995a5ab0802", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4OTEzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9139#discussion_r409689134", "bodyText": "Corrected in commit a328c03", "author": "hzongaro", "createdAt": "2020-04-16T16:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY1Nzk1MA=="}], "type": "inlineReview"}, {"oid": "a328c0329eb9ecb0ba1648741437e5cb24d151ad", "url": "https://github.com/eclipse-openj9/openj9/commit/a328c0329eb9ecb0ba1648741437e5cb24d151ad", "message": "Avoid inline allocation of arrays of value types\n\nAn array whose elements are of a value type needs to be initialized\nwith the default value of its elements' value type when it is\ncreated with an ANEWARRAY or MULTIANEWARRAY bytecode.  Inline\nallocation of arrays is not yet able to handle this, so inline\nallocation has to be prevented for such arrays.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-04-16T15:47:27Z", "type": "commit"}, {"oid": "9066f729bd7b8dcdda01175419aaac8f86fdeba8", "url": "https://github.com/eclipse-openj9/openj9/commit/9066f729bd7b8dcdda01175419aaac8f86fdeba8", "message": "Check for array elements with value type fields\n\nCheck whether array elements have value type fields that have not been\nflattened in deciding whether inline allocation can be used to allocate\nthe array.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-04-16T15:47:53Z", "type": "commit"}, {"oid": "9066f729bd7b8dcdda01175419aaac8f86fdeba8", "url": "https://github.com/eclipse-openj9/openj9/commit/9066f729bd7b8dcdda01175419aaac8f86fdeba8", "message": "Check for array elements with value type fields\n\nCheck whether array elements have value type fields that have not been\nflattened in deciding whether inline allocation can be used to allocate\nthe array.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-04-16T15:47:53Z", "type": "forcePushed"}]}