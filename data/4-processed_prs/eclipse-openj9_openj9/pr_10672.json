{"pr_number": 10672, "pr_title": "Use Start PC from isCompiled API", "pr_createdAt": "2020-09-23T14:27:40Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10672", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0OTk2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493749968", "bodyText": "maybe this would be better named as getEntryIfCompiled() or something like that?", "author": "mstoodle", "createdAt": "2020-09-23T17:02:17Z", "path": "runtime/compiler/control/CompilationRuntime.hpp", "diffHunk": "@@ -457,17 +457,31 @@ class CompilationInfo\n    static JITServer::ServerStream *getStream();\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    static bool isInterpreted(J9Method *method) { return !isCompiled(method); }\n-   static bool isCompiled(J9Method *method)\n+\n+   /**\n+    * @brief Determines if a J9Method is compiled\n+    *\n+    * @param method pointer to the J9Method\n+    *\n+    * @return The start PC if compiled, NULL otherwise\n+    */\n+   static void* isCompiled(J9Method *method)", "originalCommit": "e5336f6c1b04641d0dba7861488a221fbe70b66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1MjY1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493752657", "bodyText": "I could do that; do you want me to do that in this PR (noting that the PR builds are already underway and that the changes in this PR are going to be cherry-picked into the 0.23 branch) or is it ok if I make the change in another PR?", "author": "dsouzai", "createdAt": "2020-09-23T17:06:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0OTk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc1OTIwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493759201", "bodyText": "if you think it's the right approach, you can follow on in another PR, I suppose. wouldn't you want the second PR to be cherry picked too?", "author": "mstoodle", "createdAt": "2020-09-23T17:17:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0OTk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDg1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493760855", "bodyText": "I guess I'm thinking of it from a broader 'clean up how we interact with the extra' field approach. However, if you would want the getEntryIfCompiled() API in 0.23 then I might as well do it in this PR.", "author": "dsouzai", "createdAt": "2020-09-23T17:20:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0OTk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493760174", "bodyText": "I'm not convinced the compiler has to respect this and only read the field once.  Maybe I should say that more strongly - there's no guarantee the compiler will read method->extra only once here.", "author": "DanHeidinga", "createdAt": "2020-09-23T17:19:06Z", "path": "runtime/compiler/control/CompilationRuntime.hpp", "diffHunk": "@@ -457,17 +457,31 @@ class CompilationInfo\n    static JITServer::ServerStream *getStream();\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    static bool isInterpreted(J9Method *method) { return !isCompiled(method); }\n-   static bool isCompiled(J9Method *method)\n+\n+   /**\n+    * @brief Determines if a J9Method is compiled\n+    *\n+    * @param method pointer to the J9Method\n+    *\n+    * @return The start PC if compiled, NULL otherwise\n+    */\n+   static void* isCompiled(J9Method *method)\n       {\n #if defined(J9VM_OPT_JITSERVER)\n       if (auto stream = getStream())\n          {\n          stream->write(JITServer::MessageType::CompInfo_isCompiled, method);\n-         return std::get<0>(stream->read<bool>());\n+         return std::get<0>(stream->read<void *>());\n          }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n-      return (((uintptr_t)method->extra) & J9_STARTPC_NOT_TRANSLATED) == 0;\n+\n+      /* Read extra field only once */\n+      void *extra = method->extra;\n+\n+      /* Return extra field if compiled, NULL otherwise */\n+      return ((uintptr_t)extra & J9_STARTPC_NOT_TRANSLATED) == 0 ? extra : NULL;", "originalCommit": "e5336f6c1b04641d0dba7861488a221fbe70b66b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4OTM0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493789341", "bodyText": "I'm confused. The code as written cannot see different values for the two uses of the local variable \"extra\". The compiler isn't allowed to change that...", "author": "mstoodle", "createdAt": "2020-09-23T18:07:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5ODE0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493798146", "bodyText": "Couldn't the compiler see that the definition of extra comes from method->extra and just choose to use that since there's been no store to the local variable `extra'? Not sure why it would want to do that, but is that a possibility theoretically speaking?", "author": "dsouzai", "createdAt": "2020-09-23T18:22:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5OTY2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493799664", "bodyText": "As @dsouzai says, the compiler doesn't have to create a local for method->extra (privatize) and is free to continue to fetch from the method.  We've seen occurrences of this kind of behaviour on some platforms in the past, especially when code like this is inlined into other methods", "author": "DanHeidinga", "createdAt": "2020-09-23T18:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMDIzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493820238", "bodyText": "ok, yup, must be volatile and we need this change then", "author": "mstoodle", "createdAt": "2020-09-23T18:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxNzI4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493917285", "bodyText": "Would void * volatile extra = method->extra; prevent the compiler from using method->extra instead of the local extra?\nI am thinking that adding the volatile keyword changes the type, so the compiler may not be able to use method->extra and extra interchangeably.", "author": "mpirvu", "createdAt": "2020-09-23T21:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNjU5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493936595", "bodyText": "I still find it mildly disturbing that a C compiler would de-privatize an access to a global variable, but I can also see the line of reasoning that led the optimization folks to find that behaviour desirable, relying on the volatile keyword to indicate that the value can change underfoot.\nThat got me thinking though: do any other variables that can be read or written to without a protective mutex need to be similarly marked as volatile? stackOverflowMark in the VM thread maybe?", "author": "mstoodle", "createdAt": "2020-09-23T22:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMzY4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r495133685", "bodyText": "I would think that the struct field being volatile ensures the compiler will use the local copy.", "author": "gacholio", "createdAt": "2020-09-25T17:31:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzODgyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r495138820", "bodyText": "I agree. I was wondering if there are any other fields that the JIT accesses directly that could be concurrently updated that should also be marked as volatile (basically, are we sure that this one is the only instance of the problem?).", "author": "mstoodle", "createdAt": "2020-09-25T17:42:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE1OTM0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r495159344", "bodyText": "Most of the fields that are concurrently updated are mutexxed, but I'm sure there are a few. J9VMThread.stackOverflowMark comes to mind immediately (since this caused problems on ZOS XLC). All of the RAM constant pool structs should probably be volatile (Jason fixed one in the last year that was causing MSVC to corrupt the field), though they are a somewhat special case in that there are only two possible states (multithreaded resolution always results in the same final values).", "author": "gacholio", "createdAt": "2020-09-25T18:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDcwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493760705", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  void *extra;\n          \n          \n            \n                  void *extra = NULL;\n          \n      \n    \n    \n  \n\nEnsure this is definitely assigned", "author": "DanHeidinga", "createdAt": "2020-09-23T17:19:59Z", "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -7512,10 +7511,14 @@ TR::CompilationInfoPerThreadBase::postCompilationTasks(J9VMThread * vmThread,\n    else // compilation will not be retried, either because it succeeded or because we don't want to\n       {\n       TR_PersistentJittedBodyInfo *bodyInfo;\n+      void *extra;", "originalCommit": "e5336f6c1b04641d0dba7861488a221fbe70b66b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MDkxOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r493760918", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               void        *extra;\n          \n          \n            \n               void        *extra = NULL;", "author": "DanHeidinga", "createdAt": "2020-09-23T17:20:18Z", "path": "runtime/compiler/control/HookedByTheJit.cpp", "diffHunk": "@@ -846,6 +847,7 @@ void DLTLogic(J9VMThread* vmThread, TR::CompilationInfo *compInfo)\n    int32_t    idx = dltBlock->cursor + 1;\n    J9ROMMethod *romMethod = NULL;\n    bool         bcRepeats;\n+   void        *extra;", "originalCommit": "e5336f6c1b04641d0dba7861488a221fbe70b66b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "94a0b6ed7bacf2b3d2d51c4f55a558ca4f15d1b9", "url": "https://github.com/eclipse-openj9/openj9/commit/94a0b6ed7bacf2b3d2d51c4f55a558ca4f15d1b9", "message": "Make J9Method.extra volatile\n\nThe extra field of the J9Method is usually accessed without any locks\n(more specifically, reads, as writes are done atomically). However, this\ncan result in the C/C++ compiler privatiazing reads of the extra field,\nwhich can result in inconsistent state if the privatized value isn't\nalways used.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-09-25T15:40:03Z", "type": "commit"}, {"oid": "fcbaa0a8bedfe9020f856f11d993b45ae49f0130", "url": "https://github.com/eclipse-openj9/openj9/commit/fcbaa0a8bedfe9020f856f11d993b45ae49f0130", "message": "Use StartPC from getPCIfCompiled API\n\nModify callers of isCompiled to use getPCIfCompiled rather than\nread the extra field of the J9Method again if the method is compiled.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-09-25T15:42:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNzc2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r495127768", "bodyText": "Since a new message was introduced we need to increment the minor version info here:\nhttps://github.com/eclipse/openj9/blob/master/runtime/compiler/net/CommunicationStream.hpp#L105", "author": "mpirvu", "createdAt": "2020-09-25T17:20:05Z", "path": "runtime/compiler/net/MessageTypes.hpp", "diffHunk": "@@ -207,6 +207,7 @@ enum MessageType : uint16_t\n \n    // For static TR::CompilationInfo methods\n    CompInfo_isCompiled, // 171\n+   CompInfo_getPCIfCompiled,", "originalCommit": "fcbaa0a8bedfe9020f856f11d993b45ae49f0130", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzMzcyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r495133723", "bodyText": "Ah right, thanks", "author": "dsouzai", "createdAt": "2020-09-25T17:31:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEyNzc2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0MDQ3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r495140472", "bodyText": "shouldn't this be MessageType::CompInfo_getPCIfCompiled ?", "author": "mstoodle", "createdAt": "2020-09-25T17:45:24Z", "path": "runtime/compiler/control/CompilationRuntime.hpp", "diffHunk": "@@ -466,8 +474,34 @@ class CompilationInfo\n          return std::get<0>(stream->read<bool>());\n          }\n #endif /* defined(J9VM_OPT_JITSERVER) */\n-      return (((uintptr_t)method->extra) & J9_STARTPC_NOT_TRANSLATED) == 0;\n+\n+      return (getPCIfCompiled(method) != NULL);\n+      }\n+\n+   /**\n+    * @brief Returns the PC of a method that is compiled\n+    *\n+    * @param method pointer to the J9Method\n+    *\n+    * @return The start PC if compiled, NULL otherwise\n+    */\n+   static void* getPCIfCompiled(J9Method *method)\n+      {\n+#if defined(J9VM_OPT_JITSERVER)\n+      if (auto stream = getStream())\n+         {\n+         stream->write(JITServer::MessageType::CompInfo_isCompiled, method);", "originalCommit": "4801cdbfe9ac00f007be76d466740e66aec4c843", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0OTE4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10672#discussion_r495149185", "bodyText": "Damn, yeah you're right, thanks for catching it.", "author": "dsouzai", "createdAt": "2020-09-25T18:03:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE0MDQ3Mg=="}], "type": "inlineReview"}, {"oid": "62e11ffbfa97142b02ddec2c0a27b59585cfb9b9", "url": "https://github.com/eclipse-openj9/openj9/commit/62e11ffbfa97142b02ddec2c0a27b59585cfb9b9", "message": "Add getPCIfCompiled API\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-09-25T18:06:32Z", "type": "commit"}, {"oid": "ca5afdc0d0dc3d950503f9b367239df50071bfe2", "url": "https://github.com/eclipse-openj9/openj9/commit/ca5afdc0d0dc3d950503f9b367239df50071bfe2", "message": "Use StartPC from getPCIfCompiled API\n\nModify callers of isCompiled to use getPCIfCompiled rather than\nread the extra field of the J9Method again if the method is compiled.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-09-25T18:06:34Z", "type": "commit"}, {"oid": "3497522360c8cdd38a69a766f4ee52617cbcc646", "url": "https://github.com/eclipse-openj9/openj9/commit/3497522360c8cdd38a69a766f4ee52617cbcc646", "message": "Increment JitServer Minor Version\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-09-25T18:06:34Z", "type": "commit"}, {"oid": "3497522360c8cdd38a69a766f4ee52617cbcc646", "url": "https://github.com/eclipse-openj9/openj9/commit/3497522360c8cdd38a69a766f4ee52617cbcc646", "message": "Increment JitServer Minor Version\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-09-25T18:06:34Z", "type": "forcePushed"}]}