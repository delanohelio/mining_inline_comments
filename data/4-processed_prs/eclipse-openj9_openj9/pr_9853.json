{"pr_number": 9853, "pr_title": "Pre-init static qtype fields", "pr_createdAt": "2020-06-11T15:35:44Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9853", "timeline": [{"oid": "6e215087ad93f6114a728e7d0b6e0d526748ced9", "url": "https://github.com/eclipse-openj9/openj9/commit/6e215087ad93f6114a728e7d0b6e0d526748ced9", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-12T21:13:52Z", "type": "forcePushed"}, {"oid": "8c48e84af0c95682f4fc92caf27a1edc9d556931", "url": "https://github.com/eclipse-openj9/openj9/commit/8c48e84af0c95682f4fc92caf27a1edc9d556931", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-12T21:18:07Z", "type": "forcePushed"}, {"oid": "f7388a3aad53d783388fcb2cea2fe23276e8124b", "url": "https://github.com/eclipse-openj9/openj9/commit/f7388a3aad53d783388fcb2cea2fe23276e8124b", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-12T21:30:16Z", "type": "forcePushed"}, {"oid": "f1742ce1da634e66a7428953a7b3925fa91388ca", "url": "https://github.com/eclipse-openj9/openj9/commit/f1742ce1da634e66a7428953a7b3925fa91388ca", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-12T21:39:35Z", "type": "forcePushed"}, {"oid": "0c693dbf9df2413e890f2b9e84484e68cce7f765", "url": "https://github.com/eclipse-openj9/openj9/commit/0c693dbf9df2413e890f2b9e84484e68cce7f765", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-12T21:56:33Z", "type": "forcePushed"}, {"oid": "9366bb2da4ee4d6893bc26e5c7a74b66bc4bf272", "url": "https://github.com/eclipse-openj9/openj9/commit/9366bb2da4ee4d6893bc26e5c7a74b66bc4bf272", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-14T01:40:17Z", "type": "forcePushed"}, {"oid": "eebc2d398e298e6242d846c89991d9c17e88b699", "url": "https://github.com/eclipse-openj9/openj9/commit/eebc2d398e298e6242d846c89991d9c17e88b699", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-16T12:33:27Z", "type": "forcePushed"}, {"oid": "b4ce60c61314ba97ae7d8aea3dd66af4ce7b9b27", "url": "https://github.com/eclipse-openj9/openj9/commit/b4ce60c61314ba97ae7d8aea3dd66af4ce7b9b27", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T14:49:41Z", "type": "forcePushed"}, {"oid": "9f9054c90a9445f0dfccf9f6f325dd164ff88a18", "url": "https://github.com/eclipse-openj9/openj9/commit/9f9054c90a9445f0dfccf9f6f325dd164ff88a18", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T15:01:14Z", "type": "forcePushed"}, {"oid": "b9081778e127491d229292aeb107f3aec259fbb6", "url": "https://github.com/eclipse-openj9/openj9/commit/b9081778e127491d229292aeb107f3aec259fbb6", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T15:32:10Z", "type": "forcePushed"}, {"oid": "552c35b408c5d9a75c288a096976266c02515069", "url": "https://github.com/eclipse-openj9/openj9/commit/552c35b408c5d9a75c288a096976266c02515069", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T15:33:28Z", "type": "forcePushed"}, {"oid": "715279f4655cde2c120270ec01684c8522cff75f", "url": "https://github.com/eclipse-openj9/openj9/commit/715279f4655cde2c120270ec01684c8522cff75f", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T15:35:16Z", "type": "forcePushed"}, {"oid": "dad194f5d2d533f2c91a50c830fd7758f417a852", "url": "https://github.com/eclipse-openj9/openj9/commit/dad194f5d2d533f2c91a50c830fd7758f417a852", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T15:43:32Z", "type": "forcePushed"}, {"oid": "c049c4352c13caefb747f27ba2f24aabe84577c2", "url": "https://github.com/eclipse-openj9/openj9/commit/c049c4352c13caefb747f27ba2f24aabe84577c2", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T15:55:24Z", "type": "forcePushed"}, {"oid": "c8deb10157f785adbef00bfefcf723d1de2d5e92", "url": "https://github.com/eclipse-openj9/openj9/commit/c8deb10157f785adbef00bfefcf723d1de2d5e92", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T20:24:58Z", "type": "forcePushed"}, {"oid": "33238d2fe67180891d0e5e780c97e725062b5c89", "url": "https://github.com/eclipse-openj9/openj9/commit/33238d2fe67180891d0e5e780c97e725062b5c89", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-23T20:38:36Z", "type": "forcePushed"}, {"oid": "ef775cb5ae392819cae74211faeae95942600b3a", "url": "https://github.com/eclipse-openj9/openj9/commit/ef775cb5ae392819cae74211faeae95942600b3a", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-24T01:55:41Z", "type": "forcePushed"}, {"oid": "4ab56bbf72e79813c4aeecad6e0b4c986183724e", "url": "https://github.com/eclipse-openj9/openj9/commit/4ab56bbf72e79813c4aeecad6e0b4c986183724e", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-24T13:56:36Z", "type": "forcePushed"}, {"oid": "9d7b53065bea8fe5196482d1812daa3c3b290294", "url": "https://github.com/eclipse-openj9/openj9/commit/9d7b53065bea8fe5196482d1812daa3c3b290294", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-24T14:58:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5MTk1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444991952", "bodyText": "I'd prefer the sides of the & to be inverted here.", "author": "gacholio", "createdAt": "2020-06-24T15:44:11Z", "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1708,6 +1713,8 @@ typedef struct J9FlattenedClassCache {\n \n #define J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, index) (((J9FlattenedClassCacheEntry *)((flattenedClassCache) + 1)) + (index))\n #define J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index) J9_VM_FCC_ENTRY_FROM_FCC((clazz)->flattenedClassCache, index)\n+#define J9_VM_FCC_CLASS_FROM_ENTRY(entry) ((J9Class *)(~J9_VM_FCC_CLASS_FLAGS_MASK & (UDATA)(entry)->clazz))", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5MjUwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444992500", "bodyText": "This could use the any/all bittest macros, and the inner mask is unnecessary (the static bit is necessarily a subset of all of the flag bits).", "author": "gacholio", "createdAt": "2020-06-24T15:44:59Z", "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1708,6 +1713,8 @@ typedef struct J9FlattenedClassCache {\n \n #define J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, index) (((J9FlattenedClassCacheEntry *)((flattenedClassCache) + 1)) + (index))\n #define J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index) J9_VM_FCC_ENTRY_FROM_FCC((clazz)->flattenedClassCache, index)\n+#define J9_VM_FCC_CLASS_FROM_ENTRY(entry) ((J9Class *)(~J9_VM_FCC_CLASS_FLAGS_MASK & (UDATA)(entry)->clazz))\n+#define J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry) (J9_VM_FCC_CLASS_FLAGS_STATIC_FIELD == ((J9_VM_FCC_CLASS_FLAGS_MASK & ((UDATA)(entry)->clazz)) & J9_VM_FCC_CLASS_FLAGS_STATIC_FIELD))", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5MjU5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444992594", "bodyText": "Extra blank line", "author": "gacholio", "createdAt": "2020-06-24T15:45:08Z", "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -1695,6 +1695,11 @@ typedef struct J9ModuleExtraInfo {\n  *                    |                       |                *\n  *      clazz N       |   Name & Signature N  |     offset N   *\n  ***************************************************************/\n+\n+#define J9_VM_FCC_CLASS_FLAGS_MASK ((UDATA) 0xFF)\n+#define J9_VM_FCC_CLASS_FLAGS_STATIC_FIELD ((UDATA)0x1)\n+\n+", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NDI5Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444994292", "bodyText": "Extra line", "author": "gacholio", "createdAt": "2020-06-24T15:47:35Z", "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2251,6 +2280,18 @@ fieldOffsetsStartDo(J9JavaVM *vm, J9ROMClass *romClass, J9Class *superClazz, J9R\n fieldOffsetsStartDo(J9JavaVM *vm, J9ROMClass *romClass, J9Class *superClazz, J9ROMFieldOffsetWalkState *state, U_32 flags);\n #endif\n \n+/**\n+ * Initialize fields offsets into FCC\n+ *\n+ *", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwNDM2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447204363", "bodyText": "This still needs to be addressed.", "author": "gacholio", "createdAt": "2020-06-29T19:32:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NDI5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NDgwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444994801", "bodyText": "non -> none", "author": "gacholio", "createdAt": "2020-06-24T15:48:20Z", "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2264,6 +2305,19 @@ fieldOffsetsStartDo(J9JavaVM *vm, J9ROMClass *romClass, J9Class *superClazz, J9R\n void\n defaultValueWithUnflattenedFlattenables(J9VMThread *currentThread, J9Class *clazz, j9object_t instance);\n \n+/**\n+ * Initialize static fields to default values when the class\n+ * contains flattenable statics. Currently non of the static fields are flattened.", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5NjU1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r444996553", "bodyText": "If the types here are both void*, there's no need for the casting. Function could be a single line (if TRUE and FALSE aren't identical to the C comparison results, we're in trouble).", "author": "gacholio", "createdAt": "2020-06-24T15:50:53Z", "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -62,6 +62,33 @@ static char const *statusNames[] = {\n static j9object_t setInitStatus(J9VMThread *currentThread, J9Class *clazz, UDATA status, j9object_t initializationLock);\n static void classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitState desiredState);\n \n+#if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n+static BOOLEAN\n+compareRAMClasses(void *item, J9StackElement *currentElement)\n+{\n+\tBOOLEAN rc = FALSE;\n+\n+\tif ((J9Class *)currentElement->element == (J9Class *)item) {", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxMTMzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445011332", "bodyText": "0 ==", "author": "gacholio", "createdAt": "2020-06-24T16:13:21Z", "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1464,6 +1464,22 @@ setCurrentExceptionForBadClass(J9VMThread *vmThread, J9UTF8 *badClassName, UDATA\n \tsetCurrentExceptionUTF(vmThread, exceptionIndex, errorMsg);\n \tj9mem_free_memory(errorMsg);\n }\n+static BOOLEAN\n+compareRomClassName(void *item, J9StackElement *currentElement)\n+{\n+\tJ9UTF8 *currentRomName;\n+\tBOOLEAN rc = FALSE;\n+\tJ9UTF8 *className = J9ROMCLASS_CLASSNAME((J9ROMClass *) item);\n+\n+\tcurrentRomName = J9ROMCLASS_CLASSNAME((J9ROMClass *) currentElement->element);\n+\tif (compareUTF8Length(J9UTF8_DATA(currentRomName), J9UTF8_LENGTH(currentRomName),", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDUyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445024527", "bodyText": "This code looks over-indented.", "author": "gacholio", "createdAt": "2020-06-24T16:34:46Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -28,34 +28,55 @@\n #include \"vm_api.h\"\n \n extern \"C\" {\n+\n+void\n+calculateFlattenedFieldAddresses(J9VMThread *currentThread, J9Class *clazz)\n+{\n+\tUDATA length = clazz->flattenedClassCache->numberOfEntries;\n+\n+\tfor (UDATA index = 0; index < length; index++) {\n+\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n+\t\tJ9Class *definingClass = NULL;\n+\t\tJ9ROMFieldShape *field = NULL;\n+\t\tJ9ROMFieldShape *entryField = entry->field;\n+\t\tJ9UTF8 *name = J9ROMFIELDSHAPE_NAME(entryField);\n+\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entryField);\n+\n+\t\tif (J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry)) {\n+\t\t\tentry->offset = (UDATA) staticFieldAddress(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0, clazz);\n+\t\t} else {\n+\t\t\tentry->offset = instanceFieldOffset(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0);\n+\t\t}\n+\t\tAssert_VM_unequal(UDATA_MAX, entry->offset);\n+\t}\n+}\n+\n void\n defaultValueWithUnflattenedFlattenables(J9VMThread *currentThread, J9Class *clazz, j9object_t instance)\n {\n-        J9FlattenedClassCacheEntry * entry = NULL;\n-        J9Class * entryClazz = NULL;\n-        UDATA length = clazz->flattenedClassCache->numberOfEntries;\n-        UDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(currentThread);\n-        for (UDATA index = 0; index < length; index++) {\n-                entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n-                entryClazz = entry->clazz;\n-                if (J9_ARE_NO_BITS_SET(J9ClassIsFlattened, entryClazz->classFlags)) {\n-                        if (entry->offset == UDATA_MAX) {\n-                                J9Class *definingClass = NULL;\n-                                J9ROMFieldShape *field = NULL;\n-                                J9ROMFieldShape *entryField = entry->field;\n-                                J9UTF8 *name = J9ROMFIELDSHAPE_NAME(entryField);\n-                                J9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entryField);\n-                                entry->offset = instanceFieldOffset(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0);\n-                                Assert_VM_notNull(field);\n-                        }\n-                        MM_ObjectAccessBarrierAPI objectAccessBarrier(currentThread);\n-                        objectAccessBarrier.inlineMixedObjectStoreObject(currentThread, \n-                                                                                instance, \n-                                                                                entry->offset + objectHeaderSize, \n-                                                                                entryClazz->flattenedClassCache->defaultValue, \n-                                                                                false);\n-                }\n-        }\n+\tJ9FlattenedClassCacheEntry * entry = NULL;\n+\tJ9Class * entryClazz = NULL;\n+\tUDATA length = clazz->flattenedClassCache->numberOfEntries;\n+\tUDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(currentThread);\n+\tfor (UDATA index = 0; index < length; index++) {\n+\t\t\tentry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDg1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445024851", "bodyText": "If you think there will be multiple static fields, might be worth moving this out of the loop.", "author": "gacholio", "createdAt": "2020-06-24T16:35:19Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -28,34 +28,55 @@\n #include \"vm_api.h\"\n \n extern \"C\" {\n+\n+void\n+calculateFlattenedFieldAddresses(J9VMThread *currentThread, J9Class *clazz)\n+{\n+\tUDATA length = clazz->flattenedClassCache->numberOfEntries;\n+\n+\tfor (UDATA index = 0; index < length; index++) {\n+\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n+\t\tJ9Class *definingClass = NULL;\n+\t\tJ9ROMFieldShape *field = NULL;\n+\t\tJ9ROMFieldShape *entryField = entry->field;\n+\t\tJ9UTF8 *name = J9ROMFIELDSHAPE_NAME(entryField);\n+\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entryField);\n+\n+\t\tif (J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry)) {\n+\t\t\tentry->offset = (UDATA) staticFieldAddress(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0, clazz);\n+\t\t} else {\n+\t\t\tentry->offset = instanceFieldOffset(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0);\n+\t\t}\n+\t\tAssert_VM_unequal(UDATA_MAX, entry->offset);\n+\t}\n+}\n+\n void\n defaultValueWithUnflattenedFlattenables(J9VMThread *currentThread, J9Class *clazz, j9object_t instance)\n {\n-        J9FlattenedClassCacheEntry * entry = NULL;\n-        J9Class * entryClazz = NULL;\n-        UDATA length = clazz->flattenedClassCache->numberOfEntries;\n-        UDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(currentThread);\n-        for (UDATA index = 0; index < length; index++) {\n-                entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n-                entryClazz = entry->clazz;\n-                if (J9_ARE_NO_BITS_SET(J9ClassIsFlattened, entryClazz->classFlags)) {\n-                        if (entry->offset == UDATA_MAX) {\n-                                J9Class *definingClass = NULL;\n-                                J9ROMFieldShape *field = NULL;\n-                                J9ROMFieldShape *entryField = entry->field;\n-                                J9UTF8 *name = J9ROMFIELDSHAPE_NAME(entryField);\n-                                J9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entryField);\n-                                entry->offset = instanceFieldOffset(currentThread, clazz, J9UTF8_DATA(name), J9UTF8_LENGTH(name), J9UTF8_DATA(signature), J9UTF8_LENGTH(signature), &definingClass, (UDATA *)&field, 0);\n-                                Assert_VM_notNull(field);\n-                        }\n-                        MM_ObjectAccessBarrierAPI objectAccessBarrier(currentThread);\n-                        objectAccessBarrier.inlineMixedObjectStoreObject(currentThread, \n-                                                                                instance, \n-                                                                                entry->offset + objectHeaderSize, \n-                                                                                entryClazz->flattenedClassCache->defaultValue, \n-                                                                                false);\n-                }\n-        }\n+\tJ9FlattenedClassCacheEntry * entry = NULL;\n+\tJ9Class * entryClazz = NULL;\n+\tUDATA length = clazz->flattenedClassCache->numberOfEntries;\n+\tUDATA const objectHeaderSize = J9VMTHREAD_OBJECT_HEADER_SIZE(currentThread);\n+\tfor (UDATA index = 0; index < length; index++) {\n+\t\t\tentry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, index);\n+\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\t\t\tif (!J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry) && J9_ARE_NO_BITS_SET(J9ClassIsFlattened, entryClazz->classFlags)) {\n+\t\t\t\tMM_ObjectAccessBarrierAPI objectAccessBarrier(currentThread);", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjc3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445026778", "bodyText": "classTableMutex isn't a good name for a boolean.", "author": "gacholio", "createdAt": "2020-06-24T16:38:35Z", "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1479,54 +1495,63 @@ static BOOLEAN\n verifyClassLoadingStack(J9VMThread *vmThread, J9ClassLoader *classLoader, J9ROMClass *romClass)\n {\n \tJ9JavaVM *javaVM = vmThread->javaVM;\n-\tJ9ClassLoadingStackElement *currentElement;\n-\tJ9ClassLoadingStackElement *newTopOfStack;\n-\tJ9UTF8 *className = J9ROMCLASS_CLASSNAME(romClass);\n+\treturn verifyLoadingOrLinkingStack(vmThread, classLoader, romClass, &vmThread->classLoadingStack, &compareRomClassName, javaVM->classLoadingMaxStack, javaVM->classLoadingStackPool, TRUE, TRUE);\n+}\n+\n+BOOLEAN\n+verifyLoadingOrLinkingStack(J9VMThread *vmThread, J9ClassLoader *classLoader, void *clazz, J9StackElement **stack, BOOLEAN (*comparator)(void *, J9StackElement *), UDATA maxStack, J9Pool *stackpool, BOOLEAN throwException, BOOLEAN classTableMutex)", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTU0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445029544", "bodyText": "This can't GC, so it doesn't need to push/pop/currentclass code.", "author": "gacholio", "createdAt": "2020-06-24T16:43:09Z", "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\tentryClazz = VM_VMHelpers::currentClass(entryClazz);\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entryClazz);\n \t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n-\t\t\t\t\t\tclassInitStateMachine(currentThread, entry->clazz, J9_CLASS_INIT_VERIFIED);\n+\t\t\t\t\t\tclassInitStateMachine(currentThread, entryClazz, J9_CLASS_INIT_VERIFIED);\n \t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n \t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n \n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tpopFromVerificationStack(currentThread);", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDM1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445030352", "bodyText": "This can't GC, so doesn't need the push/pop/current protections.", "author": "gacholio", "createdAt": "2020-06-24T16:44:30Z", "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r445030702", "bodyText": "Why is this not an error?", "author": "gacholio", "createdAt": "2020-06-24T16:45:02Z", "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -373,18 +400,80 @@ classInitStateMachine(J9VMThread *currentThread, J9Class *clazz, J9ClassInitStat\n \t\t\t\t}\n \n #if defined(J9VM_OPT_VALHALLA_VALUE_TYPES)\n-\t\t\t\t/* verify flattened fields */\n+\t\t\t\t/* verify flattenable fields */\n \t\t\t\tif (NULL != clazz->flattenedClassCache) {\n \t\t\t\t\tUDATA numberOfFlattenedFields = clazz->flattenedClassCache->numberOfEntries;\n \n+\t\t\t\t\tcalculateFlattenedFieldAddresses(currentThread, clazz);\n+\n \t\t\t\t\tfor (UDATA i = 0; i < numberOfFlattenedFields; i++) {\n \t\t\t\t\t\tJ9FlattenedClassCacheEntry *entry = J9_VM_FCC_ENTRY_FROM_CLASS(clazz, i);\n-\t\t\t\t\t\tTrc_VM_classInitStateMachine_verifyFlattenableField(currentThread, entry->clazz);\n+\t\t\t\t\t\tJ9Class *entryClazz = NULL;\n+\t\t\t\t\t\tbool isStatic = J9_VM_FCC_ENTRY_IS_STATIC_FIELD(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tJ9UTF8 *signature = J9ROMFIELDSHAPE_SIGNATURE(entry->field);\n+\t\t\t\t\t\t\tU_8 *signatureChars = J9UTF8_DATA(signature);\n+\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tJ9Class *valueClass = internalFindClassUTF8(currentThread, signatureChars + 1, J9UTF8_LENGTH(signature) - 2, clazz->classLoader, J9_FINDCLASS_FLAG_THROW_ON_FAIL);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (NULL == valueClass) {\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t/* need to check if it has access */\n+\t\t\t\t\t\t\tJ9ROMClass *valueROMClass = valueClass->romClass;\n+\t\t\t\t\t\t\tbool classIsPublic = J9_ARE_ALL_BITS_SET(valueROMClass->modifiers, J9AccPublic);\n+\n+\t\t\t\t\t\t\tif ((!classIsPublic && (clazz->packageID != valueClass->packageID))\n+\t\t\t\t\t\t\t\t|| (classIsPublic && (J9_VISIBILITY_ALLOWED != checkModuleAccess(currentThread, vm, clazz->romClass, clazz->module, valueROMClass, valueClass->module, valueClass->packageID, 0)))\n+\t\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t\tJ9UTF8 *romClassName = J9ROMCLASS_CLASSNAME(valueROMClass);\n+\t\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\t\tsetCurrentExceptionNLSWithArgs(currentThread, J9NLS_VM_CLASS_LOADING_ERROR_INVISIBLE_CLASS_OR_INTERFACE, J9VMCONSTANTPOOL_JAVALANGILLEGALACCESSERROR, J9UTF8_LENGTH(romClassName), J9UTF8_DATA(romClassName));\n+\t\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tinitializationLock = setInitStatus(currentThread, clazz, J9ClassInitUnverified, initializationLock);\n+\t\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\t\tgoto done;\n+\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\tentry->clazz = (J9Class *)((UDATA)valueClass | (UDATA)entry->clazz);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tentryClazz = J9_VM_FCC_CLASS_FROM_ENTRY(entry);\n+\n+\t\t\t\t\t\tif (isStatic) {\n+\t\t\t\t\t\t\tPUSH_OBJECT_IN_SPECIAL_FRAME(currentThread, initializationLock);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tBOOLEAN cycleDetected = checkForCyclicalVerification(currentThread, entryClazz->classLoader, entryClazz);\n+\t\t\t\t\t\t\tomrthread_monitor_enter(vm->valueTypeVerificationMutex);\n+\t\t\t\t\t\t\tinitializationLock = POP_OBJECT_IN_SPECIAL_FRAME(currentThread);\n+\t\t\t\t\t\t\tclazz = VM_VMHelpers::currentClass(clazz);\n+\t\t\t\t\t\t\tif (cycleDetected) {\n+\t\t\t\t\t\t\t\tcontinue;", "originalCommit": "9d7b53065bea8fe5196482d1812daa3c3b290294", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE4ODA5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447188094", "bodyText": "Verification cycles are legal we are verifying static fields. We need to continue to make progress while avoiding the stack overflow", "author": "tajila", "createdAt": "2020-06-29T19:01:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE4ODQ2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447188467", "bodyText": "ie\ninline class A { static B b;}\ninline class B {static A a;}", "author": "tajila", "createdAt": "2020-06-29T19:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE5MjQwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447192405", "bodyText": "Right, I remember now.", "author": "gacholio", "createdAt": "2020-06-29T19:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE5MzI3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447193275", "bodyText": "Please update the commit/PR comment with some of this detail.", "author": "gacholio", "createdAt": "2020-06-29T19:11:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMjEzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447202138", "bodyText": "And please add a simple comment  in the code to that effect.", "author": "gacholio", "createdAt": "2020-06-29T19:28:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDcwMg=="}], "type": "inlineReview"}, {"oid": "79239a9427b37705d0ec069d854e360c3f4870bb", "url": "https://github.com/eclipse-openj9/openj9/commit/79239a9427b37705d0ec069d854e360c3f4870bb", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-29T19:02:52Z", "type": "forcePushed"}, {"oid": "5b4a95570a6d0b4f71a9d6a4cf27b0a3e0b81977", "url": "https://github.com/eclipse-openj9/openj9/commit/5b4a95570a6d0b4f71a9d6a4cf27b0a3e0b81977", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-29T19:16:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIwMTI0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9853#discussion_r447201247", "bodyText": "Please update name to match the code.", "author": "gacholio", "createdAt": "2020-06-29T19:26:37Z", "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -431,6 +431,35 @@ contendedLoadTableFree(J9JavaVM* vm);\n  */\n #define J9_CP_INDEX_NONE -1\n \n+/**\n+ * Checks stack to see if element exists, if not adds the new element and returns TRUE. Otherwise, returns FALSE\n+ *\n+ * @param vmThread vmthread token\n+ * @param classloader loader associated with current element\n+ * @param clazz either romclass or ramclass\n+ * @param stack the loading or linking stack\n+ * @param comparator handle to function that will compare elements\n+ * @param maxStack maximum concurrent classloads or class linkage\n+ * @param stackpool pool for stack elements\n+ * @param throwException flag to indicate if exception should be thrown in the case of cirularity\n+ * @param classTableMutex flag to indicate if class table mutex is being held", "originalCommit": "5b4a95570a6d0b4f71a9d6a4cf27b0a3e0b81977", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "526efbe4e4f3b995588f13fd8e59e1aec2f6994b", "url": "https://github.com/eclipse-openj9/openj9/commit/526efbe4e4f3b995588f13fd8e59e1aec2f6994b", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-29T20:32:14Z", "type": "forcePushed"}, {"oid": "33220bb27a684eedf588d8f7a9a88ce21d2a0394", "url": "https://github.com/eclipse-openj9/openj9/commit/33220bb27a684eedf588d8f7a9a88ce21d2a0394", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-30T00:19:10Z", "type": "commit"}, {"oid": "33220bb27a684eedf588d8f7a9a88ce21d2a0394", "url": "https://github.com/eclipse-openj9/openj9/commit/33220bb27a684eedf588d8f7a9a88ce21d2a0394", "message": "Pre-init static qtype fields\n\nAdd static qtype fields to the FCC. Pre-verifify, prepare and init all\nstatic qtype fields.\n\nReuse the existing classloading stack (used for classloading circularity\nerrors) and make it more generic so it can be reused to detect circular\nverification issues.\n\nDetermine offsets of all flattenable fields during class linkage, JIT\nneeds to know the offsets as early as possible.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-06-30T00:19:10Z", "type": "forcePushed"}]}