{"pr_number": 8712, "pr_title": "Add double map functionality to JNI string critical", "pr_createdAt": "2020-03-02T15:34:59Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8712", "timeline": [{"oid": "ad8ad4d0a2d4fed1a4ca4f6f4d385efc2ec3bd5a", "url": "https://github.com/eclipse-openj9/openj9/commit/ad8ad4d0a2d4fed1a4ca4f6f4d385efc2ec3bd5a", "message": "Add double map functionality to JNI string critical\n\nLeverage double map feature to boost JNI string\ncritical. Strings are stored internally as char or byte\narrays; therefore if double mapping is enabled and these\narrays are large enough, they will be double mapped.\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-03-02T15:39:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyODk1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8712#discussion_r399328957", "bodyText": "pull in the declaration:\nfor (jni i = 0", "author": "amicic", "createdAt": "2020-03-27T15:01:41Z", "path": "runtime/gc_vlhgc/VLHGCAccessBarrier.cpp", "diffHunk": "@@ -435,61 +435,96 @@ MM_VLHGCAccessBarrier::jniReleasePrimitiveArrayCritical(J9VMThread* vmThread, ja\n \tVM_VMAccess::inlineExitVMToJNI(vmThread);\n }\n \n+void\n+MM_VLHGCAccessBarrier::copyStringCritical(J9VMThread *vmThread, GC_ArrayObjectModel *indexableObjectModel,\n+\tJ9InternalVMFunctions *functions, jchar **data, J9JavaVM *javaVM,\n+\tJ9IndexableObject *valueObject, J9Object *stringObject, jboolean *isCopy, bool isCompressed)\n+{\n+\tjint length = J9VMJAVALANGSTRING_LENGTH(vmThread, stringObject);\n+\tUDATA sizeInBytes = length * sizeof(jchar);\n+\t*data = (jchar*)functions->jniArrayAllocateMemoryFromThread(vmThread, sizeInBytes);\n+\tif (NULL == *data) {\n+\t\tfunctions->setNativeOutOfMemoryError(vmThread, 0, 0);\t// better error message here?\n+\t} else {\n+\t\tif (isCompressed) {\n+\t\t\tjint i;\n+\t\t\tfor (i = 0; i < length; i++) {", "originalCommit": "ad8ad4d0a2d4fed1a4ca4f6f4d385efc2ec3bd5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMyOTkzMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8712#discussion_r399329933", "bodyText": "now that shouldCopy  is gone, you can make this one liner:\nbool isCompressed = IS_STRING_COMPRESSED(vmThread, stringObject);", "author": "amicic", "createdAt": "2020-03-27T15:02:56Z", "path": "runtime/gc_vlhgc/VLHGCAccessBarrier.cpp", "diffHunk": "@@ -435,61 +435,96 @@ MM_VLHGCAccessBarrier::jniReleasePrimitiveArrayCritical(J9VMThread* vmThread, ja\n \tVM_VMAccess::inlineExitVMToJNI(vmThread);\n }\n \n+void\n+MM_VLHGCAccessBarrier::copyStringCritical(J9VMThread *vmThread, GC_ArrayObjectModel *indexableObjectModel,\n+\tJ9InternalVMFunctions *functions, jchar **data, J9JavaVM *javaVM,\n+\tJ9IndexableObject *valueObject, J9Object *stringObject, jboolean *isCopy, bool isCompressed)\n+{\n+\tjint length = J9VMJAVALANGSTRING_LENGTH(vmThread, stringObject);\n+\tUDATA sizeInBytes = length * sizeof(jchar);\n+\t*data = (jchar*)functions->jniArrayAllocateMemoryFromThread(vmThread, sizeInBytes);\n+\tif (NULL == *data) {\n+\t\tfunctions->setNativeOutOfMemoryError(vmThread, 0, 0);\t// better error message here?\n+\t} else {\n+\t\tif (isCompressed) {\n+\t\t\tjint i;\n+\t\t\tfor (i = 0; i < length; i++) {\n+\t\t\t\t*data[i] = (jchar)J9JAVAARRAYOFBYTE_LOAD(vmThread, (j9object_t)valueObject, i) & (jchar)0xFF;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (J9_ARE_ANY_BITS_SET(javaVM->runtimeFlags, J9_RUNTIME_STRING_BYTE_ARRAY)) {\n+\t\t\t\t// This API determines the stride based on the type of valueObject so in the [B case we must passin the length in bytes\n+\t\t\t\tindexableObjectModel->memcpyFromArray(*data, valueObject, 0, (I_32)sizeInBytes);\n+\t\t\t} else {\n+\t\t\t\tindexableObjectModel->memcpyFromArray(*data, valueObject, 0, length);\n+\t\t\t}\n+\t\t}\n+\t\tif (NULL != isCopy) {\n+\t\t\t*isCopy = JNI_TRUE;\n+\t\t}\n+\t\tvmThread->jniCriticalCopyCount += 1;\n+\t}\n+}\n+\n const jchar*\n MM_VLHGCAccessBarrier::jniGetStringCritical(J9VMThread* vmThread, jstring str, jboolean *isCopy)\n {\n \tjchar *data = NULL;\n \tJ9JavaVM *javaVM = vmThread->javaVM;\n \tJ9InternalVMFunctions *functions = javaVM->internalVMFunctions;\n \tVM_VMAccess::inlineEnterVMFromJNI(vmThread);\n+\tGC_ArrayObjectModel *indexableObjectModel = &_extensions->indexableObjectModel;\n \n \tJ9Object *stringObject = (J9Object*)J9_JNI_UNWRAP_REFERENCE(str);\n \tJ9IndexableObject *valueObject = (J9IndexableObject*)J9VMJAVALANGSTRING_VALUE(vmThread, stringObject);\n-\tbool shouldCopy = false;\n \tbool isCompressed = false;\n \n \t/* If the string bytes are in compressed UNICODE, then we need to copy to decompress */\t\n \tif (IS_STRING_COMPRESSED(vmThread, stringObject)) {\n \t\tisCompressed = true;\n-\t\tshouldCopy = true;\n \t}", "originalCommit": "ad8ad4d0a2d4fed1a4ca4f6f4d385efc2ec3bd5a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5b9fbfb9c209e63fdc1c0ce34fb24e8771f2c99f", "url": "https://github.com/eclipse-openj9/openj9/commit/5b9fbfb9c209e63fdc1c0ce34fb24e8771f2c99f", "message": "Add double map functionality to JNI string critical\n\nLeverage double map feature to boost JNI string\ncritical. Strings are stored internally as char or byte\narrays; therefore if double mapping is enabled and these\narrays are large enough, they will be double mapped.\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-03-27T15:19:42Z", "type": "forcePushed"}, {"oid": "18f5b9f30c3d88b5f4c0a421204bf1c9379ed14c", "url": "https://github.com/eclipse-openj9/openj9/commit/18f5b9f30c3d88b5f4c0a421204bf1c9379ed14c", "message": "Add double map functionality to JNI string critical\n\nLeverage double map feature to boost JNI string\ncritical. Strings are stored internally as char or byte\narrays; therefore if double mapping is enabled and these\narrays are large enough, they will be double mapped.\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-03-27T16:05:09Z", "type": "commit"}, {"oid": "18f5b9f30c3d88b5f4c0a421204bf1c9379ed14c", "url": "https://github.com/eclipse-openj9/openj9/commit/18f5b9f30c3d88b5f4c0a421204bf1c9379ed14c", "message": "Add double map functionality to JNI string critical\n\nLeverage double map feature to boost JNI string\ncritical. Strings are stored internally as char or byte\narrays; therefore if double mapping is enabled and these\narrays are large enough, they will be double mapped.\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-03-27T16:05:09Z", "type": "forcePushed"}]}