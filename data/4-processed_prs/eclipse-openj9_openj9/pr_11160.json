{"pr_number": 11160, "pr_title": "JDK15 getCurrentClassLoader() for jdk.internal.loader.NativeLibraries.load()", "pr_createdAt": "2020-11-12T01:05:50Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11160", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3MDY0OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522170649", "bodyText": "I think the parameter should be %p (jmethodID is a pointer).", "author": "keithc-ca", "createdAt": "2020-11-12T14:59:14Z", "path": "runtime/jcl/j9jcl.tdf", "diffHunk": "@@ -642,3 +642,5 @@ TraceExit=Trc_JCL_com_ibm_oti_shared_SharedClassURLClasspathHelperImpl_notifyCla\n TraceEntry=Trc_JCL_attach_waitSemaphoreEntry2 Overhead=1 Level=1 Template=\"Java_com_ibm_tools_attach_javaSE_IPC_waitSemaphoreImpl waiting on semaphore (%p)\"\n TraceEntry=Trc_JCL_attach_closeSemaphoreEntry Overhead=1 Level=1 Template=\"Java_com_ibm_tools_attach_javaSE_IPC_closeSemaphoreImpl closing semaphore (%p)\"\n TraceEntry=Trc_JCL_attach_destroySemaphoreEntry Overhead=1 Level=1 Template=\"Java_com_ibm_tools_attach_javaSE_IPC_destroySemaphoreImpl destroying semaphore (%p)\"\n+\n+TraceEvent=Trc_JCL_init_nativeLibrariesLoadMethodID Overhead=1 Level=3 Template=\"init nativeLibrariesLoadMethodID (0x%llx)\"", "originalCommit": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE4ODM4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522188384", "bodyText": "UDATA doPrivilegedWithContextPermissionMethodID1;\n\tUDATA doPrivilegedWithContextPermissionMethodID2;\n#if JAVA_SPEC_VERSION >= 15\n\tUDATA nativeLibrariesLoadMethodID;\n#endif /* JAVA_SPEC_VERSION >= 15 */\n\nnativeLibrariesLoadMethodID is UDATA like other method ID saved in javaVM.", "author": "JasonFengJ9", "createdAt": "2020-11-12T15:22:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3MDY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NTEyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522195128", "bodyText": "I agree with Keith - not sure llx will work for UDATA on 32-bit.", "author": "gacholio", "createdAt": "2020-11-12T15:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3MDY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NzgxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522197813", "bodyText": "For UDATA, the format should be 0x%zx.", "author": "keithc-ca", "createdAt": "2020-11-12T15:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3MDY0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5MjI4MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522292281", "bodyText": "Replaced llx with zx.", "author": "JasonFengJ9", "createdAt": "2020-11-12T17:38:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE3MDY0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NjY3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522196670", "bodyText": "This isn't ifdeffed, but everything else seems to be.", "author": "gacholio", "createdAt": "2020-11-12T15:33:01Z", "path": "runtime/compiler/codegen/J9RecognizedMethodsEnum.hpp", "diffHunk": "@@ -426,6 +426,8 @@\n \n    jdk_internal_misc_Unsafe_copyMemory0,\n \n+   jdk_internal_loader_NativeLibraries_load,", "originalCommit": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5MjczOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522292739", "bodyText": "Yeah, somehow #if JAVA_SPEC_VERSION >= 15 doesn't work in this file (haven't figured out yet)\nOn the other hand, I guess it won't hurt much to add an extra enum entry for pre-JDK15 levels.", "author": "JasonFengJ9", "createdAt": "2020-11-12T17:39:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NjY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMzI4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522303280", "bodyText": "It's a matter of whether the data has to match the enum order. If so, it all needs to be ifdeffed, or none of it. @andrewcraik can best answer this.", "author": "gacholio", "createdAt": "2020-11-12T17:55:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NjY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxMjQ1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522312456", "bodyText": "It could be as simple as a failure to #include \"j9cfg.h\".", "author": "keithc-ca", "createdAt": "2020-11-12T18:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NjY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxMzU1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522313553", "bodyText": "the enum entries are not conditional - you will add the recognized method entry for all versions of the JDK - it will only match something on a newer version of the JVM. The JIT tries to avoid version ifdefs if at all possible.", "author": "andrewcraik", "createdAt": "2020-11-12T18:11:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NjY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyODAyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522328023", "bodyText": "It could be as simple as a failure to #include \"j9cfg.h\".\n\nNo, J9RecognizedMethodsEnum.hpp doesn't take j9cfg.h well.\nbuild/macosx-x86_64-server-release/vm/compiler/../include/j9cfg.h:32:1: error: expected identifier\nextern \"C\" {\n\nThe #include in question already presents in j9method.cpp though it still can't find the enum entry.\ncompiler/env/j9method.cpp:3389:14: error: no member named\n      'jdk_internal_loader_NativeLibraries_load' in namespace 'TR'\n\nAnyway, there is no need to add ifdefs here as per #11160 (comment).", "author": "JasonFengJ9", "createdAt": "2020-11-12T18:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE5NjY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwMTI0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522201242", "bodyText": "This shouldn't fall through on failure (there's an exception pending). Same for GetStaticMethodID below. Should probably goto _fail; in those cases.", "author": "gacholio", "createdAt": "2020-11-12T15:38:45Z", "path": "runtime/jcl/common/stdinit.c", "diffHunk": "@@ -187,6 +187,18 @@ standardInit( J9JavaVM *vm, char *dllName)\n \t\t\tresult = (jint)initializeSystemThreadGroup(vm, (JNIEnv *)vmThread);\n \t\t\tif (JNI_OK != result) {\n \t\t\t\tgoto _fail;\n+\t\t\t} else {\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t\tJNIEnv *env = (JNIEnv *)vmThread;\n+\t\t\t\tjclass clz = (*env)->FindClass(env, \"jdk/internal/loader/NativeLibraries\");\n+\t\t\t\tif (NULL != clz) {", "originalCommit": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5MjYzNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522292635", "bodyText": "Fixed.", "author": "JasonFengJ9", "createdAt": "2020-11-12T17:39:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwMTI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjkxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522206919", "bodyText": "Can this every really be null?", "author": "gacholio", "createdAt": "2020-11-12T15:45:48Z", "path": "runtime/vm/jnimisc.cpp", "diffHunk": "@@ -168,6 +168,37 @@ getCurrentClassLoader(J9VMThread *currentThread)\n \t\t} else {\n \t\t\t/* use the sender (native method) classloader */\n \t\t\tclassLoader = J9_CLASS_FROM_METHOD(nativeMethod)->classLoader;\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t/* special case - if jdk/internal/loader/NativeLibraries.load(NativeLibraryImpl impl, String name, boolean isBuiltin, boolean isJNI)\n+\t\t\t * is the current native method, use the class loader of \"impl.fromClass\".\n+\t\t\t * This nativeMethod can't be cached cause HCR might make it invalid.\n+\t\t\t */\n+\t\t\tif (J9VMJDKINTERNALLOADERNATIVELIBRARIES_LOAD_METHOD(currentThread->javaVM) == nativeMethod) {\n+\t\t\t\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\t\t\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\t\t\t/* The current native method has a NativeLibraryImpl instance as its first argument */\n+\t\t\t\tj9object_t nativeLibraryImplObject = (j9object_t)(currentThread->arg0EA[0]);\n+\t\t\t\tTrc_VM_findNativeLibrariesLoad_nativeMethod(currentThread, nativeMethod, nativeLibraryImplObject, classLoader);\n+\t\t\t\t/* Handle the object reference being redirected by the stack grower */\n+\t\t\t\tif (J9_ARE_ANY_BITS_SET((UDATA)nativeLibraryImplObject, 1)) {\n+\t\t\t\t\tnativeLibraryImplObject = *(j9object_t*)((UDATA)nativeLibraryImplObject - 1);\n+\t\t\t\t}\n+\t\t\t\tif (NULL != nativeLibraryImplObject) {", "originalCommit": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5MzE0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522293144", "bodyText": "It shouldn't, change it to Assert_VM_notNull(nativeLibraryImplObject).", "author": "JasonFengJ9", "createdAt": "2020-11-12T17:39:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjkxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNDEzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522304134", "bodyText": "Is it the receiver of a virtual call? If so, it can't be NULL, if not, it technically could be, so the if is fine.", "author": "gacholio", "createdAt": "2020-11-12T17:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNjkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNzY5OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522207698", "bodyText": "Given the overabundance of tracepoints in this code, how is there not one here?", "author": "gacholio", "createdAt": "2020-11-12T15:46:45Z", "path": "runtime/vm/jnimisc.cpp", "diffHunk": "@@ -168,6 +168,37 @@ getCurrentClassLoader(J9VMThread *currentThread)\n \t\t} else {\n \t\t\t/* use the sender (native method) classloader */\n \t\t\tclassLoader = J9_CLASS_FROM_METHOD(nativeMethod)->classLoader;\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t/* special case - if jdk/internal/loader/NativeLibraries.load(NativeLibraryImpl impl, String name, boolean isBuiltin, boolean isJNI)\n+\t\t\t * is the current native method, use the class loader of \"impl.fromClass\".\n+\t\t\t * This nativeMethod can't be cached cause HCR might make it invalid.\n+\t\t\t */\n+\t\t\tif (J9VMJDKINTERNALLOADERNATIVELIBRARIES_LOAD_METHOD(currentThread->javaVM) == nativeMethod) {\n+\t\t\t\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\t\t\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\t\t\t/* The current native method has a NativeLibraryImpl instance as its first argument */\n+\t\t\t\tj9object_t nativeLibraryImplObject = (j9object_t)(currentThread->arg0EA[0]);\n+\t\t\t\tTrc_VM_findNativeLibrariesLoad_nativeMethod(currentThread, nativeMethod, nativeLibraryImplObject, classLoader);\n+\t\t\t\t/* Handle the object reference being redirected by the stack grower */\n+\t\t\t\tif (J9_ARE_ANY_BITS_SET((UDATA)nativeLibraryImplObject, 1)) {\n+\t\t\t\t\tnativeLibraryImplObject = *(j9object_t*)((UDATA)nativeLibraryImplObject - 1);\n+\t\t\t\t}\n+\t\t\t\tif (NULL != nativeLibraryImplObject) {\n+\t\t\t\t\tTrc_VM_findNativeLibrariesLoad_nativeLibraryImplObject(currentThread, nativeLibraryImplObject);\n+\t\t\t\t\tj9object_t fromClassObj = J9VMJDKINTERNALLOADERNATIVELIBRARIESNATIVELIBRARYIMPL_FROMCLASS(currentThread, nativeLibraryImplObject);\n+\t\t\t\t\tif (NULL != fromClassObj) {\n+\t\t\t\t\t\tTrc_VM_findNativeLibrariesLoad_fromClassObj(currentThread, fromClassObj);\n+\t\t\t\t\t\tJ9Class *fromClass = J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, fromClassObj);\n+\t\t\t\t\t\tTrc_VM_findNativeLibrariesLoad_fromClass(currentThread, fromClass);\n+\t\t\t\t\t\tif ((NULL != fromClass) && (NULL != fromClass->classLoader)) {\n+\t\t\t\t\t\t\tclassLoader = fromClass->classLoader;", "originalCommit": "804ad6af72fe83b0fd1d31ecc8c365d18a67c476", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI5Mjk0OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522292949", "bodyText": "Since there is Trc_VM_findNativeLibrariesLoad_nativeMethod(currentThread, nativeMethod, nativeLibraryImplObject, classLoader) for the initial classLoader value, and Trc_VM_findNativeLibrariesLoad_classLoader(currentThread, classLoader) for the final value, if these two are different, the final value is the new classLoader, hence avoid a trace point here.", "author": "JasonFengJ9", "createdAt": "2020-11-12T17:39:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIwNzY5OA=="}], "type": "inlineReview"}, {"oid": "265cf7577e2e05efaa309eb0dec1b9a011d5602e", "url": "https://github.com/eclipse-openj9/openj9/commit/265cf7577e2e05efaa309eb0dec1b9a011d5602e", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-11-12T17:35:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNDcyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522304723", "bodyText": "Illegal declaration in a C file.", "author": "gacholio", "createdAt": "2020-11-12T17:57:35Z", "path": "runtime/jcl/common/stdinit.c", "diffHunk": "@@ -187,6 +187,20 @@ standardInit( J9JavaVM *vm, char *dllName)\n \t\t\tresult = (jint)initializeSystemThreadGroup(vm, (JNIEnv *)vmThread);\n \t\t\tif (JNI_OK != result) {\n \t\t\t\tgoto _fail;\n+\t\t\t} else {\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t\tJNIEnv *env = (JNIEnv *)vmThread;\n+\t\t\t\tjclass clz = (*env)->FindClass(env, \"jdk/internal/loader/NativeLibraries\");\n+\t\t\t\tif (NULL == clz) {\n+\t\t\t\t\tgoto _fail;\n+\t\t\t\t}\n+\t\t\t\tjmethodID mid = (*env)->GetStaticMethodID(env, clz, \"load\", \"(Ljdk/internal/loader/NativeLibraries$NativeLibraryImpl;Ljava/lang/String;ZZ)Z\");", "originalCommit": "265cf7577e2e05efaa309eb0dec1b9a011d5602e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxMzg2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522313865", "bodyText": "Fixed.", "author": "JasonFengJ9", "createdAt": "2020-11-12T18:12:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwNDcyMw=="}], "type": "inlineReview"}, {"oid": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "url": "https://github.com/eclipse-openj9/openj9/commit/4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-11-12T18:10:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDE3MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522314171", "bodyText": "Does not need an ifdef if it doesn't exist in older JDKs - we prefer to avoid the ifdefs", "author": "andrewcraik", "createdAt": "2020-11-12T18:12:27Z", "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -1079,7 +1079,10 @@ static const char * const excludeArray[] = {\n    \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;\",\n    \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;)Ljava/lang/Object;\",\n    \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedAction;Ljava/security/AccessControlContext;[Ljava/security/Permission;)Ljava/lang/Object;\",\n-   \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;[Ljava/security/Permission;)Ljava/lang/Object;\"\n+   \"java/security/AccessController.doPrivileged(Ljava/security/PrivilegedExceptionAction;Ljava/security/AccessControlContext;[Ljava/security/Permission;)Ljava/lang/Object;\",\n+#if JAVA_SPEC_VERSION >= 15", "originalCommit": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMjgxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522322813", "bodyText": "Sure, removed #if JAVA_SPEC_VERSION >= 15.", "author": "JasonFengJ9", "createdAt": "2020-11-12T18:26:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDM0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522314348", "bodyText": "this should be unconditional I think", "author": "andrewcraik", "createdAt": "2020-11-12T18:12:41Z", "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -3379,6 +3382,14 @@ void TR_ResolvedJ9Method::construct()\n       {  TR::unknownMethod}\n       };\n \n+#if JAVA_SPEC_VERSION >= 15", "originalCommit": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzA0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522323044", "bodyText": "Fixed.", "author": "JasonFengJ9", "createdAt": "2020-11-12T18:26:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDM0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDYyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522314624", "bodyText": "This should also be unconditional", "author": "andrewcraik", "createdAt": "2020-11-12T18:13:14Z", "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -4431,6 +4442,9 @@ void TR_ResolvedJ9Method::construct()\n    static Y class35[] =\n       {\n       { \"java/lang/invoke/ExplicitCastHandle\", ExplicitCastHandleMethods },\n+#if JAVA_SPEC_VERSION >= 15", "originalCommit": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzI3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522323278", "bodyText": "Fixed.", "author": "JasonFengJ9", "createdAt": "2020-11-12T18:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDYyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDgxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522314817", "bodyText": "should be unconditional", "author": "andrewcraik", "createdAt": "2020-11-12T18:13:35Z", "path": "runtime/compiler/il/J9Node.cpp", "diffHunk": "@@ -314,6 +314,12 @@ J9::Node::processJNICall(TR::TreeTop * callNodeTreeTop, TR::ResolvedMethodSymbol\n       return self();\n       }\n \n+#if JAVA_SPEC_VERSION >= 15", "originalCommit": "4d6b5af9c051c57d4ea84876b9aaaf325461fa2f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMzQwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522323400", "bodyText": "Fixed.", "author": "JasonFengJ9", "createdAt": "2020-11-12T18:27:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMxNDgxNw=="}], "type": "inlineReview"}, {"oid": "6cd4b353d4fa22ab3fa209ce9f21500f561f4e75", "url": "https://github.com/eclipse-openj9/openj9/commit/6cd4b353d4fa22ab3fa209ce9f21500f561f4e75", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-11-12T18:23:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNzM2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522327363", "bodyText": "This appears to be an argument, not a receiver, so the NULL check is probably more appropriate. If it could be removed entirely, that would be nice, but the check is better than the assert, since we will at least function predictably in that case.", "author": "gacholio", "createdAt": "2020-11-12T18:33:41Z", "path": "runtime/vm/jnimisc.cpp", "diffHunk": "@@ -168,6 +168,36 @@ getCurrentClassLoader(J9VMThread *currentThread)\n \t\t} else {\n \t\t\t/* use the sender (native method) classloader */\n \t\t\tclassLoader = J9_CLASS_FROM_METHOD(nativeMethod)->classLoader;\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t/* special case - if jdk/internal/loader/NativeLibraries.load(NativeLibraryImpl impl, String name, boolean isBuiltin, boolean isJNI)\n+\t\t\t * is the current native method, use the class loader of \"impl.fromClass\".\n+\t\t\t * This nativeMethod can't be cached cause HCR might make it invalid.\n+\t\t\t */\n+\t\t\tif (J9VMJDKINTERNALLOADERNATIVELIBRARIES_LOAD_METHOD(currentThread->javaVM) == nativeMethod) {\n+\t\t\t\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\t\t\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\t\t\t/* The current native method has a NativeLibraryImpl instance as its first argument */\n+\t\t\t\tj9object_t nativeLibraryImplObject = (j9object_t)(currentThread->arg0EA[0]);\n+\t\t\t\tTrc_VM_findNativeLibrariesLoad_nativeMethod(currentThread, nativeMethod, nativeLibraryImplObject, classLoader);\n+\t\t\t\t/* Handle the object reference being redirected by the stack grower */\n+\t\t\t\tif (J9_ARE_ANY_BITS_SET((UDATA)nativeLibraryImplObject, 1)) {\n+\t\t\t\t\tnativeLibraryImplObject = *(j9object_t*)((UDATA)nativeLibraryImplObject - 1);\n+\t\t\t\t}\n+\t\t\t\tAssert_VM_notNull(nativeLibraryImplObject);", "originalCommit": "6cd4b353d4fa22ab3fa209ce9f21500f561f4e75", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMjIzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522332237", "bodyText": "Sure, change it to NULL check instead though it is unlikely to be NULL, in that case, use native method classloader instead crash on a NULL object.", "author": "JasonFengJ9", "createdAt": "2020-11-12T18:41:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNzM2Mw=="}], "type": "inlineReview"}, {"oid": "839861d273d0aa01c40ecfab254a0402b46b32de", "url": "https://github.com/eclipse-openj9/openj9/commit/839861d273d0aa01c40ecfab254a0402b46b32de", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-11-12T18:38:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMzcxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522333714", "bodyText": "This needs to be unifdeffed as it is used unconditionally in the JIT code.", "author": "gacholio", "createdAt": "2020-11-12T18:44:12Z", "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -5286,6 +5286,9 @@ typedef struct J9JavaVM {\n \tstruct J9ClassLoader* anonClassLoader;\n \tUDATA doPrivilegedWithContextPermissionMethodID1;\n \tUDATA doPrivilegedWithContextPermissionMethodID2;\n+#if JAVA_SPEC_VERSION >= 15", "originalCommit": "839861d273d0aa01c40ecfab254a0402b46b32de", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NDM1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522344359", "bodyText": "Right, removed the #if here, also set vm->nativeLibrariesLoadMethodID = 0 for pre-JDK15 levels.", "author": "JasonFengJ9", "createdAt": "2020-11-12T19:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMzcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0Njc4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522346785", "bodyText": "FYI - the J9JavaVM is zeroed on allocation.", "author": "gacholio", "createdAt": "2020-11-12T19:05:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMzMzcxNA=="}], "type": "inlineReview"}, {"oid": "38b53572bd0eabd85c35cb1d150edc8a5adc89c0", "url": "https://github.com/eclipse-openj9/openj9/commit/38b53572bd0eabd85c35cb1d150edc8a5adc89c0", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-11-12T19:00:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NzMyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522347323", "bodyText": "Not strictly necessary - it will already be 0.", "author": "gacholio", "createdAt": "2020-11-12T19:06:17Z", "path": "runtime/jcl/common/stdinit.c", "diffHunk": "@@ -187,6 +187,23 @@ standardInit( J9JavaVM *vm, char *dllName)\n \t\t\tresult = (jint)initializeSystemThreadGroup(vm, (JNIEnv *)vmThread);\n \t\t\tif (JNI_OK != result) {\n \t\t\t\tgoto _fail;\n+\t\t\t} else {\n+#if JAVA_SPEC_VERSION >= 15\n+\t\t\t\tJNIEnv *env = (JNIEnv *)vmThread;\n+\t\t\t\tjclass clz = (*env)->FindClass(env, \"jdk/internal/loader/NativeLibraries\");\n+\t\t\t\tjmethodID mid = NULL;\n+\t\t\t\tif (NULL == clz) {\n+\t\t\t\t\tgoto _fail;\n+\t\t\t\t}\n+\t\t\t\tmid = (*env)->GetStaticMethodID(env, clz, \"load\", \"(Ljdk/internal/loader/NativeLibraries$NativeLibraryImpl;Ljava/lang/String;ZZ)Z\");\n+\t\t\t\tif (NULL == mid) {\n+\t\t\t\t\tgoto _fail;\n+\t\t\t\t}\n+\t\t\t\tvm->nativeLibrariesLoadMethodID = (UDATA) mid;\n+\t\t\t\tTrc_JCL_init_nativeLibrariesLoadMethodID(vmThread, vm->nativeLibrariesLoadMethodID);\n+#else /* JAVA_SPEC_VERSION >= 15 */", "originalCommit": "38b53572bd0eabd85c35cb1d150edc8a5adc89c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1OTc3Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11160#discussion_r522359777", "bodyText": "Yeah, that's right. Removed the zero setting.", "author": "JasonFengJ9", "createdAt": "2020-11-12T19:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NzMyMw=="}], "type": "inlineReview"}, {"oid": "d5f303d61102e2c16b0477aeec5a2b21635312dd", "url": "https://github.com/eclipse-openj9/openj9/commit/d5f303d61102e2c16b0477aeec5a2b21635312dd", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-11-12T19:23:40Z", "type": "commit"}, {"oid": "d5f303d61102e2c16b0477aeec5a2b21635312dd", "url": "https://github.com/eclipse-openj9/openj9/commit/d5f303d61102e2c16b0477aeec5a2b21635312dd", "message": "JDK15 getCurrentClassLoader() for j.i.l.NativeLibraries.load()\n\ngetCurrentClassLoader() might be called while invoking native method\njdk.internal.loader.NativeLibraries.load(NativeLibraryImpl\nimpl, String name, boolean isBuiltin, boolean isJNI), the classloader of\nNativeLibraryImpl.fromClass should be returned. To retrieve the method\nargument, the native method can't be jitted;\nAdded the native method above to JIT excludeArray;\nAlso added the native method to the recognized method collection and\nexclude it from direct JNI call;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-11-12T19:23:40Z", "type": "forcePushed"}]}