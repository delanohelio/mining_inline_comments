{"pr_number": 11158, "pr_title": "Add Java11 support for snapshot/restore", "pr_createdAt": "2020-11-11T22:03:19Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11158", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyMjgyNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11158#discussion_r522322826", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tif (IS_SNAPSHOT_RUN(vm)) {\n          \n          \n            \n            \t\t\t\t\tvm->modularityPool = pool_new(OMR_MAX(sizeof(J9Package), sizeof(J9Module)),  0, 0, 0, J9_GET_CALLSITE(), J9MEM_CATEGORY_MODULES, POOL_FOR_PORT(VMSNAPSHOTIMPL_OMRPORT_FROM_JAVAVM(vm)));\n          \n          \n            \n            \t\t\t\t} else if (!IS_RESTORE_RUN(vm))\n          \n          \n            \n            \t\t\t\tif (IS_SNAPSHOT_RUN(vm)) {\n          \n          \n            \n            \t\t\t\t\tvm->modularityPool = pool_new(OMR_MAX(sizeof(J9Package), sizeof(J9Module)),  0, 0, 0, J9_GET_CALLSITE(), J9MEM_CATEGORY_MODULES, POOL_FOR_PORT(VMSNAPSHOTIMPL_OMRPORT_FROM_JAVAVM(vm)));\n          \n          \n            \n            \t\t\t\t} else if (IS_RESTORE_RUN(vm)) {\n          \n          \n            \n            \t\t\t\t\t/* vm->modularityPool is already initialized as part of the restore */\n          \n          \n            \n            \t\t\t\t} else\n          \n      \n    \n    \n  \n\nMake the 3 cases {snapshot, restore, normal jvm} explicit.", "author": "DanHeidinga", "createdAt": "2020-11-12T18:26:29Z", "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -2359,7 +2359,14 @@ IDATA VMInitStages(J9JavaVM *vm, IDATA stage, void* reserved) {\n \t\t\t}\n \n \t\t\tif (J2SE_VERSION(vm) >= J2SE_V11) {\n-\t\t\t\tvm->modularityPool = pool_new(OMR_MAX(sizeof(J9Package),sizeof(J9Module)),  0, 0, 0, J9_GET_CALLSITE(), J9MEM_CATEGORY_MODULES, POOL_FOR_PORT(vm->portLibrary));\n+#if defined(J9VM_OPT_SNAPSHOTS)\n+\t\t\t\tif (IS_SNAPSHOT_RUN(vm)) {\n+\t\t\t\t\tvm->modularityPool = pool_new(OMR_MAX(sizeof(J9Package), sizeof(J9Module)),  0, 0, 0, J9_GET_CALLSITE(), J9MEM_CATEGORY_MODULES, POOL_FOR_PORT(VMSNAPSHOTIMPL_OMRPORT_FROM_JAVAVM(vm)));\n+\t\t\t\t} else if (!IS_RESTORE_RUN(vm))", "originalCommit": "4792a5ce113f8d646c83b039cff49655fcf38bc6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjk2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11158#discussion_r522326965", "bodyText": "Why is this required?  It inits the static fields {platformEncoding, fileEncoding, osEncoding} in System.java.  Aren't they saved in an initialized state?  Why do we reset them on a restore run?", "author": "DanHeidinga", "createdAt": "2020-11-12T18:33:07Z", "path": "runtime/jcl/common/stdinit.c", "diffHunk": "@@ -169,6 +173,12 @@ restoreRunStandardInit(J9JavaVM *vm)\n #endif /* !J9VM_INTERP_MINIMAL_JCL */\n #endif /* J9VM_OPT_SIDECAR */\n \n+#if JAVA_SPEC_VERSION >= 11\n+\tvmFuncs->internalAcquireVMAccess(vmThread);\n+\tvmFuncs->sendInitEncodings(vmThread);", "originalCommit": "4792a5ce113f8d646c83b039cff49655fcf38bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk1NDY3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11158#discussion_r522954673", "bodyText": "The JCL natives set a native static when encodings aare initialized, this needs to be re-init in the restore run", "author": "tajila", "createdAt": "2020-11-13T13:38:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk5ODk4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11158#discussion_r522998983", "bodyText": "Thanks.  Following that path, it looks like this is the native that needs to be called again:\nhttps://github.com/eclipse/openj9/blob/0aec295571c6c25927af41a629bc915c2129642e/runtime/jcl/common/system.c#L425-L429", "author": "DanHeidinga", "createdAt": "2020-11-13T14:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjk2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzAwMDYyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11158#discussion_r523000622", "bodyText": "Can you add this as a comment to the code?  Something like:\n/* Need to resend System.initEncodings() because it calls into native code which\n * has to reinitialize the native static value done by the \"InitializeEncoding\" native.\n * See the code in system.c:: getEncoding\n */", "author": "DanHeidinga", "createdAt": "2020-11-13T14:53:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNjk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNzc1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11158#discussion_r522327758", "bodyText": "The other caller of this API looks like:\n/* Run the JCL initialization code (what used to be JNI_OnLoad) */\n\tjniVersion = nativeLibrary->send_lifecycle_event(vmThread, nativeLibrary, \"JCL_OnLoad\", JNI_VERSION_1_1);\n\tif (!vmFuncs->jniVersionIsValid(jniVersion)) {\n\t\treturn 1;\n\t}\n\nShould this code validate the JNI version as well?", "author": "DanHeidinga", "createdAt": "2020-11-12T18:34:24Z", "path": "runtime/jcl/common/stdinit.c", "diffHunk": "@@ -161,6 +162,9 @@ restoreRunStandardInit(J9JavaVM *vm)\n \t}\n \t((J9NativeLibrary*)nativeLibrary)->flags |= J9NATIVELIB_FLAG_ALLOW_INL;\n \n+\t/* Run the JCL initialization code (what used to be JNI_OnLoad) */\n+\tnativeLibrary->send_lifecycle_event(vmThread, nativeLibrary, \"JCL_OnLoad\", JNI_VERSION_1_1);", "originalCommit": "4792a5ce113f8d646c83b039cff49655fcf38bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjk3MDExNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11158#discussion_r522970115", "bodyText": "yes, I've added the JNI version validation", "author": "tajila", "createdAt": "2020-11-13T14:05:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMyNzc1OA=="}], "type": "inlineReview"}, {"oid": "a2c7ee871252d64ca61084f2a69fade258ff2332", "url": "https://github.com/eclipse-openj9/openj9/commit/a2c7ee871252d64ca61084f2a69fade258ff2332", "message": "Add Java11 support for snapshot/restore\n\nAdd support for persisting the module and packages. Modify the restore\nsequence to not initialize classes that aren't used in Java11\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-11-13T14:03:16Z", "type": "forcePushed"}, {"oid": "17b1bd88ae4e42aa2e317e9845e3baa9be39ae12", "url": "https://github.com/eclipse-openj9/openj9/commit/17b1bd88ae4e42aa2e317e9845e3baa9be39ae12", "message": "Add Java11 support for snapshot/restore\n\nAdd support for persisting the module and packages. Modify the restore\nsequence to not initialize classes that aren't used in Java11\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-11-13T16:40:59Z", "type": "commit"}, {"oid": "17b1bd88ae4e42aa2e317e9845e3baa9be39ae12", "url": "https://github.com/eclipse-openj9/openj9/commit/17b1bd88ae4e42aa2e317e9845e3baa9be39ae12", "message": "Add Java11 support for snapshot/restore\n\nAdd support for persisting the module and packages. Modify the restore\nsequence to not initialize classes that aren't used in Java11\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-11-13T16:40:59Z", "type": "forcePushed"}]}