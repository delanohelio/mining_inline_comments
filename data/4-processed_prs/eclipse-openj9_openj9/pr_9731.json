{"pr_number": 9731, "pr_title": "Add portable AOT support on x86", "pr_createdAt": "2020-05-28T18:14:17Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9731", "timeline": [{"oid": "7c237312cc2cf6f65fe1ec109896b0d4240a67c5", "url": "https://github.com/eclipse-openj9/openj9/commit/7c237312cc2cf6f65fe1ec109896b0d4240a67c5", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-05-28T19:04:03Z", "type": "forcePushed"}, {"oid": "390a4c215f0e611d8a6f09b91b94a8502ce2018c", "url": "https://github.com/eclipse-openj9/openj9/commit/390a4c215f0e611d8a6f09b91b94a8502ce2018c", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-05-28T19:22:15Z", "type": "forcePushed"}, {"oid": "6849d1af2f201ad1b0eb4dae5a7d0db408c254bb", "url": "https://github.com/eclipse-openj9/openj9/commit/6849d1af2f201ad1b0eb4dae5a7d0db408c254bb", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-01T19:59:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434027863", "bodyText": "This is a static. Does this work with extensible classes?\nI don't see detectRelocatable() being called anywhere in this changeset. It is called in OMR::CompilerEnv::initializeRelocatableTargetEnvironment() but will use its own definition of detectRelocatable I think.", "author": "mpirvu", "createdAt": "2020-06-02T16:52:49Z", "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -66,12 +66,14 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   \n+   static TR::CPU detectRelocatable(OMRPortLibrary * const omrPortLib);", "originalCommit": "6ec2f952b3b4c161aa44a34eb48b6fc42d6b7c86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA2MzQ0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434063443", "bodyText": "I think static works with extensible classes. It's proven to work with the detect() set of changes.  TR::CPU::detectRelocatable(TR::Compiler->omrPortLib); will use the most derived definition (Notice the TR::CPU). So once J9::CPU::detectRelocatable() is defined, it will start using J9::CPU::detectRelocatable() instead of OMR::CPU::detectRelocatable.", "author": "harryyu1994", "createdAt": "2020-06-02T17:52:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MDM1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434260352", "bodyText": "I verified that detectRelocatable() does not seem to be the cause of the issue i mentioned. It's\n   if (((TR_J9VMBase *)fe)->isAOT_DEPRECATED_DO_NOT_USE())\n      _target = TR::Compiler->relocatableTarget;\nI failed to see why this would create the javac being jammed problem though.", "author": "harryyu1994", "createdAt": "2020-06-03T01:28:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5MDc5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434290797", "bodyText": "-      _target = TR::Compiler->relocatableTarget;\n+      _target = TR::Compiler->target;\nIf i take out relocatableTarget and replace with target then it works. Something is wrong with relocatableTarget..", "author": "harryyu1994", "createdAt": "2020-06-03T03:41:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5Mjk3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434292973", "bodyText": "If you replace the body of J9::X86::CPU::detectRelocatable with the body of OMR::CPU::detectRelocatable and leave _target = TR::Compiler->relocatableTarget;, do you still see the problem?", "author": "mpirvu", "createdAt": "2020-06-03T03:52:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5MzY1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434293655", "bodyText": "Yes I tried it. I also tried removing J9::X86::CPU::detectRelocatable entirely but leaving _target = TR::Compiler->relocatableTarget. still see the problem.", "author": "harryyu1994", "createdAt": "2020-06-03T03:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NDE2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434294167", "bodyText": "Trying my last attempt to make sure J9::X86::CPU::detectRelocatable works: instead of doing cpu.target = TR::CPU::detect(), i'm trying cpu.target = TR::CPU::detectRelocatable() and avoiding using relocatableTarget at all. If this works we can conclude that J9::X86::CPU::detectRelocatable is working properly.", "author": "harryyu1994", "createdAt": "2020-06-03T03:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI5NDk0OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434294949", "bodyText": "And it worked. So it's definitely TR::Compiler->relocatableTarget..\nI can try the other combo cpu.relocatableTarget = TR::CPU::detect() and use relocatableTarget instead of target everywhere. I'm guessing that will fail.", "author": "harryyu1994", "createdAt": "2020-06-03T04:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTgzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434311837", "bodyText": "To my surprise the above configuration worked.", "author": "harryyu1994", "createdAt": "2020-06-03T05:13:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxNjc2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434316766", "bodyText": "as soon as we do this:\n-   _target(TR::Compiler->target),\n+   _target(TR::Compiler->relocatableTarget),\n(In OMRCompilation constructor)\nIt stops working. There is something different between TR::Compiler->target and TR::Compiler->relocatableTarget that was not intended.", "author": "harryyu1994", "createdAt": "2020-06-03T05:30:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxODkzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r434318930", "bodyText": "I think I'm starting to understand why\nAfter the initialization, we continue to set things for the target:\n 5180  #if !defined(J9_PROJECT_SPECIFIC)\n 5181     TR::Compiler->host.setNumberOfProcessors(2);\n 5182:    TR::Compiler->target.setNumberOfProcessors(2);\n 5183     TR::Compiler->host.setSMP(true);\n 5184:    TR::Compiler->target.setSMP(true);\n 5185  #endif\nWe need to do the same for relocatableTarget if we want the same behavior. Or I should look into sinking them down to the constructor (which most likely not possible).", "author": "harryyu1994", "createdAt": "2020-06-03T05:38:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyNzg2Mw=="}], "type": "inlineReview"}, {"oid": "ff7148930717efd89233f045def941a609553119", "url": "https://github.com/eclipse-openj9/openj9/commit/ff7148930717efd89233f045def941a609553119", "message": "fix", "committedDate": "2020-06-02T18:40:09Z", "type": "forcePushed"}, {"oid": "4074d24a0ff40c5e08a46acd829ade5aa19088e5", "url": "https://github.com/eclipse-openj9/openj9/commit/4074d24a0ff40c5e08a46acd829ade5aa19088e5", "message": "fix relotarget", "committedDate": "2020-06-04T15:34:59Z", "type": "forcePushed"}, {"oid": "948954a037baba3eaa2003119c95d4c7e3f44f4a", "url": "https://github.com/eclipse-openj9/openj9/commit/948954a037baba3eaa2003119c95d4c7e3f44f4a", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-16T21:29:57Z", "type": "forcePushed"}, {"oid": "4ce0403b5505e906833135025415f49c26ee25e4", "url": "https://github.com/eclipse-openj9/openj9/commit/4ce0403b5505e906833135025415f49c26ee25e4", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-16T21:41:49Z", "type": "forcePushed"}, {"oid": "35fd98236f453dcb244e68e87c7eca094b47757e", "url": "https://github.com/eclipse-openj9/openj9/commit/35fd98236f453dcb244e68e87c7eca094b47757e", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-18T18:28:34Z", "type": "forcePushed"}, {"oid": "eb97ecbf292b433b7583130b5005b560737572b3", "url": "https://github.com/eclipse-openj9/openj9/commit/eb97ecbf292b433b7583130b5005b560737572b3", "message": "debug only", "committedDate": "2020-06-18T19:01:05Z", "type": "forcePushed"}, {"oid": "a98c2889259c5f4444e40902a3ac1100f1d73248", "url": "https://github.com/eclipse-openj9/openj9/commit/a98c2889259c5f4444e40902a3ac1100f1d73248", "message": "debug only", "committedDate": "2020-06-18T19:41:15Z", "type": "forcePushed"}, {"oid": "384abf154659b79bdeef06724ff2bfc2e14d0317", "url": "https://github.com/eclipse-openj9/openj9/commit/384abf154659b79bdeef06724ff2bfc2e14d0317", "message": "Create processor for portable AOT on x86\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-18T19:41:10Z", "type": "forcePushed"}, {"oid": "d40d236ffeb88422fe73652e867b827772133e72", "url": "https://github.com/eclipse-openj9/openj9/commit/d40d236ffeb88422fe73652e867b827772133e72", "message": "Add portable AOT support on x86\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-18T20:16:04Z", "type": "forcePushed"}, {"oid": "93a24e55e306a8f39b8162338a601e6967d6d221", "url": "https://github.com/eclipse-openj9/openj9/commit/93a24e55e306a8f39b8162338a601e6967d6d221", "message": "Add portable AOT support on x86\n\nWhen there is no existing SCC and no portable option specified (-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC (ignoring portable options and whether we are in container or not)\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-18T20:21:53Z", "type": "forcePushed"}, {"oid": "57fde61e5a4eaf81e2810d6e3d39c1c059fa5290", "url": "https://github.com/eclipse-openj9/openj9/commit/57fde61e5a4eaf81e2810d6e3d39c1c059fa5290", "message": "Add portable AOT support on x86\n\nWhen there is no existing SCC and no portable option specified (-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC (ignoring portable options and whether we are in container or not)\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-18T20:24:22Z", "type": "forcePushed"}, {"oid": "34739b40778183b7e57460357df4283fb0cab083", "url": "https://github.com/eclipse-openj9/openj9/commit/34739b40778183b7e57460357df4283fb0cab083", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu harryyu1994@gmail.com", "committedDate": "2020-06-18T20:44:52Z", "type": "forcePushed"}, {"oid": "01e7197c379784fdf99602da6664d723d59fd044", "url": "https://github.com/eclipse-openj9/openj9/commit/01e7197c379784fdf99602da6664d723d59fd044", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-18T20:46:16Z", "type": "forcePushed"}, {"oid": "22d1ef39810d678506f65baeb040de2b29551a9e", "url": "https://github.com/eclipse-openj9/openj9/commit/22d1ef39810d678506f65baeb040de2b29551a9e", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-19T20:38:54Z", "type": "forcePushed"}, {"oid": "47188d1f3726239a982a5c237b9da077aec3096d", "url": "https://github.com/eclipse-openj9/openj9/commit/47188d1f3726239a982a5c237b9da077aec3096d", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-19T21:09:51Z", "type": "forcePushed"}, {"oid": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d", "url": "https://github.com/eclipse-openj9/openj9/commit/5889df4ce6f4a7c22f77d252b1a36eca3821ea0d", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-22T06:11:57Z", "type": "forcePushed"}, {"oid": "e065401b9924ff668bec6731d39df075fd2ee12f", "url": "https://github.com/eclipse-openj9/openj9/commit/e065401b9924ff668bec6731d39df075fd2ee12f", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-22T13:54:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443547981", "bodyText": "For JITServer we set only the cpu while for non-jitserver we set the entire _target field.", "author": "mpirvu", "createdAt": "2020-06-22T13:13:37Z", "path": "runtime/compiler/compile/J9Compilation.cpp", "diffHunk": "@@ -183,13 +183,22 @@ J9::Compilation::Compilation(int32_t id,\n #endif /* defined(J9VM_OPT_JITSERVER) */\n    _osrProhibitedOverRangeOfTrees(false)\n    {\n-\n #if defined(J9VM_OPT_JITSERVER)\n    // In JITServer, we would like to use JITClient's processor info for the compilation\n    // The following code effectively replaces the cpu with client's cpu through the getProcessorDescription() that has JITServer support\n    if (self()->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER)\n-      _target.cpu = TR::CPU(TR::Compiler->target.cpu.getProcessorDescription());\n+      {\n+      OMRProcessorDesc JITClientProcessorDesc = TR::Compiler->target.cpu.getProcessorDescription();\n+      _target.cpu = TR::CPU(JITClientProcessorDesc);", "originalCommit": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NTI4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443645280", "bodyText": "Currently we are only getting cpu info from the client instead of the entire target. In the future we might want to get target from client.", "author": "harryyu1994", "createdAt": "2020-06-22T15:30:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MzU1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443763552", "bodyText": "Please open an issue to copy the entire Environment to server", "author": "mpirvu", "createdAt": "2020-06-22T18:58:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzkwNzgxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443907817", "bodyText": "Issue opened: #9979\nI will address it soon in a separate PR.", "author": "harryyu1994", "createdAt": "2020-06-23T01:17:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0Nzk4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MTAxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443551019", "bodyText": "This could be made ASSERT_FATAL if it's never supposed to be hit", "author": "mpirvu", "createdAt": "2020-06-22T13:18:36Z", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -773,6 +773,13 @@ TR_RelocationRuntime::validateAOTHeader(TR_FrontEnd *fe, J9VMThread *curThread)\n    return false;\n    }\n \n+OMRProcessorDesc\n+TR_RelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)\n+   {\n+   TR_ASSERT(0, \"Error: getProcessorDescription not supported in this relocation runtime\");", "originalCommit": "5889df4ce6f4a7c22f77d252b1a36eca3821ea0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODI2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443598263", "bodyText": "I don't see applyUserOptions for x86", "author": "mpirvu", "createdAt": "2020-06-22T14:26:39Z", "path": "runtime/compiler/env/ProcessorDetection.cpp", "diffHunk": "@@ -648,10 +648,12 @@ void\n TR_J9VM::initializeProcessorType()\n    {\n    TR_ASSERT(_compInfo,\"compInfo not defined\");\n-   TR::Compiler->target.cpu.applyUserOptions();\n \n    if (TR::Compiler->target.cpu.isZ())\n       {\n+      TR::Compiler->target.cpu.applyUserOptions();", "originalCommit": "e065401b9924ff668bec6731d39df075fd2ee12f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTY5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443655694", "bodyText": "I've put applyUserOptions() back to the original place. There is no need to have this change here.", "author": "harryyu1994", "createdAt": "2020-06-22T15:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU5ODI2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzYwNTU1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443605557", "bodyText": "A doxygen comment would be nice here", "author": "mpirvu", "createdAt": "2020-06-22T14:35:54Z", "path": "runtime/compiler/x/env/J9CPU.hpp", "diffHunk": "@@ -51,13 +51,15 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n+   ", "originalCommit": "e065401b9924ff668bec6731d39df075fd2ee12f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "854c090f4f283e6f1b5640101d3a654b9233e45b", "url": "https://github.com/eclipse-openj9/openj9/commit/854c090f4f283e6f1b5640101d3a654b9233e45b", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-22T15:28:15Z", "type": "forcePushed"}, {"oid": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24", "url": "https://github.com/eclipse-openj9/openj9/commit/235ac7d93a4aac599c9e2dedb07a150a5ece1a24", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-22T15:31:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTI2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443655264", "bodyText": "what is the default initialization value of vm->sharedCacheAPI->sharedCachePortable if we don't execute either of these paths?", "author": "dsouzai", "createdAt": "2020-06-22T15:45:38Z", "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,20 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableShareClasses and -XX:-PortableShareClasses; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXSHARECLASSESPORTABLE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOSHARECLASSESPORTABLE, NULL);\n+\t\t\t\tif (argIndex1 > argIndex2) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = TRUE;\n+\t\t\t\t} else if (argIndex2 > argIndex1) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = FALSE;\n+\t\t\t\t}", "originalCommit": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1ODMxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443658312", "bodyText": "Default initialization value is 0.\nNear the beginning of this function:\nmemset(vm->sharedCacheAPI, 0, sizeof(J9SharedCacheAPI));", "author": "harryyu1994", "createdAt": "2020-06-22T15:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NTI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NzAwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443657005", "bodyText": "maybe just move this to the header file like you did for TR_JITServerRelocationRuntime::getProcessorDescription", "author": "dsouzai", "createdAt": "2020-06-22T15:48:13Z", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -773,6 +773,13 @@ TR_RelocationRuntime::validateAOTHeader(TR_FrontEnd *fe, J9VMThread *curThread)\n    return false;\n    }\n \n+OMRProcessorDesc\n+TR_RelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)\n+   {\n+   TR_ASSERT_FATAL(0, \"Error: getProcessorDescription not supported in this relocation runtime\");\n+   return OMRProcessorDesc();\n+   }\n+", "originalCommit": "235ac7d93a4aac599c9e2dedb07a150a5ece1a24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99", "url": "https://github.com/eclipse-openj9/openj9/commit/1266e5de9c5866ca15ace5b5d8843af2fb8aad99", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-22T15:53:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzAyNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443663026", "bodyText": "I guess this needs to be inside #if !defined(J9ZOS390) ?", "author": "hangshao0", "createdAt": "2020-06-22T15:57:02Z", "path": "runtime/shared_common/shrinit.cpp", "diffHunk": "@@ -264,6 +264,7 @@ J9SharedClassesHelpText J9SHAREDCLASSESHELPTEXT[] = {\n \t{HELPTEXT_LAYER_EQUALS,J9NLS_SHRC_SHRINIT_HELPTEXT_LAYER_EQUALS, 0, 0},\n \t{OPTION_CREATE_LAYER, J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER, 0, 0},\n #endif /* J9VM_OPT_MULTI_LAYER_SHARED_CLASS_CACHE */\n+\t{OPTION_PORTABLE, J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE, 0, 0},", "originalCommit": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2OTUxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443669511", "bodyText": "I think it should only be present on x86 currently. What macro should we use?", "author": "harryyu1994", "createdAt": "2020-06-22T16:06:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzAyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTIyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443671227", "bodyText": "defined(J9X86)", "author": "hangshao0", "createdAt": "2020-06-22T16:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2MzAyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTgxNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443671815", "bodyText": "@hangshao0 Not sure if I should add this or this is someone else's job. It looks like it needs to be in multiple languages.", "author": "harryyu1994", "createdAt": "2020-06-22T16:10:25Z", "path": "runtime/nls/shrc/j9shr.nls", "diffHunk": "@@ -6802,6 +6802,13 @@ J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.system_action=\n J9NLS_SHRC_SHRINIT_HELPTEXT_CREATE_LAYER.user_response=\n # END NON-TRANSLATABLE\n \n+J9NLS_SHRC_SHRINIT_HELPTEXT_PORTABLE=Enable the shared cache to be portable.", "originalCommit": "1266e5de9c5866ca15ace5b5d8843af2fb8aad99", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTE5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443675191", "bodyText": "Adding the current message in this file is correct and sufficient now. Our translators will translator this message into different languages and add them in the corresponding .nls files.", "author": "hangshao0", "createdAt": "2020-06-22T16:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTgxNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3ODcwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443678706", "bodyText": "Please add this message at the end of this file.", "author": "hangshao0", "createdAt": "2020-06-22T16:21:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3MTgxNQ=="}], "type": "inlineReview"}, {"oid": "fd3139fcccc9d91c74b1e12a40f87ebd34ec6664", "url": "https://github.com/eclipse-openj9/openj9/commit/fd3139fcccc9d91c74b1e12a40f87ebd34ec6664", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-22T16:35:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzcyODExMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r443728111", "bodyText": "Better to put the new code here inside defined(J9X86) as well.", "author": "hangshao0", "createdAt": "2020-06-22T17:49:43Z", "path": "runtime/shared_common/shrinit.cpp", "diffHunk": "@@ -1263,6 +1272,12 @@ j9shr_dump_help(J9JavaVM* vm, UDATA more)\n \ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXDISABLEUSEGCSTARTUPHINTS, NULL);\n \tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n \n+\ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXSHARECLASSESPORTABLE, NULL);\n+\tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n+\n+\ttmpcstr = j9nls_lookup_message((J9NLS_INFO | J9NLS_DO_NOT_PRINT_MESSAGE_TAG), J9NLS_EXELIB_INTERNAL_HELP_XXNOSHARECLASSESPORTABLE, NULL);\n+\tj9file_printf(PORTLIB, J9PORT_TTY_OUT, \"%s\", tmpcstr);\n+", "originalCommit": "fd3139fcccc9d91c74b1e12a40f87ebd34ec6664", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0b0bd393020da5aadaefa08780eb0435faece914", "url": "https://github.com/eclipse-openj9/openj9/commit/0b0bd393020da5aadaefa08780eb0435faece914", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-22T18:16:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNjY2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r444436664", "bodyText": "Can this be an unconditional else block?  Is there any reason to exclude the impossible == case?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t} else if (argIndex2 > argIndex1) {\n          \n          \n            \n            \t\t\t\t} else {", "author": "DanHeidinga", "createdAt": "2020-06-23T18:50:57Z", "path": "runtime/shared/shrclssup.c", "diffHunk": "@@ -141,6 +141,20 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved)\n \t\t\t\t\truntimeFlags |= J9SHR_RUNTIMEFLAG_DISABLE_BCI;\n \t\t\t\t}\n \n+\t\t\t\t/* Check for -XX:+PortableShareClasses and -XX:-PortableShareClasses; whichever comes later wins.\n+\t\t\t\t * These options should be checked before parseArgs() to allow -Xshareclasses:portable to override this option.\n+\t\t\t\t * \n+\t\t\t\t * Note: Please also change the function checkArgsConsumed() in runtime/vm/jvminit.c when adding new options,\n+\t\t\t\t * in order to quietly consume the options if it is used without -Xshareclasses\n+\t\t\t\t */\n+\t\t\t\targIndex1 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXSHARECLASSESPORTABLE, NULL);\n+\t\t\t\targIndex2 = FIND_AND_CONSUME_ARG(EXACT_MATCH, VMOPT_XXNOSHARECLASSESPORTABLE, NULL);\n+\t\t\t\tif (argIndex1 > argIndex2) {\n+\t\t\t\t\tvm->sharedCacheAPI->sharedCachePortable = TRUE;\n+\t\t\t\t} else if (argIndex2 > argIndex1) {", "originalCommit": "0b0bd393020da5aadaefa08780eb0435faece914", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "13abae467023e5f7f6b6fa339aaf5e5ff4849a94", "url": "https://github.com/eclipse-openj9/openj9/commit/13abae467023e5f7f6b6fa339aaf5e5ff4849a94", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified\n(-Xshareclasses:portable, -XX:+PortableShareClasses), we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked\nportable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor\nfor AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor\nstored in the SCC (ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for\nall of its compilations regardless of the portable/inContainer/SCC options\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-23T19:35:31Z", "type": "forcePushed"}, {"oid": "c50734839269a6cbe2f94f43af6147fb5f4289d8", "url": "https://github.com/eclipse-openj9/openj9/commit/c50734839269a6cbe2f94f43af6147fb5f4289d8", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-23T22:13:31Z", "type": "forcePushed"}, {"oid": "05ea4511ea4ef8afd5f3435ce2ee39561301310c", "url": "https://github.com/eclipse-openj9/openj9/commit/05ea4511ea4ef8afd5f3435ce2ee39561301310c", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-07-14T17:03:32Z", "type": "forcePushed"}, {"oid": "ef843c2ccb485355158fc812f700139b950c53f9", "url": "https://github.com/eclipse-openj9/openj9/commit/ef843c2ccb485355158fc812f700139b950c53f9", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\ndepends on: eclipse/omr#4861\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-07-14T18:38:43Z", "type": "forcePushed"}, {"oid": "270a41478fa4f73089a001892c021c47ef39a5a6", "url": "https://github.com/eclipse-openj9/openj9/commit/270a41478fa4f73089a001892c021c47ef39a5a6", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-07-15T16:40:51Z", "type": "commit"}, {"oid": "638845b634b32380c081ffe0c56fa7e869f6ddd3", "url": "https://github.com/eclipse-openj9/openj9/commit/638845b634b32380c081ffe0c56fa7e869f6ddd3", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-07-15T16:38:47Z", "type": "forcePushed"}, {"oid": "e2ccf89621a485f41041a2ba6a310d0a4bc52e49", "url": "https://github.com/eclipse-openj9/openj9/commit/e2ccf89621a485f41041a2ba6a310d0a4bc52e49", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\n- When there is no existing SCC and no portable option specified we use the host processor for AOT\n- When there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\n- When there is no existing SCC and in container, we use the hand-picked portable processor for AOT\n- When there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\n- JITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-07-15T16:37:12Z", "type": "forcePushed"}, {"oid": "270a41478fa4f73089a001892c021c47ef39a5a6", "url": "https://github.com/eclipse-openj9/openj9/commit/270a41478fa4f73089a001892c021c47ef39a5a6", "message": "Add portable AOT support on x86\n\nTR::Compiler->target contains the host environment while TR::Compiler->relocatableTarget contains\nthe target environment that AOT compilations will use. TR::Compiler->relocatableTarget is set according\nto the presence of SCC, portable options and Docker containers. Then at the beginning of every compilation\n(in the constructor) we set the target to be TR::Compiler->target if JIT compilation and\nTR::Compiler->relocatableTarget if AOT compilation.\nThe following scenarios were considered:\n\nWhen there is no existing SCC and no portable option specified we use the host processor for AOT\nWhen there is no existing SCC and has portable option specified, we use the hand-picked portable processor for AOT\nWhen there is no existing SCC and in container, we use the hand-picked portable processor for AOT\nWhen there is existing SCC and it passes processor compatibility check, we use the processor stored in the SCC\n(ignoring portable options and whether we are in container or not)\nJITServer is not affected. Meaning JITServer will still use JITClient's processor information for all of its\ncompilations regardless of the portable/inContainer/SCC options\n\nIssue: #7966\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-07-15T16:40:51Z", "type": "forcePushed"}, {"oid": "43a903dcc369d4c40661626b7868d61d20a1d5ee", "url": "https://github.com/eclipse-openj9/openj9/commit/43a903dcc369d4c40661626b7868d61d20a1d5ee", "message": "Sink container detection down to sharedCacheAPI->sharedCachePortable\n\nWhen user disable portableAOT, it should disable portableAOT in container\nas well.\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-07-15T17:08:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2MjIwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r455262202", "bodyText": "Should this be named something like getProcessorDescriptionFromSCC to be clear what it does? We could get the processor description of current machine. Also, I don't see where this is used.", "author": "mpirvu", "createdAt": "2020-07-15T18:37:50Z", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -1001,6 +1001,26 @@ TR_SharedCacheRelocationRuntime::getCurrentLockwordOptionHashValue(J9JavaVM *vm)\n    return currentLockwordOptionHashValue;\n    }\n \n+OMRProcessorDesc\n+TR_SharedCacheRelocationRuntime::getProcessorDescription(TR_FrontEnd *fe, J9VMThread *curThread)", "originalCommit": "43a903dcc369d4c40661626b7868d61d20a1d5ee", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3OTE0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9731#discussion_r455279147", "bodyText": "It's used over here:\nhttps://github.com/eclipse/openj9/blob/43a903dcc369d4c40661626b7868d61d20a1d5ee/runtime/compiler/control/rossa.cpp#L1896-L1919\nWhen we have an existing SCC and passes the AOTHeader validation check, we copy processor features from SCC to relocatableTarget.\nI will change it to getProcessorDescriptionFromSCC to avoid confusions with the other getProcessorDescription() we have for TR::CPU.", "author": "harryyu1994", "createdAt": "2020-07-15T19:07:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI2MjIwMg=="}], "type": "inlineReview"}, {"oid": "72ae9fd3cbc38a01e8c844cff90ee0b1818632d3", "url": "https://github.com/eclipse-openj9/openj9/commit/72ae9fd3cbc38a01e8c844cff90ee0b1818632d3", "message": "Rename getProcessorDescription to getProcessorDescriptionSCC\n\nThe purpose is to avoid confusions with TR::CPU's getProcessorDescription().\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-07-15T19:18:35Z", "type": "commit"}]}