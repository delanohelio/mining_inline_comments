{"pr_number": 11004, "pr_title": "Uncommon autosimd piv loop stride increment node", "pr_createdAt": "2020-10-26T21:29:54Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11004", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MzAzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r512293038", "bodyText": "I think this assert was supposed to check if the child is a const.", "author": "IBMJimmyk", "createdAt": "2020-10-26T21:55:57Z", "path": "runtime/compiler/optimizer/SPMDParallelizer.cpp", "diffHunk": "@@ -1441,6 +1441,30 @@ bool TR_SPMDKernelParallelizer::processSPMDKernelLoopForSIMDize(TR::Compilation\n             {\n             // increment of PIV\n             traceMsg(comp, \"Reducing the number of iterations of the loop %d at storeNode [%p] by vector length %d \\n\",loop->getNumber(), storeNode, unrollCount);\n+\t    TR_ASSERT_FATAL(storeNode->getFirstChild()->getOpCode().isAdd() || storeNode->getFirstChild()->getOpCode().isSub(), \"PIV increment should be simple (either by add or by sub\");\n+\t    TR_ASSERT_FATAL(storeNode->getFirstChild()->getFirstChild()->getOpCode().isLoad(), \"PIV increment should have load\");\n+\t    TR_ASSERT_FATAL(!storeNode->getFirstChild()->getSecondChild()->getSymbolReference(), \"PIV increment should have const increment value\");", "originalCommit": "d7cf3a1249dec05592fb359439d0c5d7a1758c3a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI3NjAyNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r514276026", "bodyText": "Code Updated", "author": "mnalam-p", "createdAt": "2020-10-29T13:54:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MzAzOA=="}], "type": "inlineReview"}, {"oid": "e0bed4ff16a80d8a6af6a4d496449535f1be687c", "url": "https://github.com/eclipse-openj9/openj9/commit/e0bed4ff16a80d8a6af6a4d496449535f1be687c", "message": "Uncommon AutoSIMD PIV increment node.\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-10-27T19:31:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Nzc3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r513477776", "bodyText": "Maybe I'm missing something, but if the increment is commoned with other uses why does uncommoning just the definition let the vectorization do the right thing but the commoned version does not?", "author": "andrewcraik", "createdAt": "2020-10-28T14:14:59Z", "path": "runtime/compiler/optimizer/SPMDParallelizer.cpp", "diffHunk": "@@ -1441,6 +1441,30 @@ bool TR_SPMDKernelParallelizer::processSPMDKernelLoopForSIMDize(TR::Compilation\n             {\n             // increment of PIV\n             traceMsg(comp, \"Reducing the number of iterations of the loop %d at storeNode [%p] by vector length %d \\n\",loop->getNumber(), storeNode, unrollCount);\n+\t    TR_ASSERT_FATAL(storeNode->getFirstChild()->getOpCode().isAdd() || storeNode->getFirstChild()->getOpCode().isSub(), \"PIV increment should be simple (either by add or by sub\");\n+\t    TR_ASSERT_FATAL(storeNode->getFirstChild()->getFirstChild()->getOpCode().isLoad(), \"PIV increment should have load\");\n+\t    TR_ASSERT_FATAL(storeNode->getFirstChild()->getSecondChild()->getOpCode().isLoadConst(), \"PIV increment should have const increment value\");\n+            if (storeNode->getFirstChild()->getReferenceCount() > 1)", "originalCommit": "e0bed4ff16a80d8a6af6a4d496449535f1be687c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwMzE2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r514503166", "bodyText": "Lets says we want to vectorize the following\nA[i] = B[i+1] * 2\nNow when we do that, the i + 1 calculation is the same value after incrementing i. Hence, they become common. Now, if we don't uncommon the i+1 node, then later on loop reduction will change the 1 to 4 (for example). Hence making i = i + 4. Now, as i + 1 was previously commoned, this change will make the code like below -\nA[i] = B[i+4] * 2", "author": "mnalam-p", "createdAt": "2020-10-29T19:11:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Nzc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUwNDk5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r514504994", "bodyText": "Also, I believe this fix should be able to fix a previous bug #9446", "author": "mnalam-p", "createdAt": "2020-10-29T19:14:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Nzc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExNTY0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r523115644", "bodyText": "Also mixed tabs/spaces in this commit should be fixed up.", "author": "fjeremic", "createdAt": "2020-11-13T17:35:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Nzc3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTYyMDEyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r525620121", "bodyText": "The tabs/spaces are fixed, it was introduced due to vim not having proper tab extend setup", "author": "mnalam-p", "createdAt": "2020-11-18T00:42:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzQ3Nzc3Ng=="}], "type": "inlineReview"}, {"oid": "6f097bf9083f47cf554fbf9e1d033bdc3208fcd9", "url": "https://github.com/eclipse-openj9/openj9/commit/6f097bf9083f47cf554fbf9e1d033bdc3208fcd9", "message": "Uncommon AutoSIMD PIV increment node.\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-11T04:45:45Z", "type": "forcePushed"}, {"oid": "be65d7455040a3cabd3392257227469194f55d9e", "url": "https://github.com/eclipse-openj9/openj9/commit/be65d7455040a3cabd3392257227469194f55d9e", "message": "Uncommon AutoSIMD PIV increment node.\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-11T04:47:30Z", "type": "forcePushed"}, {"oid": "569bef0df6d7adcc9329b75cbd68dab0b4e66fa8", "url": "https://github.com/eclipse-openj9/openj9/commit/569bef0df6d7adcc9329b75cbd68dab0b4e66fa8", "message": "Uncommon AutoSIMD PIV increment node.\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-11T19:32:54Z", "type": "forcePushed"}, {"oid": "67bc45328d190882ba4f565e3f30be59920aa546", "url": "https://github.com/eclipse-openj9/openj9/commit/67bc45328d190882ba4f565e3f30be59920aa546", "message": "Uncommon AutoSIMD PIV increment node.\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-12T16:37:58Z", "type": "forcePushed"}, {"oid": "647469b203bf34d43e0ed390fe8230e27ee5f419", "url": "https://github.com/eclipse-openj9/openj9/commit/647469b203bf34d43e0ed390fe8230e27ee5f419", "message": "Uncommon AutoSIMD PIV increment node.\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-13T04:15:36Z", "type": "forcePushed"}, {"oid": "8f836f910bafa2fd12f1e2f8da99cdca24b924fc", "url": "https://github.com/eclipse-openj9/openj9/commit/8f836f910bafa2fd12f1e2f8da99cdca24b924fc", "message": "Uncommon AutoSIMD PIV increment node.\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-13T07:28:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczNjAzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r524736038", "bodyText": "Let's not return the value passed as a parameter. Better to make that function void.", "author": "gita-omr", "createdAt": "2020-11-16T23:18:52Z", "path": "runtime/compiler/optimizer/SPMDParallelizer.cpp", "diffHunk": "@@ -1369,6 +1369,30 @@ bool TR_SPMDKernelParallelizer::reductionLoopExitProcessing(TR::Compilation *com\n    return true;\n    }\n \n+TR::Node * replaceAndAnchorOldNode(TR::Compilation *comp, TR::TreeTop *treeTop, TR::Node *parent, TR::Node *oldNode, TR::Node *newNode, int index)\n+   {\n+\t   treeTop->insertBefore(TR::TreeTop::create(comp, TR::Node::create(TR::treetop, 1, oldNode)));\n+\t   oldNode->recursivelyDecReferenceCount();\n+\t   parent->setAndIncChild(index, newNode);\n+\t   return newNode;", "originalCommit": "8f836f910bafa2fd12f1e2f8da99cdca24b924fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczODU2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r524738563", "bodyText": "I would rather call it: changeLoopStride.", "author": "gita-omr", "createdAt": "2020-11-16T23:20:28Z", "path": "runtime/compiler/optimizer/SPMDParallelizer.cpp", "diffHunk": "@@ -1369,6 +1369,30 @@ bool TR_SPMDKernelParallelizer::reductionLoopExitProcessing(TR::Compilation *com\n    return true;\n    }\n \n+TR::Node * replaceAndAnchorOldNode(TR::Compilation *comp, TR::TreeTop *treeTop, TR::Node *parent, TR::Node *oldNode, TR::Node *newNode, int index)\n+   {\n+\t   treeTop->insertBefore(TR::TreeTop::create(comp, TR::Node::create(TR::treetop, 1, oldNode)));\n+\t   oldNode->recursivelyDecReferenceCount();\n+\t   parent->setAndIncChild(index, newNode);\n+\t   return newNode;\n+   }\n+\n+bool matchIVIncrementPattern(TR::Node *node, TR::SymbolReference *pivSymRef)\n+   {\n+   return (node->getOpCode().isAdd() || node->getOpCode().isSub()) && node->getFirstChild()->getOpCode().isLoad()\n+    && node->getFirstChild()->getSymbolReference() == pivSymRef && node->getSecondChild()->getOpCode().isLoadConst();\n+   }\n+\n+TR::Node * changeIAddISubConstNodeMultiplyBy(TR::Node * parent, int32_t multiple)", "originalCommit": "8f836f910bafa2fd12f1e2f8da99cdca24b924fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM5MzYwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r525393605", "bodyText": "or even better: multiplyLoopStride", "author": "gita-omr", "createdAt": "2020-11-17T18:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDczODU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc0MTg5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r524741891", "bodyText": "Please fix all the formatting.", "author": "gita-omr", "createdAt": "2020-11-16T23:22:58Z", "path": "runtime/compiler/optimizer/SPMDParallelizer.cpp", "diffHunk": "@@ -1427,26 +1451,110 @@ bool TR_SPMDKernelParallelizer::processSPMDKernelLoopForSIMDize(TR::Compilation\n    loop->getBlocks(&blocksInLoop);\n    ListIterator<TR::Block> blocksIt1(&blocksInLoop);\n \n-\n    // SIMD_TODO: improve this code\n \n    for (TR::Block *nextBlock = blocksIt1.getCurrent(); nextBlock; nextBlock=blocksIt1.getNext())\n       {\n+      TR_HashTab* entries = new (comp->trStackMemory()) TR_HashTab(comp->trMemory(), stackAlloc);", "originalCommit": "8f836f910bafa2fd12f1e2f8da99cdca24b924fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc0NTc1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r524745750", "bodyText": "I don't think we should create a hash table for each block. I think we need only one that is cleared on every block.", "author": "gita-omr", "createdAt": "2020-11-16T23:26:42Z", "path": "runtime/compiler/optimizer/SPMDParallelizer.cpp", "diffHunk": "@@ -1427,26 +1451,110 @@ bool TR_SPMDKernelParallelizer::processSPMDKernelLoopForSIMDize(TR::Compilation\n    loop->getBlocks(&blocksInLoop);\n    ListIterator<TR::Block> blocksIt1(&blocksInLoop);\n \n-\n    // SIMD_TODO: improve this code\n \n    for (TR::Block *nextBlock = blocksIt1.getCurrent(); nextBlock; nextBlock=blocksIt1.getNext())\n       {\n+      TR_HashTab* entries = new (comp->trStackMemory()) TR_HashTab(comp->trMemory(), stackAlloc);", "originalCommit": "8f836f910bafa2fd12f1e2f8da99cdca24b924fc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc2Mjc1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r524762757", "bodyText": "Looks like the existing code assumes there are no extended blocks at this point (since we don't traverse in the order of the trees but just get a set of blocks in the loop). So perhaps having a hash table is not really necessary since there will be only one compare and branch and it will always follow an inductions variable increment.  But let's keep the hash table in case we want to handle more general case in the future.", "author": "gita-omr", "createdAt": "2020-11-16T23:43:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc0NTc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc0Njc2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r524746763", "bodyText": "Since the node is not necessary a store maybe should be named something else.", "author": "gita-omr", "createdAt": "2020-11-16T23:27:38Z", "path": "runtime/compiler/optimizer/SPMDParallelizer.cpp", "diffHunk": "@@ -1427,26 +1451,110 @@ bool TR_SPMDKernelParallelizer::processSPMDKernelLoopForSIMDize(TR::Compilation\n    loop->getBlocks(&blocksInLoop);\n    ListIterator<TR::Block> blocksIt1(&blocksInLoop);\n \n-\n    // SIMD_TODO: improve this code\n \n    for (TR::Block *nextBlock = blocksIt1.getCurrent(); nextBlock; nextBlock=blocksIt1.getNext())\n       {\n+      TR_HashTab* entries = new (comp->trStackMemory()) TR_HashTab(comp->trMemory(), stackAlloc);\n       for (TR::TreeTop *tt = nextBlock->getEntry() ; tt != nextBlock->getExit() ; tt = tt->getNextTreeTop())\n          {\n          // identify operation for primary induction variable\n          TR::Node *storeNode = tt->getNode();", "originalCommit": "8f836f910bafa2fd12f1e2f8da99cdca24b924fc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "849215ce4d438df9f7a8513cb4864d504888f624", "url": "https://github.com/eclipse-openj9/openj9/commit/849215ce4d438df9f7a8513cb4864d504888f624", "message": "Uncommon autosimd piv loop stride increment node\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes. Also, the\nfix looks for commoning of ifcmp checks that are commoned with the\nstride calculation and adjust them accordingly.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-18T03:55:02Z", "type": "forcePushed"}, {"oid": "c3778a76309e1e9693ddc9569362048266b5a657", "url": "https://github.com/eclipse-openj9/openj9/commit/c3778a76309e1e9693ddc9569362048266b5a657", "message": "Uncommon autosimd piv loop stride increment node\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned for address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes. Also, the\nfix looks for commoning of ifcmp checks that are commoned with the\nstride calculation and adjust them accordingly.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-18T05:24:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1MjE3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r527152174", "bodyText": "There are still some tabs here that should be replaced with spaces.", "author": "IBMJimmyk", "createdAt": "2020-11-19T19:43:32Z", "path": "runtime/compiler/optimizer/SPMDParallelizer.cpp", "diffHunk": "@@ -1369,6 +1369,29 @@ bool TR_SPMDKernelParallelizer::reductionLoopExitProcessing(TR::Compilation *com\n    return true;\n    }\n \n+void TR_SPMDKernelParallelizer::replaceAndAnchorOldNode(TR::Compilation *comp, TR::TreeTop *treeTop, TR::Node *parent, TR::Node *oldNode, TR::Node *newNode, int index)\n+   {\n+\t   treeTop->insertBefore(TR::TreeTop::create(comp, TR::Node::create(TR::treetop, 1, oldNode)));\n+\t   oldNode->recursivelyDecReferenceCount();\n+\t   parent->setAndIncChild(index, newNode);", "originalCommit": "c3778a76309e1e9693ddc9569362048266b5a657", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1NzQ5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11004#discussion_r527157497", "bodyText": "Fixed", "author": "mnalam-p", "createdAt": "2020-11-19T19:52:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE1MjE3NA=="}], "type": "inlineReview"}, {"oid": "c3f808a708708f4b995036c92f06f40d6e9a0f79", "url": "https://github.com/eclipse-openj9/openj9/commit/c3f808a708708f4b995036c92f06f40d6e9a0f79", "message": "Uncommon autosimd piv loop stride increment node\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned with address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes. Also, the\nfix looks for commoning of ifcmp checks that are commoned with the\nstride calculation and adjust them accordingly.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-19T19:50:56Z", "type": "forcePushed"}, {"oid": "4c42985cf58180dfd8d4d43075f89602a8975033", "url": "https://github.com/eclipse-openj9/openj9/commit/4c42985cf58180dfd8d4d43075f89602a8975033", "message": "Uncommon autosimd piv loop stride increment node\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned with address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes. Also, the\nfix looks for commoning of ifcmp checks that are commoned with the\nstride calculation and adjust them accordingly.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-11-27T20:29:22Z", "type": "forcePushed"}, {"oid": "4d41e132673f956f65cf6224f68a4ed00483e4ae", "url": "https://github.com/eclipse-openj9/openj9/commit/4d41e132673f956f65cf6224f68a4ed00483e4ae", "message": "Uncommon autosimd piv loop stride increment node\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned with address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes. Also, the\nfix looks for commoning of ifcmp checks that are commoned with the\nstride calculation and adjust them accordingly.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-12-02T03:11:51Z", "type": "forcePushed"}, {"oid": "45e8afc6ac9520f08cb6739f050e16be130b2c12", "url": "https://github.com/eclipse-openj9/openj9/commit/45e8afc6ac9520f08cb6739f050e16be130b2c12", "message": "Uncommon autosimd piv loop stride increment node\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned with address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes. Also, the\nfix looks for commoning of ifcmp checks that are commoned with the\nstride calculation and adjust them accordingly.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-12-02T04:45:03Z", "type": "commit"}, {"oid": "45e8afc6ac9520f08cb6739f050e16be130b2c12", "url": "https://github.com/eclipse-openj9/openj9/commit/45e8afc6ac9520f08cb6739f050e16be130b2c12", "message": "Uncommon autosimd piv loop stride increment node\n\nIf the loop increment node is commoned, then reducing the loop by\nchanging the value of loop stride can cause unwanted bug. This is\npotentially true if the node is commoned with address calculation.\nThis commit uncommon the PIV increment node so that changing the\nstride does not introduce side-effects on commoned nodes. Also, the\nfix looks for commoning of ifcmp checks that are commoned with the\nstride calculation and adjust them accordingly.\n\nFixes #10656\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-12-02T04:45:03Z", "type": "forcePushed"}]}