{"pr_number": 9447, "pr_title": "Leverage CHTable at the server to check if a class is extended", "pr_createdAt": "2020-05-04T18:24:56Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9447", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1OTM1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r420759350", "bodyText": "In the new implementation this message will completely go away", "author": "mpirvu", "createdAt": "2020-05-06T12:42:53Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -500,17 +512,21 @@ TR_J9ServerVM::classHasBeenExtended(TR_OpaqueClassBlock *clazz)\n       // Check if flag is set, since once set it can not be removed\n       if((classDepthAndFlags & J9AccClassHasBeenOverridden) != 0)\n          {\n+         printf(\"%s(): clazz %p data from the cache: J9AccClassHasBeenOverridden 1\\n\", __FUNCTION__, clazz);\n          return true;\n          }\n       else\n          {\n          //Flag not set, check with client as cache data may be outdated\n          stream->write(JITServer::MessageType::VM_classHasBeenExtended, clazz);\n-         return std::get<0>(stream->read<bool>());\n+         bool result = std::get<0>(stream->read<bool>());", "originalCommit": "5d2abab521e379587121183cad8a4ec502d498f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgyOTczNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r420829736", "bodyText": "5d2abab still contains the experiment code. I'll clean it up first.", "author": "a7ehuo", "createdAt": "2020-05-06T14:20:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1OTM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1OTM3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r420759378", "bodyText": "I am not sure whether we should check the J9AccClassHasBeenOverridden bit first and only then the CHTable.", "author": "mpirvu", "createdAt": "2020-05-06T12:42:56Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -491,6 +491,18 @@ TR_J9ServerVM::classHasBeenExtended(TR_OpaqueClassBlock *clazz)\n    {\n    if(!clazz)\n       return false;\n+\n+   // Check CHTable first", "originalCommit": "5d2abab521e379587121183cad8a4ec502d498f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2MDU0MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r420760540", "bodyText": "I am also thinking that we could update this bit if we find a subclass in the CHTable", "author": "mpirvu", "createdAt": "2020-05-06T12:44:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1OTM3OA=="}], "type": "inlineReview"}, {"oid": "d6004c2b63eeb6cb02a42fc4a07afb402aef0fd8", "url": "https://github.com/eclipse-openj9/openj9/commit/d6004c2b63eeb6cb02a42fc4a07afb402aef0fd8", "message": "Leverage CHTable at the server to check if a class is extended\n\nIf the class is not cached at the server, or the flag is not set\nwhen the data is cached, check the persistent class info\non the CHTable at the server and see if the class has subclasses.\nIf the class has subclasses, consider it has been extended.\nIf the data is cached but the flag is not set, J9AccClassHasBeenOverridden\nis set if the class has subclasses.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-05-06T20:21:28Z", "type": "forcePushed"}, {"oid": "2e806c87c825d917656d10bd547ac4311256942b", "url": "https://github.com/eclipse-openj9/openj9/commit/2e806c87c825d917656d10bd547ac4311256942b", "message": "Leverage CHTable at the server to check if a class is extended\n\nIf the class is not cached at the server, or the flag is not set\nwhen the data is cached, check the persistent class info\non the CHTable at the server and see if the class has subclasses.\nIf the class has subclasses, consider it has been extended.\nIf the data is cached but the flag is not set, J9AccClassHasBeenOverridden\nis set if the class has subclasses.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-05-06T21:51:51Z", "type": "forcePushed"}, {"oid": "630bc683a8af6a6b527bf4e443c37dce9d54088b", "url": "https://github.com/eclipse-openj9/openj9/commit/630bc683a8af6a6b527bf4e443c37dce9d54088b", "message": "Leverage CHTable at the server to check if a class is extended\n\nIf the class is not cached at the server, or the flag is not set\nwhen the data is cached, check the persistent class info\non the CHTable at the server and see if the class has subclasses.\nIf the class has subclasses, consider it has been extended.\nIf the data is cached but the flag is not set, J9AccClassHasBeenOverridden\nis set if the class has subclasses.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-05-07T03:04:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxODM2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r421418360", "bodyText": "TR::CompilationInfo *    _compInfo; is stored in TR_J9VMBase and TR_J9ServerVM is an extension of that, so we should have it.", "author": "mpirvu", "createdAt": "2020-05-07T10:59:25Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -486,32 +486,59 @@ TR_J9ServerVM::classHasBeenReplaced(TR_OpaqueClassBlock *clazz)\n    return ((classDepthAndFlags & J9AccClassHotSwappedOut) != 0);\n    }\n \n+bool\n+TR_J9ServerVM::checkCHTableIfClassInfoExistsAndHasBeenExtended(TR_OpaqueClassBlock *clazz)\n+   {\n+   TR::CompilationInfo *compInfo = TR::CompilationInfo::get(_jitConfig);", "originalCommit": "630bc683a8af6a6b527bf4e443c37dce9d54088b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyMzM1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r421423359", "bodyText": "Since this new method is only used in JITServerPersistentCHTable maybe it should not be virtual, but marked private.", "author": "mpirvu", "createdAt": "2020-05-07T11:09:13Z", "path": "runtime/compiler/env/JITServerPersistentCHTable.hpp", "diffHunk": "@@ -63,6 +63,7 @@ class JITServerPersistentCHTable : public TR_PersistentCHTable\n \n    virtual TR_PersistentClassInfo * findClassInfo(TR_OpaqueClassBlock * classId) override;\n    virtual TR_PersistentClassInfo * findClassInfoAfterLocking(TR_OpaqueClassBlock * classId, TR::Compilation *, bool returnClassInfoForAOT = false) override;\n+   virtual TR_PersistentClassInfo * findClassInfoAfterLocking(TR_OpaqueClassBlock * classId, TR_FrontEnd *, bool returnClassInfoForAOT = false) override;", "originalCommit": "630bc683a8af6a6b527bf4e443c37dce9d54088b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY4ODIxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r421688214", "bodyText": "It extends TR_PersistentClassInfo * TR_PersistentCHTable::findClassInfoAfterLocking(TR_OpaqueClassBlock *classId, TR_FrontEnd *fe, bool returnClassInfoForAOT) and used outside JITServerPersistentCHTable  by TR_J9ServerVM::checkCHTableIfClassInfoExistsAndHasBeenExtended.", "author": "a7ehuo", "createdAt": "2020-05-07T17:55:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQyMzM1OQ=="}], "type": "inlineReview"}, {"oid": "9008a53336fb1266d823585ec6b91907c49a4211", "url": "https://github.com/eclipse-openj9/openj9/commit/9008a53336fb1266d823585ec6b91907c49a4211", "message": "Leverage CHTable at the server to check if a class is extended\n\nIf the class is not cached at the server, or the flag is not set\nwhen the data is cached, check the persistent class info\non the CHTable at the server and see if the class has subclasses.\nIf the class has subclasses, consider it has been extended.\nIf the data is cached but the flag is not set,\nJ9AccClassHasBeenOverridden is set if the class has subclasses.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-05-07T18:08:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc2NzU3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r421767576", "bodyText": "We can avoid another test by returning true above and returning false here.", "author": "mpirvu", "createdAt": "2020-05-07T20:16:27Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -486,32 +486,70 @@ TR_J9ServerVM::classHasBeenReplaced(TR_OpaqueClassBlock *clazz)\n    return ((classDepthAndFlags & J9AccClassHotSwappedOut) != 0);\n    }\n \n+bool\n+TR_J9ServerVM::checkCHTableIfClassInfoExistsAndHasBeenExtended(TR_OpaqueClassBlock *clazz, bool &bClassHasBeenExtended)\n+   {\n+   JITServerPersistentCHTable *table = (JITServerPersistentCHTable*)(_compInfo->getPersistentInfo()->getPersistentCHTable());\n+   TR_PersistentClassInfo *classInfo = table->findClassInfoAfterLocking(clazz, this);\n+   if (classInfo)\n+      {\n+      bClassHasBeenExtended = classInfo->getFirstSubclass() ? true : false;\n+      }\n+   return (classInfo ? true : false);", "originalCommit": "9008a53336fb1266d823585ec6b91907c49a4211", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3MjQ1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r421772456", "bodyText": "This acquires CHTable monitor and above we acquired the ROMMapMonitor. This imposes an order in which these monitors need to be acquired. We need to check that in other parts of the code we don't use the reverse ordering which will lead to deadlock. It may be easier to verify the code in JITServerPersistentCHTable.cpp does not try to acquire the ROMMapMonitor. Also, maybe we should have a comment when these monitors are declared to warm about the proper order.", "author": "mpirvu", "createdAt": "2020-05-07T20:25:50Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -486,32 +486,70 @@ TR_J9ServerVM::classHasBeenReplaced(TR_OpaqueClassBlock *clazz)\n    return ((classDepthAndFlags & J9AccClassHotSwappedOut) != 0);\n    }\n \n+bool\n+TR_J9ServerVM::checkCHTableIfClassInfoExistsAndHasBeenExtended(TR_OpaqueClassBlock *clazz, bool &bClassHasBeenExtended)\n+   {\n+   JITServerPersistentCHTable *table = (JITServerPersistentCHTable*)(_compInfo->getPersistentInfo()->getPersistentCHTable());\n+   TR_PersistentClassInfo *classInfo = table->findClassInfoAfterLocking(clazz, this);\n+   if (classInfo)\n+      {\n+      bClassHasBeenExtended = classInfo->getFirstSubclass() ? true : false;\n+      }\n+   return (classInfo ? true : false);\n+   }\n+\n bool\n TR_J9ServerVM::classHasBeenExtended(TR_OpaqueClassBlock *clazz)\n    {\n-   if(!clazz)\n+   if (!clazz)\n       return false;\n-   uintptr_t classDepthAndFlags = 0;\n-   JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n-   bool dataFromCache = JITServerHelpers::getAndCacheRAMClassInfo((J9Class *)clazz, _compInfoPT->getClientData(), stream, JITServerHelpers::CLASSINFO_CLASS_DEPTH_AND_FLAGS, (void *)&classDepthAndFlags);\n \n-   if(dataFromCache)\n+   bool bDataCached = false;\n+   ClientSessionData *clientSessionData = _compInfoPT->getClientData();\n       {\n-      // Check if flag is set, since once set it can not be removed\n-      if((classDepthAndFlags & J9AccClassHasBeenOverridden) != 0)\n-         {\n-         return true;\n-         }\n-      else\n+      OMR::CriticalSection getRemoteROMClass(clientSessionData->getROMMapMonitor());\n+      auto it = clientSessionData->getROMClassMap().find((J9Class*)clazz);\n+      if (it != clientSessionData->getROMClassMap().end())\n          {\n-         //Flag not set, check with client as cache data may be outdated\n-         stream->write(JITServer::MessageType::VM_classHasBeenExtended, clazz);\n-         return std::get<0>(stream->read<bool>());\n+         bDataCached = true;\n+         if ((it->second._classDepthAndFlags & J9AccClassHasBeenOverridden) != 0)\n+            {\n+            return true;\n+            }\n+         else\n+            {\n+            bool bClassHasBeenExtended = false;\n+            if (checkCHTableIfClassInfoExistsAndHasBeenExtended(clazz, bClassHasBeenExtended))", "originalCommit": "9008a53336fb1266d823585ec6b91907c49a4211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE3Njc2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r422176765", "bodyText": "This acquires CHTable monitor and above we acquired the ROMMapMonitor. This imposes an order in which these monitors need to be acquired.\n\n\nIt may be easier to verify the code in JITServerPersistentCHTable.cpp.\n\nI was concerned about the potential deadlock if these two monitors are not taken in this order in other places. I didn't find a better solution to do it. I'll rethink about this part.", "author": "a7ehuo", "createdAt": "2020-05-08T14:30:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3MjQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc3ODkzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r421778938", "bodyText": "The comment is not accurate. At this point we know that the flag is false in the class cache and that the class does not exist in the CHTable (maybe because the CHTable is not maintained at the client).\nIf the answer from the client is true we want to update the class cache for next time.", "author": "mpirvu", "createdAt": "2020-05-07T20:38:11Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -486,32 +486,70 @@ TR_J9ServerVM::classHasBeenReplaced(TR_OpaqueClassBlock *clazz)\n    return ((classDepthAndFlags & J9AccClassHotSwappedOut) != 0);\n    }\n \n+bool\n+TR_J9ServerVM::checkCHTableIfClassInfoExistsAndHasBeenExtended(TR_OpaqueClassBlock *clazz, bool &bClassHasBeenExtended)\n+   {\n+   JITServerPersistentCHTable *table = (JITServerPersistentCHTable*)(_compInfo->getPersistentInfo()->getPersistentCHTable());\n+   TR_PersistentClassInfo *classInfo = table->findClassInfoAfterLocking(clazz, this);\n+   if (classInfo)\n+      {\n+      bClassHasBeenExtended = classInfo->getFirstSubclass() ? true : false;\n+      }\n+   return (classInfo ? true : false);\n+   }\n+\n bool\n TR_J9ServerVM::classHasBeenExtended(TR_OpaqueClassBlock *clazz)\n    {\n-   if(!clazz)\n+   if (!clazz)\n       return false;\n-   uintptr_t classDepthAndFlags = 0;\n-   JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n-   bool dataFromCache = JITServerHelpers::getAndCacheRAMClassInfo((J9Class *)clazz, _compInfoPT->getClientData(), stream, JITServerHelpers::CLASSINFO_CLASS_DEPTH_AND_FLAGS, (void *)&classDepthAndFlags);\n \n-   if(dataFromCache)\n+   bool bDataCached = false;\n+   ClientSessionData *clientSessionData = _compInfoPT->getClientData();\n       {\n-      // Check if flag is set, since once set it can not be removed\n-      if((classDepthAndFlags & J9AccClassHasBeenOverridden) != 0)\n-         {\n-         return true;\n-         }\n-      else\n+      OMR::CriticalSection getRemoteROMClass(clientSessionData->getROMMapMonitor());\n+      auto it = clientSessionData->getROMClassMap().find((J9Class*)clazz);\n+      if (it != clientSessionData->getROMClassMap().end())\n          {\n-         //Flag not set, check with client as cache data may be outdated\n-         stream->write(JITServer::MessageType::VM_classHasBeenExtended, clazz);\n-         return std::get<0>(stream->read<bool>());\n+         bDataCached = true;\n+         if ((it->second._classDepthAndFlags & J9AccClassHasBeenOverridden) != 0)\n+            {\n+            return true;\n+            }\n+         else\n+            {\n+            bool bClassHasBeenExtended = false;\n+            if (checkCHTableIfClassInfoExistsAndHasBeenExtended(clazz, bClassHasBeenExtended))\n+               {\n+               if (bClassHasBeenExtended)\n+                  {\n+                  it->second._classDepthAndFlags |= J9AccClassHasBeenOverridden;\n+                  }\n+               return bClassHasBeenExtended;\n+               }\n+            }\n          }\n       }\n+\n+   JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n+   if (bDataCached)\n+      {\n+       // Data is cached, either the flag is not set or the class info doesn't exist in the CHTable. Check the client.", "originalCommit": "9008a53336fb1266d823585ec6b91907c49a4211", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "898f72c520e511d1e804f2610957d2700dd272b3", "url": "https://github.com/eclipse-openj9/openj9/commit/898f72c520e511d1e804f2610957d2700dd272b3", "message": "Leverage CHTable at the server to check if a class is extended\n\nIf a class has subclasses in the CHTable at the server,\nreturn true in classHasBeenExtended(). If not or the class\ninfo doesn't exist in the CHTable, check the ROMClass cache\nnext.\n`VM_classHasBeenExtended` is only sent when the class info\ndoesn't exist in the CHTable and the flag is not set in the\ncache.\n`ResolvedMethod_getRemoteROMClassAndMethods` is sent when\nthe class data cannot be found in the CHTable or the ROMClass\ncache at the server.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-05-08T18:24:29Z", "type": "forcePushed"}, {"oid": "85af6b77ec872ff2c66a85159a0f0f6d86db4662", "url": "https://github.com/eclipse-openj9/openj9/commit/85af6b77ec872ff2c66a85159a0f0f6d86db4662", "message": "Leverage CHTable at the server to check if a class is extended\n\nIf a class has subclasses in the CHTable at the server,\nreturn true in classHasBeenExtended(). If not or the class\ninfo doesn't exist in the CHTable, check the ROMClass cache\nnext. `VM_classHasBeenExtended` is only sent when the class info\ndoesn't exist in the CHTable and the flag is not set in the\ncache. `ResolvedMethod_getRemoteROMClassAndMethods` is sent when\nthe class data cannot be found in the CHTable or the ROMClass\ncache at the server.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-05-08T18:33:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMyNDE3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r422324174", "bodyText": "If CHTable is always checked first here, I don't think there is a need to update the bit in the ROMClass cache because the ROMClass cache will never get checked as long as the class has subclasses in the CHTable.\nTo be on the safe side, the ROMClass cache is checked next if the class info exists in the CHTable but doesn't have subclasses.\nThe ROMClass cache is always checked when the class info doesn't exist in the CHTable.", "author": "a7ehuo", "createdAt": "2020-05-08T19:16:38Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -486,32 +486,77 @@ TR_J9ServerVM::classHasBeenReplaced(TR_OpaqueClassBlock *clazz)\n    return ((classDepthAndFlags & J9AccClassHotSwappedOut) != 0);\n    }\n \n+bool\n+TR_J9ServerVM::checkCHTableIfClassInfoExistsAndHasBeenExtended(TR_OpaqueClassBlock *clazz, bool &bClassHasBeenExtended)\n+   {\n+   JITServerPersistentCHTable *table = (JITServerPersistentCHTable*)(_compInfo->getPersistentInfo()->getPersistentCHTable());\n+   TR_PersistentClassInfo *classInfo = table->findClassInfoAfterLocking(clazz, this);\n+   if (classInfo)\n+      {\n+      bClassHasBeenExtended = classInfo->getFirstSubclass() ? true : false;\n+      return true;\n+      }\n+   return false;\n+   }\n+\n bool\n TR_J9ServerVM::classHasBeenExtended(TR_OpaqueClassBlock *clazz)\n    {\n-   if(!clazz)\n+   if (!clazz)\n       return false;\n-   uintptr_t classDepthAndFlags = 0;\n+\n+   ClientSessionData *clientSessionData = _compInfoPT->getClientData();\n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n-   bool dataFromCache = JITServerHelpers::getAndCacheRAMClassInfo((J9Class *)clazz, _compInfoPT->getClientData(), stream, JITServerHelpers::CLASSINFO_CLASS_DEPTH_AND_FLAGS, (void *)&classDepthAndFlags);\n \n-   if(dataFromCache)\n+   // Check the CHTable first and then the ROMClass cache.\n+   // Checking the CHTable and checking the ROMClass cache both take monitors.\n+   // They should not be nested into each other to avoid the potential\n+   // deadlock when being accessed in different orders in other parts of the code.\n+   bool bClassHasBeenExtended = false;\n+   bool bIsClassInfoInCHTable = checkCHTableIfClassInfoExistsAndHasBeenExtended(clazz, bClassHasBeenExtended);\n+\n+   // The class data is in the CHTable and the flag is set.\n+   if (bIsClassInfoInCHTable && bClassHasBeenExtended)\n+      return true;", "originalCommit": "85af6b77ec872ff2c66a85159a0f0f6d86db4662", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExMjM0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9447#discussion_r423112344", "bodyText": "We could do only one test here on bClassHasBeenExtended because if the class is not found in the CHTable bClassHasBeenExtended remains false.", "author": "mpirvu", "createdAt": "2020-05-11T15:12:04Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -486,32 +486,77 @@ TR_J9ServerVM::classHasBeenReplaced(TR_OpaqueClassBlock *clazz)\n    return ((classDepthAndFlags & J9AccClassHotSwappedOut) != 0);\n    }\n \n+bool\n+TR_J9ServerVM::checkCHTableIfClassInfoExistsAndHasBeenExtended(TR_OpaqueClassBlock *clazz, bool &bClassHasBeenExtended)\n+   {\n+   JITServerPersistentCHTable *table = (JITServerPersistentCHTable*)(_compInfo->getPersistentInfo()->getPersistentCHTable());\n+   TR_PersistentClassInfo *classInfo = table->findClassInfoAfterLocking(clazz, this);\n+   if (classInfo)\n+      {\n+      bClassHasBeenExtended = classInfo->getFirstSubclass() ? true : false;\n+      return true;\n+      }\n+   return false;\n+   }\n+\n bool\n TR_J9ServerVM::classHasBeenExtended(TR_OpaqueClassBlock *clazz)\n    {\n-   if(!clazz)\n+   if (!clazz)\n       return false;\n-   uintptr_t classDepthAndFlags = 0;\n+\n+   ClientSessionData *clientSessionData = _compInfoPT->getClientData();\n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n-   bool dataFromCache = JITServerHelpers::getAndCacheRAMClassInfo((J9Class *)clazz, _compInfoPT->getClientData(), stream, JITServerHelpers::CLASSINFO_CLASS_DEPTH_AND_FLAGS, (void *)&classDepthAndFlags);\n \n-   if(dataFromCache)\n+   // Check the CHTable first and then the ROMClass cache.\n+   // Checking the CHTable and checking the ROMClass cache both take monitors.\n+   // They should not be nested into each other to avoid the potential\n+   // deadlock when being accessed in different orders in other parts of the code.\n+   bool bClassHasBeenExtended = false;\n+   bool bIsClassInfoInCHTable = checkCHTableIfClassInfoExistsAndHasBeenExtended(clazz, bClassHasBeenExtended);\n+\n+   // The class data is in the CHTable and the flag is set.\n+   if (bIsClassInfoInCHTable && bClassHasBeenExtended)", "originalCommit": "85af6b77ec872ff2c66a85159a0f0f6d86db4662", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4cfc964653162bec1fb8aad4fd5259a82f549392", "url": "https://github.com/eclipse-openj9/openj9/commit/4cfc964653162bec1fb8aad4fd5259a82f549392", "message": "Leverage CHTable at the server to check if a class is extended\n\nIf a class has subclasses in the CHTable at the server,\nreturn true in classHasBeenExtended(). If not or the class\ninfo doesn't exist in the CHTable, check the ROMClass cache\nnext. `VM_classHasBeenExtended` is only sent when the class info\ndoesn't exist in the CHTable and the flag is not set in the\ncache. `ResolvedMethod_getRemoteROMClassAndMethods` is sent when\nthe class data cannot be found in the CHTable or the ROMClass\ncache at the server.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-05-11T15:58:45Z", "type": "commit"}, {"oid": "4cfc964653162bec1fb8aad4fd5259a82f549392", "url": "https://github.com/eclipse-openj9/openj9/commit/4cfc964653162bec1fb8aad4fd5259a82f549392", "message": "Leverage CHTable at the server to check if a class is extended\n\nIf a class has subclasses in the CHTable at the server,\nreturn true in classHasBeenExtended(). If not or the class\ninfo doesn't exist in the CHTable, check the ROMClass cache\nnext. `VM_classHasBeenExtended` is only sent when the class info\ndoesn't exist in the CHTable and the flag is not set in the\ncache. `ResolvedMethod_getRemoteROMClassAndMethods` is sent when\nthe class data cannot be found in the CHTable or the ROMClass\ncache at the server.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-05-11T15:58:45Z", "type": "forcePushed"}]}