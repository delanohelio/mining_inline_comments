{"pr_number": 9696, "pr_title": "CMake: Reintroduce base warning flags", "pr_createdAt": "2020-05-26T15:51:16Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9696", "timeline": [{"oid": "c1a202cc21af1482456c148bdaa9021059a8f0d7", "url": "https://github.com/eclipse-openj9/openj9/commit/c1a202cc21af1482456c148bdaa9021059a8f0d7", "message": "CMake: Reintroduce base warning flags\n\nRehash of #9679 but introduce the flags via the platform compile options.\nThis ensures they dont get applied to NASM.\n\nSigned-off-by: Devin Nakamura <devinn@ca.ibm.com>", "committedDate": "2020-05-26T16:20:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwNDc1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430604758", "bodyText": "This will still result in -Wreturn-type being given to nasm; see OmrPlatform.cmake.", "author": "keithc-ca", "createdAt": "2020-05-26T18:01:08Z", "path": "runtime/cmake/platform/toolcfg/gnu.cmake", "diffHunk": "@@ -20,7 +20,8 @@\n # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n ################################################################################\n \n-list(APPEND OMR_PLATFORM_COMPILE_OPTIONS -O3 -g -fstack-protector)\n+list(APPEND OMR_PLATFORM_COMPILE_OPTIONS -O3 -g -fstack-protector -Wreturn-type)", "originalCommit": "c1a202cc21af1482456c148bdaa9021059a8f0d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNzgyNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430617825", "bodyText": "It should be fine. cmake tracks the different asm dialects. plain \"ASM\" is when we use the c compiler as an assembler.  Where as when we use nasm the language is ASM_NASM.", "author": "dnakamura", "createdAt": "2020-05-26T18:24:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwNDc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyOTQ5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430629495", "bodyText": "Why would we want to use -Wreturn-type even for the 'ASM' language?\nWouldn't it be safer to add -Wreturn-type only to OMR_PLATFORM_C_COMPILE_OPTIONS and OMR_PLATFORM_CXX_COMPILE_OPTIONS?", "author": "keithc-ca", "createdAt": "2020-05-26T18:44:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwNDc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNDkxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430614911", "bodyText": "This leads to numerous warnings:\ncc1plus: warning: command line option \u2018-Wimplicit\u2019 is valid for C/ObjC but not for C++\n\nsee runtime/compiler/CMakeLists.txt.", "author": "keithc-ca", "createdAt": "2020-05-26T18:19:12Z", "path": "runtime/cmake/platform/toolcfg/gnu.cmake", "diffHunk": "@@ -20,7 +20,8 @@\n # SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n ################################################################################\n \n-list(APPEND OMR_PLATFORM_COMPILE_OPTIONS -O3 -g -fstack-protector)\n+list(APPEND OMR_PLATFORM_COMPILE_OPTIONS -O3 -g -fstack-protector -Wreturn-type)\n+list(APPEND OMR_PLATFORM_C_COMPILE_OPTIONS -Wimplicit)", "originalCommit": "c1a202cc21af1482456c148bdaa9021059a8f0d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNjQzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430616430", "bodyText": "do you have the updated pr? There shoud be the jit fix", "author": "dnakamura", "createdAt": "2020-05-26T18:21:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNDkxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyMDAzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430620037", "bodyText": "Yes, you're right. I forgot to absorb that change.", "author": "keithc-ca", "createdAt": "2020-05-26T18:27:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYxNDkxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MDkzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430640932", "bodyText": "This will break jitserver by ignoring the value set at line 87.", "author": "keithc-ca", "createdAt": "2020-05-26T19:03:59Z", "path": "runtime/compiler/CMakeLists.txt", "diffHunk": "@@ -225,6 +225,8 @@ set(J9_INCLUDES\n # Makefiles\n set(J9_SHAREDFLAGS\n \t${OMR_PLATFORM_COMPILE_OPTIONS}\n+)\n+set(J9_CFLAGS", "originalCommit": "c1a202cc21af1482456c148bdaa9021059a8f0d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY1MDE4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430650180", "bodyText": "I'm tempted to deal with this in a different PR. The existing code there is already pretty broken (we already overwrite the J9_CXXFLAGS they set there, they treat both CXXFLAGS and CFLAGS as strings when the rest of the code treats them as lists which would lead to a bunch of bogus arguments if we weren't overwriting them). Then we search for the openssl library, but then never use it? It will take me some time to untangle this, and figure out what what is supposed to be happening here", "author": "dnakamura", "createdAt": "2020-05-26T19:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MDkzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcwMzAyNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430703026", "bodyText": "It seems OPENSSL_CFLAGS will only have a -I option which doesn't need to be added to J9_CFLAGS or J9_CXXFLAGS because include_directories() is used at line 100: lines 86-89 can simply be removed.", "author": "keithc-ca", "createdAt": "2020-05-26T20:56:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY0MDkzMg=="}], "type": "inlineReview"}, {"oid": "f75e25506252be3d9d2ff07062f98c0dc4ff930b", "url": "https://github.com/eclipse-openj9/openj9/commit/f75e25506252be3d9d2ff07062f98c0dc4ff930b", "message": "CMake: Reintroduce base warning flags\n\nRehash of #9679 but introduce the flags via the platform compile options.\nThis ensures they dont get applied to NASM.\n\nSigned-off-by: Devin Nakamura <devinn@ca.ibm.com>", "committedDate": "2020-05-26T19:44:52Z", "type": "forcePushed"}, {"oid": "8c481d6bccbed8001362aa252fe0883d19c30cd2", "url": "https://github.com/eclipse-openj9/openj9/commit/8c481d6bccbed8001362aa252fe0883d19c30cd2", "message": "CMake: Reintroduce base warning flags\n\nRehash of #9679 but introduce the flags via the platform compile options.\nThis ensures they dont get applied to NASM.\n\nSigned-off-by: Devin Nakamura <devinn@ca.ibm.com>", "committedDate": "2020-05-26T21:51:32Z", "type": "commit"}, {"oid": "8c481d6bccbed8001362aa252fe0883d19c30cd2", "url": "https://github.com/eclipse-openj9/openj9/commit/8c481d6bccbed8001362aa252fe0883d19c30cd2", "message": "CMake: Reintroduce base warning flags\n\nRehash of #9679 but introduce the flags via the platform compile options.\nThis ensures they dont get applied to NASM.\n\nSigned-off-by: Devin Nakamura <devinn@ca.ibm.com>", "committedDate": "2020-05-26T21:51:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3MTQwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430771406", "bodyText": "I take it include(FindOpenSSL) is just redundant?", "author": "keithc-ca", "createdAt": "2020-05-27T00:00:36Z", "path": "runtime/compiler/CMakeLists.txt", "diffHunk": "@@ -95,7 +90,6 @@ if(J9VM_OPT_JITSERVER)\n \t\tset(OPENSSL_ROOT_DIR ${OPENSSL_DIR})\n \tendif()\n \n-\tinclude(FindOpenSSL)\n \tfind_package(OpenSSL REQUIRED)", "originalCommit": "8c481d6bccbed8001362aa252fe0883d19c30cd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3Mjg1NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9696#discussion_r430772854", "bodyText": "yes. find_package(x) automatically includes FindX", "author": "dnakamura", "createdAt": "2020-05-27T00:05:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDc3MTQwNg=="}], "type": "inlineReview"}]}