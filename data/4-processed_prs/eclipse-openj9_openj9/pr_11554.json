{"pr_number": 11554, "pr_title": "Add FSD support for AOT", "pr_createdAt": "2020-12-30T21:33:00Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11554", "timeline": [{"oid": "252a33302d0de9f471d6899ab7e9528727389d44", "url": "https://github.com/eclipse-openj9/openj9/commit/252a33302d0de9f471d6899ab7e9528727389d44", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-07T22:43:16Z", "type": "forcePushed"}, {"oid": "4c569cec084861efe8e1bc0b641c78cc0d01ab3c", "url": "https://github.com/eclipse-openj9/openj9/commit/4c569cec084861efe8e1bc0b641c78cc0d01ab3c", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-08T19:30:54Z", "type": "forcePushed"}, {"oid": "66f5f47a82fb59b45f069dc181308910e93f4b8b", "url": "https://github.com/eclipse-openj9/openj9/commit/66f5f47a82fb59b45f069dc181308910e93f4b8b", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:38:06Z", "type": "forcePushed"}, {"oid": "080645b90f5a5b447e583fce8eeee84257fc633a", "url": "https://github.com/eclipse-openj9/openj9/commit/080645b90f5a5b447e583fce8eeee84257fc633a", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T17:12:29Z", "type": "forcePushed"}, {"oid": "fab721f2a959dc1124701c17d5b228a371436fd3", "url": "https://github.com/eclipse-openj9/openj9/commit/fab721f2a959dc1124701c17d5b228a371436fd3", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-15T22:00:16Z", "type": "forcePushed"}, {"oid": "7f9f1c191e6bf155d99a7bfe90ee6a2877e60c80", "url": "https://github.com/eclipse-openj9/openj9/commit/7f9f1c191e6bf155d99a7bfe90ee6a2877e60c80", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-15T22:09:57Z", "type": "forcePushed"}, {"oid": "9ccd2004b45fe3ba93c2c6f33874d5c58da4016b", "url": "https://github.com/eclipse-openj9/openj9/commit/9ccd2004b45fe3ba93c2c6f33874d5c58da4016b", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-20T16:25:34Z", "type": "forcePushed"}, {"oid": "69b3a7b0886ec4abd7bbcda3f5823ed5d3d03974", "url": "https://github.com/eclipse-openj9/openj9/commit/69b3a7b0886ec4abd7bbcda3f5823ed5d3d03974", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-21T22:49:41Z", "type": "forcePushed"}, {"oid": "ccc02b6ec67a2bb4ab253badd0ceed93a8d131f2", "url": "https://github.com/eclipse-openj9/openj9/commit/ccc02b6ec67a2bb4ab253badd0ceed93a8d131f2", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-25T15:40:17Z", "type": "forcePushed"}, {"oid": "1f159fa19427a49d68883cb635460e57d0916cd2", "url": "https://github.com/eclipse-openj9/openj9/commit/1f159fa19427a49d68883cb635460e57d0916cd2", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-29T15:15:19Z", "type": "forcePushed"}, {"oid": "803a57af245cabf85e69f5c9fb63a7ab80ff03c0", "url": "https://github.com/eclipse-openj9/openj9/commit/803a57af245cabf85e69f5c9fb63a7ab80ff03c0", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-29T15:23:56Z", "type": "forcePushed"}, {"oid": "dd6f692bf13339ea04809af9580b34e4c5fe32fc", "url": "https://github.com/eclipse-openj9/openj9/commit/dd6f692bf13339ea04809af9580b34e4c5fe32fc", "message": "Increment JITServer Minor Version\n\nChange in relocation requires a change to the minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-05T18:34:52Z", "type": "forcePushed"}, {"oid": "8df7e82a62547b5a33bf6c8d5e8ac95791af47c3", "url": "https://github.com/eclipse-openj9/openj9/commit/8df7e82a62547b5a33bf6c8d5e8ac95791af47c3", "message": "Update JITServer minor version\n\nChanges to the relo infra requires updating the JITServer minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-08T22:36:01Z", "type": "forcePushed"}, {"oid": "e5505132759954bdd80f606304dbaa2b2f5b37c1", "url": "https://github.com/eclipse-openj9/openj9/commit/e5505132759954bdd80f606304dbaa2b2f5b37c1", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-09T15:13:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQzMTY0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r573431644", "bodyText": "This may need corresponding changes in JITClientCommitVirtualGuard", "author": "mpirvu", "createdAt": "2021-02-10T04:07:02Z", "path": "runtime/compiler/env/CHTable.cpp", "diffHunk": "@@ -618,12 +618,17 @@ TR_CHTable::commitVirtualGuard(TR_VirtualGuard *info, List<TR_VirtualGuardSite>\n       TR_ResolvedMethod *breakpointedMethod = comp->getInlinedResolvedMethod(info->getCalleeIndex());\n       TR_OpaqueMethodBlock *method = breakpointedMethod->getPersistentIdentifier();\n       if (comp->fej9()->isMethodBreakpointed(method))\n+         {\n          nopAssumptionIsValid = false;\n-      ListIterator<TR_VirtualGuardSite> it(&sites);\n-      for (TR_VirtualGuardSite *site = it.getFirst(); site; site = it.getNext())\n+         }\n+      else\n          {\n-         TR_PatchNOPedGuardSiteOnMethodBreakPoint\n-            ::make(comp->fe(), comp->trPersistentMemory(), method, site->getLocation(), site->getDestination(), comp->getMetadataAssumptionList());\n+         ListIterator<TR_VirtualGuardSite> it(&sites);\n+         for (TR_VirtualGuardSite *site = it.getFirst(); site; site = it.getNext())\n+            {\n+            TR_PatchNOPedGuardSiteOnMethodBreakPoint\n+               ::make(comp->fe(), comp->trPersistentMemory(), method, site->getLocation(), site->getDestination(), comp->getMetadataAssumptionList());\n+            }", "originalCommit": "02911c8ed0e4b6a8ce4c3afe77122f8bf5987427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzk2MTA1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r573961052", "bodyText": "Added in 23d89a5", "author": "dsouzai", "createdAt": "2021-02-10T18:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQzMTY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQzNjQyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r573436421", "bodyText": "I am guessing that those two bits are J9_JIT_METADATA_WIDE_EXCEPTIONS | J9_JIT_METADATA_HAS_BYTECODE_PC\nmaybe we can use code like below  numExcptionRanges &= ~(J9_JIT_METADATA_WIDE_EXCEPTIONS | J9_JIT_METADATA_HAS_BYTECODE_PC); to make it more explicit?", "author": "mpirvu", "createdAt": "2021-02-10T04:24:39Z", "path": "runtime/compiler/runtime/RelocationRuntime.cpp", "diffHunk": "@@ -544,37 +544,16 @@ TR_RelocationRuntime::relocateAOTCodeAndData(U_8 *tempDataStart,\n             }\n          }\n \n-#if 0\n-      // add this in later...\n-      /* Perform meta-data relocations */\n-      if (_aotMethodHeaderEntry->offsetToMetaDataRelocations != 0)\n-         {\n-         TR_RelocationRecordBinaryTemplate * binaryReloRecords = (TR_RelocationRecordBinaryTemplate * )((U_8 *)_aotMethodHeaderEntry - sizeof(J9JITDataCacheHeader) + _aotMethodHeaderEntry->offsetToMetaDataRelocationItems);\n-         TR_RelocationRecordGroup reloGroup(binaryReloRecords);\n-         int rc = reloGroup.applyRelocations(this, reloTarget, _exceptionTable);\n-         if (rc != 0)\n-            {\n-            _relocationStatus = RelocationFailure;\n-            return;\n-            }\n-         }\n-#endif\n-\n       reloTarget()->flushCache(codeStart, _aotMethodHeaderEntry->compileMethodCodeSize);\n \n-#if 1\n       // replace this with meta-data relocations above when we implement it\n \n       /* Fix up inlined exception table ram method entries if wide */\n       if (((UDATA)_exceptionTable->numExcptionRanges) & J9_JIT_METADATA_WIDE_EXCEPTIONS)\n          {\n          // Highest 2 bits indicate wide exceptions and FSD, unset them and extract\n          // the number of exception ranges\n-         UDATA numExcptionRanges = ((UDATA)_exceptionTable->numExcptionRanges) & 0x7fff;\n-#if defined(J9VM_OPT_JITSERVER)\n-         if (_comp->getOption(TR_FullSpeedDebug))\n-            numExcptionRanges &= ~(J9_JIT_METADATA_WIDE_EXCEPTIONS | J9_JIT_METADATA_HAS_BYTECODE_PC);\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n+         uint16_t numExcptionRanges = _exceptionTable->numExcptionRanges & 0x3fff;", "originalCommit": "bb86cf5cab7341f2698c08e2f3e5d46f6562b64a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzk2MTE4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r573961186", "bodyText": "Added in ed0d4c5", "author": "dsouzai", "createdAt": "2021-02-10T18:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzQzNjQyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzgyNDEzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r573824131", "bodyText": "I think a comment is warranted here explaining why we exclude FSD from doing warm AOT", "author": "mpirvu", "createdAt": "2021-02-10T15:26:52Z", "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -8182,7 +8182,8 @@ TR::CompilationInfoPerThreadBase::wrappedCompile(J9PortLibrary *portLib, void *\n             TR_ASSERT(!that->_methodBeingCompiled->isOutOfProcessCompReq(), \"JITServer should not change options passed by client\");\n #endif /* defined(J9VM_OPT_JITSERVER) */\n             bool aotCompilationReUpgradedToWarm = false;\n-            if (that->_methodBeingCompiled->_useAotCompilation)\n+            if (that->_methodBeingCompiled->_useAotCompilation\n+                && !TR::Options::getCmdLineOptions()->getOption(TR_FullSpeedDebug))", "originalCommit": "755fedeb5c841c06d0a4bc18e4335645317b1d05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Mzk2MTMzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r573961331", "bodyText": "Added in b8505f4", "author": "dsouzai", "createdAt": "2021-02-10T18:13:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MzgyNDEzMQ=="}], "type": "inlineReview"}, {"oid": "33bad76388de71aa004e07be78b7ab8c9e92b9fb", "url": "https://github.com/eclipse-openj9/openj9/commit/33bad76388de71aa004e07be78b7ab8c9e92b9fb", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-10T16:28:01Z", "type": "forcePushed"}, {"oid": "0d6a0022269347d0b22782677c889a3751cefe6a", "url": "https://github.com/eclipse-openj9/openj9/commit/0d6a0022269347d0b22782677c889a3751cefe6a", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-10T18:16:07Z", "type": "forcePushed"}, {"oid": "a4fab1f898e9daecdc58dfdd5c850bc8508804b5", "url": "https://github.com/eclipse-openj9/openj9/commit/a4fab1f898e9daecdc58dfdd5c850bc8508804b5", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-11T16:16:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDg2ODg1NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r574868854", "bodyText": "This commit deserves a non-empty message summarizing these changes :) .", "author": "mstoodle", "createdAt": "2021-02-11T22:24:46Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -1150,6 +1150,18 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_Breakpoint:", "originalCommit": "23d89a50e80c81fa91d55122299f6c83a321bcc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIwMjY4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r577202687", "bodyText": "That's true of the first 3 commits, actually :) .\nSorry I left this comment hanging here! i got distracted after making this one comment and have been on vacation until today.", "author": "mstoodle", "createdAt": "2021-02-16T23:08:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDg2ODg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzg3NDA0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r577874045", "bodyText": "Addressed in the latest force push.", "author": "dsouzai", "createdAt": "2021-02-17T19:10:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NDg2ODg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIwMTA5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r577201094", "bodyText": "imo a better way to do this would be to create a new relocation record that does the inlining relocation as you want it, rather than using the existing MethodPointer relocation. That would avoid storing empty payload data as a flag to \"process this one differently\".", "author": "mstoodle", "createdAt": "2021-02-16T23:05:14Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -546,12 +546,27 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          if (aconstNode->getOpCodeValue() == TR::loadaddr)\n             j9method = reinterpret_cast<TR_OpaqueMethodBlock *>(aconstNode->getSymbolReference()->getSymbol()->castToStaticSymbol()->getStaticAddress());\n \n-         TR_OpaqueClassBlock *j9class = fej9->getClassFromMethodBlock(j9method);\n+         TR_InlinedCallSite & ics = comp->getInlinedCallSite(inlinedSiteIndex);\n+         TR_ResolvedMethod *inlinedMethod = ((TR_AOTMethodInfo *)ics._methodInfo)->resolvedMethod;\n+         TR_OpaqueMethodBlock *inlinedJ9Method = inlinedMethod->getPersistentIdentifier();\n \n-         uintptr_t classChainOffsetOfCLInSharedCache = sharedCache->getClassChainOffsetOfIdentifyingLoaderForClazzInSharedCache(j9class);\n-         uintptr_t classChainForInlinedMethodOffsetInSharedCache = self()->getClassChainOffset(j9class);\n+         uintptr_t classChainOffsetOfCLInSharedCache = 0;\n+         uintptr_t classChainForInlinedMethodOffsetInSharedCache = 0;\n+         uintptr_t vTableOffset = 0;\n \n-         uintptr_t vTableOffset = static_cast<uintptr_t>(fej9->getInterpreterVTableSlot(j9method, j9class));\n+         /* If the j9method from the aconst node is the same as the j9method at\n+          * inlined call site at inlinedSiteIndex, don't set the remaining fields\n+          * in the binary template; at relo time, the inlined site index is\n+          * sufficient to materialize the j9method pointer\n+          */\n+         if (j9method != inlinedJ9Method)", "originalCommit": "13eecaf41e75acf030a9fb7ab8cb8f8e35450989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzc2OTM5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r577769397", "bodyText": "I think that's in general a good idea. However, for the purposes of this PR, it might be best done in a separate PR later:\n\nAdding a new relo type requires a change to OMR, so that's tedious; additionally there are uses of TR_MethodPointer in OMR so we would need to do a coordinate change where we're not only adding FSD but also modifying unrelated relo changes. Or we'd have to do that in a separate PR prior to these changes, in which case we might as well do it after.\nTR_MethodPointer does nicely encapsulate the idea of \"we have a pointer to a j9method\". As such,  to determine in the code when we would use TR_MethodPointer and when we'd use the other might require us to check the inlinedSiteIndex every time we went to add the relo. This might be fine, but not something I want to do in this PR, especially because it should be done in a way that people shouldn't have to remember to always add the if.\n\nPersonally I don't mind the current approach ONLY because the \"if this then that\" logic is hidden away, and the two branches are still related to the same relocation. However, I do agree that it would be nice to have logical separation. So for the sake of not slowing down this PR, I'd prefer to just add it later on; in fact it could probably be bundled with the clean up that's needed in some of the inlined method relos where we use the cpIndex field for the SVM IDs heh.", "author": "dsouzai", "createdAt": "2021-02-17T16:43:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIwMTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzg4NzA0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r577887045", "bodyText": "ok, I accept that the better approach would be a more invasive change. But I would prefer that better change. It might be possible to handle it transparently by having the MethodPointer external iterated relocation constructor automatically morph itself into a different relocation kind if it detects that the pointer matches the inlined site's j9method point. That doesn't change the fact that you would need an OMR change as well...", "author": "mstoodle", "createdAt": "2021-02-17T19:30:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIwMTA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzg4NzE4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r577887186", "bodyText": "if only the relocation framework were extensible....", "author": "mstoodle", "createdAt": "2021-02-17T19:31:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIwMTA5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIwMTI4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r577201289", "bodyText": "Please improve the commit summary \"MethodPointer Relo Change\" isn't the most generic you could have made it, but I think you could do better.", "author": "mstoodle", "createdAt": "2021-02-16T23:05:39Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -546,12 +546,27 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          if (aconstNode->getOpCodeValue() == TR::loadaddr)\n             j9method = reinterpret_cast<TR_OpaqueMethodBlock *>(aconstNode->getSymbolReference()->getSymbol()->castToStaticSymbol()->getStaticAddress());\n \n-         TR_OpaqueClassBlock *j9class = fej9->getClassFromMethodBlock(j9method);\n+         TR_InlinedCallSite & ics = comp->getInlinedCallSite(inlinedSiteIndex);", "originalCommit": "13eecaf41e75acf030a9fb7ab8cb8f8e35450989", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3Nzg3NDE3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r577874173", "bodyText": "Addressed in the latest force push.", "author": "dsouzai", "createdAt": "2021-02-17T19:10:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzIwMTI4OQ=="}], "type": "inlineReview"}, {"oid": "04c099af026cbc7609fdf89aa4c11b1d995bf4a1", "url": "https://github.com/eclipse-openj9/openj9/commit/04c099af026cbc7609fdf89aa4c11b1d995bf4a1", "message": "Add BreakPoint Guard relocation\n\nThere will be a TR_BreakpointGuard created for every single inlined\nsite. This relocation record grabs the J9Method from the recently\nrelocated inlining table in the metadata assocated with the inlined site\nspecified in the record, and creates necessary method breakpoint runtime\nassumption. If the method has already been breakpointed, the\nrelolocation is patched to jump to the guard's destination.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-17T18:59:10Z", "type": "commit"}, {"oid": "c1883f88a2e44f16c18ccc810d8484bd7b527a68", "url": "https://github.com/eclipse-openj9/openj9/commit/c1883f88a2e44f16c18ccc810d8484bd7b527a68", "message": "Refactor method breakpoint hook\n\nThe code that compensated all the runtime assumptions that get fired on\na method breakpoint did not have any tracing. Addtionally, it is\nconceptually very similar to what has to happen for the assumptions\nduring class redefinition. Therefore, this commit refactors the method\nbreakpoint hook to be more consistent with the rest of the runtime\nassumption compensation mechanism.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-17T19:02:52Z", "type": "commit"}, {"oid": "5fce7993bbfc672e88537f4f2c2b103425b33147", "url": "https://github.com/eclipse-openj9/openj9/commit/5fce7993bbfc672e88537f4f2c2b103425b33147", "message": "Enable FSD for AOT Compilations\n\nThis commit enables AOT compilations in FSD mode. However, if fields are\nbeing watched, then AOT compilation is disabled. This is because there\nis no benefit to having an AOT body with field watch as it increases\nthe validation complexity, and in case the fields being watched changes\nfrom run to run, the AOT body cannot be loaded.\n\nThis commit also adds FSD to the feature flags; this ensures that if the\nSCC contains code that was generated when running in FSD mode, it is\nonly loaded when the JVM is running in FSD mode (and vice versa).\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-17T19:04:40Z", "type": "commit"}, {"oid": "869c82b7b5147749048b98e96032da011247a010", "url": "https://github.com/eclipse-openj9/openj9/commit/869c82b7b5147749048b98e96032da011247a010", "message": "Improve FSD Startup Performance\n\nThis commit adds a couple of improvements. Firstly, under FSD there is\nno need to emit method enter/exit hooks because the events are hooked\nvia involuntary OSR. Secondly, don't generate AOT warm compilations\nduring startup. When FSD is enabled, involuntary OSR is also enabled.\nThis means that the code size increases because of all of the catch\nblock + code blocks, and the data size increases because of the\nadditional information required in the the J9JITExceptionTable. This\nmeans that for applications that do not use a very large SCC, the\nnumber of methods that can now be put into the SCC reduces. In this\nscenario, startup is dominated by the number of AOT loads can that be\nperformed rather than code quality. Therefore, disabling AOT Warm\nduring startup disables inlining, thus dramatically reducing the code\n& data size.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-17T19:08:22Z", "type": "commit"}, {"oid": "5870afe30755263b53dcb528fef9505cf5b991fb", "url": "https://github.com/eclipse-openj9/openj9/commit/5870afe30755263b53dcb528fef9505cf5b991fb", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-17T19:08:57Z", "type": "forcePushed"}, {"oid": "d11a837eafbc2a6a2406558cce5d4defaaa09ac9", "url": "https://github.com/eclipse-openj9/openj9/commit/d11a837eafbc2a6a2406558cce5d4defaaa09ac9", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-17T21:54:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODUzNzA2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r578537060", "bodyText": "would you please add an assert on the else here that\nreloPrivatData->_clazz == reinterpret_cast<TR_OpaqueClassBlock *>(-1)", "author": "mstoodle", "createdAt": "2021-02-18T15:57:47Z", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -5684,6 +5687,74 @@ TR_RelocationRecordMethodPointer::activatePointer(TR_RelocationRuntime *reloRunt\n       registerHCRAssumption(reloRuntime, reloLocation);\n    }\n \n+char *\n+TR_RelocationRecordInlinedMethodPointer::name()\n+   {\n+   return \"TR_InlinedMethodPointer\";\n+   }\n+\n+void\n+TR_RelocationRecordInlinedMethodPointer::preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget)\n+   {\n+   TR_RelocationRecordPointerPrivateData *reloPrivateData = &(privateData()->pointer);\n+      J9Method *inlinedMethod =\n+            reinterpret_cast<J9Method *>(\n+               getInlinedSiteMethod(reloRuntime, inlinedSiteIndex(reloTarget)));\n+\n+   if (inlinedMethod != reinterpret_cast<J9Method *>(-1))\n+      {\n+      reloPrivateData->_activatePointer = true;\n+      reloPrivateData->_clazz = reinterpret_cast<TR_OpaqueClassBlock *>(J9_CLASS_FROM_METHOD(inlinedMethod));\n+      reloPrivateData->_pointer = reinterpret_cast<uintptr_t>(inlinedMethod);\n+      reloPrivateData->_needUnloadAssumption =\n+            !reloRuntime->fej9()->sameClassLoaders(\n+               reloPrivateData->_clazz,\n+               reloRuntime->comp()->getCurrentMethod()->classOfMethod());\n+\n+      RELO_LOG(reloRuntime->reloLogger(), 6,\"\\tpreparePrivateData: pointer %p\\n\", reloPrivateData->_pointer);\n+      }\n+   else\n+      {\n+      reloPrivateData->_activatePointer = false;\n+      reloPrivateData->_clazz = reinterpret_cast<TR_OpaqueClassBlock *>(-1);\n+      reloPrivateData->_pointer = static_cast<uintptr_t>(-1);\n+      reloPrivateData->_needUnloadAssumption = false;\n+\n+      RELO_LOG(reloRuntime->reloLogger(), 6,\"\\tpreparePrivateData: invalid site\\n\");\n+      }\n+   }\n+\n+int32_t\n+TR_RelocationRecordInlinedMethodPointer::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation)\n+   {\n+   TR_RelocationRecordPointerPrivateData *reloPrivateData = &(privateData()->pointer);\n+\n+   /* Apply relocation */\n+   reloTarget->storePointer((uint8_t *)reloPrivateData->_pointer, reloLocation);\n+\n+   if (reloPrivateData->_activatePointer)\n+      {\n+      /* Add class unload assumptions if needed */\n+      if (reloPrivateData->_needUnloadAssumption)\n+         reloTarget->addPICtoPatchPtrOnClassUnload(reloPrivateData->_clazz, reloLocation);\n+\n+      /* Add HCR assumptions if needed */\n+      if (reloRuntime->options()->getOption(TR_EnableHCR))\n+         {\n+         createClassRedefinitionPicSite(\n+                  reinterpret_cast<void *>(reloPrivateData->_pointer),\n+                  reinterpret_cast<void *>(reloLocation),\n+                  sizeof(uintptr_t),\n+                  false,\n+                  reloRuntime->comp()->getMetadataAssumptionList());\n+\n+         reloRuntime->comp()->setHasClassRedefinitionAssumptions();\n+         }\n+      }", "originalCommit": "75acda74099cd2581eecf411e14ecf3214d49e88", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODU1NTY4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r578555685", "bodyText": "Made changes, see force push https://github.com/eclipse/openj9/compare/d11a837eafbc2a6a2406558cce5d4defaaa09ac9..4a69430d1d1603f0a4a8666a6ca4ed21fedce751", "author": "dsouzai", "createdAt": "2021-02-18T16:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODUzNzA2MA=="}], "type": "inlineReview"}, {"oid": "52388222d7526df0b2f4c0fa4bf102b74b75d5b1", "url": "https://github.com/eclipse-openj9/openj9/commit/52388222d7526df0b2f4c0fa4bf102b74b75d5b1", "message": "Add Inlined Method Pointer relo record\n\nThe TR_MethodPointer relocation record is more general and assumes that\nthe method pointer to be relocated may not be named in the bytecodes (ie\ncame from profiling). However, often the method pointer will already\nexist in the inlining table in the J9JITExceptionTable. Therefore, this\ncommit adds a new relocation record to use the J9Method pointer from the\ninlining table if the method pointer to be relocated does exist in the\ntable.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-18T16:20:15Z", "type": "commit"}, {"oid": "c90f393805fb6cb06d23fdfb40d00f7e9adfdecc", "url": "https://github.com/eclipse-openj9/openj9/commit/c90f393805fb6cb06d23fdfb40d00f7e9adfdecc", "message": "Conditionally Transmute TR_MethodPointer to TR_InlinedMethodPointer\n\nTo ensure that a method pointer is relocated with the correct relocation\nrecord, J9::AheadOfTimeCompile::interceptAOTRelocation is used to\nintercept a TR_MethodPointer relocation record and transmute it to\nTR_InlinedMethodPointer if the J9Method pointer in the inlining\ntable at the inlined site index specified by the aconst node associated\nwith the TR_MethodPointer relocation record is the same as the J9Method\npointer associated with the aconst node.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-18T16:20:17Z", "type": "commit"}, {"oid": "f7d2400dd4ac527320e673507df079dd402f8de5", "url": "https://github.com/eclipse-openj9/openj9/commit/f7d2400dd4ac527320e673507df079dd402f8de5", "message": "Update JITServer minor version\n\nChanges to the relo infra requires updating the JITServer minor version.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-18T16:20:17Z", "type": "commit"}, {"oid": "c42e01c60d8540d1c6ed9a4dee2709bc279d73c5", "url": "https://github.com/eclipse-openj9/openj9/commit/c42e01c60d8540d1c6ed9a4dee2709bc279d73c5", "message": "Add ability to disable AOT under FSD\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-18T16:20:17Z", "type": "commit"}, {"oid": "4a69430d1d1603f0a4a8666a6ca4ed21fedce751", "url": "https://github.com/eclipse-openj9/openj9/commit/4a69430d1d1603f0a4a8666a6ca4ed21fedce751", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-18T16:20:17Z", "type": "forcePushed"}, {"oid": "fb2aad19fdaba0eeb7ce02e2c85c445b00a14977", "url": "https://github.com/eclipse-openj9/openj9/commit/fb2aad19fdaba0eeb7ce02e2c85c445b00a14977", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-19T14:55:48Z", "type": "commit"}, {"oid": "fb2aad19fdaba0eeb7ce02e2c85c445b00a14977", "url": "https://github.com/eclipse-openj9/openj9/commit/fb2aad19fdaba0eeb7ce02e2c85c445b00a14977", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-19T14:55:48Z", "type": "forcePushed"}, {"oid": "3afec7da8a5a144511fa0193378d4cd00c2c0fb6", "url": "https://github.com/eclipse-openj9/openj9/commit/3afec7da8a5a144511fa0193378d4cd00c2c0fb6", "message": "Disable Recompilation under FSD & Sync Compilation\n\nAn app thread that blocks on compilation releases VM Access. If class\nredefinition occurs during a recompilation, the application thread\ncan no longer OSR out to the interpreter; it is forced to return to\nthe oldStartPC (to jump to a helper) which may not necessarily be\nvalid. Therefore, this commit disables recompilation if the JIT is\ndoing synchronous compilation in FSD mode.\n\nIn a normal run, compilations occur asynchronously. However, there\nare circumstances where a recompilation must be done synchronously.\nThey have to do with method invalidation, specifically preexistence\nand HCR. However, in FSD, preexistence is disabled, and HCR is\nimplemented using involuntary OSR. Therefore, the only\ncircumstance under which sync recompilations can occur under FSD is\nwhen explicitly requested (via counts or disableAsyncCompilation).\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-02-25T22:12:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTA4ODk1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r585088959", "bodyText": "We need to change the definition at JITServer which now reads:\nbool\nTR_J9SharedCacheServerVM::methodsCanBeInlinedEvenIfEventHooksEnabled()\n   {\n   return true;\n   }\n\nThe complication is that we are returning the value from the global options, so I am proposing to add a comp parameter which can be used to retrieve the options: comp->getOption(TR_FullSpeedDebug)", "author": "mpirvu", "createdAt": "2021-03-01T22:15:38Z", "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -8254,7 +8254,7 @@ TR_J9SharedCacheVM::canMethodExitEventBeHooked()\n bool\n TR_J9SharedCacheVM::methodsCanBeInlinedEvenIfEventHooksEnabled()\n    {\n-   return true;\n+   return !TR::Options::getCmdLineOptions()->getOption(TR_FullSpeedDebug);", "originalCommit": "3afec7da8a5a144511fa0193378d4cd00c2c0fb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTEyMjg1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11554#discussion_r585122853", "bodyText": "Addressed in 6e15af8", "author": "dsouzai", "createdAt": "2021-03-01T23:19:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU4NTA4ODk1OQ=="}], "type": "inlineReview"}, {"oid": "6e15af8fa2a907dea4f78cda8bf953e2c0af41a5", "url": "https://github.com/eclipse-openj9/openj9/commit/6e15af8fa2a907dea4f78cda8bf953e2c0af41a5", "message": "Use comp object parameter to methodsCanBeInlinedEvenIfEventHooksEnabled\n\nIn order to ensure that JITServer is consistent with the client, update\nthe methodsCanBeInlinedEvenIfEventHooksEnabled to take in the comp\nobject as a parameter, which can be used to check whether FSD is\nenabled, rather than using the global options object.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-03-01T22:58:01Z", "type": "commit"}]}