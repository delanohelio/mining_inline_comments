{"pr_number": 8588, "pr_title": "Runtime compressed refs work", "pr_createdAt": "2020-02-14T22:36:36Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8588", "timeline": [{"oid": "2dd02470c80341f97a7885e9afe5797660f96885", "url": "https://github.com/eclipse-openj9/openj9/commit/2dd02470c80341f97a7885e9afe5797660f96885", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-14T22:39:57Z", "type": "forcePushed"}, {"oid": "3a13e3216cb5d34c987df3baa23f7d221f936cc3", "url": "https://github.com/eclipse-openj9/openj9/commit/3a13e3216cb5d34c987df3baa23f7d221f936cc3", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-18T16:09:18Z", "type": "forcePushed"}, {"oid": "3eeb9fe31ce95041be9a81385d4784a84e5120f7", "url": "https://github.com/eclipse-openj9/openj9/commit/3eeb9fe31ce95041be9a81385d4784a84e5120f7", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-18T16:22:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTMyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r380791321", "bodyText": "How it suppose to work for run-time selected CR? For all other cases Remembered Set Cards is an array of MM_RememberedSetCard[]. So I would assume for run-time selected CR it is U_32 used in each U_64. But code below (add and subtract) suggests cards located contiguously and my assumption is wrong. Did I miss something?\nLooks like Remembered Set Cards memory is used like an array of U_32 for CR and array of U_64 and for run-time CR it is not an array of MM_RememberedSetCard[] any more. Technically it would work but it is confusing for me slightly. Any opinions on this?", "author": "dmitripivkine", "createdAt": "2020-02-18T16:35:47Z", "path": "runtime/gc_base/modron.h", "diffHunk": "@@ -171,5 +171,13 @@ extern \"C\" fj9object_t j9gc_objaccess_tokenFromPointer(J9VMThread *vmThread, mm_\n \n /** @} */\n \n+#if defined (OMR_GC_FULL_POINTERS)\n+/* Enough space to hold a heap address, compressed or not */\n+typedef UDATA MM_RememberedSetCard;\n+#else /* OMR_GC_FULL_POINTERS */\n+/* Compresses a heap address by shifting right by CARD_SIZE_SHIFT */\n+typedef U_32 MM_RememberedSetCard; \n+#endif /* OMR_GC_FULL_POINTERS */\n+", "originalCommit": "3eeb9fe31ce95041be9a81385d4784a84e5120f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMTMwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r380801309", "bodyText": "Yes, it's represented as U32[] or UDATA[].  The MM_RememberedSetCard type is left for documentation purposes (much like fj9object_t), and the type has to be large enough to hold both sizes in mixed mode.", "author": "gacholio", "createdAt": "2020-02-18T16:51:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5MTMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMTg2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r380931869", "bodyText": "I might have had been ok with this, but thinking now if these 4 methods (read/write/sub/add) could be statics in RSCard (which obviously needs to upgrade from typedef to class)?\nThat would be at least consistent with GC_SlotObject story.", "author": "amicic", "createdAt": "2020-02-18T21:00:25Z", "path": "runtime/gc_vlhgc/EnvironmentVLHGC.hpp", "diffHunk": "@@ -100,6 +99,84 @@ class MM_EnvironmentVLHGC : public MM_EnvironmentBase\n \tMMINLINE static MM_EnvironmentVLHGC *getEnvironment(OMR_VMThread *omrVMThread) { return static_cast<MM_EnvironmentVLHGC*>(omrVMThread->_gcOmrVMThreadExtensions); }\n \tMMINLINE static MM_EnvironmentVLHGC *getEnvironment(MM_EnvironmentBase* env) { return static_cast<MM_EnvironmentVLHGC*>(env); }\n \n+\tMMINLINE static uintptr_t rsCardSize(bool compressed) { return compressed ? sizeof(uint32_t) : sizeof(uintptr_t); }\n+\n+\tMMINLINE uintptr_t rsCardSize() { return rsCardSize(compressObjectReferences()); }\n+\n+\t/**\n+\t * Read the value of a card.\n+\t *\n+\t * @param[in] addr the card address\n+\t * @return the card value\n+\t */\n+\tMMINLINE MM_RememberedSetCard readCard(MM_RememberedSetCard *addr)\n+\t{\n+\t\treturn compressObjectReferences() ? (MM_RememberedSetCard)*(uint32_t*)addr : (MM_RememberedSetCard)*(uintptr_t*)addr;\n+\t}\n+\n+\t/**\n+\t * Write the value of a card.\n+\t *\n+\t * @param[in] addr the card address\n+\t * @param[in] card the card value\n+\t */\n+\tMMINLINE void writeCard(MM_RememberedSetCard *addr, MM_RememberedSetCard card)\n+\t{\n+\t\tif (compressObjectReferences()) {\n+\t\t\t*(uint32_t*)addr = (uint32_t)card;\n+\t\t} else {\n+\t\t\t*(uintptr_t*)addr = (uintptr_t)card;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Calculate the addition of an integer to a card address\n+\t *\n+\t * @param[in] base the base card address\n+\t * @param[in] index the index to add\n+\t * @return the adjusted address\n+\t */\n+\tMMINLINE MM_RememberedSetCard* addToCardAddress(MM_RememberedSetCard *base, intptr_t index)\n+\t{\n+\t\tif (compressObjectReferences()) {\n+\t\t\treturn (MM_RememberedSetCard*)((uint32_t*)base + index);\n+\t\t} else {\n+\t\t\treturn (MM_RememberedSetCard*)((uintptr_t*)base + index);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Calculate the subtraction of an integer from a card address\n+\t *\n+\t * @param[in] base the base card address\n+\t * @param[in] index the index to subtract\n+\t * @return the adjusted address\n+\t */\n+\tMMINLINE MM_RememberedSetCard* subtractFromCardAddress(MM_RememberedSetCard *base, intptr_t index)\n+\t{\n+\t\tif (compressObjectReferences()) {\n+\t\t\treturn (MM_RememberedSetCard*)((uint32_t*)base - index);\n+\t\t} else {\n+\t\t\treturn (MM_RememberedSetCard*)((uintptr_t*)base - index);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Calculate the difference between two card addresses, in slots\n+\t *\n+\t * @param[in] p1 the value to be subtracted from\n+\t * @param[in] p2 the value to be subtracted\n+\t * @return p1 - p2 in slots\n+\t */\n+\tMMINLINE intptr_t subtractCardAddresses(MM_RememberedSetCard *p1, MM_RememberedSetCard *p2)\n+\t{\n+\t\tif (compressObjectReferences()) {\n+\t\t\treturn (uint32_t*)p1 - (uint32_t*)p2;\n+\t\t} else {\n+\t\t\treturn (uintptr_t*)p1 - (uintptr_t*)p2;\n+\t\t}\n+\t}\n+", "originalCommit": "3eeb9fe31ce95041be9a81385d4784a84e5120f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzODQxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r381338417", "bodyText": "Let's discuss this in person - it's not as simple as making the typedef into a class (we won't have instances of the class).", "author": "gacholio", "createdAt": "2020-02-19T14:48:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMTg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMzcwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r380933703", "bodyText": "I said this before, but there should be a helper like EnvBase::getReferenceSize(). You've just introduced similar one for RS Card size. But this being an OpenJ9 change and EnvBase being in OMR, of course, this is not the right moment to introduce it.", "author": "amicic", "createdAt": "2020-02-18T21:04:20Z", "path": "runtime/gc_vlhgc/RememberedSetCardBucket.cpp", "diffHunk": "@@ -184,10 +184,11 @@ MM_RememberedSetCardBucket::getSize(MM_EnvironmentVLHGC *env)\n \tUDATA size = _bufferCount * MAX_BUFFER_SIZE;\n \tif (_bufferCount > 0) {\n \t\tAssert_MM_true(NULL != _current);\n-\t\tUDATA offset = (UDATA)_current & OFFSET_MASK;\n+\t\tUDATA offset = (UDATA)_current & offsetMask(env);\n \t\tif (0 != offset) {\n \t\t\t/* subtract the unused portion of the current buffer */\n-\t\t\tsize -= MAX_BUFFER_SIZE - (offset / sizeof (MM_RememberedSetCard));\n+\t\t\tuintptr_t const referenceSize = env->compressObjectReferences() ? sizeof(uint32_t) : sizeof(uintptr_t);", "originalCommit": "3eeb9fe31ce95041be9a81385d4784a84e5120f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2OTA4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383369084", "bodyText": "as mentioned before, we are dealing with card size, not  reference size\nnote that in future, due to 9 bit shifting (and all the work you've done), we may end up compressing RS card for nonCR object references up to certain heap size (2^card shift * 4GB), in which case card and reference size will not be same.", "author": "amicic", "createdAt": "2020-02-24T16:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMzcwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3NzkwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383377905", "bodyText": "Done.", "author": "gacholio", "createdAt": "2020-02-24T16:38:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzMzcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkzNDMwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r380934303", "bodyText": "Sooner or later tight loops like this should be optimized so that 'is CR' check done ideally only once per iteration. I can see 4 hidden checks here.", "author": "amicic", "createdAt": "2020-02-18T21:05:44Z", "path": "runtime/gc_vlhgc/RememberedSetCardBucket.cpp", "diffHunk": "@@ -213,13 +214,14 @@ MM_RememberedSetCardBucket::compact(MM_EnvironmentVLHGC *env)\n \n \t\t\t/* find top index for this buffer */\n \t\t\tUDATA fromIndexTop = MAX_BUFFER_SIZE;\n-\t\t\tif (isCurrentSlotWithinBuffer(fromBufferCardList)) {\n-\t\t\t\tfromIndexTop = _current -  fromBufferCardList;\n+\t\t\tif (isCurrentSlotWithinBuffer(env, fromBufferCardList)) {\n+\t\t\t\tfromIndexTop = env->subtractCardAddresses(_current, fromBufferCardList);\n \t\t\t}\n \n \t\t\tfor (UDATA fromIndex = 0; fromIndex < fromIndexTop; fromIndex++) {\n-\t\t\t\tif (0 != fromBufferCardList[fromIndex]) {\n-\t\t\t\t\ttoBufferCardList[toIndex++] = fromBufferCardList[fromIndex];\n+\t\t\t\tMM_RememberedSetCard card = env->readCard(env->addToCardAddress(fromBufferCardList, fromIndex));\n+\t\t\t\tif (0 != card) {", "originalCommit": "3eeb9fe31ce95041be9a81385d4784a84e5120f7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4c0d7613b70708309c0dd8627d95a3a1c6c63b2d", "url": "https://github.com/eclipse-openj9/openj9/commit/4c0d7613b70708309c0dd8627d95a3a1c6c63b2d", "message": "new rscard\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-21T17:38:47Z", "type": "forcePushed"}, {"oid": "3fd134f2bf87c0310fdee9db4a4cafca2e9f6020", "url": "https://github.com/eclipse-openj9/openj9/commit/3fd134f2bf87c0310fdee9db4a4cafca2e9f6020", "message": "new rscard\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-21T17:41:51Z", "type": "forcePushed"}, {"oid": "5c8de07dc76981f40ff617a3341c3a8b2eee84c8", "url": "https://github.com/eclipse-openj9/openj9/commit/5c8de07dc76981f40ff617a3341c3a8b2eee84c8", "message": "new rscard\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-21T17:46:42Z", "type": "forcePushed"}, {"oid": "90907ba102fb7ceab1dd8a3c3adb051803edd2c9", "url": "https://github.com/eclipse-openj9/openj9/commit/90907ba102fb7ceab1dd8a3c3adb051803edd2c9", "message": "new rscard\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-21T17:59:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMTU3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r382731575", "bodyText": "This is cleaner, but I getting greedy and I'll suggest more (but if you feel it's excessive requirement, no problem - we can go with this as-is and I can re-eval my thinking at a later point with fresh brain)\nI'd like to see a field uintptr_t/uint_32 (same as you had with typedef orignal) inside this class. Field name could be 'address' (or 'value'). We would have a constructor and allow instantiation. We could even have  getter/setter to access address field, although it's probably excessive - the field could just simple be a public.\nThen,\nUDATA card = 0;\nwould turn into\nCard card(0);\nreadCard would return instance of Card, and since  operator '=' would work, code like\nUDATA card = readCard(); would revert back to\nCard card = readCard(...).\nPassing card as parameter (of type Card)  in a method would also work since there is default copy operator.\nOperator == is unfortunately not defined by default so it should be defined or a method isEqual should be introduced.\nVarious spots in the code that do arithmetic operations under card will have to access it with\ncard.address rather than just using card. For example class methods substruct/add would than have to do something like:\n(uint32_t*)base.address + index\nFinally, the 4 methods (all except cardSize()) could even turn into non-statics.", "author": "amicic", "createdAt": "2020-02-21T18:16:44Z", "path": "runtime/gc_vlhgc/RememberedSetCard.hpp", "diffHunk": "@@ -0,0 +1,118 @@\n+/*******************************************************************************\n+ * Copyright (c) 1991, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+/**\n+ * @file\n+ * @ingroup gc_vlhgc\n+ */\n+\n+#if !defined(REMEMBEREDSETCARD_HPP)\n+#define REMEMBEREDSETCARD_HPP\n+\n+#include \"modron.h\"\n+\n+class MM_RememberedSetCard", "originalCommit": "90907ba102fb7ceab1dd8a3c3adb051803edd2c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc4OTU2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r382789567", "bodyText": "This all sounds good, but let's leave it for another PR - I'm worried that introducing object wrappers may degrade the performance of the standard builds. I'm pretty confident these changes will not.\nIf you're generally happy, I'll whip this into shape and squash it for final review next week.", "author": "gacholio", "createdAt": "2020-02-21T20:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMTU3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc5NDk4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r382794984", "bodyText": "Sounds good. I'll have one more pass early next week.", "author": "amicic", "createdAt": "2020-02-21T20:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczMTU3NQ=="}], "type": "inlineReview"}, {"oid": "02ff2732053546c5e04d5f0fe695c4b322a27137", "url": "https://github.com/eclipse-openj9/openj9/commit/02ff2732053546c5e04d5f0fe695c4b322a27137", "message": "new rscard\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-21T19:04:57Z", "type": "forcePushed"}, {"oid": "cf8c8aea3cdac4b24c8ec0a78c21a294783ad220", "url": "https://github.com/eclipse-openj9/openj9/commit/cf8c8aea3cdac4b24c8ec0a78c21a294783ad220", "message": "new rscard\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-22T01:40:03Z", "type": "forcePushed"}, {"oid": "11ce4408982ddce8620fac9d8b58e3d5bc5b428a", "url": "https://github.com/eclipse-openj9/openj9/commit/11ce4408982ddce8620fac9d8b58e3d5bc5b428a", "message": "new rscard\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-22T01:50:43Z", "type": "forcePushed"}, {"oid": "f761663ca17e3eb37841b8a0531e10dfd445257c", "url": "https://github.com/eclipse-openj9/openj9/commit/f761663ca17e3eb37841b8a0531e10dfd445257c", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-22T03:37:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNDczNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383314737", "bodyText": "These 2 lines could be more concise by using GC_SlotObject::readReferenceFromSlot() instead of readSlot&mmPointerFromToken", "author": "amicic", "createdAt": "2020-02-24T14:59:45Z", "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "diffHunk": "@@ -2254,13 +2255,15 @@ MM_IncrementalGenerationalGC::exportStats(MM_EnvironmentVLHGC *env, MM_Collectio\n \t\t\t\tif (classesPotentiallyUnloaded && !isMarked((J9Object *)spine)) {\n \t\t\t\t\tstats->_arrayletUnknownLeaves += 1;\n \t\t\t\t\t/* is this first arraylet leaf? */\n-\t\t\t\t\tif (region->getLowAddress() == mmPointerFromToken((J9VMThread*)env->getLanguageVMThread(), _extensions->indexableObjectModel.getArrayoidPointer(spine)[0])) {\n+\t\t\t\t\tfj9object_t firstArrayletLeaf = GC_SlotObject::readSlot(_extensions->indexableObjectModel.getArrayoidPointer(spine), compressed);\n+\t\t\t\t\tif (region->getLowAddress() == mmPointerFromToken((J9VMThread*)env->getLanguageVMThread(), firstArrayletLeaf)) {", "originalCommit": "f761663ca17e3eb37841b8a0531e10dfd445257c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyNzIyNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383327226", "bodyText": "Creating SlotObject requires and OMR VM, which is not in evidence here - is it worth the work to fetch that?", "author": "gacholio", "createdAt": "2020-02-24T15:20:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMzODY3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383338676", "bodyText": "Actually, we have a javaVM locally, so the dig isn't very far.", "author": "gacholio", "createdAt": "2020-02-24T15:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM1MjUzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383352530", "bodyText": "Thanks.\nBTW, we should probably retire mmPointerFromToken macro at some point. Seems like it's used at only two more spots (in ObjectAccessBarrier code), where again readReferenceFromSlot could be used, instead.", "author": "amicic", "createdAt": "2020-02-24T15:58:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2Njc1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383366751", "bodyText": "Done. These are no longer used:\nextern \"C\" mm_j9object_t j9gc_objaccess_pointerFromToken(J9VMThread *vmThread, fj9object_t token);\nextern \"C\" fj9object_t j9gc_objaccess_tokenFromPointer(J9VMThread *vmThread, mm_j9object_t object);\n\nWould you like those removed as well?", "author": "gacholio", "createdAt": "2020-02-24T16:21:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3MzE0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383373146", "bodyText": "Looks like it would be easy to go one step further and get rid of the token functions in the barriers as well (replace with SlotObject).", "author": "gacholio", "createdAt": "2020-02-24T16:31:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNDczNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3NjE3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383376173", "bodyText": "I'm happy with the changes relevant to RemSet. Widening the scope of changes that are not relevant is up to you.", "author": "amicic", "createdAt": "2020-02-24T16:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMxNDczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NzA3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383367075", "bodyText": "please use MAX_BUFFER_SIZE * MM_RememberedSetCard::cardSize(env->compressObjectReferences())\nas-is is unclear if it's relying on card size or obj ref size", "author": "amicic", "createdAt": "2020-02-24T16:21:44Z", "path": "runtime/gc_vlhgc/RememberedSetCardBucket.hpp", "diffHunk": "@@ -70,6 +62,11 @@ class MM_RememberedSetCardBucket : public MM_BaseNonVirtual {\n public:\n \t/* function members */\n private:\n+\tMMINLINE uintptr_t offsetMask(MM_EnvironmentVLHGC *env)\n+\t{\n+\t\treturn (MAX_BUFFER_SIZE * (env->compressObjectReferences() ? sizeof(uint32_t) : sizeof(uintptr_t))) - 1;", "originalCommit": "6dafab052cbd0bce74229dd6950de26b617d0d1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2ODMzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383368334", "bodyText": "Done.", "author": "gacholio", "createdAt": "2020-02-24T16:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2NzA3NQ=="}], "type": "inlineReview"}, {"oid": "72091ae6c5b6cd0db2378594915efe9535397a9c", "url": "https://github.com/eclipse-openj9/openj9/commit/72091ae6c5b6cd0db2378594915efe9535397a9c", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-24T16:46:47Z", "type": "forcePushed"}, {"oid": "711312c0f870cf927bf82fbdc953619bfba2d90e", "url": "https://github.com/eclipse-openj9/openj9/commit/711312c0f870cf927bf82fbdc953619bfba2d90e", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-24T17:03:54Z", "type": "forcePushed"}, {"oid": "dff0e3d527ce775ab44fcdb2b28d44efdbf23c9b", "url": "https://github.com/eclipse-openj9/openj9/commit/dff0e3d527ce775ab44fcdb2b28d44efdbf23c9b", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-24T17:39:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5MjgwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383492808", "bodyText": "Would you please remove ++ from toIndex++ but add toIndex += 1; after write?", "author": "dmitripivkine", "createdAt": "2020-02-24T20:20:22Z", "path": "runtime/gc_vlhgc/RememberedSetCardBucket.cpp", "diffHunk": "@@ -213,13 +217,16 @@ MM_RememberedSetCardBucket::compact(MM_EnvironmentVLHGC *env)\n \n \t\t\t/* find top index for this buffer */\n \t\t\tUDATA fromIndexTop = MAX_BUFFER_SIZE;\n-\t\t\tif (isCurrentSlotWithinBuffer(fromBufferCardList)) {\n-\t\t\t\tfromIndexTop = _current -  fromBufferCardList;\n+\t\t\tif (isCurrentSlotWithinBuffer(env, fromBufferCardList)) {\n+\t\t\t\tfromIndexTop = MM_RememberedSetCard::subtractCardAddresses(_current, fromBufferCardList, compressed);\n \t\t\t}\n \n \t\t\tfor (UDATA fromIndex = 0; fromIndex < fromIndexTop; fromIndex++) {\n-\t\t\t\tif (0 != fromBufferCardList[fromIndex]) {\n-\t\t\t\t\ttoBufferCardList[toIndex++] = fromBufferCardList[fromIndex];\n+\t\t\t\tMM_RememberedSetCard *fromAddress = MM_RememberedSetCard::addToCardAddress(fromBufferCardList, fromIndex, compressed);\n+\t\t\t\tUDATA card = MM_RememberedSetCard::readCard(fromAddress, compressed);\n+\t\t\t\tif (0 != card) {\n+\t\t\t\t\tMM_RememberedSetCard *toAddress = MM_RememberedSetCard::addToCardAddress(toBufferCardList, toIndex++, compressed);\n+\t\t\t\t\tMM_RememberedSetCard::writeCard(toAddress, card, compressed);", "originalCommit": "dff0e3d527ce775ab44fcdb2b28d44efdbf23c9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5NjkwNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8588#discussion_r383496904", "bodyText": "Same here: could _cardIndex be incremented in separate line please?", "author": "dmitripivkine", "createdAt": "2020-02-24T20:29:31Z", "path": "runtime/gc_vlhgc/RememberedSetCardListCardIterator.cpp", "diffHunk": "@@ -68,14 +69,16 @@ GC_RememberedSetCardListCardIterator::nextBucket(MM_EnvironmentBase* env)\n \treturn true;\n }\n \n-MM_RememberedSetCard\n-GC_RememberedSetCardListCardIterator::nextReferencingCard(MM_EnvironmentBase* env)\n+UDATA\n+GC_RememberedSetCardListCardIterator::nextReferencingCard(MM_EnvironmentBase *env)\n {\n+\tbool const compressed = env->compressObjectReferences();\n \tdo {\n \t\tdo {\n \t\t\t/* next card within the buffer */\n \t\t\tif (_cardIndex < _cardIndexTop) {\n-\t\t\t\treturn _bufferCardList[_cardIndex++];\n+\t\t\t\tMM_RememberedSetCard *cardAddress = MM_RememberedSetCard::addToCardAddress(_bufferCardList, _cardIndex++, compressed);", "originalCommit": "dff0e3d527ce775ab44fcdb2b28d44efdbf23c9b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "452dfaf6eeee0b96d01ccccf249ec09712ecc375", "url": "https://github.com/eclipse-openj9/openj9/commit/452dfaf6eeee0b96d01ccccf249ec09712ecc375", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-24T23:54:53Z", "type": "forcePushed"}, {"oid": "452dfaf6eeee0b96d01ccccf249ec09712ecc375", "url": "https://github.com/eclipse-openj9/openj9/commit/452dfaf6eeee0b96d01ccccf249ec09712ecc375", "message": "Runtime compressed refs work\n\nGet balanced going in mixed mode.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-02-24T23:54:53Z", "type": "commit"}]}