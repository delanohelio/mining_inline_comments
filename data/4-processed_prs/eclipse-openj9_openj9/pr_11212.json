{"pr_number": 11212, "pr_title": "Improve JITServer ROMClass packing", "pr_createdAt": "2020-11-17T20:53:55Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11212", "timeline": [{"oid": "20c433e5b13c0cee727e15d6ff5a010d9720b807", "url": "https://github.com/eclipse-openj9/openj9/commit/20c433e5b13c0cee727e15d6ff5a010d9720b807", "message": "Update romSize field in packed ROMClass\n\nIf romSize stays the same as in the original ROMClass, the strings\nappended at the can only be accessed directly, but not via the\ngetROMString() methods.\n\nSigned-off-by: Alexey Khrabrov <khrabrov@cs.toronto.edu>", "committedDate": "2020-11-17T19:41:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0OTk4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525749984", "bodyText": "Here, size is the padded size. Is there a risk to copy past the end of the string and risk a crash?\nUnlikely though because the padding is at most 1.", "author": "mpirvu", "createdAt": "2020-11-18T03:46:44Z", "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);", "originalCommit": "a6963c120cd7521140c381564dc2fbeafa601944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc5NzQ2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525797464", "bodyText": "Good catch. I'll fix it.", "author": "AlexeyKhrabrov", "createdAt": "2020-11-18T04:37:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0OTk4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2MTgwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525761808", "bodyText": "Is this the right comparison? alignedNoCheck can return 0 only when the length is 0.", "author": "mpirvu", "createdAt": "2020-11-18T03:59:09Z", "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);\n+   static_assert(sizeof(origStr->length) == 2, \"UTF8 length field is not 2 bytes large\");\n+   if (!OMR::alignedNoCheck(origStr->length, sizeof(origStr->length)))", "originalCommit": "a6963c120cd7521140c381564dc2fbeafa601944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc5NzY2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525797660", "bodyText": "I think this is correct. This function returns true if its 1st argument is aligned on the 2nd.", "author": "AlexeyKhrabrov", "createdAt": "2020-11-18T04:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2MTgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgwNTY1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525805653", "bodyText": "Got it. I was actually looking at the definition of alignNoCheck instead of alignedNoCheck.", "author": "mpirvu", "createdAt": "2020-11-18T04:46:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc2MTgwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc3MzMwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525773305", "bodyText": "We didn't do this before. Was this a bug?", "author": "mpirvu", "createdAt": "2020-11-18T04:11:35Z", "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(str->length)) + sizeof(str->length);\n+   }\n+\n+static size_t\n+getPackedUTF8Size(const J9UTF8 *str, const J9ROMClass *romClass)\n+   {\n+   return JITServerHelpers::isAddressInROMClass(str, romClass) ? 0 : getUTF8Size(str);\n+   }\n+\n+// If the string points outside of the contiguous part of origRomClass, appends\n+// it (with padding) at curPos and updates the SRP to the string in the packed\n+// ROMClass. Returns the new value of curPos.\n+static uint8_t *\n+packUTF8(uint8_t *curPos, const J9UTF8 *origStr, const J9ROMClass *origRomClass, J9SRP &srp)\n+   {\n+   if (JITServerHelpers::isAddressInROMClass(origStr, origRomClass))\n+      return curPos;\n+\n+   size_t size = getUTF8Size(origStr);\n+   memcpy(curPos, origStr, size);\n+   static_assert(sizeof(origStr->length) == 2, \"UTF8 length field is not 2 bytes large\");\n+   if (!OMR::alignedNoCheck(origStr->length, sizeof(origStr->length)))\n+      curPos[size - 1] = '\\0';\n+   NNSRP_SET(srp, curPos);\n+   return curPos + size;\n    }\n \n // Packs a ROMClass into a std::string to be transferred to the server.\n-// The name and signature of all methods are appended to the end of the cloned class body and the\n-// self referential pointers to them are updated to deal with possible interning. The method names\n-// and signature are needed on the server but may be interned globally on the client.\n+// Some of the name and signature strings are interned and stored outside\n+// of the ROMClass body. Such strings are appended to the end of the cloned\n+// ROMClass body and the self referential pointers to them are updated.\n static std::string\n packROMClass(J9ROMClass *origRomClass, TR_Memory *trMemory)\n    {\n+   size_t totalSize = origRomClass->romSize;\n    J9UTF8 *className = J9ROMCLASS_CLASSNAME(origRomClass);\n-   size_t classNameSize = className->length + sizeof(U_16);\n+   totalSize += getPackedUTF8Size(className, origRomClass);\n \n    J9ROMMethod *romMethod = J9ROMCLASS_ROMMETHODS(origRomClass);\n-   size_t totalSize = origRomClass->romSize + classNameSize;\n    for (size_t i = 0; i < origRomClass->romMethodCount; ++i)\n       {\n-      totalSize += methodStringsLength(romMethod);\n+      totalSize += getPackedUTF8Size(J9ROMMETHOD_NAME(romMethod), origRomClass);\n+      totalSize += getPackedUTF8Size(J9ROMMETHOD_SIGNATURE(romMethod), origRomClass);\n       romMethod = nextROMMethod(romMethod);\n       }\n \n+   // Check if the contiguous part of the ROMClass already contains all the strings visited above\n+   if (totalSize == origRomClass->romSize)\n+      return std::string((char *)origRomClass, origRomClass->romSize);\n+\n    J9ROMClass *romClass = (J9ROMClass *)trMemory->allocateHeapMemory(totalSize);\n    if (!romClass)\n       throw std::bad_alloc();\n    memcpy(romClass, origRomClass, origRomClass->romSize);\n+   // Update the size to include the strings that will be appended at the end\n+   romClass->romSize = totalSize;", "originalCommit": "a6963c120cd7521140c381564dc2fbeafa601944", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc5ODAxNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525798015", "bodyText": "Yes, but it didn't actually lead to any problems since these strings are only accessed directly and without checking that they are within the ROMClass bounds.", "author": "AlexeyKhrabrov", "createdAt": "2020-11-18T04:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc3MzMwNQ=="}], "type": "inlineReview"}, {"oid": "7cb9c6ed911e3dca50038902c16590ac3f4cbb6c", "url": "https://github.com/eclipse-openj9/openj9/commit/7cb9c6ed911e3dca50038902c16590ac3f4cbb6c", "message": "Align J9UTF8 strings in packed ROMClass\n\nThe length field of the J9UTF8 structure must be aligned on its size\n(2 bytes). Strings in ROMClasses already satisfy this requirement. To\nenforce it in a packed ROMClass, we pad each appended string so that\nthe next one is always aligned on the size of the length field.\n\nSigned-off-by: Alexey Khrabrov <khrabrov@cs.toronto.edu>", "committedDate": "2020-11-18T04:43:31Z", "type": "commit"}, {"oid": "3e52aab4a853bf5d562fa5f5deb16233fd42cd07", "url": "https://github.com/eclipse-openj9/openj9/commit/3e52aab4a853bf5d562fa5f5deb16233fd42cd07", "message": "Do not append non-interned strings at the end of packed ROMClass\n\nSkip appending copies of strings that are already stored within the\ncontiguous portion of the ROMClass to avoid unnecessary copying and\nreduce the size of the packed ROMClass.\n\nSigned-off-by: Alexey Khrabrov <khrabrov@cs.toronto.edu>", "committedDate": "2020-11-18T04:43:36Z", "type": "commit"}, {"oid": "3e52aab4a853bf5d562fa5f5deb16233fd42cd07", "url": "https://github.com/eclipse-openj9/openj9/commit/3e52aab4a853bf5d562fa5f5deb16233fd42cd07", "message": "Do not append non-interned strings at the end of packed ROMClass\n\nSkip appending copies of strings that are already stored within the\ncontiguous portion of the ROMClass to avoid unnecessary copying and\nreduce the size of the packed ROMClass.\n\nSigned-off-by: Alexey Khrabrov <khrabrov@cs.toronto.edu>", "committedDate": "2020-11-18T04:43:36Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxOTMzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525819332", "bodyText": "Don't we add too much now? sizeof(*str) is 4 so we pad payload to be a multiple of 4 and then add another 4 bytes", "author": "mpirvu", "createdAt": "2020-11-18T05:13:06Z", "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -37,63 +37,88 @@ bool         JITServerHelpers::_serverAvailable = true;\n uint64_t     JITServerHelpers::_nextConnectionRetryTime = 0;\n TR::Monitor *JITServerHelpers::_clientStreamMonitor = NULL;\n \n+\n+// To ensure that the length fields in UTF8 strings appended at the end of the\n+// packed ROMClass are properly aligned, we must pad the strings accordingly.\n+// This function returns the total size of a UTF8 string with the padding.\n static size_t\n-methodStringsLength(J9ROMMethod *method)\n+getUTF8Size(const J9UTF8 *str)\n    {\n-   J9UTF8 *name = J9ROMMETHOD_NAME(method);\n-   J9UTF8 *sig = J9ROMMETHOD_SIGNATURE(method);\n-   return (name->length + sig->length + (2 * sizeof(U_16)));\n+   return OMR::alignNoCheck(str->length, sizeof(*str)) + sizeof(*str);", "originalCommit": "3e52aab4a853bf5d562fa5f5deb16233fd42cd07", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgyMTMxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r525821319", "bodyText": "sizeof(*str) == sizeof(J9UTF8) == sizeof(J9UTF8::length) == 2. This function returns the size of the whole thing, including the header. The only change I made here was to use sizeof(J9UTF8) instead of sizeof(J9UTF8::length) because it exposes less details about J9UTF8 internals.", "author": "AlexeyKhrabrov", "createdAt": "2020-11-18T05:20:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxOTMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA4OTAwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11212#discussion_r526089003", "bodyText": "Right. My IDE found me another definition in genBinaryBlob.hpp\n\ttypedef struct J9UTF8 {\n\t\tuint16_t length;\n\t\tuint8_t data[2];\n\t} J9UTF8;\n\nwhich may be used for DDR?", "author": "mpirvu", "createdAt": "2020-11-18T13:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTgxOTMzMg=="}], "type": "inlineReview"}]}