{"pr_number": 10594, "pr_title": "Remove old processor detection code on Power", "pr_createdAt": "2020-09-14T21:33:29Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10594", "timeline": [{"oid": "9a19fce5a21d94e2b4403d47b27c5dbe1935b26f", "url": "https://github.com/eclipse-openj9/openj9/commit/9a19fce5a21d94e2b4403d47b27c5dbe1935b26f", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-14T21:43:12Z", "type": "forcePushed"}, {"oid": "eccd3e2f4aca9956a27095cddb78ac6c9caeeb33", "url": "https://github.com/eclipse-openj9/openj9/commit/eccd3e2f4aca9956a27095cddb78ac6c9caeeb33", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-14T22:10:39Z", "type": "forcePushed"}, {"oid": "e8854e277043e9a71d78c0f811eed079537fc858", "url": "https://github.com/eclipse-openj9/openj9/commit/e8854e277043e9a71d78c0f811eed079537fc858", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-15T16:24:40Z", "type": "forcePushed"}, {"oid": "7c949359efb408745cf12d54b41131b9e78f3057", "url": "https://github.com/eclipse-openj9/openj9/commit/7c949359efb408745cf12d54b41131b9e78f3057", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-15T16:28:18Z", "type": "forcePushed"}, {"oid": "2e6f5e6849be129c272eb34c672b82ec16f4b780", "url": "https://github.com/eclipse-openj9/openj9/commit/2e6f5e6849be129c272eb34c672b82ec16f4b780", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-15T18:26:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NjU4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#discussion_r488966580", "bodyText": "does this routine exist only temporarily?  I am imagining that these p/env/J9CPU.x files would be deleted completely once everything CPU-related is moved to OMR side.  it is less ideal that CPU-related stuffs are still split implementation.", "author": "zl-wang", "createdAt": "2020-09-15T20:53:44Z", "path": "runtime/compiler/p/env/J9CPU.cpp", "diffHunk": "@@ -135,21 +47,10 @@ J9::Power::CPU::isCompatible(const OMRProcessorDesc& processorDescription)\n    return targetProcessor == processor;\n    }\n \n-OMRProcessorDesc\n-J9::Power::CPU::getProcessorDescription()\n-   {\n-#if defined(J9VM_OPT_JITSERVER)\n-   if (auto stream = TR::CompilationInfo::getStream())\n-      {\n-      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n-      return vmInfo->_processorDescription;\n-      }\n-#endif /* defined(J9VM_OPT_JITSERVER) */\n-   return _processorDescription;\n-   }\n-\n-bool\n-J9::Power::CPU::getPPCSupportsVSX()\n-   {\n-   return self()->supportsFeature(OMR_FEATURE_PPC_HAS_VSX);\n-   }\n+void\n+J9::Power::CPU::setProcessorType(OMRProcessorArchitecture p)", "originalCommit": "2e6f5e6849be129c272eb34c672b82ec16f4b780", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk3MzUwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#discussion_r488973501", "bodyText": "I tried to remove as much as possible but this function can't be removed due to JITServer.\nOMRProcessorDesc\nJ9::Power::CPU::getProcessorDescription()\n   {\n#if defined(J9VM_OPT_JITSERVER)\n   if (auto stream = TR::CompilationInfo::getStream())\n      {\n      auto *vmInfo = TR::compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n      return vmInfo->_processorDescription;\n      }\n#endif /* defined(J9VM_OPT_JITSERVER) */\n   return _processorDescription;\n   }\nfor J9::Power::CPU::setProcessorType I would say it only exists temporarily. It's only here to make this function TR::CompilationInfo::setProcessorByDebugOption() happy for now. And eventually I will sink it down to OMRCPU. Is this function still being used? Also I have a question regarding setProcessorByDebugOption(), notice how it only changes the processor type and doesn't change the processor features, would that be a problem?", "author": "harryyu1994", "createdAt": "2020-09-15T21:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NjU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk4MTYzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10594#discussion_r488981630", "bodyText": "Also I have a question regarding setProcessorByDebugOption(), notice how it only changes the processor type and doesn't change the processor features, would that be a problem?\n\nit is a problem in theory, since features can be disabled individually on running instance of OS.  But, i would say it is not a problem usually. Running instances of OS (same level) typically have the same set of features enabled. Especially for Linux (targeted containerized environment on POWER), it is not that easy to disable a hardware feature (without rebuilding the kernel).  AIX can enable/disable more dynamically through management tool, but it doesn't support Docker anytime soon.", "author": "zl-wang", "createdAt": "2020-09-15T21:24:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk2NjU4MA=="}], "type": "inlineReview"}, {"oid": "f30e9b88683d3774a65e43e75772f3cfd1bafb7f", "url": "https://github.com/eclipse-openj9/openj9/commit/f30e9b88683d3774a65e43e75772f3cfd1bafb7f", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-16T17:33:50Z", "type": "forcePushed"}, {"oid": "8dcce280d25d498d8c4c848151346c62104a7af6", "url": "https://github.com/eclipse-openj9/openj9/commit/8dcce280d25d498d8c4c848151346c62104a7af6", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-16T18:11:52Z", "type": "forcePushed"}, {"oid": "1c43b50f35b7e45b59685432a31b52c3de1f24f8", "url": "https://github.com/eclipse-openj9/openj9/commit/1c43b50f35b7e45b59685432a31b52c3de1f24f8", "message": "Remove old processor detection code on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-16T18:24:06Z", "type": "forcePushed"}, {"oid": "9e8012c41a69f9337042b56e51221a9e2cfbe786", "url": "https://github.com/eclipse-openj9/openj9/commit/9e8012c41a69f9337042b56e51221a9e2cfbe786", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-16T18:30:44Z", "type": "forcePushed"}, {"oid": "233dccb272866cdf8fb1e36ba7d60fba7409a36e", "url": "https://github.com/eclipse-openj9/openj9/commit/233dccb272866cdf8fb1e36ba7d60fba7409a36e", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-16T18:51:13Z", "type": "forcePushed"}, {"oid": "ea6bc32cc9186654b2b1492c1dda77ca2629c1a7", "url": "https://github.com/eclipse-openj9/openj9/commit/ea6bc32cc9186654b2b1492c1dda77ca2629c1a7", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-17T18:15:25Z", "type": "forcePushed"}, {"oid": "fdf5c0f2c5645e79c938b67104c3d4f1f0195b1e", "url": "https://github.com/eclipse-openj9/openj9/commit/fdf5c0f2c5645e79c938b67104c3d4f1f0195b1e", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-17T19:02:49Z", "type": "forcePushed"}, {"oid": "4fe000d5158d92e35f0489bf811cb24bf5d44471", "url": "https://github.com/eclipse-openj9/openj9/commit/4fe000d5158d92e35f0489bf811cb24bf5d44471", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-21T21:14:58Z", "type": "forcePushed"}, {"oid": "4c8b0545227fe3c7f1cace8da0a5f02eb62c715c", "url": "https://github.com/eclipse-openj9/openj9/commit/4c8b0545227fe3c7f1cace8da0a5f02eb62c715c", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-21T21:18:28Z", "type": "forcePushed"}, {"oid": "1d9d92c70d4955b01f4013fb0d4a3e431ed7a0ed", "url": "https://github.com/eclipse-openj9/openj9/commit/1d9d92c70d4955b01f4013fb0d4a3e431ed7a0ed", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-23T19:24:13Z", "type": "commit"}, {"oid": "1d9d92c70d4955b01f4013fb0d4a3e431ed7a0ed", "url": "https://github.com/eclipse-openj9/openj9/commit/1d9d92c70d4955b01f4013fb0d4a3e431ed7a0ed", "message": "Remove old processor detection code on Power\n\nSummary of changes:\n- Retire old version cpu detection code on Power\n- Move `CPU::getProcessorDescription()` to base J9CPU class as the 3 platforms (X, Z, Power) share the same code. There is no need to have 3 copies\n- Reasons for the removal:\n  - We kept the old version because we wanted to make sure new version and old version give us the same behaviour\n  - Now it's been a few month and we don't see any bugs with the new version there's no reason to keep the old version\n  - Also we want to prevent developers from using the old version.\n\nOld design\n- Initializes the `TR_Processor` struct via j9port library\n  - Initialization occurs in `TR_J9VM::initializeProcessorType()`\n  - obtain cpu information using `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `TR::Compiler->target.cpu.setProcessor` to set processor\n- Fields and methods associated with the old design live in `Class CPU`\n- Common APIs:\n  - `CPU::TO_PORTLIB_getJ9ProcessorDesc()`\n  - `j9sysinfo_processor_has_feature(processorDesc, feature)` (j9port library API)\n  - `CPU::id()`\n  - `CPU::setProcessor(TR_Processor)`\n\nNew design\n- Initializes the `OMRProcessorDesc` struct via omrport library\n  - `CPU::detect()` to initialize `OMRProcessorDesc processorDescription`\n  - `CPU::applyUserOptions()` to apply any debug options after initialization\n  - `TR::Compiler->target.cpu` singleton variable that holds the CPU instance\n  - `comp()->target().cpu` per compilation variable which is used for cross-cpu compilation support\n    - For JIT we initialize `comp()->target().cpu` with `TR::Compiler->target.cpu` (Host CPU)\n    - For AOT we initialize `comp()->target().cpu` with `TR::Compiler->relocatableTarget.cpu` (Portable CPU)\n- Fields and methods associated with the new design live in `Class CPU`\n- Common APIs:\n  - `CPU::supportsFeature(feature)`\n  - `CPU::isAtLeast(OMRProcessorArchitecture)`\n- Benefits:\n  - Common to all 3 platforms\n  - Simpler interface\n  - Cross-CPU compilation support (Use one cpu for AOT and another for JIT)\n- The implementation for the new design is first introduced here https://github.com/eclipse/omr/pull/5197 and https://github.com/eclipse/openj9/pull/9571\n\nissue: https://github.com/eclipse/omr/issues/4339\ndepends on: https://github.com/eclipse/omr/pull/5547\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-09-23T19:24:13Z", "type": "forcePushed"}]}