{"pr_number": 9368, "pr_title": "VM side of synthetic handler fix", "pr_createdAt": "2020-04-24T23:34:09Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9368", "timeline": [{"oid": "9217ed5e7bbbbffce1bf7e9ec59eace9959dde44", "url": "https://github.com/eclipse-openj9/openj9/commit/9217ed5e7bbbbffce1bf7e9ec59eace9959dde44", "message": "VM side of synthetic handler fix\n\nDetails in #9267\n\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-04-25T03:52:10Z", "type": "forcePushed"}, {"oid": "5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "url": "https://github.com/eclipse-openj9/openj9/commit/5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "message": "VM side of synthetic handler fix\n\nDetails in #9267\n\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-04-25T04:31:19Z", "type": "commit"}, {"oid": "5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "url": "https://github.com/eclipse-openj9/openj9/commit/5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "message": "VM side of synthetic handler fix\n\nDetails in #9267\n\nAlso reverts #7340 which was a failed attempt to fix this before we\ncompletely understood the issue.\n\n[ci skip]\n\nSigned-off-by: Graham Chapman <graham_chapman@ca.ibm.com>", "committedDate": "2020-04-25T04:31:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzNzI0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r414937242", "bodyText": "I think this works to zero the structs and makes it easier to reason about the code below.  Same deal for walkState\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tJ9JITDecompileState decompileState;\n          \n          \n            \n            \tJ9JITDecompileState decompileState = {0};", "author": "DanHeidinga", "createdAt": "2020-04-25T00:45:34Z", "path": "runtime/codert_vm/decomp.cpp", "diffHunk": "@@ -1200,12 +1200,45 @@ c_jitDecompileAtExceptionCatch(J9VMThread * currentThread)\n \tU_8 *jitPC = decompRecord->pc;\n \t/* Simulate a call to a resolve helper to make the stack walkable */\n \tbuildBranchJITResolveFrame(currentThread, jitPC, J9_STACK_FLAGS_JIT_EXCEPTION_CATCH_RESOLVE);\n-\t/* Discard the existing decompilation in favour of a new one at the exception catch point */\n+\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9JITDecompileState decompileState;", "originalCommit": "95e0bd8988a67472bb2f58b69a13792cdfa1e3e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExODQ3MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r415118471", "bodyText": "This (and the code below) are both from the revert of the previous attempt. Not sure it's worth changing anything.", "author": "gacholio", "createdAt": "2020-04-25T18:37:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzNzI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExODg0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r415118847", "bodyText": "This certainly isn't a performance critical path, so if you really want the zeroing, I'll do it (I'm just never sure I trust the compiler to optimize this when most/all of the fields get stored anyway).", "author": "gacholio", "createdAt": "2020-04-25T18:39:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzNzI0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEyMDA2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r415120061", "bodyText": "Gac pointed out that this is just code being moved, not new code.", "author": "DanHeidinga", "createdAt": "2020-04-25T18:46:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkzNzI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExNjAyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r415116022", "bodyText": "Are we guaranteed to have an inlineMap even if nothing was inlined here?  Should this assert be moved inside the if?", "author": "DanHeidinga", "createdAt": "2020-04-25T18:23:23Z", "path": "runtime/codert_vm/decomp.cpp", "diffHunk": "@@ -1200,12 +1200,45 @@ c_jitDecompileAtExceptionCatch(J9VMThread * currentThread)\n \tU_8 *jitPC = decompRecord->pc;\n \t/* Simulate a call to a resolve helper to make the stack walkable */\n \tbuildBranchJITResolveFrame(currentThread, jitPC, J9_STACK_FLAGS_JIT_EXCEPTION_CATCH_RESOLVE);\n-\t/* Discard the existing decompilation in favour of a new one at the exception catch point */\n+\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9JITDecompileState decompileState;\n+\tJ9StackWalkState walkState;\n \tJ9OSRBuffer *osrBuffer = &decompRecord->osrBuffer;\n \tUDATA numberOfFrames = osrBuffer->numberOfFrames;\n \tJ9OSRFrame *osrFrame = (J9OSRFrame*)(osrBuffer + 1);\n+\tJ9JITExceptionTable *metaData = NULL;\n+\n+\t/* Collect the required information from the stack - top visible frame is the decompile frame */\n+\twalkState.flags = J9_STACKWALK_ITERATE_FRAMES | J9_STACKWALK_SKIP_INLINES | J9_STACKWALK_VISIBLE_ONLY | J9_STACKWALK_MAINTAIN_REGISTER_MAP | J9_STACKWALK_ITERATE_HIDDEN_JIT_FRAMES | J9_STACKWALK_SAVE_STACKED_REGISTERS;\n+\twalkState.skipCount = 0;\n+\twalkState.frameWalkFunction = decompileMethodFrameIterator;\n+\twalkState.walkThread = currentThread;\n+\twalkState.userData1 = &decompileState;\n+\twalkState.userData2 = NULL;\n+\tvm->walkStackFrames(currentThread, &walkState);\n+\tmetaData = decompileState.metaData;\n+\n+\t/* Determine in which inlined frame the exception is being caught */\n+\tUDATA newNumberOfFrames = 1;\n+\tvoid *stackMap = NULL;\n+\tvoid *inlineMap = NULL;\n+\tvoid *inlinedCallSite = NULL;\n+\t/* Note we need to add 1 to the JIT PC here in order to get the correct map at the exception handler\n+\t * because jitGetMapsFromPC is expecting a return address, so it subtracts 1.  The value stored in the\n+\t * decomp record is the start address of the compiled exception handler.\n+\t */\n+\tjitGetMapsFromPC(vm, metaData, (UDATA)jitPC + 1, &stackMap, &inlineMap);\n+\tAssert_CodertVM_false(NULL == inlineMap);", "originalCommit": "5f1a9c0f33ba905187f66efaea70ab4f01079aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExODM4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r415118389", "bodyText": "This assert has never fired, in testing or production, so I'll say it's correct.", "author": "gacholio", "createdAt": "2020-04-25T18:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExNjAyMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTEyMjA4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9368#discussion_r415122082", "bodyText": "And GAC pointed out above (and I missed):\n\nThe changes in c_jitDecompileAtExceptionCatch are entirely the revert of the previous attempt.", "author": "DanHeidinga", "createdAt": "2020-04-25T18:57:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTExNjAyMg=="}], "type": "inlineReview"}]}