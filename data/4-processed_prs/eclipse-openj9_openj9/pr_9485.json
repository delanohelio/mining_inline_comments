{"pr_number": 9485, "pr_title": "Java 15 Use Unsafe.defineAnonyousClass() to define Hidden classes.", "pr_createdAt": "2020-05-07T16:05:50Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9485", "timeline": [{"oid": "d67743b88a9e9680652405077eca323910119846", "url": "https://github.com/eclipse-openj9/openj9/commit/d67743b88a9e9680652405077eca323910119846", "message": "Java 15 BufferPool class has moved to a different package\n\n[ci skip]\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-05-06T18:26:36Z", "type": "commit"}, {"oid": "4ef53540c99199cbd7f3f397924c16d533f357fe", "url": "https://github.com/eclipse-openj9/openj9/commit/4ef53540c99199cbd7f3f397924c16d533f357fe", "message": "Update Java 15 JVM_ Module functions parameters\n\nRelated to 8242452: During module definition, move conversion of\npackages from native to VM\n\nThe signature of JVM_DefineModule has been modified from `..., const\nchar* const* packages, jsize numPackages` to `..., jobjectArray\npackages`.\n\nAlso the package parameter of following has been modified from char* to\njstring.\nJVM_AddModuleExports\nJVM_AddModuleExportsToAllUnnamed\nJVM_AddModuleExportsToAll\n\nFixes #9293\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-05-06T18:26:38Z", "type": "commit"}, {"oid": "779f063b73d2f8269164c9bd06866669fbe8ec8d", "url": "https://github.com/eclipse-openj9/openj9/commit/779f063b73d2f8269164c9bd06866669fbe8ec8d", "message": "Java 15 - stub in hidden class support\n\n[ci skip]\n\nSigned-off-by: Peter Shipton <Peter_Shipton@ca.ibm.com>", "committedDate": "2020-05-06T18:26:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDQwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r421654403", "bodyText": "Please add extra parentheses here and in similar tests on lines 391 amd 405.", "author": "keithc-ca", "createdAt": "2020-05-07T16:58:49Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -369,7 +369,7 @@ private static boolean isSamePackage(Class<?> a, Class<?> b){\n \t\t}\n \t\t\n \t\tvoid checkAccess(MethodHandle handle, boolean skipAccessCheckPara) throws IllegalAccessException {\n-\t\t\tif (INTERNAL_PRIVILEGED == accessMode) {\n+\t\t\tif (INTERNAL_PRIVILEGED == accessMode || FULL_ACCESS_MASK == accessMode) {", "originalCommit": "171e3665ca4ef2c5da77cafbd7293d9718f22744", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5Nzg4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r421697880", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-05-07T18:11:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDQwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDc4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r421654785", "bodyText": "Please remove the unnecessary initialization.", "author": "keithc-ca", "createdAt": "2020-05-07T16:59:25Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2256,17 +2256,38 @@ public boolean hasFullPrivilegeAccess() {\n \t\t}\n \n \t\tstatic class ClassDefiner {\n-\t\t\tClass<?> defineClass(boolean option) {\n-\t\t\t\treturn null;\n+\t\t\tprivate byte[] classBytes;\n+\t\t\tprivate String className;\n+\t\t\tprivate Lookup lookup;\n+\t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n+\t\t\t\tclassName = name;\n+\t\t\t\tclassBytes = template;\n+\t\t\t\tlookup = lookupObj;\n+\t\t\t}\n+\t\t\tClass<?> defineClass(boolean initOption) {\n+\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, 0, null);\n \t\t\t}\n \t\t}\n \n \t\tpublic Lookup defineHiddenClass(byte[] bytes, boolean initOption, ClassOption... classOptions) {\n-\t\t\treturn null;\n+\t\t\tClassReader cr = null;", "originalCommit": "171e3665ca4ef2c5da77cafbd7293d9718f22744", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5Nzk4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r421697987", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-05-07T18:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NDc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NzMwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r421657301", "bodyText": "The class and all its fields should be final.", "author": "keithc-ca", "createdAt": "2020-05-07T17:03:28Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2256,17 +2256,38 @@ public boolean hasFullPrivilegeAccess() {\n \t\t}\n \n \t\tstatic class ClassDefiner {\n-\t\t\tClass<?> defineClass(boolean option) {\n-\t\t\t\treturn null;\n+\t\t\tprivate byte[] classBytes;\n+\t\t\tprivate String className;\n+\t\t\tprivate Lookup lookup;", "originalCommit": "171e3665ca4ef2c5da77cafbd7293d9718f22744", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5ODA0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r421698044", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-05-07T18:11:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY1NzMwMQ=="}], "type": "inlineReview"}, {"oid": "d819802c70261667a2876cbd9aaa3b0302e2ee3f", "url": "https://github.com/eclipse-openj9/openj9/commit/d819802c70261667a2876cbd9aaa3b0302e2ee3f", "message": "Use Unsafe.defineAnonyousClass() to define Hidden classes.\n\nAdd implementation of new Hidden class APIs to unblock the JDK15 builds.\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-07T18:10:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNTkwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r421705903", "bodyText": "This should be defined in jcl/src/java.base/share/classes/com/ibm/oti/util/ExternalMessages-MasterIndex.properties.", "author": "pshipton", "createdAt": "2020-05-07T18:25:21Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2255,18 +2261,39 @@ public boolean hasFullPrivilegeAccess() {\n \t\t\tSTRONG\n \t\t}\n \n-\t\tstatic class ClassDefiner {\n-\t\t\tClass<?> defineClass(boolean option) {\n-\t\t\t\treturn null;\n+\t\tstatic final class ClassDefiner {\n+\t\t\tprivate final byte[] classBytes;\n+\t\t\tprivate final String className;\n+\t\t\tprivate final Lookup lookup;\n+\t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n+\t\t\t\tclassName = name;\n+\t\t\t\tclassBytes = template;\n+\t\t\t\tlookup = lookupObj;\n+\t\t\t}\n+\t\t\tClass<?> defineClass(boolean initOption) {\n+\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, 0, null);\n \t\t\t}\n \t\t}\n \n \t\tpublic Lookup defineHiddenClass(byte[] bytes, boolean initOption, ClassOption... classOptions) {\n-\t\t\treturn null;\n+\t\t\tClassReader cr;\n+\t\t\ttry {\n+\t\t\t\tcr = new ClassReader(bytes);\n+\t\t\t} catch (ArrayIndexOutOfBoundsException e) {\n+\t\t\t\t/*[MSG \"K065Y2\", \"The class byte array is corrupted\"]*/", "originalCommit": "d819802c70261667a2876cbd9aaa3b0302e2ee3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcxMTYxMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r421711610", "bodyText": "It is already there:\nhttps://github.com/eclipse/openj9/blob/master/jcl/src/java.base/share/classes/com/ibm/oti/util/ExternalMessages-MasterIndex.properties#L407", "author": "hangshao0", "createdAt": "2020-05-07T18:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTcwNTkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3MDUyNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r423470525", "bodyText": "@hangshao0 pls wrap this in an AccessController.doPrivileged() to fix some of the test failures.", "author": "pshipton", "createdAt": "2020-05-12T05:29:47Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2255,18 +2261,39 @@ public boolean hasFullPrivilegeAccess() {\n \t\t\tSTRONG\n \t\t}\n \n-\t\tstatic class ClassDefiner {\n-\t\t\tClass<?> defineClass(boolean option) {\n-\t\t\t\treturn null;\n+\t\tstatic final class ClassDefiner {\n+\t\t\tprivate final byte[] classBytes;\n+\t\t\tprivate final String className;\n+\t\t\tprivate final Lookup lookup;\n+\t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n+\t\t\t\tclassName = name;\n+\t\t\t\tclassBytes = template;\n+\t\t\t\tlookup = lookupObj;\n+\t\t\t}\n+\t\t\tClass<?> defineClass(boolean initOption) {\n+\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, 0, null);", "originalCommit": "d819802c70261667a2876cbd9aaa3b0302e2ee3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2NTg0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r424065842", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-05-12T22:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQ3MDUyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwODIzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r423708230", "bodyText": "Seems adding this is causing a number of test suite failures, even in jdk11.\nhttps://ci.eclipse.org/openj9/job/Test_openjdk11_j9_sanity.functional_s390x_linux_Personal/413", "author": "pshipton", "createdAt": "2020-05-12T12:53:39Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -369,7 +369,9 @@ private static boolean isSamePackage(Class<?> a, Class<?> b){\n \t\t}\n \t\t\n \t\tvoid checkAccess(MethodHandle handle, boolean skipAccessCheckPara) throws IllegalAccessException {\n-\t\t\tif (INTERNAL_PRIVILEGED == accessMode) {\n+\t\t\tif ((INTERNAL_PRIVILEGED == accessMode)\n+\t\t\t\t|| (FULL_ACCESS_MASK == accessMode)", "originalCommit": "d819802c70261667a2876cbd9aaa3b0302e2ee3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2NDI3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r423864270", "bodyText": "I added this line because OpenJ9 is throwing IllegalAccessException with message \"K0587\". The new Java 15 code from InnerClassLambdaMetafactory is passing in accessMode FULL_ACCESS_MASK. It is calling from findConstructor().", "author": "hangshao0", "createdAt": "2020-05-12T16:19:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwODIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MjQ5OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r423952498", "bodyText": "OK, I seem to know what is going on. definingClass should be made nestmate of accessClass which is missing here.", "author": "hangshao0", "createdAt": "2020-05-12T18:40:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwODIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2ODc3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r424068770", "bodyText": "I have removed the checks for FULL_ACCESS_MASK.\nI don't find an existing APIs (Java or native) that could let me make a class to be nestmate of another class. So I have changed the native implementation of getNestHost() to return the nesthost of the loopup class for hidden classes (which is defined by Unsafe.defineAnonyousClass()).\nI am able to build Java 15 with the current change.", "author": "hangshao0", "createdAt": "2020-05-12T22:25:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwODIzMA=="}], "type": "inlineReview"}, {"oid": "f4f8499a80154cdab447f1a798c01781a2f91452", "url": "https://github.com/eclipse-openj9/openj9/commit/f4f8499a80154cdab447f1a798c01781a2f91452", "message": "Use Unsafe.defineAnonyousClass() to define Hidden classes.\n\nAdd implementation of new Hidden class APIs to unblock the JDK15 builds.\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-12T22:16:06Z", "type": "forcePushed"}, {"oid": "dab142323c228b28f3ff65915c6af38a1962cb9c", "url": "https://github.com/eclipse-openj9/openj9/commit/dab142323c228b28f3ff65915c6af38a1962cb9c", "message": "Use Unsafe.defineAnonyousClass() to define Hidden classes.\n\nAdd implementation of new Hidden class APIs to unblock the JDK15 builds.\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-12T22:28:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MzQ3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r424563474", "bodyText": "This local could be pushed before, and reused in, the declaration of vmFuncs.", "author": "keithc-ca", "createdAt": "2020-05-13T16:15:34Z", "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1805,13 +1805,26 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \tJ9Class *nestHost = clazz->nestHost;\n \n \tif (NULL == nestHost) {\n-\t\tif (J9_VISIBILITY_ALLOWED == vmFuncs->loadAndVerifyNestHost(currentThread, clazz, J9_LOOK_NO_THROW)) {\n-\t\t\tnestHost = clazz->nestHost;\n+\t\tJ9Class *clazzToUse = clazz;\n+\t\tJ9JavaVM *vm = currentThread->javaVM;", "originalCommit": "dab142323c228b28f3ff65915c6af38a1962cb9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MTAzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r424641031", "bodyText": "Changed the code to use #if JAVA_SPEC_VERSION >= 15. There is no need to have this local variable vm anymore.", "author": "hangshao0", "createdAt": "2020-05-13T18:21:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2MzQ3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NzM5Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r424567396", "bodyText": "Why not #if JAVA_SPEC_VERSION >= 15 instead of runtime check?", "author": "keithc-ca", "createdAt": "2020-05-13T16:21:34Z", "path": "runtime/jcl/common/java_lang_Class.cpp", "diffHunk": "@@ -1805,13 +1805,26 @@ Java_java_lang_Class_getNestHostImpl(JNIEnv *env, jobject recv)\n \tJ9Class *nestHost = clazz->nestHost;\n \n \tif (NULL == nestHost) {\n-\t\tif (J9_VISIBILITY_ALLOWED == vmFuncs->loadAndVerifyNestHost(currentThread, clazz, J9_LOOK_NO_THROW)) {\n-\t\t\tnestHost = clazz->nestHost;\n+\t\tJ9Class *clazzToUse = clazz;\n+\t\tJ9JavaVM *vm = currentThread->javaVM;\n+\t\tif (J2SE_VERSION(vm) >= J2SE_V15) {", "originalCommit": "dab142323c228b28f3ff65915c6af38a1962cb9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDY0MDAyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r424640020", "bodyText": "I've changed the code to use #if JAVA_SPEC_VERSION >= 15", "author": "hangshao0", "createdAt": "2020-05-13T18:19:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU2NzM5Ng=="}], "type": "inlineReview"}, {"oid": "9d734583e83f1df12e0c082b1200ecc0aae06877", "url": "https://github.com/eclipse-openj9/openj9/commit/9d734583e83f1df12e0c082b1200ecc0aae06877", "message": "Use Unsafe.defineAnonyousClass() to define Hidden classes.\n\nAdd implementation of new Hidden class APIs to unblock the JDK15 builds.\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-13T18:17:28Z", "type": "commit"}, {"oid": "9d734583e83f1df12e0c082b1200ecc0aae06877", "url": "https://github.com/eclipse-openj9/openj9/commit/9d734583e83f1df12e0c082b1200ecc0aae06877", "message": "Use Unsafe.defineAnonyousClass() to define Hidden classes.\n\nAdd implementation of new Hidden class APIs to unblock the JDK15 builds.\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-13T18:17:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5MzYwNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425193607", "bodyText": "This needs javadoc", "author": "DanHeidinga", "createdAt": "2020-05-14T14:45:06Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2245,7 +2246,57 @@ public boolean hasFullPrivilegeAccess() {\n \t\t\treturn (!isWeakenedLookup() && (MODULE == (accessMode & MODULE)));\n \t\t}\n \t\t/*[ENDIF] Java14*/\n-\t\t/*[ENDIF]*/\n+\t\t/*[ENDIF] Sidecar19-SE */\n+\t\t\n+\t\t/*[IF Java15]*/\n+\t\t// TODO: implement support for hidden classes.\n+\n+\t\tpublic enum ClassOption {", "originalCommit": "9d734583e83f1df12e0c082b1200ecc0aae06877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwODM5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425408397", "bodyText": "Javadoc added.", "author": "hangshao0", "createdAt": "2020-05-14T20:23:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5MzYwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5MzcxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425193713", "bodyText": "this needs javadoc", "author": "DanHeidinga", "createdAt": "2020-05-14T14:45:15Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2245,7 +2246,57 @@ public boolean hasFullPrivilegeAccess() {\n \t\t\treturn (!isWeakenedLookup() && (MODULE == (accessMode & MODULE)));\n \t\t}\n \t\t/*[ENDIF] Java14*/\n-\t\t/*[ENDIF]*/\n+\t\t/*[ENDIF] Sidecar19-SE */\n+\t\t\n+\t\t/*[IF Java15]*/\n+\t\t// TODO: implement support for hidden classes.\n+\n+\t\tpublic enum ClassOption {\n+\t\t\tNESTMATE,\n+\t\t\tSTRONG\n+\t\t}\n+\n+\t\tstatic final class ClassDefiner {\n+\t\t\tprivate final byte[] classBytes;\n+\t\t\tprivate final String className;\n+\t\t\tprivate final Lookup lookup;\n+\t\t\tClassDefiner(String name, byte[] template, Lookup lookupObj) {\n+\t\t\t\tclassName = name;\n+\t\t\t\tclassBytes = template;\n+\t\t\t\tlookup = lookupObj;\n+\t\t\t}\n+\t\t\tClass<?> defineClass(boolean initOption) {\n+\t\t\t\tClass<?> ret = AccessController.doPrivileged(new PrivilegedAction<Class<?>>() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic Class<?> run() {\n+\t\t\t\t\t\tJavaLangAccess jlAccess = SharedSecrets.getJavaLangAccess();\n+\t\t\t\t\t\tClass<?> lookupClass = lookup.lookupClass();\n+\t\t\t\t\t\treturn jlAccess.defineClass(lookupClass.getClassLoader(), lookupClass, className, classBytes, jlAccess.protectionDomain(lookupClass), initOption, 0, null);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\treturn ret;\n+\t\t\t}\n+\t\t}\n+\n+\t\tpublic Lookup defineHiddenClass(byte[] bytes, boolean initOption, ClassOption... classOptions) {", "originalCommit": "9d734583e83f1df12e0c082b1200ecc0aae06877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5NTI3MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425195271", "bodyText": "And I assume classOptions will be used later in the complete implementation?", "author": "DanHeidinga", "createdAt": "2020-05-14T14:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5MzcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwODkwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425408902", "bodyText": "Javadoc added.\n\nclassOptions will be used later in the complete implementation?\n\nYes.", "author": "hangshao0", "createdAt": "2020-05-14T20:24:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5MzcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzMzQ1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425233451", "bodyText": "isCopy is an output parameter.  This code needs to handle the case where the string isn't a copy", "author": "DanHeidinga", "createdAt": "2020-05-14T15:37:17Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -710,18 +730,80 @@ allowReadAccessToModule(J9VMThread * currentThread, J9Module * fromModule, J9Mod\n  * @return If successful, returns a java.lang.reflect.Module object. Otherwise, returns NULL.\n  */\n jobject JNICALL\n+#if JAVA_SPEC_VERSION >= 15\n+JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, jobjectArray packageArray)\n+#else\n JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, const char* const* packages, jsize numPackages)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM * vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tBOOLEAN oom = FALSE;\n+\tBOOLEAN nullPackage = FALSE;\n+\tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n+\tconst char* * packages = (const char* *)j9mem_allocate_memory(packagesNumBytes, OMRMEM_CATEGORY_VM);\n+\tif ((*env)->ExceptionCheck(env)) {\n+\t\tgoto cleanup;\n+\t}\n+\n+\tif (NULL != packages) {\n+\t\tjsize pkgIndex = 0;\n+\t\tmemset((void *)packages, 0, packagesNumBytes);\n+\t\tfor (pkgIndex = 0; pkgIndex < numPackages; pkgIndex++) {\n+\t\t\tjobject packageObj = (*env)->GetObjectArrayElement(env, packageArray, pkgIndex);\n+\t\t\tif ((*env)->ExceptionCheck(env)) {\n+\t\t\t\tAssert_SC_unreachable();\n+\t\t\t\tgoto cleanup;\n+\t\t\t}\n+\t\t\tif (NULL != packageObj) {\n+\t\t\t\tjboolean isCopy = JNI_FALSE;\n+\t\t\t\tconst char* packageName = (*env)->GetStringUTFChars(env, packageObj, &isCopy);\n+\t\t\t\t(*env)->DeleteLocalRef(env, packageObj);\n+\n+\t\t\t\tif (NULL == packageName) {\n+\t\t\t\t\toom = TRUE;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tif (JNI_FALSE == isCopy) {", "originalCommit": "9d734583e83f1df12e0c082b1200ecc0aae06877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwOTUyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425409527", "bodyText": "Updated to use copyStringToUTF8Helper(). isCopy is removed.", "author": "hangshao0", "createdAt": "2020-05-14T20:25:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIzMzQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MzQ2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425243469", "bodyText": "It would be more efficient to get vm access earlier and do this with VM calls rather than JNI.  It would also remove the need to assert on the isCopy above by using the copyStringToUTF8Helper helper", "author": "DanHeidinga", "createdAt": "2020-05-14T15:50:47Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -710,18 +730,80 @@ allowReadAccessToModule(J9VMThread * currentThread, J9Module * fromModule, J9Mod\n  * @return If successful, returns a java.lang.reflect.Module object. Otherwise, returns NULL.\n  */\n jobject JNICALL\n+#if JAVA_SPEC_VERSION >= 15\n+JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, jobjectArray packageArray)\n+#else\n JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, const char* const* packages, jsize numPackages)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM * vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tBOOLEAN oom = FALSE;\n+\tBOOLEAN nullPackage = FALSE;\n+\tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n+\tconst char* * packages = (const char* *)j9mem_allocate_memory(packagesNumBytes, OMRMEM_CATEGORY_VM);\n+\tif ((*env)->ExceptionCheck(env)) {\n+\t\tgoto cleanup;\n+\t}\n+\n+\tif (NULL != packages) {\n+\t\tjsize pkgIndex = 0;\n+\t\tmemset((void *)packages, 0, packagesNumBytes);\n+\t\tfor (pkgIndex = 0; pkgIndex < numPackages; pkgIndex++) {\n+\t\t\tjobject packageObj = (*env)->GetObjectArrayElement(env, packageArray, pkgIndex);\n+\t\t\tif ((*env)->ExceptionCheck(env)) {\n+\t\t\t\tAssert_SC_unreachable();\n+\t\t\t\tgoto cleanup;\n+\t\t\t}\n+\t\t\tif (NULL != packageObj) {\n+\t\t\t\tjboolean isCopy = JNI_FALSE;\n+\t\t\t\tconst char* packageName = (*env)->GetStringUTFChars(env, packageObj, &isCopy);\n+\t\t\t\t(*env)->DeleteLocalRef(env, packageObj);\n+\n+\t\t\t\tif (NULL == packageName) {\n+\t\t\t\t\toom = TRUE;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tif (JNI_FALSE == isCopy) {\n+\t\t\t\t\tAssert_SC_unreachable();\n+\t\t\t\t\tgoto cleanup;\n+\t\t\t\t}\n+\t\t\t\tconvertPackageName((char*)packageName);", "originalCommit": "9d734583e83f1df12e0c082b1200ecc0aae06877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwOTcwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425409701", "bodyText": "Updated to use copyStringToUTF8Helper().", "author": "hangshao0", "createdAt": "2020-05-14T20:26:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MzQ2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MzkwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425243905", "bodyText": "same here - keep vm access and use the vm helpers rather than JNI", "author": "DanHeidinga", "createdAt": "2020-05-14T15:51:23Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -851,6 +933,29 @@ JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version,\n #endif /* defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY) */\n \tvmFuncs->internalExitVMToJNI(currentThread);\n \n+#if JAVA_SPEC_VERSION >= 15\n+cleanup:\n+\tif (NULL != packages) {\n+\t\tjsize pkgIndex = 0;\n+\t\tfor (pkgIndex = 0; pkgIndex < numPackages; pkgIndex++) {\n+\t\t\tjobject packageObj = NULL;\n+\t\t\tconst char* packageName = packages[pkgIndex];\n+\t\t\tif (NULL == packageName) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n+\t\t\tpackageObj = (*env)->GetObjectArrayElement(env, packageArray, pkgIndex);\n+\t\t\tif ((*env)->ExceptionCheck(env)) {\n+\t\t\t\tAssert_SC_unreachable();\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\t(*env)->ReleaseStringUTFChars(env, packageObj, packageName);\n+\t\t\t(*env)->DeleteLocalRef(env, packageObj);", "originalCommit": "9d734583e83f1df12e0c082b1200ecc0aae06877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQwOTk2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425409960", "bodyText": "Updated to use copyStringToUTF8Helper().", "author": "hangshao0", "createdAt": "2020-05-14T20:26:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0MzkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NDM4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425244380", "bodyText": "This should also move after getting vm access and use the copyStringToUTF8Helper helper.  Note, there's an J9_STR_XLAT flag that does the . -> / conversion", "author": "DanHeidinga", "createdAt": "2020-05-14T15:52:02Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -866,19 +971,46 @@ JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version,\n  * 4) Package is not defined for fromModule's class loader\n  * 5) Package is not in module fromModule.\n  */\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL\n+JVM_AddModuleExports(JNIEnv * env, jobject fromModule, jstring packageObj, jobject toModule)\n+#else\n void JNICALL\n JVM_AddModuleExports(JNIEnv * env, jobject fromModule, const char *package, jobject toModule)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM const * const vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tjboolean isCopy = JNI_FALSE;\n+\tconst char* package = (NULL == packageObj) ? NULL : (*env)->GetStringUTFChars(env, packageObj, &isCopy);\n+\tif ((NULL != package) && (JNI_FALSE == isCopy)) {", "originalCommit": "9d734583e83f1df12e0c082b1200ecc0aae06877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMDA0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425410048", "bodyText": "Updated to use copyStringToUTF8Helper().", "author": "hangshao0", "createdAt": "2020-05-14T20:26:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NDM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NTU2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425245563", "bodyText": "same here as well", "author": "DanHeidinga", "createdAt": "2020-05-14T15:53:38Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -913,19 +1056,46 @@ JVM_AddModuleExports(JNIEnv * env, jobject fromModule, const char *package, jobj\n  * 3) Package is not defined for fromModule's class loader\n  * 4) Package is not in module fromModule.\n  */\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL\n+JVM_AddModuleExportsToAll(JNIEnv * env, jobject fromModule, jstring packageObj)\n+#else\n void JNICALL\n JVM_AddModuleExportsToAll(JNIEnv * env, jobject fromModule, const char *package)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM const * const vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tjboolean isCopy = JNI_FALSE;\n+\tconst char* package = (NULL == packageObj) ? NULL : (*env)->GetStringUTFChars(env, packageObj, &isCopy);\n+\tif ((NULL != package) && (JNI_FALSE == isCopy)) {", "originalCommit": "9d734583e83f1df12e0c082b1200ecc0aae06877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMDA5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425410099", "bodyText": "Updated to use copyStringToUTF8Helper().", "author": "hangshao0", "createdAt": "2020-05-14T20:27:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NTU2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NTc2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425245764", "bodyText": "and here", "author": "DanHeidinga", "createdAt": "2020-05-14T15:53:55Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -1142,19 +1323,46 @@ JVM_AddModulePackage(JNIEnv * env, jobject module, const char *package)\n  * 2) module is unnamed or\n  * 3) package is not in module\n  */\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL\n+JVM_AddModuleExportsToAllUnnamed(JNIEnv * env, jobject fromModule, jstring packageObj)\n+#else\n void JNICALL\n JVM_AddModuleExportsToAllUnnamed(JNIEnv * env, jobject fromModule, const char *package)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM const * const vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tjboolean isCopy = JNI_FALSE;\n+\tconst char* package = (NULL == packageObj) ? NULL : (*env)->GetStringUTFChars(env, packageObj, &isCopy);", "originalCommit": "9d734583e83f1df12e0c082b1200ecc0aae06877", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQxMDE0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425410145", "bodyText": "Updated to use copyStringToUTF8Helper().", "author": "hangshao0", "createdAt": "2020-05-14T20:27:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI0NTc2NA=="}], "type": "inlineReview"}, {"oid": "7409156e38579e03b0c51dda66d6e9d2921321c7", "url": "https://github.com/eclipse-openj9/openj9/commit/7409156e38579e03b0c51dda66d6e9d2921321c7", "message": "Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-14T20:19:11Z", "type": "forcePushed"}, {"oid": "b82465308095552ffedab48004b09f1900cc9dcd", "url": "https://github.com/eclipse-openj9/openj9/commit/b82465308095552ffedab48004b09f1900cc9dcd", "message": "Add Javadoc to ClassOption and defineHiddenClass()\nUse copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-14T20:21:26Z", "type": "forcePushed"}, {"oid": "daf4400f83b6f2780731f9af44285689cf8c4876", "url": "https://github.com/eclipse-openj9/openj9/commit/daf4400f83b6f2780731f9af44285689cf8c4876", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-14T20:22:37Z", "type": "forcePushed"}, {"oid": "ffb52617650a012067b2a96d8c9d4e6eb6561e24", "url": "https://github.com/eclipse-openj9/openj9/commit/ffb52617650a012067b2a96d8c9d4e6eb6561e24", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-14T20:35:20Z", "type": "forcePushed"}, {"oid": "01a489f2e358482ffcfacd7d9a39f53f94a33c7f", "url": "https://github.com/eclipse-openj9/openj9/commit/01a489f2e358482ffcfacd7d9a39f53f94a33c7f", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-14T20:39:45Z", "type": "forcePushed"}, {"oid": "e3fe7d852f049455738ba053681d498f5d411d92", "url": "https://github.com/eclipse-openj9/openj9/commit/e3fe7d852f049455738ba053681d498f5d411d92", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-14T20:59:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0NDk3Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425444977", "bodyText": "See #9292 (comment): using JNI after calling internalEnterVMFromJNI() is not legal.", "author": "keithc-ca", "createdAt": "2020-05-14T21:36:02Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -710,18 +711,79 @@ allowReadAccessToModule(J9VMThread * currentThread, J9Module * fromModule, J9Mod\n  * @return If successful, returns a java.lang.reflect.Module object. Otherwise, returns NULL.\n  */\n jobject JNICALL\n+#if JAVA_SPEC_VERSION >= 15\n+JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, jobjectArray packageArray)\n+#else\n JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, const char* const* packages, jsize numPackages)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM * vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tBOOLEAN oom = FALSE;\n+\tBOOLEAN nullPackage = FALSE;\n+\tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n+\tconst char** packages = NULL;\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n \n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n #if defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY)\n \tomrthread_monitor_enter(vm->classLoaderModuleAndLocationMutex);\n #else\n \tf_monitorEnter(vm->classLoaderModuleAndLocationMutex);\n #endif /* defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY) */\n+\n+#if JAVA_SPEC_VERSION >= 15\n+\tif ((*env)->ExceptionCheck(env)) {\n+\t\tgoto done;\n+\t}\n+\tpackages = (const char**)j9mem_allocate_memory(packagesNumBytes, OMRMEM_CATEGORY_VM);\n+\tif (NULL != packages) {\n+\t\tjsize pkgIndex = 0;\n+\t\tmemset((void *)packages, 0, packagesNumBytes);\n+\t\tfor (pkgIndex = 0; pkgIndex < numPackages; pkgIndex++) {\n+\t\t\tjobject packageObj = (*env)->GetObjectArrayElement(env, packageArray, pkgIndex);\n+\t\t\tif ((*env)->ExceptionCheck(env)) {\n+\t\t\t\t(*env)->DeleteLocalRef(env, packageObj);", "originalCommit": "e3fe7d852f049455738ba053681d498f5d411d92", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ2ODkzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r425468932", "bodyText": "Removed these JNI calls.", "author": "hangshao0", "createdAt": "2020-05-14T22:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ0NDk3Nw=="}], "type": "inlineReview"}, {"oid": "c7af4815342fbca844bbfb7502dd257c016ac0c1", "url": "https://github.com/eclipse-openj9/openj9/commit/c7af4815342fbca844bbfb7502dd257c016ac0c1", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-14T21:44:02Z", "type": "forcePushed"}, {"oid": "ce8f59bf90dbe10c1ddde6ff4793219870280a69", "url": "https://github.com/eclipse-openj9/openj9/commit/ce8f59bf90dbe10c1ddde6ff4793219870280a69", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-14T22:31:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4MzQ5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r427983495", "bodyText": "Define the variables here and give them safe default values.  Leave the real values until we have vm access below\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if JAVA_SPEC_VERSION >= 15\n          \n          \n            \n            \tBOOLEAN oom = FALSE;\n          \n          \n            \n            \tBOOLEAN nullPackage = FALSE;\n          \n          \n            \n            \tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n          \n          \n            \n            \tPORT_ACCESS_FROM_ENV(env);\n          \n          \n            \n            \tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n          \n          \n            \n            \tconst char** packages = NULL;\n          \n          \n            \n            \tif ((*env)->ExceptionCheck(env)) {\n          \n          \n            \n            \t\treturn module;\n          \n          \n            \n            \t}\n          \n          \n            \n            #endif /* JAVA_SPEC_VERSION >= 15 */\n          \n          \n            \n            #if JAVA_SPEC_VERSION >= 15\n          \n          \n            \n            \tBOOLEAN oom = FALSE;\n          \n          \n            \n            \tBOOLEAN nullPackage = FALSE;\n          \n          \n            \n            \tjsize numPackages = 0;\n          \n          \n            \n            \tUDATA packagesNumBytes = 0;\n          \n          \n            \n            \tconst char** packages = NULL;\n          \n          \n            \n            \tPORT_ACCESS_FROM_ENV(env);\n          \n          \n            \n            #endif /* JAVA_SPEC_VERSION >= 15 */", "author": "DanHeidinga", "createdAt": "2020-05-20T12:52:33Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -710,18 +711,72 @@ allowReadAccessToModule(J9VMThread * currentThread, J9Module * fromModule, J9Mod\n  * @return If successful, returns a java.lang.reflect.Module object. Otherwise, returns NULL.\n  */\n jobject JNICALL\n+#if JAVA_SPEC_VERSION >= 15\n+JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, jobjectArray packageArray)\n+#else\n JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, const char* const* packages, jsize numPackages)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM * vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tBOOLEAN oom = FALSE;\n+\tBOOLEAN nullPackage = FALSE;\n+\tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n+\tconst char** packages = NULL;\n+\tif ((*env)->ExceptionCheck(env)) {\n+\t\treturn module;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 15 */", "originalCommit": "ce8f59bf90dbe10c1ddde6ff4793219870280a69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExMTk2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r428111965", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-05-20T15:37:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4MzQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4NDcxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r427984711", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            #if JAVA_SPEC_VERSION >= 15\n          \n          \n            \n            \tpackages = (const char**)j9mem_allocate_memory(packagesNumBytes, OMRMEM_CATEGORY_VM);\n          \n          \n            \n            #if JAVA_SPEC_VERSION >= 15\n          \n          \n            \n            \tif (NULL != packageArray) {\n          \n          \n            \n            \t\tnumPackages = J9INDEXABLEOBJECT_SIZE(currentThread, J9_JNI_UNWRAP_REFERENCE (packageArray));\n          \n          \n            \n            \t\tpackagesNumBytes = sizeof(char*) * numPackages;\n          \n          \n            \n            \t}\n          \n          \n            \n            \tpackages = (const char**)j9mem_allocate_memory(packagesNumBytes, OMRMEM_CATEGORY_VM);", "author": "DanHeidinga", "createdAt": "2020-05-20T12:54:20Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -710,18 +711,72 @@ allowReadAccessToModule(J9VMThread * currentThread, J9Module * fromModule, J9Mod\n  * @return If successful, returns a java.lang.reflect.Module object. Otherwise, returns NULL.\n  */\n jobject JNICALL\n+#if JAVA_SPEC_VERSION >= 15\n+JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, jobjectArray packageArray)\n+#else\n JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, const char* const* packages, jsize numPackages)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM * vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tBOOLEAN oom = FALSE;\n+\tBOOLEAN nullPackage = FALSE;\n+\tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n+\tconst char** packages = NULL;\n+\tif ((*env)->ExceptionCheck(env)) {\n+\t\treturn module;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n \n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n #if defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY)\n \tomrthread_monitor_enter(vm->classLoaderModuleAndLocationMutex);\n #else\n \tf_monitorEnter(vm->classLoaderModuleAndLocationMutex);\n #endif /* defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY) */\n+\n+#if JAVA_SPEC_VERSION >= 15\n+\tpackages = (const char**)j9mem_allocate_memory(packagesNumBytes, OMRMEM_CATEGORY_VM);", "originalCommit": "ce8f59bf90dbe10c1ddde6ff4793219870280a69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4NTAxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r427985016", "bodyText": "This saves getting and dropping vm access multiple times - array length and exception check", "author": "DanHeidinga", "createdAt": "2020-05-20T12:54:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4NDcxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNTU3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r428115576", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-05-20T15:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4NDcxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4NzcxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r427987714", "bodyText": "There's a future optimization here to avoid the allocation and use a stack allocated array for a small number of packages.  Probably worth opening a separate issue for that.", "author": "DanHeidinga", "createdAt": "2020-05-20T12:58:26Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -710,18 +711,72 @@ allowReadAccessToModule(J9VMThread * currentThread, J9Module * fromModule, J9Mod\n  * @return If successful, returns a java.lang.reflect.Module object. Otherwise, returns NULL.\n  */\n jobject JNICALL\n+#if JAVA_SPEC_VERSION >= 15\n+JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, jobjectArray packageArray)\n+#else\n JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, const char* const* packages, jsize numPackages)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM * vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tBOOLEAN oom = FALSE;\n+\tBOOLEAN nullPackage = FALSE;\n+\tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n+\tconst char** packages = NULL;", "originalCommit": "ce8f59bf90dbe10c1ddde6ff4793219870280a69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExMjY1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r428112655", "bodyText": "Yes, I will open a separate issue once this piece of code is merged.", "author": "hangshao0", "createdAt": "2020-05-20T15:38:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4NzcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4OTgzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r427989830", "bodyText": "Can this check be moved earlier?  It seems like we do a != NULL check earlier that can be commoned with this", "author": "DanHeidinga", "createdAt": "2020-05-20T13:01:22Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -710,18 +711,72 @@ allowReadAccessToModule(J9VMThread * currentThread, J9Module * fromModule, J9Mod\n  * @return If successful, returns a java.lang.reflect.Module object. Otherwise, returns NULL.\n  */\n jobject JNICALL\n+#if JAVA_SPEC_VERSION >= 15\n+JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, jobjectArray packageArray)\n+#else\n JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, const char* const* packages, jsize numPackages)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM * vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tBOOLEAN oom = FALSE;\n+\tBOOLEAN nullPackage = FALSE;\n+\tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n+\tconst char** packages = NULL;\n+\tif ((*env)->ExceptionCheck(env)) {\n+\t\treturn module;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n \n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n #if defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY)\n \tomrthread_monitor_enter(vm->classLoaderModuleAndLocationMutex);\n #else\n \tf_monitorEnter(vm->classLoaderModuleAndLocationMutex);\n #endif /* defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY) */\n+\n+#if JAVA_SPEC_VERSION >= 15\n+\tpackages = (const char**)j9mem_allocate_memory(packagesNumBytes, OMRMEM_CATEGORY_VM);\n+\tif (NULL != packages) {\n+\t\tjsize pkgIndex = 0;\n+\t\tmemset((void *)packages, 0, packagesNumBytes);\n+\t\tfor (pkgIndex = 0; pkgIndex < numPackages; pkgIndex++) {\n+\t\t\tj9array_t array = (j9array_t)J9_JNI_UNWRAP_REFERENCE(packageArray);\n+\t\t\tj9object_t stringObject = J9JAVAARRAYOFOBJECT_LOAD(currentThread, array, pkgIndex);\n+\t\t\tif (NULL != stringObject) {\n+\t\t\t\tUDATA utfLength = vmFuncs->getStringUTF8Length(currentThread, stringObject) + 1;\n+\t\t\t\tchar *packageName = (char*)j9mem_allocate_memory(utfLength, OMRMEM_CATEGORY_VM);\n+\t\t\t\tif (NULL == packageName) {\n+\t\t\t\t\toom = TRUE;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tvmFuncs->copyStringToUTF8Helper(currentThread, stringObject, J9_STR_NULL_TERMINATE_RESULT | J9_STR_XLAT , 0, J9VMJAVALANGSTRING_LENGTH(currentThread, stringObject), packageName, utfLength);\n+\t\t\t\tpackages[pkgIndex] = packageName;\n+\t\t\t} else {\n+\t\t\t\tnullPackage = TRUE;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tif (NULL == packageArray) {", "originalCommit": "ce8f59bf90dbe10c1ddde6ff4793219870280a69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExMzA4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r428113082", "bodyText": "Yes, it can be moved earlier. Done.", "author": "hangshao0", "createdAt": "2020-05-20T15:39:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk4OTgzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MTA0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r427991041", "bodyText": "Is the nullPackage variable needed?  Can the exception setting code be moved here and then the code could goto directly the cleanup label?\nIt means there's one less piece of state to keep straight", "author": "DanHeidinga", "createdAt": "2020-05-20T13:03:05Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -710,18 +711,72 @@ allowReadAccessToModule(J9VMThread * currentThread, J9Module * fromModule, J9Mod\n  * @return If successful, returns a java.lang.reflect.Module object. Otherwise, returns NULL.\n  */\n jobject JNICALL\n+#if JAVA_SPEC_VERSION >= 15\n+JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, jobjectArray packageArray)\n+#else\n JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version, jstring location, const char* const* packages, jsize numPackages)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM * vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tBOOLEAN oom = FALSE;\n+\tBOOLEAN nullPackage = FALSE;\n+\tjsize numPackages = (NULL == packageArray) ? 0 : (*env)->GetArrayLength(env, packageArray);\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tUDATA packagesNumBytes = sizeof(char*) * numPackages;\n+\tconst char** packages = NULL;\n+\tif ((*env)->ExceptionCheck(env)) {\n+\t\treturn module;\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n \n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n #if defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY)\n \tomrthread_monitor_enter(vm->classLoaderModuleAndLocationMutex);\n #else\n \tf_monitorEnter(vm->classLoaderModuleAndLocationMutex);\n #endif /* defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY) */\n+\n+#if JAVA_SPEC_VERSION >= 15\n+\tpackages = (const char**)j9mem_allocate_memory(packagesNumBytes, OMRMEM_CATEGORY_VM);\n+\tif (NULL != packages) {\n+\t\tjsize pkgIndex = 0;\n+\t\tmemset((void *)packages, 0, packagesNumBytes);\n+\t\tfor (pkgIndex = 0; pkgIndex < numPackages; pkgIndex++) {\n+\t\t\tj9array_t array = (j9array_t)J9_JNI_UNWRAP_REFERENCE(packageArray);\n+\t\t\tj9object_t stringObject = J9JAVAARRAYOFOBJECT_LOAD(currentThread, array, pkgIndex);\n+\t\t\tif (NULL != stringObject) {\n+\t\t\t\tUDATA utfLength = vmFuncs->getStringUTF8Length(currentThread, stringObject) + 1;\n+\t\t\t\tchar *packageName = (char*)j9mem_allocate_memory(utfLength, OMRMEM_CATEGORY_VM);\n+\t\t\t\tif (NULL == packageName) {\n+\t\t\t\t\toom = TRUE;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t\tvmFuncs->copyStringToUTF8Helper(currentThread, stringObject, J9_STR_NULL_TERMINATE_RESULT | J9_STR_XLAT , 0, J9VMJAVALANGSTRING_LENGTH(currentThread, stringObject), packageName, utfLength);\n+\t\t\t\tpackages[pkgIndex] = packageName;\n+\t\t\t} else {\n+\t\t\t\tnullPackage = TRUE;", "originalCommit": "ce8f59bf90dbe10c1ddde6ff4793219870280a69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExMzkwNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r428113907", "bodyText": "Removed variable nullPackage and moved the exception setting here.", "author": "hangshao0", "createdAt": "2020-05-20T15:40:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MTA0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MTk2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r427991968", "bodyText": "similar potential optimization here by keeping a small stack allocated buffer to avoid the malloc", "author": "DanHeidinga", "createdAt": "2020-05-20T13:04:27Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -866,19 +932,46 @@ JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version,\n  * 4) Package is not defined for fromModule's class loader\n  * 5) Package is not in module fromModule.\n  */\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL\n+JVM_AddModuleExports(JNIEnv * env, jobject fromModule, jstring packageObj, jobject toModule)\n+#else\n void JNICALL\n JVM_AddModuleExports(JNIEnv * env, jobject fromModule, const char *package, jobject toModule)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n \tJ9VMThread * const currentThread = (J9VMThread*)env;\n \tJ9JavaVM const * const vm = currentThread->javaVM;\n \tJ9InternalVMFunctions const * const vmFuncs = vm->internalVMFunctions;\n+#if JAVA_SPEC_VERSION >= 15\n+\tconst char *package = NULL;\n+\tPORT_ACCESS_FROM_ENV(env);\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n \n \tvmFuncs->internalEnterVMFromJNI(currentThread);\n #if defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY)\n \tomrthread_monitor_enter(vm->classLoaderModuleAndLocationMutex);\n #else\n \tf_monitorEnter(vm->classLoaderModuleAndLocationMutex);\n #endif /* defined(CALL_BUNDLED_FUNCTIONS_DIRECTLY) */\n+\t\n+#if JAVA_SPEC_VERSION >= 15\n+\tif (NULL != packageObj) {\n+\t\tj9object_t stringObject = J9_JNI_UNWRAP_REFERENCE(packageObj);\n+\t\tUDATA utfLength = vmFuncs->getStringUTF8Length(currentThread, stringObject) + 1;\n+\t\tchar* packageName = (char *)j9mem_allocate_memory(utfLength, OMRMEM_CATEGORY_VM);", "originalCommit": "ce8f59bf90dbe10c1ddde6ff4793219870280a69", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODExNDI3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r428114273", "bodyText": "Will open a separate issue once this piece of code is merged.", "author": "hangshao0", "createdAt": "2020-05-20T15:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5MTk2OA=="}], "type": "inlineReview"}, {"oid": "7cd85a98229bff1358979e3c6331fd39850d1b54", "url": "https://github.com/eclipse-openj9/openj9/commit/7cd85a98229bff1358979e3c6331fd39850d1b54", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-20T15:37:16Z", "type": "forcePushed"}, {"oid": "27972950b3d8f6d7d3ed6cd4f7e1a95645966b7c", "url": "https://github.com/eclipse-openj9/openj9/commit/27972950b3d8f6d7d3ed6cd4f7e1a95645966b7c", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-20T19:55:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMwMDU5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r428300599", "bodyText": "The goto on line 745 should target cleanup to avoid leaking packages.\nThat would be the last use of done; perhaps cleanup should just become done.", "author": "keithc-ca", "createdAt": "2020-05-20T20:52:41Z", "path": "runtime/j9vm/java11vmi.c", "diffHunk": "@@ -843,6 +892,17 @@ JVM_DefineModule(JNIEnv * env, jobject module, jboolean isOpen, jstring version,\n \t\t\t}\n \t\t}\n \t}\n+#if JAVA_SPEC_VERSION >= 15\n+cleanup:\n+\tif (NULL != packages) {\n+\t\tjsize pkgIndex = 0;\n+\t\tfor (pkgIndex = 0; pkgIndex < numPackages; pkgIndex++) {\n+\t\t\tconst char* packageName = packages[pkgIndex];\n+\t\t\tj9mem_free_memory((void *)packageName);\n+\t\t}\n+\t\tj9mem_free_memory((void *)packages);\t\t\n+\t}\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n done:", "originalCommit": "27972950b3d8f6d7d3ed6cd4f7e1a95645966b7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMxMDk0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9485#discussion_r428310948", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-05-20T21:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMwMDU5OQ=="}], "type": "inlineReview"}, {"oid": "f656f5705543449e2f6d8aa45af6d05ab48f0d3c", "url": "https://github.com/eclipse-openj9/openj9/commit/f656f5705543449e2f6d8aa45af6d05ab48f0d3c", "message": "Add Javadoc to ClassOption and defineHiddenClass()\n\n1. Add Javadoc to ClassOption and defineHiddenClass()\n2. Use copyStringToUTF8Helper() to copy and covert packageName\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-20T21:13:12Z", "type": "forcePushed"}, {"oid": "34cde16abf1fe10e8362652999ecc7da9cc7cf73", "url": "https://github.com/eclipse-openj9/openj9/commit/34cde16abf1fe10e8362652999ecc7da9cc7cf73", "message": "Replace JNI with VM helper API to convert package name. Add new Javadoc\nand implement new API in Java 15.\n\n1. Use copyStringToUTF8Helper() to copy and covert packageName\n2. Add Javadoc to ClassOption and defineHiddenClass().\n3. Add implementation of stringConcatInitialCoder() in Access.java\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-21T15:24:46Z", "type": "forcePushed"}, {"oid": "7f8ae5a87834531c11059e7eeffe3e7fe10803b6", "url": "https://github.com/eclipse-openj9/openj9/commit/7f8ae5a87834531c11059e7eeffe3e7fe10803b6", "message": "Use VM helper to convert package name. Implement new API in Java 15.\n\n1. Use copyStringToUTF8Helper() to copy and covert packageName\n2. Add Javadoc to ClassOption and defineHiddenClass().\n3. Add implementation of stringConcatInitialCoder() in Access.java\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-21T17:56:48Z", "type": "commit"}, {"oid": "7f8ae5a87834531c11059e7eeffe3e7fe10803b6", "url": "https://github.com/eclipse-openj9/openj9/commit/7f8ae5a87834531c11059e7eeffe3e7fe10803b6", "message": "Use VM helper to convert package name. Implement new API in Java 15.\n\n1. Use copyStringToUTF8Helper() to copy and covert packageName\n2. Add Javadoc to ClassOption and defineHiddenClass().\n3. Add implementation of stringConcatInitialCoder() in Access.java\n\nissue #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-05-21T17:56:48Z", "type": "forcePushed"}]}