{"pr_number": 9772, "pr_title": "JIT support for re-sizable SCC", "pr_createdAt": "2020-06-02T18:35:51Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9772", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyOTUyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9772#discussion_r434729521", "bodyText": "It will be a bit confusing to someone reading this part after this PR gets merged because the feature will already be in.", "author": "ymanton", "createdAt": "2020-06-03T17:17:51Z", "path": "doc/features/SharedClassesCache.md", "diffHunk": "@@ -0,0 +1,71 @@\n+<!--\n+Copyright (c) 2019, 2020 IBM Corp. and others\n+\n+This program and the accompanying materials are made available under\n+the terms of the Eclipse Public License 2.0 which accompanies this\n+distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+or the Apache License, Version 2.0 which accompanies this distribution and\n+is available at https://www.apache.org/licenses/LICENSE-2.0.\n+\n+This Source Code may also be made available under the following\n+Secondary Licenses when the conditions for such availability set\n+forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+General Public License, version 2 with the GNU Classpath\n+Exception [1] and GNU General Public License, version 2 with the\n+OpenJDK Assembly Exception [2].\n+\n+[1] https://www.gnu.org/software/classpath/license.html\n+[2] http://openjdk.java.net/legal/assembly-exception.html\n+\n+SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+-->\n+\n+The Shared Classes Cache (SCC) is a feature of OpenJ9 that enables sharing \n+data between JVMs. For more information see [1].\n+\n+## JIT\n+\n+The JIT Compiler uses the SCC to store both AOT code as well as data either\n+necessary for AOT \n+(e.g. [Class Chains](https://github.com/eclipse/openj9/blob/master/doc/compiler/aot/ClassChains.md)),\n+or for performace (e.g. IProfiler data). The JIT interfaces with the SCC via\n+the `TR_J9SharedCache` class.\n+\n+### Offsets\n+\n+When data that is stored into the SCC needs to refer to other data, it is\n+referred to by using offsets. Traditionally, the offset would always be\n+relative to the start of the SCC. However, with the feature to change the\n+size of the SCC coming soon, only offsets of data in the ROM Class section", "originalCommit": "bf4ea7315e4e386b46f48793d8dad445e7cc7482", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "acdc6f7e5a95b4ad8948f50fd389efb2d021e4c9", "url": "https://github.com/eclipse-openj9/openj9/commit/acdc6f7e5a95b4ad8948f50fd389efb2d021e4c9", "message": "Add Documentation\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-06-04T18:11:12Z", "type": "forcePushed"}, {"oid": "2343b44942e929eaed6947c7f30eb691bc3c548c", "url": "https://github.com/eclipse-openj9/openj9/commit/2343b44942e929eaed6947c7f30eb691bc3c548c", "message": "Add Documentation\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-06-15T15:26:22Z", "type": "forcePushed"}, {"oid": "e21245f0a5776c06a5059e26bccce34554ede9dd", "url": "https://github.com/eclipse-openj9/openj9/commit/e21245f0a5776c06a5059e26bccce34554ede9dd", "message": "Add Documentation\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-07-10T19:10:26Z", "type": "forcePushed"}, {"oid": "15eac46779bcf6806d802f2ba30d2c1fba57df37", "url": "https://github.com/eclipse-openj9/openj9/commit/15eac46779bcf6806d802f2ba30d2c1fba57df37", "message": "Add check for max SCC size\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-07-27T17:51:14Z", "type": "commit"}, {"oid": "db586a827edbc0ec59d51dba61b5748814916597", "url": "https://github.com/eclipse-openj9/openj9/commit/db586a827edbc0ec59d51dba61b5748814916597", "message": "Duplicate public TR_J9SharedCache APIs\n\nDuplicate the public TR_J9SharedCache APIs in order to faciliate later\ncommits which will update the various uses of these APIs to invoke the\nappropriate (specific) APIs, rather than the general API currently being\nused.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-07-27T17:51:14Z", "type": "commit"}, {"oid": "53ff1bcb76bb960afbd07d54d5c1cf9920601144", "url": "https://github.com/eclipse-openj9/openj9/commit/53ff1bcb76bb960afbd07d54d5c1cf9920601144", "message": "Add APIs to AheadOfTimeCompile\n\nAdd the APIs to wrap around the new APIs added to TR_J9SharedCache.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-07-27T17:51:14Z", "type": "commit"}, {"oid": "54c90fa0bf6d6d9885dfbdcfe0715ba947b5b582", "url": "https://github.com/eclipse-openj9/openj9/commit/54c90fa0bf6d6d9885dfbdcfe0715ba947b5b582", "message": "Address pointerFromOffsetInSharedCache\n\nUpdate calls to pointerFromOffsetInSharedCache to invoke the correct\nqueries depending on the context, for example,\nromClassFromOffsetInSharedCache if the offset is expected to be the\noffset of a J9ROMClass.\n\nSigned-of-by: Irwin D'Souzai <dsouza.gh@gmail.com>", "committedDate": "2020-07-27T17:51:14Z", "type": "commit"}, {"oid": "7100ff0be6c61e1cd9325a932f78bfee644e2224", "url": "https://github.com/eclipse-openj9/openj9/commit/7100ff0be6c61e1cd9325a932f78bfee644e2224", "message": "Address isOffsetInSharedCache\n\nUpdate calls to isOffsetInSharedCache to invoke the correct\nqueries depending on the context, for example,\nisROMClassInSharedCache in order to check if a J9ROMClass is in the SCC.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-07-27T17:51:14Z", "type": "commit"}, {"oid": "7b0f77822d286cc04110ed04f187137ab5a72f57", "url": "https://github.com/eclipse-openj9/openj9/commit/7b0f77822d286cc04110ed04f187137ab5a72f57", "message": "Add Documentation\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-07-27T17:52:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2NzE0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9772#discussion_r463767143", "bodyText": "Typo.", "author": "ymanton", "createdAt": "2020-07-31T18:31:23Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.hpp", "diffHunk": "@@ -85,16 +84,35 @@ class OMR_EXTENSIBLE AheadOfTimeCompile : public OMR::AheadOfTimeCompileConnecto\n     *\n     * Calling TR_J9SharedCache::offsetInSharedCacheFromPointer after such a\n     * redefinition could result in an assert. Therefore, this method exists as\n-    * a wrapper around TR_J9SharedCache::isPointerInSharedCache which doesn't\n+    * a wrapper around TR_J9SharedCache::isROMClassInSharedCache which doesn't\n     * assert and conveniently, updates the location referred to by the cacheOffset\n     * pointer passed in as a parameter.\n     *\n     * If the ptr isn't in the the SCC, then the current method will abort the\n     * compilation. If the ptr is in the SCC, then the cacheOffset will be updated.\n     *\n     * @param sharedCache pointer to the TR_SharedCache object\n+    * @param romClass J9ROMClass * whose offset in the SCC is required\n+    * @return The offset into the SCC of romClass\n+    */\n+   uintptr_t offsetInSharedCacheFromROMClass(TR_SharedCache *sharedCache, J9ROMClass *romClass);\n+\n+   /**\n+    * @brief Same circumstance as offsetInSharedCacheFromROMClass above\n+    *\n+    * @param sharedCache pointer to the TR_SharedCache object\n+    * @param romMethod J9ROMMethod * whose offset in the SCC is required\n+    * @return The offset into the SCC of romMethod\n+    */\n+   uintptr_t offsetInSharedCacheFromROMMethod(TR_SharedCache *sharedCache, J9ROMMethod *romMethod);\n+\n+   /**\n+    * @brief Wrapper around TR_J9SharedCache::offsetInSharedCacheFromPointer for\n+    *        consistency with the above APIs\n+    *\n+    * @param sharedCache pointer to the TR_SharedCache object\n     * @param ptr pointer whose offset in the SCC is required\n-    * @return The offset into the SCC of ptr\n+    * @return he offset into the SCC of ptr", "originalCommit": "7b0f77822d286cc04110ed04f187137ab5a72f57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MzY4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9772#discussion_r463773682", "bodyText": "Can we move these to a header instead of copying them?", "author": "ymanton", "createdAt": "2020-07-31T18:46:38Z", "path": "runtime/compiler/env/J9SharedCache.cpp", "diffHunk": "@@ -52,6 +52,10 @@\n       log(\"\" format \"\", ##__VA_ARGS__);          \\\n       }\n \n+// From CompositeCache.cpp\n+#define UPDATEPTR(ca) (((uint8_t *)(ca)) + (ca)->updateSRP)\n+#define SEGUPDATEPTR(ca) (((uint8_t *)(ca)) + (ca)->segmentSRP)", "originalCommit": "f7398ab8235604ccca5bd62be296723c3a4d5aa1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA5ODc2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9772#discussion_r465098767", "bodyText": "The reason I can't easily is because the definition in SC code is\nhttps://github.com/eclipse/openj9/blob/04c2621751962dd32b2ff60b8d212d27d5bd953b/runtime/shared_common/CompositeCache.cpp#L69-L71\nThere are several definitions for BlockPtr depending on the file you look at, but I think the one relevant for this macro is  https://github.com/eclipse/openj9/blob/04c2621751962dd32b2ff60b8d212d27d5bd953b/runtime/shared_common/CompositeCacheImpl.hpp#L79 which is typedef'd in a class. Moving the typedef to some j9 header might clash with the other typedefs. We can take a look at what might be involved to expose the SC macros, or maybe even just add public APIs. But I think it would be too much for this PR.", "author": "dsouzai", "createdAt": "2020-08-04T14:35:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3MzY4Mg=="}], "type": "inlineReview"}, {"oid": "6d8026bd99028d397a24acf0884c65fd2c89bcb9", "url": "https://github.com/eclipse-openj9/openj9/commit/6d8026bd99028d397a24acf0884c65fd2c89bcb9", "message": "Address offsetInSharedCacheFromPointer\n\nUpdate calls to offsetInSharedCacheFromPointer to invoke the correct\nqueries depending on the context, for example,\noffsetInSharedCacheFromROMClass in order to get the offset into the SCC\nof a J9ROMClass.\n\nSigned-off-by: Irwin D'Souza <dsouza.gh@gmail.com>", "committedDate": "2020-08-06T18:54:32Z", "type": "commit"}, {"oid": "65ed231c4f151fd3c9bb4944108300827bda0df0", "url": "https://github.com/eclipse-openj9/openj9/commit/65ed231c4f151fd3c9bb4944108300827bda0df0", "message": "Address isPointerInSharedCache\n\nUpdate calls to isPointerInSharedCache to invoke the correct\nqueries depending on the context, for example,\nisROMClassInSharedCache in order to check if a J9ROMClass is in the SCC.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-08-06T18:54:34Z", "type": "commit"}, {"oid": "ccf23909baef51cad1321f592cd56345cbbad729", "url": "https://github.com/eclipse-openj9/openj9/commit/ccf23909baef51cad1321f592cd56345cbbad729", "message": "Use correct APIs in Validation Record\n\nTR_RelocationRecordValidateStaticField inherits from\nTR_RelocationRecordValidateInstanceField (which inherits from\nTR_RelocationRecordValidateClass). Unlike ValidateInstanceField and\nValidateClass, ValidateStaticField stores an offset to the J9ROMClass of\nthe class of the field, rather than an offset to the class chain of the\nclass of the field.\n\nThis commit adds a virtual method to these classes to ensure that the\nright API is called.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-08-06T18:54:34Z", "type": "commit"}, {"oid": "6e265bef85022ffbc5ea84333a6279a4de69427c", "url": "https://github.com/eclipse-openj9/openj9/commit/6e265bef85022ffbc5ea84333a6279a4de69427c", "message": "Add helper methods\n\nThis commit adds helper methods that will be used by the public APIs in\nTR_J9SharedCache to convert between the various offsets and pointers.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-08-06T18:54:34Z", "type": "commit"}, {"oid": "51b173b83f1652b409af41bf832b6e738d00cd65", "url": "https://github.com/eclipse-openj9/openj9/commit/51b173b83f1652b409af41bf832b6e738d00cd65", "message": "Change offset/pointer calculation\n\nThe offsets for pointers into the ROMClass section of the SCC are\ncalculated using the start of the ROMClass section. The offsets for\npointers into the metadata section of the SCC are calculated using\nthe start of the metadata section (which grows backwards, towards the\nROMClass section). The offset is then left shifted one bit; the low\nbit is used to determine whether the offset is calculated from the start\nof the ROMClass section or the start of the metadatasection.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-08-06T18:54:34Z", "type": "commit"}, {"oid": "b635e492450be98976c134105ef1ed4b1d74c725", "url": "https://github.com/eclipse-openj9/openj9/commit/b635e492450be98976c134105ef1ed4b1d74c725", "message": "Add Documentation\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-08-06T18:54:35Z", "type": "commit"}, {"oid": "b635e492450be98976c134105ef1ed4b1d74c725", "url": "https://github.com/eclipse-openj9/openj9/commit/b635e492450be98976c134105ef1ed4b1d74c725", "message": "Add Documentation\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-08-06T18:54:35Z", "type": "forcePushed"}]}