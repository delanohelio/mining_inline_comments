{"pr_number": 10054, "pr_title": "Inlining POWER10 arrayCopy", "pr_createdAt": "2020-06-30T18:20:35Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10054", "timeline": [{"oid": "8b711504d76d6260f51afbb3f5e43d23724686a9", "url": "https://github.com/eclipse-openj9/openj9/commit/8b711504d76d6260f51afbb3f5e43d23724686a9", "message": "Inlining POWER10 arrayCopy\n\nDeleting inlineVSXArrayCopy: this was a piece of work with experimental characteristics\nit bloated the codegen to such an extent that it hurt general workload performance 5-10%\nrange. It was disabled many years ago. I took this opportunity to delete it completely.\n\nAdding the POWER10 inlining of arraycopy: this version is only applicable to Concurrent\nScavenge. We are limited somewhat in using registers.\n\nAdding the capability to call the POWER10 arraycopy helpers too.\n\nDeleting LEArrayCopy related stuffs.\n\nFor performance reason, adjusting straight inlining to 64-byte.\n\nSigned-off-by: Julian Wang <zlwang@ca.ibm.com>", "committedDate": "2020-07-02T21:08:17Z", "type": "forcePushed"}, {"oid": "57ed2f132f13f7720ee54b9255a8767d553f2a7e", "url": "https://github.com/eclipse-openj9/openj9/commit/57ed2f132f13f7720ee54b9255a8767d553f2a7e", "message": "Inlining POWER10 arrayCopy\n\nDeleting inlineVSXArrayCopy: this was a piece of work with experimental characteristics\nit bloated the codegen to such an extent that it hurt general workload performance 5-10%\nrange. It was disabled many years ago. I took this opportunity to delete it completely.\n\nAdding the POWER10 inlining of arraycopy: this version is only applicable to Concurrent\nScavenge. We are limited somewhat in using registers.\n\nAdding the capability to call the POWER10 arraycopy helpers too.\n\nDeleting LEArrayCopy related stuffs.\n\nFor performance reason, adjusting straight inlining to 64-byte.\n\nFor performance reason, using lxv/stxv instead.\n\nSigned-off-by: Julian Wang <zlwang@ca.ibm.com>", "committedDate": "2020-07-07T22:06:44Z", "type": "forcePushed"}, {"oid": "dddb55b15acbcd0981abe63e91d27d6dd78fdaa6", "url": "https://github.com/eclipse-openj9/openj9/commit/dddb55b15acbcd0981abe63e91d27d6dd78fdaa6", "message": "Inlining POWER10 arrayCopy\n\nDeleting inlineVSXArrayCopy: this was a piece of work with experimental characteristics\nit bloated the codegen to such an extent that it hurt general workload performance 5-10%\nrange. It was disabled many years ago. I took this opportunity to delete it completely.\n\nAdding the POWER10 inlining of arraycopy: this version is only applicable to Concurrent\nScavenge. We are limited somewhat in using registers.\n\nAdding the capability to call the POWER10 arraycopy helpers too.\n\nDeleting LEArrayCopy related stuffs.\n\nFor performance reason, adjusting straight inlining to 64-byte.\n\nFor performance reason, using lxv/stxv instead\n\nSigned-off-by: Julian Wang <zlwang@ca.ibm.com>", "committedDate": "2020-07-07T22:31:10Z", "type": "forcePushed"}, {"oid": "0f56eb6fdd4dd68138f8ea0c3a06518904698e83", "url": "https://github.com/eclipse-openj9/openj9/commit/0f56eb6fdd4dd68138f8ea0c3a06518904698e83", "message": "Inlining POWER10 arrayCopy\n\nDeleting inlineVSXArrayCopy: this was a piece of work with experimental characteristics\nit bloated the codegen to such an extent that it hurt general workload performance 5-10%\nrange. It was disabled many years ago. I took this opportunity to delete it completely.\n\nAdding the POWER10 inlining of arraycopy: this version is only applicable to Concurrent\nScavenge. We are limited somewhat in using registers.\n\nAdding the capability to call the POWER10 arraycopy helpers too.\n\nDeleting LEArrayCopy related stuffs.\n\nFor performance reason, adjusting straight inlining to 64-byte.\n\nFor performance reason, using lxv/stxv instead\n\nFor performance reason, special-case for residue in 1/2/4/8 bytes\n\nSigned-off-by: Julian Wang <zlwang@ca.ibm.com>", "committedDate": "2020-07-08T23:46:17Z", "type": "forcePushed"}, {"oid": "b72ae71abdec2284ebd86e6020dad95eb3344c32", "url": "https://github.com/eclipse-openj9/openj9/commit/b72ae71abdec2284ebd86e6020dad95eb3344c32", "message": "Inlining POWER10 arrayCopy\n\nDeleting inlineVSXArrayCopy: this was a piece of work with experimental characteristics\nit bloated the codegen to such an extent that it hurt general workload performance 5-10%\nrange. It was disabled many years ago. I took this opportunity to delete it completely.\n\nAdding the POWER10 inlining of arraycopy: this version is only applicable to Concurrent\nScavenge. We are limited somewhat in using registers.\n\nAdding the capability to call the POWER10 arraycopy helpers too.\n\nDeleting LEArrayCopy related stuffs.\n\nFor performance reason, adjusting straight inlining to 64-byte.\n\nFor performance reason, using lxv/stxv instead\n\nFor performance reason, special-case for residue in 1/2/4/8 bytes\n\nAdding a conditional on byteOffset being non-zero\n\nSigned-off-by: Julian Wang <zlwang@ca.ibm.com>", "committedDate": "2020-07-09T15:20:57Z", "type": "forcePushed"}, {"oid": "2866a5714506bad176a6e161d92c3c9ed43eb326", "url": "https://github.com/eclipse-openj9/openj9/commit/2866a5714506bad176a6e161d92c3c9ed43eb326", "message": "Inlining POWER10 arrayCopy\n\nDeleting inlineVSXArrayCopy: this was a piece of work with experimental characteristics\nit bloated the codegen to such an extent that it hurt general workload performance 5-10%\nrange. It was disabled many years ago. I took this opportunity to delete it completely.\n\nAdding the POWER10 inlining of arraycopy: this version is only applicable to Concurrent\nScavenge. We are limited somewhat in using registers.\n\nAdding the capability to call the POWER10 arraycopy helpers too.\n\nDeleting LEArrayCopy related stuffs.\n\nFor performance reason, adjusting straight inlining to 64-byte.\n\nFor performance reason, using lxv/stxv instead\n\nFor performance reason, special-case for residue in 1/2/4/8 bytes\n\nAdding a conditional on byteOffset being non-zero\n\nRebase to resolve conflicts\n\nSigned-off-by: Julian Wang <zlwang@ca.ibm.com>", "committedDate": "2020-07-09T17:23:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTQ3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10054#discussion_r454411475", "bodyText": "Considering that it looks like the post-P10 and pre-P10 versions of the inlined arraycopy code aren't actually sharing much code at all, perhaps they should be split into two separate functions?", "author": "aviansie-ben", "createdAt": "2020-07-14T14:45:36Z", "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -11685,573 +11685,241 @@ static void inlineArrayCopy_ICF(TR::Node *node, int64_t byteLen, TR::Register *s\n    if (byteLen == 0)\n       return;\n \n-   TR::Compilation *comp = cg->comp();\n-   TR::Register *regs[4] = {tmp1Reg, tmp2Reg, tmp3Reg, tmp4Reg};\n-   TR::Register *fpRegs[4] = {fp1Reg, fp2Reg, fp3Reg, fp4Reg};\n-   int32_t groups, residual;\n-\n-   static bool disableLEArrayCopyInline = (feGetEnv(\"TR_disableLEArrayCopyInline\") != NULL);\n-   bool supportsLEArrayCopyInline = (comp->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P8)) && !disableLEArrayCopyInline && comp->target().cpu.isLittleEndian() && comp->target().cpu.hasFPU() && comp->target().is64Bit();\n+   bool postP10CopyInline = cg->comp()->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P10) &&\n+                            cg->comp()->target().cpu.getPPCSupportsVSX();\n \n-   if (comp->target().is64Bit())\n+   if (postP10CopyInline)", "originalCommit": "2866a5714506bad176a6e161d92c3c9ed43eb326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzMDg1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10054#discussion_r454630859", "bodyText": "before it gets too complicated, i prefer to consolidating the different evaluators in one place.", "author": "zl-wang", "createdAt": "2020-07-14T20:39:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxODU3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10054#discussion_r454418573", "bodyText": "Minor typo:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               //    POWER8 potentially micor-coded unaligned integer accesses in LE mode,\n          \n          \n            \n               //    POWER8 potentially micro-coded unaligned integer accesses in LE mode,", "author": "aviansie-ben", "createdAt": "2020-07-14T14:54:46Z", "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -13458,12 +13148,18 @@ TR::Register *J9::Power::TreeEvaluator::arraycopyEvaluator(TR::Node *node, TR::C\n    TR::Register *metaReg = cg->getMethodMetaDataRegister();\n \n    // This section calculates the number of dependencies needed by the assembly helpers path.\n+   bool postP10Copy = cg->comp()->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P10) &&\n+                      cg->comp()->target().cpu.getPPCSupportsVSX();\n+\n    static bool disableVSXArrayCopy = (feGetEnv(\"TR_disableVSXArrayCopy\") != NULL);\n-   static bool disableLEArrayCopyHelper = (feGetEnv(\"TR_disableLEArrayCopyHelper\") != NULL);\n-   static bool disableVSXArrayCopyInlining = (feGetEnv(\"TR_enableVSXArrayCopyInlining\") == NULL); // Disabling due to a performance regression\n+   bool useVSXForCopy  = cg->comp()->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P8) &&\n+                         !disableVSXArrayCopy && cg->comp()->target().cpu.getPPCSupportsVSX();\n \n-   bool supportsVSX = (comp->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P8)) && !disableVSXArrayCopy && comp->target().cpu.supportsFeature(OMR_FEATURE_PPC_HAS_VSX);\n-   bool supportsLEArrayCopy = !disableLEArrayCopyHelper && comp->target().cpu.isLittleEndian() && comp->target().cpu.hasFPU();\n+   // VSX supercedes FPU.  No reason to offering disable option on this.\n+   //    POWER8 potentially micor-coded unaligned integer accesses in LE mode,", "originalCommit": "2866a5714506bad176a6e161d92c3c9ed43eb326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzMTExNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10054#discussion_r454631117", "bodyText": "will fix that typo.", "author": "zl-wang", "createdAt": "2020-07-14T20:40:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxODU3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMDIyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10054#discussion_r454420229", "bodyText": "If I'm reading this correctly, this comment seems to be referring to the removal of the env var checks above? Can you please clarify what this is saying?", "author": "aviansie-ben", "createdAt": "2020-07-14T14:56:51Z", "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -13458,12 +13148,18 @@ TR::Register *J9::Power::TreeEvaluator::arraycopyEvaluator(TR::Node *node, TR::C\n    TR::Register *metaReg = cg->getMethodMetaDataRegister();\n \n    // This section calculates the number of dependencies needed by the assembly helpers path.\n+   bool postP10Copy = cg->comp()->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P10) &&\n+                      cg->comp()->target().cpu.getPPCSupportsVSX();\n+\n    static bool disableVSXArrayCopy = (feGetEnv(\"TR_disableVSXArrayCopy\") != NULL);\n-   static bool disableLEArrayCopyHelper = (feGetEnv(\"TR_disableLEArrayCopyHelper\") != NULL);\n-   static bool disableVSXArrayCopyInlining = (feGetEnv(\"TR_enableVSXArrayCopyInlining\") == NULL); // Disabling due to a performance regression\n+   bool useVSXForCopy  = cg->comp()->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P8) &&\n+                         !disableVSXArrayCopy && cg->comp()->target().cpu.getPPCSupportsVSX();\n \n-   bool supportsVSX = (comp->target().cpu.isAtLeast(OMR_PROCESSOR_PPC_P8)) && !disableVSXArrayCopy && comp->target().cpu.supportsFeature(OMR_FEATURE_PPC_HAS_VSX);\n-   bool supportsLEArrayCopy = !disableLEArrayCopyHelper && comp->target().cpu.isLittleEndian() && comp->target().cpu.hasFPU();\n+   // VSX supercedes FPU.  No reason to offering disable option on this.", "originalCommit": "2866a5714506bad176a6e161d92c3c9ed43eb326", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDYzMjgzNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10054#discussion_r454632836", "bodyText": "Potentially micro-coded is always present on P8 LE mode. i.e.  arraycopy might lose datum atomicity if you don't use floating point load/store to do the copy, such that it doesn't make sense to offer an option for that choice.", "author": "zl-wang", "createdAt": "2020-07-14T20:43:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQyMDIyOQ=="}], "type": "inlineReview"}, {"oid": "c64a3e8e28fbcd91fd2f8b12cb79ca439d0b0f7e", "url": "https://github.com/eclipse-openj9/openj9/commit/c64a3e8e28fbcd91fd2f8b12cb79ca439d0b0f7e", "message": "Inlining POWER10 arrayCopy\n\nDeleting inlineVSXArrayCopy: this was a piece of work with experimental characteristics\nit bloated the codegen to such an extent that it hurt general workload performance 5-10%\nrange. It was disabled many years ago. I took this opportunity to delete it completely.\n\nAdding the POWER10 inlining of arraycopy: this version is only applicable to Concurrent\nScavenge. We are limited somewhat in using registers.\n\nAdding the capability to call the POWER10 arraycopy helpers too.\n\nDeleting LEArrayCopy related stuffs.\n\nFor performance reason, adjusting straight inlining to 64-byte.\n\nFor performance reason, using lxv/stxv instead\n\nFor performance reason, special-case for residue in 1/2/4/8 bytes\n\nAdding a conditional on byteOffset being non-zero\n\nRebase to resolve conflicts\n\nFix a typo in comment.\n\nSigned-off-by: Julian Wang <zlwang@ca.ibm.com>", "committedDate": "2020-07-14T23:24:03Z", "type": "forcePushed"}, {"oid": "c64a3e8e28fbcd91fd2f8b12cb79ca439d0b0f7e", "url": "https://github.com/eclipse-openj9/openj9/commit/c64a3e8e28fbcd91fd2f8b12cb79ca439d0b0f7e", "message": "Inlining POWER10 arrayCopy\n\nDeleting inlineVSXArrayCopy: this was a piece of work with experimental characteristics\nit bloated the codegen to such an extent that it hurt general workload performance 5-10%\nrange. It was disabled many years ago. I took this opportunity to delete it completely.\n\nAdding the POWER10 inlining of arraycopy: this version is only applicable to Concurrent\nScavenge. We are limited somewhat in using registers.\n\nAdding the capability to call the POWER10 arraycopy helpers too.\n\nDeleting LEArrayCopy related stuffs.\n\nFor performance reason, adjusting straight inlining to 64-byte.\n\nFor performance reason, using lxv/stxv instead\n\nFor performance reason, special-case for residue in 1/2/4/8 bytes\n\nAdding a conditional on byteOffset being non-zero\n\nRebase to resolve conflicts\n\nFix a typo in comment.\n\nSigned-off-by: Julian Wang <zlwang@ca.ibm.com>", "committedDate": "2020-07-14T23:24:03Z", "type": "commit"}]}