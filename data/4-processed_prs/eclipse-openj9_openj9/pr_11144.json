{"pr_number": 11144, "pr_title": "Fix issue in DDR field layout calculation", "pr_createdAt": "2020-11-10T19:07:16Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11144", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgyNTIwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11144#discussion_r520825205", "bodyText": "Why not use com.ibm.j9ddr.vm29.structure.ObjectFieldInfo.OBJECT_SIZE_INCREMENT_IN_BYTES instead of defining this field?", "author": "keithc-ca", "createdAt": "2020-11-10T19:36:43Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/ObjectFieldInfo.java", "diffHunk": "@@ -71,10 +71,11 @@\n \tint totalFlatFieldRefBytes = 0;\n \tint totalFlatFieldSingleBytes = 0;\n \n-\tpublic static final int\tNO_BACKFILL_AVAILABLE = -1;\n-\tpublic static final int\t\tBACKFILL_SIZE = U32.SIZEOF;\n-\tpublic static final int\t\tLOCKWORD_SIZE = j9objectmonitor_t_SizeOf;\n-\tpublic static final int\t\tFINALIZE_LINK_SIZE = fj9object_t_SizeOf;\n+\tpublic static final int NO_BACKFILL_AVAILABLE = -1;\n+\tpublic static final int BACKFILL_SIZE = U32.SIZEOF;\n+\tpublic static final int LOCKWORD_SIZE = j9objectmonitor_t_SizeOf;\n+\tpublic static final int FINALIZE_LINK_SIZE = fj9object_t_SizeOf;\n+\tpublic static final int OBJECT_SIZE_INCREMENT_IN_BYTES = U64.SIZEOF;", "originalCommit": "a62a89b9527010c9b0ae7d0509f28ee43bfbc2c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "40b615b273f4c5e751a2b710d3fb7e88f248e9e1", "url": "https://github.com/eclipse-openj9/openj9/commit/40b615b273f4c5e751a2b710d3fb7e88f248e9e1", "message": "Fix issue in DDR field layout calculation\n\nCurrently in ObjectFieldInfo DDR uses the GC object allocation alignment\nto calculate if a super class is unaligned or not. The VM does not use\nthe GC object alignment size to determine this, it uses the object size\nincrement. Due to this mismatch, DDR was interpreting layout differently\non 4bit shift compressedRefs modes. This issue is fixed by defining\n`OBJECT_SIZE_INCREMENT_IN_BYTES` in DDR.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-11-10T19:50:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0MTUxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11144#discussion_r520841513", "bodyText": "Can you please organize these imports, putting OBJECT_SIZE_INCREMENT_IN_BYTES above with other static imports and removing the unused imports (J9Object and J9ObjectHelper).", "author": "keithc-ca", "createdAt": "2020-11-10T20:05:05Z", "path": "debugtools/DDR_VM/src/com/ibm/j9ddr/vm29/j9/ObjectFieldInfo.java", "diffHunk": "@@ -37,6 +37,7 @@\n import com.ibm.j9ddr.vm29.pointer.helper.J9UTF8Helper;\n import com.ibm.j9ddr.vm29.pointer.helper.ValueTypeHelper;\n import com.ibm.j9ddr.vm29.structure.J9Object;\n+import static com.ibm.j9ddr.vm29.structure.ObjectFieldInfo.OBJECT_SIZE_INCREMENT_IN_BYTES;\n import com.ibm.j9ddr.vm29.pointer.helper.J9ObjectHelper;", "originalCommit": "40b615b273f4c5e751a2b710d3fb7e88f248e9e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MzM1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11144#discussion_r520853350", "bodyText": "Sorry, it is J9BuildFlags and J9Object that are the unused imports: please remove them.", "author": "keithc-ca", "createdAt": "2020-11-10T20:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0MTUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1OTMwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11144#discussion_r520859306", "bodyText": "Thanks.", "author": "keithc-ca", "createdAt": "2020-11-10T20:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0MTUxMw=="}], "type": "inlineReview"}, {"oid": "e868d73635b15e4ffab88c46468ec54f8c2a2ac2", "url": "https://github.com/eclipse-openj9/openj9/commit/e868d73635b15e4ffab88c46468ec54f8c2a2ac2", "message": "Fix issue in DDR field layout calculation\n\nCurrently in ObjectFieldInfo DDR uses the GC object allocation alignment\nto calculate if a super class is unaligned or not. The VM does not use\nthe GC object alignment size to determine this, it uses the object size\nincrement. Due to this mismatch, DDR was interpreting layout differently\non 4bit shift compressedRefs modes. This issue is fixed by defining\n`OBJECT_SIZE_INCREMENT_IN_BYTES` in DDR.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-11-10T20:10:20Z", "type": "forcePushed"}, {"oid": "1b5591237a079317acf09aaca1d20335e742970d", "url": "https://github.com/eclipse-openj9/openj9/commit/1b5591237a079317acf09aaca1d20335e742970d", "message": "Fix issue in DDR field layout calculation\n\nCurrently in ObjectFieldInfo DDR uses the GC object allocation alignment\nto calculate if a super class is unaligned or not. The VM does not use\nthe GC object alignment size to determine this, it uses the object size\nincrement. Due to this mismatch, DDR was interpreting layout differently\non 4bit shift compressedRefs modes. This issue is fixed by defining\n`OBJECT_SIZE_INCREMENT_IN_BYTES` in DDR.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-11-10T20:33:20Z", "type": "commit"}, {"oid": "1b5591237a079317acf09aaca1d20335e742970d", "url": "https://github.com/eclipse-openj9/openj9/commit/1b5591237a079317acf09aaca1d20335e742970d", "message": "Fix issue in DDR field layout calculation\n\nCurrently in ObjectFieldInfo DDR uses the GC object allocation alignment\nto calculate if a super class is unaligned or not. The VM does not use\nthe GC object alignment size to determine this, it uses the object size\nincrement. Due to this mismatch, DDR was interpreting layout differently\non 4bit shift compressedRefs modes. This issue is fixed by defining\n`OBJECT_SIZE_INCREMENT_IN_BYTES` in DDR.\n\nSigned-off-by: Tobi Ajila <atobia@ca.ibm.com>", "committedDate": "2020-11-10T20:33:20Z", "type": "forcePushed"}]}