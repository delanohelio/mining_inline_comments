{"pr_number": 10688, "pr_title": "JITServer on Z build fixes", "pr_createdAt": "2020-09-24T14:58:45Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10688", "timeline": [{"oid": "0a145b7cb9d9132612de4ee02c8ff9692d1bc69e", "url": "https://github.com/eclipse-openj9/openj9/commit/0a145b7cb9d9132612de4ee02c8ff9692d1bc69e", "message": "Avoid PC-relative instructions for fieldwatch support\n\nFor relocatable compiles such as remote compilations,\nfieldwatch should not generate PC relative instructions\nbecause it is not supported.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-09-24T14:43:52Z", "type": "commit"}, {"oid": "34d1cff5eb4b9d3a823bfb124bbe1e7207d88533", "url": "https://github.com/eclipse-openj9/openj9/commit/34d1cff5eb4b9d3a823bfb124bbe1e7207d88533", "message": "Set isVettedForAOT to true in ArrayStoreCHK evaluator\n\nWhen looking for the java/lang/Object class by name in the\nTR::ArrayStoreCHK evaluator, isVettedForAOT was set to false\nfor remote compilations. This is incorrect and we shouldn't\nrestrict this. Moreover, it can prevent CLGRL from\nbeing generated when it should be generated.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-09-24T14:47:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494404783", "bodyText": "Why are we hitting this path for JITServer at all? Shouldn't needClassAndMethodPointerRelocations return true for JITServer?", "author": "fjeremic", "createdAt": "2020-09-24T15:19:30Z", "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -4002,7 +4002,7 @@ J9::Z::TreeEvaluator::generateTestAndReportFieldWatchInstructions(TR::CodeGenera\n       if (isResolved)\n          {\n          fieldClassReg = cg->allocateRegister();\n-         if (!(cg->needClassAndMethodPointerRelocations()))\n+         if (!(cg->needClassAndMethodPointerRelocations()) && cg->canUseRelativeLongInstructions(reinterpret_cast<int64_t>((static_cast<TR::J9WatchedStaticFieldSnippet *>(dataSnippet)->getFieldClass()))))", "originalCommit": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzUxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494413516", "bodyText": "It returns false for regular remote compilations (i.e. when we have a TR_J9ServerVM). We usually have that information from the client. We just can't use the relative path here. I figured taking the AOT path here for JITServer also made sense since this likely won't have much impact on field watch performance. I think these queries sufficiently describe why we can't take the forward path of this branch for regular remote compilations (Also, I didn't want to add another front-end query).", "author": "dchopra001", "createdAt": "2020-09-24T15:30:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxNTMwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494615301", "bodyText": "Ok, thanks for explaining. Could we make a small cleanup change while in the area?\n         fieldClassReg = cg->allocateRegister();\n         J9Class *fieldClass = static_cast<TR::J9WatchedStaticFieldSnippet *>(dataSnippet)->getFieldClass();\n         if (!cg->needClassAndMethodPointerRelocations() && cg->canUseRelativeLongInstructions(reinterpret_cast<int64_t>(fieldClass)))\n            {\n            // For non-AOT (JIT and JITServer) compiles ...\n            TR_ASSERT_FATAL(...\n            }", "author": "fjeremic", "createdAt": "2020-09-24T21:16:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyMzE0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494623146", "bodyText": "Done here: 27f02c3", "author": "dchopra001", "createdAt": "2020-09-24T21:33:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNDc4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNTI2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494535265", "bodyText": "Looking at the code I see that in the TR_J9SharedCacheVM implementation of getSystemClassFromClassName() we call TR_J9VM::getSystemClassFromClassName() with the default value of the isVettedForAOT which is false, but actually it doesn't matter because TR_J9VM::getSystemClassFromClassName() doesn't even look at isVettedForAOT.\nIn contrast the TR_J9Server implementation sends a message to the client with isVettedForAOT and the client executes the corresponding query using an AOT frontend for which isVettedForAOT may matter.\nSo the problem is that JITServer executes a TR_J9VM query which is replied by the client with an answer from a TR_J9SharedCacheVM frontend. Since the MessageType::VM_getSystemClassFromClassName is only sent by the JITServer from TR_J9ServerVM::getSystemClassFromClassName (i.e. the non-AOT frontend) I think the right solution is for the client to create a non-AOT frontend (TR_J9VM) to find the answer to the query.\nHere:\n      case MessageType::VM_getSystemClassFromClassName:\n         {\n         auto recv = client->getRecvData<std::string, bool>();\n         const std::string name = std::get<0>(recv);\n         bool isVettedForAOT = std::get<1>(recv);\n         client->write(response, fe->getSystemClassFromClassName(name.c_str(), name.length(), isVettedForAOT));\n         }\n         break;", "author": "mpirvu", "createdAt": "2020-09-24T18:41:53Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -2043,7 +2043,7 @@ TR_OpaqueClassBlock *\n TR_J9SharedCacheServerVM::getSystemClassFromClassName(const char * name, int32_t length, bool isVettedForAOT)\n    {\n    TR::Compilation *comp = _compInfoPT->getCompilation();\n-   TR_OpaqueClassBlock *classPointer = TR_J9ServerVM::getSystemClassFromClassName(name, length);\n+   TR_OpaqueClassBlock *classPointer = TR_J9ServerVM::getSystemClassFromClassName(name, length, isVettedForAOT);", "originalCommit": "14bb95fb8c599ff244ffcfc30884fcc0d5853b05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5Njg3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10688#discussion_r494596873", "bodyText": "Changed this to call non-AOT front end now: 5608aa7", "author": "dchopra001", "createdAt": "2020-09-24T20:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUzNTI2NQ=="}], "type": "inlineReview"}, {"oid": "5608aa7e762f42e8c632b41af963f07ada2a508c", "url": "https://github.com/eclipse-openj9/openj9/commit/5608aa7e762f42e8c632b41af963f07ada2a508c", "message": "Call base implementation of getSystemClassFromClassName\n\nFor the VM_getSystemClassFromClassName JITServer message type,\nthe base implementation of getSystemClassFromClassName should\nalways be called, even for AOT compilations. This is because\nthe validation is done on the server.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-09-24T20:35:11Z", "type": "commit"}, {"oid": "5608aa7e762f42e8c632b41af963f07ada2a508c", "url": "https://github.com/eclipse-openj9/openj9/commit/5608aa7e762f42e8c632b41af963f07ada2a508c", "message": "Call base implementation of getSystemClassFromClassName\n\nFor the VM_getSystemClassFromClassName JITServer message type,\nthe base implementation of getSystemClassFromClassName should\nalways be called, even for AOT compilations. This is because\nthe validation is done on the server.\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-09-24T20:35:11Z", "type": "forcePushed"}, {"oid": "27f02c3bed44a1820f30517c232381a4bfe48ebf", "url": "https://github.com/eclipse-openj9/openj9/commit/27f02c3bed44a1820f30517c232381a4bfe48ebf", "message": "Common up fieldClass definition\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-09-24T21:32:12Z", "type": "commit"}]}