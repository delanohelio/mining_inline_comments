{"pr_number": 9119, "pr_title": "Eliminate storeValidationRecordIfNecessary messages", "pr_createdAt": "2020-04-03T19:32:22Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9119", "timeline": [{"oid": "ca1217337b4901183cba8eac556c6f852a75c248", "url": "https://github.com/eclipse-openj9/openj9/commit/ca1217337b4901183cba8eac556c6f852a75c248", "message": "Eliminate storeValidationRecordIfNecessary messages\n\nA lot of these messsages were being sent during AOT\ncompilations. Replacing one message that fetches\nall required information with invocations of multiple\nmethods that return the same information significantly\nreduces the total message count, since the latter methods\nalready do a lot of server-side caching.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-04-06T17:24:16Z", "type": "forcePushed"}, {"oid": "6fdcaf45998fc12bc041ce0761435009528f92d1", "url": "https://github.com/eclipse-openj9/openj9/commit/6fdcaf45998fc12bc041ce0761435009528f92d1", "message": "Eliminate storeValidationRecordIfNecessary messages\n\nA lot of these messsages were being sent during AOT\ncompilations. Replacing one message that fetches\nall required information with invocations of multiple\nmethods that return the same information significantly\nreduces the total message count, since the latter methods\nalready do a lot of server-side caching.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-04-06T18:03:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MzgyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9119#discussion_r404363822", "bodyText": "If className is used just for traceMsg I suggest to use the same trick as above with a if (comp->getDebug()) test to avoid computing J9ROMCLASS_CLASSNAME(TR::Compiler->cls.romClassOf((TR_OpaqueClassBlock *) definingClass));", "author": "mpirvu", "createdAt": "2020-04-06T20:21:41Z", "path": "runtime/compiler/env/j9methodServer.cpp", "diffHunk": "@@ -2038,69 +2038,53 @@ bool\n TR_ResolvedRelocatableJ9JITServerMethod::storeValidationRecordIfNecessary(TR::Compilation * comp, J9ConstantPool *constantPool, int32_t cpIndex, TR_ExternalRelocationTargetKind reloKind, J9Method *ramMethod, J9Class *definingClass)\n    {\n    TR_J9VMBase *fej9 = (TR_J9VMBase *) comp->fe();\n+\n    bool storeClassInfo = true;\n    bool fieldInfoCanBeUsed = false;\n    TR_AOTStats *aotStats = ((TR_JitPrivateConfig *)fej9->_jitConfig->privateConfig)->aotStats;\n    bool isStatic = (reloKind == TR_ValidateStaticField);\n \n-   UDATA *classChain = NULL;\n-   auto clientData = _fe->_compInfoPT->getClientData();\n-   PersistentUnorderedMap<J9Class *, UDATA *> &classChainCache = clientData->getClassChainDataCache();\n-   if (definingClass)\n-      {\n-      // if defining class is known, check if we already have a corresponding class chain cached\n-      OMR::CriticalSection classChainDataMapMonitor(clientData->getClassChainDataMapMonitor());\n-      auto it = classChainCache.find(definingClass);\n-      if (it != classChainCache.end())\n-         classChain = it->second;\n-      }\n-\n-   if (!classChain)\n+   if (comp->getDebug())\n       {\n-      _stream->write(JITServer::MessageType::ResolvedRelocatableMethod_storeValidationRecordIfNecessary, ramMethod, constantPool, cpIndex, isStatic, definingClass);\n-      // 1. RAM class of ramMethod\n-      // 2. defining class\n-      // 3. class chain\n-      auto recv = _stream->read<J9Class *, J9Class *, UDATA *>();\n-\n-      J9Class *clazz = std::get<0>(recv);\n+      // guard this code with debug check, to avoid\n+      // sending extra messages when not tracing\n       traceMsg(comp, \"storeValidationRecordIfNecessary:\\n\");\n       traceMsg(comp, \"\\tconstantPool %p cpIndex %d\\n\", constantPool, cpIndex);\n       traceMsg(comp, \"\\treloKind %d isStatic %d\\n\", reloKind, isStatic);\n-      J9UTF8 *methodClassName = J9ROMCLASS_CLASSNAME(TR::Compiler->cls.romClassOf((TR_OpaqueClassBlock *) clazz));\n-      traceMsg(comp, \"\\tmethod %p from class %p %.*s\\n\", ramMethod, clazz, J9UTF8_LENGTH(methodClassName), J9UTF8_DATA(methodClassName));\n+      J9UTF8 *methodClassName =\n+         J9ROMCLASS_CLASSNAME(\n+            TR::Compiler->cls.romClassOf(\n+               fej9->getClassOfMethod(reinterpret_cast<TR_OpaqueMethodBlock *>(ramMethod))));\n+      traceMsg(comp,\n+               \"\\tmethod %p from class %p %.*s\\n\",\n+               ramMethod,\n+               fej9->getClassOfMethod(reinterpret_cast<TR_OpaqueMethodBlock *>(ramMethod)),\n+               J9UTF8_LENGTH(methodClassName),\n+               J9UTF8_DATA(methodClassName));\n       traceMsg(comp, \"\\tdefiningClass %p\\n\", definingClass);\n+      }\n \n-      if (!definingClass)\n-         {\n-         definingClass = std::get<1>(recv);\n-         traceMsg(comp, \"\\tdefiningClass recomputed from cp as %p\\n\", definingClass);\n-         }\n-\n-      if (!definingClass)\n-         {\n-         if (aotStats)\n-            aotStats->numDefiningClassNotFound++;\n-         return false;\n-         }\n-\n-      J9UTF8 *className = J9ROMCLASS_CLASSNAME(TR::Compiler->cls.romClassOf((TR_OpaqueClassBlock *) definingClass));\n-      traceMsg(comp, \"\\tdefiningClass name %.*s\\n\", J9UTF8_LENGTH(className), J9UTF8_DATA(className));\n+   if (!definingClass)\n+      {\n+      definingClass = (J9Class *) TR_ResolvedJ9JITServerMethod::definingClassFromCPFieldRef(comp, cpIndex, isStatic);\n+      traceMsg(comp, \"\\tdefiningClass recomputed from cp as %p\\n\", definingClass);\n+      }\n \n-      // all kinds of validations may need to rely on the entire class chain, so make sure we can build one first\n-      classChain = std::get<2>(recv);\n+   if (!definingClass)\n+      {\n+      if (aotStats)\n+         aotStats->numDefiningClassNotFound++;\n+      return false;\n       }\n \n+   J9UTF8 *className = J9ROMCLASS_CLASSNAME(TR::Compiler->cls.romClassOf((TR_OpaqueClassBlock *) definingClass));", "originalCommit": "6fdcaf45998fc12bc041ce0761435009528f92d1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1OTU4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9119#discussion_r404959587", "bodyText": "Done", "author": "dmitry-ten", "createdAt": "2020-04-07T16:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDM2MzgyMg=="}], "type": "inlineReview"}, {"oid": "608d97bc356a3b31c03c364814758f1aa3d6364d", "url": "https://github.com/eclipse-openj9/openj9/commit/608d97bc356a3b31c03c364814758f1aa3d6364d", "message": "Eliminate storeValidationRecordIfNecessary messages\n\nA lot of these messsages were being sent during AOT\ncompilations. Replacing one message that fetches\nall required information with invocations of multiple\nmethods that return the same information significantly\nreduces the total message count, since the latter methods\nalready do a lot of server-side caching.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-04-07T16:43:05Z", "type": "commit"}, {"oid": "608d97bc356a3b31c03c364814758f1aa3d6364d", "url": "https://github.com/eclipse-openj9/openj9/commit/608d97bc356a3b31c03c364814758f1aa3d6364d", "message": "Eliminate storeValidationRecordIfNecessary messages\n\nA lot of these messsages were being sent during AOT\ncompilations. Replacing one message that fetches\nall required information with invocations of multiple\nmethods that return the same information significantly\nreduces the total message count, since the latter methods\nalready do a lot of server-side caching.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-04-07T16:43:05Z", "type": "forcePushed"}]}