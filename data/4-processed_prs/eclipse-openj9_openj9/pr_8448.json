{"pr_number": 8448, "pr_title": "Async handler for Concurrent Scavenger", "pr_createdAt": "2020-01-29T22:42:13Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8448", "timeline": [{"oid": "efbcd94e91c528974bf543ed266cba67f3cb518f", "url": "https://github.com/eclipse-openj9/openj9/commit/efbcd94e91c528974bf543ed266cba67f3cb518f", "message": "Async handler for Concurrent Scavenger\n\nIntroduced an Async handler that will be later used by CS to force\nmutator thread to promptly flush its copy cache to the scan queue. The\nhandler is to be activated toward the end of CS cycle when scan queue is\nempty (yet to be implemented).\n\nAlso, GC registered for two VM hooks, that will help mutator threads\nflush their copy caches by themselfs\n\nThe async handler and hooks are empty at the moment, but will eventually\ncall a flush-copy-cash method this is yet to be introduced.\n\nThe only functional change is: moved VMAccess release hook trigger in\nJNICriticalRegion::releaseAccess() to an erlier point to be consistent\nwith internalReleaseVMAccessNoMutexNoCheck\n\nSome background: https://github.com/eclipse/omr/issues/4787\n\nSigned-off-by: Aleksandar Micic <amicic@ca.ibm.com>", "committedDate": "2020-01-29T22:44:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2ODkzNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r373468935", "bodyText": "Something missing here?  If its waiting on OMR functionality there should be a comment as a reminder", "author": "DanHeidinga", "createdAt": "2020-01-31T13:03:49Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -3060,14 +3060,39 @@ hookAcquireVMAccess(J9HookInterface** hook, UDATA eventNum, void* voidEventData,\n {\n \tJ9VMAcquireVMAccessEvent* eventData = (J9VMAcquireVMAccessEvent*)voidEventData;\n \n-\tJ9VMThread *vmThread = eventData->currentThread;\n-\tMM_EnvironmentStandard *env = MM_EnvironmentStandard::getEnvironment(vmThread->omrVMThread);\n-\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(vmThread);\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_EnvironmentStandard *env = MM_EnvironmentStandard::getEnvironment(currentThread->omrVMThread);\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n \n \tAssert_MM_true(ext->concurrentScavenger);\n \n \text->scavenger->switchConcurrentForThread(env);\n }\n+\n+static void\n+hookReleaseVMAccess(J9HookInterface** hook, UDATA eventNum, void* voidEventData, void* userData)\n+{\n+\tJ9VMReleaseVMAccessEvent* eventData = (J9VMReleaseVMAccessEvent*)voidEventData;\n+\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n+\n+\tif (ext->isConcurrentScavengerInProgress()) {\n+\t}", "originalCommit": "efbcd94e91c528974bf543ed266cba67f3cb518f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTAwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r373469003", "bodyText": "Same here", "author": "DanHeidinga", "createdAt": "2020-01-31T13:04:01Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -3060,14 +3060,39 @@ hookAcquireVMAccess(J9HookInterface** hook, UDATA eventNum, void* voidEventData,\n {\n \tJ9VMAcquireVMAccessEvent* eventData = (J9VMAcquireVMAccessEvent*)voidEventData;\n \n-\tJ9VMThread *vmThread = eventData->currentThread;\n-\tMM_EnvironmentStandard *env = MM_EnvironmentStandard::getEnvironment(vmThread->omrVMThread);\n-\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(vmThread);\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_EnvironmentStandard *env = MM_EnvironmentStandard::getEnvironment(currentThread->omrVMThread);\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n \n \tAssert_MM_true(ext->concurrentScavenger);\n \n \text->scavenger->switchConcurrentForThread(env);\n }\n+\n+static void\n+hookReleaseVMAccess(J9HookInterface** hook, UDATA eventNum, void* voidEventData, void* userData)\n+{\n+\tJ9VMReleaseVMAccessEvent* eventData = (J9VMReleaseVMAccessEvent*)voidEventData;\n+\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n+\n+\tif (ext->isConcurrentScavengerInProgress()) {\n+\t}\n+}\n+\n+static void\n+hookAcquiringExclusiveInNative(J9HookInterface** hook, UDATA eventNum, void* voidEventData, void* userData)\n+{\n+\tJ9VMAcquringExclusiveInNativeEvent* eventData = (J9VMAcquringExclusiveInNativeEvent*)voidEventData;\n+\n+\tJ9VMThread *currentThread = eventData->currentThread;\n+\tMM_GCExtensions* ext = MM_GCExtensions::getExtensions(currentThread);\n+\n+\tif (ext->isConcurrentScavengerInProgress()) {\n+\t}", "originalCommit": "efbcd94e91c528974bf543ed266cba67f3cb518f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ2OTg3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r373469875", "bodyText": "Is it worth fetching the J9InternalVMFunctions table into a local outside the loop?", "author": "DanHeidinga", "createdAt": "2020-01-31T13:06:32Z", "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -714,6 +733,30 @@ MM_ScavengerDelegate::switchConcurrentForThread(MM_EnvironmentBase *env)\n #endif\n     }\n }\n+\n+void\n+MM_ScavengerDelegate::signalThreadsToFlushCaches(MM_EnvironmentBase *envBase)\n+{\n+\tJ9VMThread *walkThread = NULL;\n+\n+\tGC_VMThreadListIterator vmThreadListIterator(_javaVM);\n+\n+\tGC_VMInterface::lockVMThreadList(_extensions);\n+\n+\twhile((walkThread = vmThreadListIterator.nextVMThread()) != NULL) {\n+\t\t_javaVM->internalVMFunctions->J9SignalAsyncEvent(_javaVM, walkThread, _flushCachesAsyncCallbackKey);", "originalCommit": "efbcd94e91c528974bf543ed266cba67f3cb518f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "000268783f58ac4da6c1131ec369821d54afc282", "url": "https://github.com/eclipse-openj9/openj9/commit/000268783f58ac4da6c1131ec369821d54afc282", "message": "Async handler for Concurrent Scavenger\n\nIntroduced an Async handler that will be later used by CS to force\nmutator thread to promptly flush its copy cache to the scan queue. The\nhandler is to be activated toward the end of CS cycle when scan queue is\nempty (yet to be implemented).\n\nAlso, GC registered for two VM hooks, that will help mutator threads\nflush their copy caches by themselves\n\nThe async handler and hooks are empty at the moment, but will eventually\ncall a flush-copy-cash method this is yet to be introduced.\n\nThe only functional change is: moved VMAccess release hook trigger in\nJNICriticalRegion::releaseAccess() to an earlier point to be consistent\nwith internalReleaseVMAccessNoMutexNoCheck\n\nMinor cleanup: cached J9VMThread in EnvironmentDelegate, since it's\nre-fetched about a dozen of times at various spots.\n\nSome background: https://github.com/eclipse/omr/issues/4787\n\nSigned-off-by: Aleksandar Micic <amicic@ca.ibm.com>", "committedDate": "2020-01-31T15:51:50Z", "type": "forcePushed"}, {"oid": "3531b2bdcc99584b1d4d60bb13df6ba99a0861dc", "url": "https://github.com/eclipse-openj9/openj9/commit/3531b2bdcc99584b1d4d60bb13df6ba99a0861dc", "message": "Async handler for Concurrent Scavenger\n\nIntroduced an Async handler that will be later used by CS to force\nmutator thread to promptly flush its copy cache to the scan queue. The\nhandler is to be activated toward the end of CS cycle when scan queue is\nempty (yet to be implemented).\n\nAlso, GC registered for two VM hooks, that will help mutator threads\nflush their copy caches by themselves\n\nThe async handler and hooks are empty at the moment, but will eventually\ncall a flush-copy-cash method this is yet to be introduced.\n\nThe only functional change is: moved VMAccess release hook trigger in\nJNICriticalRegion::releaseAccess() to an earlier point to be consistent\nwith internalReleaseVMAccessNoMutexNoCheck\n\nMinor cleanup: cached J9VMThread in EnvironmentDelegate, since it's\nre-fetched about a dozen of times at various spots.\n\nSome background: https://github.com/eclipse/omr/issues/4787\n\nSigned-off-by: Aleksandar Micic <amicic@ca.ibm.com>", "committedDate": "2020-01-31T15:55:40Z", "type": "commit"}, {"oid": "3531b2bdcc99584b1d4d60bb13df6ba99a0861dc", "url": "https://github.com/eclipse-openj9/openj9/commit/3531b2bdcc99584b1d4d60bb13df6ba99a0861dc", "message": "Async handler for Concurrent Scavenger\n\nIntroduced an Async handler that will be later used by CS to force\nmutator thread to promptly flush its copy cache to the scan queue. The\nhandler is to be activated toward the end of CS cycle when scan queue is\nempty (yet to be implemented).\n\nAlso, GC registered for two VM hooks, that will help mutator threads\nflush their copy caches by themselves\n\nThe async handler and hooks are empty at the moment, but will eventually\ncall a flush-copy-cash method this is yet to be introduced.\n\nThe only functional change is: moved VMAccess release hook trigger in\nJNICriticalRegion::releaseAccess() to an earlier point to be consistent\nwith internalReleaseVMAccessNoMutexNoCheck\n\nMinor cleanup: cached J9VMThread in EnvironmentDelegate, since it's\nre-fetched about a dozen of times at various spots.\n\nSome background: https://github.com/eclipse/omr/issues/4787\n\nSigned-off-by: Aleksandar Micic <amicic@ca.ibm.com>", "committedDate": "2020-01-31T15:55:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NzUwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r373897508", "bodyText": "This can be achieved by passing NULL as the thread to J9SignalAsyncEvent - it will do the locking and signal all threads.", "author": "gacholio", "createdAt": "2020-02-03T01:57:45Z", "path": "runtime/gc_glue_java/ScavengerDelegate.cpp", "diffHunk": "@@ -714,6 +733,31 @@ MM_ScavengerDelegate::switchConcurrentForThread(MM_EnvironmentBase *env)\n #endif\n     }\n }\n+\n+void\n+MM_ScavengerDelegate::signalThreadsToFlushCaches(MM_EnvironmentBase *envBase)\n+{\n+\tJ9InternalVMFunctions const * const vmFuncs = _javaVM->internalVMFunctions;\n+\tJ9VMThread *walkThread = NULL;\n+\n+\tGC_VMThreadListIterator vmThreadListIterator(_javaVM);\n+\n+\tGC_VMInterface::lockVMThreadList(_extensions);", "originalCommit": "3531b2bdcc99584b1d4d60bb13df6ba99a0861dc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NjE2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8448#discussion_r374166167", "bodyText": "I will add more per-thread action than just signal threads in this loop, so I'd rather leave it as is. Again, with some other stub code in this PR, it's waiting for dependent OMR changes, before I can invoke it here.", "author": "amicic", "createdAt": "2020-02-03T15:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NzUwOA=="}], "type": "inlineReview"}]}