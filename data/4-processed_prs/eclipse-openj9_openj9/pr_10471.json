{"pr_number": 10471, "pr_title": "Hidden class implementation 4", "pr_createdAt": "2020-08-27T15:21:15Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10471", "timeline": [{"oid": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "url": "https://github.com/eclipse-openj9/openj9/commit/d41a1026b661ba8dd66f27bd747bee823d6cc854", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-27T15:27:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMzY2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479303669", "bodyText": "This duplicates the walk to get to the base component type.  Could the if (clazz.isHidden()) { check be moved after the existing loop to get the baseType?", "author": "DanHeidinga", "createdAt": "2020-08-28T13:43:50Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3494,7 +3496,14 @@ else if (!fullName.endsWith(simpleName)) {\n  */\n public String getCanonicalName() {\n /*[IF Java15]*/\n-\tif (isHidden()) {\n+\tClass<?> clazz = this;\n+\tif (isArray()) {\n+\t\tclazz = getComponentType();\n+\t\twhile (clazz.isArray()) {\n+\t\t\tclazz = clazz.getComponentType();\n+\t\t}\n+\t}", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMjY1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479412651", "bodyText": "Right, I didn't notice the following code is doing the same thing. It is fixed.", "author": "hangshao0", "createdAt": "2020-08-28T16:31:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwMzY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxMzIxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479313217", "bodyText": "Can you add a comment to the method overall that indicates this needs to be kept in sync with the version in Class.java?\nEventually we should get rid of the duplication.... but a comment will cover this PR", "author": "DanHeidinga", "createdAt": "2020-08-28T13:54:01Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodType.java", "diffHunk": "@@ -1172,7 +1172,20 @@ static String getBytecodeStringName(Class<?> c){\n \t\t\t\treturn \"S\"; //$NON-NLS-1$\n \t\t\t}\n \t\t}\n+\t\tClass<?> clazz = c;", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMzU5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479413595", "bodyText": "Comment added.", "author": "hangshao0", "createdAt": "2020-08-28T16:32:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxMzIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNzAxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479317014", "bodyText": "This needs a null check on the return value", "author": "DanHeidinga", "createdAt": "2020-08-28T13:58:02Z", "path": "runtime/bcutil/ClassFileOracle.cpp", "diffHunk": "@@ -540,6 +552,33 @@ ClassFileOracle::walkAttributes()\n \t}\n }\n \n+void\n+ClassFileOracle::checkHiddenClass()\n+{\n+\tROMClassVerbosePhase v(_context, ClassFileAttributesAnalysis);\n+\t/* Hidden Class cannot be a record or enum. */\n+\tU_16 superClassNameIndex = getSuperClassNameIndex();\n+\tbool isEnum = false;\n+\tif (0 != superClassNameIndex) {\n+\t\tisEnum = J9_ARE_ALL_BITS_SET(_classFile->accessFlags, CFR_ACC_ENUM) && \n+\t\tJ9UTF8_DATA_EQUALS(getUTF8Data(superClassNameIndex), getUTF8Length(superClassNameIndex), \"java/lang/Enum\", 14) &&\n+\t\t/* See test case jdk/java/lang/invoke/defineHiddenClass/BasicTest.emptyHiddenClass().\n+\t\t * A normal Enum cannot be defined as hidden class. But an empty enum class that does not\n+\t\t * define constants of its type can still be defined as a hidden class. \n+\t\t * So add a check for field count. */\n+\t\t(getFieldsCount() > 0);\n+\t}\n+\tif (_isRecord  || isEnum) {\n+\t\tPORT_ACCESS_FROM_PORT(_context->portLibrary());\n+\t\tchar msg[] = \"Hidden Class cannot be a record or enum\";\n+\t\tUDATA len = sizeof(msg);\n+\t\tchar *error = (char *) j9mem_allocate_memory(len, J9MEM_CATEGORY_CLASSES);", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMjc0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479412747", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-08-28T16:31:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNzAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxODkwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479318908", "bodyText": "Can avoid the hardcoded constant (and doing the math) by using the LITERAL_STRLEN macro\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tJ9UTF8_DATA_EQUALS(getUTF8Data(superClassNameIndex), getUTF8Length(superClassNameIndex), \"java/lang/Enum\", 14) &&\n          \n          \n            \n            \t\tJ9UTF8_DATA_EQUALS(getUTF8Data(superClassNameIndex), getUTF8Length(superClassNameIndex), \"java/lang/Enum\", LITERAL_STRLEN(\"java/lang/Enum\")) &&", "author": "DanHeidinga", "createdAt": "2020-08-28T14:00:00Z", "path": "runtime/bcutil/ClassFileOracle.cpp", "diffHunk": "@@ -540,6 +552,33 @@ ClassFileOracle::walkAttributes()\n \t}\n }\n \n+void\n+ClassFileOracle::checkHiddenClass()\n+{\n+\tROMClassVerbosePhase v(_context, ClassFileAttributesAnalysis);\n+\t/* Hidden Class cannot be a record or enum. */\n+\tU_16 superClassNameIndex = getSuperClassNameIndex();\n+\tbool isEnum = false;\n+\tif (0 != superClassNameIndex) {\n+\t\tisEnum = J9_ARE_ALL_BITS_SET(_classFile->accessFlags, CFR_ACC_ENUM) && \n+\t\tJ9UTF8_DATA_EQUALS(getUTF8Data(superClassNameIndex), getUTF8Length(superClassNameIndex), \"java/lang/Enum\", 14) &&", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMzEyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479413121", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-08-28T16:31:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxODkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMjI3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479322279", "bodyText": "Formatting nitpick - comment closer */ should line up with the other comment line starters\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t/* isRAMClassCompatible() cannot find ram class of a hidden class, we are testing if \n          \n          \n            \n            \t\t\t * the source class is the subclass of target class. We can use superclass of source class instead here. */\n          \n          \n            \n            \t\t\t/* isRAMClassCompatible() cannot find ram class of a hidden class, we are testing if \n          \n          \n            \n            \t\t\t * the source class is the subclass of target class. We can use superclass of source class instead here. \n          \n          \n            \n            \t\t\t */", "author": "DanHeidinga", "createdAt": "2020-08-28T14:03:31Z", "path": "runtime/bcverify/vrfyhelp.c", "diffHunk": "@@ -579,6 +579,19 @@ isClassCompatible(J9BytecodeVerificationData *verifyData, UDATA sourceClass, UDA\n \tif (NULL != verifyData->vmStruct->currentException) {\n \t\treturn (IDATA) FALSE;\n \t}\n+\t\n+\tif (J9ROMCLASS_IS_HIDDEN(verifyData->romClass)) {\t\n+\t\tJ9UTF8* className = J9ROMCLASS_CLASSNAME(verifyData->romClass);\n+\t\tif (sourceLength == J9UTF8_LENGTH(className)\n+\t\t\t&& (0 == strncmp(sourceName, J9UTF8_DATA(className), sourceLength))\n+\t\t) {\n+\t\t\t/* isRAMClassCompatible() cannot find ram class of a hidden class, we are testing if \n+\t\t\t * the source class is the subclass of target class. We can use superclass of source class instead here. */", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMzY4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479413688", "bodyText": "Fixed", "author": "hangshao0", "createdAt": "2020-08-28T16:33:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMjI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzA1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479323057", "bodyText": "Can a hidden class extend a hidden class?  I think not as it won't be findable to tell if the superclass has been loaded or not.  Assuming I'm right on that, can you add a comment to that effect here?", "author": "DanHeidinga", "createdAt": "2020-08-28T14:04:21Z", "path": "runtime/bcverify/vrfyhelp.c", "diffHunk": "@@ -579,6 +579,19 @@ isClassCompatible(J9BytecodeVerificationData *verifyData, UDATA sourceClass, UDA\n \tif (NULL != verifyData->vmStruct->currentException) {\n \t\treturn (IDATA) FALSE;\n \t}\n+\t\n+\tif (J9ROMCLASS_IS_HIDDEN(verifyData->romClass)) {\t\n+\t\tJ9UTF8* className = J9ROMCLASS_CLASSNAME(verifyData->romClass);\n+\t\tif (sourceLength == J9UTF8_LENGTH(className)\n+\t\t\t&& (0 == strncmp(sourceName, J9UTF8_DATA(className), sourceLength))\n+\t\t) {\n+\t\t\t/* isRAMClassCompatible() cannot find ram class of a hidden class, we are testing if ", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQwMDMxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479400311", "bodyText": "I agree with you. I don't think a class can extend a hidden class.", "author": "hangshao0", "createdAt": "2020-08-28T16:08:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxMzg3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479413879", "bodyText": "Comment added.", "author": "hangshao0", "createdAt": "2020-08-28T16:33:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyMzA1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNDM4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479324388", "bodyText": "Why throw internal error if there's a perfectly good exception already pending?", "author": "DanHeidinga", "createdAt": "2020-08-28T14:05:50Z", "path": "runtime/jcl/common/clsldr.cpp", "diffHunk": "@@ -116,9 +116,12 @@ Java_java_lang_ClassLoader_defineClassImpl1(JNIEnv *env, jobject receiver, jclas\n \n \tjclass result = defineClassCommon(env, receiver, className, classRep, 0, length, protectionDomain, &options, hostClazz, NULL, FALSE);\n \tif (env->ExceptionCheck()) {\n+\t\tthrowNewInternalError(env, NULL);", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNTIxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479415219", "bodyText": "I added this when debugging some tests where we missed to set an exception. This should be removed and it is removed now.", "author": "hangshao0", "createdAt": "2020-08-28T16:36:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNDM4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNTM5MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479325390", "bodyText": "How did we get out of defineClass without a pending exception?  I think we need to find that path and ensure it sets an exception as required by the contract for defineClassCommon - either a class is found or it returns null with pending exception", "author": "DanHeidinga", "createdAt": "2020-08-28T14:06:57Z", "path": "runtime/jcl/common/clsldr.cpp", "diffHunk": "@@ -116,9 +116,12 @@ Java_java_lang_ClassLoader_defineClassImpl1(JNIEnv *env, jobject receiver, jclas\n \n \tjclass result = defineClassCommon(env, receiver, className, classRep, 0, length, protectionDomain, &options, hostClazz, NULL, FALSE);\n \tif (env->ExceptionCheck()) {\n+\t\tthrowNewInternalError(env, NULL);\n \t\treturn NULL;\n \t} else if (NULL == result) {\n-\t\tthrowNewInternalError(env, NULL);\n+\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\t\tvmFuncs->setCurrentException(currentThread, J9VMCONSTANTPOOL_JAVALANGNOCLASSDEFFOUNDERROR, (UDATA *)*(j9object_t *)className);", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNTY2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479415668", "bodyText": "It is fixed now. Directly return NULL when result is NULL.", "author": "hangshao0", "createdAt": "2020-08-28T16:37:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMyNTM5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMzNzEyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479337127", "bodyText": "Is this meant to always return null for the hidden classes simple name?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tJ9UTF8 *simpleNameUTF = NULL;\n          \n          \n            \n            \t\tif (!J9ROMCLASS_IS_HIDDEN(romClass)) {\n          \n          \n            \n            \t\t\t/* hidden simple name of a hidden class */\n          \n          \n            \n            \t\t\tsimpleNameUTF = getSimpleNameForROMClass(_vm, receiverClazz->classLoader, romClass);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tif (NULL != simpleNameUTF) {\n          \n          \n            \n            \t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n          \n          \n            \n            \t\t\tupdateVMStruct(REGISTER_ARGS);\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\tif (!J9ROMCLASS_IS_HIDDEN(romClass)) {\n          \n          \n            \n            \t\t\tJ9UTF8 *simpleNameUTF = getSimpleNameForROMClass(_vm, receiverClazz->classLoader, romClass);\n          \n          \n            \n            \t\t\tif (NULL != simpleNameUTF) {\n          \n          \n            \n            \t\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n          \n          \n            \n            \t\t\t\tupdateVMStruct(REGISTER_ARGS);\n          \n          \n            \n            \t\t\t\t.....\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}", "author": "DanHeidinga", "createdAt": "2020-08-28T14:20:07Z", "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -2806,7 +2806,11 @@ class INTERPRETER_CLASS\n \t\tJ9Class *receiverClazz = J9VM_J9CLASS_FROM_HEAPCLASS(_currentThread, *(j9object_t*)_sp);\n \t\tj9object_t simpleName = NULL;\n \t\tJ9ROMClass *romClass = receiverClazz->romClass;\n-\t\tJ9UTF8 *simpleNameUTF = getSimpleNameForROMClass(_vm, receiverClazz->classLoader, romClass);\n+\t\tJ9UTF8 *simpleNameUTF = NULL;\n+\t\tif (!J9ROMCLASS_IS_HIDDEN(romClass)) {\n+\t\t\t/* hidden simple name of a hidden class */\n+\t\t\tsimpleNameUTF = getSimpleNameForROMClass(_vm, receiverClazz->classLoader, romClass);\n+\t\t}\n \t\tif (NULL != simpleNameUTF) {\n \t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n \t\t\tupdateVMStruct(REGISTER_ARGS);", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNjE1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479416159", "bodyText": "Yes, always return null for the hidden classes simple name. Fixed as suggested.", "author": "hangshao0", "createdAt": "2020-08-28T16:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMzNzEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMzODY2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479338663", "bodyText": "Isn't this already covered by the J9CLASS_IS_EXEMPT_FROM_VALIDATION macro?\n\n#define J9CLASS_IS_EXEMPT_FROM_VALIDATION(clazz) \\\n\t((J9ROMCLASS_IS_UNSAFE((clazz)->romClass) && !J9ROMCLASS_IS_HIDDEN((clazz)->romClass)) || (J9_ARE_ANY_BITS_SET((clazz)->classFlags, J9ClassIsExemptFromValidation)))", "author": "DanHeidinga", "createdAt": "2020-08-28T14:22:43Z", "path": "runtime/vm/ClassInitialization.cpp", "diffHunk": "@@ -157,12 +157,11 @@ performVerification(J9VMThread *currentThread, J9Class *clazz)\n \t\t/* See if this class should be verified:\n \t\t *\n \t\t * - Do not verify any class created by sun.misc.Unsafe\n-\t\t * - Do not verify hidden classes\n \t\t * - Do not verify any class which is marked for exclusion in the optional flags\n \t\t * - Verify every class whose bytecodes have been modified\n \t\t * - Do not verify bootstrap classes if the appropriate runtime flag is set\n \t\t */\n-\t\tif (((!J9CLASS_IS_EXEMPT_FROM_VALIDATION(clazz)) && !J9ROMCLASS_IS_HIDDEN(romClass))\n+\t\tif ((!J9CLASS_IS_EXEMPT_FROM_VALIDATION(clazz))", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4OTEzOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479389139", "bodyText": "For hidden class, this macro returns FALSE.  so\nThe original code !J9CLASS_IS_EXEMPT_FROM_VALIDATION(clazz) && !J9ROMCLASS_IS_HIDDEN(romClass)\nis TRUE && FLASE = FALSE.\nRemoving && !J9ROMCLASS_IS_HIDDEN(romClass), this condition becomes TRUE.", "author": "hangshao0", "createdAt": "2020-08-28T15:48:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMzODY2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MzQxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479343417", "bodyText": "Is this a general case we've been missing?  That applies across all releases?", "author": "DanHeidinga", "createdAt": "2020-08-28T14:30:21Z", "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1719,6 +1719,15 @@ loadSuperClassAndInterfaces(J9VMThread *vmThread, J9ClassLoader *classLoader, J9\n \n \t\t\t\tfor (i = 0; i<romClass->interfaceCount; i++) {\n \t\t\t\t\tJ9UTF8 *interfaceName = NNSRP_GET(interfaceNames[i], J9UTF8*);\n+\t\t\t\t\t\n+\t\t\t\t\tif (0 == compareUTF8Length(J9UTF8_DATA(interfaceName), J9UTF8_LENGTH(interfaceName),", "originalCommit": "d41a1026b661ba8dd66f27bd747bee823d6cc854", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM4NjU0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479386542", "bodyText": "Yes, I think it is a general case we are missing. A class implements an interface the same as its own name.", "author": "hangshao0", "createdAt": "2020-08-28T15:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MzQxNw=="}], "type": "inlineReview"}, {"oid": "113564943f098dce37da063472d5b5e6d3ec6c11", "url": "https://github.com/eclipse-openj9/openj9/commit/113564943f098dce37da063472d5b5e6d3ec6c11", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-28T15:52:09Z", "type": "forcePushed"}, {"oid": "82390ddd617cdf5d53fb691d78f6b17661859dcb", "url": "https://github.com/eclipse-openj9/openj9/commit/82390ddd617cdf5d53fb691d78f6b17661859dcb", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-28T16:29:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479434024", "bodyText": "Why is this being done here rather than in cfreader?  Do we not have the context there?  Could we get it by passing another flag thru?", "author": "DanHeidinga", "createdAt": "2020-08-28T17:13:12Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2368,21 +2377,107 @@ private ClassDefiner classDefiner(byte[] bytes, ClassOption... classOptions) thr\n \t\t\t\tthrow new IllegalAccessException();\n \t\t\t}\n \n+\t\t\tint flags = 0;\n+\t\t\tfor (ClassOption opt : classOptions) {\n+\t\t\t\tflags |= opt.toFlag();\n+\t\t\t}\n+\t\t\tString targetClassName = getClassNameAndCheckClassBytes(bytes);\n+\t\t\treturn makeHiddenClassDefiner(targetClassName, bytes, flags);\n+\t\t\t\n+\t\t}\n+\t\t\n+\t\tprivate static int readShortFromByteArray(byte[] bytes, int offset) {\n+\t\t\tif ((offset + 2) <= bytes.length) {\n+\t\t\t\treturn Short.toUnsignedInt(ByteBuffer.wrap(bytes).getShort(offset));\n+\t\t\t} else {\n+\t\t\t\tthrow new ArrayIndexOutOfBoundsException();\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\tprivate static int readIntFromByteArray(byte[] bytes, int offset) {\n+\t\t\tif ((offset + 4) <= bytes.length) {\n+\t\t\t\treturn ByteBuffer.wrap(bytes).getInt(offset);\n+\t\t\t} else {\n+\t\t\t\tthrow new ArrayIndexOutOfBoundsException();\n+\t\t\t}\n+\t\t}\n+\t\tprivate String getClassNameAndCheckClassBytes(byte[] bytes) {", "originalCommit": "82390ddd617cdf5d53fb691d78f6b17661859dcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ0MzY2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479443667", "bodyText": "The checks added here (and their order) are all forced by hidden class tests, they expect certain type of exception/error. I think ClassReader is doing checks differently (or maybe in different order), using ClassReader results a different type of exception/error, which makes those tests fail.", "author": "hangshao0", "createdAt": "2020-08-28T17:32:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NzA1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479457050", "bodyText": "I would rather this logic stay in the native cfreader.c implementation then duplicate it here as well.  Even if that means making additional native calls to do the processing with cfreader.", "author": "DanHeidinga", "createdAt": "2020-08-28T18:01:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1ODA5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479458093", "bodyText": "Ahh, I see. You mean cfreader.c", "author": "hangshao0", "createdAt": "2020-08-28T18:03:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTUwNTQ3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479505474", "bodyText": "We may move the magicNum and version checks into cfreader.c, and call the native from here. I guess other checks like the descriptor of this class and whether this class is in the same package as the host class can still be here in the java level. All these checks are in java level here in RI.", "author": "hangshao0", "createdAt": "2020-08-28T19:52:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM5OTU5Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r480399592", "bodyText": "Moved the magic number and class version checks into cfreader.c.", "author": "hangshao0", "createdAt": "2020-08-31T21:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzNDAyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NjMxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r479456311", "bodyText": "Why does this need the name here?  Can we pass the bytes thru to native cfreader.c implementation and let it handle the checks?", "author": "DanHeidinga", "createdAt": "2020-08-28T17:59:57Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2368,21 +2377,107 @@ private ClassDefiner classDefiner(byte[] bytes, ClassOption... classOptions) thr\n \t\t\t\tthrow new IllegalAccessException();\n \t\t\t}\n \n+\t\t\tint flags = 0;\n+\t\t\tfor (ClassOption opt : classOptions) {\n+\t\t\t\tflags |= opt.toFlag();\n+\t\t\t}\n+\t\t\tString targetClassName = getClassNameAndCheckClassBytes(bytes);\n+\t\t\treturn makeHiddenClassDefiner(targetClassName, bytes, flags);", "originalCommit": "82390ddd617cdf5d53fb691d78f6b17661859dcb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDQwMjY0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r480402641", "bodyText": "Why does this need the name here?\n\nBecause the new API JavaLangAccess.defineClass() added by openjdk to define hidden class takes className as a parameter, so we pass className to makeHiddenClassDefiner() which eventually calls JavaLangAccess.defineClass().\nThe checks for magic number and class version are moved into cfreader.c.", "author": "hangshao0", "createdAt": "2020-08-31T21:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQ1NjMxMQ=="}], "type": "inlineReview"}, {"oid": "e6db633728dd6fbd454e584fcc0114375949c410", "url": "https://github.com/eclipse-openj9/openj9/commit/e6db633728dd6fbd454e584fcc0114375949c410", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T20:30:44Z", "type": "forcePushed"}, {"oid": "34a4d698c1c5cc60de27a7eb26f610e6e2274878", "url": "https://github.com/eclipse-openj9/openj9/commit/34a4d698c1c5cc60de27a7eb26f610e6e2274878", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T20:33:58Z", "type": "forcePushed"}, {"oid": "9f8c15bd9337868541d988b2a0f45cae9c211774", "url": "https://github.com/eclipse-openj9/openj9/commit/9f8c15bd9337868541d988b2a0f45cae9c211774", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T20:34:58Z", "type": "forcePushed"}, {"oid": "01a427744a8e590491b322ef45e6a107b06974fd", "url": "https://github.com/eclipse-openj9/openj9/commit/01a427744a8e590491b322ef45e6a107b06974fd", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T21:03:48Z", "type": "forcePushed"}, {"oid": "ab6f166d97f2348497da5087a3b0ac64d12829f8", "url": "https://github.com/eclipse-openj9/openj9/commit/ab6f166d97f2348497da5087a3b0ac64d12829f8", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T21:06:09Z", "type": "forcePushed"}, {"oid": "9e22b5d7840ba89a3a27cbf3741678ba6b7d5786", "url": "https://github.com/eclipse-openj9/openj9/commit/9e22b5d7840ba89a3a27cbf3741678ba6b7d5786", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-31T22:36:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0MDcyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r480640722", "bodyText": "Inconsistent comment formatting - please combine them.", "author": "gacholio", "createdAt": "2020-09-01T02:44:34Z", "path": "jcl/src/java.base/share/classes/java/lang/Class.java", "diffHunk": "@@ -3428,8 +3428,10 @@ public String getSimpleName() {\n \tString simpleName = baseType.getSimpleNameImpl();\n \tString fullName = baseType.getName();\n \tif (simpleName == null) {\n-\t\tClass<?> parent = baseType.getEnclosingObjectClass();\n-\t\t// either a base class, or anonymous class\n+\t\t// either a base class, or anonymous class, or hidden class", "originalCommit": "9e22b5d7840ba89a3a27cbf3741678ba6b7d5786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyODQ3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481228473", "bodyText": "Comments combined.", "author": "hangshao0", "createdAt": "2020-09-01T15:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0MDcyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0ODg1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r480648858", "bodyText": "Some kind of indenting is called for here.", "author": "gacholio", "createdAt": "2020-09-01T02:50:29Z", "path": "runtime/bcutil/ClassFileOracle.cpp", "diffHunk": "@@ -540,6 +552,35 @@ ClassFileOracle::walkAttributes()\n \t}\n }\n \n+void\n+ClassFileOracle::checkHiddenClass()\n+{\n+\tROMClassVerbosePhase v(_context, ClassFileAttributesAnalysis);\n+\t/* Hidden Class cannot be a record or enum. */\n+\tU_16 superClassNameIndex = getSuperClassNameIndex();\n+\tbool isEnum = false;\n+\tif (0 != superClassNameIndex) {\n+\t\tisEnum = J9_ARE_ALL_BITS_SET(_classFile->accessFlags, CFR_ACC_ENUM) && \n+\t\tJ9UTF8_DATA_EQUALS(getUTF8Data(superClassNameIndex), getUTF8Length(superClassNameIndex), \"java/lang/Enum\", LITERAL_STRLEN(\"java/lang/Enum\")) &&", "originalCommit": "9e22b5d7840ba89a3a27cbf3741678ba6b7d5786", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0OTY5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r480649694", "bodyText": "I'd much prefer that the comments not appear inside the if condition.", "author": "gacholio", "createdAt": "2020-09-01T02:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0ODg1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTIyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481229222", "bodyText": "Fixed indenting and moved the comment outside of the if check.", "author": "hangshao0", "createdAt": "2020-09-01T15:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDY0ODg1OA=="}], "type": "inlineReview"}, {"oid": "a3f2ce68cadf46f080d444acdba9c9aaa0c488ba", "url": "https://github.com/eclipse-openj9/openj9/commit/a3f2ce68cadf46f080d444acdba9c9aaa0c488ba", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-01T15:22:21Z", "type": "forcePushed"}, {"oid": "5fc4a412b471d86489728ad70f58029344781e43", "url": "https://github.com/eclipse-openj9/openj9/commit/5fc4a412b471d86489728ad70f58029344781e43", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-01T15:23:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzMDEzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481230137", "bodyText": "This file must end with a newline.", "author": "gacholio", "createdAt": "2020-09-01T15:26:48Z", "path": "runtime/bcutil/j9bcu.tdf", "diffHunk": "@@ -377,4 +377,5 @@ TraceEvent=Trc_BCU_compareROMClassForEquality_event NoEnv Overhead=1 Level=7 Tem\n \n TraceAssert=Trc_BCU_Assert_True_Level1 NoEnv Overhead=1 Level=1 Assert=\"(P1)\"\n \n-TraceEvent=Trc_BCU_ClassFileOracle_walkRecordComponents_UnknownAttribute Noenv Overhead=1 Level=3 Template=\"BCU ClassFileOracle::walkRecordComponents: Unknown attribute tag=%d name=%.*s length=%d\"\n\\ No newline at end of file\n+TraceEvent=Trc_BCU_ClassFileOracle_walkRecordComponents_UnknownAttribute Noenv Overhead=1 Level=3 Template=\"BCU ClassFileOracle::walkRecordComponents: Unknown attribute tag=%d name=%.*s length=%d\"\n+TraceExit=Trc_BCU_j9bcutil_readClassFileBytes_Basic_Check_Exit NoEnv Overhead=1 Level=3 Template=\"BCU j9bcutil_readClassFileBytes: exiting with result=%d\" ", "originalCommit": "5fc4a412b471d86489728ad70f58029344781e43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NjY1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481456653", "bodyText": "This file didn't end with a newline. I added a newline at the end.", "author": "hangshao0", "createdAt": "2020-09-01T22:01:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzMDEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzMTMyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481231321", "bodyText": "Please reverse this code (i.e. do not use if (!something) then else).", "author": "gacholio", "createdAt": "2020-09-01T15:28:24Z", "path": "runtime/bcverify/vrfyhelp.c", "diffHunk": "@@ -1018,9 +1042,19 @@ isProtectedAccessPermitted(J9BytecodeVerificationData *verifyData, J9UTF8* decla\n \n \t\t\t\t/* Determine if the targetRamClass is the same class or a sub class of the current class */\n \t\t\t\t/* flipped logic - currentRamClass is the same class or a super class of the target class */\n-\t\t\t\tif (!isSameOrSuperClassOf (currentRamClass, targetRamClass)) {\n-\t\t\t\t\t/* fail */\n-\t\t\t\t\treturn FALSE;\n+\t\t\t\tif (!J9ROMCLASS_IS_HIDDEN(romClass)) {", "originalCommit": "5fc4a412b471d86489728ad70f58029344781e43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NjY5Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481456696", "bodyText": "Fixed", "author": "hangshao0", "createdAt": "2020-09-01T22:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIzMTMyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODk1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481248955", "bodyText": "Should probably update j9clazz here to be the most current version if initializeClass is called.\nj9clazz = J9_CURRENT_CLASS(j9clazz);", "author": "gacholio", "createdAt": "2020-09-01T15:54:30Z", "path": "runtime/jcl/common/clsldr.cpp", "diffHunk": "@@ -128,16 +125,20 @@ Java_java_lang_ClassLoader_defineClassImpl1(JNIEnv *env, jobject receiver, jclas\n \t\tJ9VMJAVALANGCLASS_SET_CLASSDATA(currentThread, resultClassObject, classDataObject);\n \t}\n \n+\t\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);\n+\tj9object_t classObject = J9_JNI_UNWRAP_REFERENCE(result);\n+\tJ9Class *j9clazz =  J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, classObject);\n \tif (init) {\n-\t\tvmFuncs->internalEnterVMFromJNI(currentThread);\n-\t\tj9object_t classObject = J9_JNI_UNWRAP_REFERENCE(result);\n-\t\tJ9Class *j9clazz =  J9VM_J9CLASS_FROM_HEAPCLASS(currentThread, classObject);\n \t\tif (VM_VMHelpers::classRequiresInitialization(currentThread, j9clazz)) {\n \t\t\tvmFuncs->initializeClass(currentThread, j9clazz);\n \t\t}\n-\t\tvmFuncs->internalExitVMToJNI(currentThread);", "originalCommit": "5fc4a412b471d86489728ad70f58029344781e43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NzI5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481457294", "bodyText": "Added this line after initializeClass().", "author": "hangshao0", "createdAt": "2020-09-01T22:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0ODk1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0OTYyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481249621", "bodyText": "This won't work for discontiguous arrays.", "author": "gacholio", "createdAt": "2020-09-01T15:55:27Z", "path": "runtime/jcl/common/java_dyn_methodhandle.c", "diffHunk": "@@ -1045,3 +1045,14 @@ clearNonZAAPEligibleBit(JNIEnv *env, jclass nativeClass, const JNINativeMethod *\n \tvmFuncs->internalExitVMToJNI(vmThread);\n }\n #endif /* J9VM_OPT_JAVA_OFFLOAD_SUPPORT */\n+\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL\n+Java_java_lang_invoke_MethodHandleNatives_checkClassBytes(JNIEnv *env, jclass jlClass, jbyteArray classRep, jint length)\n+{\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9InternalVMFunctions *vmFuncs = currentThread->javaVM->internalVMFunctions;\n+\tU_8* classBytes = (U_8*) TMP_J9JAVACONTIGUOUSARRAYOFBYTE_EA(currentThread, *(J9IndexableObject **)classRep, 0);", "originalCommit": "5fc4a412b471d86489728ad70f58029344781e43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1Nzg5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481357893", "bodyText": "In fact, it won't work at all (you're assuming you have VM access in a normal JNI native). Please use JNI critical instead. This will require changing checkClassBytes to not throw the exception (have a return code instead).", "author": "gacholio", "createdAt": "2020-09-01T18:49:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0OTYyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NzU4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481457580", "bodyText": "Updated to use GetPrimitiveArrayCritical().", "author": "hangshao0", "createdAt": "2020-09-01T22:03:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI0OTYyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MzMyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481253322", "bodyText": "This comment is odd - perhaps expliciity say that hidden classes simple name is NULL.", "author": "gacholio", "createdAt": "2020-09-01T15:59:39Z", "path": "runtime/vm/BytecodeInterpreter.hpp", "diffHunk": "@@ -2806,18 +2806,21 @@ class INTERPRETER_CLASS\n \t\tJ9Class *receiverClazz = J9VM_J9CLASS_FROM_HEAPCLASS(_currentThread, *(j9object_t*)_sp);\n \t\tj9object_t simpleName = NULL;\n \t\tJ9ROMClass *romClass = receiverClazz->romClass;\n-\t\tJ9UTF8 *simpleNameUTF = getSimpleNameForROMClass(_vm, receiverClazz->classLoader, romClass);\n-\t\tif (NULL != simpleNameUTF) {\n-\t\t\tbuildInternalNativeStackFrame(REGISTER_ARGS);\n-\t\t\tupdateVMStruct(REGISTER_ARGS);\n-\t\t\tsimpleName = _vm->memoryManagerFunctions->j9gc_createJavaLangString(_currentThread, J9UTF8_DATA(simpleNameUTF), J9UTF8_LENGTH(simpleNameUTF), 0);\n-\t\t\tVMStructHasBeenUpdated(REGISTER_ARGS);\n-\t\t\treleaseOptInfoBuffer(_vm, romClass);\n-\t\t\tif (NULL == simpleName) {\n-\t\t\t\trc = GOTO_THROW_CURRENT_EXCEPTION;\n-\t\t\t\tgoto done;\n+\t\t/* hidden simple name of a hidden class */", "originalCommit": "5fc4a412b471d86489728ad70f58029344781e43", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ1NzY2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r481457665", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-09-01T22:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI1MzMyMg=="}], "type": "inlineReview"}, {"oid": "39085ee7ca83d2aa165a9aeb6bddad555cbe6cc0", "url": "https://github.com/eclipse-openj9/openj9/commit/39085ee7ca83d2aa165a9aeb6bddad555cbe6cc0", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-01T21:55:29Z", "type": "forcePushed"}, {"oid": "5197a29f13c575c81dce1eb9fc2fdc43a6c0c5f5", "url": "https://github.com/eclipse-openj9/openj9/commit/5197a29f13c575c81dce1eb9fc2fdc43a6c0c5f5", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-01T22:23:08Z", "type": "forcePushed"}, {"oid": "6237234c3175d59757e94e665c45c1118e286e64", "url": "https://github.com/eclipse-openj9/openj9/commit/6237234c3175d59757e94e665c45c1118e286e64", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T14:57:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDcwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482200709", "bodyText": "Now that there's no real code in the forwarder, would it make sense to just make checkClassBytes native?", "author": "gacholio", "createdAt": "2020-09-02T16:24:06Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandleNatives.java", "diffHunk": "@@ -86,6 +86,12 @@ static boolean refKindIsConstructor(byte kind) {\n \tstatic Object classData(Class<?> c) {\n \t\treturn JLA.classData(c);\n \t}\n+\n+\tprivate native static void checkClassBytesImpl(byte[] bytes);", "originalCommit": "6237234c3175d59757e94e665c45c1118e286e64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNDc2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482204766", "bodyText": "On second thought, how about moving the null and size = 0 check into the java wrapper code and remove it from the native code.", "author": "gacholio", "createdAt": "2020-09-02T16:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIxNDUzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482214531", "bodyText": "Actually, since you're already fetching the length in the native (for more than just the 0 check), it may as well stay in the native.", "author": "gacholio", "createdAt": "2020-09-02T16:46:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDcwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MTQzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482261431", "bodyText": "Changed checkClassBytes to native.", "author": "hangshao0", "createdAt": "2020-09-02T17:58:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMDcwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMjI2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482202267", "bodyText": "Please call readClassFileBytes inside if !NULL to avoid the double return.", "author": "gacholio", "createdAt": "2020-09-02T16:26:26Z", "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -3601,3 +3606,19 @@ sortMethodIndex(J9CfrConstantPoolInfo* constantPool, J9CfrMethod *list, IDATA st\n \t\t}\n \t}\n }\n+\n+#if JAVA_SPEC_VERSION >= 15\n+I_32\n+checkClassBytes(J9VMThread *currentThread, U_8* classBytes, UDATA classBytesLength, U_8* segment, U_32 segmentLength) \n+{\n+\tI_32 rc = 0;\n+\tU_32 cfrFlags = BCT_JavaMaxMajorVersionShifted | BCT_AnyPreviewVersion | BCT_BasicCheckOnly;\n+\tPORT_ACCESS_FROM_VMC(currentThread);\n+\tif (NULL == classBytes) {", "originalCommit": "6237234c3175d59757e94e665c45c1118e286e64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NDM5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482264397", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-09-02T18:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwMjI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNDAxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482204014", "bodyText": "Should throw OOM here.", "author": "gacholio", "createdAt": "2020-09-02T16:29:13Z", "path": "runtime/jcl/common/java_dyn_methodhandle.c", "diffHunk": "@@ -1045,3 +1046,47 @@ clearNonZAAPEligibleBit(JNIEnv *env, jclass nativeClass, const JNINativeMethod *\n \tvmFuncs->internalExitVMToJNI(vmThread);\n }\n #endif /* J9VM_OPT_JAVA_OFFLOAD_SUPPORT */\n+\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL\n+Java_java_lang_invoke_MethodHandleNatives_checkClassBytesImpl(JNIEnv *env, jclass jlClass, jbyteArray classRep)\n+{\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n+\tJ9JavaVM *vm = currentThread->javaVM;\n+\tJ9InternalVMFunctions *vmFuncs = vm->internalVMFunctions;\n+\tjsize length = 0;\n+\tU_8* classBytes = NULL;\n+\tI_32 rc = 0;\n+\tU_8* segment = NULL;\n+\tU_32 segmentLength = 0;\n+\tPORT_ACCESS_FROM_JAVAVM(vm);\n+\t\n+\tif (NULL == classRep) {\n+\t\tthrowNewNullPointerException(env, NULL);\n+\t\treturn;\n+\t}\n+\tlength = (*env)->GetArrayLength(env, classRep);\n+\tif (0 == length) {\n+\t\treturn;\n+\t}\n+\n+\tsegmentLength = ESTIMATE_SIZE(length);\n+\tsegment = (U_8*)j9mem_allocate_memory(segmentLength, J9MEM_CATEGORY_VM_JCL);\n+\tif (NULL == segment) {\n+\t\treturn;", "originalCommit": "6237234c3175d59757e94e665c45c1118e286e64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNTE4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482205182", "bodyText": "Also, please try and have only one return per function - goto is fine.", "author": "gacholio", "createdAt": "2020-09-02T16:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNDAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MzAyNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482263026", "bodyText": "Added OOM error and fixed the multiple return issue.", "author": "hangshao0", "createdAt": "2020-09-02T18:01:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIwNDAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNDU3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482124572", "bodyText": "formating nitpick - comment should line up with the body of the conditional block\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t\t/* fail if current class and target class are not the same */\n          \n          \n            \n            \t\t\t\t\t\treturn FALSE;\n          \n          \n            \n            \t\t\t\t\t\t/* fail if current class and target class are not the same */\n          \n          \n            \n            \t\t\t\t\t\treturn FALSE;", "author": "DanHeidinga", "createdAt": "2020-09-02T14:42:53Z", "path": "runtime/bcverify/vrfyhelp.c", "diffHunk": "@@ -1018,9 +1042,19 @@ isProtectedAccessPermitted(J9BytecodeVerificationData *verifyData, J9UTF8* decla\n \n \t\t\t\t/* Determine if the targetRamClass is the same class or a sub class of the current class */\n \t\t\t\t/* flipped logic - currentRamClass is the same class or a super class of the target class */\n-\t\t\t\tif (!isSameOrSuperClassOf (currentRamClass, targetRamClass)) {\n-\t\t\t\t\t/* fail */\n-\t\t\t\t\treturn FALSE;\n+\t\t\t\tif (J9ROMCLASS_IS_HIDDEN(romClass)) {\n+\t\t\t\t\tcurrentClassName = J9ROMCLASS_CLASSNAME(romClass);\n+\t\t\t\t\tif ((targetClassLength != J9UTF8_LENGTH(currentClassName))\n+\t\t\t\t\t\t|| (0 != strncmp(J9UTF8_DATA(currentClassName), targetClassName, targetClassLength))\n+\t\t\t\t\t) {\n+\t\t\t\t\t/* fail if current class and target class are not the same */\n+\t\t\t\t\t\treturn FALSE;", "originalCommit": "5197a29f13c575c81dce1eb9fc2fdc43a6c0c5f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MzEyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482263129", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-09-02T18:01:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNDU3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNjE0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482126144", "bodyText": "The contract on this function is that it can only return null if there is an exception pending.  That's why the old code did the checks in the order it did:\n\npending exception?  Yes, just return as the exception will be thrown when returning to Java\nnot pending and null?  Defensively throw InternalError as defineClassCommon didn't meet its contract", "author": "DanHeidinga", "createdAt": "2020-09-02T14:44:54Z", "path": "runtime/jcl/common/clsldr.cpp", "diffHunk": "@@ -115,10 +115,7 @@ Java_java_lang_ClassLoader_defineClassImpl1(JNIEnv *env, jobject receiver, jclas\n \tjsize length = env->GetArrayLength(classRep);\n \n \tjclass result = defineClassCommon(env, receiver, className, classRep, 0, length, protectionDomain, &options, hostClazz, NULL, FALSE);\n-\tif (env->ExceptionCheck()) {\n-\t\treturn NULL;\n-\t} else if (NULL == result) {\n-\t\tthrowNewInternalError(env, NULL);\n+\tif (NULL == result) {", "originalCommit": "5197a29f13c575c81dce1eb9fc2fdc43a6c0c5f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MzY5Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482263692", "bodyText": "Recovered the original logic.", "author": "hangshao0", "createdAt": "2020-09-02T18:02:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNjE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNzM1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482127352", "bodyText": "This needs to be moved before the if (NULL != classData) { or it's invalid to be looking at the objects in that block.  It's a pre-existing bug, not related to your changes but should be fixed while looking at this code", "author": "DanHeidinga", "createdAt": "2020-09-02T14:46:27Z", "path": "runtime/jcl/common/clsldr.cpp", "diffHunk": "@@ -128,16 +125,21 @@ Java_java_lang_ClassLoader_defineClassImpl1(JNIEnv *env, jobject receiver, jclas\n \t\tJ9VMJAVALANGCLASS_SET_CLASSDATA(currentThread, resultClassObject, classDataObject);\n \t}\n \n+\t\n+\tvmFuncs->internalEnterVMFromJNI(currentThread);", "originalCommit": "5197a29f13c575c81dce1eb9fc2fdc43a6c0c5f5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2MzM4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482263386", "bodyText": "Moved this line before if (NULL != classData) {", "author": "hangshao0", "createdAt": "2020-09-02T18:02:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEyNzM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNjA0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482226042", "bodyText": "Can this not find the class name and return it as a string?  It saves trying to parse it out on the java side", "author": "DanHeidinga", "createdAt": "2020-09-02T17:04:17Z", "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -3601,3 +3606,19 @@ sortMethodIndex(J9CfrConstantPoolInfo* constantPool, J9CfrMethod *list, IDATA st\n \t\t}\n \t}\n }\n+\n+#if JAVA_SPEC_VERSION >= 15\n+I_32\n+checkClassBytes(J9VMThread *currentThread, U_8* classBytes, UDATA classBytesLength, U_8* segment, U_32 segmentLength) \n+{\n+\tI_32 rc = 0;\n+\tU_32 cfrFlags = BCT_JavaMaxMajorVersionShifted | BCT_AnyPreviewVersion | BCT_BasicCheckOnly;\n+\tPORT_ACCESS_FROM_VMC(currentThread);\n+\tif (NULL == classBytes) {\n+\t\treturn rc;\n+\t}\n+\trc = j9bcutil_readClassFileBytes(PORTLIB, NULL, classBytes, classBytesLength, segment, segmentLength, cfrFlags, NULL, NULL, 0, 0);", "originalCommit": "6237234c3175d59757e94e665c45c1118e286e64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2NjY0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482266644", "bodyText": "It can get the class name, but I don't think we can do the following checks inside j9bcutil_readClassFileBytes before getting the class name.\nif (!(thisClass instanceof Type)) {\n        throw new ClassFormatError();\n}\nType type = (Type)thisClass;\nif (!type.getDescriptor().startsWith(\"L\")) {\n\tthrow new ClassFormatError();\n}", "author": "hangshao0", "createdAt": "2020-09-02T18:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNjA0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI5OTUwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482299509", "bodyText": "If it returns the name though, you can still do the checks in Java without having to partially parse the classfile again", "author": "DanHeidinga", "createdAt": "2020-09-02T18:47:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjIyNjA0Mg=="}], "type": "inlineReview"}, {"oid": "e2c1bd50c9c4f31d2cf08bd93bbcfa3d440d386b", "url": "https://github.com/eclipse-openj9/openj9/commit/e2c1bd50c9c4f31d2cf08bd93bbcfa3d440d386b", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T17:52:03Z", "type": "forcePushed"}, {"oid": "edd0bfd8514d25e34eac127c82f45f7cf421fe48", "url": "https://github.com/eclipse-openj9/openj9/commit/edd0bfd8514d25e34eac127c82f45f7cf421fe48", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T17:58:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2OTE5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482269193", "bodyText": "Please use J9UTF8_DATA_EQUALS here.", "author": "gacholio", "createdAt": "2020-09-02T18:12:38Z", "path": "runtime/bcverify/vrfyhelp.c", "diffHunk": "@@ -579,6 +579,21 @@ isClassCompatible(J9BytecodeVerificationData *verifyData, UDATA sourceClass, UDA\n \tif (NULL != verifyData->vmStruct->currentException) {\n \t\treturn (IDATA) FALSE;\n \t}\n+\t\n+\tif (J9ROMCLASS_IS_HIDDEN(verifyData->romClass)) {\t\n+\t\tJ9UTF8* className = J9ROMCLASS_CLASSNAME(verifyData->romClass);\n+\t\tif (sourceLength == J9UTF8_LENGTH(className)\n+\t\t\t&& (0 == strncmp(sourceName, J9UTF8_DATA(className), sourceLength))", "originalCommit": "edd0bfd8514d25e34eac127c82f45f7cf421fe48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI4MTQwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482281406", "bodyText": "Done.", "author": "hangshao0", "createdAt": "2020-09-02T18:27:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2OTE5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MTA2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482271068", "bodyText": "I think this could use J9UTF8_EQUALS", "author": "gacholio", "createdAt": "2020-09-02T18:16:05Z", "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -1719,6 +1719,15 @@ loadSuperClassAndInterfaces(J9VMThread *vmThread, J9ClassLoader *classLoader, J9\n \n \t\t\t\tfor (i = 0; i<romClass->interfaceCount; i++) {\n \t\t\t\t\tJ9UTF8 *interfaceName = NNSRP_GET(interfaceNames[i], J9UTF8*);\n+\t\t\t\t\t\n+\t\t\t\t\tif (0 == compareUTF8Length(J9UTF8_DATA(interfaceName), J9UTF8_LENGTH(interfaceName),", "originalCommit": "edd0bfd8514d25e34eac127c82f45f7cf421fe48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI4MTUwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482281503", "bodyText": "Done.", "author": "hangshao0", "createdAt": "2020-09-02T18:27:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI3MTA2OA=="}], "type": "inlineReview"}, {"oid": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "url": "https://github.com/eclipse-openj9/openj9/commit/c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T18:27:01Z", "type": "commit"}, {"oid": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "url": "https://github.com/eclipse-openj9/openj9/commit/c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "message": "Hidden class implementation 4\n\n1. Add checks for class bytes for hidden classes in MethodHanles.\n2. Do bytecode verification for hidden classes.\n3. Do not allow record and enum to be defined as hidden classes.\n4. Fix APIs for hidden classes in Class.java.\n\nCloses #9328\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-09-02T18:27:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwMzM5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482303395", "bodyText": "My proposal was that this method return the classname as a String to avoid partially reparsing the classfile.  The checks in getClassName can still be done in java code after renaming the method to something like validateClassName.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tMethodHandleNatives.checkClassBytes(bytes);\n          \n          \n            \n            \t\t\tString targetClassName = MethodHandleNatives.checkClassBytes(bytes);\n          \n          \n            \n            \t\t\tvalidateClassName(targetClassName, bytes);", "author": "DanHeidinga", "createdAt": "2020-09-02T18:51:16Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2368,21 +2377,58 @@ private ClassDefiner classDefiner(byte[] bytes, ClassOption... classOptions) thr\n \t\t\t\tthrow new IllegalAccessException();\n \t\t\t}\n \n+\t\t\tint flags = 0;\n+\t\t\tfor (ClassOption opt : classOptions) {\n+\t\t\t\tflags |= opt.toFlag();\n+\t\t\t}\n+\t\t\tMethodHandleNatives.checkClassBytes(bytes);", "originalCommit": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNDY1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482304659", "bodyText": "All this code can go away if the native returns the class name string", "author": "DanHeidinga", "createdAt": "2020-09-02T18:52:34Z", "path": "jcl/src/java.base/share/classes/java/lang/invoke/MethodHandles.java", "diffHunk": "@@ -2368,21 +2377,58 @@ private ClassDefiner classDefiner(byte[] bytes, ClassOption... classOptions) thr\n \t\t\t\tthrow new IllegalAccessException();\n \t\t\t}\n \n+\t\t\tint flags = 0;\n+\t\t\tfor (ClassOption opt : classOptions) {\n+\t\t\t\tflags |= opt.toFlag();\n+\t\t\t}\n+\t\t\tMethodHandleNatives.checkClassBytes(bytes);\n+\t\t\tString targetClassName = getClassName(bytes);\n+\t\t\treturn makeHiddenClassDefiner(targetClassName, bytes, flags);\n+\t\t\t\n+\t\t}\n+\n+\t\tprivate String getClassName(byte[] bytes) {\n+\t\t\tString targetClassName;\n \t\t\tClassReader cr;\n \t\t\ttry {\n \t\t\t\tcr = new ClassReader(bytes);\n+\n+\t\t\t\tint thisClassIndex = cr.readUnsignedShort(cr.header + 2);\n+\t\t\t\tchar[] buffer = new char[cr.getMaxStringLength()];\n+\t\t\t\tObject thisClass = cr.readConst(thisClassIndex, buffer);\n+\t\t\t\tif (!(thisClass instanceof Type)) {\n+\t\t\t\t\tthrow new ClassFormatError();\n+\t\t\t\t}\n+\t\t\t\tType type = (Type)thisClass;\n+\t\t\t\tif (!type.getDescriptor().startsWith(\"L\")) {\n+\t\t\t\t\tthrow new ClassFormatError();\n+\t\t\t\t}\n+\t\t\t\ttargetClassName = type.getClassName();", "originalCommit": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwMDI0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482500245", "bodyText": "I have a local change that addressed all the comments here. i.e. make MethodHandleNatives.checkClassBytes() return the class name and with the code above removed. But I am failing some hidden class tests:\n\nThere are test cases that make thisClass not an instance of Type and the descriptor does not start with \"L\", these tests asserts ClassFormatError to be thrown. These checks are not there inside j9bcutil_readClassFileBytes(). So I guess we cannot remove these checks.\n\nif (!(thisClass instanceof Type)) {\n\tthrow new ClassFormatError();\n}\nif (!type.getDescriptor().startsWith(\"L\")) {\n\tthrow new ClassFormatError();\n}\n\n\nAfter adding the above checks back, I am still failing one test.\nBecause I am getting the class name from j9bcutil_readClassFileBytes(), it has to return after constant pool are read and  classfile->thisClass is set. But before setting classfile->thisClass, j9bcutil_readClassFileBytes()\nchecks on CFR_ACC_MODULE and throw ClassFormatError on CFR_ACC_MODULE. Hidden class tests expects an IllegalArgumentException if CFR_ACC_MODULE is set.", "author": "hangshao0", "createdAt": "2020-09-02T21:40:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNDY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY4ODA3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482688072", "bodyText": "There are test cases that make thisClass not an instance of Type and the descriptor does not start with \"L\", these tests asserts ClassFormatError to be thrown.\n\nCan you provide examples of the invalid thisClass values?  I can understand the \"L\" case but need clarification on the instanceof Type case and why it wouldn't be caught by the cfreader code (unless maybe we don't check it till staticverify runs?)", "author": "DanHeidinga", "createdAt": "2020-09-03T03:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNDY1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA4NzU3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r483087575", "bodyText": "The test comment basically says this_class may be an invalid index or a valid index pointing to something else rather than Class_Info. For why cfreader does not catch that, I might need to dig into that later. Maybe the case as you said or maybe I was not passing in the correct combination of BCT_XXXX flags in my local change.", "author": "hangshao0", "createdAt": "2020-09-03T15:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwNDY1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwODY2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482308661", "bodyText": "The first NULL argument could be changed to pass a J9CfrClassFile struct to fill in which makes getting the thisClass field easy:\nJ9CfrClassFile *classfile = .....;\n\tU_32 cpThisClassUTF8Slot = constantPool[classfile->thisClass].slot1;\n\tU_32 originalStringLength = constantPool[cpThisClassUTF8Slot].slot1;\n\tconst char* originalStringBytes = (const char*)constantPool[cpThisClassUTF8Slot].bytes;\n....", "author": "DanHeidinga", "createdAt": "2020-09-02T18:56:49Z", "path": "runtime/bcutil/cfreader.c", "diffHunk": "@@ -3601,3 +3606,18 @@ sortMethodIndex(J9CfrConstantPoolInfo* constantPool, J9CfrMethod *list, IDATA st\n \t\t}\n \t}\n }\n+\n+#if JAVA_SPEC_VERSION >= 15\n+I_32\n+checkClassBytes(J9VMThread *currentThread, U_8* classBytes, UDATA classBytesLength, U_8* segment, U_32 segmentLength) \n+{\n+\tI_32 rc = 0;\n+\tU_32 cfrFlags = BCT_JavaMaxMajorVersionShifted | BCT_AnyPreviewVersion | BCT_BasicCheckOnly;\n+\tPORT_ACCESS_FROM_VMC(currentThread);\n+\tif (NULL != classBytes) {\n+\t\trc = j9bcutil_readClassFileBytes(PORTLIB, NULL, classBytes, classBytesLength, segment, segmentLength, cfrFlags, NULL, NULL, 0, 0);", "originalCommit": "c464059fca87b49a6d1d61a22af3bc4c0e16c66f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM0OTQzNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482349436", "bodyText": "I see the second parameter of j9bcutil_readClassFileBytes() takes a function pointer, can I pass in a J9CfrClassFile struct ?", "author": "hangshao0", "createdAt": "2020-09-02T19:36:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwODY2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM1NTcxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10471#discussion_r482355713", "bodyText": "Sorry, I misread the function descriptor.  The J9CfrClassFile struct is written into the buffer - see ClassFileParser::parseClassFile for an example:\nif ( BCT_ERR_NO_ERROR == result ) {\n\t\t/* return the buffer */\n\t\t_j9CfrClassFile = (J9CfrClassFile *)buffer;", "author": "DanHeidinga", "createdAt": "2020-09-02T19:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjMwODY2MQ=="}], "type": "inlineReview"}]}