{"pr_number": 8261, "pr_title": "Check if offset is in the SCC before loading it", "pr_createdAt": "2020-01-09T17:57:20Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8261", "timeline": [{"oid": "f2fbd2d0cac604d94c81f59aa0687baad0dccc4a", "url": "https://github.com/eclipse-openj9/openj9/commit/f2fbd2d0cac604d94c81f59aa0687baad0dccc4a", "message": "Check if offset is in SCC before loading it\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-01-09T17:58:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMxNTEzOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8261#discussion_r365315139", "bodyText": "Can I suggest getting the ROM class pointer by doing isOffsetInSharedCache(csInfoClazzOffset, &romClass) instead? It would be a bit more optimal.", "author": "ymanton", "createdAt": "2020-01-10T16:20:35Z", "path": "runtime/compiler/runtime/IProfiler.cpp", "diffHunk": "@@ -3147,9 +3147,9 @@ TR_IPBCDataCallGraph::loadFromPersistentCopy(TR_IPBCDataStorageHeader * storage,\n          {\n          J9Class *ramClass = NULL;\n \n-         uintptrj_t csInfoClazz = store->_csInfo.getClazz(i);\n-         if (comp->fej9()->sharedCache()->isPointerInSharedCache((void *)csInfoClazz))\n-            ramClass = ((TR_J9VM *)comp->fej9())->matchRAMclassFromROMclass((J9ROMClass *)comp->fej9()->sharedCache()->pointerFromOffsetInSharedCache(csInfoClazz), comp);\n+         uintptrj_t csInfoClazzOffset = store->_csInfo.getClazz(i);\n+         if (comp->fej9()->sharedCache()->isOffsetInSharedCache(csInfoClazzOffset))\n+            ramClass = ((TR_J9VM *)comp->fej9())->matchRAMclassFromROMclass((J9ROMClass *)comp->fej9()->sharedCache()->pointerFromOffsetInSharedCache(csInfoClazzOffset), comp);", "originalCommit": "f2fbd2d0cac604d94c81f59aa0687baad0dccc4a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "260c81962f14e20d93848aecb4de6d7c4f51322c", "url": "https://github.com/eclipse-openj9/openj9/commit/260c81962f14e20d93848aecb4de6d7c4f51322c", "message": "Add isOffsetInSharedCache query\n\nThis query can be used to safeguard code that depends on an offset but\nisn't sure if the offset is within the SCC.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-01-10T19:40:30Z", "type": "commit"}, {"oid": "b809a9191a34e675f2e2d448a291ae3bb98026b1", "url": "https://github.com/eclipse-openj9/openj9/commit/b809a9191a34e675f2e2d448a291ae3bb98026b1", "message": "Check if offset is in SCC before loading it\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-01-10T19:42:24Z", "type": "commit"}, {"oid": "b809a9191a34e675f2e2d448a291ae3bb98026b1", "url": "https://github.com/eclipse-openj9/openj9/commit/b809a9191a34e675f2e2d448a291ae3bb98026b1", "message": "Check if offset is in SCC before loading it\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2020-01-10T19:42:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg5MDMxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8261#discussion_r365890312", "bodyText": "This would be clearer and closer to the truth, if the second parameter type was void **, or uintptrj_t *.", "author": "keithc-ca", "createdAt": "2020-01-13T16:13:10Z", "path": "runtime/compiler/env/J9SharedCache.hpp", "diffHunk": "@@ -123,6 +123,15 @@ class TR_J9SharedCache : public TR_SharedCache\n     */\n    virtual bool isPointerInSharedCache(void *ptr, uintptrj_t *cacheOffset = NULL);\n \n+   /**\n+    * \\brief Checks whether the specified offset is within the shared cache.\n+    *\n+    * \\param[in] offset The offset to check.\n+    * \\param[out] ptr If offset is within the shared cache and this parameter is not NULL the result of converting offset into a pointer will be returned here. If offset is not within the shared cache this parameter is ignored.\n+    * \\return True if the offset is within the shared cache, false otherwise.\n+    */\n+   virtual bool isOffsetInSharedCache(uintptrj_t offset, void *ptr = NULL);", "originalCommit": "b809a9191a34e675f2e2d448a291ae3bb98026b1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}