{"pr_number": 10300, "pr_title": "JEP 371 implementation part 3", "pr_createdAt": "2020-07-30T15:36:31Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10300", "timeline": [{"oid": "fdae8adc0f203153c6aad101efde1910ae65cb84", "url": "https://github.com/eclipse-openj9/openj9/commit/fdae8adc0f203153c6aad101efde1910ae65cb84", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader.\n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. By default, \ndo not return hidden class from\nhashClassTableAt()/hashClassTableAtString(). \nAdded a new version of the these hashTable find API in case we \nwant to find hidden class.\n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-07-30T15:39:00Z", "type": "forcePushed"}, {"oid": "cda0ba14eb0ec2261f4ad37a624a737b45ce9284", "url": "https://github.com/eclipse-openj9/openj9/commit/cda0ba14eb0ec2261f4ad37a624a737b45ce9284", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader.\n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. By default, \ndo not return hidden class from\nhashClassTableAt()/hashClassTableAtString(). \nAdded a new version of these hashTable find API in case we \nwant to find hidden class.\n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-07-30T15:44:13Z", "type": "forcePushed"}, {"oid": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "url": "https://github.com/eclipse-openj9/openj9/commit/5a451f72c074a9e3d5a1daf07af3101738f57eb2", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. By default, \ndo not return hidden class from\nhashClassTableAt()/hashClassTableAtString(). \nAdded a new version of these hashTable find API in case we \nwant to find hidden class.\n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-07-30T15:51:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNTA0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465715042", "bodyText": "Hidden classes have the same lifecycle as the classloader they are loaded in.  Why do they need UTF8 interning disabled?", "author": "DanHeidinga", "createdAt": "2020-08-05T13:11:07Z", "path": "runtime/bcutil/ROMClassCreationContext.hpp", "diffHunk": "@@ -162,7 +162,7 @@ class ROMClassCreationContext\n \t\t\t_loadLocation = localBuffer->loadLocationType;\n \t\t\t_patchMap = localBuffer->patchMap;\n \t\t\t_sharedStringInternTable = _javaVM->sharedInvariantInternTable;\n-\t\t\t_interningEnabled = J9_ARE_ALL_BITS_SET(_bcuFlags, BCU_ENABLE_INVARIANT_INTERNING) && J9_ARE_NO_BITS_SET(_findClassFlags, J9_FINDCLASS_FLAG_ANON);\n+\t\t\t_interningEnabled = J9_ARE_ALL_BITS_SET(_bcuFlags, BCU_ENABLE_INVARIANT_INTERNING) && J9_ARE_NO_BITS_SET(_findClassFlags, J9_FINDCLASS_FLAG_ANON | J9_FINDCLASS_FLAG_HIDDEN);", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNDU2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465924564", "bodyText": "You are right. Intern should be enabled for hidden classes that have the same life cycle with its loader. As we set J9_FINDCLASS_FLAG_ANON for hidden classes that will be unloaded individually, it is not set for hidden classes that will be unloaded with its loaded. Checking J9_FINDCLASS_FLAG_ANON is enough. Updated.", "author": "hangshao0", "createdAt": "2020-08-05T18:34:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxNTA0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxOTgzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465719838", "bodyText": "Can you fill in this comment with content?  I know existing code does a poor job of this but new functions should get proper docs", "author": "DanHeidinga", "createdAt": "2020-08-05T13:18:55Z", "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -1768,6 +1768,17 @@ hashClassTableFree(J9ClassLoader* classLoader);\n J9Class *\n hashClassTableAt(J9ClassLoader *classLoader, U_8 *className, UDATA classNameLength);\n \n+/**\n+* @brief", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNTM0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465925341", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-08-05T18:35:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxOTgzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMzY2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465723663", "bodyText": "Nitpick: changing the formatting like this makes the code slightly clearer as it removes an extra set of brackets and ensures there is no path that continues after this code\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (J9_ARE_ALL_BITS_SET(flag, HASHTABLE_FIND_FLAG_INCLUDE_HIDDEN)) {\n          \n          \n            \n            \t\t\t\treturn clazz;\n          \n          \n            \n            \t\t\t} else {\n          \n          \n            \n            \t\t\t\treturn NULL;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t\tif (J9_ARE_ALL_BITS_SET(flag, HASHTABLE_FIND_FLAG_INCLUDE_HIDDEN)) {\n          \n          \n            \n            \t\t\t\treturn clazz;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t\treturn NULL;", "author": "DanHeidinga", "createdAt": "2020-08-05T13:24:49Z", "path": "runtime/vm/KeyHashTable.c", "diffHunk": "@@ -286,12 +286,26 @@ hashClassTableAt(J9ClassLoader *classLoader, U_8 *className, UDATA classNameLeng\n \tif (NULL != result) {\n \t\tJ9Class *clazz = result->ramClass;\n \t\tAssert_VM_false(J9_ARE_ANY_BITS_SET((UDATA)clazz, J9_REQUIRED_CLASS_ALIGNMENT - 1));\n-\t\treturn clazz;\n+\t\tif (J9ROMCLASS_IS_HIDDEN(clazz->romClass)) {\n+\t\t\tif (J9_ARE_ALL_BITS_SET(flag, HASHTABLE_FIND_FLAG_INCLUDE_HIDDEN)) {\n+\t\t\t\treturn clazz;\n+\t\t\t} else {\n+\t\t\t\treturn NULL;\n+\t\t\t}", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNTQ3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465925478", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-08-05T18:35:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyMzY2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDQxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465724417", "bodyText": "Given we're reserving a U_32 for the flags, let's call it flags so it's clear there may be others in the future\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            hashClassTableAtWithFlag(J9ClassLoader *classLoader, U_8 *className, UDATA classNameLength, U_32 flag)\n          \n          \n            \n            hashClassTableAtWithFlag(J9ClassLoader *classLoader, U_8 *className, UDATA classNameLength, U_32 flags)", "author": "DanHeidinga", "createdAt": "2020-08-05T13:25:54Z", "path": "runtime/vm/KeyHashTable.c", "diffHunk": "@@ -273,7 +273,7 @@ hashClassTableNew(J9JavaVM *javaVM, U_32 initialSize)\n }\n \n J9Class *\n-hashClassTableAt(J9ClassLoader *classLoader, U_8 *className, UDATA classNameLength)\n+hashClassTableAtWithFlag(J9ClassLoader *classLoader, U_8 *className, UDATA classNameLength, U_32 flag)", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNTcxMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465925710", "bodyText": "Changed to flags.", "author": "hangshao0", "createdAt": "2020-08-05T18:36:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNDQxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNTk4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465725980", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            hashClassTableAtStringWithFlag(J9ClassLoader *classLoader, j9object_t stringObject, U_32 flag)\n          \n          \n            \n            hashClassTableAtStringWithFlag(J9ClassLoader *classLoader, j9object_t stringObject, U_32 flags)", "author": "DanHeidinga", "createdAt": "2020-08-05T13:28:09Z", "path": "runtime/vm/KeyHashTable.c", "diffHunk": "@@ -524,7 +538,7 @@ hashPkgTableNextDo(J9HashTableState *walkState)\n }\n \n J9Class *\n-hashClassTableAtString(J9ClassLoader *classLoader, j9object_t stringObject)\n+hashClassTableAtStringWithFlag(J9ClassLoader *classLoader, j9object_t stringObject, U_32 flag)", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNTgzNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465925835", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-08-05T18:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNTk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNjE4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465726184", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (J9_ARE_ALL_BITS_SET(flag, HASHTABLE_FIND_FLAG_INCLUDE_HIDDEN)) {\n          \n          \n            \n            \t\t\t\treturn clazz;\n          \n          \n            \n            \t\t\t} else {\n          \n          \n            \n            \t\t\t\treturn NULL;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t\tif (J9_ARE_ALL_BITS_SET(flag, HASHTABLE_FIND_FLAG_INCLUDE_HIDDEN)) {\n          \n          \n            \n            \t\t\t\treturn clazz;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t\treturn NULL;", "author": "DanHeidinga", "createdAt": "2020-08-05T13:28:27Z", "path": "runtime/vm/KeyHashTable.c", "diffHunk": "@@ -536,11 +550,25 @@ hashClassTableAtString(J9ClassLoader *classLoader, j9object_t stringObject)\n \tif (NULL != result) {\n \t\tJ9Class *clazz = result->ramClass;\n \t\tAssert_VM_false(J9_ARE_ANY_BITS_SET((UDATA)clazz, J9_REQUIRED_CLASS_ALIGNMENT - 1));\n-\t\treturn clazz;\n+\t\tif (J9ROMCLASS_IS_HIDDEN(clazz->romClass)) {\n+\t\t\tif (J9_ARE_ALL_BITS_SET(flag, HASHTABLE_FIND_FLAG_INCLUDE_HIDDEN)) {\n+\t\t\t\treturn clazz;\n+\t\t\t} else {\n+\t\t\t\treturn NULL;\n+\t\t\t}", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNTkzNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465925936", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-08-05T18:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcyNjE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNTY4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465735682", "bodyText": "unnecessary change", "author": "DanHeidinga", "createdAt": "2020-08-05T13:42:50Z", "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -2035,7 +2035,7 @@ internalCreateRAMClassDone(J9VMThread *vmThread, J9ClassLoader *classLoader, J9R\n \t\t\t\tomrthread_monitor_exit(javaVM->classTableMutex);\n \t\t\t\tjavaVM->memoryManagerFunctions->j9gc_modron_global_collect_with_overrides(vmThread, J9MMCONSTANT_EXPLICIT_GC_NATIVE_OUT_OF_MEMORY);\n \t\t\t\tomrthread_monitor_enter(javaVM->classTableMutex);\n-\n+\t\t\t\t", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNjM1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465926358", "bodyText": "Removed.", "author": "hangshao0", "createdAt": "2020-08-05T18:37:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNTY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNTc1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465735751", "bodyText": "unnecessary change", "author": "DanHeidinga", "createdAt": "2020-08-05T13:42:55Z", "path": "runtime/vm/createramclass.cpp", "diffHunk": "@@ -2045,7 +2045,7 @@ internalCreateRAMClassDone(J9VMThread *vmThread, J9ClassLoader *classLoader, J9R\n \t\t\t\tif (alreadyLoadedClass != NULL) {\n \t\t\t\t\tgoto alreadyLoaded;\n \t\t\t\t}\n-\n+\t", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNjQzOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465926439", "bodyText": "Removed.", "author": "hangshao0", "createdAt": "2020-08-05T18:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTczNTc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc4MTg4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465781882", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tif ((!isAnonFlagSet) \n          \n          \n            \n            \t\t&& (!isHiddenFlagSet)\n          \n          \n            \n            \t) {\n          \n          \n            \n            \tif (!isAnonFlagSet && !isHiddenFlagSet) {", "author": "DanHeidinga", "createdAt": "2020-08-05T14:46:41Z", "path": "runtime/bcutil/defineclass.c", "diffHunk": "@@ -117,7 +115,9 @@ internalDefineClass(\n \t\t}\n \t}\n \n-\tif (!isAnonFlagSet) {\n+\tif ((!isAnonFlagSet) \n+\t\t&& (!isHiddenFlagSet)\n+\t) {", "originalCommit": "5a451f72c074a9e3d5a1daf07af3101738f57eb2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyNjI0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465926247", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-08-05T18:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc4MTg4Mg=="}], "type": "inlineReview"}, {"oid": "155506878cedfecfe95d65f1c66561cc712f393d", "url": "https://github.com/eclipse-openj9/openj9/commit/155506878cedfecfe95d65f1c66561cc712f393d", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. By default, \ndo not return hidden class from\nhashClassTableAt()/hashClassTableAtString(). \nAdded a new version of these hashTable find API in case we \nwant to find hidden class.\n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T18:30:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1NTIzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465955231", "bodyText": "Flags should probably be UDATA.", "author": "gacholio", "createdAt": "2020-08-05T19:31:51Z", "path": "runtime/oti/j9nonbuilder.h", "diffHunk": "@@ -4239,6 +4239,7 @@ typedef struct J9InternalVMFunctions {\n \tstruct J9Class*  ( *internalFindClassInModule)(struct J9VMThread *currentThread, struct J9Module *j9module, U_8 *className, UDATA classNameLength, struct J9ClassLoader *classLoader, UDATA options) ;\n \tstruct J9Class*  ( *internalFindClassString)(struct J9VMThread* currentThread, j9object_t moduleName, j9object_t className, struct J9ClassLoader* classLoader, UDATA options, UDATA allowedBitsForClassName) ;\n \tstruct J9Class*  ( *hashClassTableAt)(struct J9ClassLoader *classLoader, U_8 *className, UDATA classNameLength) ;\n+\tstruct J9Class*  ( *hashClassTableAtWithFlag)(struct J9ClassLoader *classLoader, U_8 *className, UDATA classNameLength, U_32 flags) ;", "originalCommit": "155506878cedfecfe95d65f1c66561cc712f393d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2MDEwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r465960109", "bodyText": "Changed to UDATA.", "author": "hangshao0", "createdAt": "2020-08-05T19:41:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1NTIzMQ=="}], "type": "inlineReview"}, {"oid": "ba9a7c51db189a42b2c8f62045d8924d7530bb58", "url": "https://github.com/eclipse-openj9/openj9/commit/ba9a7c51db189a42b2c8f62045d8924d7530bb58", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. By default, \ndo not return hidden class from\nhashClassTableAt()/hashClassTableAtString(). \nAdded a new version of these hashTable find API in case we \nwant to find hidden class.\n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T19:40:36Z", "type": "forcePushed"}, {"oid": "1d97e361f815c39b427e47199a536ac1aa7c3ec2", "url": "https://github.com/eclipse-openj9/openj9/commit/1d97e361f815c39b427e47199a536ac1aa7c3ec2", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. By default, \ndo not return hidden class from\nhashClassTableAt()/hashClassTableAtString(). \nAdded a new version of these hashTable find API in case we \nwant to find hidden class.\n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T21:04:17Z", "type": "forcePushed"}, {"oid": "5742634f5146084da540c51c64df45dfa9cbb3cd", "url": "https://github.com/eclipse-openj9/openj9/commit/5742634f5146084da540c51c64df45dfa9cbb3cd", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T21:16:12Z", "type": "forcePushed"}, {"oid": "3d875dbd22db658548f0f80e82d9d35296a7ca7a", "url": "https://github.com/eclipse-openj9/openj9/commit/3d875dbd22db658548f0f80e82d9d35296a7ca7a", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T21:36:26Z", "type": "forcePushed"}, {"oid": "da66bb1f537287f61393cafd926d1b03cfb0d6bc", "url": "https://github.com/eclipse-openj9/openj9/commit/da66bb1f537287f61393cafd926d1b03cfb0d6bc", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T21:59:06Z", "type": "forcePushed"}, {"oid": "1561bebd9d731b011be272f28f19363d086e3f51", "url": "https://github.com/eclipse-openj9/openj9/commit/1561bebd9d731b011be272f28f19363d086e3f51", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T22:16:00Z", "type": "forcePushed"}, {"oid": "d0c3644fa3f1b792eca5f41b37225b432d013b87", "url": "https://github.com/eclipse-openj9/openj9/commit/d0c3644fa3f1b792eca5f41b37225b432d013b87", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T22:33:36Z", "type": "forcePushed"}, {"oid": "3be77b30d282edcedaaaf5f0ae8ee4afac1cceff", "url": "https://github.com/eclipse-openj9/openj9/commit/3be77b30d282edcedaaaf5f0ae8ee4afac1cceff", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-05T22:57:57Z", "type": "forcePushed"}, {"oid": "71aeb3d8b1925b742a6375e5cd175558a89495ff", "url": "https://github.com/eclipse-openj9/openj9/commit/71aeb3d8b1925b742a6375e5cd175558a89495ff", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-06T15:43:25Z", "type": "forcePushed"}, {"oid": "aa6b2bf9492564e95b30de0c861e91fa19e60150", "url": "https://github.com/eclipse-openj9/openj9/commit/aa6b2bf9492564e95b30de0c861e91fa19e60150", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-06T18:08:22Z", "type": "forcePushed"}, {"oid": "618bab6fe0adf113b1c472395e7b6ffbad41ac9c", "url": "https://github.com/eclipse-openj9/openj9/commit/618bab6fe0adf113b1c472395e7b6ffbad41ac9c", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-06T18:12:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNTM0MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r466615340", "bodyText": "Please document the purpose of the flag, and I think it would make sense for the constant to be prefixed by J9_", "author": "gacholio", "createdAt": "2020-08-06T18:46:22Z", "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -1738,6 +1738,8 @@ setExceptionForErroredRomClass( J9ROMClass *romClass, J9VMThread *vmThread );\n \n /* ---------------- KeyHashTable.c ---------------- */\n \n+#define HASH_TABLE_STATE_ITER_FLAG_SKIP_HIDDEN 1", "originalCommit": "618bab6fe0adf113b1c472395e7b6ffbad41ac9c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyOTQwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10300#discussion_r466629403", "bodyText": "Added documentation and J9_ prefix. Also removed ITER_ from the name.", "author": "hangshao0", "createdAt": "2020-08-06T19:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNTM0MA=="}], "type": "inlineReview"}, {"oid": "9906e91a98cf1e7a56e2566d6680e906586587e8", "url": "https://github.com/eclipse-openj9/openj9/commit/9906e91a98cf1e7a56e2566d6680e906586587e8", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-06T19:11:24Z", "type": "forcePushed"}, {"oid": "9906e91a98cf1e7a56e2566d6680e906586587e8", "url": "https://github.com/eclipse-openj9/openj9/commit/9906e91a98cf1e7a56e2566d6680e906586587e8", "message": "JEP 371 implementation part 3\n\nThis change adds code to handle ClassOption.STRONG\n1) For hidden class defined without ClassOption.STRONG, \nset its classLoader to anon classLoader. J9_FINDCLASS_FLAG_ANON is \nset for such classes. \n2) For hidden class defined with ClassOption.STRONG, set its \nclassLoader to its hostclass's classLoader. J9_FINDCLASS_FLAG_ANON \nis not set for such classes.\n3) With 1) and 2) the field that I added in my previous change\nROMClassSegmentAllocationStrategy::__allocNewSeg is not necessary\nanymore. Remove this field.\n4) Add hidden class in 2) to the classTable of its hostclass's \nClassLoader. In this way, the current balanced GC code is able to \nfind such class when iterating through the classTable. \n\nAdding hidden classes to the classTable makes it not sharable via \nshared classes cache, as its name won't be unique across JVMs. The \nchange in 4) is temporary if we finally decide to change balance \nGC to scan the ram segment like other collectors. A flag can be \nused to control whether to skip hidden class when iterating the \nclass table. \n\nIssue #9328\nFixes #10249\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-08-06T19:11:24Z", "type": "commit"}]}