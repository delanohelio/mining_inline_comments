{"pr_number": 9590, "pr_title": "Support for serialization of TR_BlockFrequencyInfo", "pr_createdAt": "2020-05-15T21:57:50Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9590", "timeline": [{"oid": "2bcc3a9899c8584f25d66838b28dce96093e502d", "url": "https://github.com/eclipse-openj9/openj9/commit/2bcc3a9899c8584f25d66838b28dce96093e502d", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-05-15T22:03:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4NjYyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r427286628", "bodyText": "Can you explain why this is ifdef'd out? Ordinarily we wouldn't accept ifdef'd out code since it is likely to rot and isn't tested or compiled....", "author": "andrewcraik", "createdAt": "2020-05-19T13:07:12Z", "path": "runtime/compiler/runtime/J9Profiler.hpp", "diffHunk": "@@ -422,6 +433,32 @@ class TR_ValueProfileInfo\n    TR_PERSISTENT_ALLOC(TR_Memory::ValueProfileInfo)\n \n    TR_ValueProfileInfo(TR_CallSiteInfo *info);\n+\n+#if 0", "originalCommit": "2bcc3a9899c8584f25d66838b28dce96093e502d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4NzI4MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r427287281", "bodyText": "same as above ifdef", "author": "andrewcraik", "createdAt": "2020-05-19T13:08:05Z", "path": "runtime/compiler/runtime/J9Profiler.hpp", "diffHunk": "@@ -443,6 +480,39 @@ class TR_ValueProfileInfo\n \n    void dumpInfo(TR::FILE *);\n \n+#if 0", "originalCommit": "2bcc3a9899c8584f25d66838b28dce96093e502d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4OTE1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r427289159", "bodyText": "Making this public seems suboptimal - the isolation provided by the previous private declaration helps to prevent accidental corruption of the profiling data. Is there an overall design for this work that explains this design choice?", "author": "andrewcraik", "createdAt": "2020-05-19T13:10:44Z", "path": "runtime/compiler/runtime/J9Profiler.hpp", "diffHunk": "@@ -174,8 +177,16 @@ class TR_PersistentProfileInfo\n \n    void dumpInfo(TR::FILE *);\n \n-   private:\n+   void setCallSiteInfo(TR::Compilation *comp, uint32_t numCallSites, TR_InlinedCallSite *inlinedCallSite);", "originalCommit": "2bcc3a9899c8584f25d66838b28dce96093e502d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4OTQ1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r427289458", "bodyText": "Can you please add doxygen for newly added APIs to explain what they do, their requirements, results and side-effects?", "author": "andrewcraik", "createdAt": "2020-05-19T13:11:11Z", "path": "runtime/compiler/runtime/J9Profiler.hpp", "diffHunk": "@@ -174,8 +177,16 @@ class TR_PersistentProfileInfo\n \n    void dumpInfo(TR::FILE *);\n \n-   private:\n+   void setCallSiteInfo(TR::Compilation *comp, uint32_t numCallSites, TR_InlinedCallSite *inlinedCallSite);\n+   void getSerializedSize(TR_Serializer &serializer) const;", "originalCommit": "2bcc3a9899c8584f25d66838b28dce96093e502d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "419a555cc77bd22f887719b071be588ee8b14eef", "url": "https://github.com/eclipse-openj9/openj9/commit/419a555cc77bd22f887719b071be588ee8b14eef", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-08-19T00:24:22Z", "type": "forcePushed"}, {"oid": "03ca2149c34fc493b37de4c4b0670efe1b341dae", "url": "https://github.com/eclipse-openj9/openj9/commit/03ca2149c34fc493b37de4c4b0670efe1b341dae", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-09-10T21:06:48Z", "type": "forcePushed"}, {"oid": "7d8ab507f7c644dd4fd717fdee6cb7aae2381510", "url": "https://github.com/eclipse-openj9/openj9/commit/7d8ab507f7c644dd4fd717fdee6cb7aae2381510", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-11-04T00:40:57Z", "type": "forcePushed"}, {"oid": "32228349745a55fea698aa5206c4a9b7e8b6a24a", "url": "https://github.com/eclipse-openj9/openj9/commit/32228349745a55fea698aa5206c4a9b7e8b6a24a", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T14:50:30Z", "type": "forcePushed"}, {"oid": "bb0c35d5bbaaf127bf901fa22af6c7e27972f94d", "url": "https://github.com/eclipse-openj9/openj9/commit/bb0c35d5bbaaf127bf901fa22af6c7e27972f94d", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T15:07:33Z", "type": "forcePushed"}, {"oid": "f32146ba9ee69eb49a1ef5334638cd2d7b7dfaee", "url": "https://github.com/eclipse-openj9/openj9/commit/f32146ba9ee69eb49a1ef5334638cd2d7b7dfaee", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T15:27:22Z", "type": "forcePushed"}, {"oid": "b8bd453987b84e97ba74914e2fdd3db34db3ba6d", "url": "https://github.com/eclipse-openj9/openj9/commit/b8bd453987b84e97ba74914e2fdd3db34db3ba6d", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T19:24:17Z", "type": "forcePushed"}, {"oid": "c01c8eed8ebe94d02e33d8c7370852f13ccafbda", "url": "https://github.com/eclipse-openj9/openj9/commit/c01c8eed8ebe94d02e33d8c7370852f13ccafbda", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T20:21:46Z", "type": "forcePushed"}, {"oid": "f8895674ec0f10b789a94e221697ded566c78c4b", "url": "https://github.com/eclipse-openj9/openj9/commit/f8895674ec0f10b789a94e221697ded566c78c4b", "message": "Use structs to club together members of the class to be serialized\n\nUse structs to club together members of the class to be serialized.\nIt helps in mainitaining the order of fields. Also the presence of\npointer types is indicated by using a bool instead of storing the\nraw address.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-12-03T15:57:54Z", "type": "forcePushed"}, {"oid": "2abf19352ff1ae6a634589d9a019f8fa437d8cf2", "url": "https://github.com/eclipse-openj9/openj9/commit/2abf19352ff1ae6a634589d9a019f8fa437d8cf2", "message": "Remove unnecessary changes\n\nRemove unnecessary change to the files.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-12-03T16:07:41Z", "type": "forcePushed"}, {"oid": "5e880443328e9fa44d547be81aa56f9ea7ae7f19", "url": "https://github.com/eclipse-openj9/openj9/commit/5e880443328e9fa44d547be81aa56f9ea7ae7f19", "message": "Use structs to club together members of the class to be serialized\n\nUse structs to club together members of the class to be serialized.\nIt helps in mainitaining the order of fields. Also the presence of\npointer types is indicated by using a bool instead of storing the\nraw address.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-12-03T16:21:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NDc4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r538794783", "bodyText": "Tab needed here", "author": "r30shah", "createdAt": "2020-12-08T20:48:06Z", "path": "runtime/compiler/runtime/J9Profiler.cpp", "diffHunk": "@@ -2275,9 +2275,112 @@ int32_t TR_BlockFrequencyInfo::getMaxRawCount()\n    return maxCount;\n    }\n \n+uint32_t TR_BlockFrequencyInfo::getSizeForSerialization() const\n+   {\n+   uint32_t size = sizeof(SerializedBFI);\n+   if (_numBlocks > 0)\n+      {\n+      size += (_numBlocks * sizeof(*_blocks));\n+      size += (_numBlocks * sizeof(*_frequencies));\n+      size += (_numBlocks * 2 * sizeof(*_counterDerivationInfo));\n+      for (int32_t i = 0; i < (_numBlocks * 2); i++)\n+         {\n+         if (_counterDerivationInfo[i] && IS_VALID_BIT_VECTOR(_counterDerivationInfo[i]))\n+            {\n+            size += _counterDerivationInfo[i]->getSizeForSerialization();\n+            }\n+         }\n+      }\n+   return size;\n+   }\n \n-const uint32_t TR_CatchBlockProfileInfo::EDOThreshold = 50;\n+void TR_BlockFrequencyInfo::serialize(uint8_t * &buffer) const\n+   {\n+   SerializedBFI *serializedData = reinterpret_cast<SerializedBFI *>(buffer);\n+   serializedData->numBlocks = _numBlocks;\n+   buffer += sizeof(SerializedBFI);\n+   if (_numBlocks > 0)\n+      {\n+      size_t blocksSize = _numBlocks * sizeof(*_blocks);\n+      memcpy(buffer, _blocks, blocksSize);\n+      buffer += blocksSize;\n+\n+      size_t frequenciesSize = _numBlocks * sizeof(*_frequencies);\n+      memcpy(buffer, _frequencies, frequenciesSize);\n+      buffer += frequenciesSize;\n+\n+      size_t counterSize = _numBlocks * 2 * sizeof(*_counterDerivationInfo);\n+      memcpy(buffer, _counterDerivationInfo, counterSize);\n+      buffer += counterSize;\n+      for (int32_t i = 0; i < (_numBlocks * 2); i++)\n+         {\n+         if (_counterDerivationInfo[i] && IS_VALID_BIT_VECTOR(_counterDerivationInfo[i]))\n+            {\n+            // write the bit vector\n+\t    _counterDerivationInfo[i]->serialize(buffer);", "originalCommit": "5e880443328e9fa44d547be81aa56f9ea7ae7f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NTUzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r538795538", "bodyText": "Typo here", "author": "r30shah", "createdAt": "2020-12-08T20:49:29Z", "path": "runtime/compiler/runtime/J9Profiler.cpp", "diffHunk": "@@ -2275,9 +2275,112 @@ int32_t TR_BlockFrequencyInfo::getMaxRawCount()\n    return maxCount;\n    }\n \n+uint32_t TR_BlockFrequencyInfo::getSizeForSerialization() const\n+   {\n+   uint32_t size = sizeof(SerializedBFI);\n+   if (_numBlocks > 0)\n+      {\n+      size += (_numBlocks * sizeof(*_blocks));\n+      size += (_numBlocks * sizeof(*_frequencies));\n+      size += (_numBlocks * 2 * sizeof(*_counterDerivationInfo));\n+      for (int32_t i = 0; i < (_numBlocks * 2); i++)\n+         {\n+         if (_counterDerivationInfo[i] && IS_VALID_BIT_VECTOR(_counterDerivationInfo[i]))\n+            {\n+            size += _counterDerivationInfo[i]->getSizeForSerialization();\n+            }\n+         }\n+      }\n+   return size;\n+   }\n \n-const uint32_t TR_CatchBlockProfileInfo::EDOThreshold = 50;\n+void TR_BlockFrequencyInfo::serialize(uint8_t * &buffer) const\n+   {\n+   SerializedBFI *serializedData = reinterpret_cast<SerializedBFI *>(buffer);\n+   serializedData->numBlocks = _numBlocks;\n+   buffer += sizeof(SerializedBFI);\n+   if (_numBlocks > 0)\n+      {\n+      size_t blocksSize = _numBlocks * sizeof(*_blocks);\n+      memcpy(buffer, _blocks, blocksSize);\n+      buffer += blocksSize;\n+\n+      size_t frequenciesSize = _numBlocks * sizeof(*_frequencies);\n+      memcpy(buffer, _frequencies, frequenciesSize);\n+      buffer += frequenciesSize;\n+\n+      size_t counterSize = _numBlocks * 2 * sizeof(*_counterDerivationInfo);\n+      memcpy(buffer, _counterDerivationInfo, counterSize);\n+      buffer += counterSize;\n+      for (int32_t i = 0; i < (_numBlocks * 2); i++)\n+         {\n+         if (_counterDerivationInfo[i] && IS_VALID_BIT_VECTOR(_counterDerivationInfo[i]))\n+            {\n+            // write the bit vector\n+\t    _counterDerivationInfo[i]->serialize(buffer);\n+            }\n+         }\n+      }\n+   }\n+\n+TR_BlockFrequencyInfo::TR_BlockFrequencyInfo(const SerializedBFI *serializedData, uint8_t * &buffer, TR_PersistentProfileInfo *currentProfile) :\n+   _callSiteInfo(currentProfile->getCallSiteInfo()),\n+   _numBlocks(serializedData->numBlocks),\n+   _blocks(\n+      _numBlocks ?\n+      new (PERSISTENT_NEW) TR_ByteCodeInfo[_numBlocks] :\n+      0\n+      ),\n+   _frequencies(\n+      _numBlocks ?\n+      /*\n+       * The explicit parens value initialize the array,", "originalCommit": "5e880443328e9fa44d547be81aa56f9ea7ae7f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NzMwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r538797309", "bodyText": "This seems like, it is doing same as part of the code couple of lines before in TR_BlockFrequencyInfo::serialize(uint8_t * &buffer) const , is it possible to refactor the common part out to a function?", "author": "r30shah", "createdAt": "2020-12-08T20:52:26Z", "path": "runtime/compiler/runtime/J9Profiler.cpp", "diffHunk": "@@ -2275,9 +2275,112 @@ int32_t TR_BlockFrequencyInfo::getMaxRawCount()\n    return maxCount;\n    }\n \n+uint32_t TR_BlockFrequencyInfo::getSizeForSerialization() const\n+   {\n+   uint32_t size = sizeof(SerializedBFI);\n+   if (_numBlocks > 0)\n+      {\n+      size += (_numBlocks * sizeof(*_blocks));\n+      size += (_numBlocks * sizeof(*_frequencies));\n+      size += (_numBlocks * 2 * sizeof(*_counterDerivationInfo));\n+      for (int32_t i = 0; i < (_numBlocks * 2); i++)\n+         {\n+         if (_counterDerivationInfo[i] && IS_VALID_BIT_VECTOR(_counterDerivationInfo[i]))\n+            {\n+            size += _counterDerivationInfo[i]->getSizeForSerialization();\n+            }\n+         }\n+      }\n+   return size;\n+   }\n \n-const uint32_t TR_CatchBlockProfileInfo::EDOThreshold = 50;\n+void TR_BlockFrequencyInfo::serialize(uint8_t * &buffer) const\n+   {\n+   SerializedBFI *serializedData = reinterpret_cast<SerializedBFI *>(buffer);\n+   serializedData->numBlocks = _numBlocks;\n+   buffer += sizeof(SerializedBFI);\n+   if (_numBlocks > 0)\n+      {\n+      size_t blocksSize = _numBlocks * sizeof(*_blocks);\n+      memcpy(buffer, _blocks, blocksSize);\n+      buffer += blocksSize;\n+\n+      size_t frequenciesSize = _numBlocks * sizeof(*_frequencies);\n+      memcpy(buffer, _frequencies, frequenciesSize);\n+      buffer += frequenciesSize;\n+\n+      size_t counterSize = _numBlocks * 2 * sizeof(*_counterDerivationInfo);\n+      memcpy(buffer, _counterDerivationInfo, counterSize);\n+      buffer += counterSize;\n+      for (int32_t i = 0; i < (_numBlocks * 2); i++)\n+         {\n+         if (_counterDerivationInfo[i] && IS_VALID_BIT_VECTOR(_counterDerivationInfo[i]))\n+            {\n+            // write the bit vector\n+\t    _counterDerivationInfo[i]->serialize(buffer);\n+            }\n+         }\n+      }\n+   }\n+\n+TR_BlockFrequencyInfo::TR_BlockFrequencyInfo(const SerializedBFI *serializedData, uint8_t * &buffer, TR_PersistentProfileInfo *currentProfile) :\n+   _callSiteInfo(currentProfile->getCallSiteInfo()),\n+   _numBlocks(serializedData->numBlocks),\n+   _blocks(\n+      _numBlocks ?\n+      new (PERSISTENT_NEW) TR_ByteCodeInfo[_numBlocks] :\n+      0\n+      ),\n+   _frequencies(\n+      _numBlocks ?\n+      /*\n+       * The explicit parens value initialize the array,\n+       * which in turn value initializes each array member,\n+       * which for ints is zero initialization.\n+       */\n+      new (PERSISTENT_NEW) int32_t[_numBlocks]() :\n+      NULL\n+      ),\n+   _counterDerivationInfo(\n+      _numBlocks ?\n+      (TR_BitVector**) new (PERSISTENT_NEW) void**[_numBlocks*2]() :\n+      NULL),\n+   _entryBlockNumber(-1),\n+   _isQueuedForRecompilation(0)\n+   {\n+   if (_numBlocks > 0)\n+      {\n+      size_t blocksSize = _numBlocks * sizeof(*_blocks);", "originalCommit": "5e880443328e9fa44d547be81aa56f9ea7ae7f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyNTM5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r538825394", "bodyText": "I do not think so IS_VALID_BIT_VECTOR is the correct name here.\nIIRC low tagged entry means we need to just get the counter from single block to either add or subtract, otherwise, it should hold the array of bit vector representing counters from blocks added and subtracted together to get the frequency. I am not sure if this is the correct check. Take a look at the comment here,\nhttps://github.com/eclipse/openj9/blob/b2400f9240b80a0a41d314ddc5768a42915a69ca/runtime/compiler/runtime/J9Profiler.hpp#L660-L663", "author": "r30shah", "createdAt": "2020-12-08T21:36:37Z", "path": "runtime/compiler/runtime/J9Profiler.hpp", "diffHunk": "@@ -612,6 +663,9 @@ class TR_MethodBranchProfileInfo\n    uint32_t _initialBlockFrequency;\n    };\n \n+// To be used for checking if _counterDerivationInfo[i] is a bit vector or not\n+#define IS_VALID_BIT_VECTOR(cdi) (!((uintptr_t)cdi & 0x1))", "originalCommit": "5e880443328e9fa44d547be81aa56f9ea7ae7f19", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI1NzI0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r540257246", "bodyText": "@r30shah  If I understand this correctly the comment says if the entry is low tagged it would have some integer value, otherwise it would be pointing to TR_BitVector.\nIS_VALID_BIT_VECTOR returns true if the entry is not low tagged, which seems to be in-sync with the comments.\nIt is missing a NULL check, I can add that to the condition. Is there anything else you are pointing to?", "author": "ashu-mehra", "createdAt": "2020-12-10T15:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyNTM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDI4Nzg2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r540287865", "bodyText": "Yeah, I think missing NULL check should be there.\nWhat I meant originally is the name IS_VALID_BIT_VECTOR , the name seems more generic but the check is internal to BlockFrequencyInfo, so IMO it should either a name that justifies the internal use, or a private static method (To make code more readable) instead of the macro", "author": "r30shah", "createdAt": "2020-12-10T16:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgyNTM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzNTUwNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r540335507", "bodyText": "typo agains", "author": "dsouzai", "createdAt": "2020-12-10T16:57:02Z", "path": "runtime/compiler/runtime/J9Profiler.hpp", "diffHunk": "@@ -753,8 +861,58 @@ class TR_CallSiteInfo\n \n    void dumpInfo(TR::FILE *);\n \n+   /**\n+    * @brief Determines the size of the serialized data for this object\n+    *\n+    * @return Number of bytes required for serializing this object\n+    */\n+   uint32_t getSizeForSerialization() const;\n+\n+   /**\n+    * @brief Serialize this object and store it in the memory buffer\n+    *\n+    * @param buffer Memory buffer where serialized data is to be stored\n+    *\n+    * @note The caller should ensure buffer is large enough to accommodate the serialized data.\n+    * On return the buffer gets updated to point to the location past the serialized data.\n+    * Also see getSizeForSerialization(), deserialize(uint8_t * &).\n+    */\n+   void serialize(uint8_t * &buffer) const;\n+\n+   /**\n+    * @brief Method for creating TR_CallSiteInfo from serialized data\n+    *\n+    * @param buffer Memory buffer where the serialized data is stored\n+    *\n+    * @return Pointer to TR_CallSiteInfo created from serialized data\n+    *\n+    * @note This method does not check agains buffer over-reads. The caller should ensure that the", "originalCommit": "5e880443328e9fa44d547be81aa56f9ea7ae7f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzNzM1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r540337356", "bodyText": "typo agains", "author": "dsouzai", "createdAt": "2020-12-10T16:59:19Z", "path": "runtime/compiler/runtime/J9Profiler.hpp", "diffHunk": "@@ -647,7 +701,61 @@ class TR_BlockFrequencyInfo\n    int32_t getCallCount();\n    int32_t getMaxRawCount(int32_t callerIndex);\n    int32_t getMaxRawCount();\n+\n+   /**\n+    * @brief Determines the size of the serialized data for this object\n+    *\n+    * @return Number of bytes required for serializing this object\n+    */\n+   uint32_t getSizeForSerialization() const;\n+\n+   /**\n+    * @brief serialize this object and store it in the memory buffer\n+    *\n+    * @param buffer Memory buffer where serialized data is to be stored\n+    *\n+    * @note The caller should ensure buffer is large enough to accommodate the serialized data.\n+    * On return the buffer gets updated to point to the location past the serialized data.\n+    * Also see getSizeForSerialization(), deserialize(uint8_t * &).\n+    */\n+   void serialize(uint8_t * &buffer) const;\n+\n+   /**\n+    * @brief Method for creating TR_BlockFrequencyInfo from serialized data\n+    *\n+    * @param buffer Memory buffer where serialized data is stored\n+    * @param currentProfile Pointer to TR_PersistentProfileInfo object at which TR_BlockFrequencyInfo object is anchored at\n+    *\n+    * @return Pointer to TR_BlockFrequencyInfo created from serialized data\n+    *\n+    * @note This method does not check agains buffer over-reads. The caller should ensure that the", "originalCommit": "5e880443328e9fa44d547be81aa56f9ea7ae7f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDMzNzYyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9590#discussion_r540337628", "bodyText": "typo agains", "author": "dsouzai", "createdAt": "2020-12-10T16:59:38Z", "path": "runtime/compiler/runtime/J9Profiler.hpp", "diffHunk": "@@ -174,7 +173,59 @@ class TR_PersistentProfileInfo\n \n    void dumpInfo(TR::FILE *);\n \n+   /**\n+    * @brief Determines the size of the serialized data for this object\n+    *\n+    * @return Number of bytes required for serializing this object\n+    */\n+   uint32_t getSizeForSerialization() const;\n+\n+   /**\n+    * @brief Serialize this object and store it in the memory buffer\n+    *\n+    * @param buffer Memory buffer where serialized data is to be stored\n+    *\n+    * @note The caller should ensure buffer is large enough to accommodate the serialized data.\n+    * On return the buffer gets updated to point to the location past the serialized data.\n+    * Also see getSizeForSerialization(), deserialize(uint8_t * &).\n+    */\n+   void serialize(uint8_t * &buffer) const;\n+\n+   /**\n+    * @brief Method for creating TR_PersistentProfileInfo from serialized data\n+    *\n+    * @param buffer Memory buffer where serialized data is stored\n+    *\n+    * @return Pointer to TR_PersistentProfileInfo created from serialized data\n+    *\n+    * @note This method does not check agains buffer over-reads. The caller should ensure that the", "originalCommit": "5e880443328e9fa44d547be81aa56f9ea7ae7f19", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "526d6529382b70226f8bb2a6b64ae90f2b160b42", "url": "https://github.com/eclipse-openj9/openj9/commit/526d6529382b70226f8bb2a6b64ae90f2b160b42", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-12-13T23:04:20Z", "type": "forcePushed"}, {"oid": "b732aa56e320a549c5c4b00d955d48e0108d927b", "url": "https://github.com/eclipse-openj9/openj9/commit/b732aa56e320a549c5c4b00d955d48e0108d927b", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-12-14T00:09:59Z", "type": "forcePushed"}, {"oid": "b56b26c8f4179595aedde4f7bb38cd9790207625", "url": "https://github.com/eclipse-openj9/openj9/commit/b56b26c8f4179595aedde4f7bb38cd9790207625", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-12-14T00:19:10Z", "type": "commit"}, {"oid": "b56b26c8f4179595aedde4f7bb38cd9790207625", "url": "https://github.com/eclipse-openj9/openj9/commit/b56b26c8f4179595aedde4f7bb38cd9790207625", "message": "Support for serialization of TR_BlockFrequencyInfo\n\nAdded code for serialization of TR_BlockFrequencyInfo.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-12-14T00:19:10Z", "type": "forcePushed"}]}