{"pr_number": 10557, "pr_title": "ClassFileOracle changes to adopt OpenJDK MethodHandles and VarHandles", "pr_createdAt": "2020-09-10T04:59:22Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10557", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxNjA2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r486316065", "bodyText": "There's a very similar method in ConstantPoolMap that determines if a cpEntry is for a VarHandle method.  Is it possible to reuse the existing method - ConstantPoolMap::isVarHandleMethod - or share the list between the two methods?\nDuplicating these kinds of lists leads to one getting out of sync.\nIf the long term goal is to remove the other list, then adding comments to both lists referencing the other would help with short term maintenance.", "author": "DanHeidinga", "createdAt": "2020-09-10T13:00:19Z", "path": "runtime/bcutil/ClassFileOracle.cpp", "diffHunk": "@@ -2375,6 +2375,112 @@ ClassFileOracle::methodIsNonStaticNonAbstract(U_16 methodIndex)\n \treturn J9_ARE_NO_BITS_SET(_classFile->methods[methodIndex].accessFlags, (CFR_ACC_STATIC | CFR_ACC_ABSTRACT));\n }\n \n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+/**\n+ * Determine if the method name corresponds to a VarHandle method with polymorphic\n+ * signature.\n+ *\n+ * @param methodName the constant pool info for the method name\n+ *\n+ * @return true for a VarHandle method with polymorphic signature. Otherwise,\n+ * return false.\n+ */\n+bool\n+ClassFileOracle::isPolymorphicVarHandleMethod(J9CfrConstantPoolInfo *methodName)", "originalCommit": "1b0e5e68d29de929475e9fea75e16bf085fa9146", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUyNjQ3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r486526476", "bodyText": "I did notice another usage of that list here: https://github.com/eclipse/openj9/blob/adda8032110a449a8c96bb1901c0996900555697/runtime/vm/initsendtarget.cpp#L34-L148\nI was planning to share the list among all three methods. This change should reflect in this PR soon.", "author": "babsingh", "createdAt": "2020-09-10T17:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxNjA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MDMzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r508180334", "bodyText": "I was only able to share code between\n[1] ConstantPoolMap::isVarHandleMethod and\n[2] ClassFileOracle::isPolymorphicVarHandleMethod.\n[3] initsendtarget.cpp::initializeMethodRunAddressVarHandle targets a different class (VarHandleInternal) and methods (with suffix _impl).", "author": "babsingh", "createdAt": "2020-10-20T03:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxNjA2NQ=="}], "type": "inlineReview"}, {"oid": "15739b2916a7b1d0c7ef45d259b5130034aae94e", "url": "https://github.com/eclipse-openj9/openj9/commit/15739b2916a7b1d0c7ef45d259b5130034aae94e", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are three locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The three locations are\nthe following:\n1) initsendtarget.cpp::initializeMethodRunAddressVarHandle\n2) ConstantPoolMap::isVarHandleMethod\n3) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above three locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above three locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-19T19:58:29Z", "type": "forcePushed"}, {"oid": "dee7fb3c077b55da65286136fc156e1cb0e5e0fb", "url": "https://github.com/eclipse-openj9/openj9/commit/dee7fb3c077b55da65286136fc156e1cb0e5e0fb", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are three locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The three locations are\nthe following:\n1) initsendtarget.cpp::initializeMethodRunAddressVarHandle\n2) ConstantPoolMap::isVarHandleMethod\n3) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above three locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above three locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-19T20:17:36Z", "type": "forcePushed"}, {"oid": "b0571cef8df79f8196d447ee4d3c2b208e45edbc", "url": "https://github.com/eclipse-openj9/openj9/commit/b0571cef8df79f8196d447ee4d3c2b208e45edbc", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are three locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The three locations are\nthe following:\n1) initsendtarget.cpp::initializeMethodRunAddressVarHandle\n2) ConstantPoolMap::isVarHandleMethod\n3) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above three locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above three locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-19T21:53:27Z", "type": "forcePushed"}, {"oid": "74718e3dda99a674a771c3bf1c41dca62c6e7a45", "url": "https://github.com/eclipse-openj9/openj9/commit/74718e3dda99a674a771c3bf1c41dca62c6e7a45", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-19T23:00:14Z", "type": "forcePushed"}, {"oid": "350e06f17ae91ed294c906eb48b83a83196ecf2f", "url": "https://github.com/eclipse-openj9/openj9/commit/350e06f17ae91ed294c906eb48b83a83196ecf2f", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-19T23:07:21Z", "type": "forcePushed"}, {"oid": "74fbbda1651b66490775fc3d8f049c85aa80ce2f", "url": "https://github.com/eclipse-openj9/openj9/commit/74fbbda1651b66490775fc3d8f049c85aa80ce2f", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-19T23:19:24Z", "type": "forcePushed"}, {"oid": "1c40bd2bb766de753157999897dca350081b4a4e", "url": "https://github.com/eclipse-openj9/openj9/commit/1c40bd2bb766de753157999897dca350081b4a4e", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-19T23:55:32Z", "type": "forcePushed"}, {"oid": "c78457f5ebf16de9724bfc2c90d89f4999a69f80", "url": "https://github.com/eclipse-openj9/openj9/commit/c78457f5ebf16de9724bfc2c90d89f4999a69f80", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-19T23:59:40Z", "type": "forcePushed"}, {"oid": "779fbe4c2ed7034abcda7e80e6626c816e36925f", "url": "https://github.com/eclipse-openj9/openj9/commit/779fbe4c2ed7034abcda7e80e6626c816e36925f", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-20T02:56:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzNjE2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r508636164", "bodyText": "Don't change this =)  The change isn't required and the original formatting kept the if and its conditions lined up with the opening brace.  Easier to track with your eye then indenting.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n          \n          \n            \n            \t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])", "author": "DanHeidinga", "createdAt": "2020-10-20T15:50:06Z", "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -439,23 +327,34 @@ ConstantPoolMap::findVarHandleMethodRefs()\n \n \tfor (U_16 i = 1; i < _romConstantPoolCount; i++) {\n \t\tif ((J9CPTYPE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n-\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n+\t\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])", "originalCommit": "779fbe4c2ed7034abcda7e80e6626c816e36925f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYzOTQ3Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r508639477", "bodyText": "This can be moved into the if ((sizeof(VARHANDLE_CLASS_NAME) - 1) == classNameLength) { block - always aim for the shortest lifetime for variables as possible as it makes reasoning about the code simpler", "author": "DanHeidinga", "createdAt": "2020-10-20T15:52:57Z", "path": "runtime/bcutil/ConstantPoolMap.cpp", "diffHunk": "@@ -439,23 +327,34 @@ ConstantPoolMap::findVarHandleMethodRefs()\n \n \tfor (U_16 i = 1; i < _romConstantPoolCount; i++) {\n \t\tif ((J9CPTYPE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n-\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n+\t\t\t|| (J9CPTYPE_INTERFACE_INSTANCE_METHOD == _romConstantPoolTypes[i])\n \t\t) {\n \t\t\tU_16 cfrCPIndex = _romConstantPoolEntries[i];\n-\t\t\tU_32 slot1 = getCPSlot1(cfrCPIndex);\n-\t\t\tU_32 slot2 = getCPSlot2(cfrCPIndex);\n-\n-\t\t\tif (isVarHandleMethod(slot1, slot2)) {\n-\t\t\t\tif (NULL == varHandleMethodTable) {\n-\t\t\t\t\t/* Allocate a temporary array for storing indices of VarHandle methodrefs */\n-\t\t\t\t\tvarHandleMethodTable = (U_16*) j9mem_allocate_memory(_romConstantPoolCount * sizeof(U_16), OMRMEM_CATEGORY_VM);\n-\t\t\t\t\tif (NULL == varHandleMethodTable) {\n-\t\t\t\t\t\t_buildResult = OutOfMemory;\n-\t\t\t\t\t\tbreak;\n+\t\t\tU_32 classIndex = getCPSlot1(cfrCPIndex);\n+\t\t\tU_32 nasIndex = getCPSlot2(cfrCPIndex);", "originalCommit": "779fbe4c2ed7034abcda7e80e6626c816e36925f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODY0Mjg2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10557#discussion_r508642866", "bodyText": "I strongly prefer this formatting but won't make you change it in new code.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif ((0 == memcmp(methodNameData, \"get\", methodNameLength))\n          \n          \n            \n            \t\t\t\t|| (0 == memcmp(methodNameData, \"set\", methodNameLength))\n          \n          \n            \n            \t\t\t) {\n          \n          \n            \n            \t\t\tif ((0 == memcmp(methodNameData, \"get\", methodNameLength))\n          \n          \n            \n            \t\t\t|| (0 == memcmp(methodNameData, \"set\", methodNameLength))\n          \n          \n            \n            \t\t\t) {", "author": "DanHeidinga", "createdAt": "2020-10-20T15:55:44Z", "path": "runtime/oti/VMHelpers.hpp", "diffHunk": "@@ -1728,6 +1729,120 @@ class VM_VMHelpers\n \t\treturn rc;\n \t}\n \n+\t/**\n+\t * Determine if the method name corresponds to a VarHandle method with polymorphic\n+\t * signature.\n+\t *\n+\t * @param methodNameData the bytes of the method name\n+\t * @param methodNameLength the length of the method name\n+\t *\n+\t * @return true for a VarHandle method with polymorphic signature. Otherwise,\n+\t * return false.\n+\t */\n+\tstatic VMINLINE bool\n+\tisPolymorphicVarHandleMethod(const U_8 *methodNameData, U_32 methodNameLength)\n+\t{\n+\t\tbool result = false;\n+\n+\t\tswitch (methodNameLength) {\n+\t\tcase 3:\n+\t\t\tif ((0 == memcmp(methodNameData, \"get\", methodNameLength))\n+\t\t\t\t|| (0 == memcmp(methodNameData, \"set\", methodNameLength))\n+\t\t\t) {", "originalCommit": "779fbe4c2ed7034abcda7e80e6626c816e36925f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "04b8a6a40b01637ec09f5fd1ead9f603956a52bf", "url": "https://github.com/eclipse-openj9/openj9/commit/04b8a6a40b01637ec09f5fd1ead9f603956a52bf", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-20T23:24:28Z", "type": "forcePushed"}, {"oid": "e3497a7f680e327400766c75f7a1f2b1eec3ca1e", "url": "https://github.com/eclipse-openj9/openj9/commit/e3497a7f680e327400766c75f7a1f2b1eec3ca1e", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-20T23:30:04Z", "type": "forcePushed"}, {"oid": "ea824a95f33b1c50133d7ea305a4f29ef562139f", "url": "https://github.com/eclipse-openj9/openj9/commit/ea824a95f33b1c50133d7ea305a4f29ef562139f", "message": "Rewrite MH.invoke and MH.invokeExact to invokehandle for OpenJDK MHs\n\nFor OpenJDK MethodHandles (MHs), MH.invoke and MH.invokeExact have the\nsame behavior. So, MH.invoke and MH.invokeExact are translated to the\nsame bytecode, \"invokehandle\".\n\nThe OpenJDK MH implementation relies upon LambdaForm(s) to dynamically\ngenerate bytecodes on the Java side. So, operations such as asType are\nhandled on the Java side. This allows MH.invoke/invokeExact to share a\ncommon path in the interpreter.\n\nFor OpenJ9 MHs, MH.invoke is translated to the invokehandlegeneric\nbytecode, and MH.invokeExact is translated to the invokehandle bytecode.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-21T16:45:27Z", "type": "commit"}, {"oid": "06225fb32a7457e65b9269949917ea19fadb2c57", "url": "https://github.com/eclipse-openj9/openj9/commit/06225fb32a7457e65b9269949917ea19fadb2c57", "message": "Rewrite VarHandle polymorphic methods to invokehandle bytecode\n\nFor the OpenJDK implementation, the VarHandle polymorphic methods are\ntranslated to the invokehandle bytecode.\n\nThe OpenJDK MH/VH implementation relies upon LambdaForm(s) to\ndynamically generate bytecodes on the Java side. So, operations such as\nasType are handled on the Java side. This allows MH.invoke,\nMH.invokeExact and VH polymorphic methods to share a common path in the\ninterpreter.\n\nFor the OpenJ9 implementation, the VarHandle polymorphic methods are\nredirected to the invokevarhandle INL during resolution.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-21T16:45:27Z", "type": "commit"}, {"oid": "310d1d70553e6bf6e7144eda29a389933b9630a1", "url": "https://github.com/eclipse-openj9/openj9/commit/310d1d70553e6bf6e7144eda29a389933b9630a1", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-21T16:45:27Z", "type": "commit"}, {"oid": "310d1d70553e6bf6e7144eda29a389933b9630a1", "url": "https://github.com/eclipse-openj9/openj9/commit/310d1d70553e6bf6e7144eda29a389933b9630a1", "message": "Consolidate code for checking a VarHandle polymorphic method\n\nThere are two locations where redundant code is used to check if a\nclass method is a VarHandle polymorphic method. The two locations are\nthe following:\n1) ConstantPoolMap::isVarHandleMethod\n2) ClassFileOracle::isPolymorphicVarHandleMethod\n\nA new utility function, VM_VMHelpers::isPolymorphicVarHandleMethod, has\nbeen added to support the above two locations.\n\nThe redundant code has been removed, and the new utility function is\nbeing used in the above two locations.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-21T16:45:27Z", "type": "forcePushed"}]}