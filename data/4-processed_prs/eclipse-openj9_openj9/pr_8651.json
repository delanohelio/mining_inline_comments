{"pr_number": 8651, "pr_title": "AArch64: Implement Nestmate interface call", "pr_createdAt": "2020-02-25T08:33:59Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8651", "timeline": [{"oid": "2d82cf87a9b31af42b22265de7de845b805466ba", "url": "https://github.com/eclipse-openj9/openj9/commit/2d82cf87a9b31af42b22265de7de845b805466ba", "message": "AArch64: Implement Nestmate interface call\n\nThis commit implements Nestmate interface call for AArch64.\n\nSigned-off-by: KONNO Kazuhiro <konno@jp.ibm.com>", "committedDate": "2020-03-03T08:50:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NjU0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8651#discussion_r390696548", "bodyText": "This was already defined on L114.  Should be J9TR_ICSnippet_TargetAddr2?", "author": "0xdaryl", "createdAt": "2020-03-11T01:13:44Z", "path": "runtime/compiler/aarch64/runtime/PicBuilder.spp", "diffHunk": "@@ -108,7 +109,12 @@\n \t.set\tJ9TR_UICSnippet_CP,\t\t8\n \t.set\tJ9TR_UICSnippet_CPIndex,\t16\n \t.set\tJ9TR_ICSnippet_InterfaceClass,\t24\n-\t.set\tJ9TR_ICSnippet_MethodIndex,\t32\n+\t.set\tJ9TR_ICSnippet_ITableIndex,\t32\n+\t.set\tJ9TR_ICSnippet_Class1,\t\t40\n+\t.set\tJ9TR_ICSnippet_TargetAddr1,\t48\n+\t.set\tJ9TR_ICSnippet_Class2,\t\t56\n+\t.set\tJ9TR_ICSnippet_TargetAddr1,\t64", "originalCommit": "2d82cf87a9b31af42b22265de7de845b805466ba", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NzczNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8651#discussion_r390697734", "bodyText": "What is the purpose of these fields?  Are they for building an interface PIC?  If I understand the code in this PR correctly, they are introduced but not used in this PR.  I would say your commit message should at least comment on the fact that you're introducing them here, but the actual PIC mechanics will be completed later.", "author": "0xdaryl", "createdAt": "2020-03-11T01:19:00Z", "path": "runtime/compiler/aarch64/codegen/CallSnippet.cpp", "diffHunk": "@@ -508,44 +508,97 @@ uint32_t TR::ARM64VirtualUnresolvedSnippet::getLength(int32_t estimatedSnippetSt\n \n uint8_t *TR::ARM64InterfaceCallSnippet::emitSnippetBody()\n    {\n+   TR::Compilation *comp = cg()->comp();\n    uint8_t *cursor = cg()->getBinaryBufferCursor();\n+   TR::Node *callNode = getNode();\n    TR::SymbolReference *methodSymRef = getNode()->getSymbolReference();\n    TR::SymbolReference *glueRef = cg()->symRefTab()->findOrCreateRuntimeHelper(TR_ARM64interfaceCallHelper, false, false, false);\n+   TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());\n+   void* thunk = fej9->getJ2IThunk(callNode->getSymbolReference()->getSymbol()->castToMethodSymbol()->getMethod(), comp);\n \n    getSnippetLabel()->setCodeLocation(cursor);\n \n    // bl glueRef\n-   *(int32_t *)cursor = cg()->encodeHelperBranchAndLink(glueRef, cursor, getNode());\n-   cursor += 4;\n+   *(int32_t *)cursor = cg()->encodeHelperBranchAndLink(glueRef, cursor, callNode);\n+   uint8_t *blAddress = cursor;\n+   cursor += ARM64_INSTRUCTION_LENGTH;\n \n    // Store the code cache RA\n    *(intptrj_t *)cursor = (intptrj_t)getReturnLabel()->getCodeLocation();\n    cg()->addExternalRelocation(new (cg()->trHeapMemory()) TR::ExternalRelocation(\n                                cursor,\n                                NULL,\n                                TR_AbsoluteMethodAddress, cg()),\n-                               __FILE__, __LINE__, getNode());\n-   cursor += 8;\n+                               __FILE__, __LINE__, callNode);\n+   cursor += sizeof(intptrj_t);\n \n    // CP\n-   *(intptrj_t *)cursor = (intptrj_t)methodSymRef->getOwningMethod(cg()->comp())->constantPool();\n-   cg()->addExternalRelocation(new (cg()->trHeapMemory()) TR::ExternalRelocation(\n-                               cursor,\n-                               *(uint8_t **)cursor,\n-                               getNode() ? (uint8_t *)getNode()->getInlinedSiteIndex() : (uint8_t *)-1,\n-                               TR_Thunks, cg()),\n-                               __FILE__, __LINE__, getNode());\n-   cursor += 8;\n+   intptrj_t cpAddr = (intptrj_t)methodSymRef->getOwningMethod(comp)->constantPool();\n+   *(intptrj_t *)cursor = cpAddr;\n+   uint8_t *j2iThunkRelocationPoint = cursor;\n+   cursor += sizeof(intptrj_t);\n \n    // CP index\n    *(intptrj_t *)cursor = methodSymRef->getCPIndexForVM();\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n \n-   // Add 2 more slots for resolved values (interface class and iTable offset)\n+   // 2 slots for resolved values (interface class and iTable index)\n    *(intptrj_t *)cursor = 0;\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n    *(intptrj_t *)cursor = 0;\n-   cursor += 8;\n+   cursor += sizeof(intptrj_t);\n+\n+   // Initialize for: two class ptrs, two target addrs\n+   // Initialize target addrs with the address of the bl\n+   *(intptrj_t *)cursor = -1;\n+   *(intptrj_t *)(cursor+sizeof(intptrj_t)) = (intptrj_t)blAddress;\n+   *(intptrj_t *)(cursor+2*sizeof(intptrj_t)) = -1;\n+   *(intptrj_t *)(cursor+3*sizeof(intptrj_t)) = (intptrj_t)blAddress;", "originalCommit": "2d82cf87a9b31af42b22265de7de845b805466ba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMzNzIyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8651#discussion_r391337220", "bodyText": "Updated the code removing the unused snippet fields.", "author": "knn-k", "createdAt": "2020-03-12T00:05:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NzczNA=="}], "type": "inlineReview"}, {"oid": "36a253eed6ed652ad886dc234e942b7760147bc0", "url": "https://github.com/eclipse-openj9/openj9/commit/36a253eed6ed652ad886dc234e942b7760147bc0", "message": "AArch64: Implement Nestmate interface call\n\nThis commit implements Nestmate interface call for AArch64.\n\nSigned-off-by: KONNO Kazuhiro <konno@jp.ibm.com>", "committedDate": "2020-03-12T00:01:59Z", "type": "forcePushed"}, {"oid": "f9cbb0039a73a8678f16b17ab6e144a32598dd49", "url": "https://github.com/eclipse-openj9/openj9/commit/f9cbb0039a73a8678f16b17ab6e144a32598dd49", "message": "AArch64: Implement Nestmate interface call\n\nThis commit implements Nestmate interface call for AArch64.\n\nSigned-off-by: KONNO Kazuhiro <konno@jp.ibm.com>", "committedDate": "2020-03-12T23:29:59Z", "type": "commit"}, {"oid": "f9cbb0039a73a8678f16b17ab6e144a32598dd49", "url": "https://github.com/eclipse-openj9/openj9/commit/f9cbb0039a73a8678f16b17ab6e144a32598dd49", "message": "AArch64: Implement Nestmate interface call\n\nThis commit implements Nestmate interface call for AArch64.\n\nSigned-off-by: KONNO Kazuhiro <konno@jp.ibm.com>", "committedDate": "2020-03-12T23:29:59Z", "type": "forcePushed"}]}