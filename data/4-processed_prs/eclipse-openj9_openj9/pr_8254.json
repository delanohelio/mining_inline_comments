{"pr_number": 8254, "pr_title": "Disable double mapping when page size exceeds default page size", "pr_createdAt": "2020-01-08T23:49:36Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8254", "timeline": [{"oid": "b8e9fb774f5778fb76afb8639ddfa0e5b7d4920a", "url": "https://github.com/eclipse-openj9/openj9/commit/b8e9fb774f5778fb76afb8639ddfa0e5b7d4920a", "message": "Disable double mapping when page size exceeds default page size\n\nIn systems that support huge pages, the heap is created using\nthe available huge pages (normally 2MB). The path taken to\ncreate a heap with huge pages is different from the one taken\nwhen normal page sizes are used. In order for double map to\nwork, heap must be created using mmap with a file descriptor\nassociated with the heap. However, doing that with huge pages\nis not supported in early glibc versions; in such versions,\nglibc only supports mmap + MAP_HUGETLB with anonymous mapping,\nwhich is the opposite of what we want (with anonymous mapping\nwe cannot use a file descriptor). For now we disable double\nmapping whenever huge pages are used; however in a later\nrelease we optimally want to enable it by using memfd_create(2)\nwhich also returns a file descriptor just like shm_open(3) but\nit uses the same semantics as other anonymous memory\nallocations unlike shm_open(3)\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-09T01:10:55Z", "type": "forcePushed"}, {"oid": "682c5fd8375cebbf9b2e4f4fb3a17f45f7b8bf54", "url": "https://github.com/eclipse-openj9/openj9/commit/682c5fd8375cebbf9b2e4f4fb3a17f45f7b8bf54", "message": "Disable double mapping when page size exceeds default page size\n\nIn systems that support huge pages, the heap is created using\nthe available huge pages (normally 2MB). The path taken to\ncreate a heap with huge pages is different from the one taken\nwhen normal page sizes are used. In order for double map to\nwork, heap must be created using mmap with a file descriptor\nassociated with the heap. However, doing that with huge pages\nis not supported in early glibc versions; in such versions,\nglibc only supports mmap + MAP_HUGETLB with anonymous mapping,\nwhich is the opposite of what we want (with anonymous mapping\nwe cannot use a file descriptor). For now we disable double\nmapping whenever huge pages are used; however in a later\nrelease we optimally want to enable it by using memfd_create(2)\nwhich also returns a file descriptor just like shm_open(3) but\nit uses the same semantics as other anonymous memory\nallocations unlike shm_open(3)\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-09T13:54:35Z", "type": "forcePushed"}, {"oid": "d5684b505bfbac28bdc4438d9cf384309615bd16", "url": "https://github.com/eclipse-openj9/openj9/commit/d5684b505bfbac28bdc4438d9cf384309615bd16", "message": "Disable double mapping when page size exceeds default page size\n\nIn systems that support huge pages, the heap is created using\nthe available huge pages (normally 2MB). The path taken to\ncreate a heap with huge pages is different from the one taken\nwhen normal page sizes are used. In order for double map to\nwork, heap must be created using mmap with a file descriptor\nassociated with the heap. However, doing that with huge pages\nis not supported in early glibc versions; in such versions,\nglibc only supports mmap + MAP_HUGETLB with anonymous mapping,\nwhich is the opposite of what we want (with anonymous mapping\nwe cannot use a file descriptor). For now we disable double\nmapping whenever huge pages are used; however in a later\nrelease we optimally want to enable it by using memfd_create(2)\nwhich also returns a file descriptor just like shm_open(3) but\nit uses the same semantics as other anonymous memory\nallocations unlike shm_open(3)\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-09T14:07:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg1MjkyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8254#discussion_r364852920", "bodyText": "spaces should be tabs", "author": "DanHeidinga", "createdAt": "2020-01-09T16:56:25Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -319,6 +319,10 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \tvm->initializeSlotsOnTLHAllocate = (extensions->batchClearTLH == 0) ? 1 : 0;\n #endif /* J9VM_GC_BATCH_CLEAR_TLH */\n \n+#if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n+        OMRPORT_ACCESS_FROM_J9PORT(privatePortLibrary);", "originalCommit": "d5684b505bfbac28bdc4438d9cf384309615bd16", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "228344d84a9af90ac84c73a93ae536363c8915b3", "url": "https://github.com/eclipse-openj9/openj9/commit/228344d84a9af90ac84c73a93ae536363c8915b3", "message": "Disable double mapping when page size exceeds default page size\n\nIn systems that support huge pages, the heap is created using\nthe available huge pages (normally 2MB). The path taken to\ncreate a heap with huge pages is different from the one taken\nwhen normal page sizes are used. In order for double map to\nwork, heap must be created using mmap with a file descriptor\nassociated with the heap. However, doing that with huge pages\nis not supported in early glibc versions; in such versions,\nglibc only supports mmap + MAP_HUGETLB with anonymous mapping,\nwhich is the opposite of what we want (with anonymous mapping\nwe cannot use a file descriptor). For now we disable double\nmapping whenever huge pages are used; however in a later\nrelease we optimally want to enable it by using memfd_create(2)\nwhich also returns a file descriptor just like shm_open(3) but\nit uses the same semantics as other anonymous memory\nallocations unlike shm_open(3).\n\nThis PR is dependent of eclipse/omr#4701\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-09T19:43:03Z", "type": "forcePushed"}, {"oid": "fa61e3f3f9d3d3208bd4da32a657e06eba7e81c0", "url": "https://github.com/eclipse-openj9/openj9/commit/fa61e3f3f9d3d3208bd4da32a657e06eba7e81c0", "message": "Disable double mapping when page size exceeds default page size\n\nIn systems that support huge pages, the heap is created using\nthe available huge pages (normally 2MB). The path taken to\ncreate a heap with huge pages is different from the one taken\nwhen normal page sizes are used. In order for double map to\nwork, heap must be created using mmap with a file descriptor\nassociated with the heap. However, doing that with huge pages\nis not supported in early glibc versions; in such versions,\nglibc only supports mmap + MAP_HUGETLB with anonymous mapping,\nwhich is the opposite of what we want (with anonymous mapping\nwe cannot use a file descriptor). For now we disable double\nmapping whenever huge pages are used; however in a later\nrelease we optimally want to enable it by using memfd_create(2)\nwhich also returns a file descriptor just like shm_open(3) but\nit uses the same semantics as other anonymous memory\nallocations unlike shm_open(3).\n\nThis PR is dependent of eclipse/omr#4701\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-09T20:15:47Z", "type": "forcePushed"}, {"oid": "0fe8b8795a3b0ea748c880b22f44b72247d4ed3d", "url": "https://github.com/eclipse-openj9/openj9/commit/0fe8b8795a3b0ea748c880b22f44b72247d4ed3d", "message": "Disable double mapping when page size exceeds default page size\n\nIn systems that support huge pages, the heap is created using\nthe available huge pages (normally 2MB). The path taken to\ncreate a heap with huge pages is different from the one taken\nwhen normal page sizes are used. In order for double map to\nwork, heap must be created using mmap with a file descriptor\nassociated with the heap. However, doing that with huge pages\nis not supported in early glibc versions; in such versions,\nglibc only supports mmap + MAP_HUGETLB with anonymous mapping,\nwhich is the opposite of what we want (with anonymous mapping\nwe cannot use a file descriptor). For now we disable double\nmapping whenever huge pages are used; however in a later\nrelease we optimally want to enable it by using memfd_create(2)\nwhich also returns a file descriptor just like shm_open(3) but\nit uses the same semantics as other anonymous memory\nallocations unlike shm_open(3).\n\nThis PR is dependent of eclipse/omr#4701\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-09T20:17:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NTMzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8254#discussion_r364945337", "bodyText": "May sound overkill, but I'm thinking to extend this logic a bit more....\nLet's introduce config param in Extension called doubleMappingRequested (currently false by default, but soon to change for supported platforms). This is what command line option would blindly control.\nAnd then we have the existing status param in indexableObjectModel where the info is if we obeyed the request or not. Currently there is only one reason to not obey, but perhaps there will be more (well, I hope there will be less - which makes this change overkill).\nHere, at early startup instead of querying if status is already set, we query if it's requested. The rest of the code (mid run) would query the status flag.\nThe control flag could reside in ExtensionsVLHGC, hence no need to touch OMR.", "author": "amicic", "createdAt": "2020-01-09T20:28:53Z", "path": "runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp", "diffHunk": "@@ -132,6 +132,20 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t}\n #endif /* defined(OMR_GC_VLHGC_CONCURRENT_COPY_FORWARD) */\n \n+#if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n+\t/* Disable double map if requested page sizes used is equal to huge pages.\n+\t * Currently double map is not supported when huge pages are used.\n+\t */\n+\tif (NULL != heap) {\n+\t\tif (extensions->memoryManager->isLargePage(env, heap->getPageSize())) {\n+\t\t\tGC_ArrayObjectModel *indexableObjectModel = &extensions->indexableObjectModel;\n+\t\t\tif (indexableObjectModel->isDoubleMappingEnabled()) {", "originalCommit": "0fe8b8795a3b0ea748c880b22f44b72247d4ed3d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MTc2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8254#discussion_r364951767", "bodyText": "I'd move the code up just after MM_HeapVirtualMemory::newInstance() (if that's the spot where we determine effective page size)", "author": "amicic", "createdAt": "2020-01-09T20:45:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk0NTMzNw=="}], "type": "inlineReview"}, {"oid": "64083c004d42e275da7fe606624ea51721ad12c9", "url": "https://github.com/eclipse-openj9/openj9/commit/64083c004d42e275da7fe606624ea51721ad12c9", "message": "Add double map request field\n\nAdd double map request field and distinguish between\nstatus and request field\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-09T22:14:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0NzA0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8254#discussion_r365247045", "bodyText": "we should be setting only control flag here, not status. status is set always to false by constructor of indexableObjectModel", "author": "amicic", "createdAt": "2020-01-10T14:02:45Z", "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -167,10 +167,12 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t\tif (try_scan(&scan_start, \"enableDoubleMapping\")) {\n \t\t\textensions->indexableObjectModel.setEnableDoubleMapping(true);\n+\t\t\textensions->indexableObjectModel.setEnableDoubleMappingStatus(true);", "originalCommit": "64083c004d42e275da7fe606624ea51721ad12c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0NzI5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8254#discussion_r365247293", "bodyText": "I guess, I was not clear enough, we should query control flag here.", "author": "amicic", "createdAt": "2020-01-10T14:03:27Z", "path": "runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp", "diffHunk": "@@ -97,6 +97,23 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t\treturn NULL;\n \t}\n \n+#if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n+\t/* Disable double map if requested page sizes used is equal to huge pages.\n+\t * Currently double map is not supported when huge pages are used.\n+\t * Note that we keep two double map fields: one for requested and another for\n+\t * status. If large pages is enabled, it  will only change the STATUS of double\n+\t * mapping, keeping the REQUESTED double mapping field intact.\n+\t */\n+\tif (NULL != heap) {\n+\t\tif (extensions->memoryManager->isLargePage(env, heap->getPageSize())) {\n+\t\t\tGC_ArrayObjectModel *indexableObjectModel = &extensions->indexableObjectModel;\n+\t\t\tif (indexableObjectModel->isDoubleMappingStatusEnabled()) {", "originalCommit": "64083c004d42e275da7fe606624ea51721ad12c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI0Nzg5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8254#discussion_r365247891", "bodyText": "no really need to for this wrapper. command line option parser can change isDoubleMapRequested  directly", "author": "amicic", "createdAt": "2020-01-10T14:04:57Z", "path": "runtime/gc_glue_java/ArrayletObjectModelBase.cpp", "diffHunk": "@@ -74,6 +74,15 @@ GC_ArrayletObjectModelBase::expandArrayletSubSpaceRange(MM_MemorySubSpace * subS\n \t}\n }\n \n+#if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n+void\n+GC_ArrayletObjectModelBase::setEnableDoubleMapping(bool enableDoubleMapping)\n+{\n+\tMM_GCExtensionsBase* extensions = MM_GCExtensionsBase::getExtensions(_omrVM);\n+\textensions->isDoubleMapRequested = enableDoubleMapping;\n+}\n+#endif /* J9VM_GC_ENABLE_DOUBLE_MAP */\n+", "originalCommit": "64083c004d42e275da7fe606624ea51721ad12c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "205155c9fe5f2e70a4ae5df0be3d50bd59160e82", "url": "https://github.com/eclipse-openj9/openj9/commit/205155c9fe5f2e70a4ae5df0be3d50bd59160e82", "message": "Add double map request field\n\nAdd double map request field and distinguish between\nstatus and request field\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-10T14:29:30Z", "type": "forcePushed"}, {"oid": "26686f29f67a86ea822ee5e606b9ef4a93e2acb0", "url": "https://github.com/eclipse-openj9/openj9/commit/26686f29f67a86ea822ee5e606b9ef4a93e2acb0", "message": "Add double map request field\n\nAdd double map request field and distinguish between\nstatus and request field\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-10T14:31:04Z", "type": "forcePushed"}, {"oid": "0c505eb095e6f7342aa615519cdda8257aaffb69", "url": "https://github.com/eclipse-openj9/openj9/commit/0c505eb095e6f7342aa615519cdda8257aaffb69", "message": "Add double map request field\n\nAdd double map request field and distinguish between\nstatus and request field\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-10T14:39:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2OTEwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8254#discussion_r365269100", "bodyText": "not really needed. since we return if NULL prior to even possibly reaching this point.", "author": "amicic", "createdAt": "2020-01-10T14:49:31Z", "path": "runtime/gc_vlhgc/ConfigurationIncrementalGenerational.cpp", "diffHunk": "@@ -97,6 +97,22 @@ MM_ConfigurationIncrementalGenerational::createHeapWithManager(MM_EnvironmentBas\n \t\treturn NULL;\n \t}\n \n+#if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n+\t/* Disable double map if requested page sizes used is equal to huge pages.\n+\t * Currently double map is not supported when huge pages are used.\n+\t * Note that we keep two double map fields: one for requested and another for\n+\t * status. If large pages is enabled, it  will only change the STATUS of double\n+\t * mapping, keeping the REQUESTED double mapping field intact.\n+\t */\n+\tif (NULL != heap) {", "originalCommit": "0c505eb095e6f7342aa615519cdda8257aaffb69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI3NDMxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8254#discussion_r365274316", "bodyText": "let's be more specific and rename the control flag and the options with appending Arraylet(Double...)\nstatus flag name is ok as is, since it's in the domain of IndexibleModel class.", "author": "amicic", "createdAt": "2020-01-10T15:00:22Z", "path": "runtime/gc_modron_startup/mmparseXXgc.cpp", "diffHunk": "@@ -166,11 +166,11 @@ gcParseXXgcArguments(J9JavaVM *vm, char *optArg)\n \t\t}\n #if defined(J9VM_GC_ENABLE_DOUBLE_MAP)\n \t\tif (try_scan(&scan_start, \"enableDoubleMapping\")) {\n-\t\t\textensions->indexableObjectModel.setEnableDoubleMapping(true);\n+\t\t\textensions->isDoubleMapRequested = true;", "originalCommit": "0c505eb095e6f7342aa615519cdda8257aaffb69", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3c93341f9c655153d169a6e67491fd9597680394", "url": "https://github.com/eclipse-openj9/openj9/commit/3c93341f9c655153d169a6e67491fd9597680394", "message": "Add double map request field\n\nAdd double map request field and distinguish between\nstatus and request field\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-10T20:21:50Z", "type": "forcePushed"}, {"oid": "9e7cbb6ee4ad903bbbb4aa964c892797902c1ec1", "url": "https://github.com/eclipse-openj9/openj9/commit/9e7cbb6ee4ad903bbbb4aa964c892797902c1ec1", "message": "Introduce double mapping verbose GC option\n\nAdd double map request field and distinguish between\nstatus and request field\n\nIntroduce double mapping verbose GC option for\nbalanced GC policy where it outputs \"true\" if double\nmapping is enabled and \"false\" otherwise\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-10T20:24:01Z", "type": "forcePushed"}, {"oid": "40489930af31b7a15650f7888c8df39db257fc3e", "url": "https://github.com/eclipse-openj9/openj9/commit/40489930af31b7a15650f7888c8df39db257fc3e", "message": "Introduce double mapping verbose GC option\n\nAdd double map request field and distinguish between\nstatus and request field\n\nIntroduce double mapping verbose GC option for\nbalanced GC policy where it outputs \"true\" if double\nmapping is enabled and \"false\" otherwise\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-10T20:59:40Z", "type": "forcePushed"}, {"oid": "6730294110b1f4083e929e716328fe11b3ff0511", "url": "https://github.com/eclipse-openj9/openj9/commit/6730294110b1f4083e929e716328fe11b3ff0511", "message": "Introduce double mapping verbose GC option\n\nAdd double map request field and distinguish between\nstatus and request field\n\nIntroduce double mapping verbose GC option for\nbalanced GC policy where it outputs \"true\" if double\nmapping is enabled and \"false\" otherwise\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-10T23:29:09Z", "type": "forcePushed"}, {"oid": "0634cbdfb47d2c755dcf47aa573cce64ef119d1b", "url": "https://github.com/eclipse-openj9/openj9/commit/0634cbdfb47d2c755dcf47aa573cce64ef119d1b", "message": "Introduce double mapping verbose GC option\n\nAdd double map request field and distinguish between\nstatus and request field\n\nIntroduce double mapping verbose GC option for\nbalanced GC policy where it outputs \"true\" if double\nmapping is enabled and \"false\" otherwise\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-11T00:27:33Z", "type": "forcePushed"}, {"oid": "ffa806cf24d7a321a258cbbee6a5c32e93badeda", "url": "https://github.com/eclipse-openj9/openj9/commit/ffa806cf24d7a321a258cbbee6a5c32e93badeda", "message": "Introduce double mapping verbose GC option\n\nAdd double map request field and distinguish between\nstatus and request field\n\nIntroduce double mapping verbose GC option for\nbalanced GC policy where it outputs \"true\" if double\nmapping is enabled and \"false\" otherwise\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-13T18:35:05Z", "type": "forcePushed"}, {"oid": "930c0282ffccebd596cc680fbefdd6ffbbee9b77", "url": "https://github.com/eclipse-openj9/openj9/commit/930c0282ffccebd596cc680fbefdd6ffbbee9b77", "message": "Disable double mapping when page size exceeds default page size\n\nIn systems that support huge pages, the heap is created using\nthe available huge pages (normally 2MB). The path taken to\ncreate a heap with huge pages is different from the one taken\nwhen normal page sizes are used. In order for double map to\nwork, heap must be created using mmap with a file descriptor\nassociated with the heap. However, doing that with huge pages\nis not supported in early glibc versions; in such versions,\nglibc only supports mmap + MAP_HUGETLB with anonymous mapping,\nwhich is the opposite of what we want (with anonymous mapping\nwe cannot use a file descriptor). For now we disable double\nmapping whenever huge pages are used; however in a later\nrelease we optimally want to enable it by using memfd_create(2)\nwhich also returns a file descriptor just like shm_open(3) but\nit uses the same semantics as other anonymous memory\nallocations unlike shm_open(3).\n\nIntroduce double mapping verbose GC option for\nbalanced GC policy\n\nThis PR is dependent of eclipse/omr#4701\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-14T16:18:36Z", "type": "commit"}, {"oid": "930c0282ffccebd596cc680fbefdd6ffbbee9b77", "url": "https://github.com/eclipse-openj9/openj9/commit/930c0282ffccebd596cc680fbefdd6ffbbee9b77", "message": "Disable double mapping when page size exceeds default page size\n\nIn systems that support huge pages, the heap is created using\nthe available huge pages (normally 2MB). The path taken to\ncreate a heap with huge pages is different from the one taken\nwhen normal page sizes are used. In order for double map to\nwork, heap must be created using mmap with a file descriptor\nassociated with the heap. However, doing that with huge pages\nis not supported in early glibc versions; in such versions,\nglibc only supports mmap + MAP_HUGETLB with anonymous mapping,\nwhich is the opposite of what we want (with anonymous mapping\nwe cannot use a file descriptor). For now we disable double\nmapping whenever huge pages are used; however in a later\nrelease we optimally want to enable it by using memfd_create(2)\nwhich also returns a file descriptor just like shm_open(3) but\nit uses the same semantics as other anonymous memory\nallocations unlike shm_open(3).\n\nIntroduce double mapping verbose GC option for\nbalanced GC policy\n\nThis PR is dependent of eclipse/omr#4701\n\nSigned-off-by: Igor Braga <higorb1@gmail.com>", "committedDate": "2020-01-14T16:18:36Z", "type": "forcePushed"}]}