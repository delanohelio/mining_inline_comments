{"pr_number": 8598, "pr_title": "Handle unexpected bytecodes in method handle thunk", "pr_createdAt": "2020-02-18T15:03:31Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8598", "timeline": [{"oid": "70b8822e3dbddc673bbba4553c2626a694d4f763", "url": "https://github.com/eclipse-openj9/openj9/commit/70b8822e3dbddc673bbba4553c2626a694d4f763", "message": "Handle unexpected bytecodes in method handle thunk\n\nStop recursive inlining if a method handle thunk contains unexpected\nbytecodes.\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>", "committedDate": "2020-02-18T15:05:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r382764052", "bodyText": "why 7?", "author": "andrewcraik", "createdAt": "2020-02-21T19:27:32Z", "path": "runtime/compiler/optimizer/J9EstimateCodeSize.cpp", "diffHunk": "@@ -1277,7 +1277,11 @@ TR_J9EstimateCodeSize::realEstimateCodeSize(TR_CallTarget *calltarget, TR_CallSt\n       {\n       bci.prepareToFindAndCreateCallsites(blocks, flags, callSites, &cfg, &newBCInfo, _recursionDepth, &callStack);\n       bool iteratorWithState = isCalleeMethodHandleThunk && !mhInlineWithPeeking;\n-      bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState);\n+      if (!bci.findAndCreateCallsitesFromBytecodes(wasPeekingSuccessfull, iteratorWithState))\n+         {\n+         heuristicTrace(tracer(), \"*** Depth %d: ECS end for target %p signature %s. bci.findAndCreateCallsitesFromBytecode failed\", _recursionDepth, calltarget, callerName);\n+         return returnCleanup(7);", "originalCommit": "70b8822e3dbddc673bbba4553c2626a694d4f763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzMyOTg2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383329869", "bodyText": "I think the number is used to identify the location of error return starting from 0 and the largest existing number is 6.", "author": "cathyzhyi", "createdAt": "2020-02-24T15:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0ODM5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383448391", "bodyText": "where are these defined? I'm not a fan of this kind of magic number...", "author": "andrewcraik", "createdAt": "2020-02-24T18:51:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwMjMzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r384002334", "bodyText": "it's defined here https://github.com/eclipse/openj9/blob/ef5279e88d90827a8f4fbfe494e661539e7b74c0/runtime/compiler/optimizer/EstimateCodeSize.hpp#L81 and used here https://github.com/eclipse/openj9/blob/ef5279e88d90827a8f4fbfe494e661539e7b74c0/runtime/compiler/optimizer/InlinerTempForJ9.cpp#L3553-L3554\nAnd inside https://github.com/eclipse/openj9/blob/ef5279e88d90827a8f4fbfe494e661539e7b74c0/runtime/compiler/optimizer/J9EstimateCodeSize.cpp#L1040 searching for cleanup( would show all the places using this API to bail. Probably a least an enum can make it looks cleaner.", "author": "cathyzhyi", "createdAt": "2020-02-25T17:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxODQ4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r384518482", "bodyText": "Ok, I think it would be good to create a cleanup item to at least convert these magic numbers to an enum as a beginner item since the current state of affairs is far from idea. Could we have a comment on the function where we use these magic numbers of what the return values are as a stop gap?", "author": "andrewcraik", "createdAt": "2020-02-26T14:16:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU5MTQ1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r384591453", "bodyText": "added documentation for in the returnCleanup and opened an issue here #8664", "author": "cathyzhyi", "createdAt": "2020-02-26T16:01:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDA1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDQ2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r382764468", "bodyText": "would false be better as meaning some error occurred - eg an unexpected bytecode?", "author": "andrewcraik", "createdAt": "2020-02-21T19:28:28Z", "path": "runtime/compiler/optimizer/InterpreterEmulator.hpp", "diffHunk": "@@ -224,8 +226,10 @@ class InterpreterEmulator : public TR_ByteCodeIteratorWithState<TR_J9ByteCode, J\n       void initializeIteratorWithState();\n       /*\n        * push and pop operands on stack according to given bytecode\n+       *\n+       * \\return whether maintainStack succeed. Return false if there is any unexpected bytecode.", "originalCommit": "70b8822e3dbddc673bbba4553c2626a694d4f763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3OTUwNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383379505", "bodyText": "modified the documentation msg.", "author": "cathyzhyi", "createdAt": "2020-02-24T16:41:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDc4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r382764789", "bodyText": "formatting - return on new line please", "author": "andrewcraik", "createdAt": "2020-02-21T19:29:10Z", "path": "runtime/compiler/optimizer/InterpreterEmulator.cpp", "diffHunk": "@@ -439,13 +441,15 @@ InterpreterEmulator::findAndCreateCallsitesFromBytecodes(bool wasPeekingSuccessf\n \n       if (_iteratorWithState)\n          {\n-         maintainStack(bc);\n-         dumpStack();\n+         if (maintainStack(bc))\n+            dumpStack();\n+         else return false;", "originalCommit": "70b8822e3dbddc673bbba4553c2626a694d4f763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3OTU5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383379591", "bodyText": "fixed.", "author": "cathyzhyi", "createdAt": "2020-02-24T16:41:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NDc4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NTE4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r382765182", "bodyText": "might also be worht having a static debug counter - possibly even one that counts the specific bytecodes that caused failures. An envvar for a fatal assert might not be a bad idea for development to make finding missing bytecodes easier.", "author": "andrewcraik", "createdAt": "2020-02-21T19:30:02Z", "path": "runtime/compiler/optimizer/InterpreterEmulator.cpp", "diffHunk": "@@ -216,8 +216,10 @@ InterpreterEmulator::maintainStack(TR_J9ByteCode bc)\n       case J9BCinvokestaticsplit:\n          break;\n       default:\n-         TR_ASSERT_FATAL(0, \"unexpected bytecode in thunk archetype %p at bcIndex %d %s (%d)\\n\", _calltarget, bcIndex(), comp()->fej9()->getByteCodeName(nextByte(0)), bc);\n+         debugTrace(tracer(), \"unexpected bytecode in thunk archetype %p at bcIndex %d %s (%d)\\n\", _calltarget, bcIndex(), comp()->fej9()->getByteCodeName(nextByte(0)), bc);", "originalCommit": "70b8822e3dbddc673bbba4553c2626a694d4f763", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5ODczNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8598#discussion_r383398735", "bodyText": "modified as suggested.", "author": "cathyzhyi", "createdAt": "2020-02-24T17:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NTE4Mg=="}], "type": "inlineReview"}, {"oid": "eb114f3ddb14811a14567525c1eeba71a8f3b092", "url": "https://github.com/eclipse-openj9/openj9/commit/eb114f3ddb14811a14567525c1eeba71a8f3b092", "message": "Handle unexpected bytecodes in method handle thunk\n\nStop recursive inlining if a method handle thunk contains unexpected\nbytecodes.\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>", "committedDate": "2020-02-24T16:39:51Z", "type": "forcePushed"}, {"oid": "49f59f18b5627b6b05841b17ca7f1639f3f7f12c", "url": "https://github.com/eclipse-openj9/openj9/commit/49f59f18b5627b6b05841b17ca7f1639f3f7f12c", "message": "Handle unexpected bytecodes in method handle thunk\n\nStop recursive inlining if a method handle thunk contains unexpected\nbytecodes.\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>", "committedDate": "2020-02-24T17:03:58Z", "type": "forcePushed"}, {"oid": "fe4f1c9c508f52602e9a5b0db7bcff2b867f1a7d", "url": "https://github.com/eclipse-openj9/openj9/commit/fe4f1c9c508f52602e9a5b0db7bcff2b867f1a7d", "message": "Handle unexpected bytecodes in method handle thunk\n\nStop recursive inlining if a method handle thunk contains unexpected\nbytecodes.\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>", "committedDate": "2020-02-24T17:09:03Z", "type": "forcePushed"}, {"oid": "bc3d724f481a2afd0cd965bfe609fd8be3e3aa88", "url": "https://github.com/eclipse-openj9/openj9/commit/bc3d724f481a2afd0cd965bfe609fd8be3e3aa88", "message": "Handle unexpected bytecodes in method handle thunk\n\nStop recursive inlining if a method handle thunk contains unexpected\nbytecodes.\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>", "committedDate": "2020-02-26T15:55:25Z", "type": "forcePushed"}, {"oid": "905f73868a18b7edc092c62392adc6e03c7bbbbd", "url": "https://github.com/eclipse-openj9/openj9/commit/905f73868a18b7edc092c62392adc6e03c7bbbbd", "message": "Fix method handle inlining and small improvements\n\nThis change fixes a bug in interpreter emulator. When loading an\nauto check the index to make sure it's an argument before goes ahead\nextracting arg type info from it.\n\nThis change also makes to small improvements\n1.stops recursive inlining if a method handle thunk contains\nunexpected bytecodes.\n2. dont use interpreter emulator for targeted inlining since the\ninterpreter emulator is intended for general inlining.\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>", "committedDate": "2020-03-02T15:55:55Z", "type": "commit"}, {"oid": "905f73868a18b7edc092c62392adc6e03c7bbbbd", "url": "https://github.com/eclipse-openj9/openj9/commit/905f73868a18b7edc092c62392adc6e03c7bbbbd", "message": "Fix method handle inlining and small improvements\n\nThis change fixes a bug in interpreter emulator. When loading an\nauto check the index to make sure it's an argument before goes ahead\nextracting arg type info from it.\n\nThis change also makes to small improvements\n1.stops recursive inlining if a method handle thunk contains\nunexpected bytecodes.\n2. dont use interpreter emulator for targeted inlining since the\ninterpreter emulator is intended for general inlining.\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>\n\nSigned-off-by: Yi Zhang <yizhang@ca.ibm.com>", "committedDate": "2020-03-02T15:55:55Z", "type": "forcePushed"}]}