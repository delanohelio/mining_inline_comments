{"pr_number": 8260, "pr_title": "Replace references to -XX:StartAsJITServer with jitserver", "pr_createdAt": "2020-01-09T16:53:01Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8260", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMTYzNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364901636", "bodyText": "Could you elaborate a bit more on how the JITServer launcher is built with the JVM? Something like JITServer launcher will be built only when --enable-jitserver is passed to the bash configure when building OpenJ9?", "author": "a7ehuo", "createdAt": "2020-01-09T18:46:44Z", "path": "doc/compiler/jitserver/Usage.md", "diffHunk": "@@ -20,14 +20,16 @@ OpenJDK Assembly Exception [2].\n SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n -->\n \n-JITServer adds an additional two *personas* to the `java` executable: client mode and server mode. There are two new command line options that can be used to select a persona: `-XX:StartAsJITServer` and `-XX:+UseJITServer`.\n+JITServer adds an additional two *personas* to the JVM: client mode and server mode. To start the JVM in server mode, run the `jitserver` launcher present under `bin` directory (along side `java` launcher). To start the JVM in client mode, there is a new command line option: `-XX:+UseJITServer`.", "originalCommit": "4468330ad77734e01334e8fe0ebb0c45276e4793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk4OTU2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364989567", "bodyText": "I think this would be more appropriate in Build.md.", "author": "ashu-mehra", "createdAt": "2020-01-09T22:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMTYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMjY4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364902682", "bodyText": "Could we add a path to the command to show where the launcher can be found to make it more explicit for people who are not familiar with the build directory structures?\nSuch as for Java 8:\n$~/src/openj9-openjdk-jdk8/build/linux-x86_64-normal-server-release/images/j2sdk-image/jre/bin/jitserver", "author": "a7ehuo", "createdAt": "2020-01-09T18:48:12Z", "path": "doc/compiler/jitserver/Usage.md", "diffHunk": "@@ -20,14 +20,16 @@ OpenJDK Assembly Exception [2].\n SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n -->\n \n-JITServer adds an additional two *personas* to the `java` executable: client mode and server mode. There are two new command line options that can be used to select a persona: `-XX:StartAsJITServer` and `-XX:+UseJITServer`.\n+JITServer adds an additional two *personas* to the JVM: client mode and server mode. To start the JVM in server mode, run the `jitserver` launcher present under `bin` directory (along side `java` launcher). To start the JVM in client mode, there is a new command line option: `-XX:+UseJITServer`.\n \n-In server mode, the JVM will halt after startup and begin listening for compilation requests from clients. No Java application is given to the server on the command line.\n+In server mode, the JVM will halt after startup and begin listening for compilation requests from clients. No Java application is given to the `jitserver` launcher on the command line. Any option accepted by JVM can also be passed to the `jitserver` launcher.\n \n ```\n-$ java -XX:StartAsJITServer\n+$ jitserver", "originalCommit": "4468330ad77734e01334e8fe0ebb0c45276e4793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxMjQyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364912424", "bodyText": "There is a comment above that the launcher is present in the bin directory alongside the java launcher. In my mind this is sufficient to locate it", "author": "mpirvu", "createdAt": "2020-01-09T19:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMjY4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxOTY0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364919643", "bodyText": "\"adds an additional two personas \" ==> \"adds two additional personas\"", "author": "mpirvu", "createdAt": "2020-01-09T19:27:32Z", "path": "doc/compiler/jitserver/Usage.md", "diffHunk": "@@ -20,14 +20,16 @@ OpenJDK Assembly Exception [2].\n SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n -->\n \n-JITServer adds an additional two *personas* to the `java` executable: client mode and server mode. There are two new command line options that can be used to select a persona: `-XX:StartAsJITServer` and `-XX:+UseJITServer`.\n+JITServer adds an additional two *personas* to the JVM: client mode and server mode. To start the JVM in server mode, run the `jitserver` launcher present under `bin` directory (along side `java` launcher). To start the JVM in client mode, there is a new command line option: `-XX:+UseJITServer`.", "originalCommit": "4468330ad77734e01334e8fe0ebb0c45276e4793", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyMTczOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364921738", "bodyText": "Above, the sentence \"This is because the client will fall back to running the interpreter (slow path) if it cannot connect to a server.\" is not correct. The client will perform required JIT compilations locally if a server is not available.", "author": "mpirvu", "createdAt": "2020-01-09T19:32:07Z", "path": "doc/compiler/jitserver/Usage.md", "diffHunk": "@@ -49,22 +51,25 @@ You might have noticed that running the client without any server to connect to\n \n With verbose logging, if a client connects successfully then server output should look something like this:\n ```\n-$ java -XX:StartAsJITServer -Xjit:verbose=\\{JITServer\\}\n-\n-#JITServer: JITServer in Server Mode. Port: 38400\n-#JITServer: Started JITServer listener thread: 0000000001B8DE00\n-JITServer ready to accept incoming requests\n-\n-#JITServer: Server allocated data for a new clientUID 7273413081043723869\n-#JITServer: Server received request to compile sun/reflect/Reflection.getCallerClass @ cold\n-#JITServer: Server queued compilation for sun/reflect/Reflection.getCallerClass\n-#JITServer: Server cached clientSessionData=00007FFFDA1973E0 for clientUID=7273413081043723869 compThreadID=0\n-#JITServer: Server has successfully compiled sun/reflect/Reflection.getCallerClass()Ljava/lang/Class;\n-#JITServer: Server received request to compile java/lang/Double.longBitsToDouble @ cold\n-#JITServer: Server queued compilation for java/lang/Double.longBitsToDouble\n-#JITServer: Server cached clientSessionData=00007FFFDA1973E0 for clientUID=7273413081043723869 compThreadID=1\n-#JITServer: Server has successfully compiled java/lang/Double.longBitsToDouble(J)D\n-#JITServer: Server received request to compile java/lang/System.getEncoding @ cold\n+$ jitserver -Xjit:verbose=\\{JITServer\\}", "originalCommit": "4468330ad77734e01334e8fe0ebb0c45276e4793", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyMzI1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364923258", "bodyText": "Below, when specifying the server address the correct syntax is\njava -XX:UseJITServerAddress=example.com", "author": "mpirvu", "createdAt": "2020-01-09T19:35:49Z", "path": "doc/compiler/jitserver/Usage.md", "diffHunk": "@@ -49,22 +51,25 @@ You might have noticed that running the client without any server to connect to\n \n With verbose logging, if a client connects successfully then server output should look something like this:\n ```\n-$ java -XX:StartAsJITServer -Xjit:verbose=\\{JITServer\\}\n-\n-#JITServer: JITServer in Server Mode. Port: 38400\n-#JITServer: Started JITServer listener thread: 0000000001B8DE00\n-JITServer ready to accept incoming requests\n-\n-#JITServer: Server allocated data for a new clientUID 7273413081043723869\n-#JITServer: Server received request to compile sun/reflect/Reflection.getCallerClass @ cold\n-#JITServer: Server queued compilation for sun/reflect/Reflection.getCallerClass\n-#JITServer: Server cached clientSessionData=00007FFFDA1973E0 for clientUID=7273413081043723869 compThreadID=0\n-#JITServer: Server has successfully compiled sun/reflect/Reflection.getCallerClass()Ljava/lang/Class;\n-#JITServer: Server received request to compile java/lang/Double.longBitsToDouble @ cold\n-#JITServer: Server queued compilation for java/lang/Double.longBitsToDouble\n-#JITServer: Server cached clientSessionData=00007FFFDA1973E0 for clientUID=7273413081043723869 compThreadID=1\n-#JITServer: Server has successfully compiled java/lang/Double.longBitsToDouble(J)D\n-#JITServer: Server received request to compile java/lang/System.getEncoding @ cold\n+$ jitserver -Xjit:verbose=\\{JITServer\\}\n+\n+JITServer is currently a technology preview. Its use is not yet supported\n+\n+#JITServer: JITServer Server Mode. Port: 38400. Connection Timeout 2000ms\n+#JITServer: Started JITServer listener thread: 0000000000226C00\n+JITServer is ready to accept incoming requests\n+\n+#JITServer: Server received request for stream 00007FEC658EF720\n+#JITServer: Server allocated data for a new clientUID 11129135271614904954\n+#JITServer: compThreadID=0 created clientSessionData=00007FEC658EFBE0 for clientUID=11129135271614904954 seqNo=0\n+#JITServer: Server will process a list of 0 unloaded classes for clientUID 11129135271614904954\n+#JITServer: compThreadID=0 has successfully compiled java/lang/Double.longBitsToDouble(J)D\n+#JITServer: compThreadID=0 found clientSessionData=00007FEC658EFBE0 for clientUID=11129135271614904954 seqNo=1\n+#JITServer: Server will process a list of 0 unloaded classes for clientUID 11129135271614904954\n+#JITServer: compThreadID=0 has successfully compiled jdk/internal/reflect/Reflection.getCallerClass()Ljava/lang/Class;\n+#JITServer: compThreadID=0 found clientSessionData=00007FEC658EFBE0 for clientUID=11129135271614904954 seqNo=2\n+#JITServer: Server will process a list of 0 unloaded classes for clientUID 11129135271614904954\n+#JITServer: compThreadID=0 has successfully compiled java/lang/System.getEncoding(I)Ljava/lang/String;", "originalCommit": "4468330ad77734e01334e8fe0ebb0c45276e4793", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDEzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364924137", "bodyText": "there is no port suboption, so let's rephrase. The example is correct though.", "author": "mpirvu", "createdAt": "2020-01-09T19:37:52Z", "path": "doc/compiler/jitserver/Usage.md", "diffHunk": "@@ -79,14 +84,14 @@ $ java -XX:+UseJITServer:server=example.com\n #### Port\n By default, communication occurs on port 38400. You can change this by specifying the `port` suboption as follows:", "originalCommit": "4468330ad77734e01334e8fe0ebb0c45276e4793", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDQxOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364924418", "bodyText": "By default there is a 30000 ms timeout at the server and 2000 ms timeout at the client", "author": "mpirvu", "createdAt": "2020-01-09T19:38:32Z", "path": "doc/compiler/jitserver/Usage.md", "diffHunk": "@@ -79,14 +84,14 @@ $ java -XX:+UseJITServer:server=example.com\n #### Port\n By default, communication occurs on port 38400. You can change this by specifying the `port` suboption as follows:\n ```\n-$ java -XX:StartAsJITServer -XX:JITServerPort=1234\n+$ jitserver -XX:JITServerPort=1234\n $ java -XX:+UseJITServer -XX:JITServerPort=1234 MyApplication\n ```\n \n #### Timeout\n If your network connection is flaky, you may want to specify a timeout. By default there is no timeout. Timeout is given in milliseconds. Client and server timeouts do not need to match, but there's usually no reason for them to differ.", "originalCommit": "4468330ad77734e01334e8fe0ebb0c45276e4793", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNTM3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8260#discussion_r364925378", "bodyText": "\"there's usually no reason for them to differ.\" is incorrect. Typically the timeout at the server can be larger; it can afford to wait because there is nothing else to do anyway. Waiting too much at the client can be detrimental because the client has the option of compiling locally and make progress.", "author": "mpirvu", "createdAt": "2020-01-09T19:40:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDQxOA=="}], "type": "inlineReview"}, {"oid": "241923a6224279f3807d3b89b49331f7314cf34a", "url": "https://github.com/eclipse-openj9/openj9/commit/241923a6224279f3807d3b89b49331f7314cf34a", "message": "Replace references to -XX:StartAsJITServer with jitserver\n\nWith jitserver launcher now in master and -XX:StartAsJITServer being\nremoved, the documentation needs to be updated accordingly.\nDockerfiles have also been updated to use `jitserver` instead of\n`-XX:StartAsJITServer` option.\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-01-09T22:37:45Z", "type": "commit"}, {"oid": "241923a6224279f3807d3b89b49331f7314cf34a", "url": "https://github.com/eclipse-openj9/openj9/commit/241923a6224279f3807d3b89b49331f7314cf34a", "message": "Replace references to -XX:StartAsJITServer with jitserver\n\nWith jitserver launcher now in master and -XX:StartAsJITServer being\nremoved, the documentation needs to be updated accordingly.\nDockerfiles have also been updated to use `jitserver` instead of\n`-XX:StartAsJITServer` option.\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-01-09T22:37:45Z", "type": "forcePushed"}]}