{"pr_number": 10819, "pr_title": "Add hidden classes to shared classes cache", "pr_createdAt": "2020-10-07T18:06:07Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10819", "timeline": [{"oid": "8ccae39849c5b6515ea01f4341263f3b16de78c6", "url": "https://github.com/eclipse-openj9/openj9/commit/8ccae39849c5b6515ea01f4341263f3b16de78c6", "message": "Add hidden classes to shared classes cache.\n\n1. Enable class sharing for hidden classes.\n2. Different hidden classes in different runs may have the same \nclass name, so use 0xromaddress instead of class name as hash key \nin classLoader->classHashTable for hidden classes.\n3. For lambda classes, move class file size comparison to\nROMClassBuilder::compareROMClassForEquality().\n4. Re-enable SCC lambda class tests in Java 15 and up.\n\nCloses #10534\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-10-07T18:08:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI5ODkwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501298908", "bodyText": "Rather than doing the next line, this could copy ROM_ADDRESS_LENGTH + 1, since buf will be null terminated.", "author": "pshipton", "createdAt": "2020-10-07T20:45:10Z", "path": "runtime/bcutil/ROMClassBuilder.cpp", "diffHunk": "@@ -338,8 +339,13 @@ ROMClassBuilder::handleAnonClassName(J9CfrClassFile *classfile, bool *isLambda,\n \t}\n \tmemcpy (constantPool[newUtfCPEntry].bytes + newHostPackageLength, originalStringBytes, originalStringLength);\n \t*(U_8*)((UDATA) constantPool[newUtfCPEntry].bytes + newHostPackageLength + originalStringLength) = ANON_CLASSNAME_CHARACTER_SEPARATOR;\n-\tmemset(constantPool[newUtfCPEntry].bytes + newHostPackageLength + originalStringLength + 1, '0', ROM_ADDRESS_LENGTH);\n-\t*(U_8*)((UDATA) constantPool[newUtfCPEntry].bytes + newHostPackageLength + originalStringLength + 1 + ROM_ADDRESS_LENGTH) = '\\0';\n+\t/* \n+\t * 0x<romAddress> will be appended to anon/hidden class name.\n+\t * Initialize the 0x<romAddress> part to 0x00000000 or 0x0000000000000000 (depending on the platforms).\n+\t */\n+\tj9str_printf(PORTLIB, buf, ROM_ADDRESS_LENGTH + 1, ROM_ADDRESS_FORMAT, 0);\n+\tmemcpy(constantPool[newUtfCPEntry].bytes + newHostPackageLength + originalStringLength + 1, buf, ROM_ADDRESS_LENGTH);", "originalCommit": "8ccae39849c5b6515ea01f4341263f3b16de78c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMzczOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501813739", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-10-08T15:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI5ODkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI5OTcxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501299713", "bodyText": "Pls remove the trailing whitespace.", "author": "pshipton", "createdAt": "2020-10-07T20:46:35Z", "path": "runtime/bcutil/ROMClassBuilder.cpp", "diffHunk": "@@ -499,10 +509,10 @@ ROMClassBuilder::prepareAndLaydown( BufferManager *bufferManager, ClassFileParse\n \t\t * previously, or for ROMClass comparison on behalf of dyntest.\n \t\t */\n \t\tJ9ROMClass *romClass = context->romClass();\n-\t\tbool romClassIsShared = (j9shr_Query_IsAddressInCache(_javaVM, romClass, romClass->romSize) ? true : false);\n+\t\tbool romClassIsShared = (j9shr_Query_IsAddressInCache(_javaVM, romClass, romClass->romSize) ? true : false);\t\t", "originalCommit": "8ccae39849c5b6515ea01f4341263f3b16de78c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNDE3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501814170", "bodyText": "Removed the white space.", "author": "hangshao0", "createdAt": "2020-10-08T15:30:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI5OTcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxMjQ2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501312465", "bodyText": "J9UTF8_DATA_EQUALS returns a boolean, pls use ! instead of 0 ==", "author": "pshipton", "createdAt": "2020-10-07T21:11:21Z", "path": "runtime/bcutil/ROMClassCreationContext.hpp", "diffHunk": "@@ -384,11 +399,38 @@ class ROMClassCreationContext\n \t{\n \t\tif (!isRedefining() && !isRetransforming()) {\n \t\t\tif (NULL != _className) {\n+\t\t\t\tU_16 classNameLenToCompare0 = _classNameLength;\n+\t\t\t\tU_16 classNameLenToCompare1 = classNameLength;\n+\t\t\t\tBOOLEAN misMatch = FALSE;\n \t\t\t\tif (isClassHidden()) {\n-\t\t\t\t\t/* for hidden class className has ROM address appended at the end, _className does not have that */\n-\t\t\t\t\tclassNameLength = (U_16)_classNameLength;\n+\t\t\t\t\tif (isROMClassShareable()) {\n+\t\t\t\t\t\tU_8* lambdaClass0 = (U_8*)getLastDollarSignOfLambdaClassName((const char*)_className, _classNameLength);\n+\t\t\t\t\t\tU_8* lambdaClass1 = (U_8*)getLastDollarSignOfLambdaClassName((const char*)className, classNameLength);\n+\t\t\t\t\t\tif ((NULL != lambdaClass0) \n+\t\t\t\t\t\t\t&& (NULL != lambdaClass1)\n+\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t/**\n+\t\t\t\t\t\t\t * Lambda class has class name: HostClassName$$Lambda$<IndexNumber>/0x0000000000000000. \n+\t\t\t\t\t\t\t * Do not need to compare the IndexNumber as it can be different from run to run.\n+\t\t\t\t\t\t\t */\n+\t\t\t\t\t\t\tclassNameLenToCompare0 = (U_16)(lambdaClass0 - _className + 1);\n+\t\t\t\t\t\t\tclassNameLenToCompare1 = (U_16)(lambdaClass1 - className + 1);\n+\t\t\t\t\t\t} else if ((NULL == lambdaClass0)\n+\t\t\t\t\t\t\t\t&& (NULL == lambdaClass1)\n+\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t/* for hidden class className has ROM address appended at the end, _className does not have that */\n+\t\t\t\t\t\t\tclassNameLenToCompare1 = (U_16)_classNameLength;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tmisMatch = TRUE;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\t/* for hidden class className has ROM address appended at the end, _className does not have that */\n+\t\t\t\t\t\tclassNameLenToCompare1 = (U_16)_classNameLength;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\tif ((0 == J9UTF8_DATA_EQUALS(_className, _classNameLength, className, classNameLength))) {\n+\t\t\t\tif (misMatch || \n+\t\t\t\t\t(0 == J9UTF8_DATA_EQUALS(_className, classNameLenToCompare0, className, classNameLenToCompare1))", "originalCommit": "8ccae39849c5b6515ea01f4341263f3b16de78c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNTMzNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501815336", "bodyText": "Fixed.", "author": "hangshao0", "createdAt": "2020-10-08T15:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMxMjQ2NQ=="}], "type": "inlineReview"}, {"oid": "3cedbf5388b9899bf809bfec3897b48d8b2449a3", "url": "https://github.com/eclipse-openj9/openj9/commit/3cedbf5388b9899bf809bfec3897b48d8b2449a3", "message": "Add hidden classes to shared classes cache.\n\n1. Enable class sharing for hidden classes.\n2. Different hidden classes in different runs may have the same \nclass name, so use 0xromaddress instead of class name as hash key \nin classLoader->classHashTable for hidden classes.\n3. For lambda classes, move class file size comparison to\nROMClassBuilder::compareROMClassForEquality().\n4. Re-enable SCC lambda class tests in Java 15 and up.\n\nCloses #10534\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-10-08T15:28:39Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxMzQyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501913420", "bodyText": "Why did this change to U32 from U64? Also, the use of abs seems questionable (I realize it was there before).", "author": "gacholio", "createdAt": "2020-10-08T18:04:27Z", "path": "runtime/bcutil/ROMClassBuilder.cpp", "diffHunk": "@@ -1306,22 +1317,24 @@ bool\n ROMClassBuilder::compareROMClassForEquality(U_8 *romClass,bool romClassIsShared,\n \t\tROMClassWriter *romClassWriter, SRPOffsetTable *srpOffsetTable, SRPKeyProducer *srpKeyProducer,\n \t\tClassFileOracle *classFileOracle, U_32 modifiers, U_32 extraModifiers, U_32 optionalFlags,\n-\t\tROMClassCreationContext * context, U_32 romSize, bool isLambda)\n+\t\tROMClassCreationContext * context, U_32 sizeToCompareForLambda, bool isLambda)\n {\n \tbool ret = false;\n \n \tif (isLambda) {\n-\t\tif (sizeof(U_64) < abs((int)(romSize - ((J9ROMClass *)romClass)->romSize))) {\n-\t\t\t/* If the class is a lambda class, we compare the romSizes first to save time. Lambda class names are in the format of\n-\t\t\t * HostClassName$$Lambda$<IndexNumber>/0x0000000000000000. When we reach this check, the host class names will be the\n-\t\t\t * same for both the classes because of the hash key check earlier so the only difference in the size will be the\n-\t\t\t * difference between the number of digits of the index number. The same lambda class might have a different index\n-\t\t\t * number from run to run and when the number of digits of the index number increases by 1, romSize increases by 2.\n-\t\t\t * We check if the difference between romSizes is bigger than sizeof(U_64) because this will allow at least 4 but up\n-\t\t\t * to 7 (because romSize has padding and is always multiples of 8) digits difference. (eg. HostClassName$$Lambda$[1-9]\n-\t\t\t * can get matched at least up to HostClassName$$Lambda$99999, HostClassName$$Lambda$[10-99] can get matched at least\n-\t\t\t * up to HostClassName$$Lambda$999999) This check is different than the classFileSize check because when the number of\n-\t\t\t * digits of the index number increases by 1, romSize increases by 2 but classFileSize increases by 1.\n+\t\tif (sizeof(U_32) < abs((int)(sizeToCompareForLambda - ((J9ROMClass *)romClass)->classFileSize))) {", "originalCommit": "3cedbf5388b9899bf809bfec3897b48d8b2449a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MDYzNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501940635", "bodyText": "I removed the original check on romSize and move the check of classFileSize from ComparingCursor::writeU32() to here (without changing the classFileSize check itself).\nI think the reason of using abs() is because the <indexNumber> in the lambda class name: HostClassName$$Lambda$<IndexNumber>/0x0000000000000000, which is generated at runtime.\nFor the same lambda class, IndexNumber could be for example, a single digit in run 1 and a double-digit in run 2. It could also happen the opposite way. The comment says \"the number of digits of the index number increases by 1 .... classFileSize increases by 1\". So abs() is used.", "author": "hangshao0", "createdAt": "2020-10-08T18:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxMzQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0NjcyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501946722", "bodyText": "Can't the index number vary hugely? This still doesn't explain why the U32 or U64 size check is there. Perhaps this should be the actual variance value (i.e. the difference between the smallest and largest printed index number). It seems to have no relation to the size of a C type.", "author": "gacholio", "createdAt": "2020-10-08T19:00:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxMzQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2MDU1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501960556", "bodyText": "It seems to have no relation to the size of a C type.\n\nI agree.\nThe indexNumber is counter for the number of lambda classes defined so far. It is an int in the JCL side. So in theory, it could vary from 0 to 2147483647. So less than 10 bytes.", "author": "hangshao0", "createdAt": "2020-10-08T19:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxMzQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NzQzOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501967438", "bodyText": "Changed to allow variance from 0 to 9 bytes .", "author": "hangshao0", "createdAt": "2020-10-08T19:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxMzQyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2NzUzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501967537", "bodyText": "Please update with that - also, please flip the comparison (constant < computed is much more difficult to reason than computed >= constant)", "author": "gacholio", "createdAt": "2020-10-08T19:38:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxMzQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxNDg3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501914870", "bodyText": "I see no good reason to use a multi-line if here.", "author": "gacholio", "createdAt": "2020-10-08T18:06:43Z", "path": "runtime/bcutil/ROMClassCreationContext.hpp", "diffHunk": "@@ -384,11 +399,38 @@ class ROMClassCreationContext\n \t{\n \t\tif (!isRedefining() && !isRetransforming()) {\n \t\t\tif (NULL != _className) {\n+\t\t\t\tU_16 classNameLenToCompare0 = (U_16)_classNameLength;\n+\t\t\t\tU_16 classNameLenToCompare1 = classNameLength;\n+\t\t\t\tBOOLEAN misMatch = FALSE;\n \t\t\t\tif (isClassHidden()) {\n-\t\t\t\t\t/* for hidden class className has ROM address appended at the end, _className does not have that */\n-\t\t\t\t\tclassNameLength = (U_16)_classNameLength;\n+\t\t\t\t\tif (isROMClassShareable()) {\n+\t\t\t\t\t\tU_8* lambdaClass0 = (U_8*)getLastDollarSignOfLambdaClassName((const char*)_className, _classNameLength);\n+\t\t\t\t\t\tU_8* lambdaClass1 = (U_8*)getLastDollarSignOfLambdaClassName((const char*)className, classNameLength);\n+\t\t\t\t\t\tif ((NULL != lambdaClass0) \n+\t\t\t\t\t\t\t&& (NULL != lambdaClass1)\n+\t\t\t\t\t\t) {\n+\t\t\t\t\t\t\t/**\n+\t\t\t\t\t\t\t * Lambda class has class name: HostClassName$$Lambda$<IndexNumber>/0x0000000000000000. \n+\t\t\t\t\t\t\t * Do not need to compare the IndexNumber as it can be different from run to run.\n+\t\t\t\t\t\t\t */\n+\t\t\t\t\t\t\tclassNameLenToCompare0 = (U_16)(lambdaClass0 - _className + 1);\n+\t\t\t\t\t\t\tclassNameLenToCompare1 = (U_16)(lambdaClass1 - className + 1);\n+\t\t\t\t\t\t} else if ((NULL == lambdaClass0)\n+\t\t\t\t\t\t\t\t&& (NULL == lambdaClass1)", "originalCommit": "3cedbf5388b9899bf809bfec3897b48d8b2449a3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0MzA1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10819#discussion_r501943059", "bodyText": "Moved them into a single line.", "author": "hangshao0", "createdAt": "2020-10-08T18:54:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxNDg3MA=="}], "type": "inlineReview"}, {"oid": "c2bf2cb7ea91febbc776b9c9c3f204e9b99b5f63", "url": "https://github.com/eclipse-openj9/openj9/commit/c2bf2cb7ea91febbc776b9c9c3f204e9b99b5f63", "message": "Add hidden classes to shared classes cache.\n\n1. Enable class sharing for hidden classes.\n2. Different hidden classes in different runs may have the same \nclass name, so use 0xromaddress instead of class name as hash key \nin classLoader->classHashTable for hidden classes.\n3. For lambda classes, move class file size comparison to\nROMClassBuilder::compareROMClassForEquality().\n4. Re-enable SCC lambda class tests in Java 15 and up.\n\nCloses #10534\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-10-08T18:51:28Z", "type": "forcePushed"}, {"oid": "49c082ea459f9733f22867a7c5a0ecc82ec89fad", "url": "https://github.com/eclipse-openj9/openj9/commit/49c082ea459f9733f22867a7c5a0ecc82ec89fad", "message": "Add hidden classes to shared classes cache.\n\n1. Enable class sharing for hidden classes.\n2. Different hidden classes in different runs may have the same \nclass name, so use 0xromaddress instead of class name as hash key \nin classLoader->classHashTable for hidden classes.\n3. For lambda classes, move class file size comparison to\nROMClassBuilder::compareROMClassForEquality().\n4. Re-enable SCC lambda class tests in Java 15 and up.\n\nCloses #10534\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-10-08T19:35:01Z", "type": "forcePushed"}, {"oid": "07bb9ea3c2dbc23695f95ece76d20a64c3e68881", "url": "https://github.com/eclipse-openj9/openj9/commit/07bb9ea3c2dbc23695f95ece76d20a64c3e68881", "message": "Add hidden classes to shared classes cache.\n\n1. Enable class sharing for hidden classes.\n2. Different hidden classes in different runs may have the same \nclass name, so use 0xromaddress instead of class name as hash key \nin classLoader->classHashTable for hidden classes.\n3. For lambda classes, move class file size comparison to\nROMClassBuilder::compareROMClassForEquality().\n4. Re-enable SCC lambda class tests in Java 15 and up.\n\nCloses #10534\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-10-08T19:44:14Z", "type": "commit"}, {"oid": "07bb9ea3c2dbc23695f95ece76d20a64c3e68881", "url": "https://github.com/eclipse-openj9/openj9/commit/07bb9ea3c2dbc23695f95ece76d20a64c3e68881", "message": "Add hidden classes to shared classes cache.\n\n1. Enable class sharing for hidden classes.\n2. Different hidden classes in different runs may have the same \nclass name, so use 0xromaddress instead of class name as hash key \nin classLoader->classHashTable for hidden classes.\n3. For lambda classes, move class file size comparison to\nROMClassBuilder::compareROMClassForEquality().\n4. Re-enable SCC lambda class tests in Java 15 and up.\n\nCloses #10534\n\nSigned-off-by: Hang Shao <hangshao@ca.ibm.com>", "committedDate": "2020-10-08T19:44:14Z", "type": "forcePushed"}]}