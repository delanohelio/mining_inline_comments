{"pr_number": 9107, "pr_title": "Rework test pipeline variables", "pr_createdAt": "2020-04-03T14:41:44Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9107", "timeline": [{"oid": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a", "url": "https://github.com/eclipse-openj9/openj9/commit/afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a", "message": "Rework test pipeline variables\n\n- There was recently another bug with the test variables being\n  being passes as null. We've seen this issue repeated a few\n  times now. Rather than another band-aid solution, I have\n  reworked how the test variables are defined.\n- Store all test variables together in 1 map of maps.\n- Setup all test variables at the start of the build including\n  target names, excludes, flags, extra labels, keep reportdir,\n  and build lists.\n- Simplifies code that interacts with test variables and prevents\n  having to further process certain values. Everything can\n  now be accessed directly. Eliminated confusion around what is\n  processed where and when.\n\n[skip ci]\nSigned-off-by: Adam Brousseau <adam.brousseau88@gmail.com>", "committedDate": "2020-04-07T03:14:33Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NDAxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409684016", "bodyText": "excludedTestsArray is not required since it contains excludedTests  collection only and is used only in this block.", "author": "vsebe", "createdAt": "2020-04-16T16:19:27Z", "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []", "originalCommit": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NDQ1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409684452", "bodyText": "use excludedTests", "author": "vsebe", "createdAt": "2020-04-16T16:20:05Z", "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []\n+        excludedTestsArray.addAll(excludedTests)\n+        TESTS.each { id, target ->\n+            if (excludedTestsArray.contains(id)) {", "originalCommit": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwMzQyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409703421", "bodyText": "Please rework this if statement:\nif (!target['testFlag']) {\n    target['testFlag'] = flag\n} else if (flag) {\n    error(\"Cannot set more than 1 TEST_FLAG\")\n}", "author": "vsebe", "createdAt": "2020-04-16T16:49:03Z", "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []\n+        excludedTestsArray.addAll(excludedTests)\n+        TESTS.each { id, target ->\n+            if (excludedTestsArray.contains(id)) {\n+                echo \"Excluding test target:'${id}'\"\n+                TESTS.remove(id)\n+            }\n+        }\n     }\n \n-    TEST_FLAG = buildspec.getScalarField(\"test_flags\", SDK_VERSION) ?: ''\n+    TESTS.each { id, target ->\n+        flag = buildspec.getScalarField(\"test_flags\", id) ?: ''\n+        if (flag) {", "originalCommit": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwNDk5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409704995", "bodyText": "Why another loop here for keepReportDir? Set target['keepReportDir'] in the above loop.", "author": "vsebe", "createdAt": "2020-04-16T16:51:31Z", "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []\n+        excludedTestsArray.addAll(excludedTests)\n+        TESTS.each { id, target ->\n+            if (excludedTestsArray.contains(id)) {\n+                echo \"Excluding test target:'${id}'\"\n+                TESTS.remove(id)\n+            }\n+        }\n     }\n \n-    TEST_FLAG = buildspec.getScalarField(\"test_flags\", SDK_VERSION) ?: ''\n+    TESTS.each { id, target ->\n+        flag = buildspec.getScalarField(\"test_flags\", id) ?: ''\n+        if (flag) {\n+            target['testFlag'] = (target['testFlag']) ? error(\"Cannot set more than 1 TEST_FLAG\") : flag\n+        } else {\n+            target['testFlag'] = (target['testFlag']) ? target['testFlag'] : ''\n+        }\n+    }\n \n     // Set test param KEEP_REPORTDIR to false unless set true in variable file.\n-    TEST_KEEP_REPORTDIR = [:]\n-    TARGET_NAMES.each { target ->\n-        TEST_KEEP_REPORTDIR[target] = buildspec_manager.getSpec('misc').getScalarField(\"test_keep_reportdir\", target) ?: 'false'\n+    TESTS.each { id, target ->", "originalCommit": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTcwNjAzNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9107#discussion_r409706035", "bodyText": "Why another loop here? Set target['buildList'] in the loop at L694.", "author": "vsebe", "createdAt": "2020-04-16T16:53:15Z", "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -664,39 +671,45 @@ def set_test_targets() {\n * Set EXTRA_TEST_LABELS map if defined in variable file.\n */\n def set_test_misc() {\n-    EXTRA_TEST_LABELS = [:]\n     if (!params.TEST_NODE) {\n         // Only add extra test labels if the user has not specified a specific TEST_NODE\n-        TARGET_NAMES.each { target ->\n-            EXTRA_TEST_LABELS[target] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n     }\n \n-    EXCLUDED_TESTS = []\n     def buildspec = buildspec_manager.getSpec(SPEC)\n     def excludedTests = buildspec.getVectorField(\"excluded_tests\", SDK_VERSION)\n     if (excludedTests) {\n-        EXCLUDED_TESTS.addAll(excludedTests)\n+        excludedTestsArray = []\n+        excludedTestsArray.addAll(excludedTests)\n+        TESTS.each { id, target ->\n+            if (excludedTestsArray.contains(id)) {\n+                echo \"Excluding test target:'${id}'\"\n+                TESTS.remove(id)\n+            }\n+        }\n     }\n \n-    TEST_FLAG = buildspec.getScalarField(\"test_flags\", SDK_VERSION) ?: ''\n+    TESTS.each { id, target ->\n+        flag = buildspec.getScalarField(\"test_flags\", id) ?: ''\n+        if (flag) {\n+            target['testFlag'] = (target['testFlag']) ? error(\"Cannot set more than 1 TEST_FLAG\") : flag\n+        } else {\n+            target['testFlag'] = (target['testFlag']) ? target['testFlag'] : ''\n+        }\n+    }\n \n     // Set test param KEEP_REPORTDIR to false unless set true in variable file.\n-    TEST_KEEP_REPORTDIR = [:]\n-    TARGET_NAMES.each { target ->\n-        TEST_KEEP_REPORTDIR[target] = buildspec_manager.getSpec('misc').getScalarField(\"test_keep_reportdir\", target) ?: 'false'\n+    TESTS.each { id, target ->\n+        target['keepReportDir'] = buildspec_manager.getSpec('misc').getScalarField(\"test_keep_reportdir\", id) ?: 'false'\n     }\n \n-    TEST_BUILD_LIST = [:]\n-    TARGET_NAMES.each { target ->\n-        TEST_BUILD_LIST[target] = buildspec.getScalarField(\"test_build_list\", target) ?: ''\n+    TESTS.each { id, target ->", "originalCommit": "afcdcf2ddb42ff3a9edf023ceb1466b9ea440e0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "230903610a5906da73089ff2b22038efdf57f0c4", "url": "https://github.com/eclipse-openj9/openj9/commit/230903610a5906da73089ff2b22038efdf57f0c4", "message": "Rework test pipeline variables\n\n- There was recently another bug with the test variables being\n  being passes as null. We've seen this issue repeated a few\n  times now. Rather than another band-aid solution, I have\n  reworked how the test variables are defined.\n- Store all test variables together in 1 map of maps.\n- Setup all test variables at the start of the build including\n  target names, excludes, flags, extra labels, keep reportdir,\n  and build lists.\n- Simplifies code that interacts with test variables and prevents\n  having to further process certain values. Everything can\n  now be accessed directly. Eliminated confusion around what is\n  processed where and when.\n\n[skip ci]\nSigned-off-by: Adam Brousseau <adam.brousseau88@gmail.com>", "committedDate": "2020-04-17T03:04:04Z", "type": "forcePushed"}, {"oid": "94204eb23d9f92782cef23eae9e1f32c10644b17", "url": "https://github.com/eclipse-openj9/openj9/commit/94204eb23d9f92782cef23eae9e1f32c10644b17", "message": "Rework test pipeline variables\n\n- There was recently another bug with the test variables being\n  being passes as null. We've seen this issue repeated a few\n  times now. Rather than another band-aid solution, I have\n  reworked how the test variables are defined.\n- Store all test variables together in 1 map of maps.\n- Setup all test variables at the start of the build including\n  target names, excludes, flags, extra labels, keep reportdir,\n  and build lists.\n- Simplifies code that interacts with test variables and prevents\n  having to further process certain values. Everything can\n  now be accessed directly. Eliminated confusion around what is\n  processed where and when.\n\n[skip ci]\nSigned-off-by: Adam Brousseau <adam.brousseau88@gmail.com>", "committedDate": "2020-04-22T05:17:25Z", "type": "commit"}, {"oid": "94204eb23d9f92782cef23eae9e1f32c10644b17", "url": "https://github.com/eclipse-openj9/openj9/commit/94204eb23d9f92782cef23eae9e1f32c10644b17", "message": "Rework test pipeline variables\n\n- There was recently another bug with the test variables being\n  being passes as null. We've seen this issue repeated a few\n  times now. Rather than another band-aid solution, I have\n  reworked how the test variables are defined.\n- Store all test variables together in 1 map of maps.\n- Setup all test variables at the start of the build including\n  target names, excludes, flags, extra labels, keep reportdir,\n  and build lists.\n- Simplifies code that interacts with test variables and prevents\n  having to further process certain values. Everything can\n  now be accessed directly. Eliminated confusion around what is\n  processed where and when.\n\n[skip ci]\nSigned-off-by: Adam Brousseau <adam.brousseau88@gmail.com>", "committedDate": "2020-04-22T05:17:25Z", "type": "forcePushed"}]}