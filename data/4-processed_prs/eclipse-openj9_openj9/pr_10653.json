{"pr_number": 10653, "pr_title": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries", "pr_createdAt": "2020-09-21T12:48:18Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10653", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzM3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r492213379", "bodyText": "This can return NULL for unattached threads - might want to assert it here.", "author": "gacholio", "createdAt": "2020-09-21T17:02:52Z", "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -3650,25 +3650,38 @@ JVM_LoadSystemLibrary(const char *libName)\n  */\n \n void* JNICALL\n-JVM_LoadLibrary(const char* libName)\n+JVM_LoadLibrary(const char *libName)\n {\n-\tvoid* result = NULL;\n-\tJ9NativeLibrary* nativeLibrary = NULL;\n-\tJ9JavaVM* javaVM = (J9JavaVM*)BFUjavaVM;\n-\tJ9InternalVMFunctions* vmFuncs = javaVM->internalVMFunctions;\n-\tJ9VMThread* currentThread = vmFuncs->currentVMThread(javaVM);\n+\tvoid *result = NULL;\n+\tJ9JavaVM *javaVM = (J9JavaVM*)BFUjavaVM;\n \n \tTrc_SC_LoadLibrary_Entry(libName);\n-\tvmFuncs->internalEnterVMFromJNI(currentThread);\n-\t/* registerBootstrapLibrary can't have VM access */\n-\tvmFuncs->internalReleaseVMAccess(currentThread);\n-\tif (vmFuncs->registerBootstrapLibrary(currentThread, libName, &nativeLibrary, FALSE) == J9NATIVELIB_LOAD_OK) {\n-\t\tresult = (void*)nativeLibrary->handle;\n-\t}\n-\tvmFuncs->internalAcquireVMAccess(currentThread);\n-\tvmFuncs->internalExitVMToJNI(currentThread);\n+\tif (NULL == javaVM->applicationClassLoader) {\n+\t\tJ9NativeLibrary *nativeLibrary = NULL;\n+\t\tJ9InternalVMFunctions *vmFuncs = javaVM->internalVMFunctions;\n+\t\tJ9VMThread *currentThread = vmFuncs->currentVMThread(javaVM);", "originalCommit": "86fadf52f033e38f4eb0f569160e7b63637ec1a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyMDI1NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r492220254", "bodyText": "Sure, will add assert.", "author": "JasonFengJ9", "createdAt": "2020-09-21T17:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzM3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY4NDExNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493684117", "bodyText": "This PR is updated & passed sanity.functional & extended.functional at AIX/zLinux/Linux AMD.\n@gacholio could you please review?", "author": "JasonFengJ9", "createdAt": "2020-09-23T15:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMzM3OQ=="}], "type": "inlineReview"}, {"oid": "70eec2849fd2712c9068e29d9ddd687be6b81791", "url": "https://github.com/eclipse-openj9/openj9/commit/70eec2849fd2712c9068e29d9ddd687be6b81791", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-09-22T02:00:47Z", "type": "forcePushed"}, {"oid": "f450c671572065ea7d11129d11660599fa48ac1e", "url": "https://github.com/eclipse-openj9/openj9/commit/f450c671572065ea7d11129d11660599fa48ac1e", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-09-22T02:08:24Z", "type": "forcePushed"}, {"oid": "5c003fd382964bd0e977b4d085c2ae4b3d61d9fa", "url": "https://github.com/eclipse-openj9/openj9/commit/5c003fd382964bd0e977b4d085c2ae4b3d61d9fa", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-09-22T12:25:24Z", "type": "forcePushed"}, {"oid": "e6ea56ea642e5e1604f45d7949d1ce976bc34409", "url": "https://github.com/eclipse-openj9/openj9/commit/e6ea56ea642e5e1604f45d7949d1ce976bc34409", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-09-22T20:55:51Z", "type": "forcePushed"}, {"oid": "5d77e725e32b07db436088b13141320eeac9b60b", "url": "https://github.com/eclipse-openj9/openj9/commit/5d77e725e32b07db436088b13141320eeac9b60b", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-09-23T15:01:08Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NjQxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493766419", "bodyText": "Does Mac define J9UNIX?", "author": "gacholio", "createdAt": "2020-09-23T17:29:10Z", "path": "runtime/j9vm/j7vmi.c", "diffHunk": "@@ -2312,12 +2312,27 @@ JVM_SuspendThread(jint arg0, jint arg1)\n }\n \n \n-\n-jobject JNICALL\n-JVM_UnloadLibrary(jint arg0)\n+/* NOTE this is required by JDK15+ jdk.internal.loader.NativeLibraries.unload().\n+ */\n+#if JAVA_SPEC_VERSION >= 15\n+void JNICALL JVM_UnloadLibrary(void *handle)\n+#else /* JAVA_SPEC_VERSION >= 15 */\n+jobject JNICALL JVM_UnloadLibrary(jint arg0)\n+#endif /* JAVA_SPEC_VERSION >= 15 */\n {\n+#if JAVA_SPEC_VERSION >= 15\n+\tTrc_SC_UnloadLibrary_Entry(handle);\n+#if defined(WIN32)\n+\tFreeLibrary((HMODULE)handle);\n+#elif defined(J9UNIX) || defined(J9ZOS390) /* defined(WIN32) */\n+\tdlclose(handle);\n+#else /* defined(WIN32) */\n+#error \"Please implement J7vmi.c:JVM_UnloadLibrary(void *handle)\"", "originalCommit": "5d77e725e32b07db436088b13141320eeac9b60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5ODk1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493798956", "bodyText": "Yes, it does as following https://github.com/eclipse/openj9/blob/f49490ab44a652e72d6d8f96b38b6095ce0cc97d/runtime/oti/j9comp.h#L33-L35\nOSX is my primary test platform.", "author": "JasonFengJ9", "createdAt": "2020-09-23T18:23:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NjQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2ODYyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493768628", "bodyText": "Please move the braces out of the ifdef (similarly below).", "author": "gacholio", "createdAt": "2020-09-23T17:32:47Z", "path": "runtime/vm/bindnatv.cpp", "diffHunk": "@@ -957,17 +963,33 @@ bindNative(J9VMThread *currentThread, J9Method *nativeMethod, char * longJNI, ch\n \t\t++argCount;\n \t}\n \n-\t/* Search each shared library in the class loader for a matching native */\n-\tnativeLibrary = classLoader->librariesHead;\n-\twhile (nativeLibrary != NULL) {\n-\t\tUDATA rc = lookupNativeAddress(currentThread, nativeMethod, nativeLibrary, longJNI, shortJNI, argCount, bindJNINative);\n-\t\tif (J9_NATIVE_METHOD_IS_BOUND(nativeMethod)) {\n-\t\t\treturn J9_NATIVE_METHOD_BIND_SUCCESS;\n-\t\t} else if (J9_NATIVE_METHOD_BIND_OUT_OF_MEMORY == rc) {\n-\t\t\treturn rc;\n+#if JAVA_SPEC_VERSION >= 15\n+\tif (classLoader == vm->systemClassLoader) {", "originalCommit": "5d77e725e32b07db436088b13141320eeac9b60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5OTA0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493799041", "bodyText": "Fixed.", "author": "JasonFengJ9", "createdAt": "2020-09-23T18:24:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2ODYyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MDA4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493770089", "bodyText": "Invalid comment format for a C file.", "author": "gacholio", "createdAt": "2020-09-23T17:35:19Z", "path": "runtime/vm/vmbootlib.c", "diffHunk": "@@ -703,15 +701,18 @@ classLoaderRegisterLibrary(void *voidVMThread, J9ClassLoader *classLoader, const\n #if defined(J9VM_INTERP_ATOMIC_FREE_JNI)\n \t\t\texitVMToJNI(vmThread);\n #endif /* J9VM_INTERP_ATOMIC_FREE_JNI */\n+#if JAVA_SPEC_VERSION < 15\n+// NativeLibraries is going to call JNI_Onload depending on JNI flag", "originalCommit": "5d77e725e32b07db436088b13141320eeac9b60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5OTEzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493799137", "bodyText": "Fixed.", "author": "JasonFengJ9", "createdAt": "2020-09-23T18:24:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MDA4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTEwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493771102", "bodyText": "Why not NLS?", "author": "gacholio", "createdAt": "2020-09-23T17:37:03Z", "path": "jcl/src/java.base/share/classes/java/lang/ClassLoader.java", "diffHunk": "@@ -1982,10 +1999,49 @@ static void loadLibrary(Class<?> caller, String name, boolean fullPath) {\n \n /*[IF Java15]*/\n static void loadLibrary(Class<?> caller, File file) {\n-\tloadLibraryWithPath(file.getAbsolutePath(), caller.getClassLoaderImpl(), null);\n+\tClassLoader loader = (caller == null) ? null : caller.getClassLoader();\n+\tNativeLibraries nls = (loader == null) ? bootstrapClassLoader.nativelibs : loader.nativelibs;\n+\tNativeLibrary nl = nls.loadLibrary(caller, file);\n+\tif (nl == null) {\n+\t\tthrow new UnsatisfiedLinkError(\"Can't load \" + file); //$NON-NLS-1$", "originalCommit": "5d77e725e32b07db436088b13141320eeac9b60b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc5OTM4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10653#discussion_r493799382", "bodyText": "Was lured away by https://github.com/eclipse/openj9/blob/f49490ab44a652e72d6d8f96b38b6095ce0cc97d/jcl/src/java.base/share/classes/java/lang/ClassLoader.java#L1970\nFixed it as well.\nPlease have another look.", "author": "JasonFengJ9", "createdAt": "2020-09-23T18:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc3MTEwMg=="}], "type": "inlineReview"}, {"oid": "e6de2f9b86fcd73d0c2a77e6cff805ff61632928", "url": "https://github.com/eclipse-openj9/openj9/commit/e6de2f9b86fcd73d0c2a77e6cff805ff61632928", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-09-23T18:21:15Z", "type": "commit"}, {"oid": "e6de2f9b86fcd73d0c2a77e6cff805ff61632928", "url": "https://github.com/eclipse-openj9/openj9/commit/e6de2f9b86fcd73d0c2a77e6cff805ff61632928", "message": "JDK15 Load native libraries via jdk.internal.loader.NativeLibraries\n\n* JDK15 bindNative() first search the nativeLibrary associated with the\nclassloader (like pre-jdk15 levels) for systemClassLoader; if that\ndidn't succeed or the classloader is not systemClassLoader,\nlookupNativeAddress() is invoked with a NULL nativeLibrary;\n* When the incoming nativeLibrary is NULL, lookupNativeAddress() call\ninto java.lang.ClassLoader.findNative() to get native method\nfunctionAddress;\n* After a successful binding, classLoaderRegisterLibrary() skips\nJNI_Onload() which is going to be invoked by NativeLibraries.load()\ninstead;\n* JVM_LoadLibrary() \tinvokes registerBootstrapLibrary() for early\nbootstrap, and j9sl_open_shared_library for later class loading;\n* Change System.load/loadLibrary to ClassLoader.loadLibrary(caller,\nfileName);\n* Added JVM_UnloadLibrary() implementation;\n* Added a few tracepoints;\n\nSigned-off-by: Jason Feng <fengj@ca.ibm.com>", "committedDate": "2020-09-23T18:21:15Z", "type": "forcePushed"}]}