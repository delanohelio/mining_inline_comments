{"pr_number": 8933, "pr_title": "Create frontend query for OMR function numConcreteClasses", "pr_createdAt": "2020-03-20T15:41:40Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8933", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwODYzMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r395808633", "bodyText": "Delete these comments", "author": "mpirvu", "createdAt": "2020-03-20T18:07:09Z", "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -8350,6 +8350,33 @@ TR_J9VM::getROMMethodFromRAMMethod(J9Method *ramMethod)\n    return J9_ROM_METHOD_FROM_RAM_METHOD(ramMethod);\n    }\n \n+bool \n+TR_J9VM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   // printf(\"********************************************************************\\n\");\n+   // printf(\"Function client TR_J9VM::noMultipleConcreteClasses\\n\");", "originalCommit": "1e0d6806ffbfb1fb715dc8e8355d680b00d03490", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwODc4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r395808782", "bodyText": "Braces are not properly aligned", "author": "mpirvu", "createdAt": "2020-03-20T18:07:28Z", "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -8350,6 +8350,33 @@ TR_J9VM::getROMMethodFromRAMMethod(J9Method *ramMethod)\n    return J9_ROM_METHOD_FROM_RAM_METHOD(ramMethod);\n    }\n \n+bool \n+TR_J9VM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   // printf(\"********************************************************************\\n\");\n+   // printf(\"Function client TR_J9VM::noMultipleConcreteClasses\\n\");\n+   // printf(\"********************************************************************\\n\");\n+\n+   TR::Compilation *comp = TR::comp();\n+   int count = 0;\n+   ListIterator<TR_PersistentClassInfo> i(subClasses);\n+   for (TR_PersistentClassInfo *ptClassInfo = i.getFirst(); ptClassInfo; ptClassInfo = i.getNext())\n+   {", "originalCommit": "1e0d6806ffbfb1fb715dc8e8355d680b00d03490", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTE3Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r395809177", "bodyText": "This could be replaced with\nclass TR_PersistentClassInfo;", "author": "mpirvu", "createdAt": "2020-03-20T18:08:14Z", "path": "runtime/compiler/env/VMJ9.h", "diffHunk": "@@ -45,6 +45,7 @@\n #include \"env/J9SharedCache.hpp\"\n #include \"infra/Array.hpp\"\n #include \"env/CompilerEnv.hpp\"\n+#include \"runtime/RuntimeAssumptions.hpp\"", "originalCommit": "1e0d6806ffbfb1fb715dc8e8355d680b00d03490", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTQ0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r395809445", "bodyText": "Braces are not properly aligned", "author": "mpirvu", "createdAt": "2020-03-20T18:08:44Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -1805,6 +1805,33 @@ TR_J9ServerVM::getInvokeExactThunkHelperAddress(TR::Compilation *comp, TR::Symbo\n    return helper;\n    }\n \n+bool \n+TR_J9ServerVM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   // printf(\"********************************************************************\\n\");\n+   // printf(\"Function server TR_J9ServerVM::noMultipleConcreteClasses\\n\");\n+   // printf(\"********************************************************************\\n\");\n+   \n+   TR::Compilation *comp = TR::comp();\n+   int count = 0;\n+   ListIterator<TR_PersistentClassInfo> i(subClasses);\n+   for (TR_PersistentClassInfo *ptClassInfo = i.getFirst(); ptClassInfo; ptClassInfo = i.getNext())\n+   {", "originalCommit": "1e0d6806ffbfb1fb715dc8e8355d680b00d03490", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTQ0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r395809446", "bodyText": "Eliminate these comments", "author": "mpirvu", "createdAt": "2020-03-20T18:08:44Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -1805,6 +1805,33 @@ TR_J9ServerVM::getInvokeExactThunkHelperAddress(TR::Compilation *comp, TR::Symbo\n    return helper;\n    }\n \n+bool \n+TR_J9ServerVM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   // printf(\"********************************************************************\\n\");\n+   // printf(\"Function server TR_J9ServerVM::noMultipleConcreteClasses\\n\");", "originalCommit": "1e0d6806ffbfb1fb715dc8e8355d680b00d03490", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDA0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r395810047", "bodyText": "At this point the TR_J9ServerVM implementation is the same as the TR_J9VM.\nWe talked about changing this to avoid some messages.", "author": "mpirvu", "createdAt": "2020-03-20T18:09:57Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -1805,6 +1805,33 @@ TR_J9ServerVM::getInvokeExactThunkHelperAddress(TR::Compilation *comp, TR::Symbo\n    return helper;\n    }\n \n+bool \n+TR_J9ServerVM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)", "originalCommit": "1e0d6806ffbfb1fb715dc8e8355d680b00d03490", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2ODE4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r396668189", "bodyText": "Please take a look at the latest commit. I added a check in the for loop within this function:\n\nif a class is cached on the server, proceed to further check\nif a class is not cached on the server, skip to the next class in list\nonce count reaches 2, return\nif all cached classes are checked and count still haven't reach 2, go into the second for loop and check classes that are not cached on the server", "author": "chrisc66", "createdAt": "2020-03-23T18:28:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMDA0Nw=="}], "type": "inlineReview"}, {"oid": "2ee270cf0e4106bbb2dc4c0dd0a463990484bd75", "url": "https://github.com/eclipse-openj9/openj9/commit/2ee270cf0e4106bbb2dc4c0dd0a463990484bd75", "message": "Create frontend for function OMR noMultipleConcreteClasses\n\nThis function noMultipleConcreteClasses is from numConcreteClasses in OMR\nMoving this function into OpenJ9 and add jitserver specific changes\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-23T18:24:08Z", "type": "forcePushed"}, {"oid": "bf46ef5f44c73fb8ed62803728e3d228f223d272", "url": "https://github.com/eclipse-openj9/openj9/commit/bf46ef5f44c73fb8ed62803728e3d228f223d272", "message": "Create frontend for function OMR noMultipleConcreteClasses\n\nThis function noMultipleConcreteClasses is from numConcreteClasses in OMR\nMoving this function into OpenJ9 and add jitserver specific changes\n\nJITServer checkes if the list of subclasses is concrete classes,\nstarting from the cached classes and then checks not cached classes\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-23T21:49:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MjgwNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r396792804", "bodyText": "Please eliminate this empty line", "author": "mpirvu", "createdAt": "2020-03-23T22:23:34Z", "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -8350,6 +8350,29 @@ TR_J9VM::getROMMethodFromRAMMethod(J9Method *ramMethod)\n    return J9_ROM_METHOD_FROM_RAM_METHOD(ramMethod);\n    }\n \n+bool \n+TR_J9VM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   TR::Compilation *comp = TR::comp();\n+   int count = 0;\n+   ListIterator<TR_PersistentClassInfo> i(subClasses);\n+   for (TR_PersistentClassInfo *ptClassInfo = i.getFirst(); ptClassInfo; ptClassInfo = i.getNext())\n+      {\n+      TR_OpaqueClassBlock *clazz = ptClassInfo->getClassId();\n+      if (!TR::Compiler->cls.isInterfaceClass(comp, clazz) && !TR::Compiler->cls.isAbstractClass(comp, clazz))\n+         {\n+         count++;\n+         }\n+      if (count > 1)\n+         {\n+         return false;\n+         }\n+      }\n+\n+   return true;\n+", "originalCommit": "bf46ef5f44c73fb8ed62803728e3d228f223d272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NDAwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r396794001", "bodyText": "Change to \"Process classes caches at the server first\"", "author": "mpirvu", "createdAt": "2020-03-23T22:26:22Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -1805,6 +1805,53 @@ TR_J9ServerVM::getInvokeExactThunkHelperAddress(TR::Compilation *comp, TR::Symbo\n    return helper;\n    }\n \n+bool \n+TR_J9ServerVM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   TR::Compilation *comp = TR::comp();\n+   int count = 0;\n+   TR_ScratchList<TR_PersistentClassInfo> subClassesNotCached(comp->trMemory());\n+\n+   // traverse though classes that are cached on server", "originalCommit": "bf46ef5f44c73fb8ed62803728e3d228f223d272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMTk1Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r396801952", "bodyText": "You could eliminate this continue if you put everything else under the else part of the if:\n      if (romClass == NULL)\n         {\n         subClassesNotCached.add(ptClassInfo);\n         }\n        else\n          {\n           ...\n           }", "author": "mpirvu", "createdAt": "2020-03-23T22:46:37Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -1805,6 +1805,53 @@ TR_J9ServerVM::getInvokeExactThunkHelperAddress(TR::Compilation *comp, TR::Symbo\n    return helper;\n    }\n \n+bool \n+TR_J9ServerVM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   TR::Compilation *comp = TR::comp();\n+   int count = 0;\n+   TR_ScratchList<TR_PersistentClassInfo> subClassesNotCached(comp->trMemory());\n+\n+   // traverse though classes that are cached on server\n+   ListIterator<TR_PersistentClassInfo> i(subClasses);\n+   for (TR_PersistentClassInfo *ptClassInfo = i.getFirst(); ptClassInfo; ptClassInfo = i.getNext())\n+      {\n+      TR_OpaqueClassBlock *clazz = ptClassInfo->getClassId();\n+      J9Class *j9clazz = TR::Compiler->cls.convertClassOffsetToClassPtr(clazz);\n+      auto romClass = JITServerHelpers::getRemoteROMClassIfCached(_compInfoPT->getClientData(), j9clazz);\n+      if (romClass == NULL)\n+         {\n+         subClassesNotCached.add(ptClassInfo);\n+         continue;", "originalCommit": "bf46ef5f44c73fb8ed62803728e3d228f223d272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwMjc5OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r396802798", "bodyText": "Change to \"Traverse through ...\"", "author": "mpirvu", "createdAt": "2020-03-23T22:48:46Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -1805,6 +1805,53 @@ TR_J9ServerVM::getInvokeExactThunkHelperAddress(TR::Compilation *comp, TR::Symbo\n    return helper;\n    }\n \n+bool \n+TR_J9ServerVM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   TR::Compilation *comp = TR::comp();\n+   int count = 0;\n+   TR_ScratchList<TR_PersistentClassInfo> subClassesNotCached(comp->trMemory());\n+\n+   // traverse though classes that are cached on server\n+   ListIterator<TR_PersistentClassInfo> i(subClasses);\n+   for (TR_PersistentClassInfo *ptClassInfo = i.getFirst(); ptClassInfo; ptClassInfo = i.getNext())\n+      {\n+      TR_OpaqueClassBlock *clazz = ptClassInfo->getClassId();\n+      J9Class *j9clazz = TR::Compiler->cls.convertClassOffsetToClassPtr(clazz);\n+      auto romClass = JITServerHelpers::getRemoteROMClassIfCached(_compInfoPT->getClientData(), j9clazz);\n+      if (romClass == NULL)\n+         {\n+         subClassesNotCached.add(ptClassInfo);\n+         continue;\n+         }\n+      if (!TR::Compiler->cls.isInterfaceClass(comp, clazz) && !TR::Compiler->cls.isAbstractClass(comp, clazz))\n+         {\n+         count++;\n+         }\n+      if (count > 1)\n+         {\n+         return false;\n+         }\n+      }\n+\n+   // traverse though classes that are not cached on server", "originalCommit": "bf46ef5f44c73fb8ed62803728e3d228f223d272", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNzM1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r396807353", "bodyText": "You could use TR::Compilation *comp = _compInfoPT->getCompilation();\nor pass the comp object as a parameter to make it clear this function can only be executed during compilation", "author": "mpirvu", "createdAt": "2020-03-23T22:58:23Z", "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -8350,6 +8350,29 @@ TR_J9VM::getROMMethodFromRAMMethod(J9Method *ramMethod)\n    return J9_ROM_METHOD_FROM_RAM_METHOD(ramMethod);\n    }\n \n+bool \n+TR_J9VM::noMultipleConcreteClasses(List<TR_PersistentClassInfo>* subClasses)\n+   {\n+   TR::Compilation *comp = TR::comp();", "originalCommit": "bf46ef5f44c73fb8ed62803728e3d228f223d272", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNzQ0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/8933#discussion_r396807446", "bodyText": "Use the same for JITServer implementation", "author": "mpirvu", "createdAt": "2020-03-23T22:58:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjgwNzM1Mw=="}], "type": "inlineReview"}, {"oid": "9b4165651c4c05a87fbc5e3fb5eb730a408e2026", "url": "https://github.com/eclipse-openj9/openj9/commit/9b4165651c4c05a87fbc5e3fb5eb730a408e2026", "message": "Create frontend for function OMR noMultipleConcreteClasses\n\nThis function noMultipleConcreteClasses is from numConcreteClasses in OMR\nMoving this function into OpenJ9 and add jitserver specific changes\n\nJITServer checkes if the list of subclasses is concrete classes,\nstarting from the cached classes and then checks not cached classes\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-24T02:13:00Z", "type": "forcePushed"}, {"oid": "90039669181ddab5b329b0561f85470eec0fda4d", "url": "https://github.com/eclipse-openj9/openj9/commit/90039669181ddab5b329b0561f85470eec0fda4d", "message": "Create frontend for function OMR noMultipleConcreteClasses\n\nThis function noMultipleConcreteClasses is from numConcreteClasses in OMR\nMoving this function into OpenJ9 and add jitserver specific changes\n\nJITServer checkes if the list of subclasses is concrete classes,\nstarting from the cached classes and then checks not cached classes\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-24T21:52:34Z", "type": "forcePushed"}, {"oid": "9a32ac463afbcd5880dab548343e76e6dfa4c96b", "url": "https://github.com/eclipse-openj9/openj9/commit/9a32ac463afbcd5880dab548343e76e6dfa4c96b", "message": "Create frontend for function OMR noMultipleConcreteClasses\n\nThis function noMultipleConcreteClasses is from numConcreteClasses in OMR\nMoving this function into OpenJ9 and add jitserver specific changes\n\nJITServer checkes if the list of subclasses is concrete classes,\nstarting from the cached classes and then checks not cached classes\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-25T02:24:17Z", "type": "commit"}, {"oid": "9a32ac463afbcd5880dab548343e76e6dfa4c96b", "url": "https://github.com/eclipse-openj9/openj9/commit/9a32ac463afbcd5880dab548343e76e6dfa4c96b", "message": "Create frontend for function OMR noMultipleConcreteClasses\n\nThis function noMultipleConcreteClasses is from numConcreteClasses in OMR\nMoving this function into OpenJ9 and add jitserver specific changes\n\nJITServer checkes if the list of subclasses is concrete classes,\nstarting from the cached classes and then checks not cached classes\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-25T02:24:17Z", "type": "forcePushed"}]}