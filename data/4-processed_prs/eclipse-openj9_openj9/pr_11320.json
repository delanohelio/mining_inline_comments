{"pr_number": 11320, "pr_title": "Perform cleanup in x86 and Z's multianewarrayEvaluator", "pr_createdAt": "2020-12-01T15:27:00Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11320", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NDc3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533794778", "bodyText": "This should use static_cast. Similarly in other places where we fixed the casts on the Z PR.", "author": "fjeremic", "createdAt": "2020-12-01T23:37:11Z", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1245,15 +1246,10 @@ TR::Register *J9::X86::TreeEvaluator::newEvaluator(TR::Node *node, TR::CodeGener\n \n TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    {\n-   static char *useDirectHelperCall = feGetEnv(\"TR_MultiANewArrayEvaluatorUseDirectCall\");\n-\n    TR::Node *firstChild = node->getFirstChild();\n    TR::Node *secondChild = node->getSecondChild();\n    TR::Node *thirdChild = node->getThirdChild();\n \n-   if (useDirectHelperCall || !secondChild->getOpCode().isLoadConst() || secondChild->getInt()!=2)\n-      return TR::TreeEvaluator::performHelperCall(node, NULL, TR::acall, true, cg);\n-\n    // 2-dimensional MultiANewArray\n    TR::Compilation *comp = cg->comp();\n    TR_J9VMBase *fej9 = (TR_J9VMBase *)(comp->fe());", "originalCommit": "1a884c808a3bdd62c434751190a314e807d75b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MzIxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r542553217", "bodyText": "Proper casts added in: 997900e", "author": "dchopra001", "createdAt": "2020-12-14T17:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NDc3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTIyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533795222", "bodyText": "elementSize computation should be similar to Z.", "author": "fjeremic", "createdAt": "2020-12-01T23:38:27Z", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1317,7 +1314,7 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n    generateRegMemInstruction(LRegMem(), node, targetReg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), cg);\n    generateRegMemInstruction(LEARegMem(), node, temp1Reg, generateX86MemoryReference(targetReg, zeroArraySize, cg), cg);\n    generateRegMemInstruction(CMPRegMem(), node, temp1Reg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapTop), cg), cg);\n-   generateLabelInstruction(JA4, node, failLabel, cg);\n+   generateLabelInstruction(JA4, node, oolJumpPoint, cg);\n    generateMemRegInstruction(SMemReg(), node, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), temp1Reg, cg);\n \n    // Init class", "originalCommit": "1a884c808a3bdd62c434751190a314e807d75b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1Mjk4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r542552987", "bodyText": "Fixed in: 997900e", "author": "dchopra001", "createdAt": "2020-12-14T17:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTQwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r533795408", "bodyText": "The if (comp->target().is64Bit() && !(maxObjectSizeInElements > 0 && maxObjectSizeInElements <= (uintptr_t)INT_MAX)) needs to be fixed the same way as Z.", "author": "fjeremic", "createdAt": "2020-12-01T23:38:53Z", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1317,7 +1314,7 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n    generateRegMemInstruction(LRegMem(), node, targetReg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), cg);\n    generateRegMemInstruction(LEARegMem(), node, temp1Reg, generateX86MemoryReference(targetReg, zeroArraySize, cg), cg);\n    generateRegMemInstruction(CMPRegMem(), node, temp1Reg, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapTop), cg), cg);\n-   generateLabelInstruction(JA4, node, failLabel, cg);\n+   generateLabelInstruction(JA4, node, oolJumpPoint, cg);\n    generateMemRegInstruction(SMemReg(), node, generateX86MemoryReference(vmThreadReg, offsetof(J9VMThread, heapAlloc), cg), temp1Reg, cg);\n ", "originalCommit": "1a884c808a3bdd62c434751190a314e807d75b16", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU1MjkxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r542552917", "bodyText": "Fixed in: 997900e", "author": "dchopra001", "createdAt": "2020-12-14T17:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5NTQwOA=="}], "type": "inlineReview"}, {"oid": "997900e195cb6aa8469deec54cdf947e8622d2f4", "url": "https://github.com/eclipse-openj9/openj9/commit/997900e195cb6aa8469deec54cdf947e8622d2f4", "message": "Perform cleanup in x86 multianewarrayEvaluator\n\nThis commit does the following in the above evaluator:\n- Remove unreachable code\n- Uses the OMR::align API to calculate alignment compensation\n- Fix an RA bug where multiple jump instructions to OOL code are\n  created. This is incorrect as the RA will only account for the\n  last jump point to the OOL code when doing assignment.\n- Add C++ casts\n- Simplify calculation of elementSize\n- Simplify instructions comparing firstDimLenReg and\n  maxObjectSizeInElements\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-12-14T16:47:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r544588926", "bodyText": "Am I reading the code wrong, or does the loop exit on L1413 (generateLabelInstruction(JA4, node, loopLabel, cg);) fall into this code if the backedge isn't taken, which will always take you to the OOL instructions?  Is this the behaviour you expect because I don't think that's how it originally behaved.  You might need a branch around this if not.", "author": "0xdaryl", "createdAt": "2020-12-16T20:07:31Z", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1480,6 +1445,9 @@ TR::Register *J9::X86::TreeEvaluator::multianewArrayEvaluator(TR::Node *node, TR\n \n    deps->stopAddingConditions();\n \n+   generateLabelInstruction(LABEL, node, oolJumpPoint, cg);", "originalCommit": "997900e195cb6aa8469deec54cdf947e8622d2f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDYxMTc1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r544611757", "bodyText": "Good catch! We'll need a jump to the fallThru label on line 1451 if we don't branch back to loopLabel. I've added it here: dde60a6", "author": "dchopra001", "createdAt": "2020-12-16T20:47:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5MzA3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r545293076", "bodyText": "Let's run the microbenchmark on x86 to ensure we don't regress performance.", "author": "fjeremic", "createdAt": "2020-12-17T18:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg5MDgyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11320#discussion_r545890827", "bodyText": "Here are the results from the microbenchmark (performance looks as expected):\nfirstDimLength=0, secondDimLength=0,maxIterations=1000000 (allocation done in jit code)\n\n   -- finale --\n   42.2s:  >! 155.3M    167.6M    9.0   155.3M  155.3M  1886.1\n   43.2s:  <  175.2M    166.6M    5.4   155.3M  155.3M  1886.1\n   44.2s:  >  162.1M    163.7M    3.2   162.1M  162.1M  1890.4\n   45.2s:  >! 166.3M    169.3M    3.4   166.3M  166.3M  1892.9\n   46.2s:  <  172.1M    170.5M    2.0   166.3M  166.3M  1892.9\n   47.2s:  >  168.8M    169.6M    1.2   168.8M  168.8M  1894.4\n   48.2s:  <  170.7M    164.9M    2.8   168.8M  168.8M  1894.4\n   49.2s:  >  162.6M    167.0M    1.7   168.8M  168.8M  1894.4\n   50.2s:  <  168.4M    167.8M    1.0   168.8M  -inf    --\n   51.2s:  >  166.9M    168.5M    0.6   168.8M  166.9M  1893.3\n   52.2s:  <  169.0M    167.2M    0.8   168.8M  166.9M  1893.3\n   53.2s:  >  166.5M    169.5M    1.4   168.8M  166.9M  1893.3  \nMultiANewArray score: 168802736.000000 (168.8M 1894.4%)\n           uncertainty:   1.4%\n\nfirstDimLength=1000,secondDimLength=0,maxIterations=1000000 (allocation done in JIT code)\n\n   -- finale --\n   36.2s:  <  33.93K    33.85K    1.3   33.49K  33.49K  1041.9\n   37.2s:  >  33.64K    33.92K    0.8   33.64K  33.64K  1042.4\n   38.2s:  <  34.05K    33.72K    0.5   33.64K  33.64K  1042.4\n   39.3s:  <! 33.65K    30.13K   10.7   33.64K  33.64K  1042.4\n   40.2s:  >  28.52K    33.62K   12.2   33.64K  33.64K  1042.4\n   41.2s:  <  35.68K    33.51K    7.3   33.64K  33.64K  1042.4\n   42.2s:  >  32.28K    32.76K    4.4   33.64K  33.64K  1042.4\n   43.2s:  <  33.48K    33.31K    2.6   33.64K  -inf    --\n   44.2s:  >  32.87K    33.22K    1.6   33.64K  32.87K  1040.0\n   45.2s:  >! 33.48K    33.64K    1.9   33.64K  33.48K  1041.9\n   46.2s:  <  33.96K    33.67K    1.1   33.64K  33.48K  1041.9\n   47.2s:  >  33.47K    33.61K    0.7   33.64K  33.48K  1041.9  \nMultiANewArray score: 33642.914063 (33.64K 1042.4%)\n           uncertainty:   0.7%\n\nfirstDimLength=1000,secondDimLength=1,maxIterations=1000000 (jump to OOL to do allocation)\n\n -- finale --\n   38.8s:  <  6870      6685      1.6   6585    6585    879.3\n   39.8s:  <! 6632      6566      1.8   6585    6585    879.3\n   40.8s:  >  6507      6631      1.1   6585    6585    879.3\n   41.7s:  >! 6667      6695      1.3   6667    6667    880.5\n   42.8s:  <  6738      6589      1.6   6667    6667    880.5\n   43.7s:  >  6538      6823      3.6   6667    6667    880.5\n   44.8s:  <  6944      6732      2.1   6667    6667    880.5\n   45.7s:  >  6660      6776      1.3   6667    6667    880.5\n   46.7s:  >! 6820      6825      1.5   6820    6820    882.8\n   47.9s:  <  6877      6181      9.4   6820    6820    882.8\n   48.7s:  >  5891      6764      9.9   6820    6820    882.8\n   49.8s:  <  7098      6768      5.9   6820    6820    882.8\n   50.8s:  >  6567      6701      3.6   6820    6820    882.8\n  MultiANewArray score: 6819.545410 (6820 882.8%)\n           uncertainty:   3.6%", "author": "dchopra001", "createdAt": "2020-12-18T15:00:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4ODkyNg=="}], "type": "inlineReview"}, {"oid": "0ba3b081283c58b579c53bcf3980fb0476cbc059", "url": "https://github.com/eclipse-openj9/openj9/commit/0ba3b081283c58b579c53bcf3980fb0476cbc059", "message": "Perform cleanup in x86 multianewarrayEvaluator\n\nThis commit does the following in the above evaluator:\n- Remove unreachable code\n- Uses the OMR::align API to calculate alignment compensation\n- Fix an RA bug where multiple jump instructions to OOL code are\n  created. This is incorrect as the RA will only account for the\n  last jump point to the OOL code when doing assignment.\n- Add C++ casts\n- Simplify calculation of elementSize\n- Simplify instructions comparing firstDimLenReg and\n  maxObjectSizeInElements\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-12-17T00:31:05Z", "type": "commit"}, {"oid": "cf27d05f8d158d56ee81266fc3ebf88aba10ddd0", "url": "https://github.com/eclipse-openj9/openj9/commit/cf27d05f8d158d56ee81266fc3ebf88aba10ddd0", "message": "Add jump to fallThru label\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-12-17T00:31:05Z", "type": "commit"}, {"oid": "211e6046b9e4b6f78721c054d259cc51f8e1d173", "url": "https://github.com/eclipse-openj9/openj9/commit/211e6046b9e4b6f78721c054d259cc51f8e1d173", "message": "Replace shift with mul instruction on X and Z\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-12-18T14:36:50Z", "type": "commit"}, {"oid": "211e6046b9e4b6f78721c054d259cc51f8e1d173", "url": "https://github.com/eclipse-openj9/openj9/commit/211e6046b9e4b6f78721c054d259cc51f8e1d173", "message": "Replace shift with mul instruction on X and Z\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-12-18T14:36:50Z", "type": "forcePushed"}, {"oid": "b04685cd31f52361130208da2c815e94a8fdeea5", "url": "https://github.com/eclipse-openj9/openj9/commit/b04685cd31f52361130208da2c815e94a8fdeea5", "message": "Z evaluator cleanup for multianewarrayEvaluator\n\nExplicitly specify 64-bit instruction instead of using APIs\nsince the evaluator only supports 64-bit JVMs.\n\nRemove unreachable code related to heapBase (since it's\nalways 0).\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-12-18T15:24:16Z", "type": "commit"}, {"oid": "cbe7eb9d34e5cc61dfad14cf1f55adc21f134724", "url": "https://github.com/eclipse-openj9/openj9/commit/cbe7eb9d34e5cc61dfad14cf1f55adc21f134724", "message": "Assert use of multianewarrayEvaluator on 64-bit\n\nSigned-off-by: Dhruv Chopra <Dhruv.C.Chopra@ibm.com>", "committedDate": "2020-12-18T15:27:45Z", "type": "commit"}]}