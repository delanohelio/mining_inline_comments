{"pr_number": 11235, "pr_title": "General Relocation Infrastructure Clean up", "pr_createdAt": "2020-11-20T01:30:34Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11235", "timeline": [{"oid": "596d89ad48cf7e1406e64196039c254331c50cc3", "url": "https://github.com/eclipse-openj9/openj9/commit/596d89ad48cf7e1406e64196039c254331c50cc3", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-04T16:18:17Z", "type": "forcePushed"}, {"oid": "8f9c4d43c4fcaba59eaecd4c21d4f55ab887eeb2", "url": "https://github.com/eclipse-openj9/openj9/commit/8f9c4d43c4fcaba59eaecd4c21d4f55ab887eeb2", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-07T20:48:10Z", "type": "forcePushed"}, {"oid": "396b3bdb7e2419eadd470add8e32204e483cbe2b", "url": "https://github.com/eclipse-openj9/openj9/commit/396b3bdb7e2419eadd470add8e32204e483cbe2b", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-08T18:29:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMTIwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r556821206", "bodyText": "Why add a new setter that asserts \"Should not be called!\" ? Why not just...not add the setter?", "author": "mstoodle", "createdAt": "2021-01-13T20:53:27Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.hpp", "diffHunk": "@@ -61,6 +61,9 @@ class OMR_EXTENSIBLE AheadOfTimeCompile : public OMR::AheadOfTimeCompileConnecto\n \n    static void interceptAOTRelocation(TR::ExternalRelocation *relocation);\n \n+   uint32_t getSizeOfAOTRelocationHeader(TR_ExternalRelocationTargetKind k) { return TR_RelocationRecord::getSizeOfAOTRelocationHeader(k); }\n+   uint32_t *setAOTRelocationKindToHeaderSizeMap(uint32_t *p) { TR_ASSERT_FATAL(false, \"Should not be called!\\n\"); return 0; }", "originalCommit": "b526afcb81655bb7a64990a4d2a02d3a5fe2f9e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMzcyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r556823727", "bodyText": "follow up: should remove the headerSizeMap constructor parameter from OMR as well unless some of other OMR consumer is somehow using it.", "author": "mstoodle", "createdAt": "2021-01-13T20:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMTIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzNzY3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r557537670", "bodyText": "Why add a new setter that asserts \"Should not be called!\" ? Why not just...not add the setter?\n\nThere is nothing to set anymore; the table of sizes is a static in RelocationRecord.cpp that's initialized at compile time. I also don't want to add the ability to change the size at runtime.\n\nfollow up: should remove the headerSizeMap constructor parameter from OMR as well unless some of other OMR consumer is somehow using it.\n\nRight now no other consumer is using it, but I recall the OMR AOT PR maybe making use of this?", "author": "dsouzai", "createdAt": "2021-01-14T16:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMTIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwNTM0NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r557605345", "bodyText": "There is nothing to set anymore; the table of sizes is a static in RelocationRecord.cpp that's initialized at compile time. I also don't want to add the ability to change the size at runtime.\n\nHence the suggestion to not add the setter at all...", "author": "mstoodle", "createdAt": "2021-01-14T18:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMTIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwNjI5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r557606299", "bodyText": "Ohh, I misread. It's because the setter exists in OMR, so I wanted to ensure no one in OpenJ9 calls the setter.", "author": "dsouzai", "createdAt": "2021-01-14T18:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMTIwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzYwNjY4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r557606689", "bodyText": "Never mind...another few seconds thought gave me the answer: you're actually overriding the OMR implementation of the setter.", "author": "mstoodle", "createdAt": "2021-01-14T18:34:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMTIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMjE1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r556822156", "bodyText": "not a huge deal, but for completeness, would you also mention this change in the abstract please?", "author": "mstoodle", "createdAt": "2021-01-13T20:55:23Z", "path": "runtime/compiler/arm/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -283,217 +283,3 @@ uint8_t *J9::ARM::AheadOfTimeCompile::initializeAOTRelocationHeader(TR::Iterated\n       }\n       return cursor;\n    }\n-\n-\n-uint32_t J9::ARM::AheadOfTimeCompile::_relocationTargetTypeToHeaderSizeMap[TR_NumExternalRelocationKinds] =\n-   {\n-   12,                                       // TR_ConstantPool                        = 0\n-   8,                                        // TR_HelperAddress                       = 1\n-   12,                                       // TR_RelativeMethodAddress               = 2\n-   4,                                        // TR_AbsoluteMethodAddress               = 3\n-   20,                                       // TR_DataAddress                         = 4\n-   12,                                       // TR_ClassObject                         = 5\n-   12,                                       // TR_MethodObject                        = 6\n-   12,                                       // TR_InterfaceObject                     = 7\n-   8,                                        // TR_AbsoluteHelperAddress               = 8\n-   8,                                        // TR_FixedSequenceAddress                = 9\n-   8,                                        // TR_FixedSequenceAddress2               = 10\n-   16,                                       // TR_JNIVirtualTargetAddress             = 11\n-   16,                                       // TR_JNIStaticTargetAddress              = 12\n-   4,                                        // TR_ArrayCopyHelper                     = 13\n-   4,                                        // TR_ArrayCopyToc                        = 14\n-   4,                                        // TR_BodyInfoAddress                     = 15\n-   12,                                       // TR_Thunks                              = 16\n-   16,                                       // TR_StaticRamMethodConst                = 17\n-   12,                                       // TR_Trampolines                         = 18\n-   8,                                        // TR_PicTrampolines                      = 19\n-   8,                                        // TR_CheckMethodEnter                    = 20\n-   4,                                        // TR_RamMethod                           = 21\n-   8,                                        // TR_RamMethodSequence                   = 22\n-   8,                                        // TR_RamMethodSequenceReg                = 23\n-   24,                                       // TR_VerifyClassObjectForAlloc           = 24\n-   12,                                       // TR_ConstantPoolOrderedPair             = 25\n-   4,                                        // TR_AbsoluteMethodAddressOrderedPair    = 26\n-   20,                                       // TR_VerifyRefArrayForAlloc              = 27\n-   12,                                       // TR_J2IThunks                           = 28\n-   8,                                        // TR_GlobalValue                         = 29\n-   4,                                        // TR_BodyInfoAddressLoad                 = 30\n-   20,                                       // TR_ValidateInstanceField               = 31\n-   24,                                       // TR_InlinedStaticMethodWithNopGuard     = 32\n-   24,                                       // TR_InlinedSpecialMethodWithNopGuard    = 33\n-   24,                                       // TR_InlinedVirtualMethodWithNopGuard    = 34\n-   24,                                       // TR_InlinedInterfaceMethodWithNopGuard  = 35\n-   16,                                       // TR_SpecialRamMethodConst               = 36\n-   24,                                       // TR_InlinedHCRMethod                    = 37\n-   20,                                       // TR_ValidateStaticField                 = 38\n-   20,                                       // TR_ValidateClass                       = 39\n-   16,                                       // TR_ClassAddress                        = 40\n-   8,                                        // TR_HCR                                 = 41\n-   32,                                       // TR_ProfiledMethodGuardRelocation       = 42\n-   32,                                       // TR_ProfiledClassGuardRelocation        = 43\n-   0,                                        // TR_HierarchyGuardRelocation            = 44\n-   0,                                        // TR_AbstractGuardRelocation             = 45\n-   32,                                       // TR_ProfiledInlinedMethod               = 46\n-   20,                                       // TR_MethodPointer                       = 47\n-   16,                                       // TR_ClassPointer                        = 48\n-   8,                                        // TR_CheckMethodExit                     = 49\n-   12,                                       // TR_ValidateArbitraryClass              = 50\n-   0,                                        // TR_EmitClass(not used)                 = 51\n-   16,                                       // TR_JNISpecialTargetAddress             = 52\n-   16,                                       // TR_VirtualRamMethodConst               = 53\n-   20,                                       // TR_InlinedInterfaceMethod              = 54\n-   20,                                       // TR_InlinedVirtualMethod                = 55\n-   0,                                        // TR_NativeMethodAbsolute                = 56,\n-   0,                                        // TR_NativeMethodRelative                = 57,\n-   16,                                       // TR_ArbitraryClassAddress               = 58,\n-   28,                                        // TR_DebugCounter                        = 59\n-   4,                                        // TR_ClassUnloadAssumption               = 60\n-   16,                                       // TR_J2IVirtualThunkPointer              = 61\n-   };\n-\n-\n-#if 0", "originalCommit": "b526afcb81655bb7a64990a4d2a02d3a5fe2f9e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzNTg0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r557535846", "bodyText": "Done in 93ac7a2", "author": "dsouzai", "createdAt": "2021-01-14T16:42:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjgyMjE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg0ODgwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r556848806", "bodyText": "I can live with this change. One of the reasons for the original naming was because the header was the only thing you could count on to be in every single relocation record: from the fields in the header, you could decode whether additional data was needed to perform the relocation, or whether the offsets followed immediately after the header. It is a little bit weird (to me) that you now look the header before you know how the rest of the header is laid out, but if you look in the safe part where the type field resides, then you can properly decode it :) .\nAnyway, I accept it was a source of confusion and, like I said, I can live with the update as I'm probably the only person whose brain will need to be reprogrammed :) .", "author": "mstoodle", "createdAt": "2021-01-13T21:31:53Z", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -503,9 +503,15 @@ TR_RelocationRecord::clean(TR_RelocationTarget *reloTarget)\n    }\n \n int32_t\n-TR_RelocationRecord::bytesInHeaderAndPayload()", "originalCommit": "fddfc0dc78a6de553f47647645d6413c58d3b9c3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg1Mzc3MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r556853771", "bodyText": "maybe add a comment on each of the (currently) three structs listing the other two of the three BinaryTemplate structs that must all be identical in their first three (at least) fields.\nI know you're just moving code here, so those comments could be added as a follow-up.", "author": "mstoodle", "createdAt": "2021-01-13T21:36:38Z", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -73,6 +73,343 @@ extern \"C\" void _patchVirtualGuard(uint8_t *locationAddr, uint8_t *destinationAd\n extern \"C\" void ASM_CALL _patchVirtualGuard(uint8_t*, uint8_t*, uint32_t);\n #endif\n \n+// START OF BINARY TEMPLATES\n+\n+// These *BinaryTemplate structs describe the shape of the binary relocation records.\n+struct TR_RelocationRecordBinaryTemplate\n+   {\n+   uint8_t type(TR_RelocationTarget *reloTarget);\n+\n+   uint16_t _size;\n+   uint8_t _type;\n+   uint8_t _flags;\n+\n+#if defined(TR_HOST_64BIT)\n+   uint32_t _extra;\n+#endif\n+   };\n+\n+// Generating 32-bit code on a 64-bit machine or vice-versa won't work because the alignment won't\n+// be right.  Relying on inheritance in the structures here means padding is automatically inserted\n+// at each inheritance boundary: this inserted padding won't match across 32-bit and 64-bit platforms.\n+// Making as many fields as possible UDATA should minimize the differences and gives the most freedom\n+// in the hierarchy of binary relocation record structures, but the header definitely has an inheritance\n+// boundary at offset 4B.", "originalCommit": "21335903b890bde9a0c7c51063a9dc67e6596ee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzUzNTQ4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r557535489", "bodyText": "Done in 54e35a9. I also opened #11659 to track further clean up of the binary templates, since we no longer need to worry about padding and what not.", "author": "dsouzai", "createdAt": "2021-01-14T16:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg1Mzc3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Njg1Nzk4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11235#discussion_r556857988", "bodyText": "I am so happy to finally see these structs move out of the header file......Bravo!", "author": "mstoodle", "createdAt": "2021-01-13T21:40:31Z", "path": "runtime/compiler/runtime/RelocationRecord.hpp", "diffHunk": "@@ -39,346 +39,14 @@ class TR_RelocationTarget;\n struct TR_RelocationRecordBinaryTemplate;\n typedef TR_ExternalRelocationTargetKind TR_RelocationRecordType;\n \n-// These *BinaryTemplate structs describe the shape of the binary relocation records.", "originalCommit": "21335903b890bde9a0c7c51063a9dc67e6596ee9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "93ac7a2b30dc085bb8432e177ad191816df6cc94", "url": "https://github.com/eclipse-openj9/openj9/commit/93ac7a2b30dc085bb8432e177ad191816df6cc94", "message": "Delete duplicate table of sizes\n\nUpdate the code to only use the canonical table of relocation record\nheader sizes in RelocationRecord.cpp, rather than the duplicated (for\neach platform) table of sizes. Additionally, delete these now unused\ntables.\n\nAdditionally, this commit also deletes code that guarded by #ifdef 0\nin ARM for two reasons; 1, it's #ifdef 0, and 2, it's code that prints\nout the fields in the relo header which is done elsewhere.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:28:42Z", "type": "commit"}, {"oid": "edd98a603be6d98abba490e2c0e1d2d13590e627", "url": "https://github.com/eclipse-openj9/openj9/commit/edd98a603be6d98abba490e2c0e1d2d13590e627", "message": "Minimize manipulation of the cursor in initializeAOTRelocationHeader\n\nCommon out all the places where the cursor is incremented. To facilitate\nthis, initializeCommonAOTRelocationHeader is updated to not increment\nthe cursor and fail the compilation if an unknown relo type is passed\nin.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:30:05Z", "type": "commit"}, {"oid": "42c7636bbe2532346c70e9f54dc94da5ac0ab433", "url": "https://github.com/eclipse-openj9/openj9/commit/42c7636bbe2532346c70e9f54dc94da5ac0ab433", "message": "Delete emitClassChainOffset\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:30:05Z", "type": "commit"}, {"oid": "2f5592a13f54e49c8879b8d276c818d35bd132a1", "url": "https://github.com/eclipse-openj9/openj9/commit/2f5592a13f54e49c8879b8d276c818d35bd132a1", "message": "Clean up unused variables in initializeAOTRelocationHeader\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:30:05Z", "type": "commit"}, {"oid": "e218d9d51e8557d919a0211c3c7c9110d454b268", "url": "https://github.com/eclipse-openj9/openj9/commit/e218d9d51e8557d919a0211c3c7c9110d454b268", "message": "Clean up dumpRelocationHeaderData\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:30:05Z", "type": "commit"}, {"oid": "1b37138fc968980daa5491bddb171ba99a345f01", "url": "https://github.com/eclipse-openj9/openj9/commit/1b37138fc968980daa5491bddb171ba99a345f01", "message": "Clean up duplicated relo flags macros\n\nThe macros definition used with respect to the relo flags were\nunnecessarily defined in RelocationRecord.cpp. This commit updates\nRelocationRecord.cpp to use the macro definitions in Runtime.hpp so that\nit is consistent with the uses in the codegen.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:30:05Z", "type": "commit"}, {"oid": "05aa679a525abe947625123267d4f62b2f8af48c", "url": "https://github.com/eclipse-openj9/openj9/commit/05aa679a525abe947625123267d4f62b2f8af48c", "message": "Rename and consolidate bytesInHeaderAndPayload\n\nRename bytesInHeaderAndPayload to just bytesInHeader. This name has been\na point of confusion for more than one developer because of the fact\nthat this API does not return total size of the binary relocation record\n(ie the data necessary to materialize the value to relocate/validate +\nthe offsets at which to apply relocation); it in fact only returns the\nsize of the total data needed to materialize the value. The reason why\nit was named \"header and payload\" is because the \"header\" was considered\nthe fields of the base type TR_RelocationRecordBinaryTemplate, whereas\nthe \"payload\" was considered the fields of any extending type.\n\nA (possible) point in favour of this is that the fields of\nTR_RelocationRecordBinaryTemplate are used to determine the type of the\nbinary template, and therefore, how to interpret the fields that follow.\nHowever, because immediately following the binary template header fields\nare offsets, it complicates the notion that a complete binary relocation\nrecord contains a header, a payload, and offsets - it begs the question\n\"what makes the offsets different that it cannot be grouped in with the\npayload?\". And while there is an answer for this, it adds undue\ncompexity to an already complex infrastructure.\n\nTherefore, to lower the barrier to entry (as I know this was for me),\nthis commit goes ahead and renames it.\n\nIt also deletes all the different implementations of it, and instead\nuses the canonical table of sizes to return the answer. In doing so, it\nis now consistent with the codegen.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:30:05Z", "type": "commit"}, {"oid": "a74a2edf75e3adf058fd556756b79cd1b8307863", "url": "https://github.com/eclipse-openj9/openj9/commit/a74a2edf75e3adf058fd556756b79cd1b8307863", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T16:38:06Z", "type": "forcePushed"}, {"oid": "dbd3db24a0531042dcd0043d374ad9cb7551b5a1", "url": "https://github.com/eclipse-openj9/openj9/commit/dbd3db24a0531042dcd0043d374ad9cb7551b5a1", "message": "Move binary templates back into cpp file\n\nMove the binary templates back into the cpp file to enforce using\nTR_RelocationRecord (and extending types), ie the API layer, to read and\nwrite the raw relocation record data to and from the buffer.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T17:12:27Z", "type": "commit"}, {"oid": "d9a951c894b1af78defeebb992cffd614b46f456", "url": "https://github.com/eclipse-openj9/openj9/commit/d9a951c894b1af78defeebb992cffd614b46f456", "message": "Delete unused binary templates\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T17:12:29Z", "type": "commit"}, {"oid": "b23c32466885cfb41a7749cca833038e3dfb6d2c", "url": "https://github.com/eclipse-openj9/openj9/commit/b23c32466885cfb41a7749cca833038e3dfb6d2c", "message": "Initialization of common fields of the raw relocation record header\n\nThe common fields of all the raw relocation record headers (ie the\nfields of TR_RelocationRecordBinaryTemplate) should be initialized the\nsame regardless of platform. This commit enforces this by refactoring\nthe appropriate code into a common method. The\ninitializeAOTRelocationHeader method that was implemented on all\nplatforms is removed, and replaced with\ninitializePlatformSpecificAOTRelocationHeader. Instead,\nonly one version of initializeAOTRelocationHeader now exists, which\nperforms the common intialization, and then delegates to\ninitializePlatformSpecificAOTRelocationHeader, which in turn may\ndelegate to initializeCommonAOTRelocationHeader.\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T17:12:29Z", "type": "commit"}, {"oid": "6af5f91a145f5f0d1015d00a1fbf8cfaa782e9bb", "url": "https://github.com/eclipse-openj9/openj9/commit/6af5f91a145f5f0d1015d00a1fbf8cfaa782e9bb", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T17:12:29Z", "type": "commit"}, {"oid": "6af5f91a145f5f0d1015d00a1fbf8cfaa782e9bb", "url": "https://github.com/eclipse-openj9/openj9/commit/6af5f91a145f5f0d1015d00a1fbf8cfaa782e9bb", "message": "Update Copyrights\n\nSigned-off-by: Irwin D'Souza <dsouzai.gh@gmail.com>", "committedDate": "2021-01-14T17:12:29Z", "type": "forcePushed"}]}