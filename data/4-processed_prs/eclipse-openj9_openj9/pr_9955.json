{"pr_number": 9955, "pr_title": "Stored the ram classes before sending the compilationReq to server", "pr_createdAt": "2020-06-19T15:44:43Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9955", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0OTA0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r443649048", "bodyText": "Why do we need ClassInfoTuple? Maybe all we need here is an unordered_set instead of an unordered_map", "author": "mpirvu", "createdAt": "2020-06-22T15:36:27Z", "path": "runtime/compiler/control/CompilationRuntime.hpp", "diffHunk": "@@ -1227,6 +1229,7 @@ class CompilationInfo\n \n #if defined(J9VM_OPT_JITSERVER)\n    ClientSessionHT               *_clientSessionHT; // JITServer hashtable that holds session information about JITClients\n+   PersistentUnorderedMap<J9ROMClass*, JITServerHelpers::ClassInfoTuple> _romJ9ClassMap;", "originalCommit": "16940d862debc2161592905834ea5e553509e443", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0OTYwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r443649608", "bodyText": "Maybe add some comments with the purpose of this hashtable.", "author": "mpirvu", "createdAt": "2020-06-22T15:37:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0OTA0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MTMwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r443651301", "bodyText": "I would prefer multi-line comments to be capitalized --> Check", "author": "mpirvu", "createdAt": "2020-06-22T15:39:43Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3146,6 +3146,22 @@ remoteCompile(\n    if (compiler->isOptServer())\n       compiler->setOption(TR_Server);\n    auto classInfoTuple = JITServerHelpers::packRemoteROMClassInfo(clazz, compiler->fej9vm()->vmThread(), compiler->trMemory());\n+\n+   // check if the romClass is in the map, if it is not insert in the map", "originalCommit": "16940d862debc2161592905834ea5e553509e443", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1MjkxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r443652912", "bodyText": "I wonder if we can optimize this path because we seem to serialize the ROMClass information and then throw it away", "author": "mpirvu", "createdAt": "2020-06-22T15:42:14Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3146,6 +3146,22 @@ remoteCompile(\n    if (compiler->isOptServer())\n       compiler->setOption(TR_Server);\n    auto classInfoTuple = JITServerHelpers::packRemoteROMClassInfo(clazz, compiler->fej9vm()->vmThread(), compiler->trMemory());\n+\n+   // check if the romClass is in the map, if it is not insert in the map\n+   // otherwise send an empty string \n+   if (compInfo->getRomJ9ClassMap().find(romClass) == compInfo->getRomJ9ClassMap().end())\n+      {\n+      // rom class was not found send the romclass\n+      // send_compile_request_with_romclass\n+      compInfo->getRomJ9ClassMap().insert({romClass, classInfoTuple});\n+      }\n+   else\n+      {\n+      // send an empty string instead of the rom class   \n+      // send_compile_request_without_romclass \n+      std::get<0>(classInfoTuple) = \" \";", "originalCommit": "16940d862debc2161592905834ea5e553509e443", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY1NjQwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r443656408", "bodyText": "The the ROMClass is not already cached at the server we get the information from the request sent by the client and cache it. If the client did not send us anything, the server needs to specifically ask about the information, because it cannot continue with the ROMClas.", "author": "mpirvu", "createdAt": "2020-06-22T15:47:20Z", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -528,8 +528,13 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n       J9ROMClass *romClass = NULL;\n       if (!(romClass = JITServerHelpers::getRemoteROMClassIfCached(clientSession, clazz)))\n          {\n-         romClass = JITServerHelpers::romClassFromString(std::get<0>(classInfoTuple), compInfo->persistentMemory());\n-         JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple);\n+         //check whether the first argument of the classInfoTuple is an empty string", "originalCommit": "16940d862debc2161592905834ea5e553509e443", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "702405226ff6b7175bb57bea8b6552dc9493ff77", "url": "https://github.com/eclipse-openj9/openj9/commit/702405226ff6b7175bb57bea8b6552dc9493ff77", "message": "Stored the rom classes before sending the compilationreq to server\n\nStored the romClasses in an unordered_map before sending the compilation\nrequest to the server. I also check if the romClass is in the map, if it is\nI send an empty string to the server instead of the romClass again and on the server\nside I check to see if I received an empty string. If so I don't cache it.\nissue: #9708\n\nSigned-off-by: Eman Elsabban <eman.elsaban1@gmail.com>", "committedDate": "2020-06-23T17:30:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4OTIzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r444589230", "bodyText": "This global can create problems with multithreading.\nPlease define a local as close as possible to the usage.", "author": "mpirvu", "createdAt": "2020-06-24T01:09:13Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -44,7 +44,7 @@\n #include \"vmaccess.h\"\n \n extern TR::Monitor *assumptionTableMutex;\n-\n+bool serializeClass = false;", "originalCommit": "702405226ff6b7175bb57bea8b6552dc9493ff77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4OTQxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r444589412", "bodyText": "Here you don't need serializeClass; instead you can pass directly true", "author": "mpirvu", "createdAt": "2020-06-24T01:09:56Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -1171,7 +1171,8 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n       case MessageType::ResolvedMethod_getRemoteROMClassAndMethods:\n          {\n          J9Class *clazz = std::get<0>(client->getRecvData<J9Class *>());\n-         client->write(response, JITServerHelpers::packRemoteROMClassInfo(clazz, fe->vmThread(), trMemory));\n+         serializeClass = true;\n+         client->write(response, JITServerHelpers::packRemoteROMClassInfo(clazz, fe->vmThread(), trMemory, serializeClass));", "originalCommit": "702405226ff6b7175bb57bea8b6552dc9493ff77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4OTU3Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r444589577", "bodyText": "serializeClass can be a local defined just before this synchronization block", "author": "mpirvu", "createdAt": "2020-06-24T01:10:35Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3145,7 +3146,27 @@ remoteCompile(\n \n    if (compiler->isOptServer())\n       compiler->setOption(TR_Server);\n-   auto classInfoTuple = JITServerHelpers::packRemoteROMClassInfo(clazz, compiler->fej9vm()->vmThread(), compiler->trMemory());\n+\n+   // Check if the romClass is in the map, if it is not insert in the map\n+   // Otherwise send an empty string \n+      {\n+      OMR::CriticalSection romClassCache(compInfo->getRomSetMonitor());\n+      if (compInfo->getRomJ9ClassSet().find(romClass) == compInfo->getRomJ9ClassSet().end())\n+         {\n+         // Rom class was not found send the romclass\n+         // Send_compile_request_with_romclass\n+         compInfo->getRomJ9ClassSet().insert(romClass);\n+         serializeClass = true;", "originalCommit": "702405226ff6b7175bb57bea8b6552dc9493ff77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5MDY3MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r444590671", "bodyText": "A comp object does not exist at this point. Most likely comp == NULL at this point", "author": "mpirvu", "createdAt": "2020-06-24T01:15:08Z", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -298,6 +298,7 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n    bool abortCompilation = false;\n    uint64_t clientId = 0;\n    TR::CompilationInfo *compInfo = getCompilationInfo();\n+   auto comp = getCompilation();", "originalCommit": "702405226ff6b7175bb57bea8b6552dc9493ff77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5NDk1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r444594958", "bodyText": "Here, because comp is likely NULL you cannot use comp->trMemory(). However, looking at the definition of getRemoteROMClass() the only reason it needs trMemory is for trMemory->trPersistentMemory() which you can obtain from compInfo->persistentMemory() as used above. So you need to modify getRemoteROMClass() to accept persistentMemory as a parameter.", "author": "mpirvu", "createdAt": "2020-06-24T01:32:30Z", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -525,11 +526,25 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n          }\n       // Get the ROMClass for the method to be compiled if it is already cached\n       // Or read it from the compilation request and cache it otherwise\n-      J9ROMClass *romClass = NULL;\n+      J9ROMClass *romClass = NULL; \n       if (!(romClass = JITServerHelpers::getRemoteROMClassIfCached(clientSession, clazz)))\n          {\n-         romClass = JITServerHelpers::romClassFromString(std::get<0>(classInfoTuple), compInfo->persistentMemory());\n-         JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple);\n+         // Check whether the first argument of the classInfoTuple is an empty string\n+         // If it's an empty string then I dont't need to cache it \n+         if(std::get<0>(classInfoTuple) != \" \")\n+            {\n+            romClass = JITServerHelpers::romClassFromString(std::get<0>(classInfoTuple), compInfo->persistentMemory());\n+            JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple);\n+            }\n+         else\n+            {\n+            // When I receive an empty string I need to check whether the server had the class caches\n+            // It could be a renewed connection, so that's a new server because old one was shutdown\n+            // When the server receives an empty ROM class it would check if it actually has this class cached, \n+            // And if it it's not cached, send a request to the client \n+            romClass = JITServerHelpers::getRemoteROMClass(clazz, stream, comp->trMemory(), &classInfoTuple);", "originalCommit": "702405226ff6b7175bb57bea8b6552dc9493ff77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5NTM5Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r444595396", "bodyText": "This is not empty string, but rather a string with one character. You can actually create an empty string by calling the default constructor and test it with string.empty() function", "author": "mpirvu", "createdAt": "2020-06-24T01:34:19Z", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -525,11 +526,25 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n          }\n       // Get the ROMClass for the method to be compiled if it is already cached\n       // Or read it from the compilation request and cache it otherwise\n-      J9ROMClass *romClass = NULL;\n+      J9ROMClass *romClass = NULL; \n       if (!(romClass = JITServerHelpers::getRemoteROMClassIfCached(clientSession, clazz)))\n          {\n-         romClass = JITServerHelpers::romClassFromString(std::get<0>(classInfoTuple), compInfo->persistentMemory());\n-         JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple);\n+         // Check whether the first argument of the classInfoTuple is an empty string\n+         // If it's an empty string then I dont't need to cache it \n+         if(std::get<0>(classInfoTuple) != \" \")", "originalCommit": "702405226ff6b7175bb57bea8b6552dc9493ff77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU5NjM2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r444596361", "bodyText": "You don't need to pass serializeClass to packROMClass. Instead you could do:\nreturn std::make_tuple(serializeClass ? packROMClass(clazz->romClass, trMemory) : std::string(), methodsOfClass, baseClass, numDims, parentClass,", "author": "mpirvu", "createdAt": "2020-06-24T01:38:07Z", "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -324,7 +333,7 @@ JITServerHelpers::packRemoteROMClassInfo(J9Class *clazz, J9VMThread *vmThread, T\n    uintptr_t classChainOffsetOfIdentifyingLoaderForClazz = fe->sharedCache() ? \n       fe->sharedCache()->getClassChainOffsetOfIdentifyingLoaderForClazzInSharedCacheNoFail((TR_OpaqueClassBlock *)clazz) : 0;\n \n-   return std::make_tuple(packROMClass(clazz->romClass, trMemory), methodsOfClass, baseClass, numDims, parentClass,\n+   return std::make_tuple(packROMClass(clazz->romClass, trMemory, serializeClass), methodsOfClass, baseClass, numDims, parentClass,", "originalCommit": "702405226ff6b7175bb57bea8b6552dc9493ff77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7c093316d8e4802914dd56a3cb49ef0fca0bced2", "url": "https://github.com/eclipse-openj9/openj9/commit/7c093316d8e4802914dd56a3cb49ef0fca0bced2", "message": "Stored the ram classes before sending the compilationreq to server\n\nStored the ramClasses in an unordered_set before sending the compilation\nrequest to the server. I check if the ram class (clazz) is cached in the set.\nif it is not stored then it will be cached in the set and will send the corresponding\nROM by setting the serializeClass bool to true. If the clazz is already in the cache set\nthis means it has already been sent to the server. So send the clazz again but with empty ROM\nclass (empty string for ROM Class) by setting serializeClass bool to false.\nissue: #9708\n\nSigned-off-by: Eman Elsabban <eman.elsaban1@gmail.com>", "committedDate": "2020-06-30T16:48:16Z", "type": "forcePushed"}, {"oid": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "url": "https://github.com/eclipse-openj9/openj9/commit/cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "message": "Stored the ram classes before sending the compilationreq to server\n\nStored the ramClasses in an unordered_set before sending the compilation\nrequest to the server. I check if the ram class (clazz) is cached in the set.\nif it is not stored then it will be cached in the set and will send the corresponding\nROM by setting the serializeClass bool to true. If the clazz is already in the cache set\nthis means it has already been sent to the server. So send the clazz again but with empty ROM\nclass (empty string for ROM Class) by setting serializeClass bool to false.\nissue: #9708\n\nSigned-off-by: Eman Elsabban <eman.elsaban1@gmail.com>", "committedDate": "2020-06-30T16:57:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwMjk5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r447902995", "bodyText": "The name RamSet is not very descriptive.\nI am not feeling very inspired, but maybe something along the lines classesCachedAtServerMonitor better depicts what this monitor is used for", "author": "mpirvu", "createdAt": "2020-06-30T18:44:19Z", "path": "runtime/compiler/control/CompilationRuntime.hpp", "diffHunk": "@@ -1009,6 +1010,7 @@ class CompilationInfo\n       }\n    void setNewlyExtendedClasses(PersistentUnorderedMap<TR_OpaqueClassBlock*, uint8_t> *it) { _newlyExtendedClasses = it; }\n \n+   TR::Monitor *getRamSetMonitor() const { return _ramSetMonitor; }", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNDUxMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r447904510", "bodyText": "This code should be put under the if that determines we are running on the client.", "author": "mpirvu", "createdAt": "2020-06-30T18:46:55Z", "path": "runtime/compiler/control/HookedByTheJit.cpp", "diffHunk": "@@ -2115,6 +2115,12 @@ static void jitHookClassUnload(J9HookInterface * * hookInterface, UDATA eventNum\n    // Add to JITServer unload list\n    if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::CLIENT)\n       compInfo->getUnloadedClassesTempList()->push_back(clazz);\n+   // Loop through the set to find the class that needs to be purged once found erase from the set\n+   auto it = compInfo->getRamJ9ClassSet().find(unloadedEvent->clazz);", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNjAyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r447906022", "bodyText": "You can try to erase it even if it does not exist, thus avoiding one search operation when desired item exists in the collection.", "author": "mpirvu", "createdAt": "2020-06-30T18:49:27Z", "path": "runtime/compiler/control/HookedByTheJit.cpp", "diffHunk": "@@ -2115,6 +2115,12 @@ static void jitHookClassUnload(J9HookInterface * * hookInterface, UDATA eventNum\n    // Add to JITServer unload list\n    if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::CLIENT)\n       compInfo->getUnloadedClassesTempList()->push_back(clazz);\n+   // Loop through the set to find the class that needs to be purged once found erase from the set\n+   auto it = compInfo->getRamJ9ClassSet().find(unloadedEvent->clazz);\n+   if (it != compInfo->getRamJ9ClassSet().end())\n+      { \n+      compInfo->getRamJ9ClassSet().erase(it);", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkwNzI5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r447907293", "bodyText": "This comment is composed from two sentences. Let make that obvious: \"clazz not found. Send the romClass to JITServer.\"", "author": "mpirvu", "createdAt": "2020-06-30T18:51:32Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3145,7 +3144,28 @@ remoteCompile(\n \n    if (compiler->isOptServer())\n       compiler->setOption(TR_Server);\n-   auto classInfoTuple = JITServerHelpers::packRemoteROMClassInfo(clazz, compiler->fej9vm()->vmThread(), compiler->trMemory());\n+\n+      // Check if the Clazz is in the set, if it is not insert in the set\n+      // Otherwise set serializeClass to false which will send an empty string \n+      bool serializeClass = false;\n+      {\n+      OMR::CriticalSection romClassCache(compInfo->getRamSetMonitor());\n+      if (compInfo->getRamJ9ClassSet().find(clazz) == compInfo->getRamJ9ClassSet().end())\n+         {\n+         // clazz was not found send the romclass", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkxOTAyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r447919020", "bodyText": "The else part is not needed, because serializeClass starts as false", "author": "mpirvu", "createdAt": "2020-06-30T19:11:24Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3145,7 +3144,28 @@ remoteCompile(\n \n    if (compiler->isOptServer())\n       compiler->setOption(TR_Server);\n-   auto classInfoTuple = JITServerHelpers::packRemoteROMClassInfo(clazz, compiler->fej9vm()->vmThread(), compiler->trMemory());\n+\n+      // Check if the Clazz is in the set, if it is not insert in the set\n+      // Otherwise set serializeClass to false which will send an empty string \n+      bool serializeClass = false;\n+      {\n+      OMR::CriticalSection romClassCache(compInfo->getRamSetMonitor());\n+      if (compInfo->getRamJ9ClassSet().find(clazz) == compInfo->getRamJ9ClassSet().end())\n+         {\n+         // clazz was not found send the romclass\n+         // Send_compile_request_with_romclass\n+         compInfo->getRamJ9ClassSet().insert(clazz);\n+         serializeClass = true;\n+         }\n+      else\n+         {\n+         // Send an empty string instead of the rom class, first don't serialize the ROMClass \n+         // Send_compile_request_without_romclass \n+         serializeClass = false;", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyMzM1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r447923353", "bodyText": "It's better to call .isEmpty() here", "author": "mpirvu", "createdAt": "2020-06-30T19:19:54Z", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -525,11 +525,25 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n          }\n       // Get the ROMClass for the method to be compiled if it is already cached\n       // Or read it from the compilation request and cache it otherwise\n-      J9ROMClass *romClass = NULL;\n+      J9ROMClass *romClass = NULL; \n       if (!(romClass = JITServerHelpers::getRemoteROMClassIfCached(clientSession, clazz)))\n          {\n-         romClass = JITServerHelpers::romClassFromString(std::get<0>(classInfoTuple), compInfo->persistentMemory());\n-         JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple);\n+         // Check whether the first argument of the classInfoTuple is an empty string\n+         // If it's an empty string then I dont't need to cache it \n+         if(std::get<0>(classInfoTuple) != std::string())", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNDkyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r447924922", "bodyText": "The line JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple); is common for if and else part so it can be taken out and placed after the if-then-else", "author": "mpirvu", "createdAt": "2020-06-30T19:22:45Z", "path": "runtime/compiler/control/JITServerCompilationThread.cpp", "diffHunk": "@@ -525,11 +525,25 @@ TR::CompilationInfoPerThreadRemote::processEntry(TR_MethodToBeCompiled &entry, J\n          }\n       // Get the ROMClass for the method to be compiled if it is already cached\n       // Or read it from the compilation request and cache it otherwise\n-      J9ROMClass *romClass = NULL;\n+      J9ROMClass *romClass = NULL; \n       if (!(romClass = JITServerHelpers::getRemoteROMClassIfCached(clientSession, clazz)))\n          {\n-         romClass = JITServerHelpers::romClassFromString(std::get<0>(classInfoTuple), compInfo->persistentMemory());\n-         JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple);\n+         // Check whether the first argument of the classInfoTuple is an empty string\n+         // If it's an empty string then I dont't need to cache it \n+         if(std::get<0>(classInfoTuple) != std::string())\n+            {\n+            romClass = JITServerHelpers::romClassFromString(std::get<0>(classInfoTuple), compInfo->persistentMemory());\n+            JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple);\n+            }\n+         else\n+            {\n+            // When I receive an empty string I need to check whether the server had the class caches\n+            // It could be a renewed connection, so that's a new server because old one was shutdown\n+            // When the server receives an empty ROM class it would check if it actually has this class cached, \n+            // And if it it's not cached, send a request to the client \n+            romClass = JITServerHelpers::getRemoteROMClass(clazz, stream, compInfo->persistentMemory(), &classInfoTuple);\n+            JITServerHelpers::cacheRemoteROMClass(getClientData(), clazz, romClass, &classInfoTuple);", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNzc1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r447927750", "bodyText": "Is the previous version of JITServerHelpers::getRemoteClass() needed anymore? If not, we can delete it.", "author": "mpirvu", "createdAt": "2020-06-30T19:27:52Z", "path": "runtime/compiler/control/JITServerHelpers.cpp", "diffHunk": "@@ -350,6 +350,15 @@ JITServerHelpers::getRemoteROMClass(J9Class *clazz, JITServer::ServerStream *str\n    return romClassFromString(std::get<0>(*classInfoTuple), trMemory->trPersistentMemory());\n    }\n \n+J9ROMClass *", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY4MjIxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r449682217", "bodyText": "yes, it's used in getAndCacheRemoteROMClass() in CompilationThread.cpp and getAndCacheRemoteROMClass is used in other several files. That's why I overloaded the function. For example, here _romClass = threadCompInfo->getAndCacheRemoteROMClass(_ramClass, trMemory); which is in j9methodServer.cpp.", "author": "EmanElsaban", "createdAt": "2020-07-03T18:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzkyNzc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MDg2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r449060861", "bodyText": "Similar comment here about the _ramJ9ClassSet. Maybe replace with _classesCachedAtServer", "author": "mpirvu", "createdAt": "2020-07-02T14:54:18Z", "path": "runtime/compiler/control/CompilationRuntime.hpp", "diffHunk": "@@ -1227,6 +1230,8 @@ class CompilationInfo\n \n #if defined(J9VM_OPT_JITSERVER)\n    ClientSessionHT               *_clientSessionHT; // JITServer hashtable that holds session information about JITClients\n+   PersistentUnorderedSet<J9Class*> _ramJ9ClassSet;", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MTkxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r449061913", "bodyText": "The comment seems to be composed of two sentences, so let's make that clear:\n// Loop through the set to find the class that needs to be purged.\n// Once found erase from the set.", "author": "mpirvu", "createdAt": "2020-07-02T14:55:48Z", "path": "runtime/compiler/control/HookedByTheJit.cpp", "diffHunk": "@@ -2115,6 +2115,12 @@ static void jitHookClassUnload(J9HookInterface * * hookInterface, UDATA eventNum\n    // Add to JITServer unload list\n    if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::CLIENT)\n       compInfo->getUnloadedClassesTempList()->push_back(clazz);\n+   // Loop through the set to find the class that needs to be purged once found erase from the set", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NTMyNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r449065325", "bodyText": "Transform this comment into:\nCheck the _classesCachedAtServer set to determine whether JITServer is likely to have this class already cached.\nIf so, do not send the ROMClass content to save network traffic.\"", "author": "mpirvu", "createdAt": "2020-07-02T15:00:35Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -3145,7 +3144,28 @@ remoteCompile(\n \n    if (compiler->isOptServer())\n       compiler->setOption(TR_Server);\n-   auto classInfoTuple = JITServerHelpers::packRemoteROMClassInfo(clazz, compiler->fej9vm()->vmThread(), compiler->trMemory());\n+\n+      // Check if the Clazz is in the set, if it is not insert in the set", "originalCommit": "cb6c0f4645c033b321bf3b59c7a7552717dc8b0a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ab8f0159eb4fb1aa0515675140a598b9be60e42e", "url": "https://github.com/eclipse-openj9/openj9/commit/ab8f0159eb4fb1aa0515675140a598b9be60e42e", "message": "Stored the ram classes before sending the compilationreq to server\n\nStored the ramClasses in an unordered_set before sending the compilation\nrequest to the server. I check if the ram class (clazz) is cached in the set.\nif it is not stored then it will be cached in the set and will send the corresponding\nROM by setting the serializeClass bool to true. If the clazz is already in the cache set\nthis means it has already been sent to the server. So send the clazz again but with empty ROM\nclass (empty string for ROM Class) by setting serializeClass bool to false.\nissue: #9708\n\nSigned-off-by: Eman Elsabban <eman.elsaban1@gmail.com>", "committedDate": "2020-07-03T18:50:47Z", "type": "forcePushed"}, {"oid": "be21e040fde2bd3490c3c45069a16eb1c0ac26a8", "url": "https://github.com/eclipse-openj9/openj9/commit/be21e040fde2bd3490c3c45069a16eb1c0ac26a8", "message": "Stored the ram classes before sending the compilationreq to server\n\nStored the ramClasses in an unordered_set before sending the compilation\nrequest to the server. I check if the ram class (clazz) is cached in the set.\nif it is not stored then it will be cached in the set and will send the corresponding\nROM by setting the serializeClass bool to true. If the clazz is already in the cache set\nthis means it has already been sent to the server. So send the clazz again but with empty ROM\nclass (empty string for ROM Class) by setting serializeClass bool to false.\nissue: #9708\n\nSigned-off-by: Eman Elsabban <eman.elsaban1@gmail.com>", "committedDate": "2020-07-06T21:44:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUyNTczNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9955#discussion_r450525735", "bodyText": "This require a mutex.\nMaybe it's better to put is after the write operation so that we don't delay it.", "author": "mpirvu", "createdAt": "2020-07-06T23:13:44Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -215,6 +215,7 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          auto table = (JITClientPersistentCHTable*)comp->getPersistentInfo()->getPersistentCHTable();\n          std::string encoded = FlatPersistentClassInfo::serializeHierarchy(table);\n \n+         compInfo->getclassesCachedAtServer().clear();", "originalCommit": "be21e040fde2bd3490c3c45069a16eb1c0ac26a8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3e7486afc832bc711c6c7313ee5ca8868ab6db5a", "url": "https://github.com/eclipse-openj9/openj9/commit/3e7486afc832bc711c6c7313ee5ca8868ab6db5a", "message": "Stored the ram classes before sending the compilationreq to server\n\nStored the ramClasses in an unordered_set before sending the compilation\nrequest to the server. I check if the ram class (clazz) is cached in the set.\nif it is not stored then it will be cached in the set and will send the corresponding\nROM by setting the serializeClass bool to true. If the clazz is already in the cache set\nthis means it has already been sent to the server. So send the clazz again but with empty ROM\nclass (empty string for ROM Class) by setting serializeClass bool to false.\nissue: #9708\n\nSigned-off-by: Eman Elsabban <eman.elsaban1@gmail.com>", "committedDate": "2020-07-07T12:34:36Z", "type": "forcePushed"}, {"oid": "87efa9e22e4e0d3df0dbe2a506bd7af6af111b02", "url": "https://github.com/eclipse-openj9/openj9/commit/87efa9e22e4e0d3df0dbe2a506bd7af6af111b02", "message": "Stored the ram classes before sending the compilationreq to server\n\nStored the ramClasses in an unordered_set before sending the compilation\nrequest to the server. I check if the ram class (clazz) is cached in the set.\nif it is not stored then it will be cached in the set and will send the corresponding\nROM by setting the serializeClass bool to true. If the clazz is already in the cache set\nthis means it has already been sent to the server. So send the clazz again but with empty ROM\nclass (empty string for ROM Class) by setting serializeClass bool to false.\nissue: #9708\n\nSigned-off-by: Eman Elsabban <eman.elsaban1@gmail.com>", "committedDate": "2020-07-07T14:08:35Z", "type": "commit"}, {"oid": "87efa9e22e4e0d3df0dbe2a506bd7af6af111b02", "url": "https://github.com/eclipse-openj9/openj9/commit/87efa9e22e4e0d3df0dbe2a506bd7af6af111b02", "message": "Stored the ram classes before sending the compilationreq to server\n\nStored the ramClasses in an unordered_set before sending the compilation\nrequest to the server. I check if the ram class (clazz) is cached in the set.\nif it is not stored then it will be cached in the set and will send the corresponding\nROM by setting the serializeClass bool to true. If the clazz is already in the cache set\nthis means it has already been sent to the server. So send the clazz again but with empty ROM\nclass (empty string for ROM Class) by setting serializeClass bool to false.\nissue: #9708\n\nSigned-off-by: Eman Elsabban <eman.elsaban1@gmail.com>", "committedDate": "2020-07-07T14:08:35Z", "type": "forcePushed"}]}