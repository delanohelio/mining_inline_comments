{"pr_number": 9591, "pr_title": "Add new relocation records for block frequency", "pr_createdAt": "2020-05-15T22:10:10Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9591", "timeline": [{"oid": "c45bc7671a0bbc761885aeca21acf559126aa93d", "url": "https://github.com/eclipse-openj9/openj9/commit/c45bc7671a0bbc761885aeca21acf559126aa93d", "message": "Add new relocation record for block frequency\n\nCreated a new relocation record for block frequency.\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-05-15T22:13:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NDM3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r427574375", "bodyText": "Missing a break; here.\nAlso you should add code to dump the relo data further below in J9::AheadOfTimeCompile::dumpRelocationHeaderData", "author": "dsouzai", "createdAt": "2020-05-19T20:18:23Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -563,6 +563,23 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *blockFrequencyRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+\n+         TR_BlockFrequencyInfo *blockInfo = profileInfo->getBlockFrequencyInfo();\n+\n+         TR_ASSERT(NULL != blockInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");\n+\n+         uintptr_t frequencyArrayBase = reinterpret_cast<uintptr_t>(blockInfo->getFrequencyArrayBase());\n+         uintptr_t frequencyPtr = reinterpret_cast<uintptr_t>(relocation->getTargetAddress());\n+\n+         blockFrequencyRecord->setFrequencyOffset(reloTarget, frequencyPtr - frequencyArrayBase);\n+         }", "originalCommit": "c45bc7671a0bbc761885aeca21acf559126aa93d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NjE0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r427576141", "bodyText": "You should probably put a NULL check for the bodyInfo. If in some strange circumstance, the compiler in the load run might decide that a particular method shouldn't be recompiled, there won't be a bodyInfo. It would be a truly weird circumstance (especially since in the compile run there was a bodyInfo), so you could add some logging.", "author": "dsouzai", "createdAt": "2020-05-19T20:21:37Z", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -766,6 +766,77 @@ TR_RelocationRecordWithOffset::applyRelocation(TR_RelocationRuntime *reloRuntime\n    return 0;\n    }\n \n+// TR_BlockFrequency\n+//\n+char *\n+TR_RelocationRecordBlockFrequency::name()\n+   {\n+   return \"TR_BlockFrequency\";\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tfrequencyOffset %x\\n\", frequencyOffset(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::setFrequencyOffset(TR_RelocationTarget *reloTarget, uintptr_t offset)\n+   {\n+   reloTarget->storeRelocationRecordValue(offset, (uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+uintptr_t\n+TR_RelocationRecordBlockFrequency::frequencyOffset(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadRelocationRecordValue((uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::bytesInHeaderAndPayload()\n+   {\n+   return sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate);\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   TR_PersistentJittedBodyInfo *bodyInfo = reinterpret_cast<TR_PersistentJittedBodyInfo *>(reloRuntime->exceptionTable()->bodyInfo);\n+   TR_PersistentProfileInfo *profileInfo = bodyInfo->getProfileInfo();", "originalCommit": "c45bc7671a0bbc761885aeca21acf559126aa93d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NzE0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r427577148", "bodyText": "Probably best to also just fail the compile at this point, there was a new exception recently added J9::AOTRelocationRecordGenerationFailure that you could use.", "author": "dsouzai", "createdAt": "2020-05-19T20:23:27Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -563,6 +563,23 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *blockFrequencyRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");", "originalCommit": "c45bc7671a0bbc761885aeca21acf559126aa93d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NzIxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r427577214", "bodyText": "Same comment as above.", "author": "dsouzai", "createdAt": "2020-05-19T20:23:36Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -563,6 +563,23 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *blockFrequencyRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+\n+         TR_BlockFrequencyInfo *blockInfo = profileInfo->getBlockFrequencyInfo();\n+\n+         TR_ASSERT(NULL != blockInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");", "originalCommit": "c45bc7671a0bbc761885aeca21acf559126aa93d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ae960c913d8453b0491bf7b48e05419bb133c94f", "url": "https://github.com/eclipse-openj9/openj9/commit/ae960c913d8453b0491bf7b48e05419bb133c94f", "message": "Add relocation record for TR_RecompQueuedFlag\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-08-18T23:22:14Z", "type": "forcePushed"}, {"oid": "1baad176a8b41397380d2efdfecdb11e0ff7a91e", "url": "https://github.com/eclipse-openj9/openj9/commit/1baad176a8b41397380d2efdfecdb11e0ff7a91e", "message": "Add relocation record for TR_RecompQueuedFlag\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-08-26T23:08:39Z", "type": "forcePushed"}, {"oid": "6b0e035138ab2d12e80e1f7d4d55915ac310c01e", "url": "https://github.com/eclipse-openj9/openj9/commit/6b0e035138ab2d12e80e1f7d4d55915ac310c01e", "message": "Add relocation record for TR_RecompQueuedFlag\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-09-10T21:00:12Z", "type": "forcePushed"}, {"oid": "0b901f4521dc6d591f6ef23687c4da3588042c94", "url": "https://github.com/eclipse-openj9/openj9/commit/0b901f4521dc6d591f6ef23687c4da3588042c94", "message": "Add relocation record for recompilation queued flag\n\nProfiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued.\nAdded a new relocation record of type TR_RecompQueuedFlag to handle\nrelocation of that flag.\n\nSigned-off-by: Ashutosh Mehra <mehra.ashutosh@ibm.com>", "committedDate": "2020-09-21T23:24:51Z", "type": "forcePushed"}, {"oid": "6318e7fe6783528e2d433a1358d1e79e99b3908a", "url": "https://github.com/eclipse-openj9/openj9/commit/6318e7fe6783528e2d433a1358d1e79e99b3908a", "message": "Add new relocation record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n- Add an API J9CodeGenerator::needRelocationsForPersistentProfileInfoData()\nto check if persistent profile info needs to be relocated or not.\nThis API is just a wrapper around the similarly named front-end API.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T00:45:33Z", "type": "forcePushed"}, {"oid": "f80e850a9a3c68a314eed8efc09a58f993f3a56c", "url": "https://github.com/eclipse-openj9/openj9/commit/f80e850a9a3c68a314eed8efc09a58f993f3a56c", "message": "Add new relocation record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n- Add an API J9CodeGenerator::needRelocationsForPersistentProfileInfoData()\nto check if persistent profile info needs to be relocated or not.\nThis API is just a wrapper around the similarly named front-end API.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T15:18:45Z", "type": "forcePushed"}, {"oid": "e276da864ee41c626e2c24773f51663fc1c2dc92", "url": "https://github.com/eclipse-openj9/openj9/commit/e276da864ee41c626e2c24773f51663fc1c2dc92", "message": "Add new relocation record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n- Add an API J9CodeGenerator::needRelocationsForPersistentProfileInfoData()\nto check if persistent profile info needs to be relocated or not.\nThis API is just a wrapper around the similarly named front-end API.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T16:34:32Z", "type": "forcePushed"}, {"oid": "fe7219b6a153c2a0ec2f85517ed2b44beb7ab067", "url": "https://github.com/eclipse-openj9/openj9/commit/fe7219b6a153c2a0ec2f85517ed2b44beb7ab067", "message": "Add new relocation record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n- Add an API J9CodeGenerator::needRelocationsForPersistentProfileInfoData()\nto check if persistent profile info needs to be relocated or not.\nThis API is just a wrapper around the similarly named front-end API.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-04T19:29:07Z", "type": "forcePushed"}, {"oid": "b1d75f60c8a8a1a89f1d1761da2a607e945889da", "url": "https://github.com/eclipse-openj9/openj9/commit/b1d75f60c8a8a1a89f1d1761da2a607e945889da", "message": "Add new relocation record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n- Add an API J9CodeGenerator::needRelocationsForPersistentProfileInfoData()\nto check if persistent profile info needs to be relocated or not.\nThis API is just a wrapper around the similarly named front-end API.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-27T17:09:38Z", "type": "forcePushed"}, {"oid": "f976bae0325cf67648986d2b6b6bf2dcd2f3ff02", "url": "https://github.com/eclipse-openj9/openj9/commit/f976bae0325cf67648986d2b6b6bf2dcd2f3ff02", "message": "Add new relocation record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n- Add an API J9CodeGenerator::needRelocationsForPersistentProfileInfoData()\nto check if persistent profile info needs to be relocated or not.\nThis API is just a wrapper around the similarly named front-end API.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-27T18:44:14Z", "type": "forcePushed"}, {"oid": "0a5b33a35c3936007d2f188e203f8d98bc861b15", "url": "https://github.com/eclipse-openj9/openj9/commit/0a5b33a35c3936007d2f188e203f8d98bc861b15", "message": "Add new relocation record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n- Add an API J9CodeGenerator::needRelocationsForPersistentProfileInfoData()\nto check if persistent profile info needs to be relocated or not.\nThis API is just a wrapper around the similarly named front-end API.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2020-11-27T18:44:59Z", "type": "forcePushed"}, {"oid": "1c3cf7028fdcb27be3aa1c87740b40ec366b71c6", "url": "https://github.com/eclipse-openj9/openj9/commit/1c3cf7028fdcb27be3aa1c87740b40ec366b71c6", "message": "Add new relo record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-04T18:10:02Z", "type": "forcePushed"}, {"oid": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0", "url": "https://github.com/eclipse-openj9/openj9/commit/39e1a1a0b55e3e4faf2e25e28569cab959e493c0", "message": "Add new relo record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-04T19:30:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNjQ1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552106459", "bodyText": "You should use sizeof(TR_RelocationRecordBinaryTemplate) like you did in RelocationRecord.cpp.", "author": "dsouzai", "createdAt": "2021-01-05T18:13:53Z", "path": "runtime/compiler/p/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -505,6 +539,8 @@ uint32_t J9::Power::AheadOfTimeCompile::_relocationTargetTypeToHeaderSizeMap[TR_\n    sizeof(TR_RelocationRecordMethodCallAddressBinaryTemplate),         // TR_MethodCallAddress = 99,\n    sizeof(TR_RelocationRecordSymbolFromManagerBinaryTemplate),         // TR_DiscontiguousSymbolFromManager = 100,\n    sizeof(TR_RelocationRecordResolvedTrampolinesBinaryTemplate),       // TR_ResolvedTrampolines = 101,\n+   sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate),            // TR_BlockFrequency = 102,\n+   8,                                                                  // TR_RecompQueuedFlag = 103,", "originalCommit": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwNjUxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552106516", "bodyText": "You should use sizeof(TR_RelocationRecordBinaryTemplate) like you did in RelocationRecord.cpp.", "author": "dsouzai", "createdAt": "2021-01-05T18:13:58Z", "path": "runtime/compiler/p/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -611,6 +647,8 @@ uint32_t J9::Power::AheadOfTimeCompile::_relocationTargetTypeToHeaderSizeMap[TR_\n    sizeof(TR_RelocationRecordMethodCallAddressBinaryTemplate),         // TR_MethodCallAddress = 99,\n    sizeof(TR_RelocationRecordSymbolFromManagerBinaryTemplate),         // TR_DiscontiguousSymbolFromManager = 100,\n    sizeof(TR_RelocationRecordResolvedTrampolinesBinaryTemplate),       // TR_ResolvedTrampolines = 101,\n+   sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate),            // TR_BlockFrequency = 102,\n+   4,                                                                  // TR_RecompQueuedFlag = 103,", "originalCommit": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwODQ1NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552108454", "bodyText": "Is it possible for profileInfo / profileInfo->getBlockFrequenceyInfo to be NULL? If it is then you'll need a NULL check in applyRelocation and return non-zero if _addressToPatch is NULL; otherwise you'll run into a SIGSEGV.", "author": "dsouzai", "createdAt": "2021-01-05T18:16:20Z", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -768,6 +774,128 @@ TR_RelocationRecordWithOffset::applyRelocation(TR_RelocationRuntime *reloRuntime\n    return 0;\n    }\n \n+// TR_BlockFrequency\n+//\n+char *\n+TR_RelocationRecordBlockFrequency::name()\n+   {\n+   return \"TR_BlockFrequency\";\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tfrequencyOffset %x\\n\", frequencyOffset(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::setFrequencyOffset(TR_RelocationTarget *reloTarget, uintptr_t offset)\n+   {\n+   reloTarget->storeRelocationRecordValue(offset, (uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+uintptr_t\n+TR_RelocationRecordBlockFrequency::frequencyOffset(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadRelocationRecordValue((uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::bytesInHeaderAndPayload()\n+   {\n+   return sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate);\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   reloPrivateData->_addressToPatch = NULL;\n+\n+   TR_PersistentJittedBodyInfo *bodyInfo = reinterpret_cast<TR_PersistentJittedBodyInfo *>(reloRuntime->exceptionTable()->bodyInfo);\n+   if (bodyInfo)\n+      {\n+      TR_PersistentProfileInfo *profileInfo = bodyInfo->getProfileInfo();\n+      if (profileInfo && profileInfo->getBlockFrequencyInfo())", "originalCommit": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEwOTI3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552109278", "bodyText": "You don't need to implement print if TR_RelocationRecordRecompQueuedFlag doesn't have any new fields.", "author": "dsouzai", "createdAt": "2021-01-05T18:17:55Z", "path": "runtime/compiler/runtime/RelocationRecord.cpp", "diffHunk": "@@ -768,6 +774,128 @@ TR_RelocationRecordWithOffset::applyRelocation(TR_RelocationRuntime *reloRuntime\n    return 0;\n    }\n \n+// TR_BlockFrequency\n+//\n+char *\n+TR_RelocationRecordBlockFrequency::name()\n+   {\n+   return \"TR_BlockFrequency\";\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   reloLogger->printf(\"\\tfrequencyOffset %x\\n\", frequencyOffset(reloTarget));\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::setFrequencyOffset(TR_RelocationTarget *reloTarget, uintptr_t offset)\n+   {\n+   reloTarget->storeRelocationRecordValue(offset, (uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+uintptr_t\n+TR_RelocationRecordBlockFrequency::frequencyOffset(TR_RelocationTarget *reloTarget)\n+   {\n+   return reloTarget->loadRelocationRecordValue((uintptr_t *) &((TR_RelocationRecordBlockFrequencyBinaryTemplate *)_record)->_frequencyOffset);\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::bytesInHeaderAndPayload()\n+   {\n+   return sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate);\n+   }\n+\n+void\n+TR_RelocationRecordBlockFrequency::preparePrivateData(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   reloPrivateData->_addressToPatch = NULL;\n+\n+   TR_PersistentJittedBodyInfo *bodyInfo = reinterpret_cast<TR_PersistentJittedBodyInfo *>(reloRuntime->exceptionTable()->bodyInfo);\n+   if (bodyInfo)\n+      {\n+      TR_PersistentProfileInfo *profileInfo = bodyInfo->getProfileInfo();\n+      if (profileInfo && profileInfo->getBlockFrequencyInfo())\n+         {\n+         uintptr_t frequencyBase = reinterpret_cast<uintptr_t>(profileInfo->getBlockFrequencyInfo()->getFrequencyArrayBase());\n+         reloPrivateData->_addressToPatch = reinterpret_cast<uint8_t *>(frequencyBase + frequencyOffset(reloTarget));\n+         }\n+      }\n+   RELO_LOG(reloRuntime->reloLogger(), 6, \"\\tpreparePrivateData: addressToPatch: %p \\n\", reloPrivateData->_addressToPatch);\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocation)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   reloTarget->storeAddressSequence(reloPrivateData->_addressToPatch, reloLocation, reloFlags(reloTarget));\n+\n+   return 0;\n+   }\n+\n+int32_t\n+TR_RelocationRecordBlockFrequency::applyRelocation(TR_RelocationRuntime *reloRuntime, TR_RelocationTarget *reloTarget, uint8_t *reloLocationHigh, uint8_t *reloLocationLow)\n+   {\n+   TR_RelocationRecordBlockFrequencyPrivateData *reloPrivateData = &(privateData()->blockFrequency);\n+   reloTarget->storeAddress(reloPrivateData->_addressToPatch, reloLocationHigh, reloLocationLow, reloFlags(reloTarget));\n+   return 0;\n+   }\n+\n+// TR_RecompQueuedFlag\n+//\n+char *\n+TR_RelocationRecordRecompQueuedFlag::name()\n+   {\n+   return \"TR_RecompQueuedFlag\";\n+   }\n+\n+void\n+TR_RelocationRecordRecompQueuedFlag::print(TR_RelocationRuntime *reloRuntime)\n+   {\n+   TR_RelocationTarget *reloTarget = reloRuntime->reloTarget();\n+   TR_RelocationRuntimeLogger *reloLogger = reloRuntime->reloLogger();\n+   TR_RelocationRecord::print(reloRuntime);\n+   }", "originalCommit": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDAwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552110002", "bodyText": "Why can't this be in the common runtime/compiler/codegen/J9AheadOfTimeCompile.cpp file?", "author": "dsouzai", "createdAt": "2021-01-05T18:19:18Z", "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -155,6 +155,31 @@ uint8_t *J9::X86::AheadOfTimeCompile::initializeAOTRelocationHeader(TR::Iterated\n          }\n         break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *ptRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();\n+\n+         TR_ASSERT(NULL != profileInfo, \"PersistentProfileInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == profileInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find profile info\");\n+            }\n+\n+         TR_BlockFrequencyInfo *blockFrequencyInfo = profileInfo->getBlockFrequencyInfo();\n+         TR_ASSERT(NULL != blockFrequencyInfo, \"BlockFrequencyInfo not found when creating relocation record for block frequency\\n\");\n+         if (NULL == blockFrequencyInfo)\n+            {\n+            self()->comp()->failCompilation<J9::AOTRelocationRecordGenerationFailure>(\"AOT header initialization can't find block frequency info\");\n+            }\n+\n+         uintptr_t frequencyArrayBase = reinterpret_cast<uintptr_t>(blockFrequencyInfo->getFrequencyArrayBase());\n+         uintptr_t frequencyPtr = reinterpret_cast<uintptr_t>(relocation->getTargetAddress());\n+         ptRecord->setFrequencyOffset(reloTarget, frequencyPtr - frequencyArrayBase);\n+         cursor = relocation->getRelocationData() + TR_RelocationRecord::getSizeOfAOTRelocationHeader(static_cast<TR_RelocationRecordType>(targetKind));\n+         }\n+         break;", "originalCommit": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc0NTk2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552745960", "bodyText": "Only reason is I need to set relo flags in p and not in x, so they are slightly different. I think I can use the implementation for p  as the common code and when generating the relocation I can set relo flag to 0 in x.", "author": "ashu-mehra", "createdAt": "2021-01-06T16:03:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mjc2MzE1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552763155", "bodyText": "Yeah it makes sense that p had its own implementation, but the x implementation was the common one, so it could be moved to the common file. The way the infra works is that it will look at the platform specific implementation first, so even if you move the x implementation to the common file, on P it will still run the P implementation.\nThat said, if you change all platforms to use TR_RelocationRecordInformation then you won't need a separate version for P.", "author": "dsouzai", "createdAt": "2021-01-06T16:16:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjgyMTQxOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552821418", "bodyText": "if you change all platforms to use TR_RelocationRecordInformation then you won't need a separate version for P\n\nyup, that's the plan.", "author": "ashu-mehra", "createdAt": "2021-01-06T17:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDAwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMTA0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r552111042", "bodyText": "You should use sizeof(TR_RelocationRecordBinaryTemplate) like you did in RelocationRecord.cpp.", "author": "dsouzai", "createdAt": "2021-01-05T18:21:23Z", "path": "runtime/compiler/x/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -267,7 +292,9 @@ uint32_t J9::X86::AheadOfTimeCompile::_relocationTargetTypeToHeaderSizeMap[TR_Nu\n    sizeof(TR_RelocationRecordSymbolFromManagerBinaryTemplate),         // TR_SymbolFromManager = 98,\n    sizeof(TR_RelocationRecordMethodCallAddressBinaryTemplate),         // TR_MethodCallAddress                   = 99,\n    sizeof(TR_RelocationRecordSymbolFromManagerBinaryTemplate),         // TR_DiscontiguousSymbolFromManager = 100,\n-   sizeof(TR_RelocationRecordResolvedTrampolinesBinaryTemplate),       // TR_ResolvedTrampolines = 101\n+   sizeof(TR_RelocationRecordResolvedTrampolinesBinaryTemplate),       // TR_ResolvedTrampolines = 101,\n+   sizeof(TR_RelocationRecordBlockFrequencyBinaryTemplate),            // TR_BlockFrequency = 102,\n+   8,                                                                  // TR_RecompQueuedFlag = 103", "originalCommit": "39e1a1a0b55e3e4faf2e25e28569cab959e493c0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "11da3145f5de0a9695e115ffeaef5406aceb3630", "url": "https://github.com/eclipse-openj9/openj9/commit/11da3145f5de0a9695e115ffeaef5406aceb3630", "message": "Common out code for writing relo record for block frequency\n\nCommon out code for writing relo record for block frequency.\nAlso added error codes to handle failure to relocate block frequency\nand recompilation queued flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-06T19:19:33Z", "type": "forcePushed"}, {"oid": "63e3a27d49849737a4aaef3770c085eb6b0ff06a", "url": "https://github.com/eclipse-openj9/openj9/commit/63e3a27d49849737a4aaef3770c085eb6b0ff06a", "message": "Common out code for writing relo record for block frequency\n\nCommon out code for writing relo record for block frequency.\nAlso added error codes to handle failure to relocate block frequency\nand recompilation queued flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-06T20:42:51Z", "type": "forcePushed"}, {"oid": "1b77e977e18b2e0fb12124e589f591d0a2e9411c", "url": "https://github.com/eclipse-openj9/openj9/commit/1b77e977e18b2e0fb12124e589f591d0a2e9411c", "message": "Common out code for writing relo record for block frequency\n\nCommon out code for writing relo record for block frequency.\nAlso added error codes to handle failure to relocate block frequency\nand recompilation queued flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-06T20:48:26Z", "type": "forcePushed"}, {"oid": "460c3295f1a4e5fb9c29469af54ebb1a33e6f39e", "url": "https://github.com/eclipse-openj9/openj9/commit/460c3295f1a4e5fb9c29469af54ebb1a33e6f39e", "message": "Common out code for writing relo record for block frequency\n\nCommon out code for writing relo record for block frequency.\nAlso added error codes to handle failure to relocate block frequency\nand recompilation queued flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-06T22:31:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQwOTU2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9591#discussion_r553409561", "bodyText": "There's a local comp object you can use; TR::comp() is apparently an expensive operation.", "author": "dsouzai", "createdAt": "2021-01-07T15:44:26Z", "path": "runtime/compiler/codegen/J9AheadOfTimeCompile.cpp", "diffHunk": "@@ -1094,6 +1095,38 @@ J9::AheadOfTimeCompile::initializeCommonAOTRelocationHeader(TR::IteratedExternal\n          }\n          break;\n \n+      case TR_BlockFrequency:\n+         {\n+         TR_RelocationRecordBlockFrequency *bfRecord = reinterpret_cast<TR_RelocationRecordBlockFrequency *>(reloRecord);\n+         TR_RelocationRecordInformation *recordInfo = reinterpret_cast<TR_RelocationRecordInformation *>(relocation->getTargetAddress());\n+         TR::SymbolReference *tempSR = reinterpret_cast<TR::SymbolReference *>(recordInfo->data1);\n+         TR::StaticSymbol *staticSym = tempSR->getSymbol()->getStaticSymbol();\n+\n+         uint8_t flags = (uint8_t) recordInfo->data2;\n+         TR_ASSERT((flags & RELOCATION_CROSS_PLATFORM_FLAGS_MASK) == 0,  \"reloFlags bits overlap cross-platform flags bits\\n\");\n+         bfRecord->setReloFlags(reloTarget, flags);\n+\n+         TR_PersistentProfileInfo *profileInfo = TR::comp()->getRecompilationInfo()->getProfileInfo();", "originalCommit": "460c3295f1a4e5fb9c29469af54ebb1a33e6f39e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d42e42518aef12a1890960fd9077539c1d126c9c", "url": "https://github.com/eclipse-openj9/openj9/commit/d42e42518aef12a1890960fd9077539c1d126c9c", "message": "Add new relo record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-07T20:08:01Z", "type": "forcePushed"}, {"oid": "85272d649aaf82df75db7bda515e578459ef290d", "url": "https://github.com/eclipse-openj9/openj9/commit/85272d649aaf82df75db7bda515e578459ef290d", "message": "Add new relo record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-07T20:09:37Z", "type": "commit"}, {"oid": "85272d649aaf82df75db7bda515e578459ef290d", "url": "https://github.com/eclipse-openj9/openj9/commit/85272d649aaf82df75db7bda515e578459ef290d", "message": "Add new relo record for block frequency and recompilation queued flag\n\n- Created a new relocation record of type  TR_BlockFrequency for\nrepresenting a block frequency in the profile code.\n- Profiling code generated for BlockFrequency profiling tests a flag\nto check if the recompilation has already been queued. Added a new relocation\nrecord of type TR_RecompQueuedFlag to handle relocation of that flag.\n\nSigned-off-by: Ashutosh Mehra <asmehra@redhat.com>", "committedDate": "2021-01-07T20:09:37Z", "type": "forcePushed"}]}