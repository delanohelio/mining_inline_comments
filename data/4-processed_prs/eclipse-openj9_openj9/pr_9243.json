{"pr_number": 9243, "pr_title": "Guard unloading class events and compilations with RWMutex", "pr_createdAt": "2020-04-14T19:28:43Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9243", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxNjg0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r408516841", "bodyText": "Let's mark this as const", "author": "mpirvu", "createdAt": "2020-04-15T00:45:28Z", "path": "runtime/compiler/runtime/JITClientSession.hpp", "diffHunk": "@@ -406,6 +406,14 @@ class ClientSessionData\n    J9SharedClassCacheDescriptor * reconstructJ9SharedClassCacheDescriptorList(const std::vector<uintptr_t> &listOfCacheStartAddress, const std::vector<uintptr_t> &listOfCacheSizeBytes);\n    void destroyJ9SharedClassCacheDescriptorList();\n \n+   volatile bool isClassUnloadingAttempted() { return _bClassUnloadingAttempt; }", "originalCommit": "d105f58370bd56d869b42fa2fd2390fb1dd16946", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODM3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r408518379", "bodyText": "Let's switch these two statements, otherwise there is a small window of time where, even though the RWMutex has been released another thread could see _bClassUnloadingAttempt and fail a compilation for nothing.", "author": "mpirvu", "createdAt": "2020-04-15T00:50:56Z", "path": "runtime/compiler/runtime/JITClientSession.cpp", "diffHunk": "@@ -556,6 +571,31 @@ void ClientSessionData::purgeCache(std::vector<ClassUnloadedData> *unloadedClass\n       }\n    }\n \n+void\n+ClientSessionData::readAcquireClassUnloadRWMutex()\n+   {\n+   omrthread_rwmutex_enter_read(_classUnloadRWMutex);\n+   }\n+\n+void\n+ClientSessionData::readReleaseClassUnloadRWMutex()\n+   {\n+   omrthread_rwmutex_exit_read(_classUnloadRWMutex);\n+   }\n+\n+void\n+ClientSessionData::writeAcquireClassUnloadRWMutex()\n+   {\n+    _bClassUnloadingAttempt = true;\n+   omrthread_rwmutex_enter_write(_classUnloadRWMutex);\n+   }\n+\n+void\n+ClientSessionData::writeReleaseClassUnloadRWMutex()\n+   {\n+   omrthread_rwmutex_exit_write(_classUnloadRWMutex);", "originalCommit": "d105f58370bd56d869b42fa2fd2390fb1dd16946", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyMzY4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r408523688", "bodyText": "Is the condition on isReadingClassUnload() needed?\nIs this the filter for catching the case when we need to send one message while doing class unloading?", "author": "mpirvu", "createdAt": "2020-04-15T01:11:17Z", "path": "runtime/compiler/net/ServerStream.hpp", "diffHunk": "@@ -73,17 +74,26 @@ class ServerStream : public CommunicationStream\n    virtual ~ServerStream()\n       {\n       _numConnectionsClosed++;\n+      _pClientSessionData = NULL;\n       }\n \n    /**\n       @brief Send a message to the client\n \n       @param [in] type Message type to be sent\n-      @param [in] args Variable number of additional paramaters to be sent\n+      @param [in] args Variable number of additional parameters to be sent\n    */\n    template <typename ...Args>\n    void write(MessageType type, Args... args)\n       {\n+      // TODO: Depending on where the mutex is taken for read,\n+      // we probably don't need to check the message CHTable_getClassInfoUpdates.\n+      if (isReadingClassUnload() && isClassUnloadingAttempted())", "originalCommit": "d105f58370bd56d869b42fa2fd2390fb1dd16946", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg5ODE3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r408898174", "bodyText": "isReadingClassUnload() is added to avoid aborting the compilation due to the messages sent in processUnloadedClasses() such as MessageType::getUnloadedClassRanges. Inside processUnloadedClasses(), isClassUnloadingAttempted() returns true. And also if more messages are added in the future when isClassUnloadingAttempted() is true, isReadingClassUnload() should take care of it instead of filtering by specific message types.", "author": "a7ehuo", "createdAt": "2020-04-15T14:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyMzY4OA=="}], "type": "inlineReview"}, {"oid": "6c8a67b9f0dc9532981629cf680c308c6d4b659c", "url": "https://github.com/eclipse-openj9/openj9/commit/6c8a67b9f0dc9532981629cf680c308c6d4b659c", "message": "Guard unloading class events and compilations with mutex\n\nUse RWMutex to guard access to the client session data\nduring the compilation to prevent the race condition\nin accessing the caches related to the unloaded classes\nat the server.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-04-16T00:48:09Z", "type": "forcePushed"}, {"oid": "f3df2c83df10e145445f51f551a1c70004bc4d14", "url": "https://github.com/eclipse-openj9/openj9/commit/f3df2c83df10e145445f51f551a1c70004bc4d14", "message": "Guard unloading class events and compilations with RWMutex\n\nUse RWMutex to guard access to the client session data\nduring the compilation to prevent the race condition\nin accessing the caches related to the unloaded classes\nat the server.\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-04-16T01:22:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNzQ1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r409627455", "bodyText": "This error code is too generic. I am afraid that the client will not try to retry the compilation when it sees this code.", "author": "mpirvu", "createdAt": "2020-04-16T15:00:40Z", "path": "runtime/compiler/control/CompilationThread.cpp", "diffHunk": "@@ -11141,31 +11143,38 @@ TR::CompilationInfoPerThreadBase::processException(\n    catch (const JITServer::StreamFailure &e)\n       {\n       if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n-         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer StreamFailure: %s\", e.what());\n+         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d JITServer StreamFailure: %s\", getCompThreadId(), e.what());\n       _methodBeingCompiled->_compErrCode = compilationStreamFailure;\n       }\n    catch (const JITServer::StreamInterrupted &e)\n       {\n       if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n-         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer StreamInterrupted: %s\", e.what());\n+         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d JITServer StreamInterrupted: %s\", getCompThreadId(), e.what());\n       _methodBeingCompiled->_compErrCode = compilationStreamInterrupted;\n       }\n    catch (const JITServer::StreamVersionIncompatible &e)\n       {\n       if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n-         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer StreamVersionIncompatible: %s\", e.what());\n+         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d JITServer StreamVersionIncompatible: %s\", getCompThreadId(), e.what());\n       _methodBeingCompiled->_compErrCode = compilationStreamVersionIncompatible;\n       }\n    catch (const JITServer::StreamMessageTypeMismatch &e)\n       {\n       if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n-         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"JITServer StreamMessageTypeMismatch: %s\", e.what());\n+         TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d JITServer StreamMessageTypeMismatch: %s\", getCompThreadId(), e.what());\n       _methodBeingCompiled->_compErrCode = compilationStreamMessageTypeMismatch;\n       }\n    catch (const JITServer::ServerCompilationFailure &e)\n       {\n-      // no need to set error code here because error code is set\n+      // no need to set error code at JITClient because error code is set\n       // in remoteCompile when the compilation failed\n+      if (_methodBeingCompiled->isOutOfProcessCompReq())\n+         {\n+         if (TR::Options::getVerboseOption(TR_VerboseJITServer))\n+            TR_VerboseLog::writeLineLocked(TR_Vlog_JITServer, \"compThreadID=%d JITServer ServerCompilationFailure: %s\", getCompThreadId(), e.what());\n+\n+         _methodBeingCompiled->_compErrCode = compilationFailure;", "originalCommit": "f3df2c83df10e145445f51f551a1c70004bc4d14", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY0NDMxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r409644319", "bodyText": "When the exception ServerCompilationFailure happens, it could be because this change that throws the exception because of the unloaded classes, or it could be caused by other reasons. It's hard to decide on a specific error code to cover all cases when ServerCompilationFailure happens.\nI'm wondering if I should create a new exception instead of piggy-backing on ServerCompilationFailure. That would require more changes on the error handling path.", "author": "a7ehuo", "createdAt": "2020-04-16T15:23:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNzQ1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTg5NTkxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r409895912", "bodyText": "Changed the exception to TR::CompilationInterrupt so we don't need to change how ServerCompilationFailure works at the the server (which is currently not used).\nWhen TR::CompilationInterrupt exception is thrown, the existing path will set compErrCode= compilationInterrupted in CompilationInfoPerThreadBase::processException() and CompilationInfo::compilationEnd() will send compilationFailure message to the client by calling writeError().", "author": "a7ehuo", "createdAt": "2020-04-16T22:57:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTYyNzQ1NQ=="}], "type": "inlineReview"}, {"oid": "50c9777beaad2292f81514f129ba8095fd06d1d7", "url": "https://github.com/eclipse-openj9/openj9/commit/50c9777beaad2292f81514f129ba8095fd06d1d7", "message": "Guard unloading class events and compilations with RWMutex\n\nUse RWMutex to guard the access to the client session data\nduring the compilation to prevent the race condition\nin accessing the caches related to the unloaded classes\nat the server.`TR::CompilationInterrupt` exception is\nthrown at the server if one compilation thread tries to do\na read access to the client session cache while another\ncompilation thread just attempted a write access to the same\nclient session data. It results in a `compilationFailure`\nmessage along with statusCode=compilationInterrupted being\nsent to the client.\n\nImplements #9212\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-04-16T22:42:08Z", "type": "forcePushed"}, {"oid": "c6e7d0238608a317567e8d63d021d97932fc4de9", "url": "https://github.com/eclipse-openj9/openj9/commit/c6e7d0238608a317567e8d63d021d97932fc4de9", "message": "Guard unloading class events and compilations with RWMutex\n\nUse RWMutex to guard the access to the client session data\nduring the compilation to prevent the race condition\nin accessing the caches related to the unloaded classes\nat the server.`TR::CompilationInterrupt` exception is\nthrown at the server if one compilation thread tries to do\na read access to the client session cache while another\ncompilation thread just attempted a write access to the same\nclient session data. It results in a `compilationFailure`\nmessage along with statusCode=compilationInterrupted being\nsent to the client.\n\nImplements #9212\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-04-17T18:56:07Z", "type": "forcePushed"}, {"oid": "395aeff06c19137c13395203c36eaf5355a23b55", "url": "https://github.com/eclipse-openj9/openj9/commit/395aeff06c19137c13395203c36eaf5355a23b55", "message": "Guard unloading class events and compilations with RWMutex\n\nUse RWMutex to guard the access to the client session data\nduring the compilation to prevent the race condition\nin accessing the caches related to the unloaded classes\nat the server.`TR::CompilationInterrupt` exception is\nthrown at the server if one compilation thread tries to do\na read access to the client session cache while another\ncompilation thread just attempted a write access to the same\nclient session data. It results in a `compilationFailure`\nmessage along with statusCode=compilationInterrupted being\nsent to the client.\n\nImplements #9212\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-04-17T19:13:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MTU1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r410471557", "bodyText": "Any particular reason you needed a cast here?", "author": "mpirvu", "createdAt": "2020-04-17T21:10:07Z", "path": "runtime/compiler/runtime/JITClientSession.cpp", "diffHunk": "@@ -91,11 +101,16 @@ ClientSessionData::updateTimeOfLastAccess()\n void\n ClientSessionData::processUnloadedClasses(JITServer::ServerStream *stream, const std::vector<TR_OpaqueClassBlock*> &classes)\n    {\n+   const uint32_t numOfUnloadedClasses = (uint32_t)classes.size();", "originalCommit": "395aeff06c19137c13395203c36eaf5355a23b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5MTg1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r410491855", "bodyText": "No particular reason. Will remove the cast.", "author": "a7ehuo", "createdAt": "2020-04-17T22:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3MTU1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NjMzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r410476337", "bodyText": "I am thinking that we may need to hold the RWMonitor only for removes. The updates are handled at the client just with the CHTableMonitor, so the server should be able to do the same", "author": "mpirvu", "createdAt": "2020-04-17T21:22:24Z", "path": "runtime/compiler/env/JITServerPersistentCHTable.cpp", "diffHunk": "@@ -74,10 +74,19 @@ void\n JITServerPersistentCHTable::doUpdate(TR_J9VMBase *fej9, const std::string &removeStr, const std::string &modifyStr)\n    {\n    TR::ClassTableCriticalSection doUpdate(fej9);\n+   ClientSessionData *clientData = TR::compInfoPT->getClientData();\n    if (!modifyStr.empty())\n+      {\n+      clientData->writeAcquireClassUnloadRWMutex();", "originalCommit": "395aeff06c19137c13395203c36eaf5355a23b55", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwOTI3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r410509273", "bodyText": "No two threads could be accessing JITServerPersistentCHTable::doUpdate at the same time since it's guarded by TR::ClassTableCriticalSection. Taking a closer look at the code, I'm not sure adding ClassUnloadRWMutex in JITServerPersistentCHTable::doUpdate  could help resolve the crash I saw in JITServerPersistentCHTable::commitRemoves [1] which only accesses ClientSessionData::_chTableClassMap which is not touched by class unloading. The crash could be caused by the ptr[i] being out of bounds. Unfortunately I didn't dig deeper into the backtrace since I thought it'd be related to the ClientSessionData caches.\nMeanwhile, the only other place that accesses the ClientSessionData::_chTableClassMap is ClientSessionData::clearCaches() which is not guarded with anything. I wonder if  mutual exclusion should be applied there when the _chTableClassMap is cleared. However I don't see it'd be related to the crash I ran into.\n[1]\nhttps://github.com/eclipse/openj9/blob/aa5fc4d99fdd9e0936e53a359974ae6400c336f0/runtime/compiler/env/JITServerPersistentCHTable.cpp#L99", "author": "a7ehuo", "createdAt": "2020-04-17T23:08:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NjMzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU2MDY5Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9243#discussion_r410560692", "bodyText": "ClientSessionData::clearCaches()  is only called when no other thread exists:\n         if (clientSession->getNumActiveThreads() <= 0 && // Wait for active threads to quiesce\n            &entry == clientSession->getOOSequenceEntryList() && // Allow only the smallest seqNo which is the head\n            !getWaitToBeNotified()) // Avoid a cohort of threads clearing the caches\n            {\n            clientSession->clearCaches();", "author": "mpirvu", "createdAt": "2020-04-18T02:20:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NjMzNw=="}], "type": "inlineReview"}, {"oid": "e2350f7e136ec7b1c2bbc7705cc5c02293bae35a", "url": "https://github.com/eclipse-openj9/openj9/commit/e2350f7e136ec7b1c2bbc7705cc5c02293bae35a", "message": "Guard unloading class events and compilations with RWMutex\n\nUse RWMutex to guard the access to the client session data\nduring the compilation to prevent the race condition\nin accessing the caches related to the unloaded classes\nat the server.`TR::CompilationInterrupt` exception is\nthrown at the server if one compilation thread tries to do\na read access to the client session cache while another\ncompilation thread just attempted a write access to the same\nclient session data. It results in a `compilationFailure`\nmessage along with statusCode=compilationInterrupted being\nsent to the client.\n\nImplements #9212\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-04-20T02:29:37Z", "type": "forcePushed"}, {"oid": "ca540bf7cb1ba3174aa150338af6429b1e86fee2", "url": "https://github.com/eclipse-openj9/openj9/commit/ca540bf7cb1ba3174aa150338af6429b1e86fee2", "message": "Guard unloading class events and compilations with RWMutex\n\nUse RWMutex to guard the access to the client session data\nduring the compilation to prevent the race condition\nin accessing the caches related to the unloaded classes\nat the server.`TR::CompilationInterrupt` exception is\nthrown at the server if one compilation thread tries to do\na read access to the client session cache while another\ncompilation thread just attempted a write access to the same\nclient session data. It results in a `compilationFailure`\nmessage along with statusCode=compilationInterrupted being\nsent to the client.\n\nImplements #9212\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-04-20T17:29:29Z", "type": "commit"}, {"oid": "ca540bf7cb1ba3174aa150338af6429b1e86fee2", "url": "https://github.com/eclipse-openj9/openj9/commit/ca540bf7cb1ba3174aa150338af6429b1e86fee2", "message": "Guard unloading class events and compilations with RWMutex\n\nUse RWMutex to guard the access to the client session data\nduring the compilation to prevent the race condition\nin accessing the caches related to the unloaded classes\nat the server.`TR::CompilationInterrupt` exception is\nthrown at the server if one compilation thread tries to do\na read access to the client session cache while another\ncompilation thread just attempted a write access to the same\nclient session data. It results in a `compilationFailure`\nmessage along with statusCode=compilationInterrupted being\nsent to the client.\n\nImplements #9212\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-04-20T17:29:29Z", "type": "forcePushed"}]}