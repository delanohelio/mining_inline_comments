{"pr_number": 9378, "pr_title": "Set extraTestLabels blank if TEST_NODE is set", "pr_createdAt": "2020-04-28T00:54:59Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9378", "timeline": [{"oid": "e1300f1ff510933a3b3eaf1ef69352ec9fea57e3", "url": "https://github.com/eclipse-openj9/openj9/commit/e1300f1ff510933a3b3eaf1ef69352ec9fea57e3", "message": "Set extraTestLabels blank if TEST_NODE is set\n\n- Null check so Test build doesn't fall over.\n\nRelated #9107 #8980 #8659\n[skip ci]\n\nSigned-off-by: Adam Brousseau <adam.brousseau88@gmail.com>", "committedDate": "2020-04-28T00:50:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MzgwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9378#discussion_r429373802", "bodyText": "// Only add extra test labels if the user has not specified a specific TEST_NODE\n\nThis comment would not seem to apply anymore then correct?  Even if that is the case, if a user wanted to target a specific TEST_NODE (machine) why would added extra test labels matter?", "author": "jdekonin", "createdAt": "2020-05-22T17:37:13Z", "path": "buildenv/jenkins/common/variables-functions.groovy", "diffHunk": "@@ -676,6 +676,10 @@ def set_test_misc() {\n         TESTS.each { id, target ->\n             target['extraTestLabels'] = buildspec.getVectorField(\"extra_test_labels\", target).join('&&') ?: ''\n         }\n+    } else {\n+        TESTS.each { id, target ->\n+            target['extraTestLabels'] = ''\n+        }\n     }", "originalCommit": "e1300f1ff510933a3b3eaf1ef69352ec9fea57e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNDk5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9378#discussion_r431214995", "bodyText": "Comment still applies. If they request a specific node, we don't want to be adding on extra labels. This could cause problems if the extra labels don't match the node they've requested (which is probably an edge case).", "author": "AdamBrousseau", "createdAt": "2020-05-27T15:07:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3MzgwMg=="}], "type": "inlineReview"}]}