{"pr_number": 10445, "pr_title": "Move argument memory size parsing to j9argscan", "pr_createdAt": "2020-08-24T22:54:46Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10445", "timeline": [{"oid": "956dbc374b99f4e427f35dfed2632dd810c684e9", "url": "https://github.com/eclipse-openj9/openj9/commit/956dbc374b99f4e427f35dfed2632dd810c684e9", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-08-24T22:55:10Z", "type": "forcePushed"}, {"oid": "7b5d4560ecae81bea1872583ca3eeddfa12ed66f", "url": "https://github.com/eclipse-openj9/openj9/commit/7b5d4560ecae81bea1872583ca3eeddfa12ed66f", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-08-24T22:58:13Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2Mjk4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476562983", "bodyText": "type of result should be uintptr_t (UDATA equivalent)", "author": "dmitripivkine", "createdAt": "2020-08-25T16:03:32Z", "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1355,58 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_udata_memory_size(cursor, value);", "originalCommit": "41b250ce26566e197042983d34130d6db9cd8f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyOTQ2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476629466", "bodyText": "Thanks for catching. Opting for UDATA instead here.\nSee: AlenBadel@ccfc1d2", "author": "AlenBadel", "createdAt": "2020-08-25T17:46:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2Mjk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDAwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476564000", "bodyText": "this helper should be updated to handle T and t as well", "author": "dmitripivkine", "createdAt": "2020-08-25T16:05:04Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,97 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif(0 != rc) {\n+\t\treturn rc;\n+\t}\n+", "originalCommit": "41b250ce26566e197042983d34130d6db9cd8f7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTAwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476661006", "bodyText": "Right U64 should be able to support T/t as well.\nSee: AlenBadel@0de7822", "author": "AlenBadel", "createdAt": "2020-08-25T18:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2NDAwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NjgxMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476576810", "bodyText": "Would you please change code to have single return function:\n\nremove return 0 == result\nadd explicit check for 2 == result\nuse return 0 == result; at the end", "author": "dmitripivkine", "createdAt": "2020-08-25T16:24:23Z", "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1355,58 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n+\t/* Report Success */\n+\tif(0 == result) {\n+\t\treturn true;\n \t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn false;", "originalCommit": "028385db85dd05db7cebad0056f373aed8aeaaf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTE2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476661161", "bodyText": "Done. See: AlenBadel@0de7822", "author": "AlenBadel", "createdAt": "2020-08-25T18:42:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NjgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzU3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476577570", "bodyText": "same as above: would you please make this single return function?", "author": "dmitripivkine", "createdAt": "2020-08-25T16:25:29Z", "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1355,58 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n+\t/* Report Success */\n+\tif(0 == result) {\n+\t\treturn true;\n \t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn false;\n }\n \n /**\n- * Wrapper for scan_u64_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_u64_helper, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_u64_memory_size_helper(J9JavaVM *javaVM, char **cursor, U_64 *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_u64_memory_size(cursor, value);\n \n-\tif(!scan_u64_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n+\t/* Report Success */\n+\tif (0 == result)\n+\t\treturn true;\n \n-\tif(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((U_64)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((U_64)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((U_64)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn false;", "originalCommit": "028385db85dd05db7cebad0056f373aed8aeaaf2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTI3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476661279", "bodyText": "See: AlenBadel@0de7822", "author": "AlenBadel", "createdAt": "2020-08-25T18:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3NzU3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4MjEzNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476682136", "bodyText": "please put constant first", "author": "dmitripivkine", "createdAt": "2020-08-25T19:20:16Z", "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else if (2 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn result == 0;", "originalCommit": "644d928c0cfd7557b0a2b6627e644d3948abacfe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4MjMwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476682308", "bodyText": "please put constant first", "author": "dmitripivkine", "createdAt": "2020-08-25T19:20:36Z", "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else if (2 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn result == 0;\n }\n \n /**\n- * Wrapper for scan_u64_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_u64_helper, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_u64_memory_size_helper(J9JavaVM *javaVM, char **cursor, U_64 *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_u64_memory_size(cursor, value);\n \n-\tif(!scan_u64_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else if (2 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n \n-\tif(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((U_64)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((U_64)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((U_64)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\treturn true;\n+\treturn result == 0;", "originalCommit": "644d928c0cfd7557b0a2b6627e644d3948abacfe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjAyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476686023", "bodyText": "As far as you move functions it is make sense to replace return codes 1 and 2 to defined values at the same time", "author": "dmitripivkine", "createdAt": "2020-08-25T19:27:18Z", "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {", "originalCommit": "f22d71783399b2a2174d852957173d95b2b149c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMzOTA2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477339069", "bodyText": "There are broader changes to ensure that these functions use defined values. A large portion of the j9argscan methods already pass OPTION_MALFORMED/OPTION_OVERFLOW, however there are a notable few that return hard-coded values. I need to create another commit to address this, and it will need to include:\n\nReplace the returned values of these methods that return positive integers with returning OPTION_MALFORMED/OPTION_OVERFLOW, or any other respective option error defined value.\nChange the caller of each of these to expect the defined values.\n\nI suggest merging these changes independently so we're able to clean-up the remainder of j9argscan as well.", "author": "AlenBadel", "createdAt": "2020-08-26T14:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM0OTUzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477349532", "bodyText": "It is ok for me. Would you please create an issue to reflect required changes (if it has not been created before) and mention it here?", "author": "dmitripivkine", "createdAt": "2020-08-26T14:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjAyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQxNDgxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477414814", "bodyText": "See #10461", "author": "AlenBadel", "createdAt": "2020-08-26T16:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjAyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4NjcyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476686723", "bodyText": "please put a space between if and bracket - here and everywhere", "author": "dmitripivkine", "createdAt": "2020-08-25T19:28:43Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif(0 != rc) {", "originalCommit": "f22d71783399b2a2174d852957173d95b2b149c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4ODQ3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r476688476", "bodyText": "please leave one empty line at the end of file", "author": "dmitripivkine", "createdAt": "2020-08-25T19:32:01Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -404,6 +502,3 @@ void scan_failed_unsupported(J9PortLibrary * portLibrary, char* module, char *sc\n \tPORT_ACCESS_FROM_PORT(portLibrary);\n \tj9tty_printf(PORTLIB, \"<%s: system configuration does not support option --> '%s'>\\n\", module, scan_start);\n }\n-", "originalCommit": "f22d71783399b2a2174d852957173d95b2b149c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NzQxOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477457419", "bodyText": "please double check that EOF does not stay at the same line as a }. It might be a reason for fantom compilation error on some compilers", "author": "dmitripivkine", "createdAt": "2020-08-26T17:10:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY4ODQ3Ng=="}], "type": "inlineReview"}, {"oid": "1707149cde281821202101158513bd7bbfa20459", "url": "https://github.com/eclipse-openj9/openj9/commit/1707149cde281821202101158513bd7bbfa20459", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-08-26T14:20:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzc2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477433767", "bodyText": "Would you please change UDATA to uintptr_t for consistency?", "author": "dmitripivkine", "createdAt": "2020-08-26T16:32:33Z", "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTgzOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449839", "bodyText": "UDATA is defined to be uintptr_t. This file opts to use UDATA over uintptr_t.\nAs an example of many, see: https://github.com/eclipse/openj9/blob/1707149cde281821202101158513bd7bbfa20459/runtime/gc_modron_startup/mmparse.cpp#L1261-L1278", "author": "AlenBadel", "createdAt": "2020-08-26T16:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NDcwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477454706", "bodyText": "I know. Historically we used UDATA but with introduction of OMR prefer to use uintptr_t. We did not replace definitions across OpenJ9 globally (only for code migrated to OMR), however trying to use new definitions in changes and be consistent over function (do not use both even essentially they means the same)", "author": "dmitripivkine", "createdAt": "2020-08-26T17:05:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzc2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1ODcwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477458706", "bodyText": "Thanks for the explanation. I will make that change. See: 0bb6086", "author": "AlenBadel", "createdAt": "2020-08-26T17:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzMzc2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNDE3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477434170", "bodyText": "The type of result should be uintptr_t as far as this is return code.", "author": "dmitripivkine", "createdAt": "2020-08-26T16:33:11Z", "path": "runtime/gc_modron_startup/mmparse.cpp", "diffHunk": "@@ -1355,95 +1356,49 @@ scan_hex_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argNa\n }\n \n /**\n- * Wrapper for scan_udata_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_udata_memory_size, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_udata_memory_size_helper(J9JavaVM *javaVM, char **cursor, UDATA *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tUDATA result = scan_udata_memory_size(cursor, value);\n \n-\tif(!scan_udata_helper(javaVM, cursor, value, argName)) {\n-\t\treturn false;\n-\t}\n-\t\n-\tif(try_scan(cursor, \"T\") || try_scan(cursor, \"t\")) {\n-\t\tif (0 != *value) {\n-#if defined(J9VM_ENV_DATA64)\n-\t\t\tif (*value <= (((UDATA)-1) >> 40)) {\n-\t\t\t\t*value <<= 40;\n-\t\t\t} else\n-#endif /* defined(J9VM_ENV_DATA64) */\n-\t\t\t{\n-\t\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t} else if(try_scan(cursor, \"G\") || try_scan(cursor, \"g\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 30)) {\n-\t\t\t*value <<= 30;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"M\") || try_scan(cursor, \"m\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 20)) {\n-\t\t\t*value <<= 20;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n-\t} else if(try_scan(cursor, \"K\") || try_scan(cursor, \"k\")) {\n-\t\tif (*value <= (((UDATA)-1) >> 10)) {\n-\t\t\t*value <<= 10;\n-\t\t} else {\n-\t\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n-\t\t\treturn false;\n-\t\t}\n+\t/* Report Errors */\n+\tif (1 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_MUST_BE_NUMBER, argName);\n+\t} else if (2 == result) {\n+\t\tj9nls_printf(PORTLIB, J9NLS_ERROR, J9NLS_GC_OPTIONS_VALUE_OVERFLOWED, argName);\n \t}\n-\treturn true;\n+\n+\treturn 0 == result;\n }\n \n /**\n- * Wrapper for scan_u64_helper, that provides parsing for memory sizes.\n- * User should be able to specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or\n- * in bytes (no suffix)\n+ * Wrapper for scan_u64_helper, that provides readable error messages.\n+ * @param cursor address of the pointer to the string to parse for the udata.\n+ * @param value address of the storage for the udata to be read.\n+ * @param argName string containing the argument name to be used in error reporting.\n  * @return true if parsing was successful, false otherwise.\n  */\n bool\n scan_u64_memory_size_helper(J9JavaVM *javaVM, char **cursor, U_64 *value, const char *argName)\n {\n \tPORT_ACCESS_FROM_JAVAVM(javaVM);\n+\tU_64 result = scan_u64_memory_size(cursor, value);", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjA5MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477436090", "bodyText": "please add T to the comment", "author": "dmitripivkine", "createdAt": "2020-08-26T16:36:27Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MjIxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477452211", "bodyText": "Thanks. See AlenBadel@f45cc3f", "author": "AlenBadel", "createdAt": "2020-08-26T17:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNjA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzU4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477437587", "bodyText": "please add space between if and bracket", "author": "dmitripivkine", "createdAt": "2020-08-26T16:38:17Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzc5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477437799", "bodyText": "please add space between if and bracket", "author": "dmitripivkine", "createdAt": "2020-08-26T16:38:36Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzNzk3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477437972", "bodyText": "please add space between if and bracket", "author": "dmitripivkine", "createdAt": "2020-08-26T16:38:52Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQzODA3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477438074", "bodyText": "please add space between if and bracket", "author": "dmitripivkine", "createdAt": "2020-08-26T16:39:04Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0NjQ5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477446493", "bodyText": "This check is not required. In scan_udata_memory_size() it is necessary to handle exceptional case 0T which is technically valid even on 32 but platform for uintptr_t size. However we have uint64_t here so there is no exception necessary.", "author": "dmitripivkine", "createdAt": "2020-08-26T16:52:36Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyOTk0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477529948", "bodyText": "Makes sense, thanks for bringing that up.\nSee: 1707149", "author": "AlenBadel", "createdAt": "2020-08-26T19:12:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0NjQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0ODkyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477448927", "bodyText": "Would you please change this function to have single return rc; ? I believe it would be cleaner", "author": "dmitripivkine", "createdAt": "2020-08-26T16:56:02Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODM1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477528357", "bodyText": "I'm impartial to these changes, I've made them anyway.\nSee: f2ebdd6", "author": "AlenBadel", "createdAt": "2020-08-26T19:09:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0ODkyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTA2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449064", "bodyText": "Would you please change this function to have single return rc; ? I believe it would be cleaner", "author": "dmitripivkine", "createdAt": "2020-08-26T16:56:15Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\t\t\t{\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\n+\treturn 0; /* Success */", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODQyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477528420", "bodyText": "See: f2ebdd6", "author": "AlenBadel", "createdAt": "2020-08-26T19:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTI2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449263", "bodyText": "please add space between if and bracket", "author": "dmitripivkine", "createdAt": "2020-08-26T16:56:35Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTM0OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449349", "bodyText": "please add space between if and bracket", "author": "dmitripivkine", "createdAt": "2020-08-26T16:56:45Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\t\t\t{\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTQ3Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449476", "bodyText": "please add space between if and bracket", "author": "dmitripivkine", "createdAt": "2020-08-26T16:56:55Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\t\t\t{\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ0OTU1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477449550", "bodyText": "please add space between if and bracket", "author": "dmitripivkine", "createdAt": "2020-08-26T16:57:01Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else\n+#endif /* defined(J9VM_ENV_DATA64) */\n+\t\t\t{\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if(try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((UDATA)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if(try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MDY4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477450683", "bodyText": "I believe would be better to replace U64 to uint64_t everywhere in this function for consistency", "author": "dmitripivkine", "createdAt": "2020-08-26T16:58:54Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in GiBs, MiBs, or KiBs (with G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif(try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {", "originalCommit": "1707149cde281821202101158513bd7bbfa20459", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2NzY4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477467688", "bodyText": "Per our previous discussion about UDATA. See Change: 486dd75", "author": "AlenBadel", "createdAt": "2020-08-26T17:27:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1MDY4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ1NTUwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477455501", "bodyText": "I believe would be better to replace UDATA to uintptr_t everywhere in this function for consistency", "author": "dmitripivkine", "createdAt": "2020-08-26T17:07:10Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,104 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif (try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+\t\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t\t*result <<= 40;\n+\t\t\t} else {\n+\t\t\t\treturn 2;\n+\t\t\t}\n+\t\t}\n+\t} else if (try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\treturn 2;\n+\t\t}\n+\t}\n+\treturn 0; /* Success */\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\t/* Scan Memory String, and check for overflow */\n+\tif (try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (0 != *result) {\n+#if defined(J9VM_ENV_DATA64)\n+\t\t\tif (*result <= (((UDATA)-1) >> 40)) {", "originalCommit": "f45cc3f882c9f2f62b58c05119d54cfc759d8fc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "66c5e0d5a3924fcb19f33365ac319ab62a0c0b84", "url": "https://github.com/eclipse-openj9/openj9/commit/66c5e0d5a3924fcb19f33365ac319ab62a0c0b84", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-08-26T19:13:14Z", "type": "forcePushed"}, {"oid": "3d41fa07e541e0d4809e945fceb50adfcca7d43d", "url": "https://github.com/eclipse-openj9/openj9/commit/3d41fa07e541e0d4809e945fceb50adfcca7d43d", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-08-26T19:16:31Z", "type": "forcePushed"}, {"oid": "cfcffe231766e6b8302fc56e7c00d592f97dbea0", "url": "https://github.com/eclipse-openj9/openj9/commit/cfcffe231766e6b8302fc56e7c00d592f97dbea0", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-08-26T19:18:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3OTk0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477579947", "bodyText": "you can eliminate this return too... just use if (0 == rc) { to wrap if statement below", "author": "dmitripivkine", "createdAt": "2020-08-26T20:47:52Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,102 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;", "originalCommit": "cfcffe231766e6b8302fc56e7c00d592f97dbea0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU4MDA0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10445#discussion_r477580047", "bodyText": "you can eliminate this return too... just use if (0 == rc) { to wrap if statement below", "author": "dmitripivkine", "createdAt": "2020-08-26T20:48:05Z", "path": "runtime/util_core/j9argscan.c", "diffHunk": "@@ -385,6 +385,102 @@ scan_hex_caseflag_u64(char **scan_start, BOOLEAN uppercaseAllowed, uint64_t* res\n \treturn bits;\n }\n \n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_u64_memory_size(char **scan_start, uint64_t* result)\n+{\n+\tuintptr_t rc = scan_u64(scan_start, result);\n+\n+\t/* Report any errors from scan */\n+\tif (0 != rc) {\n+\t\treturn rc;\n+\t}\n+\n+\tif (try_scan(scan_start, \"T\") || try_scan(scan_start, \"t\")) {\n+\t\tif (*result <= (((U_64)-1) >> 40)) {\n+\t\t\t*result <<= 40;\n+\t\t} else {\n+\t\t\trc = 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"G\") || try_scan(scan_start, \"g\")) {\n+\t\tif (*result <= (((U_64)-1) >> 30)) {\n+\t\t\t*result <<= 30;\n+\t\t} else {\n+\t\t\trc = 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"M\") || try_scan(scan_start, \"m\")) {\n+\t\tif (*result <= (((U_64)-1) >> 20)) {\n+\t\t\t*result <<= 20;\n+\t\t} else {\n+\t\t\trc = 2;\n+\t\t}\n+\t} else if (try_scan(scan_start, \"K\") || try_scan(scan_start, \"k\")) {\n+\t\tif (*result <= (((U_64)-1) >> 10)) {\n+\t\t\t*result <<= 10;\n+\t\t} else {\n+\t\t\trc = 2;\n+\t\t}\n+\t}\n+\treturn rc;\n+}\n+\n+/**\n+ * Scan the next unsigned number off of the argument string, and parses for memory sizes.\n+ * Specify the size in TiBs, GiBs, MiBs, or KiBs (with T,t,G,g,M,m,K,k suffixes) or in bytes (no suffix).\n+ * @param[in] scan_start The string to be scanned\n+ * @param[out] result The result\n+ * @return returns 0 on success, 1 if the argument string is not a number, or 2 if overflow occurs.\n+ */\n+uintptr_t\n+scan_udata_memory_size(char **scan_start, uintptr_t* result)\n+{\n+\tuintptr_t rc = scan_udata(scan_start, result);\n+\n+\t/* Report any Errors from Scan */\n+\tif (0 != rc) {\n+\t\treturn rc;", "originalCommit": "cfcffe231766e6b8302fc56e7c00d592f97dbea0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fd15265dfddce039fa670d1bd1da10189572cad5", "url": "https://github.com/eclipse-openj9/openj9/commit/fd15265dfddce039fa670d1bd1da10189572cad5", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-08-27T14:14:52Z", "type": "commit"}, {"oid": "fd15265dfddce039fa670d1bd1da10189572cad5", "url": "https://github.com/eclipse-openj9/openj9/commit/fd15265dfddce039fa670d1bd1da10189572cad5", "message": "Move argument memory size parsing into j9argscan\n\nPreviously, parsing methods were only accessible within the GC. Moving these methods into j9argscan enables them to be used generally by VM, and JIT.\n\nSigned-off-by: AlenBadel <Alen.Badel@ibm.com>", "committedDate": "2020-08-27T14:14:52Z", "type": "forcePushed"}]}