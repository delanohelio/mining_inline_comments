{"pr_number": 8746, "pr_title": "Fix computation of flush bounds", "pr_createdAt": "2020-03-04T17:33:47Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8746", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MDcwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8746#discussion_r387840702", "bodyText": "Please put the whiles on the brace line.", "author": "gacholio", "createdAt": "2020-03-04T18:06:52Z", "path": "runtime/jcl/common/sun_misc_Unsafe.cpp", "diffHunk": "@@ -844,58 +844,65 @@ Java_jdk_internal_misc_Unsafe_objectFieldOffset1(JNIEnv *env, jobject receiver,\n \t\t}\n \t}\n \tvmFuncs->internalExitVMToJNI(currentThread);\n-\t\n+\n \treturn offset;\n }\n \n /**\n  * Writes modified memory in an address range from cache to main memory.\n  * Uses memory barriers before and after writeback to ensure ordering.\n- * \n+ *\n  * On x86, the writeback is done using the CLWB instruction if available\n  * for performance, falling back to CLFLUSHOPT then CLFLUSH otherwise.\n- * \n+ *\n  * @param addr address of block to write back to memory\n  * @param len length of block being written\n  */\n void JNICALL\n Java_jdk_internal_misc_Unsafe_writebackMemory(JNIEnv *env, jobject receiver, jlong addr, jlong len)\n {\n /* Exclude Windows since it does not support GCC assembly syntax,\n- * and Linux is the only target actually specified in JEP 352\n+ * and Linux is the only target actually specified in JEP 352.\n  */\n-#if ((defined(J9X86) || defined(J9HAMMER)) && !defined(WIN32))\n-\tJ9VMThread *currentThread = (J9VMThread*)env;\n+#if (defined(J9X86) || defined(J9HAMMER)) && !defined(WIN32)\n+\tJ9VMThread *currentThread = (J9VMThread *)env;\n \tJ9JavaVM *vm = currentThread->javaVM;\n \tuintptr_t cacheLineSize = vm->dCacheLineSize;\n \n \tif (cacheLineSize > 0) {\n-\t\tU_8 *endAddr = (*(U_8 **) &addr) + (*(uintptr_t *) &len) - 1;\n-\t\tU_8 *ptr = (U_8 *)((*(uintptr_t *) &addr) & ~(cacheLineSize - 1));\n+\t\tuintptr_t const uaddr = (uintptr_t)(U_64)addr;\n+\t\tuintptr_t const ulen = (uintptr_t)(U_64)len;\n+\t\tuintptr_t const firstCacheLine = uaddr & ~(cacheLineSize - 1);\n+\t\tuintptr_t const lastCacheLine = (uaddr + ((0 == ulen) ? 0 : (ulen - 1))) & ~(cacheLineSize - 1);\n+\n+\t\t/* adjust for pre-increment in the loops below */\n+\t\tuintptr_t cacheLine = firstCacheLine - cacheLineSize;\n \n \t\tVM_AtomicSupport::readWriteBarrier();\n-\t\tswitch(vm->cpuCacheWritebackCapabilities) {\n-\t\t\tcase J9PORT_X86_FEATURE_CLWB:\n-\t\t\t\tfor (; ptr < endAddr; ptr += cacheLineSize) {\n-\t\t\t\t\tasm volatile(\"clwb %0\" : \"+m\" (*ptr));\n-\t\t\t\t}\n-\t\t\t\t/* writeback any partial cache line at the end */\n-\t\t\t\tasm volatile(\"clwb %0\" : \"+m\" (*endAddr));\n-\t\t\t\tbreak;\n-\t\t\tcase J9PORT_X86_FEATURE_CLFLUSHOPT:\n-\t\t\t\tfor (; ptr < endAddr; ptr += cacheLineSize) {\n-\t\t\t\t\tasm volatile(\"clflushopt %0\" : \"+m\" (*ptr));\n-\t\t\t\t}\n-\t\t\t\tasm volatile(\"clflushopt %0\" : \"+m\" (*endAddr));\n-\t\t\t\tbreak;\n-\t\t\tcase J9PORT_X86_FEATURE_CLFSH:\n-\t\t\t\tfor (; ptr < endAddr; ptr += cacheLineSize) {\n-\t\t\t\t\tasm volatile(\"clflush %0\" : \"+m\" (*ptr));\n-\t\t\t\t}\n-\t\t\t\tasm volatile(\"clflush %0\" : \"+m\" (*endAddr));\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tgoto error;\n+\t\tswitch (vm->cpuCacheWritebackCapabilities) {\n+\t\tcase J9PORT_X86_FEATURE_CLWB:\n+\t\t\tdo {\n+\t\t\t\tcacheLine += cacheLineSize;\n+\t\t\t\tasm volatile(\"clwb %0\" : \"+m\" (*(U_8 *)cacheLine));\n+\t\t\t}", "originalCommit": "8bef0d914c3bfd3fa9d4177ef589ef468ddd6b5f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg3Mjg5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8746#discussion_r387872893", "bodyText": "Fixed.", "author": "keithc-ca", "createdAt": "2020-03-04T19:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MDcwMg=="}], "type": "inlineReview"}, {"oid": "1c37996e0ddd02a5f82e1c9ac9b8c563684a0a02", "url": "https://github.com/eclipse-openj9/openj9/commit/1c37996e0ddd02a5f82e1c9ac9b8c563684a0a02", "message": "Fix computation of flush bounds\n\n* don't assume pointers are 64-bits or platform is little-endian\n* more carefully compute first and last cache lines to flush\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-03-04T19:05:24Z", "type": "commit"}, {"oid": "1c37996e0ddd02a5f82e1c9ac9b8c563684a0a02", "url": "https://github.com/eclipse-openj9/openj9/commit/1c37996e0ddd02a5f82e1c9ac9b8c563684a0a02", "message": "Fix computation of flush bounds\n\n* don't assume pointers are 64-bits or platform is little-endian\n* more carefully compute first and last cache lines to flush\n\nSigned-off-by: Keith W. Campbell <keithc@ca.ibm.com>", "committedDate": "2020-03-04T19:05:24Z", "type": "forcePushed"}]}