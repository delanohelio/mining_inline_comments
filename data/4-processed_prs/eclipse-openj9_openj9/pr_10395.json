{"pr_number": 10395, "pr_title": "RuntimeAssumptions: fix NULL used in arithmetic", "pr_createdAt": "2020-08-15T12:40:14Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10395", "timeline": [{"oid": "156e26459cc9b7ea45f35f1e18f9a3b356a669ad", "url": "https://github.com/eclipse-openj9/openj9/commit/156e26459cc9b7ea45f35f1e18f9a3b356a669ad", "message": "RuntimeAssumptions: fix NULL used in arithmetic\n\nISO C11 section 7.20.1.4 only guarantees conversions to and from void pointer\n\nSigned-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>", "committedDate": "2020-08-17T15:31:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MjUyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471562521", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               TR_ASSERT_FATAL((void*)_key != NULL, \"Attempt to reclaim an already freed _key\");\n          \n          \n            \n               TR_ASSERT_FATAL(reinterpret_cast<void *>(_key) != NULL, \"Attempt to reclaim an already freed _key\");", "author": "dsouzai", "createdAt": "2020-08-17T15:34:55Z", "path": "runtime/compiler/runtime/RuntimeAssumptions.cpp", "diffHunk": "@@ -85,10 +85,10 @@ TR_PatchNOPedGuardSiteOnClassPreInitialize::hashCode(char *sig, uint32_t sigLen)\n void\n TR_PatchNOPedGuardSiteOnClassPreInitialize::reclaim()\n    {\n-   TR_ASSERT_FATAL(_key != NULL, \"Attempt to reclaim an already freed _key\");\n+   TR_ASSERT_FATAL((void*)_key != NULL, \"Attempt to reclaim an already freed _key\");", "originalCommit": "156e26459cc9b7ea45f35f1e18f9a3b356a669ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NDE1NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471574154", "bodyText": "I suggest that neither of those changes are appropriate. The field _key is declared with type uintptr_t (a scalar type): 0 is the right value for a freed key.\nTR_ASSERT_FATAL(0 != _key, \"Attempt to reclaim an already freed _key\");", "author": "keithc-ca", "createdAt": "2020-08-17T15:51:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MjUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU4OTY5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471589695", "bodyText": "The ISO C++ standard defers to the ISO C standard, which gives no guarantees on the behavior of (u)intptr_t except that pointers to void may be converted to and from it. It is not guaranteed that all-zero pointers retain the same value when converted to (u)intptr_t. Furthermore, it is not guaranteed that null pointers are represented as all zeroes in the first place. However, as a practical matter, current implementations directly copy the byte representation as an integer, allow integer operations on them, represent null pointers as all zeroes, and are unlikely to change any of those behaviors or make optimization decisions based on them.\nIn conclusion, the cast is more correct, but any of these three alternatives are likely to be equivalent in practice.", "author": "Hello71", "createdAt": "2020-08-17T16:16:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MjUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY2Mzk2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471663969", "bodyText": "If (0 != (uintptr_t)NULL) then we'll have lots of broken code.\nI still favour 0, for consistency with other places that use uintptr_t.\n_key is not a pointer, so none of the properties of pointers are relevant.", "author": "keithc-ca", "createdAt": "2020-08-17T17:58:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MjUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MDcwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471750702", "bodyText": "yeah, I think we can ignore (0 != (uintptr_t)NULL) for now. it would break a huge amount of existing code in other projects too, and AFAIK doesn't have any good optimization rationale. @dsouzai are you OK with 0 != _key here?", "author": "Hello71", "createdAt": "2020-08-17T20:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MjUyMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1MTQ1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471751455", "bodyText": "Yeah no issues.", "author": "dsouzai", "createdAt": "2020-08-17T20:17:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MjUyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MzAwMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471563002", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               _key = (uintptr_t)(void*)0;\n          \n          \n            \n               _key = 0;\n          \n      \n    \n    \n  \n\n_key is of type uintptr_t so a 0 is fine.", "author": "dsouzai", "createdAt": "2020-08-17T15:35:34Z", "path": "runtime/compiler/runtime/RuntimeAssumptions.cpp", "diffHunk": "@@ -85,10 +85,10 @@ TR_PatchNOPedGuardSiteOnClassPreInitialize::hashCode(char *sig, uint32_t sigLen)\n void\n TR_PatchNOPedGuardSiteOnClassPreInitialize::reclaim()\n    {\n-   TR_ASSERT_FATAL(_key != NULL, \"Attempt to reclaim an already freed _key\");\n+   TR_ASSERT_FATAL((void*)_key != NULL, \"Attempt to reclaim an already freed _key\");\n \n    jitPersistentFree((void*)_key);\n-   _key = 0;\n+   _key = (uintptr_t)(void*)0;", "originalCommit": "156e26459cc9b7ea45f35f1e18f9a3b356a669ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MTExNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471591116", "bodyText": "See my other comment, but in brief, I believe this is not strictly correct according to the standard, similar to void *p; memset(&p, 0, sizeof(p)); being an incorrect way to initialize a null pointer to void.", "author": "Hello71", "createdAt": "2020-08-17T16:19:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU5MTM2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10395#discussion_r471591363", "bodyText": "But, again, as a practical matter, it's unlikely to make a difference.", "author": "Hello71", "createdAt": "2020-08-17T16:19:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU2MzAwMg=="}], "type": "inlineReview"}, {"oid": "89ef4ff3c474b1f7e6690abf29808e3e28dcf95d", "url": "https://github.com/eclipse-openj9/openj9/commit/89ef4ff3c474b1f7e6690abf29808e3e28dcf95d", "message": "RuntimeAssumptions: fix NULL arithmetic warning\n\nSigned-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>", "committedDate": "2020-08-17T20:31:53Z", "type": "commit"}, {"oid": "89ef4ff3c474b1f7e6690abf29808e3e28dcf95d", "url": "https://github.com/eclipse-openj9/openj9/commit/89ef4ff3c474b1f7e6690abf29808e3e28dcf95d", "message": "RuntimeAssumptions: fix NULL arithmetic warning\n\nSigned-off-by: Alex Xu (Hello71) <alex_y_xu@yahoo.ca>", "committedDate": "2020-08-17T20:31:53Z", "type": "forcePushed"}]}