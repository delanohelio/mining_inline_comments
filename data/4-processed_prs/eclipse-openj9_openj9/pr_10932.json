{"pr_number": 10932, "pr_title": "Update bytecode verification to support OpenJDK VarHandles", "pr_createdAt": "2020-10-19T23:49:57Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10932", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0NDk4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10932#discussion_r508144983", "bodyText": "is this applicable to both the JBinvokehandle and the  JBinvokehandlegeneric cases?", "author": "DanHeidinga", "createdAt": "2020-10-20T00:54:46Z", "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -1531,15 +1531,26 @@ verifyBytecodes (J9BytecodeVerificationData * verifyData)\n \t\t\t\t * cases of invokevirtual which only invoke public methods of a public class.\n \t\t\t\t */\n \n+\t\t\t\t/* Remove the receiver from the stack. */\n+\t\t\t\ttype = POP;\n \t\t\t\t/* Receiver compatible with MethodHandle? */\n-\t\t\t\ttype = POP;\t\t/* Remove the receiver from the stack */\n-\t\t\t\trc = isClassCompatibleByName (verifyData, type, (U_8 *)\"java/lang/invoke/MethodHandle\", sizeof(\"java/lang/invoke/MethodHandle\") - 1, &reasonCode);\n+\t\t\t\trc = isClassCompatibleByName(verifyData, type, (U_8 *)\"java/lang/invoke/MethodHandle\", sizeof(\"java/lang/invoke/MethodHandle\") - 1, &reasonCode);\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+\t\t\t\tif (FALSE == rc) {\n+\t\t\t\t\tif (BCV_ERR_INSUFFICIENT_MEMORY == reasonCode) {\n+\t\t\t\t\t\tgoto _outOfMemoryError;\n+\t\t\t\t\t}\n+\t\t\t\t\t/* Receiver compatible with VarHandle? */\n+\t\t\t\t\trc = isClassCompatibleByName(verifyData, type, (U_8 *)\"java/lang/invoke/VarHandle\", sizeof(\"java/lang/invoke/VarHandle\") - 1, &reasonCode);", "originalCommit": "7ca885de33637e559ff9bd308088d21cc5a02024", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MjQ1OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10932#discussion_r508182458", "bodyText": "Just the invokehandle scenario. I should skip the VarHandle check for JBinvokehandlegeneric.", "author": "babsingh", "createdAt": "2020-10-20T03:11:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE0NDk4Mw=="}], "type": "inlineReview"}, {"oid": "d5ae90ca46ad4a171717bf3a509deca485f93f02", "url": "https://github.com/eclipse-openj9/openj9/commit/d5ae90ca46ad4a171717bf3a509deca485f93f02", "message": "Update bytecode verification to support OpenJDK VarHandles\n\nFor OpenJDK VarHandles, the invokevirtual calls to the VarHandle\npolymorphic methods are rewritten to the invokehandle bytecode in\nClassFileOracle (#10557). Bytecode verification has been updated to\nhandle this conversion. These changes are identical to the existing\nMethodHandle handling.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-20T03:08:37Z", "type": "commit"}, {"oid": "d5ae90ca46ad4a171717bf3a509deca485f93f02", "url": "https://github.com/eclipse-openj9/openj9/commit/d5ae90ca46ad4a171717bf3a509deca485f93f02", "message": "Update bytecode verification to support OpenJDK VarHandles\n\nFor OpenJDK VarHandles, the invokevirtual calls to the VarHandle\npolymorphic methods are rewritten to the invokehandle bytecode in\nClassFileOracle (#10557). Bytecode verification has been updated to\nhandle this conversion. These changes are identical to the existing\nMethodHandle handling.\n\nCo-authored-by: Jack Lu <Jack.S.Lu@ibm.com>\nSigned-off-by: Babneet Singh <sbabneet@ca.ibm.com>", "committedDate": "2020-10-20T03:08:37Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE4MjcxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10932#discussion_r508182716", "bodyText": "^^^ Updated to perform the VarHandle check only for JBinvokehandle.", "author": "babsingh", "createdAt": "2020-10-20T03:12:11Z", "path": "runtime/bcverify/rtverify.c", "diffHunk": "@@ -1531,15 +1531,26 @@ verifyBytecodes (J9BytecodeVerificationData * verifyData)\n \t\t\t\t * cases of invokevirtual which only invoke public methods of a public class.\n \t\t\t\t */\n \n+\t\t\t\t/* Remove the receiver from the stack. */\n+\t\t\t\ttype = POP;\n \t\t\t\t/* Receiver compatible with MethodHandle? */\n-\t\t\t\ttype = POP;\t\t/* Remove the receiver from the stack */\n-\t\t\t\trc = isClassCompatibleByName (verifyData, type, (U_8 *)\"java/lang/invoke/MethodHandle\", sizeof(\"java/lang/invoke/MethodHandle\") - 1, &reasonCode);\n+\t\t\t\trc = isClassCompatibleByName(verifyData, type, (U_8 *)\"java/lang/invoke/MethodHandle\", sizeof(\"java/lang/invoke/MethodHandle\") - 1, &reasonCode);\n+#if defined(J9VM_OPT_OPENJDK_METHODHANDLE)\n+\t\t\t\tif ((JBinvokehandle == bc) && (FALSE == rc)) {", "originalCommit": "d5ae90ca46ad4a171717bf3a509deca485f93f02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}