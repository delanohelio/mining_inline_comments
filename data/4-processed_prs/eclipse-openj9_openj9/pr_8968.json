{"pr_number": 8968, "pr_title": "Code cleanup for unused __arrayTranslateTRTOSimpleVMX function", "pr_createdAt": "2020-03-25T05:48:54Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8968", "timeline": [{"oid": "e125d897e23f618a20baa75c4a87fe00417b3fd2", "url": "https://github.com/eclipse-openj9/openj9/commit/e125d897e23f618a20baa75c4a87fe00417b3fd2", "message": "code cleanup for unused __arrayTranslateTRTOSimpleVMX function\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-03-25T06:29:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNjk4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/8968#discussion_r398016986", "bodyText": "From here downward it looks like you are also getting rid of a bunch of macro definitions that appear to be unrelated to arrayTranslateTRTOSimpleVMX. They are behind an #if 0 so I'm not sure if they are really needed anymore. But you should check to make sure.", "author": "IBMJimmyk", "createdAt": "2020-03-25T16:59:44Z", "path": "runtime/compiler/p/runtime/J9PPCArrayTranslate.spp", "diffHunk": "@@ -1313,973 +1264,9 @@ __arrayTranslateTROT:\n     \tendproc.__arrayTranslateTROT:\n #endif\n \n-\n-#if 0\n-!----------------------------------------------------------------------\n-! entry arrayTranslateTRTOSimpleVMX\n-!----------------------------------------------------------------------\n-! To minimize conditional branches due to various configuration,\n-! e.g. data alignment and data size, we employed a decision table through\n-! which one of the 64 handlers is selected with 6-bit vector as described\n-! below.\n-!\n-! How to compute parameters:\n-!   headerCount = (-outp) & 15;\n-!   block4Count = (len - headerCount) / 16 / 4;\n-!   blockCount = ((len - headerCount) / 16) & 3;\n-!   trailerCount = (outp + len) & 15;\n-!\n-!   swSlowPath = (outp & ~15) == ((outp + len) & ~15);\n-!   swSrcDstAlign = (((inp >> 1) XOR outp) & 7) == 0; Src and dst are mutually aligned\n-!   swHeader = headerCount != 0;\n-!   swBlock4Loop = block4Count != 0;\n-!   swTrailer = trailerCount != 0;\n-!\n-!   vector = (swSlowPath << 6) |\n-!\t     (swSrcDstAlign << 5) |\n-!\t     (swHeader << 4) |\n-!            (swBlock4Loop << 3) |\n-!            (blockCount & 3) << 1 |\n-!\t     swTrailer\n-!\n-!       +-------------------------------------------- swSlowPath\n-!       |   +---------------------------------------- swSrcDstAlign\n-!       |   |   +------------------------------------ swHeader\n-!       |   |   |   +-------------------------------- swBlock4Loop\n-!       |   |   |   |   +---------------------------- blockCount    0..3\n-!       |   |   |   |   |       +-------------------- swTrailer\n-!       |   |   |   |   |       |   +---------------- Partial header block\n-!       |   |   |   |   |       |   |   +------------ 4x unrolled blocks\n-!       |   |   |   |   |       |   |   |     +------ A pair of block\n-!       |   |   |   |   |       |   |   |     |  +--- Single block\n-!       |   |   |   |   |       |   |   |     |  | +- Partial trailer block\n-!       |   |   |   |   |       |   |   |     |  | |\n-!       V   V   V   V   V       V   V   V     V  V V\n-!       -   -   -   -   -----   -   --- ----- -- - ---\n-! -----+---------------------------+------------------+-------------+\n-!      |       Configuration       |   Patte n        |Handler      |\n-! -----+---------------------------+------------------+-------------+\n-!      |0   0   0   0   0   0   0  |                  |invalid      |\n-!      |0   0   0   0   0   0   1  |                  |invalid      |\n-!      |0   0   0   0   0   1   0  |             B    |vector000010 |\n-!      |0   0   0   0   0   1   1  |             B PP.|vector000011 |\n-!      |0   0   0   0   1   0   0  |          BB      |vector000100 |\n-!      |0   0   0   0   1   0   1  |          BB   PP.|vector000101 |\n-!      |0   0   0   0   1   1   0  |          BB B    |vector000110 |\n-!      |0   0   0   0   1   1   1  |          BB B PP.|vector000111 |\n-!      |0   0   0   1   0   0   0  |    BBBB+         |vector001000 |\n-!      |0   0   0   1   0   0   1  |    BBBB+      PP.|vector001001 |\n-!      |0   0   0   1   0   1   0  |    BBBB+    B    |vector001010 |\n-!      |0   0   0   1   0   1   1  |    BBBB+    B PP.|vector001011 |\n-!      |0   0   0   1   1   0   0  |    BBBB+ BB      |vector001100 |\n-!      |0   0   0   1   1   0   1  |    BBBB+ BB   PP.|vector001101 |\n-!      |0   0   0   1   1   1   0  |    BBBB+ BB B    |vector001110 |\n-!      |0   0   0   1   1   1   1  |    BBBB+ BB B PP.|vector001111 |\n-!      |0   0   1   0   0   0   0  |.PP               |vector010000 |\n-!      |0   0   1   0   0   0   1  |.PP            PP.|vector010001 |\n-!      |0   0   1   0   0   1   0  |.PP          B    |vector010010 |\n-!      |0   0   1   0   0   1   1  |.PP          B PP.|vector010011 | <-- NG case 20060627\n-!      |0   0   1   0   1   0   0  |.PP       BB      |vector010100 |\n-!      |0   0   1   0   1   0   1  |.PP       BB   PP.|vector010101 |\n-!      |0   0   1   0   1   1   0  |.PP       BB B    |vector010110 |\n-!      |0   0   1   0   1   1   1  |.PP       BB B PP.|vector010111 |\n-!      |0   0   1   1   0   0   0  |.PP BBBB+         |vector011000 |\n-!      |0   0   1   1   0   0   1  |.PP BBBB+      PP.|vector011001 |\n-!      |0   0   1   1   0   1   0  |.PP BBBB+    B    |vector011010 |\n-!      |0   0   1   1   0   1   1  |.PP BBBB+    B PP.|vector011011 |\n-!      |0   0   1   1   1   0   0  |.PP BBBB+ BB      |vector011100 |\n-!      |0   0   1   1   1   0   1  |.PP BBBB+ BB   PP.|vector011101 |\n-!      |0   0   1   1   1   1   0  |.PP BBBB+ BB B    |vector011110 |\n-!      |0   0   1   1   1   1   1  |.PP BBBB+ BB B PP.|vector011111 |\n-\n-!      |0   1   0   0   0   0   0  |                  |invalid      |\n-!      |0   1   0   0   0   0   1  |                  |invalid      |\n-!      |0   1   0   0   0   1   0  |             B    |vector100010 |\n-!      |0   1   0   0   0   1   1  |             B PP.|vector100011 |\n-!      |0   1   0   0   1   0   0  |          BB      |vector100100 |\n-!      |0   1   0   0   1   0   1  |          BB   PP.|vector100101 |\n-!      |0   1   0   0   1   1   0  |          BB B    |vector100110 |\n-!      |0   1   0   0   1   1   1  |          BB B PP.|vector100111 |\n-!      |0   1   0   1   0   0   0  |    BBBB+         |vector101000 |\n-!      |0   1   0   1   0   0   1  |    BBBB+      PP.|vector101001 |\n-!      |0   1   0   1   0   1   0  |    BBBB+    B    |vector101010 |\n-!      |0   1   0   1   0   1   1  |    BBBB+    B PP.|vector101011 |\n-!      |0   1   0   1   1   0   0  |    BBBB+ BB      |vector101100 |\n-!      |0   1   0   1   1   0   1  |    BBBB+ BB   PP.|vector101101 |\n-!      |0   1   0   1   1   1   0  |    BBBB+ BB B    |vector101110 |\n-!      |0   1   0   1   1   1   1  |    BBBB+ BB B PP.|vector101111 |\n-!      |0   1   1   0   0   0   0  |.PP               |vector110000 |\n-!      |0   1   1   0   0   0   1  |.PP            PP.|vector110001 |\n-!      |0   1   1   0   0   1   0  |.PP          B    |vector110010 |\n-!      |0   1   1   0   0   1   1  |.PP          B PP.|vector110011 |\n-!      |0   1   1   0   1   0   0  |.PP       BB      |vector110100 |\n-!      |0   1   1   0   1   0   1  |.PP       BB   PP.|vector110101 |\n-!      |0   1   1   0   1   1   0  |.PP       BB B    |vector110110 |\n-!      |0   1   1   0   1   1   1  |.PP       BB B PP.|vector110111 |\n-!      |0   1   1   1   0   0   0  |.PP BBBB+         |vector111000 |\n-!      |0   1   1   1   0   0   1  |.PP BBBB+      PP.|vector111001 |\n-!      |0   1   1   1   0   1   0  |.PP BBBB+    B    |vector111010 |\n-!      |0   1   1   1   0   1   1  |.PP BBBB+    B PP.|vector111011 |\n-!      |0   1   1   1   1   0   0  |.PP BBBB+ BB      |vector111100 |\n-!      |0   1   1   1   1   0   1  |.PP BBBB+ BB   PP.|vector111101 |\n-!      |0   1   1   1   1   1   0  |.PP BBBB+ BB B    |vector111110 |\n-!      |0   1   1   1   1   1   1  |.PP BBBB+ BB B PP.|vector111111 |\n-\n-!      |1   0   0   0   0   0   0  ||..               |null         | Length zero, aligned\n-!      |1   0   0   0   0   0   1  |               PP.|vector000001 |\n-!      |1   0   0   0   0   1   0  |                  |invalid      |\n-!      |1   0   0   0   0   1   1  |                  |invalid      |\n-!      |1   0   0   0   1   0   0  |                  |invalid      |\n-!      |1   0   0   0   1   0   1  |                  |invalid      |\n-!      |1   0   0   0   1   1   0  |                  |invalid      |\n-!      |1   0   0   0   1   1   1  |                  |invalid      |\n-!      |1   0   0   1   0   0   0  |                  |invalid      |\n-!      |1   0   0   1   0   0   1  |                  |invalid      |\n-!      |1   0   0   1   0   1   0  |                  |invalid      |\n-!      |1   0   0   1   0   1   1  |                  |invalid      |\n-!      |1   0   0   1   1   0   0  |                  |invalid      |\n-!      |1   0   0   1   1   0   1  |                  |invalid      |\n-!      |1   0   0   1   1   1   0  |                  |invalid      |\n-!      |1   0   0   1   1   1   1  |                  |invalid      |\n-!      |1   0   1   0   0   0   0  |                  |invalid      |\n-!      |1   0   1   0   0   0   1  |                  |invalid      |\n-!      |1   0   1   0   0   1   0  |                  |invalid      |\n-!      |1   0   1   0   0   1   1  |.P.       .. B .P.|invalid      |\n-!      |1   0   1   0   1   0   0  |          BB .    |invalid      |\n-!      |1   0   1   0   1   0   1  |.P.       BB . .P.|invalid      |\n-!      |1   0   1   0   1   1   0  |          BB B    |invalid      |\n-!      |1   0   1   0   1   1   1  |.P.       BB B .P.|invalid      |\n-!      |1   0   1   1   0   0   0  |          .. .    |invalid      |\n-!      |1   0   1   1   0   0   1  |.P.       .. . .P.|invalid      |\n-!      |1   0   1   1   0   1   0  |          .. B    |invalid      |\n-!      |1   0   1   1   0   1   1  |.P.       .. B .P.|invalid      |\n-!      |1   0   1   1   1   0   0  |          BB .    |invalid      |\n-!      |1   0   1   1   1   0   1  |.P.       BB . .P.|invalid      |\n-!      |1   0   1   1   1   1   0  |          BB B    |invalid      |\n-!      |1   0   1   1   1   1   1  |.P.       BB B .P.|partialVector| Also includes length zero, unaligned cases.\n-\n-!      |1   1   0   0   0   0   0  ||..               |null         | Length zero, aligned\n-!      |1   1   0   0   0   0   1  |               PP.|vector100001 |\n-!      |1   1   0   0   0   1   0  |                  |invalid      |\n-!      |1   1   0   0   0   1   1  |                  |invalid      |\n-!      |1   1   0   0   1   0   0  |                  |invalid      |\n-!      |1   1   0   0   1   0   1  |                  |invalid      |\n-!      |1   1   0   0   1   1   0  |                  |invalid      |\n-!      |1   1   0   0   1   1   1  |                  |invalid      |\n-!      |1   1   0   1   0   0   0  |                  |invalid      |\n-!      |1   1   0   1   0   0   1  |                  |invalid      |\n-!      |1   1   0   1   0   1   0  |                  |invalid      |\n-!      |1   1   0   1   0   1   1  |                  |invalid      |\n-!      |1   1   0   1   1   0   0  |                  |invalid      |\n-!      |1   1   0   1   1   0   1  |                  |invalid      |\n-!      |1   1   0   1   1   1   0  |                  |invalid      |\n-!      |1   1   0   1   1   1   1  |                  |invalid      |\n-!      |1   1   1   0   0   0   0  |                  |invalid      |\n-!      |1   1   1   0   0   0   1  |                  |invalid      |\n-!      |1   1   1   0   0   1   0  |                  |invalid      |\n-!      |1   1   1   0   0   1   1  |.P.       .. B .P.|invalid      |\n-!      |1   1   1   0   1   0   0  |          BB .    |invalid      |\n-!      |1   1   1   0   1   0   1  |.P.       BB . .P.|invalid      |\n-!      |1   1   1   0   1   1   0  |          BB B    |invalid      |\n-!      |1   1   1   0   1   1   1  |.P.       BB B .P.|invalid      |\n-!      |1   1   1   1   0   0   0  |          .. .    |invalid      |\n-!      |1   1   1   1   0   0   1  |.P.       .. . .P.|invalid      |\n-!      |1   1   1   1   0   1   0  |          .. B    |invalid      |\n-!      |1   1   1   1   0   1   1  |.P.       .. B .P.|invalid      |\n-!      |1   1   1   1   1   0   0  |          BB .    |invalid      |\n-!      |1   1   1   1   1   0   1  |.P.       BB . .P.|invalid      |\n-!      |1   1   1   1   1   1   0  |          BB B    |invalid      |\n-!      |1   1   1   1   1   1   1  |.P.       BB B .P.|partialVector| Also includes length zero, unaligned cases.\n-! -----+---------------------------+------------------+-------------+\n-!\n-! Legends:\n-!      ...   No data\n-!      .PP   Partial block (missing a part at head)\n-!      .P.   Partial block (missing a part at both head and tail)\n-!      PP.   Partial block (missing a part at tail)\n-!      BBBB+ One or more 4x unrolled blocks\n-!      BB    A pair of blocks\n-!      B     Single block\n-!      |..   Zero length block at block boundary\n-!      .|.   Zero length block at middle of boundary\n-!      ..|   Zero length block just before block boundary\n-\n-#ifdef AIXPPC\n-.__arrayTranslateTRTOSimpleVMX:\n-\t.function .__arrayTranslateTRTOSimpleVMX,startproc.__arrayTranslateTRTOSimpleVMX,16,0,(endproc.__arrayTranslateTRTOSimpleVMX-startproc.__arrayTranslateTRTOSimpleVMX)\n-#elif defined(LINUXPPC64)\n-FUNC_LABEL(__arrayTranslateTRTOSimpleVMX):\n-#else\n-__arrayTranslateTRTOSimpleVMX:\n-#endif\n-    \tstartproc.__arrayTranslateTRTOSimpleVMX:\n-\t!-------------------------------------------------------------------\n-\t!   Reg.        Input           Output          Use\n-\t!-------------------------------------------------------------------\n-\t!   r0                          DESTROYED\n-\t!   r3                          <num. char. transformed> - 1\n-\t!   r4          inp             DESTROYED\n-\t!   r5          outp            DESTROYED\n-\t!   r6          len             len\n-\t!   r7          maxChar         maxChar\n-\t!   r8     \tvmaxCharsMem    DESTROYED\n-\t!   r9                          DESTROYED\n-\t!   r10                         DESTROYED\n-\t!   r11                         DESTROYED\n-\t!   r12                         DESTROYED\n-\t!\n-\t!   ctr                         DESTROYED\n-\t!   cr0                         DESTROYED\n-\t!   cr6                         DESTROYED\n-\t!\n-\t!   vr0                         DESTROYED\n-\t!   vr1                         DESTROYED\n-\t!   vr2                         DESTROYED\n-\t!   vr3                         DESTROYED\n-\t!   vr4                         DESTROYED\n-\t!   vr5                         DESTROYED\n-\t!   vr6                         DESTROYED\n-\t!   vr7                         DESTROYED\n-\t!   vr8                         DESTROYED\n-\t!   vr9                         DESTROYED\n-\t!   vr10                        DESTROYED\n-\t!   vr11                        DESTROYED\n-\tmtctr\tr7\t\t\t! Spill maxChar into CTR\n-\tlvx \tvr0, r0, r8\t\t! vmaxChars = *vmaxCharsMem\n-\tadd\tr8,r5,r6\t\t! r8 = outp + len\n-\tneg\tr11,r5\t\t\t! r11 = -outp\n-\trlwinm\tr0,r8,0,0,27\t\t! r0 = (outp + len) & ~15\n-\trlwinm\tr9,r5,0,0,27\t\t! r9 = outp & ~15\n-\trlwinm\tr10,r11,0,28,31\t\t! r10 = (-out) & 15\t\t\t\theaderCount\n-\txor\tr3,r9,r0\t\t! r3 = (outp & ~15) XOR ((outp + len) & ~15)\n-\tsubfic\tr11,r3,0\t\t! r11/CA = 0 - r3  (Set carry if r3 is zero)\n-\tadde\tr3,r11,r3\t\t! r3 = (outp & ~15) == ((outp + len) & ~15)\tswSlowPath\n-\tsubf\tr12,r10,r6\t\t! r12 = len - headerCount\n-\trlwinm\tr0,r12,29,29,30\t\t! r0 = (((len - headerCount) / 16) & 3) << 1\tblockCount << 1\n-\tsrwi\tr11,r12,6\t\t! r11 = (len - headerCount) / 16\t\tblock4Count\n-\tneg\tr7,r10\t\t\t! r7 = -headerCount\n-\tslwi\tr12,r3,6\t\t! r12 = (swSlowPath << 6)\n-\tsrwi\tr3,r4,1\t\t\t! inp >> 1\n-\txor\tr3,r3,r5\t\t! (inp >> 1) & outp\n-\tandi.\tr3,r3,7\t\t\t! ((inp >> 1) XOR outp) & 7\n-\tmfcr\tr3\t\t\t! CR0_EQ = (((inp >> 1) XOR outp) & 7) == 0\n-\trlwinm\tr3,r3,8,26,26\n-\tor\tr12,r12,r3\t\t! r12 = (swSlowPath << 6) | (swSrcDstAlign << 5)\n-\trlwinm\tr3,r7,5,27,27\t\t! r3 = (headerCount != 0) << 4\t\t\tswHeader << 4\n-\tor\tr9,r12,r0\t\t! r9 = (swSlowPath << 6) | (blockCount << 1)\n-\trlwinm\tr12,r8,0,28,31\t\t! r12 = (outp + len) & 15\t\t\ttrailerCount\n-\tneg\tr8,r11\t\t\t! r8 = -blockCount\n-\tor\tr3,r9,r3\t\t! r3 = (swSlowPath << 6) | (swHeader << 4) | (blockCount << 1)\n-\trlwinm\tr0,r8,4,28,28\t\t! r0 = (blockCount != 0) << 3\t\t\tswBlock4Loop << 3\n-\tneg\tr7,r12\t\t\t! r7 = -trailerCount\n-\tor\tr8,r3,r0\t    \t! r8 = (swSlowPath << 6) | (swHeader << 4) | (swBlock4Loop << 3) | (blockCount << 1)\n-\trlwinm\tr9,r7,1,31,31\t\t! r0 = (trailerCount != 0) << 0\t\t\tswTrailer << 0\n-\tor\tr0,r8,r9\t    \t! r0 = (swSlowPath << 6) | (swHeader << 4) | (swBlock4Loop << 3) | (blockCount << 1) | (swTrailer << 0)\n-\tmfctr\tr7\t\t\t! Restore maxChar\n-\n-\t! Look up a function pointer from dispatch table CTR <- func[r0]\n-\tladdr\tr3, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)\t! Restore TOC/GOT\n-#ifdef TR_HOST_64BIT\n-\trlwinm\tr0, r0, 3, 0xFFFFFFF8\n-#else\n-\trlwinm\tr0, r0, 2, 0xFFFFFFFC\n-#endif\n-#ifdef AIXPPC\n-\tladdr\tr3, TOC__arrayTranslateLabelTable(r3)\n-#elif defined(LINUXPPC64)\n-\tladdr\tr3, TOC__arrayTranslateLabelTable@toc(r3)\n-#else\n-\tladdr\tr3, __arrayTranslateLabelTable@got(r3)\n-#endif\n-\tladdrx\tr3, r3, r0\n-\tmtctr\tr3\n-\t! Do rest of initialization\n-    \tli \tr3, 0\t\t\t! index = 0\n-\tli \tr8, 16\t\t\t! const16 = 16\n-\tli \tr9, 32\t\t\t! const32 = 32\n-\tli \tr0, 48\t\t\t! const48 = 48\n-\t!-------------------------------\n-    \t! Exit condition\n-\t!   reg\t\tcontent\n-\t!-------------------------------\n-\t!   r0  -- \tconst48\n-\t!   r3  -- \tindex\n-\t!   r4  -- \tinp\n-\t!   r5  -- \toutp\n-\t!   r6  -- \tlen\n-\t!   r7  -- \tmaxChar\n-\t!   r8  -- \tconst16\n-\t!   r9  -- \tconst32\n-\t!   r10 -- \theaderCount\n-\t!   r11 --\tblockCount\n-\t!   r12 --\ttrailerCount\n-\t!   vr0 --\tvmaxChars\n-\t!-------------------------------\n-\tbctr\n-!----------------------------------------------------------------------\n-! end of arrayTranslateTRTOSimpleVMX\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! macro definitions\n-!    macroArrayTranslate swHeader,swSrcDstAlign,swBlock4Loop,swBlock2,swBlock1,swTrailer\n-!      macroArrayTranslateHeader\n-!      macroArrayTranslateUnrollInit\n-!      macroArrayTranslateUnrolledBodyN swSrcDstAlign num\n-!        macroArrayTranslateUnrolledBodyGen vin0 vin2 swSrcDstAlign outReg firstBlock\n-!      macroArrayTranslateTrailer\n-!----------------------------------------------------------------------", "originalCommit": "e125d897e23f618a20baa75c4a87fe00417b3fd2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIzNjM3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8968#discussion_r400236378", "bodyText": "@IBMJimmyk thanks for the feedback. My thought was, because they were not used for 2 yo+, maybe they are good candidate for cleanup. Also, because they were defined within the .startproc and .endproc.", "author": "mnalam-p", "createdAt": "2020-03-30T14:28:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxNjk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAxODc4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8968#discussion_r398018788", "bodyText": "Just wanted to highlight that this line does need to be removed even if you aren't removing the above macros. This line should actually be with that rest of the arrayTranslateTRTOSimpleVMX but probably got moved apart due to a merge error and was never caught because it was behind an #if 0.", "author": "IBMJimmyk", "createdAt": "2020-03-25T17:02:11Z", "path": "runtime/compiler/p/runtime/J9PPCArrayTranslate.spp", "diffHunk": "@@ -1313,973 +1264,9 @@ __arrayTranslateTROT:\n     \tendproc.__arrayTranslateTROT:\n #endif\n \n-\n-#if 0\n-!----------------------------------------------------------------------\n-! entry arrayTranslateTRTOSimpleVMX\n-!----------------------------------------------------------------------\n-! To minimize conditional branches due to various configuration,\n-! e.g. data alignment and data size, we employed a decision table through\n-! which one of the 64 handlers is selected with 6-bit vector as described\n-! below.\n-!\n-! How to compute parameters:\n-!   headerCount = (-outp) & 15;\n-!   block4Count = (len - headerCount) / 16 / 4;\n-!   blockCount = ((len - headerCount) / 16) & 3;\n-!   trailerCount = (outp + len) & 15;\n-!\n-!   swSlowPath = (outp & ~15) == ((outp + len) & ~15);\n-!   swSrcDstAlign = (((inp >> 1) XOR outp) & 7) == 0; Src and dst are mutually aligned\n-!   swHeader = headerCount != 0;\n-!   swBlock4Loop = block4Count != 0;\n-!   swTrailer = trailerCount != 0;\n-!\n-!   vector = (swSlowPath << 6) |\n-!\t     (swSrcDstAlign << 5) |\n-!\t     (swHeader << 4) |\n-!            (swBlock4Loop << 3) |\n-!            (blockCount & 3) << 1 |\n-!\t     swTrailer\n-!\n-!       +-------------------------------------------- swSlowPath\n-!       |   +---------------------------------------- swSrcDstAlign\n-!       |   |   +------------------------------------ swHeader\n-!       |   |   |   +-------------------------------- swBlock4Loop\n-!       |   |   |   |   +---------------------------- blockCount    0..3\n-!       |   |   |   |   |       +-------------------- swTrailer\n-!       |   |   |   |   |       |   +---------------- Partial header block\n-!       |   |   |   |   |       |   |   +------------ 4x unrolled blocks\n-!       |   |   |   |   |       |   |   |     +------ A pair of block\n-!       |   |   |   |   |       |   |   |     |  +--- Single block\n-!       |   |   |   |   |       |   |   |     |  | +- Partial trailer block\n-!       |   |   |   |   |       |   |   |     |  | |\n-!       V   V   V   V   V       V   V   V     V  V V\n-!       -   -   -   -   -----   -   --- ----- -- - ---\n-! -----+---------------------------+------------------+-------------+\n-!      |       Configuration       |   Patte n        |Handler      |\n-! -----+---------------------------+------------------+-------------+\n-!      |0   0   0   0   0   0   0  |                  |invalid      |\n-!      |0   0   0   0   0   0   1  |                  |invalid      |\n-!      |0   0   0   0   0   1   0  |             B    |vector000010 |\n-!      |0   0   0   0   0   1   1  |             B PP.|vector000011 |\n-!      |0   0   0   0   1   0   0  |          BB      |vector000100 |\n-!      |0   0   0   0   1   0   1  |          BB   PP.|vector000101 |\n-!      |0   0   0   0   1   1   0  |          BB B    |vector000110 |\n-!      |0   0   0   0   1   1   1  |          BB B PP.|vector000111 |\n-!      |0   0   0   1   0   0   0  |    BBBB+         |vector001000 |\n-!      |0   0   0   1   0   0   1  |    BBBB+      PP.|vector001001 |\n-!      |0   0   0   1   0   1   0  |    BBBB+    B    |vector001010 |\n-!      |0   0   0   1   0   1   1  |    BBBB+    B PP.|vector001011 |\n-!      |0   0   0   1   1   0   0  |    BBBB+ BB      |vector001100 |\n-!      |0   0   0   1   1   0   1  |    BBBB+ BB   PP.|vector001101 |\n-!      |0   0   0   1   1   1   0  |    BBBB+ BB B    |vector001110 |\n-!      |0   0   0   1   1   1   1  |    BBBB+ BB B PP.|vector001111 |\n-!      |0   0   1   0   0   0   0  |.PP               |vector010000 |\n-!      |0   0   1   0   0   0   1  |.PP            PP.|vector010001 |\n-!      |0   0   1   0   0   1   0  |.PP          B    |vector010010 |\n-!      |0   0   1   0   0   1   1  |.PP          B PP.|vector010011 | <-- NG case 20060627\n-!      |0   0   1   0   1   0   0  |.PP       BB      |vector010100 |\n-!      |0   0   1   0   1   0   1  |.PP       BB   PP.|vector010101 |\n-!      |0   0   1   0   1   1   0  |.PP       BB B    |vector010110 |\n-!      |0   0   1   0   1   1   1  |.PP       BB B PP.|vector010111 |\n-!      |0   0   1   1   0   0   0  |.PP BBBB+         |vector011000 |\n-!      |0   0   1   1   0   0   1  |.PP BBBB+      PP.|vector011001 |\n-!      |0   0   1   1   0   1   0  |.PP BBBB+    B    |vector011010 |\n-!      |0   0   1   1   0   1   1  |.PP BBBB+    B PP.|vector011011 |\n-!      |0   0   1   1   1   0   0  |.PP BBBB+ BB      |vector011100 |\n-!      |0   0   1   1   1   0   1  |.PP BBBB+ BB   PP.|vector011101 |\n-!      |0   0   1   1   1   1   0  |.PP BBBB+ BB B    |vector011110 |\n-!      |0   0   1   1   1   1   1  |.PP BBBB+ BB B PP.|vector011111 |\n-\n-!      |0   1   0   0   0   0   0  |                  |invalid      |\n-!      |0   1   0   0   0   0   1  |                  |invalid      |\n-!      |0   1   0   0   0   1   0  |             B    |vector100010 |\n-!      |0   1   0   0   0   1   1  |             B PP.|vector100011 |\n-!      |0   1   0   0   1   0   0  |          BB      |vector100100 |\n-!      |0   1   0   0   1   0   1  |          BB   PP.|vector100101 |\n-!      |0   1   0   0   1   1   0  |          BB B    |vector100110 |\n-!      |0   1   0   0   1   1   1  |          BB B PP.|vector100111 |\n-!      |0   1   0   1   0   0   0  |    BBBB+         |vector101000 |\n-!      |0   1   0   1   0   0   1  |    BBBB+      PP.|vector101001 |\n-!      |0   1   0   1   0   1   0  |    BBBB+    B    |vector101010 |\n-!      |0   1   0   1   0   1   1  |    BBBB+    B PP.|vector101011 |\n-!      |0   1   0   1   1   0   0  |    BBBB+ BB      |vector101100 |\n-!      |0   1   0   1   1   0   1  |    BBBB+ BB   PP.|vector101101 |\n-!      |0   1   0   1   1   1   0  |    BBBB+ BB B    |vector101110 |\n-!      |0   1   0   1   1   1   1  |    BBBB+ BB B PP.|vector101111 |\n-!      |0   1   1   0   0   0   0  |.PP               |vector110000 |\n-!      |0   1   1   0   0   0   1  |.PP            PP.|vector110001 |\n-!      |0   1   1   0   0   1   0  |.PP          B    |vector110010 |\n-!      |0   1   1   0   0   1   1  |.PP          B PP.|vector110011 |\n-!      |0   1   1   0   1   0   0  |.PP       BB      |vector110100 |\n-!      |0   1   1   0   1   0   1  |.PP       BB   PP.|vector110101 |\n-!      |0   1   1   0   1   1   0  |.PP       BB B    |vector110110 |\n-!      |0   1   1   0   1   1   1  |.PP       BB B PP.|vector110111 |\n-!      |0   1   1   1   0   0   0  |.PP BBBB+         |vector111000 |\n-!      |0   1   1   1   0   0   1  |.PP BBBB+      PP.|vector111001 |\n-!      |0   1   1   1   0   1   0  |.PP BBBB+    B    |vector111010 |\n-!      |0   1   1   1   0   1   1  |.PP BBBB+    B PP.|vector111011 |\n-!      |0   1   1   1   1   0   0  |.PP BBBB+ BB      |vector111100 |\n-!      |0   1   1   1   1   0   1  |.PP BBBB+ BB   PP.|vector111101 |\n-!      |0   1   1   1   1   1   0  |.PP BBBB+ BB B    |vector111110 |\n-!      |0   1   1   1   1   1   1  |.PP BBBB+ BB B PP.|vector111111 |\n-\n-!      |1   0   0   0   0   0   0  ||..               |null         | Length zero, aligned\n-!      |1   0   0   0   0   0   1  |               PP.|vector000001 |\n-!      |1   0   0   0   0   1   0  |                  |invalid      |\n-!      |1   0   0   0   0   1   1  |                  |invalid      |\n-!      |1   0   0   0   1   0   0  |                  |invalid      |\n-!      |1   0   0   0   1   0   1  |                  |invalid      |\n-!      |1   0   0   0   1   1   0  |                  |invalid      |\n-!      |1   0   0   0   1   1   1  |                  |invalid      |\n-!      |1   0   0   1   0   0   0  |                  |invalid      |\n-!      |1   0   0   1   0   0   1  |                  |invalid      |\n-!      |1   0   0   1   0   1   0  |                  |invalid      |\n-!      |1   0   0   1   0   1   1  |                  |invalid      |\n-!      |1   0   0   1   1   0   0  |                  |invalid      |\n-!      |1   0   0   1   1   0   1  |                  |invalid      |\n-!      |1   0   0   1   1   1   0  |                  |invalid      |\n-!      |1   0   0   1   1   1   1  |                  |invalid      |\n-!      |1   0   1   0   0   0   0  |                  |invalid      |\n-!      |1   0   1   0   0   0   1  |                  |invalid      |\n-!      |1   0   1   0   0   1   0  |                  |invalid      |\n-!      |1   0   1   0   0   1   1  |.P.       .. B .P.|invalid      |\n-!      |1   0   1   0   1   0   0  |          BB .    |invalid      |\n-!      |1   0   1   0   1   0   1  |.P.       BB . .P.|invalid      |\n-!      |1   0   1   0   1   1   0  |          BB B    |invalid      |\n-!      |1   0   1   0   1   1   1  |.P.       BB B .P.|invalid      |\n-!      |1   0   1   1   0   0   0  |          .. .    |invalid      |\n-!      |1   0   1   1   0   0   1  |.P.       .. . .P.|invalid      |\n-!      |1   0   1   1   0   1   0  |          .. B    |invalid      |\n-!      |1   0   1   1   0   1   1  |.P.       .. B .P.|invalid      |\n-!      |1   0   1   1   1   0   0  |          BB .    |invalid      |\n-!      |1   0   1   1   1   0   1  |.P.       BB . .P.|invalid      |\n-!      |1   0   1   1   1   1   0  |          BB B    |invalid      |\n-!      |1   0   1   1   1   1   1  |.P.       BB B .P.|partialVector| Also includes length zero, unaligned cases.\n-\n-!      |1   1   0   0   0   0   0  ||..               |null         | Length zero, aligned\n-!      |1   1   0   0   0   0   1  |               PP.|vector100001 |\n-!      |1   1   0   0   0   1   0  |                  |invalid      |\n-!      |1   1   0   0   0   1   1  |                  |invalid      |\n-!      |1   1   0   0   1   0   0  |                  |invalid      |\n-!      |1   1   0   0   1   0   1  |                  |invalid      |\n-!      |1   1   0   0   1   1   0  |                  |invalid      |\n-!      |1   1   0   0   1   1   1  |                  |invalid      |\n-!      |1   1   0   1   0   0   0  |                  |invalid      |\n-!      |1   1   0   1   0   0   1  |                  |invalid      |\n-!      |1   1   0   1   0   1   0  |                  |invalid      |\n-!      |1   1   0   1   0   1   1  |                  |invalid      |\n-!      |1   1   0   1   1   0   0  |                  |invalid      |\n-!      |1   1   0   1   1   0   1  |                  |invalid      |\n-!      |1   1   0   1   1   1   0  |                  |invalid      |\n-!      |1   1   0   1   1   1   1  |                  |invalid      |\n-!      |1   1   1   0   0   0   0  |                  |invalid      |\n-!      |1   1   1   0   0   0   1  |                  |invalid      |\n-!      |1   1   1   0   0   1   0  |                  |invalid      |\n-!      |1   1   1   0   0   1   1  |.P.       .. B .P.|invalid      |\n-!      |1   1   1   0   1   0   0  |          BB .    |invalid      |\n-!      |1   1   1   0   1   0   1  |.P.       BB . .P.|invalid      |\n-!      |1   1   1   0   1   1   0  |          BB B    |invalid      |\n-!      |1   1   1   0   1   1   1  |.P.       BB B .P.|invalid      |\n-!      |1   1   1   1   0   0   0  |          .. .    |invalid      |\n-!      |1   1   1   1   0   0   1  |.P.       .. . .P.|invalid      |\n-!      |1   1   1   1   0   1   0  |          .. B    |invalid      |\n-!      |1   1   1   1   0   1   1  |.P.       .. B .P.|invalid      |\n-!      |1   1   1   1   1   0   0  |          BB .    |invalid      |\n-!      |1   1   1   1   1   0   1  |.P.       BB . .P.|invalid      |\n-!      |1   1   1   1   1   1   0  |          BB B    |invalid      |\n-!      |1   1   1   1   1   1   1  |.P.       BB B .P.|partialVector| Also includes length zero, unaligned cases.\n-! -----+---------------------------+------------------+-------------+\n-!\n-! Legends:\n-!      ...   No data\n-!      .PP   Partial block (missing a part at head)\n-!      .P.   Partial block (missing a part at both head and tail)\n-!      PP.   Partial block (missing a part at tail)\n-!      BBBB+ One or more 4x unrolled blocks\n-!      BB    A pair of blocks\n-!      B     Single block\n-!      |..   Zero length block at block boundary\n-!      .|.   Zero length block at middle of boundary\n-!      ..|   Zero length block just before block boundary\n-\n-#ifdef AIXPPC\n-.__arrayTranslateTRTOSimpleVMX:\n-\t.function .__arrayTranslateTRTOSimpleVMX,startproc.__arrayTranslateTRTOSimpleVMX,16,0,(endproc.__arrayTranslateTRTOSimpleVMX-startproc.__arrayTranslateTRTOSimpleVMX)\n-#elif defined(LINUXPPC64)\n-FUNC_LABEL(__arrayTranslateTRTOSimpleVMX):\n-#else\n-__arrayTranslateTRTOSimpleVMX:\n-#endif\n-    \tstartproc.__arrayTranslateTRTOSimpleVMX:\n-\t!-------------------------------------------------------------------\n-\t!   Reg.        Input           Output          Use\n-\t!-------------------------------------------------------------------\n-\t!   r0                          DESTROYED\n-\t!   r3                          <num. char. transformed> - 1\n-\t!   r4          inp             DESTROYED\n-\t!   r5          outp            DESTROYED\n-\t!   r6          len             len\n-\t!   r7          maxChar         maxChar\n-\t!   r8     \tvmaxCharsMem    DESTROYED\n-\t!   r9                          DESTROYED\n-\t!   r10                         DESTROYED\n-\t!   r11                         DESTROYED\n-\t!   r12                         DESTROYED\n-\t!\n-\t!   ctr                         DESTROYED\n-\t!   cr0                         DESTROYED\n-\t!   cr6                         DESTROYED\n-\t!\n-\t!   vr0                         DESTROYED\n-\t!   vr1                         DESTROYED\n-\t!   vr2                         DESTROYED\n-\t!   vr3                         DESTROYED\n-\t!   vr4                         DESTROYED\n-\t!   vr5                         DESTROYED\n-\t!   vr6                         DESTROYED\n-\t!   vr7                         DESTROYED\n-\t!   vr8                         DESTROYED\n-\t!   vr9                         DESTROYED\n-\t!   vr10                        DESTROYED\n-\t!   vr11                        DESTROYED\n-\tmtctr\tr7\t\t\t! Spill maxChar into CTR\n-\tlvx \tvr0, r0, r8\t\t! vmaxChars = *vmaxCharsMem\n-\tadd\tr8,r5,r6\t\t! r8 = outp + len\n-\tneg\tr11,r5\t\t\t! r11 = -outp\n-\trlwinm\tr0,r8,0,0,27\t\t! r0 = (outp + len) & ~15\n-\trlwinm\tr9,r5,0,0,27\t\t! r9 = outp & ~15\n-\trlwinm\tr10,r11,0,28,31\t\t! r10 = (-out) & 15\t\t\t\theaderCount\n-\txor\tr3,r9,r0\t\t! r3 = (outp & ~15) XOR ((outp + len) & ~15)\n-\tsubfic\tr11,r3,0\t\t! r11/CA = 0 - r3  (Set carry if r3 is zero)\n-\tadde\tr3,r11,r3\t\t! r3 = (outp & ~15) == ((outp + len) & ~15)\tswSlowPath\n-\tsubf\tr12,r10,r6\t\t! r12 = len - headerCount\n-\trlwinm\tr0,r12,29,29,30\t\t! r0 = (((len - headerCount) / 16) & 3) << 1\tblockCount << 1\n-\tsrwi\tr11,r12,6\t\t! r11 = (len - headerCount) / 16\t\tblock4Count\n-\tneg\tr7,r10\t\t\t! r7 = -headerCount\n-\tslwi\tr12,r3,6\t\t! r12 = (swSlowPath << 6)\n-\tsrwi\tr3,r4,1\t\t\t! inp >> 1\n-\txor\tr3,r3,r5\t\t! (inp >> 1) & outp\n-\tandi.\tr3,r3,7\t\t\t! ((inp >> 1) XOR outp) & 7\n-\tmfcr\tr3\t\t\t! CR0_EQ = (((inp >> 1) XOR outp) & 7) == 0\n-\trlwinm\tr3,r3,8,26,26\n-\tor\tr12,r12,r3\t\t! r12 = (swSlowPath << 6) | (swSrcDstAlign << 5)\n-\trlwinm\tr3,r7,5,27,27\t\t! r3 = (headerCount != 0) << 4\t\t\tswHeader << 4\n-\tor\tr9,r12,r0\t\t! r9 = (swSlowPath << 6) | (blockCount << 1)\n-\trlwinm\tr12,r8,0,28,31\t\t! r12 = (outp + len) & 15\t\t\ttrailerCount\n-\tneg\tr8,r11\t\t\t! r8 = -blockCount\n-\tor\tr3,r9,r3\t\t! r3 = (swSlowPath << 6) | (swHeader << 4) | (blockCount << 1)\n-\trlwinm\tr0,r8,4,28,28\t\t! r0 = (blockCount != 0) << 3\t\t\tswBlock4Loop << 3\n-\tneg\tr7,r12\t\t\t! r7 = -trailerCount\n-\tor\tr8,r3,r0\t    \t! r8 = (swSlowPath << 6) | (swHeader << 4) | (swBlock4Loop << 3) | (blockCount << 1)\n-\trlwinm\tr9,r7,1,31,31\t\t! r0 = (trailerCount != 0) << 0\t\t\tswTrailer << 0\n-\tor\tr0,r8,r9\t    \t! r0 = (swSlowPath << 6) | (swHeader << 4) | (swBlock4Loop << 3) | (blockCount << 1) | (swTrailer << 0)\n-\tmfctr\tr7\t\t\t! Restore maxChar\n-\n-\t! Look up a function pointer from dispatch table CTR <- func[r0]\n-\tladdr\tr3, J9TR_VMThreadRTOCOffset(J9VM_STRUCT)\t! Restore TOC/GOT\n-#ifdef TR_HOST_64BIT\n-\trlwinm\tr0, r0, 3, 0xFFFFFFF8\n-#else\n-\trlwinm\tr0, r0, 2, 0xFFFFFFFC\n-#endif\n-#ifdef AIXPPC\n-\tladdr\tr3, TOC__arrayTranslateLabelTable(r3)\n-#elif defined(LINUXPPC64)\n-\tladdr\tr3, TOC__arrayTranslateLabelTable@toc(r3)\n-#else\n-\tladdr\tr3, __arrayTranslateLabelTable@got(r3)\n-#endif\n-\tladdrx\tr3, r3, r0\n-\tmtctr\tr3\n-\t! Do rest of initialization\n-    \tli \tr3, 0\t\t\t! index = 0\n-\tli \tr8, 16\t\t\t! const16 = 16\n-\tli \tr9, 32\t\t\t! const32 = 32\n-\tli \tr0, 48\t\t\t! const48 = 48\n-\t!-------------------------------\n-    \t! Exit condition\n-\t!   reg\t\tcontent\n-\t!-------------------------------\n-\t!   r0  -- \tconst48\n-\t!   r3  -- \tindex\n-\t!   r4  -- \tinp\n-\t!   r5  -- \toutp\n-\t!   r6  -- \tlen\n-\t!   r7  -- \tmaxChar\n-\t!   r8  -- \tconst16\n-\t!   r9  -- \tconst32\n-\t!   r10 -- \theaderCount\n-\t!   r11 --\tblockCount\n-\t!   r12 --\ttrailerCount\n-\t!   vr0 --\tvmaxChars\n-\t!-------------------------------\n-\tbctr\n-!----------------------------------------------------------------------\n-! end of arrayTranslateTRTOSimpleVMX\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! macro definitions\n-!    macroArrayTranslate swHeader,swSrcDstAlign,swBlock4Loop,swBlock2,swBlock1,swTrailer\n-!      macroArrayTranslateHeader\n-!      macroArrayTranslateUnrollInit\n-!      macroArrayTranslateUnrolledBodyN swSrcDstAlign num\n-!        macroArrayTranslateUnrolledBodyGen vin0 vin2 swSrcDstAlign outReg firstBlock\n-!      macroArrayTranslateTrailer\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! macro macroArrayTranslateHeader\n-!----------------------------------------------------------------------\n-\t! Header processing (partial block with missing part at start)\n-\t!\n-\t!   Reg.        Input           Output          Use\n-\t!-------------------------------------------------------------------\n-\t!   r0          const48         const48\n-\t!   r3          index           index+headerCount\n-\t!   r4          inp             inp+headerCount*2\n-\t!   r5          outp            outp+headerCount\n-\t!   r6          (len)           len\n-\t!   r7          (maxChar)       maxChar\n-\t!   r8          const16         const16\n-\t!   r9          const32         const32\n-\t!   r10         headerCount     headerCount\n-\t!   r11         (blockCount)    blockCount\n-\t!   r12         (trailerCount)  trailerCount\n-\t!\n-\t!   vr0         vmaxChars       vmaxChars\n-\t!   vr1                         DESTROYED       vpat vopat\n-\t!   vr2                         DESTROYED       vin0 vcmp0 vcmp01 vcmp01_masked dummy\n-\t!   vr3                         DESTROYED       vin1 vcmp1 vomask\n-\t!   vr4                         DESTROYED       vin2 vorig\n-\t!   vr5                         DESTROYED       v0 vout/vout_shift/vout_sel\n-\t!   vr6                         DESTROYED       v1 vconst_0x0f\n-\t!\n-\t! Exceptional case: Exit to L.doScalar\n-\t!   r3     cur. index\n-\t!   r4     cur. inp\n-\t!   r5     our. outp\n-\t!   r6     len\n-\t!   r7     maxChar\n-\t!.macro macroArrayTranslateHeader\n-define(`macroArrayTranslateHeader', ` \\\n-! macrocall: `$0'() \\\n-\tlvsl \tvr1, r0, r4\t\t! vpat = lvsl(0, inp) \\\n-\tlvx \tvr2, r0, r4\t\t! vin0 = *(vector *)inp \\\n-\tlvx \tvr3, r8, r4\t\t! vin1 = *((vector *)inp + 1) \\\n-\tlvx \tvr4, r9, r4\t\t! vin2 = *((vector *)inp + 2) \\\n-\tvperm \tvr5, vr2, vr3, vr1\t! v0 = perm(vin0, vin1, vpat) \\\n-\tvperm \tvr6, vr3, vr4, vr1  \t! v1 = perm(vin1, vin2, vpat) \\\n-\tvcmpgtuh vr2, vr5, vr0\t\t! vcmp0 = vec_cmpgt(v0, vmaxChars) \\\n-\tvcmpgtuh vr3, vr6, vr0\t\t! vcmp1 = vec_cmpgt(v1, vmaxChars) \\\n-\tvpkuhum vr2,vr2,vr3\t\t! vcmp01 = vec_pack(vcmp0, vcmp1)   ! left adjusted packed comp. result \\\n-\tlvsr\tvr1, r0, r5\t\t! vopat = lvsr(0, output)  \\\n-\tvperm\tvr2, vr2, vr2, vr1\t! vcomp01 = vec_perm(vcmp01, vcmp01, vopat) Adjust packed compare result \\\n-\tvpkuhum\tvr5, vr5, vr6\t\t! vout = pack(v0, v1)\t\t    ! left adjusted packed result \\\n-\tvspltisb vr6, 15\t\t! vconst_0x0f = vec_splat_u8(15) \\\n-\tvcmpgtub vr3, vr1, vr6\t\t! vomask = vec_cmpgt(vopat, vconst_0x0f) (output&15)\"00\" . (16-(output&15))\"ff\" \\\n-\tvand    vr2, vr2, vr3\t\t! vcmp01_masked = vec_and(vcmp01, vomask) \\\n-\tvcmpgtub.   vr2,vr2,vr6         ! if (vec_any_gt(vcmp01_masked,vconst_0x0f))... \\\n-\tbc \tBO_IF_NOT_2, CR6_EQ, L.doScalar\t! Yes, do scalar processing (statically predicted as unlikely) \\\n-\tvperm\tvr5, vr5, vr5, vr1\t! vout = vec_perm(vout, vout, vopat). Adjust packed result \\\n-\tlvx\tvr4, r0, r5\t\t! vorig = vec_ld(0, outp) \\\n-\tvsel\tvr5, vr4, vr5, vr3\t! vout = vec_sel(vorig, vout, vomask) \\\n-\tadd \tr3, r3, r10\t\t! index += headerCount\t    SCHED:Can be moved anywhere in this macro \\\n-\tadd \tr4, r4, r10\t\t! inp += 2 * headerCount    SCHED:anywhere after the 3rd lvx \\\n-\tadd \tr4, r4, r10\t\t! \\\n-\tstvx \tvr5, r0, r5\t\t! *outp = vout \\\n-\tadd \tr5, r5, r10\t\t! outp += headerCount \\\n-)\n-!----------------------------------------------------------------------\n-! end of macro macroArrayTranslateHeader\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! macro macroArrayTranslateUnrollInit\n-!----------------------------------------------------------------------\n-\t! Loop of 4-times unrolled block\n-\t!\n-\t!   Reg.        Input           Output          Use\n-\t!-------------------------------------------------------------------\n-\t!   r0          const48         const48\n-\t!   r3          index           index+16*N\n-\t!   r4          inp             inp+32*N\n-\t!   r5          outp (aligned)  outp+16*N\n-\t!   r6          (len)           len\n-\t!   r7          (maxChar)       maxChar\n-\t!   r8          const16         const16\n-\t!   r9          const32         const32\n-\t!   r10         (headerCount)   headerCount <- can be destroyed\n-\t!   r11         block4Count     block4Count\n-\t!   r12         (trailerCount)  trailerCount\n-\t!\n-\t!   vr0         vmaxChars       vmaxChars\n-\t!   vr1                         DESTROYED       vpat\n-\t!   vr2                         DESTROYED       vin0\n-\t!   vr3                         DESTROYED       vin1\n-\t!   vr4                         DESTROYED       vin2\n-\t!   vr5                         DESTROYED       v0\n-\t!   vr6                         DESTROYED       v1\n-\t!   vr7                         DESTROYED       dummy\n-\t!   vr8                         DESTROYED       vout0\n-\t!   vr9                         DESTROYED       vout1\n-\t!   vr10                        DESTROYED       vout2\n-\t!   vr11                        DESTROYED       vout3\n-\t!\n-\t! Exceptional case: Exit to L.doScalar\n-\t!   r3     cur. index\n-\t!   r4     cur. inp\n-\t!   r5     our. outp\n-\t!   r6     len\n-\t!   r7     maxChar\n-!.macro macroArrayTranslateUnrollInit swSrcDstAlign\n-define(`macroArrayTranslateUnrollInit', ` \\\n-! macrocall: `$0'(`$1') \\\n-ifelse($1, `0', ` \\\n-\tlvsl \tvr1, r0, r4\t\t! vpat = lvsl(0, inp) \\\n-\tlvx \tvr2, r0, r4\t\t! vin0 = *(vector *)inp \\\n-') \\\n-')\n-!----------------------------------------------------------------------\n-! end of macro macroArrayTranslateUnrollInit\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! macro macroArrayTranslateUnrolledBodyGen\n-!----------------------------------------------------------------------\n-!.macro macroArrayTranslateUnrolledBodyGen vin0 vin2 swSrcDstAlign outReg firstBlock\n-define(`macroArrayTranslateUnrolledBodyGen', ` \\\n-! macrocall: `$0'(`$1', `$2', `$3', `$4', `$5') \\\n-ifelse(`$3', `1', ` \\\n-\tlvx \tvr5, r0, r4\t\t\t! vin1 = *((vector *)inp + 1) \\\n-\tlvx \tvr6, r8, r4\t\t\t! vin2 = *((vector *)inp + 2) \\\n-', ` \\\n-\tlvx \tvr3, r8, r4\t\t\t! vin1 = *((vector *)inp + 1) \\\n-\tvperm \tvr5, `$1', vr3, vr1\t\t! v0 = perm(vin0, vin1, vpat) \\\n-\tlvx \t`$2', r9, r4\t\t\t! vin2 = *((vector *)inp + 2) \\\n-\tvperm \tvr6, vr3, `$2', vr1\t\t! v1 = perm(vin1, vin2, vpat) \\\n-') \\\n-\taddi \tr4, r4, 32\t\t\t! inp += 32 \\\n-ifelse(`$5', `1', ` \\\n-\tvmaxuh\tvr7, vr5, vr6\t\t\t! maxSum = max(v0, v1) \\\n-\tvpkuhum\t`$4', vr5, vr6\t\t\t! vout0 = pack(v0, v1) \\\n-', ` \\\n-\tvmaxuh\t`$4', vr5, vr6\t\t\t! max01 = max(v0, v1) \\\n-\tvmaxuh\tvr7, vr7, `$4'\t\t\t! maxSum = max(maxSum, max01) \\\n-\tvpkuhum\t`$4', vr5, vr6\t\t\t! vout0 = pack(v0, v1) \\\n-') \\\n-)\n-!----------------------------------------------------------------------\n-! end of macro macroArrayTranslateUnrolledBodyGen\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! macro macroArrayTranslateUnrolledBodyN\n-!----------------------------------------------------------------------\n-!.macro macroArrayTranslateUnrolledBodyN swSrcDstAlign num\n-define(`macroArrayTranslateUnrolledBodyN', ` \\\n-! macrocall: `$0'(`$1', `$2') \\\n-ifelse(`$2', `1', ` \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr2', `vr4', `$1', `vr8', `1') \\\n-', `$2', `2', ` \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr2', `vr4', `$1', `vr8', `1') \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr4', `vr2', `$1', `vr9', `0') \\\n-', `$2', `3', ` \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr2', `vr4', `$1', `vr8', `1') \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr4', `vr2', `$1', `vr9', `0') \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr2', `vr4', `$1', `vr10', `0') \\\n-', `$2', `4', ` \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr2', `vr4', `$1', `vr8', `1') \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr4', `vr2', `$1', `vr9', `0') \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr2', `vr4', `$1', `vr10', `0') \\\n-    \tmacroArrayTranslateUnrolledBodyGen(`vr4', `vr2', `$1', `vr11', `0') \\\n-') \\\n-\tvcmpgtuh. vr7, vr7, vr0\t\t! If any elem > maxChar ? \\\n-ifelse(`$2', `1', ` \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar1 \\\n-', `$2', `2', ` \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar1 \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar2 \\\n-', `$2', `3', ` \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar1 \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar2 \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar3 \\\n-', `$2', `4', ` \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar1 \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar2 \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar3 \\\n-\tbc\tBO_IF_NOT_2, CR6_EQ, L.doScalar4 \\\n-') \\\n-ifelse(`$2', `1', ` \\\n-\tstvx \tvr8, r0, r5\t\t! outp[0] = vout0 \\\n-', `$2', `2', ` \\\n-\tstvx \tvr8, r0, r5\t\t! outp[0] = vout0 \\\n-\tstvx \tvr9, r8, r5\t\t! outp[1] = vout1 \\\n-', `$2', `3', ` \\\n-\tstvx \tvr8, r0, r5\t\t! outp[0] = vout0 \\\n-\tstvx \tvr9, r8, r5\t\t! outp[1] = vout1 \\\n-\tstvx \tvr10, r9, r5\t\t! outp[2] = vout2 \\\n-', `$2', `4', ` \\\n-\tstvx \tvr8, r0, r5\t\t! outp[0] = vout0 \\\n-\tstvx \tvr9, r8, r5\t\t! outp[1] = vout1 \\\n-\tstvx \tvr10, r9, r5\t\t! outp[2] = vout2 \\\n-\tstvx \tvr11, r5, r0\t\t! outp[3] = vout3  (Note: r0 must be the last parameter) \\\n-') \\\n-\taddi \tr3, r3, 16*`$2'\t\t! index += 16*NUM SPEC \\\n-\taddi \tr5, r5, 16*`$2'\t\t! outp += 16*NUM SPEC \\\n-)\n-!----------------------------------------------------------------------\n-! end of macro macroArrayTranslateUnrolledBodyN\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! macro macroArrayTranslateTrailer\n-!----------------------------------------------------------------------\n-\t! Trailer processing (partial block with missing part at last)\n-\t!\n-\t!   Reg.        Input           Output          Use\n-\t!-------------------------------------------------------------------\n-\t!   r0          const48         const48\n-\t!   r3          index           index+trailerCount\n-\t!   r4          inp             inp (unchanged)\n-\t!   r5          outp (aligned)  outp (unchanged)\n-\t!   r6          len             len\n-\t!   r7          (maxChar)       maxChar\n-\t!   r8          const16         const16\n-\t!   r9          const32         const32\n-\t!   r10         (headerCount)   headerCount\n-\t!   r11         (blockCount)    blockCount\n-\t!   r12         trailerCount    trailerCount\n-\t!\n-\t!   vr0         vmaxChars       vmaxChars\n-\t!   vr1                         DESTROYED       vpat vopat\n-\t!   vr2                         DESTROYED       vin0 vcmp0 vcmp01 vcmp01_masked dummy\n-\t!   vr3                         DESTROYED       vin1 vcmp1 vomask\n-\t!   vr4                         DESTROYED       vin2 vorig\n-\t!   vr5                         DESTROYED       v0 vout/vout_sel\n-\t!   vr6                         DESTROYED       v1 vconst_0x0f\n-\t!\n-\t! Exceptional case: Exit to L.doScalar\n-\t!   r3     cur. index\n-\t!   r4     cur. inp\n-\t!   r5     our. outp\n-\t!   r6     len\n-\t!   r7     maxChar\n-\t! Now we are at 16-byte aligned, and have 0..15 characters to go.\n-!.macro macroArrayTranslateTrailer\n-define(`macroArrayTranslateTrailer', ` \\\n-! macrocall: `$0'() \\\n-\tlvsl \tvr1, r0, r4\t\t! vpat = lvsl(0, inp) \\\n-\tlvx \tvr2, r0, r4\t\t! vin0 = *(vector *)inp \\\n-\tlvx \tvr3, r8, r4\t\t! vin1 = *((vector *)inp + 1) \\\n-\tlvx \tvr4, r9, r4\t\t! vin2 = *((vector *)inp + 2) \\\n-\tvperm \tvr5, vr2, vr3, vr1\t! v0 = perm(vin0, vin1, vpat) \\\n-\tvperm \tvr6, vr3, vr4, vr1  \t! v1 = perm(vin1, vin2, vpat) \\\n-\tvcmpgtuh vr2, vr5, vr0\t\t! vcmp0 = vec_vcmpgt(v0, vmaxChars) \\\n-\tvcmpgtuh vr3, vr6, vr0\t\t! vcmp1 = vec_vcmpgt(v1, vmaxChars) \\\n-\tvpkuhum  vr2,vr2,vr3\t\t! vcmp01 = vec_pack(vcmp0, vcmp1) \\\n-\tlvsr \tvr1, r0, r12\t\t! vopat = lvsr(0, trailerCount) \\\n-\tvpkuhum\tvr5, vr5, vr6\t\t! vout = pack(v0, v1) \\\n-\tvspltisb vr6, 15\t\t! vconst_0x0f = vec_splat_u8(15) \\\n-\tvcmpgtub vr3, vr1, vr6\t\t! vomask = vec_cmpgt(vopat, vconst_0x0f)   (count)\"00\" . (16-count)\"ff\" \\\n-\tvandc    vr2, vr2, vr3\t\t! vcmp01_masked = vec_andc(vcmp01, vomask) \\\n-\tvcmpgtub.   vr2,vr2,vr6         ! if (vec_any_gt(vcmp01_masked,vconst_0x0f))... \\\n-\tbc \tBO_IF_NOT_2, CR6_EQ, L.doScalar\t! Yes, do scalar processing (statically predicted as unlikely) \\\n-\tlvx\tvr4, r0, r5\t\t! vorig = vec_ld(0, outp) \\\n-\tvsel\tvr5, vr5, vr4, vr3\t! vout = vec_sel(vout, vorig, vomask) \\\n-\tadd \tr3, r3, r12\t\t! index += trailerCount \\\n-\tstvx \tvr5, r0, r5\t\t! *outp = vout \\\n-)\n-!----------------------------------------------------------------------\n-! end of macro macroArrayTranslateTrailer\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! macro macroArrayTranslate\n-!----------------------------------------------------------------------\n-define(`mkLabel', `L.$1$2$3$4$5$6$7')\n-\n-!macro macroArrayTranslate swSrcDstAlign,swHeader,swBlock4Loop,swBlock2,swBlock1,swTrailer\n-define(`macroArrayTranslate', ` \\\n-! macrocall: `$0'(`$1', `$2', `$3', `$4', `$5', `$6') \\\n-\t! Process partial block at beginning if any exists \\\n-ifelse(`$2', `1', ` \\\n-\tmacroArrayTranslateHeader() \\\n-') \\\n-\t! Prepare const48, vpat, and load the first vector into vin0 \\\n-    \tmacroArrayTranslateUnrollInit(`$1') \\\n-\t! Process 4x unrolled block loop if any exists \\\n-ifelse($3, `1', ` \\\n-\tmtctr \tr11\t\t\t! Number of 16-byte aligned 4*16-byte blocks. Non-zero guaranteed \\\n-mkLabel(`$0', `$1', `$2', `$3', `$4', `$5', `$6'): \\\n-\tmacroArrayTranslateUnrolledBodyN($1, 4) \\\n-\tbdnz mkLabel(`$0', `$1', `$2', `$3', `$4', `$5', `$6') \\\n-') \\\n-\t! Process a pair of blocks if any exists. Destination is 16-byte aligned \\\n-ifelse($4, `1', ` \\\n-\tmacroArrayTranslateUnrolledBodyN($1, 2) \\\n-') \\\n-\t! Process a full block if any exists. Destination is 16-byte aligned \\\n-ifelse($5, `1', ` \\\n-\tmacroArrayTranslateUnrolledBodyN($1, 1) \\\n-') \\\n-    \t! Process a partial block if any exists. Destination is 16-byte aligned \\\n-ifelse($6, `1', ` \\\n-    \tmacroArrayTranslateTrailer() \\\n-') \\\n-\t! Return to the caller \\\n-\taddi \tr3, r3, -1\t\t! index - 1 \\\n-\tbclr\tBO_ALWAYS, CR0_EQ \\\n-) \\\n-    \t!.endm\n-!----------------------------------------------------------------------\n-! end of macro macroArrayTranslate\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! entry partialVectr010\n-!----------------------------------------------------------------------\n-\t! Partial block processing (partial block with missing at both start and end\n-\t!\n-\t! ...|...OOOOOOOOO....|...\n-\t!        A        A\n-\t!        |        |\n-\t!       inp     inp+len\n-\t!\n-\t!    - inp is NOT 16-byte aligned.\n-\t!    - (inp+len) is NOT 16-byte aligned.\n-\t!    - (inp+len) falls into the same block as inp.\n-\t!    - len=0 case is also handled properly (though not so fast)\n-\t!\n-\t!   Reg.        Input           Output          Use\n-\t!-------------------------------------------------------------------\n-\t!   r0          const48         const48\n-\t!   r3          index           index+headerCount\n-\t!   r4          inp             inp+headerCount*2\n-\t!   r5          outp            outp+headerCount\n-\t!   r6          (len)           len\n-\t!   r7          (maxChar)       maxChar\n-\t!   r8          const16         const16\n-\t!   r9          const32         const32\n-\t!   r10         headerCount     headerCount\n-\t!   r11         (blockCount)    blockCount\n-\t!   r12         (trailerCount)  trailerCount\n-\t!\n-\t!   vr0         vmaxChars       vmaxChars\n-\t!   vr1                         DESTROYED       vpat vopat\n-\t!   vr2                         DESTROYED       vin0 vcmp0 vcmp01 vcmp01_masked dummy\n-\t!   vr3                         DESTROYED       vin1 vcmp1 vomask\n-\t!   vr4                         DESTROYED       vin2 vorig vmask_right\n-\t!   vr5                         DESTROYED       v0 vout/vout_shift/vout_sel\n-\t!   vr6                         DESTROYED       v1 vconst_0x0f\n-\t!\n-\t! Exceptional case: Exit to L.doScalar\n-\t!   r3     cur. index\n-\t!   r4     cur. inp\n-\t!   r5     our. outp\n-\t!   r6     len\n-\t!   r7     maxChar\n-L.partialVector010:\n-    \tlvsl \tvr1, r0, r4\t\t! vpat = lvsl(0, inp)\n-\tlvx \tvr2, r0, r4\t\t! vin0 = *(vector *)inp\n-\tlvx \tvr3, r8, r4\t\t! vin1 = *((vector *)inp + 1)\n-\tlvx \tvr4, r9, r4\t\t! vin2 = *((vector *)inp + 2)\n-\tvperm \tvr5, vr2, vr3, vr1\t! v0 = perm(vin0, vin1, vpat)\n-\tvperm \tvr6, vr3, vr4, vr1  \t! v1 = perm(vin1, vin2, vpat)\n-\tvcmpgtuh vr2, vr5, vr0\t\t! vcmp0 = vec_cmpgt(v0, vmaxChars)\n-\tvcmpgtuh vr3, vr6, vr0\t\t! vcmp1 = vec_cmpgt(v1, vmaxChars)\n-\tvpkuhum vr2,vr2,vr3\t\t! vcmp01 = vec_pack(vcmp0, vcmp1)   ! left adjusted packed comp. result\n-\tlvsr\tvr1, r0, r5\t\t! vopat = lvsr(0, output)\n-\tvperm\tvr2, vr2, vr2, vr1\t! vcomp01 = vec_perm(vcmp01, vcmp01, vopat) Adjust packed compare result\n-\tvpkuhum\tvr5, vr5, vr6\t\t! vout = pack(v0, v1)\t\t    ! left adjusted packed result\n-\tvspltisb vr6, 15\t\t! vconst_0x0f = vec_splat_u8(15)\n-\tvcmpgtub vr3, vr1, vr6\t\t! vomask = vec_cmpgt(vopat, vconst_0x0f) (output&15)\"00\" . (16-(output&15))\"ff\"\n-\t! specific to partialBlock\n-\tlvsr\tvr4, r6, r5\t\t! vmask_right = lvsr(len, outp)\n-\tvcmpgtub vr4, vr4, vr6\t\t! vmask_right = vec_cmpgtub(vmask_right, vconst_0x0f)\n-\tvandc\tvr3, vr3, vr4\t\t! vomask = vec_andc(vomask, vmask_right)\n-\t! end of specific to partialBlock\n-\tvand    vr2, vr2, vr3\t\t! vcmp01_masked = vec_and(vcmp01, vomask)\n-\tvcmpgtub.   vr2,vr2,vr6         ! if (vec_any_gt(vcmp01_masked,vconst_0x0f))...\n-\tbc \tBO_IF_NOT_2, CR6_EQ, L.doScalar\t! Yes, do scalar processing (statically predicted as unlikely)\n-\tvperm\tvr5, vr5, vr5, vr1\t! vout = vec_perm(vout, vout, vopat). Adjust packed result\n-\tlvx\tvr4, r0, r5\t\t! vorig = vec_ld(0, outp)\n-\tvsel\tvr5, vr4, vr5, vr3\t! vout = vec_sel(vorig, vout, vomask)\n-\t!!add \tr3, r3, r10\t\t! index += headerCount\t    SCHED:Can be moved anywhere in this macro\n-\tadd \tr3, r3, r6\t\t! index += len\t\t    SCHED:Can be moved anywhere in this macro\n-\t!!add \tr4, r4, r10\t\t! inp += 2 * headerCount    SCHED:anywhere after the 3rd lvx\n-\t!!add \tr4, r4, r10\t\t!\n-\tstvx \tvr5, r0, r5\t\t! *outp = vout\n-\t!!add \tr5, r5, r10\t\t! outp += headerCount\n-\n-\t! Return to the caller\n-\taddi \tr3, r3, -1\t\t! index - 1\n-\tbclr\tBO_ALWAYS, CR0_EQ\n-\n-!----------------------------------------------------------------------\n-! end of partialVectr010\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! entry doScalar\n-!----------------------------------------------------------------------\n-\t! doScalar    Generic and slow routine\n-\t!\n-\t!   Reg.        Input           Output          Use\n-\t!-------------------------------------------------------------------\n-\t!   r3          index           result\n-\t!   r4          inp             DESTROYED\n-\t!   r5          outp            DESTROYED\n-\t!   r6          len             DESTROYED       count ch\n-\t!   r7          maxChar         maxChar\n-L.doScalar4: \t\t\t\t! rewind four chars. before start\n-\taddi\tr5, r5, -32\n-L.doScalar3: \t\t\t\t! rewind three chars. before start\n-\taddi\tr5, r5, -32\n-L.doScalar2:\t\t\t\t! rewind two chars. before start\n-\taddi\tr5, r5, -32\n-L.doScalar1:\n-\taddi\tr5, r5, -32\t\t! rewind one char. before start\n-L.doScalar0:\n-L.doScalar:\n-\tsubf. \tr6, r3, r6\t\t! (count = len - index) == 0 ?\n-\tbc \tBO_IF_2,CR0_EQ, L.doScalarExit\t! Yes, exit immediately (statically predicted as unlikely)\n-\tmtctr \tr6\t\t\t! CTR = count\n-\taddi \tr5, r5, -1\t\t! outp--\n-\taddi \tr4, r4, -2\t\t! inp--\n-L.doScalarLoop:\n-\tlhzu \tr6, 2(r4)\t\t! ch = *++inp\n-\tcmplw \tcr0, r6, r7\t\t! ch > maxChar ?\n-\tbc \tBO_IF_2,CR0_GT, L.doScalarExit\t! Yes, we have found an invalid char. (statically predicted as unlikely)\n-\tstbu \tr6,1(r5)\t\t! *++outp = ch\n-\taddi \tr3, r3, 1\t\t! index++\n-\tbdnz \tL.doScalarLoop\t\t! Decrement CTR and continue loop if not zero\n-L.doScalarExit:\n-L.doNull:\n-\taddi \tr3, r3, -1\t\t! return (index - 1)\n-\tbclr\tBO_ALWAYS, CR0_EQ\n-!----------------------------------------------------------------------\n-! end of doScalar\n-!----------------------------------------------------------------------\n-\n-!----------------------------------------------------------------------\n-! Handlers\n-!----------------------------------------------------------------------\n-\t.align\t5\n-L.vector000000:\n-\tmacroArrayTranslate(`0',`0',`0',`0',`0',`0')\n-\t.align\t5\n-L.vector000001:\n-\tmacroArrayTranslate(`0',`0',`0',`0',`0',`1')\n-\t.align\t5\n-L.vector000010:\n-\tmacroArrayTranslate(`0',`0',`0',`0',`1',`0')\n-\t.align\t5\n-L.vector000011:\n-\tmacroArrayTranslate(`0',`0',`0',`0',`1',`1')\n-\t.align\t5\n-L.vector000100:\n-\tmacroArrayTranslate(`0',`0',`0',`1',`0',`0')\n-\t.align\t5\n-L.vector000101:\n-\tmacroArrayTranslate(`0',`0',`0',`1',`0',`1')\n-\t.align\t5\n-L.vector000110:\n-\tmacroArrayTranslate(`0',`0',`0',`1',`1',`0')\n-\t.align\t5\n-L.vector000111:\n-\tmacroArrayTranslate(`0',`0',`0',`1',`1',`1')\n-\t.align\t5\n-L.vector001000:\n-\tmacroArrayTranslate(`0',`0',`1',`0',`0',`0')\n-\t.align\t5\n-L.vector001001:\n-\tmacroArrayTranslate(`0',`0',`1',`0',`0',`1')\n-\t.align\t5\n-L.vector001010:\n-\tmacroArrayTranslate(`0',`0',`1',`0',`1',`0')\n-\t.align\t5\n-L.vector001011:\n-\tmacroArrayTranslate(`0',`0',`1',`0',`1',`1')\n-\t.align\t5\n-L.vector001100:\n-\tmacroArrayTranslate(`0',`0',`1',`1',`0',`0')\n-\t.align\t5\n-L.vector001101:\n-\tmacroArrayTranslate(`0',`0',`1',`1',`0',`1')\n-\t.align\t5\n-L.vector001110:\n-\tmacroArrayTranslate(`0',`0',`1',`1',`1',`0')\n-\t.align\t5\n-L.vector001111:\n-\tmacroArrayTranslate(`0',`0',`1',`1',`1',`1')\n-\t.align\t5\n-L.vector010000:\n-\tmacroArrayTranslate(`0',`1',`0',`0',`0',`0')\n-\t.align\t5\n-L.vector010001:\n-\tmacroArrayTranslate(`0',`1',`0',`0',`0',`1')\n-\t.align\t5\n-L.vector010010:\n-\tmacroArrayTranslate(`0',`1',`0',`0',`1',`0')\n-\t.align\t5\n-L.vector010011:\n-\tmacroArrayTranslate(`0',`1',`0',`0',`1',`1')\n-\t.align\t5\n-L.vector010100:\n-\tmacroArrayTranslate(`0',`1',`0',`1',`0',`0')\n-\t.align\t5\n-L.vector010101:\n-\tmacroArrayTranslate(`0',`1',`0',`1',`0',`1')\n-\t.align\t5\n-L.vector010110:\n-\tmacroArrayTranslate(`0',`1',`0',`1',`1',`0')\n-\t.align\t5\n-L.vector010111:\n-\tmacroArrayTranslate(`0',`1',`0',`1',`1',`1')\n-\t.align\t5\n-L.vector011000:\n-\tmacroArrayTranslate(`0',`1',`1',`0',`0',`0')\n-\t.align\t5\n-L.vector011001:\n-\tmacroArrayTranslate(`0',`1',`1',`0',`0',`1')\n-\t.align\t5\n-L.vector011010:\n-\tmacroArrayTranslate(`0',`1',`1',`0',`1',`0')\n-\t.align\t5\n-L.vector011011:\n-\tmacroArrayTranslate(`0',`1',`1',`0',`1',`1')\n-\t.align\t5\n-L.vector011100:\n-\tmacroArrayTranslate(`0',`1',`1',`1',`0',`0')\n-\t.align\t5\n-L.vector011101:\n-\tmacroArrayTranslate(`0',`1',`1',`1',`0',`1')\n-\t.align\t5\n-L.vector011110:\n-\tmacroArrayTranslate(`0',`1',`1',`1',`1',`0')\n-\t.align\t5\n-L.vector011111:\n-\tmacroArrayTranslate(`0',`1',`1',`1',`1',`1')\n-!--\n-\t.align\t5\n-L.vector100000:\n-\tmacroArrayTranslate(`1',`0',`0',`0',`0',`0')\n-\t.align\t5\n-L.vector100001:\n-\tmacroArrayTranslate(`1',`0',`0',`0',`0',`1')\n-\t.align\t5\n-L.vector100010:\n-\tmacroArrayTranslate(`1',`0',`0',`0',`1',`0')\n-\t.align\t5\n-L.vector100011:\n-\tmacroArrayTranslate(`1',`0',`0',`0',`1',`1')\n-\t.align\t5\n-L.vector100100:\n-\tmacroArrayTranslate(`1',`0',`0',`1',`0',`0')\n-\t.align\t5\n-L.vector100101:\n-\tmacroArrayTranslate(`1',`0',`0',`1',`0',`1')\n-\t.align\t5\n-L.vector100110:\n-\tmacroArrayTranslate(`1',`0',`0',`1',`1',`0')\n-\t.align\t5\n-L.vector100111:\n-\tmacroArrayTranslate(`1',`0',`0',`1',`1',`1')\n-\t.align\t5\n-L.vector101000:\n-\tmacroArrayTranslate(`1',`0',`1',`0',`0',`0')\n-\t.align\t5\n-L.vector101001:\n-\tmacroArrayTranslate(`1',`0',`1',`0',`0',`1')\n-\t.align\t5\n-L.vector101010:\n-\tmacroArrayTranslate(`1',`0',`1',`0',`1',`0')\n-\t.align\t5\n-L.vector101011:\n-\tmacroArrayTranslate(`1',`0',`1',`0',`1',`1')\n-\t.align\t5\n-L.vector101100:\n-\tmacroArrayTranslate(`1',`0',`1',`1',`0',`0')\n-\t.align\t5\n-L.vector101101:\n-\tmacroArrayTranslate(`1',`0',`1',`1',`0',`1')\n-\t.align\t5\n-L.vector101110:\n-\tmacroArrayTranslate(`1',`0',`1',`1',`1',`0')\n-\t.align\t5\n-L.vector101111:\n-\tmacroArrayTranslate(`1',`0',`1',`1',`1',`1')\n-\t.align\t5\n-L.vector110000:\n-\tmacroArrayTranslate(`1',`1',`0',`0',`0',`0')\n-\t.align\t5\n-L.vector110001:\n-\tmacroArrayTranslate(`1',`1',`0',`0',`0',`1')\n-\t.align\t5\n-L.vector110010:\n-\tmacroArrayTranslate(`1',`1',`0',`0',`1',`0')\n-\t.align\t5\n-L.vector110011:\n-\tmacroArrayTranslate(`1',`1',`0',`0',`1',`1')\n-\t.align\t5\n-L.vector110100:\n-\tmacroArrayTranslate(`1',`1',`0',`1',`0',`0')\n-\t.align\t5\n-L.vector110101:\n-\tmacroArrayTranslate(`1',`1',`0',`1',`0',`1')\n-\t.align\t5\n-L.vector110110:\n-\tmacroArrayTranslate(`1',`1',`0',`1',`1',`0')\n-\t.align\t5\n-L.vector110111:\n-\tmacroArrayTranslate(`1',`1',`0',`1',`1',`1')\n-\t.align\t5\n-L.vector111000:\n-\tmacroArrayTranslate(`1',`1',`1',`0',`0',`0')\n-\t.align\t5\n-L.vector111001:\n-\tmacroArrayTranslate(`1',`1',`1',`0',`0',`1')\n-\t.align\t5\n-L.vector111010:\n-\tmacroArrayTranslate(`1',`1',`1',`0',`1',`0')\n-\t.align\t5\n-L.vector111011:\n-\tmacroArrayTranslate(`1',`1',`1',`0',`1',`1')\n-\t.align\t5\n-L.vector111100:\n-\tmacroArrayTranslate(`1',`1',`1',`1',`0',`0')\n-\t.align\t5\n-L.vector111101:\n-\tmacroArrayTranslate(`1',`1',`1',`1',`0',`1')\n-\t.align\t5\n-L.vector111110:\n-\tmacroArrayTranslate(`1',`1',`1',`1',`1',`0')\n-\t.align\t5\n-L.vector111111:\n-\tmacroArrayTranslate(`1',`1',`1',`1',`1',`1')\n-\n-!----------------------------------------------------------------------\n-! endof Handlers\n-!----------------------------------------------------------------------\n-    \tendproc.__arrayTranslateTRTOSimpleVMX:", "originalCommit": "e125d897e23f618a20baa75c4a87fe00417b3fd2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7e54225984bd1d1a4770e6d3e558c3356a0a63c0", "url": "https://github.com/eclipse-openj9/openj9/commit/7e54225984bd1d1a4770e6d3e558c3356a0a63c0", "message": "code cleanup for unused __arrayTranslateTRTOSimpleVMX function\napparantly this function was introduce to compress string on z arch.\nHowever, this function is not used any more and is being treated as\ndead code for 2y+.\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-03-30T15:48:40Z", "type": "forcePushed"}, {"oid": "d9f1e786506e9075b6e00ceab744e29e8183cb14", "url": "https://github.com/eclipse-openj9/openj9/commit/d9f1e786506e9075b6e00ceab744e29e8183cb14", "message": "Code cleanup for unused __arrayTranslateTRTOSimpleVMX function\nApparently this function was introduced to compress strings on Z arch.\nHowever, this function is not used any more and is being treated as\ndead code for 2y+.\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-03-30T17:38:23Z", "type": "commit"}, {"oid": "d9f1e786506e9075b6e00ceab744e29e8183cb14", "url": "https://github.com/eclipse-openj9/openj9/commit/d9f1e786506e9075b6e00ceab744e29e8183cb14", "message": "Code cleanup for unused __arrayTranslateTRTOSimpleVMX function\nApparently this function was introduced to compress strings on Z arch.\nHowever, this function is not used any more and is being treated as\ndead code for 2y+.\n\nSigned-off-by: Mohammad Nazmul Alam <mohammad.nazmul.alam@ibm.com>", "committedDate": "2020-03-30T17:38:23Z", "type": "forcePushed"}]}