{"pr_number": 8364, "pr_title": "Avoid control flow for copying heap allocations to temporaries", "pr_createdAt": "2020-01-21T20:14:22Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8364", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1NjkyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8364#discussion_r370156928", "bodyText": "In an off-line conversation, Andrew @andrewcraik recommended that I try to pull the code that appears between the two blocks of code guarded by tests of useTernaryOp into a separate method, which would then be called in both cases. That would allow the two blocks of code for the !useTernaryOp case to be merged, improving readability.\nAndrew, I've made that change in commit f66b989.  If you are OK with that change, I will merge the two commits.", "author": "hzongaro", "createdAt": "2020-01-23T14:42:14Z", "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -7450,29 +7506,32 @@ void TR_EscapeAnalysis::heapifyBeforeColdBlocks(Candidate *candidate)\n            initStoreTree->join(nextToStart);\n            }", "originalCommit": "3cf0f8593cd3eff46f166ec95f02e6d1cd9ba07a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE2MTMxMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8364#discussion_r370161311", "bodyText": "@hzongaro thank you for having a look at that - I think the code is much cleaner now - no locals carried across ifs and the isolated logic actually has an nice understandable name and makes a lot of sense. Overall a huge improvement - thank you for doing the work to add another layer of polish to this change. Please squash and I will do a final read and start sanity.", "author": "andrewcraik", "createdAt": "2020-01-23T14:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE1NjkyOA=="}], "type": "inlineReview"}, {"oid": "0b0d112b967fef968e6f2be074750d6956952fa5", "url": "https://github.com/eclipse-openj9/openj9/commit/0b0d112b967fef968e6f2be074750d6956952fa5", "message": "Avoid control flow for copying heap allocations to temporaries\n\nUpdates of all the temporaries that contain the address of a candidate\nobject for cold block heapification are currently guarded with ifacmpne\ninstructions.  In order to simplify the control flow graph produced for\nheapification before cold blocks, replace the conditional update of each\ntemporary with an unconditional store using the result of an aternary\ninstruction that either updates the temporary with the heap object\naddress or with the current contents of the temporary unconditionally.\nThis update is inserted into the start of the cold block rather than in\na new block preceding the cold block.\n\nThis is only done if code generation supports ternary opcodes.  If\nternary opcodes are not supported, ifacmpne checks are still generated\ninstead.  The ifacmpne checks can also be forced by setting the\nenvironment variable TR_disableTernaryOpForEA.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-01-23T14:52:13Z", "type": "commit"}, {"oid": "0b0d112b967fef968e6f2be074750d6956952fa5", "url": "https://github.com/eclipse-openj9/openj9/commit/0b0d112b967fef968e6f2be074750d6956952fa5", "message": "Avoid control flow for copying heap allocations to temporaries\n\nUpdates of all the temporaries that contain the address of a candidate\nobject for cold block heapification are currently guarded with ifacmpne\ninstructions.  In order to simplify the control flow graph produced for\nheapification before cold blocks, replace the conditional update of each\ntemporary with an unconditional store using the result of an aternary\ninstruction that either updates the temporary with the heap object\naddress or with the current contents of the temporary unconditionally.\nThis update is inserted into the start of the cold block rather than in\na new block preceding the cold block.\n\nThis is only done if code generation supports ternary opcodes.  If\nternary opcodes are not supported, ifacmpne checks are still generated\ninstead.  The ifacmpne checks can also be forced by setting the\nenvironment variable TR_disableTernaryOpForEA.\n\nSigned-off-by:  Henry Zongaro <zongaro@ca.ibm.com>", "committedDate": "2020-01-23T14:52:13Z", "type": "forcePushed"}]}