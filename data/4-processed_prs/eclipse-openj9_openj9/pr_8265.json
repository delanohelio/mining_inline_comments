{"pr_number": 8265, "pr_title": "Add new omrsysinfo_get_CPU_load API", "pr_createdAt": "2020-01-09T20:35:33Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8265", "timeline": [{"oid": "2529e110e070af7b00e39bd9a45617c4283bb6fa", "url": "https://github.com/eclipse-openj9/openj9/commit/2529e110e070af7b00e39bd9a45617c4283bb6fa", "message": "Use new OMR API to implement getSystemCpuLoad\n\nA new OMR port library API `omrsysinfo_get_CPU_load` has been\nimplemented which calculates the CPU load for us. The OMR API is a\nreplica of how we currently calculate the CPU load (the logic from\nOpenJ9 has been sunk down into OMR).\n\nIn this commit we make use of the new API as it provides support for\nall operating systems we build OpenJ9 on.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>", "committedDate": "2020-01-09T20:31:38Z", "type": "commit"}, {"oid": "2e67cdd1a478188846483e480c1b0595a49a8b7d", "url": "https://github.com/eclipse-openj9/openj9/commit/2e67cdd1a478188846483e480c1b0595a49a8b7d", "message": "Enable z/OS testing in TestGetSystemCpuLoad\n\nNow that we support obtaining system CPU load on z/OS we can safely\nenable testing of the MXBean API.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>", "committedDate": "2020-01-09T20:31:38Z", "type": "commit"}, {"oid": "272278a9774960b885334e4efd596576a15ed03b", "url": "https://github.com/eclipse-openj9/openj9/commit/272278a9774960b885334e4efd596576a15ed03b", "message": "Reduce code duplication in TestGetSystemCpuLoad\n\nThere are two tests in this test suite which both basically do the same\nthing. We take the union of both tests and extract the logic into a\nfunction which we can then call from both tests.\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>", "committedDate": "2020-01-09T20:31:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3MDA1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r381570050", "bodyText": "This variable should be initialized.", "author": "pshipton", "createdAt": "2020-02-19T21:59:30Z", "path": "runtime/jcl/common/mgmtosext.c", "diffHunk": "@@ -79,6 +79,32 @@ Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getProce\n \treturn (0 == rc)? (jlong) size: (jlong) -1;\n }\n \n+jdouble JNICALL\n+Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getSystemCpuLoadImpl(JNIEnv *env, jobject instance) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+\tdouble cpuLoad;", "originalCommit": "1748d2fab82fd236c71ab5785cb520e1cfc59fb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1NjAzOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382056039", "bodyText": "Fixed in e200fcd", "author": "fjeremic", "createdAt": "2020-02-20T15:03:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3MDA1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3NDEyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r381574124", "bodyText": "I don't see why this is needed, the code could call omrsysinfo directly. I assume the existing macros were added to avoid having to change all the OpenJ9 code to call omr. Perhaps subsequent changes have followed the same pattern for no reason, but it would be clearer to call omr directly for anything new.", "author": "pshipton", "createdAt": "2020-02-19T22:08:22Z", "path": "runtime/oti/j9port_generated.h", "diffHunk": "@@ -620,6 +620,7 @@ extern J9_CFUNC int32_t j9port_isCompatible(struct J9PortLibraryVersion *expecte\n #define j9sysinfo_get_groupname(param1,param2) OMRPORT_FROM_J9PORT(privatePortLibrary)->sysinfo_get_groupname(OMRPORT_FROM_J9PORT(privatePortLibrary),param1,param2)\n #define j9sysinfo_get_load_average(param1) OMRPORT_FROM_J9PORT(privatePortLibrary)->sysinfo_get_load_average(OMRPORT_FROM_J9PORT(privatePortLibrary),param1)\n #define j9sysinfo_get_CPU_utilization(param1) OMRPORT_FROM_J9PORT(privatePortLibrary)->sysinfo_get_CPU_utilization(OMRPORT_FROM_J9PORT(privatePortLibrary),param1)\n+#define j9sysinfo_get_CPU_load(param1) OMRPORT_FROM_J9PORT(privatePortLibrary)->sysinfo_get_CPU_load(OMRPORT_FROM_J9PORT(privatePortLibrary),param1)", "originalCommit": "1748d2fab82fd236c71ab5785cb520e1cfc59fb9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA1NTk5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382055997", "bodyText": "I agree. I wondered that myself. Fixed in e200fcd", "author": "fjeremic", "createdAt": "2020-02-20T15:03:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3NDEyNA=="}], "type": "inlineReview"}, {"oid": "1f3ba304581f234f0b6126a69f2d0f674dfbdb5d", "url": "https://github.com/eclipse-openj9/openj9/commit/1f3ba304581f234f0b6126a69f2d0f674dfbdb5d", "message": "Deprecate j9sysinfo_get_CPU_load and use omrsysinfo_get_CPU_load\n\nIn addition:\n\n- Update copyrights to 2020\n- Initialize uninitialized local variables\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>", "committedDate": "2020-02-20T15:02:40Z", "type": "forcePushed"}, {"oid": "65fb41926e591fa183c419a8e3e09fcaa56b5140", "url": "https://github.com/eclipse-openj9/openj9/commit/65fb41926e591fa183c419a8e3e09fcaa56b5140", "message": "Deprecate j9sysinfo_get_CPU_load and use omrsysinfo_get_CPU_load\n\nIn addition:\n\n- Update copyrights to 2020\n- Initialize uninitialized local variables\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>", "committedDate": "2020-02-20T16:41:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzMTczMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382131730", "bodyText": "should be PORTLIB, I think portLibrary won't be defined.", "author": "rwy0717", "createdAt": "2020-02-20T16:59:20Z", "path": "runtime/jcl/common/mgmtosext.c", "diffHunk": "@@ -79,6 +79,33 @@ Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getProce\n \treturn (0 == rc)? (jlong) size: (jlong) -1;\n }\n \n+jdouble JNICALL\n+Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getSystemCpuLoadImpl(JNIEnv *env, jobject instance) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+   OMRPORT_ACCESS_FROM_J9PORT(portLibrary);", "originalCommit": "65fb41926e591fa183c419a8e3e09fcaa56b5140", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNjMwNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382136307", "bodyText": "Fixed in e200fcd", "author": "fjeremic", "createdAt": "2020-02-20T17:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzMTczMA=="}], "type": "inlineReview"}, {"oid": "e200fcd0089727bb8c11ffa2d51bc48880865951", "url": "https://github.com/eclipse-openj9/openj9/commit/e200fcd0089727bb8c11ffa2d51bc48880865951", "message": "Deprecate j9sysinfo_get_CPU_load and use omrsysinfo_get_CPU_load\n\nIn addition:\n\n- Update copyrights to 2020\n- Initialize uninitialized local variables\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>", "committedDate": "2020-02-20T17:06:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNjg3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382136878", "bodyText": "This method can be static.", "author": "keithc-ca", "createdAt": "2020-02-20T17:08:16Z", "path": "jcl/src/jdk.management/share/classes/com/ibm/lang/management/internal/ExtendedOperatingSystemMXBeanImpl.java", "diffHunk": "@@ -426,9 +424,11 @@ public final long getProcessVirtualMemorySize() {\n \t */\n \t@Override\n \tpublic final double getSystemCpuLoad() {\n-\t\treturn cpuUtilizationHelper.getSystemCpuLoad();\n+\t\treturn this.getSystemCpuLoadImpl();\n \t}\n \n+\tprivate native double getSystemCpuLoadImpl();", "originalCommit": "e200fcd0089727bb8c11ffa2d51bc48880865951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1ODkxOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382158918", "bodyText": "The reason this was not done was to remain consistent with the other APIs within this same class. For example, by the same logic the following APIs could be made static as well:\nhttps://github.com/eclipse/openj9/blob/0ae4f22e2d7769fb2796382ef2b33bcacb749ff2/jcl/src/jdk.management/share/classes/com/ibm/lang/management/internal/ExtendedOperatingSystemMXBeanImpl.java#L338\nhttps://github.com/eclipse/openj9/blob/0ae4f22e2d7769fb2796382ef2b33bcacb749ff2/jcl/src/jdk.management/share/classes/com/ibm/lang/management/internal/ExtendedOperatingSystemMXBeanImpl.java#L353\nhttps://github.com/eclipse/openj9/blob/0ae4f22e2d7769fb2796382ef2b33bcacb749ff2/jcl/src/jdk.management/share/classes/com/ibm/lang/management/internal/ExtendedOperatingSystemMXBeanImpl.java#L391\nhttps://github.com/eclipse/openj9/blob/0ae4f22e2d7769fb2796382ef2b33bcacb749ff2/jcl/src/jdk.management/share/classes/com/ibm/lang/management/internal/ExtendedOperatingSystemMXBeanImpl.java#L422\netc. (there are dozens more). As such making this new API static would be inconsistent with the others. Would it be reasonable to not deviate from these other similar APIs, and instead open up an issue to bulk-change them all to be static?", "author": "fjeremic", "createdAt": "2020-02-20T17:48:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNjg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQyNTEwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r383425101", "bodyText": "I'm fine with following the pattern and opening an issue to clean up later (unless a static native is more expensive than a non-static one).", "author": "keithc-ca", "createdAt": "2020-02-24T18:04:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNjg3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMjEwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r383602103", "bodyText": "I've opened up #8647 to track this work. Thanks for identifying the opportunity.", "author": "fjeremic", "createdAt": "2020-02-25T00:55:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNjg3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNzA2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382137063", "bodyText": "Inconsistent indentation.", "author": "keithc-ca", "createdAt": "2020-02-20T17:08:38Z", "path": "runtime/jcl/common/mgmtosext.c", "diffHunk": "@@ -79,6 +79,33 @@ Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getProce\n \treturn (0 == rc)? (jlong) size: (jlong) -1;\n }\n \n+jdouble JNICALL\n+Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getSystemCpuLoadImpl(JNIEnv *env, jobject instance) {\n+\tPORT_ACCESS_FROM_ENV(env);\n+   OMRPORT_ACCESS_FROM_J9PORT(PORTLIB);", "originalCommit": "e200fcd0089727bb8c11ffa2d51bc48880865951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1NjU1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382156559", "bodyText": "Fixed in force-push.", "author": "fjeremic", "createdAt": "2020-02-20T17:44:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNzA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNzkwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382137903", "bodyText": "Please undo this change - the file is otherwise unmodified.", "author": "keithc-ca", "createdAt": "2020-02-20T17:10:16Z", "path": "runtime/oti/j9port_generated.h", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 1991, 2019 IBM Corp. and others\n+ * Copyright (c) 1991, 2020 IBM Corp. and others", "originalCommit": "e200fcd0089727bb8c11ffa2d51bc48880865951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1NjUyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382156529", "bodyText": "Fixed in force-push.", "author": "fjeremic", "createdAt": "2020-02-20T17:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzNzkwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzODE4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382138185", "bodyText": "The signature will need to be updated if made static.", "author": "keithc-ca", "createdAt": "2020-02-20T17:10:50Z", "path": "runtime/oti/jclprots.h", "diffHunk": "@@ -140,8 +140,8 @@ extern J9_CFUNC jlong JNICALL\n Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getProcessPrivateMemorySizeImpl (JNIEnv *env, jobject instance);\n extern J9_CFUNC jlong JNICALL\n Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getProcessPhysicalMemorySizeImpl (JNIEnv *env, jobject instance);\n-extern J9_CFUNC jobject JNICALL\n-Java_com_ibm_lang_management_internal_SysinfoCpuTime_getCpuUtilizationImpl (JNIEnv *env, jclass clazz);\n+extern J9_CFUNC jdouble JNICALL\n+Java_com_ibm_lang_management_internal_ExtendedOperatingSystemMXBeanImpl_getSystemCpuLoadImpl (JNIEnv *env, jobject instance);", "originalCommit": "e200fcd0089727bb8c11ffa2d51bc48880865951", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzOTQwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382139403", "bodyText": "Why is this public and not private?", "author": "keithc-ca", "createdAt": "2020-02-20T17:13:01Z", "path": "test/functional/JLM_Tests/src/org/openj9/test/management/TestGetSystemCpuLoad.java", "diffHunk": "@@ -38,97 +38,63 @@\n \n \t/* convert ns to ms and round up */\n \tprivate static final long MINIMUM_INTERVAL = (long) Math.ceil(CpuLoadCalculationConstants.MINIMUM_INTERVAL / 1e6);\n-\tprivate boolean supported;\n-\tprivate final double MIN_LOAD = 0.0;\n-\tprivate final double MAX_LOAD = 1.0;\n-\tprivate final double NO_ERROR = -100; /* should never get this */\n-\n-\t@BeforeMethod\n-\tprotected void setUp() throws Exception {\n-\t\tString osName = System.getProperty(\"os.name\");\n-\t\tif ((null == osName) || osName.equalsIgnoreCase(\"z/OS\")) {\n-\t\t\tsupported = false;\n-\t\t} else {\n-\t\t\tsupported = true;\n-\t\t}\n-\t}\n+\tprivate static final double MIN_LOAD = 0.0;\n+\tprivate static final double MAX_LOAD = 1.0;\n+\tprivate static final double NO_ERROR = -100; /* should never get this */\n \n \t@Test\n \tpublic void testSingleCpuLoadObject() {\n \t\tlogger.debug(\"Starting testSingleCpuLoadObject\");\n-\t\tcom.ibm.lang.management.OperatingSystemMXBean ibmBean;\n \t\ttry {\n-\t\t\tibmBean = ManagementFactory.getPlatformMXBean(com.ibm.lang.management.OperatingSystemMXBean.class);\n+\t\t\tcom.ibm.lang.management.OperatingSystemMXBean ibmBean = ManagementFactory.getPlatformMXBean(com.ibm.lang.management.OperatingSystemMXBean.class);\n+\t\t\ttestMxBeanImpl(ibmBean);\n \t\t} catch (IllegalArgumentException e) {\n \t\t\tAssert.fail(\"com.ibm.lang.management.OperatingSystemMXBean is not available\" + e, e);\n-\t\t\treturn;\n \t\t}\n-\t\tdouble load = ibmBean.getSystemCpuLoad();\n-\t\tif (!supported) {\n-\t\t\tvalidateLoad(load, true, CpuLoadCalculationConstants.UNSUPPORTED_VALUE, \"initial call\");\n-\t\t\treturn;\n-\t\t} else {\n-\t\t\tvalidateLoad(load, true, CpuLoadCalculationConstants.ERROR_VALUE, \"initial call\");\n-\t\t}\n-\t\tload = ibmBean.getSystemCpuLoad();\n-\t\tif (load < 0.0) { /* normal case (insufficient time since last call) */\n-\t\t\tvalidateLoad(load, true, CpuLoadCalculationConstants.ERROR_VALUE, \"call getSystemCpuLoad immediately after the previous call\");\n-\t\t} else { /* possible but unlikely: test stalled for an extended time */\n-\t\t\tvalidateLoad(load, false, NO_ERROR, \"call getSystemCpuLoad immediately after the previous call\");\n-\t\t}\n-\n-\t\tdelayMillis(MINIMUM_INTERVAL);\n-\t\tload = ibmBean.getSystemCpuLoad();\n-\t\tvalidateLoad(load, false, NO_ERROR, \"call getSystemCpuLoad after the minumum interval\");\n-\n-\t\tdelayMillis(1000);\n-\t\tload = ibmBean.getSystemCpuLoad();\n-\t\tvalidateLoad(load, false, NO_ERROR, \"call getSystemCpuLoad 1 second after previous call\");\n-\n-\t\tdelayMillis(1);\n-\t\tload = ibmBean.getSystemCpuLoad();\n-\t\tvalidateLoad(load, false, NO_ERROR, \"call getSystemCpuLoad 1 millisecond after previous call\");\n \t}\n \n \t@Test\n \tpublic void testMxBean() {\n \t\tlogger.debug(\"Starting testMxBean\");\n \t\tjava.lang.management.OperatingSystemMXBean osBean = ManagementFactory.getOperatingSystemMXBean();\n \t\tString beanClass = osBean.getClass().getName();\n-\t\tlogger.debug(\"osBean class=\" + beanClass);\n+\t\tlogger.debug(\"osBean class = \" + beanClass);\n \t\tClass<?> ibmBeanClass = com.ibm.lang.management.OperatingSystemMXBean.class;\n \n \t\tif (ibmBeanClass.isInstance(osBean)) {\n-\t\t\tcom.ibm.lang.management.OperatingSystemMXBean ibmBean1 =\n-\t\t\t\t\t(com.ibm.lang.management.OperatingSystemMXBean) osBean;\n-\t\t\tdouble load = ibmBean1.getSystemCpuLoad();\n-\t\t\tif (!supported) {\n-\t\t\t\tvalidateLoad(load, true, CpuLoadCalculationConstants.UNSUPPORTED_VALUE, \"initial getSystemCpuLoad\");\n-\t\t\t\treturn;\n-\t\t\t} else if (load < 0.0) { /* normal case (insufficient time since last call) */\n-\t\t\t\tvalidateLoad(load, true, CpuLoadCalculationConstants.ERROR_VALUE, \"initial getSystemCpuLoad\");\n-\t\t\t} else {\n-\t\t\t\tvalidateLoad(load, false, NO_ERROR, \"initial getSystemCpuLoad\");\n-\t\t\t}\n-\t\t\tdelayMillis(MINIMUM_INTERVAL);\n-\t\t\tload = ibmBean1.getSystemCpuLoad();\n-\t\t\tvalidateLoad(load, false, NO_ERROR, \"getSystemCpuLoad after the minumum interval\");\n-\n-\t\t\tload = ibmBean1.getSystemCpuLoad();\n-\t\t\tvalidateLoad(load, false, NO_ERROR, \"getSystemCpuLoad again\");\n-\n-\t\t\tdelayMillis(MINIMUM_INTERVAL);\n-\t\t\tload = ibmBean1.getSystemCpuLoad();\n-\t\t\tvalidateLoad(load, false, NO_ERROR, \"getSystemCpuLoad again\");\n-\n-\t\t\tdelayMillis(1000);\n-\t\t\tload = ibmBean1.getSystemCpuLoad();\n-\t\t\tvalidateLoad(load, false, NO_ERROR, \"getSystemCpuLoad after 1 second\");\n+\t\t\ttestMxBeanImpl((com.ibm.lang.management.OperatingSystemMXBean)osBean);\n \t\t} else {\n \t\t\tAssert.fail(\"OperatingSystemMXBean is wrong type: \" + osBean.getClass().getName());\n \t\t}\n \t}\n \n+\tpublic static void testMxBeanImpl(com.ibm.lang.management.OperatingSystemMXBean ibmBean) {", "originalCommit": "e200fcd0089727bb8c11ffa2d51bc48880865951", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1Njc5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8265#discussion_r382156794", "bodyText": "Fixed in force-push.", "author": "fjeremic", "createdAt": "2020-02-20T17:45:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEzOTQwMw=="}], "type": "inlineReview"}, {"oid": "a15fd0a5f1583c638085002e198a4ef9732245cf", "url": "https://github.com/eclipse-openj9/openj9/commit/a15fd0a5f1583c638085002e198a4ef9732245cf", "message": "Deprecate j9sysinfo_get_CPU_load and use omrsysinfo_get_CPU_load\n\nIn addition:\n\n- Update copyrights to 2020\n- Initialize uninitialized local variables\n- Make `testMxBeanImpl` a private method\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>", "committedDate": "2020-02-20T17:43:29Z", "type": "commit"}, {"oid": "a15fd0a5f1583c638085002e198a4ef9732245cf", "url": "https://github.com/eclipse-openj9/openj9/commit/a15fd0a5f1583c638085002e198a4ef9732245cf", "message": "Deprecate j9sysinfo_get_CPU_load and use omrsysinfo_get_CPU_load\n\nIn addition:\n\n- Update copyrights to 2020\n- Initialize uninitialized local variables\n- Make `testMxBeanImpl` a private method\n\nSigned-off-by: Filip Jeremic <fjeremic@ca.ibm.com>", "committedDate": "2020-02-20T17:43:29Z", "type": "forcePushed"}]}