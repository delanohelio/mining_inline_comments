{"pr_number": 9571, "pr_title": "Replace CPU APIs on Power", "pr_createdAt": "2020-05-14T21:42:32Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9571", "timeline": [{"oid": "f3d0ab4d755951222e829a1aa771f2140fd13b56", "url": "https://github.com/eclipse-openj9/openj9/commit/f3d0ab4d755951222e829a1aa771f2140fd13b56", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-05-15T03:10:18Z", "type": "forcePushed"}, {"oid": "fac8fd2517bec9513d8781ce9b4fefd4d376eb67", "url": "https://github.com/eclipse-openj9/openj9/commit/fac8fd2517bec9513d8781ce9b4fefd4d376eb67", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-05-15T04:22:38Z", "type": "forcePushed"}, {"oid": "2f87d233b709d1efc35d6897c3702e6b3d8a12e6", "url": "https://github.com/eclipse-openj9/openj9/commit/2f87d233b709d1efc35d6897c3702e6b3d8a12e6", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-05-20T01:25:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MTQ2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r429381465", "bodyText": "This sequence is executed very very early. Is TR::Compiler->target already set at this point?\nAlso, there is no value in having this as a static because the code is executed exactly once.", "author": "mpirvu", "createdAt": "2020-05-22T17:54:06Z", "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -204,8 +204,7 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n             //if disableDualTLH is specified, revert back to old semantics.\n             // Do not batch clear, JIT has to zeroinit all code on TLH.\n             //Non P6, P7 and up are allowed to batch clear however.\n-            TR_Processor ptype = TR_J9VMBase::getPPCProcessorType();\n-            static bool disableZeroedTLHPages =  disableDualTLH && (((notlhPrefetch >= 0) || (ptype != TR_PPCp6 && ptype != TR_PPCp7)));\n+            static bool disableZeroedTLHPages = disableDualTLH && (((notlhPrefetch >= 0) || (!TR::Compiler->target.cpu.is(OMR_PROCESSOR_PPC_P6) && !TR::Compiler->target.cpu.is(OMR_PROCESSOR_PPC_P7))));", "originalCommit": "6e51e55db5951e370649e5966d134a43c826722a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5NjQwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r429396400", "bodyText": "Yes it is already set at this point, (set in initializeJIT())\n      case DLL_LOAD_TABLE_FINALIZED :\n         {\n\n         // Bootstrap JIT initialization\n         //\n         if (!initializeJIT(vm))\n            {\n            return J9VMDLLMAIN_FAILED;\n            }\nI guess we can remove the static keyword.", "author": "harryyu1994", "createdAt": "2020-05-22T18:30:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MTQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5ODI5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r429398299", "bodyText": "Actually the TR_J9VMBase::getPPCProcessorType(); needs to be put back as that's actually the initialization for the old api's. We will have to keep them in for now.", "author": "harryyu1994", "createdAt": "2020-05-22T18:35:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MTQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MzIxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r429383213", "bodyText": "Is there another PR that needs to be delivered first for this issue to be solved?\nIf not, what happens if we deliver this PR in this form?", "author": "mpirvu", "createdAt": "2020-05-22T17:58:21Z", "path": "runtime/compiler/control/J9Options.cpp", "diffHunk": "@@ -1809,9 +1809,10 @@ J9::Options::fePreProcess(void * base)\n #if defined(TR_HOST_X86) || defined(TR_HOST_POWER) || defined(TR_HOST_S390)\n    bool preferTLHPrefetch;\n #if defined(TR_HOST_POWER)\n-   TR_Processor proc = TR_J9VMBase::getPPCProcessorType();\n-   preferTLHPrefetch = proc >= TR_PPCp6 && proc <= TR_PPCp7;\n+   // TODO: processor id() is not initialized at this point. Once we swtich to the new api this problem will go away\n+   preferTLHPrefetch = (TR::Compiler->target.cpu.id() >= TR_PPCp6) && (TR::Compiler->target.cpu.id() <= TR_PPCp7);\n #elif defined(TR_HOST_S390)\n+   // TODO: processor arch is not initialized at this point. Once we switch to the new api this problem will go away", "originalCommit": "6e51e55db5951e370649e5966d134a43c826722a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM5NDUyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r429394527", "bodyText": "Good eye, more work is needed here.\nThe problem here was that id() was not initialized at this point, and it will break my test if I switch to the new api over here so I reverted back to use the old api. However what I've done here is incorrect.\nI should set the id() with TR_J9VMBase::getPPCProcessorType() that way I could use my new api here without breaking my test(the check between old api and new api)", "author": "harryyu1994", "createdAt": "2020-05-22T18:26:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM4MzIxMw=="}], "type": "inlineReview"}, {"oid": "0da3d734db137cd5d2e19d8310ec68f6b9aabdab", "url": "https://github.com/eclipse-openj9/openj9/commit/0da3d734db137cd5d2e19d8310ec68f6b9aabdab", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-05-23T03:20:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MjE0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r430472144", "bodyText": "Does this work correctly? You seem to be setting the TR_Processor returned by id(), but then using the Port library's processor enum to perform the check...", "author": "aviansie-ben", "createdAt": "2020-05-26T14:49:53Z", "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -204,8 +204,8 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n             //if disableDualTLH is specified, revert back to old semantics.\n             // Do not batch clear, JIT has to zeroinit all code on TLH.\n             //Non P6, P7 and up are allowed to batch clear however.\n-            TR_Processor ptype = TR_J9VMBase::getPPCProcessorType();\n-            static bool disableZeroedTLHPages =  disableDualTLH && (((notlhPrefetch >= 0) || (ptype != TR_PPCp6 && ptype != TR_PPCp7)));\n+            TR::Compiler->target.cpu.setProcessor(TR_J9VMBase::getPPCProcessorType());\n+            bool disableZeroedTLHPages = disableDualTLH && (((notlhPrefetch >= 0) || (!TR::Compiler->target.cpu.is(OMR_PROCESSOR_PPC_P6) && !TR::Compiler->target.cpu.is(OMR_PROCESSOR_PPC_P7))));", "originalCommit": "0da3d734db137cd5d2e19d8310ec68f6b9aabdab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU0MDc3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r430540778", "bodyText": "Inside TR::Compiler->target.cpu.is(OMR_PROCESSOR_PPC_P6), we have tests that verifies the correctness of new api's against old api. In order for this to work here, we need to set id() for the old APIs.", "author": "harryyu1994", "createdAt": "2020-05-26T16:20:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3MjE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3NTA0OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r430475049", "bodyText": "This (and the other checks like it) look like they've always been incorrect to me. It looks like we should be checking whether we're at least POWER8 to use the mtvsr* instructions instead of whether we're exactly POWER8.\n@zl-wang Do you know if this was intentional?", "author": "aviansie-ben", "createdAt": "2020-05-26T14:53:35Z", "path": "runtime/compiler/p/codegen/DFPTreeEvaluator.cpp", "diffHunk": "@@ -109,7 +109,7 @@ static void overlapDFPOperandAndPrecisionLoad(\n       TR::CodeGenerator *cg)\n    {\n    // check for direct move\n-   bool p8DirectMoveTest = cg->comp()->target().cpu.id() == TR_PPCp8;\n+   bool p8DirectMoveTest = cg->comp()->target().cpu.is(OMR_PROCESSOR_PPC_P8);", "originalCommit": "0da3d734db137cd5d2e19d8310ec68f6b9aabdab", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4OTY2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r430489669", "bodyText": "i saw that too. And, it should be >= p8.\nmaybe a new issue is more appropriate.", "author": "zl-wang", "createdAt": "2020-05-26T15:13:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3NTA0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzODQ2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r430538468", "bodyText": "Opened #9698 to track this.", "author": "aviansie-ben", "createdAt": "2020-05-26T16:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ3NTA0OQ=="}], "type": "inlineReview"}, {"oid": "66879b6e7b31ca17179b16d594a16ceaed37f591", "url": "https://github.com/eclipse-openj9/openj9/commit/66879b6e7b31ca17179b16d594a16ceaed37f591", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-05-28T21:33:49Z", "type": "forcePushed"}, {"oid": "86cbc18574858b69961e2f0f5e084024fca62977", "url": "https://github.com/eclipse-openj9/openj9/commit/86cbc18574858b69961e2f0f5e084024fca62977", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-06T18:58:31Z", "type": "forcePushed"}, {"oid": "4ec4cb99784b1a17060eaf31d0977941fee5b130", "url": "https://github.com/eclipse-openj9/openj9/commit/4ec4cb99784b1a17060eaf31d0977941fee5b130", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-08T15:19:23Z", "type": "forcePushed"}, {"oid": "85498e04327ce1f5a94535ca539477319c42dafb", "url": "https://github.com/eclipse-openj9/openj9/commit/85498e04327ce1f5a94535ca539477319c42dafb", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-08T15:22:37Z", "type": "forcePushed"}, {"oid": "a304536a58b197d48f505b9f0b75537d729e1437", "url": "https://github.com/eclipse-openj9/openj9/commit/a304536a58b197d48f505b9f0b75537d729e1437", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-09T20:13:43Z", "type": "forcePushed"}, {"oid": "367cedd85cc2ab1a9f1036251addd677cf3eaf5b", "url": "https://github.com/eclipse-openj9/openj9/commit/367cedd85cc2ab1a9f1036251addd677cf3eaf5b", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-10T18:48:09Z", "type": "forcePushed"}, {"oid": "d2c8a0261cb8ed09d462f32c94be7db4d7f3e30c", "url": "https://github.com/eclipse-openj9/openj9/commit/d2c8a0261cb8ed09d462f32c94be7db4d7f3e30c", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-10T21:00:44Z", "type": "forcePushed"}, {"oid": "84065b5cec9c545e3718226e977b3fd7f61c3abe", "url": "https://github.com/eclipse-openj9/openj9/commit/84065b5cec9c545e3718226e977b3fd7f61c3abe", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-11T01:40:23Z", "type": "forcePushed"}, {"oid": "65e8cb6ae9542e34d35f55fa843293fb6a9455ae", "url": "https://github.com/eclipse-openj9/openj9/commit/65e8cb6ae9542e34d35f55fa843293fb6a9455ae", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-11T16:57:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMzQ1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r440523451", "bodyText": "It's minor, just curious why we need to say (!customP4 || (customP4 && ...)) ?", "author": "gita-omr", "createdAt": "2020-06-16T00:46:21Z", "path": "runtime/compiler/runtime/Trampoline.cpp", "diffHunk": "@@ -101,7 +97,7 @@ void ppcCreateHelperTrampolines(uint8_t *trampPtr, int32_t numHelpers)\n \n             // Now, if highest bit is on we need to clear the sign extend bits on 64bit CPUs\n             // ** POWER4 pref fix **\n-            if( (helper & 0x80000000) && (!customP4 || proc == TR_PPCgp))\n+            if( (helper & 0x80000000) && (!customP4 || (customP4 && TR::comp()->target().cpu.is(OMR_PROCESSOR_PPC_GP))))", "originalCommit": "65e8cb6ae9542e34d35f55fa843293fb6a9455ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNTQ4MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441005481", "bodyText": "The customP4 && is not necessary, i'll get rid of it.", "author": "harryyu1994", "createdAt": "2020-06-16T17:01:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMzQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMzA2OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441013069", "bodyText": "better not to touch these portion of code.  i have a waiting commit to be merged for reworking trampolines etc for POWER10.\nthat customP4 is actually meaningful for POWER4 machines (there was a performance bug in hardware for countCache prediction ... that customP4 was to work around that bug).", "author": "zl-wang", "createdAt": "2020-06-16T17:14:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMzQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNDc1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441014751", "bodyText": "Are you suggesting to leave the change in as it is?\nI'm turning it into\nif( (helper & 0x80000000) && (!customP4 || TR::comp()->target().cpu.is(OMR_PROCESSOR_PPC_GP)))\nwhich should be equivalent.", "author": "harryyu1994", "createdAt": "2020-06-16T17:17:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMzQ1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMTY4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441021680", "bodyText": "I thought you are trying to throw away customP4 all together. In case, something wrong is unnecessarily committed.  Fine, that equiv transformation alone looks ok.", "author": "zl-wang", "createdAt": "2020-06-16T17:28:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyMzQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyNzQwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r440527408", "bodyText": "The same as above re checking customP4 twice. Also, not sure the transformation is equivalent. If customP4 == false, proc = TR_DefaultPPCProcessor, which is not the same as TR_PPCgp. Which means the if() will not be true.", "author": "gita-omr", "createdAt": "2020-06-16T01:00:49Z", "path": "runtime/compiler/runtime/Trampoline.cpp", "diffHunk": "@@ -183,7 +177,7 @@ void ppcCreateMethodTrampoline(void *trampPtr, void *startPC, void *method)\n \n             // Now, if highest bit is on we need to clear the sign extend bits on 64bit CPUs\n             // ** POWER4 pref fix **\n-            if ( (dispatcher & 0x80000000) && proc == TR_PPCgp)\n+            if ( (dispatcher & 0x80000000) && (!customP4 || (customP4 && TR::comp()->target().cpu.is(OMR_PROCESSOR_PPC_GP))))", "originalCommit": "65e8cb6ae9542e34d35f55fa843293fb6a9455ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwMTQ2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441001465", "bodyText": "Good eye. I think we need to get rid of the !customP4 over here.", "author": "harryyu1994", "createdAt": "2020-06-16T16:54:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyNzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAzNDA0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441034043", "bodyText": "changing to if ( (dispatcher & 0x80000000) && ((customP4 && TR::comp()->target().cpu.is(OMR_PROCESSOR_PPC_GP)))", "author": "harryyu1994", "createdAt": "2020-06-16T17:50:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyNzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5OTA1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441099059", "bodyText": "@zl-wang could you please take a quick look to see if the code behaves as expected?", "author": "gita-omr", "createdAt": "2020-06-16T19:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyNzQwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyNzE5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441127195", "bodyText": "there was some code to be improved, but it is not in the scope of this PR.  equiv transformations look fine to me at a quick glimpse.", "author": "zl-wang", "createdAt": "2020-06-16T20:37:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUyNzQwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MDE3MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r440540171", "bodyText": "Why did we delete all other similar style methods but left this one?", "author": "gita-omr", "createdAt": "2020-06-16T01:49:21Z", "path": "runtime/compiler/p/env/J9CPU.hpp", "diffHunk": "@@ -53,16 +53,18 @@ class OMR_EXTENSIBLE CPU : public J9::CPU\n    CPU(const OMRProcessorDesc& processorDescription) : J9::CPU(processorDescription) {}\n \n public:\n-   bool getPPCSupportsVMX();\n-   bool getPPCSupportsVSX();\n-   bool getPPCSupportsAES();\n-   bool getPPCSupportsTM();\n \n-   bool hasPopulationCountInstruction();\n-   bool supportsDecimalFloatingPoint();\n+   bool supportsFeature(uint32_t feature);\n+   bool supports_feature_test(uint32_t feature);\n \n    bool isCompatible(const OMRProcessorDesc& processorDescription);\n    OMRProcessorDesc getProcessorDescription();\n+\n+   bool is(OMRProcessorArchitecture p);\n+   bool isAtLeast(OMRProcessorArchitecture p);\n+   bool isAtMost(OMRProcessorArchitecture p);\n+\n+   bool getPPCSupportsVSX();", "originalCommit": "65e8cb6ae9542e34d35f55fa843293fb6a9455ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAwNjg0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441006848", "bodyText": "There are four instances of getPPCSupportsVSX() in closedj9. To make sure I don't break the build I'm temporarily keeping this in until we switch closedj9 to use the new APIs.", "author": "harryyu1994", "createdAt": "2020-06-16T17:03:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU0MDE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNzM2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441117363", "bodyText": "Just trying to understand: why would supportsFeature be removed if you introduced calls to it in this PR?\nAlso, if supports_feature_test is only used within this class, can we make it private?", "author": "gita-omr", "createdAt": "2020-06-16T20:19:28Z", "path": "runtime/compiler/p/env/J9CPU.cpp", "diffHunk": "@@ -26,84 +26,92 @@\n #include \"j9.h\"\n #include \"j9port.h\"\n \n-\n+// supportsFeature and supports_feature_test will be removed when old_apis are no longer needed", "originalCommit": "6e89c708276264530865afffd64e68d8d11d87bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEyMDM5Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9571#discussion_r441120396", "bodyText": "The end goal is to have every single platform use the bool OMR::CPU::supportsFeature(uint32_t feature) API.\nCurrently we want to make sure that the new APIs are getting called correctly by comparing their query results to the old APIs. I added the tests in bool J9::CPU::Power::supportsFeature() and bool J9::CPU::Power::isAtLeast(). bool J9::CPU::Power::supportsFeature() will override bool OMR::CPU::supportsFeature(uint32_t feature) for now. Once we no longer need the test then these overrides can be removed and we will fall back to use the bool OMR::CPU::supportsFeature(uint32_t feature) API.\nYes I can make supports_feature_test private.", "author": "harryyu1994", "createdAt": "2020-06-16T20:25:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTExNzM2Mw=="}], "type": "inlineReview"}, {"oid": "c59e7d4734db673d97a8e9b2c71e66bb3d7161e2", "url": "https://github.com/eclipse-openj9/openj9/commit/c59e7d4734db673d97a8e9b2c71e66bb3d7161e2", "message": "Replace CPU APIs on Power\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-17T17:34:30Z", "type": "commit"}, {"oid": "db1e26ca6b13d1c3352d85bbb2ee7e80fbaad48d", "url": "https://github.com/eclipse-openj9/openj9/commit/db1e26ca6b13d1c3352d85bbb2ee7e80fbaad48d", "message": "Clean up runtime/Trampoline.cpp\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-17T17:34:37Z", "type": "commit"}, {"oid": "dbc5a34bcce160a6ddf47459cd5b641417f4fb27", "url": "https://github.com/eclipse-openj9/openj9/commit/dbc5a34bcce160a6ddf47459cd5b641417f4fb27", "message": "Make supports_feature_test private\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-17T17:34:37Z", "type": "commit"}, {"oid": "dbc5a34bcce160a6ddf47459cd5b641417f4fb27", "url": "https://github.com/eclipse-openj9/openj9/commit/dbc5a34bcce160a6ddf47459cd5b641417f4fb27", "message": "Make supports_feature_test private\n\nSigned-off-by: Harry Yu <harryyu1994@gmail.com>", "committedDate": "2020-06-17T17:34:37Z", "type": "forcePushed"}]}