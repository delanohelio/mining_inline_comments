{"pr_number": 8895, "pr_title": "Change realTimeGC option as per compilation", "pr_createdAt": "2020-03-17T22:57:09Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8895", "timeline": [{"oid": "2e34ef71fbaf7f88887393bb7d8765a3c0f5eb33", "url": "https://github.com/eclipse-openj9/openj9/commit/2e34ef71fbaf7f88887393bb7d8765a3c0f5eb33", "message": "Change realTimeGC option as per compilation\n\nThis change is to support the JITServer receiving\nthe realTimeGC config setting from the client for\nper compilation.\n\nAlso implemented the server version of\n`getCellSizeForSizeClass() and `getObjectSizeClass()\nwhich were missing and are triggered when realTimeGC is true.\n\nRelated to eclipse/omr#4945\n\nFixes: #8707\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-03-18T14:33:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ0MTc1NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394441755", "bodyText": "let use cg->comp()", "author": "mpirvu", "createdAt": "2020-03-18T15:38:01Z", "path": "runtime/compiler/arm/codegen/J9ARMEvaluator.cpp", "diffHunk": "@@ -932,7 +932,8 @@ static void genHeapAlloc(TR::CodeGenerator  *cg,\n                          TR::LabelSymbol     *callLabel,\n                          int32_t            allocSize)\n    {\n-   if (TR::Options::getCmdLineOptions()->realTimeGC())\n+   TR::Compilation *comp = TR::comp();", "originalCommit": "2e34ef71fbaf7f88887393bb7d8765a3c0f5eb33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NDcyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394484724", "bodyText": "This is problematic. We are looking at the thread on the server. I think we need to send a message for this one, but definitely needs more thought. It is the default behavior though.", "author": "mpirvu", "createdAt": "2020-03-18T16:35:42Z", "path": "runtime/compiler/env/VMJ9.cpp", "diffHunk": "@@ -4220,7 +4221,7 @@ TR_J9VMBase::initializeLocalObjectFlags(TR::Compilation * comp, TR::Node * alloc\n    int32_t initValue = TR::Compiler->cls.romClassOf(ramClass)->instanceShape;\n #endif\n \n-   if (!TR::Options::getCmdLineOptions()->realTimeGC())\n+   if (!comp->getOptions()->realTimeGC())", "originalCommit": "2e34ef71fbaf7f88887393bb7d8765a3c0f5eb33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4NTI1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394585259", "bodyText": "I think TR_J9VMBase::initializeLocalObjectFlags() should be overridden  in TR_J9ServerVM to retrieve the initValue.", "author": "a7ehuo", "createdAt": "2020-03-18T19:21:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NDcyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzExNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394487115", "bodyText": "You moved the return statement up. Is it possible that the code executed before this return needed to stay because it had important side effects?\ngetSnippetLabel()->setCodeLocation(buffer);", "author": "mpirvu", "createdAt": "2020-03-18T16:39:17Z", "path": "runtime/compiler/p/codegen/J9PPCSnippet.cpp", "diffHunk": "@@ -1311,13 +1311,13 @@ void TR::createCCPreLoadedCode(uint8_t *CCPreLoadedCodeBase, uint8_t *CCPreLoade\n uint8_t *TR::PPCAllocPrefetchSnippet::emitSnippetBody()\n    {\n    TR::Compilation *comp = cg()->comp();\n+   if (comp->getOptions()->realTimeGC())", "originalCommit": "2e34ef71fbaf7f88887393bb7d8765a3c0f5eb33", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUxMzc3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394513773", "bodyText": "Will move it back to where it was.", "author": "a7ehuo", "createdAt": "2020-03-18T17:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzExNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ4NzY2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394487668", "bodyText": "Same here: You moved the return statement up. Is it possible that the code executed before this return needed to stay because it had important side effects?", "author": "mpirvu", "createdAt": "2020-03-18T16:40:04Z", "path": "runtime/compiler/p/codegen/J9PPCSnippet.cpp", "diffHunk": "@@ -1364,13 +1364,13 @@ TR::PPCNonZeroAllocPrefetchSnippet::PPCNonZeroAllocPrefetchSnippet(\n uint8_t *TR::PPCNonZeroAllocPrefetchSnippet::emitSnippetBody()\n    {\n    TR::Compilation *comp = cg()->comp();\n+   if (comp->getOptions()->realTimeGC())", "originalCommit": "2e34ef71fbaf7f88887393bb7d8765a3c0f5eb33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ5MzM2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394493366", "bodyText": "Please delete this comment", "author": "mpirvu", "createdAt": "2020-03-18T16:48:28Z", "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -1910,7 +1910,9 @@ VMCardCheckEvaluator(\n       TR::LabelSymbol *doneLabel = NULL,\n       bool doCompileTimeCheckForHeapObj = true)\n    {\n-   if (!TR::Options::getCmdLineOptions()->realTimeGC())\n+   // Make sure we really should be here", "originalCommit": "2e34ef71fbaf7f88887393bb7d8765a3c0f5eb33", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3afed2c27e5e3e9b41c9f1d30b89b04955d7d44e", "url": "https://github.com/eclipse-openj9/openj9/commit/3afed2c27e5e3e9b41c9f1d30b89b04955d7d44e", "message": "Change realTimeGC option as per compilation\n\nThis change is to support the JITServer receiving\nthe realTimeGC config setting from the client for\nper compilation.\n\nAlso implemented the server version of\n`getCellSizeForSizeClass() and `getObjectSizeClass()\nwhich were missing and are triggered when realTimeGC is true.\n\nRelated to eclipse/omr#4945\n\nFixes: #8707\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-03-18T19:44:14Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwNjg5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394606894", "bodyText": "I think this will result in many messages being sent.\nThe original code reads some value from the compilation thread (which could be any) to be used at runtime by any other application thread. This makes me think that all the threads have the same value which does not change in time. We need to verify that, but if that is the case then we can fetch that specific value once during the VMinit message.", "author": "mpirvu", "createdAt": "2020-03-18T20:03:02Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -1805,6 +1805,40 @@ TR_J9ServerVM::getInvokeExactThunkHelperAddress(TR::Compilation *comp, TR::Symbo\n    return helper;\n    }\n \n+UDATA\n+TR_J9ServerVM::getCellSizeForSizeClass(uintptr_t sizeClass)\n+   {\n+#if defined(J9VM_GC_REALTIME)\n+   JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n+   stream->write(JITServer::MessageType::VM_getCellSizeForSizeClass, sizeClass);\n+   return std::get<0>(stream->read<UDATA>());\n+#endif\n+   return 0;\n+   }\n+\n+UDATA\n+TR_J9ServerVM::getObjectSizeClass(uintptr_t objectSize)\n+   {\n+#if defined(J9VM_GC_REALTIME)\n+   JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n+   stream->write(JITServer::MessageType::VM_getObjectSizeClass, objectSize);\n+   return std::get<0>(stream->read<UDATA>());\n+#endif\n+   return 0;\n+   }\n+\n+// Creates a node to initialize the local object flags field\n+//\n+TR::Node *\n+TR_J9ServerVM::initializeLocalObjectFlags(TR::Compilation * comp, TR::Node * allocationNode, TR_OpaqueClassBlock * ramClass)\n+   {\n+   JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n+   stream->write(JITServer::MessageType::VM_initializeLocalObjectFlags, ramClass);", "originalCommit": "3afed2c27e5e3e9b41c9f1d30b89b04955d7d44e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYzMzU4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r394633584", "bodyText": "I think this will result in many messages being sent.\n\nSo far the local sanity test shows that it doesn't look like many VM_initializeLocalObjectFlags  messages are sent for the following tests. I extracted out VM_getSystemClassFromClassName, VM_getClassFromSignature,\nVM_getJ2IThunk, and VM_initializeLocalObjectFlags as comparison.\nRunning test jit_jitt_0 ...\n#0208       3 VM_getSystemClassFromClassName\n#0217    8679 VM_getClassFromSignature\n#0307    1059 VM_getJ2IThunk\n#0312       6 VM_initializeLocalObjectFlags\n\nRunning test jit_jitt_1 ...\n#0208       3 VM_getSystemClassFromClassName\n#0217    8697 VM_getClassFromSignature\n#0307    1059 VM_getJ2IThunk\n#0312       6 VM_initializeLocalObjectFlags\n\nRunning test jit_jitt_2 ...\n#0208       3 VM_getSystemClassFromClassName\n#0217    8702 VM_getClassFromSignature\n#0307    1059 VM_getJ2IThunk\n#0312       6 VM_initializeLocalObjectFlags\n\nRunning test jit_jitt_3 ...\n#0208       3 VM_getSystemClassFromClassName\n#0217    8696 VM_getClassFromSignature\n#0307    1059 VM_getJ2IThunk\n#0312       6 VM_initializeLocalObjectFlags\n\nRunning test jit_compareAndBranch_0 ...\n#0208       2 VM_getSystemClassFromClassName\n#0217       4 VM_getClassFromSignature\n\nRunning test jit_jitt_openj9_none_SCC_0 ...\n#0208       3 VM_getSystemClassFromClassName\n#0217    8704 VM_getClassFromSignature\n#0307    1059 VM_getJ2IThunk\n#0312       6 VM_initializeLocalObjectFlags\n\nRunning test jit_jitt_openj9_none_SCC_1 ...\n#0208       3 VM_getSystemClassFromClassName\n#0217    8703 VM_getClassFromSignature\n#0307    1059 VM_getJ2IThunk\n#0312       6 VM_initializeLocalObjectFlags\n\nRunning test jit_jitt_openj9_none_SCC_2 ...\n#0208       3 VM_getSystemClassFromClassName\n#0217    8698 VM_getClassFromSignature\n#0307    1059 VM_getJ2IThunk\n#0312       6 VM_initializeLocalObjectFlags\n\nRunning test jit_jitt_openj9_none_SCC_3 ...\n#0208       3 VM_getSystemClassFromClassName\n#0217    8679 VM_getClassFromSignature\n#0307    1059 VM_getJ2IThunk\n#0312       6 VM_initializeLocalObjectFlags", "author": "a7ehuo", "createdAt": "2020-03-18T20:54:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwNjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3OTg1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r395079851", "bodyText": "The local sanity functional test shows that the number of VM_initializeLocalObjectFlags messages is relatively low between 1~16, except forStringPeepholeTest_0 which exchanges ~141 messages. Wondering if message VM_initializeLocalObjectFlags should be kept for now to keep it functionally correct on the realTimeGC path.\nType# #called TypeName\n#0000    5427 compilationCode\n#0002    6711 mirrorResolvedJ9Method\n#0003    4731 get_params_to_construct_TR_j9method\n#0004       1 getUnloadedClassRanges\n#0105    4730 ResolvedMethod_staticAttributes\n#0106    6483 ResolvedMethod_getClassFromConstantPool\n#0107    5634 ResolvedMethod_getDeclaringClassFromFieldOrStatic\n#0108    3239 ResolvedMethod_classOfStatic\n#0109     200 ResolvedMethod_startAddressForJNIMethod\n#0110   18954 ResolvedMethod_fieldAttributes\n#0111   10629 ResolvedMethod_getResolvedStaticMethodAndMirror\n#0112   15537 ResolvedMethod_getResolvedSpecialMethodAndMirror\n#0113     153 ResolvedMethod_classCPIndexOfMethod\n#0116   18218 ResolvedMethod_getResolvedPossiblyPrivateVirtualMethodAndMirror\n#0118   15544 ResolvedMethod_getResolvedInterfaceMethod_2\n#0119     209 ResolvedMethod_getResolvedInterfaceMethodAndMirror_3\n#0120     305 ResolvedMethod_getResolvedInterfaceMethodOffset\n#0125    9934 ResolvedMethod_getRemoteROMString\n#0126    1240 ResolvedMethod_fieldOrStaticName\n#0127     662 ResolvedMethod_getRemoteROMClassAndMethods\n#0128       5 ResolvedMethod_getResolvedHandleMethod\n#0129       5 ResolvedMethod_isUnresolvedMethodTypeTableEntry\n#0130       5 ResolvedMethod_methodTypeTableEntryAddress\n#0145      34 ResolvedMethod_setClassForNewInstance\n#0147    5235 ResolvedMethod_getResolvedImproperInterfaceMethodAndMirror\n#0149   10921 ResolvedMethod_stringConstant\n#0150     833 ResolvedMethod_getResolvedVirtualMethod\n#0151    2418 ResolvedMethod_getMultipleResolvedMethods\n#0157    3828 ResolvedMethod_definingClassFromCPFieldRef\n#0208       2 VM_getSystemClassFromClassName\n#0211       1 VM_getClassClassPointer\n#0212      84 VM_setJ2IThunk\n#0217   26552 VM_getClassFromSignature\n#0218     241 VM_jitFieldsAreSame\n#0219    1117 VM_jitStaticsAreSame\n#0222      50 VM_classHasBeenExtended\n#0229     272 VM_isClassInitialized\n#0231      48 VM_getInitialLockword\n#0232     562 VM_isString1\n#0239     133 VM_stackWalkerMaySkipFrames\n#0245    3202 VM_getClassFromNewArrayType\n#0248     682 VM_getArrayClassFromComponentClass\n#0258     142 VM_getOffsetOfClassFromJavaLangClassField\n#0270      20 VM_getInstanceFieldOffset\n#0273     575 VM_getClassDepthAndFlagsValue\n#0274     798 VM_getMethodFromName\n#0278    1046 VM_getReferenceSlotsInClass\n#0282      23 VM_getInterpreterVTableSlot\n#0291      18 VM_getObjectNewInstanceImplMethod\n#0294       5 VM_setInvokeExactJ2IThunk\n#0295       2 VM_createMethodHandleArchetypeSpecimen\n#0297      21 VM_instanceOfOrCheckCast\n#0300      77 VM_getResolvedMethodsAndMirror\n#0301       1 VM_getVMInfo\n#0303      97 VM_dereferenceStaticAddress\n#0307     857 VM_getJ2IThunk\n#0308       5 VM_needsInvokeExactJ2IThunk\n#0312     141 VM_initializeLocalObjectFlags\n#0400    4339 CompInfo_isCompiled\n#0401      18 CompInfo_getInvocationCount\n#0408      18 CompInfo_setInvocationCountAtomic\n#0701       1 runFEMacro_invokeExplicitCastHandleConvertArgs\n#0702       6 runFEMacro_targetTypeL\n#0703       1 runFEMacro_invokeILGenMacrosInvokeExactAndFixup\n#0800    5428 CHTable_getAllClassInfo\n#0801    5428 CHTable_getClassInfoUpdates\n#0900    5734 IProfiler_profilingSample\n#0901     632 IProfiler_searchForMethodSample\n#1201    3703 KnownObjectTable_getIndexAt\n#1203       2 KnownObjectTable_getExistingIndexAt\n#1204    2026 KnownObjectTable_symbolReferenceTableCreateKnownObject", "author": "a7ehuo", "createdAt": "2020-03-19T14:44:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwNjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExMjM4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r395112388", "bodyText": "Without implementing the VM_initializeLocalObjectFlags message, JITServer sanity functional test might see server crash since this change enabled realTimeGC path that has not been exercised before.", "author": "a7ehuo", "createdAt": "2020-03-19T15:26:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwNjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE0NzA3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r395147070", "bodyText": "If initializeLocalObjectFlags() is executed for non-realTimeGC too, then we have a problem today because the following code:\n   if (!TR::Options::getCmdLineOptions()->realTimeGC())\n      {\n      initValue |= vmThread()->allocateThreadLocalHeap.objectFlags;\n      }\n\naccesses vmThread()->allocateThreadLocalHeap.objectFlags  for non-realTImeGC case.\nOn the other hand, if initializeLocalObjectFlags() is only entered for realTimeGC, then that if statement shown above is never taken.", "author": "mpirvu", "createdAt": "2020-03-19T16:13:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwNjg5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIxODYwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8895#discussion_r395218600", "bodyText": "Looked at the code, calling initializeLocalObjectFlags() should be independent of realTimeGC. I plan to remove the VM_initializeLocalObjectFlags  message. Running a bit more local test first.", "author": "a7ehuo", "createdAt": "2020-03-19T18:00:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwNjg5NA=="}], "type": "inlineReview"}, {"oid": "c85b205a6908273555931acca083387dfb37e2c3", "url": "https://github.com/eclipse-openj9/openj9/commit/c85b205a6908273555931acca083387dfb37e2c3", "message": "Change realTimeGC option as per compilation\n\nThis change is to support the JITServer receiving\nthe realTimeGC config setting from the client for\nper compilation.\n\nAlso implemented the server version of\n`getCellSizeForSizeClass() and `getObjectSizeClass()`\nwhich were missing and are triggered when realTimeGC is true.\n\nRelated to eclipse/omr#4945\n\nFixes: #8707\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-03-19T19:03:06Z", "type": "forcePushed"}, {"oid": "80f772127f646bcc5164b7f5a8722a69f90dc882", "url": "https://github.com/eclipse-openj9/openj9/commit/80f772127f646bcc5164b7f5a8722a69f90dc882", "message": "Change realTimeGC option as per compilation\n\nThis change is to support the JITServer receiving\nthe realTimeGC config setting from the client for\nper compilation.\n\nAlso implemented the server version of\n`getCellSizeForSizeClass() and `getObjectSizeClass()`\nwhich were missing and are triggered when realTimeGC is true.\n\nRelated to eclipse/omr#4945\n\nFixes: #8707\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-03-19T20:35:05Z", "type": "forcePushed"}, {"oid": "d402a2ab3d46c5fdd238cb22f41eb526fe839d0f", "url": "https://github.com/eclipse-openj9/openj9/commit/d402a2ab3d46c5fdd238cb22f41eb526fe839d0f", "message": "Change realTimeGC option as per compilation\n\nThis change is to support the JITServer receiving\nthe realTimeGC config setting from the client for\nper compilation.\n\nAlso implemented the server version of\n`getCellSizeForSizeClass() and `getObjectSizeClass()`\nwhich were missing and are triggered when realTimeGC is true.\n\nRelated to eclipse/omr#4945\n\nFixes: #8707\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-03-19T21:02:57Z", "type": "forcePushed"}, {"oid": "02172866b19c2130f65dead89ee979f71ea01cad", "url": "https://github.com/eclipse-openj9/openj9/commit/02172866b19c2130f65dead89ee979f71ea01cad", "message": "Change realTimeGC option as per compilation\n\nThis change is to support the JITServer receiving\nthe realTimeGC config setting from the client for\nper compilation.\n\nAlso implemented the server version of\n`getCellSizeForSizeClass() and `getObjectSizeClass()`\nwhich were missing and are triggered when realTimeGC is true.\n\nRelated to eclipse/omr#4945\n\nFixes: #8707\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-03-20T15:50:33Z", "type": "commit"}, {"oid": "02172866b19c2130f65dead89ee979f71ea01cad", "url": "https://github.com/eclipse-openj9/openj9/commit/02172866b19c2130f65dead89ee979f71ea01cad", "message": "Change realTimeGC option as per compilation\n\nThis change is to support the JITServer receiving\nthe realTimeGC config setting from the client for\nper compilation.\n\nAlso implemented the server version of\n`getCellSizeForSizeClass() and `getObjectSizeClass()`\nwhich were missing and are triggered when realTimeGC is true.\n\nRelated to eclipse/omr#4945\n\nFixes: #8707\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-03-20T15:50:33Z", "type": "forcePushed"}]}