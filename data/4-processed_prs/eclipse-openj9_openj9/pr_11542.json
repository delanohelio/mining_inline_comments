{"pr_number": 11542, "pr_title": "Add single quote detection", "pr_createdAt": "2020-12-26T21:08:52Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11542", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIyMTU2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r550221566", "bodyText": "The first date should not be changed (it should remain 2013); the second date should be 2020 (or soon 2021).", "author": "keithc-ca", "createdAt": "2020-12-30T14:54:17Z", "path": "test/functional/cmdline_options_tester/src/Tokenizer.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2013, 2018 IBM Corp. and others\n+ * Copyright (c) %s, %s IBM Corp. and others", "originalCommit": "b051da1022644f3ce3d525831ac8b4eb99a43020", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIyMTg2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r550221866", "bodyText": "While you're changing this comment can you also fix the grammar, please (e.g. 'an argument')?", "author": "keithc-ca", "createdAt": "2020-12-30T14:55:14Z", "path": "test/functional/cmdline_options_tester/src/Tokenizer.java", "diffHunk": "@@ -81,30 +81,36 @@ private String token() throws Exception {\n          * otherwise it will ends up returning an empty argument to be ignored in forming the command array.\n          *\n          * Three cases are taken into account in the while loop:\n-         * 1) Strings in double-quotes (a argument starting with double-quotes(\")) are completely extracted from the command string,\n-         *    whether white spaces in the argument exist or not. Double-quotes themselves are discarded after extraction when scanning forward.\n-         * 2) Normal arguments (no double-quotes occur in the argument) are split up and extracted with white spaces between arguments.\n+         * 1) Strings in double-quotes/single-quotes (a argument starting with double-quotes(\") or single-quotes(')) are completely extracted from the command string,", "originalCommit": "b051da1022644f3ce3d525831ac8b4eb99a43020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MjQ1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r550252453", "bodyText": "Fixed!", "author": "JCodyA", "createdAt": "2020-12-30T16:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIyMTg2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIyMjYwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r550222603", "bodyText": "Perhaps delim should be moved up before the if:\nchar delim = buffer.charAt(index);\nif ((delim == '\"') || (delim == '\\'')) {\n\nNote the extra parentheses (so a reader doesn't have to consider the relative precedence of == vs. ||).", "author": "keithc-ca", "createdAt": "2020-12-30T14:57:20Z", "path": "test/functional/cmdline_options_tester/src/Tokenizer.java", "diffHunk": "@@ -81,30 +81,36 @@ private String token() throws Exception {\n          * otherwise it will ends up returning an empty argument to be ignored in forming the command array.\n          *\n          * Three cases are taken into account in the while loop:\n-         * 1) Strings in double-quotes (a argument starting with double-quotes(\")) are completely extracted from the command string,\n-         *    whether white spaces in the argument exist or not. Double-quotes themselves are discarded after extraction when scanning forward.\n-         * 2) Normal arguments (no double-quotes occur in the argument) are split up and extracted with white spaces between arguments.\n+         * 1) Strings in double-quotes/single-quotes (a argument starting with double-quotes(\") or single-quotes(')) are completely extracted from the command string,\n+         *    whether white spaces in the argument exist or not. Double-quotes/single-quotes themselves are discarded after extraction when scanning forward.\n+         * 2) Normal arguments (no double-quotes/single-quotes occur in the argument) are split up and extracted with white spaces between arguments.\n          * 3) Following the original order of the command line, non-quoted portions of an argument would be extracted in case 2)\n          *    and concatenated to quoted portions of the argument extracted in case 1) within the external while loop.\n          */\n         while ((index < buffer.length()) && !Character.isWhitespace(buffer.charAt(index))) {\n \n         \t/**\n-        \t * Case 1: Expect a double-quoted string once a double-quotes is detected\n+        \t * Case 1: Expect a double-quoted or single-quoted string once either is detected\n         \t */\n-            if (buffer.charAt(index) == '\"') {\n+            if (buffer.charAt(index) == '\"' || buffer.charAt(index) == '\\'') {\n                 index++;\n                 int i = index;\n+                char delim;\n+                if (buffer.charAt(index-1) == '\"') {\n+                \tdelim = '\"';\n+                } else{\n+                \tdelim = '\\'';\n+                }", "originalCommit": "b051da1022644f3ce3d525831ac8b4eb99a43020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDI1MjY3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r550252675", "bodyText": "Also fixed!  I should have done it that way to begin with.  Thanks for pointing this out!", "author": "JCodyA", "createdAt": "2020-12-30T16:30:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MDIyMjYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NTg2NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r551445865", "bodyText": "This will now need to be updated for 2021.", "author": "keithc-ca", "createdAt": "2021-01-04T17:04:38Z", "path": "test/functional/cmdline_options_tester/src/Tokenizer.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*******************************************************************************\n- * Copyright (c) 2013, 2018 IBM Corp. and others\n+ * Copyright (c) 2013, 2020 IBM Corp. and others", "originalCommit": "82ab2940c69906e6b0ac99595cf90d6779afb3f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzU4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r551447587", "bodyText": "Please fix the grammar here (we're searching for a singular quote).", "author": "keithc-ca", "createdAt": "2021-01-04T17:07:36Z", "path": "test/functional/cmdline_options_tester/src/Tokenizer.java", "diffHunk": "@@ -81,30 +81,31 @@ private String token() throws Exception {\n          * otherwise it will ends up returning an empty argument to be ignored in forming the command array.\n          *\n          * Three cases are taken into account in the while loop:\n-         * 1) Strings in double-quotes (a argument starting with double-quotes(\")) are completely extracted from the command string,\n-         *    whether white spaces in the argument exist or not. Double-quotes themselves are discarded after extraction when scanning forward.\n-         * 2) Normal arguments (no double-quotes occur in the argument) are split up and extracted with white spaces between arguments.\n+         * 1) Strings in double-quotes/single-quotes (an argument starting with double-quotes(\") or single-quotes(')) are completely extracted from the command string,\n+         *    whether white spaces in the argument exist or not. Double-quotes/single-quotes themselves are discarded after extraction when scanning forward.\n+         * 2) Normal arguments (no double-quotes/single-quotes occur in the argument) are split up and extracted with white spaces between arguments.\n          * 3) Following the original order of the command line, non-quoted portions of an argument would be extracted in case 2)\n          *    and concatenated to quoted portions of the argument extracted in case 1) within the external while loop.\n          */\n         while ((index < buffer.length()) && !Character.isWhitespace(buffer.charAt(index))) {\n \n         \t/**\n-        \t * Case 1: Expect a double-quoted string once a double-quotes is detected\n+        \t * Case 1: Expect a double-quoted or single-quoted string once either is detected\n         \t */\n-            if (buffer.charAt(index) == '\"') {\n-                index++;\n-                int i = index;\n+\t\t\t\t\t  char delim = buffer.charAt(index);\n+            if ((delim == '\"') || (delim == '\\'')) {\n+\t\t\t\t\t\t\t\tindex++;\n+\t\t\t\t\t\t\t\tint i = index;\n \n                 /**\n-                 * search for another double-quotes since double-quotes appear in pairs.\n+                 * search for another double-quotes/single-quotes since they appear in pairs.", "originalCommit": "82ab2940c69906e6b0ac99595cf90d6779afb3f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2ODk2MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r551468961", "bodyText": "do you mean like this: \"... another double-quotes/single-quote since they...\"?", "author": "JCodyA", "createdAt": "2021-01-04T17:48:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzU4Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5MjM5Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r551492396", "bodyText": "If I were writing that comment, I would say 'search for the closing quote' (I don't think we need to repeatedly say 'double-quote/single-quote').", "author": "keithc-ca", "createdAt": "2021-01-04T18:34:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzU4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzY3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11542#discussion_r551447675", "bodyText": "Please fix indentation to match surrounding code.", "author": "keithc-ca", "createdAt": "2021-01-04T17:07:47Z", "path": "test/functional/cmdline_options_tester/src/Tokenizer.java", "diffHunk": "@@ -81,30 +81,31 @@ private String token() throws Exception {\n          * otherwise it will ends up returning an empty argument to be ignored in forming the command array.\n          *\n          * Three cases are taken into account in the while loop:\n-         * 1) Strings in double-quotes (a argument starting with double-quotes(\")) are completely extracted from the command string,\n-         *    whether white spaces in the argument exist or not. Double-quotes themselves are discarded after extraction when scanning forward.\n-         * 2) Normal arguments (no double-quotes occur in the argument) are split up and extracted with white spaces between arguments.\n+         * 1) Strings in double-quotes/single-quotes (an argument starting with double-quotes(\") or single-quotes(')) are completely extracted from the command string,\n+         *    whether white spaces in the argument exist or not. Double-quotes/single-quotes themselves are discarded after extraction when scanning forward.\n+         * 2) Normal arguments (no double-quotes/single-quotes occur in the argument) are split up and extracted with white spaces between arguments.\n          * 3) Following the original order of the command line, non-quoted portions of an argument would be extracted in case 2)\n          *    and concatenated to quoted portions of the argument extracted in case 1) within the external while loop.\n          */\n         while ((index < buffer.length()) && !Character.isWhitespace(buffer.charAt(index))) {\n \n         \t/**\n-        \t * Case 1: Expect a double-quoted string once a double-quotes is detected\n+        \t * Case 1: Expect a double-quoted or single-quoted string once either is detected\n         \t */\n-            if (buffer.charAt(index) == '\"') {\n-                index++;\n-                int i = index;\n+\t\t\t\t\t  char delim = buffer.charAt(index);\n+            if ((delim == '\"') || (delim == '\\'')) {\n+\t\t\t\t\t\t\t\tindex++;\n+\t\t\t\t\t\t\t\tint i = index;", "originalCommit": "82ab2940c69906e6b0ac99595cf90d6779afb3f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "728d53ec6c779fe3b97f9b1423ffca690ccb14bc", "url": "https://github.com/eclipse-openj9/openj9/commit/728d53ec6c779fe3b97f9b1423ffca690ccb14bc", "message": "Add single quote detection\n\nSigned-off-by: J. Cody Arnholt <j.cody.tbone@gmail.com>", "committedDate": "2021-01-07T15:45:05Z", "type": "commit"}]}