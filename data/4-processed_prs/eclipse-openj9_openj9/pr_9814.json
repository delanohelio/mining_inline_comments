{"pr_number": 9814, "pr_title": "Only add `/usr/lib` to AIX LIBPATH if not already there", "pr_createdAt": "2020-06-06T02:03:26Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9814", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwMTYyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r436701623", "bodyText": "I don't see how this is related to #9640 which speaks about MALLOCOPTIONS: this does nothing about that environment variable.", "author": "keithc-ca", "createdAt": "2020-06-08T13:29:44Z", "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -1717,12 +1717,56 @@ JNI_CreateJavaVM_impl(JavaVM **pvm, void **penv, void *vm_args, BOOLEAN isJITSer\n \t * trying to load application native libraries that are linked against\n \t * libraries in /usr/lib we could fail to find those libraries if /usr/lib\n \t * is not on the LIBPATH.\n-\t * */\n-\taddToLibpath(\"/usr/lib\", FALSE);\n+\t */\n+\t{\n+\t\t/* github #9640 & #8504 show tests fail if the libpath is modified", "originalCommit": "6b5c08d43ec5af4bc2f58ddd6b7144bb904498cc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwODM4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r436708386", "bodyText": "I think a better solution would be to fix addToLibpath so it doesn't add entries that are already present, or perhaps better, eliminates all redundancy. Other entries are added to LIBPATH that might already be present (e.g. a VM process launching a child will end up with two (or more) occurrences .../lib/j9vm and .../lib/ppc64/compressedrefs).", "author": "keithc-ca", "createdAt": "2020-06-08T13:39:58Z", "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -1717,12 +1717,56 @@ JNI_CreateJavaVM_impl(JavaVM **pvm, void **penv, void *vm_args, BOOLEAN isJITSer\n \t * trying to load application native libraries that are linked against\n \t * libraries in /usr/lib we could fail to find those libraries if /usr/lib\n \t * is not on the LIBPATH.\n-\t * */\n-\taddToLibpath(\"/usr/lib\", FALSE);", "originalCommit": "6b5c08d43ec5af4bc2f58ddd6b7144bb904498cc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk1NjM3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r438956372", "bodyText": "addToLibpath has two modes: prepend and append.  We can remove the duplication in append mode but not prepend.\nConsidering this is the only append location, I'd rather handle it here then make the general function more complex", "author": "DanHeidinga", "createdAt": "2020-06-11T17:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwODM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MDA4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r438960083", "bodyText": "We should remove the duplicate even in the prepend case: it's never helpful to have an entry listed twice. I'm fine with deferring the more general improvement.", "author": "keithc-ca", "createdAt": "2020-06-11T17:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwODM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU4NzM1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r439587357", "bodyText": "I don't plan to do that in this PR.  Resolving this conversation and deferring that action", "author": "DanHeidinga", "createdAt": "2020-06-12T18:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjcwODM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NzU2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r438967560", "bodyText": "This needs to be in a loop, otherwise it won't handle situations like\nLIBPATH=prefix:/usr/lib64:/usr/lib:suffix", "author": "keithc-ca", "createdAt": "2020-06-11T17:52:21Z", "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -1717,12 +1717,56 @@ JNI_CreateJavaVM_impl(JavaVM **pvm, void **penv, void *vm_args, BOOLEAN isJITSer\n \t * trying to load application native libraries that are linked against\n \t * libraries in /usr/lib we could fail to find those libraries if /usr/lib\n \t * is not on the LIBPATH.\n-\t * */\n-\taddToLibpath(\"/usr/lib\", FALSE);\n+\t */\n+\t{\n+\t\t/* github #8504 show tests fail if the libpath is modified\n+\t\t * when creating a new process from Java.  The easy fix is to only\n+\t\t * append to the libpath if /usr/lib isn't already appended.\n+\t\t * Example libpath:\n+\t\t * LIBPATH=/jre/lib/ppc64/j9vm:/jre/lib/ppc64:/jre/lib/ppc64/jli:/jre/../lib/ppc64:/usr/lib\n+\t\t */\n+\n+\t\tconst char *currentLibPath = getenv(\"LIBPATH\");\n+\t\tBOOLEAN appendToLibPath = TRUE;\n+\t\tif (NULL != currentLibPath) {\n+\t\t\tsize_t currentLibPathLength = strlen(currentLibPath);\n+\t\t\tconst char *usrLib = \":/usr/lib\";\n+\t\t\tconst UDATA usrLibPtrLength = LITERAL_STRLEN(\":/usr/lib\");\n+\t\t\tconst char *usrLibPtr = strstr(currentLibPath, usrLib);", "originalCommit": "bd3e2e3b02b276abd6ffdeafbc9eac8c5bde8735", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk5MTcxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r438991716", "bodyText": "Agreed.  I'll ask for another review when I've finished updating", "author": "DanHeidinga", "createdAt": "2020-06-11T18:34:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2NzU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0NjkwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r439046908", "bodyText": "This can be simplified:\n\nWe know remainingLength >= usrLibLength else strstr() would have returned NULL.\nIt's safe to peek at the character at needle[usrLibLength] unconditionally (at worst it's the NUL terminator).\n\n    if ((':' == needle[usrLibLength]) || ('\\0' == needle[usrLibLength])) {\n        /* Found a match */\n        appendToLibPath = FALSE;\n        break;\n    }\n\nNesting it within the inverse of the if statement above we can remove the goto and the label:\n    if ((0 == offsetFromStart) || (':' == needle[-1])) {\n        if ((':' == needle[usrLibLength]) || ('\\0' == needle[usrLibLength])) {\n            /* Found a match */\n            appendToLibPath = FALSE;\n            break;\n        }\n    }", "author": "keithc-ca", "createdAt": "2020-06-11T20:18:08Z", "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -1717,12 +1717,57 @@ JNI_CreateJavaVM_impl(JavaVM **pvm, void **penv, void *vm_args, BOOLEAN isJITSer\n \t * trying to load application native libraries that are linked against\n \t * libraries in /usr/lib we could fail to find those libraries if /usr/lib\n \t * is not on the LIBPATH.\n-\t * */\n-\taddToLibpath(\"/usr/lib\", FALSE);\n+\t */\n+\t{\n+\t\t/* github #8504 shows tests fail if the libpath is modified\n+\t\t * when creating a new process from Java.  The easy fix is to only\n+\t\t * append to the libpath if /usr/lib isn't already present.\n+\t\t * Example libpath:\n+\t\t * LIBPATH=/jre/lib/ppc64/j9vm:/jre/lib/ppc64:/jre/lib/ppc64/jli:/jre/../lib/ppc64:/usr/lib\n+\t\t */\n+\n+\t\tconst char *currentLibPath = getenv(\"LIBPATH\");\n+\t\tBOOLEAN appendToLibPath = TRUE;\n+\t\tif (NULL != currentLibPath) {\n+\t\t\tconst size_t currentLibPathLength = strlen(currentLibPath);\n+\t\t\tconst char *usrLib = \"/usr/lib\";\n+\t\t\tconst UDATA usrLibLength = LITERAL_STRLEN(\"/usr/lib\");\n+\t\t\tconst char *needle = strstr(currentLibPath, usrLib);\n+\t\t\twhile (NULL != needle) {\n+\t\t\t\t/* Note, inside the loop we're guaranteed to have \n+\t\t\t\t * usrLibLength of string to operate on.\n+\t\t\t\t */\n+\t\t\t\tconst ptrdiff_t offsetFromStart = needle - currentLibPath;\n+\t\t\t\tconst size_t remainingLength = currentLibPathLength - offsetFromStart;\n+\t\t\t\tif (0 != offsetFromStart) {\n+\t\t\t\t\tif (needle[-1] != ':') {\n+\t\t\t\t\t\tgoto nextCheck;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (remainingLength == usrLibLength) {\n+\t\t\t\t\t/* Found a match */\n+\t\t\t\t\tappendToLibPath = FALSE;\n+\t\t\t\t\tbreak;\n+\t\t\t\t} else if (remainingLength > usrLibLength) {\n+\t\t\t\t\tif (needle[usrLibLength] == ':') {\n+\t\t\t\t\t\t/* Found a match */\n+\t\t\t\t\t\tappendToLibPath = FALSE;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t}", "originalCommit": "8accd6aa566f962c6ff27e95a673b3a267bb490a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0ODcyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9814#discussion_r439048729", "bodyText": "nit: please remove whitespace at the end of this line", "author": "keithc-ca", "createdAt": "2020-06-11T20:20:35Z", "path": "runtime/j9vm/jvm.c", "diffHunk": "@@ -1717,12 +1717,57 @@ JNI_CreateJavaVM_impl(JavaVM **pvm, void **penv, void *vm_args, BOOLEAN isJITSer\n \t * trying to load application native libraries that are linked against\n \t * libraries in /usr/lib we could fail to find those libraries if /usr/lib\n \t * is not on the LIBPATH.\n-\t * */\n-\taddToLibpath(\"/usr/lib\", FALSE);\n+\t */\n+\t{\n+\t\t/* github #8504 shows tests fail if the libpath is modified\n+\t\t * when creating a new process from Java.  The easy fix is to only\n+\t\t * append to the libpath if /usr/lib isn't already present.\n+\t\t * Example libpath:\n+\t\t * LIBPATH=/jre/lib/ppc64/j9vm:/jre/lib/ppc64:/jre/lib/ppc64/jli:/jre/../lib/ppc64:/usr/lib\n+\t\t */\n+\n+\t\tconst char *currentLibPath = getenv(\"LIBPATH\");\n+\t\tBOOLEAN appendToLibPath = TRUE;\n+\t\tif (NULL != currentLibPath) {\n+\t\t\tconst size_t currentLibPathLength = strlen(currentLibPath);\n+\t\t\tconst char *usrLib = \"/usr/lib\";\n+\t\t\tconst UDATA usrLibLength = LITERAL_STRLEN(\"/usr/lib\");\n+\t\t\tconst char *needle = strstr(currentLibPath, usrLib);\n+\t\t\twhile (NULL != needle) {\n+\t\t\t\t/* Note, inside the loop we're guaranteed to have ", "originalCommit": "8accd6aa566f962c6ff27e95a673b3a267bb490a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f15c903063dff75d903225db48c1d9e465abee3f", "url": "https://github.com/eclipse-openj9/openj9/commit/f15c903063dff75d903225db48c1d9e465abee3f", "message": "Process the whole LIBPATH looking for '/usr/lib'.\n\nThere are a couple of cases to consider:\n* \"/usr/lib\": Path is exactly equal to /usr/lib\n\n* \"/usr/lib:...\" Path begins with /usr/lib.  This may\n\tor may not result in a valid match depending\n\ton whether it is followed by a ':' or not.\n\n* \"...:/usr/lib:...\" Path includes /usr/lib.  This may\n\tor may not result in a valid match depending\n\ton whether it is preceded by \":\" and followed\n\tby a ':' or not.\n\n* \"....:/usr/lib\" Path ends with /usr/lib.\n\nAll of these can be handled by looping through the LIBPATH\nlooking for /usr/lib and then handling the boundary cases\ncarefully.\n\nfixes: #8504\n\nSigned-off-by: Dan Heidinga <daniel_heidinga@ca.ibm.com>", "committedDate": "2020-06-15T15:53:01Z", "type": "commit"}, {"oid": "f15c903063dff75d903225db48c1d9e465abee3f", "url": "https://github.com/eclipse-openj9/openj9/commit/f15c903063dff75d903225db48c1d9e465abee3f", "message": "Process the whole LIBPATH looking for '/usr/lib'.\n\nThere are a couple of cases to consider:\n* \"/usr/lib\": Path is exactly equal to /usr/lib\n\n* \"/usr/lib:...\" Path begins with /usr/lib.  This may\n\tor may not result in a valid match depending\n\ton whether it is followed by a ':' or not.\n\n* \"...:/usr/lib:...\" Path includes /usr/lib.  This may\n\tor may not result in a valid match depending\n\ton whether it is preceded by \":\" and followed\n\tby a ':' or not.\n\n* \"....:/usr/lib\" Path ends with /usr/lib.\n\nAll of these can be handled by looping through the LIBPATH\nlooking for /usr/lib and then handling the boundary cases\ncarefully.\n\nfixes: #8504\n\nSigned-off-by: Dan Heidinga <daniel_heidinga@ca.ibm.com>", "committedDate": "2020-06-15T15:53:01Z", "type": "forcePushed"}]}