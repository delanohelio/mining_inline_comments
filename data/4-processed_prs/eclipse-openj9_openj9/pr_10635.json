{"pr_number": 10635, "pr_title": "Adding `stalltimems` in `gc-end` stanza", "pr_createdAt": "2020-09-17T15:59:49Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10635", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MjE1MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r493092150", "bodyText": "@amicic @LinHu2016 Could you please comment on wether clearing the increment stats here is correct.\nThe stats do get cleared in line 978 globalMarkPhase(env, true);, but GMP will skip this if the following condition fails:\nif ((_globalMarkPhaseIncrementBytesStillToScan > 0) || (MM_CycleState::state_process_work_packets_after_initial_mark != _persistentGlobalMarkPhaseState._markDelegateState))\nI think we need to clear the stats because it's possible to finish and report end of increment without ever clearing the increment stats for GMP, hence we can end up with old/stale stats of previous increment. This wasn't an issue before, but now that we use increment stats for reporting stall times, the old increment stall will be reported in the case globalMarkPhase(env, true); isn't called + I don't see any useful work being doing for which stats are collected when globalMarkPhase(env, true) is skipped.\n@gza060625 has verified that stats aren't cleared in this case.", "author": "RSalman", "createdAt": "2020-09-22T23:39:07Z", "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "diffHunk": "@@ -977,6 +977,9 @@ MM_IncrementalGenerationalGC::runGlobalMarkPhaseIncrement(MM_EnvironmentVLHGC *e\n \tif ((_globalMarkPhaseIncrementBytesStillToScan > 0) || (MM_CycleState::state_process_work_packets_after_initial_mark != _persistentGlobalMarkPhaseState._markDelegateState)) {\n \t\tglobalMarkPhase(env, true);\n \t}\n+\telse {\n+\t\tstatic_cast<MM_CycleStateVLHGC*>(env->_cycleState)->_vlhgcIncrementStats.clear();", "originalCommit": "16d52d8c53abb1e518dadbb309d3b94ebc5b663c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUzODg3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r497538870", "bodyText": "This looks correct to me. The only thing is, should we pull out that line in front of 'if' statement (and remove it from globalMarkPhase)?", "author": "amicic", "createdAt": "2020-09-30T14:07:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1MTQzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r497751434", "bodyText": "This can be done, however globalMarkPhase method is used in one other place, for Global GC in runGlobalGarbageCollection.\nWe'll have to account for this clearing in runGlobalGarbageCollection as well then.", "author": "RSalman", "createdAt": "2020-09-30T19:32:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1MjUxOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r497752518", "bodyText": "setupBeforeGlobalGC is a common method called before globalMarkPhase for both GlobalGC and GMP, and its used exclusively by the 2. Perhaps the clearing can be moved up to there", "author": "RSalman", "createdAt": "2020-09-30T19:34:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc1ODc2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r497758764", "bodyText": "Only concern here would be is if anything in interval between setupBeforeGlobalGC &  globalMarkPhase relies on increment stats being not cleared (e.g using previous increments stats for current increment etc), I don't see a reason for this or it happening from a quick look.\nMM_IncrementalGenerationalGC::runGlobalGarbageCollection(...) {\n...\n      setupBeforeGlobalGC(env, env->_cycleState->_gcCode); // **** MOVE CLEAR UP HERE ****\n\n\tif (_extensions->tarokUseProjectedSurvivalCollectionSet) {\n\t\t_projectedSurvivalCollectionSetDelegate.createRegionCollectionSetForGlobalGC(env);\n\t} else {\n\t\t_collectionSetDelegate.createRegionCollectionSetForGlobalGC(env);\n\t}\n\t\n\t_interRegionRememberedSet->prepareRegionsForGlobalCollect(env, isGlobalMarkPhaseRunning());\n\n\tglobalMarkPhase(env, false); // **** EXISTING CLEAR ****\n...\nMM_IncrementalGenerationalGC::runGlobalMarkPhaseIncrement(...) {\n...\n\tsetupBeforeGlobalGC(env, env->_cycleState->_gcCode); // **** MOVE CLEAR UP HERE ****\n\n\tif(!isGlobalMarkPhaseRunning()) {\n\t\treportGMPCycleStart(env);\n\t\t_persistentGlobalMarkPhaseState._vlhgcCycleStats.clear();\n\t}\n\n\treportGMPIncrementStart(env);\n\treportGCIncrementStart(env, \"GMP increment\", env->_cycleState->_currentIncrement);\n\n\t_extensions->globalVLHGCStats.gcCount += 1;\n\n\tif ((_globalMarkPhaseIncrementBytesStillToScan > 0) || (MM_CycleState::state_process_work_packets_after_initial_mark != _persistentGlobalMarkPhaseState._markDelegateState)) {\n\t\tglobalMarkPhase(env, true); // **** EXISTING CLEAR ****\n\t}\n...", "author": "RSalman", "createdAt": "2020-09-30T19:46:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc2NTI5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r497765291", "bodyText": "I'm not super familiar with this code, would like to confirm this change or simply take path of least changes.\nAnother \"safer\" solution is pull out the clear from globalMarkPhase and add explicitly have the clear before calling globalMarkPhase at both call sites.", "author": "RSalman", "createdAt": "2020-09-30T19:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQ5ODgyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r498498823", "bodyText": "Those are good observations. Moving it to setupBeforeGlobalGC sounds very reasonable (simple and safe).\nBTW, there is another point where clearing is done in IGGC::internalPreCollect. I believe  this path is taken when doing final STW increment of GMP. It may become redundant if we introduce a clear for any increment of GMP. Hard to say without actually running and verifying it.", "author": "amicic", "createdAt": "2020-10-01T20:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MjE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzNjExMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r498536111", "bodyText": "@gza060625 this PR can be wrapped up with the changes discussed above", "author": "RSalman", "createdAt": "2020-10-01T22:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MjE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NTY3OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r493095678", "bodyText": "I think we should rename this to getIncrementStallTime", "author": "RSalman", "createdAt": "2020-09-22T23:50:48Z", "path": "runtime/gc_stats/VLHGCIncrementStats.hpp", "diffHunk": "@@ -117,6 +117,14 @@ class MM_VLHGCIncrementStats : public MM_Base\n \t\t_copyForwardStats.merge(&stats->_copyForwardStats);\n \t\t_irrsStats.merge(&stats->_irrsStats);\n \t}\n+\n+\t/**\n+\t * Get total stall time \n+\t */\n+\tuint64_t getTotalStallTime()", "originalCommit": "16d52d8c53abb1e518dadbb309d3b94ebc5b663c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0MTIxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r497541214", "bodyText": "Both class and instance name has 'Increment' in them.  I tend to avoid to repeat those attributes in method names.\nI'd either keep getTotalStallTime or simply call it getStallTime (that's the name used in various OMR Stats struct).", "author": "amicic", "createdAt": "2020-09-30T14:10:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NTY3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0NDMzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r497544332", "bodyText": "a simple validation check: in GMP increment you should never see non-zero stats from _copyForwardStats", "author": "amicic", "createdAt": "2020-09-30T14:14:48Z", "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "diffHunk": "@@ -2234,6 +2247,23 @@ MM_IncrementalGenerationalGC::reportGCIncrementEnd(MM_EnvironmentBase *env)\n \t}\n \n \tstats->_endTime = j9time_hires_clock();\n+\tstats->_stallTime = static_cast<MM_CycleStateVLHGC*>(env->_cycleState)->_vlhgcIncrementStats.getTotalStallTime();\n+\t\n+\tMM_VLHGCIncrementStats temp = static_cast<MM_CycleStateVLHGC*>(env->_cycleState)->_vlhgcIncrementStats;\n+\tOMRPORT_ACCESS_FROM_OMRPORT(env->getPortLibrary());\n+\tomrtty_printf(\"!@ Trigger\\n\");\n+\tomrtty_printf(\"!@ _copyForwardStats\\t%d\\n\",temp._copyForwardStats.getStallTime());\n+\tomrtty_printf(\"!@ _markStats\\t%d\\n\",temp._markStats.getStallTime());\n+\tomrtty_printf(\"!@ _workPacketStats\\t%d\\n\",temp._workPacketStats.getStallTime());\n+\tomrtty_printf(\"!@ _moveStallTime\\t%d\\n\",temp._compactStats._moveStallTime);\n+\tomrtty_printf(\"!@ _rebuildStallTime\\t%d\\n\",temp._compactStats._rebuildStallTime);\n+\tomrtty_printf(\"!@ sum\\t%d\\n\",\n+\ttemp._copyForwardStats.getStallTime()+\n+\ttemp._markStats.getStallTime()+\n+\ttemp._workPacketStats.getStallTime()+\n+\ttemp._compactStats._moveStallTime+\n+\ttemp._compactStats._rebuildStallTime\n+\t);", "originalCommit": "aa3c13d95f969272c21733d52fdc033dda2111a4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzYyOTYxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r497629616", "bodyText": "@gza060625 added some validation asserts as part of testing, this being one of them. They were removed after testing, Should they added?", "author": "RSalman", "createdAt": "2020-09-30T16:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0NDMzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk2NTU4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r498965588", "bodyText": "yes, it's ok to add some asserts", "author": "amicic", "createdAt": "2020-10-02T17:52:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0NDMzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0MzI3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r499343273", "bodyText": "This file should stay untouched, no changes in here.", "author": "RSalman", "createdAt": "2020-10-05T04:42:47Z", "path": "runtime/gc_vlhgc/GlobalMarkingScheme.cpp", "diffHunk": "@@ -168,7 +168,7 @@ MM_ParallelGlobalMarkTask::cleanup(MM_EnvironmentBase *envBase)\n {\n \tMM_EnvironmentVLHGC *env = MM_EnvironmentVLHGC::getEnvironment(envBase);\n \tPORT_ACCESS_FROM_ENVIRONMENT(env);\n-\t\n+", "originalCommit": "a227df236d3d280c188476ced8763e478d8ba49b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0NDQ3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r499344479", "bodyText": "This should be moved down, before line 1005", "author": "RSalman", "createdAt": "2020-10-05T04:49:38Z", "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "diffHunk": "@@ -973,7 +972,7 @@ MM_IncrementalGenerationalGC::runGlobalMarkPhaseIncrement(MM_EnvironmentVLHGC *e\n \n \t/* Perform any main-specific setup */\n \t_extensions->globalVLHGCStats.gcCount += 1;\n-\n+\tAssert_MM_true(0 == static_cast<MM_CycleStateVLHGC*>(env->_cycleState)->_vlhgcIncrementStats._copyForwardStats.getStallTime());", "originalCommit": "a227df236d3d280c188476ced8763e478d8ba49b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0OTc0MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r499349741", "bodyText": "GC work (which will update the increment stats) actually happens after this", "author": "RSalman", "createdAt": "2020-10-05T05:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0NDQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTM0NzgxMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10635#discussion_r499347810", "bodyText": "This should be moved down as well, before line 1122. As before, GC work (which will update the increment stats) actually happens after this", "author": "RSalman", "createdAt": "2020-10-05T05:06:45Z", "path": "runtime/gc_vlhgc/IncrementalGenerationalGC.cpp", "diffHunk": "@@ -1057,6 +1056,7 @@ MM_IncrementalGenerationalGC::runGlobalGarbageCollection(MM_EnvironmentVLHGC *en\n \t\n \t_interRegionRememberedSet->prepareRegionsForGlobalCollect(env, isGlobalMarkPhaseRunning());\n \n+\tAssert_MM_true(0 == static_cast<MM_CycleStateVLHGC*>(env->_cycleState)->_vlhgcIncrementStats._copyForwardStats.getStallTime());", "originalCommit": "a227df236d3d280c188476ced8763e478d8ba49b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "65cba928d89a58fc5615633409d52f26ee5dd483", "url": "https://github.com/eclipse-openj9/openj9/commit/65cba928d89a58fc5615633409d52f26ee5dd483", "message": "Adding `stalltimems` in `gc-end` stanza\nomr:https://github.com/eclipse/omr/pull/5560\n\nAttribute `stalltimems` is added to `gc-end` to report time spent in stalling (in ms).\n- New API `getTotalStallTime()` introduced for `MM_VLHGCIncrementStats`, which sums up stall times of following stats structure:\n```\n_copyForwardStats.getStallTime()\n_markStats.getStallTime()\n_sweepStats.idleTime\n_workPacketStats.getStallTime()\n_compactStats._moveStallTime\n_compactStats._rebuildStallTime;\n```\n- Move clearing of `_vlhgcIncrementStats` from `MM_IncrementalGenerationalGC::globalMarkPhase` to `MM_IncrementalGenerationalGC::setupBeforeGlobalGC` to force increment stats cleared at start of each global increment..\n- Add assertions to guarantee correctness of increments stats.\n- Set collection stats `stalltime` for verbose GC increment end event\n\nSigned-off-by: Enson Guo <enson.guo@ibm.com>", "committedDate": "2020-10-05T17:20:03Z", "type": "forcePushed"}, {"oid": "6815f3f0b02e0e63445dfab5374114cc741ea7a4", "url": "https://github.com/eclipse-openj9/openj9/commit/6815f3f0b02e0e63445dfab5374114cc741ea7a4", "message": "Adding `stalltimems` in `gc-end` stanza\nomr:https://github.com/eclipse/omr/pull/5560\n\nAttribute `stalltimems` is added to `gc-end` to report time spent in stalling (in ms).\n- New API `getTotalStallTime()` introduced for `MM_VLHGCIncrementStats`, which sums up stall times of following stats structure:\n```\n_copyForwardStats.getStallTime()\n_markStats.getStallTime()\n_sweepStats.idleTime\n_workPacketStats.getStallTime()\n_compactStats._moveStallTime\n_compactStats._rebuildStallTime;\n```\n- Move clearing of `_vlhgcIncrementStats` from `MM_IncrementalGenerationalGC::globalMarkPhase` to `MM_IncrementalGenerationalGC::setupBeforeGlobalGC` to force increment stats cleared at start of each global increment..\n- Add assertions to guarantee correctness of increments stats.\n- Set collection stats `stalltime` for verbose GC increment end event\n\nSigned-off-by: Enson Guo <enson.guo@ibm.com>", "committedDate": "2020-10-09T15:38:46Z", "type": "commit"}, {"oid": "6815f3f0b02e0e63445dfab5374114cc741ea7a4", "url": "https://github.com/eclipse-openj9/openj9/commit/6815f3f0b02e0e63445dfab5374114cc741ea7a4", "message": "Adding `stalltimems` in `gc-end` stanza\nomr:https://github.com/eclipse/omr/pull/5560\n\nAttribute `stalltimems` is added to `gc-end` to report time spent in stalling (in ms).\n- New API `getTotalStallTime()` introduced for `MM_VLHGCIncrementStats`, which sums up stall times of following stats structure:\n```\n_copyForwardStats.getStallTime()\n_markStats.getStallTime()\n_sweepStats.idleTime\n_workPacketStats.getStallTime()\n_compactStats._moveStallTime\n_compactStats._rebuildStallTime;\n```\n- Move clearing of `_vlhgcIncrementStats` from `MM_IncrementalGenerationalGC::globalMarkPhase` to `MM_IncrementalGenerationalGC::setupBeforeGlobalGC` to force increment stats cleared at start of each global increment..\n- Add assertions to guarantee correctness of increments stats.\n- Set collection stats `stalltime` for verbose GC increment end event\n\nSigned-off-by: Enson Guo <enson.guo@ibm.com>", "committedDate": "2020-10-09T15:38:46Z", "type": "forcePushed"}]}