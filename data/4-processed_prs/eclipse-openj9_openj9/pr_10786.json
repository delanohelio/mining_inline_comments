{"pr_number": 10786, "pr_title": "Use client address of prepareForOSR helper", "pr_createdAt": "2020-10-05T18:39:33Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10786", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzYwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499827601", "bodyText": "In other parts of the code I see the following parameters being passed:\nfindOrCreateRuntimeHelper(TR_prepareForOSR, false, false, true);\nThis is the meaning of the parameters:\nTR::SymbolReference *\nOMR::SymbolReferenceTable::findOrCreateRuntimeHelper(TR_RuntimeHelper index,\n                                                     bool             canGCandReturn,\n                                                     bool             canGCandExcept,\n                                                     bool             preservesAllRegisters)\n\nIs there a reason you used false for preserveAllregisters?", "author": "mpirvu", "createdAt": "2020-10-05T19:38:37Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -465,6 +465,7 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          vmInfo._interpreterVTableOffset = TR::Compiler->vm.getInterpreterVTableOffset();\n          vmInfo._maxHeapSizeInBytes = TR::Compiler->vm.maxHeapSizeInBytes();\n          vmInfo._enableGlobalLockReservation = vmThread->javaVM->enableGlobalLockReservation;\n+         vmInfo._prepareForOSRHelper = comp->getSymRefTab()->findOrCreateRuntimeHelper(TR_prepareForOSR, false, false, false)->getMethodAddress();", "originalCommit": "72b125571f27afe03897bce5987cd62591ab4de0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNDE3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499834175", "bodyText": "I just saw that all other helpers saved in VM info use this parameters so I just copied that. I'll change it to the parameters used elsewhere for this helper.", "author": "dmitry-ten", "createdAt": "2020-10-05T19:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzYwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMwOTY3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500309679", "bodyText": "This code is obsolete in the new implementation", "author": "mpirvu", "createdAt": "2020-10-06T14:04:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyNzYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMDc1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499830756", "bodyText": "Is this runtimeHelpers global? If so, it's not going to work.", "author": "mpirvu", "createdAt": "2020-10-05T19:44:55Z", "path": "runtime/compiler/runtime/JITClientSession.cpp", "diffHunk": "@@ -406,6 +406,7 @@ ClientSessionData::getOrCacheVMInfo(JITServer::ServerStream *stream)\n       auto recv = stream->read<VMInfo, std::vector<CacheDescriptor> >();\n       _vmInfo = new (PERSISTENT_NEW) VMInfo(std::get<0>(recv));\n       _vmInfo->_j9SharedClassCacheDescriptorList = reconstructJ9SharedClassCacheDescriptorList(std::get<1>(recv));\n+      runtimeHelpers.setAddress(TR_prepareForOSR, _vmInfo->_prepareForOSRHelper);", "originalCommit": "72b125571f27afe03897bce5987cd62591ab4de0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMjM4Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499832383", "bodyText": "Yeah, it's global. I don't see a good way of accessing this helper from OMR though, it's the only reason I set address here, instead of at the callsite.", "author": "dmitry-ten", "createdAt": "2020-10-05T19:48:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMDc1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzNDk2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r499834967", "bodyText": "I guess one way would be to add a method to the front-end to specifically get prepareForOSR helper, I just don't find this to be a particularly nice solution", "author": "dmitry-ten", "createdAt": "2020-10-05T19:52:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgzMDc1Ng=="}], "type": "inlineReview"}, {"oid": "ff052dd57536adeaf1dda6928b0e117a6a55f38f", "url": "https://github.com/eclipse-openj9/openj9/commit/ff052dd57536adeaf1dda6928b0e117a6a55f38f", "message": "Use client address of prepareForOSR helper\n\nOn Power, the entry point of the method needs to be stored\nin `gr12` register. Current relocation infrastructure cannot\nrelocate the helper address that's stored in a non-call instruction,\nso JITServer just fetches the helper address from the client and sets\nit in the helpers table.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-05T20:55:30Z", "type": "forcePushed"}, {"oid": "e0cb3e39ec5eb798167b4f7202beb5d2cc901211", "url": "https://github.com/eclipse-openj9/openj9/commit/e0cb3e39ec5eb798167b4f7202beb5d2cc901211", "message": "Use client address of prepareForOSR helper\n\nOn Power, the entry point of the method needs to be stored\nin `gr12` register. Current relocation infrastructure cannot\nrelocate the helper address that's stored in a non-call instruction,\nso JITServer just fetches the helper address from the client and sets\nit in the helpers table.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T04:20:17Z", "type": "forcePushed"}, {"oid": "63ed0ff20226a3784e200c539697083497657fff", "url": "https://github.com/eclipse-openj9/openj9/commit/63ed0ff20226a3784e200c539697083497657fff", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T13:57:00Z", "type": "forcePushed"}, {"oid": "eabde637fbf5a181197ce34557658d843786452b", "url": "https://github.com/eclipse-openj9/openj9/commit/eabde637fbf5a181197ce34557658d843786452b", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T14:05:41Z", "type": "forcePushed"}, {"oid": "fca47708dcc069530abb7f6331f6e6712dc4f586", "url": "https://github.com/eclipse-openj9/openj9/commit/fca47708dcc069530abb7f6331f6e6712dc4f586", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T14:08:35Z", "type": "forcePushed"}, {"oid": "5b7f2c04e4eafc173e1765654ce43bc5852b3823", "url": "https://github.com/eclipse-openj9/openj9/commit/5b7f2c04e4eafc173e1765654ce43bc5852b3823", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T14:24:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAwMDYxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500000617", "bodyText": "New message means a minor version increment", "author": "mpirvu", "createdAt": "2020-10-06T04:35:18Z", "path": "runtime/compiler/net/MessageTypes.hpp", "diffHunk": "@@ -218,9 +218,10 @@ enum MessageType : uint16_t\n    CompInfo_setInvocationCountAtomic,\n    CompInfo_isClassSpecial,\n    CompInfo_getJ9MethodStartPC,\n+   CompInfo_getHelperMethod,", "originalCommit": "e0cb3e39ec5eb798167b4f7202beb5d2cc901211", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxMjM0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500312346", "bodyText": "Also, maybe CompInfo_getHelperAddress is more suitable for a name.", "author": "mpirvu", "createdAt": "2020-10-06T14:07:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAwMDYxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAwMTcyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500001727", "bodyText": "This needs to be deleted", "author": "mpirvu", "createdAt": "2020-10-06T04:40:13Z", "path": "runtime/compiler/runtime/JITClientSession.hpp", "diffHunk": "@@ -336,6 +336,7 @@ class ClientSessionData\n       TR_OpaqueClassBlock *_srConstructorAccessorClass;\n #endif // J9VM_OPT_SIDECAR\n       U_32 _extendedRuntimeFlags2;\n+      void *_prepareForOSRHelper;", "originalCommit": "e0cb3e39ec5eb798167b4f7202beb5d2cc901211", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMxNTQ5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500315499", "bodyText": "More descriptive names: getRuntimeHelperAddress and setRuntimeHelperAddress", "author": "mpirvu", "createdAt": "2020-10-06T14:10:21Z", "path": "runtime/compiler/runtime/JITClientSession.hpp", "diffHunk": "@@ -437,6 +437,9 @@ class ClientSessionData\n \n    TR::SymbolValidationManager::SystemClassNotWorthRemembering *getSystemClassesNotWorthRemembering() { return _systemClassesNotWorthRemembering; }\n \n+   void *getRuntimeHelper(TR_RuntimeHelper helper) { return _runtimeHelpers[helper]; }", "originalCommit": "fca47708dcc069530abb7f6331f6e6712dc4f586", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMzcwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500323703", "bodyText": "I would like to limit the overhead for the non-jitserver path, so auto compInfoPT = TR::compInfoPT; should be computed after if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER\nFor the JITServer path, is it all possible that compInfoPT does not exist? I am guessing not because at JITServer most of the code is executed during a compilation.", "author": "mpirvu", "createdAt": "2020-10-06T14:19:00Z", "path": "runtime/compiler/runtime/Runtime.cpp", "diffHunk": "@@ -167,6 +168,29 @@ void* TR_RuntimeHelperTable::getFunctionPointer(TR_RuntimeHelper h)\n \n void* TR_RuntimeHelperTable::getFunctionEntryPointOrConst(TR_RuntimeHelper h)\n    {\n+#if defined(J9VM_OPT_JITSERVER)\n+   TR::CompilationInfo *compInfo = getCompilationInfo(jitConfig);\n+   auto compInfoPT = TR::compInfoPT;\n+   if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER &&", "originalCommit": "fca47708dcc069530abb7f6331f6e6712dc4f586", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4NTM1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500385351", "bodyText": "This method is called at jit initialization, so compInfoPT could be NULL.", "author": "dmitry-ten", "createdAt": "2020-10-06T15:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMyMzcwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDMzMjkxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500332917", "bodyText": "The stream should be available from CompInfoPT->getMethodToBeCompiled()->_stream or something like that", "author": "mpirvu", "createdAt": "2020-10-06T14:28:09Z", "path": "runtime/compiler/runtime/Runtime.cpp", "diffHunk": "@@ -167,6 +168,29 @@ void* TR_RuntimeHelperTable::getFunctionPointer(TR_RuntimeHelper h)\n \n void* TR_RuntimeHelperTable::getFunctionEntryPointOrConst(TR_RuntimeHelper h)\n    {\n+#if defined(J9VM_OPT_JITSERVER) && defined(TR_HOST_POWER)\n+   TR::CompilationInfo *compInfo = getCompilationInfo(jitConfig);\n+   auto compInfoPT = TR::compInfoPT;\n+   if (compInfo->getPersistentInfo()->getRemoteCompilationMode() == JITServer::SERVER &&\n+       compInfoPT)\n+      {\n+      // Return the client-side helper address\n+      // Get cached value if it exists, otherwise make remote and cache\n+      void *helperAddress = compInfoPT->getClientData()->getRuntimeHelper(h);\n+      if (helperAddress)\n+         return helperAddress;\n+      auto stream = TR::CompilationInfo::getStream();", "originalCommit": "5b7f2c04e4eafc173e1765654ce43bc5852b3823", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c7301e25eb9b6abcd32cf20db177326840bdf5bc", "url": "https://github.com/eclipse-openj9/openj9/commit/c7301e25eb9b6abcd32cf20db177326840bdf5bc", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T14:47:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM1NDEyMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10786#discussion_r500354122", "bodyText": "People reading the code may wonder why we do this only for Power, so it's better to have a comment explaining why", "author": "mpirvu", "createdAt": "2020-10-06T14:49:58Z", "path": "runtime/compiler/runtime/Runtime.cpp", "diffHunk": "@@ -167,6 +170,29 @@ void* TR_RuntimeHelperTable::getFunctionPointer(TR_RuntimeHelper h)\n \n void* TR_RuntimeHelperTable::getFunctionEntryPointOrConst(TR_RuntimeHelper h)\n    {\n+#if defined(J9VM_OPT_JITSERVER) && defined(TR_HOST_POWER)", "originalCommit": "c7301e25eb9b6abcd32cf20db177326840bdf5bc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6fea33eac04f81c6d903585b5f9f8c06a82dfcf3", "url": "https://github.com/eclipse-openj9/openj9/commit/6fea33eac04f81c6d903585b5f9f8c06a82dfcf3", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T15:02:45Z", "type": "forcePushed"}, {"oid": "0369f73fb1aa14d082c1d555123df29b030702d2", "url": "https://github.com/eclipse-openj9/openj9/commit/0369f73fb1aa14d082c1d555123df29b030702d2", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T15:06:09Z", "type": "forcePushed"}, {"oid": "f3627fe3c69da806705230b86aef6bc6fc465c3c", "url": "https://github.com/eclipse-openj9/openj9/commit/f3627fe3c69da806705230b86aef6bc6fc465c3c", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T15:17:29Z", "type": "forcePushed"}, {"oid": "06a7d5b6a890525b13e920073ae7e447b11da121", "url": "https://github.com/eclipse-openj9/openj9/commit/06a7d5b6a890525b13e920073ae7e447b11da121", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T15:19:21Z", "type": "forcePushed"}, {"oid": "20717b43af16a597b62168ed95338b99dde641ab", "url": "https://github.com/eclipse-openj9/openj9/commit/20717b43af16a597b62168ed95338b99dde641ab", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12` register.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T15:25:21Z", "type": "forcePushed"}, {"oid": "437e9bc7f975c5cec04397ec7043fd1aaf0ea371", "url": "https://github.com/eclipse-openj9/openj9/commit/437e9bc7f975c5cec04397ec7043fd1aaf0ea371", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12`\nregister.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T17:02:57Z", "type": "forcePushed"}, {"oid": "ce731705d3c414efbbb381d85c6a876f7c0e0d89", "url": "https://github.com/eclipse-openj9/openj9/commit/ce731705d3c414efbbb381d85c6a876f7c0e0d89", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12`\nregister.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T18:15:27Z", "type": "commit"}, {"oid": "ce731705d3c414efbbb381d85c6a876f7c0e0d89", "url": "https://github.com/eclipse-openj9/openj9/commit/ce731705d3c414efbbb381d85c6a876f7c0e0d89", "message": "Fetch addresses of helper methods from the client\n\nOn Power, the entry point of the method needs to be stored in `gr12`\nregister.\nCurrent relocation infrastructure cannot relocate the helper address\nthat's stored in a non-call instruction,\nso this commit adds functionality to fetch the helper address from the\nclient and store it in the server-side cache.\n\nSigned-off-by: Dmitry Ten <Dmitry.Ten@ibm.com>", "committedDate": "2020-10-06T18:15:27Z", "type": "forcePushed"}]}