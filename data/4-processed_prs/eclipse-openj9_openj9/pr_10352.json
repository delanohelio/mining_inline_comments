{"pr_number": 10352, "pr_title": "Create JIT helper functions on checking flattened fields", "pr_createdAt": "2020-08-06T21:41:12Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10352", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAzNjQ1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10352#discussion_r468036453", "bodyText": "This seems inefficient, especially considering this method may be called for every field in an object (effectively making the traversal O(n2)). To make this more efficient, I was thinking that maybe this information could be stored in the TypeLayout/TypeLayoutEntry classes? TypeLayout also seems like a more natural place to ask this question, rather than the TR_ResolvedJ9Method.", "author": "Leonardo2718", "createdAt": "2020-08-10T16:40:05Z", "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -9412,3 +9413,50 @@ TR_J9ByteCodeIlGenerator::packReferenceChainOffsets(TR::Node *node, std::vector<\n    return;\n    }\n #endif\n+\n+bool\n+TR_ResolvedJ9Method::isFieldQType(TR::Compilation *comp, int32_t cpIndex)\n+   {\n+   if (!TR::Compiler->om.areValueTypesEnabled() ||\n+      (-1 == cpIndex))\n+      return false;\n+\n+   J9ROMFieldRef *ref = (J9ROMFieldRef *) (&romCPBase()[cpIndex]);\n+   J9ROMNameAndSignature *nameAndSignature = J9ROMFIELDREF_NAMEANDSIGNATURE(ref);\n+   J9UTF8 *signature = J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature);\n+\n+   J9JavaVM *vm = comp->fej9()->getJ9JITConfig()->javaVM;\n+   return vm->internalVMFunctions->isNameOrSignatureQtype(signature);\n+   }\n+\n+bool\n+TR_ResolvedJ9Method::isFieldFlattened(TR::Compilation *comp, int32_t cpIndex)\n+   {\n+   if (!TR::Compiler->om.areValueTypesEnabled() ||\n+      (-1 == cpIndex))\n+      return false;\n+\n+   // Assumes the field is a QType.\n+   int32_t fieldNameLength;\n+   const char *fieldName = fieldNameChars(cpIndex, fieldNameLength);\n+   int32_t sigLength;\n+   const char *fieldSignature = fieldSignatureChars(cpIndex, sigLength);\n+\n+   bool isStatic;\n+   TR_OpaqueClassBlock *containingClass = definingClassFromCPFieldRef(comp, cpIndex, isStatic);\n+   TR_VMFieldsInfo fieldsInfo(comp, reinterpret_cast<J9Class*>(containingClass), 1, stackAlloc);\n+   ListIterator<TR_VMField> iter(fieldsInfo.getFields());\n+\n+   for (TR_VMField *field = iter.getFirst(); field; field = iter.getNext())", "originalCommit": "572f7b77b20d1e5c4e4c0a12430669aa6b08d004", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc0ODU2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10352#discussion_r468748560", "bodyText": "I found TR_ResolvedJ9Method::definingClassFromCPFieldRef() already retrieves J9ROMFieldShape from VM when it retrieves the defining class. There is no need to build TR_VMFieldsInfo for the containing class.", "author": "a7ehuo", "createdAt": "2020-08-11T17:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAzNjQ1Mw=="}], "type": "inlineReview"}, {"oid": "65e5f0667cc41df15b4e2690a56b334c5b6d2cfb", "url": "https://github.com/eclipse-openj9/openj9/commit/65e5f0667cc41df15b4e2690a56b334c5b6d2cfb", "message": "Create JIT helper functions on checking flattened fields\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-08-11T17:27:50Z", "type": "forcePushed"}, {"oid": "688823b3c6f78f391a7f004f7284f4d43e89b27f", "url": "https://github.com/eclipse-openj9/openj9/commit/688823b3c6f78f391a7f004f7284f4d43e89b27f", "message": "Create JIT helper functions on checking flattened fields\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-08-13T17:11:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTMxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10352#discussion_r472375314", "bodyText": "Why does this have to be done under the lock? Since the string is in the constant pool and we don't need to do resolution to look at it?", "author": "andrewcraik", "createdAt": "2020-08-18T17:48:35Z", "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -9412,3 +9418,34 @@ TR_J9ByteCodeIlGenerator::packReferenceChainOffsets(TR::Node *node, std::vector<\n    return;\n    }\n #endif\n+\n+bool\n+TR_ResolvedJ9Method::isFieldQType(int32_t cpIndex)\n+   {\n+   if (!TR::Compiler->om.areValueTypesEnabled() ||\n+      (-1 == cpIndex))\n+      return false;\n+\n+   J9VMThread *vmThread = fej9()->vmThread();\n+   J9ROMFieldRef *ref = (J9ROMFieldRef *) (&romCPBase()[cpIndex]);\n+   J9ROMNameAndSignature *nameAndSignature = J9ROMFIELDREF_NAMEANDSIGNATURE(ref);\n+   J9UTF8 *signature = J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature);\n+   TR::VMAccessCriticalSection isFieldQType(fej9());", "originalCommit": "688823b3c6f78f391a7f004f7284f4d43e89b27f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM4ODMwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10352#discussion_r472388306", "bodyText": "The lock is not necessary since the API just checks the string. It'll be removed.", "author": "a7ehuo", "createdAt": "2020-08-18T18:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTg5MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10352#discussion_r472375890", "bodyText": "I'm guessing the lock is needed here because we might need to decide to flatten the field for the first time and might need to update the VM in some way?", "author": "andrewcraik", "createdAt": "2020-08-18T17:49:35Z", "path": "runtime/compiler/env/j9method.cpp", "diffHunk": "@@ -9412,3 +9418,34 @@ TR_J9ByteCodeIlGenerator::packReferenceChainOffsets(TR::Node *node, std::vector<\n    return;\n    }\n #endif\n+\n+bool\n+TR_ResolvedJ9Method::isFieldQType(int32_t cpIndex)\n+   {\n+   if (!TR::Compiler->om.areValueTypesEnabled() ||\n+      (-1 == cpIndex))\n+      return false;\n+\n+   J9VMThread *vmThread = fej9()->vmThread();\n+   J9ROMFieldRef *ref = (J9ROMFieldRef *) (&romCPBase()[cpIndex]);\n+   J9ROMNameAndSignature *nameAndSignature = J9ROMFIELDREF_NAMEANDSIGNATURE(ref);\n+   J9UTF8 *signature = J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature);\n+   TR::VMAccessCriticalSection isFieldQType(fej9());\n+\n+   return vmThread->javaVM->internalVMFunctions->isNameOrSignatureQtype(signature);\n+   }\n+\n+bool\n+TR_ResolvedJ9Method::isFieldFlattened(TR::Compilation *comp, int32_t cpIndex, bool isStatic)\n+   {\n+   if (!TR::Compiler->om.areValueTypesEnabled() ||\n+      (-1 == cpIndex))\n+      return false;\n+\n+   J9VMThread *vmThread = fej9()->vmThread();\n+   J9ROMFieldShape *fieldShape = NULL; \n+   TR_OpaqueClassBlock *containingClass = definingClassAndFieldShapeFromCPFieldRef(comp, cp(), cpIndex, isStatic, &fieldShape);\n+   TR::VMAccessCriticalSection isFieldFlattened(fej9());", "originalCommit": "688823b3c6f78f391a7f004f7284f4d43e89b27f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NjcyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10352#discussion_r472486723", "bodyText": "This helper accesses J9Class::flattenedClassCache. It reads the cache. To prevent other threads from writing the cache, I think a lock would be required here.", "author": "a7ehuo", "createdAt": "2020-08-18T20:53:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTg5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NDc2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10352#discussion_r473084767", "bodyText": "To prevent other threads from writing the cache,\n\nMy comments above is not correct, clarified with @tajila, entires in J9Class::flattenedClassCache are only written during classload. They are effectively read only when being exposed to the JIT. I'll remove the lock next.", "author": "a7ehuo", "createdAt": "2020-08-19T14:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NTg5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM3NjE0Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10352#discussion_r472376146", "bodyText": "can you please add doxygen for the new APIs please?", "author": "andrewcraik", "createdAt": "2020-08-18T17:50:04Z", "path": "runtime/compiler/env/j9method.h", "diffHunk": "@@ -509,6 +510,9 @@ class TR_ResolvedJ9Method : public TR_J9Method, public TR_ResolvedJ9MethodBase\n     */\n    virtual void makeParameterList(TR::ResolvedMethodSymbol *methodSym);\n \n+   virtual bool isFieldQType(int32_t cpIndex);\n+   virtual bool isFieldFlattened(TR::Compilation *comp, int32_t cpIndex, bool isStatic);", "originalCommit": "688823b3c6f78f391a7f004f7284f4d43e89b27f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e9745e7dbedf58e204da32e13d37a0c3b52df22d", "url": "https://github.com/eclipse-openj9/openj9/commit/e9745e7dbedf58e204da32e13d37a0c3b52df22d", "message": "Create JIT helper functions on checking flattened fields\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-08-18T21:25:39Z", "type": "forcePushed"}, {"oid": "9b680196cdee54cd185340e287e13ad924b9052a", "url": "https://github.com/eclipse-openj9/openj9/commit/9b680196cdee54cd185340e287e13ad924b9052a", "message": "Create JIT helper functions on checking flattened fields\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-08-19T14:54:50Z", "type": "commit"}, {"oid": "9b680196cdee54cd185340e287e13ad924b9052a", "url": "https://github.com/eclipse-openj9/openj9/commit/9b680196cdee54cd185340e287e13ad924b9052a", "message": "Create JIT helper functions on checking flattened fields\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-08-19T14:54:50Z", "type": "forcePushed"}]}