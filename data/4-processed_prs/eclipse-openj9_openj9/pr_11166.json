{"pr_number": 11166, "pr_title": "Add support for mixed references mode in CMake builds", "pr_createdAt": "2020-11-12T19:00:56Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11166", "timeline": [{"oid": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "url": "https://github.com/eclipse-openj9/openj9/commit/05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-11-12T19:09:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NDg1MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522374851", "bodyText": "This pattern repeats multiple places. Does it make sense to create function for it?", "author": "dmitripivkine", "createdAt": "2020-11-12T19:42:25Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -218,16 +218,26 @@ initializeMutatorModelJava(J9VMThread* vmThread)\n void\n cleanupMutatorModelJava(J9VMThread* vmThread)\n {\n-\tJ9VMDllLoadInfo* loadInfo;\n-\tJ9JavaVM* vm = vmThread->javaVM;\n \tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(vmThread->omrVMThread);\n \n \tif (NULL != env) {\n+\t\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\t\tJ9JavaVM *vm = vmThread->javaVM;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\t\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t\t} else {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t\t}\n+#else\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+#endif /* defined(OMR_MIXED_REFERENCES_MODE_STATIC) */\n+", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzMzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523153331", "bodyText": "Added a helper in this file", "author": "sharon-wang", "createdAt": "2020-11-13T18:40:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NDg1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2NDkzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522364932", "bodyText": "Why are some tests excluded?\nWhy more for this platform than others?\nPlease indent consistently (two spaces per level like the rest of the file).", "author": "keithc-ca", "createdAt": "2020-11-12T19:29:13Z", "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -432,6 +475,21 @@ x86-64_linux_xl:\n     8:\n       - special.system\n #========================================#\n+# Linux x86 64bits Mixed References\n+#========================================#\n+x86-64_linux_mixed:\n+  extends: ['x86-64_linux', 'mixedrefs']\n+  excluded_tests:\n+      - extended.functional\n+      - sanity.system\n+      - extended.system\n+      - special.system", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQwNjY4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522406686", "bodyText": "I \"inherited\" these test exclusions from the regular/compressed and large heap builds, i.e.:\nx86-64_linux:\n  excluded_tests:\n    11:\n      - special.system\n\nx86-64_linux_cm:\n  excluded_tests:\n    8:\n      - extended.functional\n      - sanity.system\n      - extended.system\n\nx86-64_linux_xl_cm:\n  excluded_tests:\n      - extended.functional\n      - sanity.system\n      - extended.system\n\nIs this the right course of action?", "author": "sharon-wang", "createdAt": "2020-11-12T20:29:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2NDkzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxNTQ0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522415443", "bodyText": "Ok, let's keep the exclusions for now, but reduce the indentation so it's consistent.", "author": "keithc-ca", "createdAt": "2020-11-12T20:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM2NDkzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NTY2Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522375662", "bodyText": "The last line of every text file should have a newline.", "author": "keithc-ca", "createdAt": "2020-11-12T19:43:45Z", "path": "runtime/gc_modron_startup/CMakeLists.txt", "diffHunk": "@@ -52,3 +58,31 @@ target_link_libraries(j9modronstartup\n \t\tj9gcbase\n \t\tj9utilcore\n )\n+\n+if(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tj9vm_add_library(j9modronstartup_full STATIC\n+\t\t${gc_modron_startup_sources}\n+\t)\n+\n+\ttarget_include_directories(j9modronstartup_full\n+\t\tPUBLIC\n+\t\t\t.\n+\t)\n+\n+\tif(OMR_OS_ZOS)\n+\t\ttarget_include_directories(j9modronstartup_full\n+\t\t\tPRIVATE\n+\t\t\t\t\"${omr_SOURCE_DIR}/port/zos390\"\n+\t\t)\n+\tendif()\n+\n+\ttarget_link_libraries(j9modronstartup_full\n+\t\tPRIVATE\n+\t\t\tj9vm_interface\n+\n+\t\t\tomrgc_full\n+\t\t\tj9gcstats_full\n+\t\t\tj9gcbase_full\n+\t\t\tj9utilcore\n+\t)\n+endif()", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjcxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522376716", "bodyText": "Why the different pattern here (relative to DLLMain.cpp)?", "author": "keithc-ca", "createdAt": "2020-11-12T19:45:22Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -218,16 +218,26 @@ initializeMutatorModelJava(J9VMThread* vmThread)\n void\n cleanupMutatorModelJava(J9VMThread* vmThread)\n {\n-\tJ9VMDllLoadInfo* loadInfo;\n-\tJ9JavaVM* vm = vmThread->javaVM;\n \tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(vmThread->omrVMThread);\n \n \tif (NULL != env) {\n+\t\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\t\tJ9JavaVM *vm = vmThread->javaVM;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\t\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t\t} else {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t\t}\n+#else\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQwNzkwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522407908", "bodyText": "In this file, I get this error:\nerror: ISO C++11 does not allow conversion from string literal to 'char *' [-Werror,-Wwritable-strings]\n\nwhen I use the pattern from DLLMain.cpp. Would it be better to use this same pattern in DLLMain.cpp and similar places?", "author": "sharon-wang", "createdAt": "2020-11-12T20:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQwODk5MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522408991", "bodyText": "It's yucky, but you can simply cast the macro strings to char* in the calls.", "author": "gacholio", "createdAt": "2020-11-12T20:33:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxMzYwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522413603", "bodyText": "Declaring the locals to have type const char * should fix those errors.", "author": "keithc-ca", "createdAt": "2020-11-12T20:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjcxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1MzYxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523153613", "bodyText": "Used const char * in the new helper method", "author": "sharon-wang", "createdAt": "2020-11-13T18:41:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjkzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522376934", "bodyText": "Same comment as above, here and similar places below.", "author": "keithc-ca", "createdAt": "2020-11-12T19:45:45Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -311,7 +321,17 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \tMM_EnvironmentBase env(vm->omrVM);\n \tMM_GlobalCollector *globalCollector;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n-\tJ9VMDllLoadInfo *loadInfo = FIND_DLL_TABLE_ENTRY(THIS_DLL_NAME);\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t} else {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t}\n+#else\n+\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+#endif /* defined(OMR_MIXED_REFERENCES_MODE_STATIC) */", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQwODIyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522408228", "bodyText": "Responded above", "author": "sharon-wang", "createdAt": "2020-11-12T20:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM3NjkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDczMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522380730", "bodyText": "This serves no purpose: J9_GC_DLL_NAME and J9_GC_FULL_DLL_NAME are both defined above.", "author": "keithc-ca", "createdAt": "2020-11-12T19:52:04Z", "path": "runtime/include/j9lib.h.in", "diffHunk": "@@ -88,6 +90,9 @@ extern\"C\"{\n #ifndef J9_GC_DLL_NAME\n #define J9_GC_DLL_NAME \"j9gc29\"\n #endif\n+#ifndef J9_GC_FULL_DLL_NAME\n+#define J9_GC_FULL_DLL_NAME \"j9gc_full29\"\n+#endif", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxMDE3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522410173", "bodyText": "There are several extra defines, for example.:\n#ifndef J9_VM_DLL_NAME\n#define J9_VM_DLL_NAME \"j9vm29\"\n#endif\n#ifndef J9_SHARED_DLL_NAME\n#define J9_SHARED_DLL_NAME \"j9shr29\"\n#endif\n#ifndef J9_VERIFY_DLL_NAME\n#define J9_VERIFY_DLL_NAME \"j9bcv29\"\n#endif\n\nthat are already defined above. There is a note\n/* We need certain defines... this is a big hack until we can do this another way.*/\n\nI'm not sure if this is still needed, so I included the extra define. Can you confirm @dnakamura?", "author": "sharon-wang", "createdAt": "2020-11-12T20:35:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQxNDczMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522414733", "bodyText": "Ok, let's defer cleaning up; could you open an issue, please?", "author": "keithc-ca", "createdAt": "2020-11-12T20:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUxMDk4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r522510980", "bodyText": "Opened #11174", "author": "sharon-wang", "createdAt": "2020-11-12T23:45:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5ODg2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531198866", "bodyText": "the comment is copied over from the j9lib.h.ftl file which this is based off of.  My best guess is that its refereing to some kind of limitiation in uma, namely targets not being picked up as part of\n<#list uma.spec.artifacts as artifact>\n<#if artifact.data.dllDescription.present>\n#define J9${artifact.data.dllDescription.underscored_data}_DLL_NAME \"${artifact.targetNameWithRelease}\"\n</#if>\n</#list>\n\nShould be safe to delete everything below that comment. Also, givent that we are only using #defines there is no real reason to keep the extern \"C\" { there either", "author": "dnakamura", "createdAt": "2020-11-26T19:25:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDczMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwNDk3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531204975", "bodyText": "Thanks Devin, I'll copy over this info to the issue. I think I can address this in my UMA changes to enable mixed references.", "author": "sharon-wang", "createdAt": "2020-11-26T19:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM4MDczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExNzExMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523117110", "bodyText": "Please use ! rather than FALSE ==", "author": "gacholio", "createdAt": "2020-11-13T17:37:55Z", "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -221,7 +221,16 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n #endif//TR_HOST_X86\n             )\n                {\n-               J9VMDllLoadInfo* gcLoadInfo = FIND_DLL_TABLE_ENTRY( J9_GC_DLL_NAME );\n+               J9VMDllLoadInfo* gcLoadInfo = NULL;\n+               char *gcDLLName = J9_GC_DLL_NAME;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+               if (FALSE == J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExNzQxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523117416", "bodyText": "Same comment about !", "author": "gacholio", "createdAt": "2020-11-13T17:38:30Z", "path": "runtime/gc/dllinit.c", "diffHunk": "@@ -52,9 +52,17 @@ JVM_OnLoad( JavaVM *jvm, char* commandLineOptions, void *reserved )\n IDATA \n J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved) \n {\n-\tJ9VMDllLoadInfo* loadInfo = FIND_DLL_TABLE_ENTRY( THIS_DLL_NAME );\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n \tIDATA rc = J9VMDLLMAIN_OK;\n-\t\n+\tchar *gcDLLName = J9_GC_DLL_NAME;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (FALSE == J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExODk2Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523118967", "bodyText": "This could be done without the #else. The pattern used for most of the rest of the code is:\n#if static\nif (!compressed) {\n  info = gc_full\n} else\n#endif \n{\n  info = gc\n}", "author": "gacholio", "createdAt": "2020-11-13T17:41:23Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -218,16 +218,26 @@ initializeMutatorModelJava(J9VMThread* vmThread)\n void\n cleanupMutatorModelJava(J9VMThread* vmThread)\n {\n-\tJ9VMDllLoadInfo* loadInfo;\n-\tJ9JavaVM* vm = vmThread->javaVM;\n \tMM_EnvironmentBase *env = MM_EnvironmentBase::getEnvironment(vmThread->omrVMThread);\n \n \tif (NULL != env) {\n+\t\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\t\tJ9JavaVM *vm = vmThread->javaVM;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\t\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t\t} else {\n+\t\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t\t}\n+#else\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzEzODEzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523138137", "bodyText": "Is there a preference that the pattern used in jvminit, dllinit, etc. is the same as that of mminit?\nThis is the current pattern used in jvminit, dllinit, etc:\n\tchar *gcDLLName = gc;\n#if static\n\tif (!compressed) {\n\t\tgcDLLName = gc_full;\n\t}\n#endif /*\n\n/* some code in between */\n\n\tload(gcDLLName);\n\nI can use this pattern for mminit as well, or update mminit with the pattern you've indicated (but will differ from the other files).", "author": "sharon-wang", "createdAt": "2020-11-13T18:17:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExODk2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE0NTM3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523145379", "bodyText": "I thought @dmitripivkine wanted this moved into a helper, and you had agreed. For the simple string assignment, I'm fine with the existing pattern. For the code that calls the macro, I would prefer the new pattern to avoid code duplication (however trivial it may be).", "author": "gacholio", "createdAt": "2020-11-13T18:28:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExODk2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExOTMwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523119303", "bodyText": "Same comment as above - isn't this moving into a function?", "author": "gacholio", "createdAt": "2020-11-13T17:42:03Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -311,7 +321,17 @@ j9gc_initialize_heap(J9JavaVM *vm, IDATA *memoryParameterTable, UDATA heapBytesR\n \tMM_EnvironmentBase env(vm->omrVM);\n \tMM_GlobalCollector *globalCollector;\n \tPORT_ACCESS_FROM_JAVAVM(vm);\n-\tJ9VMDllLoadInfo *loadInfo = FIND_DLL_TABLE_ENTRY(THIS_DLL_NAME);\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t} else {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t}\n+#else", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExOTM4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523119384", "bodyText": "Same comment as above - isn't this moving into a function?", "author": "gacholio", "createdAt": "2020-11-13T17:42:11Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -515,7 +535,17 @@ gcInitializeHeapStructures(J9JavaVM *vm)\n \n \tMM_MemorySpace *defaultMemorySpace;\n \tMM_GCExtensions *extensions = MM_GCExtensions::getExtensions(vm);\n-\tJ9VMDllLoadInfo *loadInfo = FIND_DLL_TABLE_ENTRY(THIS_DLL_NAME);\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t} else {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t}\n+#else", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzExOTQ2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523119460", "bodyText": "Same comment as above - isn't this moving into a function?", "author": "gacholio", "createdAt": "2020-11-13T17:42:19Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -2831,7 +2861,17 @@ configurateGCWithPolicyAndOptions(OMR_VM* omrVM)\n jint\n gcInitializeDefaults(J9JavaVM* vm)\n {\n-\tJ9VMDllLoadInfo *loadInfo = FIND_DLL_TABLE_ENTRY(THIS_DLL_NAME);\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_DLL_NAME);\n+\t} else {\n+\t\tloadInfo = FIND_DLL_TABLE_ENTRY(J9_GC_FULL_DLL_NAME);\n+\t}\n+#else", "originalCommit": "05e6d8f3fb20bb8278b146764bf88fd8de7f3f2a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "url": "https://github.com/eclipse-openj9/openj9/commit/f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-11-13T18:38:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NDY0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523154647", "bodyText": "@gacholio this is the new helper function", "author": "sharon-wang", "createdAt": "2020-11-13T18:43:27Z", "path": "runtime/gc_modron_startup/mminit.cpp", "diffHunk": "@@ -3217,4 +3216,20 @@ gcCleanupVMHooks(MM_GCExtensionsBase *extensions)\n \t}\n }\n \n+J9VMDllLoadInfo *\n+getGCDllLoadInfo(J9JavaVM *vm)\n+{\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\tconst char *gcDLLName = J9_GC_DLL_NAME;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (!J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tgcDLLName = J9_GC_FULL_DLL_NAME;\n+\t}\n+#endif /* defined(OMR_MIXED_REFERENCES_MODE_STATIC) */\n+\tloadInfo = FIND_DLL_TABLE_ENTRY(gcDLLName);\n+\n+\treturn loadInfo;\n+}\n+", "originalCommit": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjUxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523156514", "bodyText": "Please use the new helper here as it is retrieving the loadInfo.", "author": "gacholio", "createdAt": "2020-11-13T18:47:13Z", "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -221,7 +221,16 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n #endif//TR_HOST_X86\n             )\n                {\n-               J9VMDllLoadInfo* gcLoadInfo = FIND_DLL_TABLE_ENTRY( J9_GC_DLL_NAME );\n+               J9VMDllLoadInfo* gcLoadInfo = NULL;", "originalCommit": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU0OTM2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r524549368", "bodyText": "I've having trouble finding a good home for the new helper. If I keep it in mminit.h/mminit.cpp, it works fine for runtime/gc/dllinit.c, but I'm running into the following when I try to include the header and I end up having to link against gc_modron_startup:\nUndefined symbols for architecture x86_64:\n  \"_MemoryManagerFunctions\", referenced from:\n      _gcInitializeDefaults in libj9modronstartup.a(mminit.cpp.o)\n  \"tgcParseArgs(J9JavaVM*, char*)\", referenced from:\n      _gcParseTGCCommandLine in libj9modronstartup.a(mmparse.cpp.o)\n  \"tgcInitializeRequestedOptions(J9JavaVM*)\", referenced from:\n      _gcParseTGCCommandLine in libj9modronstartup.a(mmparse.cpp.o)\nld: symbol(s) not found for architecture x86_64\nclang: error: linker command failed with exit code 1 (use -v to see invocation)\n\nI also thought that jvminitcommon.c/jvminitcommon.h would be a logical spot for the helper, but it looks like I'd have to update the CMakelists for gc_modron_startup, compiler and gc to include/link against j9vm, which seems a bit overkill.\nWould it be sufficient to use the helper everywhere other than here (runtime/compiler/control/DLLMain.cpp)? Or maybe there's another way to do this that I'm not thinking of?", "author": "sharon-wang", "createdAt": "2020-11-16T20:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjUxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1NzEwOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r524557109", "bodyText": "This has nothing to do with JVMTI, so certainly not there.\nIt's no problem to create a new file in util for the helper (gcloadinfo.c perhaps) - util is already linked with everything. The function prototype can go in util_api.h.", "author": "gacholio", "createdAt": "2020-11-16T20:37:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE1NjYxNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r523156615", "bodyText": "Please use the new helper here as it is retrieving the loadInfo.", "author": "gacholio", "createdAt": "2020-11-13T18:47:25Z", "path": "runtime/gc/dllinit.c", "diffHunk": "@@ -52,9 +52,17 @@ JVM_OnLoad( JavaVM *jvm, char* commandLineOptions, void *reserved )\n IDATA \n J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved) \n {\n-\tJ9VMDllLoadInfo* loadInfo = FIND_DLL_TABLE_ENTRY( THIS_DLL_NAME );\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n \tIDATA rc = J9VMDLLMAIN_OK;\n-\t\n+\tchar *gcDLLName = J9_GC_DLL_NAME;", "originalCommit": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MDUzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525360532", "bodyText": "Why define configurations *_mixed and *_mixed_cm when only *_mixed_cm is supported?", "author": "keithc-ca", "createdAt": "2020-11-17T17:46:09Z", "path": "buildenv/jenkins/variables/defaults.yml", "diffHunk": "@@ -250,6 +255,21 @@ ppc64le_linux_xl_cm:\n ppc64le_linux_xl_uma:\n   extends: ['ppc64le_linux_xl', 'uma']\n #========================================#\n+# Linux PPCLE 64bits Mixed References\n+#========================================#\n+ppc64le_linux_mixed:\n+  extends: ['ppc64le_linux', 'mixedrefs']\n+  excluded_tests:\n+    8:\n+      - special.system\n+    11:\n+      - special.system", "originalCommit": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ0MTU4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525441580", "bodyText": "I noticed the other configurations followed a similar hierarchy, something like:\n\n*, *_cm, *_uma for the compressed refs builds\n*_xl, *_xl_cm, *_xl_uma for the large heap builds\n\nso I defined *_mixed and I have *_mixed_cm extending them.\nAlthough these configs are defined in buildenv/jenkins/variables/defaults.yml, they're not exposed in buildenv/jenkins/jobs/pipelines/Pipeline-Build-Test-All.groovy. Once the uma changes are in, the *_mixed_uma configurations will extend the *_mixed equivalents as well, and the default *_mixed and *_mixed_uma will be made available in the pipeline SPEC as well.", "author": "sharon-wang", "createdAt": "2020-11-17T19:40:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MDUzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTQ3MTYwMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525471603", "bodyText": "I didn't realize we planned to support UMA builds - that make sense now.", "author": "keithc-ca", "createdAt": "2020-11-17T20:05:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MDUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NDc5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525364797", "bodyText": "The type needs to be const char *, else compiles will fail with a warning.", "author": "keithc-ca", "createdAt": "2020-11-17T17:50:17Z", "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -221,7 +221,16 @@ IDATA J9VMDllMain(J9JavaVM* vm, IDATA stage, void * reserved)\n #endif//TR_HOST_X86\n             )\n                {\n-               J9VMDllLoadInfo* gcLoadInfo = FIND_DLL_TABLE_ENTRY( J9_GC_DLL_NAME );\n+               J9VMDllLoadInfo* gcLoadInfo = NULL;\n+               char *gcDLLName = J9_GC_DLL_NAME;", "originalCommit": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NTg2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525365864", "bodyText": "The type needs to be const char *.", "author": "keithc-ca", "createdAt": "2020-11-17T17:51:02Z", "path": "runtime/gc/dllinit.c", "diffHunk": "@@ -52,9 +52,17 @@ JVM_OnLoad( JavaVM *jvm, char* commandLineOptions, void *reserved )\n IDATA \n J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved) \n {\n-\tJ9VMDllLoadInfo* loadInfo = FIND_DLL_TABLE_ENTRY( THIS_DLL_NAME );\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n \tIDATA rc = J9VMDLLMAIN_OK;\n-\t\n+\tchar *gcDLLName = J9_GC_DLL_NAME;", "originalCommit": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NzQwNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525367404", "bodyText": "The types need to be const char *.", "author": "keithc-ca", "createdAt": "2020-11-17T17:52:57Z", "path": "runtime/vm/jvminit.c", "diffHunk": "@@ -1192,19 +1192,28 @@ static void loadDLL(void* dllLoadInfo, void* userDataTemp) {\n  *  Every library used by the VM should have an entry here, except for any user Xruns.\n  */\n static J9Pool *\n-initializeDllLoadTable(J9PortLibrary *portLibrary, J9VMInitArgs* j9vm_args, UDATA verboseFlags)\n+initializeDllLoadTable(J9PortLibrary *portLibrary, J9VMInitArgs* j9vm_args, UDATA verboseFlags, J9JavaVM *vm)\n {\n \tJ9Pool *returnVal = pool_new(sizeof(J9VMDllLoadInfo),  0, 0, 0, J9_GET_CALLSITE(), OMRMEM_CATEGORY_VM, POOL_FOR_PORT(portLibrary));\n \tIDATA i;\n \tchar* testString, *options;\n \tJ9VMDllLoadInfo* newEntry;\n \tchar dllNameBuffer[SMALL_STRING_BUF_SIZE];\t\t\t/* Plenty big enough - needs to be at least DLLNAME_LEN */\n+\tchar *gcDLLName = J9_GC_DLL_NAME;\n+\tchar *gccheckDLLName = J9_CHECK_GC_DLL_NAME;", "originalCommit": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUyOTgxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525529814", "bodyText": "In this file, I get error: passing 'const char *' to parameter of type 'char *' discards qualifiers when adding const since the createLoadInfo() function where those names are used expects char *", "author": "sharon-wang", "createdAt": "2020-11-17T21:16:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NzQwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0ODAxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525548012", "bodyText": "It appears that the signature of createLoadInfo can easily be fixed (so the name parameter is of type const char *).", "author": "keithc-ca", "createdAt": "2020-11-17T21:50:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NzQwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2NzU4MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r525367581", "bodyText": "The type needs to be const char *.", "author": "keithc-ca", "createdAt": "2020-11-17T17:53:14Z", "path": "runtime/vm/xcheck.c", "diffHunk": "@@ -99,8 +99,16 @@ processXCheckOptions(J9JavaVM * vm, J9Pool* loadTable, J9VMInitArgs* j9vm_args)\n \tnoGCIndex = OMR_MAX(noGCIndex, noneIndex);\n \n \tif (gcIndex > noGCIndex) {\n+\t\tchar *gccheckDLLName = J9_CHECK_GC_DLL_NAME;", "originalCommit": "f1507cdf7fcf2acd9090c0d32e39cd56ee3ae888", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f2fc1ad75c5e3558b55fc8dfdcf6434047d8d005", "url": "https://github.com/eclipse-openj9/openj9/commit/f2fc1ad75c5e3558b55fc8dfdcf6434047d8d005", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-11-18T02:02:18Z", "type": "forcePushed"}, {"oid": "12d56d5cc6803eb492f7795303f23fc74e2886f4", "url": "https://github.com/eclipse-openj9/openj9/commit/12d56d5cc6803eb492f7795303f23fc74e2886f4", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-11-18T02:44:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyMzkyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526223923", "bodyText": "Putting the prototype in util_api.h would mean not having another include file.", "author": "gacholio", "createdAt": "2020-11-18T16:25:30Z", "path": "runtime/compiler/control/DLLMain.cpp", "diffHunk": "@@ -37,6 +37,7 @@\n #include \"runtime/codertinit.hpp\"\n #include \"rossa.h\"\n \n+#include \"gcloadinfo.h\"", "originalCommit": "12d56d5cc6803eb492f7795303f23fc74e2886f4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNTc4MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526225781", "bodyText": "This help text is questionable - we won't neccessarily be using configure.", "author": "gacholio", "createdAt": "2020-11-18T16:27:53Z", "path": "runtime/redirector/redirector.c", "diffHunk": "@@ -693,22 +699,32 @@ chooseJVM(JavaVMInitArgs *args, char *retBuffer, size_t bufferLength)\n \t\t}\n \t\tfprintf(stdout, \"does not exist.\\n\");\n \n+#if defined(OMR_GC_COMPRESSED_POINTERS) && defined(OMR_GC_FULL_POINTERS)\n+\t\tfprintf(stdout,\n+\t\t\t\t\"This JVM package includes both the '-Xcompressedrefs' and the '-Xnocompressedrefs' \"\n+\t\t\t\t\"configurations, however the VM directory could not be found. Please download the latest \"\n+\t\t\t\t\"JVM package or build with the most recent changes and run the JVM again.\\n\"\n+\t\t);\n+#else\n \t\t/* direct user to OpenJ9 build configurations to properly generate the requested build. */\n \t\tif (0 == strcmp(OPENJ9_NOCR_JVM_DIR, basePointer)) {\n \t\t\tfprintf(stdout,\n \t\t\t\t\t\"This JVM package only includes the '-Xcompressedrefs' configuration. Please run \"\n \t\t\t\t\t\"the VM without specifying the '-Xnocompressedrefs' option or by specifying the \"\n \t\t\t\t\t\"'-Xcompressedrefs' option.\\nTo compile the other configuration, please run configure \"\n-\t\t\t\t\t\"with '--with-noncompressedrefs.\\n\"\n+\t\t\t\t\t\"with '--with-noncompressedrefs', or run configure with '--with-mixedrefs=static' or \"", "originalCommit": "12d56d5cc6803eb492f7795303f23fc74e2886f4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1NDA0Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526254047", "bodyText": "What's the other method? Should the configure text be removed, or should we include the corresponding help text for the other method?", "author": "sharon-wang", "createdAt": "2020-11-18T17:03:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNTc4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3MzgxNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526273814", "bodyText": "I think it should just be removed - it's an essentially impossible situation.", "author": "gacholio", "createdAt": "2020-11-18T17:29:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjIyNTc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjY3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526252670", "bodyText": "@gacholio I think there's something wrong here. This should be the pattern instead?\n#if defined(compressed_pointers) && defined(full_pointers) // in mixed mode\n#if defined(mixed_mode_static)\n\tif (-Xnocompressedrefs was specified)\n                gcDLLName = GC_FULL;\n#else // dynamic mode\n\tif (!compressed_macro_check()) {\n\t\tgcDLLName = GC_FULL;\n\t}\n#endif /* defined(mixed_mode_static) */\n#endif /* defined(compressed_pointers) && defined(full_pointers) */", "author": "sharon-wang", "createdAt": "2020-11-18T17:01:53Z", "path": "runtime/util/gcloadinfo.c", "diffHunk": "@@ -0,0 +1,45 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020, 2020 IBM Corp. and others\n+ *\n+ * This program and the accompanying materials are made available under\n+ * the terms of the Eclipse Public License 2.0 which accompanies this\n+ * distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+ * or the Apache License, Version 2.0 which accompanies this distribution and\n+ * is available at https://www.apache.org/licenses/LICENSE-2.0.\n+ *\n+ * This Source Code may also be made available under the following\n+ * Secondary Licenses when the conditions for such availability set\n+ * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+ * General Public License, version 2 with the GNU Classpath\n+ * Exception [1] and GNU General Public License, version 2 with the\n+ * OpenJDK Assembly Exception [2].\n+ *\n+ * [1] https://www.gnu.org/software/classpath/license.html\n+ * [2] http://openjdk.java.net/legal/assembly-exception.html\n+ *\n+ * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+ *******************************************************************************/\n+\n+#include \"gcloadinfo.h\"\n+\n+/**\n+ * Retrieves the load info for the appropriate GC DLL based on reference mode.\n+ *\n+ * @param vm The Java VM\n+ * @returns J9VMDllLoadInfo for the GC DLL selected\n+ */\n+J9VMDllLoadInfo *\n+getGCDllLoadInfo(J9JavaVM *vm)\n+{\n+\tJ9VMDllLoadInfo *loadInfo = NULL;\n+\tconst char *gcDLLName = J9_GC_DLL_NAME;\n+\n+#if defined(OMR_MIXED_REFERENCES_MODE_STATIC)\n+\tif (!J9JAVAVM_COMPRESS_OBJECT_REFERENCES(vm)) {\n+\t\tgcDLLName = J9_GC_FULL_DLL_NAME;\n+\t}\n+#endif /* defined(OMR_MIXED_REFERENCES_MODE_STATIC) */\n+\tloadInfo = FIND_DLL_TABLE_ENTRY(gcDLLName);", "originalCommit": "4075a1d94d20d980760e61d8eb2644a13060a6f7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3NTU5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526275599", "bodyText": "In dynamic mode, there will only be a single DLL, much like the existing builds. The existing code seems correct to me.", "author": "gacholio", "createdAt": "2020-11-18T17:31:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM0ODIyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526348221", "bodyText": "Ok good to confirm that. So, I think there's something up with OMR_MIXED_REFERENCES_MODE_STATIC. It seems to not be defined in these files...but I do see that it is enabled in the CMakeCache.txt: OMR_MIXED_REFERENCES_MODE_STATIC:INTERNAL=ON.\nBuilding the *_full versions of the GC libs is also ifdeffed on OMR_MIXED_REFERENCES_MODE_STATIC, and those are all getting built.\nI'm not really sure why this is occurring, but I'm assuming some CMake config is a bit off. Looking into this more.", "author": "sharon-wang", "createdAt": "2020-11-18T19:05:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjY3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjM4NDE4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526384184", "bodyText": "I was missing a change to make OMR_MIXED_REFERENCES_MODE_STATIC accessible in the omr config.", "author": "sharon-wang", "createdAt": "2020-11-18T20:04:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjY3MA=="}], "type": "inlineReview"}, {"oid": "c5ebf9533d87aef25d08caa012bb880bf795ee84", "url": "https://github.com/eclipse-openj9/openj9/commit/c5ebf9533d87aef25d08caa012bb880bf795ee84", "message": "Add pipeline changes to build CMake mixed references mode\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-11-18T20:30:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2MzMzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r526463331", "bodyText": "This duplicates the setting in https://github.com/eclipse/omr/pull/5657/files, since OMR_MIXED_REFERENCES_MODE_STATIC needs to be set early enough that it is available when building j9vm_gc_glue_full.\nDoes this seem reasonable?", "author": "sharon-wang", "createdAt": "2020-11-18T22:23:51Z", "path": "runtime/cmake/caches/mxdptrs.cmake", "diffHunk": "@@ -0,0 +1,34 @@\n+################################################################################\n+# Copyright (c) 2020, 2020 IBM Corp. and others\n+#\n+# This program and the accompanying materials are made available under\n+# the terms of the Eclipse Public License 2.0 which accompanies this\n+# distribution and is available at https://www.eclipse.org/legal/epl-2.0/\n+# or the Apache License, Version 2.0 which accompanies this distribution and\n+# is available at https://www.apache.org/licenses/LICENSE-2.0.\n+#\n+# This Source Code may also be made available under the following\n+# Secondary Licenses when the conditions for such availability set\n+# forth in the Eclipse Public License, v. 2.0 are satisfied: GNU\n+# General Public License, version 2 with the GNU Classpath\n+# Exception [1] and GNU General Public License, version 2 with the\n+# OpenJDK Assembly Exception [2].\n+#\n+# [1] https://www.gnu.org/software/classpath/license.html\n+# [2] http://openjdk.java.net/legal/assembly-exception.html\n+#\n+# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception\n+################################################################################\n+\n+set(OMR_GC_POINTER_MODE \"mixed\" CACHE STRING \"\")\n+\n+# OMR_MIXED_REFERENCES_MODE is set to 'static' or 'dynamic' in the extensions CMAKE_ARGS, but a default value is provided here just in case\n+set(OMR_MIXED_REFERENCES_MODE \"static\" CACHE STRING \"\")\n+\n+if(OMR_MIXED_REFERENCES_MODE STREQUAL \"static\")\n+\tset(OMR_MIXED_REFERENCES_MODE_STATIC ON CACHE INTERNAL \"\")\n+else()\n+\tset(OMR_MIXED_REFERENCES_MODE_STATIC OFF CACHE INTERNAL \"\")\n+endif()", "originalCommit": "abf56a09f6b20a01f44cbb7f04ba771d87787fa6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAwNDIyMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r527004221", "bodyText": "The duplication isn't necessary as I pointed out privately.", "author": "keithc-ca", "createdAt": "2020-11-19T16:02:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ2MzMzMQ=="}], "type": "inlineReview"}, {"oid": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "url": "https://github.com/eclipse-openj9/openj9/commit/ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "message": "Add support for mixed references mode in CMake builds\n\nCreate new CMake spec files for mixed references mode\n\nUpdate CMakeLists.txt for GC libs to support mixed refs mode\n\nUpdate GC library selection to support mixed references static\n\nAdd configure documentation for --with-mixedrefs=[static|dynamic]\n\nAdd pipeline changes to build CMake mixed references mode\n\nSet OMR_MIXED_REFERENCES_MODE_STATIC in mxdptrs.cmake\n\nDeclare the two glue interface libraries before adding omr\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-11-19T20:14:47Z", "type": "commit"}, {"oid": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "url": "https://github.com/eclipse-openj9/openj9/commit/ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "message": "Add support for mixed references mode in CMake builds\n\nCreate new CMake spec files for mixed references mode\n\nUpdate CMakeLists.txt for GC libs to support mixed refs mode\n\nUpdate GC library selection to support mixed references static\n\nAdd configure documentation for --with-mixedrefs=[static|dynamic]\n\nAdd pipeline changes to build CMake mixed references mode\n\nSet OMR_MIXED_REFERENCES_MODE_STATIC in mxdptrs.cmake\n\nDeclare the two glue interface libraries before adding omr\n\nSigned-off-by: Sharon Wang <sharon-wang-cpsc@outlook.com>", "committedDate": "2020-11-19T20:14:47Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5OTE3Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531199173", "bodyText": "copyright bumped here but no changes made to file", "author": "dnakamura", "createdAt": "2020-11-26T19:26:44Z", "path": "runtime/cmake/caches/osx_x86-64_cmprssptrs.cmake", "diffHunk": "@@ -1,5 +1,5 @@\n ################################################################################\n-# Copyright (c) 2018, 2019, 2019 IBM Corp. and others\n+# Copyright (c) 2018, 2020 IBM Corp. and others", "originalCommit": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMDM2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531200363", "bodyText": "thought I'd fix the copyright typo (duplication of 2019), but I can remove this change and assume it will be fixed the next time someone changes this file?", "author": "sharon-wang", "createdAt": "2020-11-26T19:30:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5OTE3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTE0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531201148", "bodyText": "I would leave the change in.", "author": "gacholio", "createdAt": "2020-11-26T19:34:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE5OTE3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531201057", "bodyText": "is there a reason to use a forward declaration instead of just including gc_glue_java ?", "author": "dnakamura", "createdAt": "2020-11-26T19:33:41Z", "path": "runtime/CMakeLists.txt", "diffHunk": "@@ -299,25 +299,34 @@ target_link_libraries(j9vm_main_wrapper\n # set up glue library target names\n # See https://github.com/eclipse/omr/blob/master/doc/BuildingWithCMake.md\n set(OMR_GC_GLUE_TARGET \"j9vm_gc_glue\" CACHE INTERNAL \"\")\n+set(OMR_GC_GLUE_FULL_TARGET \"j9vm_gc_glue_full\" CACHE INTERNAL \"\")\n set(OMR_RAS_GLUE_TARGET \"j9vm_ras_glue\" CACHE INTERNAL \"\")\n set(OMR_CORE_GLUE_TARGET \"j9vm_core_glue\" CACHE INTERNAL \"\")\n set(OMR_UTIL_GLUE_TARGET \"j9vm_util_glue\" CACHE INTERNAL \"\")\n \n # setup OMR library overrides\n set(OMR_GC_LIB \"j9gc\" CACHE INTERNAL \"\")\n+set(OMR_GC_FULL_LIB \"j9gc_full\" CACHE INTERNAL \"\")\n set(OMR_HOOK_LIB \"j9hookable\" CACHE INTERNAL \"\")\n set(OMR_PORT_LIB \"j9prt\" CACHE INTERNAL \"\")\n set(OMR_THREAD_LIB \"j9thr\" CACHE INTERNAL \"\")\n set(OMR_TRACE_LIB \"j9trc\" CACHE INTERNAL \"\")\n \n set(OMR_DDR_SET \"j9ddr\" CACHE INTERNAL \"\")\n \n-add_subdirectory(gc_glue_java)\n+# Declare the GC glue interface libraries that omr might reference,\n+# including the 'full' version. We'll only add sources to the 'full'\n+# version in gc_glue_java, below, when appropriate.\n+j9vm_add_library(${OMR_GC_GLUE_TARGET} INTERFACE)\n+j9vm_add_library(${OMR_GC_GLUE_FULL_TARGET} INTERFACE)\n+", "originalCommit": "ae0f27d3e1c52cc66172bfa6a5a21186ace8057d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMjk0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531202944", "bodyText": "Yes, it's because the _full version of the glue library is only built if OMR_MIXED_REFERENCES_MODE_STATIC=ON, but OMR_MIXED_REFERENCES_MODE_STATIC is set as a cache variable later than when the glue libraries are referenced in other libraries. This results in having to run make all twice to get the build working, since on the second run, the cache variable is already set.", "author": "sharon-wang", "createdAt": "2020-11-26T19:40:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwNzUwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531207500", "bodyText": "Like the comment says:\n# Declare the GC glue interface libraries that omr might reference,\n# including the 'full' version. We'll only add sources to the 'full'\n# version in gc_glue_java, below, when appropriate.", "author": "keithc-ca", "createdAt": "2020-11-26T19:57:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwOTU5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531209594", "bodyText": "we could just remove the conditional around gc_glue_java full. Interface libraries are never built on their own. So we can just define it but never reference it anywhere", "author": "dnakamura", "createdAt": "2020-11-26T20:06:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxMTc5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531211797", "bodyText": "The point is that it must be declared before including the omr.", "author": "keithc-ca", "createdAt": "2020-11-26T20:15:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxNjk3Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531216977", "bodyText": "yes, but prior to this change we were including the gc_glue_java folder before including omr. My understanding is that the order needed to change because we gated the definition of j9vm_gc_glue_full based on OMR_MIXED_REFERENCES_MODE_STATIC, however OMR_MIXED_REFERENCES_MODE_STATIC will not be set until after omr is included. If instead of gating the definition, we always define j9vm_gc_glue_full we can continue to simply include the gc_glue_java folder before including omr", "author": "dnakamura", "createdAt": "2020-11-26T20:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxOTgzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531219832", "bodyText": "No, the glue libraries must be declared before including omr, otherwise cmake will complain 'unknown target' at [1].\n[1] https://github.com/sharon-wang/omr/blob/mixedbuild_cmake/gc/CMakeLists.txt#L536", "author": "keithc-ca", "createdAt": "2020-11-26T20:48:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyMTIzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531221234", "bodyText": "yes, but they are both declared, and defined in gc_glue_java, thus if we include gc_glue_java before including omr, they will be declared before omr is included (which is why the current builds are working)", "author": "dnakamura", "createdAt": "2020-11-26T20:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIyNDE2MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531224160", "bodyText": "We don't want anything more than the (full) interface declaration in builds not using OMR_MIXED_REFERENCES_MODE_STATIC, but that  variable is defined by omr: we need to include omr before fleshing out those interfaces (if OMR_MIXED_REFERENCES_MODE_STATIC is set).", "author": "keithc-ca", "createdAt": "2020-11-26T21:06:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTI1NjE4OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531256189", "bodyText": "I understand. My point is that you could just flush out both interfaces regardless. If you never link against the extra glue, it has no effect on the build system. With either solution, if for some reason you do link against the extra glue (with OMR_MIXED_REFERENCES_MODE_STATIC not set) you would get a link error at compile time.", "author": "dnakamura", "createdAt": "2020-11-26T23:51:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMzk4MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r531603981", "bodyText": "I think you have it backward: if we (unconditionally) provide complete library definitions, there would be no link error if the extra glue library were used (unintentionally).", "author": "keithc-ca", "createdAt": "2020-11-27T13:31:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc4MzQyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r532783427", "bodyText": "How do we want to proceed?", "author": "sharon-wang", "createdAt": "2020-11-30T17:46:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwMDk5NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r532800995", "bodyText": "I'm satisfied with this in it's current form, but I think this should wait until eclipse/omr#5657 is merged in case it evolves in a way that would alter how this handles OMR_GC_POINTER_MODE == \"mixed\".", "author": "keithc-ca", "createdAt": "2020-11-30T18:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgxMTU0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11166#discussion_r532811542", "bodyText": "Sounds good to me. @dnakamura What are your thoughts?", "author": "sharon-wang", "createdAt": "2020-11-30T18:31:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIwMTA1Nw=="}], "type": "inlineReview"}]}