{"pr_number": 8680, "pr_title": "Reduce number of VM_stackWalkerMaySkipFrames messages", "pr_createdAt": "2020-02-27T23:32:34Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8680", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NTM0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385485343", "bodyText": "vmThread is available at the beginning of this method. Use that instead.", "author": "mpirvu", "createdAt": "2020-02-28T03:00:04Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -500,6 +500,19 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          vmInfo._floatInvokeExactThunkHelper = comp->getSymRefTab()->findOrCreateRuntimeHelper(TR_icallVMprJavaSendInvokeExactF, false, false, false)->getMethodAddress();\n          vmInfo._doubleInvokeExactThunkHelper = comp->getSymRefTab()->findOrCreateRuntimeHelper(TR_icallVMprJavaSendInvokeExactD, false, false, false)->getMethodAddress();\n          vmInfo._interpreterVTableOffset = TR::Compiler->vm.getInterpreterVTableOffset();\n+         vmInfo._jlrMethodInvoke = fe->_vmThread->javaVM->jlrMethodInvoke;", "originalCommit": "b36f6b2b1805466b7799f6a0bc99b369bb52a403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NTUwNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385485507", "bodyText": "Since javaVM is used in several places you could store to a local and use that instead.", "author": "mpirvu", "createdAt": "2020-02-28T03:00:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NTM0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NTgyOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385485828", "bodyText": "I think you need to acquire VMAccess because you are working with objects which can be changed by GC", "author": "mpirvu", "createdAt": "2020-02-28T03:02:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NTM0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NjI5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385486294", "bodyText": "getOrCacheVMInfo is called several times. better to call it once and store the answer in a local reference.", "author": "mpirvu", "createdAt": "2020-02-28T03:04:50Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -692,7 +692,44 @@ TR_J9ServerVM::getStaticReferenceFieldAtAddress(uintptrj_t fieldAddress)\n bool\n TR_J9ServerVM::stackWalkerMaySkipFrames(TR_OpaqueMethodBlock *method, TR_OpaqueClassBlock *clazz)\n    {\n+   if(!method)\n+      {\n+      return false;\n+      }\n+   \n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n+\n+   if (_compInfoPT->getClientData()->getOrCacheVMInfo(stream)->_jlrMethodInvoke == NULL || ", "originalCommit": "b36f6b2b1805466b7799f6a0bc99b369bb52a403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NzA1NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385487054", "bodyText": "If _jlrMethodInvoke is NULL you have to send a message because it may have became non-null since the last time we checked.", "author": "mpirvu", "createdAt": "2020-02-28T03:08:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NjI5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NzM4OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385487388", "bodyText": "I don't see _jlrAccessibleObjectClass set anywhere in the VM. We need to ask about this and maybe we can remove it completely", "author": "mpirvu", "createdAt": "2020-02-28T03:10:03Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -692,7 +692,44 @@ TR_J9ServerVM::getStaticReferenceFieldAtAddress(uintptrj_t fieldAddress)\n bool\n TR_J9ServerVM::stackWalkerMaySkipFrames(TR_OpaqueMethodBlock *method, TR_OpaqueClassBlock *clazz)\n    {\n+   if(!method)\n+      {\n+      return false;\n+      }\n+   \n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n+\n+   if (_compInfoPT->getClientData()->getOrCacheVMInfo(stream)->_jlrMethodInvoke == NULL || \n+         _compInfoPT->getClientData()->getOrCacheVMInfo(stream)->_jlrMethodInvoke == ((J9Method *) method))\n+      {\n+      return true;\n+      }\n+\n+   if(!clazz)\n+      {\n+      return false;\n+      }\n+\n+   TR_OpaqueClassBlock * jlrAccessibleObjectClass = _compInfoPT->getClientData()->getOrCacheVMInfo(stream)->_jlrAccessibleObjectClass;\n+   if (jlrAccessibleObjectClass != NULL && TR_J9ServerVM::isInstanceOf( clazz, jlrAccessibleObjectClass ,false))", "originalCommit": "b36f6b2b1805466b7799f6a0bc99b369bb52a403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcyNjc4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385726784", "bodyText": "I believe it's obsolete, in 2011 there was a commit \"never initialize vm->jlrAccessibleObject again, and stop checking against it in stackwalks as we will always be J2SE_SHAPE_SUN\"", "author": "pshipton", "createdAt": "2020-02-28T14:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4NzM4OA=="}], "type": "inlineReview"}, {"oid": "e4b2766f2d58e2105ec45a91eedb27ffd4ef0e86", "url": "https://github.com/eclipse-openj9/openj9/commit/e4b2766f2d58e2105ec45a91eedb27ffd4ef0e86", "message": "\\Reduce JITServer VM_stackWalkerMaySkipFrames messages\n\nAdd checks in TR_J9ServerVM::stackWalkerMaySkipFrames function\nReduce messages by caching required values to VMInfo\nAdd message handling in JITServer messageType::VM_getVMInfo\nRemove javaVM->jlrAccessibleObject in JITServer functions since it is depriciated\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-02-28T16:16:55Z", "type": "forcePushed"}, {"oid": "f604cad07a52f020487fb7cbe033dbbbdd8a421c", "url": "https://github.com/eclipse-openj9/openj9/commit/f604cad07a52f020487fb7cbe033dbbbdd8a421c", "message": "Reduce JITServer VM_stackWalkerMaySkipFrames messages\n\nAdd checks in TR_J9ServerVM::stackWalkerMaySkipFrames function\nReduce messages by caching required values to VMInfo\nAdd message handling in JITServer messageType::VM_getVMInfo\nRemove javaVM->jlrAccessibleObject in JITServer functions since it is depriciated\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-02-28T16:31:43Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgwNjI4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385806284", "bodyText": "You need to create a block here with { } so that we leave the critical section as soon as possible", "author": "mpirvu", "createdAt": "2020-02-28T16:51:40Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -500,6 +501,18 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          vmInfo._floatInvokeExactThunkHelper = comp->getSymRefTab()->findOrCreateRuntimeHelper(TR_icallVMprJavaSendInvokeExactF, false, false, false)->getMethodAddress();\n          vmInfo._doubleInvokeExactThunkHelper = comp->getSymRefTab()->findOrCreateRuntimeHelper(TR_icallVMprJavaSendInvokeExactD, false, false, false)->getMethodAddress();\n          vmInfo._interpreterVTableOffset = TR::Compiler->vm.getInterpreterVTableOffset();\n+         TR::VMAccessCriticalSection getVMInfo(fe);", "originalCommit": "f604cad07a52f020487fb7cbe033dbbbdd8a421c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDc4NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385810785", "bodyText": "If vmInfo->jlrMethodInvoke is null you have to send a message to the client to get updated information. This message is actually JITServer::MessageType::VM_stackWalkerMaySkipFrames, but change it such that it returns the value of vmInfo->jlrMethodInvoke as well so that we can update at the server.", "author": "mpirvu", "createdAt": "2020-02-28T17:00:12Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -692,7 +692,33 @@ TR_J9ServerVM::getStaticReferenceFieldAtAddress(uintptrj_t fieldAddress)\n bool\n TR_J9ServerVM::stackWalkerMaySkipFrames(TR_OpaqueMethodBlock *method, TR_OpaqueClassBlock *clazz)\n    {\n+   if(!method)\n+      {\n+      return false;\n+      }\n+\n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n+   auto *vmInfo = _compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n+   \n+   if (vmInfo->_jlrMethodInvoke == ((J9Method *) method))", "originalCommit": "f604cad07a52f020487fb7cbe033dbbbdd8a421c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgzODcxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385838712", "bodyText": "Thanks. Lets see if I am understanding this correctly.\nThis JITServer::MessageType::VM_stackWalkerMaySkipFrames message currently returns a bool value which is the return value of stackWalkerMaySkipFrames function at client. I need to change this VM_stackWalkerMaySkipFrames message so that it returns the value of vmInfo->jlrMethodInvoke. Shall we change the name of this message then?\nIf vmInfo->jlrMethodInvoke is NULL, we send a message and once have the new vmInfo->jlrMethodInvoke  value on the server, we can cache the value inside VMInfo.", "author": "chrisc66", "createdAt": "2020-02-28T17:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDc4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg5Nzg1OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385897859", "bodyText": "we can cache the value inside VMInfo.\n\nNote, that cache will need to be updated if the java.lang.reflect.Method class is redefined.", "author": "DanHeidinga", "createdAt": "2020-02-28T20:04:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDc4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4MzY0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385983643", "bodyText": "cache will need to be updated if the java.lang.reflect.Method class is redefined.\n\n@DanHeidinga  I looked where vmInfo->jlrMethodInvoke is set and there is only one place: in standardInit() called from scarInit(J9JavaVM * vm) called from J9VMDllMain(J9JavaVM* vm, IDATA stage, void* reserved) with a stage of JCL_INITIALIZED. Thus, if java.lang.reflect.Method class is redefined, don't we have to update vmInfo->jlrMethodInvoke  as well?", "author": "mpirvu", "createdAt": "2020-02-29T00:52:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMDc4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTgxMTQzNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385811435", "bodyText": "Here we just return false, we don't need to send another message.", "author": "mpirvu", "createdAt": "2020-02-28T17:01:31Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -692,7 +692,33 @@ TR_J9ServerVM::getStaticReferenceFieldAtAddress(uintptrj_t fieldAddress)\n bool\n TR_J9ServerVM::stackWalkerMaySkipFrames(TR_OpaqueMethodBlock *method, TR_OpaqueClassBlock *clazz)\n    {\n+   if(!method)\n+      {\n+      return false;\n+      }\n+\n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n+   auto *vmInfo = _compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n+   \n+   if (vmInfo->_jlrMethodInvoke == ((J9Method *) method))\n+      {\n+      return true;\n+      }\n+   if(!clazz)\n+      {\n+      return false;\n+      }\n+#if defined(J9VM_OPT_SIDECAR)\n+   if (vmInfo->_srMethodAccessorClass != NULL && TR_J9ServerVM::isInstanceOf( clazz, vmInfo->_srMethodAccessorClass ,false))\n+      {\n+      return true;\n+      }\n+   if (vmInfo->_srConstructorAccessorClass != NULL && TR_J9ServerVM::isInstanceOf( clazz, vmInfo->_srConstructorAccessorClass ,false))\n+      {\n+      return true;\n+      }\n+#endif // J9VM_OPT_SIDECAR\n+\n    stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, method, clazz);", "originalCommit": "f604cad07a52f020487fb7cbe033dbbbdd8a421c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f39cfa46ed101f87b91df0b54fb4202ffcffcce", "url": "https://github.com/eclipse-openj9/openj9/commit/0f39cfa46ed101f87b91df0b54fb4202ffcffcce", "message": "Reduce JITServer VM_stackWalkerMaySkipFrames messages\n\nAdd checks in TR_J9ServerVM::stackWalkerMaySkipFrames function\nReduce messages by caching required values to VMInfo\nAdd message handling in JITServer messageType::VM_getVMInfo\nRemove javaVM->jlrAccessibleObject in JITServer functions since it is depriciated\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-02-28T20:38:22Z", "type": "commit"}, {"oid": "7645f503f1b6bc7ca7f2b28039786c76701fc96e", "url": "https://github.com/eclipse-openj9/openj9/commit/7645f503f1b6bc7ca7f2b28039786c76701fc96e", "message": "Change JITServer VM_stackWalkerMaySkipFrames message to return value of javaVM->jlrMethodInvoke\n\nJITServer stackWalkerMaySkipFrames functions are mostly done on the server VM, since VMInfo is caced at the server\nOnly need to query client for javaVM->jlrMethodInvoke method\nUsing VM_stackWalkerMaySkipFrames message to transfer jlrMethodInvoke value between server and client\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-02-28T21:36:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk0OTE0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385949148", "bodyText": "You still need to receive a message from the server.", "author": "mpirvu", "createdAt": "2020-02-28T22:20:45Z", "path": "runtime/compiler/control/JITClientCompilationThread.cpp", "diffHunk": "@@ -551,10 +566,11 @@ handleServerMessage(JITServer::ClientStream *client, TR_J9VM *fe, JITServer::Mes\n          break;\n       case MessageType::VM_stackWalkerMaySkipFrames:\n          {\n-         auto recv = client->getRecvData<TR_OpaqueMethodBlock *, TR_OpaqueClassBlock *>();\n-         TR_OpaqueMethodBlock *method = std::get<0>(recv);\n-         TR_OpaqueClassBlock *clazz = std::get<1>(recv);\n-         client->write(response, fe->stackWalkerMaySkipFrames(method, clazz));\n+         // auto recv = client->getRecvData<TR_OpaqueMethodBlock *, TR_OpaqueClassBlock *>();", "originalCommit": "cdb4ca7ea05e3e1259f9997f46adaae8efe44eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk1ODE2Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r385958162", "bodyText": "After asking the client about the value of vmInfo->jlrMethodInvoke you need another check against NULL. According to the original code if vmInfo->jlrMethodInvoke == NULL  you can return true", "author": "mpirvu", "createdAt": "2020-02-28T22:50:42Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -692,9 +692,41 @@ TR_J9ServerVM::getStaticReferenceFieldAtAddress(uintptrj_t fieldAddress)\n bool\n TR_J9ServerVM::stackWalkerMaySkipFrames(TR_OpaqueMethodBlock *method, TR_OpaqueClassBlock *clazz)\n    {\n+   if(!method)\n+      {\n+      return false;\n+      }\n+\n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n-   stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, method, clazz);\n-   return std::get<0>(stream->read<bool>());\n+   auto *vmInfo = _compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n+   \n+   if (vmInfo->_jlrMethodInvoke == NULL)\n+      {\n+      stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, JITServer::Void());\n+      vmInfo->_jlrMethodInvoke = std::get<0>(stream->read<J9Method*>());\n+      // stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, method, clazz);\n+      // return std::get<0>(stream->read<bool>());\n+      }\n+   if (vmInfo->_jlrMethodInvoke == ((J9Method *) method))", "originalCommit": "cdb4ca7ea05e3e1259f9997f46adaae8efe44eaa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9edde168759c2a0b56b64b8f34b24f912039fb15", "url": "https://github.com/eclipse-openj9/openj9/commit/9edde168759c2a0b56b64b8f34b24f912039fb15", "message": "Remove javaVM->jlrAccessibleObject\n\njlrAccessibleObject is depriciated, thus removed from J9JavaVM\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-02T15:27:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwOTQzOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r386509439", "bodyText": "Ideally the test vmInfo->_jlrMethodInvoke == NULL is performed before vmInfo->_jlrMethodInvoke == ((J9Method *) method). Lets push that vmInfo->_jlrMethodInvoke == NULL test above like this:\nif (vmInfo->_jlrMethodInvoke == NULL)\n      {\n      // Cached information could be outdated. Ask the client again.\n      stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, JITServer::Void());\n      vmInfo->_jlrMethodInvoke = std::get<0>(stream->read<J9Method*>());\n      if (vmInfo->_jlrMethodInvoke == NULL)\n         return true;\n      }\nif (vmInfo->_jlrMethodInvoke == ((J9Method *) method)\n    return true;", "author": "mpirvu", "createdAt": "2020-03-02T16:40:20Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -692,9 +692,40 @@ TR_J9ServerVM::getStaticReferenceFieldAtAddress(uintptrj_t fieldAddress)\n bool\n TR_J9ServerVM::stackWalkerMaySkipFrames(TR_OpaqueMethodBlock *method, TR_OpaqueClassBlock *clazz)\n    {\n+   if(!method)\n+      {\n+      return false;\n+      }\n+\n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n-   stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, method, clazz);\n-   return std::get<0>(stream->read<bool>());\n+   auto *vmInfo = _compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n+   \n+   if (vmInfo->_jlrMethodInvoke == NULL)\n+      {\n+      stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, JITServer::Void());\n+      vmInfo->_jlrMethodInvoke = std::get<0>(stream->read<J9Method*>());\n+      }\n+   // If _jlrMethodInvoke is NULL at the client, return true\n+   if (vmInfo->_jlrMethodInvoke == ((J9Method *) method) || vmInfo->_jlrMethodInvoke == NULL)", "originalCommit": "9edde168759c2a0b56b64b8f34b24f912039fb15", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3b4afbfc72e42ed3af4c77263eabae98afadbf9e", "url": "https://github.com/eclipse-openj9/openj9/commit/3b4afbfc72e42ed3af4c77263eabae98afadbf9e", "message": "Remove javaVM->jlrAccessibleObject\n\njlrAccessibleObject is depriciated, thus removed from J9JavaVM\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-02T17:01:10Z", "type": "forcePushed"}, {"oid": "dd5eda47f9b920337f497227c9bfe2d9b4bd0220", "url": "https://github.com/eclipse-openj9/openj9/commit/dd5eda47f9b920337f497227c9bfe2d9b4bd0220", "message": "Change JITServer VM_stackWalkerMaySkipFrames message to return value of javaVM->jlrMethodInvoke\n\nJITServer stackWalkerMaySkipFrames functions are mostly done on the server VM, since VMInfo is caced at the server\nOnly need to query client for javaVM->jlrMethodInvoke method\nUsing VM_stackWalkerMaySkipFrames message to transfer jlrMethodInvoke value between server and client\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-02T18:03:04Z", "type": "commit"}, {"oid": "da20109214ddcb881edb45b95869b322752b1cab", "url": "https://github.com/eclipse-openj9/openj9/commit/da20109214ddcb881edb45b95869b322752b1cab", "message": "Remove javaVM->jlrAccessibleObject\n\njlrAccessibleObject is depriciated, thus removed from J9JavaVM\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-02T18:03:11Z", "type": "commit"}, {"oid": "da20109214ddcb881edb45b95869b322752b1cab", "url": "https://github.com/eclipse-openj9/openj9/commit/da20109214ddcb881edb45b95869b322752b1cab", "message": "Remove javaVM->jlrAccessibleObject\n\njlrAccessibleObject is depriciated, thus removed from J9JavaVM\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-02T18:03:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzMzM4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r390333384", "bodyText": "I see that the VM sets srConstructorAccessor and srMethodAccessor in succession, so if one can be null the other one can be too.\nI also suggest getting all 3 fields that we need from the client in one message, rather than sending separate messages.", "author": "mpirvu", "createdAt": "2020-03-10T14:00:37Z", "path": "runtime/compiler/env/VMJ9Server.cpp", "diffHunk": "@@ -692,9 +692,48 @@ TR_J9ServerVM::getStaticReferenceFieldAtAddress(uintptrj_t fieldAddress)\n bool\n TR_J9ServerVM::stackWalkerMaySkipFrames(TR_OpaqueMethodBlock *method, TR_OpaqueClassBlock *clazz)\n    {\n+   if(!method)\n+      {\n+      return false;\n+      }\n+\n    JITServer::ServerStream *stream = _compInfoPT->getMethodBeingCompiled()->_stream;\n-   stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, method, clazz);\n-   return std::get<0>(stream->read<bool>());\n+   auto *vmInfo = _compInfoPT->getClientData()->getOrCacheVMInfo(stream);\n+   \n+   if (vmInfo->_jlrMethodInvoke == NULL)\n+      {\n+      // Cached information could be outdated. Ask the client again.\n+      stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, JITServer::Void());\n+      vmInfo->_jlrMethodInvoke = std::get<0>(stream->read<J9Method*, TR_OpaqueClassBlock*>());\n+      if (vmInfo->_jlrMethodInvoke == NULL)\n+         return true;\n+      }\n+   if (vmInfo->_jlrMethodInvoke == ((J9Method *) method))\n+      {\n+      return true;\n+      }\n+   if(!clazz)\n+      {\n+      return false;\n+      }\n+#if defined(J9VM_OPT_SIDECAR)\n+   if (vmInfo->_srMethodAccessorClass == NULL)\n+      {\n+      // Cached information could be outdated. Ask the client again.\n+      stream->write(JITServer::MessageType::VM_stackWalkerMaySkipFrames, JITServer::Void());\n+      vmInfo->_srMethodAccessorClass = std::get<1>(stream->read<J9Method*, TR_OpaqueClassBlock*>());\n+      }\n+   if (vmInfo->_srMethodAccessorClass != NULL && TR_J9ServerVM::isInstanceOf( clazz, vmInfo->_srMethodAccessorClass ,false))\n+      {\n+      return true;\n+      }\n+   if (vmInfo->_srConstructorAccessorClass != NULL && TR_J9ServerVM::isInstanceOf( clazz, vmInfo->_srConstructorAccessorClass ,false))", "originalCommit": "0fe41d824311d3ad383b07d5dac7e4e919910602", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM1NTkzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r390355934", "bodyText": "Will do that. The question is where should we send this message?\nI could populate this if block (line 703). Add srConstructorAccessor == NULL || srMethodAccessor  == NULL in if condition, query and cache three values at the same time.\nAlso I noticed that srConstructorAccessor and srMethodAccessor are protected by #if defined(J9VM_OPT_SIDECAR) in TR_J9VM::stackWalkerMaySkipFrames implementation, however they are not protected in J9JavaVM definition. I am not sure what J9VM_OPT_SIDECAR is exactly doing, so I hope my suggestion won't break anything in the case of J9VM_OPT_SIDECAR is not defined.", "author": "chrisc66", "createdAt": "2020-03-10T14:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzMzM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ1ODc0NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r390458744", "bodyText": "I'd say if the methods that use srConstructorAccessor or srMethodAccessor in the VM code are not protected by J9VM_OPT_SIDECAR we should remove that protection as well.\n\nThe question is where should we send this message?\n\nYour implementation is ok, but it can be optimized because sometimes even with partial information we can answer the frontend query. So I am thinking something along these lines:\nget cached information\nbool freshInfo = false;\nif (vmInfo->_jlrMethodInvoke == NULL)\n   send message and get all 3 pieces that we want\n   store them into vmInfo\n   freshInfo = true;\n   if (vmInfo->_jlrMethodInvoke == NULL)\n        return true;\nif (vmInfo->_jlrMethodInvoke == ((J9Method *) method))\n  return true;\nif (!clazz)\n   return false;\nif (vmInfo->_srMethodAccessorClass == NULL && !freshInfo)\n     send message and get all 3 pieces that we want\n     store them into vmInfo\n     freshInfo = true;\n  if (vmInfo->_srMethodAccessorClass != NULL && TR_J9ServerVM::isInstanceOf( clazz, vmInfo->_srMethodAccessorClass ,false))\n      return true;\nrepeat for srConstructorAccessor", "author": "mpirvu", "createdAt": "2020-03-10T16:47:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzMzM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MTk4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/8680#discussion_r390551987", "bodyText": "Looked into the pseudo code, we actually have two duplicated if checks, so I just kept the one outside.\nif (vmInfo->_srMethodAccessorClass == NULL && !freshInfo)\n     send message and get all 3 pieces that we want\n     store them into vmInfo\n     freshInfo = true;\n// HERE, this one is removed in latest commit\n  if (vmInfo->_srMethodAccessorClass != NULL && TR_J9ServerVM::isInstanceOf( clazz, vmInfo->_srMethodAccessorClass ,false))\n      return true;\n// HERE\nif (vmInfo->_srMethodAccessorClass != NULL && TR_J9ServerVM::isInstanceOf( clazz, vmInfo->_srMethodAccessorClass ,false))\n      return true;", "author": "chrisc66", "createdAt": "2020-03-10T19:15:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMzMzM4NA=="}], "type": "inlineReview"}, {"oid": "ecf35beae490542aa3a53ee8295ab32572f36641", "url": "https://github.com/eclipse-openj9/openj9/commit/ecf35beae490542aa3a53ee8295ab32572f36641", "message": "Add javaVM->srMethodAccessor and srConstructorAccessor to JITServer VM_stackWalkerMaySkipFrames message to return values\n\njavaVM->srMethodAccessor and javaVM->srConstructorAccessor might be unset at the begining and set later on\nJITServer should query client for this value if undefined\nAdd relative checks into JITServer stackWalkerMaySkipFrames functions\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-10T15:26:30Z", "type": "forcePushed"}, {"oid": "8b276e247c86b225aea04be9d3a330dd54880abc", "url": "https://github.com/eclipse-openj9/openj9/commit/8b276e247c86b225aea04be9d3a330dd54880abc", "message": "Add javaVM->srMethodAccessor and srConstructorAccessor to JITServer VM_stackWalkerMaySkipFrames message to return values\n\njavaVM->srMethodAccessor and javaVM->srConstructorAccessor might be unset at the begining and set later on\nJITServer should query client for this value if undefined\nAdd relative checks into JITServer stackWalkerMaySkipFrames functions\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-10T19:10:29Z", "type": "commit"}, {"oid": "8b276e247c86b225aea04be9d3a330dd54880abc", "url": "https://github.com/eclipse-openj9/openj9/commit/8b276e247c86b225aea04be9d3a330dd54880abc", "message": "Add javaVM->srMethodAccessor and srConstructorAccessor to JITServer VM_stackWalkerMaySkipFrames message to return values\n\njavaVM->srMethodAccessor and javaVM->srConstructorAccessor might be unset at the begining and set later on\nJITServer should query client for this value if undefined\nAdd relative checks into JITServer stackWalkerMaySkipFrames functions\n\nSigned-off-by: Chris Chong <Zichun.Chong@ibm.com>", "committedDate": "2020-03-10T19:10:29Z", "type": "forcePushed"}, {"oid": "61a3164b2788a2991175cd0afa9410949d9efee3", "url": "https://github.com/eclipse-openj9/openj9/commit/61a3164b2788a2991175cd0afa9410949d9efee3", "message": "Merge branch 'master' into dev_reduce_num_of_VM_stackWalkerMaySkipFrames_msg", "committedDate": "2020-03-10T19:17:22Z", "type": "commit"}]}