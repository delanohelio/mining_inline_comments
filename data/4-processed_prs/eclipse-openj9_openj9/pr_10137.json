{"pr_number": 10137, "pr_title": "Fix class resolve for VT multianewarray", "pr_createdAt": "2020-07-09T18:14:39Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10137", "timeline": [{"oid": "af765a69fc77d48e2ff6a202bbbe87d6a2d3d532", "url": "https://github.com/eclipse-openj9/openj9/commit/af765a69fc77d48e2ff6a202bbbe87d6a2d3d532", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-09T18:17:16Z", "type": "forcePushed"}, {"oid": "4775ac4b680fea00f7533b19ccd276de2f9a6294", "url": "https://github.com/eclipse-openj9/openj9/commit/4775ac4b680fea00f7533b19ccd276de2f9a6294", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-16T20:18:43Z", "type": "forcePushed"}, {"oid": "c6159741545190851014d821c273e6bef4f869da", "url": "https://github.com/eclipse-openj9/openj9/commit/c6159741545190851014d821c273e6bef4f869da", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-16T20:20:03Z", "type": "forcePushed"}, {"oid": "3ee6661c3cbe281468ce135bc494f571dc9cffba", "url": "https://github.com/eclipse-openj9/openj9/commit/3ee6661c3cbe281468ce135bc494f571dc9cffba", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-16T20:20:35Z", "type": "forcePushed"}, {"oid": "991ae4a36c9c5116113a233b7928d8c653406629", "url": "https://github.com/eclipse-openj9/openj9/commit/991ae4a36c9c5116113a233b7928d8c653406629", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-16T20:21:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NDcxOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456054718", "bodyText": "@tajila The spot causing the error when trying to create the method", "author": "OussamaSaoudi", "createdAt": "2020-07-16T20:22:05Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +928,28 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addgenerate2DMultiANewArray(ClassWriter cw) {\n+        MethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"generate2DMultiANewArray\", \"(II)Ljava/lang/Object;\", null, null);\n+\t\tmv.visitCode();\n+\t\tmv.visitVarInsn(ILOAD, 0);\n+\t\tmv.visitVarInsn(ILOAD, 1);\n+        mv.visitMultiANewArrayInsn( \"[[\" + getSigFromSimpleName(\"Point2D\", false), 2);", "originalCommit": "991ae4a36c9c5116113a233b7928d8c653406629", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NjY5Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456056697", "bodyText": "dont hard code the name of the class, pass in the name as a param instead", "author": "tajila", "createdAt": "2020-07-16T20:25:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NDcxOA=="}], "type": "inlineReview"}, {"oid": "83bdeda20f32ba7ab92e363f3d802f992c0a7ab3", "url": "https://github.com/eclipse-openj9/openj9/commit/83bdeda20f32ba7ab92e363f3d802f992c0a7ab3", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-17T16:53:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4Mzc1Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456583756", "bodyText": "Invoking getPoint2D is causing NullPointerException.", "author": "OussamaSaoudi", "createdAt": "2020-07-17T17:42:12Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -1982,6 +1982,35 @@ static public void testDefaultValueInPointArray() throws Throwable {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create multianewarray with Point Class without initialization.\n+\t * The array should be set ot a Default Value.\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointInstanceMultiANewArray() throws Throwable {\n+\t\tObject pointArray = Array.newInstance(point2DClass, new int[]{genericArraySize, genericArraySize});\n+\t\tfor (int i = 0; i < genericArraySize; i++) {\n+\t\t\tfor (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = Array.get(Array.get(pointArray,i),j);\n+\t\t\t\tassertNotNull(pointObject);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointByteCodeMultiANewArray() throws Throwable {\n+\t\t/* Try down cast? ELSE: look at ASMifier */\n+\t\tMethodHandle makePointArray = lookup.findStatic(point2DClass, \"generate2DMultiANewArray\", MethodType.methodType(Object.class, int.class, int.class));\n+\t\tObject pointArray = makePoint2D.invoke(genericArraySize, genericArraySize);\n+\t\tMethodHandle getPoint2D = lookup.findStatic(point2DClass, \"get2DMultiANewArray\", MethodType.methodType(Object.class, Object.class, int.class, int.class));\n+\t\t//for (int i = 0; i < genericArraySize; i++) {\n+\t\t\t//for (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = getPoint2D.invoke(pointArray,1, 1);", "originalCommit": "83bdeda20f32ba7ab92e363f3d802f992c0a7ab3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "86c2cb324d3db1d9cfcae5a39b36134875aa6069", "url": "https://github.com/eclipse-openj9/openj9/commit/86c2cb324d3db1d9cfcae5a39b36134875aa6069", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-17T18:39:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxNTI4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456615284", "bodyText": "youre not making an array here, need makePointArray instead of makePoint2D", "author": "tajila", "createdAt": "2020-07-17T18:46:20Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -1982,6 +1982,35 @@ static public void testDefaultValueInPointArray() throws Throwable {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create multianewarray with Point Class without initialization.\n+\t * The array should be set ot a Default Value.\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointInstanceMultiANewArray() throws Throwable {\n+\t\tObject pointArray = Array.newInstance(point2DClass, new int[]{genericArraySize, genericArraySize});\n+\t\tfor (int i = 0; i < genericArraySize; i++) {\n+\t\t\tfor (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = Array.get(Array.get(pointArray,i),j);\n+\t\t\t\tassertNotNull(pointObject);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointByteCodeMultiANewArray() throws Throwable {\n+\t\t/* Try down cast? ELSE: look at ASMifier */\n+\t\tMethodHandle makePointArray = lookup.findStatic(point2DClass, \"generate2DMultiANewArray\", MethodType.methodType(Object.class, int.class, int.class));\n+\t\tObject pointArray = makePoint2D.invoke(genericArraySize, genericArraySize);", "originalCommit": "86c2cb324d3db1d9cfcae5a39b36134875aa6069", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxNjIxNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r456616215", "bodyText": "also you dont need to generate code for getters and setters, since Array.get will do the same thing", "author": "tajila", "createdAt": "2020-07-17T18:48:25Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -1982,6 +1982,35 @@ static public void testDefaultValueInPointArray() throws Throwable {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create multianewarray with Point Class without initialization.\n+\t * The array should be set ot a Default Value.\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointInstanceMultiANewArray() throws Throwable {\n+\t\tObject pointArray = Array.newInstance(point2DClass, new int[]{genericArraySize, genericArraySize});\n+\t\tfor (int i = 0; i < genericArraySize; i++) {\n+\t\t\tfor (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = Array.get(Array.get(pointArray,i),j);\n+\t\t\t\tassertNotNull(pointObject);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInPointByteCodeMultiANewArray() throws Throwable {\n+\t\t/* Try down cast? ELSE: look at ASMifier */\n+\t\tMethodHandle makePointArray = lookup.findStatic(point2DClass, \"generate2DMultiANewArray\", MethodType.methodType(Object.class, int.class, int.class));\n+\t\tObject pointArray = makePoint2D.invoke(genericArraySize, genericArraySize);\n+\t\tMethodHandle getPoint2D = lookup.findStatic(point2DClass, \"get2DMultiANewArray\", MethodType.methodType(Object.class, Object.class, int.class, int.class));\n+\t\t//for (int i = 0; i < genericArraySize; i++) {\n+\t\t\t//for (int j = 0; j < genericArraySize; j++) {\n+\t\t\t\tObject pointObject = getPoint2D.invoke(pointArray,1, 1);", "originalCommit": "86c2cb324d3db1d9cfcae5a39b36134875aa6069", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d5a8ef3326c51719899a42a9bb49acb943fd8a42", "url": "https://github.com/eclipse-openj9/openj9/commit/d5a8ef3326c51719899a42a9bb49acb943fd8a42", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value. Added multianewarray creation\nfor Valuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-20T14:52:59Z", "type": "forcePushed"}, {"oid": "987b479dab5fe86ff9874063fbe3af7f4196187c", "url": "https://github.com/eclipse-openj9/openj9/commit/987b479dab5fe86ff9874063fbe3af7f4196187c", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value. Added multianewarray creation\nfor Valuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-20T17:33:45Z", "type": "forcePushed"}, {"oid": "9e9197a3c51f7892f39eff1205a2138cbd5e4864", "url": "https://github.com/eclipse-openj9/openj9/commit/9e9197a3c51f7892f39eff1205a2138cbd5e4864", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value. Added multianewarray creation\nfor Valuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-07-21T13:46:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk4ODMyNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462988327", "bodyText": "nitpick: please rename to test2DMultiANewArray(cw, className); for consistency", "author": "tajila", "createdAt": "2020-07-30T13:17:17Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -116,6 +116,7 @@\n \t\t\t\tmakeGeneric(cw, className, \"makeValueGeneric\", \"makeValue\", makeValueSig, makeValueGenericSig, fields, makeMaxLocal, isRef);\n \t\t\t}\n \t\t}\n+\t\taddGenerate2DMultiANewArray(cw, className);", "originalCommit": "9e9197a3c51f7892f39eff1205a2138cbd5e4864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MDgzNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462990836", "bodyText": "you should also pass in isRef", "author": "tajila", "createdAt": "2020-07-30T13:21:13Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +926,16 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addGenerate2DMultiANewArray(ClassWriter cw, String className) {", "originalCommit": "9e9197a3c51f7892f39eff1205a2138cbd5e4864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5MTIyNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462991224", "bodyText": "so it can be used here, so L is used for ref, and Q for values", "author": "tajila", "createdAt": "2020-07-30T13:21:48Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +926,16 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addGenerate2DMultiANewArray(ClassWriter cw, String className) {\n+\t\tMethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"generate2DMultiANewArray\", \"(II)Ljava/lang/Object;\", null, null);\n+\t\tmv.visitCode();\n+\t\tmv.visitVarInsn(ILOAD, 0);\n+\t\tmv.visitVarInsn(ILOAD, 1);\n+\t\tmv.visitMultiANewArrayInsn(\"[[\" + getSigFromSimpleName(className, false), 2);", "originalCommit": "9e9197a3c51f7892f39eff1205a2138cbd5e4864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5Mjg3MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462992871", "bodyText": "same thing here with the name", "author": "tajila", "createdAt": "2020-07-30T13:24:18Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeGenerator.java", "diffHunk": "@@ -925,4 +926,16 @@ public static void generateClassFile(String name, byte[] bytes) {\n \t\tbyte[] bytes = generateClass(name, fields, false, true);\n \t\treturn generator.defineClass(name, bytes, 0, bytes.length);\n \t}\n-}\n\\ No newline at end of file\n+\n+\tpublic static void addGenerate2DMultiANewArray(ClassWriter cw, String className) {\n+\t\tMethodVisitor mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"generate2DMultiANewArray\", \"(II)Ljava/lang/Object;\", null, null);", "originalCommit": "9e9197a3c51f7892f39eff1205a2138cbd5e4864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk5NzIxNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r462997216", "bodyText": "for this test and the ones below, you can first do a loop write out each element with defaultLinePositions1 (look at checkFieldAccessMHOfAssortedType) and then do another loop to compare that it is correct with checkFieldAccessMHOfAssortedType. Look at testGCFlattenedValueArrayWithSingleAlignment for an example.", "author": "tajila", "createdAt": "2020-07-30T13:30:47Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -1997,6 +2029,42 @@ static public void testDefaultValueInLineArray() throws Throwable {\n \t\t}\n \t}\n \n+\t/**\n+\t * Create multi dimensional array with Line Class without initialization.\n+\t * Check the fields of each element in arrays. No field should be NULL.\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInLineInstanceMultiANewArray() throws Throwable {", "originalCommit": "9e9197a3c51f7892f39eff1205a2138cbd5e4864", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4874adbb6d34cb57a5a3db3be6f77538745450e4", "url": "https://github.com/eclipse-openj9/openj9/commit/4874adbb6d34cb57a5a3db3be6f77538745450e4", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value. Added multianewarray creation\nfor Valuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>\n\ntemp changes", "committedDate": "2020-08-05T15:25:11Z", "type": "forcePushed"}, {"oid": "4733cf5778bccfef11b7abbdae309e6e86bbd1b0", "url": "https://github.com/eclipse-openj9/openj9/commit/4733cf5778bccfef11b7abbdae309e6e86bbd1b0", "message": "Adding test for MultiNewArray\n\nCreate ValueType test to check that arrays made using MULTIANEWARRAY\ndo not have null as the default value. Added multianewarray creation\nfor Valuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-08-05T16:18:06Z", "type": "forcePushed"}, {"oid": "1eeb3cf630b7e95bb288d37e18ac71d328ed0c49", "url": "https://github.com/eclipse-openj9/openj9/commit/1eeb3cf630b7e95bb288d37e18ac71d328ed0c49", "message": "still working on things", "committedDate": "2020-08-24T15:39:17Z", "type": "forcePushed"}, {"oid": "7ebe452b66a653e39066dbc5ef1935b0d82ea663", "url": "https://github.com/eclipse-openj9/openj9/commit/7ebe452b66a653e39066dbc5ef1935b0d82ea663", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nNOTE: AssortedValueWithLongAlignment tests fail in ValueTypeTests_1\nand ValueTypeTests_2 due to array flattening enabled.\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-08-25T20:53:56Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MDcwOA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r476740708", "bodyText": "@tajila This test concerns default values. Should I remove or modify it?", "author": "OussamaSaoudi", "createdAt": "2020-08-25T21:13:31Z", "path": "test/functional/Valhalla/src/org/openj9/test/lworld/ValueTypeTests.java", "diffHunk": "@@ -2099,6 +2293,38 @@ static public void testDefaultValueInAssortedRefWithLongAlignmentArray() throws\n \t\t}\n \t}\n \n+\n+\t/**\n+\t * Create an assortedRefWithLongAlignment multi dimensional array\n+\t * Since it's ref type, the array should be filled with nullptrs\n+\t */\n+\t@Test(priority=4)\n+\tstatic public void testDefaultValueInAssortedRefWithLongAlignmentInstanceMultiANewArray() throws Throwable {", "originalCommit": "7ebe452b66a653e39066dbc5ef1935b0d82ea663", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6996e6e6514c7fb2c7ed8eac5efa625b1a337f94", "url": "https://github.com/eclipse-openj9/openj9/commit/6996e6e6514c7fb2c7ed8eac5efa625b1a337f94", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nNOTE: AssortedValueWithLongAlignment tests fail in ValueTypeTests_1\nand ValueTypeTests_2 due to array flattening enabled.\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-08-26T15:13:07Z", "type": "forcePushed"}, {"oid": "a1a71421fe4da913bdd0946c23e7460944df8586", "url": "https://github.com/eclipse-openj9/openj9/commit/a1a71421fe4da913bdd0946c23e7460944df8586", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nNOTE: AssortedValueWithLongAlignment tests fail in ValueTypeTests_1\nand ValueTypeTests_2 due to array flattening enabled.\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-09-11T15:47:16Z", "type": "forcePushed"}, {"oid": "441d6b50ff718bff052cfc6d61d23008fd2b23be", "url": "https://github.com/eclipse-openj9/openj9/commit/441d6b50ff718bff052cfc6d61d23008fd2b23be", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nTemporarily disabled ValueTypeTests 1 and 2 due to array flattening\nbug causing failures\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-09-11T16:09:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNDAwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r488124000", "bodyText": "This isn't what I meant. You can disable the specific tests that fail. Look for @Test(enabled = false, priority=5) in the tests", "author": "tajila", "createdAt": "2020-09-14T18:05:00Z", "path": "test/functional/Valhalla/playlist.xml", "diffHunk": "@@ -26,8 +26,11 @@\n \t\t<testCaseName>ValueTypeTests</testCaseName>\n \t\t<variations>\n \t\t\t<variation>NoOptions</variation>\n-\t\t\t<variation>-Xgcpolicy:nogc -XX:ValueTypeFlatteningThreshold=99999 -XX:+EnableArrayFlattening</variation>\n-\t\t\t<variation>-Xgcpolicy:optthruput -Xnocompactgc -XX:ValueTypeFlatteningThreshold=99999 -XX:+EnableArrayFlattening</variation>\n+\t\t\t<!--", "originalCommit": "441d6b50ff718bff052cfc6d61d23008fd2b23be", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8bd1aec74d78c363d1a33beb904dab87bd513368", "url": "https://github.com/eclipse-openj9/openj9/commit/8bd1aec74d78c363d1a33beb904dab87bd513368", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nTemporarily disabled ValueTypeTests 1 and 2 due to array flattening\nbug causing failures\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-09-14T19:58:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjQ5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r488316494", "bodyText": "one more thing, we need a #ifdef VT here. Define a macro like this in j9.h (youll see the other VT macros)\n#ifdef VT\n#define IS_REFERENCE_SIGNATURE(firstChar) ('L' == (firstChar))\n#else\n#define IS_REFERENCE_SIGNATURE(firstChar) ('L' == (firstChar) || 'Q' == (firstChar))\n#endif", "author": "tajila", "createdAt": "2020-09-15T00:48:23Z", "path": "runtime/vm/classsupport.c", "diffHunk": "@@ -108,7 +108,7 @@ internalFindArrayClass(J9VMThread* vmThread, J9Module *j9module, UDATA arity, U_\n \t\t/* the first level of arity is already present in the array class */\n \t\tarity -= 1;\n \n-\t} else if (firstChar == 'L' && lastChar == ';') {\n+\t} else if ((firstChar == 'L' || firstChar == 'Q') && lastChar == ';') {", "originalCommit": "8bd1aec74d78c363d1a33beb904dab87bd513368", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3ODQzNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10137#discussion_r488678437", "bodyText": "perhaps a better name is IS_REF_OR_VAL_SIGNATURE", "author": "tajila", "createdAt": "2020-09-15T13:43:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODMxNjQ5NA=="}], "type": "inlineReview"}, {"oid": "25a9df8e0bd2617cb61ec107a77b24b88bad5e1d", "url": "https://github.com/eclipse-openj9/openj9/commit/25a9df8e0bd2617cb61ec107a77b24b88bad5e1d", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nAdded macro for checking if signature is ref or value.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-09-16T20:46:36Z", "type": "forcePushed"}, {"oid": "9d5c418459e6f58219b7cfc5e8ff4dbc8a95156f", "url": "https://github.com/eclipse-openj9/openj9/commit/9d5c418459e6f58219b7cfc5e8ff4dbc8a95156f", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nAdded macro for checking if signature is ref or value.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-09-23T15:56:57Z", "type": "forcePushed"}, {"oid": "22fa26579ec37c87590408042f3675f8261962d5", "url": "https://github.com/eclipse-openj9/openj9/commit/22fa26579ec37c87590408042f3675f8261962d5", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nAdded macro for checking if signature is ref or value.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-09-25T20:26:12Z", "type": "commit"}, {"oid": "22fa26579ec37c87590408042f3675f8261962d5", "url": "https://github.com/eclipse-openj9/openj9/commit/22fa26579ec37c87590408042f3675f8261962d5", "message": "Fix class resolve for VT multianewarray\n\nCreate ValueType test to check that multiarrays made using\nMULTIANEWARRAY bytecode and Array.newInstance() correctly\nstore flattened types. Added multianewarray creation for\nValuetypes.\n\nTesting two paths:\n- Using Array.instance()\n- Using opcode for MULTIANEWARRAY\n\nTested following types:\n- Point2D\n- FlattenedLine2D\n- Triangle2D\n- AssortedValueWithLongAlginment\n\nAdded support for multianewarray bytecode operation on Q types by\nmodifying the interalFindArrayClass method in classsupport.c.\n\nAdded macro for checking if signature is ref or value.\n\nRelated to: https://github.com/eclipse/openj9/issues/10077\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-09-25T20:26:12Z", "type": "forcePushed"}]}