{"pr_number": 11358, "pr_title": "Handle monitor enter/exit on value based instances (X86)", "pr_createdAt": "2020-12-03T22:04:04Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11358", "timeline": [{"oid": "3b44a9e833681f5914bc4d10690fbe7107393329", "url": "https://github.com/eclipse-openj9/openj9/commit/3b44a9e833681f5914bc4d10690fbe7107393329", "message": "Handle monitor enter/exit on value based instances\n\nIf the monitor object type is value based class, VM\nwill either issue a warning or throw an exception\nbased on -XX:ValueBasedClassCheck option.\n\nIf the monitor object type is unkonwn, insert a runtime\nmemory check in monitor enter/exit on the class flag\nJ9ClassIsValueBased.\n\nIf the monitor object type is not value based class,\nproceed as how it is handled today.\n\nRelated to JEP390\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-12-08T17:12:15Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY1MzgzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538653832", "bodyText": "I would suggest adding Doxygen comments to describe what this does.", "author": "hzongaro", "createdAt": "2020-12-08T17:46:25Z", "path": "runtime/compiler/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -333,6 +333,8 @@ class OMR_EXTENSIBLE CodeGenerator : public OMR::CodeGeneratorConnector\n     */\n    TR_YesNoMaybe isMonitorValueType(TR::Node* monNode);\n \n+   TR_YesNoMaybe isMonitorValueBased(TR::Node* monNode);", "originalCommit": "3b44a9e833681f5914bc4d10690fbe7107393329", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2MjE3NQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538662175", "bodyText": "What if the class is an interface or abstract class that a value-based class could implement or be derived from, respectively?  For example, java.lang.Comparable.  I think the current implementation of this method will return TR_no in that case.", "author": "hzongaro", "createdAt": "2020-12-08T17:54:07Z", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -5376,3 +5376,21 @@ J9::CodeGenerator::isMonitorValueType(TR::Node* monNode)\n \n    return TR_no;\n    }\n+\n+TR_YesNoMaybe\n+J9::CodeGenerator::isMonitorValueBased(TR::Node* monNode)\n+   {\n+   if (_monitorMapping.find(monNode->getGlobalIndex()) == _monitorMapping.end())\n+      return TR_maybe;\n+\n+   TR_OpaqueClassBlock *clazz = _monitorMapping[monNode->getGlobalIndex()];\n+\n+   //java.lang.Object class is only set when monitor is java.lang.Object but not its subclass\n+   if (clazz == self()->comp()->getObjectClassPointer())\n+      return TR_no;\n+", "originalCommit": "3b44a9e833681f5914bc4d10690fbe7107393329", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTAwNzczNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r539007736", "bodyText": "What if the class is an interface or abstract class that a value-based class could implement or be derived from, respectively?\n\nThat's a very good question. I experimented with the two cases. isMonitorValueBased() could return either TR_maybe or TR_no.\n\nTR_maybe: because  the object class is not in _monitorMapping.\nTR_no because it reaches the end of the isMonitorValueBased() and VM J9_IS_J9CLASS_VALUEBASED returns false; not because if (clazz == self()->comp()->getObjectClassPointer()) is true.\n\nIf the base class is an interface or abstract class, it won't hit the path that if (clazz == self()->comp()->getObjectClassPointer()) is true.\npseudo code:\ninterface A \n\n@ValueBased\npublic class B implements A \n\nObject obj = new B(); \nsynchronized(obj) { ... }\n\nA obj = new B(); \nsynchronized(obj) { ... }\n\nabstract class C\n\n@ValueBased\npublic class D extends C {\n\nObject obj = new D(); \nsynchronized(obj) { ... }\n\nC obj = new D(); \nsynchronized(obj) { ... }", "author": "a7ehuo", "createdAt": "2020-12-09T05:02:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2MjE3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2NDQzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r539364430", "bodyText": "Right - these are the kinds of case I was worried about.  I was thinking there should be an additional check of isConcreteClass, as is done in J9::CodeGenerator::isMonitorValueType", "author": "hzongaro", "createdAt": "2020-12-09T14:44:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY2MjE3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY4MjgyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538682829", "bodyText": "I would suggest adding a Doxygen comment for this method", "author": "hzongaro", "createdAt": "2020-12-08T18:14:20Z", "path": "runtime/compiler/env/J9ObjectModel.hpp", "diffHunk": "@@ -62,6 +62,7 @@ class ObjectModel : public OMR::ObjectModelConnector\n    bool mayRequireSpineChecks();\n \n    bool areValueTypesEnabled();\n+   bool areValueBasedMonitorChecksEnabled();", "originalCommit": "3b44a9e833681f5914bc4d10690fbe7107393329", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NDQ4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538694486", "bodyText": "Once value types are ultimately supported, is it at all possible for both value types to be enabled and value-based monitor checks to be enabled at the same time?  If so, it might be worthwhile combining these two checks into a single check, to avoid testing the class flags twice.\nI think we need Tobi's @tajila feedback on the likelihood of that possibility.", "author": "hzongaro", "createdAt": "2020-12-08T18:25:28Z", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -5193,8 +5206,13 @@ TR::Register\n    TR::LabelSymbol *fallThru   = generateLabelSymbol(cg);\n    // Create the monitor exit snippet\n    TR::LabelSymbol *snippetLabel = generateLabelSymbol(cg);\n-   if (TR::Compiler->om.areValueTypesEnabled())\n-       TR::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(node, snippetLabel, cg);\n+\n+   if (TR::Compiler->om.areValueTypesEnabled() && (cg->isMonitorValueType(node) == TR_maybe))\n+      TR::TreeEvaluator::generateCheckForValueMonitorEnterOrExit(node, J9ClassIsValueType, snippetLabel, cg);\n+\n+   if (TR::Compiler->om.areValueBasedMonitorChecksEnabled() && (cg->isMonitorValueBased(node) == TR_maybe))\n+      TR::TreeEvaluator::generateCheckForValueMonitorEnterOrExit(node, J9ClassIsValueBased, snippetLabel, cg);\n+", "originalCommit": "3b44a9e833681f5914bc4d10690fbe7107393329", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc0ODY3MQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538748671", "bodyText": "Once value types are ultimately supported, is it at all possible for both value types to be enabled and value-based monitor checks to be enabled at the same time?\n\nI was having the same question and found based on the VM implementation, they look to be mutually exclusive. I'd also be interested in Tobi's @tajila feedback.\nhttps://github.com/eclipse/openj9/blob/9fbdc74a6d75d95123a927a6a4bd659542410112/runtime/vm/jnicsup.cpp#L1868-L1873", "author": "a7ehuo", "createdAt": "2020-12-08T19:32:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NDQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2NjIxNw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538766217", "bodyText": "Yes, the way we have implemented it is mutually exclusive. It has not been explicitly stated that @ValueBased will be deprecated once VTs are supported but I suspect that will be the case. Regardless, we will have the liberty to remove the @ValueBased monitor enter checks at anytime since these are enabled by options.", "author": "tajila", "createdAt": "2020-12-08T20:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NDQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2Nzk5NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538767994", "bodyText": "That being said we made a mask for these checks J9_CLASS_DISALLOWS_LOCKING_FLAGS", "author": "tajila", "createdAt": "2020-12-08T20:03:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NDQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc2OTQxMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538769413", "bodyText": "The existing monitorenter jithelper can handle all cases.", "author": "tajila", "createdAt": "2020-12-08T20:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NDQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkxMzU5OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538913598", "bodyText": "Tobi @tajila  If we have a build that has J9VM_OPT_VALHALLA_VALUE_TYPES defined and our current code allows java option to set-XX:ValueBasedClassCheck=exception, if a monitor object is value based instance, java.lang.IllegalMonitorStateException will throw instead of java.lang.VirtualMachineError. And the exception message is also for value type instead of value-based. It could be confusing.\nException in thread \"Thread-3\" Exception in thread \"Thread-2\" java.lang.IllegalMonitorStateException: bad object type : object that is synchronized is a value typejava.lang.IllegalMonitorStateException: bad object type : object that is synchronized is a value type\n\nHowever using -XX:ValueBasedClassCheck=warn will render correct behaviour and message\nJVMJ9VM200W bad object type MyCount: object that is synchronized is value-based.", "author": "a7ehuo", "createdAt": "2020-12-09T00:33:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NDQ4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTM2OTE5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r539369193", "bodyText": "Good point... We can address the dual cases in the helpers. For the time being its safe to assume that we will be dealing with one or the other. If that changes we will change the helpers to detect valueType vs valuebased.", "author": "tajila", "createdAt": "2020-12-09T14:49:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5NDQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxODk4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r538718986", "bodyText": "The comments for this method declaration only talk about value types.  They need to be updated to include value-based type checking.", "author": "hzongaro", "createdAt": "2020-12-08T18:52:28Z", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.hpp", "diffHunk": "@@ -109,7 +109,7 @@ class OMR_EXTENSIBLE TreeEvaluator: public J9::TreeEvaluator\n    *     This method only handles the cases where, at compile time, it's unknown whether the\n    *     object is reference type or value type.", "originalCommit": "3b44a9e833681f5914bc4d10690fbe7107393329", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "62ca7a213178e56c8ca612cf812f25bacede3dfe", "url": "https://github.com/eclipse-openj9/openj9/commit/62ca7a213178e56c8ca612cf812f25bacede3dfe", "message": "Handle monitor enter/exit on value based instances in x86\n\nIf the monitor object type is value based class, VM\nwill either issue a warning or throw an exception\nbased on -XX:ValueBasedClassCheck option.\n\nIf the monitor object type is unkonwn, insert a runtime\nmemory check in monitor enter/exit on the class flag\nJ9ClassIsValueBased.\n\nIf the monitor object type is not value based class,\nproceed as how it is handled today.\n\nValue based class and value type are mutually exclusive.\n\nRelated to JEP390\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-12-09T16:15:30Z", "type": "forcePushed"}, {"oid": "ea1a96f4e1fb068ae6b91d52d999002f897104e4", "url": "https://github.com/eclipse-openj9/openj9/commit/ea1a96f4e1fb068ae6b91d52d999002f897104e4", "message": "Handle monitor enter/exit on value based instances in x86\n\nIf the monitor object type is value based class, VM\nwill either issue a warning or throw an exception\nbased on -XX:ValueBasedClassCheck option.\n\nIf the monitor object type is unkonwn, insert a runtime\nmemory check in monitor enter/exit on the class flag\nJ9ClassIsValueBased.\n\nIf the monitor object type is not value based class,\nproceed as how it is handled today.\n\nValue based class and value type are mutually exclusive.\n\nRelated to JEP390\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-12-09T16:28:16Z", "type": "forcePushed"}, {"oid": "a9e59293e48ca2d78e19ff1716bc7a3cb2eefd1a", "url": "https://github.com/eclipse-openj9/openj9/commit/a9e59293e48ca2d78e19ff1716bc7a3cb2eefd1a", "message": "Handle monitor enter/exit on value based instances in x86\n\nIf the monitor object type is value based class, VM\nwill either issue a warning or throw an exception\nbased on -XX:ValueBasedClassCheck option.\n\nIf the monitor object type is unkonwn, insert a runtime\nmemory check in monitor enter/exit on the class flag\nJ9ClassIsValueBased.\n\nIf the monitor object type is not value based class,\nproceed as how it is handled today.\n\nValue based class and value type are mutually exclusive.\n\nRelated to JEP390\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-12-09T16:46:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxMTQ2Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r542811463", "bodyText": "Can the above lines be re-written using the existing API?  Something like:\n   TR_OpaqueClassBlock *clazz = self()->getMonClass(monNode);\n   if (!clazz)\n      return TR_maybe;", "author": "0xdaryl", "createdAt": "2020-12-14T21:29:51Z", "path": "runtime/compiler/codegen/J9CodeGenerator.cpp", "diffHunk": "@@ -5376,3 +5376,24 @@ J9::CodeGenerator::isMonitorValueType(TR::Node* monNode)\n \n    return TR_no;\n    }\n+\n+TR_YesNoMaybe\n+J9::CodeGenerator::isMonitorValueBased(TR::Node* monNode)\n+   {\n+   if (_monitorMapping.find(monNode->getGlobalIndex()) == _monitorMapping.end())\n+      return TR_maybe;\n+\n+   TR_OpaqueClassBlock *clazz = _monitorMapping[monNode->getGlobalIndex()];", "originalCommit": "a9e59293e48ca2d78e19ff1716bc7a3cb2eefd1a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNjE2NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r542816164", "bodyText": "Should be a TR_FATAL_ASSERT, especially under debug.", "author": "0xdaryl", "createdAt": "2020-12-14T21:33:45Z", "path": "runtime/compiler/env/J9ClassEnv.cpp", "diffHunk": "@@ -825,6 +825,29 @@ J9::ClassEnv::isValueTypeClassFlattened(TR_OpaqueClassBlock *clazz)\n    return (clazz && J9_IS_J9CLASS_FLATTENED(reinterpret_cast<J9Class*>(clazz)));\n    }\n \n+bool\n+J9::ClassEnv::isValueBasedClass(TR_OpaqueClassBlock *clazz)\n+   {\n+#if defined(J9VM_OPT_JITSERVER)\n+   if (auto stream = TR::CompilationInfo::getStream())\n+      {\n+      uintptr_t classFlags = 0;\n+      JITServerHelpers::getAndCacheRAMClassInfo((J9Class *)clazz, TR::compInfoPT->getClientData(), stream, JITServerHelpers::CLASSINFO_CLASS_FLAGS, (void *)&classFlags);\n+#ifdef DEBUG\n+      stream->write(JITServer::MessageType::ClassEnv_classFlagsValue, clazz);\n+      uintptr_t classFlagsRemote = std::get<0>(stream->read<uintptr_t>());\n+      // Check that class flags from remote call is equal to the cached ones\n+      classFlags = classFlags & J9ClassIsValueBased;\n+      classFlagsRemote = classFlagsRemote & J9ClassIsValueBased;\n+      TR_ASSERT(classFlags == classFlagsRemote, \"remote call class flags is not equal to cached class flags\");", "originalCommit": "a9e59293e48ca2d78e19ff1716bc7a3cb2eefd1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyMDYyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r542920623", "bodyText": "As far as I could recall it's possible that these asserts could be hit on the server side. I don't remember how frequent it was or if things have changed. The same kind of TR_ASSERT check is also used in other four methods of ClassEnv [4]. I'll let @mpirvu help comment on if it should be changed to TR_FATAL_ASSERT based on the latest JITServer development.\n[1]\nhttps://github.com/eclipse/openj9/blob/f10260975a1d840fc8355bb70c4a1d42a9303337/runtime/compiler/env/J9ClassEnv.cpp#L125\nhttps://github.com/eclipse/openj9/blob/f10260975a1d840fc8355bb70c4a1d42a9303337/runtime/compiler/env/J9ClassEnv.cpp#L783\nhttps://github.com/eclipse/openj9/blob/f10260975a1d840fc8355bb70c4a1d42a9303337/runtime/compiler/env/J9ClassEnv.cpp#L806\nhttps://github.com/eclipse/openj9/blob/f10260975a1d840fc8355bb70c4a1d42a9303337/runtime/compiler/env/J9ClassEnv.cpp#L829", "author": "a7ehuo", "createdAt": "2020-12-14T23:26:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3OTIyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r543479223", "bodyText": "@a7ehuo Thank you for not forgetting about JITServer!\nThe check is there to validate that the flag the server has cached is still consistent with the client's view.\nThis needs to be done on a case-by-case basis, meaning that there are some flags which are expected to be set once and never change. The check is valid for such flags.\nThere are other flags that could change back and forth at runtime and we should not put a check for those.\nThe question here is whether J9ClassIsValueBased can change at runtime, or it is set during class load and immutable afterwards.\nIrrespective of the answer, since the checking code is under #ifdef DEBUG TR_ASSERT has the same behavior as TR_ASSERT_FATAL, so it doesn't matter which one we use. I am ok with changing this into a fatal assert.", "author": "mpirvu", "createdAt": "2020-12-15T16:09:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNjE2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUzMzgzNA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r543533834", "bodyText": "Once J9ClassIsValueBased or J9ClassIsValueType is set, they're immutable afterwards. I'll change the assert to TR_ASSERT_FATAL", "author": "a7ehuo", "createdAt": "2020-12-15T17:17:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgxNjE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzNDM0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r542834342", "bodyText": "Just so I understand, the reason we can't combine these two into a single check is because the VM helper that will ultimately be called is only expecting one flag value or the other.  That is, it currently can't handle the situation when both flag values are set but it could be adapted to do so.", "author": "0xdaryl", "createdAt": "2020-12-14T21:51:06Z", "path": "runtime/compiler/x/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -5193,8 +5206,13 @@ TR::Register\n    TR::LabelSymbol *fallThru   = generateLabelSymbol(cg);\n    // Create the monitor exit snippet\n    TR::LabelSymbol *snippetLabel = generateLabelSymbol(cg);\n-   if (TR::Compiler->om.areValueTypesEnabled())\n-       TR::TreeEvaluator::generateCheckForValueTypeMonitorEnterOrExit(node, snippetLabel, cg);\n+\n+   if (TR::Compiler->om.areValueTypesEnabled() && (cg->isMonitorValueType(node) == TR_maybe))\n+      TR::TreeEvaluator::generateCheckForValueMonitorEnterOrExit(node, J9ClassIsValueType, snippetLabel, cg);\n+\n+   if (TR::Compiler->om.areValueBasedMonitorChecksEnabled() && (cg->isMonitorValueBased(node) == TR_maybe))\n+      TR::TreeEvaluator::generateCheckForValueMonitorEnterOrExit(node, J9ClassIsValueBased, snippetLabel, cg);", "originalCommit": "a9e59293e48ca2d78e19ff1716bc7a3cb2eefd1a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjkyNzM5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r542927399", "bodyText": "the reason we can't combine these two into a single check is because the VM helper that will ultimately be called is only expecting one flag value or the other.\n\nThis is my understanding too. They're mutually exclusive.\n\nThat is, it currently can't handle the situation when both flag values are set but it could be adapted to do so.\n\nThe two flags shouldn't be set at the same time. But with the issue mentioned in #11358 (comment). both flags could be set with a build withJAVA_SPEC_VERSION  >= 16 and J9VM_OPT_VALHALLA_VALUE_TYPES is defined. The VM helper will handle it as value type case regardless of which flag is set or what type of monitor object is (value based or value type). It's an issue. It should be prevented (#11358 (comment)).", "author": "a7ehuo", "createdAt": "2020-12-14T23:42:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzNDM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2OTQ5Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r543369496", "bodyText": "The two flags shouldn't be set at the same time. But with the issue mentioned in #11358 (comment). both flags could be set with a build withJAVA_SPEC_VERSION >= 16 and J9VM_OPT_VALHALLA_VALUE_TYPES is defined. The VM helper will handle it as value type case regardless of which flag is set or what type of monitor object is (value based or value type). It's an issue. It should be prevented (#11358 (comment)).\n\nJust to clarify. At the moment I don't see us releasing a build where both valuebased checks and J9VM_OPT_VALHALLA_VALUE_TYPES are enabled since the purpose of JEP 390 is to aid migration to valuetypes. If this assumption is incorrect we will modify the helpers to address this. So from the JIT perspective, you do not need to worry about the dual cases. You can just test the mask (J9_CLASS_DISALLOWS_LOCKING_FLAGS) and call the helper. That is what the VM is currently doing. If supporting both modes simultaneously becomes a requirement, then we will have to change the VM to support this. And if you are testing the mask, it will be no effort on your part to support this.", "author": "tajila", "createdAt": "2020-12-15T14:07:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzNDM0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ2ODY4NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11358#discussion_r543468684", "bodyText": "I'll look at how to combine the code in CG to test J9_CLASS_DISALLOWS_LOCKING_FLAGS instead of using two APIs", "author": "a7ehuo", "createdAt": "2020-12-15T15:57:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzNDM0Mg=="}], "type": "inlineReview"}, {"oid": "07845c8049b409f552935661f429f919eee956d8", "url": "https://github.com/eclipse-openj9/openj9/commit/07845c8049b409f552935661f429f919eee956d8", "message": "Handle monitor enter/exit on value based instances in x86\n\nIf the monitor object type is value based class, VM\nwill either issue a warning or throw an exception\nbased on -XX:ValueBasedClassCheck option.\n\nIf the monitor object type is unkonwn, insert a runtime\nmemory check in monitor enter/exit on the class flag\nJ9ClassIsValueBased.\n\nIf the monitor object type is not value based class,\nproceed as how it is handled today.\n\nValue based class and value type are mutually exclusive.\n\nRelated to JEP390\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-12-15T18:47:59Z", "type": "forcePushed"}, {"oid": "05d5976831d528f2422cf28eb449a2ca03a0e970", "url": "https://github.com/eclipse-openj9/openj9/commit/05d5976831d528f2422cf28eb449a2ca03a0e970", "message": "Add utility functions in JIT for value based classes\n\nAdd `areValueBasedMonitorChecksEnabled` which calls VM\nto check if value based class monitor check is enabled.\nAdd `isValueBasedClass` and `isMonitorValueBased` to\ndetermine if a monitor object is a value based class\ninstance.\n\nRelated to JEP390\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-12-15T20:41:50Z", "type": "commit"}, {"oid": "881cddc6feda6b6c33fa1f1644d4fe5170088e0f", "url": "https://github.com/eclipse-openj9/openj9/commit/881cddc6feda6b6c33fa1f1644d4fe5170088e0f", "message": "Handle monitor enter/exit on value based instances in x86\n\nIf the monitor object type is value based class, VM\nwill either issue a warning or throw an exception\nbased on -XX:ValueBasedClassCheck option.\n\nIf the monitor object type is unkonwn, insert a runtime\nmemory check in monitor enter/exit on the class flag\nJ9ClassIsValueBased.\n\nIf the monitor object type is not value based class,\nproceed as how it is handled today.\n\nValue based class and value type are mutually exclusive.\n\nRelated to JEP390\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-12-15T20:41:50Z", "type": "commit"}, {"oid": "881cddc6feda6b6c33fa1f1644d4fe5170088e0f", "url": "https://github.com/eclipse-openj9/openj9/commit/881cddc6feda6b6c33fa1f1644d4fe5170088e0f", "message": "Handle monitor enter/exit on value based instances in x86\n\nIf the monitor object type is value based class, VM\nwill either issue a warning or throw an exception\nbased on -XX:ValueBasedClassCheck option.\n\nIf the monitor object type is unkonwn, insert a runtime\nmemory check in monitor enter/exit on the class flag\nJ9ClassIsValueBased.\n\nIf the monitor object type is not value based class,\nproceed as how it is handled today.\n\nValue based class and value type are mutually exclusive.\n\nRelated to JEP390\n\nSigned-off-by: Annabelle Huo <Annabelle.Huo@ibm.com>", "committedDate": "2020-12-15T20:41:50Z", "type": "forcePushed"}]}