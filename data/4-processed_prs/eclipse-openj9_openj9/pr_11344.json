{"pr_number": 11344, "pr_title": "AArch64: Add jitARM64Handler", "pr_createdAt": "2020-12-03T01:19:03Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/11344", "timeline": [{"oid": "1364db73123569d21bcb8bc13e2c05b182de5a00", "url": "https://github.com/eclipse-openj9/openj9/commit/1364db73123569d21bcb8bc13e2c05b182de5a00", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-12-03T01:35:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0NDMxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537344312", "bodyText": "Mixed styles of declaring pointer variables.\nconst char* infoName; or const char *infoName;", "author": "knn-k", "createdAt": "2020-12-07T09:15:04Z", "path": "runtime/compiler/runtime/SignalHandler.c", "diffHunk": "@@ -1850,6 +1850,87 @@ UDATA jitAMD64Handler(J9VMThread* vmThread, U_32 sigType, void *sigInfo)\n \treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n }\n \n+#elif defined(TR_HOST_ARM64) && defined(TR_TARGET_ARM64)\n+\n+extern void jitHandleNullPointerExceptionTrap(void);\n+extern void jitHandleInternalErrorTrap(void);\n+\n+UDATA jitARM64Handler(J9VMThread* vmThread, U_32 sigType, void* sigInfo)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\tJ9JITExceptionTable *exceptionTable = NULL;\n+\tJ9JITConfig *jitConfig = vmThread->javaVM->jitConfig;\n+\n+\tif (jitConfig) {\n+\t\tconst char* infoName;", "originalCommit": "1364db73123569d21bcb8bc13e2c05b182de5a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1OTQyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537959429", "bodyText": "Fixed", "author": "Akira1Saitoh", "createdAt": "2020-12-08T01:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0NDMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0NjcyMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537346720", "bodyText": "You may want to define a symbol for a page size.\nIs the size of the first page 64KB?", "author": "knn-k", "createdAt": "2020-12-07T09:18:50Z", "path": "runtime/compiler/runtime/SignalHandler.c", "diffHunk": "@@ -1850,6 +1850,87 @@ UDATA jitAMD64Handler(J9VMThread* vmThread, U_32 sigType, void *sigInfo)\n \treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n }\n \n+#elif defined(TR_HOST_ARM64) && defined(TR_TARGET_ARM64)\n+\n+extern void jitHandleNullPointerExceptionTrap(void);\n+extern void jitHandleInternalErrorTrap(void);\n+\n+UDATA jitARM64Handler(J9VMThread* vmThread, U_32 sigType, void* sigInfo)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\tJ9JITExceptionTable *exceptionTable = NULL;\n+\tJ9JITConfig *jitConfig = vmThread->javaVM->jitConfig;\n+\n+\tif (jitConfig) {\n+\t\tconst char* infoName;\n+\t\tUDATA *pcPtr;\n+\t\tvoid *infoValue;\n+\t\tU_32 infoType;\n+\t\tJ9JITExceptionTable *exceptionTable;\n+\n+\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_CONTROL, J9PORT_SIG_CONTROL_PC, &infoName, &infoValue);\n+\t\tif (infoType != J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n+\t\t}\n+\t\tpcPtr = (UDATA *) infoValue;\n+\n+\t\texceptionTable = jitConfig->jitGetExceptionTableFromPC(vmThread, *pcPtr);\n+\n+\t\tif (!exceptionTable && J9PORT_SIG_FLAG_SIGBUS == sigType) {\n+\t\t   // We might be in a jit helper routine (like arraycopy) so look at the link register as well...\n+\t\t   UDATA *lrPtr;\n+\t\t   /* R30 is LR for aarch64 */\n+\t\t   infoType = j9sig_info(sigInfo, J9PORT_SIG_GPR, 30, &infoName, &infoValue);\n+\t\t   if (infoType != J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t      return J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n+\t\t   }\n+\t\t   lrPtr = (UDATA *) infoValue;\n+\t\t   exceptionTable = jitConfig->jitGetExceptionTableFromPC(vmThread, *lrPtr);\n+\t\t   if (exceptionTable) {\n+\t\t\t\tvmThread->jitException = (J9Object *) (*lrPtr);  /* the lr points at the instruction after the helper call */\n+\t\t\t\t*pcPtr = (UDATA) ((void *) &jitHandleInternalErrorTrap);\n+\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t   }\n+\t\t}\n+\n+\t\tif (exceptionTable) {\n+\t\t\tswitch (sigType) {\n+\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n+\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n+\t\t\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_SIGNAL, J9PORT_SIG_SIGNAL_INACCESSIBLE_ADDRESS, &infoName, &infoValue);\n+\t\t\t\tif (sigType == J9PORT_SIG_FLAG_SIGSEGV && infoType == J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\t\t\tif ( *(UDATA*)infoValue > 0xFFFF ) {", "originalCommit": "1364db73123569d21bcb8bc13e2c05b182de5a00", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk1OTkyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537959923", "bodyText": "We assume that the page size is 4KB. Defined NUMBEROFBYTESINACCESSIBLE as 4096 and changed the code to use it.", "author": "Akira1Saitoh", "createdAt": "2020-12-08T01:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzM0NjcyMA=="}], "type": "inlineReview"}, {"oid": "46d0f396ad5dbe1bd0cb708937e51c608492b268", "url": "https://github.com/eclipse-openj9/openj9/commit/46d0f396ad5dbe1bd0cb708937e51c608492b268", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-12-08T00:49:48Z", "type": "forcePushed"}, {"oid": "b8616767d1d9709261a179def2707484bdbe6fca", "url": "https://github.com/eclipse-openj9/openj9/commit/b8616767d1d9709261a179def2707484bdbe6fca", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-12-08T01:21:21Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MjEzMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537962132", "bodyText": "You need to compare using >= instead of > here.", "author": "knn-k", "createdAt": "2020-12-08T01:29:16Z", "path": "runtime/compiler/runtime/SignalHandler.c", "diffHunk": "@@ -1850,6 +1850,87 @@ UDATA jitAMD64Handler(J9VMThread* vmThread, U_32 sigType, void *sigInfo)\n \treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n }\n \n+#elif defined(TR_HOST_ARM64) && defined(TR_TARGET_ARM64)\n+\n+#define NUMBEROFBYTESINACCESSIBLE 4096\n+extern void jitHandleNullPointerExceptionTrap(void);\n+extern void jitHandleInternalErrorTrap(void);\n+\n+UDATA jitARM64Handler(J9VMThread* vmThread, U_32 sigType, void* sigInfo)\n+{\n+\tPORT_ACCESS_FROM_VMC(vmThread);\n+\n+\tJ9JITExceptionTable *exceptionTable = NULL;\n+\tJ9JITConfig *jitConfig = vmThread->javaVM->jitConfig;\n+\n+\tif (jitConfig) {\n+\t\tconst char *infoName;\n+\t\tUDATA *pcPtr;\n+\t\tvoid *infoValue;\n+\t\tU_32 infoType;\n+\t\tJ9JITExceptionTable *exceptionTable;\n+\n+\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_CONTROL, J9PORT_SIG_CONTROL_PC, &infoName, &infoValue);\n+\t\tif (infoType != J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n+\t\t}\n+\t\tpcPtr = (UDATA *) infoValue;\n+\n+\t\texceptionTable = jitConfig->jitGetExceptionTableFromPC(vmThread, *pcPtr);\n+\n+\t\tif (!exceptionTable && J9PORT_SIG_FLAG_SIGBUS == sigType) {\n+\t\t   // We might be in a jit helper routine (like arraycopy) so look at the link register as well...\n+\t\t   UDATA *lrPtr;\n+\t\t   /* R30 is LR for aarch64 */\n+\t\t   infoType = j9sig_info(sigInfo, J9PORT_SIG_GPR, 30, &infoName, &infoValue);\n+\t\t   if (infoType != J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t      return J9PORT_SIG_EXCEPTION_CONTINUE_SEARCH;\n+\t\t   }\n+\t\t   lrPtr = (UDATA *) infoValue;\n+\t\t   exceptionTable = jitConfig->jitGetExceptionTableFromPC(vmThread, *lrPtr);\n+\t\t   if (exceptionTable) {\n+\t\t\t\tvmThread->jitException = (J9Object *) (*lrPtr);  /* the lr points at the instruction after the helper call */\n+\t\t\t\t*pcPtr = (UDATA) ((void *) &jitHandleInternalErrorTrap);\n+\t\t\t\treturn J9PORT_SIG_EXCEPTION_CONTINUE_EXECUTION;\n+\t\t   }\n+\t\t}\n+\n+\t\tif (exceptionTable) {\n+\t\t\tswitch (sigType) {\n+\t\t\tcase J9PORT_SIG_FLAG_SIGBUS:\n+\t\t\tcase J9PORT_SIG_FLAG_SIGSEGV:\n+\t\t\t\tinfoType = j9sig_info(sigInfo, J9PORT_SIG_SIGNAL, J9PORT_SIG_SIGNAL_INACCESSIBLE_ADDRESS, &infoName, &infoValue);\n+\t\t\t\tif (sigType == J9PORT_SIG_FLAG_SIGSEGV && infoType == J9PORT_SIG_VALUE_ADDRESS) {\n+\t\t\t\t\tif ( *(UDATA*)infoValue > NUMBEROFBYTESINACCESSIBLE) {", "originalCommit": "b8616767d1d9709261a179def2707484bdbe6fca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2NjA3OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/11344#discussion_r537966079", "bodyText": "Thanks for pointing it out. Fixed.", "author": "Akira1Saitoh", "createdAt": "2020-12-08T01:39:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk2MjEzMg=="}], "type": "inlineReview"}, {"oid": "97ee0069b849b57472f371b4cea9952ccbd5076a", "url": "https://github.com/eclipse-openj9/openj9/commit/97ee0069b849b57472f371b4cea9952ccbd5076a", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-12-08T01:39:03Z", "type": "commit"}, {"oid": "97ee0069b849b57472f371b4cea9952ccbd5076a", "url": "https://github.com/eclipse-openj9/openj9/commit/97ee0069b849b57472f371b4cea9952ccbd5076a", "message": "AArch64: Add jitARM64Handler\n\nAdd jitARM64Handler to support implicit NULLCHK for aarch64.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-12-08T01:39:03Z", "type": "forcePushed"}]}