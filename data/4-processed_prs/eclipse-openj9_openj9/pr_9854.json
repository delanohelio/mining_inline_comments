{"pr_number": 9854, "pr_title": "JITHelpers for flattenable fields", "pr_createdAt": "2020-06-11T15:58:39Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/9854", "timeline": [{"oid": "0868e80c84ad014cc3060d615336e51783d908ff", "url": "https://github.com/eclipse-openj9/openj9/commit/0868e80c84ad014cc3060d615336e51783d908ff", "message": "Added getFlattenableFieldType and getFlattenableFieldOffset, modified isFlattenableFieldFlattened", "committedDate": "2020-06-11T16:00:37Z", "type": "forcePushed"}, {"oid": "3bd01c3bf7a5955ae0f3ea6b03e7867ce6262fa3", "url": "https://github.com/eclipse-openj9/openj9/commit/3bd01c3bf7a5955ae0f3ea6b03e7867ce6262fa3", "message": "Added JITHelpers for flattenable fields\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- get FlattenableFieldSize: Returns the size of an instance field\nThe Following macro was added:\n- J9_ARRAY_ELEMENT_SIZE: returns the flattenedElementSize of an arrayClass\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-11T18:40:32Z", "type": "forcePushed"}, {"oid": "c47ec43624a745808f790136777cd194d93424a2", "url": "https://github.com/eclipse-openj9/openj9/commit/c47ec43624a745808f790136777cd194d93424a2", "message": "Added JITHelpers for flattenable fields\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- get FlattenableFieldSize: Returns the size of an instance field\nThe Following macro was added:\n- J9_ARRAY_ELEMENT_SIZE: returns the flattenedElementSize of an arrayClass\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-11T18:47:41Z", "type": "forcePushed"}, {"oid": "392bc5aa00451574863faee90beb4a9a6a87b874", "url": "https://github.com/eclipse-openj9/openj9/commit/392bc5aa00451574863faee90beb4a9a6a87b874", "message": "Added JITHelpers for flattenable fields\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- get FlattenableFieldSize: Returns the size of an instance field\nThe Following macro was added:\n- J9_ARRAY_ELEMENT_SIZE: returns the flattenedElementSize of an arrayClass\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-11T18:50:53Z", "type": "forcePushed"}, {"oid": "851641816185f3e4c11d5712b9f47db94c5a6013", "url": "https://github.com/eclipse-openj9/openj9/commit/851641816185f3e4c11d5712b9f47db94c5a6013", "message": "Added JITHelpers for flattenable fields\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- get FlattenableFieldSize: Returns the size of an instance field\nThe Following macro was added:\n- J9_ARRAY_ELEMENT_SIZE: returns the flattenedElementSize of an arrayClass\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-11T20:39:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA0ODc4MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439048780", "bodyText": "need to check if the field is flattened before doing this. If its not flattened the size is sizeof(fj9object_t)", "author": "tajila", "createdAt": "2020-06-11T20:20:38Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +72,114 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+#ifdef J9VM_OPT_VALHALLA_VALUE_TYPES\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                        fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                        if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                        ) {\n+                                        index = i;\n+                                        break;\n+                        }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                        J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                        if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                                        break;\n+                        }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+#endif /* J9VM_OPT_VALHALLA_VALUE_TYPES */\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField)\n+{               \n+        UDATA fieldOffset = 0;\n+        if(TRUE == instanceField){\n+                J9FlattenedClassCache *flattenedClassCache = NULL;\n+                J9ROMNameAndSignature *nameAndSig;\n+                UDATA fieldIndex = 0;\n+\n+                nameAndSig = &field->nameAndSignature;\n+                flattenedClassCache = fieldOwner->flattenedClassCache;\n+                fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+                J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+                fieldOffset = flattenedClassCacheEntry->offset;\n+        } else{\n+                /* static not implemented yet */\n+                fieldOffset = UDATA_MAX;\n+        }\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        if(TRUE ==  instanceField){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field, instanceField);\n+                fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        } else{\n+                /* static not implemented yet */\n+                fieldFlattened = FALSE;\n+        }\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField)\n+{\n+        J9Class * fieldType = NULL;\n+        if(TRUE == instanceField){\n+                J9FlattenedClassCache *flattenedClassCache = NULL;\n+                J9ROMNameAndSignature *nameAndSig;\n+                UDATA fieldIndex = 0;\n+\n+                nameAndSig = &field->nameAndSignature;\n+                flattenedClassCache = fieldOwner->flattenedClassCache;\n+                fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+                fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        } else{\n+                /*static not implemented yet */\n+                fieldType = NULL;\n+        }\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField)\n+{\n+        UDATA instanceSize = FALSE;\n+        if(TRUE ==  instanceField){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field, instanceField);\n+                instanceSize =  (clazz)->totalInstanceSize - (clazz)->backfillOffset;", "originalCommit": "392bc5aa00451574863faee90beb4a9a6a87b874", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NDEwMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439084101", "bodyText": "need to fix the tab spacing here", "author": "tajila", "createdAt": "2020-06-11T21:38:04Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +72,114 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+#ifdef J9VM_OPT_VALHALLA_VALUE_TYPES\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {", "originalCommit": "851641816185f3e4c11d5712b9f47db94c5a6013", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NDM3Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439084372", "bodyText": "do you need this one", "author": "tajila", "createdAt": "2020-06-11T21:38:51Z", "path": "runtime/vm/resolvesupport.cpp", "diffHunk": "@@ -33,6 +33,8 @@\n #include \"stackwalk.h\"\n #include \"j9modifiers_api.h\"\n #include \"VMHelpers.hpp\"\n+#include \"ValueTypeHelpers.hpp\"", "originalCommit": "851641816185f3e4c11d5712b9f47db94c5a6013", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NDQ5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439084493", "bodyText": "unnecessary whitespace", "author": "tajila", "createdAt": "2020-06-11T21:39:11Z", "path": "runtime/vm/ValueTypeHelpers.hpp", "diffHunk": "@@ -256,4 +257,6 @@ class VM_ValueTypeHelpers {\n \n };\n \n+", "originalCommit": "851641816185f3e4c11d5712b9f47db94c5a6013", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4NDYwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439084606", "bodyText": "tab spacing here as well", "author": "tajila", "createdAt": "2020-06-11T21:39:29Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +72,114 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+#ifdef J9VM_OPT_VALHALLA_VALUE_TYPES\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                        fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                        if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                        ) {\n+                                        index = i;\n+                                        break;\n+                        }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {", "originalCommit": "851641816185f3e4c11d5712b9f47db94c5a6013", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "361d7d55e1ea0f434abf8329c6c8ee3d18ebc1b2", "url": "https://github.com/eclipse-openj9/openj9/commit/361d7d55e1ea0f434abf8329c6c8ee3d18ebc1b2", "message": "Added JITHelpers for flattenable fields\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- get FlattenableFieldSize: Returns the size of an instance field\nThe Following macro was added:\n- J9_ARRAY_ELEMENT_SIZE: returns the flattenedElementSize of an arrayClass\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-12T15:28:40Z", "type": "forcePushed"}, {"oid": "e556d3a49884f478b84e16e72b02ea775dea67b4", "url": "https://github.com/eclipse-openj9/openj9/commit/e556d3a49884f478b84e16e72b02ea775dea67b4", "message": "Added JITHelpers for flattenable fields\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- get FlattenableFieldSize: Returns the size of an instance field\n\nThe Following macro was added:\n- J9_ARRAY_ELEMENT_SIZE: returns the flattenedElementSize of an arrayClass\n\nModified vm test cmake and module files\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-12T16:53:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTYwMTMyNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r439601326", "bodyText": "should be j9vm_SOURCE_DIR", "author": "tajila", "createdAt": "2020-06-12T19:19:12Z", "path": "runtime/tests/vm/CMakeLists.txt", "diffHunk": "@@ -40,6 +40,7 @@ j9vm_add_executable(vmtest\n \t${j9vm_SOURCE_DIR}/vm/vmthinit.c\n \t${j9vm_SOURCE_DIR}/vm/stringhelpers.cpp\n \t${j9vm_BINARY_DIR}/vm/ut_j9vm.c\n+\t${j9vm_BINARY_DIR}/vm/ValueTypeHelpers.cpp", "originalCommit": "e556d3a49884f478b84e16e72b02ea775dea67b4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5bf754da9b6d008cc1d0768a5605ed211bf621e0", "url": "https://github.com/eclipse-openj9/openj9/commit/5bf754da9b6d008cc1d0768a5605ed211bf621e0", "message": "Added JITHelpers for flattenable fields\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- get FlattenableFieldSize: Returns the size of an instance field\n\nThe Following macro was added:\n- J9_ARRAY_ELEMENT_SIZE: returns the flattenedElementSize of an arrayClass\n\nModified vm test cmake and module files\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-12T19:25:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjkxMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440116912", "bodyText": "make this a real helper, like the others", "author": "tajila", "createdAt": "2020-06-15T11:44:02Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -25,8 +25,11 @@\n #include \"j9.h\"\n #include \"ut_j9vm.h\"\n #include \"ObjectAccessBarrierAPI.hpp\"\n+#include \"vm_api.h\"\n \n extern \"C\" {\n+#define J9_ARRAY_ELEMENT_SIZE(arrayClass) (arrayClass->flattenedElementSize)", "originalCommit": "5bf754da9b6d008cc1d0768a5605ed211bf621e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDIyMjU0Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440222542", "bodyText": "Do I keep the macro naming convention too?", "author": "OussamaSaoudi", "createdAt": "2020-06-15T14:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjkxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1Mzc2OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440253768", "bodyText": "you can call it arrayElementSize(..)", "author": "tajila", "createdAt": "2020-06-15T15:19:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNjkxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzQ5Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440117493", "bodyText": "We dont need the BOOLEAN instanceField param, we should be able to tell since all field names will be unique. See #9880. Currently, only instance fields are qtypes, so dont worry about statics for now.", "author": "tajila", "createdAt": "2020-06-15T11:45:16Z", "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2343,6 +2343,56 @@ UDATA\n findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature);\n #endif /* J9VM_OPT_VALHALLA_VALUE_TYPES */\n \n+/**\n+ * Returns the offset of a qtype field.\n+ * \n+ * @param[in] fieldOwner the J9class that defines the field\n+ * @param[in] field romfieldshape of the field\n+ * @param[in] instance flag indicate if its an instance or static field\n+ *\n+ * @return field offset\n+ */\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field, BOOLEAN instanceField);", "originalCommit": "5bf754da9b6d008cc1d0768a5605ed211bf621e0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzU5Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440117592", "bodyText": "this goes for the rest of the helpers", "author": "tajila", "createdAt": "2020-06-15T11:45:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzQ5Mw=="}], "type": "inlineReview"}, {"oid": "085f984343614fa1c3270744ae36c0d6de283c5b", "url": "https://github.com/eclipse-openj9/openj9/commit/085f984343614fa1c3270744ae36c0d6de283c5b", "message": "Added JITHelpers for flattenable fields\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- J9_ARRAY_ELEMENT_SIZE: Returns the flattenedElementSize of an arrayClass\n\nModified vm test cmake and module files\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-15T14:33:49Z", "type": "forcePushed"}, {"oid": "5e070a9a6b1eee54716ea9b8702cfbd0273936b6", "url": "https://github.com/eclipse-openj9/openj9/commit/5e070a9a6b1eee54716ea9b8702cfbd0273936b6", "message": "Added JITHelpers for flattenable fields\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nModified vm test cmake and module files\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-15T15:59:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5ODE0OA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440398148", "bodyText": "you need a check here that index is not UDATA_MAX.  Make it an assert, jit should not give us bad params.\nSame thing goes for all the other places its used", "author": "tajila", "createdAt": "2020-06-15T19:29:00Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,104 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{               \n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);", "originalCommit": "5e070a9a6b1eee54716ea9b8702cfbd0273936b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM5ODU4Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r440398586", "bodyText": "all of these functions need an entry in the internalVMFunctions table", "author": "tajila", "createdAt": "2020-06-15T19:29:49Z", "path": "runtime/oti/vm_api.h", "diffHunk": "@@ -2343,6 +2343,63 @@ UDATA\n findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature);\n #endif /* J9VM_OPT_VALHALLA_VALUE_TYPES */\n \n+/**", "originalCommit": "5e070a9a6b1eee54716ea9b8702cfbd0273936b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4abb9e750d70a60f6ff9a92d90987638836997bf", "url": "https://github.com/eclipse-openj9/openj9/commit/4abb9e750d70a60f6ff9a92d90987638836997bf", "message": "Added JITHelpers for flattenable fields\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nModified vm test cmake and module files\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-16T14:56:23Z", "type": "forcePushed"}, {"oid": "214d6c813b515ab04582bab92fa5ce9ce3c6ce8c", "url": "https://github.com/eclipse-openj9/openj9/commit/214d6c813b515ab04582bab92fa5ce9ce3c6ce8c", "message": "Added JITHelpers for flattenable fields\nand modified existing vm test files and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-16T14:57:49Z", "type": "forcePushed"}, {"oid": "b2fc83daf4856e8be1fabb08b1dd998b103892e8", "url": "https://github.com/eclipse-openj9/openj9/commit/b2fc83daf4856e8be1fabb08b1dd998b103892e8", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-16T15:41:39Z", "type": "forcePushed"}, {"oid": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6", "url": "https://github.com/eclipse-openj9/openj9/commit/de19620784ae02a74c7d6fa35e84ed0d4c7299d6", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nRelated to: https://github.com/eclipse/openj9/issues/9627\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-16T16:56:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNTY0Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441705643", "bodyText": "formatting, needs space between if ( and ) {", "author": "tajila", "createdAt": "2020-06-17T17:21:46Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA instanceSize = 0;\n+        if(isFlattenableFieldFlattened(fieldOwner, field)){", "originalCommit": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNTgzMQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441705831", "bodyText": "same here", "author": "tajila", "createdAt": "2020-06-17T17:22:05Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA instanceSize = 0;\n+        if(isFlattenableFieldFlattened(fieldOwner, field)){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+                instanceSize =  (clazz)->totalInstanceSize - (clazz)->backfillOffset;\n+        } else{", "originalCommit": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjE4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441706187", "bodyText": "can simply return arrayClass->flattenedElementSize;", "author": "tajila", "createdAt": "2020-06-17T17:22:39Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        UDATA instanceSize = 0;\n+        if(isFlattenableFieldFlattened(fieldOwner, field)){\n+                J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+                instanceSize =  (clazz)->totalInstanceSize - (clazz)->backfillOffset;\n+        } else{\n+                instanceSize = sizeof(fj9object_t);\n+        }\n+        return instanceSize;\n+}\n+\n+UDATA\n+arrayElementSize(J9ArrayClass* arrayClass)\n+{\n+        UDATA elementSize = 0;\n+        elementSize = arrayClass->flattenedElementSize;\n+        return elementSize;", "originalCommit": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc2MDg3NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441760874", "bodyText": "I added an assert_vm_notNull too. Let me know if I should revert that", "author": "OussamaSaoudi", "createdAt": "2020-06-17T18:52:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNjE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTcwNzEwNg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r441707106", "bodyText": "add assert_vm_notNull for the params, same for the other functions below", "author": "tajila", "createdAt": "2020-06-17T17:24:17Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)", "originalCommit": "de19620784ae02a74c7d6fa35e84ed0d4c7299d6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "79acb1e06e3feb6d4ead50e232e50ce0648bb22e", "url": "https://github.com/eclipse-openj9/openj9/commit/79acb1e06e3feb6d4ead50e232e50ce0648bb22e", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nRelated to: https://github.com/eclipse/openj9/issues/9627\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-17T18:47:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MjE1NA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r442452154", "bodyText": "initialize size to sizeof(fj9object_t); so you dont need the else", "author": "tajila", "createdAt": "2020-06-18T19:26:57Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,117 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA instanceSize = 0;", "originalCommit": "79acb1e06e3feb6d4ead50e232e50ce0648bb22e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c3abc31bb1ed7a364d5e53631308061e120a013a", "url": "https://github.com/eclipse-openj9/openj9/commit/c3abc31bb1ed7a364d5e53631308061e120a013a", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nRelated to: https://github.com/eclipse/openj9/issues/9627\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-19T13:56:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzAwMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r442943000", "bodyText": "Assign this in the declaration, please. In fact all of these can be declared and assigned in order.", "author": "gacholio", "createdAt": "2020-06-19T16:41:20Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,115 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;", "originalCommit": "c3abc31bb1ed7a364d5e53631308061e120a013a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MzI2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r442943266", "bodyText": "Like above, assign these in the declarations.", "author": "gacholio", "createdAt": "2020-06-19T16:42:00Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,115 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;", "originalCommit": "c3abc31bb1ed7a364d5e53631308061e120a013a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0NDIyMw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r442944223", "bodyText": "This is not legal - use J9VMTHREAD_REFERENCE_SIZE or J9JAVAVM_REFERENCE_SIZE (which means you'll need to pass in a vmThread or javaVM).", "author": "gacholio", "createdAt": "2020-06-19T16:44:11Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,115 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA fieldOffset = 0;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        BOOLEAN fieldFlattened = FALSE;\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9Class * fieldType = NULL;\n+        J9FlattenedClassCache *flattenedClassCache = NULL;\n+        J9ROMNameAndSignature *nameAndSig;\n+        UDATA fieldIndex = 0;\n+\n+        nameAndSig = &field->nameAndSignature;\n+        flattenedClassCache = fieldOwner->flattenedClassCache;\n+        fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA instanceSize = sizeof(fj9object_t);", "originalCommit": "c3abc31bb1ed7a364d5e53631308061e120a013a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7612642d5cf439eb8e24aa052a4203241be63b42", "url": "https://github.com/eclipse-openj9/openj9/commit/7612642d5cf439eb8e24aa052a4203241be63b42", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nRelated to: https://github.com/eclipse/openj9/issues/9627\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-22T15:05:10Z", "type": "forcePushed"}, {"oid": "91c074bf22e3fa7d84a837e355b83b212962812e", "url": "https://github.com/eclipse-openj9/openj9/commit/91c074bf22e3fa7d84a837e355b83b212962812e", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nRelated to: https://github.com/eclipse/openj9/issues/9627\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-22T15:08:41Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NDM5OQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r443644399", "bodyText": "This comment (and the identical one below) seems unnecessary.", "author": "gacholio", "createdAt": "2020-06-22T15:29:36Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */", "originalCommit": "91c074bf22e3fa7d84a837e355b83b212962812e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NDczMg==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r443644732", "bodyText": "Please move this inside the loop (and initialize it in the declaration).", "author": "gacholio", "createdAt": "2020-06-22T15:30:04Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;", "originalCommit": "91c074bf22e3fa7d84a837e355b83b212962812e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY0NTE1Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/9854#discussion_r443645157", "bodyText": "Extra blank after the =", "author": "gacholio", "createdAt": "2020-06-22T15:30:37Z", "path": "runtime/vm/ValueTypeHelpers.cpp", "diffHunk": "@@ -69,4 +70,106 @@ isClassRefQtype(J9Class *cpContextClass, U_16 cpIndex)\n {\n \treturn VM_ValueTypeHelpers::isClassRefQtype((J9ConstantPool *) cpContextClass->ramConstantPool, cpIndex);\n }\n+UDATA\n+findIndexInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, J9ROMNameAndSignature *nameAndSignature)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA index = UDATA_MAX;\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9ROMFieldShape *fccEntryField = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                fccEntryField = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->field;\n+                if (J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_NAME(nameAndSignature), J9ROMFIELDSHAPE_NAME(fccEntryField))\n+                        && J9UTF8_EQUALS(J9ROMNAMEANDSIGNATURE_SIGNATURE(nameAndSignature), J9ROMFIELDSHAPE_SIGNATURE(fccEntryField))\n+                ) {\n+                        index = i;\n+                        break;\n+                }\n+        }\n+        return index;\n+}\n+\n+J9Class *\n+findJ9ClassInFlattenedClassCache(J9FlattenedClassCache *flattenedClassCache, U_8 *className, UDATA classNameLength)\n+{\n+        /* first field indicates the number of classes in the cache */\n+        UDATA length = flattenedClassCache->numberOfEntries;\n+        J9Class *clazz = NULL;\n+\n+        for (UDATA i = 0; i < length; i++) {\n+                J9UTF8* currentClassName = J9ROMCLASS_CLASSNAME(J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz->romClass);\n+                if (J9UTF8_DATA_EQUALS(J9UTF8_DATA(currentClassName), J9UTF8_LENGTH(currentClassName), className, classNameLength)) {\n+                        clazz = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, i)->clazz;\n+                        break;\n+                }\n+        }\n+\n+        Assert_VM_notNull(clazz);\n+        return clazz;\n+}\n+\n+UDATA\n+getFlattenableFieldOffset(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9FlattenedClassCache *flattenedClassCache = fieldOwner->flattenedClassCache;\n+        J9ROMNameAndSignature *nameAndSig = &field->nameAndSignature;\n+        UDATA fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9FlattenedClassCacheEntry * flattenedClassCacheEntry = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex);\n+        UDATA fieldOffset = flattenedClassCacheEntry->offset;\n+        return fieldOffset;\n+}\n+\n+BOOLEAN\n+isFlattenableFieldFlattened(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9Class* clazz = getFlattenableFieldType(fieldOwner, field);\n+        BOOLEAN fieldFlattened = J9_ARE_ALL_BITS_SET((clazz)->classFlags, J9ClassIsFlattened);\n+\n+        return fieldFlattened;\n+}\n+\n+J9Class *\n+getFlattenableFieldType(J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        J9FlattenedClassCache *flattenedClassCache = fieldOwner->flattenedClassCache;\n+        J9ROMNameAndSignature *nameAndSig = &field->nameAndSignature;\n+        UDATA fieldIndex = findIndexInFlattenedClassCache(flattenedClassCache, nameAndSig);\n+        Assert_VM_unequal(UDATA_MAX, fieldIndex);\n+        J9Class * fieldType = J9_VM_FCC_ENTRY_FROM_FCC(flattenedClassCache, fieldIndex)->clazz;\n+\n+        return fieldType;\n+}\n+\n+UDATA\n+getFlattenableFieldSize(J9VMThread *currentThread, J9Class *fieldOwner, J9ROMFieldShape *field)\n+{\n+        Assert_VM_notNull(fieldOwner);\n+        Assert_VM_notNull(field);\n+\n+        UDATA instanceSize =  J9VMTHREAD_REFERENCE_SIZE(currentThread);", "originalCommit": "91c074bf22e3fa7d84a837e355b83b212962812e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b810f78e2afbd334a51184c4f3535dc88ec7464", "url": "https://github.com/eclipse-openj9/openj9/commit/4b810f78e2afbd334a51184c4f3535dc88ec7464", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nRelated to: https://github.com/eclipse/openj9/issues/9627\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-22T16:18:21Z", "type": "forcePushed"}, {"oid": "d103aa1dcc9e4ec9b00fbf59266c6cd7c9cbb297", "url": "https://github.com/eclipse-openj9/openj9/commit/d103aa1dcc9e4ec9b00fbf59266c6cd7c9cbb297", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nRelated to: https://github.com/eclipse/openj9/issues/9627\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-22T17:29:50Z", "type": "commit"}, {"oid": "d103aa1dcc9e4ec9b00fbf59266c6cd7c9cbb297", "url": "https://github.com/eclipse-openj9/openj9/commit/d103aa1dcc9e4ec9b00fbf59266c6cd7c9cbb297", "message": "JITHelpers for flattenable fields\nAdded JITHelpers for flattenable fields, modified existing vm\ntest files, and moved existing c functions.\n\nThe following are the added helper functions:\n- getFlattenableFieldOffset: Returns offset of a qtype field\n- isFlattenableFieldFlattened: Returns if a field is flattened\n- getFlattenableFieldType: Returnss the type of an instance field\n- getFlattenableFieldSize: Returns the size of an instance field\n- arrayElementSize: Returns the flattenedElementSize of an arrayClass\n\nMoved following C functions from resolveField to ValueTypeHelpers\n- findJ9ClassInFlattenedClassCache\n- findIndexInFlattenedClassCache\n\nModified vm test cmake and module files\n\nRelated to: https://github.com/eclipse/openj9/issues/9627\n\nSigned-off-by: Oussama Saoudi <oussama.saoudi@ibm.com>", "committedDate": "2020-06-22T17:29:50Z", "type": "forcePushed"}]}