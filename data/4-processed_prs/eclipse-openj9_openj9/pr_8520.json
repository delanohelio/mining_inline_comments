{"pr_number": 8520, "pr_title": "Handle jitNewValue in code generators", "pr_createdAt": "2020-02-06T18:37:19Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/8520", "timeline": [{"oid": "ec63d09bb1d45d8153cead527d031cba252a8181", "url": "https://github.com/eclipse-openj9/openj9/commit/ec63d09bb1d45d8153cead527d031cba252a8181", "message": "Remove unnecessary platform guards on POWER and ARM\n\nSome file in the POWER and ARM code generators are guarded with\nTR_TARGET_ARM and TR_TARGET_POWER, respectively. These are unnecessary\nbecause those files are only ever built on their respective platform.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-06T21:23:07Z", "type": "forcePushed"}, {"oid": "30d16a67480fedb35a85098fa8b08912d77b5884", "url": "https://github.com/eclipse-openj9/openj9/commit/30d16a67480fedb35a85098fa8b08912d77b5884", "message": "Remove unnecessary platform guards on POWER and ARM\n\nSome file in the POWER and ARM code generators are guarded with\nTR_TARGET_ARM and TR_TARGET_POWER, respectively. These are unnecessary\nbecause those files are only ever built on their respective platform.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-06T21:28:44Z", "type": "forcePushed"}, {"oid": "ecf8e52e205aafdef9718e92b2f1ed5a14a8deff", "url": "https://github.com/eclipse-openj9/openj9/commit/ecf8e52e205aafdef9718e92b2f1ed5a14a8deff", "message": "Remove unnecessary platform guards on POWER and ARM\n\nSome file in the POWER and ARM code generators are guarded with\nTR_TARGET_ARM and TR_TARGET_POWER, respectively. These are unnecessary\nbecause those files are only ever built on their respective platform.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-06T21:31:19Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0MzQ0MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8520#discussion_r377143440", "bodyText": "Given the PR description this is fine. I hope that this will be refactored into a separate evaluator eventually though.", "author": "fjeremic", "createdAt": "2020-02-10T15:44:31Z", "path": "runtime/compiler/z/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2873,7 +2873,13 @@ J9::Z::TreeEvaluator::generateHelperCallForVMNewEvaluators(TR::Node *node, TR::C\n TR::Register *\n J9::Z::TreeEvaluator::newObjectEvaluator(TR::Node * node, TR::CodeGenerator * cg)\n    {\n-   if (cg->comp()->suppressAllocationInlining())\n+   // If the helper symbol set on the node is TR_jitNewValue, we are (expecting to be)\n+   // dealing with a value type. Since we do not fully support value types yet, always\n+   // call the JIT helper to do the allocation.\n+   //\n+   auto* comp = cg->comp();\n+   if (cg->comp()->suppressAllocationInlining() ||\n+       (TR::Compiler->om.areValueTypesEnabled() && node->getSymbolReference() == comp->getSymRefTab()->findOrCreateNewValueSymbolRef(comp->getMethodSymbol())))\n       return generateHelperCallForVMNewEvaluators(node, cg);", "originalCommit": "ecf8e52e205aafdef9718e92b2f1ed5a14a8deff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0OTc2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/8520#discussion_r377149766", "bodyText": "Yes. Eventually, newvalue will have its own evaluator. That work will happen as part of the ongoing work to refactor and optimize value types.", "author": "Leonardo2718", "createdAt": "2020-02-10T15:54:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE0MzQ0MA=="}], "type": "inlineReview"}, {"oid": "ec8fd520626297089d9794e7c574f3c84ea99070", "url": "https://github.com/eclipse-openj9/openj9/commit/ec8fd520626297089d9794e7c574f3c84ea99070", "message": "Remove unnecessary platform guards on POWER and ARM\n\nSome file in the POWER and ARM code generators are guarded with\nTR_TARGET_ARM and TR_TARGET_POWER, respectively. These are unnecessary\nbecause those files are only ever built on their respective platform.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-11T15:51:07Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0NTkzMA==", "url": "https://github.com/eclipse-openj9/openj9/pull/8520#discussion_r378245930", "bodyText": "Can you please put the type of TR::Compilation rather than auto - doing so aids readability and ensures that if we need to refactor later we can support from the compiler type checker.", "author": "andrewcraik", "createdAt": "2020-02-12T13:23:05Z", "path": "runtime/compiler/p/codegen/J9TreeEvaluator.cpp", "diffHunk": "@@ -2164,7 +2163,13 @@ TR::Register *J9::Power::TreeEvaluator::checkcastAndNULLCHKEvaluator(TR::Node *n\n \n TR::Register *J9::Power::TreeEvaluator::newObjectEvaluator(TR::Node *node, TR::CodeGenerator *cg)\n    {\n-   if (cg->comp()->suppressAllocationInlining())\n+   // If the helper symbol set on the node is TR_newValue, we are (expecting to be)\n+   // dealing with a value type. Since we do not fully support value types yet, always\n+   // call the JIT helper to do the allocation.\n+   //\n+   auto* comp = cg->comp();", "originalCommit": "ec8fd520626297089d9794e7c574f3c84ea99070", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQzMTEyOQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/8520#discussion_r378431129", "bodyText": "Fixed.", "author": "Leonardo2718", "createdAt": "2020-02-12T18:24:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI0NTkzMA=="}], "type": "inlineReview"}, {"oid": "005afc1cbbc491923b444121732c537d1c44829c", "url": "https://github.com/eclipse-openj9/openj9/commit/005afc1cbbc491923b444121732c537d1c44829c", "message": "Add Object Model query to check for value types support\n\nThis new query allows checking for value types support with a function\ncall instead of an #ifdef. Although it is currently a compile type\noption, value types support will eventually be decided at runtime, so\nusing a function call now is preferable to using an #ifdef everywhere.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-12T18:20:13Z", "type": "commit"}, {"oid": "c78cc8805fa8d9126c73715a1c9a20d076daeaf1", "url": "https://github.com/eclipse-openj9/openj9/commit/c78cc8805fa8d9126c73715a1c9a20d076daeaf1", "message": "Remove unnecessary platform guards on POWER and ARM\n\nSome file in the POWER and ARM code generators are guarded with\nTR_TARGET_ARM and TR_TARGET_POWER, respectively. These are unnecessary\nbecause those files are only ever built on their respective platform.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-12T18:21:28Z", "type": "forcePushed"}, {"oid": "1cae75667c752c93b2e193f0eb367690f0d3e092", "url": "https://github.com/eclipse-openj9/openj9/commit/1cae75667c752c93b2e193f0eb367690f0d3e092", "message": "Handle jitNewValue in code generators\n\nBecause `newvalue` support is not implemented in the code generators,\nthe opcode is lowered to `new`. When lowering happens, the symbol on\nthe `new` is set to be the same as the one for `newvalue`, namely\njitNewValue.\n\nAs a result, `new` evaluators must check the node's symbol to determine\nif the allocation is for a value type.\n\nTo avoid having to implement full support for inline value type\nallocations, for now, we unconditionally call the JIT helper. While not\nideal for performance, it is a necessary step in incrementally\nimplementing value types.\n\nNote that the AARCH64 code generator already calls whatever helper is\nset on the `new` node unconditionally, so no special handling for\njitNewValue is required.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-12T18:24:09Z", "type": "commit"}, {"oid": "ad62d30f8fbb78f25cad8e2fba652fc01f827806", "url": "https://github.com/eclipse-openj9/openj9/commit/ad62d30f8fbb78f25cad8e2fba652fc01f827806", "message": "Remove unnecessary platform guards on POWER and ARM\n\nSome file in the POWER and ARM code generators are guarded with\nTR_TARGET_ARM and TR_TARGET_POWER, respectively. These are unnecessary\nbecause those files are only ever built on their respective platform.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-12T18:24:14Z", "type": "commit"}, {"oid": "ad62d30f8fbb78f25cad8e2fba652fc01f827806", "url": "https://github.com/eclipse-openj9/openj9/commit/ad62d30f8fbb78f25cad8e2fba652fc01f827806", "message": "Remove unnecessary platform guards on POWER and ARM\n\nSome file in the POWER and ARM code generators are guarded with\nTR_TARGET_ARM and TR_TARGET_POWER, respectively. These are unnecessary\nbecause those files are only ever built on their respective platform.\n\nSigned-off-by: Leonardo Banderali <leonardo2718@protonmail.com>", "committedDate": "2020-02-12T18:24:14Z", "type": "forcePushed"}]}