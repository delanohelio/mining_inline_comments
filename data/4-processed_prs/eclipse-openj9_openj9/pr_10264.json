{"pr_number": 10264, "pr_title": "AArch64: Enable Escape Analysis to allocate objects on stack", "pr_createdAt": "2020-07-28T03:03:37Z", "pr_url": "https://github.com/eclipse-openj9/openj9/pull/10264", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzNQ==", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r461498635", "bodyText": "Can this growing list of architecture checks (here and elsewhere in this PR) be replaced with a capability query instead?  What are they really asking:  whether a code generator is capable of mapping local objects to the stack?  If so, I think it would be much cleaner to ask that question of a code generator and have each architecture answer true or false.\n@vijaysun-omr or @andrewcraik any opinion or insight on whether that's what these architecture checks are really for?", "author": "0xdaryl", "createdAt": "2020-07-28T11:06:14Z", "path": "runtime/compiler/optimizer/EscapeAnalysis.cpp", "diffHunk": "@@ -133,7 +133,7 @@ TR_EscapeAnalysis::TR_EscapeAnalysis(TR::OptimizationManager *manager)\n    _dememoizationSymRef = NULL;\n \n    _createStackAllocations   = true;\n-   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ();\n+   _createLocalObjects       = comp()->target().cpu.isX86() || comp()->target().cpu.isPower() || comp()->target().cpu.isZ() || comp()->target().cpu.isARM64();", "originalCommit": "7720c4d03a1b7faa0a8a0f410ed9cc53b216d0d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwOTM1Mw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r461509353", "bodyText": "Yes I agree with you, though the functionality being checked for is probably the entirety of supporting stack allocations, e.g. mapping local objects to the stack, emitting a stack alloc map etc. I don't see any reason why this cannot be a codegen query.", "author": "vijaysun-omr", "createdAt": "2020-07-28T11:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzOTI4Mg==", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r461539282", "bodyText": "Thanks.\n@Akira1Saitoh , can you introduce a supportsStackAllocations() query in the common code generator and have each architecture specialize it as necessary (basically, return true for every architecture other than ARM)?\nYou could probably do this in two commits: one to create the API, and the second to actually use it in place of the architecture checks.", "author": "0xdaryl", "createdAt": "2020-07-28T12:26:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU2ODQ4Nw==", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r461568487", "bodyText": "Sure, I will add the API to the common code generator and replace those architecture checks with the query.", "author": "Akira1Saitoh", "createdAt": "2020-07-28T13:13:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODYzNQ=="}], "type": "inlineReview"}, {"oid": "03f90eb73b948ba976a5f9358da6026239aba569", "url": "https://github.com/eclipse-openj9/openj9/commit/03f90eb73b948ba976a5f9358da6026239aba569", "message": "Replace architecture checks with capability query for stack allocations\n\nReplace architecture checks in Escape Analysis with the capability query\nwhich answers if the code generator supports stack allocations.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-07-28T23:50:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NzU2Ng==", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r464767566", "bodyText": "This function is declared as private.", "author": "knn-k", "createdAt": "2020-08-04T02:50:09Z", "path": "runtime/compiler/z/codegen/J9CodeGenerator.hpp", "diffHunk": "@@ -336,6 +336,11 @@ class OMR_EXTENSIBLE CodeGenerator : public J9::CodeGenerator\n     *     support such by-passes.\n     */\n    bool _ignoreDecimalOverflowException;\n+\n+   /**\n+    * \\brief Determines whether the code generator supports stack allocations\n+    */\n+   bool supportsStackAllocations() { return true; }", "originalCommit": "03f90eb73b948ba976a5f9358da6026239aba569", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDgwMjI3MA==", "url": "https://github.com/eclipse-openj9/openj9/pull/10264#discussion_r464802270", "bodyText": "Thanks. I fixed it.", "author": "Akira1Saitoh", "createdAt": "2020-08-04T05:08:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2NzU2Ng=="}], "type": "inlineReview"}, {"oid": "6dd6ad497f0382e6eb9e334039ae049c9190ede0", "url": "https://github.com/eclipse-openj9/openj9/commit/6dd6ad497f0382e6eb9e334039ae049c9190ede0", "message": "Add a capability query of stack allocations to code generator\n\nThis commit adds `supportsStackAllocations` query to the code generator.\nIt is used to ask if the code generator supports stack allocations.\naarch64/p/x/z code generators return true for this query.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-08-04T05:06:16Z", "type": "commit"}, {"oid": "298c91f344b7f2b22e5135e67bd41b1e28e3cb25", "url": "https://github.com/eclipse-openj9/openj9/commit/298c91f344b7f2b22e5135e67bd41b1e28e3cb25", "message": "Replace architecture checks with capability query for stack allocations\n\nReplace architecture checks in Escape Analysis with the capability query\nwhich answers if the code generator supports stack allocations.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-08-04T05:06:51Z", "type": "commit"}, {"oid": "298c91f344b7f2b22e5135e67bd41b1e28e3cb25", "url": "https://github.com/eclipse-openj9/openj9/commit/298c91f344b7f2b22e5135e67bd41b1e28e3cb25", "message": "Replace architecture checks with capability query for stack allocations\n\nReplace architecture checks in Escape Analysis with the capability query\nwhich answers if the code generator supports stack allocations.\n\nSigned-off-by: Akira Saitoh <saiaki@jp.ibm.com>", "committedDate": "2020-08-04T05:06:51Z", "type": "forcePushed"}]}