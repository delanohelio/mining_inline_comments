{"pr_number": 19293, "pr_title": "#19291 unifying the 3 quartz schedulers", "pr_createdAt": "2020-09-21T20:54:35Z", "pr_url": "https://github.com/dotCMS/core/pull/19293", "timeline": [{"oid": "c015076e865c7a78da0c00d5f3557ff67624ade3", "url": "https://github.com/dotCMS/core/commit/c015076e865c7a78da0c00d5f3557ff67624ade3", "message": "#19291 unifying the 3 quartz schedulers", "committedDate": "2020-09-21T20:50:23Z", "type": "commit"}, {"oid": "b32e535aebe296ab8fb68902d9cc7e7f5ef61dda", "url": "https://github.com/dotCMS/core/commit/b32e535aebe296ab8fb68902d9cc7e7f5ef61dda", "message": "#19291 adding jobs tab to maintenance", "committedDate": "2020-09-21T21:24:15Z", "type": "commit"}, {"oid": "64826a3621add39429055c714eee386ea329f67d", "url": "https://github.com/dotCMS/core/commit/64826a3621add39429055c714eee386ea329f67d", "message": "#19291 adding jobs tab to maintenance", "committedDate": "2020-09-21T21:27:14Z", "type": "commit"}, {"oid": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "url": "https://github.com/dotCMS/core/commit/81625a76c6f658ee3bc30a2a533877aea73e4ece", "message": "merge master", "committedDate": "2020-09-23T13:37:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NDQ5Mw==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r495164493", "bodyText": "Nitpick: Do we still need to name it sequentialScheduler?", "author": "victoralfaro-dotcms", "createdAt": "2020-09-25T18:34:24Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/quartz/DotStatefulJobTest.java", "diffHunk": "@@ -110,7 +110,7 @@ public void Test_Launch_Stateful_Jobs_Verify_They_Dont_Overlap_In_Time()\n     private Optional<JobExecutionContext> getJobExecutionContext(){\n         final String jobName = getJobName(MyStatefulJob.class);\n         try {\n-            final Scheduler sequentialScheduler = getSequentialScheduler();\n+            final Scheduler sequentialScheduler = DotSchedulerFactory.getInstance().getScheduler();", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NTQ5Mg==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r495165492", "bodyText": "Huum, well, I think the scheduler acts as Sequential if the job is a StatefulJob and just a scheduler if the job is a Job.", "author": "wezell", "createdAt": "2020-09-25T18:36:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2NDQ5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE2OTM2NA==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r495169364", "bodyText": "Above there are references to QuartzUtils.getScheduler() (https://github.com/dotCMS/core/pull/19293/files#diff-27537b844a5f2b5de0edbbe49ef2bbb4R71). I wonder if they are the same and i f they are, we should pick one.", "author": "victoralfaro-dotcms", "createdAt": "2020-09-25T18:44:14Z", "path": "dotCMS/src/main/java/com/dotmarketing/init/DotInitScheduler.java", "diffHunk": "@@ -755,7 +550,7 @@ private static void addSystemEventsJob () {\n \t */\r\n \tprivate static void scheduleJob(final JobBuilder jobBuilder) {\r\n \t\ttry {\r\n-\t\t\tScheduler sched = QuartzUtils.getStandardScheduler();\r\n+\t\t\tScheduler sched = DotSchedulerFactory.getInstance().getScheduler();\r", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE3MDc2MA==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r495170760", "bodyText": "Nitpick: return instead Arrays.asList(...)", "author": "victoralfaro-dotcms", "createdAt": "2020-09-25T18:47:03Z", "path": "dotCMS/src/main/java/com/dotmarketing/quartz/DotSchedulerFactory.java", "diffHunk": "@@ -5,107 +5,67 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Properties;\n-\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.SchedulerFactory;\n import org.quartz.impl.StdSchedulerFactory;\n-\n import com.dotmarketing.util.Logger;\n \n public class DotSchedulerFactory implements SchedulerFactory {\n \n-\tprivate static DotSchedulerFactory factory;\n-\t\n-\tprivate StdSchedulerFactory sequentialSchedulerFactory;\n-\tprivate StdSchedulerFactory standardSchedulerFactory;\n-\tprivate StdSchedulerFactory localSchedulerFactory;\n-\tprivate Scheduler sequentialScheduler;\n-\tprivate Scheduler standardScheduler;\n-\tprivate Scheduler localScheduler;\n-\n-\tprivate DotSchedulerFactory () throws SchedulerException {\n-\t\t\n-\t\t\tif(sequentialSchedulerFactory == null) {\n-\t\t\t\tProperties sequentialProperties = new Properties();\n-\t\t\t\ttry {\n-\t\t\t\t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n-\t\t\t\t\tsequentialProperties.load(cl.getResourceAsStream(\"quartz_sequential.properties\"));\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\tLogger.error(DotSchedulerFactory.class, e.getMessage(), e);\n-\t\t\t\t\tthrow new SchedulerException(e.getMessage(), e);\n-\t\t\t\t}\n-\t\t\t\tsequentialSchedulerFactory = new StdSchedulerFactory(sequentialProperties);\n-\t\t\t\tsequentialScheduler = sequentialSchedulerFactory.getScheduler();\n-\t\t\t}\n-\n-\t\t\tif(standardSchedulerFactory == null) {\n-\t\t\t\tProperties standardProperties = new Properties();\n-\t\t\t\ttry {\n-\t\t\t\t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n-\t\t\t\t\tstandardProperties.load(cl.getResourceAsStream(\"quartz.properties\"));\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\tLogger.error(DotSchedulerFactory.class, e.getMessage(), e);\n-\t\t\t\t\tthrow new SchedulerException(e.getMessage(), e);\n-\t\t\t\t}\n-\t\t\t\tstandardSchedulerFactory = new StdSchedulerFactory(standardProperties);\n-\t\t\t\tstandardScheduler = standardSchedulerFactory.getScheduler();\n-\t\t\t}\n-\n-        /*\n-         Local Scheduler in order to store scheduling information within memory,\n-         This mechanist is fast and lightweight, but all scheduling information is lost when the process terminates.\n-         */\n-        if ( localSchedulerFactory == null ) {\n-            Properties localProperties = new Properties();\n+    private static DotSchedulerFactory factory;\n+\n+\n+    private StdSchedulerFactory standardSchedulerFactory;\n+\n+    private Scheduler standardScheduler;\n+\n+\n+    private DotSchedulerFactory() throws SchedulerException {\n+\n+\n+        if (standardSchedulerFactory == null) {\n+            Properties standardProperties = new Properties();\n             try {\n                 ClassLoader cl = Thread.currentThread().getContextClassLoader();\n-                localProperties.load( cl.getResourceAsStream( \"quartz_local.properties\" ) );\n-            } catch ( IOException e ) {\n-                Logger.error( DotSchedulerFactory.class, e.getMessage(), e );\n-                throw new SchedulerException( e.getMessage(), e );\n+                standardProperties.load(cl.getResourceAsStream(\"quartz.properties\"));\n+            } catch (IOException e) {\n+                Logger.error(DotSchedulerFactory.class, e.getMessage(), e);\n+                throw new SchedulerException(e.getMessage(), e);\n+            }\n+            standardSchedulerFactory = new StdSchedulerFactory(standardProperties);\n+            standardScheduler = standardSchedulerFactory.getScheduler();\n+        }\n+\n+\n+    }\n+\n+    public Collection<Scheduler> getAllSchedulers() throws SchedulerException {\n+        List<Scheduler> list = new ArrayList<Scheduler>();", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTE4NDgwNQ==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r495184805", "bodyText": "@wezell when this gets merge you will notice a new isJobRunning() method here: 704c8c6#diff-834b3711e1888aa36bedbb65f457e411R870", "author": "victoralfaro-dotcms", "createdAt": "2020-09-25T19:17:42Z", "path": "dotCMS/src/main/java/com/dotmarketing/quartz/QuartzUtils.java", "diffHunk": "@@ -775,79 +616,23 @@ public static void startSchedulers () throws SchedulerException {\n \t\tlong start = System.currentTimeMillis();\r\n \t\tScheduler sched = DotSchedulerFactory.getInstance().getScheduler();\r\n \t\tsched.start();\r\n-\t\tsched = DotSchedulerFactory.getInstance().getSequentialScheduler();\r\n-\t\tsched.start();\r\n+\r\n \t\tSystem.setProperty(WebKeys.DOTCMS_STARTUP_TIME_QUARTZ, String.valueOf(System.currentTimeMillis() - start));\r\n \t}\r\n \t\r\n-\t/**\r\n-\t * Temporarily pauses all schedulers from executing future triggers\r\n-\t * @throws SchedulerException \r\n-\t */\r\n-\tpublic static void startStandardSchedulers () throws SchedulerException {\r\n-\t\tScheduler sched = DotSchedulerFactory.getInstance().getScheduler();\r\n-\t\tsched.start();\r\n-\t}\r\n \r\n-\t/**\r\n-\t * Temporarily pauses all schedulers from executing future triggers\r\n-\t * @throws SchedulerException \r\n-\t */\r\n-\tpublic static void startSequentialSchedulers () throws SchedulerException {\r\n-\t\tScheduler sched = DotSchedulerFactory.getInstance().getSequentialScheduler();\r\n-\t\tsched.start();\r\n-\t}\r\n \r\n-    /**\r\n-     * Starts the local quartz scheduler\r\n-     *\r\n-     * @throws SchedulerException\r\n-     */\r\n-    public static void startLocalScheduler () throws SchedulerException {\r\n-        Scheduler localScheduler = DotSchedulerFactory.getInstance().getLocalScheduler();\r\n-        localScheduler.start();\r\n-    }\r\n+\t\r\n+\tpublic static boolean isJobRunning(String jobName, String jobGroup) throws SchedulerException{\r", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MTMyOA==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496061328", "bodyText": "if we're unifying all schedulers then let's use the QuartzUtils.getScheduler() instead of the Factory\nSame thing internally for the class  QuartzUtils let's replace DotSchedulerFactory.getInstance().getScheduler(); by getScheduler();", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T15:58:13Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/business/PublisherAPIImpl.java", "diffHunk": "@@ -308,7 +309,7 @@ private void sendQueueElements (final String bundleId) {\n     @Override\n     public void firePublisherQueueNow(Map<String, Object> dataMap){\n \t\ttry {\n-\t\t    Scheduler sched = QuartzUtils.getStandardScheduler();\n+\t\t    Scheduler sched = DotSchedulerFactory.getInstance().getScheduler();", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MTg0NQ==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496061845", "bodyText": "same.. let's use QuartzUtils.getScheduler() instead", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T15:59:02Z", "path": "dotCMS/src/main/java/com/dotcms/publisher/pusher/PushPublisher.java", "diffHunk": "@@ -460,7 +461,7 @@ private Client getRestClient() {\n \t */\n \tprivate void updateJobDataMap(DeliveryStrategy deliveryStrategy) {\n \t\ttry {\n-\t\t\tScheduler sched = QuartzUtils.getStandardScheduler();\n+\t\t\tScheduler sched = DotSchedulerFactory.getInstance().getScheduler();", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2MzI3Mg==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496063272", "bodyText": "let's use QuartzUtils.getScheduler() instead.", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:01:03Z", "path": "dotCMS/src/main/java/com/dotmarketing/init/DotInitScheduler.java", "diffHunk": "@@ -90,49 +76,14 @@ public static ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() {\n \t */\r\n \tpublic static void start() throws SchedulerException {\r\n \t\ttry {\r\n-\t\t\tScheduler sched = QuartzUtils.getStandardScheduler();\r\n+\t\t\tfinal Scheduler sched = DotSchedulerFactory.getInstance().getScheduler();\r", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2NzY3NQ==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496067675", "bodyText": "I assume this is a safe move then let's Deprecate or remove the ContentReviewThread", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:08:04Z", "path": "dotCMS/src/main/java/com/dotmarketing/init/DotInitScheduler.java", "diffHunk": "@@ -90,49 +76,14 @@ public static ScheduledThreadPoolExecutor getScheduledThreadPoolExecutor() {\n \t */\r\n \tpublic static void start() throws SchedulerException {\r\n \t\ttry {\r\n-\t\t\tScheduler sched = QuartzUtils.getStandardScheduler();\r\n+\t\t\tfinal Scheduler sched = DotSchedulerFactory.getInstance().getScheduler();\r\n \t\t\tJobDetail job;\r\n \t\t\tCronTrigger trigger;\r\n \t\t\tCalendar calendar;\r\n \t\t\tboolean isNew;\r\n \r\n-\t\t        if(Config.getBooleanProperty(\"ENABLE_CONTENT_REVIEW_THREAD\")) {\r\n-\t\t\t\ttry {\r\n-\t\t\t\t\tisNew = false;\r\n-\r\n-\t\t\t\t\ttry {\r\n-\t\t\t\t\t\tif ((job = sched.getJobDetail(\"ContentReviewJob\", DOTCMS_JOB_GROUP_NAME)) == null) {\r\n-\t\t\t\t\t\t\tjob = new JobDetail(\"ContentReviewJob\", DOTCMS_JOB_GROUP_NAME, ContentReviewThread.class);\r", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2ODQyOA==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496068428", "bodyText": "Same here. let's remove or deprecate the CalendarReminderThread", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:09:18Z", "path": "dotCMS/src/main/java/com/dotmarketing/init/DotInitScheduler.java", "diffHunk": "@@ -182,44 +133,6 @@ public static void start() throws SchedulerException {\n \t\t\t\t}\r\n \t\t\t}\r\n \r\n-\t\t\t//Calendar Reminder Job\r\n-\r\n-\t\t\tif(Config.getBooleanProperty(\"CALENDAR_REMINDER_THREAD\")) {\r\n-\t\t\t\ttry {\r\n-\t\t\t\t\tisNew = false;\r\n-\r\n-\t\t\t\t\ttry {\r\n-\t\t\t\t\t\tif ((job = sched.getJobDetail(\"CalendarReminderJob\", DOTCMS_JOB_GROUP_NAME)) == null) {\r\n-\t\t\t\t\t\t\tjob = new JobDetail(\"CalendarReminderJob\", DOTCMS_JOB_GROUP_NAME, CalendarReminderThread.class);\r", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA2OTk3NQ==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496069975", "bodyText": "let's use the new QuartzUtils.getScheduler();", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:11:37Z", "path": "dotCMS/src/main/java/com/dotmarketing/init/DotInitScheduler.java", "diffHunk": "@@ -755,7 +550,7 @@ private static void addSystemEventsJob () {\n \t */\r\n \tprivate static void scheduleJob(final JobBuilder jobBuilder) {\r\n \t\ttry {\r\n-\t\t\tScheduler sched = QuartzUtils.getStandardScheduler();\r\n+\t\t\tScheduler sched = DotSchedulerFactory.getInstance().getScheduler();\r", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MDU2NA==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496070564", "bodyText": "use QuartzUtils.getScheduler(); instead of the factory itself.", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:12:33Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/business/web/UpdateContainersPathsJob.java", "diffHunk": "@@ -62,7 +63,7 @@ public void run(final JobExecutionContext jobContext) throws JobExecutionExcepti\n             throw new JobExecutionException(e);\n         } finally {\n             try {\n-                QuartzUtils.getSequentialScheduler().unscheduleJob(\n+                DotSchedulerFactory.getInstance().getScheduler().unscheduleJob(", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MTAxMQ==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496071011", "bodyText": "use QuartzUtils.getScheduler(); instead of the factory itself.", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:13:16Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/business/web/UpdateContainersPathsJob.java", "diffHunk": "@@ -130,7 +131,7 @@ public static void triggerUpdateContainersPathsJob(final String oldHostName, fin\n         );\n \n         try {\n-            Scheduler scheduler = QuartzUtils.getSequentialScheduler();\n+            Scheduler scheduler = DotSchedulerFactory.getInstance().getScheduler();", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MTEyNw==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496071127", "bodyText": "use QuartzUtils.getScheduler(); instead of the factory itself.", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:13:27Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/linkchecker/ajax/LinkCheckerAjaxAction.java", "diffHunk": "@@ -120,7 +121,7 @@ public void runCheckNow(HttpServletRequest request, HttpServletResponse response\n             \n             Trigger trigger=new SimpleTrigger(\"linkCheckerTrigger-\"+randomID, \"group20\", new Date());\n             \n-            Scheduler sched = QuartzUtils.getStandardScheduler();\n+            Scheduler sched = DotSchedulerFactory.getInstance().getScheduler();", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MTI5Mw==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496071293", "bodyText": "use QuartzUtils.getScheduler(); instead of the factory itself.", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:13:45Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/scheduler/action/ViewSchedulersAction.java", "diffHunk": "@@ -61,14 +62,14 @@ public ActionForward render(\n \t\t\tString group2 = \"Recurrent Campaign\";\n \t\t\tMap<String,List<String>> results = new HashMap<String,List<String>>();\n \t\t\tList<String> list = new ArrayList<String>();\n-\t\t\tString[] tasks =  QuartzUtils.getStandardScheduler().getJobNames(group);\n+\t\t\tString[] tasks =  DotSchedulerFactory.getInstance().getScheduler().getJobNames(group);", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3MTM4MA==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496071380", "bodyText": "use QuartzUtils.getScheduler(); instead of the factory itself.", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:13:53Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/scheduler/action/ViewSchedulersAction.java", "diffHunk": "@@ -61,14 +62,14 @@ public ActionForward render(\n \t\t\tString group2 = \"Recurrent Campaign\";\n \t\t\tMap<String,List<String>> results = new HashMap<String,List<String>>();\n \t\t\tList<String> list = new ArrayList<String>();\n-\t\t\tString[] tasks =  QuartzUtils.getStandardScheduler().getJobNames(group);\n+\t\t\tString[] tasks =  DotSchedulerFactory.getInstance().getScheduler().getJobNames(group);\n \t\t\tfor(String task : tasks){\n \t\t\t\tlist.add(task);\n \t\t\t}\n \t\t\tresults.put(group, list);\n \t\t\t\n \t\t\tList<String> list2 = new ArrayList<String>();\n-\t\t\tString[] tasks2 =  QuartzUtils.getStandardScheduler().getJobNames(group2);\n+\t\t\tString[] tasks2 =  DotSchedulerFactory.getInstance().getScheduler().getJobNames(group2);", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA3Mzk4OQ==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496073989", "bodyText": "use QuartzUtils.getScheduler(); instead of the factory itself.", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:17:45Z", "path": "dotCMS/src/main/java/com/dotmarketing/quartz/DotStatefulJob.java", "diffHunk": "@@ -82,7 +82,7 @@ static String getTriggerGroupName(final Class<? extends StatefulJob> jobClass) {\n     private static Optional<Map<String, Object>> getTriggerJobDetail(final String jobName,\n             final String groupName) {\n         final JobDetail jobDetail = Try\n-                .of(() -> QuartzUtils.getSequentialScheduler().getJobDetail(jobName, groupName))\n+                .of(() -> DotSchedulerFactory.getInstance().getScheduler().getJobDetail(jobName, groupName))", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4ODMyMQ==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496088321", "bodyText": "I had my doubts but it looks like the Standart and Sequential are exchangeable after all", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T16:40:27Z", "path": "dotCMS/src/main/java/com/dotmarketing/quartz/DotSchedulerFactory.java", "diffHunk": "@@ -5,107 +5,67 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Properties;\n-\n import org.quartz.Scheduler;\n import org.quartz.SchedulerException;\n import org.quartz.SchedulerFactory;\n import org.quartz.impl.StdSchedulerFactory;\n-\n import com.dotmarketing.util.Logger;\n \n public class DotSchedulerFactory implements SchedulerFactory {\n \n-\tprivate static DotSchedulerFactory factory;\n-\t\n-\tprivate StdSchedulerFactory sequentialSchedulerFactory;\n-\tprivate StdSchedulerFactory standardSchedulerFactory;\n-\tprivate StdSchedulerFactory localSchedulerFactory;\n-\tprivate Scheduler sequentialScheduler;\n-\tprivate Scheduler standardScheduler;\n-\tprivate Scheduler localScheduler;\n-\n-\tprivate DotSchedulerFactory () throws SchedulerException {\n-\t\t\n-\t\t\tif(sequentialSchedulerFactory == null) {", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEwNjg0Ng==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496106846", "bodyText": "Theoretically this class CronScheduledTask has a param that should instruct before what scheduler needed to be used. Sequential/Standart maybe that param  and the getter should be removed or at least marked deprecated", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T17:09:51Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/quartz/DotStatefulJobTest.java", "diffHunk": "@@ -110,7 +110,7 @@ public void Test_Launch_Stateful_Jobs_Verify_They_Dont_Overlap_In_Time()\n     private Optional<JobExecutionContext> getJobExecutionContext(){\n         final String jobName = getJobName(MyStatefulJob.class);\n         try {\n-            final Scheduler sequentialScheduler = getSequentialScheduler();\n+            final Scheduler sequentialScheduler = DotSchedulerFactory.getInstance().getScheduler();", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjEyNTQxMA==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r496125410", "bodyText": "I get a java.lang.NoSuchMethodError: com.dotmarketing.quartz.QuartzUtils.getStandardScheduledTasks from site search on this branch", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-28T17:43:04Z", "path": "dotCMS/src/main/java/com/dotmarketing/quartz/QuartzUtils.java", "diffHunk": "@@ -40,29 +37,7 @@\n \t\r\n \tprivate static Map<String, TaskRuntimeValues> runtimeTaskValues = new HashMap<String, TaskRuntimeValues>();\r\n \t\r\n-\t/**\r\n-\t * \r\n-\t * Lists all jobs scheduled through the sequential scheduler, the sequential scheduler\r\n-\t * let you run only one job at a time\r\n-\t * \r\n-\t * @return\r\n-\t */\r\n-\tpublic static List<ScheduledTask> getSequentialScheduledTasks() throws SchedulerException {\r\n-\t\tScheduler sched = DotSchedulerFactory.getInstance().getSequentialScheduler();\r\n-\t\treturn getScheduledTasks(sched, true, null);\r\n-\t}\r\n-\t\r\n-\t/**\r\n-\t * \r\n-\t * Lists all jobs scheduled through the standard scheduler, the standard scheduler\r\n-\t * let you run multiple jobs in parallel\r\n-\t * \r\n-\t * @return\r\n-\t */\r\n-\tpublic static List<ScheduledTask> getStandardScheduledTasks() throws SchedulerException {\r", "originalCommit": "81625a76c6f658ee3bc30a2a533877aea73e4ece", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "dce21feadbf659cf636d1323a677f9fbf6d53827", "url": "https://github.com/dotCMS/core/commit/dce21feadbf659cf636d1323a677f9fbf6d53827", "message": "#19291  quartz simplified clean-up", "committedDate": "2020-10-09T03:01:49Z", "type": "commit"}, {"oid": "55bd231c53e948d0f047ce39d46bc7be3bd9d7b2", "url": "https://github.com/dotCMS/core/commit/55bd231c53e948d0f047ce39d46bc7be3bd9d7b2", "message": "#19291 code bot feedback", "committedDate": "2020-10-09T03:43:12Z", "type": "commit"}, {"oid": "dddc785d8e6aa85f30a863e37091bbec8731aa51", "url": "https://github.com/dotCMS/core/commit/dddc785d8e6aa85f30a863e37091bbec8731aa51", "message": "#19291 more feedback", "committedDate": "2020-10-09T03:51:23Z", "type": "commit"}, {"oid": "fe7ca2793274c16620f73dca33126942869ee543", "url": "https://github.com/dotCMS/core/commit/fe7ca2793274c16620f73dca33126942869ee543", "message": "#19291 more feedback", "committedDate": "2020-10-09T04:08:19Z", "type": "commit"}, {"oid": "114551a154cec4bcb99d9663890828935a3939b0", "url": "https://github.com/dotCMS/core/commit/114551a154cec4bcb99d9663890828935a3939b0", "message": "#19291 more feedback", "committedDate": "2020-10-09T04:24:14Z", "type": "commit"}, {"oid": "c24f2f5346d934ee75ace186c57a086d1c0c5caf", "url": "https://github.com/dotCMS/core/commit/c24f2f5346d934ee75ace186c57a086d1c0c5caf", "message": "#19291 solve conflicts", "committedDate": "2020-10-12T15:06:38Z", "type": "commit"}, {"oid": "059013dd543887dd39f2c4af32b584bbbbdfbab1", "url": "https://github.com/dotCMS/core/commit/059013dd543887dd39f2c4af32b584bbbbdfbab1", "message": "Merge branch 'master' into issue-19291-quartz-simpler", "committedDate": "2020-10-12T16:50:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyMzExMQ==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r503423111", "bodyText": "Codacy found an issue: Do not use an attribute called class.", "author": "dev-dotcms", "createdAt": "2020-10-12T17:00:15Z", "path": "dotCMS/src/main/webapp/html/portlet/ext/cmsmaintenance/system_jobs.jsp", "diffHunk": "@@ -0,0 +1,86 @@\n+<%@page import=\"com.dotcms.repackage.javax.portlet.WindowState\"%>\n+<%@page import=\"com.liferay.portal.util.Constants\"%>\n+<%@page import=\"com.liferay.portal.language.LanguageUtil\"%>\n+<%@page import=\"org.quartz.CronTrigger\"%>\n+<%@page import=\"java.text.SimpleDateFormat\"%>\n+<%@page import=\"java.text.DateFormat\"%>\n+<%@page import=\"org.quartz.Trigger\"%>\n+<%@page import=\"org.quartz.JobDetail\"%>\n+<%@page import=\"java.util.Set\"%>\n+<%@page import=\"com.dotmarketing.quartz.ScheduledTask\"%>\n+<%@page import=\"com.dotmarketing.quartz.QuartzUtils\"%>\n+<%@page import=\"java.util.Date\"%>\n+<%@page import=\"java.util.ArrayList\"%>\n+<%@page import=\"java.util.Arrays\"%>\n+<%@page import=\"java.util.List\"%>\n+<%@page import=\"com.dotmarketing.business.APILocator\"%>\n+<%@ page import=\"com.dotmarketing.util.UtilMethods\" %>\n+<%@ page import=\"com.dotmarketing.beans.Host\" %>\n+<%@ page import=\"com.dotmarketing.business.web.WebAPILocator\"%>\n+\n+<%@ include file=\"/html/common/uservalidation.jsp\"%>\n+\n+<%String[] groups = QuartzUtils.getScheduler().getJobGroupNames(); %>\n+<table class=\"listingTable\">", "originalCommit": "059013dd543887dd39f2c4af32b584bbbbdfbab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyMzEyNA==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r503423124", "bodyText": "Codacy found an issue: Do not use an attribute called class.", "author": "dev-dotcms", "createdAt": "2020-10-12T17:00:16Z", "path": "dotCMS/src/main/webapp/html/portlet/ext/cmsmaintenance/system_jobs.jsp", "diffHunk": "@@ -0,0 +1,86 @@\n+<%@page import=\"com.dotcms.repackage.javax.portlet.WindowState\"%>\n+<%@page import=\"com.liferay.portal.util.Constants\"%>\n+<%@page import=\"com.liferay.portal.language.LanguageUtil\"%>\n+<%@page import=\"org.quartz.CronTrigger\"%>\n+<%@page import=\"java.text.SimpleDateFormat\"%>\n+<%@page import=\"java.text.DateFormat\"%>\n+<%@page import=\"org.quartz.Trigger\"%>\n+<%@page import=\"org.quartz.JobDetail\"%>\n+<%@page import=\"java.util.Set\"%>\n+<%@page import=\"com.dotmarketing.quartz.ScheduledTask\"%>\n+<%@page import=\"com.dotmarketing.quartz.QuartzUtils\"%>\n+<%@page import=\"java.util.Date\"%>\n+<%@page import=\"java.util.ArrayList\"%>\n+<%@page import=\"java.util.Arrays\"%>\n+<%@page import=\"java.util.List\"%>\n+<%@page import=\"com.dotmarketing.business.APILocator\"%>\n+<%@ page import=\"com.dotmarketing.util.UtilMethods\" %>\n+<%@ page import=\"com.dotmarketing.beans.Host\" %>\n+<%@ page import=\"com.dotmarketing.business.web.WebAPILocator\"%>\n+\n+<%@ include file=\"/html/common/uservalidation.jsp\"%>\n+\n+<%String[] groups = QuartzUtils.getScheduler().getJobGroupNames(); %>\n+<table class=\"listingTable\">\n+    <tr>\n+        <th><%= LanguageUtil.get(pageContext, \"scheduler.job.class\") %></th>\n+        <th><%= LanguageUtil.get(pageContext, \"group\") %></th>\n+        <th><%= LanguageUtil.get(pageContext, \"scheduler.job.durable\") %></th>\n+        <th><%= LanguageUtil.get(pageContext, \"scheduler.job.stateful\") %></th>\n+        <th><%= LanguageUtil.get(pageContext, \"scheduler.job.sequential\") %></th>\n+        <th><%= LanguageUtil.get(pageContext, \"scheduler.job.runsAt\") %></th>\n+        <th><%= LanguageUtil.get(pageContext, \"scheduler.job.misfire\") %></th>\n+    </tr>\n+\n+<%for(String myGroup : groups) {%>\n+\t<%String[] tasks =  QuartzUtils.getScheduler().getJobNames(myGroup);%>\n+    <%if(tasks.length==0){continue;}%>\n+\n+\n+\t<%for(String t : tasks){%>\n+      \t<%try{ %>\n+      \t\t<% final JobDetail detail = QuartzUtils.getScheduler().getJobDetail(t, myGroup);  %>\n+      \t\t<% Trigger[] triggers  =QuartzUtils.getScheduler().getTriggersOfJob(t, myGroup);%>\n+            <% Trigger trig  =triggers!=null && triggers.length>0? triggers[0] : null;%>\n+      \t\t<%if(trig==null)continue; %>\n+      \t\t<tr>\n+      \t\t\t<td>\n+      \t\t\t\t<%=detail.getJobClass().getSimpleName() %>\n+      \t\t\t</td>\n+               <td>\n+                    <%=myGroup %>\n+               </td>\n+      \t\t\t<td>\n+      \t\t\t\t<%=detail.isDurable() %>\n+      \t\t\t</td>\n+      \t\t\t<td>\n+      \t\t\t\t<%=detail.isStateful() %>\n+      \t\t\t</td>\n+      \t\t\t<td>\n+      \t\t\t\t<%=detail.isVolatile()%>\n+      \t\t\t</td>\n+      \t\t\t<td>\n+                    <%if(QuartzUtils.isJobRunning(detail.getName(), detail.getGroup())){ %>\n+                        Running \n+      \t\t\t\t<%}else if(trig !=null && trig.getNextFireTime()!=null){ %>\n+      \t\t\t\t\t<%=new SimpleDateFormat(\"yyyy-MM-dd 'at' HH:mm:ss  z\").format( trig.getNextFireTime()) %>\n+      \t\t\t\t<%}%>\n+      \t\t\t</td>\n+      \t\t\t<td>\n+      \t\t\t\t<%if(trig !=null){ %>\n+      \t\t\t\t\t<%if(CronTrigger.MISFIRE_INSTRUCTION_DO_NOTHING == trig.getMisfireInstruction()){ %>\n+      \t\t\t\t\t\t<%= LanguageUtil.get(pageContext, \"scheduler.job.misfire.donothing\") %>\n+      \t\t\t\t\t<%}else if(CronTrigger.MISFIRE_INSTRUCTION_FIRE_ONCE_NOW == trig.getMisfireInstruction()){ %>\n+      \t\t\t\t\t\t<%= LanguageUtil.get(pageContext, \"scheduler.job.misfire.fireOnce\") %>\n+      \t\t\t\t\t<%}%>\n+      \t\t\t\t<%} %>\n+      \t\t\t</td>\n+      \t\t</tr>\n+\t\t<%}catch(Exception e){%>\n+\t\t<tr><td><%=t%></td><td colspan=\"10\" class=\"red\"><%=LanguageUtil.get(pageContext, \"an-unexpected-error-occurred\")+\"<br/>\"+e.getMessage() %></td>", "originalCommit": "059013dd543887dd39f2c4af32b584bbbbdfbab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyMzEzNg==", "url": "https://github.com/dotCMS/core/pull/19293#discussion_r503423136", "bodyText": "Codacy found an issue: Avoid assignments in operands", "author": "dev-dotcms", "createdAt": "2020-10-12T17:00:17Z", "path": "dotCMS/src/main/java/com/dotmarketing/quartz/QuartzUtils.java", "diffHunk": "@@ -427,35 +439,31 @@ public static void removeTaskRuntimeValues(String jobName, String jobGroup) {\n \t * @throws ParseException \r\n \t * @throws ClassNotFoundException \r\n \t */\r\n-\tpublic static void scheduleTask(ScheduledTask job) throws SchedulerException, ParseException, ClassNotFoundException {\r\n+\tpublic static void scheduleTask(final ScheduledTask job) throws SchedulerException, ParseException, ClassNotFoundException {\r\n \r\n-\t\tScheduler sched;\r\n-\t\tif (job.isSequentialScheduled())\r\n-\t\t\tsched = DotSchedulerFactory.getInstance().getSequentialScheduler();\r\n-\t\telse\r\n-\t\t\tsched = DotSchedulerFactory.getInstance().getScheduler();\r\n+\t\tfinal Scheduler scheduler = getScheduler();\r\n \r\n \t\tJobDetail jobDetail;\r\n \t\tTrigger trigger;\r\n \t\tboolean isNew;\r\n \r\n \t\tisNew = false;\r\n \r\n-\t\tString jobName = job.getJobName();\r\n-\t\tString jobGroup = job.getJobGroup();\r\n-\t\tString triggerName = job.getTriggerName() == null ? jobName + \"_trigger\" : job.getTriggerName();\r\n-\t\tString triggerGroup = job.getTriggerGroup() == null ? jobGroup : job.getTriggerGroup();\r\n-\t\tDate startDate = job.getStartDate();\r\n-\t\tDate endDate = job.getEndDate();\r\n+\t\tfinal String jobName = job.getJobName();\r\n+\t\tfinal String jobGroup = job.getJobGroup();\r\n+\t\tfinal String triggerName = job.getTriggerName() == null ? jobName + \"_trigger\" : job.getTriggerName();\r\n+\t\tfinal String triggerGroup = job.getTriggerGroup() == null ? jobGroup : job.getTriggerGroup();\r\n+\t\tfinal Date startDate = job.getStartDate();\r\n+\t\tfinal Date endDate = job.getEndDate();\r\n \r\n-\t\tif ((jobDetail = sched.getJobDetail(jobName, jobGroup)) == null) {\r\n+\t\tif ((jobDetail = scheduler.getJobDetail(jobName, jobGroup)) == null) {\r", "originalCommit": "059013dd543887dd39f2c4af32b584bbbbdfbab1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}