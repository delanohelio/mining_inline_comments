{"pr_number": 18033, "pr_title": "Issue 17749 containers as files outside default host", "pr_createdAt": "2020-02-25T15:52:07Z", "pr_url": "https://github.com/dotCMS/core/pull/18033", "timeline": [{"oid": "a42be1a50162eaa1291656503ea11d5612a73086", "url": "https://github.com/dotCMS/core/commit/a42be1a50162eaa1291656503ea11d5612a73086", "message": "Revert \"Sending the full container path to the UI (#17950)\"\n\nThis reverts commit 655f7863c6b9d8bcffb62da2d1ae5e84e4db8f83.", "committedDate": "2020-02-20T16:16:52Z", "type": "commit"}, {"oid": "24de17eb589490ca9446df587e1a62672c9abcd0", "url": "https://github.com/dotCMS/core/commit/24de17eb589490ca9446df587e1a62672c9abcd0", "message": "Merge branch 'master' of https://github.com/dotCMS/core", "committedDate": "2020-02-20T16:19:00Z", "type": "commit"}, {"oid": "b2e0466e93899438bf3f731fe3373299ff9a0f66", "url": "https://github.com/dotCMS/core/commit/b2e0466e93899438bf3f731fe3373299ff9a0f66", "message": "Merge branch 'master' of https://github.com/dotCMS/core", "committedDate": "2020-02-25T15:43:32Z", "type": "commit"}, {"oid": "163e1a1992ed016ead773a17bb7a0d561365c17e", "url": "https://github.com/dotCMS/core/commit/163e1a1992ed016ead773a17bb7a0d561365c17e", "message": "Fixing containers error", "committedDate": "2020-02-25T15:47:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2OTk2Mw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383969963", "bodyText": "when the path is relative use the current host", "author": "freddyucv", "createdAt": "2020-02-25T15:55:23Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtil.java", "diffHunk": "@@ -165,10 +171,18 @@ public String getContainerIdFromPath(final String fullPath) throws DotDataExcept\n         if (null == host) {\n \n             try {\n-                host = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n-            } catch (DotDataException | DotSecurityException e) {\n-                host = APILocator.systemHost();\n+                host = WebAPILocator.getHostWebAPI()\n+                        .getCurrentHost(HttpServletRequestThreadLocal.INSTANCE.getRequest());", "originalCommit": "163e1a1992ed016ead773a17bb7a0d561365c17e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0OTc2MQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384049761", "bodyText": "good", "author": "jdotcms", "createdAt": "2020-02-25T18:38:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk2OTk2Mw=="}], "type": "inlineReview"}, {"oid": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "url": "https://github.com/dotCMS/core/commit/47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "message": "#17749 doc", "committedDate": "2020-02-25T15:58:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTE3Nw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981177", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:11:54Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -79,9 +87,88 @@\n     private static Persona persona;\n     private static Visitor visitor;\n \n+    @DataProvider\n+    public static Object[][] cases() throws Exception {", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTE5OQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981199", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business.Permissionable'", "author": "dev-dotcms", "createdAt": "2020-02-25T16:11:55Z", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/ContainerPaginator.java", "diffHunk": "@@ -4,26 +4,33 @@\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.beans.Source;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Permissionable;", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTIxMA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981210", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:11:56Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -532,18 +585,14 @@ public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishConten\n      *\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackFalse_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackFalse_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTIyMw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981223", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:11:58Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1132,6 +1162,151 @@ public void shouldReturnParserContainerUUID() throws Exception {\n         Assert.assertTrue(html.matches(regexExpected));\n     }\n \n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page with File Container liked with relative path in the template\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderRelativeContainerPath() throws Exception {\n+\n+        final FileAssetContainer container = createFileContainer();\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(container.getPath(), UUID)\n+                .nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        final String pageName = \"testPage-\"+System.currentTimeMillis();\n+        final HTMLPageAsset pageEnglishVersion = createHtmlPageAsset(template, pageName, 1);\n+\n+        createMultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier());\n+\n+        final HttpServletRequest mockRequest = createHttpServletRequest(pageEnglishVersion);\n+        Mockito.when(mockRequest.getParameter(WebKeys.PAGE_MODE_PARAMETER)).thenReturn(PageMode.LIVE.toString());\n+\n+        final HttpServletResponse mockResponse = mock(HttpServletResponse.class);\n+        final HttpSession session = createHttpSession(mockRequest);\n+        Mockito.when(session.getAttribute(WebKeys.VISITOR)).thenReturn(null);\n+        Mockito.when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        final String html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                PageContextBuilder.builder()\n+                        .setUser(systemUser)\n+                        .setPageUri(pageEnglishVersion.getURI())\n+                        .setPageMode(PageMode.LIVE)\n+                        .build(),\n+                mockRequest, mockResponse);\n+\n+        Assert.assertEquals(\"content2content1\", html);\n+    }\n+\n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page and a advance template using a File Container in another site\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderUsingOtherSiteContainer() throws Exception {\n+        final Host defaultHost = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), true);\n+        final FileAssetContainer container = createFileContainer(defaultHost);\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(\"//\" + defaultHost.getName()  + container.getPath(), UUID)\n+                .nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        final String pageName = \"testPage-\"+System.currentTimeMillis();\n+        final HTMLPageAsset pageEnglishVersion = createHtmlPageAsset(template, pageName, 1);\n+\n+        createMultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier());\n+\n+        final HttpServletRequest mockRequest = createHttpServletRequest(pageEnglishVersion);\n+        Mockito.when(mockRequest.getParameter(WebKeys.PAGE_MODE_PARAMETER)).thenReturn(PageMode.LIVE.toString());\n+\n+        final HttpServletResponse mockResponse = mock(HttpServletResponse.class);\n+        final HttpSession session = createHttpSession(mockRequest);\n+        Mockito.when(session.getAttribute(WebKeys.VISITOR)).thenReturn(null);\n+        Mockito.when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        final String html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                PageContextBuilder.builder()\n+                        .setUser(systemUser)\n+                        .setPageUri(pageEnglishVersion.getURI())\n+                        .setPageMode(PageMode.LIVE)\n+                        .build(),\n+                mockRequest, mockResponse);\n+\n+        Assert.assertEquals(\"content2content1\", html);\n+    }\n+\n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page and a not advance template using a File Container in another site\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderUsingOtherSiteContainerAndNotAdvanceTemplate() throws Exception {", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTIzMw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981233", "bodyText": "Issue found: Parameter 'uid' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-25T16:11:59Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/directive/TemplatePathStrategyResolver.java", "diffHunk": "@@ -137,31 +138,31 @@ private boolean isPath (final String templatePath) {\n         }\n \n         private String getPath(final RenderParams params, final String path, final String uid) {\n-\n-\n-            final Host host     = params.currentHost;\n-            String templatePath = path;\n-\n-\n             try {\n-\n-                templatePath =(!templatePath.startsWith(HOST_INDICATOR))?\n-                        builder(FORWARD_SLASH, params.mode.name(), FORWARD_SLASH, HOST_INDICATOR,\n-                            this.getHost(host).getHostname(), path.startsWith(FORWARD_SLASH)? StringPool.BLANK:FORWARD_SLASH,\n-                            path, FORWARD_SLASH, uid, PERIOD, VelocityType.CONTAINER.fileExtension).toString():\n-\n-                        builder(FORWARD_SLASH, params.mode.name(), FORWARD_SLASH,\n-                            path, FORWARD_SLASH, uid, PERIOD, VelocityType.CONTAINER.fileExtension).toString();\n+                return FileAssetContainerUtil.getInstance().isFullPath(path) ?\n+                        getContainerResourcePathFromFullPath(params, path, uid) :\n+                        getContainerResourceFromRelativePath(params, path, uid);\n             } catch (Exception e) {\n \n-                Logger.warn(this.getClass(), \" - unable to resolve \" + templatePath + \" getting this: \"+ e.getMessage() );\n+                Logger.warn(this.getClass(), \" - unable to resolve \" + path + \" getting this: \"+ e.getMessage() );\n                 if(e.getStackTrace().length>0) {\n                     Logger.warn(this.getClass(), \" - at \" + e.getStackTrace()[0]);\n                 }\n                 throw new DotStateException(e);\n             }\n+        }\n+\n+        @NotNull\n+        private String getContainerResourceFromRelativePath(RenderParams params, String path, String uid) {\n+            return builder(FORWARD_SLASH, params.mode.name(), FORWARD_SLASH, HOST_INDICATOR,\n+                    params.currentHost.getHostname(), path.startsWith(FORWARD_SLASH)? StringPool.BLANK:FORWARD_SLASH,\n+                    path, FORWARD_SLASH, uid, PERIOD, VelocityType.CONTAINER.fileExtension).toString();\n+        }\n \n-            return templatePath;\n+        @NotNull\n+        private String getContainerResourcePathFromFullPath(RenderParams params, String path, String uid) {", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTI0OQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981249", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.exception.DotRuntimeException'", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:00Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/ContainerLoader.java", "diffHunk": "@@ -10,6 +10,7 @@\n import com.dotmarketing.business.CacheLocator;\n import com.dotmarketing.business.DotStateException;\n import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTI2MA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981260", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.containers.business.FileAssetContainerUtil'", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:02Z", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/ContainerPaginator.java", "diffHunk": "@@ -4,26 +4,33 @@\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.beans.Source;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Permissionable;\n+import com.dotmarketing.business.web.WebAPILocator;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.containers.business.ContainerAPI;\n+import com.dotmarketing.portlets.containers.business.FileAssetContainerUtil;", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTI3Mw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981273", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:03Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -677,20 +722,16 @@ public void ContentFallbackTrue_PageFallbackTrue_PageEnglishAndSpanish_ViewEngli\n      *\n      */\n     @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackTrue_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackTrue_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404(final Container container, final Template template) throws Exception{", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTI4NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981284", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.containers.business'", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:05Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/PageRenderUtil.java", "diffHunk": "@@ -27,17 +27,15 @@\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.factories.MultiTreeAPI;\n import com.dotmarketing.factories.PersonalizedContentlet;\n-import com.dotmarketing.portlets.containers.business.ContainerExceptionNotifier;\n-import com.dotmarketing.portlets.containers.business.ContainerFinderByIdOrPathStrategy;\n-import com.dotmarketing.portlets.containers.business.LiveContainerFinderByIdOrPathStrategyResolver;\n-import com.dotmarketing.portlets.containers.business.WorkingContainerFinderByIdOrPathStrategyResolver;\n+import com.dotmarketing.portlets.containers.business.*;", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTMwNA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981304", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:06Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1082,33 +1125,20 @@ public void shouldReturnPageHTMLForLegacyUUIDAndMultiTree() throws Exception {\n      * @throws Exception\n      */\n     @Test\n-    public void shouldReturnParserContainerUUID() throws Exception {\n+    @UseDataProvider(\"cases\")\n+    public void shouldReturnParserContainerUUID(final Container container, final Template template) throws Exception {", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTMxOQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981319", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:08Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -341,18 +408,14 @@ public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent\n      *\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTMzMw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981333", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.containers.business.FileAssetContainerUtil'", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:10Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -23,12 +23,16 @@\n import com.dotmarketing.business.PermissionAPI;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.exception.WebAssetException;\n import com.dotmarketing.factories.PublishFactory;\n import com.dotmarketing.factories.WebAssetFactory;\n+import com.dotmarketing.portlets.containers.business.FileAssetContainerUtil;", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTM0Mg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981342", "bodyText": "Issue found: Private field 'container' could be made final; it is only initialized in the declaration or constructor.", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:11Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/containers/model/ContainerView.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.dotmarketing.portlets.containers.model;\n+\n+import com.dotmarketing.beans.Host;\n+\n+import com.dotmarketing.portlets.containers.business.FileAssetContainerUtil;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+\n+\n+/**\n+ * It is a {@link Container} for UI, it make sure to return the container relative path from {@link ContainerView#host}\n+ */\n+@JsonSerialize(using = ContainerViewSerializer.class)\n+public class ContainerView {\n+    private Container container;", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTM1NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981354", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:12Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -731,7 +772,8 @@ public void ContentFallbackTrue_PageFallbackFalse_PageEnglish_ViewEnglishContent\n      * @throws Exception\n      */\n     @Test\n-    public void constantField_notUpdatedCache_whenChanged() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void constantField_notUpdatedCache_whenChanged(final Container container, final Template template) throws Exception{", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTM2OA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981368", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:14Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -79,9 +87,88 @@\n     private static Persona persona;\n     private static Visitor visitor;\n \n+    @DataProvider\n+    public static Object[][] cases() throws Exception {\n+        if (systemUser == null) {\n+            prepareGlobalData();\n+        }\n+\n+        final Container container = createContainer();\n+        final Template templateContainer = createTemplate(container);\n+\n+        final Container fileContainer = createFileContainer();\n+        final Template templateFileContainer = createTemplate(fileContainer);\n+\n+        return new Object[][] {\n+                { container, templateContainer },\n+                { fileContainer, templateFileContainer}\n+        };\n+    }\n+\n+    private static Template createTemplate(final Container container) throws DotSecurityException, WebAssetException, DotDataException {\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(container, UUID).nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+        return template;\n+    }\n+\n+    private static Container createContainer() throws DotSecurityException, DotDataException, WebAssetException {\n+        Container container = new Container();\n+        final String containerName = \"containerHTMLPageRenderedTest\" + System.currentTimeMillis();\n+\n+        container.setFriendlyName(containerName);\n+        container.setTitle(containerName);\n+        container.setOwner(systemUser.getUserId());\n+        container.setMaxContentlets(5);\n+\n+        final List<ContainerStructure> csList = new ArrayList<ContainerStructure>();\n+        final ContainerStructure cs = new ContainerStructure();\n+        cs.setStructureId(contentGenericType.id());\n+        cs.setCode(\"$!{body}\");\n+        csList.add(cs);\n+\n+        container = APILocator.getContainerAPI().save(container, csList, site, systemUser, false);\n+        PublishFactory.publishAsset(container, systemUser, false, false);\n+\n+        return container;\n+    }\n+\n+    private static FileAssetContainer createFileContainer() throws DotSecurityException, DotDataException, WebAssetException {\n+        return createFileContainer(site);\n+    }\n+\n+    private static FileAssetContainer createFileContainer(final Host host)\n+            throws DotSecurityException, DotDataException, WebAssetException {\n+\n+        final String containerName = \"containerHTMLPageRenderedTest\" + System.currentTimeMillis();\n+        FileAssetContainer container = new ContainerAsFileDataGen()\n+                .host(host)\n+                .folderName(containerName)\n+                .contentType(contentGenericType, \"$!{body}\")\n+                .nextPersisted();\n+\n+        container = (FileAssetContainer) APILocator.getContainerAPI().find(container.getInode(), systemUser, true);\n+\n+        final Folder folder = APILocator.getFolderAPI().findFolderByPath(container.getPath(), host, systemUser, true);\n+        final List<FileAsset> containerFiles =\n+                APILocator.getFileAssetAPI().findFileAssetsByFolder(folder, systemUser, true);\n+\n+        for (final FileAsset containerFile : containerFiles) {\n+            ContentletDataGen.publish(containerFile);\n+        }\n+\n+        return container;\n+    }\n+\n     @BeforeClass\n     public static void prepare() throws Exception {\n \n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    public static void prepareGlobalData() throws Exception {", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTM4Nw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981387", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:15Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -475,20 +532,16 @@ public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_Vie\n      *\n      */\n     @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404(final Container container, final Template template) throws Exception{", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2ODk4Ng==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384168986", "bodyText": "same here", "author": "nollymar", "createdAt": "2020-02-25T22:36:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTQwNQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981405", "bodyText": "Issue found: Local variable 'template' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:16Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1132,6 +1162,151 @@ public void shouldReturnParserContainerUUID() throws Exception {\n         Assert.assertTrue(html.matches(regexExpected));\n     }\n \n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page with File Container liked with relative path in the template\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderRelativeContainerPath() throws Exception {\n+\n+        final FileAssetContainer container = createFileContainer();\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(container.getPath(), UUID)\n+                .nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        final String pageName = \"testPage-\"+System.currentTimeMillis();\n+        final HTMLPageAsset pageEnglishVersion = createHtmlPageAsset(template, pageName, 1);\n+\n+        createMultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier());\n+\n+        final HttpServletRequest mockRequest = createHttpServletRequest(pageEnglishVersion);\n+        Mockito.when(mockRequest.getParameter(WebKeys.PAGE_MODE_PARAMETER)).thenReturn(PageMode.LIVE.toString());\n+\n+        final HttpServletResponse mockResponse = mock(HttpServletResponse.class);\n+        final HttpSession session = createHttpSession(mockRequest);\n+        Mockito.when(session.getAttribute(WebKeys.VISITOR)).thenReturn(null);\n+        Mockito.when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        final String html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                PageContextBuilder.builder()\n+                        .setUser(systemUser)\n+                        .setPageUri(pageEnglishVersion.getURI())\n+                        .setPageMode(PageMode.LIVE)\n+                        .build(),\n+                mockRequest, mockResponse);\n+\n+        Assert.assertEquals(\"content2content1\", html);\n+    }\n+\n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page and a advance template using a File Container in another site\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderUsingOtherSiteContainer() throws Exception {\n+        final Host defaultHost = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), true);\n+        final FileAssetContainer container = createFileContainer(defaultHost);\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(\"//\" + defaultHost.getName()  + container.getPath(), UUID)\n+                .nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        final String pageName = \"testPage-\"+System.currentTimeMillis();\n+        final HTMLPageAsset pageEnglishVersion = createHtmlPageAsset(template, pageName, 1);\n+\n+        createMultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier());\n+\n+        final HttpServletRequest mockRequest = createHttpServletRequest(pageEnglishVersion);\n+        Mockito.when(mockRequest.getParameter(WebKeys.PAGE_MODE_PARAMETER)).thenReturn(PageMode.LIVE.toString());\n+\n+        final HttpServletResponse mockResponse = mock(HttpServletResponse.class);\n+        final HttpSession session = createHttpSession(mockRequest);\n+        Mockito.when(session.getAttribute(WebKeys.VISITOR)).thenReturn(null);\n+        Mockito.when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        final String html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                PageContextBuilder.builder()\n+                        .setUser(systemUser)\n+                        .setPageUri(pageEnglishVersion.getURI())\n+                        .setPageMode(PageMode.LIVE)\n+                        .build(),\n+                mockRequest, mockResponse);\n+\n+        Assert.assertEquals(\"content2content1\", html);\n+    }\n+\n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page and a not advance template using a File Container in another site\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderUsingOtherSiteContainerAndNotAdvanceTemplate() throws Exception {\n+        final Host defaultHost = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), true);\n+        final FileAssetContainer container = createFileContainer(defaultHost);\n+\n+        final TemplateLayout templateLayout = new TemplateLayoutDataGen()\n+                .withContainer(\"//\" + defaultHost.getName()  + container.getPath())\n+                .next();\n+\n+        final Contentlet contentlet = new ThemeDataGen().nextPersisted();\n+        Template template = new TemplateDataGen()", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk4MTQxNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r383981417", "bodyText": "Issue found: Local variable 'multiTree' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-25T16:12:17Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -760,15 +802,15 @@ public void constantField_notUpdatedCache_whenChanged() throws Exception{\n             addAnonymousPermissions(contentlet);\n \n             final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder, template)\n-                    .languageId(1).pageURL(\"testPageWidget\").title(\"testPageWidget\")\n+                    .languageId(1).pageURL(\"testPageWidget\"+ System.currentTimeMillis()).title(\"testPageWidget\")\n                     .nextPersisted();\n             pageEnglishVersion.setIndexPolicy(IndexPolicy.WAIT_FOR);\n             pageEnglishVersion.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n             contentlet.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n             contentletAPI.publish(pageEnglishVersion, systemUser, false);\n             addAnonymousPermissions(pageEnglishVersion);\n \n-            MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), containerId,\n+            MultiTree multiTree = new MultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier(),", "originalCommit": "47e4e16f4c28c1515e7ad5a4903ec0befb86e80b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "003daa572496c01abfbc23aa89080df23c0b7499", "url": "https://github.com/dotCMS/core/commit/003daa572496c01abfbc23aa89080df23c0b7499", "message": "#17749 testing", "committedDate": "2020-02-25T16:20:38Z", "type": "commit"}, {"oid": "b575ead97282c128ee92adfbb3e90459d47c000b", "url": "https://github.com/dotCMS/core/commit/b575ead97282c128ee92adfbb3e90459d47c000b", "message": "#17749 refactoring", "committedDate": "2020-02-25T16:29:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDkwNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384004907", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:22Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -341,18 +406,14 @@ public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent\n      *\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDkxNQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384004915", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:24Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -416,22 +477,16 @@ public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEngl\n      * @throws Exception\n      */\n     @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDkyOA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384004928", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:25Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -475,20 +530,16 @@ public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_Vie\n      *\n      */\n     @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404(final Container container, final Template template) throws Exception{", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNDk3NQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384004975", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:30Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1132,6 +1160,151 @@ public void shouldReturnParserContainerUUID() throws Exception {\n         Assert.assertTrue(html.matches(regexExpected));\n     }\n \n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page with File Container liked with relative path in the template\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderRelativeContainerPath() throws Exception {\n+\n+        final FileAssetContainer container = createFileContainer();\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(container.getPath(), UUID)\n+                .nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        final String pageName = \"testPage-\"+System.currentTimeMillis();\n+        final HTMLPageAsset pageEnglishVersion = createHtmlPageAsset(template, pageName, 1);\n+\n+        createMultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier());\n+\n+        final HttpServletRequest mockRequest = createHttpServletRequest(pageEnglishVersion);\n+        Mockito.when(mockRequest.getParameter(WebKeys.PAGE_MODE_PARAMETER)).thenReturn(PageMode.LIVE.toString());\n+\n+        final HttpServletResponse mockResponse = mock(HttpServletResponse.class);\n+        final HttpSession session = createHttpSession(mockRequest);\n+        Mockito.when(session.getAttribute(WebKeys.VISITOR)).thenReturn(null);\n+        Mockito.when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        final String html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                PageContextBuilder.builder()\n+                        .setUser(systemUser)\n+                        .setPageUri(pageEnglishVersion.getURI())\n+                        .setPageMode(PageMode.LIVE)\n+                        .build(),\n+                mockRequest, mockResponse);\n+\n+        Assert.assertEquals(\"content2content1\", html);\n+    }\n+\n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page and a advance template using a File Container in another site\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderUsingOtherSiteContainer() throws Exception {", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTAwOA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384005008", "bodyText": "Issue found: Private field 'content' could be made final; it is only initialized in the declaration or constructor.", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:32Z", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/ContainerAsFileDataGen.java", "diffHunk": "@@ -20,16 +20,32 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n public class ContainerAsFileDataGen extends AbstractDataGen<FileAssetContainer> {\n \n+    private class ContentTypeContent {\n+        private ContentType contentType;\n+        private String content;", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTA0Mg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384005042", "bodyText": "Issue found: The String literal \"PageContextBuilderTemplate\" appears 4 times in this file; the first occurrence is on line 108", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:35Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -79,9 +85,88 @@\n     private static Persona persona;\n     private static Visitor visitor;\n \n+    @DataProvider\n+    public static Object[][] cases() throws Exception {\n+        if (systemUser == null) {\n+            prepareGlobalData();\n+        }\n+\n+        final Container container = createContainer();\n+        final Template templateContainer = createTemplate(container);\n+\n+        final Container fileContainer = createFileContainer();\n+        final Template templateFileContainer = createTemplate(fileContainer);\n+\n+        return new Object[][] {\n+                { container, templateContainer },\n+                { fileContainer, templateFileContainer}\n+        };\n+    }\n+\n+    private static Template createTemplate(final Container container) throws DotSecurityException, WebAssetException, DotDataException {\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTA2NQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384005065", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:37Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -976,7 +1016,11 @@ public void shouldReturnPageHTMLForPersona() throws Exception{\n      * @throws Exception\n      */\n     @Test\n-    public void shouldReturnPageHTMLForLegacyUUID() throws Exception {\n+    @UseDataProvider(\"cases\")\n+    public void shouldReturnPageHTMLForLegacyUUID(final Container container, final Template templateTestCase) throws Exception {", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTA3Nw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384005077", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:39Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -532,18 +583,14 @@ public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishConten\n      *\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackFalse_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackFalse_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTA1NQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384169055", "bodyText": "same here", "author": "nollymar", "createdAt": "2020-02-25T22:36:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTA3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTExNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384005117", "bodyText": "Issue found: Unnecessary modifier 'public' on method 'getCurrentHost': the method is declared in an interface type", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:43Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPI.java", "diffHunk": "@@ -31,6 +31,8 @@\n \t\r\n \tpublic Host getCurrentHost(HttpServletRequest req) throws DotDataException, DotSecurityException, PortalException, SystemException;\r\n \r\n+\tpublic Host getCurrentHost() throws DotDataException, DotSecurityException;\r", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NzA5Mg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384047092", "bodyText": "Doc", "author": "jdotcms", "createdAt": "2020-02-25T18:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTExNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMTkzNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384111937", "bodyText": "done 286b9c0#diff-875569de59a68af429a7ac46a979b1d9R40", "author": "freddyucv", "createdAt": "2020-02-25T20:36:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTExNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTE1NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384005154", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:46Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -79,9 +85,88 @@\n     private static Persona persona;\n     private static Visitor visitor;\n \n+    @DataProvider\n+    public static Object[][] cases() throws Exception {", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTE4NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384005184", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:49Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1132,6 +1160,151 @@ public void shouldReturnParserContainerUUID() throws Exception {\n         Assert.assertTrue(html.matches(regexExpected));\n     }\n \n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page with File Container liked with relative path in the template\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderRelativeContainerPath() throws Exception {", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAwNTIwNg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384005206", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-25T17:05:50Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1029,7 +1070,10 @@ public void shouldReturnPageHTMLForLegacyUUID() throws Exception {\n      * @throws Exception\n      */\n     @Test\n-    public void shouldReturnPageHTMLForLegacyUUIDAndMultiTree() throws Exception {\n+    @UseDataProvider(\"cases\")\n+    public void shouldReturnPageHTMLForLegacyUUIDAndMultiTree(final Container container, final Template templateTestCase) throws Exception {", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNDE4NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384024184", "bodyText": "remove this, won't work on java 11", "author": "jdotcms", "createdAt": "2020-02-25T17:36:04Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/directive/TemplatePathStrategyResolver.java", "diffHunk": "@@ -137,31 +138,39 @@ private boolean isPath (final String templatePath) {\n         }\n \n         private String getPath(final RenderParams params, final String path, final String uid) {\n-\n-\n-            final Host host     = params.currentHost;\n-            String templatePath = path;\n-\n-\n             try {\n-\n-                templatePath =(!templatePath.startsWith(HOST_INDICATOR))?\n-                        builder(FORWARD_SLASH, params.mode.name(), FORWARD_SLASH, HOST_INDICATOR,\n-                            this.getHost(host).getHostname(), path.startsWith(FORWARD_SLASH)? StringPool.BLANK:FORWARD_SLASH,\n-                            path, FORWARD_SLASH, uid, PERIOD, VelocityType.CONTAINER.fileExtension).toString():\n-\n-                        builder(FORWARD_SLASH, params.mode.name(), FORWARD_SLASH,\n-                            path, FORWARD_SLASH, uid, PERIOD, VelocityType.CONTAINER.fileExtension).toString();\n+                return FileAssetContainerUtil.getInstance().isFullPath(path) ?\n+                        getContainerResourcePathFromFullPath(params, path, uid) :\n+                        getContainerResourceFromRelativePath(params, path, uid);\n             } catch (Exception e) {\n \n-                Logger.warn(this.getClass(), \" - unable to resolve \" + templatePath + \" getting this: \"+ e.getMessage() );\n+                Logger.warn(this.getClass(), \" - unable to resolve \" + path + \" getting this: \"+ e.getMessage() );\n                 if(e.getStackTrace().length>0) {\n                     Logger.warn(this.getClass(), \" - at \" + e.getStackTrace()[0]);\n                 }\n                 throw new DotStateException(e);\n             }\n+        }\n+\n+        @NotNull", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMjEyOQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384112129", "bodyText": "done 286b9c0#diff-852b80877a8a40dd946126a363d2dc76L155", "author": "freddyucv", "createdAt": "2020-02-25T20:36:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyNDE4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzODA3Mg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384038072", "bodyText": "Isn't a more descriptive (business logic) name instead of \"UUID\" ?", "author": "dsilvam", "createdAt": "2020-02-25T18:17:00Z", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/TemplateDataGen.java", "diffHunk": "@@ -167,6 +169,16 @@ public TemplateDataGen withContainer(final String containerId, final String UUID\n         return this;\n     }\n \n+    public TemplateDataGen withContainer(final Container container, final String UUID) {", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NTAxNg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384045016", "bodyText": "Yes, but it already is named UUID everywhere", "author": "freddyucv", "createdAt": "2020-02-25T18:29:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAzODA3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0Mzk2OA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384043968", "bodyText": "Not sure why use the implementation rather the interface", "author": "jdotcms", "createdAt": "2020-02-25T18:27:51Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/PageRenderUtil.java", "diffHunk": "@@ -81,7 +74,7 @@\n     private final TagAPI        tagAPI        = APILocator.getTagAPI();\n     private final PersonaAPI    personaAPI    = APILocator.getPersonaAPI();\n \n-    final IHTMLPage htmlPage;\n+    final HTMLPageAsset htmlPage;", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NTUxMA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384045510", "bodyText": "because I need get the site here\nhttps://github.com/dotCMS/core/pull/18033/files#diffc7538880be24298c9c76f10f1c8efaffR112", "author": "freddyucv", "createdAt": "2020-02-25T18:30:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0Mzk2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMjQwOA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384112408", "bodyText": "done 286b9c0#diff-c7538880be24298c9c76f10f1c8efaffR92\n286b9c0#diff-2c7c10f84439ab07f53fa4dda91df2dcR23", "author": "freddyucv", "createdAt": "2020-02-25T20:37:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0Mzk2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDQzMg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384044432", "bodyText": "Java 11 does not like, remove it", "author": "jdotcms", "createdAt": "2020-02-25T18:28:37Z", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/ContainerPaginator.java", "diffHunk": "@@ -4,42 +4,50 @@\n import com.dotmarketing.beans.Host;\n import com.dotmarketing.beans.Source;\n import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.web.HostWebAPI;\n+import com.dotmarketing.business.web.WebAPILocator;\n import com.dotmarketing.exception.DotDataException;\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.portlets.containers.business.ContainerAPI;\n import com.dotmarketing.portlets.containers.model.Container;\n+import com.dotmarketing.portlets.containers.model.ContainerView;\n import com.dotmarketing.util.PaginatedArrayList;\n import com.dotmarketing.util.UtilMethods;\n import com.liferay.portal.model.User;\n import com.liferay.util.StringPool;\n+import org.jetbrains.annotations.NotNull;", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMjU0NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384112544", "bodyText": "done 286b9c0#diff-065ef3642f4836c3f53832552ac1ef02L18", "author": "freddyucv", "createdAt": "2020-02-25T20:37:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NDQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NTgxMw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384045813", "bodyText": "Log me", "author": "jdotcms", "createdAt": "2020-02-25T18:31:04Z", "path": "dotCMS/src/main/java/com/dotcms/util/pagination/ContainerPaginator.java", "diffHunk": "@@ -62,45 +70,74 @@ public ContainerPaginator(final ContainerAPI containerAPI) {\n                     (PaginatedArrayList<Container>) containerAPI.findContainers(user, false, params, hostId,\n                     null, null, null, offset, limit, orderByDirection);\n \n-            if (!UtilMethods.isSet(hostId)) {\n+            final PaginatedArrayList<Container> containers = !UtilMethods.isSet(hostId)\n+                    ? sortByTypeAndHost(direction, allContainers) : allContainers;\n \n-                final List<Container> fileContainers = new ArrayList<>();\n-                final List<Container> dbContainers   = new ArrayList<>();\n-\n-                for (final Container container : allContainers) {\n-\n-                    if (container.getSource() == Source.DB) {\n+            return createContainerView(containers);\n+        } catch (DotSecurityException | DotDataException e) {\n+            throw new PaginationException(e);", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NjAzOQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384046039", "bodyText": "Here the exception is been throwing", "author": "freddyucv", "createdAt": "2020-02-25T18:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0NTgxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0OTM4Ng==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384049386", "bodyText": "I would add javadoc explaining better the given scenario and expected result", "author": "dsilvam", "createdAt": "2020-02-25T18:37:32Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -282,20 +335,16 @@ public static void restore() throws Exception{\n      *\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent1And2_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1Mjc4MQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384052781", "bodyText": "this test is not new", "author": "freddyucv", "createdAt": "2020-02-25T18:43:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0OTM4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2ODA2Ng==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384168066", "bodyText": "do you know what the test does? If so, I would add the javadoc because the name is very long and not clear", "author": "nollymar", "createdAt": "2020-02-25T22:34:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0OTM4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0OTgxOA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384049818", "bodyText": "I would add javadoc explaining better the given scenario and expected result", "author": "dsilvam", "createdAt": "2020-02-25T18:38:14Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -341,18 +406,14 @@ public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent\n      *\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MjgxOQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384052819", "bodyText": "this test is not new", "author": "freddyucv", "createdAt": "2020-02-25T18:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA0OTgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MDAxNg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384050016", "bodyText": "I would add javadoc explaining better the given scenario and expected result", "author": "dsilvam", "createdAt": "2020-02-25T18:38:35Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -416,22 +477,16 @@ public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEngl\n      * @throws Exception\n      */\n     @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1Mjg3NQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384052875", "bodyText": "this test is not new", "author": "freddyucv", "createdAt": "2020-02-25T18:44:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MDAxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2ODgyOQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384168829", "bodyText": "same here, if you know what the test does, please add the javadoc", "author": "nollymar", "createdAt": "2020-02-25T22:36:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MDAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MDEwOA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384050108", "bodyText": "I would add javadoc explaining better the given scenario and expected result", "author": "dsilvam", "createdAt": "2020-02-25T18:38:46Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -475,20 +530,16 @@ public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_Vie\n      *\n      */\n     @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404(final Container container, final Template template) throws Exception{", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MjkyNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384052927", "bodyText": "this test is not new", "author": "freddyucv", "createdAt": "2020-02-25T18:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MDEwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1ODAzNQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384058035", "bodyText": "warnAndDebug?", "author": "dsilvam", "createdAt": "2020-02-25T18:52:54Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtil.java", "diffHunk": "@@ -165,10 +171,18 @@ public String getContainerIdFromPath(final String fullPath) throws DotDataExcept\n         if (null == host) {\n \n             try {\n-                host = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n-            } catch (DotDataException | DotSecurityException e) {\n-                host = APILocator.systemHost();\n+                host = WebAPILocator.getHostWebAPI()\n+                        .getCurrentHost(HttpServletRequestThreadLocal.INSTANCE.getRequest());\n+            } catch (DotSecurityException | PortalException | SystemException e) {\n+                Logger.debug(FileAssetContainerUtil.class, e.getMessage());", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMjczNg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384112736", "bodyText": "done 286b9c0#diff-1854786c11c9b31c822e5b175c0f47c4R177", "author": "freddyucv", "createdAt": "2020-02-25T20:38:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1ODAzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1ODEzOQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384058139", "bodyText": "warnAndDebug?", "author": "dsilvam", "createdAt": "2020-02-25T18:53:05Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/containers/business/FileAssetContainerUtil.java", "diffHunk": "@@ -165,10 +171,18 @@ public String getContainerIdFromPath(final String fullPath) throws DotDataExcept\n         if (null == host) {\n \n             try {\n-                host = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n-            } catch (DotDataException | DotSecurityException e) {\n-                host = APILocator.systemHost();\n+                host = WebAPILocator.getHostWebAPI()\n+                        .getCurrentHost(HttpServletRequestThreadLocal.INSTANCE.getRequest());\n+            } catch (DotSecurityException | PortalException | SystemException e) {\n+                Logger.debug(FileAssetContainerUtil.class, e.getMessage());\n+                try {\n+                    host = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), false);\n+                } catch (DotDataException | DotSecurityException ex) {\n+                    Logger.debug(FileAssetContainerUtil.class, e.getMessage());", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMjgyNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384112827", "bodyText": "done 286b9c0#diff-1854786c11c9b31c822e5b175c0f47c4R181", "author": "freddyucv", "createdAt": "2020-02-25T20:38:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1ODEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MTA3MQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384061071", "bodyText": "Instead of doing this, we should store the host id into the FileAssetContainer and compare with the current host", "author": "jdotcms", "createdAt": "2020-02-25T18:58:19Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/PageView.java", "diffHunk": "@@ -124,13 +130,27 @@ public Template getTemplate() {\n \n         containers.stream().forEach(containerRaw -> {\n \n-            if (containerRaw.getContainer() instanceof FileAssetContainer) {\n+            final Container container = containerRaw.getContainer();\n \n-                final String path = FileAssetContainer.class.cast(containerRaw.getContainer()).getPath();\n-                containerRawMap.put(path, containerRaw);\n+            if (container instanceof FileAssetContainer) {\n+                try {\n+                    final Host host = APILocator.getHostAPI().findParentHost(container, APILocator.systemUser(), false);", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExMzQzMQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384113431", "bodyText": "done\n286b9c0#diff-96b7f9fe4f01ac03ce5bd6c461aa5d88R137\n286b9c0#diff-1854786c11c9b31c822e5b175c0f47c4R355", "author": "freddyucv", "createdAt": "2020-02-25T20:39:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MTA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2Mjg1OQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384062859", "bodyText": "DotObjectMapperProvider.getInstance().getDefaultObjectMapper()", "author": "jdotcms", "createdAt": "2020-02-25T19:01:31Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/containers/model/ContainerViewSerializer.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.dotmarketing.portlets.containers.model;\n+\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+\n+import java.io.CharArrayReader;\n+import java.io.IOException;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * {@link JsonSerializer} of {@link ContainerView}\n+ */\n+public class ContainerViewSerializer extends JsonSerializer<ContainerView> {\n+\n+    static final ObjectMapper MAPPER = new ObjectMapper();", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MjI2OQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384062269", "bodyText": "Is this an outside case or are we using exceptions as control statements?", "author": "wezell", "createdAt": "2020-02-25T19:00:28Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/PageRenderUtil.java", "diffHunk": "@@ -367,8 +360,24 @@ private Container geContainerById(final String containerIdOrPath, final User use\n     }\n \n     private boolean needParseContainerPrefix(final Container container, final String uniqueId) {\n-        final String containerIdOrPath = (container instanceof FileAssetContainer) ?\n-                ((FileAssetContainer) container).getPath() : container.getIdentifier();\n+        String containerIdOrPath = null;\n+\n+        if (FileAssetContainerUtil.getInstance().isFileAssetContainer(container)) {\n+            final Host host;\n+            try {\n+                host = APILocator.getHostAPI().findParentHost(container, APILocator.systemUser(), false);\n+\n+                containerIdOrPath = this.site.getIdentifier().equals(host.getIdentifier()) ?\n+                        ((FileAssetContainer) container).getPath() :\n+                        FileAssetContainerUtil.getInstance().getFullPath((FileAssetContainer) container);\n+            } catch (DotDataException | DotSecurityException e) {", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNDIxNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384114217", "bodyText": "this was remove 286b9c0#diff-c7538880be24298c9c76f10f1c8efaffL373", "author": "freddyucv", "createdAt": "2020-02-25T20:41:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MjI2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MzQzMA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384063430", "bodyText": "Do we handle the case where request is null?", "author": "wezell", "createdAt": "2020-02-25T19:02:23Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPIImpl.java", "diffHunk": "@@ -52,6 +53,11 @@ public Host getHost(HttpServletRequest request)  {\n \t  \r\n \t}\r\n \r\n+    public Host getCurrentHost() throws DotDataException, DotSecurityException {\r\n+        final HttpServletRequest request = HttpServletRequestThreadLocal.INSTANCE.getRequest();\r\n+        return this.getCurrentHost(request);\r", "originalCommit": "b575ead97282c128ee92adfbb3e90459d47c000b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "286b9c09f52d6e0bb78ec9761ec3000c06d7f38a", "url": "https://github.com/dotCMS/core/commit/286b9c09f52d6e0bb78ec9761ec3000c06d7f38a", "message": "#17749 refactoring", "committedDate": "2020-02-25T20:31:53Z", "type": "commit"}, {"oid": "c30bff6f1ec2e934e4402d247dc42562b1918985", "url": "https://github.com/dotCMS/core/commit/c30bff6f1ec2e934e4402d247dc42562b1918985", "message": "#17749 refactoring", "committedDate": "2020-02-25T20:59:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTEzNg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384169136", "bodyText": "same here", "author": "nollymar", "createdAt": "2020-02-25T22:37:13Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -604,18 +651,14 @@ public void ContentFallbackFalse_PageFallbackFalse_PageEnglishAndSpanish_ViewEng\n      *\n      */\n     @Test\n-    public void ContentFallbackTrue_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent1And2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackTrue_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent1And2And3(final Container container, final Template template) throws Exception{", "originalCommit": "c30bff6f1ec2e934e4402d247dc42562b1918985", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTE3OQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384169179", "bodyText": "and here", "author": "nollymar", "createdAt": "2020-02-25T22:37:23Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -677,20 +720,16 @@ public void ContentFallbackTrue_PageFallbackTrue_PageEnglishAndSpanish_ViewEngli\n      *\n      */\n     @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackTrue_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackTrue_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404(final Container container, final Template template) throws Exception{", "originalCommit": "c30bff6f1ec2e934e4402d247dc42562b1918985", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTk4MA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384169980", "bodyText": "do you mean a File Container linked?", "author": "nollymar", "createdAt": "2020-02-25T22:39:11Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1132,6 +1160,151 @@ public void shouldReturnParserContainerUUID() throws Exception {\n         Assert.assertTrue(html.matches(regexExpected));\n     }\n \n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page with File Container liked with relative path in the template", "originalCommit": "c30bff6f1ec2e934e4402d247dc42562b1918985", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MjU4Mw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384172583", "bodyText": "I would make it more readable", "author": "nollymar", "createdAt": "2020-02-25T22:45:08Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/PageRenderUtil.java", "diffHunk": "@@ -101,6 +95,7 @@ public PageRenderUtil(\n             final long languageId,\n             final Host site) throws DotSecurityException, DotDataException {\n \n+        this.site = null == site? APILocator.getHostAPI().findDefaultHost(user, mode.respectAnonPerms):site;", "originalCommit": "c30bff6f1ec2e934e4402d247dc42562b1918985", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ccad36bb53ca110c1ebdcb0a7e3e67b69a36a97d", "url": "https://github.com/dotCMS/core/commit/ccad36bb53ca110c1ebdcb0a7e3e67b69a36a97d", "message": "#17749 doc", "committedDate": "2020-02-26T15:13:22Z", "type": "commit"}, {"oid": "d49b44158af80819faffcdf7bd5d862ce57639cf", "url": "https://github.com/dotCMS/core/commit/d49b44158af80819faffcdf7bd5d862ce57639cf", "message": "#17749 refactoring", "committedDate": "2020-02-26T15:38:48Z", "type": "commit"}, {"oid": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "url": "https://github.com/dotCMS/core/commit/f0cc3a840e9eeaefbd0d2c6dae588af700899698", "message": "#17749 miss spelling", "committedDate": "2020-02-26T16:15:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODMwMA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608300", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:25:56Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -512,38 +563,38 @@ public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishConten\n         mockRequest\n                 .setAttribute(WebKeys.HTMLPAGE_LANGUAGE, String.valueOf(spanishLanguage.getId()));\n         HttpServletRequestThreadLocal.INSTANCE.setRequest(mockRequest);\n-        html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+\n+        try {\n+            APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n                 PageContextBuilder.builder()\n                         .setUser(systemUser)\n                         .setPageUri(pageEnglishVersion.getURI())\n                         .setPageMode(PageMode.LIVE)\n                         .build(),\n                 mockRequest, mockResponse);\n+            throw new AssertionError(\"HTMLPageAssetNotFoundException expected\");\n+        }catch(HTMLPageAssetNotFoundException e) {\n+            //expected\n+        }\n     }\n \n     /**\n-     * ContentFallback False\n-     * PageFallback False\n-     *\n-     * Page English & Spanish\n-     *\n-     * English -> 1 & 2\n-     * Spanish -> 2 & 3\n-     *\n+     * Method to test: {@link HTMLPageAssetRenderedAPI#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * When: DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE is set to false and DEFAULT_PAGE_TO_DEFAULT_LANGUAGE is set to false\n+     *       And the page have version in ENG and ESP\n+     *       And the page have tree content, where: content1 is just in ENG version, content2 is in ENG and ESP version, content 3 is just in ESP version\n+     * Should: If the page is requests in ENG version it should be render with content1 and content2\n+     *         If the page is requests in ESP version it should be render with content3 and content2 (both in ESP version)\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackFalse_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackFalse_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODMxNA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608314", "bodyText": "Issue found: Avoid empty catch blocks", "author": "dev-dotcms", "createdAt": "2020-02-26T16:25:57Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -714,13 +752,20 @@ public void ContentFallbackTrue_PageFallbackFalse_PageEnglish_ViewEnglishContent\n         mockRequest\n                 .setAttribute(WebKeys.HTMLPAGE_LANGUAGE, String.valueOf(spanishLanguage.getId()));\n         HttpServletRequestThreadLocal.INSTANCE.setRequest(mockRequest);\n-        html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n-                PageContextBuilder.builder()\n-                        .setUser(systemUser)\n-                        .setPageUri(pageEnglishVersion.getURI())\n-                        .setPageMode(PageMode.LIVE)\n-                        .build(),\n-                mockRequest, mockResponse);\n+\n+        try{\n+            APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                    PageContextBuilder.builder()\n+                            .setUser(systemUser)\n+                            .setPageUri(pageEnglishVersion.getURI())\n+                            .setPageMode(PageMode.LIVE)\n+                            .build(),\n+                    mockRequest, mockResponse);\n+\n+            throw new AssertionError(\"HTMLPageAssetNotFoundException expected\");\n+        }catch(HTMLPageAssetNotFoundException e) {", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODMzNQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608335", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:25:58Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -327,32 +378,42 @@ public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent\n                         .setPageMode(PageMode.LIVE)\n                         .build(),\n                 mockRequest, mockResponse);\n-        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3content2Spa\"));\n+        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3Spacontent2Spa\"));\n+    }\n+\n+    @NotNull\n+    private HTMLPageAsset createHtmlPageAsset(\n+            final Template template,\n+            final String pageName,\n+            final long languageId)\n+\n+            throws DotSecurityException, DotDataException {\n+        final HTMLPageAsset pageEnglishVersion = new HTMLPageDataGen(folder,template).languageId(languageId).pageURL(pageName).title(pageName).nextPersisted();\n+        pageEnglishVersion.setIndexPolicy(IndexPolicy.WAIT_FOR);\n+        pageEnglishVersion.setIndexPolicyDependencies(IndexPolicy.WAIT_FOR);\n+        pageEnglishVersion.setBoolProperty(Contentlet.IS_TEST_MODE, true);\n+        contentletAPI.publish(pageEnglishVersion, systemUser, false);\n+        addAnonymousPermissions(pageEnglishVersion);\n+        return pageEnglishVersion;\n     }\n \n     /**\n-     * ContentFallback False\n-     * PageFallback True\n-     *\n-     * Page English & Spanish\n-     *\n-     * English -> 1 & 2\n-     * Spanish -> 2 & 3\n-     *\n+     * Method to test: {@link HTMLPageAssetRenderedAPI#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * When: DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE is set to false and DEFAULT_PAGE_TO_DEFAULT_LANGUAGE is set to true\n+     *       And the page have version in ENG and ESP\n+     *       And the page have tree content, where: content1 is just in ENG version, content2 is in ENG and ESP version, content 3 is just in ESP version\n+     * Should: If the page is requests in ENG version it should be render with content1 and content2\n+     *         If the page is requests in ESP version it should be render with content3 and content2 (both in ESP version)\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODM0Ng==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608346", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:25:59Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1029,7 +1076,10 @@ public void shouldReturnPageHTMLForLegacyUUID() throws Exception {\n      * @throws Exception\n      */\n     @Test\n-    public void shouldReturnPageHTMLForLegacyUUIDAndMultiTree() throws Exception {\n+    @UseDataProvider(\"cases\")\n+    public void shouldReturnPageHTMLForLegacyUUIDAndMultiTree(final Container container, final Template templateTestCase) throws Exception {", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODM2Mw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608363", "bodyText": "Issue found: The String literal \"cases\" appears 13 times in this file; the first occurrence is on line 323", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:01Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -272,31 +326,27 @@ public static void restore() throws Exception{\n     }\n \n     /**\n-     * ContentFallback False\n-     * PageFallback True\n-     *\n-     * Page English\n-     *\n-     * English -> 1 & 2\n-     * Spanish -> 2 & 3\n-     *\n+     * Method to test: {@link HTMLPageAssetRenderedAPI#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * When: DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE is set to false and DEFAULT_PAGE_TO_DEFAULT_LANGUAGE is set to true\n+     *       And the page have version just in ENG\n+     *       And the page have tree content, where: content1 is just in ENG version, content2 is in ENG and ESP version, content 3 is just in ESP version\n+     * Should: If the page is requests in ENG version it should be render with content1 and content2\n+     *         If the page is requests in ESP version it should be render with content3 and content2 (both in ESP version)\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODM3NQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608375", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:02Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -731,7 +776,8 @@ public void ContentFallbackTrue_PageFallbackFalse_PageEnglish_ViewEnglishContent\n      * @throws Exception\n      */\n     @Test\n-    public void constantField_notUpdatedCache_whenChanged() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void constantField_notUpdatedCache_whenChanged(final Container container, final Template template) throws Exception{", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODQxNQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608415", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business.APILocator'", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:05Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/PageView.java", "diffHunk": "@@ -1,12 +1,18 @@\n package com.dotmarketing.portlets.htmlpageasset.business.render.page;\n \n import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODQyNA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608424", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:06Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1132,6 +1166,151 @@ public void shouldReturnParserContainerUUID() throws Exception {\n         Assert.assertTrue(html.matches(regexExpected));\n     }\n \n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page with File Container linked with relative path in the template\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderRelativeContainerPath() throws Exception {", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODQzMQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608431", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.exception.DotSecurityException'", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:08Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/PageView.java", "diffHunk": "@@ -1,12 +1,18 @@\n package com.dotmarketing.portlets.htmlpageasset.business.render.page;\n \n import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODQ1NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608454", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.util.Logger'", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:09Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/PageView.java", "diffHunk": "@@ -1,12 +1,18 @@\n package com.dotmarketing.portlets.htmlpageasset.business.render.page;\n \n import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.containers.business.FileAssetContainerUtil;\n+import com.dotmarketing.portlets.containers.model.Container;\n import com.dotmarketing.portlets.containers.model.FileAssetContainer;\n import com.dotmarketing.portlets.contentlet.model.Contentlet;\n import com.dotmarketing.portlets.htmlpageasset.business.render.ContainerRaw;\n import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n import com.dotmarketing.portlets.templates.design.bean.TemplateLayout;\n import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODQ3Mg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608472", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:11Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -272,31 +326,27 @@ public static void restore() throws Exception{\n     }\n \n     /**\n-     * ContentFallback False\n-     * PageFallback True\n-     *\n-     * Page English\n-     *\n-     * English -> 1 & 2\n-     * Spanish -> 2 & 3\n-     *\n+     * Method to test: {@link HTMLPageAssetRenderedAPI#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * When: DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE is set to false and DEFAULT_PAGE_TO_DEFAULT_LANGUAGE is set to true\n+     *       And the page have version just in ENG\n+     *       And the page have tree content, where: content1 is just in ENG version, content2 is in ENG and ESP version, content 3 is just in ESP version\n+     * Should: If the page is requests in ENG version it should be render with content1 and content2\n+     *         If the page is requests in ESP version it should be render with content3 and content2 (both in ESP version)\n      */\n     @Test\n-    public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent1And2_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent1And2_ViewSpanishContent2And3(\n+            final Container container, final Template template) throws Exception{", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODQ4OA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608488", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:12Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1132,6 +1166,151 @@ public void shouldReturnParserContainerUUID() throws Exception {\n         Assert.assertTrue(html.matches(regexExpected));\n     }\n \n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page with File Container linked with relative path in the template\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderRelativeContainerPath() throws Exception {\n+\n+        final FileAssetContainer container = createFileContainer();\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(container.getPath(), UUID)\n+                .nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        final String pageName = \"testPage-\"+System.currentTimeMillis();\n+        final HTMLPageAsset pageEnglishVersion = createHtmlPageAsset(template, pageName, 1);\n+\n+        createMultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier());\n+\n+        final HttpServletRequest mockRequest = createHttpServletRequest(pageEnglishVersion);\n+        Mockito.when(mockRequest.getParameter(WebKeys.PAGE_MODE_PARAMETER)).thenReturn(PageMode.LIVE.toString());\n+\n+        final HttpServletResponse mockResponse = mock(HttpServletResponse.class);\n+        final HttpSession session = createHttpSession(mockRequest);\n+        Mockito.when(session.getAttribute(WebKeys.VISITOR)).thenReturn(null);\n+        Mockito.when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        final String html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                PageContextBuilder.builder()\n+                        .setUser(systemUser)\n+                        .setPageUri(pageEnglishVersion.getURI())\n+                        .setPageMode(PageMode.LIVE)\n+                        .build(),\n+                mockRequest, mockResponse);\n+\n+        Assert.assertEquals(\"content2content1\", html);\n+    }\n+\n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page and a advance template using a File Container in another site\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderUsingOtherSiteContainer() throws Exception {\n+        final Host defaultHost = APILocator.getHostAPI().findDefaultHost(APILocator.systemUser(), true);\n+        final FileAssetContainer container = createFileContainer(defaultHost);\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(\"//\" + defaultHost.getName()  + container.getPath(), UUID)\n+                .nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        final String pageName = \"testPage-\"+System.currentTimeMillis();\n+        final HTMLPageAsset pageEnglishVersion = createHtmlPageAsset(template, pageName, 1);\n+\n+        createMultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier());\n+\n+        final HttpServletRequest mockRequest = createHttpServletRequest(pageEnglishVersion);\n+        Mockito.when(mockRequest.getParameter(WebKeys.PAGE_MODE_PARAMETER)).thenReturn(PageMode.LIVE.toString());\n+\n+        final HttpServletResponse mockResponse = mock(HttpServletResponse.class);\n+        final HttpSession session = createHttpSession(mockRequest);\n+        Mockito.when(session.getAttribute(WebKeys.VISITOR)).thenReturn(null);\n+        Mockito.when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        final String html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                PageContextBuilder.builder()\n+                        .setUser(systemUser)\n+                        .setPageUri(pageEnglishVersion.getURI())\n+                        .setPageMode(PageMode.LIVE)\n+                        .build(),\n+                mockRequest, mockResponse);\n+\n+        Assert.assertEquals(\"content2content1\", html);\n+    }\n+\n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page and a not advance template using a File Container in another site\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderUsingOtherSiteContainerAndNotAdvanceTemplate() throws Exception {", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODUwMQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608501", "bodyText": "Issue found: Unnecessary modifier 'public' on method 'getCurrentHost': the method is declared in an interface type", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:13Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPI.java", "diffHunk": "@@ -31,6 +32,14 @@\n \t\r\n \tpublic Host getCurrentHost(HttpServletRequest req) throws DotDataException, DotSecurityException, PortalException, SystemException;\r\n \r\n+\t/**\r\n+\t * Return the current host using the current request\r\n+\t * @return\r\n+\t * @throws DotDataException\r\n+\t * @throws DotSecurityException\r\n+\t */\r\n+\tpublic Host getCurrentHost() throws DotDataException, DotSecurityException;\r", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODUwOQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608509", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:15Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -1132,6 +1166,151 @@ public void shouldReturnParserContainerUUID() throws Exception {\n         Assert.assertTrue(html.matches(regexExpected));\n     }\n \n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page with File Container linked with relative path in the template\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderRelativeContainerPath() throws Exception {\n+\n+        final FileAssetContainer container = createFileContainer();\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())\n+                .host(site)\n+                .withContainer(container.getPath(), UUID)\n+                .nextPersisted();\n+        PublishFactory.publishAsset(template, systemUser, false, false);\n+\n+        final String pageName = \"testPage-\"+System.currentTimeMillis();\n+        final HTMLPageAsset pageEnglishVersion = createHtmlPageAsset(template, pageName, 1);\n+\n+        createMultiTree(pageEnglishVersion.getIdentifier(), container.getIdentifier());\n+\n+        final HttpServletRequest mockRequest = createHttpServletRequest(pageEnglishVersion);\n+        Mockito.when(mockRequest.getParameter(WebKeys.PAGE_MODE_PARAMETER)).thenReturn(PageMode.LIVE.toString());\n+\n+        final HttpServletResponse mockResponse = mock(HttpServletResponse.class);\n+        final HttpSession session = createHttpSession(mockRequest);\n+        Mockito.when(session.getAttribute(WebKeys.VISITOR)).thenReturn(null);\n+        Mockito.when(session.getAttribute(WebKeys.CMS_USER)).thenReturn(systemUser);\n+\n+        final String html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                PageContextBuilder.builder()\n+                        .setUser(systemUser)\n+                        .setPageUri(pageEnglishVersion.getURI())\n+                        .setPageMode(PageMode.LIVE)\n+                        .build(),\n+                mockRequest, mockResponse);\n+\n+        Assert.assertEquals(\"content2content1\", html);\n+    }\n+\n+    /**\n+     * Method to test: {@link com.dotmarketing.portlets.htmlpageasset.business.render.HTMLPageAssetRenderedAPIImpl#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * Given Scenario: Create a page and a advance template using a File Container in another site\n+     * ExpectedResult: should work\n+     *\n+     * @throws Exception\n+     */\n+    @Test\n+    public void shouldRenderUsingOtherSiteContainer() throws Exception {", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODUyNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608527", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.exception.DotDataException'", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:16Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/business/render/page/PageView.java", "diffHunk": "@@ -1,12 +1,18 @@\n package com.dotmarketing.portlets.htmlpageasset.business.render.page;\n \n import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODUzNw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608537", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:17Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -400,38 +461,28 @@ public void ContentFallbackFalse_PageFallbackTrue_PageEnglishAndSpanish_ViewEngl\n                         .setPageMode(PageMode.LIVE)\n                         .build(),\n                 mockRequest, mockResponse);\n-        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3content2Spa\"));\n+        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3Spacontent2Spa\"));\n \n     }\n \n     /**\n-     * ContentFallback False\n-     * PageFallback True\n-     *\n-     * Page Spanish\n-     *\n-     * English -> 404\n-     * Spanish -> 2 & 3\n-     *\n-     * @throws Exception\n+     * Method to test: {@link HTMLPageAssetRenderedAPI#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * When: DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE is set to false and DEFAULT_PAGE_TO_DEFAULT_LANGUAGE is set to true\n+     *       And the page have version in ESP\n+     *       And the page have tree content, where: content1 is just in ENG version, content2 is in ENG and ESP version, content 3 is just in ESP version\n+     * Should: If the page is requests in ENG version it should be thrown a {@link HTMLPageAssetNotFoundException}\n+     *         If the page is requests in ESP version it should be render with content3 and content2 (both in ESP version)\n      */\n-    @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_ViewSpanishContent2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_ViewSpanishContent2And3(final Container container, final Template template) throws Exception{", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODU1Nw==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608557", "bodyText": "Issue found: Private field 'content' could be made final; it is only initialized in the declaration or constructor.", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:18Z", "path": "dotCMS/src/integration-test/java/com/dotcms/datagen/ContainerAsFileDataGen.java", "diffHunk": "@@ -20,16 +20,32 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n public class ContainerAsFileDataGen extends AbstractDataGen<FileAssetContainer> {\n \n+    private class ContentTypeContent {\n+        private ContentType contentType;\n+        private String content;", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODU3NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608574", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:20Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -447,48 +498,48 @@ public void ContentFallbackFalse_PageFallbackTrue_PageSpanish_ViewEnglish404_Vie\n                         .setPageMode(PageMode.LIVE)\n                         .build(),\n                 mockRequest, mockResponse);\n-        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3content2Spa\"));\n+        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3Spacontent2Spa\"));\n \n         mockRequest = new MockSessionRequest(\n                 new MockAttributeRequest(new MockHttpRequest(\"localhost\", \"/\").request()).request())\n                 .request();\n         Mockito.when(mockRequest.getParameter(\"host_id\")).thenReturn(site.getIdentifier());\n         mockRequest.setAttribute(WebKeys.HTMLPAGE_LANGUAGE, \"1\");\n         HttpServletRequestThreadLocal.INSTANCE.setRequest(mockRequest);\n-        html = APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n-                PageContextBuilder.builder()\n-                        .setUser(systemUser)\n-                        .setPageUri(pageSpanishVersion.getURI())\n-                        .setPageMode(PageMode.LIVE)\n-                        .build(),\n-                mockRequest, mockResponse);\n+\n+        try {\n+            APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(\n+                    PageContextBuilder.builder()\n+                            .setUser(systemUser)\n+                            .setPageUri(pageSpanishVersion.getURI())\n+                            .setPageMode(PageMode.LIVE)\n+                            .build(),\n+                    mockRequest, mockResponse);\n+\n+            throw new AssertionError(\"HTMLPageAssetNotFoundException expected\");\n+        }catch(HTMLPageAssetNotFoundException e) {\n+            //expected\n+        }\n     }\n \n     /**\n-     * ContentFallback False\n-     * PageFallback False\n-     *\n-     * Page English\n-     *\n-     * English -> 1 & 2\n-     * Spanish -> 404\n-     *\n+     * Method to test: {@link HTMLPageAssetRenderedAPI#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * When: DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE is set to false and DEFAULT_PAGE_TO_DEFAULT_LANGUAGE is set to false\n+     *       And the page have version in ENG\n+     *       And the page have tree content, where: content1 is just in ENG version, content2 is in ENG and ESP version, content 3 is just in ESP version\n+     * Should: If the page is requests in ENG version it should be render with content1 and content2\n+     *         If the page is requests in ESP version it should be thrown a {@link HTMLPageAssetNotFoundException}\n      */\n-    @Test (expected = HTMLPageAssetNotFoundException.class)\n-    public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackFalse_PageFallbackFalse_PageEnglish_ViewEnglishContent1And2_ViewSpanish404(final Container container, final Template template) throws Exception{", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODU4OQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608589", "bodyText": "Issue found: The String literal \"PageContextBuilderTemplate\" appears 4 times in this file; the first occurrence is on line 108", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:21Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -79,9 +86,88 @@\n     private static Persona persona;\n     private static Visitor visitor;\n \n+    @DataProvider\n+    public static Object[][] cases() throws Exception {\n+        if (systemUser == null) {\n+            prepareGlobalData();\n+        }\n+\n+        final Container container = createContainer();\n+        final Template templateContainer = createTemplate(container);\n+\n+        final Container fileContainer = createFileContainer();\n+        final Template templateFileContainer = createTemplate(fileContainer);\n+\n+        return new Object[][] {\n+                { container, templateContainer },\n+                { fileContainer, templateFileContainer}\n+        };\n+    }\n+\n+    private static Template createTemplate(final Container container) throws DotSecurityException, WebAssetException, DotDataException {\n+        final Template template = new TemplateDataGen().title(\"PageContextBuilderTemplate\"+System.currentTimeMillis())", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODYwMg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608602", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:22Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -79,9 +86,88 @@\n     private static Persona persona;\n     private static Visitor visitor;\n \n+    @DataProvider\n+    public static Object[][] cases() throws Exception {", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODYxNg==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608616", "bodyText": "Issue found: The String literal \"content3Spacontent2Spa\" appears 4 times in this file; the first occurrence is on line 381", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:23Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -327,32 +378,42 @@ public void ContentFallbackFalse_PageFallbackTrue_PageEnglish_ViewEnglishContent\n                         .setPageMode(PageMode.LIVE)\n                         .build(),\n                 mockRequest, mockResponse);\n-        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3content2Spa\"));\n+        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3Spacontent2Spa\"));", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODYyNA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608624", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:24Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -590,32 +641,26 @@ public void ContentFallbackFalse_PageFallbackFalse_PageEnglishAndSpanish_ViewEng\n                         .setPageMode(PageMode.LIVE)\n                         .build(),\n                 mockRequest, mockResponse);\n-        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3content2Spa\"));\n+        Assert.assertTrue(\"ESP = \"+html , html.contains(\"content3Spacontent2Spa\"));\n     }\n \n     /**\n-     * ContentFallback True\n-     * PageFallback True\n-     *\n-     * Page English & Spanish\n-     *\n-     * English -> 1 & 2\n-     * Spanish -> 1 & 2 & 3\n-     *\n+     * Method to test: {@link HTMLPageAssetRenderedAPI#getPageHtml(PageContext, HttpServletRequest, HttpServletResponse)}\n+     * When: DEFAULT_CONTENT_TO_DEFAULT_LANGUAGE is set to true and DEFAULT_PAGE_TO_DEFAULT_LANGUAGE is set to true\n+     *       And the page have version in ENG and ESP\n+     *       And the page have tree content, where: content1 is just in ENG version, content2 is in ENG and ESP version, content 3 is just in ESP version\n+     * Should: If the page is requests in ENG version it should be render with content1 and content2\n+     *         If the page is requests in ESP version it should be render with content1 (ENG version), content3 and content2 (both in ESP version)\n      */\n     @Test\n-    public void ContentFallbackTrue_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent1And2And3() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void ContentFallbackTrue_PageFallbackTrue_PageEnglishAndSpanish_ViewEnglishContent1And2_ViewSpanishContent1And2And3(final Container container, final Template template) throws Exception{", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODY0NA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608644", "bodyText": "Issue found: Avoid unused imports such as 'java.util.Optional'", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:25Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/web/HostWebAPI.java", "diffHunk": "@@ -17,6 +17,7 @@\n \r\n import javax.servlet.http.HttpServletRequest;\r\n import javax.servlet.http.HttpSession;\r\n+import java.util.Optional;\r", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODY2NQ==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608665", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.containers.business'", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:27Z", "path": "dotCMS/src/main/java/com/dotcms/rendering/velocity/services/PageRenderUtil.java", "diffHunk": "@@ -27,17 +25,15 @@\n import com.dotmarketing.exception.DotSecurityException;\n import com.dotmarketing.factories.MultiTreeAPI;\n import com.dotmarketing.factories.PersonalizedContentlet;\n-import com.dotmarketing.portlets.containers.business.ContainerExceptionNotifier;\n-import com.dotmarketing.portlets.containers.business.ContainerFinderByIdOrPathStrategy;\n-import com.dotmarketing.portlets.containers.business.LiveContainerFinderByIdOrPathStrategyResolver;\n-import com.dotmarketing.portlets.containers.business.WorkingContainerFinderByIdOrPathStrategyResolver;\n+import com.dotmarketing.portlets.containers.business.*;", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDYwODY3OA==", "url": "https://github.com/dotCMS/core/pull/18033#discussion_r384608678", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-02-26T16:26:28Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rendering/velocity/services/HTMLPageAssetRenderedTest.java", "diffHunk": "@@ -920,17 +964,14 @@ public void containerArchived_PageShouldResolve() throws Exception {\n      * @throws Exception\n      */\n     @Test\n-    public void shouldReturnPageHTMLForPersona() throws Exception{\n+    @UseDataProvider(\"cases\")\n+    public void shouldReturnPageHTMLForPersona(final Container container, final Template template) throws Exception{", "originalCommit": "f0cc3a840e9eeaefbd0d2c6dae588af700899698", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}