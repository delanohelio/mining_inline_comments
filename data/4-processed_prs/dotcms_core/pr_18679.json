{"pr_number": 18679, "pr_title": "#18641 Introduce Elasticsearch scroll + more improvements for content export", "pr_createdAt": "2020-06-16T22:47:45Z", "pr_url": "https://github.com/dotCMS/core/pull/18679", "timeline": [{"oid": "44fb4a79907cfa56b5f1da670000cad2870bf98b", "url": "https://github.com/dotCMS/core/commit/44fb4a79907cfa56b5f1da670000cad2870bf98b", "message": "#18641 : IMPORTANT! This is NOT the final code fix for this issue. As discussed with Will, the real code fix is a complete refactoring of this code in order to:\n\n1. Eliminate the `EditContentletAction` class, as we've done with several other DWR classes.\n2. Come up with a more efficient way of exporting high amounts of Contentlets as a CSV file.\n\nThe R&S Team needs to look into this and perform the final code changes. This PR contains the code changes that will be deployed to the customer environment in order to bring old functionality back. For this specific \"temporary fix\", once you have a valid functional ES Index, you need to run this curl command:\n```\ncurl -H 'Content-Type: application/json' -XPUT 'http://localhost:9200/_all/_settings' -d '{\n  \"index.max_result_window\" : \"100000\"\n}'\n```\nThe code changes involved:\n\n- Bringing back the max result limit we had in 4.x versions. That is, 100,000 results.\n- Using the Notification API for users to know (1) when the generation of the CSV file has begun, and (2) the total amount of exported content and the name of the CSV file.\n- Additional logging in the `dotcms.log` file that reports the progress every 2,000 contents being added to the file.", "committedDate": "2020-06-16T22:46:25Z", "type": "commit"}, {"oid": "1646f9148733e48aa4263662156ae9a632c97df2", "url": "https://github.com/dotCMS/core/commit/1646f9148733e48aa4263662156ae9a632c97df2", "message": "#18641 : Updating ES configuration values to allow dotCMS to return up to 100,000 results, and set the field limit up to 10,000 as required by several customers.", "committedDate": "2020-06-17T20:22:13Z", "type": "commit"}, {"oid": "fde4845a719cccb662b9bd56caae6dc5cc66e11a", "url": "https://github.com/dotCMS/core/commit/fde4845a719cccb662b9bd56caae6dc5cc66e11a", "message": "#18641 : Read the correct properties from the es-content-settings.json file.", "committedDate": "2020-06-17T23:26:44Z", "type": "commit"}, {"oid": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e", "url": "https://github.com/dotCMS/core/commit/e4e22c1deb5bf13abbab9496c59680da1aeafe6e", "message": "#18641 : Changing notifications from the old Notification bar to the new Toast Notifications.", "committedDate": "2020-06-18T17:41:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0Nzc0MA==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r447047740", "bodyText": "We need to remove our non-standard way of configuring elasticsearch and instead rely on these changes:\n\n  \n    \n      core/dotCMS/src/main/resources/es-content-settings.json\n    \n    \n        Lines 29 to 33\n      in\n      e4e22c1\n    \n    \n    \n    \n\n        \n          \n           \"index.max_result_window\" : \"100000\", \n        \n\n        \n          \n            \n        \n\n        \n          \n           \"index.mapping.total_fields.limit\" : \"10000\", \n        \n\n        \n          \n            \n        \n\n        \n          \n           \"index.mapping.nested_fields.limit\" : \"10000\"", "author": "wezell", "createdAt": "2020-06-29T15:13:30Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESIndexAPI.java", "diffHunk": "@@ -612,10 +612,12 @@ public synchronized CreateIndexResponse createIndex(final String indexName, Stri\n \n \t\tmap.put(\"number_of_shards\", shards);\n \t\tmap.put(\"index.auto_expand_replicas\", \"0-all\");\n-\t\tmap.put(\"index.mapping.total_fields.limit\",\n-\t\t\tConfig.getIntProperty(\"ES_INDEX_MAPPING_TOTAL_FIELD_LIMITS\", 5000));\n-        map.put(\"index.mapping.nested_fields.limit\",\n-                Config.getIntProperty(\"ES_INDEX_MAPPING_NESTED_FIELDS_LIMITS\", 5000));\n+\t\tif (!map.containsKey(\"index.mapping.total_fields.limit\")) {", "originalCommit": "e4e22c1deb5bf13abbab9496c59680da1aeafe6e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2Nzg1Ng==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r447167856", "bodyText": "Per my conversation with Jose, this looks good. I just want to be sure that our es-content-settings.json is correct and should be the place where we make these changes in the future.", "author": "wezell", "createdAt": "2020-06-29T18:26:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0Nzc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2OTYzMg==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r447169632", "bodyText": "Discussed this comment with @wezell , and confirmed that we're reading config files from the es-content-settings.json file only, and not using the dotcms-config-cluster.properties file anymore. The IF in there is just meant to set default values in case the JSON file is not specifying them.", "author": "jcastro-dotcms", "createdAt": "2020-06-29T18:29:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA0Nzc0MA=="}], "type": "inlineReview"}, {"oid": "e383af8abb752237d120c5bbf77d0b9cf0d19b46", "url": "https://github.com/dotCMS/core/commit/e383af8abb752237d120c5bbf77d0b9cf0d19b46", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18641-remove-content-export-limit", "committedDate": "2020-07-06T22:44:36Z", "type": "commit"}, {"oid": "98867fcf391134dc8cade5df57015918b83c1db8", "url": "https://github.com/dotCMS/core/commit/98867fcf391134dc8cade5df57015918b83c1db8", "message": "#18641 performance improvements for export process", "committedDate": "2020-07-09T00:10:27Z", "type": "commit"}, {"oid": "7f6b7c7b27b1e543933bbdac5f315c206f48ec03", "url": "https://github.com/dotCMS/core/commit/7f6b7c7b27b1e543933bbdac5f315c206f48ec03", "message": "#18641 more perf changes", "committedDate": "2020-07-09T19:20:05Z", "type": "commit"}, {"oid": "a6baafc2c3f64e5195b5d5b229391c48203263ef", "url": "https://github.com/dotCMS/core/commit/a6baafc2c3f64e5195b5d5b229391c48203263ef", "message": "#18641 interface to exclude non-importable fields", "committedDate": "2020-07-09T20:35:29Z", "type": "commit"}, {"oid": "04f2925af61b304b7911efb749ccf9b84736ffb3", "url": "https://github.com/dotCMS/core/commit/04f2925af61b304b7911efb749ccf9b84736ffb3", "message": "#18641 leave 10k window", "committedDate": "2020-07-09T22:24:57Z", "type": "commit"}, {"oid": "2d9d71210b2c611583c4919b6f4501a2c2615d1f", "url": "https://github.com/dotCMS/core/commit/2d9d71210b2c611583c4919b6f4501a2c2615d1f", "message": "#18641 fixing bug found by integration-test", "committedDate": "2020-07-09T22:34:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNjk1NA==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452536954", "bodyText": "will remove this", "author": "dsilvam", "createdAt": "2020-07-09T23:06:54Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -963,31 +963,37 @@ public void addPermissionsToQuery(StringBuffer buffy, User user, List<Role> role\n         if(UtilMethods.isSet(sortBy) && sortBy.trim().equalsIgnoreCase(\"random\")){\n             sortBy=\"random\";\n         }\n-        if(limit>MAX_LIMIT || limit <=0){\n-            limit = MAX_LIMIT;\n-        }\n-        SearchHits lc = contentFactory.indexSearch(buffy.toString(), limit, offset, sortBy);\n-        PaginatedArrayList <ContentletSearch> list=new PaginatedArrayList<>();\n-        list.setTotalResults(lc.getTotalHits().value);\n+//        if(limit>MAX_LIMIT || limit <=0){\n+//            limit = MAX_LIMIT;\n+//        }", "originalCommit": "2d9d71210b2c611583c4919b6f4501a2c2615d1f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b74ef6b9d02f10bf28a1d46b84b1884ae67f15c3", "url": "https://github.com/dotCMS/core/commit/b74ef6b9d02f10bf28a1d46b84b1884ae67f15c3", "message": "#18641 cleaning up", "committedDate": "2020-07-09T23:07:52Z", "type": "commit"}, {"oid": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "url": "https://github.com/dotCMS/core/commit/4fc93c67146e09f0021c3ad2c47dbce88703e772", "message": "#18641 cleaning up", "committedDate": "2020-07-09T23:12:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTQyNw==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452891427", "bodyText": "should this throw?", "author": "wezell", "createdAt": "2020-07-10T14:48:53Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+//    @Override\n+    protected PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {\n+\n+        final String formattedQuery = LuceneQueryDateTimeFormatter\n+                .findAndReplaceQueryDates(translateQuery(query, sortBy).getQuery());\n+\n+        // we check the query to figure out wich indexes to hit\n+        String indexToHit;\n+        IndiciesInfo info;\n+        try {\n+            info=APILocator.getIndiciesAPI().loadIndicies();\n+        }\n+        catch(DotDataException ee) {\n+            Logger.fatal(this, \"Can't get indicies information\",ee);\n+            return null;\n+        }\n+        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n+            indexToHit = info.getLive();\n+        } else {\n+            indexToHit = info.getWorking();\n+        }\n+\n+        final SearchRequest searchRequest = new SearchRequest();\n+        final SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(formattedQuery, sortBy);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.indices(indexToHit);\n+\n+        if(UtilMethods.isSet(sortBy) ) {\n+            sortBy = sortBy.toLowerCase();\n+\n+            if(sortBy.startsWith(\"score\")){\n+                String[] sortByCriteria = sortBy.split(\"[,|\\\\s+]\");\n+                String defaultSecondarySort = \"moddate\";\n+                SortOrder defaultSecondardOrder = SortOrder.DESC;\n+\n+                if(sortByCriteria.length>2){\n+                    if(sortByCriteria[2].equalsIgnoreCase(\"desc\")) {\n+                        defaultSecondardOrder = SortOrder.DESC;\n+                    } else {\n+                        defaultSecondardOrder = SortOrder.ASC;\n+                    }\n+                }\n+                if(sortByCriteria.length>1){\n+                    defaultSecondarySort= sortByCriteria[1];\n+                }\n+\n+                searchSourceBuilder.sort(\"_score\", SortOrder.DESC);\n+                searchSourceBuilder.sort(defaultSecondarySort, defaultSecondardOrder);\n+            } else if(!sortBy.startsWith(\"undefined\") && !sortBy.startsWith(\"undefined_dotraw\") && !sortBy.equals(\"random\")) {\n+                addBuilderSort(sortBy, searchSourceBuilder);\n+            }\n+        }else{\n+            searchSourceBuilder.sort(\"moddate\", SortOrder.DESC);\n+        }\n+\n+        searchSourceBuilder.size(MAX_LIMIT);\n+        searchRequest.source(searchSourceBuilder);\n+        final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));\n+        searchRequest.scroll(scroll);\n+\n+        PaginatedArrayList<ContentletSearch> contentletSearchList = new PaginatedArrayList<>();\n+\n+        try {\n+            SearchResponse searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                    .search(searchRequest, RequestOptions.DEFAULT);\n+            String scrollId = searchResponse.getScrollId();\n+            SearchHits searchHits = searchResponse.getHits();\n+\n+            contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            contentletSearchList.setTotalResults(searchHits.getTotalHits().value);\n+\n+            while (searchHits.getHits() != null && searchHits.getHits().length > 0) {\n+\n+                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);\n+                scrollRequest.scroll(scroll);\n+                searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                        .scroll(scrollRequest, RequestOptions.DEFAULT);\n+                scrollId = searchResponse.getScrollId();\n+                searchHits = searchResponse.getHits();\n+\n+                contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            }\n+\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            ClearScrollResponse clearScrollResponse = RestHighLevelClientProvider.getInstance()\n+                    .getClient().clearScroll(clearScrollRequest, RequestOptions.DEFAULT);\n+            boolean succeeded = clearScrollResponse.isSucceeded();\n+\n+        } catch (final ElasticsearchStatusException | IndexNotFoundException | SearchPhaseExecutionException e) {\n+            final String exceptionMsg = (null != e.getCause() ? e.getCause().getMessage() : e.getMessage());\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            Logger.warn(this.getClass(), String.format(\"Elasticsearch error in index '%s'\", (searchRequest.indices()!=null) ? String.join(\",\", searchRequest.indices()): \"unknown\"));\n+            Logger.warn(this.getClass(), String.format(\"ES Query: %s\", String.valueOf(searchRequest.source()) ));\n+            Logger.warn(this.getClass(), String.format(\"Class %s: %s\", e.getClass().getName(), exceptionMsg));\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            return new PaginatedArrayList<>();\n+        } catch (final Exception e) {\n+            final String errorMsg = String.format(\"An error occurred when executing the Lucene Query [ %s ] : %s\",\n+                    searchRequest.source().toString(), e.getMessage());\n+            Logger.warnAndDebug(ESContentFactoryImpl.class, errorMsg, e);\n+            throw new DotRuntimeException(errorMsg, e);\n+        }\n+\n+        return contentletSearchList;\n+\n+\n+    }\n+\n+    private List<ContentletSearch> getContentletSearchFromSearchHits(final SearchHits searchHits) {\n+        PaginatedArrayList<ContentletSearch> list=new PaginatedArrayList<>();\n+        list.setTotalResults(searchHits.getTotalHits().value);\n+\n+        for (SearchHit sh : searchHits.getHits()) {\n+            try{\n+                Map<String, Object> sourceMap = sh.getSourceAsMap();\n+                ContentletSearch conwrapper= new ContentletSearch();\n+                conwrapper.setId(sh.getId());\n+                conwrapper.setIndex(sh.getIndex());\n+                conwrapper.setIdentifier(sourceMap.get(\"identifier\").toString());\n+                conwrapper.setInode(sourceMap.get(\"inode\").toString());\n+                conwrapper.setScore(sh.getScore());\n+\n+                list.add(conwrapper);\n+            }\n+            catch(Exception e){\n+                Logger.error(this,e.getMessage(),e);", "originalCommit": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxNDUzMA==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452914530", "bodyText": "Done", "author": "dsilvam", "createdAt": "2020-07-10T15:27:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTQyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTg4OQ==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452891889", "bodyText": "#CloseDBIfOpened?", "author": "wezell", "createdAt": "2020-07-10T14:49:35Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+//    @Override\n+    protected PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {", "originalCommit": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyMTE0Mw==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452921143", "bodyText": "Original indexSearch (not scroll) method doesn't have it. The only db operation it does is a call to get the indices info=APILocator.getIndiciesAPI().loadIndicies(); which already has the annotation", "author": "dsilvam", "createdAt": "2020-07-10T15:38:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MTg4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjU2OQ==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452892569", "bodyText": "I likes!", "author": "wezell", "createdAt": "2020-07-10T14:50:37Z", "path": "dotCMS/src/main/java/com/dotcms/contenttype/model/field/Unexportable.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.dotcms.contenttype.model.field;\n+\n+/**\n+ * a {@link Field} which can't be exported when exporting content needs to implement this marker interface.\n+ *\n+ *\n+ */\n+public interface Unexportable {", "originalCommit": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMTU5Mw==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453811593", "bodyText": "cool, but flag interfaces are so so, I would prefer an annotation", "author": "jdotcms", "createdAt": "2020-07-13T17:27:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjU2OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg3Nzg1OQ==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453877859", "bodyText": "Done", "author": "dsilvam", "createdAt": "2020-07-13T19:22:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MjU2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MzcyOA==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452893728", "bodyText": "Hate to say it but this needs to be moved to a resource - even as is with a bunch of ugly parameters. We should not invest any more time in Struts actions and should take the opportunity to remove them when possible.", "author": "wezell", "createdAt": "2020-07-10T14:52:25Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/action/EditContentletAction.java", "diffHunk": "@@ -628,12 +643,20 @@ else if ((cmd != null) && cmd.equals(com.dotmarketing.util.Constants.UNLOCK)) {\n \t\t\t_sendToReferral(req, res, referer);\r\n \t\t}else if(cmd != null && cmd.equals(\"export\")){\r\n \t\t\ttry {\r\n-\t\t\t\tString structureInode = req.getParameter(\"expStructureInode\");\r\n-\r\n-\t\t\t\tActionResponseImpl resImpl = (ActionResponseImpl) res;\r\n-\t\t\t\tHttpServletResponse response = resImpl.getHttpServletResponse();\r\n-\r\n-\t\t\t\tdownloadToExcel(response, user,searchContentlets(req,res,config,form,user,\"Excel\"), structureInode);\r\n+\t\t\t\tfinal String contentTypeId = req.getParameter(\"expStructureInode\");\r", "originalCommit": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzgxMjYxMw==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453812613", "bodyText": "Totally agree.\nThe effort is important so do it right", "author": "jdotcms", "createdAt": "2020-07-13T17:29:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5MzcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NTg2MQ==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452895861", "bodyText": "How did the 404 cache for a language get into this PR?", "author": "wezell", "createdAt": "2020-07-10T14:55:54Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageCache.java", "diffHunk": "@@ -13,7 +13,9 @@\n public abstract class LanguageCache implements Cachable{\n \n     protected abstract void addLanguage(Language l);\n-    \n+\n+    protected abstract void add404Language(String languageCode, String countryCode);", "originalCommit": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzE3OQ==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452913179", "bodyText": "This is explained in the description - I was because I was doing an ab testing to help @freddyucv reproduce an error and I saw a db hit for every page rendered", "author": "dsilvam", "createdAt": "2020-07-10T15:24:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NTg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NjcyNw==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452896727", "bodyText": "This is good but I do not see the invalidation when a new language is added?", "author": "wezell", "createdAt": "2020-07-10T14:57:11Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "diffHunk": "@@ -588,13 +590,23 @@ protected void saveLanguageKeys(Language lang, Map<String, String> generalKeys,\n \t@Override\n \tprotected Language getFallbackLanguage(final String languageCode) {\n \n+\t\tLanguage lang = CacheLocator.getLanguageCache().getLanguageByCode(languageCode, \"\");\n+\t\tif (null != lang ) {\n+\t\t\treturn (LANG_404.equals(lang)) ? null : lang;\n+\t\t}\n+\n \t\ttry {\n \n-\t\t\treturn fromDbMap(new DotConnect()\n+\t\t\tlang = fromDbMap(new DotConnect()\n \t\t\t\t\t.setSQL(SELECT_LANGUAGE_BY_LANG_CODE_ONLY)\n \t\t\t\t\t.addParam(languageCode.toLowerCase())\n \t\t\t\t\t.loadObjectResults().stream().findFirst().orElse(null));\n \n+\t\t\tif(lang == null){\n+\t\t\t\tCacheLocator.getLanguageCache().add404Language(languageCode, \"\");", "originalCommit": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyNjEyOA==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452926128", "bodyText": "Already happens here: \n  \n    \n      core/dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageCacheImpl.java\n    \n    \n         Line 145\n      in\n      4fc93c6\n    \n    \n    \n    \n\n        \n          \n           cache.remove(getPrimaryGroup() + languageKey,getPrimaryGroup());", "author": "dsilvam", "createdAt": "2020-07-10T15:47:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5NjcyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5Njg4Mw==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452896883", "bodyText": "Again, why in this PR?", "author": "wezell", "createdAt": "2020-07-10T14:57:27Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/workflows/business/WorkflowFactoryImpl.java", "diffHunk": "@@ -204,11 +206,11 @@ private Object convertMaptoObject(Map<String, Object> map, Class clazz) throws I\n \t\t} else if (obj instanceof WorkflowActionClassParameter) {\n \t\t\treturn this.convertActionClassParameter(map);\n \t\t} else if (obj instanceof WorkflowScheme) {\n-\t\t\treturn this.convertScheme(map);\n+\t\t\treturn WorkflowSchemeTransformer.transform(map);", "originalCommit": "4fc93c67146e09f0021c3ad2c47dbce88703e772", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkxMzM2MA==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452913360", "bodyText": "Explained in the description also", "author": "dsilvam", "createdAt": "2020-07-10T15:25:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5Njg4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkyOTE5MQ==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r452929191", "bodyText": "Added DBTransformers for both WorkflowTask and WorkflowScheme instead of relying on BeanUtils.copyProperties , which was taking a performance hit, reported by Glowroot also", "author": "dsilvam", "createdAt": "2020-07-10T15:53:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg5Njg4Mw=="}], "type": "inlineReview"}, {"oid": "4b76989899cf170417eea94b0a54cc35f5e15e5c", "url": "https://github.com/dotCMS/core/commit/4b76989899cf170417eea94b0a54cc35f5e15e5c", "message": "#18641 code-review", "committedDate": "2020-07-10T15:51:23Z", "type": "commit"}, {"oid": "66c30b2136de780ab7b4b5be637448dcd8ec2d79", "url": "https://github.com/dotCMS/core/commit/66c30b2136de780ab7b4b5be637448dcd8ec2d79", "message": "Merge branch 'master' of github.com:dotCMS/core into issue-18641-remove-content-export-limit", "committedDate": "2020-07-13T16:31:18Z", "type": "commit"}, {"oid": "22a975fd2b24830f489ee8ed7110a2f3624a859f", "url": "https://github.com/dotCMS/core/commit/22a975fd2b24830f489ee8ed7110a2f3624a859f", "message": "#18641 set proper limit", "committedDate": "2020-07-13T17:11:37Z", "type": "commit"}, {"oid": "8249a7f8345054e6f59a96d16053da13c91fb798", "url": "https://github.com/dotCMS/core/commit/8249a7f8345054e6f59a96d16053da13c91fb798", "message": "#18641 make Unexportable an annotation instead of a flag Interface", "committedDate": "2020-07-13T19:22:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTM4OQ==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453881389", "bodyText": "Codacy found an issue: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-07-13T19:29:06Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/languagesmanager/business/LanguageFactoryImpl.java", "diffHunk": "@@ -588,13 +590,23 @@ protected void saveLanguageKeys(Language lang, Map<String, String> generalKeys,\n \t@Override\n \tprotected Language getFallbackLanguage(final String languageCode) {\n \n+\t\tLanguage lang = CacheLocator.getLanguageCache().getLanguageByCode(languageCode, \"\");\n+\t\tif (null != lang ) {\n+\t\t\treturn (LANG_404.equals(lang)) ? null : lang;", "originalCommit": "8249a7f8345054e6f59a96d16053da13c91fb798", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzg4MTQwMA==", "url": "https://github.com/dotCMS/core/pull/18679#discussion_r453881400", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-07-13T19:29:07Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentFactoryImpl.java", "diffHunk": "@@ -1683,6 +1689,139 @@ protected SearchHits indexSearch(final String query, final int limit, final int\n \n     }\n \n+    PaginatedArrayList<ContentletSearch> indexSearchScroll(final String query, String sortBy) {\n+\n+        final String formattedQuery = LuceneQueryDateTimeFormatter\n+                .findAndReplaceQueryDates(translateQuery(query, sortBy).getQuery());\n+\n+        // we check the query to figure out wich indexes to hit\n+        String indexToHit;\n+        IndiciesInfo info;\n+        try {\n+            info=APILocator.getIndiciesAPI().loadIndicies();\n+        }\n+        catch(DotDataException ee) {\n+            Logger.fatal(this, \"Can't get indicies information\",ee);\n+            return null;\n+        }\n+        if(query.contains(\"+live:true\") && !query.contains(\"+deleted:true\")) {\n+            indexToHit = info.getLive();\n+        } else {\n+            indexToHit = info.getWorking();\n+        }\n+\n+        final SearchRequest searchRequest = new SearchRequest();\n+        final SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(formattedQuery, sortBy);\n+        searchSourceBuilder.timeout(TimeValue.timeValueMillis(INDEX_OPERATIONS_TIMEOUT_IN_MS));\n+        searchRequest.indices(indexToHit);\n+\n+        if(UtilMethods.isSet(sortBy) ) {\n+            sortBy = sortBy.toLowerCase();\n+\n+            if(sortBy.startsWith(\"score\")){\n+                String[] sortByCriteria = sortBy.split(\"[,|\\\\s+]\");\n+                String defaultSecondarySort = \"moddate\";\n+                SortOrder defaultSecondardOrder = SortOrder.DESC;\n+\n+                if(sortByCriteria.length>2){\n+                    if(sortByCriteria[2].equalsIgnoreCase(\"desc\")) {\n+                        defaultSecondardOrder = SortOrder.DESC;\n+                    } else {\n+                        defaultSecondardOrder = SortOrder.ASC;\n+                    }\n+                }\n+                if(sortByCriteria.length>1){\n+                    defaultSecondarySort= sortByCriteria[1];\n+                }\n+\n+                searchSourceBuilder.sort(\"_score\", SortOrder.DESC);\n+                searchSourceBuilder.sort(defaultSecondarySort, defaultSecondardOrder);\n+            } else if(!sortBy.startsWith(\"undefined\") && !sortBy.startsWith(\"undefined_dotraw\") && !sortBy.equals(\"random\")) {\n+                addBuilderSort(sortBy, searchSourceBuilder);\n+            }\n+        }else{\n+            searchSourceBuilder.sort(\"moddate\", SortOrder.DESC);\n+        }\n+\n+        searchSourceBuilder.size(MAX_LIMIT);\n+        searchRequest.source(searchSourceBuilder);\n+        final Scroll scroll = new Scroll(TimeValue.timeValueMinutes(1L));\n+        searchRequest.scroll(scroll);\n+\n+        PaginatedArrayList<ContentletSearch> contentletSearchList = new PaginatedArrayList<>();\n+\n+        try {\n+            SearchResponse searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                    .search(searchRequest, RequestOptions.DEFAULT);\n+            String scrollId = searchResponse.getScrollId();\n+            SearchHits searchHits = searchResponse.getHits();\n+\n+            contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            contentletSearchList.setTotalResults(searchHits.getTotalHits().value);\n+\n+            while (searchHits.getHits() != null && searchHits.getHits().length > 0) {\n+\n+                SearchScrollRequest scrollRequest = new SearchScrollRequest(scrollId);\n+                scrollRequest.scroll(scroll);\n+                searchResponse = RestHighLevelClientProvider.getInstance().getClient()\n+                        .scroll(scrollRequest, RequestOptions.DEFAULT);\n+                scrollId = searchResponse.getScrollId();\n+                searchHits = searchResponse.getHits();\n+\n+                contentletSearchList.addAll(getContentletSearchFromSearchHits(searchHits));\n+            }\n+\n+            ClearScrollRequest clearScrollRequest = new ClearScrollRequest();\n+            clearScrollRequest.addScrollId(scrollId);\n+            ClearScrollResponse clearScrollResponse = RestHighLevelClientProvider.getInstance()\n+                    .getClient().clearScroll(clearScrollRequest, RequestOptions.DEFAULT);\n+            boolean succeeded = clearScrollResponse.isSucceeded();\n+\n+        } catch (final ElasticsearchStatusException | IndexNotFoundException | SearchPhaseExecutionException e) {\n+            final String exceptionMsg = (null != e.getCause() ? e.getCause().getMessage() : e.getMessage());\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            Logger.warn(this.getClass(), String.format(\"Elasticsearch error in index '%s'\", (searchRequest.indices()!=null) ? String.join(\",\", searchRequest.indices()): \"unknown\"));\n+            Logger.warn(this.getClass(), String.format(\"ES Query: %s\", String.valueOf(searchRequest.source()) ));\n+            Logger.warn(this.getClass(), String.format(\"Class %s: %s\", e.getClass().getName(), exceptionMsg));\n+            Logger.warn(this.getClass(), \"----------------------------------------------\");\n+            return new PaginatedArrayList<>();\n+        } catch (final Exception e) {\n+            final String errorMsg = String.format(\"An error occurred when executing the Lucene Query [ %s ] : %s\",\n+                    searchRequest.source().toString(), e.getMessage());\n+            Logger.warnAndDebug(ESContentFactoryImpl.class, errorMsg, e);\n+            throw new DotRuntimeException(errorMsg, e);\n+        }\n+\n+        return contentletSearchList;\n+\n+\n+    }\n+\n+    private List<ContentletSearch> getContentletSearchFromSearchHits(final SearchHits searchHits) {\n+        PaginatedArrayList<ContentletSearch> list=new PaginatedArrayList<>();\n+        list.setTotalResults(searchHits.getTotalHits().value);\n+\n+        for (SearchHit sh : searchHits.getHits()) {\n+            try{\n+                Map<String, Object> sourceMap = sh.getSourceAsMap();\n+                ContentletSearch conwrapper= new ContentletSearch();\n+                conwrapper.setId(sh.getId());\n+                conwrapper.setIndex(sh.getIndex());\n+                conwrapper.setIdentifier(sourceMap.get(\"identifier\").toString());\n+                conwrapper.setInode(sourceMap.get(\"inode\").toString());\n+                conwrapper.setScore(sh.getScore());\n+\n+                list.add(conwrapper);\n+            }\n+            catch(Exception e){", "originalCommit": "8249a7f8345054e6f59a96d16053da13c91fb798", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}