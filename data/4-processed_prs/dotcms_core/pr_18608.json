{"pr_number": 18608, "pr_title": "#18427 fixing bugs", "pr_createdAt": "2020-06-05T06:19:10Z", "pr_url": "https://github.com/dotCMS/core/pull/18608", "timeline": [{"oid": "e8e3b77860e27e387c739d7b1bb7a5432ece55eb", "url": "https://github.com/dotCMS/core/commit/e8e3b77860e27e387c739d7b1bb7a5432ece55eb", "message": "#18427 fixing bugs", "committedDate": "2020-06-05T06:18:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0MzUzOQ==", "url": "https://github.com/dotCMS/core/pull/18608#discussion_r435943539", "bodyText": "I think is weird a Precondition in a catch block", "author": "freddyucv", "createdAt": "2020-06-05T14:02:35Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "diffHunk": "@@ -120,28 +121,38 @@ private Contentlet getContentlet(final String inode,\n                                      final PageMode pageMode) throws DotDataException, DotSecurityException {\n \n         Contentlet contentlet = null;\n-        PageMode mode         = pageMode;\n+        try {\n+            PageMode mode = pageMode;\n \n-        if(UtilMethods.isSet(inode)) {\n+            if (UtilMethods.isSet(inode)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by inode: \" + inode);\n-            contentlet = this.contentletAPI.find\n-                    (inode, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by inode: \" + inode);\n+                contentlet = this.contentletAPI.find\n+                        (inode, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.notNull(contentlet, ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-        } else if (UtilMethods.isSet(identifier)) {\n+                DotPreconditions.notNull(contentlet, () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+            } else if (UtilMethods.isSet(identifier)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by identifier: \" + identifier);\n-            mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n-            final Optional<Contentlet> currentContentlet =  language <= 0?\n-                    Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n-                            sessionLanguage.get(), initDataObject.getUser() , mode.respectAnonPerms)):\n-                    this.contentletAPI.findContentletByIdentifierOrFallback\n-                            (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by identifier: \" + identifier);\n+                mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n+                final Optional<Contentlet> currentContentlet = language <= 0 ?\n+                        Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n+                                sessionLanguage.get(), initDataObject.getUser(), mode.respectAnonPerms)) :\n+                        this.contentletAPI.findContentletByIdentifierOrFallback\n+                                (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.isTrue(currentContentlet.isPresent(), ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-            contentlet = currentContentlet.get();\n+                DotPreconditions.isTrue(currentContentlet.isPresent(), () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+                contentlet = currentContentlet.get();\n \n+            }\n+        } catch (DoesNotExistException e) {\n+\n+            throw e;\n+        } catch(DotRuntimeException e) {\n+\n+            Logger.error(this, e.getMessage(), e);\n+            DotPreconditions.notNull(contentlet, () -> \"contentlet-was-not-found\", DoesNotExistException.class);", "originalCommit": "e8e3b77860e27e387c739d7b1bb7a5432ece55eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwMDI5NQ==", "url": "https://github.com/dotCMS/core/pull/18608#discussion_r436000295", "bodyText": "Yeah if we got a DotRuntimeException and the contentlet is null, means 404. Otherwise could be another thing, so throw the original exception", "author": "jdotcms", "createdAt": "2020-06-05T15:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk0MzUzOQ=="}], "type": "inlineReview"}, {"oid": "3059fbbee41dce94e203ff783bfa81f0c6cf78a1", "url": "https://github.com/dotCMS/core/commit/3059fbbee41dce94e203ff783bfa81f0c6cf78a1", "message": "#18427 404 postman test", "committedDate": "2020-06-05T16:31:43Z", "type": "commit"}, {"oid": "7da4ed5597f15a2c9d550f6775ef46c039dafe7d", "url": "https://github.com/dotCMS/core/commit/7da4ed5597f15a2c9d550f6775ef46c039dafe7d", "message": "#18427 feedback", "committedDate": "2020-06-05T19:26:31Z", "type": "commit"}, {"oid": "fef850e59cf48beedf7aee708e62a0ff534a3ef9", "url": "https://github.com/dotCMS/core/commit/fef850e59cf48beedf7aee708e62a0ff534a3ef9", "message": "#18427 fixing issues on resource link", "committedDate": "2020-06-08T16:16:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMjk3OA==", "url": "https://github.com/dotCMS/core/pull/18608#discussion_r436832978", "bodyText": "Issue found: A catch statement that catches an exception only to rethrow it should be avoided.", "author": "dev-dotcms", "createdAt": "2020-06-08T16:22:09Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/content/ResourceLinkResource.java", "diffHunk": "@@ -120,28 +134,38 @@ private Contentlet getContentlet(final String inode,\n                                      final PageMode pageMode) throws DotDataException, DotSecurityException {\n \n         Contentlet contentlet = null;\n-        PageMode mode         = pageMode;\n+        try {\n+            PageMode mode = pageMode;\n \n-        if(UtilMethods.isSet(inode)) {\n+            if (UtilMethods.isSet(inode)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by inode: \" + inode);\n-            contentlet = this.contentletAPI.find\n-                    (inode, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by inode: \" + inode);\n+                contentlet = this.contentletAPI.find\n+                        (inode, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.notNull(contentlet, ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-        } else if (UtilMethods.isSet(identifier)) {\n+                DotPreconditions.notNull(contentlet, () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+            } else if (UtilMethods.isSet(identifier)) {\n \n-            Logger.debug(this, ()-> \"Finding the contentlet by identifier: \" + identifier);\n-            mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n-            final Optional<Contentlet> currentContentlet =  language <= 0?\n-                    Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n-                            sessionLanguage.get(), initDataObject.getUser() , mode.respectAnonPerms)):\n-                    this.contentletAPI.findContentletByIdentifierOrFallback\n-                            (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n+                Logger.debug(this, () -> \"Finding the contentlet by identifier: \" + identifier);\n+                mode = PageMode.EDIT_MODE; // when asking for identifier it is always edit\n+                final Optional<Contentlet> currentContentlet = language <= 0 ?\n+                        Optional.ofNullable(this.contentletAPI.findContentletByIdentifier(identifier, mode.showLive,\n+                                sessionLanguage.get(), initDataObject.getUser(), mode.respectAnonPerms)) :\n+                        this.contentletAPI.findContentletByIdentifierOrFallback\n+                                (identifier, mode.showLive, language, initDataObject.getUser(), mode.respectAnonPerms);\n \n-            DotPreconditions.isTrue(currentContentlet.isPresent(), ()-> \"contentlet-was-not-found\", DoesNotExistException.class);\n-            contentlet = currentContentlet.get();\n+                DotPreconditions.isTrue(currentContentlet.isPresent(), () -> \"contentlet-was-not-found\", DoesNotExistException.class);\n+                contentlet = currentContentlet.get();\n \n+            }\n+        } catch (DoesNotExistException e) {", "originalCommit": "fef850e59cf48beedf7aee708e62a0ff534a3ef9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}