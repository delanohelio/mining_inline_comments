{"pr_number": 17934, "pr_title": "#17727 New starter fixes", "pr_createdAt": "2020-01-31T18:02:50Z", "pr_url": "https://github.com/dotCMS/core/pull/17934", "timeline": [{"oid": "45c90ccdd4ce3cea357532e7025f208638356e6c", "url": "https://github.com/dotCMS/core/commit/45c90ccdd4ce3cea357532e7025f208638356e6c", "message": "\"Drop Old Assets Versions\" drops now workflow history records.", "committedDate": "2020-01-23T22:58:25Z", "type": "commit"}, {"oid": "a96c01ba2f8bd0d503ea65b851ceb9885113a4da", "url": "https://github.com/dotCMS/core/commit/a96c01ba2f8bd0d503ea65b851ceb9885113a4da", "message": "Adding Jackson code in order to allow importing of rules", "committedDate": "2020-01-29T14:18:37Z", "type": "commit"}, {"oid": "e0e23ca34cc4026c449fcb839ce64e2a831dbfa6", "url": "https://github.com/dotCMS/core/commit/e0e23ca34cc4026c449fcb839ce64e2a831dbfa6", "message": "Changing Logger.info for debugs", "committedDate": "2020-01-31T15:36:36Z", "type": "commit"}, {"oid": "98ac8f09912b39e20c979b8a3b565c6ae88ddaed", "url": "https://github.com/dotCMS/core/commit/98ac8f09912b39e20c979b8a3b565c6ae88ddaed", "message": "#17727 Codacy feedback", "committedDate": "2020-02-03T16:28:39Z", "type": "commit"}, {"oid": "4de8907e1b167e308d08945dc05182e92a1da2a4", "url": "https://github.com/dotCMS/core/commit/4de8907e1b167e308d08945dc05182e92a1da2a4", "message": "#17727 Codacy feedback", "committedDate": "2020-02-03T16:43:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzA4Nw==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217087", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:43Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/RuleComponentDefinition.java", "diffHunk": "@@ -26,7 +31,20 @@\n     private final Map<String, ParameterDefinition> parameterDefinitions;\n \n     protected RuleComponentDefinition(String i18nKey, ParameterDefinition... parameterDefinitions) {\n-        this.id = this.getClass().getSimpleName();\n+        this(null, i18nKey, parameterDefinitions);\n+    }\n+\n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected RuleComponentDefinition(String id, String i18nKey,", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzA5OQ==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217099", "bodyText": "Issue found: Avoid assignments in operands", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:44Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/util/RulesImportExportUtil.java", "diffHunk": "@@ -83,69 +68,69 @@ public void export(File file) throws IOException {\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param file\n-\t * @throws IOException\n-\t */\n-\tpublic void importRules(File file) throws IOException {\n+\tpublic void importRules(final File file) throws IOException {\n \n-\t\tRulesAPI rapi = APILocator.getRulesAPI();\n+\t\tfinal ObjectMapper mapper = new ObjectMapper();\n+\t\tfinal StringWriter stringWriter = new StringWriter();\n+\n+\t\ttry (BufferedReader bufferedReader = Files.newBufferedReader(Paths.get(file.toURI()))) {\n \n-\t\tBufferedReader in = null;\n-\t\ttry {\n-\t\t\tUser user = APILocator.getUserAPI().getSystemUser();\n-\t\t\tFileReader fstream = new FileReader(file);\n-\t\t\tin = new BufferedReader(fstream);\n-\t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-\t\t\tStringWriter sw = new StringWriter();\n+\n \t\t\tString str;\n-\t\t\twhile ((str = in.readLine()) != null) {\n-\t\t\t\tsw.append(str);\n+\t\t\twhile ((str = bufferedReader.readLine()) != null) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzExMQ==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217111", "bodyText": "Issue found: Parameter 'id' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:45Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/conditionlet/Conditionlet.java", "diffHunk": "@@ -3,12 +3,50 @@\n import com.dotmarketing.portlets.rules.RuleComponentDefinition;\n import com.dotmarketing.portlets.rules.RuleComponentInstance;\n import com.dotmarketing.portlets.rules.parameter.ParameterDefinition;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n public abstract class Conditionlet<T extends RuleComponentInstance> extends RuleComponentDefinition<T> {\n \n     public static final String COMPARISON_KEY = \"comparison\";\n \n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected Conditionlet(String id, String i18nKey, final ParameterDefinition... parameterDefinitions) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzEyNQ==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217125", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:46Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/parameter/type/DataType.java", "diffHunk": "@@ -77,5 +89,57 @@ public void checkValid(String value){\n     public Map<String, TypeConstraint> getConstraints() {\n         return ImmutableMap.copyOf(this.restrictions);\n     }\n-}\n- \n+\n+    /**\n+     * Utility type used to correctly read immutable object from JSON representation.\n+     *\n+     * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonDeserialize\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE)\n+    static final class Json {\n+\n+        @javax.annotation.Nullable\n+        String id;", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzE0Nw==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217147", "bodyText": "Issue found: Parameter 'id' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:48Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/parameter/display/Input.java", "diffHunk": "@@ -32,5 +38,45 @@ public T getDataType() {\n     public void checkValid(String value)  throws InvalidRuleParameterException{\n     \treturn;\n     }\n-}\n \n+    /**\n+     * Utility type used to correctly read immutable object from JSON representation.\n+     *\n+     * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonDeserialize\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE)\n+    static final class Json {\n+\n+        @javax.annotation.Nullable\n+        String id;\n+        @javax.annotation.Nullable\n+        DataType dataType;\n+\n+        @JsonProperty(\"id\")\n+        public void setKey(@Nullable String id) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzE1Ng==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217156", "bodyText": "Issue found: Parameter 'parameters' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:49Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/conditionlet/Conditionlet.java", "diffHunk": "@@ -3,12 +3,50 @@\n import com.dotmarketing.portlets.rules.RuleComponentDefinition;\n import com.dotmarketing.portlets.rules.RuleComponentInstance;\n import com.dotmarketing.portlets.rules.parameter.ParameterDefinition;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n public abstract class Conditionlet<T extends RuleComponentInstance> extends RuleComponentDefinition<T> {\n \n     public static final String COMPARISON_KEY = \"comparison\";\n \n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected Conditionlet(String id, String i18nKey, final ParameterDefinition... parameterDefinitions) {\n+        super(id, i18nKey, parameterDefinitions);\n+    }\n+\n     protected Conditionlet(String i18nKey, ParameterDefinition... parameterDefinitions) {\n         super(i18nKey, parameterDefinitions);\n     }\n-}\n+\n+    /**\n+     * @param json A JSON-bindable data structure\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n+    static Conditionlet fromJson(RuleComponentDefinition.Json json) {\n+\n+        return new Conditionlet(json.id, json.i18nKey,\n+                json.parameterDefinitions.values().toArray(new ParameterDefinition[]{})) {\n+\n+            @Override\n+            public RuleComponentInstance instanceFrom(Map parameters) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzE2NQ==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217165", "bodyText": "Issue found: Parameter 'dataType' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:50Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/parameter/display/Input.java", "diffHunk": "@@ -32,5 +38,45 @@ public T getDataType() {\n     public void checkValid(String value)  throws InvalidRuleParameterException{\n     \treturn;\n     }\n-}\n \n+    /**\n+     * Utility type used to correctly read immutable object from JSON representation.\n+     *\n+     * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonDeserialize\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE)\n+    static final class Json {\n+\n+        @javax.annotation.Nullable\n+        String id;\n+        @javax.annotation.Nullable\n+        DataType dataType;\n+\n+        @JsonProperty(\"id\")\n+        public void setKey(@Nullable String id) {\n+            this.id = id;\n+        }\n+\n+        @JsonProperty(\"dataType\")\n+        public void setDataType(@Nullable DataType dataType) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzE3Ng==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217176", "bodyText": "Issue found: Parameter 'parent' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:52Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/util/RulesImportExportUtil.java", "diffHunk": "@@ -83,69 +68,69 @@ public void export(File file) throws IOException {\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param file\n-\t * @throws IOException\n-\t */\n-\tpublic void importRules(File file) throws IOException {\n+\tpublic void importRules(final File file) throws IOException {\n \n-\t\tRulesAPI rapi = APILocator.getRulesAPI();\n+\t\tfinal ObjectMapper mapper = new ObjectMapper();\n+\t\tfinal StringWriter stringWriter = new StringWriter();\n+\n+\t\ttry (BufferedReader bufferedReader = Files.newBufferedReader(Paths.get(file.toURI()))) {\n \n-\t\tBufferedReader in = null;\n-\t\ttry {\n-\t\t\tUser user = APILocator.getUserAPI().getSystemUser();\n-\t\t\tFileReader fstream = new FileReader(file);\n-\t\t\tin = new BufferedReader(fstream);\n-\t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-\t\t\tStringWriter sw = new StringWriter();\n+\n \t\t\tString str;\n-\t\t\twhile ((str = in.readLine()) != null) {\n-\t\t\t\tsw.append(str);\n+\t\t\twhile ((str = bufferedReader.readLine()) != null) {\n+\t\t\t\tstringWriter.append(str);\n \t\t\t}\n \n-\t\t\tRulesImportExportObject importer = mapper.readValue(sw.toString(), RulesImportExportObject.class);\n+\t\t\tRulesImportExportObject importer = mapper.readValue\n+\t\t\t\t\t((String) stringWriter.toString(), RulesImportExportObject.class);\n+\n+\t\t\tthis.importRules(importer, APILocator.systemUser());\n+\t\t} catch (Exception e) {\n+\t\t\tLogger.error(this.getClass(), \"Error: \" + e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@WrapInTransaction\n+\tpublic void importRules(final RulesImportExportObject importer,\n+\t\t\tfinal User user) throws IOException, DotDataException {\n+\n+\t\ttry {\n+\t\t\tfinal RulesAPI rulesAPI = APILocator.getRulesAPI();\n \n \t\t\t//Saving the rules.\n \t\t\tfor (Rule rule : importer.getRules()) {\n \t\t\t\trule.setParentPermissionable(RulePermissionableUtil.findParentPermissionable(rule.getParent()));\n-\t\t\t\trapi.saveRule(rule, user, false);\n+\t\t\t\trulesAPI.saveRule(rule, user, false);\n \n \t\t\t\t//Saving the Condition Groups.\n \t\t\t\tfor (ConditionGroup group : rule.getGroups()) {\n-\t\t\t\t\trapi.saveConditionGroup(group, user, false);\n+\t\t\t\t\trulesAPI.saveConditionGroup(group, user, false);\n \t\t\t\t\t//Saving the Condition for each group.\n \t\t\t\t\tfor (Condition condition : group.getConditions()) {\n-\t\t\t\t\t\trapi.saveCondition(condition, user, false);\n+\t\t\t\t\t\trulesAPI.saveCondition(condition, user, false);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t//Saving the Action.\n \t\t\t\tfor (RuleAction action : rule.getRuleActions()) {\n-\t\t\t\t\trapi.saveRuleAction(action, user, false);\n+\t\t\t\t\trulesAPI.saveRuleAction(action, user, false);\n \t\t\t\t}\n \t\t\t}\n-\n \t\t} catch (Exception e) {\n \t\t\tLogger.error(this.getClass(), \"Error: \" + e.getMessage(), e);\n-\t\t} finally {\n-\t\t\tin.close();\n+\t\t\tthrow new DotDataException(e);\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param parent\n-\t * @return\n-\t * @throws DotDataException\n-\t * @throws DotSecurityException\n-\t */\n-\tpublic RulesImportExportObject buildExportObject(Ruleable parent) throws DotDataException, DotSecurityException {\n+\t@CloseDBIfOpened\n+\tpublic RulesImportExportObject buildExportObject(Ruleable parent)", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzE5NA==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217194", "bodyText": "Issue found: Parameter 'parameterDefinitions' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:53Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/RuleComponentDefinition.java", "diffHunk": "@@ -26,7 +31,20 @@\n     private final Map<String, ParameterDefinition> parameterDefinitions;\n \n     protected RuleComponentDefinition(String i18nKey, ParameterDefinition... parameterDefinitions) {\n-        this.id = this.getClass().getSimpleName();\n+        this(null, i18nKey, parameterDefinitions);\n+    }\n+\n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected RuleComponentDefinition(String id, String i18nKey,\n+            ParameterDefinition... parameterDefinitions) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzIwNQ==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217205", "bodyText": "Issue found: Avoid reassigning parameters such as 'id'", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:54Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/RuleComponentDefinition.java", "diffHunk": "@@ -26,7 +31,20 @@\n     private final Map<String, ParameterDefinition> parameterDefinitions;\n \n     protected RuleComponentDefinition(String i18nKey, ParameterDefinition... parameterDefinitions) {\n-        this.id = this.getClass().getSimpleName();\n+        this(null, i18nKey, parameterDefinitions);\n+    }\n+\n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected RuleComponentDefinition(String id, String i18nKey,", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzIxMA==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217210", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:55Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/parameter/display/Input.java", "diffHunk": "@@ -32,5 +38,45 @@ public T getDataType() {\n     public void checkValid(String value)  throws InvalidRuleParameterException{\n     \treturn;\n     }\n-}\n \n+    /**\n+     * Utility type used to correctly read immutable object from JSON representation.\n+     *\n+     * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonDeserialize\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE)\n+    static final class Json {\n+\n+        @javax.annotation.Nullable\n+        String id;\n+        @javax.annotation.Nullable\n+        DataType dataType;\n+\n+        @JsonProperty(\"id\")\n+        public void setKey(@Nullable String id) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzIyMg==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217222", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:56Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/parameter/type/DataType.java", "diffHunk": "@@ -23,6 +29,12 @@ public DataType(String id, String errorMessageKey) {\n         this.errorMessageKey = errorMessageKey;\n     }\n \n+    public DataType(String id, String errorMessageKey, Map<String, TypeConstraint> restrictions) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzI0MQ==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217241", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:57Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/RuleComponentDefinition.java", "diffHunk": "@@ -120,5 +138,41 @@ public String toLogString(){\n     }\n \n     public abstract boolean evaluate(HttpServletRequest request, HttpServletResponse response, T instance);\n-}\n \n+    /**\n+     * Utility type used to correctly read immutable object from JSON representation.\n+     *\n+     * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonDeserialize\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE)\n+    static protected final class Json {\n+\n+        @javax.annotation.Nullable\n+        public String id;", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzI1Ng==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217256", "bodyText": "Issue found: Parameter 'restrictions' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:51:59Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/parameter/type/DataType.java", "diffHunk": "@@ -77,5 +89,57 @@ public void checkValid(String value){\n     public Map<String, TypeConstraint> getConstraints() {\n         return ImmutableMap.copyOf(this.restrictions);\n     }\n-}\n- \n+\n+    /**\n+     * Utility type used to correctly read immutable object from JSON representation.\n+     *\n+     * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonDeserialize\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE)\n+    static final class Json {\n+\n+        @javax.annotation.Nullable\n+        String id;\n+        @javax.annotation.Nullable\n+        String errorMessageKey;\n+        @javax.annotation.Nullable\n+        Map<String, TypeConstraint> restrictions;\n+\n+        @JsonProperty(\"id\")\n+        public void setKey(@Nullable final String id) {\n+            this.id = id;\n+        }\n+\n+        @JsonProperty(\"errorMessageKey\")\n+        public void setDataType(@Nullable final String errorMessageKey) {\n+            this.errorMessageKey = errorMessageKey;\n+        }\n+\n+        @JsonProperty(\"constraints\")\n+        public void setRestrictions(@Nullable Map<String, TypeConstraint> restrictions) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzI2OA==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217268", "bodyText": "Issue found: Parameter 'restrictions' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:00Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/parameter/type/DataType.java", "diffHunk": "@@ -23,6 +29,12 @@ public DataType(String id, String errorMessageKey) {\n         this.errorMessageKey = errorMessageKey;\n     }\n \n+    public DataType(String id, String errorMessageKey, Map<String, TypeConstraint> restrictions) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzI3Ng==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217276", "bodyText": "Issue found: Parameter 'i18nKey' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:01Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/RuleComponentDefinition.java", "diffHunk": "@@ -26,7 +31,20 @@\n     private final Map<String, ParameterDefinition> parameterDefinitions;\n \n     protected RuleComponentDefinition(String i18nKey, ParameterDefinition... parameterDefinitions) {\n-        this.id = this.getClass().getSimpleName();\n+        this(null, i18nKey, parameterDefinitions);\n+    }\n+\n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected RuleComponentDefinition(String id, String i18nKey,", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzI4OA==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217288", "bodyText": "Issue found: Local variable 'rules' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:02Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/util/RulesImportExportUtil.java", "diffHunk": "@@ -83,69 +68,69 @@ public void export(File file) throws IOException {\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param file\n-\t * @throws IOException\n-\t */\n-\tpublic void importRules(File file) throws IOException {\n+\tpublic void importRules(final File file) throws IOException {\n \n-\t\tRulesAPI rapi = APILocator.getRulesAPI();\n+\t\tfinal ObjectMapper mapper = new ObjectMapper();\n+\t\tfinal StringWriter stringWriter = new StringWriter();\n+\n+\t\ttry (BufferedReader bufferedReader = Files.newBufferedReader(Paths.get(file.toURI()))) {\n \n-\t\tBufferedReader in = null;\n-\t\ttry {\n-\t\t\tUser user = APILocator.getUserAPI().getSystemUser();\n-\t\t\tFileReader fstream = new FileReader(file);\n-\t\t\tin = new BufferedReader(fstream);\n-\t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-\t\t\tStringWriter sw = new StringWriter();\n+\n \t\t\tString str;\n-\t\t\twhile ((str = in.readLine()) != null) {\n-\t\t\t\tsw.append(str);\n+\t\t\twhile ((str = bufferedReader.readLine()) != null) {\n+\t\t\t\tstringWriter.append(str);\n \t\t\t}\n \n-\t\t\tRulesImportExportObject importer = mapper.readValue(sw.toString(), RulesImportExportObject.class);\n+\t\t\tRulesImportExportObject importer = mapper.readValue\n+\t\t\t\t\t((String) stringWriter.toString(), RulesImportExportObject.class);\n+\n+\t\t\tthis.importRules(importer, APILocator.systemUser());\n+\t\t} catch (Exception e) {\n+\t\t\tLogger.error(this.getClass(), \"Error: \" + e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@WrapInTransaction\n+\tpublic void importRules(final RulesImportExportObject importer,\n+\t\t\tfinal User user) throws IOException, DotDataException {\n+\n+\t\ttry {\n+\t\t\tfinal RulesAPI rulesAPI = APILocator.getRulesAPI();\n \n \t\t\t//Saving the rules.\n \t\t\tfor (Rule rule : importer.getRules()) {\n \t\t\t\trule.setParentPermissionable(RulePermissionableUtil.findParentPermissionable(rule.getParent()));\n-\t\t\t\trapi.saveRule(rule, user, false);\n+\t\t\t\trulesAPI.saveRule(rule, user, false);\n \n \t\t\t\t//Saving the Condition Groups.\n \t\t\t\tfor (ConditionGroup group : rule.getGroups()) {\n-\t\t\t\t\trapi.saveConditionGroup(group, user, false);\n+\t\t\t\t\trulesAPI.saveConditionGroup(group, user, false);\n \t\t\t\t\t//Saving the Condition for each group.\n \t\t\t\t\tfor (Condition condition : group.getConditions()) {\n-\t\t\t\t\t\trapi.saveCondition(condition, user, false);\n+\t\t\t\t\t\trulesAPI.saveCondition(condition, user, false);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t//Saving the Action.\n \t\t\t\tfor (RuleAction action : rule.getRuleActions()) {\n-\t\t\t\t\trapi.saveRuleAction(action, user, false);\n+\t\t\t\t\trulesAPI.saveRuleAction(action, user, false);\n \t\t\t\t}\n \t\t\t}\n-\n \t\t} catch (Exception e) {\n \t\t\tLogger.error(this.getClass(), \"Error: \" + e.getMessage(), e);\n-\t\t} finally {\n-\t\t\tin.close();\n+\t\t\tthrow new DotDataException(e);\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param parent\n-\t * @return\n-\t * @throws DotDataException\n-\t * @throws DotSecurityException\n-\t */\n-\tpublic RulesImportExportObject buildExportObject(Ruleable parent) throws DotDataException, DotSecurityException {\n+\t@CloseDBIfOpened\n+\tpublic RulesImportExportObject buildExportObject(Ruleable parent)\n+\t\t\tthrows DotDataException, DotSecurityException {\n \n-\t\tRulesAPI rapi = APILocator.getRulesAPI();\n+\t\tRulesAPI rulesAPI = APILocator.getRulesAPI();\n \t\tUser user = APILocator.getUserAPI().getSystemUser();\n \n-\t\tList<Rule> rules = (parent == null) ? rapi.getAllRules(user, false) : rapi.getAllRulesByParent(parent, user, false);\n+\t\tList<Rule> rules = (parent == null) ? rulesAPI.getAllRules(user, false)", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzMwMA==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217300", "bodyText": "Issue found: Parameter 'json' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:04Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/conditionlet/Conditionlet.java", "diffHunk": "@@ -3,12 +3,50 @@\n import com.dotmarketing.portlets.rules.RuleComponentDefinition;\n import com.dotmarketing.portlets.rules.RuleComponentInstance;\n import com.dotmarketing.portlets.rules.parameter.ParameterDefinition;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n public abstract class Conditionlet<T extends RuleComponentInstance> extends RuleComponentDefinition<T> {\n \n     public static final String COMPARISON_KEY = \"comparison\";\n \n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected Conditionlet(String id, String i18nKey, final ParameterDefinition... parameterDefinitions) {\n+        super(id, i18nKey, parameterDefinitions);\n+    }\n+\n     protected Conditionlet(String i18nKey, ParameterDefinition... parameterDefinitions) {\n         super(i18nKey, parameterDefinitions);\n     }\n-}\n+\n+    /**\n+     * @param json A JSON-bindable data structure\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n+    static Conditionlet fromJson(RuleComponentDefinition.Json json) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzMxMw==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217313", "bodyText": "Issue found: Parameter 'parameterDefinitions' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:05Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/RuleComponentDefinition.java", "diffHunk": "@@ -120,5 +138,41 @@ public String toLogString(){\n     }\n \n     public abstract boolean evaluate(HttpServletRequest request, HttpServletResponse response, T instance);\n-}\n \n+    /**\n+     * Utility type used to correctly read immutable object from JSON representation.\n+     *\n+     * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonDeserialize\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE)\n+    static protected final class Json {\n+\n+        @javax.annotation.Nullable\n+        public String id;\n+        @javax.annotation.Nullable\n+        public String i18nKey;\n+        @javax.annotation.Nullable\n+        public Map<String, ParameterDefinition> parameterDefinitions;\n+\n+        @JsonProperty(\"id\")\n+        public void setId(@Nullable final String id) {\n+            this.id = id;\n+        }\n+\n+        @JsonProperty(\"i18nKey\")\n+        public void setI18nKey(@Nullable final String i18nKey) {\n+            this.i18nKey = i18nKey;\n+        }\n+\n+        @JsonProperty(\"parameterDefinitions\")\n+        public void setParameterDefinitions(\n+                @Nullable Map<String, ParameterDefinition> parameterDefinitions) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzMyNw==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217327", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:07Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/conditionlet/Conditionlet.java", "diffHunk": "@@ -3,12 +3,50 @@\n import com.dotmarketing.portlets.rules.RuleComponentDefinition;\n import com.dotmarketing.portlets.rules.RuleComponentInstance;\n import com.dotmarketing.portlets.rules.parameter.ParameterDefinition;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n public abstract class Conditionlet<T extends RuleComponentInstance> extends RuleComponentDefinition<T> {\n \n     public static final String COMPARISON_KEY = \"comparison\";\n \n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected Conditionlet(String id, String i18nKey, final ParameterDefinition... parameterDefinitions) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM0Mw==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217343", "bodyText": "Issue found: Parameter 'response' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:08Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/conditionlet/Conditionlet.java", "diffHunk": "@@ -3,12 +3,50 @@\n import com.dotmarketing.portlets.rules.RuleComponentDefinition;\n import com.dotmarketing.portlets.rules.RuleComponentInstance;\n import com.dotmarketing.portlets.rules.parameter.ParameterDefinition;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n public abstract class Conditionlet<T extends RuleComponentInstance> extends RuleComponentDefinition<T> {\n \n     public static final String COMPARISON_KEY = \"comparison\";\n \n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected Conditionlet(String id, String i18nKey, final ParameterDefinition... parameterDefinitions) {\n+        super(id, i18nKey, parameterDefinitions);\n+    }\n+\n     protected Conditionlet(String i18nKey, ParameterDefinition... parameterDefinitions) {\n         super(i18nKey, parameterDefinitions);\n     }\n-}\n+\n+    /**\n+     * @param json A JSON-bindable data structure\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n+    static Conditionlet fromJson(RuleComponentDefinition.Json json) {\n+\n+        return new Conditionlet(json.id, json.i18nKey,\n+                json.parameterDefinitions.values().toArray(new ParameterDefinition[]{})) {\n+\n+            @Override\n+            public RuleComponentInstance instanceFrom(Map parameters) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public boolean evaluate(HttpServletRequest request, HttpServletResponse response,", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM1MA==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217350", "bodyText": "Issue found: Local variable 'importer' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:09Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/util/RulesImportExportUtil.java", "diffHunk": "@@ -83,69 +68,69 @@ public void export(File file) throws IOException {\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param file\n-\t * @throws IOException\n-\t */\n-\tpublic void importRules(File file) throws IOException {\n+\tpublic void importRules(final File file) throws IOException {\n \n-\t\tRulesAPI rapi = APILocator.getRulesAPI();\n+\t\tfinal ObjectMapper mapper = new ObjectMapper();\n+\t\tfinal StringWriter stringWriter = new StringWriter();\n+\n+\t\ttry (BufferedReader bufferedReader = Files.newBufferedReader(Paths.get(file.toURI()))) {\n \n-\t\tBufferedReader in = null;\n-\t\ttry {\n-\t\t\tUser user = APILocator.getUserAPI().getSystemUser();\n-\t\t\tFileReader fstream = new FileReader(file);\n-\t\t\tin = new BufferedReader(fstream);\n-\t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-\t\t\tStringWriter sw = new StringWriter();\n+\n \t\t\tString str;\n-\t\t\twhile ((str = in.readLine()) != null) {\n-\t\t\t\tsw.append(str);\n+\t\t\twhile ((str = bufferedReader.readLine()) != null) {\n+\t\t\t\tstringWriter.append(str);\n \t\t\t}\n \n-\t\t\tRulesImportExportObject importer = mapper.readValue(sw.toString(), RulesImportExportObject.class);\n+\t\t\tRulesImportExportObject importer = mapper.readValue", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM1OA==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217358", "bodyText": "Issue found: Avoid variables with short names like id", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:11Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/parameter/type/DataType.java", "diffHunk": "@@ -77,5 +89,57 @@ public void checkValid(String value){\n     public Map<String, TypeConstraint> getConstraints() {\n         return ImmutableMap.copyOf(this.restrictions);\n     }\n-}\n- \n+\n+    /**\n+     * Utility type used to correctly read immutable object from JSON representation.\n+     *\n+     * @deprecated Do not use this type directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonDeserialize\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.NONE)\n+    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.NONE)\n+    static final class Json {\n+\n+        @javax.annotation.Nullable\n+        String id;\n+        @javax.annotation.Nullable\n+        String errorMessageKey;\n+        @javax.annotation.Nullable\n+        Map<String, TypeConstraint> restrictions;\n+\n+        @JsonProperty(\"id\")\n+        public void setKey(@Nullable final String id) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM3MQ==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217371", "bodyText": "Issue found: Parameter 'instance' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:12Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/conditionlet/Conditionlet.java", "diffHunk": "@@ -3,12 +3,50 @@\n import com.dotmarketing.portlets.rules.RuleComponentDefinition;\n import com.dotmarketing.portlets.rules.RuleComponentInstance;\n import com.dotmarketing.portlets.rules.parameter.ParameterDefinition;\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import java.util.Map;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n \n public abstract class Conditionlet<T extends RuleComponentInstance> extends RuleComponentDefinition<T> {\n \n     public static final String COMPARISON_KEY = \"comparison\";\n \n+    /**\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    protected Conditionlet(String id, String i18nKey, final ParameterDefinition... parameterDefinitions) {\n+        super(id, i18nKey, parameterDefinitions);\n+    }\n+\n     protected Conditionlet(String i18nKey, ParameterDefinition... parameterDefinitions) {\n         super(i18nKey, parameterDefinitions);\n     }\n-}\n+\n+    /**\n+     * @param json A JSON-bindable data structure\n+     * @deprecated Do not use this method directly, it exists only for the <em>Jackson</em>-binding\n+     * infrastructure\n+     */\n+    @Deprecated\n+    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)\n+    static Conditionlet fromJson(RuleComponentDefinition.Json json) {\n+\n+        return new Conditionlet(json.id, json.i18nKey,\n+                json.parameterDefinitions.values().toArray(new ParameterDefinition[]{})) {\n+\n+            @Override\n+            public RuleComponentInstance instanceFrom(Map parameters) {\n+                throw new UnsupportedOperationException();\n+            }\n+\n+            @Override\n+            public boolean evaluate(HttpServletRequest request, HttpServletResponse response,\n+                    RuleComponentInstance instance) {", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIxNzM4Mg==", "url": "https://github.com/dotCMS/core/pull/17934#discussion_r374217382", "bodyText": "Issue found: Local variable 'rulesAPI' could be declared final", "author": "dev-dotcms", "createdAt": "2020-02-03T16:52:13Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/rules/util/RulesImportExportUtil.java", "diffHunk": "@@ -83,69 +68,69 @@ public void export(File file) throws IOException {\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param file\n-\t * @throws IOException\n-\t */\n-\tpublic void importRules(File file) throws IOException {\n+\tpublic void importRules(final File file) throws IOException {\n \n-\t\tRulesAPI rapi = APILocator.getRulesAPI();\n+\t\tfinal ObjectMapper mapper = new ObjectMapper();\n+\t\tfinal StringWriter stringWriter = new StringWriter();\n+\n+\t\ttry (BufferedReader bufferedReader = Files.newBufferedReader(Paths.get(file.toURI()))) {\n \n-\t\tBufferedReader in = null;\n-\t\ttry {\n-\t\t\tUser user = APILocator.getUserAPI().getSystemUser();\n-\t\t\tFileReader fstream = new FileReader(file);\n-\t\t\tin = new BufferedReader(fstream);\n-\t\t\tObjectMapper mapper = new ObjectMapper();\n \t\t\tmapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n-\t\t\tStringWriter sw = new StringWriter();\n+\n \t\t\tString str;\n-\t\t\twhile ((str = in.readLine()) != null) {\n-\t\t\t\tsw.append(str);\n+\t\t\twhile ((str = bufferedReader.readLine()) != null) {\n+\t\t\t\tstringWriter.append(str);\n \t\t\t}\n \n-\t\t\tRulesImportExportObject importer = mapper.readValue(sw.toString(), RulesImportExportObject.class);\n+\t\t\tRulesImportExportObject importer = mapper.readValue\n+\t\t\t\t\t((String) stringWriter.toString(), RulesImportExportObject.class);\n+\n+\t\t\tthis.importRules(importer, APILocator.systemUser());\n+\t\t} catch (Exception e) {\n+\t\t\tLogger.error(this.getClass(), \"Error: \" + e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@WrapInTransaction\n+\tpublic void importRules(final RulesImportExportObject importer,\n+\t\t\tfinal User user) throws IOException, DotDataException {\n+\n+\t\ttry {\n+\t\t\tfinal RulesAPI rulesAPI = APILocator.getRulesAPI();\n \n \t\t\t//Saving the rules.\n \t\t\tfor (Rule rule : importer.getRules()) {\n \t\t\t\trule.setParentPermissionable(RulePermissionableUtil.findParentPermissionable(rule.getParent()));\n-\t\t\t\trapi.saveRule(rule, user, false);\n+\t\t\t\trulesAPI.saveRule(rule, user, false);\n \n \t\t\t\t//Saving the Condition Groups.\n \t\t\t\tfor (ConditionGroup group : rule.getGroups()) {\n-\t\t\t\t\trapi.saveConditionGroup(group, user, false);\n+\t\t\t\t\trulesAPI.saveConditionGroup(group, user, false);\n \t\t\t\t\t//Saving the Condition for each group.\n \t\t\t\t\tfor (Condition condition : group.getConditions()) {\n-\t\t\t\t\t\trapi.saveCondition(condition, user, false);\n+\t\t\t\t\t\trulesAPI.saveCondition(condition, user, false);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\t//Saving the Action.\n \t\t\t\tfor (RuleAction action : rule.getRuleActions()) {\n-\t\t\t\t\trapi.saveRuleAction(action, user, false);\n+\t\t\t\t\trulesAPI.saveRuleAction(action, user, false);\n \t\t\t\t}\n \t\t\t}\n-\n \t\t} catch (Exception e) {\n \t\t\tLogger.error(this.getClass(), \"Error: \" + e.getMessage(), e);\n-\t\t} finally {\n-\t\t\tin.close();\n+\t\t\tthrow new DotDataException(e);\n \t\t}\n \t}\n \n-\t/**\n-\t * \n-\t * @param parent\n-\t * @return\n-\t * @throws DotDataException\n-\t * @throws DotSecurityException\n-\t */\n-\tpublic RulesImportExportObject buildExportObject(Ruleable parent) throws DotDataException, DotSecurityException {\n+\t@CloseDBIfOpened\n+\tpublic RulesImportExportObject buildExportObject(Ruleable parent)\n+\t\t\tthrows DotDataException, DotSecurityException {\n \n-\t\tRulesAPI rapi = APILocator.getRulesAPI();\n+\t\tRulesAPI rulesAPI = APILocator.getRulesAPI();", "originalCommit": "4de8907e1b167e308d08945dc05182e92a1da2a4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}