{"pr_number": 17989, "pr_title": "Issue 17515 graphql reserved names for certain types", "pr_createdAt": "2020-02-13T00:13:39Z", "pr_url": "https://github.com/dotCMS/core/pull/17989", "timeline": [{"oid": "23b317623c96d6428e7981d081cb339feab371a1", "url": "https://github.com/dotCMS/core/commit/23b317623c96d6428e7981d081cb339feab371a1", "message": "#17515 determine if field name and type will clash with graphql inherited fields", "committedDate": "2020-02-12T19:12:19Z", "type": "commit"}, {"oid": "d579c06fd1134932718bae5bb7bd37a520c3a28f", "url": "https://github.com/dotCMS/core/commit/d579c06fd1134932718bae5bb7bd37a520c3a28f", "message": "#17515 better comment", "committedDate": "2020-02-12T19:15:55Z", "type": "commit"}, {"oid": "996925cade7d1b3f6c0d0de39259fdb40dbac9e2", "url": "https://github.com/dotCMS/core/commit/996925cade7d1b3f6c0d0de39259fdb40dbac9e2", "message": "#17515 add integration tests", "committedDate": "2020-02-13T00:12:19Z", "type": "commit"}, {"oid": "b8bd039abbc50bb734d05fa249ff9cb2f00ba647", "url": "https://github.com/dotCMS/core/commit/b8bd039abbc50bb734d05fa249ff9cb2f00ba647", "message": "#17515 more test cases", "committedDate": "2020-02-13T17:53:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAyOTM5MQ==", "url": "https://github.com/dotCMS/core/pull/17989#discussion_r379029391", "bodyText": "please, remove this comment", "author": "nollymar", "createdAt": "2020-02-13T18:07:10Z", "path": "dotCMS/src/main/java/com/dotcms/contenttype/business/FieldFactoryImpl.java", "diffHunk": "@@ -588,7 +593,7 @@ public String suggestVelocityVar( String tryVar, List<String> takenFieldsVariabl\n \n     // adds the GraphQL Reserved field names to the \"taken fields variables\" list\n     final List<String> forbiddenFieldVariables = new ArrayList<>(takenFieldsVariables);\n-    forbiddenFieldVariables.addAll(GraphQLUtil.getFieldReservedWords());\n+//    forbiddenFieldVariables.addAll(GraphQLUtil.getFieldReservedWords());", "originalCommit": "b8bd039abbc50bb734d05fa249ff9cb2f00ba647", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3bb8214d1fea3c23a2c7bceaba851ee40a363b2b", "url": "https://github.com/dotCMS/core/commit/3bb8214d1fea3c23a2c7bceaba851ee40a363b2b", "message": "#17515 codacy and code-review", "committedDate": "2020-02-13T19:27:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NTA2NA==", "url": "https://github.com/dotCMS/core/pull/17989#discussion_r379075064", "bodyText": "Issue found: Avoid throwing raw exception types.", "author": "dev-dotcms", "createdAt": "2020-02-13T19:34:39Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1045,56 +1066,263 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n         }\n     }\n \n-    @DataProvider\n+\n+    @DataProvider(format = \"%m: %p[0]\")\n     public static Object[] dataProviderGraphQLReservedNames() {\n-        return GraphQLUtil.getFieldReservedWords().toArray();\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModDateIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModDateIncompatible.fieldName = MOD_DATE;\n+        caseModDateIncompatible.fieldType = ImmutableBinaryField.class;\n+        caseModDateIncompatible.shouldCreateNewVariable = true;\n+        caseModDateIncompatible.testCaseName = \"caseModDateIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModDateCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModDateCompatible.fieldName = MOD_DATE;\n+        caseModDateCompatible.fieldType = ImmutableDateField.class;\n+        caseModDateCompatible.shouldCreateNewVariable = false;\n+        caseModDateCompatible.testCaseName = \"caseModDateCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleIncompatible.fieldName = TITLE;\n+        caseTitleIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseTitleIncompatible.shouldCreateNewVariable = true;\n+        caseTitleIncompatible.testCaseName = \"caseTitleIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleCompatible.fieldName = TITLE;\n+        caseTitleCompatible.fieldType = ImmutableTextField.class;\n+        caseTitleCompatible.shouldCreateNewVariable = false;\n+        caseTitleCompatible.testCaseName = \"caseTitleCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleImageIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleImageIncompatible.fieldName = TITLE_IMAGE_KEY;\n+        caseTitleImageIncompatible.fieldType = ImmutableHostFolderField.class;\n+        caseTitleImageIncompatible.shouldCreateNewVariable = true;\n+        caseTitleImageIncompatible.testCaseName = \"caseTitleImageIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleImageCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleImageCompatible.fieldName = TITLE_IMAGE_KEY;\n+        caseTitleImageCompatible.fieldType = ImmutableBinaryField.class;\n+        caseTitleImageCompatible.shouldCreateNewVariable = false;\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseContentTypeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseContentTypeIncompatible.fieldName = CONTENT_TYPE;\n+        caseContentTypeIncompatible.fieldType = ImmutableHostFolderField.class;\n+        caseContentTypeIncompatible.shouldCreateNewVariable = true;\n+        caseContentTypeIncompatible.testCaseName = \"caseContentTypeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseContentTypeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseContentTypeCompatible.fieldName = CONTENT_TYPE;\n+        caseContentTypeCompatible.fieldType = ImmutableTextField.class;\n+        caseContentTypeCompatible.shouldCreateNewVariable = false;\n+        caseContentTypeCompatible.testCaseName = \"caseContentTypeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseBaseTypeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseBaseTypeIncompatible.fieldName = BASE_TYPE;\n+        caseBaseTypeIncompatible.fieldType = ImmutableKeyValueField.class;\n+        caseBaseTypeIncompatible.shouldCreateNewVariable = true;\n+        caseBaseTypeIncompatible.testCaseName = \"caseBaseTypeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseBaseTypeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseBaseTypeCompatible.fieldName = BASE_TYPE;\n+        caseBaseTypeCompatible.fieldType = ImmutableTextField.class;\n+        caseBaseTypeCompatible.shouldCreateNewVariable = false;\n+        caseBaseTypeCompatible.testCaseName = \"caseBaseTypeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLiveIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLiveIncompatible.fieldName = LIVE;\n+        caseLiveIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseLiveIncompatible.shouldCreateNewVariable = true;\n+        caseLiveIncompatible.testCaseName = \"caseLiveIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLiveCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLiveCompatible.fieldName = LIVE;\n+        caseLiveCompatible.fieldType = ImmutableTextField.class;\n+        caseLiveCompatible.shouldCreateNewVariable = false;\n+        caseLiveCompatible.testCaseName = \"caseLiveCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseWorkingIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseWorkingIncompatible.fieldName = WORKING;\n+        caseWorkingIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseWorkingIncompatible.shouldCreateNewVariable = true;\n+        caseWorkingIncompatible.testCaseName = \"caseWorkingIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseWorkingCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseWorkingCompatible.fieldName = WORKING;\n+        caseWorkingCompatible.fieldType = ImmutableTextField.class;\n+        caseWorkingCompatible.shouldCreateNewVariable = false;\n+        caseWorkingCompatible.testCaseName = \"caseWorkingCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseArchivedIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseArchivedIncompatible.fieldName = ARCHIVED_KEY;\n+        caseArchivedIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseArchivedIncompatible.shouldCreateNewVariable = true;\n+        caseArchivedIncompatible.testCaseName = \"caseArchivedIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseArchivedCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseArchivedCompatible.fieldName = ARCHIVED_KEY;\n+        caseArchivedCompatible.fieldType = ImmutableTextField.class;\n+        caseArchivedCompatible.shouldCreateNewVariable = false;\n+        caseArchivedCompatible.testCaseName = \"caseArchivedCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLockedIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLockedIncompatible.fieldName = LOCKED_KEY;\n+        caseLockedIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseLockedIncompatible.shouldCreateNewVariable = true;\n+        caseLockedIncompatible.testCaseName = \"caseLockedIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLockedCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLockedCompatible.fieldName = LOCKED_KEY;\n+        caseLockedCompatible.fieldType = ImmutableTextField.class;\n+        caseLockedCompatible.shouldCreateNewVariable = false;\n+        caseLockedCompatible.testCaseName = \"caseLockedCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseConLanguageIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseConLanguageIncompatible.fieldName = \"conLanguage\";\n+        caseConLanguageIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseConLanguageIncompatible.shouldCreateNewVariable = true;\n+        caseConLanguageIncompatible.testCaseName = \"caseConLanguageIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseIdentifierIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseIdentifierIncompatible.fieldName = IDENTIFIER;\n+        caseIdentifierIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseIdentifierIncompatible.shouldCreateNewVariable = true;\n+        caseIdentifierIncompatible.testCaseName = \"caseIdentifierIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseIdentifierCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseIdentifierCompatible.fieldName = IDENTIFIER;\n+        caseIdentifierCompatible.fieldType = ImmutableTextField.class;\n+        caseIdentifierCompatible.shouldCreateNewVariable = false;\n+        caseIdentifierCompatible.testCaseName = \"caseIdentifierCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseInodeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseInodeIncompatible.fieldName = INODE;\n+        caseInodeIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseInodeIncompatible.shouldCreateNewVariable = true;\n+        caseInodeIncompatible.testCaseName = \"caseInodeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseInodeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseInodeCompatible.fieldName = INODE;\n+        caseInodeCompatible.fieldType = ImmutableTextField.class;\n+        caseInodeCompatible.shouldCreateNewVariable = false;\n+        caseInodeCompatible.testCaseName = \"caseInodeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseHostIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseHostIncompatible.fieldName = HOST_KEY;\n+        caseHostIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseHostIncompatible.shouldCreateNewVariable = true;\n+        caseHostIncompatible.testCaseName = \"caseHostIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseFolderIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseFolderIncompatible.fieldName = FOLDER_KEY;\n+        caseFolderIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseFolderIncompatible.shouldCreateNewVariable = true;\n+        caseFolderIncompatible.testCaseName = \"caseFolderIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseUrlMapIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseUrlMapIncompatible.fieldName = URL_MAP;\n+        caseUrlMapIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseUrlMapIncompatible.shouldCreateNewVariable = true;\n+        caseUrlMapIncompatible.testCaseName = \"caseUrlMapIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseUrlMapCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseUrlMapCompatible.fieldName = URL_MAP;\n+        caseUrlMapCompatible.fieldType = ImmutableTextField.class;\n+        caseUrlMapCompatible.shouldCreateNewVariable = false;\n+        caseUrlMapCompatible.testCaseName = \"caseUrlMapCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseOwnerIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseOwnerIncompatible.fieldName = OWNER_KEY;\n+        caseOwnerIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseOwnerIncompatible.shouldCreateNewVariable = true;\n+        caseOwnerIncompatible.testCaseName = \"caseOwnerIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModUserIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModUserIncompatible.fieldName = MOD_USER_KEY;\n+        caseModUserIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseModUserIncompatible.shouldCreateNewVariable = true;\n+        caseModUserIncompatible.testCaseName = \"caseModUserIncompatible\";\n+\n+        return new GraphQLFieldNameCompatibilityTestCase[] {\n+                caseModDateIncompatible,\n+                caseModDateCompatible,\n+                caseTitleCompatible,\n+                caseTitleIncompatible,\n+                caseTitleImageIncompatible,\n+                caseTitleImageCompatible,\n+                caseContentTypeIncompatible,\n+                caseContentTypeCompatible,\n+                caseBaseTypeIncompatible,\n+                caseBaseTypeCompatible,\n+                caseLiveIncompatible,\n+                caseLiveCompatible,\n+                caseWorkingCompatible,\n+                caseArchivedCompatible,\n+                caseLockedCompatible,\n+                caseIdentifierIncompatible,\n+                caseIdentifierCompatible,\n+                caseInodeIncompatible,\n+                caseInodeCompatible,\n+                caseHostIncompatible,\n+                caseFolderIncompatible,\n+                caseUrlMapIncompatible,\n+                caseUrlMapCompatible,\n+                caseOwnerIncompatible,\n+                caseModUserIncompatible\n+        };\n     }\n \n     @Test\n     @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n-    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n-            final String fieldName)\n+    public void test_SaveFieldVariableNameCompatibilityWithGraphQL(\n+            final GraphQLFieldNameCompatibilityTestCase testCase)\n             throws DotSecurityException, DotDataException {\n \n         final ContentType type = new ContentTypeDataGen().nextPersisted();\n         try {\n-            Field field1 = FieldBuilder.builder(TextField.class)\n-                    .name(fieldName)\n-                    .contentTypeId(type.id())\n-                    .indexed(false)\n-                    .listed(false)\n-                    .fixed(true)\n-                    .build();\n-            field1 = fieldAPI.save(field1, user);\n-\n-            Assert.assertNotNull(field1);\n-            Assert.assertTrue(UtilMethods.isSet(field1.variable()));\n-            Assert.assertNotEquals(fieldName, field1.variable());\n-\n-            // let's create a new field to make sure it's getting a new variable\n-\n-            Field field2 = FieldBuilder.builder(TextField.class)\n-                    .name(fieldName)\n-                    .contentTypeId(type.id())\n-                    .indexed(false)\n-                    .listed(false)\n-                    .fixed(true)\n-                    .build();\n-            field2 = fieldAPI.save(field2, user);\n-\n-            Assert.assertNotNull(field2);\n-            Assert.assertTrue(UtilMethods.isSet(field2.variable()));\n-            Assert.assertNotEquals(fieldName, field2.variable());\n-\n-            // let's compare the two field vars are different\n+            final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field field = createField(contentType, testCase.fieldName,\n+                    testCase.fieldType);\n+\n+            if(testCase.shouldCreateNewVariable) {\n+                Assert.assertNotEquals(testCase.fieldName, field.variable());\n+            } else  {\n+                Assert.assertEquals(testCase.fieldName, field.variable());\n+            }\n+        } finally {\n+            contentTypeAPI.delete(type);\n+        }\n+    }\n \n-            Assert.assertNotEquals(field1.variable(), field2.variable());\n+    static class GraphQLFieldNameCompatibilityTestCase {\n+        String fieldName;\n+        private Class<? extends Field> fieldType;\n+        boolean shouldCreateNewVariable = true;\n+        String testCaseName;\n \n+        @Override\n+        public String toString() {\n+            return testCaseName;\n+        }\n+    }\n \n-        } finally {\n-            contentTypeAPI.delete(type);\n+    public static Field createField(final ContentType contentType, final String fieldName,\n+            final Class<? extends Field> fieldType) {\n+        try {\n+            final FieldAPI fieldAPI = APILocator.getContentTypeFieldAPI();\n+            final FieldBuilder fieldBuilder = getFieldBuilder(fieldType);\n+            final Field field =  fieldBuilder.contentTypeId(contentType.id())\n+                    .name(fieldName).build();\n+            return fieldAPI.save(field, APILocator.systemUser());\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);", "originalCommit": "3bb8214d1fea3c23a2c7bceaba851ee40a363b2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NTA3Mg==", "url": "https://github.com/dotCMS/core/pull/17989#discussion_r379075072", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-02-13T19:34:41Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1045,56 +1066,263 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n         }\n     }\n \n-    @DataProvider\n+\n+    @DataProvider(format = \"%m: %p[0]\")\n     public static Object[] dataProviderGraphQLReservedNames() {\n-        return GraphQLUtil.getFieldReservedWords().toArray();\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModDateIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModDateIncompatible.fieldName = MOD_DATE;\n+        caseModDateIncompatible.fieldType = ImmutableBinaryField.class;\n+        caseModDateIncompatible.shouldCreateNewVariable = true;\n+        caseModDateIncompatible.testCaseName = \"caseModDateIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModDateCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModDateCompatible.fieldName = MOD_DATE;\n+        caseModDateCompatible.fieldType = ImmutableDateField.class;\n+        caseModDateCompatible.shouldCreateNewVariable = false;\n+        caseModDateCompatible.testCaseName = \"caseModDateCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleIncompatible.fieldName = TITLE;\n+        caseTitleIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseTitleIncompatible.shouldCreateNewVariable = true;\n+        caseTitleIncompatible.testCaseName = \"caseTitleIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleCompatible.fieldName = TITLE;\n+        caseTitleCompatible.fieldType = ImmutableTextField.class;\n+        caseTitleCompatible.shouldCreateNewVariable = false;\n+        caseTitleCompatible.testCaseName = \"caseTitleCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleImageIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleImageIncompatible.fieldName = TITLE_IMAGE_KEY;\n+        caseTitleImageIncompatible.fieldType = ImmutableHostFolderField.class;\n+        caseTitleImageIncompatible.shouldCreateNewVariable = true;\n+        caseTitleImageIncompatible.testCaseName = \"caseTitleImageIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleImageCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleImageCompatible.fieldName = TITLE_IMAGE_KEY;\n+        caseTitleImageCompatible.fieldType = ImmutableBinaryField.class;\n+        caseTitleImageCompatible.shouldCreateNewVariable = false;\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseContentTypeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseContentTypeIncompatible.fieldName = CONTENT_TYPE;\n+        caseContentTypeIncompatible.fieldType = ImmutableHostFolderField.class;\n+        caseContentTypeIncompatible.shouldCreateNewVariable = true;\n+        caseContentTypeIncompatible.testCaseName = \"caseContentTypeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseContentTypeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseContentTypeCompatible.fieldName = CONTENT_TYPE;\n+        caseContentTypeCompatible.fieldType = ImmutableTextField.class;\n+        caseContentTypeCompatible.shouldCreateNewVariable = false;\n+        caseContentTypeCompatible.testCaseName = \"caseContentTypeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseBaseTypeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseBaseTypeIncompatible.fieldName = BASE_TYPE;\n+        caseBaseTypeIncompatible.fieldType = ImmutableKeyValueField.class;\n+        caseBaseTypeIncompatible.shouldCreateNewVariable = true;\n+        caseBaseTypeIncompatible.testCaseName = \"caseBaseTypeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseBaseTypeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseBaseTypeCompatible.fieldName = BASE_TYPE;\n+        caseBaseTypeCompatible.fieldType = ImmutableTextField.class;\n+        caseBaseTypeCompatible.shouldCreateNewVariable = false;\n+        caseBaseTypeCompatible.testCaseName = \"caseBaseTypeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLiveIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLiveIncompatible.fieldName = LIVE;\n+        caseLiveIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseLiveIncompatible.shouldCreateNewVariable = true;\n+        caseLiveIncompatible.testCaseName = \"caseLiveIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLiveCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLiveCompatible.fieldName = LIVE;\n+        caseLiveCompatible.fieldType = ImmutableTextField.class;\n+        caseLiveCompatible.shouldCreateNewVariable = false;\n+        caseLiveCompatible.testCaseName = \"caseLiveCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseWorkingIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseWorkingIncompatible.fieldName = WORKING;\n+        caseWorkingIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseWorkingIncompatible.shouldCreateNewVariable = true;\n+        caseWorkingIncompatible.testCaseName = \"caseWorkingIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseWorkingCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseWorkingCompatible.fieldName = WORKING;\n+        caseWorkingCompatible.fieldType = ImmutableTextField.class;\n+        caseWorkingCompatible.shouldCreateNewVariable = false;\n+        caseWorkingCompatible.testCaseName = \"caseWorkingCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseArchivedIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseArchivedIncompatible.fieldName = ARCHIVED_KEY;\n+        caseArchivedIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseArchivedIncompatible.shouldCreateNewVariable = true;\n+        caseArchivedIncompatible.testCaseName = \"caseArchivedIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseArchivedCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseArchivedCompatible.fieldName = ARCHIVED_KEY;\n+        caseArchivedCompatible.fieldType = ImmutableTextField.class;\n+        caseArchivedCompatible.shouldCreateNewVariable = false;\n+        caseArchivedCompatible.testCaseName = \"caseArchivedCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLockedIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLockedIncompatible.fieldName = LOCKED_KEY;\n+        caseLockedIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseLockedIncompatible.shouldCreateNewVariable = true;\n+        caseLockedIncompatible.testCaseName = \"caseLockedIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLockedCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLockedCompatible.fieldName = LOCKED_KEY;\n+        caseLockedCompatible.fieldType = ImmutableTextField.class;\n+        caseLockedCompatible.shouldCreateNewVariable = false;\n+        caseLockedCompatible.testCaseName = \"caseLockedCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseConLanguageIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseConLanguageIncompatible.fieldName = \"conLanguage\";\n+        caseConLanguageIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseConLanguageIncompatible.shouldCreateNewVariable = true;\n+        caseConLanguageIncompatible.testCaseName = \"caseConLanguageIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseIdentifierIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseIdentifierIncompatible.fieldName = IDENTIFIER;\n+        caseIdentifierIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseIdentifierIncompatible.shouldCreateNewVariable = true;\n+        caseIdentifierIncompatible.testCaseName = \"caseIdentifierIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseIdentifierCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseIdentifierCompatible.fieldName = IDENTIFIER;\n+        caseIdentifierCompatible.fieldType = ImmutableTextField.class;\n+        caseIdentifierCompatible.shouldCreateNewVariable = false;\n+        caseIdentifierCompatible.testCaseName = \"caseIdentifierCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseInodeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseInodeIncompatible.fieldName = INODE;\n+        caseInodeIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseInodeIncompatible.shouldCreateNewVariable = true;\n+        caseInodeIncompatible.testCaseName = \"caseInodeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseInodeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseInodeCompatible.fieldName = INODE;\n+        caseInodeCompatible.fieldType = ImmutableTextField.class;\n+        caseInodeCompatible.shouldCreateNewVariable = false;\n+        caseInodeCompatible.testCaseName = \"caseInodeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseHostIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseHostIncompatible.fieldName = HOST_KEY;\n+        caseHostIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseHostIncompatible.shouldCreateNewVariable = true;\n+        caseHostIncompatible.testCaseName = \"caseHostIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseFolderIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseFolderIncompatible.fieldName = FOLDER_KEY;\n+        caseFolderIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseFolderIncompatible.shouldCreateNewVariable = true;\n+        caseFolderIncompatible.testCaseName = \"caseFolderIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseUrlMapIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseUrlMapIncompatible.fieldName = URL_MAP;\n+        caseUrlMapIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseUrlMapIncompatible.shouldCreateNewVariable = true;\n+        caseUrlMapIncompatible.testCaseName = \"caseUrlMapIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseUrlMapCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseUrlMapCompatible.fieldName = URL_MAP;\n+        caseUrlMapCompatible.fieldType = ImmutableTextField.class;\n+        caseUrlMapCompatible.shouldCreateNewVariable = false;\n+        caseUrlMapCompatible.testCaseName = \"caseUrlMapCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseOwnerIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseOwnerIncompatible.fieldName = OWNER_KEY;\n+        caseOwnerIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseOwnerIncompatible.shouldCreateNewVariable = true;\n+        caseOwnerIncompatible.testCaseName = \"caseOwnerIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModUserIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModUserIncompatible.fieldName = MOD_USER_KEY;\n+        caseModUserIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseModUserIncompatible.shouldCreateNewVariable = true;\n+        caseModUserIncompatible.testCaseName = \"caseModUserIncompatible\";\n+\n+        return new GraphQLFieldNameCompatibilityTestCase[] {\n+                caseModDateIncompatible,\n+                caseModDateCompatible,\n+                caseTitleCompatible,\n+                caseTitleIncompatible,\n+                caseTitleImageIncompatible,\n+                caseTitleImageCompatible,\n+                caseContentTypeIncompatible,\n+                caseContentTypeCompatible,\n+                caseBaseTypeIncompatible,\n+                caseBaseTypeCompatible,\n+                caseLiveIncompatible,\n+                caseLiveCompatible,\n+                caseWorkingCompatible,\n+                caseArchivedCompatible,\n+                caseLockedCompatible,\n+                caseIdentifierIncompatible,\n+                caseIdentifierCompatible,\n+                caseInodeIncompatible,\n+                caseInodeCompatible,\n+                caseHostIncompatible,\n+                caseFolderIncompatible,\n+                caseUrlMapIncompatible,\n+                caseUrlMapCompatible,\n+                caseOwnerIncompatible,\n+                caseModUserIncompatible\n+        };\n     }\n \n     @Test\n     @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n-    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n-            final String fieldName)\n+    public void test_SaveFieldVariableNameCompatibilityWithGraphQL(\n+            final GraphQLFieldNameCompatibilityTestCase testCase)\n             throws DotSecurityException, DotDataException {\n \n         final ContentType type = new ContentTypeDataGen().nextPersisted();\n         try {\n-            Field field1 = FieldBuilder.builder(TextField.class)\n-                    .name(fieldName)\n-                    .contentTypeId(type.id())\n-                    .indexed(false)\n-                    .listed(false)\n-                    .fixed(true)\n-                    .build();\n-            field1 = fieldAPI.save(field1, user);\n-\n-            Assert.assertNotNull(field1);\n-            Assert.assertTrue(UtilMethods.isSet(field1.variable()));\n-            Assert.assertNotEquals(fieldName, field1.variable());\n-\n-            // let's create a new field to make sure it's getting a new variable\n-\n-            Field field2 = FieldBuilder.builder(TextField.class)\n-                    .name(fieldName)\n-                    .contentTypeId(type.id())\n-                    .indexed(false)\n-                    .listed(false)\n-                    .fixed(true)\n-                    .build();\n-            field2 = fieldAPI.save(field2, user);\n-\n-            Assert.assertNotNull(field2);\n-            Assert.assertTrue(UtilMethods.isSet(field2.variable()));\n-            Assert.assertNotEquals(fieldName, field2.variable());\n-\n-            // let's compare the two field vars are different\n+            final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field field = createField(contentType, testCase.fieldName,\n+                    testCase.fieldType);\n+\n+            if(testCase.shouldCreateNewVariable) {\n+                Assert.assertNotEquals(testCase.fieldName, field.variable());\n+            } else  {\n+                Assert.assertEquals(testCase.fieldName, field.variable());\n+            }\n+        } finally {\n+            contentTypeAPI.delete(type);\n+        }\n+    }\n \n-            Assert.assertNotEquals(field1.variable(), field2.variable());\n+    static class GraphQLFieldNameCompatibilityTestCase {\n+        String fieldName;\n+        private Class<? extends Field> fieldType;\n+        boolean shouldCreateNewVariable = true;\n+        String testCaseName;\n \n+        @Override\n+        public String toString() {\n+            return testCaseName;\n+        }\n+    }\n \n-        } finally {\n-            contentTypeAPI.delete(type);\n+    public static Field createField(final ContentType contentType, final String fieldName,\n+            final Class<? extends Field> fieldType) {\n+        try {\n+            final FieldAPI fieldAPI = APILocator.getContentTypeFieldAPI();\n+            final FieldBuilder fieldBuilder = getFieldBuilder(fieldType);\n+            final Field field =  fieldBuilder.contentTypeId(contentType.id())\n+                    .name(fieldName).build();\n+            return fieldAPI.save(field, APILocator.systemUser());\n+        } catch (Exception e) {", "originalCommit": "3bb8214d1fea3c23a2c7bceaba851ee40a363b2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NTA4Mw==", "url": "https://github.com/dotCMS/core/pull/17989#discussion_r379075083", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.assertEquals'", "author": "dev-dotcms", "createdAt": "2020-02-13T19:34:42Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/business/FieldAPITest.java", "diffHunk": "@@ -1045,56 +1066,263 @@ public void testSaveFieldVariable_KeyWithSpecialChars_ShouldSucceed(final String\n         }\n     }\n \n-    @DataProvider\n+\n+    @DataProvider(format = \"%m: %p[0]\")\n     public static Object[] dataProviderGraphQLReservedNames() {\n-        return GraphQLUtil.getFieldReservedWords().toArray();\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModDateIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModDateIncompatible.fieldName = MOD_DATE;\n+        caseModDateIncompatible.fieldType = ImmutableBinaryField.class;\n+        caseModDateIncompatible.shouldCreateNewVariable = true;\n+        caseModDateIncompatible.testCaseName = \"caseModDateIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModDateCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModDateCompatible.fieldName = MOD_DATE;\n+        caseModDateCompatible.fieldType = ImmutableDateField.class;\n+        caseModDateCompatible.shouldCreateNewVariable = false;\n+        caseModDateCompatible.testCaseName = \"caseModDateCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleIncompatible.fieldName = TITLE;\n+        caseTitleIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseTitleIncompatible.shouldCreateNewVariable = true;\n+        caseTitleIncompatible.testCaseName = \"caseTitleIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleCompatible.fieldName = TITLE;\n+        caseTitleCompatible.fieldType = ImmutableTextField.class;\n+        caseTitleCompatible.shouldCreateNewVariable = false;\n+        caseTitleCompatible.testCaseName = \"caseTitleCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleImageIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleImageIncompatible.fieldName = TITLE_IMAGE_KEY;\n+        caseTitleImageIncompatible.fieldType = ImmutableHostFolderField.class;\n+        caseTitleImageIncompatible.shouldCreateNewVariable = true;\n+        caseTitleImageIncompatible.testCaseName = \"caseTitleImageIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseTitleImageCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseTitleImageCompatible.fieldName = TITLE_IMAGE_KEY;\n+        caseTitleImageCompatible.fieldType = ImmutableBinaryField.class;\n+        caseTitleImageCompatible.shouldCreateNewVariable = false;\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseContentTypeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseContentTypeIncompatible.fieldName = CONTENT_TYPE;\n+        caseContentTypeIncompatible.fieldType = ImmutableHostFolderField.class;\n+        caseContentTypeIncompatible.shouldCreateNewVariable = true;\n+        caseContentTypeIncompatible.testCaseName = \"caseContentTypeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseContentTypeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseContentTypeCompatible.fieldName = CONTENT_TYPE;\n+        caseContentTypeCompatible.fieldType = ImmutableTextField.class;\n+        caseContentTypeCompatible.shouldCreateNewVariable = false;\n+        caseContentTypeCompatible.testCaseName = \"caseContentTypeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseBaseTypeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseBaseTypeIncompatible.fieldName = BASE_TYPE;\n+        caseBaseTypeIncompatible.fieldType = ImmutableKeyValueField.class;\n+        caseBaseTypeIncompatible.shouldCreateNewVariable = true;\n+        caseBaseTypeIncompatible.testCaseName = \"caseBaseTypeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseBaseTypeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseBaseTypeCompatible.fieldName = BASE_TYPE;\n+        caseBaseTypeCompatible.fieldType = ImmutableTextField.class;\n+        caseBaseTypeCompatible.shouldCreateNewVariable = false;\n+        caseBaseTypeCompatible.testCaseName = \"caseBaseTypeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLiveIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLiveIncompatible.fieldName = LIVE;\n+        caseLiveIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseLiveIncompatible.shouldCreateNewVariable = true;\n+        caseLiveIncompatible.testCaseName = \"caseLiveIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLiveCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLiveCompatible.fieldName = LIVE;\n+        caseLiveCompatible.fieldType = ImmutableTextField.class;\n+        caseLiveCompatible.shouldCreateNewVariable = false;\n+        caseLiveCompatible.testCaseName = \"caseLiveCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseWorkingIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseWorkingIncompatible.fieldName = WORKING;\n+        caseWorkingIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseWorkingIncompatible.shouldCreateNewVariable = true;\n+        caseWorkingIncompatible.testCaseName = \"caseWorkingIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseWorkingCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseWorkingCompatible.fieldName = WORKING;\n+        caseWorkingCompatible.fieldType = ImmutableTextField.class;\n+        caseWorkingCompatible.shouldCreateNewVariable = false;\n+        caseWorkingCompatible.testCaseName = \"caseWorkingCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseArchivedIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseArchivedIncompatible.fieldName = ARCHIVED_KEY;\n+        caseArchivedIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseArchivedIncompatible.shouldCreateNewVariable = true;\n+        caseArchivedIncompatible.testCaseName = \"caseArchivedIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseArchivedCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseArchivedCompatible.fieldName = ARCHIVED_KEY;\n+        caseArchivedCompatible.fieldType = ImmutableTextField.class;\n+        caseArchivedCompatible.shouldCreateNewVariable = false;\n+        caseArchivedCompatible.testCaseName = \"caseArchivedCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLockedIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLockedIncompatible.fieldName = LOCKED_KEY;\n+        caseLockedIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseLockedIncompatible.shouldCreateNewVariable = true;\n+        caseLockedIncompatible.testCaseName = \"caseLockedIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseLockedCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseLockedCompatible.fieldName = LOCKED_KEY;\n+        caseLockedCompatible.fieldType = ImmutableTextField.class;\n+        caseLockedCompatible.shouldCreateNewVariable = false;\n+        caseLockedCompatible.testCaseName = \"caseLockedCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseConLanguageIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseConLanguageIncompatible.fieldName = \"conLanguage\";\n+        caseConLanguageIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseConLanguageIncompatible.shouldCreateNewVariable = true;\n+        caseConLanguageIncompatible.testCaseName = \"caseConLanguageIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseIdentifierIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseIdentifierIncompatible.fieldName = IDENTIFIER;\n+        caseIdentifierIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseIdentifierIncompatible.shouldCreateNewVariable = true;\n+        caseIdentifierIncompatible.testCaseName = \"caseIdentifierIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseIdentifierCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseIdentifierCompatible.fieldName = IDENTIFIER;\n+        caseIdentifierCompatible.fieldType = ImmutableTextField.class;\n+        caseIdentifierCompatible.shouldCreateNewVariable = false;\n+        caseIdentifierCompatible.testCaseName = \"caseIdentifierCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseInodeIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseInodeIncompatible.fieldName = INODE;\n+        caseInodeIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseInodeIncompatible.shouldCreateNewVariable = true;\n+        caseInodeIncompatible.testCaseName = \"caseInodeIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseInodeCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseInodeCompatible.fieldName = INODE;\n+        caseInodeCompatible.fieldType = ImmutableTextField.class;\n+        caseInodeCompatible.shouldCreateNewVariable = false;\n+        caseInodeCompatible.testCaseName = \"caseInodeCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseHostIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseHostIncompatible.fieldName = HOST_KEY;\n+        caseHostIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseHostIncompatible.shouldCreateNewVariable = true;\n+        caseHostIncompatible.testCaseName = \"caseHostIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseFolderIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseFolderIncompatible.fieldName = FOLDER_KEY;\n+        caseFolderIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseFolderIncompatible.shouldCreateNewVariable = true;\n+        caseFolderIncompatible.testCaseName = \"caseFolderIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseUrlMapIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseUrlMapIncompatible.fieldName = URL_MAP;\n+        caseUrlMapIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseUrlMapIncompatible.shouldCreateNewVariable = true;\n+        caseUrlMapIncompatible.testCaseName = \"caseUrlMapIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseUrlMapCompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseUrlMapCompatible.fieldName = URL_MAP;\n+        caseUrlMapCompatible.fieldType = ImmutableTextField.class;\n+        caseUrlMapCompatible.shouldCreateNewVariable = false;\n+        caseUrlMapCompatible.testCaseName = \"caseUrlMapCompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseOwnerIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseOwnerIncompatible.fieldName = OWNER_KEY;\n+        caseOwnerIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseOwnerIncompatible.shouldCreateNewVariable = true;\n+        caseOwnerIncompatible.testCaseName = \"caseOwnerIncompatible\";\n+\n+        final GraphQLFieldNameCompatibilityTestCase caseModUserIncompatible = new GraphQLFieldNameCompatibilityTestCase();\n+        caseModUserIncompatible.fieldName = MOD_USER_KEY;\n+        caseModUserIncompatible.fieldType = ImmutableCategoryField.class;\n+        caseModUserIncompatible.shouldCreateNewVariable = true;\n+        caseModUserIncompatible.testCaseName = \"caseModUserIncompatible\";\n+\n+        return new GraphQLFieldNameCompatibilityTestCase[] {\n+                caseModDateIncompatible,\n+                caseModDateCompatible,\n+                caseTitleCompatible,\n+                caseTitleIncompatible,\n+                caseTitleImageIncompatible,\n+                caseTitleImageCompatible,\n+                caseContentTypeIncompatible,\n+                caseContentTypeCompatible,\n+                caseBaseTypeIncompatible,\n+                caseBaseTypeCompatible,\n+                caseLiveIncompatible,\n+                caseLiveCompatible,\n+                caseWorkingCompatible,\n+                caseArchivedCompatible,\n+                caseLockedCompatible,\n+                caseIdentifierIncompatible,\n+                caseIdentifierCompatible,\n+                caseInodeIncompatible,\n+                caseInodeCompatible,\n+                caseHostIncompatible,\n+                caseFolderIncompatible,\n+                caseUrlMapIncompatible,\n+                caseUrlMapCompatible,\n+                caseOwnerIncompatible,\n+                caseModUserIncompatible\n+        };\n     }\n \n     @Test\n     @UseDataProvider(\"dataProviderGraphQLReservedNames\")\n-    public void test_SaveFieldWithReservedGraphqlName_ShouldSuffixConsecutiveToVariable(\n-            final String fieldName)\n+    public void test_SaveFieldVariableNameCompatibilityWithGraphQL(\n+            final GraphQLFieldNameCompatibilityTestCase testCase)\n             throws DotSecurityException, DotDataException {\n \n         final ContentType type = new ContentTypeDataGen().nextPersisted();\n         try {\n-            Field field1 = FieldBuilder.builder(TextField.class)\n-                    .name(fieldName)\n-                    .contentTypeId(type.id())\n-                    .indexed(false)\n-                    .listed(false)\n-                    .fixed(true)\n-                    .build();\n-            field1 = fieldAPI.save(field1, user);\n-\n-            Assert.assertNotNull(field1);\n-            Assert.assertTrue(UtilMethods.isSet(field1.variable()));\n-            Assert.assertNotEquals(fieldName, field1.variable());\n-\n-            // let's create a new field to make sure it's getting a new variable\n-\n-            Field field2 = FieldBuilder.builder(TextField.class)\n-                    .name(fieldName)\n-                    .contentTypeId(type.id())\n-                    .indexed(false)\n-                    .listed(false)\n-                    .fixed(true)\n-                    .build();\n-            field2 = fieldAPI.save(field2, user);\n-\n-            Assert.assertNotNull(field2);\n-            Assert.assertTrue(UtilMethods.isSet(field2.variable()));\n-            Assert.assertNotEquals(fieldName, field2.variable());\n-\n-            // let's compare the two field vars are different\n+            final ContentType contentType = new ContentTypeDataGen().nextPersisted();\n+            final Field field = createField(contentType, testCase.fieldName,\n+                    testCase.fieldType);\n+\n+            if(testCase.shouldCreateNewVariable) {\n+                Assert.assertNotEquals(testCase.fieldName, field.variable());\n+            } else  {\n+                Assert.assertEquals(testCase.fieldName, field.variable());", "originalCommit": "3bb8214d1fea3c23a2c7bceaba851ee40a363b2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3NTA5NA==", "url": "https://github.com/dotCMS/core/pull/17989#discussion_r379075094", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-02-13T19:34:43Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/util/GraphQLUtil.java", "diffHunk": "@@ -1,11 +1,39 @@\n package com.dotcms.graphql.util;\n \n+import com.dotcms.contenttype.model.field.Field;\n import com.dotcms.graphql.InterfaceType;\n+import com.dotmarketing.business.APILocator;\n+import graphql.schema.GraphQLList;\n+import graphql.schema.GraphQLType;\n import java.util.Set;\n \n public class GraphQLUtil {\n \n-    public static Set<String> getFieldReservedWords() {\n-        return InterfaceType.RESERVED_GRAPHQL_FIELD_NAMES;\n+    public static boolean isVariableGraphQLCompatible(final Field field) {\n+        // first let's check if there's an inherited field with the same variable\n+        if(InterfaceType.getContentletInheritedFields().containsKey(field.name())) {\n+            // now let's check if the graphql types are compatible\n+\n+            // get inherited field's graphql type\n+            final GraphQLType inheritedFieldGraphQLType = InterfaceType.getContentletInheritedFields()\n+                    .get(field.name()).getType();\n+\n+            // get new field's type\n+            final GraphQLType fieldGraphQLType = APILocator.getGraphqlAPI()\n+                    .getGraphqlTypeForFieldClass(field.type(), field);\n+\n+            // if at least one of them is a custom type, they need to be equal to be compatible\n+            return (!isCustomFieldType(inheritedFieldGraphQLType)", "originalCommit": "3bb8214d1fea3c23a2c7bceaba851ee40a363b2b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}