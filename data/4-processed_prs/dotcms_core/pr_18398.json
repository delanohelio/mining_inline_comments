{"pr_number": 18398, "pr_title": "#18397 fixes ContentletToMapTransformer bottleneck", "pr_createdAt": "2020-04-30T14:03:07Z", "pr_url": "https://github.com/dotCMS/core/pull/18398", "timeline": [{"oid": "c48c4ba48da7f5a41c08c3d0fbc44abad150fac2", "url": "https://github.com/dotCMS/core/commit/c48c4ba48da7f5a41c08c3d0fbc44abad150fac2", "message": "#18397 fixes ContentletToMapTransformer bottleneck", "committedDate": "2020-04-30T14:00:55Z", "type": "commit"}, {"oid": "7bf746182fee4f7307f87812036ca17600c23c24", "url": "https://github.com/dotCMS/core/commit/7bf746182fee4f7307f87812036ca17600c23c24", "message": "#18397 better tests", "committedDate": "2020-04-30T14:12:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgwMA==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046800", "bodyText": "Issue found: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:39Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgxMw==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046813", "bodyText": "Issue found: Local variable 'type' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:40Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjgyNw==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046827", "bodyText": "Issue found: Local variable 'constants' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:42Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg0Mw==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046843", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:42Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg1NA==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046854", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:44Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg2NA==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046864", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:45Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg3Mw==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046873", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:46Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njg4OA==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046888", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:47Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjkxNg==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046916", "bodyText": "Issue found: Parameter 'type' is not assigned and could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:48Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(newWayfields, oldWayFields);\n+        \n+        \n+        // test that Immutables work the same way\n+        oldWayFields = oldWayOfGettingFields(type, ImmutableTextField.class);\n+        assertEquals(newWayfields, oldWayFields);\n+        \n+        \n+\n+    }\n+\n+\n+\n+    private List<Field> oldWayOfGettingFields(ContentType type, final Class<? extends Field> clazz) {", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NjkyNg==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046926", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:49Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk0Mg==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046942", "bodyText": "Issue found: Local variable 'type' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:50Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk1NQ==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046955", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:51Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk3Nw==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046977", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:52Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk4Nw==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046987", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:53Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0Njk5NA==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418046994", "bodyText": "Issue found: Local variable 'immutableConstants' could be declared final", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:54Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NzAwNw==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418047007", "bodyText": "Issue found: Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:55Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+\n+\n+        List<Field> newWayfields = type.fields(ConstantField.class);\n+\n+        List<Field> oldWayFields = oldWayOfGettingFields(type, ConstantField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);\n+        assert (newWayfields.size() > 0);\n+        assertEquals(oldWayFields, newWayfields);\n+\n+\n+        newWayfields = type.fields(TextField.class);\n+\n+        oldWayFields = oldWayOfGettingFields(type, TextField.class);\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (oldWayFields.size() > 0);", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NzAxNA==", "url": "https://github.com/dotCMS/core/pull/18398#discussion_r418047014", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-04-30T14:20:56Z", "path": "dotCMS/src/integration-test/java/com/dotcms/contenttype/test/ContentTypeTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package com.dotcms.contenttype.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.junit.Test;\n+import com.dotcms.contenttype.model.field.ConstantField;\n+import com.dotcms.contenttype.model.field.Field;\n+import com.dotcms.contenttype.model.field.ImmutableConstantField;\n+import com.dotcms.contenttype.model.field.ImmutableTextField;\n+import com.dotcms.contenttype.model.field.TextField;\n+import com.dotcms.contenttype.model.type.ContentType;\n+import com.dotcms.datagen.TestDataUtils;\n+import io.vavr.control.Try;\n+\n+public class ContentTypeTest extends ContentTypeBaseTest {\n+\n+\n+\n+    /**\n+     * This tests that calling type.fields() returns valid fields and that calling type.fields(Class\n+     * clazz) returns a subset of those fields\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_fields_of_type_are_returned() throws Exception {\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+        assert (!type.fields(ConstantField.class).isEmpty());\n+        assert (type.fields(ConstantField.class).size() == 2);\n+\n+    }\n+\n+    /**\n+     * This tests that calling type.fields(TextField.class) returns the same subset of fields as does\n+     * calling type.fields(ImmutableTextField.class)\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_immutable_fields_work_the_same_as_normal_fields_returned() throws Exception {\n+\n+        ContentType type = TestDataUtils.getFormLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());\n+\n+        List<Field> constants = type.fields(ConstantField.class);\n+        List<Field> immutableConstants = type.fields(ImmutableConstantField.class);\n+        assert (!constants.isEmpty());\n+        assert (!immutableConstants.isEmpty());\n+\n+\n+\n+        // make sure that getting the field by Type or by its immutable type works the same\n+        assert (constants.size() == immutableConstants.size());\n+        assertEquals(constants, immutableConstants);\n+\n+    }\n+\n+\n+\n+    /**\n+     * This tests that the changing of the code in the ContentType to return fields works the same as\n+     * the old way we used to do it\n+     * \n+     * @throws Exception\n+     */\n+\n+    @Test\n+    public void test_that_it_works_like_the_old_way() throws Exception {\n+        ContentType type = TestDataUtils.getWidgetLikeContentType();\n+\n+        assert (!type.fields().isEmpty());\n+        assert (type.fields().size() == type.fieldMap().size());", "originalCommit": "7bf746182fee4f7307f87812036ca17600c23c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}