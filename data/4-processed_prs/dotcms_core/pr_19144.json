{"pr_number": 19144, "pr_title": "#19143 Implement render field at page level. Postman test", "pr_createdAt": "2020-08-24T18:58:49Z", "pr_url": "https://github.com/dotCMS/core/pull/19144", "timeline": [{"oid": "375954627b72478a9aa6ff69c74d70d5f50a6e5c", "url": "https://github.com/dotCMS/core/commit/375954627b72478a9aa6ff69c74d70d5f50a6e5c", "message": "#19143 Implement render field at page level. Postman test", "committedDate": "2020-08-24T18:58:14Z", "type": "commit"}, {"oid": "95620bdb0f5836ea5188ceb5bc93604e70d19f97", "url": "https://github.com/dotCMS/core/commit/95620bdb0f5836ea5188ceb5bc93604e70d19f97", "message": "#19143 fix postman test", "committedDate": "2020-08-25T15:17:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzODg5MQ==", "url": "https://github.com/dotCMS/core/pull/19144#discussion_r476538891", "bodyText": "here you can use this better\n\n  \n    \n      core/dotCMS/src/main/java/com/dotcms/rest/api/v1/page/PageResource.java\n    \n    \n         Line 464\n      in\n      bca720b\n    \n    \n    \n    \n\n        \n          \n           final String html = this.htmlPageAssetRenderedAPI.getPageHtml(", "author": "freddyucv", "createdAt": "2020-08-25T15:28:57Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageRenderDataFetcher.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotcms.rendering.velocity.servlet.VelocityModeHandler;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.PermissionLevel;\n+import com.dotmarketing.business.web.WebAPILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.exception.DotSecurityException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.htmlpageasset.business.HTMLPageAssetAPI;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.ContainerRaw;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.ContainerRenderedBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.page.JsonMapper;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.portlets.templates.model.Template;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.dotmarketing.util.VelocityUtil;\n+import com.fasterxml.jackson.databind.ObjectWriter;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import java.io.CharArrayReader;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.velocity.context.Context;\n+\n+/**\n+ * This DataFetcher returns a {@link String} containing the rendered HTML code of the requested page\n+ * requested {@link HTMLPageAsset}.\n+ */\n+public class PageRenderDataFetcher implements DataFetcher<String> {\n+    @Override\n+    public String get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final User user = ((DotGraphQLContext) environment.getContext()).getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+            final HttpServletResponse response = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletResponse();\n+\n+            final Contentlet contentlet = environment.getSource();\n+            final String pageModeAsString = environment.getArgument(\"pageMode\")\n+                    != null ? environment.getArgument(\"pageMode\") : PageMode.LIVE.name();\n+\n+            final PageMode mode = PageMode.get(pageModeAsString);\n+\n+            final HTMLPageAsset pageAsset = APILocator.getHTMLPageAssetAPI()\n+                    .fromContentlet(contentlet);\n+\n+            final Host host = WebAPILocator.getHostWebAPI().getCurrentHost(request, user);\n+\n+            return VelocityModeHandler.modeHandler(pageAsset, mode, request, response, host).eval();", "originalCommit": "95620bdb0f5836ea5188ceb5bc93604e70d19f97", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4ODA4OQ==", "url": "https://github.com/dotCMS/core/pull/19144#discussion_r476588089", "bodyText": "Done", "author": "dsilvam", "createdAt": "2020-08-25T16:41:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjUzODg5MQ=="}], "type": "inlineReview"}, {"oid": "107512b993f430ddea316b543b3bedc66f7d5bd3", "url": "https://github.com/dotCMS/core/commit/107512b993f430ddea316b543b3bedc66f7d5bd3", "message": "#19143 apply code-review. Store args in context", "committedDate": "2020-08-25T16:41:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5MjQ3NA==", "url": "https://github.com/dotCMS/core/pull/19144#discussion_r476592474", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-08-25T16:48:57Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/page/PageRenderDataFetcher.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package com.dotcms.graphql.datafetcher.page;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContext;\n+import com.dotmarketing.portlets.htmlpageasset.business.render.PageContextBuilder;\n+import com.dotmarketing.portlets.htmlpageasset.model.HTMLPageAsset;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.PageMode;\n+import com.liferay.portal.model.User;\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * This DataFetcher returns a {@link String} containing the rendered HTML code of the requested page\n+ * requested {@link HTMLPageAsset}.\n+ */\n+public class PageRenderDataFetcher implements DataFetcher<String> {\n+    @Override\n+    public String get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            final DotGraphQLContext context = environment.getContext();\n+            final User user = context.getUser();\n+            final HttpServletRequest request = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletRequest();\n+            final HttpServletResponse response = ((DotGraphQLContext) environment.getContext())\n+                    .getHttpServletResponse();\n+\n+            final String pageModeAsString = (String) context.getParam(\"pageMode\");\n+            final String url = (String) context.getParam(\"url\");\n+\n+            final PageMode mode = PageMode.get(pageModeAsString);\n+\n+            final PageContext pageContext = PageContextBuilder.builder()\n+                    .setUser(user)\n+                    .setPageUri(url)\n+                    .setPageMode(mode)\n+                    .build();\n+\n+            return APILocator.getHTMLPageAssetRenderedAPI().getPageHtml(pageContext, request,\n+                    response);\n+        } catch (Exception e) {", "originalCommit": "107512b993f430ddea316b543b3bedc66f7d5bd3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}