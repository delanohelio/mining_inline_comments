{"pr_number": 19591, "pr_title": "#19234 upgrading to the new FileMetadataAPI", "pr_createdAt": "2020-11-17T00:12:13Z", "pr_url": "https://github.com/dotCMS/core/pull/19591", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzc1MzU2OA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597753568", "bodyText": "This needs to be moved up before Task210316UpdateLayoutIcons b/c in the upgrade process we check that the taskId should be higher than the current db_version.\nIf this is not going to be merged for this release, we'll need to update this taskId to a greater Id (older date) otherwise will not run.", "author": "erickgonzalez", "createdAt": "2021-03-19T15:05:59Z", "path": "dotCMS/src/main/java/com/dotmarketing/util/TaskLocatorUtil.java", "diffHunk": "@@ -294,6 +294,7 @@ public static void removeFixTask(Class<?> clazz){\n         .add(Task201014UpdateColumnsValuesInIdentifierTable.class)\n \t\t.add(Task210218MigrateUserProxyTable.class)\n \t\t.add(Task210316UpdateLayoutIcons.class)\n+\t\t.add(Task210304RemoveOldMetadataFiles.class)", "originalCommit": "89d612c8056f114886bdfc28550f0392b96bfe10", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzkwNzg1MA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597907850", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-19T18:53:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Nzc1MzU2OA=="}], "type": "inlineReview"}, {"oid": "33834089a91ccd5d40bd966862b085489fa82fd7", "url": "https://github.com/dotCMS/core/commit/33834089a91ccd5d40bd966862b085489fa82fd7", "message": "#hashRef column Upgrate task", "committedDate": "2021-03-19T17:21:39Z", "type": "commit"}, {"oid": "1ac45a888ed4a1b2fa099d16eb3dab2a901b49ab", "url": "https://github.com/dotCMS/core/commit/1ac45a888ed4a1b2fa099d16eb3dab2a901b49ab", "message": "run-all", "committedDate": "2021-03-19T17:22:10Z", "type": "commit"}, {"oid": "0b9a21f88f1eb5a700fa30ccccc28a16bf4fc1c5", "url": "https://github.com/dotCMS/core/commit/0b9a21f88f1eb5a700fa30ccccc28a16bf4fc1c5", "message": "#19234 fix more merge conflicts", "committedDate": "2021-03-19T19:12:45Z", "type": "commit"}, {"oid": "086bb0a0e0d763b93adcd30c216f64638cbd00b5", "url": "https://github.com/dotCMS/core/commit/086bb0a0e0d763b93adcd30c216f64638cbd00b5", "message": "run-all", "committedDate": "2021-03-19T19:13:45Z", "type": "commit"}, {"oid": "b048780642d91f0374eb7ac65cdf61f3e172e8bc", "url": "https://github.com/dotCMS/core/commit/b048780642d91f0374eb7ac65cdf61f3e172e8bc", "message": "#19234  fix MainSuite", "committedDate": "2021-03-19T21:20:07Z", "type": "commit"}, {"oid": "30ed9b05d09e6a887554eb945747474606eb6ab3", "url": "https://github.com/dotCMS/core/commit/30ed9b05d09e6a887554eb945747474606eb6ab3", "message": "run-all", "committedDate": "2021-03-19T21:20:43Z", "type": "commit"}, {"oid": "f03e04e56a679914306523e913c2b7b28ede5f68", "url": "https://github.com/dotCMS/core/commit/f03e04e56a679914306523e913c2b7b28ede5f68", "message": "run-all", "committedDate": "2021-03-20T00:05:25Z", "type": "commit"}, {"oid": "a6fda6f8343d67572ddec25dea19f5e54f890668", "url": "https://github.com/dotCMS/core/commit/a6fda6f8343d67572ddec25dea19f5e54f890668", "message": "#19234 wrapping up ms with the lates feedback", "committedDate": "2021-03-22T16:13:48Z", "type": "commit"}, {"oid": "5f6a6894f14d773eee8bc670f5522689940a672b", "url": "https://github.com/dotCMS/core/commit/5f6a6894f14d773eee8bc670f5522689940a672b", "message": "#19234 fixing fileAsset bundle compatibility issue", "committedDate": "2021-03-23T00:05:35Z", "type": "commit"}, {"oid": "3dff2e65e93ea2bdb31b913e6570fbc44158f726", "url": "https://github.com/dotCMS/core/commit/3dff2e65e93ea2bdb31b913e6570fbc44158f726", "message": "#19234  new ver of ee", "committedDate": "2021-03-23T04:19:27Z", "type": "commit"}, {"oid": "7363d33b22171ddd563423099ed8e32be164fe33", "url": "https://github.com/dotCMS/core/commit/7363d33b22171ddd563423099ed8e32be164fe33", "message": "#19234  content handler test", "committedDate": "2021-03-23T15:54:23Z", "type": "commit"}, {"oid": "ac1adbea9675239280276ac85dd71b96f94bef66", "url": "https://github.com/dotCMS/core/commit/ac1adbea9675239280276ac85dd71b96f94bef66", "message": "#19234  adding test to MainSuite", "committedDate": "2021-03-23T15:55:39Z", "type": "commit"}, {"oid": "3d09068dda0e4831ed98a36506101bd25791a749", "url": "https://github.com/dotCMS/core/commit/3d09068dda0e4831ed98a36506101bd25791a749", "message": "#19234 adjust dotcmsReleaseVersion to build", "committedDate": "2021-03-23T16:58:34Z", "type": "commit"}, {"oid": "8a27e32454d1cf981ff55a2f003a9737f45f4d15", "url": "https://github.com/dotCMS/core/commit/8a27e32454d1cf981ff55a2f003a9737f45f4d15", "message": "#19234 point to a new ee", "committedDate": "2021-03-23T17:09:06Z", "type": "commit"}, {"oid": "d940ea16165266124dbc4f5ca86883d77136098b", "url": "https://github.com/dotCMS/core/commit/d940ea16165266124dbc4f5ca86883d77136098b", "message": "#19234 upgrading to the new FileMetataAPI", "committedDate": "2020-11-17T00:07:58Z", "type": "commit"}, {"oid": "bdc65814a5d3e7165e5548a88bcfc775a070a0d1", "url": "https://github.com/dotCMS/core/commit/bdc65814a5d3e7165e5548a88bcfc775a070a0d1", "message": "#19234 wrapping inmuable map within a new instance", "committedDate": "2020-11-17T14:40:37Z", "type": "commit"}, {"oid": "a5ebed23637c3d4f829a51721cbfc56c6a61695e", "url": "https://github.com/dotCMS/core/commit/a5ebed23637c3d4f829a51721cbfc56c6a61695e", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2020-11-17T15:02:10Z", "type": "commit"}, {"oid": "b6b20d142e5fefae801ea9f8285449c27c60f6e9", "url": "https://github.com/dotCMS/core/commit/b6b20d142e5fefae801ea9f8285449c27c60f6e9", "message": "#19234 hooking up with custom ee version", "committedDate": "2020-11-17T17:51:23Z", "type": "commit"}, {"oid": "e83b382e6fcacabfcfdad9250e5ebb9651b85809", "url": "https://github.com/dotCMS/core/commit/e83b382e6fcacabfcfdad9250e5ebb9651b85809", "message": "#19234 hooking up with custom ee version", "committedDate": "2020-11-17T18:58:38Z", "type": "commit"}, {"oid": "0697acd9f5f2d0d60c51135a0a53929ac5d679d9", "url": "https://github.com/dotCMS/core/commit/0697acd9f5f2d0d60c51135a0a53929ac5d679d9", "message": "#19234 forcing the use of a specific snapshot of ee", "committedDate": "2020-11-17T21:07:58Z", "type": "commit"}, {"oid": "038bc9ba9f1d3f9416112819f6ed3a9a01a7504a", "url": "https://github.com/dotCMS/core/commit/038bc9ba9f1d3f9416112819f6ed3a9a01a7504a", "message": "#19234 temp  fix for compilation issue", "committedDate": "2020-11-17T21:20:59Z", "type": "commit"}, {"oid": "943c825ed300e5752762db8a666bc2cf52704311", "url": "https://github.com/dotCMS/core/commit/943c825ed300e5752762db8a666bc2cf52704311", "message": "#19234 fixing md mapping + making FileAsset use the lazymd to get info", "committedDate": "2020-11-18T14:56:08Z", "type": "commit"}, {"oid": "10ab88ac56c45d81ce4c11b58b7e3da9174808a4", "url": "https://github.com/dotCMS/core/commit/10ab88ac56c45d81ce4c11b58b7e3da9174808a4", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2020-11-18T14:57:26Z", "type": "commit"}, {"oid": "8aa57f35892fdfd88656f6121e1e1a4839facd06", "url": "https://github.com/dotCMS/core/commit/8aa57f35892fdfd88656f6121e1e1a4839facd06", "message": "#19234 more MD  fine tune", "committedDate": "2020-11-19T20:48:49Z", "type": "commit"}, {"oid": "4c85fecaeefca3d51c1ce84fa55635884fb02add", "url": "https://github.com/dotCMS/core/commit/4c85fecaeefca3d51c1ce84fa55635884fb02add", "message": "#19234 addign TODOs and fixing test", "committedDate": "2020-11-20T18:00:05Z", "type": "commit"}, {"oid": "77770bb4254f89c3784bb3140633d84a8ea649ff", "url": "https://github.com/dotCMS/core/commit/77770bb4254f89c3784bb3140633d84a8ea649ff", "message": "#19234 fixing tests", "committedDate": "2020-11-20T20:38:19Z", "type": "commit"}, {"oid": "fc149f4b30fdb88fc0dd1bddeb993cc2ffbbd6e2", "url": "https://github.com/dotCMS/core/commit/fc149f4b30fdb88fc0dd1bddeb993cc2ffbbd6e2", "message": "#19234 point to custom ee  version", "committedDate": "2020-11-20T21:17:23Z", "type": "commit"}, {"oid": "7d6e55681315b805bc216b9b78e338f66d918d5b", "url": "https://github.com/dotCMS/core/commit/7d6e55681315b805bc216b9b78e338f66d918d5b", "message": "#19234 force using specific ee", "committedDate": "2020-11-20T21:48:26Z", "type": "commit"}, {"oid": "f53de663172849668dc1a29dc2651841bb5bd79c", "url": "https://github.com/dotCMS/core/commit/f53de663172849668dc1a29dc2651841bb5bd79c", "message": "#19234 updating with master", "committedDate": "2021-01-11T17:42:10Z", "type": "commit"}, {"oid": "161b7ced3330dc061ea0fcac1c095e50d4db2bfb", "url": "https://github.com/dotCMS/core/commit/161b7ced3330dc061ea0fcac1c095e50d4db2bfb", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2021-01-11T21:29:45Z", "type": "commit"}, {"oid": "abe8634253ad30484a67b21ff36a446e056cfb70", "url": "https://github.com/dotCMS/core/commit/abe8634253ad30484a67b21ff36a446e056cfb70", "message": "#19234 save point", "committedDate": "2021-01-11T21:51:51Z", "type": "commit"}, {"oid": "7d75c569fff400931d600644cbcde21e42e43d00", "url": "https://github.com/dotCMS/core/commit/7d75c569fff400931d600644cbcde21e42e43d00", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2021-01-13T19:01:35Z", "type": "commit"}, {"oid": "6a62593ef06f909d054d4f6cf7c02dff6884562d", "url": "https://github.com/dotCMS/core/commit/6a62593ef06f909d054d4f6cf7c02dff6884562d", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2021-01-26T15:52:21Z", "type": "commit"}, {"oid": "be3c7bd43741f44b952ac7466182783cfb00feb1", "url": "https://github.com/dotCMS/core/commit/be3c7bd43741f44b952ac7466182783cfb00feb1", "message": "#19234 adding the _dotraw metadata fields", "committedDate": "2021-01-27T18:49:09Z", "type": "commit"}, {"oid": "c32e5114a958a8fd809aeb9f68546bbad1442fdc", "url": "https://github.com/dotCMS/core/commit/c32e5114a958a8fd809aeb9f68546bbad1442fdc", "message": "#19234 improvements generating metadata dotRaw fields", "committedDate": "2021-01-28T00:27:35Z", "type": "commit"}, {"oid": "4a86f18aa982702bb38d4763b8901de87a930e3f", "url": "https://github.com/dotCMS/core/commit/4a86f18aa982702bb38d4763b8901de87a930e3f", "message": "#19234 this adds more control to include/exclude dotraw metadata fields + a test and adds  fileSize to basic MD", "committedDate": "2021-01-28T22:30:45Z", "type": "commit"}, {"oid": "81560d32feb0e15423aecc9381f3f243201dc52a", "url": "https://github.com/dotCMS/core/commit/81560d32feb0e15423aecc9381f3f243201dc52a", "message": "#19234 adjusting test per new field added  to the basic md", "committedDate": "2021-01-29T15:14:21Z", "type": "commit"}, {"oid": "d57631cbc3651090e788d3a14c33b65ad4c6c704", "url": "https://github.com/dotCMS/core/commit/d57631cbc3651090e788d3a14c33b65ad4c6c704", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2021-01-29T22:32:49Z", "type": "commit"}, {"oid": "261d51a4706d8f4af5448a010e5637d9d698827f", "url": "https://github.com/dotCMS/core/commit/261d51a4706d8f4af5448a010e5637d9d698827f", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2021-02-03T14:30:33Z", "type": "commit"}, {"oid": "0d08f98aa212700d2af2b6bee7e24aea3a8247e3", "url": "https://github.com/dotCMS/core/commit/0d08f98aa212700d2af2b6bee7e24aea3a8247e3", "message": "#19234 save point", "committedDate": "2021-02-03T16:45:07Z", "type": "commit"}, {"oid": "135ea7fa19b7ee3c215d2bcd041009c045dce9a0", "url": "https://github.com/dotCMS/core/commit/135ea7fa19b7ee3c215d2bcd041009c045dce9a0", "message": "#19234 save point", "committedDate": "2021-02-10T19:11:21Z", "type": "commit"}, {"oid": "3c389b58ba1a7b49bdd889b52b8388c1d80b4e0e", "url": "https://github.com/dotCMS/core/commit/3c389b58ba1a7b49bdd889b52b8388c1d80b4e0e", "message": "#19234 fix addCustomAttributes methods + refactoring", "committedDate": "2021-02-11T19:42:17Z", "type": "commit"}, {"oid": "dba697d4690c5dfa95b96de391cb49d7a725edb7", "url": "https://github.com/dotCMS/core/commit/dba697d4690c5dfa95b96de391cb49d7a725edb7", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2021-02-11T19:47:42Z", "type": "commit"}, {"oid": "92feee6cd2faa3bafa958e4122dfbbdd341bc1f4", "url": "https://github.com/dotCMS/core/commit/92feee6cd2faa3bafa958e4122dfbbdd341bc1f4", "message": "#19234 integration witht the focal point branch + more refactoring", "committedDate": "2021-02-12T19:32:01Z", "type": "commit"}, {"oid": "653cd01290bcfb385424d130b9bdb537acfd4d13", "url": "https://github.com/dotCMS/core/commit/653cd01290bcfb385424d130b9bdb537acfd4d13", "message": "#19234 integration witht the focal point branch + more refactoring", "committedDate": "2021-02-12T19:33:16Z", "type": "commit"}, {"oid": "d71177484229918c62ec5c9d3da15eefbfa3bd63", "url": "https://github.com/dotCMS/core/commit/d71177484229918c62ec5c9d3da15eefbfa3bd63", "message": "#19234 focal point integration", "committedDate": "2021-02-14T02:33:17Z", "type": "commit"}, {"oid": "ccf7826f01ee218a73f991b60b7092e17f9ba783", "url": "https://github.com/dotCMS/core/commit/ccf7826f01ee218a73f991b60b7092e17f9ba783", "message": "#19234 fixing erratic behavior when clearing cache and rquesting metadata.", "committedDate": "2021-02-17T16:53:38Z", "type": "commit"}, {"oid": "38b537b217edd7cf66934a534bbbffebdd276624", "url": "https://github.com/dotCMS/core/commit/38b537b217edd7cf66934a534bbbffebdd276624", "message": "#19234  fixing method copyMetadata", "committedDate": "2021-02-17T21:06:19Z", "type": "commit"}, {"oid": "7b7ee97847f6f22e591fa3468edcd7d12ea07e97", "url": "https://github.com/dotCMS/core/commit/7b7ee97847f6f22e591fa3468edcd7d12ea07e97", "message": "#19234  carry out the custom metadata when regenerating it. So we dont loose it.", "committedDate": "2021-02-18T15:03:17Z", "type": "commit"}, {"oid": "331e4d535b3b49a1868c82a23439f764f42a9c6c", "url": "https://github.com/dotCMS/core/commit/331e4d535b3b49a1868c82a23439f764f42a9c6c", "message": "#19234 Removed direct uses of Tika. All metadata related operations must be done through the new API.", "committedDate": "2021-02-18T21:00:32Z", "type": "commit"}, {"oid": "3cf1d1e39bebe20e4aaf44d64e834b1db8f3e0f8", "url": "https://github.com/dotCMS/core/commit/3cf1d1e39bebe20e4aaf44d64e834b1db8f3e0f8", "message": "#19234 save point", "committedDate": "2021-02-22T15:07:54Z", "type": "commit"}, {"oid": "230ddfeb0c4edd2d49b48576a00dc270dfaa77cd", "url": "https://github.com/dotCMS/core/commit/230ddfeb0c4edd2d49b48576a00dc270dfaa77cd", "message": "#19234 new deleteObjectReferences only removes ref not the stored object", "committedDate": "2021-02-23T17:52:57Z", "type": "commit"}, {"oid": "5151ba42a35bda2d50c7ff1f5cc41fa72099c75d", "url": "https://github.com/dotCMS/core/commit/5151ba42a35bda2d50c7ff1f5cc41fa72099c75d", "message": "#19234 feedback from weekly review meeting", "committedDate": "2021-02-27T23:52:31Z", "type": "commit"}, {"oid": "de6ea2fffb7066708e43c4af649452051dd33438", "url": "https://github.com/dotCMS/core/commit/de6ea2fffb7066708e43c4af649452051dd33438", "message": "#19234 fixing test", "committedDate": "2021-03-01T20:38:24Z", "type": "commit"}, {"oid": "291aae3a149bdff86041036442b46ddde7397cce", "url": "https://github.com/dotCMS/core/commit/291aae3a149bdff86041036442b46ddde7397cce", "message": "#19234 Transformers and graphQL fetchers must use metadat API", "committedDate": "2021-03-04T16:23:14Z", "type": "commit"}, {"oid": "26f46995cf5c5d44d4537aece0a21cdadeae676c", "url": "https://github.com/dotCMS/core/commit/26f46995cf5c5d44d4537aece0a21cdadeae676c", "message": "Merge branch 'master' into issue-19234-hookup-metadata-api", "committedDate": "2021-03-04T16:25:08Z", "type": "commit"}, {"oid": "07b876e68728f3cf7378dda374685bcae59d9b22", "url": "https://github.com/dotCMS/core/commit/07b876e68728f3cf7378dda374685bcae59d9b22", "message": "#19234 updating to the proper ee version", "committedDate": "2021-03-04T17:25:31Z", "type": "commit"}, {"oid": "281e07bc22597140d95745544247717883a69bba", "url": "https://github.com/dotCMS/core/commit/281e07bc22597140d95745544247717883a69bba", "message": "#19234 pp support for Metadata", "committedDate": "2021-03-11T19:35:40Z", "type": "commit"}, {"oid": "f8cb9bd0ad2e651560057decb3ff4e9b5309218f", "url": "https://github.com/dotCMS/core/commit/f8cb9bd0ad2e651560057decb3ff4e9b5309218f", "message": "#19234 pp support for Metadata", "committedDate": "2021-03-11T19:55:32Z", "type": "commit"}, {"oid": "54da6e6bd70d0c1dfd8607fe7ce90360453e2c33", "url": "https://github.com/dotCMS/core/commit/54da6e6bd70d0c1dfd8607fe7ce90360453e2c33", "message": "#19234 pp support for Metadata", "committedDate": "2021-03-11T20:15:02Z", "type": "commit"}, {"oid": "eb8cd153ba79e4a41962049947c008c254c18d02", "url": "https://github.com/dotCMS/core/commit/eb8cd153ba79e4a41962049947c008c254c18d02", "message": "#19234  stabilizing tests", "committedDate": "2021-03-12T21:04:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYxOTMxMg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594619312", "bodyText": "please rollback this change", "author": "nollymar", "createdAt": "2021-03-15T19:20:40Z", "path": ".gitmodules", "diffHunk": "@@ -1,5 +1,5 @@\n [submodule \"dotCMS/src/main/enterprise\"]\n \tpath = dotCMS/src/main/enterprise\n \turl = git@github.com:dotCMS/enterprise.git\n-\tbranch = master\n+\tbranch = issue-19234-hookup-metadata-api", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM0ODQ3OA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596348478", "bodyText": "Once I'm done with this whole thing and we know we're ready to merge I will", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-17T20:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYxOTMxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYxOTQ2MQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594619461", "bodyText": "and this one too", "author": "nollymar", "createdAt": "2021-03-15T19:20:54Z", "path": "dotCMS/dependencies.gradle", "diffHunk": "@@ -3,7 +3,9 @@ dependencies {\n \n     def eeType = dotcmsReleaseVersion.equals(\"master\") ? '-SNAPSHOT' : ''\n \n-    compile group: 'com.dotcms.enterprise', name: 'ee', version: dotcmsReleaseVersion + eeType, changing: true\n+   // compile group: 'com.dotcms.enterprise', name: 'ee', version: dotcmsReleaseVersion + eeType, changing: true\n+    //compile fileTree(dir: 'src/main/enterprise/build/libs', include: ['ee_clean.jar'])\n+    compile group: 'com.dotcms.enterprise', name: 'ee', version: 'issue-19234-hookup-metadata-api-20210311.195257-5', changing: true", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYxOTU4MQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594619581", "bodyText": "and this", "author": "nollymar", "createdAt": "2021-03-15T19:21:04Z", "path": "dotCMS/gradle.properties", "diffHunk": "@@ -1,4 +1,4 @@\n-dotcmsReleaseVersion=master\n+dotcmsReleaseVersion=issue-19234-hookup-metadata-api", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYyNTYyNg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594625626", "bodyText": "why is this commented? Are you sure the license used is community?", "author": "nollymar", "createdAt": "2021-03-15T19:30:47Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/license/LicenseManagerTest.java", "diffHunk": "@@ -28,7 +28,7 @@ public static void prepare() throws Exception {\n     public void test_checkServerDuplicity_community() throws Exception {\n         try {\n             LicenseManager.getInstance().freeLicenseOnRepo();\n-            assertEquals(LicenseLevel.COMMUNITY.level, LicenseManager.getInstance().license.level);\n+            //assertEquals(LicenseLevel.COMMUNITY.level, LicenseManager.getInstance().license.level);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM0NjM0Nw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596346347", "bodyText": "I'm rolling that back. not my changes. Probably came from the focal point branch I merged with", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-17T20:09:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYyNTYyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYyNTY5Ng==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594625696", "bodyText": "why is this commented? Are you sure the license used is community?", "author": "nollymar", "createdAt": "2021-03-15T19:30:55Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/license/LicenseManagerTest.java", "diffHunk": "@@ -38,7 +38,7 @@ public void test_checkServerDuplicity_community() throws Exception {\n     @Test\n     public void test_checkServerDuplicity_noDups() throws Exception {\n         LicenseManager.getInstance().updateServerStartTime();\n-        assertNotEquals(LicenseLevel.COMMUNITY.level, LicenseManager.getInstance().license.level);\n+        //assertNotEquals(LicenseLevel.COMMUNITY.level, LicenseManager.getInstance().license.level);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYyNjAzMQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594626031", "bodyText": "why is this commented? Are you sure the license used is community?", "author": "nollymar", "createdAt": "2021-03-15T19:31:27Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/license/LicenseManagerTest.java", "diffHunk": "@@ -65,7 +66,7 @@ public void test_checkServerDuplicity_dups() throws Exception {\n                     .loadResult();\n             added = true;\n \n-            assertNotEquals(LicenseLevel.COMMUNITY.level, LicenseManager.getInstance().license.level);\n+          //  assertNotEquals(LicenseLevel.COMMUNITY.level, LicenseManager.getInstance().license.level);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM0OTI0NA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596349244", "bodyText": "rolling all this back, not my changes. They're probably from the focal point branch", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-17T20:14:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYyNjAzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYyNjEyOA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594626128", "bodyText": "remove this commented line", "author": "nollymar", "createdAt": "2021-03-15T19:31:37Z", "path": "dotCMS/src/integration-test/java/com/dotcms/enterprise/license/LicenseManagerTest.java", "diffHunk": "@@ -52,7 +52,8 @@ public void test_checkServerDuplicity_dups() throws Exception {\n             dotConnect\n                     .setSQL(\"SELECT * FROM sitelic WHERE serverid = ? AND license = ?\")\n                     .addParam(serverId)\n-                    .addParam(LicenseManager.getInstance().license.raw);\n+              //      .addParam(LicenseManager.getInstance().license.raw)", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDYyODAwMA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594628000", "bodyText": "Test description is missing", "author": "nollymar", "createdAt": "2021-03-15T19:34:50Z", "path": "dotCMS/src/integration-test/java/com/dotcms/storage/FileMetadataAPITest.java", "diffHunk": "@@ -75,39 +98,119 @@ public void Test_Generate_Metadata_From_FileAssets(final TestCase testCase) thro\n             assertNotNull(metadata.getFullMetadataMap());\n \n             validateBasicStrict(metadata.getBasicMetadataMap().get(FILE_ASSET));\n-            validateFull(metadata.getFullMetadataMap().get(FILE_ASSET), testCase.testFile);\n+            validateFull(metadata.getFullMetadataMap().get(FILE_ASSET));\n+\n+            final Map<String, Set<String>> metadataInfo = fileMetadataAPI.removeMetadata(testCase.fileAssetContent);\n+            assertFalse(metadataInfo.isEmpty());\n+            //Verify the metadata got removed successfully\n+            final StoragePersistenceAPI storage = StoragePersistenceProvider.INSTANCE.get().getStorage(testCase.storageType);\n+            metadataInfo.forEach((metadataGroup, metadataPaths) -> {\n+                 for(final String path: metadataPaths){\n+                     try {\n+                         Assert.assertFalse(storage.existsObject(metadataGroup, path));\n+                     } catch (DotDataException e) {\n+                         fail(\"Failure verifying object existence :\" + e.getMessage());\n+                     }\n+                 }\n+            });\n+\n         }finally {\n             Config.setProperty(DEFAULT_STORAGE_TYPE,stringProperty);\n         }\n \n     }\n \n+    /**\n+     *", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY0OTg1NA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594649854", "bodyText": "I think this validation should be ((key.equals(\"width\") || key.equals(\"height\")) && !(Boolean)meta.get(\"isImage\"))", "author": "nollymar", "createdAt": "2021-03-15T20:10:20Z", "path": "dotCMS/src/integration-test/java/com/dotcms/storage/FileMetadataAPITest.java", "diffHunk": "@@ -156,35 +259,36 @@ private void validateFull(final Map<String, Serializable> metaData, final TestFi\n      * validate basic layout expected in the basic md for File-Asset\n      * @param metaData\n      */\n-    private void validateBasic(final Map<String, Serializable> metaData){\n+    private void validateBasic(final Metadata metaData){\n+        final Map<String, Serializable> meta = metaData.getFieldsMeta();\n         basicMetadataFields.forEach(key -> {\n-            assertTrue(metaData.containsKey(key));\n+\n+            if (key.equals(\"width\") || key.equals(\"height\") && !(Boolean)meta.get(\"isImage\")) {", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY1MDM2OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594650369", "bodyText": "or to make it more clear: ((Boolean)meta.get(\"isImage\") && !(key.equals(\"width\") || key.equals(\"height\")))", "author": "nollymar", "createdAt": "2021-03-15T20:11:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY0OTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY1MTc3NA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594651774", "bodyText": "there is a typo: \"field\"", "author": "nollymar", "createdAt": "2021-03-15T20:13:43Z", "path": "dotCMS/src/integration-test/java/com/dotcms/storage/FileMetadataAPITest.java", "diffHunk": "@@ -195,42 +299,59 @@ private boolean isSupportedImage(final String fileName) {\n      */\n     @Test\n     @UseDataProvider(\"getStorageType\")\n-    public void Test_Generate_Metadata_From_ContentType_With_Multiple_Binary_Fields(final StorageType storageType) throws IOException, DotDataException {\n+    public void Test_Generate_Metadata_From_ContentType_With_Multiple_Binary_Fields(final StorageType storageType) throws Exception {\n+        prepareIfNecessary();\n         final long langId = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n         final String stringProperty = Config.getStringProperty(DEFAULT_STORAGE_TYPE);\n         try {\n             Config.setProperty(DEFAULT_STORAGE_TYPE, storageType.name());\n \n             //Multiple binary fields\n-            final Contentlet multipleBinariesContent = getMultipleBinariesContent(true, langId, null);\n+            final Contentlet multipleBinariesContent = getMultipleImageBinariesContent(true, langId, null);\n \n             //Multiple binary fields\n-            final ContentletMetadata multiBinaryMetadata = contentletMetadataAPI\n+            //since the index operation performs this very same operation here the method generateContentletMetadata should retrieve the existing metadata.\n+            final ContentletMetadata multiBinaryMetadata = fileMetadataAPI\n                     .generateContentletMetadata(multipleBinariesContent);\n             assertNotNull(multiBinaryMetadata);\n \n-            final Map<String, Map<String, Serializable>> fullMetadataMap = multiBinaryMetadata\n+            final Map<String, Metadata> fullMetadataMap = multiBinaryMetadata\n                     .getFullMetadataMap();\n             assertNotNull(fullMetadataMap);\n \n-            final Map<String, Map<String, Serializable>> basicMetadataMap = multiBinaryMetadata\n+            final Map<String, Metadata> basicMetadataMap = multiBinaryMetadata\n                     .getBasicMetadataMap();\n             assertNotNull(basicMetadataMap);\n \n             //the filed is set as the first one according to the sortOrder prop. This is the only that has to have full metadata", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY1NzI1Ng==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594657256", "bodyText": "why is the FileSystem storage commented?", "author": "nollymar", "createdAt": "2021-03-15T20:22:40Z", "path": "dotCMS/src/integration-test/java/com/dotcms/storage/StoragePersistenceAPITest.java", "diffHunk": "@@ -295,7 +338,7 @@ public void Test_Push_Large_File(final TestCase testCase)\n         }\n \n         return new Object[]{\n-                new TestCase(StorageType.FILE_SYSTEM, groupName, path, temp),\n+              //  new TestCase(StorageType.FILE_SYSTEM, groupName, path, temp),", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDg1NzE3Nw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594857177", "bodyText": "yeah, I was chasing a bug and I wanted to narrow the scope. restored", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-16T04:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY1NzI1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY1OTYyMA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594659620", "bodyText": "remove these commented lines", "author": "nollymar", "createdAt": "2021-03-15T20:26:35Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/transform/BinaryToMapTransformerTest.java", "diffHunk": "@@ -148,10 +150,13 @@ public void test_BinaryToMapTransformer_transform()\n                     .setProperty(\"bin3\", testImage)\n                     .nextPersisted();\n \n-            final BinaryToMapTransformer transformer =\n-                    new BinaryToMapTransformer(contentWithBinaries);\n+            //final BinaryToMapTransformer transformer =", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MDU5OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594660599", "bodyText": "I think it should be Config.setStringProperty(\"ASSET_REAL_PATH\", assetRealPath)", "author": "nollymar", "createdAt": "2021-03-15T20:28:04Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/startup/runonce/Task210304RemoveOldMetadataFilesTest.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import static com.dotcms.datagen.TestDataUtils.getMultipleBinariesContent;\n+import static com.dotcms.storage.StoragePersistenceProvider.DEFAULT_STORAGE_TYPE;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.contenttype.model.field.BinaryField;\n+import com.dotcms.storage.StoragePersistenceProvider;\n+import com.dotcms.storage.StorageType;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.util.Config;\n+import io.vavr.Tuple2;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class Task210304RemoveOldMetadataFilesTest {\n+\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        // Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+    @Test\n+    public void Test_Upgrade_Task()\n+            throws DotDataException, IOException, ExecutionException, InterruptedException {\n+        final String assetRealPath = Config.getStringProperty(\"ASSET_REAL_PATH\", null);\n+        final String stringProperty = Config.getStringProperty(DEFAULT_STORAGE_TYPE);\n+        StoragePersistenceProvider.INSTANCE.get().forceInitialize();\n+        try {\n+            final Path temp = Files.createTempDirectory(null);\n+            Config.setProperty(\"ASSET_REAL_PATH\", temp.toString());\n+            Config.setProperty(DEFAULT_STORAGE_TYPE, StorageType.FILE_SYSTEM.name());\n+\n+            final long langId = APILocator.getLanguageAPI().getDefaultLanguage().getId();\n+            final Contentlet contentlet = getMultipleBinariesContent(true, langId, null);\n+\n+            APILocator.getFileMetadataAPI().generateContentletMetadata(contentlet);\n+\n+            final Task210304RemoveOldMetadataFiles task = new Task210304RemoveOldMetadataFiles();\n+            assertTrue(task.forceRun());\n+            task.executeUpgrade();\n+            final Tuple2<Integer, Integer> tuple = task.getFuture().get();\n+            final long count = contentlet.getContentType().fields(BinaryField.class).stream().filter(field -> null != contentlet.get(field.variable())).count();\n+            assertTrue(tuple._1 >= count);\n+            assertEquals(0, tuple._2.intValue());\n+\n+        } finally {\n+            Config.setProperty(DEFAULT_STORAGE_TYPE, stringProperty);\n+            Config.getStringProperty(\"ASSET_REAL_PATH\", assetRealPath);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MzcyMw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594663723", "bodyText": "I think this validation is not required because a content will always be live and/or working. It will always evaluate to true", "author": "nollymar", "createdAt": "2021-03-15T20:33:22Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESMappingAPIImpl.java", "diffHunk": "@@ -359,20 +389,47 @@ public String toJson(final Contentlet contentlet) throws DotMappingException {\n                 mlowered.put(lowerCaseKey, lowerCaseValue);\n \t\t\t}\n \n-\t\t\tfinal Optional<Field> binaryField = this.findFirstBinaryFieldIndexable(contentlet);\n-\t\t\tif (binaryField.isPresent()) {\n+\t\t\tif (Config.getBooleanProperty(WRITE_METADATA_ON_REINDEX, true)) {\n \n-\t\t\t\tthis.generateBinaryMetadata(contentlet, sw, mlowered, binaryField.get());\n+\t\t\t\tif (contentlet.isLive() || contentlet.isWorking()) {", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTUzODc4Ng==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r595538786", "bodyText": "right", "author": "jdotcms", "createdAt": "2021-03-16T21:03:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MzcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM1MTIxMw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596351213", "bodyText": "yeah it's coming from the old logic that was already in place. it's just a refactoring", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-17T20:17:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MzcyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM3NDY2OA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596374668", "bodyText": "okey dokey - removed", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-17T20:53:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2MzcyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2NTY2OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594665669", "bodyText": "can all this logic be extracted to a private method?", "author": "nollymar", "createdAt": "2021-03-15T20:36:42Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESMappingAPIImpl.java", "diffHunk": "@@ -359,20 +389,47 @@ public String toJson(final Contentlet contentlet) throws DotMappingException {\n                 mlowered.put(lowerCaseKey, lowerCaseValue);\n \t\t\t}\n \n-\t\t\tfinal Optional<Field> binaryField = this.findFirstBinaryFieldIndexable(contentlet);\n-\t\t\tif (binaryField.isPresent()) {\n+\t\t\tif (Config.getBooleanProperty(WRITE_METADATA_ON_REINDEX, true)) {\n \n-\t\t\t\tthis.generateBinaryMetadata(contentlet, sw, mlowered, binaryField.get());\n+\t\t\t\tif (contentlet.isLive() || contentlet.isWorking()) {\n \n-\t\t\t\tif (BaseContentType.FILEASSET.equals(contentlet.getContentType().baseType())) {\n-\t\t\t\t\t// see if we have content metadata\n-\t\t\t\t\tfinal File contentMeta = APILocator.getFileAssetAPI().getContentMetadataFile(contentlet.getInode());\n-\t\t\t\t\tif (contentMeta.exists() && contentMeta.length() > 0) {\n-\t\t\t\t\t\tfinal String contentData = APILocator.getFileAssetAPI().getContentMetadataAsString(contentMeta);\n-\t\t\t\t\t\tmlowered.put(FileAssetAPI.META_DATA_FIELD.toLowerCase() + StringPool.PERIOD + \"content\", contentData);\n-\t\t\t\t\t}\n+\t\t\t\t\tfinal ContentletMetadata metadata = fileMetadataAPI", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM4NzU2OA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596387568", "bodyText": "sure.. done!", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-17T21:14:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2NTY2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2NjUxOQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594666519", "bodyText": "when is the TODO going to be implemented?", "author": "nollymar", "createdAt": "2021-03-15T20:37:55Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESMappingAPIImpl.java", "diffHunk": "@@ -390,71 +447,23 @@ public String toJson(final Contentlet contentlet) throws DotMappingException {\n \t\t}\n \t}\n \n-\tprivate void generateBinaryMetadata(final Contentlet contentlet,\n-\t\t\t\t\t\t\t\t\t\tfinal StringWriter stringWriter,\n-\t\t\t\t\t\t\t\t\t\tfinal Map<String, Object> mapLowered,\n-\t\t\t\t\t\t\t\t\t\tfinal Field field) throws Exception {\n-\n-\t\t//Verify if it is enabled the option to regenerate missing metadata files on reindex\n-\t\tfinal boolean regenerateMissingMetadata = Config\n-\t\t\t\t.getBooleanProperty(\"regenerate.missing.metadata.on.reindex\", true);\n-\n-\t\t/*\n-\t\tVerify if it is enabled the option to always regenerate metadata files on reindex,\n-\t\tenabling this could affect greatly the performance of a reindex process.\n-\t\t */\n-\t\tfinal boolean alwaysRegenerateMetadata = Config\n-\t\t\t\t.getBooleanProperty(\"always.regenerate.metadata.on.reindex\", false);\n-\n-\t\tMap<String, Object> metadataMap = null;\n-\n-\t\tif (contentlet.isLive() || contentlet.isWorking()) {\n-\n-\t\t\tfinal Optional<com.dotcms.contenttype.model.field.FieldVariable> customIndexMetaDataFieldsOpt =\n-\t\t\t\t\tFactoryLocator.getFieldFactory().byFieldVariableKey(field.getIdentifier(), BinaryField.INDEX_METADATA_FIELDS);\n-\t\t\tfinal TikaUtils tikaUtils = new TikaUtils();\n-\n-\t\t\tfinal Set<String> metadataFields = customIndexMetaDataFieldsOpt.isPresent()?\n-\t\t\t\t\tnew HashSet<>(Arrays.asList(customIndexMetaDataFieldsOpt.get().value().split(StringPool.COMMA))):\n-\t\t\t\t\ttikaUtils.getConfiguredMetadataFields();  // gets the metadata fields to filter from the tika metadata\n-\n-\t\t\tfinal File binaryField = contentlet.getBinary(field.getVelocityVarName());\n-\t\t\tif (null != binaryField && binaryField.exists() && binaryField.canRead()) {\n-\n-\t\t\t\tif (alwaysRegenerateMetadata) {\n-\t\t\t\t\tmetadataMap = tikaUtils.generateMetaDataForce(contentlet, binaryField, field.getVelocityVarName(), metadataFields);\n-\t\t\t\t} else if (regenerateMissingMetadata) {\n-\t\t\t\t\tmetadataMap = tikaUtils.generateMetaData(contentlet, binaryField, field.getVelocityVarName(), metadataFields);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// see if we have content metadata\n-\t\t\tif(null != metadataMap) {\n-\n-\t\t\t\tfor (final String metadataKey : metadataFields) {\n-\n-\t\t\t\t\tfinal Object metadataValue = metadataMap.get(metadataKey);\n-\t\t\t\t\tif (null != metadataValue) {\n-\t\t\t\t\t\tmapLowered.put(FileAssetAPI.META_DATA_FIELD.toLowerCase() + StringPool.PERIOD + metadataKey.toLowerCase(), metadataValue);\n-\t\t\t\t\t\tif (metadataKey.contains(FileAssetAPI.CONTENT_FIELD)) {\n-\t\t\t\t\t\t\tstringWriter.append(metadataValue.toString()).append(' ');\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate Optional<Field> findFirstBinaryFieldIndexable(final Contentlet contentlet) {\n-\n-\t\tfinal List<Field> fields  = new ArrayList<>(\n-\t\t\t\tFieldsCache.getFieldsByStructureInode(contentlet.getStructureInode()));\n-\n-\t\treturn fields.stream().filter(Field::isIndexed)\n-\t\t\t\t.filter(field -> field.getFieldType().equals(Field.FieldType.BINARY.toString()))\n-\t\t\t\t.findFirst();\n-\t}\n \n+    private Object preProcessValue(final String compositeKey, final Object value) {\n+        if (\"metadata.content\".equals(compositeKey)) {\n+            if (null == value) {\n+                //This \"NO_METADATA\" constant is getting relocated from tika utils\n+                return NO_METADATA;\n+            }\n+            //TODO:make sure this is not a dupe META_DATA_MAX_SIZE", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM5Njk5MA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596396990", "bodyText": "done!. Comment updated", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-17T21:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2NjUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY2NzI3OA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594667278", "bodyText": "please remove unused and commented imports", "author": "nollymar", "createdAt": "2021-03-15T20:39:15Z", "path": "dotCMS/src/main/java/com/dotcms/contenttype/util/KeyValueFieldUtil.java", "diffHunk": "@@ -2,15 +2,13 @@\n \r\n // import com.fasterxml.jackson.core.JsonFactory;\r", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3MjMxNQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594672315", "bodyText": "the file itself is decomposed into a sha256 representation", "author": "nollymar", "createdAt": "2021-03-15T20:47:31Z", "path": "dotCMS/src/main/java/com/dotcms/storage/DataBaseStoragePersistenceAPIImpl.java", "diffHunk": "@@ -358,138 +445,164 @@ public Object pushFile(final String groupName, final String path,\n         // 2. see if the sha-256 exists\n         // 2.1 if exists only insert on the reference\n         // 2.2 if does not exists, insert a new one\n-        final Map<String, Serializable> metaData = processMetadata(file, extraMeta);\n-        final String fileHash = (String) metaData.get(FileStorageAPI.SHA226_META_KEY);\n+        final Map<String, Serializable> metaData = hashFile(file, extraMeta);\n+        final String fileHash = (String) metaData.get(SHA256_META_KEY.key());\n \n         return wrapInTransaction(\n                 () -> {\n-                    if (!existsGroup(groupName)) {\n-                        throw new IllegalArgumentException(\"The groupName: \" + groupName +\n-                                \", does not exist.\");\n-                    }\n-                    if (this.existsObject(groupName, path)) {\n-                        Logger.warn(DataBaseStoragePersistenceAPIImpl.class,\n-                                String.format(\"Attempt to override entry `%s/%s` \", groupName,\n-                                        path));\n-                        return false;\n+                    try (final Connection connection = getConnection()) {\n+                        if (!existsGroup(groupName, connection)) {\n+                            throw new IllegalArgumentException(\"The groupName: \" + groupName +\n+                                    \", does not exist.\");\n+                        }\n+                        if (this.existsObject(groupName, path, connection)) {\n+                            Logger.warn(DataBaseStoragePersistenceAPIImpl.class,\n+                                    String.format(\"Attempt to override entry `%s/%s` \", groupName,\n+                                            path));\n+                            return false;\n+                        }\n+                        return existsHashReference(fileHash, connection) ?\n+                                this.pushFileReference(groupName, path, metaData, fileHash, connection) :\n+                                this.pushNewFile(groupName, path, file, metaData, connection);\n                     }\n-                    return this.existsHash(fileHash) ?\n-                            this.pushFileReference(groupName, path, metaData, fileHash) :\n-                            this.pushNewFile(groupName, path, file, metaData);\n                 });\n     }\n \n     /**\n-     * Selects directly on storage-data since hash is the primary key there.\n+     * Vali\n+     * @param fileHash\n+     * @param connection\n+     * @return\n      */\n-    private boolean existsHash(final String fileHash) throws DotDataException {\n+    private boolean existsHashReference(final String fileHash, final Connection connection) {\n         final MutableBoolean exists = new MutableBoolean(false);\n-        try (Connection connection = getConnection()) {\n             final Number results = Try\n                     .of(() -> {\n                                 final List<Map<String, Object>> result = new DotConnect()\n-                                        .setSQL(\"SELECT count(*) as x FROM storage_data WHERE hash_id = ?\")\n+                                        .setSQL(\"SELECT count(*) as x FROM storage_x_data WHERE storage_hash = ?\")\n                                         .addParam(fileHash)\n                                         .loadObjectResults(connection);\n                                 return (Number) result.get(0).get(\"x\");\n                             }\n                     ).getOrElse(0);\n             exists.setValue(results.intValue() > 0);\n-        } catch (SQLException e) {\n-            throw new DotDataException(e.getMessage(), e);\n-        }\n-\n         return exists.getValue();\n     }\n-\n-    private Map<String, Serializable> processMetadata(final File file,\n-            final Map<String, Serializable> extraMeta) {\n-\n-        if (UtilMethods.isSet(extraMeta) && extraMeta.containsKey(FileStorageAPI.SHA226_META_KEY)) {\n-\n-            return extraMeta;\n-        }\n-\n-        final ImmutableMap.Builder<String, Serializable> metaData = new ImmutableMap.Builder<>();\n-\n-        if (UtilMethods.isSet(extraMeta)) {\n-\n-            metaData.putAll(extraMeta);\n-        }\n-\n-        metaData.putAll(APILocator.getFileStorageAPI().generateRawBasicMetaData(file));\n-\n-        return metaData.build();\n-    }\n-\n+    \n     private Object pushFileReference(final String groupName, final String path,\n-            final Map<String, Serializable> extraMeta, final String objectHash) throws DotDataException {\n+            final Map<String, Serializable> extraMeta, final String objectHash, final Connection connection) throws DotDataException {\n         final String groupNameLC = groupName.toLowerCase();\n         final String pathLC = path.toLowerCase();\n+        final String hashRef = (String)extraMeta.get(HASH_REF);\n         try {\n-            final StringWriter metaDataJsonWriter = new StringWriter();\n-            this.objectMapper.writeValue(metaDataJsonWriter, extraMeta);\n-            new DotConnect().executeUpdate(this.getConnection(),\n-                    \"INSERT INTO storage(hash, path, group_name, metadata) VALUES (?, ?, ?, ?)\",\n-                    objectHash, pathLC, groupNameLC, metaDataJsonWriter.toString());\n+            new DotConnect().executeUpdate(connection,\n+                    \"INSERT INTO storage(hash, path, group_name, hash_ref) VALUES (?, ?, ?, ?)\",\n+                    objectHash, pathLC, groupNameLC, hashRef);\n             return true;\n-        } catch (DotDataException | IOException e) {\n+        } catch (DotDataException e) {\n             Logger.error(DataBaseStoragePersistenceAPIImpl.class, e.getMessage(), e);\n             throw new DotDataException(e);\n         }\n     }\n \n     private Object pushNewFile(final String groupName, final String path, final File file,\n-            final Map<String, Serializable> extraMeta) {\n+            final Map<String, Serializable> extraMeta, final Connection connection ) {\n         final String groupNameLC = groupName.toLowerCase();\n         final String pathLC = path.toLowerCase();\n+        final String hashRef = (String)extraMeta.get(HASH_REF);\n         try (final FileByteSplitter fileSplitter = new FileByteSplitter(file)) {\n \n             final HashBuilder objectHashBuilder = Encryptor.Hashing.sha256();\n-            final List<String> chunkHashes = new ArrayList<>();\n+            final List<String> chunkHashes = new LinkedList<>();\n \n             for (final Tuple2<byte[], Integer> bytesRead : fileSplitter) {\n \n                 objectHashBuilder.append(bytesRead._1(), bytesRead._2());\n                 final String chunkHash = Encryptor.Hashing.sha256().append\n                         (bytesRead._1(), bytesRead._2()).buildUnixHash();\n                 chunkHashes.add(chunkHash);\n-                new DotConnect().executeUpdate(this.getConnection(),\n-                        \"INSERT INTO storage_data(hash_id, data) VALUES (?, ?)\",\n-                        chunkHash,\n-                        bytesRead._1().length == bytesRead._2() ?\n-                                bytesRead._1() : this.chunkBytes(bytesRead._2(), bytesRead._1()));\n+\n+                    new DotConnect().executeUpdate(connection,\n+                            \"INSERT INTO storage_data(hash_id, data) VALUES (?, ?)\",\n+                            chunkHash,\n+                            bytesRead._1().length == bytesRead._2() ?\n+                                    bytesRead._1() : chunkBytes(bytesRead._2(), bytesRead._1()));\n+\n             }\n \n             final String objectHash = objectHashBuilder.buildUnixHash();\n-            final StringWriter metaDataJsonWriter = new StringWriter();\n-            this.objectMapper.writeValue(metaDataJsonWriter, extraMeta);\n-            new DotConnect().executeUpdate(this.getConnection(),\n-                    \"INSERT INTO storage(hash, path, group_name, metadata) VALUES (?, ?, ?, ?)\",\n-                    objectHash, pathLC, groupNameLC, metaDataJsonWriter.toString());\n \n             int order = 1;\n             for (final String chunkHash : chunkHashes) {\n \n-                new DotConnect().executeUpdate(this.getConnection(),\n+                new DotConnect().executeUpdate(connection,\n                         \"INSERT INTO storage_x_data(storage_hash, data_hash, data_order) VALUES (?, ?, ?)\",\n                         objectHash, chunkHash, order++);\n             }\n \n+            new DotConnect().executeUpdate(connection,\n+                    \"INSERT INTO storage(hash, path, group_name, hash_ref) VALUES (?, ?, ?, ?)\",\n+                    objectHash, pathLC, groupNameLC, hashRef);\n+\n+\n             return true;\n         } catch (DotDataException | NoSuchAlgorithmException | IOException e) {\n             Logger.error(DataBaseStoragePersistenceAPIImpl.class, e.getMessage(), e);\n             throw new DotRuntimeException(e);\n         }\n+\n+    }\n+\n+    /**\n+     * if the param `hashObject` is set then the file it self is decomposed into a sha254 representation", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3NTMyMw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594675323", "bodyText": "if we want to force the metadata generation, this if shouldn't be above? Otherwise, if metadataMap != null, this code won't be reached", "author": "nollymar", "createdAt": "2021-03-15T20:52:12Z", "path": "dotCMS/src/main/java/com/dotcms/storage/FileMetadataAPIImpl.java", "diffHunk": "@@ -272,45 +303,128 @@ public ContentletMetadata generateContentletMetadata(final Contentlet contentlet\n      * @return\n      */\n     @Override\n-    public Map<String, Serializable> getMetadata(final Contentlet contentlet,final  String fieldVariableName)\n+    public Metadata getMetadata(final Contentlet contentlet,final  String fieldVariableName)\n             throws DotDataException {\n \n-        final StorageType storageType = StoragePersistenceProvider.getStorageType();\n-        final String metadataBucketName = Config.getStringProperty(METADATA_GROUP_NAME, DOT_METADATA);\n-        final String metadataPath       = this.getFileName(contentlet, fieldVariableName);\n+        return getMetadata(contentlet, fieldVariableName, false);\n+    }\n \n-        return this.fileStorageAPI.retrieveMetaData(\n-                new RequestMetadata.Builder()\n-                        .wrapMetadataMapForCache(this::filterNonCacheableMetadataFields)\n-                        .cache(()-> contentlet.getInode() + StringPool.COLON + fieldVariableName)\n-                        .storageKey(new StorageKey.Builder().group(metadataBucketName).path(metadataPath).storage(storageType).build())\n-                        .build()\n-        );\n+    /**\n+     * {@inheritDoc}\n+     * @param contentlet          {@link Contentlet}\n+     * @param fieldVariableName  {@link String}\n+     * @return\n+     */\n+    @Override\n+    public Metadata getMetadataForceGenerate(final Contentlet contentlet, final String fieldVariableName)\n+            throws DotDataException {\n+        return getMetadata(contentlet, fieldVariableName, true);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     * @param contentlet          {@link Contentlet}\n+     * @param fieldVariableName  {@link String}\n+     * @param forceGenerate  @boolean\n+     * @return\n+     */\n+    private Metadata getMetadata(final Contentlet contentlet, final String fieldVariableName, final boolean forceGenerate)\n+            throws DotDataException {\n+\n+        if(null != contentlet.get(fieldVariableName)) {\n+            final StorageType storageType = StoragePersistenceProvider.getStorageType();\n+            final String metadataBucketName = Config\n+                    .getStringProperty(METADATA_GROUP_NAME, DOT_METADATA);\n+            final String metadataPath = getFileName(contentlet, fieldVariableName);\n+\n+            Map<String, Serializable> metadataMap = fileStorageAPI.retrieveMetaData(\n+                    new FetchMetadataParams.Builder()\n+                            .projectionMapForCache(this::filterNonCacheableMetadataFields)\n+                            .cache(() -> contentlet.getInode() + StringPool.COLON\n+                                    + fieldVariableName)\n+                            .storageKey(new StorageKey.Builder().group(metadataBucketName)\n+                                    .path(metadataPath).storage(storageType).build())\n+                            .build()\n+            );\n+\n+            if (null != metadataMap) {\n+                return new Metadata(fieldVariableName, metadataMap);\n+            }\n+\n+            if (forceGenerate) {", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDg2NDYzMg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594864632", "bodyText": "yeah, it's fine. if metadata == null\nit means it doesn't exist. Therefore we have the option to force its generation. So to summarize if the metadata wasn't found and the flag forceGenerate is true we do generate it.", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-16T05:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3NTMyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3NTcyOA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594675728", "bodyText": "I think the previous comment applies here also", "author": "nollymar", "createdAt": "2021-03-15T20:52:55Z", "path": "dotCMS/src/main/java/com/dotcms/storage/FileMetadataAPIImpl.java", "diffHunk": "@@ -272,45 +303,128 @@ public ContentletMetadata generateContentletMetadata(final Contentlet contentlet\n      * @return\n      */\n     @Override\n-    public Map<String, Serializable> getMetadata(final Contentlet contentlet,final  String fieldVariableName)\n+    public Metadata getMetadata(final Contentlet contentlet,final  String fieldVariableName)\n             throws DotDataException {\n \n-        final StorageType storageType = StoragePersistenceProvider.getStorageType();\n-        final String metadataBucketName = Config.getStringProperty(METADATA_GROUP_NAME, DOT_METADATA);\n-        final String metadataPath       = this.getFileName(contentlet, fieldVariableName);\n+        return getMetadata(contentlet, fieldVariableName, false);\n+    }\n \n-        return this.fileStorageAPI.retrieveMetaData(\n-                new RequestMetadata.Builder()\n-                        .wrapMetadataMapForCache(this::filterNonCacheableMetadataFields)\n-                        .cache(()-> contentlet.getInode() + StringPool.COLON + fieldVariableName)\n-                        .storageKey(new StorageKey.Builder().group(metadataBucketName).path(metadataPath).storage(storageType).build())\n-                        .build()\n-        );\n+    /**\n+     * {@inheritDoc}\n+     * @param contentlet          {@link Contentlet}\n+     * @param fieldVariableName  {@link String}\n+     * @return\n+     */\n+    @Override\n+    public Metadata getMetadataForceGenerate(final Contentlet contentlet, final String fieldVariableName)\n+            throws DotDataException {\n+        return getMetadata(contentlet, fieldVariableName, true);\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     * @param contentlet          {@link Contentlet}\n+     * @param fieldVariableName  {@link String}\n+     * @param forceGenerate  @boolean\n+     * @return\n+     */\n+    private Metadata getMetadata(final Contentlet contentlet, final String fieldVariableName, final boolean forceGenerate)\n+            throws DotDataException {\n+\n+        if(null != contentlet.get(fieldVariableName)) {\n+            final StorageType storageType = StoragePersistenceProvider.getStorageType();\n+            final String metadataBucketName = Config\n+                    .getStringProperty(METADATA_GROUP_NAME, DOT_METADATA);\n+            final String metadataPath = getFileName(contentlet, fieldVariableName);\n+\n+            Map<String, Serializable> metadataMap = fileStorageAPI.retrieveMetaData(\n+                    new FetchMetadataParams.Builder()\n+                            .projectionMapForCache(this::filterNonCacheableMetadataFields)\n+                            .cache(() -> contentlet.getInode() + StringPool.COLON\n+                                    + fieldVariableName)\n+                            .storageKey(new StorageKey.Builder().group(metadataBucketName)\n+                                    .path(metadataPath).storage(storageType).build())\n+                            .build()\n+            );\n+\n+            if (null != metadataMap) {\n+                return new Metadata(fieldVariableName, metadataMap);\n+            }\n+\n+            if (forceGenerate) {\n+                try {\n+                    return generateContentletMetadata(contentlet).getFullMetadataMap()\n+                            .get(fieldVariableName);\n+                } catch (IOException e) {\n+                    throw new DotDataException(e);\n+                }\n+            }\n+        }\n+        return null;\n+\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      * @param contentlet          {@link Contentlet}\n      * @param fieldVariableName  {@link String}\n      * @return\n      */\n     @Override\n-    public Map<String, Serializable> getMetadataNoCache(final Contentlet contentlet,\n+    public Metadata getFullMetadataNoCache(final Contentlet contentlet,\n             final String fieldVariableName) throws DotDataException {\n \n+        return getFullMetadataNoCache(contentlet, fieldVariableName, false);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param contentlet          {@link Contentlet}\n+     * @param fieldVariableName  {@link String}\n+     * @return\n+     */\n+    @Override\n+    public Metadata getFullMetadataNoCacheForceGenerate(final Contentlet contentlet,\n+            final String fieldVariableName) throws DotDataException{\n+        return getFullMetadataNoCache(contentlet, fieldVariableName, true);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     * @param contentlet          {@link Contentlet}\n+     * @param fieldVariableName  {@link String}\n+     * @param forceGenerate  @boolean\n+     * @return\n+     */\n+    private Metadata getFullMetadataNoCache(final Contentlet contentlet,\n+            final String fieldVariableName, final boolean forceGenerate) throws DotDataException {\n         final StorageType storageType = StoragePersistenceProvider.getStorageType();\n         final String metadataBucketName = Config.getStringProperty(METADATA_GROUP_NAME, DOT_METADATA);\n         final String metadataPath = this.getFileName(contentlet, fieldVariableName);\n \n-        return this.fileStorageAPI.retrieveMetaData(\n-                new RequestMetadata.Builder()\n+        Map<String, Serializable> metadataMap = fileStorageAPI.retrieveMetaData(\n+                new FetchMetadataParams.Builder()\n                         .cache(false)\n-                        .wrapMetadataMapForCache(this::filterNonCacheableMetadataFields) // why is it needed for the non-cached version??\n                         .storageKey(\n-                                new StorageKey.Builder().group(metadataBucketName).path(metadataPath)\n+                                new StorageKey.Builder().group(metadataBucketName)\n+                                        .path(metadataPath)\n                                         .storage(storageType).build())\n                         .build()\n         );\n+\n+        if(null != metadataMap){\n+           return new Metadata(fieldVariableName, metadataMap);\n+        }\n+\n+        if(forceGenerate){", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDg2NDcxNg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594864716", "bodyText": "I respectfully disagree", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-16T05:07:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY3NTcyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY4MzcwMA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594683700", "bodyText": "I think this comment is not needed anymore", "author": "nollymar", "createdAt": "2021-03-15T21:06:16Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/contentlet/business/ContentletCacheImpl.java", "diffHunk": "@@ -36,10 +22,10 @@\n \tprivate DotCacheAdministrator cache;\n \n \tprivate String primaryGroup = \"ContentletCache\";\n-\tprivate String metadataGroup = \"FileAssetMetadataCache\";\n+\t//This `metadataGroup` should go away also", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY4Nzc3Nw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594687777", "bodyText": "Remove it if not needed", "author": "nollymar", "createdAt": "2021-03-15T21:13:34Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -138,9 +158,10 @@ public void test_Html_ResourceLink_Expect_Downloadable_No_Port_Number() throws E\n         when(contentlet.getInode()).thenReturn(UUIDGenerator.generateUuid());\n         when(contentlet.isFileAsset()).thenReturn(true);\n         when(contentlet.getStringProperty(FileAssetAPI.FILE_NAME_FIELD)).thenReturn(htmlFileName);\n-        when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);\n+        //when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY4NzgyNg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594687826", "bodyText": "Remove it if not needed", "author": "nollymar", "createdAt": "2021-03-15T21:13:41Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -175,11 +196,11 @@ public void test_html_ResourceLink_Expect_Downloadable_Secure_Site_Port_Number()\n         when(contentlet.getInode()).thenReturn(UUIDGenerator.generateUuid());\n         when(contentlet.isFileAsset()).thenReturn(true);\n         when(contentlet.getStringProperty(FileAssetAPI.FILE_NAME_FIELD)).thenReturn(htmlFileName);\n-        when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);\n+        //when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY4ODA5MA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594688090", "bodyText": "Remove it if not needed", "author": "nollymar", "createdAt": "2021-03-15T21:14:08Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -215,9 +236,10 @@ public void test_vtl_ResourceLink_WithAdminUser_Expect_Downloadable_No_Port_Numb\n         when(contentlet.getInode()).thenReturn(UUIDGenerator.generateUuid());\n         when(contentlet.getStringProperty(FileAssetAPI.FILE_NAME_FIELD)).thenReturn(htmlFileName);\n         when(contentlet.isFileAsset()).thenReturn(true);\n-        when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);\n+        //when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY4ODM3OA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594688378", "bodyText": "Remove it if not needed", "author": "nollymar", "createdAt": "2021-03-15T21:14:43Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -253,9 +275,10 @@ public void test_vtl_ResourceLink_WithLimitedUser_Expect_Downloadable_No_Port_Nu\n         when(contentlet.getInode()).thenReturn(UUIDGenerator.generateUuid());\n         when(contentlet.isFileAsset()).thenReturn(true);\n         when(contentlet.getStringProperty(FileAssetAPI.FILE_NAME_FIELD)).thenReturn(htmlFileName);\n-        when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);\n+        //when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY4ODQ1OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594688459", "bodyText": "Remove it if not needed", "author": "nollymar", "createdAt": "2021-03-15T21:14:51Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -291,10 +314,11 @@ public void test_vm_ResourceLink_With_Admin_User_Expect_Downloadable_NoPortNumbe\n         when(contentlet.getIdentifier()).thenReturn(UUIDGenerator.generateUuid());\n         when(contentlet.getInode()).thenReturn(UUIDGenerator.generateUuid());\n         when(contentlet.getStringProperty(FileAssetAPI.FILE_NAME_FIELD)).thenReturn(htmlFileName);\n-        when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);\n+        //when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NDY4ODQ5NQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r594688495", "bodyText": "Remove it if not needed", "author": "nollymar", "createdAt": "2021-03-15T21:14:56Z", "path": "dotCMS/src/test/java/com/dotmarketing/portlets/contentlet/model/ResourceLinkTest.java", "diffHunk": "@@ -328,9 +352,10 @@ public void test_vm_ResourceLink_With_LimitedUser_ExpectRestricted_NoPortNumber(\n         when(contentlet.getInode()).thenReturn(UUIDGenerator.generateUuid());\n         when(contentlet.isFileAsset()).thenReturn(true);\n         when(contentlet.getStringProperty(FileAssetAPI.FILE_NAME_FIELD)).thenReturn(htmlFileName);\n-        when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);\n+        //when(contentlet.getBinary(FileAssetAPI.BINARY_FIELD)).thenReturn(file);", "originalCommit": "eb8cd153ba79e4a41962049947c008c254c18d02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a5eaea7034cccc7b8df9acee400be932bfb594f1", "url": "https://github.com/dotCMS/core/commit/a5eaea7034cccc7b8df9acee400be932bfb594f1", "message": "#19234 connect custom metadata (Focal point) with temp files", "committedDate": "2021-03-16T04:33:20Z", "type": "commit"}, {"oid": "8f2cf32e08b660c185f1e1eff55ee7ae4c67ebc1", "url": "https://github.com/dotCMS/core/commit/8f2cf32e08b660c185f1e1eff55ee7ae4c67ebc1", "message": "#19234 restoring commented  test", "committedDate": "2021-03-16T04:41:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTU0MTAxOA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r595541018", "bodyText": "I like to reduce this to\nreturn length > 0? string.substring(0, Math.min(length, string.length())): string;", "author": "jdotcms", "createdAt": "2021-03-16T21:07:33Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESMappingAPIImpl.java", "diffHunk": "@@ -390,71 +447,23 @@ public String toJson(final Contentlet contentlet) throws DotMappingException {\n \t\t}\n \t}\n \n-\tprivate void generateBinaryMetadata(final Contentlet contentlet,\n-\t\t\t\t\t\t\t\t\t\tfinal StringWriter stringWriter,\n-\t\t\t\t\t\t\t\t\t\tfinal Map<String, Object> mapLowered,\n-\t\t\t\t\t\t\t\t\t\tfinal Field field) throws Exception {\n-\n-\t\t//Verify if it is enabled the option to regenerate missing metadata files on reindex\n-\t\tfinal boolean regenerateMissingMetadata = Config\n-\t\t\t\t.getBooleanProperty(\"regenerate.missing.metadata.on.reindex\", true);\n-\n-\t\t/*\n-\t\tVerify if it is enabled the option to always regenerate metadata files on reindex,\n-\t\tenabling this could affect greatly the performance of a reindex process.\n-\t\t */\n-\t\tfinal boolean alwaysRegenerateMetadata = Config\n-\t\t\t\t.getBooleanProperty(\"always.regenerate.metadata.on.reindex\", false);\n-\n-\t\tMap<String, Object> metadataMap = null;\n-\n-\t\tif (contentlet.isLive() || contentlet.isWorking()) {\n-\n-\t\t\tfinal Optional<com.dotcms.contenttype.model.field.FieldVariable> customIndexMetaDataFieldsOpt =\n-\t\t\t\t\tFactoryLocator.getFieldFactory().byFieldVariableKey(field.getIdentifier(), BinaryField.INDEX_METADATA_FIELDS);\n-\t\t\tfinal TikaUtils tikaUtils = new TikaUtils();\n-\n-\t\t\tfinal Set<String> metadataFields = customIndexMetaDataFieldsOpt.isPresent()?\n-\t\t\t\t\tnew HashSet<>(Arrays.asList(customIndexMetaDataFieldsOpt.get().value().split(StringPool.COMMA))):\n-\t\t\t\t\ttikaUtils.getConfiguredMetadataFields();  // gets the metadata fields to filter from the tika metadata\n-\n-\t\t\tfinal File binaryField = contentlet.getBinary(field.getVelocityVarName());\n-\t\t\tif (null != binaryField && binaryField.exists() && binaryField.canRead()) {\n-\n-\t\t\t\tif (alwaysRegenerateMetadata) {\n-\t\t\t\t\tmetadataMap = tikaUtils.generateMetaDataForce(contentlet, binaryField, field.getVelocityVarName(), metadataFields);\n-\t\t\t\t} else if (regenerateMissingMetadata) {\n-\t\t\t\t\tmetadataMap = tikaUtils.generateMetaData(contentlet, binaryField, field.getVelocityVarName(), metadataFields);\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\t// see if we have content metadata\n-\t\t\tif(null != metadataMap) {\n-\n-\t\t\t\tfor (final String metadataKey : metadataFields) {\n-\n-\t\t\t\t\tfinal Object metadataValue = metadataMap.get(metadataKey);\n-\t\t\t\t\tif (null != metadataValue) {\n-\t\t\t\t\t\tmapLowered.put(FileAssetAPI.META_DATA_FIELD.toLowerCase() + StringPool.PERIOD + metadataKey.toLowerCase(), metadataValue);\n-\t\t\t\t\t\tif (metadataKey.contains(FileAssetAPI.CONTENT_FIELD)) {\n-\t\t\t\t\t\t\tstringWriter.append(metadataValue.toString()).append(' ');\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate Optional<Field> findFirstBinaryFieldIndexable(final Contentlet contentlet) {\n-\n-\t\tfinal List<Field> fields  = new ArrayList<>(\n-\t\t\t\tFieldsCache.getFieldsByStructureInode(contentlet.getStructureInode()));\n-\n-\t\treturn fields.stream().filter(Field::isIndexed)\n-\t\t\t\t.filter(field -> field.getFieldType().equals(Field.FieldType.BINARY.toString()))\n-\t\t\t\t.findFirst();\n-\t}\n \n+    private Object preProcessValue(final String compositeKey, final Object value) {\n+        if (\"metadata.content\".equals(compositeKey)) {\n+            if (null == value) {\n+                //This \"NO_METADATA\" constant is getting relocated from tika utils\n+                return NO_METADATA;\n+            }\n+            //TODO:make sure this is not a dupe META_DATA_MAX_SIZE\n+            final int length = Config.getIntProperty(INDEX_METADATA_CONTENT_LENGTH, 0);\n+            final String string = value.toString().toLowerCase();\n+            if (length > 0) {", "originalCommit": "8f2cf32e08b660c185f1e1eff55ee7ae4c67ebc1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NjM5NzEwNw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596397107", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-17T21:31:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NTU0MTAxOA=="}], "type": "inlineReview"}, {"oid": "77e50f455b524f15ce3655f450f3cc6eff9e5816", "url": "https://github.com/dotCMS/core/commit/77e50f455b524f15ce3655f450f3cc6eff9e5816", "message": "#19234 feedback + temp files metadata recovery", "committedDate": "2021-03-17T20:04:23Z", "type": "commit"}, {"oid": "30c6b402352b1831ef887cbfb840c50ff206eb33", "url": "https://github.com/dotCMS/core/commit/30c6b402352b1831ef887cbfb840c50ff206eb33", "message": "#19234 feedback", "committedDate": "2021-03-17T20:19:34Z", "type": "commit"}, {"oid": "715f1e783969538f87dbc37171d110b32f95f4a0", "url": "https://github.com/dotCMS/core/commit/715f1e783969538f87dbc37171d110b32f95f4a0", "message": "#19234  feedback", "committedDate": "2021-03-17T23:36:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njk2NDY3Mg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596964672", "bodyText": "nice", "author": "jdotcms", "createdAt": "2021-03-18T15:12:48Z", "path": "dotCMS/src/main/java/com/dotcms/storage/model/BasicMetadataFields.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.dotcms.storage.model;\n+\n+import com.google.common.collect.ImmutableSet.Builder;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+\n+public enum BasicMetadataFields {", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njk2NzYwMQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596967601", "bodyText": "Comment what should I use", "author": "jdotcms", "createdAt": "2021-03-18T15:15:56Z", "path": "dotCMS/src/main/java/com/dotcms/tika/TikaUtils.java", "diffHunk": "@@ -291,6 +278,7 @@ private void writeCompressJsonMetadataFile(final File contentMetaFile, final Map\n      * existing metadata file in order to force a parse and generation of the metadata file.\n      * @return True if a metadata file was generated.\n      */\n+    @Deprecated", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njk2Nzc2Ng==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596967766", "bodyText": "Comment what should I use", "author": "jdotcms", "createdAt": "2021-03-18T15:16:05Z", "path": "dotCMS/src/main/java/com/dotcms/util/MimeTypeUtils.java", "diffHunk": "@@ -26,6 +26,7 @@\n      * @param binary {@link File}\n      * @return String\n      */\n+    @Deprecated", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njk2ODkxNA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596968914", "bodyText": "is this ok here or should be on the always run?", "author": "jdotcms", "createdAt": "2021-03-18T15:17:14Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DotCMSInitDb.java", "diffHunk": "@@ -78,9 +78,10 @@ private static void loadStarterSiteData() throws Exception{\n \tprivate static void loadStarterSite() throws Exception{\n \t\t\n \t    loadStarterSiteData() ;\n-\t    \n-\t\tDbConnectionFactory.closeAndCommit();\n-\t\t\n+\n+        DbConnectionFactory.closeAndCommit();\n+\n+        new Task210304RemoveOldMetadataFiles().executeUpgrade();", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5Njc3MQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597096771", "bodyText": "why this here?", "author": "erickgonzalez", "createdAt": "2021-03-18T17:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njk2ODkxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzIxNjc0Mw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597216743", "bodyText": "I added this comment there\n  This needs to happen right after having imported the starter (which comes with old metadata files)\n  and right before starting the reindex-thread.\n Because the reindex thread regenerates now the metadata and internally the heuristic used to determine\n if the metadata needs to be generated will skip it if it finds there's a file already in place.\n This method waits for the execution to be completed. Because that's key.\n The Reindex Thread must start only when the old metadata has been removed.", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T20:23:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njk2ODkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5Njk4MjE3MA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r596982170", "bodyText": "Add a comment what is the new thing to see", "author": "jdotcms", "createdAt": "2021-03-18T15:31:14Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/htmlpageasset/model/IHTMLPage.java", "diffHunk": "@@ -41,8 +41,11 @@\n     \n     String getInode();\n     void setInode(String inode);\n-    \n+\n+    @Deprecated\n     String getMetadata();", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f64bb360744c880150b2f65bc6e023f48eaf93fe", "url": "https://github.com/dotCMS/core/commit/f64bb360744c880150b2f65bc6e023f48eaf93fe", "message": "#19234 merge", "committedDate": "2021-03-18T16:37:47Z", "type": "commit"}, {"oid": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "url": "https://github.com/dotCMS/core/commit/f55c3aa373d1a73057c7c935425b6a13f4354dda", "message": "#19234 pick new changes from ee", "committedDate": "2021-03-18T17:23:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAyNDg3MQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597024871", "bodyText": "javadoc", "author": "erickgonzalez", "createdAt": "2021-03-18T16:11:35Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/temp/TempFileAPITest.java", "diffHunk": "@@ -41,4 +53,43 @@ public void testValidURL_noHTTP_returnFalse() {\n         final String url =  \"test://raw.githubusercontent.com/dotCMS/core/master/dotCMS/src/main/webapp/html/images/skin/logo.gif\";\n         assertFalse(APILocator.getTempFileAPI().validUrl(url));\n     }\n+\n+    @Test\n+    public void Test_Get_Temp_Id_From_Temp_File() throws DotSecurityException, IOException {", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzE1MzQxMQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597153411", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T18:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAyNDg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAyNTI5OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597025299", "bodyText": "javadoc", "author": "erickgonzalez", "createdAt": "2021-03-18T16:11:55Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/temp/TempFileAPITest.java", "diffHunk": "@@ -41,4 +53,43 @@ public void testValidURL_noHTTP_returnFalse() {\n         final String url =  \"test://raw.githubusercontent.com/dotCMS/core/master/dotCMS/src/main/webapp/html/images/skin/logo.gif\";\n         assertFalse(APILocator.getTempFileAPI().validUrl(url));\n     }\n+\n+    @Test\n+    public void Test_Get_Temp_Id_From_Temp_File() throws DotSecurityException, IOException {\n+        final File file = FileUtil.createTemporaryFile(\"test\", \"txt\", \"\");\n+        final HttpServletRequest request = mockHttpServletRequest();\n+        final DotTempFile dotTempFile = APILocator.getTempFileAPI().createTempFile(\"temp\", request, com.liferay.util.FileUtil.createInputStream(file));\n+        assertTrue(dotTempFile.file.exists());\n+        final Optional<String> tempId = APILocator.getTempFileAPI().getTempResourceId(dotTempFile.file);\n+        assertTrue(tempId.isPresent());\n+        assertEquals(tempId.get(), dotTempFile.id);\n+    }\n+\n+    @Test\n+    public void Test_Get_Temp_Id_From_Regular_File() {", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzE1MzUyMA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597153520", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T18:51:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAyNTI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAyNjYxOQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597026619", "bodyText": "is this ok? the hard-coded path?", "author": "erickgonzalez", "createdAt": "2021-03-18T16:12:58Z", "path": "dotCMS/src/integration-test/java/com/dotcms/rest/api/v1/temp/TempFileAPITest.java", "diffHunk": "@@ -41,4 +53,43 @@ public void testValidURL_noHTTP_returnFalse() {\n         final String url =  \"test://raw.githubusercontent.com/dotCMS/core/master/dotCMS/src/main/webapp/html/images/skin/logo.gif\";\n         assertFalse(APILocator.getTempFileAPI().validUrl(url));\n     }\n+\n+    @Test\n+    public void Test_Get_Temp_Id_From_Temp_File() throws DotSecurityException, IOException {\n+        final File file = FileUtil.createTemporaryFile(\"test\", \"txt\", \"\");\n+        final HttpServletRequest request = mockHttpServletRequest();\n+        final DotTempFile dotTempFile = APILocator.getTempFileAPI().createTempFile(\"temp\", request, com.liferay.util.FileUtil.createInputStream(file));\n+        assertTrue(dotTempFile.file.exists());\n+        final Optional<String> tempId = APILocator.getTempFileAPI().getTempResourceId(dotTempFile.file);\n+        assertTrue(tempId.isPresent());\n+        assertEquals(tempId.get(), dotTempFile.id);\n+    }\n+\n+    @Test\n+    public void Test_Get_Temp_Id_From_Regular_File() {\n+        final File file = new File(\"/Users/any-user/code/servers/server1/assets/a/b/ab5b5ed8-4021-43b5-b16a-708f0cdacc57/coil.jpg\");", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzE1NDE2OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597154169", "bodyText": "I was testing an invalid scenario on which any path would do... but I changed that too", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T18:52:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAyNjYxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAzMTMxNQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597031315", "bodyText": "javadoc", "author": "erickgonzalez", "createdAt": "2021-03-18T16:16:40Z", "path": "dotCMS/src/integration-test/java/com/dotcms/storage/StoragePersistenceAPITest.java", "diffHunk": "@@ -215,6 +218,45 @@ public void Test_Attempt_Push_Same_Binary_Twice(final TestCase testCase)\n         };\n     }\n \n+    /**\n+     * Given Scenario:", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzE2MDIwNg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597160206", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T19:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAzMTMxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAzMjY0MA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597032640", "bodyText": "why ignore this test?", "author": "erickgonzalez", "createdAt": "2021-03-18T16:17:41Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/image/focalpoint/FocalPointAPITest.java", "diffHunk": "@@ -1,107 +1,120 @@\n package com.dotmarketing.image.focalpoint;\n \n+import static com.dotcms.datagen.TestDataUtils.getFileAssetContent;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n+\n+import com.dotcms.datagen.TestDataUtils.TestFile;\n+import com.dotcms.util.IntegrationTestInitService;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.CacheLocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.google.common.collect.ImmutableMap;\n import java.io.File;\n import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import org.apache.commons.io.FileUtils;\n import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n-import com.dotcms.util.IntegrationTestInitService;\n-import com.dotmarketing.portlets.fileassets.business.FileAssetAPIImpl;\n-import com.dotmarketing.util.UUIDGenerator;\n-import com.google.common.collect.ImmutableMap;\n \n public class FocalPointAPITest {\n \n-\n     final static String[] extensions = new String[] {\"webp\", \"png\", \"gif\", \"jpg\"};\n-    static List<File> testFiles = new ArrayList<>();\n-\n-\n-    static FocalPointAPIImpl fpAPI;\n-\n \n+    static FocalPointAPIImpl focalPointAPI;\n \n     @BeforeClass\n     public static void setup() throws Exception {\n         IntegrationTestInitService.getInstance().init();\n-        fpAPI = new FocalPointAPIImpl(new FileAssetAPIImpl(null, null, null, null, null, null), null);\n+        focalPointAPI = new FocalPointAPIImpl(\n+                APILocator.getFileMetadataAPI(),\n+                APILocator.getTempFileAPI(),\n+                APILocator.getContentletAPI(),\n+                APILocator::systemUser);\n     }\n \n     /**\n      * we should read and write the same values when a focal point is set\n      * @throws Exception\n      */\n+    @Ignore", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzEzNDEwMA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597134100", "bodyText": "It came like that from Will's branch..", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T18:22:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAzMjY0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzE2MTgwOA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597161808", "bodyText": "I've removed the test", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T19:04:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzAzMjY0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA0Nzk0OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597047949", "bodyText": "I didn't saw a UT for this change", "author": "erickgonzalez", "createdAt": "2021-03-18T16:31:37Z", "path": "dotCMS/src/main/resources/postgres.sql", "diffHunk": "@@ -2503,11 +2503,11 @@ create table storage_group (\n );\n \n create table storage (\n-    path        varchar(255) not null,\n+    path       varchar(255) not null,\n     group_name varchar(255) not null,\n     hash       varchar(64) not null,\n-    metadata   text not null,\n     mod_date   timestamp without time zone NOT NULL DEFAULT CURRENT_DATE,\n+    hash_ref   varchar(64),", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzMwMjIxNQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597302215", "bodyText": "yeah. that value isn't really exposed through any API. I decided it would be worth having for troubleshooting purposes to help support guys.", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T23:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA0Nzk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA0ODY2OA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597048668", "bodyText": "Doc what the UT is achieving", "author": "erickgonzalez", "createdAt": "2021-03-18T16:32:31Z", "path": "dotCMS/src/main/java/com/dotmarketing/startup/runonce/Task210304RemoveOldMetadataFiles.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.dotmarketing.startup.runonce;\n+\n+import com.dotcms.concurrent.DotConcurrentFactory;\n+import com.dotcms.concurrent.DotSubmitter;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.exception.DotDataException;\n+import com.dotmarketing.exception.DotRuntimeException;\n+import com.dotmarketing.startup.StartupTask;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UUIDUtil;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import java.io.IOException;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.mutable.MutableInt;\n+\n+public class Task210304RemoveOldMetadataFiles implements StartupTask {", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzIzMTk2MA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597231960", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T20:48:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA0ODY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA1MDEyOQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597050129", "bodyText": "Add a link to which new method should be used.", "author": "erickgonzalez", "createdAt": "2021-03-18T16:34:19Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPI.java", "diffHunk": "@@ -93,6 +95,7 @@\n \t * @param contentlet Contentlet owner of the file to parse\n \t * @param binFile File to parse the metadata from it\n \t */\n+\t@Deprecated", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA1MDI3Nw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597050277", "bodyText": "same as above", "author": "erickgonzalez", "createdAt": "2021-03-18T16:34:28Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPI.java", "diffHunk": "@@ -284,6 +287,7 @@\n \t * @param inode content inode\n \t * @return\n \t */\n+\t@Deprecated", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA1MDM3MA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597050370", "bodyText": "same as above", "author": "erickgonzalez", "createdAt": "2021-03-18T16:34:36Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPI.java", "diffHunk": "@@ -293,16 +297,18 @@\n \t * @param fileName {@link String}  fileName for the metadata\n \t * @return File\n \t */\n+\t@Deprecated", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA1MDQ2Mw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597050463", "bodyText": "same as above", "author": "erickgonzalez", "createdAt": "2021-03-18T16:34:45Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAssetAPI.java", "diffHunk": "@@ -293,16 +297,18 @@\n \t * @param fileName {@link String}  fileName for the metadata\n \t * @return File\n \t */\n+\t@Deprecated\n \tFile getContentMetadataFile(String inode, String fileName);\n \t\n \t/**\n \t * Takes the content metadata file and loads its content in a string.\n \t * It handles compression gzip, bzip2 or none using Tika to detect it \n \t * based on the file header.\n \t * \n-\t * @param inode\n+\t * @param metadataFile\n \t * @return\n \t */\n+\t @Deprecated", "originalCommit": "715f1e783969538f87dbc37171d110b32f95f4a0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA3OTM5Mg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597079392", "bodyText": "Rollback these changes and probably the below ones.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:09:38Z", "path": "dotCMS/src/integration-test/resources/it-dotcms-config-cluster.properties", "diffHunk": "@@ -90,8 +90,9 @@ ELASTICSEARCH_USE_FILTERS_FOR_SEARCHING=true\n ##    Make sure your ulimit -n is set to more than 1024\n es.index.number_of_shards=1\n \n+\n ##  Elastic Search Path\n-es.path.home=/tomcat9/webapps/ROOT/WEB-INF/elasticsearch\n+es.path.home=/Users/fabrizzio/code/core/dotCMS/src/main/webapp/WEB-INF/elasticsearch", "originalCommit": "f64bb360744c880150b2f65bc6e023f48eaf93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzEzNDkzNg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597134936", "bodyText": "yeah. Good catch", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T18:23:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA3OTM5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzE4ODc1OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597188759", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T19:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA3OTM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA4MDAyOA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597080028", "bodyText": "Rollback these changes and the below ones.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:10:26Z", "path": "dotCMS/src/integration-test/resources/it-dotmarketing-config.properties", "diffHunk": "@@ -61,12 +61,12 @@ ASSET_PATH = /assets\n ##\tshared folder in unix/linux enviroments we encourage you to use symbolic links\n ##\tIf this variable is commented the system will work as usual using\n ##\tthe ASSET_PATH variable as the assets directory inside liferay web root\n-ASSET_REAL_PATH = /tomcat8/webapps/ROOT/assets\n+ASSET_REAL_PATH=/Users/fabrizzio/code/etc/it/assets", "originalCommit": "f64bb360744c880150b2f65bc6e023f48eaf93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzE5MDY5NQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597190695", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T19:40:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA4MDAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA4MDQzNw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597080437", "bodyText": "Rollback changes", "author": "erickgonzalez", "createdAt": "2021-03-18T17:10:57Z", "path": "dotCMS/src/integration-test/resources/oracle-db-config.properties", "diffHunk": "@@ -1,6 +1,6 @@\n #Oracle Connection\n driverClassName=oracle.jdbc.OracleDriver\n-jdbcUrl=jdbc:oracle:thin:@database:1521:XE\n+jdbcUrl=jdbc:oracle:thin:@localhost:1521:XE", "originalCommit": "f64bb360744c880150b2f65bc6e023f48eaf93fe", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA4MDY5OA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597080698", "bodyText": "Rollback changes", "author": "erickgonzalez", "createdAt": "2021-03-18T17:11:15Z", "path": "dotCMS/src/integration-test/resources/postgres-db-config.properties", "diffHunk": "@@ -1,12 +1,9 @@\n #Postgres Connection\n driverClassName=org.postgresql.Driver\n-jdbcUrl=jdbc:postgresql://database/dotcms\n-username=postgres\n-password=postgres\n-## Initial wait for a new connection in milliseconds\n-connectionTimeout=3000\n-## Pool Min and Max connections\n-minimumIdle=10\n+jdbcUrl=jdbc:postgresql://localhost:5433/test", "originalCommit": "f64bb360744c880150b2f65bc6e023f48eaf93fe", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzE5MTc0Mg==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597191742", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T19:42:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA4MDY5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5MjU0Mw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597092543", "bodyText": "Rollback these changes", "author": "erickgonzalez", "createdAt": "2021-03-18T17:26:33Z", "path": "dotCMS/dependencies.gradle", "diffHunk": "@@ -1,9 +1,11 @@\n //noinspection GroovyAssignabilityCheck\n dependencies {\n \n-    def eeType = dotcmsReleaseVersion.equals(\"master\") ? '-SNAPSHOT' : ''\n+   // def eeType = dotcmsReleaseVersion.equals(\"master\") ? '-SNAPSHOT' : ''", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5NTg4NQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597095885", "bodyText": "Add a link to which should be used instead.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:30:38Z", "path": "dotCMS/src/main/java/com/dotcms/tika/TikaUtils.java", "diffHunk": "@@ -114,6 +111,7 @@ public TikaUtils() throws DotDataException {\n      * @param inode Contentlet owner of the file to parse\n      * @param binFile File to parse the metadata from it\n      */\n+    @Deprecated", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5NTkzNA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597095934", "bodyText": "Add a link to which should be used instead.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:30:43Z", "path": "dotCMS/src/main/java/com/dotcms/tika/TikaUtils.java", "diffHunk": "@@ -127,6 +125,7 @@ public TikaUtils() throws DotDataException {\n      * @param inode Contentlet owner of the file to parse\n      * @param binFile File to parse the metadata from it\n      */\n+    @Deprecated", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5NTk5OQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597095999", "bodyText": "Add a link to which should be used instead.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:30:48Z", "path": "dotCMS/src/main/java/com/dotcms/tika/TikaUtils.java", "diffHunk": "@@ -140,6 +139,7 @@ public TikaUtils() throws DotDataException {\n      * @param contentlet Content parse in order to extract the metadata info\n      * @return True if a metadata file was generated.\n      */\n+    @Deprecated", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5NjA2Ng==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597096066", "bodyText": "Add a link to which should be used instead.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:30:52Z", "path": "dotCMS/src/main/java/com/dotcms/tika/TikaUtils.java", "diffHunk": "@@ -153,6 +153,7 @@ public boolean generateMetaData(Contentlet contentlet)\n      * @param contentlet Content parse in order to extract the metadata info\n      * @return True if a metadata file was generated.\n      */\n+    @Deprecated", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5NjE0NQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597096145", "bodyText": "Add a link to which should be used instead.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:30:57Z", "path": "dotCMS/src/main/java/com/dotcms/tika/TikaUtils.java", "diffHunk": "@@ -167,14 +168,15 @@ public boolean generateMetaData(Contentlet contentlet)\n      * @param contentlet Content parse in order to extract the metadata info\n      * @return True if a metadata file was generated.\n      */\n+    @Deprecated", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5NzU4MA==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597097580", "bodyText": "rename findContentletByInode so it explains better what it does.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:32:56Z", "path": "dotCMS/src/main/java/com/dotmarketing/image/focalpoint/FocalPointAPIImpl.java", "diffHunk": "@@ -99,19 +132,51 @@ public void writeFocalPoint(final String inode, final String fieldVar, final Foc\n     @Override\n     public Optional<FocalPoint> readFocalPoint(final String inode, final String fieldVar) {\n \n-        final Optional<FocalPoint> retVal = cache != null ? cache.get(inode, fieldVar) : Optional.empty();\n-        if (retVal.isPresent()) {\n-            return retVal;\n+        if (tempFileAPI.isTempResource(inode)) {\n+            return readFocalPointMeta(inode);\n+        } else {\n+            final Optional<Contentlet> optional = findContentlet(inode);\n+            if (optional.isPresent()) {\n+                return readFocalPointMeta(optional.get(), fieldVar);\n+            }\n         }\n \n-        final File file = getFPFile(inode, fieldVar);\n-        return readFocalPoint(file);\n+        return Optional.empty();\n+\n     }\n \n+    /**\n+     * Focal point md associated with a temp resource\n+     * @param tempResourceId\n+     * @return\n+     */\n+    private Optional<FocalPoint> readFocalPointMeta(final String tempResourceId){\n+        try {\n+           final Optional<Metadata> optional = fileMetadataAPI.getMetadata(tempResourceId);\n+           if(optional.isPresent()){\n+               final Metadata metadata = optional.get();\n+               return parseFocalPoint(\n+                       (String) metadata.getCustomMeta().get(FOCAL_POINT));\n+           }\n+        } catch (DotDataException e) {\n+            throw new DotRuntimeException(e);\n+        }\n+        return Optional.empty();\n+    }\n \n     @Override\n     public Optional<FocalPoint> parseFocalPointFromParams(final Map<String, String[]> parameters) {\n \n         return Try.of(() -> parseFocalPoint(parameters.get(\"fp\")[0])).getOrElse(Optional.empty());\n     }\n+\n+    /**\n+     * contentlet inode finder method\n+     * @param inode\n+     * @return\n+     */\n+    private Optional<Contentlet> findContentlet(final String inode){", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzIyMjI5MQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597222291", "bodyText": "done", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T20:32:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzA5NzU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzEwMDA2Ng==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597100066", "bodyText": "Link to which method should we use instead.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:36:06Z", "path": "dotCMS/src/main/java/com/dotmarketing/portlets/fileassets/business/FileAsset.java", "diffHunk": "@@ -182,17 +134,22 @@ public String getFileName() {\n \t}\n \n \tpublic String getMimeType() {\n-\t\tString mimeType = APILocator.getFileAssetAPI().getMimeType(getUnderlyingFileName());\n \n+\t\tString mimeType = Try.of(() -> getMetadata().getContentType()).getOrNull();\n+\t\tif(null != mimeType){\n+\t\t   return mimeType;\n+\t\t}\n+\n+\t\tmimeType = APILocator.getFileAssetAPI().getMimeType(getUnderlyingFileName());\n \n \t\tif (mimeType == null || UNKNOWN_MIME_TYPE.equals(mimeType)){\n \t\t\tmimeType = \"application/octet-stream\";\n \t\t}\n \n-\t\t\n \t\treturn mimeType;\n \t}\n \n+    @Deprecated", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzEwMDY0Ng==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597100646", "bodyText": "Rollback this and below", "author": "erickgonzalez", "createdAt": "2021-03-18T17:36:51Z", "path": "dotCMS/src/main/resources/db.properties", "diffHunk": "@@ -1,6 +1,6 @@\n ##Postgres default configuration\n driverClassName=org.postgresql.Driver\n-jdbcUrl=jdbc:postgresql://localhost/dotcms\n+jdbcUrl=jdbc:postgresql://localhost:5433/dotcms", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzEwMDgyNw==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597100827", "bodyText": "Rollback.", "author": "erickgonzalez", "createdAt": "2021-03-18T17:37:05Z", "path": "dotCMS/src/main/resources/dotmarketing-config.properties", "diffHunk": "@@ -919,3 +919,21 @@ api.cors.default.Access-Control-Expose-Headers=*\n # \"shared\", means that  transformed images will be written and read from the shared /assets/dotGenerated folder, which generally lives on an NFS mount.  \n # \"local\"  means the generated/transformed images will be written and read to the local, e.g. /dotSecure/dotGenerated folder.\n DOTGENERATED_DEFAULT_PATH=shared\n+\n+DYNAMIC_CONTENT_PATH=/Users/fabrizzio/code/servers/server1/dotsecure", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzEwMTEwNQ==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597101105", "bodyText": "is this necessary?", "author": "erickgonzalez", "createdAt": "2021-03-18T17:37:25Z", "path": "dotCMS/src/main/resources/hazelcast-embedded.xml", "diffHunk": "@@ -35,7 +35,7 @@\n     </properties>\n     <management-center enabled=\"false\">http://localhost:8081/mancenter</management-center>\n     <network>\n-        <port auto-increment=\"false\">5701</port>\n+        <port auto-increment=\"true\">5701</port>", "originalCommit": "f55c3aa373d1a73057c7c935425b6a13f4354dda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzIyMzU3Ng==", "url": "https://github.com/dotCMS/core/pull/19591#discussion_r597223576", "bodyText": "oh crap... I screw that up during merge .. no it is not", "author": "fabrizzio-dotCMS", "createdAt": "2021-03-18T20:35:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU5NzEwMTEwNQ=="}], "type": "inlineReview"}, {"oid": "29069463319e38213012d345c46e5562979fdc7d", "url": "https://github.com/dotCMS/core/commit/29069463319e38213012d345c46e5562979fdc7d", "message": "#19234 pick-up ee", "committedDate": "2021-03-18T18:14:47Z", "type": "commit"}, {"oid": "5e6a2e1ce7e450bfc8b8f46e63811e41313d4442", "url": "https://github.com/dotCMS/core/commit/5e6a2e1ce7e450bfc8b8f46e63811e41313d4442", "message": "#19234 feedback", "committedDate": "2021-03-18T19:50:01Z", "type": "commit"}, {"oid": "db022684153e3bd0e591f64bfef2940b8e306689", "url": "https://github.com/dotCMS/core/commit/db022684153e3bd0e591f64bfef2940b8e306689", "message": "#19234 rollback local  files", "committedDate": "2021-03-18T20:00:44Z", "type": "commit"}, {"oid": "e327f94e49a5659e52707a3b6574ad1ef300adfa", "url": "https://github.com/dotCMS/core/commit/e327f94e49a5659e52707a3b6574ad1ef300adfa", "message": "#19234 feedback", "committedDate": "2021-03-18T20:26:31Z", "type": "commit"}, {"oid": "3aae19b56f152b4f5d519a175d64bdcdf45ef1c1", "url": "https://github.com/dotCMS/core/commit/3aae19b56f152b4f5d519a175d64bdcdf45ef1c1", "message": "#19234 feedback", "committedDate": "2021-03-18T20:32:09Z", "type": "commit"}, {"oid": "72851332a4364d88ce3b812b0b834903dfda8e95", "url": "https://github.com/dotCMS/core/commit/72851332a4364d88ce3b812b0b834903dfda8e95", "message": "#19234 revert", "committedDate": "2021-03-18T20:44:53Z", "type": "commit"}, {"oid": "e0354fc17aa3479ac8b5878b6c46c5764a14c27a", "url": "https://github.com/dotCMS/core/commit/e0354fc17aa3479ac8b5878b6c46c5764a14c27a", "message": "#19234  adding doc per recived  feedback", "committedDate": "2021-03-18T20:47:58Z", "type": "commit"}, {"oid": "2f3625e5b8e52e7cc232d6a3fbff69a565635965", "url": "https://github.com/dotCMS/core/commit/2f3625e5b8e52e7cc232d6a3fbff69a565635965", "message": "#19234 more feedback", "committedDate": "2021-03-18T21:28:18Z", "type": "commit"}, {"oid": "62adbc2f421a35a339efc4ba70247d53316568ae", "url": "https://github.com/dotCMS/core/commit/62adbc2f421a35a339efc4ba70247d53316568ae", "message": "#19234 feedback", "committedDate": "2021-03-18T21:31:27Z", "type": "commit"}, {"oid": "fce12b28997c912721bb0d5ebc805d9bd9b3dff9", "url": "https://github.com/dotCMS/core/commit/fce12b28997c912721bb0d5ebc805d9bd9b3dff9", "message": "#19234 merge with master", "committedDate": "2021-03-18T21:45:27Z", "type": "commit"}, {"oid": "89d612c8056f114886bdfc28550f0392b96bfe10", "url": "https://github.com/dotCMS/core/commit/89d612c8056f114886bdfc28550f0392b96bfe10", "message": "#19234 feedback", "committedDate": "2021-03-18T22:25:15Z", "type": "commit"}]}