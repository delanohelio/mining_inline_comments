{"pr_number": 19261, "pr_title": "#19006 cache eviction is perfrmed asynchrously when threadpool is und\u2026", "pr_createdAt": "2020-09-11T23:02:34Z", "pr_url": "https://github.com/dotCMS/core/pull/19261", "timeline": [{"oid": "b15b825ac3a34540398e733c41891ccffd5734b4", "url": "https://github.com/dotCMS/core/commit/b15b825ac3a34540398e733c41891ccffd5734b4", "message": "#19006 cache eviction is perfrmed asynchrously when threadpool is under certain %", "committedDate": "2020-09-11T22:55:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxOTQwNg==", "url": "https://github.com/dotCMS/core/pull/19261#discussion_r488019406", "bodyText": "We don't need the sync block here, I don't think.", "author": "wezell", "createdAt": "2020-09-14T15:23:56Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/cache/provider/h22/H22Cache.java", "diffHunk": "@@ -243,10 +242,32 @@ public void remove(final String group, final String key) {\n \t\t\n \t}\n \n+\t/**\n+\t * Calculates the thread allocation % for a given queue size.\n+\t * Then determines if that allocation % exceeds or not a tolerance.\n+\t * @return\n+\t */\n+\tboolean isAllocationWithinTolerance() {\n+\t\tfinal int size = asyncTaskQueue.size();\n+\t\tfinal float allocation = (float) size / (float) asyncTaskQueueSize;\n+\t\tLogger.debug(H22Cache.class,\n+\t\t\t\t() -> \" size is \" + size + \", allocation is \" + allocation + \", tolerance is :\"\n+\t\t\t\t\t\t+ threadAllocationTolerance);\n+\t\treturn allocation < threadAllocationTolerance;\n+\t}\n \n-    void removeAsync(final Fqn fqn) {\n-\n+    /**\n+     * returns true if async set to true and the task queue is < than a given tolerance % full.\n+     *\n+     * @return\n+     */\n+    boolean shouldAsync() {\n+       synchronized (H22Cache.class) {", "originalCommit": "b15b825ac3a34540398e733c41891ccffd5734b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNTE2OA==", "url": "https://github.com/dotCMS/core/pull/19261#discussion_r488035168", "bodyText": "ok. removed", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-14T15:43:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxOTQwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNDI4MQ==", "url": "https://github.com/dotCMS/core/pull/19261#discussion_r488024281", "bodyText": "slight optimization - should the initial thread pool be fixed at a smaller number, say 5?", "author": "wezell", "createdAt": "2020-09-14T15:29:04Z", "path": "dotCMS/src/main/java/com/dotmarketing/business/cache/provider/h22/H22Cache.java", "diffHunk": "@@ -47,12 +44,14 @@\n \n     private static final long serialVersionUID = 1L;\n     final int numberOfAsyncThreads=Config.getIntProperty(\"cache_h22_async_threads\", 10);\n-    \n+    final int asyncTaskQueueSize = Config.getIntProperty(\"cache_h22_async_task_queue\", 10000);\n+\tfinal float threadAllocationTolerance = Config.getFloatProperty(\"cache_h22_async_tolerance\",0.98F);\n     final boolean shouldAsync=Config.getBooleanProperty(\"cache_h22_async\", true);\n \n \n     final ThreadFactory namedThreadFactory =  new ThreadFactoryBuilder().setNameFormat(\"H22-ASYNC-COMMIT-%d\").build();\n-    final private ExecutorService executorService = new ThreadPoolExecutor(numberOfAsyncThreads, numberOfAsyncThreads, 10, TimeUnit.SECONDS, new LinkedBlockingQueue<Runnable>(10000),namedThreadFactory);\n+    final private LinkedBlockingQueue<Runnable> asyncTaskQueue = new LinkedBlockingQueue<>();\n+    final private ExecutorService executorService = new ThreadPoolExecutor(numberOfAsyncThreads, numberOfAsyncThreads, 10, TimeUnit.SECONDS, asyncTaskQueue ,namedThreadFactory);", "originalCommit": "b15b825ac3a34540398e733c41891ccffd5734b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzODY5Ng==", "url": "https://github.com/dotCMS/core/pull/19261#discussion_r488038696", "bodyText": "let me play with that  value a little bit see how it behaves", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-14T15:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNDI4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA4OTI3MQ==", "url": "https://github.com/dotCMS/core/pull/19261#discussion_r488089271", "bodyText": "looks lie we can totally afford to lower that value. I don't see that much gain in those 5 threads in terms of the number of sync calls performed", "author": "fabrizzio-dotCMS", "createdAt": "2020-09-14T17:04:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAyNDI4MQ=="}], "type": "inlineReview"}, {"oid": "c6b703598a94e6c3c5b0d31afca457ddc89bacc4", "url": "https://github.com/dotCMS/core/commit/c6b703598a94e6c3c5b0d31afca457ddc89bacc4", "message": "#19006 isAllocationWithinTolerance shouldn't be syynnchronized", "committedDate": "2020-09-14T15:36:30Z", "type": "commit"}, {"oid": "b320479aa786fc69ddb0e91c26769906afd1462a", "url": "https://github.com/dotCMS/core/commit/b320479aa786fc69ddb0e91c26769906afd1462a", "message": "#19006 slight optimization lowering number of threads to 5", "committedDate": "2020-09-14T17:38:12Z", "type": "commit"}]}