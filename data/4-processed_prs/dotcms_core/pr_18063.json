{"pr_number": 18063, "pr_title": "#17843 Fallback to Tomcat provider if the datasource initialization fails", "pr_createdAt": "2020-02-28T17:15:55Z", "pr_url": "https://github.com/dotCMS/core/pull/18063", "timeline": [{"oid": "e4fc6cb7964bc46ca505e7a9831403be2384d2f0", "url": "https://github.com/dotCMS/core/commit/e4fc6cb7964bc46ca505e7a9831403be2384d2f0", "message": "#17843 Fallback to Tomcat provider if the datasource initialization fails", "committedDate": "2020-02-28T17:13:40Z", "type": "commit"}, {"oid": "01cb0f80c86648ba34b93efdebff7dd41df038dd", "url": "https://github.com/dotCMS/core/commit/01cb0f80c86648ba34b93efdebff7dd41df038dd", "message": "#17843 Fixing unit test", "committedDate": "2020-02-28T18:08:06Z", "type": "commit"}, {"oid": "2ee3748653f769d216a299f26d7d706bfb102443", "url": "https://github.com/dotCMS/core/commit/2ee3748653f769d216a299f26d7d706bfb102443", "message": "#17843 Setting Postgres as default datasource", "committedDate": "2020-02-28T19:02:36Z", "type": "commit"}, {"oid": "0ea90edd1a67e59ebdb171d21653a9feae2795c7", "url": "https://github.com/dotCMS/core/commit/0ea90edd1a67e59ebdb171d21653a9feae2795c7", "message": "#17843 Changing default datasource credentials", "committedDate": "2020-02-28T20:16:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNTcyMw==", "url": "https://github.com/dotCMS/core/pull/18063#discussion_r385905723", "bodyText": "Issue found: The String literal \"CustomProvider\" appears 4 times in this file; the first occurrence is on line 31", "author": "dev-dotcms", "createdAt": "2020-02-28T20:24:12Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -27,18 +27,21 @@\n                 \"DBProperties\",\n                 \"SystemEnv\",\n                 \"DockerSecret\",\n-                \"Tomcat\"\n+                \"Tomcat\",\n+                \"CustomProvider\"", "originalCommit": "0ea90edd1a67e59ebdb171d21653a9feae2795c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNTcyOQ==", "url": "https://github.com/dotCMS/core/pull/18063#discussion_r385905729", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-28T20:24:14Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -99,30 +106,85 @@ public void testGet(final String testCase)\n         Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n         Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();\n         Mockito.verify(dockerSecretStrategy, Mockito.times(testCase.equals(\"DockerSecret\")? 1: 0)).apply();\n-        Mockito.verify(tomcatDataSourceStrategy, Mockito.times(testCase.equals(\"Tomcat\")? 1: 0)).apply();\n+        Mockito.verify(tomcatDataSourceStrategy, Mockito.times(\n+                (testCase.equals(\"Tomcat\") | testCase.equals(\"CustomProvider\")) ? 1 : 0)).apply();\n \n     }\n \n+\n     /**\n      * Method to test: {@link DataSourceStrategyProvider#get()}\n-     * Test case: When a custom provider class is set, the DataSourceStrategyProvider should try to use it\n-     * instead of the others providers\n-     * Expected result: An exception should be thrown as the custom provider class does not exist\n+     * Test case: Use {@link TomcatDataSourceStrategy} provider when any of these strategies fails\n+     * <ul>\n+     *            <li>Custom provider</li>\n+     *            <li>db.properties file</li>\n+     *            <li>System environment variables</li>\n+     *            <li>Docker secrets</li>\n+     *            <li>context.xml</li>\n+     * </ul>\n+     *\n+     * Expected result: A DataSource is initialized using the {@link TomcatDataSourceStrategy} provider\n+     * @param testCase\n      * @throws IllegalAccessException\n      * @throws InstantiationException\n      * @throws ClassNotFoundException\n      */\n-    @Test(expected=ClassNotFoundException.class)\n-    public void testGetUsingCustomProvider()\n+    @UseDataProvider(\"testCases\")\n+    @Test\n+    public void testGetFallback(final String testCase)\n             throws IllegalAccessException, InstantiationException, ClassNotFoundException {\n \n         final DataSourceStrategyProvider provider = Mockito.spy(DataSourceStrategyProvider.class);\n+        final SystemEnvironmentProperties properties = Mockito.spy(SystemEnvironmentProperties.class);\n+        final DBPropertiesDataSourceStrategy dbStrategy = Mockito.spy(DBPropertiesDataSourceStrategy.class);\n+        final SystemEnvDataSourceStrategy systemEnvStrategy = Mockito.spy(SystemEnvDataSourceStrategy.class);\n+        final DockerSecretDataSourceStrategy dockerSecretStrategy = Mockito.spy(DockerSecretDataSourceStrategy.class);\n+        final TomcatDataSourceStrategy tomcatDataSourceStrategy = Mockito.mock(TomcatDataSourceStrategy.class);\n+\n+        final HikariDataSource dummyDatasource = new HikariDataSource();\n+\n+        Mockito.when(provider.getSystemEnvironmentProperties()).thenReturn(properties);\n+        Mockito.when(provider.getDBPropertiesInstance()).thenReturn(dbStrategy);\n+        Mockito.when(provider.getSystemEnvDataSourceInstance()).thenReturn(systemEnvStrategy);\n+        Mockito.when(provider.getDockerSecretDataSourceInstance()).thenReturn(dockerSecretStrategy);\n+        Mockito.when(provider.getTomcatDataSourceInstance()).thenReturn(tomcatDataSourceStrategy);\n \n-        Mockito.when(provider.getCustomDataSourceProvider()).thenReturn(\"DummyProvider\");\n+        if (testCase.equals(\"DBProperties\")) {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(true);\n+            Mockito.when(dbStrategy.getPropertiesFile()).thenReturn(null);\n+        } else {\n+            Mockito.when(dbStrategy.existsDBPropertiesFile()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"SystemEnv\")){\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(\"dummy_url\");\n+        } else {\n+            Mockito.when(properties.getVariable(\"connection_db_base_url\")).thenReturn(null);\n+        }\n+\n+        if (testCase.equals(\"DockerSecret\")) {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(true);\n+        } else {\n+            Mockito.when(dockerSecretStrategy.dockerSecretPathExists()).thenReturn(false);\n+        }\n+\n+        if (testCase.equals(\"CustomProvider\")){", "originalCommit": "0ea90edd1a67e59ebdb171d21653a9feae2795c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNTczNQ==", "url": "https://github.com/dotCMS/core/pull/18063#discussion_r385905735", "bodyText": "Issue found: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-02-28T20:24:15Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DataSourceStrategyProvider.java", "diffHunk": "@@ -59,38 +59,47 @@ public DataSource get()\n \n         final String providerClassName = getCustomDataSourceProvider();\n \n-        if (!UtilMethods.isSet(providerClassName)) {\n-            if (getDBPropertiesInstance()\n-                    .existsDBPropertiesFile()) {\n-                defaultDataSource = getDBPropertiesInstance()\n-                        .apply();\n-                Logger.info(DbConnectionFactory.class,\n-                        \"Datasource loaded from db.properties file\");\n-            } else if (systemEnvironmentProperties.getVariable(\"connection_db_base_url\") != null) {\n-                defaultDataSource = getSystemEnvDataSourceInstance()\n-                        .apply();\n-                Logger.info(DbConnectionFactory.class,\n-                        \"Datasource loaded from system environment\");\n-            } else if (getDockerSecretDataSourceInstance().dockerSecretPathExists()){\n-                defaultDataSource = getDockerSecretDataSourceInstance()\n-                        .apply();\n+        try {\n+\n+            if (!UtilMethods.isSet(providerClassName)) {\n+                if (getDBPropertiesInstance()\n+                        .existsDBPropertiesFile()) {\n+                    defaultDataSource = getDBPropertiesInstance()\n+                            .apply();\n+                    Logger.info(DbConnectionFactory.class,\n+                            \"Datasource loaded from db.properties file\");\n+                } else if (systemEnvironmentProperties.getVariable(\"connection_db_base_url\")\n+                        != null) {\n+                    defaultDataSource = getSystemEnvDataSourceInstance()\n+                            .apply();\n+                    Logger.info(DbConnectionFactory.class,\n+                            \"Datasource loaded from system environment\");\n+                } else if (getDockerSecretDataSourceInstance().dockerSecretPathExists()) {\n+                    defaultDataSource = getDockerSecretDataSourceInstance()\n+                            .apply();\n+                    Logger.info(DbConnectionFactory.class,\n+                            \"Datasource loaded from Docker Secret\");\n+                }\n+            } else {\n+                DotDataSourceStrategy customStrategy = ((Class<DotDataSourceStrategy>) Class\n+                        .forName(providerClassName)).newInstance();\n+                defaultDataSource = customStrategy.apply();\n+\n                 Logger.info(DbConnectionFactory.class,\n-                        \"Datasource loaded from Docker Secret\");\n+                        \"Datasource loaded using custom class \" + providerClassName);\n             }\n \n+        } catch(Exception e) {", "originalCommit": "0ea90edd1a67e59ebdb171d21653a9feae2795c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNTc0Mw==", "url": "https://github.com/dotCMS/core/pull/18063#discussion_r385905743", "bodyText": "Issue found: Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter", "author": "dev-dotcms", "createdAt": "2020-02-28T20:24:16Z", "path": "dotCMS/src/main/java/com/dotmarketing/db/DBPropertiesDataSourceStrategy.java", "diffHunk": "@@ -63,7 +64,7 @@ public DataSource apply() {\n                 throw new FileNotFoundException(\"DB properties file not found\");\n             }\n \n-            properties.load(new FileInputStream(propertiesFile));\n+            properties.load(new FileInputStream(getPropertiesFile()));", "originalCommit": "0ea90edd1a67e59ebdb171d21653a9feae2795c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNTc1NQ==", "url": "https://github.com/dotCMS/core/pull/18063#discussion_r385905755", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-02-28T20:24:17Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -99,30 +106,85 @@ public void testGet(final String testCase)\n         Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n         Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();\n         Mockito.verify(dockerSecretStrategy, Mockito.times(testCase.equals(\"DockerSecret\")? 1: 0)).apply();\n-        Mockito.verify(tomcatDataSourceStrategy, Mockito.times(testCase.equals(\"Tomcat\")? 1: 0)).apply();\n+        Mockito.verify(tomcatDataSourceStrategy, Mockito.times(\n+                (testCase.equals(\"Tomcat\") | testCase.equals(\"CustomProvider\")) ? 1 : 0)).apply();", "originalCommit": "0ea90edd1a67e59ebdb171d21653a9feae2795c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTkwNTc2Mg==", "url": "https://github.com/dotCMS/core/pull/18063#discussion_r385905762", "bodyText": "Issue found: Position literals first in String comparisons", "author": "dev-dotcms", "createdAt": "2020-02-28T20:24:19Z", "path": "dotCMS/src/test/java/com/dotmarketing/db/DataSourceStrategyProviderTest.java", "diffHunk": "@@ -99,30 +106,85 @@ public void testGet(final String testCase)\n         Mockito.verify(dbStrategy, Mockito.times(testCase.equals(\"DBProperties\")? 1: 0)).apply();\n         Mockito.verify(systemEnvStrategy, Mockito.times(testCase.equals(\"SystemEnv\")? 1: 0)).apply();\n         Mockito.verify(dockerSecretStrategy, Mockito.times(testCase.equals(\"DockerSecret\")? 1: 0)).apply();\n-        Mockito.verify(tomcatDataSourceStrategy, Mockito.times(testCase.equals(\"Tomcat\")? 1: 0)).apply();\n+        Mockito.verify(tomcatDataSourceStrategy, Mockito.times(\n+                (testCase.equals(\"Tomcat\") | testCase.equals(\"CustomProvider\")) ? 1 : 0)).apply();", "originalCommit": "0ea90edd1a67e59ebdb171d21653a9feae2795c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}