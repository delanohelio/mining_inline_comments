{"pr_number": 17791, "pr_title": "#17772 adding validations for binary files", "pr_createdAt": "2020-01-06T22:47:38Z", "pr_url": "https://github.com/dotCMS/core/pull/17791", "timeline": [{"oid": "b3ad2eaa01ca828d19823c515824939a8a1d40d2", "url": "https://github.com/dotCMS/core/commit/b3ad2eaa01ca828d19823c515824939a8a1d40d2", "message": "#17772 adding validations for binary files", "committedDate": "2020-01-06T22:46:14Z", "type": "commit"}, {"oid": "d0600bd67191bf6da6113fe777e37d4290bed482", "url": "https://github.com/dotCMS/core/commit/d0600bd67191bf6da6113fe777e37d4290bed482", "message": "#17772 unit test", "committedDate": "2020-01-07T19:35:50Z", "type": "commit"}, {"oid": "449a815d74b58e21a4a852ebe1b868d6cbf93883", "url": "https://github.com/dotCMS/core/commit/449a815d74b58e21a4a852ebe1b868d6cbf93883", "message": "#17772 feedback", "committedDate": "2020-01-07T20:09:20Z", "type": "commit"}, {"oid": "cf019ca5368e2dc37f95fe2fd85a91286b531b57", "url": "https://github.com/dotCMS/core/commit/cf019ca5368e2dc37f95fe2fd85a91286b531b57", "message": "#17772 feedback", "committedDate": "2020-01-07T20:09:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk1NTMxOA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r363955318", "bodyText": "possible npes?\nWhy Long instead of long", "author": "wezell", "createdAt": "2020-01-07T21:18:14Z", "path": "dotCMS/src/main/java/com/dotcms/util/ConversionUtils.java", "diffHunk": "@@ -137,6 +137,39 @@ public static long toLong (final Object input, final Long defaultLong) {\n \t\treturn resultLong;\n \t}\n \n+\t/**\n+\t * Converts 1kb to 1024\n+\t * Converts 1mb to 1024 * 1024\n+\t * Converts 1gb to 1024 * 1024 * 1024\n+\t * @param humanDisplaySize\n+\t * @param defaultLong\n+\t * @return long\n+\t */\n+\tpublic static long toLongFromByteCountHumanDisplaySize (final String humanDisplaySize, final Long defaultLong) {", "originalCommit": "cf019ca5368e2dc37f95fe2fd85a91286b531b57", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8cd75eb00f5335b17c4d9ae92a463bbb56163532", "url": "https://github.com/dotCMS/core/commit/8cd75eb00f5335b17c4d9ae92a463bbb56163532", "message": "#17772 feedback 2", "committedDate": "2020-01-07T23:01:35Z", "type": "commit"}, {"oid": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "url": "https://github.com/dotCMS/core/commit/86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "message": "#17772 adding feedback and fixes", "committedDate": "2020-01-08T18:18:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMjcwNA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364822704", "bodyText": "I might be wrong but I think the test case validates are exactly the same that test_validateContentlet_wrong_size_expect_DotContentletValidationException . MAX_FILE_LENGTH and ALLOWED_FILE_TYPES have the same value of the previous test", "author": "nollymar", "createdAt": "2020-01-09T16:03:01Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletAPITest.java", "diffHunk": "@@ -4530,6 +4522,150 @@ public void contentOnlyWithExpireFieldTest() throws Exception{\n \t\tcontentTypeApi.delete(contentType);\n     }\n \n+    /**\n+     * This test will:\n+     * --- Create a content type called \"Nested\".\n+     * --- Add  1 Text field called Title\n+     * --- Add  1 Binary field called File\n+     * --- Set an application/* as a {@link com.dotcms.contenttype.model.field.BinaryField#ALLOWED_FILE_TYPES}\n+     * --- Upload a wrong file\n+     * --- expecteds DotContentletValidationException\n+     *\n+     */\n+    @Test (expected = DotContentletValidationException.class)\n+    public void test_validateContentlet_wrong_size_expect_DotContentletValidationException() throws Exception {\n+\n+        ContentType contentType = null;\n+        com.dotcms.contenttype.model.field.Field textField   = null;\n+        com.dotcms.contenttype.model.field.Field binaryField = null;\n+\n+        Contentlet contentletA = null;\n+\n+        // Create Content Type.\n+        contentType = ContentTypeBuilder.builder(BaseContentType.CONTENT.immutableClass())\n+                .description(\"Nested\" + System.currentTimeMillis())\n+                .host(defaultHost.getIdentifier())\n+                .name(\"Nested\" + System.currentTimeMillis())\n+                .owner(\"owner\")\n+                .variable(\"nested\" + System.currentTimeMillis())\n+                .build();\n+\n+        contentType = contentTypeAPI.save(contentType);\n+\n+        // Save Fields. 1. Text\n+        // Creating Text Field: Title.\n+        textField = ImmutableTextField.builder()\n+                .name(\"Title\")\n+                .variable(\"title\")\n+                .contentTypeId(contentType.id())\n+                .dataType(DataTypes.TEXT)\n+                .build();\n+\n+        textField = fieldAPI.save(textField, user);\n+\n+        // Save Fields. 1. Binary\n+        // Creating Text Field: File.\n+        binaryField = ImmutableBinaryField.builder()\n+                .name(\"file\")\n+                .variable(\"file\")\n+                .contentTypeId(contentType.id())\n+                .build();\n+\n+\n+        binaryField = fieldAPI.save(binaryField, user);\n+\n+        FieldVariable maxLength      = ImmutableFieldVariable.builder().key(BinaryField.MAX_FILE_LENGTH).value(\"10\").fieldId(binaryField.id()).build();\n+        FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES).value(\"application/*, text/*\").fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(maxLength, allowFileTypes));\n+        fieldAPI.save(maxLength, user);\n+        fieldAPI.save(allowFileTypes, user);\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"csvTest_\" + new Date().getTime(), \".txt\");\n+        FileUtils.writeStringToFile(tempTestFile, \"Test hi this a test longer than ten characters\");\n+\n+        contentletA = new Contentlet();\n+        contentletA.setStructureInode(contentType.inode());\n+        contentletA.setLanguageId(languageAPI.getDefaultLanguage().getId());\n+        contentletA.setStringProperty(textField.variable(), \"A\");\n+        contentletA.setBinary(binaryField, tempTestFile);\n+        contentletA.setIndexPolicy(IndexPolicy.FORCE);\n+        contentletA.setIndexPolicyDependencies(IndexPolicy.FORCE);\n+        contentletA = contentletAPI.checkin(contentletA, user, false);\n+    }\n+\n+    /**\n+     * This test will:\n+     * --- Create a content type called \"Nested\".\n+     * --- Add  1 Text field called Title\n+     * --- Add  1 Binary field called File\n+     * --- Set an application/* as a {@link com.dotcms.contenttype.model.field.BinaryField#ALLOWED_FILE_TYPES}\n+     * --- Upload a wrong file\n+     * --- expecteds DotContentletValidationException\n+     *\n+     */\n+    @Test (expected = DotContentletValidationException.class)\n+    public void test_validateContentlet_wrong_mime_type_expect_DotContentletValidationException() throws Exception {\n+\n+        ContentType contentType = null;\n+        com.dotcms.contenttype.model.field.Field textField   = null;\n+        com.dotcms.contenttype.model.field.Field binaryField = null;\n+\n+        Contentlet contentletA = null;\n+\n+            // Create Content Type.\n+            contentType = ContentTypeBuilder.builder(BaseContentType.CONTENT.immutableClass())\n+                    .description(\"Nested\" + System.currentTimeMillis())\n+                    .host(defaultHost.getIdentifier())\n+                    .name(\"Nested\" + System.currentTimeMillis())\n+                    .owner(\"owner\")\n+                    .variable(\"nested\" + System.currentTimeMillis())\n+                    .build();\n+\n+            contentType = contentTypeAPI.save(contentType);\n+\n+            // Save Fields. 1. Text\n+            // Creating Text Field: Title.\n+            textField = ImmutableTextField.builder()\n+                    .name(\"Title\")\n+                    .variable(\"title\")\n+                    .contentTypeId(contentType.id())\n+                    .dataType(DataTypes.TEXT)\n+                    .build();\n+\n+            textField = fieldAPI.save(textField, user);\n+\n+            // Save Fields. 1. Binary\n+            // Creating Text Field: File.\n+            binaryField = ImmutableBinaryField.builder()\n+                    .name(\"file\")\n+                    .variable(\"file\")\n+                    .contentTypeId(contentType.id())\n+                    .build();\n+\n+\n+            binaryField = fieldAPI.save(binaryField, user);\n+\n+            FieldVariable maxLength      = ImmutableFieldVariable.builder().key(BinaryField.MAX_FILE_LENGTH).value(\"10\").fieldId(binaryField.id()).build();\n+            FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES).value(\"application/*\").fieldId(binaryField.id()).build();", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzNTkwMQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364835901", "bodyText": "@nollymar is not the same since the length of the temp file is within the valid length (10). See below:\nFileUtils.writeStringToFile(tempTestFile, \"Test\");", "author": "dsilvam", "createdAt": "2020-01-09T16:26:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMjcwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0Mjg2Nw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364842867", "bodyText": "Almost the issue is doing two validations:\n\nmax length for a file\nmime types accepted\n\nSo one test for each", "author": "jdotcms", "createdAt": "2020-01-09T16:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMjcwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNTc1MA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364825750", "bodyText": "there is a typo in contentlett", "author": "nollymar", "createdAt": "2020-01-09T16:08:32Z", "path": "dotCMS/src/main/webapp/WEB-INF/messages/Language.properties", "diffHunk": "@@ -2813,7 +2816,7 @@ org.dotcms.frontend.content.submission.not.proper.permissions = You do not have\n org.dotcms.frontend.content.submission.previous = Previous\n org.dotcms.frontend.content.submission.remove = Remove\n org.dotcms.frontend.content.submission.save = Save\n-org.dotcms.frontend.content.submission.structure.dont.exists = The Content Type selected does not exist.\n+message.contentlett.submission.structure.dont.exists = The Content Type selected does not exist.", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5MDA4Mw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364890083", "bodyText": "thx it was my mistake", "author": "jdotcms", "createdAt": "2020-01-09T18:20:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNTc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNjM0MQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364826341", "bodyText": "this test can be rewritten using data providers with all the different cases and just one assert", "author": "nollymar", "createdAt": "2020-01-09T16:09:35Z", "path": "dotCMS/src/test/java/com/dotcms/util/ConversionUtilsTest.java", "diffHunk": "@@ -13,6 +13,40 @@\n  */\n public class ConversionUtilsTest extends UnitTestBase {\n \n+    @Test\n+    public void toLongFromByteCountHumanDisplaySizeTest () {", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNjg2NA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364826864", "bodyText": "there is a typo in expecteds", "author": "nollymar", "createdAt": "2020-01-09T16:10:33Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletAPITest.java", "diffHunk": "@@ -4530,6 +4522,150 @@ public void contentOnlyWithExpireFieldTest() throws Exception{\n \t\tcontentTypeApi.delete(contentType);\n     }\n \n+    /**\n+     * This test will:\n+     * --- Create a content type called \"Nested\".\n+     * --- Add  1 Text field called Title\n+     * --- Add  1 Binary field called File\n+     * --- Set an application/* as a {@link com.dotcms.contenttype.model.field.BinaryField#ALLOWED_FILE_TYPES}\n+     * --- Upload a wrong file\n+     * --- expecteds DotContentletValidationException\n+     *\n+     */\n+    @Test (expected = DotContentletValidationException.class)\n+    public void test_validateContentlet_wrong_size_expect_DotContentletValidationException() throws Exception {\n+\n+        ContentType contentType = null;\n+        com.dotcms.contenttype.model.field.Field textField   = null;\n+        com.dotcms.contenttype.model.field.Field binaryField = null;\n+\n+        Contentlet contentletA = null;\n+\n+        // Create Content Type.\n+        contentType = ContentTypeBuilder.builder(BaseContentType.CONTENT.immutableClass())\n+                .description(\"Nested\" + System.currentTimeMillis())\n+                .host(defaultHost.getIdentifier())\n+                .name(\"Nested\" + System.currentTimeMillis())\n+                .owner(\"owner\")\n+                .variable(\"nested\" + System.currentTimeMillis())\n+                .build();\n+\n+        contentType = contentTypeAPI.save(contentType);\n+\n+        // Save Fields. 1. Text\n+        // Creating Text Field: Title.\n+        textField = ImmutableTextField.builder()\n+                .name(\"Title\")\n+                .variable(\"title\")\n+                .contentTypeId(contentType.id())\n+                .dataType(DataTypes.TEXT)\n+                .build();\n+\n+        textField = fieldAPI.save(textField, user);\n+\n+        // Save Fields. 1. Binary\n+        // Creating Text Field: File.\n+        binaryField = ImmutableBinaryField.builder()\n+                .name(\"file\")\n+                .variable(\"file\")\n+                .contentTypeId(contentType.id())\n+                .build();\n+\n+\n+        binaryField = fieldAPI.save(binaryField, user);\n+\n+        FieldVariable maxLength      = ImmutableFieldVariable.builder().key(BinaryField.MAX_FILE_LENGTH).value(\"10\").fieldId(binaryField.id()).build();\n+        FieldVariable allowFileTypes = ImmutableFieldVariable.builder().key(BinaryField.ALLOWED_FILE_TYPES).value(\"application/*, text/*\").fieldId(binaryField.id()).build();\n+        binaryField.constructFieldVariables(Arrays.asList(maxLength, allowFileTypes));\n+        fieldAPI.save(maxLength, user);\n+        fieldAPI.save(allowFileTypes, user);\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"csvTest_\" + new Date().getTime(), \".txt\");\n+        FileUtils.writeStringToFile(tempTestFile, \"Test hi this a test longer than ten characters\");\n+\n+        contentletA = new Contentlet();\n+        contentletA.setStructureInode(contentType.inode());\n+        contentletA.setLanguageId(languageAPI.getDefaultLanguage().getId());\n+        contentletA.setStringProperty(textField.variable(), \"A\");\n+        contentletA.setBinary(binaryField, tempTestFile);\n+        contentletA.setIndexPolicy(IndexPolicy.FORCE);\n+        contentletA.setIndexPolicyDependencies(IndexPolicy.FORCE);\n+        contentletA = contentletAPI.checkin(contentletA, user, false);\n+    }\n+\n+    /**\n+     * This test will:\n+     * --- Create a content type called \"Nested\".\n+     * --- Add  1 Text field called Title\n+     * --- Add  1 Binary field called File\n+     * --- Set an application/* as a {@link com.dotcms.contenttype.model.field.BinaryField#ALLOWED_FILE_TYPES}\n+     * --- Upload a wrong file\n+     * --- expecteds DotContentletValidationException", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzNTgyNg==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364835826", "bodyText": "done", "author": "jdotcms", "createdAt": "2020-01-09T16:26:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNjg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNjk0Nw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364826947", "bodyText": "there is a typo in expecteds", "author": "nollymar", "createdAt": "2020-01-09T16:10:40Z", "path": "dotCMS/src/integration-test/java/com/dotmarketing/portlets/contentlet/business/ContentletAPITest.java", "diffHunk": "@@ -4530,6 +4522,150 @@ public void contentOnlyWithExpireFieldTest() throws Exception{\n \t\tcontentTypeApi.delete(contentType);\n     }\n \n+    /**\n+     * This test will:\n+     * --- Create a content type called \"Nested\".\n+     * --- Add  1 Text field called Title\n+     * --- Add  1 Binary field called File\n+     * --- Set an application/* as a {@link com.dotcms.contenttype.model.field.BinaryField#ALLOWED_FILE_TYPES}\n+     * --- Upload a wrong file\n+     * --- expecteds DotContentletValidationException", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgzNTU3MA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364835570", "bodyText": "done thx", "author": "jdotcms", "createdAt": "2020-01-09T16:26:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNjk0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxOTI0Mg==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364819242", "bodyText": "I think is better idea move this logic to a private method something like: \"validateUniqueField\", I think is better than put a comment", "author": "freddyucv", "createdAt": "2020-01-09T15:57:06Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -6215,6 +6114,8 @@ else if(field.getFieldType().equals(Field.FieldType.DATE_TIME.toString())){\n                     }\n                 }\n             }\n+\n+            // validate unique", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0NjUyMg==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364846522", "bodyText": "I have tried buddy but wasn't easy enough to do it in one iteration or with the scope.", "author": "jdotcms", "createdAt": "2020-01-09T16:44:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxOTI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxOTUwOA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364819508", "bodyText": "same before", "author": "freddyucv", "createdAt": "2020-01-09T15:57:33Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -6284,11 +6185,13 @@ else if(field.getFieldType().equals(Field.FieldType.DATE_TIME.toString())){\n                     Logger.warn(this,\"Unable to get contentlets for Content Type: \" + contentlet.getStructure().getName(), e);\n                 }\n             }\n+\n+            // validate text", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxOTYzNQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364819635", "bodyText": "same before", "author": "freddyucv", "createdAt": "2020-01-09T15:57:45Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -6302,11 +6205,13 @@ else if(field.getFieldType().equals(Field.FieldType.DATE_TIME.toString())){\n                     continue;\n                 }\n             }\n+\n+            // validate regex", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgxOTcxMg==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364819712", "bodyText": "same", "author": "freddyucv", "createdAt": "2020-01-09T15:57:52Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -6329,12 +6234,216 @@ else if(field.getFieldType().equals(Field.FieldType.DATE_TIME.toString())){\n                     }\n                 }\n             }\n+\n+            // validate binary", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMDM4MA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364820380", "bodyText": "maybe it is good idea move this logic to a Util class", "author": "freddyucv", "createdAt": "2020-01-09T15:58:57Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -6329,12 +6234,216 @@ else if(field.getFieldType().equals(Field.FieldType.DATE_TIME.toString())){\n                     }\n                 }\n             }\n+\n+            // validate binary\n+            if(isFieldTypeBinary(field)) {\n+                this.validateBinary (File.class.cast(fieldValue), field.getFieldName(), field, contentType);\n+            }\n+\n         }\n         if(hasError){\n             throw cve;\n         }\n     }\n \n+    private String getMimeType (final File binary) {", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0NzAyNQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364847025", "bodyText": "ok", "author": "jdotcms", "createdAt": "2020-01-09T16:45:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMDM4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzcyOQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364887729", "bodyText": "Done", "author": "jdotcms", "createdAt": "2020-01-09T18:14:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMDM4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyMTg0MQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364821841", "bodyText": "maybe we can move all this validateXXX method for a Util class or create a Validator class for each field type", "author": "freddyucv", "createdAt": "2020-01-09T16:01:29Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -6329,12 +6234,216 @@ else if(field.getFieldType().equals(Field.FieldType.DATE_TIME.toString())){\n                     }\n                 }\n             }\n+\n+            // validate binary\n+            if(isFieldTypeBinary(field)) {\n+                this.validateBinary (File.class.cast(fieldValue), field.getFieldName(), field, contentType);\n+            }\n+\n         }\n         if(hasError){\n             throw cve;\n         }\n     }\n \n+    private String getMimeType (final File binary) {\n+\n+        final Path path = binary.toPath();\n+        String mimeType = Sneaky.sneak(() -> Files.probeContentType(path));\n+\n+        if  (!UtilMethods.isSet(mimeType)) {\n+\n+            mimeType = Config.CONTEXT.getMimeType(binary.getAbsolutePath());\n+\n+            if( !UtilMethods.isSet(mimeType)){\n+                try {\n+                    mimeType = new TikaUtils().detect(binary);\n+                } catch(Exception e) {\n+                    Logger.warn(this.getClass(), e.getMessage() +  e.getStackTrace()[0]);\n+                }\n+            }\n+        }\n+\n+        return mimeType;\n+    }\n+\n+    private void validateBinary(final File binary, final String fieldName, final Field legacyField, final ContentType contentType) {\n+\n+        final Map<String, com.dotcms.contenttype.model.field.Field> fieldMap = contentType.fieldMap();\n+\n+        if (fieldMap.containsKey(fieldName) && null != binary) {\n+\n+            final List<FieldVariable> fieldVariables = fieldMap.get(fieldName).fieldVariables();\n+\n+            if (UtilMethods.isSet(fieldVariables)) {\n+\n+                for (final FieldVariable fieldVariable : fieldVariables) {\n+\n+                    final String keyField = fieldVariable.key();\n+\n+                    if (BinaryField.ALLOWED_FILE_TYPES.equalsIgnoreCase(keyField)) {\n+\n+                        final String binaryMimeType   = this.getMimeType(binary);\n+                        final String allowedFileTypes = fieldVariable.value();\n+                        if (UtilMethods.isSet(allowedFileTypes) && UtilMethods.isSet(binaryMimeType)) {\n+\n+                            boolean allowed = false;\n+                            final MimeType fileMimeType = Sneaky.sneak(() -> new MimeType(binaryMimeType));\n+                            final String[] allowedFileTypeArray = StringUtil.split(allowedFileTypes);\n+                            for (final String allowFileType : allowedFileTypeArray) {\n+\n+                                final MimeType mimeType = Sneaky.sneak(() -> new MimeType(allowFileType));\n+                                allowed |= mimeType.match(fileMimeType);\n+                            }\n+\n+                            // if the extension of the file is not supported\n+                            if (!allowed) {\n+\n+                                final DotContentletValidationException cve = new DotContentletValidationException(\"message.contentlet.binary.type.notallowed\");\n+                                Logger.warn(this, \"Name of Binary field [\" + fieldName + \"] has an not allowed type: \" + binaryMimeType);\n+                                cve.addBadTypeField(legacyField);\n+                                throw cve;\n+                            }\n+                        }\n+                    }\n+\n+                    if (BinaryField.MAX_FILE_LENGTH.equalsIgnoreCase(keyField)) {\n+\n+                        final long fileLength        = binary.length();\n+                        final String maxLengthString = fieldVariable.value();\n+                        final long maxLength         = ConversionUtils.toLongFromByteCountHumanDisplaySize(maxLengthString, -1l);\n+\n+                        if (-1 != maxLength && // if the user sets a valid value\n+                                fileLength > maxLength) {\n+\n+                            final DotContentletValidationException cve = new DotContentletValidationException(\"message.contentlet.binary.invalidlength\");\n+                            Logger.warn(this, \"Name of Binary field [\" + fieldName + \"] has a length: \" + fileLength\n+                                    + \" but the max length is: \" + maxLength);\n+                            cve.addBadTypeField(legacyField);\n+                            throw cve;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    } // validateBinary.\n+\n+    private void validateHtmlPage(Contentlet contentlet, String contentIdentifier, ContentType contentType) {\n+        if(contentlet.getHost()!=null && contentlet.getHost().equals(Host.SYSTEM_HOST) && (!UtilMethods.isSet(contentlet.getFolder()) || contentlet.getFolder().equals(FolderAPI.SYSTEM_FOLDER))){\n+            final DotContentletValidationException cve = new FileAssetValidationException(\"message.contentlet.fileasset.invalid.hostfolder\");\n+            Logger.warn(this, \"HTML Page [\" + contentIdentifier + \"] cannot be created directly under System \" +\n+                    \"Host\");\n+            cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n+                    .HOST_FOLDER_FIELD)).asOldField());\n+            throw cve;\n+        }\n+        try{\n+            final Host site = APILocator.getHostAPI().find(contentlet.getHost(), APILocator.getUserAPI().getSystemUser(), false);\n+            Folder folder = null;\n+            if(UtilMethods.isSet(contentlet.getFolder())){\n+                folder=APILocator.getFolderAPI().find(contentlet.getFolder(), APILocator.getUserAPI().getSystemUser(), false);\n+            }\n+            else{\n+                folder=APILocator.getFolderAPI().findSystemFolder();\n+            }\n+\n+            //Get the URL from Identifier if it is not in Contentlet\n+            String url = contentlet.getStringProperty(HTMLPageAssetAPI.URL_FIELD);\n+\n+            if(!UtilMethods.isSet(url)){\n+\n+                if (InodeUtils.isSet(contentlet.getVersionId()) || InodeUtils.isSet(contentlet.getInode())) {\n+                    Identifier identifier = APILocator.getIdentifierAPI().find(contentlet);\n+                    if (UtilMethods.isSet(identifier) && UtilMethods.isSet(identifier.getAssetName())) {\n+\n+                        url = identifier.getAssetName();\n+                    }\n+                }\n+            }\n+\n+            if(UtilMethods.isSet(url)){\n+                contentlet.setProperty(HTMLPageAssetAPI.URL_FIELD, url);\n+                Identifier folderId = APILocator.getIdentifierAPI().find(folder);\n+                String path = folder.getInode().equals(FolderAPI.SYSTEM_FOLDER)?\"/\"+url:folderId.getPath()+url;\n+                Identifier htmlpage = APILocator.getIdentifierAPI().find(site, path);\n+                if(htmlpage!=null && InodeUtils.isSet(htmlpage.getId()) && !htmlpage.getId().equals(contentlet.getIdentifier()) ){\n+                    final String errorMsg = \"Page URL [\" + path + \"] already exists with content ID [\" + htmlpage\n+                            .getId() + \"]\";\n+                    final DotContentletValidationException cve = new FileAssetValidationException(errorMsg);\n+                    Logger.warn(this, errorMsg);\n+                    cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(HTMLPageAssetAPI\n+                            .URL_FIELD)).asOldField());\n+                    throw cve;\n+                }\n+                UtilMethods.validateFileName(url);\n+            }\n+\n+        } catch (final DotDataException | DotSecurityException | IllegalArgumentException e) {\n+            final String errorMsg = \"Contentlet [\" + contentIdentifier + \"] has an invalid URL: \" + contentlet\n+                    .getStringProperty(HTMLPageAssetAPI.URL_FIELD);\n+            final DotContentletValidationException cve = new FileAssetValidationException(errorMsg);\n+            Logger.warn(this, errorMsg);\n+            cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(HTMLPageAssetAPI\n+                    .URL_FIELD)).asOldField());\n+            throw cve;\n+        }\n+    }\n+\n+    private void validateFileAsset(final Contentlet contentlet, final String contentIdentifier, final ContentType contentType) {\n+\n+        if(contentlet.getHost()!=null && contentlet.getHost().equals(Host.SYSTEM_HOST) && (!UtilMethods.isSet(contentlet.getFolder()) || contentlet.getFolder().equals(FolderAPI.SYSTEM_FOLDER))){\n+            final DotContentletValidationException cve = new FileAssetValidationException(\"message.contentlet.fileasset.invalid.hostfolder\");\n+            Logger.warn(this, \"File Asset [\" + contentIdentifier + \"] cannot be created directly under System \" +\n+                    \"Host\");\n+            cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n+                    .HOST_FOLDER_FIELD)).asOldField());\n+            throw cve;\n+        }\n+\n+        //Enforce validation only if the file name isn't the same we've already got\n+        if(hasNewIncomingFile(contentlet)){\n+            boolean fileNameExists = false;\n+            try {\n+                final Host site = APILocator.getHostAPI ().find(contentlet.getHost(), APILocator.getUserAPI().getSystemUser(), false);\n+                final Folder folder = UtilMethods.isSet(contentlet.getFolder())?\n+                        APILocator.getFolderAPI().find(contentlet.getFolder(), APILocator.getUserAPI().getSystemUser(), false):\n+                        APILocator.getFolderAPI().findSystemFolder();\n+\n+                String fileName = contentlet.getBinary(FileAssetAPI.BINARY_FIELD) != null ? contentlet.getBinary(FileAssetAPI.BINARY_FIELD).getName() : StringPool.BLANK;\n+                if(UtilMethods.isSet(contentlet.getStringProperty(\"fileName\"))){\n+                    fileName = contentlet.getStringProperty(\"fileName\");\n+                }\n+                if(UtilMethods.isSet(fileName)){\n+                    fileNameExists = APILocator.getFileAssetAPI().fileNameExists(site, folder, fileName, contentlet.getIdentifier());\n+                    if(!APILocator.getFolderAPI().matchFilter(folder, fileName)) {\n+                        final DotContentletValidationException cve = new FileAssetValidationException(\"message.file_asset.error.filename.filters\");\n+                        Logger.warn(this, \"File Asset [\" + contentIdentifier + \"] does not match specified folder\" +\n+                                \" file filters\");\n+                        cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n+                                .HOST_FOLDER_FIELD)).asOldField());\n+                        throw cve;\n+                    }\n+                }\n+\n+            } catch (final Exception e) {\n+                if(e instanceof FileAssetValidationException) {\n+                    throw (FileAssetValidationException) e;\n+                }\n+                final String errorMsg = \"Unable to validate field: \" + FileAssetAPI.BINARY_FIELD + \" in \" +\n+                        \"contentlet [\" + contentIdentifier + \"]\";\n+                Logger.warn(this, errorMsg);\n+                throw new FileAssetValidationException(errorMsg, e);\n+            }\n+            if(fileNameExists){\n+                final DotContentletValidationException cve = new FileAssetValidationException(\"message.contentlet.fileasset.filename.already.exists\");\n+                Logger.warn(this, \"Name of File Asset [\" + contentIdentifier + \"] already exists\");\n+                cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n+                        .HOST_FOLDER_FIELD)).asOldField());\n+                throw cve;\n+            }\n+        }\n+    }\n+", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNTM1MA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364825350", "bodyText": "test?", "author": "freddyucv", "createdAt": "2020-01-09T16:07:48Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/temp/RemoteUrlForm.java", "diffHunk": "@@ -13,18 +14,19 @@\n \n   public RemoteUrlForm(@JsonProperty(\"remoteUrl\") final String remoteUrl, @JsonProperty(\"fileName\") final String fileName,\n       @JsonProperty(\"accessKey\") final String accessKey) {\n-    this(remoteUrl, fileName, accessKey, null,-1L);\n+    this(remoteUrl, fileName, accessKey, null,\"-1\");\n   }\n \n   @JsonCreator\n   public RemoteUrlForm(@JsonProperty(\"remoteUrl\") final String remoteUrl, @JsonProperty(\"fileName\") final String fileName,\n-      @JsonProperty(\"accessKey\") final String accessKey, @JsonProperty(\"urlTimeoutSeconds\") final Integer urlTimeout, @JsonProperty(TempFileResource.MAX_FILE_LENGTH_PARAM)final Long maxFileLength) {\n+      @JsonProperty(\"accessKey\") final String accessKey, @JsonProperty(\"urlTimeoutSeconds\") final Integer urlTimeout,\n+                       @JsonProperty(TempFileResource.MAX_FILE_LENGTH_PARAM)final String maxFileLength) {\n     super();\n     this.remoteUrl = remoteUrl;\n     this.fileName = fileName;\n     this.accessKey = accessKey;\n     this.urlTimeoutSeconds = urlTimeout != null && urlTimeout < 600 ? urlTimeout : 30;\n-    this.maxFileLength=(maxFileLength==null)?-1L : maxFileLength;\n+    this.maxFileLength=(maxFileLength==null)?-1L : ConversionUtils.toLongFromByteCountHumanDisplaySize(maxFileLength, -1l );", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4NzkxNw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364887917", "bodyText": "it already have many test", "author": "jdotcms", "createdAt": "2020-01-09T18:15:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyNTM1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyODQ2OA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364828468", "bodyText": "not explain how the parameters work", "author": "freddyucv", "createdAt": "2020-01-09T16:13:28Z", "path": "dotCMS/src/main/java/com/dotcms/util/ConversionUtils.java", "diffHunk": "@@ -137,6 +137,39 @@ public static long toLong (final Object input, final Long defaultLong) {\n \t\treturn resultLong;\n \t}\n \n+\t/**\n+\t * Converts 1kb to 1024\n+\t * Converts 1mb to 1024 * 1024\n+\t * Converts 1gb to 1024 * 1024 * 1024\n+\t * @param humanDisplaySize\n+\t * @param defaultLong", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg4ODcyNA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364888724", "bodyText": "Done", "author": "jdotcms", "createdAt": "2020-01-09T18:17:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgyODQ2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0MzQxNw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364843417", "bodyText": "good", "author": "dsilvam", "createdAt": "2020-01-09T16:40:30Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -5916,166 +5920,60 @@ public void validateContentlet(final Contentlet contentlet, final List<Category>\n         final ContentType contentType = Sneaky.sneak(() -> APILocator.getContentTypeAPI(APILocator.systemUser()).find\n                 (contentTypeId));\n         if (BaseContentType.FILEASSET.getType() == contentType.baseType().getType()) {\n-            if(contentlet.getHost()!=null && contentlet.getHost().equals(Host.SYSTEM_HOST) && (!UtilMethods.isSet(contentlet.getFolder()) || contentlet.getFolder().equals(FolderAPI.SYSTEM_FOLDER))){\n-                final DotContentletValidationException cve = new FileAssetValidationException(\"message.contentlet.fileasset.invalid.hostfolder\");\n-                Logger.warn(this, \"File Asset [\" + contentIdentifier + \"] cannot be created directly under System \" +\n-                        \"Host\");\n-                cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n-                        .HOST_FOLDER_FIELD)).asOldField());\n-                throw cve;\n-            }\n-\n-            //Enforce validation only if the file name isn't the same we've already got\n-            if(hasNewIncomingFile(contentlet)){\n-                boolean fileNameExists = false;\n-                try {\n-                    final Host site = APILocator.getHostAPI ().find(contentlet.getHost(), APILocator.getUserAPI().getSystemUser(), false);\n-                    final Folder folder = UtilMethods.isSet(contentlet.getFolder())?\n-                            APILocator.getFolderAPI().find(contentlet.getFolder(), APILocator.getUserAPI().getSystemUser(), false):\n-                            APILocator.getFolderAPI().findSystemFolder();\n-\n-                    String fileName = contentlet.getBinary(FileAssetAPI.BINARY_FIELD) != null ? contentlet.getBinary(FileAssetAPI.BINARY_FIELD).getName() : StringPool.BLANK;\n-                    if(UtilMethods.isSet(contentlet.getStringProperty(\"fileName\"))){\n-                        fileName = contentlet.getStringProperty(\"fileName\");\n-                    }\n-                    if(UtilMethods.isSet(fileName)){\n-                        fileNameExists = APILocator.getFileAssetAPI().fileNameExists(site, folder, fileName, contentlet.getIdentifier());\n-                        if(!APILocator.getFolderAPI().matchFilter(folder, fileName)) {\n-                            final DotContentletValidationException cve = new FileAssetValidationException(\"message.file_asset.error.filename.filters\");\n-                            Logger.warn(this, \"File Asset [\" + contentIdentifier + \"] does not match specified folder\" +\n-                                    \" file filters\");\n-                            cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n-                                    .HOST_FOLDER_FIELD)).asOldField());\n-                            throw cve;\n-                        }\n-                    }\n-\n-                } catch (final Exception e) {\n-                    if(e instanceof FileAssetValidationException) {\n-                        throw (FileAssetValidationException) e;\n-                    }\n-                    final String errorMsg = \"Unable to validate field: \" + FileAssetAPI.BINARY_FIELD + \" in \" +\n-                            \"contentlet [\" + contentIdentifier + \"]\";\n-                    Logger.warn(this, errorMsg);\n-                    throw new FileAssetValidationException(errorMsg, e);\n-                }\n-                if(fileNameExists){\n-                    final DotContentletValidationException cve = new FileAssetValidationException(\"message.contentlet.fileasset.filename.already.exists\");\n-                    Logger.warn(this, \"Name of File Asset [\" + contentIdentifier + \"] already exists\");\n-                    cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n-                            .HOST_FOLDER_FIELD)).asOldField());\n-                    throw cve;\n-                }\n-            }\n+            this.validateFileAsset(contentlet, contentIdentifier, contentType);", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg0MzQ4MQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364843481", "bodyText": "good", "author": "dsilvam", "createdAt": "2020-01-09T16:40:37Z", "path": "dotCMS/src/main/java/com/dotcms/content/elasticsearch/business/ESContentletAPIImpl.java", "diffHunk": "@@ -5916,166 +5920,60 @@ public void validateContentlet(final Contentlet contentlet, final List<Category>\n         final ContentType contentType = Sneaky.sneak(() -> APILocator.getContentTypeAPI(APILocator.systemUser()).find\n                 (contentTypeId));\n         if (BaseContentType.FILEASSET.getType() == contentType.baseType().getType()) {\n-            if(contentlet.getHost()!=null && contentlet.getHost().equals(Host.SYSTEM_HOST) && (!UtilMethods.isSet(contentlet.getFolder()) || contentlet.getFolder().equals(FolderAPI.SYSTEM_FOLDER))){\n-                final DotContentletValidationException cve = new FileAssetValidationException(\"message.contentlet.fileasset.invalid.hostfolder\");\n-                Logger.warn(this, \"File Asset [\" + contentIdentifier + \"] cannot be created directly under System \" +\n-                        \"Host\");\n-                cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n-                        .HOST_FOLDER_FIELD)).asOldField());\n-                throw cve;\n-            }\n-\n-            //Enforce validation only if the file name isn't the same we've already got\n-            if(hasNewIncomingFile(contentlet)){\n-                boolean fileNameExists = false;\n-                try {\n-                    final Host site = APILocator.getHostAPI ().find(contentlet.getHost(), APILocator.getUserAPI().getSystemUser(), false);\n-                    final Folder folder = UtilMethods.isSet(contentlet.getFolder())?\n-                            APILocator.getFolderAPI().find(contentlet.getFolder(), APILocator.getUserAPI().getSystemUser(), false):\n-                            APILocator.getFolderAPI().findSystemFolder();\n-\n-                    String fileName = contentlet.getBinary(FileAssetAPI.BINARY_FIELD) != null ? contentlet.getBinary(FileAssetAPI.BINARY_FIELD).getName() : StringPool.BLANK;\n-                    if(UtilMethods.isSet(contentlet.getStringProperty(\"fileName\"))){\n-                        fileName = contentlet.getStringProperty(\"fileName\");\n-                    }\n-                    if(UtilMethods.isSet(fileName)){\n-                        fileNameExists = APILocator.getFileAssetAPI().fileNameExists(site, folder, fileName, contentlet.getIdentifier());\n-                        if(!APILocator.getFolderAPI().matchFilter(folder, fileName)) {\n-                            final DotContentletValidationException cve = new FileAssetValidationException(\"message.file_asset.error.filename.filters\");\n-                            Logger.warn(this, \"File Asset [\" + contentIdentifier + \"] does not match specified folder\" +\n-                                    \" file filters\");\n-                            cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n-                                    .HOST_FOLDER_FIELD)).asOldField());\n-                            throw cve;\n-                        }\n-                    }\n-\n-                } catch (final Exception e) {\n-                    if(e instanceof FileAssetValidationException) {\n-                        throw (FileAssetValidationException) e;\n-                    }\n-                    final String errorMsg = \"Unable to validate field: \" + FileAssetAPI.BINARY_FIELD + \" in \" +\n-                            \"contentlet [\" + contentIdentifier + \"]\";\n-                    Logger.warn(this, errorMsg);\n-                    throw new FileAssetValidationException(errorMsg, e);\n-                }\n-                if(fileNameExists){\n-                    final DotContentletValidationException cve = new FileAssetValidationException(\"message.contentlet.fileasset.filename.already.exists\");\n-                    Logger.warn(this, \"Name of File Asset [\" + contentIdentifier + \"] already exists\");\n-                    cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n-                            .HOST_FOLDER_FIELD)).asOldField());\n-                    throw cve;\n-                }\n-            }\n+            this.validateFileAsset(contentlet, contentIdentifier, contentType);\n         }\n \n         if (BaseContentType.HTMLPAGE.getType() == contentType.baseType().getType()) {\n-            if(contentlet.getHost()!=null && contentlet.getHost().equals(Host.SYSTEM_HOST) && (!UtilMethods.isSet(contentlet.getFolder()) || contentlet.getFolder().equals(FolderAPI.SYSTEM_FOLDER))){\n-                final DotContentletValidationException cve = new FileAssetValidationException(\"message.contentlet.fileasset.invalid.hostfolder\");\n-                Logger.warn(this, \"HTML Page [\" + contentIdentifier + \"] cannot be created directly under System \" +\n-                        \"Host\");\n-                cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(FileAssetAPI\n-                        .HOST_FOLDER_FIELD)).asOldField());\n-                throw cve;\n-            }\n-            try{\n-                final Host site = APILocator.getHostAPI().find(contentlet.getHost(), APILocator.getUserAPI().getSystemUser(), false);\n-                Folder folder = null;\n-                if(UtilMethods.isSet(contentlet.getFolder())){\n-                    folder=APILocator.getFolderAPI().find(contentlet.getFolder(), APILocator.getUserAPI().getSystemUser(), false);\n-                }\n-                else{\n-                    folder=APILocator.getFolderAPI().findSystemFolder();\n-                }\n-\n-                //Get the URL from Identifier if it is not in Contentlet\n-                String url = contentlet.getStringProperty(HTMLPageAssetAPI.URL_FIELD);\n-\n-                if(!UtilMethods.isSet(url)){\n-\n-                    if (InodeUtils.isSet(contentlet.getVersionId()) || InodeUtils.isSet(contentlet.getInode())) {\n-                        Identifier identifier = APILocator.getIdentifierAPI().find(contentlet);\n-                        if (UtilMethods.isSet(identifier) && UtilMethods.isSet(identifier.getAssetName())) {\n-\n-                            url = identifier.getAssetName();\n-                        }\n-                    }\n-                }\n-\n-                if(UtilMethods.isSet(url)){\n-                    contentlet.setProperty(HTMLPageAssetAPI.URL_FIELD, url);\n-                    Identifier folderId = APILocator.getIdentifierAPI().find(folder);\n-                    String path = folder.getInode().equals(FolderAPI.SYSTEM_FOLDER)?\"/\"+url:folderId.getPath()+url;\n-                    Identifier htmlpage = APILocator.getIdentifierAPI().find(site, path);\n-                    if(htmlpage!=null && InodeUtils.isSet(htmlpage.getId()) && !htmlpage.getId().equals(contentlet.getIdentifier()) ){\n-                        final String errorMsg = \"Page URL [\" + path + \"] already exists with content ID [\" + htmlpage\n-                                .getId() + \"]\";\n-                        final DotContentletValidationException cve = new FileAssetValidationException(errorMsg);\n-                        Logger.warn(this, errorMsg);\n-                        cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(HTMLPageAssetAPI\n-                                .URL_FIELD)).asOldField());\n-                        throw cve;\n-                    }\n-                    UtilMethods.validateFileName(url);\n-                }\n-\n-            } catch (final DotDataException | DotSecurityException | IllegalArgumentException e) {\n-                final String errorMsg = \"Contentlet [\" + contentIdentifier + \"] has an invalid URL: \" + contentlet\n-                        .getStringProperty(HTMLPageAssetAPI.URL_FIELD);\n-                final DotContentletValidationException cve = new FileAssetValidationException(errorMsg);\n-                Logger.warn(this, errorMsg);\n-                cve.addBadTypeField(new LegacyFieldTransformer(contentType.fieldMap().get(HTMLPageAssetAPI\n-                        .URL_FIELD)).asOldField());\n-                throw cve;\n-            }\n+            this.validateHtmlPage(contentlet, contentIdentifier, contentType);", "originalCommit": "86e2be6c1e19ef7c0b4f0ddbfa9a5c2e2cd5b828", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fa1bd84b08529a7afe4f202616c2551234e43ab8", "url": "https://github.com/dotCMS/core/commit/fa1bd84b08529a7afe4f202616c2551234e43ab8", "message": "#17772 adding fixes, refactoring and test", "committedDate": "2020-01-09T18:14:19Z", "type": "commit"}, {"oid": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "url": "https://github.com/dotCMS/core/commit/d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "message": "#17772 adding fixes, refactoring and test", "committedDate": "2020-01-09T18:28:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Njg3NA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896874", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen.TestDataUtils'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:44Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Njg4Ng==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896886", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.workflows.model.WorkflowState'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:45Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NjkwMQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896901", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.*'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:47Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.dotcms.util.CollectionsUtils.*;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * MimeTypeUtils unit test.\n+ * @author jsanca\n+ */\n+public class MimeTypeUtilsTest extends UnitTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+\n+    @Test\n+    public void test_getMimeType_text_plain() throws IOException {\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"csvTest_\" + new Date().getTime(), \".txt\");\n+        FileUtils.writeStringToFile(tempTestFile, \"Test\");\n+\n+        final String mimeType = MimeTypeUtils.getMimeType(tempTestFile);\n+\n+        Assert.assertEquals(\"The mime type should be application/text\",\"text/plain\", mimeType);\n+    }\n+\n+    @Test\n+    public void test_getMimeType_image_png() throws IOException {\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"image\" + new Date().getTime(), \".png\");\n+        final int width         = 200;\n+        final int height        = 200;\n+        final BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+        final Graphics2D   graphics2D     = bufferedImage.createGraphics();\n+        final Font font                   = new Font(\"TimesRoman\", Font.BOLD, 20);\n+        final String message              = \"Test\";\n+        FontMetrics fontMetrics           = graphics2D.getFontMetrics();\n+        graphics2D.setFont(font);\n+        final int stringWidth             = fontMetrics.stringWidth(message);\n+        final int stringHeight            = fontMetrics.getAscent();\n+        graphics2D.setPaint(Color.black);\n+        graphics2D.drawString(message, (width - stringWidth) / 2, height / 2 + stringHeight / 4);\n+\n+        ImageIO.write(bufferedImage, \"PNG\", tempTestFile);\n+\n+        final String mimeType = MimeTypeUtils.getMimeType(tempTestFile);\n+\n+        Assert.assertEquals(\"The mime type should be image/png\",\"image/png\", mimeType);", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NjkxMw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896913", "bodyText": "Issue found: Avoid unused imports such as 'com.liferay.util.StringPool'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:48Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NjkyNw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896927", "bodyText": "Issue found: Unnecessary use of fully qualified name 'Assert.assertEquals' due to existing static import 'org.junit.Assert.*'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:50Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.dotcms.util.CollectionsUtils.*;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * MimeTypeUtils unit test.\n+ * @author jsanca\n+ */\n+public class MimeTypeUtilsTest extends UnitTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+\n+    @Test\n+    public void test_getMimeType_text_plain() throws IOException {\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"csvTest_\" + new Date().getTime(), \".txt\");\n+        FileUtils.writeStringToFile(tempTestFile, \"Test\");\n+\n+        final String mimeType = MimeTypeUtils.getMimeType(tempTestFile);\n+\n+        Assert.assertEquals(\"The mime type should be application/text\",\"text/plain\", mimeType);", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NjkzNg==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896936", "bodyText": "Issue found: Avoid unused imports such as 'io.vavr.Tuple2'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:51Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Njk0Ng==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896946", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:52Z", "path": "dotCMS/src/test/java/com/dotcms/util/ConversionUtilsTest.java", "diffHunk": "@@ -13,6 +13,40 @@\n  */\n public class ConversionUtilsTest extends UnitTestBase {\n \n+    @Test\n+    public void toLongFromByteCountHumanDisplaySizeTest () {\n+\n+        long value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"0\", -1l);\n+        Assert.assertEquals(0l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"10\", -1l);\n+        Assert.assertEquals(10l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"900\", -1l);\n+        Assert.assertEquals(900l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"9000\", -1l);\n+        Assert.assertEquals(9000l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"1kb\", -1l);\n+        Assert.assertEquals(1024l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"112kb\", -1l);\n+        Assert.assertEquals(112l * 1024l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"3kb\", -1l);\n+        Assert.assertEquals( (3l * 1024l), value);", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Njk1NQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896955", "bodyText": "Issue found: All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:53Z", "path": "dotCMS/src/main/java/com/dotcms/util/MimeTypeUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.tika.TikaUtils;\n+import com.dotmarketing.util.Config;\n+import com.dotmarketing.util.Logger;\n+import com.dotmarketing.util.UtilMethods;\n+import com.rainerhahnekamp.sneakythrow.Sneaky;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/**\n+ * Mime Type Utils\n+ * @author jsanca\n+ */\n+public class MimeTypeUtils {", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Njk2Nw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896967", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.contentlet.business.DotContentletValidationException'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:55Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/temp/TempFileResource.java", "diffHunk": "@@ -1,5 +1,7 @@\n package com.dotcms.rest.api.v1.temp;\n \n+import com.dotcms.util.ConversionUtils;\n+import com.dotmarketing.portlets.contentlet.business.DotContentletValidationException;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Njk3OQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896979", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business.Role'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:56Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Njk5MA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896990", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.util.UUIDGenerator'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:57Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5Njk5OA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364896998", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:35:58Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzAxMg==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897012", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:00Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzAyNA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897024", "bodyText": "Issue found: A method/constructor should not explicitly throw java.lang.Exception", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:01Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.dotcms.util.CollectionsUtils.*;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * MimeTypeUtils unit test.\n+ * @author jsanca\n+ */\n+public class MimeTypeUtilsTest extends UnitTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzAzNA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897034", "bodyText": "Issue found: Avoid unused imports such as 'org.junit.Assert'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:02Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.dotcms.util.CollectionsUtils.*;\n+import static org.junit.Assert.*;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzA0NA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897044", "bodyText": "Issue found: Avoid unused imports such as 'com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:04Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzA1Mg==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897052", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.util.ConversionUtils'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:05Z", "path": "dotCMS/src/main/java/com/dotcms/rest/api/v1/temp/TempFileResource.java", "diffHunk": "@@ -1,5 +1,7 @@\n package com.dotcms.rest.api.v1.temp;\n \n+import com.dotcms.util.ConversionUtils;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzA1Nw==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897057", "bodyText": "Issue found: Avoid unused imports such as 'io.vavr.Tuple'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:06Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;\n+import io.vavr.Tuple;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzA2NA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897064", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:07Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzA3MQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897071", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business.APILocator'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:08Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzA4Mg==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897082", "bodyText": "Issue found: Avoid unused imports such as 'com.dotmarketing.business.RoleAPI'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:09Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzA4OQ==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897089", "bodyText": "Issue found: Local variable 'fontMetrics' could be declared final", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:10Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.dotcms.util.CollectionsUtils.*;\n+import static org.junit.Assert.*;\n+\n+/**\n+ * MimeTypeUtils unit test.\n+ * @author jsanca\n+ */\n+public class MimeTypeUtilsTest extends UnitTestBase {\n+\n+    @BeforeClass\n+    public static void prepare() throws Exception {\n+        //Setting web app environment\n+        IntegrationTestInitService.getInstance().init();\n+    }\n+\n+\n+    @Test\n+    public void test_getMimeType_text_plain() throws IOException {\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"csvTest_\" + new Date().getTime(), \".txt\");\n+        FileUtils.writeStringToFile(tempTestFile, \"Test\");\n+\n+        final String mimeType = MimeTypeUtils.getMimeType(tempTestFile);\n+\n+        Assert.assertEquals(\"The mime type should be application/text\",\"text/plain\", mimeType);\n+    }\n+\n+    @Test\n+    public void test_getMimeType_image_png() throws IOException {\n+\n+        final File tempTestFile = File\n+                .createTempFile(\"image\" + new Date().getTime(), \".png\");\n+        final int width         = 200;\n+        final int height        = 200;\n+        final BufferedImage bufferedImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+        final Graphics2D   graphics2D     = bufferedImage.createGraphics();\n+        final Font font                   = new Font(\"TimesRoman\", Font.BOLD, 20);\n+        final String message              = \"Test\";\n+        FontMetrics fontMetrics           = graphics2D.getFontMetrics();", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzEwMA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897100", "bodyText": "Issue found: Avoid unused imports such as 'com.dotcms.datagen.TestUserUtils'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:11Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzEwOA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897108", "bodyText": "Issue found: Avoid unused imports such as 'java.util.stream.Collectors'", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:13Z", "path": "dotCMS/src/integration-test/java/com/dotcms/util/MimeTypeUtilsTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package com.dotcms.util;\n+\n+import com.dotcms.UnitTestBase;\n+import com.dotcms.contenttype.business.ContentTypeAPIImpl;\n+import com.dotcms.datagen.TestDataUtils;\n+import com.dotcms.datagen.TestUserUtils;\n+import com.dotcms.repackage.org.apache.commons.io.FileUtils;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.business.Role;\n+import com.dotmarketing.business.RoleAPI;\n+import com.dotmarketing.portlets.workflows.actionlet.PublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.SaveContentAsDraftActionlet;\n+import com.dotmarketing.portlets.workflows.actionlet.UnpublishContentActionlet;\n+import com.dotmarketing.portlets.workflows.business.BaseWorkflowIntegrationTest;\n+import com.dotmarketing.portlets.workflows.model.WorkflowState;\n+import com.dotmarketing.util.UUIDGenerator;\n+import com.liferay.util.StringPool;\n+import com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageWriter;\n+import io.vavr.Tuple;\n+import io.vavr.Tuple2;\n+import org.junit.Assert;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import javax.imageio.ImageIO;\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDg5NzExNA==", "url": "https://github.com/dotCMS/core/pull/17791#discussion_r364897114", "bodyText": "Issue found: Useless parentheses.", "author": "dev-dotcms", "createdAt": "2020-01-09T18:36:14Z", "path": "dotCMS/src/test/java/com/dotcms/util/ConversionUtilsTest.java", "diffHunk": "@@ -13,6 +13,40 @@\n  */\n public class ConversionUtilsTest extends UnitTestBase {\n \n+    @Test\n+    public void toLongFromByteCountHumanDisplaySizeTest () {\n+\n+        long value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"0\", -1l);\n+        Assert.assertEquals(0l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"10\", -1l);\n+        Assert.assertEquals(10l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"900\", -1l);\n+        Assert.assertEquals(900l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"9000\", -1l);\n+        Assert.assertEquals(9000l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"1kb\", -1l);\n+        Assert.assertEquals(1024l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"112kb\", -1l);\n+        Assert.assertEquals(112l * 1024l, value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"3kb\", -1l);\n+        Assert.assertEquals( (3l * 1024l), value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"2mb\", -1l);\n+        Assert.assertEquals( (2l * 1024l * 1024l), value);\n+\n+        value = ConversionUtils.toLongFromByteCountHumanDisplaySize(\"4gb\", -1l);\n+        Assert.assertEquals( (4l * 1024l * 1024l * 1024l), value);", "originalCommit": "d8696da7c5e9a3f75b2f9df089d8006edc29f7cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}