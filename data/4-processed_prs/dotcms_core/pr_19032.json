{"pr_number": 19032, "pr_title": "#18801 add \"count\" field to GraphQL", "pr_createdAt": "2020-08-04T23:28:59Z", "pr_url": "https://github.com/dotCMS/core/pull/19032", "timeline": [{"oid": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269", "url": "https://github.com/dotCMS/core/commit/9bbf3c09e01a30ff1c6d3f703e8e84d5af013269", "message": "#18801 add \"count\" field to GraphQL", "committedDate": "2020-08-04T23:26:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MzQ1Ng==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465753456", "bodyText": "I am not sure if this should be fieldName, maybe 'collectionName' could be a better name", "author": "freddyucv", "createdAt": "2020-08-05T14:08:09Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum CountTypeProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;\n+\n+    final Map<String, GraphQLOutputType> pageFields = map(\n+            \"totalCount\", GraphQLString,\n+            \"fieldName\", GraphQLString);", "originalCommit": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNDU4Nw==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465824587", "bodyText": "Waiting on discussion with team", "author": "dsilvam", "createdAt": "2020-08-05T15:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MzQ1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNDQwNQ==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466014405", "bodyText": "leaving like this", "author": "dsilvam", "createdAt": "2020-08-05T21:27:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1MzQ1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTIxOQ==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465755219", "bodyText": "should it be the same name than here https://github.com/dotCMS/core/pull/19032/files#diff-cf87643edb0d8a8ccf07993e94b7180bR21?\nmaybe we can create a suoer class here to define to add the count field and create the Map, and later each sub class could add the extra parameters", "author": "freddyucv", "createdAt": "2020-08-05T14:10:34Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/CountTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum CountTypeProvider implements GraphQLTypesProvider {\n+\n+    INSTANCE;\n+\n+    final Map<String, GraphQLOutputType> pageFields = map(\n+            \"totalCount\", GraphQLString,", "originalCommit": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgyNDY3Nw==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465824677", "bodyText": "Waiting on discussion with team", "author": "dsilvam", "createdAt": "2020-08-05T15:46:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxNDQ5Mg==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466014492", "bodyText": "leaving it like this", "author": "dsilvam", "createdAt": "2020-08-05T21:28:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NTIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc1NjE1Ng==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r465756156", "bodyText": "maybe should re throw a DotRuntimeException", "author": "freddyucv", "createdAt": "2020-08-05T14:11:56Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/CountDataFetcher.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.dotcms.graphql.datafetcher;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.FolderToMapTransformer;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+\n+public class CountDataFetcher implements DataFetcher<List<Map<String, Object>>> {\n+    @Override\n+    public List<Map<String, Object>> get(final DataFetchingEnvironment environment) throws Exception {\n+        try {\n+            return ((DotGraphQLContext) environment.getContext()).getFieldCountMaps();\n+        } catch (Exception e) {\n+            Logger.error(this, e.getMessage(), e);\n+            throw e;", "originalCommit": "9bbf3c09e01a30ff1c6d3f703e8e84d5af013269", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "55437c5fdb46e03a6de86cda9007d5693bce876b", "url": "https://github.com/dotCMS/core/commit/55437c5fdb46e03a6de86cda9007d5693bce876b", "message": "#18801 Rename count to QueryMetadata and postman tests", "committedDate": "2020-08-05T17:33:32Z", "type": "commit"}, {"oid": "89735bdcb988dfde0380f834877314543d36d985", "url": "https://github.com/dotCMS/core/commit/89735bdcb988dfde0380f834877314543d36d985", "message": "#18801 rename class", "committedDate": "2020-08-05T17:36:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMzA3MQ==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466503071", "bodyText": "doc", "author": "jdotcms", "createdAt": "2020-08-06T15:37:56Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/QueryMetadataFieldProvider.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.dotcms.graphql.business;\n+\n+import static graphql.schema.GraphQLFieldDefinition.newFieldDefinition;\n+import static graphql.schema.GraphQLList.list;\n+\n+import com.dotcms.graphql.datafetcher.QueryMetadataDataFetcher;\n+import com.dotmarketing.exception.DotDataException;\n+import graphql.schema.GraphQLFieldDefinition;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+public enum QueryMetadataFieldProvider implements GraphQLFieldsProvider {", "originalCommit": "89735bdcb988dfde0380f834877314543d36d985", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMzM1NA==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466503354", "bodyText": "doc", "author": "jdotcms", "createdAt": "2020-08-06T15:38:22Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/business/QueryMetadataTypeProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.dotcms.graphql.business;\n+\n+import static com.dotcms.util.CollectionsUtils.map;\n+import static graphql.Scalars.GraphQLString;\n+\n+import com.dotcms.graphql.util.TypeUtil;\n+import graphql.schema.GraphQLObjectType;\n+import graphql.schema.GraphQLOutputType;\n+import graphql.schema.GraphQLType;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Map;\n+\n+public enum QueryMetadataTypeProvider implements GraphQLTypesProvider {", "originalCommit": "89735bdcb988dfde0380f834877314543d36d985", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDQzNA==", "url": "https://github.com/dotCMS/core/pull/19032#discussion_r466504434", "bodyText": "Doc", "author": "jdotcms", "createdAt": "2020-08-06T15:39:47Z", "path": "dotCMS/src/main/java/com/dotcms/graphql/datafetcher/QueryMetadataDataFetcher.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.dotcms.graphql.datafetcher;\n+\n+import com.dotcms.graphql.DotGraphQLContext;\n+import com.dotmarketing.beans.Host;\n+import com.dotmarketing.business.APILocator;\n+import com.dotmarketing.portlets.contentlet.model.Contentlet;\n+import com.dotmarketing.portlets.contentlet.transform.FolderToMapTransformer;\n+import com.dotmarketing.util.Logger;\n+import com.liferay.portal.model.User;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import graphql.schema.DataFetcher;\n+import graphql.schema.DataFetchingEnvironment;\n+\n+public class QueryMetadataDataFetcher implements DataFetcher<List<Map<String, Object>>> {", "originalCommit": "89735bdcb988dfde0380f834877314543d36d985", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}