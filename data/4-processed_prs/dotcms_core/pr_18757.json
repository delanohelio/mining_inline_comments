{"pr_number": 18757, "pr_title": "#18303 refactoring to take the app key straight from the file name", "pr_createdAt": "2020-06-23T18:12:54Z", "pr_url": "https://github.com/dotCMS/core/pull/18757", "timeline": [{"oid": "ba5cd2ba09171a1a3f3b65a31b93ce4f278fc25c", "url": "https://github.com/dotCMS/core/commit/ba5cd2ba09171a1a3f3b65a31b93ce4f278fc25c", "message": "#18303 refactoring to take the app key straight from the file name", "committedDate": "2020-06-23T18:10:06Z", "type": "commit"}, {"oid": "b60752eeb8766e1e8a022e7b0f7aa9e071ec1e53", "url": "https://github.com/dotCMS/core/commit/b60752eeb8766e1e8a022e7b0f7aa9e071ec1e53", "message": "#18303 refactoring to eliminate redundancy", "committedDate": "2020-06-23T20:48:59Z", "type": "commit"}, {"oid": "9c1fbed96521fe63ddf3e3d587c5726c6c1b34a8", "url": "https://github.com/dotCMS/core/commit/9c1fbed96521fe63ddf3e3d587c5726c6c1b34a8", "message": "#18303 codacy feedback", "committedDate": "2020-06-23T21:03:20Z", "type": "commit"}, {"oid": "1e849ebb60937ccafece0e29133d6700623ed576", "url": "https://github.com/dotCMS/core/commit/1e849ebb60937ccafece0e29133d6700623ed576", "message": "Merge branch 'master' into issue-18303-apps-file-name-as-key", "committedDate": "2020-06-23T21:07:29Z", "type": "commit"}, {"oid": "2c762fbd587c192e3d01401ce2ac51d580391c9f", "url": "https://github.com/dotCMS/core/commit/2c762fbd587c192e3d01401ce2ac51d580391c9f", "message": "Merge branch 'master' into issue-18303-apps-file-name-as-key", "committedDate": "2020-06-24T15:27:42Z", "type": "commit"}, {"oid": "3056d5f0a58b627bb92546fd49c824b357a3d449", "url": "https://github.com/dotCMS/core/commit/3056d5f0a58b627bb92546fd49c824b357a3d449", "message": "#18303 fixing postmans after  app-key refactoring", "committedDate": "2020-06-24T17:25:19Z", "type": "commit"}, {"oid": "471cd14d4cc246f6e4b0e47b522d3c86fbedd567", "url": "https://github.com/dotCMS/core/commit/471cd14d4cc246f6e4b0e47b522d3c86fbedd567", "message": "#18303 merge with master", "committedDate": "2020-06-24T21:04:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE3NTAwNg==", "url": "https://github.com/dotCMS/core/pull/18757#discussion_r445175006", "bodyText": "Codacy found an issue: Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block", "author": "dev-dotcms", "createdAt": "2020-06-24T21:12:53Z", "path": "dotCMS/src/main/java/com/dotcms/security/apps/AppsAPIImpl.java", "diffHunk": "@@ -389,51 +388,78 @@ private void deleteSecrets(final String key, final String siteIdentifier, final\n         }\n \n         final String appKeyLC = key.toLowerCase();\n-        final AppDescriptorMeta appDescriptorMeta = getAppDescriptorMap()\n+        final AppDescriptor appDescriptorMeta = getAppDescriptorMap()\n                 .get(appKeyLC);\n         return null == appDescriptorMeta ? Optional.empty()\n-                : Optional.of(appDescriptorMeta.getAppDescriptor());\n+                : Optional.of(appDescriptorMeta);\n     }\n \n     @Override\n-    public AppDescriptor createAppDescriptor(final InputStream inputStream,\n-            final User user) throws IOException, DotDataException, AlreadyExistException, DotSecurityException {\n+    public AppDescriptor createAppDescriptor(final File file,\n+            final User user) throws DotDataException, AlreadyExistException, DotSecurityException {\n         if (userDoesNotHaveAccess(user)) {\n             throw new DotSecurityException(String.format(\n-                    \"Invalid attempt to create an App descriptor performed by user with id `%s`.\",\n+                    \"Invalid attempt to create an app descriptor performed by user with id `%s`.\",\n                     user.getUserId()));\n         }\n-\n         final String ymlFilesPath = getServiceDescriptorDirectory();\n         final File basePath = new File(ymlFilesPath);\n         if (!basePath.exists()) {\n-            basePath.mkdir();\n-        }\n-        Logger.debug(AppsAPIImpl.class,\n-                () -> \" ymlFiles are set under:  \" + ymlFilesPath);\n-\n-        // Now validate the incoming file.. see if we're rewriting an existing file or attempting to re-use an already in use service-key.\n-        final AppDescriptor serviceDescriptor = ymlMapper\n-                .readValue(inputStream, AppDescriptor.class);\n+            basePath.mkdirs();\n+        }\n+        Logger.debug(AppsAPIImpl.class, () -> \" ymlFiles are set under:  \" + ymlFilesPath);\n+\n+            final AppSchema appSchema = readAppFile(file);\n+            // Now validate the incoming file.. see if we're rewriting an existing file or attempting to re-use an already in use service-key.\n+            if (validateServiceDescriptor(appSchema)) {\n+                final File incomingFile = new File(basePath, file.getName());\n+                if (incomingFile.exists()) {\n+                    throw new AlreadyExistException(\n+                            String.format(\n+                                    \"Invalid attempt to override an existing file named '%s'.\",\n+                                    incomingFile.getName()));\n+                }\n \n-        if (validateServiceDescriptor(serviceDescriptor)\n-                && validateAppDescriptorUniqueName(serviceDescriptor)) {\n+                writeAppFile(incomingFile, appSchema);\n \n-            final String serviceKey = serviceDescriptor.getKey();\n-            final File incomingFile = new File(basePath, String.format(\"%s.yml\", serviceKey));\n-            if (incomingFile.exists()) {\n-                throw new AlreadyExistException(\n-                        String.format(\"Invalid attempt to override an existing file named '%s'.\",\n-                                incomingFile.getName()));\n+                invalidateCache();\n             }\n+            return new AppDescriptorImpl(file.getName(), appSchema);\n \n-            ymlMapper.writeValue(incomingFile, serviceDescriptor);\n+    }\n \n-            invalidateCache();\n+    /**\n+     * There's a version of the method readValue on the ymlMapper which takes a file and internally creates directly a FileInputStream\n+     * According to https://dzone.com/articles/fileinputstream-fileoutputstream-considered-harmful\n+     * that's very harmful\n+     * @param file\n+     * @return\n+     * @throws DotDataException\n+     */\n+    private AppSchema readAppFile(final File file) throws DotDataException {\n+        try (InputStream inputStream = Files.newInputStream(Paths.get(file.getPath()))) {\n+            return ymlMapper.readValue(inputStream, AppSchema.class);\n+        }catch (Exception e){", "originalCommit": "471cd14d4cc246f6e4b0e47b522d3c86fbedd567", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}