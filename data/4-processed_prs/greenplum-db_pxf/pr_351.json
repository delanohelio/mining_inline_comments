{"pr_number": 351, "pr_title": "Map existing Tomcat properties to Spring Boot", "pr_createdAt": "2020-05-01T16:17:11Z", "pr_url": "https://github.com/greenplum-db/pxf/pull/351", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTA1Ng==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418669056", "bodyText": "these are only for test, if we are shipping anything, the similar file needs to go to src/main/resources", "author": "denalex", "createdAt": "2020-05-01T18:17:58Z", "path": "server/pxf-service/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,21 @@\n+# TODO: decide which endpoints are enabled\n+management.endpoints.web.exposure.include=*\n+management.endpoints.enabled-by-default=true\n+management.endpoint.shutdown.enabled=true\n+\n+server.port=${pxf.port}\n+server.tomcat.max-threads=${pxf.max.threads}\n+\n+# Settings migrated from web.xml\n+server.server-header=PXF Server\n+server.tomcat.accept-count=100\n+server.tomcat.connection-timeout=20000\n+server.max-http-header-size=1048576\n+pxf.tomcat.max-header-count=30000\n+pxf.tomcat.max-header-size=1048576\n+\n+# timeout (ms) for the request - 1 day\n+spring.mvc.async.request-timeout=86400000\n+\n+# legacy fragmenter cache, renamed to metadata cache\n+pxf.metadata-cache=${pxf.fragmenter.cache}", "originalCommit": "57e57c5f94e0d7002215d184431c6eed919741c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4Mjc4OA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418682788", "bodyText": "moved it to the wrong place. Fixing..", "author": "frankgh", "createdAt": "2020-05-01T18:48:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTY5OQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418669699", "bodyText": "is this an \"API\" dependency ?", "author": "denalex", "createdAt": "2020-05-01T18:19:26Z", "path": "server/pxf-service/build.gradle", "diffHunk": "@@ -0,0 +1,47 @@\n+apply plugin: \"org.springframework.boot\"\n+\n+configurations {\n+    developmentOnly\n+    runtimeClasspath {\n+        extendsFrom developmentOnly\n+    }\n+}\n+\n+dependencies {\n+    /*******************************\n+     * API Dependencies\n+     *******************************/\n+\n+    /*******************************\n+     * Implementation Dependencies\n+     *******************************/\n+\n+    implementation(project(':pxf-api'))", "originalCommit": "57e57c5f94e0d7002215d184431c6eed919741c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MjY0Ng==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418682646", "bodyText": "yes. I will move it", "author": "frankgh", "createdAt": "2020-05-01T18:48:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY2OTY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTYwMA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418671600", "bodyText": "are these not exposed via server. namespace so that we have to redefine them here ?", "author": "denalex", "createdAt": "2020-05-01T18:23:47Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/configuration/PxfServerProperties.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.greenplum.pxf.api.configuration;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Pattern;\n+\n+@ConfigurationProperties(prefix = PxfServerProperties.PROPERTY_PREFIX)\n+@Getter\n+@Setter\n+@Validated\n+public class PxfServerProperties {\n+\n+    /**\n+     * The property prefix for all properties in this group.\n+     */\n+    public static final String PROPERTY_PREFIX = \"pxf\";\n+\n+    /**\n+     * The path for the server configuration. If the configuration has not\n+     * been initialized, it will be set to NOT_INITIALIZED. This will cause\n+     * the application to fail during start up.\n+     */\n+    @NotBlank\n+    @Pattern(regexp = \"^(?!NOT_INITIALIZED).*$\")\n+    private String conf;\n+\n+    /**\n+     * Enable caching of metadata calls from a single JVM\n+     */\n+    private boolean metadataCache = true;\n+\n+    /**\n+     * Customizable settings for tomcat through PXF\n+     */\n+    private Tomcat tomcat;\n+\n+    @Getter\n+    @Setter\n+    public static class Tomcat {\n+\n+        /**\n+         * Maximum number of headers allowed in the request\n+         */\n+        private int maxHeaderCount = 30000;\n+\n+        /**\n+         * Maximum size of the HTTP message header.\n+         */\n+        private int maxHeaderSize = 1048576;", "originalCommit": "57e57c5f94e0d7002215d184431c6eed919741c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MjQzOA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418682438", "bodyText": "they are not, that's why we expose them. They have some properties exposed but some of the other ones are not", "author": "frankgh", "createdAt": "2020-05-01T18:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3MTYwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mjg0OA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418672848", "bodyText": "In general, what is our new design ? Do we rely solely on application.properties and ask users to change values there or do we have an overrides property file that users should manage. I'd like to see all user-manageable properties go into an override file (similar to how we have default and override pxf-env.sh files now). Will .sh files still be there, if yes, why, if not, how will we migrate the values ?", "author": "denalex", "createdAt": "2020-05-01T18:26:19Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/configuration/PxfServerProperties.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.greenplum.pxf.api.configuration;", "originalCommit": "57e57c5f94e0d7002215d184431c6eed919741c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MTkzMg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418681932", "bodyText": "not really, we support existing environment variables from our pxf-env-default.sh file. For example:\nexport PXF_PORT=${PXF_PORT:=5888}\nwill map to the server.port property automatically. I am adding unit tests now", "author": "frankgh", "createdAt": "2020-05-01T18:46:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mjg0OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMDIxMQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r420210211", "bodyText": "thanks to @oliverralbertini for providing this info regarding Spring Boot:\n\nprecedence\nrelaxed binding", "author": "frankgh", "createdAt": "2020-05-05T15:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mjg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mzk5OA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418673998", "bodyText": "not sure what this is for", "author": "denalex", "createdAt": "2020-05-01T18:28:50Z", "path": "server/pxf-api/src/main/java/org/greenplum/pxf/api/configuration/PxfServerProperties.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.greenplum.pxf.api.configuration;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.validation.annotation.Validated;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Pattern;\n+\n+@ConfigurationProperties(prefix = PxfServerProperties.PROPERTY_PREFIX)\n+@Getter\n+@Setter\n+@Validated\n+public class PxfServerProperties {\n+\n+    /**\n+     * The property prefix for all properties in this group.\n+     */\n+    public static final String PROPERTY_PREFIX = \"pxf\";\n+\n+    /**\n+     * The path for the server configuration. If the configuration has not\n+     * been initialized, it will be set to NOT_INITIALIZED. This will cause\n+     * the application to fail during start up.\n+     */\n+    @NotBlank\n+    @Pattern(regexp = \"^(?!NOT_INITIALIZED).*$\")\n+    private String conf;", "originalCommit": "57e57c5f94e0d7002215d184431c6eed919741c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY4MjE3NA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r418682174", "bodyText": "this maps to the PXF_CONF property", "author": "frankgh", "createdAt": "2020-05-01T18:47:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODY3Mzk5OA=="}], "type": "inlineReview"}, {"oid": "83fccf83f73c727948a8fa63dffdfb420ee8cf4d", "url": "https://github.com/greenplum-db/pxf/commit/83fccf83f73c727948a8fa63dffdfb420ee8cf4d", "message": "Map existing Tomcat properties to Spring Boot #351\n\nMap the following properties used by tomcat\n\n- PXF_PORT\n- PXF_SHUTDOWN_PORT (NO LONGER NEEDED)\n- PXF_JVM_OPTS\n- PXF_MAX_THREADS\n- PXF_DEBUG\n- PXF_OOM_KILL\n\nAlso mapped properties from web.xml\n\nFrom:\n\n           <Connector acceptCount=\"100\"\n                   connectionTimeout=\"20000\"\n                   executor=\"tomcatThreadPool\"\n                   maxKeepAliveRequests=\"15\"\n                   maxHeaderCount=\"30000\"\n                   maxHttpHeaderSize=\"1048576\"\n                   port=\"${connector.http.port}\"\n                   protocol=\"org.apache.coyote.http11.Http11Protocol\"\n                   redirectPort=\"${connector.https.port}\"/>\n\nTo:\n\n    # Settings migrated from web.xml\n    server.server-header=PXF Server\n    server.tomcat.accept-count=100\n    server.tomcat.connection-timeout=20000\n    server.max-http-header-size=1048576\n    pxf.tomcat.max-header-count=30000\n    pxf.tomcat.max-header-size=1048576", "committedDate": "2020-05-11T14:38:12Z", "type": "commit"}, {"oid": "4d17bbdee59da79334501e5a49debc07ad690f48", "url": "https://github.com/greenplum-db/pxf/commit/4d17bbdee59da79334501e5a49debc07ad690f48", "message": "PXF Logging\n\nImplement log4j2 logging configuration", "committedDate": "2020-05-11T14:39:23Z", "type": "commit"}, {"oid": "ea201ae8d426a66550bcd5775fff05e516480ec9", "url": "https://github.com/greenplum-db/pxf/commit/ea201ae8d426a66550bcd5775fff05e516480ec9", "message": "Migrate unit tests to JUnit 5\n\n- Make the project compile", "committedDate": "2020-05-11T14:45:00Z", "type": "commit"}, {"oid": "476faf320f00bcac4e8eb8b9c112deac38bba595", "url": "https://github.com/greenplum-db/pxf/commit/476faf320f00bcac4e8eb8b9c112deac38bba595", "message": "Change REST endpoints when to switch the server to spring boot\n\n- demo profile is fully functional\n- migrated the following endpoints:\n\n  - BridgeResource\n  - FragmenterResource\n  - WritableResource", "committedDate": "2020-05-11T14:52:33Z", "type": "commit"}, {"oid": "5d87c6e123901f59b65af7270ce177ca70c56fef", "url": "https://github.com/greenplum-db/pxf/commit/5d87c6e123901f59b65af7270ce177ca70c56fef", "message": "Update CLI scripts when to switch the server to spring boot\n\nCLI script changes (only change implementation and not the API)\n\n* Remove tomcat download from Makefile\n* Update starts scripts\n* Update stop scripts\n* Update status scripts\n* Update init scripts\n\nWhen we have a working pxf-service. We can start migrating the scripts to start spring boot instead of tomcat", "committedDate": "2020-05-11T14:52:40Z", "type": "commit"}, {"oid": "5d87c6e123901f59b65af7270ce177ca70c56fef", "url": "https://github.com/greenplum-db/pxf/commit/5d87c6e123901f59b65af7270ce177ca70c56fef", "message": "Update CLI scripts when to switch the server to spring boot\n\nCLI script changes (only change implementation and not the API)\n\n* Remove tomcat download from Makefile\n* Update starts scripts\n* Update stop scripts\n* Update status scripts\n* Update init scripts\n\nWhen we have a working pxf-service. We can start migrating the scripts to start spring boot instead of tomcat", "committedDate": "2020-05-11T14:52:40Z", "type": "forcePushed"}, {"oid": "e3fd098d2855cd36c11669852929c730e81ecce8", "url": "https://github.com/greenplum-db/pxf/commit/e3fd098d2855cd36c11669852929c730e81ecce8", "message": "Ensure /usr/local/gpdb6/pxf exists during make install", "committedDate": "2020-05-11T16:13:13Z", "type": "commit"}, {"oid": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "url": "https://github.com/greenplum-db/pxf/commit/6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "message": "Small fixes for Ubuntu", "committedDate": "2020-05-11T17:01:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjUwNQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423216505", "bodyText": "this is already renamed in external-table branch, maybe add TODO to remove this line upon rebase", "author": "denalex", "createdAt": "2020-05-11T17:54:47Z", "path": "server/build.gradle", "diffHunk": "@@ -110,4 +110,29 @@ configure(javaProjects) {\n     }\n }\n \n+task stage(type: Copy) {\n+    description \"Build PXF server and stage resulting artifacts for packaging.\"\n+    dependsOn \":pxf-service:bootJar\"\n \n+    from(\"pxf-service/build/libs\") {\n+        into 'server'\n+    }\n+    from('pxf-service/src/main/resources/pxf-profiles-default.xml') {\n+        into 'conf'\n+    }\n+    from('pxf-service/src/scripts/pxf-env-default.sh') {\n+        into 'conf'\n+    }\n+    from('pxf-service/src/scripts/pxf-service') {\n+        into 'bin'\n+        rename '(.*)', 'pxf'", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjkzMg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423216932", "bodyText": "this is also changed in external-table", "author": "denalex", "createdAt": "2020-05-11T17:55:30Z", "path": "server/build.gradle", "diffHunk": "@@ -110,4 +110,29 @@ configure(javaProjects) {\n     }\n }\n \n+task stage(type: Copy) {\n+    description \"Build PXF server and stage resulting artifacts for packaging.\"\n+    dependsOn \":pxf-service:bootJar\"\n \n+    from(\"pxf-service/build/libs\") {\n+        into 'server'\n+    }\n+    from('pxf-service/src/main/resources/pxf-profiles-default.xml') {\n+        into 'conf'\n+    }\n+    from('pxf-service/src/scripts/pxf-env-default.sh') {\n+        into 'conf'\n+    }\n+    from('pxf-service/src/scripts/pxf-service') {\n+        into 'bin'\n+        rename '(.*)', 'pxf'\n+    }\n+    from('pxf-service/src/') {\n+        include 'templates/**'\n+    }\n+    into \"$buildDir/stage/pxf\"\n+\n+    doLast {\n+        new File(\"$buildDir/stage/pxf/version\").text = \"${version}\\n\"", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxODU3OQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423218579", "bodyText": "should we also check pxf.tomcat.max-header-size=1024", "author": "denalex", "createdAt": "2020-05-11T17:58:13Z", "path": "server/pxf-api/src/test/java/org/greenplum/pxf/api/configuration/PxfServerPropertiesTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.greenplum.pxf.api.configuration;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.test.context.TestPropertySource;\n+import org.springframework.test.context.junit.jupiter.SpringExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@ExtendWith(SpringExtension.class)\n+@EnableConfigurationProperties(value = PxfServerProperties.class)\n+@TestPropertySource(\"classpath:server-config-test.properties\")\n+class PxfServerPropertiesTest {\n+\n+    @Autowired\n+    PxfServerProperties properties;\n+\n+    @Test\n+    public void testPxfConfIsSet() {\n+        assertNotNull(properties.getConf());\n+        assertEquals(\"/path/to/pxf/conf\", properties.getConf());\n+\n+        assertNotNull(properties.getTomcat());\n+        assertEquals(50, properties.getTomcat().getMaxHeaderCount());", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0MzYxMA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423643610", "bodyText": "pxf.tomcat.max-header-size is an alias for server.max-http-header-size. It's defined as follows\nserver.max-http-header-size=${pxf.tomcat.max-header-size:1048576}", "author": "frankgh", "createdAt": "2020-05-12T10:55:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxODU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5MDE1OQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423390159", "bodyText": "this used to be buildProperties.get(\"protocol_version\") in FilterRegistrationBean", "author": "denalex", "createdAt": "2020-05-12T00:12:45Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResource.java", "diffHunk": "@@ -27,35 +27,34 @@\n import org.greenplum.pxf.service.bridge.Bridge;\n import org.greenplum.pxf.service.bridge.BridgeFactory;\n import org.greenplum.pxf.service.bridge.SimpleBridgeFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;\n \n-import javax.servlet.ServletContext;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.StreamingOutput;\n import java.io.DataOutputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n import java.util.concurrent.locks.ReentrantLock;\n \n /*\n  * This class handles the subpath /<version>/Bridge/ of this\n  * REST component\n  */\n-@Path(\"/\" + Version.PXF_PROTOCOL_VERSION + \"/Bridge/\")\n+@RestController\n+@RequestMapping(\"/pxf/\" + Version.PXF_PROTOCOL_VERSION)", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk0MzU3MQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423943571", "bodyText": "Removing protocol_version for now until we need it", "author": "frankgh", "createdAt": "2020-05-12T18:25:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5MDE1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5MDQ3NQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423390475", "bodyText": "we are not using jetty either, might update the comment", "author": "denalex", "createdAt": "2020-05-12T00:13:43Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/BridgeResource.java", "diffHunk": "@@ -27,35 +27,34 @@\n import org.greenplum.pxf.service.bridge.Bridge;\n import org.greenplum.pxf.service.bridge.BridgeFactory;\n import org.greenplum.pxf.service.bridge.SimpleBridgeFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestHeader;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.servlet.mvc.method.annotation.StreamingResponseBody;\n \n-import javax.servlet.ServletContext;\n-import javax.ws.rs.GET;\n-import javax.ws.rs.Path;\n-import javax.ws.rs.Produces;\n-import javax.ws.rs.WebApplicationException;\n-import javax.ws.rs.core.Context;\n-import javax.ws.rs.core.HttpHeaders;\n-import javax.ws.rs.core.MediaType;\n-import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.StreamingOutput;\n import java.io.DataOutputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n import java.util.concurrent.locks.ReentrantLock;\n \n /*\n  * This class handles the subpath /<version>/Bridge/ of this\n  * REST component\n  */\n-@Path(\"/\" + Version.PXF_PROTOCOL_VERSION + \"/Bridge/\")\n+@RestController\n+@RequestMapping(\"/pxf/\" + Version.PXF_PROTOCOL_VERSION)\n public class BridgeResource extends BaseResource {\n \n     private BridgeFactory bridgeFactory;\n \n     /**\n      * Lock is needed here in the case of a non-thread-safe plugin. Using\n      * synchronized methods is not enough because the bridge work is called by\n-     * jetty ({@link StreamingOutput}), after we are getting out of this class's\n+     * jetty ({@link StreamingResponseBody}), after we are getting out of this class's", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDk1Mg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423394952", "bodyText": "are we sure getDataSource will return the value of path query param ?", "author": "denalex", "createdAt": "2020-05-12T00:29:07Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/FragmenterResource.java", "diffHunk": "@@ -175,10 +163,10 @@ public Response getFragmentsStats(@Context final ServletContext servletContext,\n         FragmentStats fragmentStats = fragmenter.getFragmentStats();\n         String response = FragmentStats.dataToJSON(fragmentStats);\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(FragmentStats.dataToString(fragmentStats, path));\n+            LOG.debug(FragmentStats.dataToString(fragmentStats, context.getDataSource()));", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0NTg3Mg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423645872", "bodyText": "we changed the c-client a while ago to send the datasource as part of the headers, and removed it from the query string. Currently, the c-client doesn't implement getFragmentStats, so it's up to us how to implement it.", "author": "frankgh", "createdAt": "2020-05-12T11:00:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NDk1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NTUwOQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423395509", "bodyText": "how is it gonna get replaced during build ?", "author": "denalex", "createdAt": "2020-05-12T00:30:53Z", "path": "server/pxf-service/src/main/java/org/greenplum/pxf/service/rest/Version.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.greenplum.pxf.service.rest;\n+\n+/**\n+ * PXF protocol version. Any call to PXF resources should include the current\n+ * version e.g. {@code ...pxf/v15/Bridge}\n+ */\n+public class Version {\n+    /**\n+     * Constant which holds current protocol version. Getting replaced with\n+     * actual value on build stage, using pxfProtocolVersion parameter from\n+     * gradle.properties\n+     */\n+    public final static String PXF_PROTOCOL_VERSION = \"v15\";", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1NTg0NQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423955845", "bodyText": "this will remain constant", "author": "frankgh", "createdAt": "2020-05-12T18:46:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NTUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NzAxNQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423397015", "bodyText": "what specific timeout is this ? 1 day seems too long, no ?", "author": "denalex", "createdAt": "2020-05-12T00:36:14Z", "path": "server/pxf-service/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,20 @@\n+# TODO: decide which endpoints are enabled\n+management.endpoints.web.exposure.include=*\n+management.endpoints.enabled-by-default=true\n+management.endpoint.shutdown.enabled=true\n+\n+server.port=${pxf.port:5888}\n+server.tomcat.max-threads=${pxf.max.threads:200}\n+\n+# Settings migrated from web.xml\n+server.server-header=PXF Server\n+server.tomcat.accept-count=100\n+server.tomcat.connection-timeout=20000\n+server.max-http-header-size=${pxf.tomcat.max-header-size:1048576}\n+pxf.tomcat.max-header-count=30000\n+\n+# timeout (ms) for the request - 1 day\n+spring.mvc.async.request-timeout=86400000", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0NjQyNQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423646425", "bodyText": "what should be a good value?", "author": "frankgh", "createdAt": "2020-05-12T11:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5NzAxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5ODI5OQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423398299", "bodyText": "why -2 ?", "author": "denalex", "createdAt": "2020-05-12T00:40:51Z", "path": "server/pxf-service/src/templates/user/conf/pxf-log4j2.xml", "diffHunk": "@@ -0,0 +1,50 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Configuration status=\"WARN\">\n+<Properties>\n+    <Property name=\"LOG_EXCEPTION_CONVERSION_WORD\">%xwEx</Property>\n+    <Property name=\"LOG_LEVEL_PATTERN\">%5p</Property>\n+    <Property name=\"LOG_DATEFORMAT_PATTERN\">yyyy-MM-dd HH:mm:ss.SSS</Property>\n+    <Property name=\"CONSOLE_LOG_PATTERN\">%clr{%d{${LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${LOG_LEVEL_PATTERN}} %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>\n+    <Property name=\"FILE_LOG_PATTERN\">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.} : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>\n+    <Property name=\"LOG_PATH\">$${env:PXF_LOGDIR}</Property>\n+    <Property name=\"LOG_FILE\">$${env:PXF_LOGDIR}/pxf-service-2.log</Property>", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0Njc1MA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423646750", "bodyText": "mostly so I don't overwrite my existing log file, will fix", "author": "frankgh", "createdAt": "2020-05-12T11:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5ODI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5ODk4MA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423398980", "bodyText": "I like using @Mock better, is it not supported anymore ?", "author": "denalex", "createdAt": "2020-05-12T00:43:30Z", "path": "server/pxf-service/src/test/java/org/greenplum/pxf/service/servlet/SecurityServletFilterTest.java", "diffHunk": "@@ -25,115 +25,109 @@\n import org.greenplum.pxf.api.security.SecureLogin;\n import org.greenplum.pxf.service.SessionId;\n import org.greenplum.pxf.service.UGICache;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.ExpectedException;\n-import org.junit.runner.RunWith;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n import org.mockito.ArgumentCaptor;\n-import org.mockito.Captor;\n-import org.mockito.Matchers;\n-import org.mockito.Mock;\n-import org.mockito.runners.MockitoJUnitRunner;\n+import org.mockito.ArgumentMatchers;\n \n import javax.servlet.FilterChain;\n import javax.servlet.ServletResponse;\n import javax.servlet.http.HttpServletRequest;\n-\n import java.security.PrivilegedExceptionAction;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertSame;\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.eq;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n-@RunWith(MockitoJUnitRunner.class)\n public class SecurityServletFilterTest {\n \n-    @Rule\n-    public ExpectedException expectedException = ExpectedException.none();\n-\n     private SecurityServletFilter filter;\n \n-    @Mock\n     private HttpServletRequest mockServletRequest;\n-    @Mock\n     private ServletResponse mockServletResponse;\n-    @Mock\n     private FilterChain mockFilterChain;\n-    @Mock\n     private ConfigurationFactory mockConfigurationFactory;\n-    @Mock\n     private SecureLogin mockSecureLogin;\n-    @Mock\n     private UGICache mockUGICache;\n-    @Mock\n     private Configuration mockConfiguration;\n-    @Mock\n     private UserGroupInformation mockLoginUGI;\n-    @Mock\n     private UserGroupInformation mockProxyUGI;\n \n-    @Captor\n     private ArgumentCaptor<SessionId> session;\n \n-    @Before\n+    @BeforeEach\n     public void setup() {\n+        mockServletRequest = mock(HttpServletRequest.class);\n+        mockServletResponse = mock(ServletResponse.class);\n+        mockFilterChain = mock(FilterChain.class);\n+        mockConfigurationFactory = mock(ConfigurationFactory.class);\n+        mockSecureLogin = mock(SecureLogin.class);\n+        mockUGICache = mock(UGICache.class);\n+        mockConfiguration = mock(Configuration.class);\n+        mockLoginUGI = mock(UserGroupInformation.class);\n+        mockProxyUGI = mock(UserGroupInformation.class);", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0OTE0NA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423649144", "bodyText": "it is , but we need to bring new dependencies, I wanted to keep it as simple as possible", "author": "frankgh", "createdAt": "2020-05-12T11:06:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5ODk4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5OTkyMA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423399920", "bodyText": "do you want to use pushd / popd instead of remembering PWD explicitly ?", "author": "denalex", "createdAt": "2020-05-12T00:47:01Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -17,50 +17,86 @@\n # under the License.\n \n #\n-# pxf-service    start/stop/initialize/status the PXF instance\n+# pxf-service    start/stop/restart/initialize/reset/status the PXF instance\n #\n \n-parent_script_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+[[ -n \"$DEBUG\" ]] && set -x\n+\n+WORKING_DIR=\"$(pwd)\"", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MDY5NA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423650694", "bodyText": "some of the code we bring here is coming from the original spring boot script. My guess is that since pushd/popd is not always installed, then the script is using pwd instead.", "author": "frankgh", "createdAt": "2020-05-12T11:09:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5OTkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc1NjIzNQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423756235", "bodyText": "i just  realized we do pushd/popd in the same script below", "author": "frankgh", "createdAt": "2020-05-12T13:59:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5OTkyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1Njg0Nw==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423956847", "bodyText": "actually, this is used to follow the symlink, and we keep following until we find the final file", "author": "frankgh", "createdAt": "2020-05-12T18:47:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM5OTkyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMDY5MA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423400690", "bodyText": "do we need this ? RPM uninstall scriplet assumes instance is pxf-service", "author": "denalex", "createdAt": "2020-05-12T00:49:54Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -17,50 +17,86 @@\n # under the License.\n \n #\n-# pxf-service    start/stop/initialize/status the PXF instance\n+# pxf-service    start/stop/restart/initialize/reset/status the PXF instance\n #\n \n-parent_script_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+[[ -n \"$DEBUG\" ]] && set -x\n+\n+WORKING_DIR=\"$(pwd)\"\n+\n+# Follow symlinks to find the real script\n+cd \"$(dirname \"$0\")\" || exit 1\n+script_file=$(pwd)/$(basename \"$0\")\n+while [[ -L \"$script_file\" ]]; do\n+  script_file=$(readlink \"$script_file\")\n+  cd \"$(dirname \"$script_file\")\" || exit 1\n+  script_file=$(pwd)/$(basename \"$script_file\")\n+done\n+\n+parent_script_dir=\"$( (cd \"$( dirname \"${script_file}\" )/..\" && pwd -P) )\"\n+cd \"$WORKING_DIR\" || exit 1\n \n # establish PXF_HOME and global vars used by all commands\n-if [[ -z $PXF_HOME ]]; then\n-    export PXF_HOME=$parent_script_dir\n-fi\n+[[ -z \"$PXF_HOME\" ]] && export PXF_HOME=$parent_script_dir\n+identity=\"pxf-service\"\n+[[ -n \"$APP_NAME\" ]] && identity=\"$APP_NAME\"", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MTgxMw==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423651813", "bodyText": "we don't, I will remove it", "author": "frankgh", "createdAt": "2020-05-12T11:11:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMDY5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMTA2NQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423401065", "bodyText": "I ran into problems when PXF_HOME was pointing somewhere else by mistake and removed the check, always exporting PXF_HOME and parent_script_dir", "author": "denalex", "createdAt": "2020-05-12T00:51:13Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -17,50 +17,86 @@\n # under the License.\n \n #\n-# pxf-service    start/stop/initialize/status the PXF instance\n+# pxf-service    start/stop/restart/initialize/reset/status the PXF instance\n #\n \n-parent_script_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+[[ -n \"$DEBUG\" ]] && set -x\n+\n+WORKING_DIR=\"$(pwd)\"\n+\n+# Follow symlinks to find the real script\n+cd \"$(dirname \"$0\")\" || exit 1\n+script_file=$(pwd)/$(basename \"$0\")\n+while [[ -L \"$script_file\" ]]; do\n+  script_file=$(readlink \"$script_file\")\n+  cd \"$(dirname \"$script_file\")\" || exit 1\n+  script_file=$(pwd)/$(basename \"$script_file\")\n+done\n+\n+parent_script_dir=\"$( (cd \"$( dirname \"${script_file}\" )/..\" && pwd -P) )\"\n+cd \"$WORKING_DIR\" || exit 1\n \n # establish PXF_HOME and global vars used by all commands\n-if [[ -z $PXF_HOME ]]; then\n-    export PXF_HOME=$parent_script_dir\n-fi\n+[[ -z \"$PXF_HOME\" ]] && export PXF_HOME=$parent_script_dir", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMTY4OA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423401688", "bodyText": "we know the version at build time, so might as well hardcode the name here using gradle filtering or getting the version from the installed version file instead of find command. Otherwise it looks like we don't know where our own stuff is :)", "author": "denalex", "createdAt": "2020-05-12T00:53:39Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -17,50 +17,86 @@\n # under the License.\n \n #\n-# pxf-service    start/stop/initialize/status the PXF instance\n+# pxf-service    start/stop/restart/initialize/reset/status the PXF instance\n #\n \n-parent_script_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+[[ -n \"$DEBUG\" ]] && set -x\n+\n+WORKING_DIR=\"$(pwd)\"\n+\n+# Follow symlinks to find the real script\n+cd \"$(dirname \"$0\")\" || exit 1\n+script_file=$(pwd)/$(basename \"$0\")\n+while [[ -L \"$script_file\" ]]; do\n+  script_file=$(readlink \"$script_file\")\n+  cd \"$(dirname \"$script_file\")\" || exit 1\n+  script_file=$(pwd)/$(basename \"$script_file\")\n+done\n+\n+parent_script_dir=\"$( (cd \"$( dirname \"${script_file}\" )/..\" && pwd -P) )\"\n+cd \"$WORKING_DIR\" || exit 1\n \n # establish PXF_HOME and global vars used by all commands\n-if [[ -z $PXF_HOME ]]; then\n-    export PXF_HOME=$parent_script_dir\n-fi\n+[[ -z \"$PXF_HOME\" ]] && export PXF_HOME=$parent_script_dir\n+identity=\"pxf-service\"\n+[[ -n \"$APP_NAME\" ]] && identity=\"$APP_NAME\"\n+\n+[[ -z \"$STOP_WAIT_TIME\" ]] && STOP_WAIT_TIME=\"60\"\n+\n+jarfile=$(find \"${PXF_HOME}/server/\" -name \"pxf-service-*.jar\" -type f)", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAzNzI5Nw==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r424037297", "bodyText": "done", "author": "frankgh", "createdAt": "2020-05-12T21:13:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMTY4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMjM5NQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423402395", "bodyText": "can use $EUID here instead of $(id -u) ?", "author": "denalex", "createdAt": "2020-05-12T00:56:35Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -17,50 +17,86 @@\n # under the License.\n \n #\n-# pxf-service    start/stop/initialize/status the PXF instance\n+# pxf-service    start/stop/restart/initialize/reset/status the PXF instance\n #\n \n-parent_script_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+[[ -n \"$DEBUG\" ]] && set -x\n+\n+WORKING_DIR=\"$(pwd)\"\n+\n+# Follow symlinks to find the real script\n+cd \"$(dirname \"$0\")\" || exit 1\n+script_file=$(pwd)/$(basename \"$0\")\n+while [[ -L \"$script_file\" ]]; do\n+  script_file=$(readlink \"$script_file\")\n+  cd \"$(dirname \"$script_file\")\" || exit 1\n+  script_file=$(pwd)/$(basename \"$script_file\")\n+done\n+\n+parent_script_dir=\"$( (cd \"$( dirname \"${script_file}\" )/..\" && pwd -P) )\"\n+cd \"$WORKING_DIR\" || exit 1\n \n # establish PXF_HOME and global vars used by all commands\n-if [[ -z $PXF_HOME ]]; then\n-    export PXF_HOME=$parent_script_dir\n-fi\n+[[ -z \"$PXF_HOME\" ]] && export PXF_HOME=$parent_script_dir\n+identity=\"pxf-service\"\n+[[ -n \"$APP_NAME\" ]] && identity=\"$APP_NAME\"\n+\n+[[ -z \"$STOP_WAIT_TIME\" ]] && STOP_WAIT_TIME=\"60\"\n+\n+jarfile=$(find \"${PXF_HOME}/server/\" -name \"pxf-service-*.jar\" -type f)\n+set_env_script=${PXF_HOME}/bin/setenv.sh\n default_env_script=${PXF_HOME}/conf/pxf-env-default.sh\n-tomcat_root=${PXF_HOME}/apache-tomcat\n-tomcat_templates=${PXF_HOME}/templates/tomcat\n-instance=${PXF_HOME}/pxf-service\n+server_templates=${PXF_HOME}/templates/server-templates/\n \n SED_OPTS=(-i)\n if [[ $OSTYPE == \"darwin\"* ]]; then\n     SED_OPTS+=(\"\")\n fi\n SED_OPTS+=(-e)\n \n+# ANSI Colors\n+echoRed() { echo $'\\e[0;31m'\"$1\"$'\\e[0m'; }\n+echoGreen() { echo $'\\e[0;32m'\"$1\"$'\\e[0m'; }\n+echoYellow() { echo $'\\e[0;33m'\"$1\"$'\\e[0m'; }\n+\n function validate_user()\n {\n-    # make sure current user is not root\n-    if (( EUID == 0 )); then\n-        fail 'Cannot run as root user'\n+    # shellcheck disable=SC2012\n+    [[ $(id -u) == \"0\" ]] && run_user=$(ls -ld \"$jarfile\" | awk '{print $3}')", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMjYwNg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423402606", "bodyText": "why this complexity, was it ever a requirement to do \"run as user\" ?", "author": "denalex", "createdAt": "2020-05-12T00:57:18Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -17,50 +17,86 @@\n # under the License.\n \n #\n-# pxf-service    start/stop/initialize/status the PXF instance\n+# pxf-service    start/stop/restart/initialize/reset/status the PXF instance\n #\n \n-parent_script_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+[[ -n \"$DEBUG\" ]] && set -x\n+\n+WORKING_DIR=\"$(pwd)\"\n+\n+# Follow symlinks to find the real script\n+cd \"$(dirname \"$0\")\" || exit 1\n+script_file=$(pwd)/$(basename \"$0\")\n+while [[ -L \"$script_file\" ]]; do\n+  script_file=$(readlink \"$script_file\")\n+  cd \"$(dirname \"$script_file\")\" || exit 1\n+  script_file=$(pwd)/$(basename \"$script_file\")\n+done\n+\n+parent_script_dir=\"$( (cd \"$( dirname \"${script_file}\" )/..\" && pwd -P) )\"\n+cd \"$WORKING_DIR\" || exit 1\n \n # establish PXF_HOME and global vars used by all commands\n-if [[ -z $PXF_HOME ]]; then\n-    export PXF_HOME=$parent_script_dir\n-fi\n+[[ -z \"$PXF_HOME\" ]] && export PXF_HOME=$parent_script_dir\n+identity=\"pxf-service\"\n+[[ -n \"$APP_NAME\" ]] && identity=\"$APP_NAME\"\n+\n+[[ -z \"$STOP_WAIT_TIME\" ]] && STOP_WAIT_TIME=\"60\"\n+\n+jarfile=$(find \"${PXF_HOME}/server/\" -name \"pxf-service-*.jar\" -type f)\n+set_env_script=${PXF_HOME}/bin/setenv.sh\n default_env_script=${PXF_HOME}/conf/pxf-env-default.sh\n-tomcat_root=${PXF_HOME}/apache-tomcat\n-tomcat_templates=${PXF_HOME}/templates/tomcat\n-instance=${PXF_HOME}/pxf-service\n+server_templates=${PXF_HOME}/templates/server-templates/\n \n SED_OPTS=(-i)\n if [[ $OSTYPE == \"darwin\"* ]]; then\n     SED_OPTS+=(\"\")\n fi\n SED_OPTS+=(-e)\n \n+# ANSI Colors\n+echoRed() { echo $'\\e[0;31m'\"$1\"$'\\e[0m'; }\n+echoGreen() { echo $'\\e[0;32m'\"$1\"$'\\e[0m'; }\n+echoYellow() { echo $'\\e[0;33m'\"$1\"$'\\e[0m'; }\n+\n function validate_user()\n {\n-    # make sure current user is not root\n-    if (( EUID == 0 )); then\n-        fail 'Cannot run as root user'\n+    # shellcheck disable=SC2012\n+    [[ $(id -u) == \"0\" ]] && run_user=$(ls -ld \"$jarfile\" | awk '{print $3}')\n+\n+    # Run as user specified in RUN_AS_USER\n+    if [[ -n \"$RUN_AS_USER\" ]]; then\n+        id -u \"$RUN_AS_USER\" &> /dev/null || {\n+            echoRed \"Cannot run as '$RUN_AS_USER': no such user\"\n+            exit 2\n+        }\n+        [[ $(id -u) == 0 ]] || {\n+            echoRed \"Cannot run as '$RUN_AS_USER': current user is not root\"\n+            exit 4\n+        }\n+        run_user=\"$RUN_AS_USER\"", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMzA5Ng==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423403096", "bodyText": "fancy, but not ADA-compliant (there are people that can't distinguish between green and yellow). need to include some words (like ERROR) to indicate a problem", "author": "denalex", "createdAt": "2020-05-12T00:59:01Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -17,50 +17,86 @@\n # under the License.\n \n #\n-# pxf-service    start/stop/initialize/status the PXF instance\n+# pxf-service    start/stop/restart/initialize/reset/status the PXF instance\n #\n \n-parent_script_dir=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )/..\" && pwd )\"\n+[[ -n \"$DEBUG\" ]] && set -x\n+\n+WORKING_DIR=\"$(pwd)\"\n+\n+# Follow symlinks to find the real script\n+cd \"$(dirname \"$0\")\" || exit 1\n+script_file=$(pwd)/$(basename \"$0\")\n+while [[ -L \"$script_file\" ]]; do\n+  script_file=$(readlink \"$script_file\")\n+  cd \"$(dirname \"$script_file\")\" || exit 1\n+  script_file=$(pwd)/$(basename \"$script_file\")\n+done\n+\n+parent_script_dir=\"$( (cd \"$( dirname \"${script_file}\" )/..\" && pwd -P) )\"\n+cd \"$WORKING_DIR\" || exit 1\n \n # establish PXF_HOME and global vars used by all commands\n-if [[ -z $PXF_HOME ]]; then\n-    export PXF_HOME=$parent_script_dir\n-fi\n+[[ -z \"$PXF_HOME\" ]] && export PXF_HOME=$parent_script_dir\n+identity=\"pxf-service\"\n+[[ -n \"$APP_NAME\" ]] && identity=\"$APP_NAME\"\n+\n+[[ -z \"$STOP_WAIT_TIME\" ]] && STOP_WAIT_TIME=\"60\"\n+\n+jarfile=$(find \"${PXF_HOME}/server/\" -name \"pxf-service-*.jar\" -type f)\n+set_env_script=${PXF_HOME}/bin/setenv.sh\n default_env_script=${PXF_HOME}/conf/pxf-env-default.sh\n-tomcat_root=${PXF_HOME}/apache-tomcat\n-tomcat_templates=${PXF_HOME}/templates/tomcat\n-instance=${PXF_HOME}/pxf-service\n+server_templates=${PXF_HOME}/templates/server-templates/\n \n SED_OPTS=(-i)\n if [[ $OSTYPE == \"darwin\"* ]]; then\n     SED_OPTS+=(\"\")\n fi\n SED_OPTS+=(-e)\n \n+# ANSI Colors\n+echoRed() { echo $'\\e[0;31m'\"$1\"$'\\e[0m'; }\n+echoGreen() { echo $'\\e[0;32m'\"$1\"$'\\e[0m'; }\n+echoYellow() { echo $'\\e[0;33m'\"$1\"$'\\e[0m'; }\n+\n function validate_user()\n {\n-    # make sure current user is not root\n-    if (( EUID == 0 )); then\n-        fail 'Cannot run as root user'\n+    # shellcheck disable=SC2012\n+    [[ $(id -u) == \"0\" ]] && run_user=$(ls -ld \"$jarfile\" | awk '{print $3}')\n+\n+    # Run as user specified in RUN_AS_USER\n+    if [[ -n \"$RUN_AS_USER\" ]]; then\n+        id -u \"$RUN_AS_USER\" &> /dev/null || {\n+            echoRed \"Cannot run as '$RUN_AS_USER': no such user\"\n+            exit 2\n+        }\n+        [[ $(id -u) == 0 ]] || {\n+            echoRed \"Cannot run as '$RUN_AS_USER': current user is not root\"\n+            exit 4\n+        }\n+        run_user=\"$RUN_AS_USER\"\n     fi\n+\n+    # make sure run_user is not root\n+    [[ -n ${run_user} && $(id -u \"${run_user}\") == \"0\" ]] && { fail \"Cannot run as root user. This is considered insecure.\"; }\n }\n \n function confirm_with_user()\n {\n-    echo '*****************************************************************************'\n-    echo '* PXF_CONF variable is not defined, using default location'\n-    echo \"* Using ${PXF_CONF} for user configurations\"\n-    echo '* WARNING: using this directory is not recommended for production deployments'\n-    echo '*****************************************************************************'\n+    echoGreen  '*****************************************************************************'\n+    echoGreen  '* The PXF_CONF variable is not defined, using default location'\n+    echoGreen  \"* Using ${PXF_CONF} for user configurations\"\n+    echoYellow '* WARNING: using this directory is not recommended for production deployments'\n+    echoGreen  '*****************************************************************************'\n \n     read -rp 'Do you want to proceed? [Y]: ' answer\n     answer=${answer:-'Y'}\n     case ${answer:0:1} in\n         y|Y)\n-            echo 'Proceeding with the initialization'\n+            echoGreen 'Proceeding with the initialization'\n         ;;\n         *)\n-            echo 'Initialization aborted'\n+            echoYellow 'Initialization aborted'", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MzI4Mg==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423653282", "bodyText": "right. I think we are doing that. However in this case, a user aborted action is not an error IMO.", "author": "frankgh", "createdAt": "2020-05-12T11:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMzA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMzg4MA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423403880", "bodyText": "another new feature of auto-discovery of java ...", "author": "denalex", "createdAt": "2020-05-12T01:01:54Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -104,158 +140,126 @@ function getEnvironment()\n     # we may have just overridden the user's intended JAVA_HOME\n     # by sourcing PXF_CONF/conf/pxf-env.sh\n     [[ ${PRESERVE_JAVA_HOME} == true ]] && JAVA_HOME=${USER_SPECIFIED_JAVA_HOME}\n+    pid_file=\"$PXF_RUNDIR/${identity}.pid\"\n }\n \n function checkJavaHome()\n {\n-    # validate JAVA_HOME\n-    if [[ ! -x ${JAVA_HOME}/bin/java ]]; then\n+    # Find Java\n+    if [[ -n \"$JAVA_HOME\" ]] && [[ -x \"$JAVA_HOME/bin/java\" ]]; then\n+        javaexe=\"$JAVA_HOME/bin/java\"\n+    elif type -p java > /dev/null 2>&1; then\n+        javaexe=$(type -p java)\n+    elif [[ -x \"/usr/bin/java\" ]];  then\n+        javaexe=\"/usr/bin/java\"", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1MzU0Mw==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423653543", "bodyText": "from the boot script :)", "author": "frankgh", "createdAt": "2020-05-12T11:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwMzg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNDI4Nw==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423404287", "bodyText": "can we avoid doing run-user features for now ?", "author": "denalex", "createdAt": "2020-05-12T01:03:30Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -104,158 +140,126 @@ function getEnvironment()\n     # we may have just overridden the user's intended JAVA_HOME\n     # by sourcing PXF_CONF/conf/pxf-env.sh\n     [[ ${PRESERVE_JAVA_HOME} == true ]] && JAVA_HOME=${USER_SPECIFIED_JAVA_HOME}\n+    pid_file=\"$PXF_RUNDIR/${identity}.pid\"\n }\n \n function checkJavaHome()\n {\n-    # validate JAVA_HOME\n-    if [[ ! -x ${JAVA_HOME}/bin/java ]]; then\n+    # Find Java\n+    if [[ -n \"$JAVA_HOME\" ]] && [[ -x \"$JAVA_HOME/bin/java\" ]]; then\n+        javaexe=\"$JAVA_HOME/bin/java\"\n+    elif type -p java > /dev/null 2>&1; then\n+        javaexe=$(type -p java)\n+    elif [[ -x \"/usr/bin/java\" ]];  then\n+        javaexe=\"/usr/bin/java\"\n+    else\n         fail \"\\$JAVA_HOME=$JAVA_HOME is invalid. Set \\$JAVA_HOME in your environment before initializing PXF.\"\n     fi\n }\n \n # print error message and return with error code\n function fail()\n {\n-    echo \"ERROR: $1\"\n+    echoRed \"ERROR: $1\"\n     exit 1\n }\n \n #\n-# createInstance creates a tomcat instance and\n-# configures based on pre-configured template files.\n+# configureTemplates configures based on pre-configured template files.\n #\n-function createInstance()\n+function configureTemplates()\n {\n-    mkdir -p \"$instance\"\n-    if ! cp -r \"$tomcat_root\"/* \"$instance\"; then\n-        echo 'ERROR: instance creation failed'\n-        return 1\n-    fi\n-\n-    chmod 700 \"$instance\"\n-\n     # copy configuration files into instance\n-    cp \"$tomcat_templates\"/bin/{kill-pxf,setenv,catalina}.sh \"${instance}/bin\"\n-    cp \"$tomcat_templates\"/conf/logging.properties \"${instance}/conf\"\n-\n-    return 0\n-}\n-\n-#\n-# deployWebapp adds the pxf-webapp to the new instance's webapps folder\n-# and the custom loader to the instance's lib directory\n-#\n-function deployWebapp()\n-{\n-    cp \"${PXF_HOME}/lib/pxf.war\" \"${instance}/webapps\" || return 1\n-    cp \"$PXF_HOME\"/lib/pxf-service-*[0-9].jar \"${instance}/lib\" || return 1\n-\n+    cp \"$server_templates\"/bin/{kill-pxf,setenv}.sh \"${parent_script_dir}/bin\"\n+    if [[ -n \"$run_user\" ]]; then\n+      chown \"$run_user\" \"${parent_script_dir}/bin/kill-pxf.sh\"\n+      chown \"$run_user\" \"${parent_script_dir}/bin/setenv.sh\"", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNTA0Ng==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423405046", "bodyText": "can we tell them the location of the log file to check in ?", "author": "denalex", "createdAt": "2020-05-12T01:06:09Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -104,158 +140,126 @@ function getEnvironment()\n     # we may have just overridden the user's intended JAVA_HOME\n     # by sourcing PXF_CONF/conf/pxf-env.sh\n     [[ ${PRESERVE_JAVA_HOME} == true ]] && JAVA_HOME=${USER_SPECIFIED_JAVA_HOME}\n+    pid_file=\"$PXF_RUNDIR/${identity}.pid\"\n }\n \n function checkJavaHome()\n {\n-    # validate JAVA_HOME\n-    if [[ ! -x ${JAVA_HOME}/bin/java ]]; then\n+    # Find Java\n+    if [[ -n \"$JAVA_HOME\" ]] && [[ -x \"$JAVA_HOME/bin/java\" ]]; then\n+        javaexe=\"$JAVA_HOME/bin/java\"\n+    elif type -p java > /dev/null 2>&1; then\n+        javaexe=$(type -p java)\n+    elif [[ -x \"/usr/bin/java\" ]];  then\n+        javaexe=\"/usr/bin/java\"\n+    else\n         fail \"\\$JAVA_HOME=$JAVA_HOME is invalid. Set \\$JAVA_HOME in your environment before initializing PXF.\"\n     fi\n }\n \n # print error message and return with error code\n function fail()\n {\n-    echo \"ERROR: $1\"\n+    echoRed \"ERROR: $1\"\n     exit 1\n }\n \n #\n-# createInstance creates a tomcat instance and\n-# configures based on pre-configured template files.\n+# configureTemplates configures based on pre-configured template files.\n #\n-function createInstance()\n+function configureTemplates()\n {\n-    mkdir -p \"$instance\"\n-    if ! cp -r \"$tomcat_root\"/* \"$instance\"; then\n-        echo 'ERROR: instance creation failed'\n-        return 1\n-    fi\n-\n-    chmod 700 \"$instance\"\n-\n     # copy configuration files into instance\n-    cp \"$tomcat_templates\"/bin/{kill-pxf,setenv,catalina}.sh \"${instance}/bin\"\n-    cp \"$tomcat_templates\"/conf/logging.properties \"${instance}/conf\"\n-\n-    return 0\n-}\n-\n-#\n-# deployWebapp adds the pxf-webapp to the new instance's webapps folder\n-# and the custom loader to the instance's lib directory\n-#\n-function deployWebapp()\n-{\n-    cp \"${PXF_HOME}/lib/pxf.war\" \"${instance}/webapps\" || return 1\n-    cp \"$PXF_HOME\"/lib/pxf-service-*[0-9].jar \"${instance}/lib\" || return 1\n-\n+    cp \"$server_templates\"/bin/{kill-pxf,setenv}.sh \"${parent_script_dir}/bin\"\n+    if [[ -n \"$run_user\" ]]; then\n+      chown \"$run_user\" \"${parent_script_dir}/bin/kill-pxf.sh\"\n+      chown \"$run_user\" \"${parent_script_dir}/bin/setenv.sh\"\n+    fi\n     return 0\n }\n \n #\n-# waitForTomcat waits for tomcat to finish loading\n+# waitForSpringBoot waits for spring boot to finish loading\n # for given attempts number.\n #\n-function waitForTomcat()\n+function waitForSpringBoot()\n {\n     attempts=0\n     max_attempts=$1 # number of attempts to connect\n+    echo_after_attempts=$2 # only start echoing after this number of attempts\n     sleep_time=1 # sleep 1 second between attempts\n \n-    # wait until tomcat is up:\n-    sleep 2\n-    echo 'Checking if tomcat is up and running...'\n-    until $curl --silent --connect-timeout 1 -I \"http://localhost:$PXF_PORT\" | grep 'PXF Server'; do\n+    # wait until spring boot is up:\n+    echoYellow 'Checking if PXF is up and running...'\n+    until $curl --silent --connect-timeout 1 -I \"http://localhost:$PXF_PORT\" | grep 'PXF Server' > /dev/null; do\n         if (( ++attempts == max_attempts )); then\n-            echo 'ERROR: PXF is down - tomcat is not running'\n+            echoRed 'ERROR: PXF is down - the application is not running'\n             return 1\n         fi\n-        echo \"tomcat not responding, re-trying after $sleep_time second (attempt number ${attempts})\"\n+        if (( attempts >= echo_after_attempts )); then\n+            echoYellow \"PXF not responding, re-trying after $sleep_time second (attempt number ${attempts})\"\n+        fi\n         sleep $sleep_time\n     done\n \n     return 0\n }\n \n #\n-# checkWebapp checks if tomcat is up for $1 attempts and then\n+# checkWebapp checks if PXF is up for $1 attempts and then\n # verifies PXF webapp is functional\n #\n function checkWebapp()\n {\n-    waitForTomcat \"$1\" || return 1\n+    waitForSpringBoot \"$1\" \"$2\" || return 1\n \n-    echo 'Checking if PXF webapp is up and running...'\n-    curlResponse=$($curl -s \"http://localhost:${PXF_PORT}/pxf/v0\")\n-    expectedResponse='Wrong version v0, supported version is v[0-9]+'\n-\n-    if [[ $curlResponse =~ $expectedResponse ]]; then\n-        echo \"PXF webapp is listening on port $PXF_PORT\"\n-        return 0\n-    fi\n+    curlResponse=$($curl -s \"http://localhost:${PXF_PORT}/actuator/health\")\n+    expectedResponse='{\"status\":\"UP\"}'\n \n-    echo 'ERROR: PXF webapp is inaccessible but tomcat is up. Check logs for more information'\n-    return 1\n+    [[ $curlResponse == $expectedResponse ]] || fail 'PXF is inaccessible. Check logs for more information'", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NDc3MQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423654771", "bodyText": "yes!", "author": "frankgh", "createdAt": "2020-05-12T11:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNTA0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNjU4NQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423406585", "bodyText": "why do we need set_env_script ? Tomcat used to unset all variables, we are not doing it here, right ?", "author": "denalex", "createdAt": "2020-05-12T01:12:22Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -400,16 +417,39 @@ function editPxfEnvSh()\n #\n function doStart()\n {\n-    local flags=()\n     getEnvironment\n-    checkJavaHome\n-    checkInstance\n     checkPxfConf\n+    checkJavaHome\n     warnUserEnvScript\n-    [[ $PXF_DEBUG == true ]] && flags+=(jpda)\n-    flags+=(start)\n-    \"${instance}/bin/catalina.sh\" \"${flags[@]}\" || return 1\n-    checkWebapp 300 || return 1\n+    do_start\n+}\n+\n+function do_start() {\n+    if [[ -f \"$pid_file\" ]]; then\n+        pid=$(cat \"$pid_file\")\n+        isRunning \"$pid\" && { echoYellow \"PXF is already running [$pid]\"; return 0; }\n+    fi\n+\n+    [[ -f $set_env_script ]] && source \"$set_env_script\"", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNjc4Ng==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423406786", "bodyText": "8000 is a busy port, maybe choose some other one", "author": "denalex", "createdAt": "2020-05-12T01:13:03Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -400,16 +417,39 @@ function editPxfEnvSh()\n #\n function doStart()\n {\n-    local flags=()\n     getEnvironment\n-    checkJavaHome\n-    checkInstance\n     checkPxfConf\n+    checkJavaHome\n     warnUserEnvScript\n-    [[ $PXF_DEBUG == true ]] && flags+=(jpda)\n-    flags+=(start)\n-    \"${instance}/bin/catalina.sh\" \"${flags[@]}\" || return 1\n-    checkWebapp 300 || return 1\n+    do_start\n+}\n+\n+function do_start() {\n+    if [[ -f \"$pid_file\" ]]; then\n+        pid=$(cat \"$pid_file\")\n+        isRunning \"$pid\" && { echoYellow \"PXF is already running [$pid]\"; return 0; }\n+    fi\n+\n+    [[ -f $set_env_script ]] && source \"$set_env_script\"\n+\n+    local arguments=(-Dsun.misc.URLClassPath.disableJarChecking=true \"${JAVA_OPTS[@]}\" -jar \"$jarfile\" $RUN_ARGS)\n+    [[ $PXF_DEBUG == true ]] && arguments+=(-Dagentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000)", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY0NzQ5OQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423647499", "bodyText": "this was mostly for backwards compatibility with our current setup, but we can change it.", "author": "frankgh", "createdAt": "2020-05-12T11:03:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNjc4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4OTI0NQ==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423889245", "bodyText": "2020", "author": "frankgh", "createdAt": "2020-05-12T16:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNjc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNjkzNw==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423406937", "bodyText": "let's not do this , please", "author": "denalex", "createdAt": "2020-05-12T01:13:37Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -400,16 +417,39 @@ function editPxfEnvSh()\n #\n function doStart()\n {\n-    local flags=()\n     getEnvironment\n-    checkJavaHome\n-    checkInstance\n     checkPxfConf\n+    checkJavaHome\n     warnUserEnvScript\n-    [[ $PXF_DEBUG == true ]] && flags+=(jpda)\n-    flags+=(start)\n-    \"${instance}/bin/catalina.sh\" \"${flags[@]}\" || return 1\n-    checkWebapp 300 || return 1\n+    do_start\n+}\n+\n+function do_start() {\n+    if [[ -f \"$pid_file\" ]]; then\n+        pid=$(cat \"$pid_file\")\n+        isRunning \"$pid\" && { echoYellow \"PXF is already running [$pid]\"; return 0; }\n+    fi\n+\n+    [[ -f $set_env_script ]] && source \"$set_env_script\"\n+\n+    local arguments=(-Dsun.misc.URLClassPath.disableJarChecking=true \"${JAVA_OPTS[@]}\" -jar \"$jarfile\" $RUN_ARGS)\n+    [[ $PXF_DEBUG == true ]] && arguments+=(-Dagentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000)\n+\n+    working_dir=$(dirname \"$jarfile\")\n+    pushd \"$working_dir\" > /dev/null || exit 1\n+    checkPermissions || return $?\n+    if [[ -n \"$run_user\" ]]; then\n+      su -s /bin/sh -c \"$javaexe $(printf \"\\\"%s\\\" \" \"${arguments[@]}\") >> \\\"/dev/null\\\" 2>&1 & echo \\$!\" \"$run_user\" > \"$pid_file\"", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwNzIxNw==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423407217", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                echoGreen \"PXF started [$pid]. Listening on port $PXF_PORT\";\n          \n          \n            \n                echoGreen \"PXF started [pid=$pid]. Listening on port $PXF_PORT\";", "author": "denalex", "createdAt": "2020-05-12T01:14:50Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -400,16 +417,39 @@ function editPxfEnvSh()\n #\n function doStart()\n {\n-    local flags=()\n     getEnvironment\n-    checkJavaHome\n-    checkInstance\n     checkPxfConf\n+    checkJavaHome\n     warnUserEnvScript\n-    [[ $PXF_DEBUG == true ]] && flags+=(jpda)\n-    flags+=(start)\n-    \"${instance}/bin/catalina.sh\" \"${flags[@]}\" || return 1\n-    checkWebapp 300 || return 1\n+    do_start\n+}\n+\n+function do_start() {\n+    if [[ -f \"$pid_file\" ]]; then\n+        pid=$(cat \"$pid_file\")\n+        isRunning \"$pid\" && { echoYellow \"PXF is already running [$pid]\"; return 0; }\n+    fi\n+\n+    [[ -f $set_env_script ]] && source \"$set_env_script\"\n+\n+    local arguments=(-Dsun.misc.URLClassPath.disableJarChecking=true \"${JAVA_OPTS[@]}\" -jar \"$jarfile\" $RUN_ARGS)\n+    [[ $PXF_DEBUG == true ]] && arguments+=(-Dagentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000)\n+\n+    working_dir=$(dirname \"$jarfile\")\n+    pushd \"$working_dir\" > /dev/null || exit 1\n+    checkPermissions || return $?\n+    if [[ -n \"$run_user\" ]]; then\n+      su -s /bin/sh -c \"$javaexe $(printf \"\\\"%s\\\" \" \"${arguments[@]}\") >> \\\"/dev/null\\\" 2>&1 & echo \\$!\" \"$run_user\" > \"$pid_file\"\n+      pid=$(cat \"$pid_file\")\n+    else\n+      \"$javaexe\" \"${arguments[@]}\" >> /dev/null 2>&1 &\n+      pid=$!\n+      disown $pid\n+      echo \"$pid\" > \"$pid_file\"\n+    fi\n+    [[ -z $pid ]] && fail \"Failed to start PXF\"\n+    checkWebapp 300 10 || return 1\n+    echoGreen \"PXF started [$pid]. Listening on port $PXF_PORT\";", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzQwODQ1OA==", "url": "https://github.com/greenplum-db/pxf/pull/351#discussion_r423408458", "bodyText": "I am not sure we need to thrive for these multi-level logic one-liners, maybe there's a better code organization", "author": "denalex", "createdAt": "2020-05-12T01:18:59Z", "path": "server/pxf-service/src/scripts/pxf-service", "diffHunk": "@@ -422,21 +462,51 @@ function doStart()\n function doStop()\n {\n     getEnvironment\n-    checkJavaHome\n-    checkInstance\n     checkPxfConf\n+    checkJavaHome\n     warnUserEnvScript\n-    \"${instance}/bin/catalina.sh\" stop -force || return 1\n+\n+    working_dir=$(dirname \"$jarfile\")\n+    pushd \"$working_dir\" > /dev/null\n+    [[ -f $pid_file ]] || { echoYellow \"Not running (pidfile not found). Is PXF running? Stop aborted.\"; return 0; }\n+    pid=$(cat \"$pid_file\")\n+    isRunning \"$pid\" || { echoYellow \"Not running (process ${pid}). Removing stale pid file.\"; rm -f \"$pid_file\"; return 0; }\n+\n+    echoYellow \"Stopping PXF [$pid]...\"\n+\n+    # first try endpoint (assume it might be disabled)\n+    if $curl --max-time 5 --silent -X POST \"localhost:$PXF_PORT/actuator/shutdown\" | grep \"Shutting down, bye...\" > /dev/null; then\n+      for i in $(seq 1 $STOP_WAIT_TIME); do\n+        isRunning \"$pid\" || { echoGreen \"PXF stopped [$pid]\"; return 0; }\n+        sleep 1\n+      done\n+    fi\n+\n+    # second try a nice kill and if that doesn't work force kill\n+    do_stop \"$pid\" \"$pid_file\" || do_stop \"$pid\" \"$pid_file\" \"-f\"\n+}\n+\n+do_stop() {\n+  local killcmd=(kill)\n+  [[ $3 == -f ]] && killcmd+=(-9)\n+  killcmd+=(\"$1\")\n+  \"${killcmd[@]}\" &> /dev/null || { echoRed \"Unable to terminate process $1\"; return 1; }\n+  for i in $(seq 1 $STOP_WAIT_TIME); do\n+    isRunning \"$1\" || { echoGreen \"PXF stopped [$1]\"; rm -f \"$2\"; return 0; }\n+    [[ $i -eq STOP_WAIT_TIME/2 ]] && \"${killcmd[@]}\" &> /dev/null\n+    sleep 1\n+  done\n+  echoRed \"Unable to terminate process $1\";\n+  return 1;\n }\n \n function doStatus()\n {\n     getEnvironment\n     checkJavaHome\n-    checkInstance\n     checkPxfConf\n     warnUserEnvScript\n-    checkWebapp 1 || return 1\n+    checkWebapp 1 0 && { echoGreen \"PXF is listening on port $PXF_PORT\"; } || return 1", "originalCommit": "6562e5aa83ed9f7c5e9b53734fb898bb56798f58", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d0842f8559b0c7414601dd8629831ac6202138cb", "url": "https://github.com/greenplum-db/pxf/commit/d0842f8559b0c7414601dd8629831ac6202138cb", "message": "Address PR feedback", "committedDate": "2020-05-12T17:23:38Z", "type": "commit"}, {"oid": "99b849843a33850bbb59f54855b4da0208b67026", "url": "https://github.com/greenplum-db/pxf/commit/99b849843a33850bbb59f54855b4da0208b67026", "message": "Remove RUN_AS_USER feature", "committedDate": "2020-05-12T17:23:59Z", "type": "commit"}, {"oid": "9dab710ec1140de57bd0b9c127e6438b8bcac357", "url": "https://github.com/greenplum-db/pxf/commit/9dab710ec1140de57bd0b9c127e6438b8bcac357", "message": "Fix reset. Remove version from endpoint (we can add it later if we need it)", "committedDate": "2020-05-12T18:14:37Z", "type": "commit"}, {"oid": "1407b9694a841635f65cad4acc86eca7a18b4588", "url": "https://github.com/greenplum-db/pxf/commit/1407b9694a841635f65cad4acc86eca7a18b4588", "message": "Add version dynamically to pxf-service file", "committedDate": "2020-05-12T21:11:14Z", "type": "commit"}]}