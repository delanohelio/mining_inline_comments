{"pr_number": 473, "pr_title": "docs - pxf supports accessing files on a network file system", "pr_createdAt": "2020-10-27T20:45:36Z", "pr_url": "https://github.com/greenplum-db/pxf/pull/473", "timeline": [{"oid": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "url": "https://github.com/greenplum-db/pxf/commit/8f42cc55ecc5ca46e46765389eef4edc06508a05", "message": "docs - pxf supports accessing files on a network file system", "committedDate": "2020-10-27T20:32:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0MTc5MA==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513641790", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            PXF includes a template file named `pxf-site.xml` for pxf-specific configuration parameters. You can use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configurations, or to specify a base directory for file access.\n          \n          \n            \n            PXF includes a template file named `pxf-site.xml` for pxf-specific configuration parameters. You can use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for server configurations, or to specify a base directory for file access.", "author": "denalex", "createdAt": "2020-10-28T17:43:12Z", "path": "docs/content/cfg_server.html.md.erb", "diffHunk": "@@ -84,17 +84,20 @@ To configure a PXF server, refer to the connector configuration topic:\n - To configure a PXF server for Hadoop, refer to [Configuring PXF Hadoop Connectors ](client_instcfg.html).\n - To configure a PXF server for an  object store, refer to [Configuring Connectors to Minio and S3 Object Stores](s3_objstore_cfg.html) and [Configuring Connectors to Azure and Google Cloud Storage Object Stores](objstore_cfg.html).\n - To configure a PXF JDBC server, refer to [Configuring the JDBC Connector ](jdbc_cfg.html).\n+- [Configuring a PXF Network File System Server](nfs_pxf.html#ex_fscfg) describes the process of configuring a PXF server for network file system access.\n \n-## <a id=\"pxf-site\"></a>About Kerberos and User Impersonation Configuration (pxf-site.xml)\n+## <a id=\"pxf-site\"></a>About the pxf-site.xml Configuration File\n \n-PXF includes a template file named `pxf-site.xml`. You use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configuration.\n+PXF includes a template file named `pxf-site.xml` for pxf-specific configuration parameters. You can use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configurations, or to specify a base directory for file access.", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0Mzg5OA==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513643898", "bodyText": "not sure what's the proper English, but in my reading \"restrict access to a specific directory\" means user can NOT access that directory because the access has been restricted. In PXF case, we are allowing access ONLY to that directory (and subdirectories) and restricting (actually denying) access to anything else.", "author": "denalex", "createdAt": "2020-10-28T17:46:07Z", "path": "docs/content/cfg_server.html.md.erb", "diffHunk": "@@ -84,17 +84,20 @@ To configure a PXF server, refer to the connector configuration topic:\n - To configure a PXF server for Hadoop, refer to [Configuring PXF Hadoop Connectors ](client_instcfg.html).\n - To configure a PXF server for an  object store, refer to [Configuring Connectors to Minio and S3 Object Stores](s3_objstore_cfg.html) and [Configuring Connectors to Azure and Google Cloud Storage Object Stores](objstore_cfg.html).\n - To configure a PXF JDBC server, refer to [Configuring the JDBC Connector ](jdbc_cfg.html).\n+- [Configuring a PXF Network File System Server](nfs_pxf.html#ex_fscfg) describes the process of configuring a PXF server for network file system access.\n \n-## <a id=\"pxf-site\"></a>About Kerberos and User Impersonation Configuration (pxf-site.xml)\n+## <a id=\"pxf-site\"></a>About the pxf-site.xml Configuration File\n \n-PXF includes a template file named `pxf-site.xml`. You use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configuration.\n+PXF includes a template file named `pxf-site.xml` for pxf-specific configuration parameters. You can use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configurations, or to specify a base directory for file access.\n \n-<div class=\"note\">The settings in this file apply only to Hadoop and JDBC server configurations; they do not apply to object store server configurations.</div>\n+<div class=\"note\">The Kerberos and user impersonation settings in this file apply only to Hadoop and JDBC server configurations; they do not apply to file system or object store server configurations.</div>\n \n You configure properties in the `pxf-site.xml` file for a PXF server when one or more of the following conditions hold:\n \n - The remote Hadoop system utilizes Kerberos authentication.\n - You want to enable/disable user impersonation on the remote Hadoop or external database system.\n+- You will access a network file system with the server configuration.\n+- You will access a remote Hadoop or object store file system with the server configuration, and want to restrict a user's access to a specific directory.", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0ODM5Ng==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513648396", "bodyText": "also file:csv", "author": "denalex", "createdAt": "2020-10-28T17:52:35Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY0OTUwNw==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513649507", "bodyText": "it needs to be mounted in the same local mount point on all hosts", "author": "denalex", "createdAt": "2020-10-28T17:54:16Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted on every Greenplum Database segment host.", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1MzIyMw==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513653223", "bodyText": "id=\"jdbc_example_postgresql\" -- seems like an incorrect link name ?", "author": "denalex", "createdAt": "2020-10-28T17:59:39Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"jdbc_example_postgresql\"></a>Example: Reading From and Writing to a CSV File on a Network File System", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1Mzg1Mg==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513653852", "bodyText": "writable table would not reference the specific file, only the directory", "author": "denalex", "createdAt": "2020-10-28T18:00:35Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"jdbc_example_postgresql\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the CSV file, and read the data.\n+- Create a PXF writable external table that references the CSV file, and write some data.", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NDQxMQ==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513654411", "bodyText": "Jdbc in link name", "author": "denalex", "createdAt": "2020-10-28T18:01:23Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"jdbc_example_postgresql\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the CSV file, and read the data.\n+- Create a PXF writable external table that references the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_readjdbc\"></a>Read Data", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTI0NA==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513655244", "bodyText": "Jdbc", "author": "denalex", "createdAt": "2020-10-28T18:02:24Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"jdbc_example_postgresql\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the CSV file, and read the data.\n+- Create a PXF writable external table that references the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_readjdbc\"></a>Read Data\n+\n+Perform the following procedure to create a PXF external table that references the `ex1` directory that you created in a previous section, and then read the data in the `somedata.csv` file in that directory:\n+\n+1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE EXTERNAL TABLE pxf_csvfromnfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n+                FORMAT 'CSV';\n+    ```\n+\n+    Because the `nfssrvcfg` server configuration `pxf.fs.basePath` property value is `/mnt/exdata/pxffs`, PXF constructs the path `/mnt/extdata/pxffs/ex1` to read the file.\n+\n+2. Display all rows of the `pxf_csvfromnfs` table:\n+\n+    ``` sql\n+    gpadmin=# SELECT * FROM pxf_csvfromnfs ORDER_BY num_orders DESC;\n+     location  | month | num_orders | total_sales \n+    -----------+-------+------------+-------------\n+     Beijing   | Jul   |        411 |    11600.67\n+     Bangalore | May   |        317 |     8936.99\n+     Prague    | Jan   |        101 |     4875.33\n+     Rome      | Mar   |         87 |     1557.39\n+    (4 rows)\n+    ```\n+\n+### <a id=\"ex_writejdbc\"></a>Write Data and Read Again", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTYwOQ==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513655609", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create a writable PXF external table that references `ex1` and that specifies the `file:test` profile. For example:\n          \n          \n            \n            1. Create a writable PXF external table that references `ex1` and that specifies the `file:text` profile. For example:", "author": "denalex", "createdAt": "2020-10-28T18:02:59Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"jdbc_example_postgresql\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the CSV file, and read the data.\n+- Create a PXF writable external table that references the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_readjdbc\"></a>Read Data\n+\n+Perform the following procedure to create a PXF external table that references the `ex1` directory that you created in a previous section, and then read the data in the `somedata.csv` file in that directory:\n+\n+1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE EXTERNAL TABLE pxf_csvfromnfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n+                FORMAT 'CSV';\n+    ```\n+\n+    Because the `nfssrvcfg` server configuration `pxf.fs.basePath` property value is `/mnt/exdata/pxffs`, PXF constructs the path `/mnt/extdata/pxffs/ex1` to read the file.\n+\n+2. Display all rows of the `pxf_csvfromnfs` table:\n+\n+    ``` sql\n+    gpadmin=# SELECT * FROM pxf_csvfromnfs ORDER_BY num_orders DESC;\n+     location  | month | num_orders | total_sales \n+    -----------+-------+------------+-------------\n+     Beijing   | Jul   |        411 |    11600.67\n+     Bangalore | May   |        317 |     8936.99\n+     Prague    | Jan   |        101 |     4875.33\n+     Rome      | Mar   |         87 |     1557.39\n+    (4 rows)\n+    ```\n+\n+### <a id=\"ex_writejdbc\"></a>Write Data and Read Again\n+\n+Perform the following procedure to insert some data into the `ex1` directory and then read the data again. You must create a new external table for the write operation.\n+\n+1. Create a writable PXF external table that references `ex1` and that specifies the `file:test` profile. For example:", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzcyOTY5Nw==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513729697", "bodyText": "nice catch, alex.  thanks.", "author": "lisakowen", "createdAt": "2020-10-28T20:10:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NTYwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NjU2OA==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513656568", "bodyText": "table name is inconsistent with read case: pxf_csvfromnfs I suggest we use pxf_read_nfs and pxf_write_nfs accordingly", "author": "denalex", "createdAt": "2020-10-28T18:04:28Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"jdbc_example_postgresql\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the CSV file, and read the data.\n+- Create a PXF writable external table that references the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_readjdbc\"></a>Read Data\n+\n+Perform the following procedure to create a PXF external table that references the `ex1` directory that you created in a previous section, and then read the data in the `somedata.csv` file in that directory:\n+\n+1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE EXTERNAL TABLE pxf_csvfromnfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n+                FORMAT 'CSV';\n+    ```\n+\n+    Because the `nfssrvcfg` server configuration `pxf.fs.basePath` property value is `/mnt/exdata/pxffs`, PXF constructs the path `/mnt/extdata/pxffs/ex1` to read the file.\n+\n+2. Display all rows of the `pxf_csvfromnfs` table:\n+\n+    ``` sql\n+    gpadmin=# SELECT * FROM pxf_csvfromnfs ORDER_BY num_orders DESC;\n+     location  | month | num_orders | total_sales \n+    -----------+-------+------------+-------------\n+     Beijing   | Jul   |        411 |    11600.67\n+     Bangalore | May   |        317 |     8936.99\n+     Prague    | Jan   |        101 |     4875.33\n+     Rome      | Mar   |         87 |     1557.39\n+    (4 rows)\n+    ```\n+\n+### <a id=\"ex_writejdbc\"></a>Write Data and Read Again\n+\n+Perform the following procedure to insert some data into the `ex1` directory and then read the data again. You must create a new external table for the write operation.\n+\n+1. Create a writable PXF external table that references `ex1` and that specifies the `file:test` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE WRITABLE EXTERNAL TABLE pxf_writeto_csvinnfs(location text, month text, num_orders int, total_sales float8)", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY1NzYwNg==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513657606", "bodyText": "we probably need to mention the magic here, that more files are created in that directory when we write and when we read again we read the previous files and the new files, thus getting the whole dataset with newly inserted rows.", "author": "denalex", "createdAt": "2020-10-28T18:06:04Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"jdbc_example_postgresql\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the CSV file, and read the data.\n+- Create a PXF writable external table that references the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_readjdbc\"></a>Read Data\n+\n+Perform the following procedure to create a PXF external table that references the `ex1` directory that you created in a previous section, and then read the data in the `somedata.csv` file in that directory:\n+\n+1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE EXTERNAL TABLE pxf_csvfromnfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n+                FORMAT 'CSV';\n+    ```\n+\n+    Because the `nfssrvcfg` server configuration `pxf.fs.basePath` property value is `/mnt/exdata/pxffs`, PXF constructs the path `/mnt/extdata/pxffs/ex1` to read the file.\n+\n+2. Display all rows of the `pxf_csvfromnfs` table:\n+\n+    ``` sql\n+    gpadmin=# SELECT * FROM pxf_csvfromnfs ORDER_BY num_orders DESC;\n+     location  | month | num_orders | total_sales \n+    -----------+-------+------------+-------------\n+     Beijing   | Jul   |        411 |    11600.67\n+     Bangalore | May   |        317 |     8936.99\n+     Prague    | Jan   |        101 |     4875.33\n+     Rome      | Mar   |         87 |     1557.39\n+    (4 rows)\n+    ```\n+\n+### <a id=\"ex_writejdbc\"></a>Write Data and Read Again\n+\n+Perform the following procedure to insert some data into the `ex1` directory and then read the data again. You must create a new external table for the write operation.\n+\n+1. Create a writable PXF external table that references `ex1` and that specifies the `file:test` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE WRITABLE EXTERNAL TABLE pxf_writeto_csvinnfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n+              FORMAT 'CSV' (delimiter=',');\n+    ```\n+\n+4. Insert some data into the `pxf_writeto_csvinnfs` table. For example:\n+\n+    ``` sql\n+    gpadmin=# INSERT INTO pxf_writeto_csvinnfs VALUES ( 'Frankfurt', 'Mar', 777, 3956.98 );\n+    INSERT 0 1\n+    gpadmin=# INSERT INTO pxf_writeto_csvinnfs VALUES ( 'Cleveland', 'Oct', 3812, 96645.37 );\n+    INSERT 0 1\n+    ```\n+\n+5. Use the `pxf_csvfromnfs` readable external table that you created in the previous section to view the new data you inserted into the `pxf_writeto_csvinnfs` table:\n+\n+    ``` sql\n+    gpadmin=# SELECT * FROM pxf_csvfromnfs ORDER BY num_orders DESC;\n+     location  | month | num_orders | total_sales \n+    -----------+-------+------------+-------------\n+     Cleveland | Oct   |       3812 |    96645.37\n+     Frankfurt | Mar   |        777 |     3956.98\n+     Beijing   | Jul   |        411 |    11600.67\n+     Bangalore | May   |        317 |     8936.99\n+     Prague    | Jan   |        101 |     4875.33\n+     Rome      | Mar   |         87 |     1557.39\n+    (6 rows)\n+    ```", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e87f4b46c6f4691df1534efcffaeab335bbc7c40", "url": "https://github.com/greenplum-db/pxf/commit/e87f4b46c6f4691df1534efcffaeab335bbc7c40", "message": "address some comments from alex", "committedDate": "2020-10-28T20:09:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NDY3MA==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r513574670", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            PXF includes a template file named `pxf-site.xml` for pxf-specific configuration parameters. You can use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configurations, or to specify a base directory for file access.\n          \n          \n            \n            PXF includes a template file named `pxf-site.xml` for PXF-specific configuration parameters. You can use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configurations, or to specify a base directory for file access.", "author": "frankgh", "createdAt": "2020-10-28T16:12:33Z", "path": "docs/content/cfg_server.html.md.erb", "diffHunk": "@@ -84,17 +84,20 @@ To configure a PXF server, refer to the connector configuration topic:\n - To configure a PXF server for Hadoop, refer to [Configuring PXF Hadoop Connectors ](client_instcfg.html).\n - To configure a PXF server for an  object store, refer to [Configuring Connectors to Minio and S3 Object Stores](s3_objstore_cfg.html) and [Configuring Connectors to Azure and Google Cloud Storage Object Stores](objstore_cfg.html).\n - To configure a PXF JDBC server, refer to [Configuring the JDBC Connector ](jdbc_cfg.html).\n+- [Configuring a PXF Network File System Server](nfs_pxf.html#ex_fscfg) describes the process of configuring a PXF server for network file system access.\n \n-## <a id=\"pxf-site\"></a>About Kerberos and User Impersonation Configuration (pxf-site.xml)\n+## <a id=\"pxf-site\"></a>About the pxf-site.xml Configuration File\n \n-PXF includes a template file named `pxf-site.xml`. You use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configuration.\n+PXF includes a template file named `pxf-site.xml` for pxf-specific configuration parameters. You can use the `pxf-site.xml` template file to specify Kerberos and/or user impersonation settings for a server configurations, or to specify a base directory for file access.", "originalCommit": "8f42cc55ecc5ca46e46765389eef4edc06508a05", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4NTYwMQ==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r514285601", "bodyText": "I would prefer if we don't say this is optional. I know it is optional from a technical point of view, but I would want users to know that we require this property.", "author": "frankgh", "createdAt": "2020-10-29T14:07:17Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted at the same local mount point on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |", "originalCommit": "e87f4b46c6f4691df1534efcffaeab335bbc7c40", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQxNTYzNQ==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r514415635", "bodyText": "is removing the word \"Optional;\" enough?  or is there a way we want to rephrase the description?  we identify SERVER as Optional for all profiles.", "author": "lisakowen", "createdAt": "2020-10-29T16:54:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4NTYwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4NzgxMQ==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r514287811", "bodyText": "let's use file:csv for the example since the file is CSV (even though file:csv and file:text are the same profile)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n          \n          \n            \n            1. Create a PXF external table that references `ex1` and that specifies the `file:csv` profile. For example:", "author": "frankgh", "createdAt": "2020-10-29T14:10:08Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted at the same local mount point on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"example_nfscsv\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the directory containing the CSV file, and read the data.\n+- Create a PXF writable external table that references the directory containing the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_read\"></a>Read Data\n+\n+Perform the following procedure to create a PXF external table that references the `ex1` directory that you created in a previous section, and then read the data in the `somedata.csv` file in that directory:\n+\n+1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:", "originalCommit": "e87f4b46c6f4691df1534efcffaeab335bbc7c40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4ODA2Ng==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r514288066", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n          \n          \n            \n                            LOCATION ('pxf://ex1/?PROFILE=file:csv&SERVER=nfssrvcfg')", "author": "frankgh", "createdAt": "2020-10-29T14:10:26Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted at the same local mount point on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"example_nfscsv\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the directory containing the CSV file, and read the data.\n+- Create a PXF writable external table that references the directory containing the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_read\"></a>Read Data\n+\n+Perform the following procedure to create a PXF external table that references the `ex1` directory that you created in a previous section, and then read the data in the `somedata.csv` file in that directory:\n+\n+1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE EXTERNAL TABLE pxf_read_nfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')", "originalCommit": "e87f4b46c6f4691df1534efcffaeab335bbc7c40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI4ODk1OA==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r514288958", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            1. Create a writable PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n          \n          \n            \n            1. Create a writable PXF external table that references `ex1` and that specifies the `file:csv` profile. For example:", "author": "frankgh", "createdAt": "2020-10-29T14:11:40Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted at the same local mount point on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"example_nfscsv\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the directory containing the CSV file, and read the data.\n+- Create a PXF writable external table that references the directory containing the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_read\"></a>Read Data\n+\n+Perform the following procedure to create a PXF external table that references the `ex1` directory that you created in a previous section, and then read the data in the `somedata.csv` file in that directory:\n+\n+1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE EXTERNAL TABLE pxf_read_nfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n+                FORMAT 'CSV';\n+    ```\n+\n+    Because the `nfssrvcfg` server configuration `pxf.fs.basePath` property value is `/mnt/exdata/pxffs`, PXF constructs the path `/mnt/extdata/pxffs/ex1` to read the file.\n+\n+2. Display all rows of the `pxf_read_nfs` table:\n+\n+    ``` sql\n+    gpadmin=# SELECT * FROM pxf_read_nfs ORDER_BY num_orders DESC;\n+     location  | month | num_orders | total_sales \n+    -----------+-------+------------+-------------\n+     Beijing   | Jul   |        411 |    11600.67\n+     Bangalore | May   |        317 |     8936.99\n+     Prague    | Jan   |        101 |     4875.33\n+     Rome      | Mar   |         87 |     1557.39\n+    (4 rows)\n+    ```\n+\n+### <a id=\"ex_write\"></a>Write Data and Read Again\n+\n+Perform the following procedure to insert some data into the `ex1` directory and then read the data again. You must create a new external table for the write operation.\n+\n+1. Create a writable PXF external table that references `ex1` and that specifies the `file:text` profile. For example:", "originalCommit": "e87f4b46c6f4691df1534efcffaeab335bbc7c40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI5MDc2Mw==", "url": "https://github.com/greenplum-db/pxf/pull/473#discussion_r514290763", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n          \n          \n            \n                            LOCATION ('pxf://ex1/?PROFILE=file:csv&SERVER=nfssrvcfg')", "author": "frankgh", "createdAt": "2020-10-29T14:13:58Z", "path": "docs/content/nfs_pxf.html.md.erb", "diffHunk": "@@ -0,0 +1,210 @@\n+---\n+title: Accessing Files on a Network File System with PXF\n+---\n+\n+You can use PXF to read data that resides on a network file system mounted on your Greenplum Database hosts. PXF supports reading and writing the following file types from a network file system:\n+\n+| File Type | Profile Name | Operations Supported |\n+|-------------|--------------|------------|\n+| delimited single line text | file:text | read, write |\n+| delimited text with quoted linefeeds | file:text:multi | read |\n+| Avro | file:avro | read, write |\n+| JSON | file:json | read |\n+| Parquet | file:parquet | read, write |\n+\n+PXF does not support user impersonation when you access a network file system. PXF accesses a file as the operating system user that started the PXF process, usually `gpadmin`.\n+\n+<div class=\"note\">Reading from, and writing to (where supported), a file of these types on a network file system is similar to reading/writing the file type on Hadoop.</div>\n+\n+\n+## <a id=\"prereq\"></a>Prerequisites\n+\n+Before you use PXF to access files on a network file system, ensure that:\n+\n+- You have configured and initialized PXF, and PXF is running on each Greenplum Database segment host. See [Configuring PXF](instcfg_pxf.html) for additional information.\n+- You can identify the PXF user configuration directory (`$PXF_CONF`).\n+- All files are accessible by `gpadmin` or by the operating system user that started the PXF process.\n+- The network file system is correctly mounted at the same local mount point on every Greenplum Database segment host.\n+- You can identify the mount or share point of the network file system.\n+- You have created one or more named PXF server configurations as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+## <a id=\"ex_fscfg\"></a>Configuring a PXF Network File System Server\n+\n+Before you use PXF to access a file on a network file system, you must create a server configuration and then synchronize the PXF configuration to all Greenplum hosts.  This procedure will typically be performed by the Greenplum Database administrator.\n+\n+Use the server template configuration file `$PXF_CONF/templates/pxf-site.xml` when you configure a network file system server for PXF. This template file includes the mandatory property `pxf.fs.basePath` that you configure to identify the network file system share path. PXF considers the file path that you specify in a `CREATE EXTERNAL TABLE` `LOCATION` clause that uses this server to be relative to this share path.\n+\n+PXF does not support user impersonation when you access a network file system; you must explicitly turn off user impersonation in a network file system server configuration.\n+\n+1. Log in to the Greenplum Database master node:\n+\n+    ``` shell\n+    $ ssh gpadmin@<gpmaster>\n+    ```\n+\n+2. Choose a name for the file system server. You will provide the name to Greenplum users that you choose to allow to read from or write to files on the network file system.\n+\n+    **Note**: The server name `default` is reserved.\n+\n+3. Create the `$PXF_CONF/servers/<server_name>` directory. For example, use the following command to create a file system server configuration named `nfssrvcfg`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir $PXF_CONF/servers/nfssrvcfg\n+    ````\n+\n+4. Copy the PXF `pxf-site.xml` template file to the `nfssrvcfg` server configuration directory. For example:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ cp $PXF_CONF/templates/pxf-site.xml $PXF_CONF/servers/nfssrvcfg/\n+    ```\n+\n+5. Open the template server configuration file in the editor of your choice, and uncomment and provide property values appropriate for your environment. For example, if the file system share point is the directory named `/mnt/extdata/pxffs`, uncomment and set these server properties:\n+\n+    ``` xml\n+    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <configuration>\n+    ...\n+        <property>\n+            <name>pxf.service.user.impersonation</name>\n+            <value>false</value>\n+        </property>\n+\n+        <property>\n+            <name>pxf.fs.basePath</name>\n+            <value>/mnt/extdata/pxffs</value>\n+        </property>\n+    ...\n+    </configuration>\n+    ```\n+\n+6. Save your changes and exit the editor.\n+\n+7. Synchronize the PXF server configuration to the Greenplum Database cluster:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ pxf cluster sync\n+    ``` \n+\n+## <a id=\"queryextdata\"></a>Creating the External Table\n+\n+The following syntax creates a Greenplum Database external table that references a file on a network file system. Use the appropriate `file:*` profile for the file type that you want to access.\n+\n+<pre>\n+CREATE [READABLE | WRITABLE] EXTERNAL TABLE &lt;table_name>\n+    ( &lt;column_name> &lt;data_type> [, ...] | LIKE &lt;other_table> )\n+LOCATION ('pxf://&lt;file-path>?PROFILE=file:&lt;file-type>[&SERVER=&lt;server_name>][&&lt;custom-option>=&lt;value>[...]]')\n+FORMAT '[TEXT|CSV|CUSTOM]' (&lt;formatting-properties>);\n+</pre>\n+\n+\n+The specific keywords and values used in the Greenplum Database [CREATE EXTERNAL TABLE](https://gpdb.docs.pivotal.io/latest/ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html) command are described in the table below.\n+\n+| Keyword  | Value |\n+|-------|-------------------------------------|\n+| \\<file&#8209;path\\>    | The path to a directory or file on the network file system. PXF considers this file or path as being relative to the [`pxf.fs.basePath`](cfg_server.html#pxf-fs-basepath) property value specified in \\<server_name\\>'s server configuration.  \\<file&#8209;path\\> must not specify a relative path nor include the dollar sign (`$`) character. |\n+| PROFILE    | The `PROFILE` keyword value must specify a `file:<file-type>` identified in the table above. |\n+| SERVER=\\<server_name\\>   | The named server configuration that PXF uses to access the network file system. Optional; PXF uses the `default` server if not specified. |\n+| \\<custom&#8209;option\\>=\\<value\\>  | \\<custom-option\\> is profile-specific.|\n+| FORMAT&nbsp;\\<value\\>| PXF profiles support the `TEXT`, `CSV`, and `CUSTOM` formats.  |\n+| \\<formatting&#8209;properties\\> | Formatting properties supported by the profile; for example, the `FORMATTER` or `delimiter`. |\n+\n+<div class=\"note\">The &lt;custom-option>s, FORMAT, and &lt;formatting&#8209;properties> that you specify when accessing a file on a network file system are dependent on the &lt;file-type>. Refer to the <a href=\"access_hdfs.html#hadoop_connectors\">Hadoop documentation</a> for the &lt;file-type> of interest for these settings.</div>\n+\n+## <a id=\"example_nfscsv\"></a>Example: Reading From and Writing to a CSV File on a Network File System\n+\n+This example assumes that you have configured and mounted a network file system with the share point `/mnt/extdata/pxffs` on the Greenplum Database master, standby master, and on each segment host.\n+\n+In this example, you:\n+\n+- Create a CSV file on the network file system and add data to the file.\n+- Configure a network file system server for the share point.\n+- Create a PXF readable external table that references the directory containing the CSV file, and read the data.\n+- Create a PXF writable external table that references the directory containing the CSV file, and write some data.\n+- Read from the original readable external table again.\n+\n+\n+### <a id=\"ex_create_csvfile\"></a>Create a CSV File\n+\n+1.  Create a directory (relative to the network file system share point) named `/mnt/extdata/pxffs/ex1`:\n+\n+    ``` shell\n+    gpadmin@gpmaster$ mkdir -p /mnt/extdata/pxffs/ex1\n+    ````\n+\n+2. Create a CSV file named `somedata.csv` in the directory:\n+\n+    ``` shell\n+    $ echo 'Prague,Jan,101,4875.33\n+Rome,Mar,87,1557.39\n+Bangalore,May,317,8936.99\n+Beijing,Jul,411,11600.67' > /mnt/extdata/pxffs/ex1/somedata.csv\n+    ```\n+\n+### <a id=\"ex_create_server\"></a>Create the Network File System Server\n+\n+Create a server configuration named `nfssrvcfg` with share point `/mnt/extdata/pxffs` as described in [Configuring a PXF Network File System Server](#ex_fscfg).\n+\n+\n+### <a id=\"ex_read\"></a>Read Data\n+\n+Perform the following procedure to create a PXF external table that references the `ex1` directory that you created in a previous section, and then read the data in the `somedata.csv` file in that directory:\n+\n+1. Create a PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE EXTERNAL TABLE pxf_read_nfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')\n+                FORMAT 'CSV';\n+    ```\n+\n+    Because the `nfssrvcfg` server configuration `pxf.fs.basePath` property value is `/mnt/exdata/pxffs`, PXF constructs the path `/mnt/extdata/pxffs/ex1` to read the file.\n+\n+2. Display all rows of the `pxf_read_nfs` table:\n+\n+    ``` sql\n+    gpadmin=# SELECT * FROM pxf_read_nfs ORDER_BY num_orders DESC;\n+     location  | month | num_orders | total_sales \n+    -----------+-------+------------+-------------\n+     Beijing   | Jul   |        411 |    11600.67\n+     Bangalore | May   |        317 |     8936.99\n+     Prague    | Jan   |        101 |     4875.33\n+     Rome      | Mar   |         87 |     1557.39\n+    (4 rows)\n+    ```\n+\n+### <a id=\"ex_write\"></a>Write Data and Read Again\n+\n+Perform the following procedure to insert some data into the `ex1` directory and then read the data again. You must create a new external table for the write operation.\n+\n+1. Create a writable PXF external table that references `ex1` and that specifies the `file:text` profile. For example:\n+\n+    ``` sql\n+    gpadmin=# CREATE WRITABLE EXTERNAL TABLE pxf_write_nfs(location text, month text, num_orders int, total_sales float8)\n+                LOCATION ('pxf://ex1/?PROFILE=file:text&SERVER=nfssrvcfg')", "originalCommit": "e87f4b46c6f4691df1534efcffaeab335bbc7c40", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0f5e32c9a921ad73923025b35f32c66287c1dabe", "url": "https://github.com/greenplum-db/pxf/commit/0f5e32c9a921ad73923025b35f32c66287c1dabe", "message": "note pxf actions on insert and read again", "committedDate": "2020-10-29T16:27:48Z", "type": "commit"}, {"oid": "de28f6202dbd011c38e541004872e54f94a228da", "url": "https://github.com/greenplum-db/pxf/commit/de28f6202dbd011c38e541004872e54f94a228da", "message": "pxf->PXF", "committedDate": "2020-10-29T16:55:15Z", "type": "commit"}, {"oid": "e9ce993cb5c20bec8e895f8acd6f42ec18050a65", "url": "https://github.com/greenplum-db/pxf/commit/e9ce993cb5c20bec8e895f8acd6f42ec18050a65", "message": "reword to remove restrict", "committedDate": "2020-10-29T21:37:09Z", "type": "commit"}, {"oid": "9c6eae7eb61666f541237098f5333cc8090d5177", "url": "https://github.com/greenplum-db/pxf/commit/9c6eae7eb61666f541237098f5333cc8090d5177", "message": "remove Optional from SERVER description", "committedDate": "2020-11-03T19:35:07Z", "type": "commit"}]}