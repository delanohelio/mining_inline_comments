{"pr_number": 1734, "pr_title": "Add support to the REST Client for retrieval of schemas", "pr_createdAt": "2020-05-14T11:31:37Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1734", "timeline": [{"oid": "2650fedf8b40d61cdeef3f422aeb3aeed77865d1", "url": "https://github.com/openequella/openEQUELLA/commit/2650fedf8b40d61cdeef3f422aeb3aeed77865d1", "message": "oeq-ts-rest-api: Add support for getting schemas\n\nAdded --no-cache to Jest as was having spurious results - I think due to the typescript-is compilations.", "committedDate": "2020-05-14T08:18:24Z", "type": "commit"}, {"oid": "6499f81f4ff395752bc6620cee2d5397b97a1f3b", "url": "https://github.com/openequella/openEQUELLA/commit/6499f81f4ff395752bc6620cee2d5397b97a1f3b", "message": "oeq-ts-rest-api: Add jsDoc for getSchema", "committedDate": "2020-05-14T10:35:48Z", "type": "commit"}, {"oid": "cde893a3d18e257faa770a236e902f841c599ed7", "url": "https://github.com/openequella/openEQUELLA/commit/cde893a3d18e257faa770a236e902f841c599ed7", "message": "oeq-ts-rest-api: Remove unused code", "committedDate": "2020-05-14T10:42:34Z", "type": "commit"}, {"oid": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "url": "https://github.com/openequella/openEQUELLA/commit/261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "message": "oeq-ts-rest-api: Add test for schema not found, improve ApiError", "committedDate": "2020-05-14T11:08:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA2ODI0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425068244", "bodyText": "These names (mostly) align with those in oEQ, and I figured they added reasonable documentation insight which seems to be the main justification for using type these days.", "author": "edalex-ian", "createdAt": "2020-05-14T11:33:37Z", "path": "oeq-ts-rest-api/src/Common.ts", "diffHunk": "@@ -0,0 +1,63 @@\n+import * as Security from './Security';\n+import { is } from 'typescript-is';\n+\n+export type i18nString = string;\n+\n+export type I18nStrings = Record<string, string>;", "originalCommit": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTYwMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425495603", "bodyText": "I don't think I've seen these expect.assertions(int) calls before. Is that just to say that this block should have 2 expect calls, not including the expect.assertions call?", "author": "SammyIsConfused", "createdAt": "2020-05-15T00:07:07Z", "path": "oeq-ts-rest-api/test/schema.test.ts", "diffHunk": "@@ -0,0 +1,62 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+import { EquellaSchema } from '../src/Schema';\n+\n+beforeAll(() => OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+\n+afterAll(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+describe('Retrieving schemas', () => {\n+  it('should be possible get schemas with no params', () => {\n+    expect.assertions(2);\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, null).then(\n+      (pagedResult: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>) => {\n+        expect(pagedResult.length).toBeGreaterThan(0);\n+        expect(pagedResult.length).toEqual(pagedResult.results.length);\n+      }\n+    );\n+  });\n+\n+  it('should be possible to get schemas customised with params', () => {\n+    expect.assertions(3);\n+    const howMany = 2;\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, {\n+      length: howMany,\n+      full: true,\n+    }).then((pagedResult: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>) => {\n+      const result = pagedResult as OEQ.Common.PagedResult<EquellaSchema>;\n+      expect(result.results.length).toBe(howMany);\n+      // confirm that `full` returned additional information\n+      expect(result.results[0].createdDate).toBeTruthy();\n+      expect(result.results[0].definition).toBeTruthy();\n+    });\n+  });\n+});\n+\n+describe('Retrieval of a specific schema', () => {\n+  it('Should be possible to retrieve a known schema', () => {\n+    expect.assertions(2);\n+    const targetUuid = '71a27a31-d6b0-4681-b124-6db410ed420b';\n+\n+    return OEQ.Schema.getSchema(TC.API_PATH, targetUuid).then(\n+      (result: EquellaSchema) => {\n+        expect(result.uuid).toBe(targetUuid);\n+        // Better make sure we got a schema\n+        expect(result.definition).toBeTruthy();\n+      }\n+    );\n+  });\n+\n+  it('Should result in a 404 when attempting to retrieve an unknown UUID', () => {\n+    expect.assertions(2);", "originalCommit": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5ODMyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425498323", "bodyText": "Yup, that's correct.\nThey're important when testing async things, especially if a different path is executed and a promise simply finishes down another track - which would mean a divergence from what the test is expecting to occur. If that occurs, and you don't have expect.assertions you'll still get a nice green tick / pass.", "author": "edalex-ian", "createdAt": "2020-05-15T00:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTA2Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425495063", "bodyText": "Is there any particular reason for using null ? Can we do params?: ListSchemaParams ? If yes, then at line 93 can just put params there.", "author": "PenghaiZhang", "createdAt": "2020-05-15T00:05:10Z", "path": "oeq-ts-rest-api/src/Schema.ts", "diffHunk": "@@ -0,0 +1,110 @@\n+import * as Common from './Common';\n+import { GET } from './AxiosInstance';\n+import { is } from 'typescript-is';\n+\n+export interface Citation {\n+  name: string;\n+  transformation: string;\n+}\n+\n+export interface Schema extends Common.BaseEntity {\n+  namePath: string;\n+  descriptionPath: string;\n+  /**\n+   * Typically a tree of objects representing an XML schema - so first entry is normally \"xml\".\n+   */\n+  definition: Record<string, unknown>;\n+}\n+\n+export interface EquellaSchema extends Schema {\n+  citations: Citation[];\n+  exportTransformsMap: Record<string, string>;\n+  importTransformsMap: Record<string, string>;\n+  ownerUuid: string;\n+  serializedDefinition: string;\n+}\n+\n+/**\n+ * Query params for listing of schemas. All are optional!\n+ */\n+export interface ListSchemaParams {\n+  /**\n+   * Search name and description\n+   */\n+  q?: string;\n+  /**\n+   * Privilege(s) to filter by\n+   */\n+  privilege?: string[];\n+  /**\n+   * Resumption token for paging\n+   */\n+  resumptionToken?: string;\n+  /**\n+   * Number of results\n+   */\n+  length?: number;\n+  /**\n+   * Return full entity (needs VIEW or EDIT privilege)\n+   */\n+  full?: boolean;\n+}\n+\n+/**\n+ * Helper function for a standard validator for EquellaSchema instances via typescript-is.\n+ *\n+ * @param instance An instance to validate.\n+ */\n+export const isEquellaSchema = (instance: unknown): boolean =>\n+  is<EquellaSchema>(instance);\n+\n+/**\n+ * Helper function for a standard validator for EquellaSchema instances wrapped in a PagedResult\n+ * via typescript-is.\n+ *\n+ * @param instance An instance to validate.\n+ */\n+export const isPagedEquellaSchema = (instance: unknown): boolean =>\n+  is<Common.PagedResult<EquellaSchema>>(instance);\n+\n+const SCHEMA_ROOT_PATH = '/schema';\n+\n+/**\n+ * List all available schemas which the currently authenticated user has access to. Results can\n+ * be customised based on params, and if the `full` param is specified then the return value is\n+ * actually EquellaSchema with all details.\n+ *\n+ * @param apiBasePath Base URI to the oEQ institution and API\n+ * @param params Query parameters to customize (and/or page) result\n+ */\n+export const listSchemas = (\n+  apiBasePath: string,\n+  params: ListSchemaParams | null", "originalCommit": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwNzkwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425507904", "bodyText": "I'll check, I did have issues at one point, but this could just be left over.", "author": "edalex-ian", "createdAt": "2020-05-15T00:52:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTA2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxMDA1Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425510053", "bodyText": "Seems to be happy, no idea what I saw yesterday. \ud83d\ude0a\nChange pushed.", "author": "edalex-ian", "createdAt": "2020-05-15T01:00:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NTA2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NjYzMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425496632", "bodyText": "Just a personal preference. I might do import {BaseEntity, PagedResult, ...} from ./Common'.", "author": "PenghaiZhang", "createdAt": "2020-05-15T00:10:25Z", "path": "oeq-ts-rest-api/src/Schema.ts", "diffHunk": "@@ -0,0 +1,110 @@\n+import * as Common from './Common';", "originalCommit": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwNzU5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425507596", "bodyText": "I'd actually like to see us start using more of this style so that we can improve readability through namespacing. It's for this reason in this module I've gone to lengths to ensure that everything is also exported in it's own name space etc (i.e. export * as Common from './Common').", "author": "edalex-ian", "createdAt": "2020-05-15T00:51:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NjYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUxOTQxOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425519419", "bodyText": "I'm okay either way.\nI'll just throw out there that I personally tend toward the destructured approach to accessing data as well.\nMost of the time when working with functions and classes I need to access a specific interface or function, and that having to lookup/remember both the namespace and the function name to be more a hindrance than a help.", "author": "ChristianMurphy", "createdAt": "2020-05-15T01:39:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NjYzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUyMDE5Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425520193", "bodyText": "Yup, definitely cool on the data side, just not so much on the cluttered global namespace side.", "author": "edalex-ian", "createdAt": "2020-05-15T01:42:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5NjYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5Nzg2MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425497861", "bodyText": "Do we need return here?", "author": "PenghaiZhang", "createdAt": "2020-05-15T00:15:03Z", "path": "oeq-ts-rest-api/test/schema.test.ts", "diffHunk": "@@ -0,0 +1,62 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+import { EquellaSchema } from '../src/Schema';\n+\n+beforeAll(() => OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+\n+afterAll(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+describe('Retrieving schemas', () => {\n+  it('should be possible get schemas with no params', () => {\n+    expect.assertions(2);\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, null).then(", "originalCommit": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwODEyNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425508124", "bodyText": "Yup, because we want the promise to be explicitly returned so that Jest handles it as an async test.", "author": "edalex-ian", "createdAt": "2020-05-15T00:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTQ5Nzg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMDQwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425500402", "bodyText": "The validator here is isPagedEquellaSchema which ensures that type assertion is safe, or otherwise throws a mismatch error. Is my understanding right?", "author": "PenghaiZhang", "createdAt": "2020-05-15T00:24:46Z", "path": "oeq-ts-rest-api/test/schema.test.ts", "diffHunk": "@@ -0,0 +1,62 @@\n+import * as OEQ from '../src';\n+import * as TC from './TestConfig';\n+import { EquellaSchema } from '../src/Schema';\n+\n+beforeAll(() => OEQ.Auth.login(TC.API_PATH, TC.USERNAME, TC.PASSWORD));\n+\n+afterAll(() => OEQ.Auth.logout(TC.API_PATH, true));\n+\n+describe('Retrieving schemas', () => {\n+  it('should be possible get schemas with no params', () => {\n+    expect.assertions(2);\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, null).then(\n+      (pagedResult: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>) => {\n+        expect(pagedResult.length).toBeGreaterThan(0);\n+        expect(pagedResult.length).toEqual(pagedResult.results.length);\n+      }\n+    );\n+  });\n+\n+  it('should be possible to get schemas customised with params', () => {\n+    expect.assertions(3);\n+    const howMany = 2;\n+\n+    return OEQ.Schema.listSchemas(TC.API_PATH, {\n+      length: howMany,\n+      full: true,\n+    }).then((pagedResult: OEQ.Common.PagedResult<OEQ.Common.BaseEntity>) => {\n+      const result = pagedResult as OEQ.Common.PagedResult<EquellaSchema>;", "originalCommit": "261ff6f2e064c8d21a40bcdda313c8e5a60e10a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwOTAzOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1734#discussion_r425509039", "bodyText": "Well, the isPagedEquellaSchema is known here to be used during the GET call due to the the param full: true. As a result we know that the result should be PagedResult<EquellaSchema> and so we can use coersion on it to then be able to access full types.\nI did want to set the return type on listSchemas to something like PagedResult<BaseEntity | EquellaSchema> but alas that resulted in some fun type errors - and I think even tripped up typescript-is. It was late by then, and Jest had caused enough grief so I stopped at this compromise.", "author": "edalex-ian", "createdAt": "2020-05-15T00:56:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTUwMDQwMg=="}], "type": "inlineReview"}, {"oid": "9b1f37f2940daec5583042c344cc42c3994f0d0d", "url": "https://github.com/openequella/openEQUELLA/commit/9b1f37f2940daec5583042c344cc42c3994f0d0d", "message": "oeq-ts-rest-api: Change params argument to optional on listSchemas", "committedDate": "2020-05-15T01:00:09Z", "type": "commit"}]}