{"pr_number": 1541, "pr_title": "Feature/convert purs to tsx for setting menu", "pr_createdAt": "2020-03-16T06:17:15Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1541", "timeline": [{"oid": "14071df639bfb0043ba32a8b0e90023bfb2bc179", "url": "https://github.com/openequella/openEQUELLA/commit/14071df639bfb0043ba32a8b0e90023bfb2bc179", "message": "Rewrite the Setting Menu and UI Setting Editor in Typescript", "committedDate": "2020-03-16T03:57:22Z", "type": "commit"}, {"oid": "b9efd82169998b828769cdf08c71cda974fe8ace", "url": "https://github.com/openequella/openEQUELLA/commit/b9efd82169998b828769cdf08c71cda974fe8ace", "message": "Use the new TS components instead of the bridge to Purs components", "committedDate": "2020-03-16T04:14:36Z", "type": "commit"}, {"oid": "a8809bc1c8eb7edefb6a881e5306640ed0c2e55b", "url": "https://github.com/openequella/openEQUELLA/commit/a8809bc1c8eb7edefb6a881e5306640ed0c2e55b", "message": "Remove 'Settings.purs', 'SettingsPage.purs', 'UISettings.purs'", "committedDate": "2020-03-16T04:30:13Z", "type": "commit"}, {"oid": "05b3780b6a1bcf4464fc2e78c406260d4e681670", "url": "https://github.com/openequella/openEQUELLA/commit/05b3780b6a1bcf4464fc2e78c406260d4e681670", "message": "Add error handling", "committedDate": "2020-03-16T06:08:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NTIwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393155204", "bodyText": "Since TS is going to compile this down to ES5 would there be any issues setting this to support all features up to ES2020?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"lib\": [\"es6\", \"dom\", \"es2018.promise\"],\n          \n          \n            \n                \"lib\": [\"es2020\", \"dom\"],", "author": "ChristianMurphy", "createdAt": "2020-03-16T16:33:52Z", "path": "Source/Plugins/Core/com.equella.core/js/tsconfig.json", "diffHunk": "@@ -3,7 +3,7 @@\n     \"outDir\": \"target/ts\",\n     \"module\": \"CommonJS\",\n     \"target\": \"es5\",\n-    \"lib\": [\"es6\", \"dom\"],\n+    \"lib\": [\"es6\", \"dom\", \"es2018.promise\"],", "originalCommit": "05b3780b6a1bcf4464fc2e78c406260d4e681670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyNjkxNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393326914", "bodyText": "Heya @ChristianMurphy\nJust to be sure to be sure, I wonder if we should do that in a separate stand-alone PR? Just in case it triggers any other changes in the transpilation. Thoughts?", "author": "edalex-ian", "createdAt": "2020-03-16T21:44:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NTIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMyOTc4NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393329785", "bodyText": "Oh whoops. I just realised that @PenghaiZhang has brought in es2018.promise.\nI guess in that case, maybe here is as good as any to bring in the whole thing and see what happens. It's a big enough change anyway.", "author": "edalex-ian", "createdAt": "2020-03-16T21:51:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NTIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzMTU5NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393331595", "bodyText": "Just to be sure to be sure, I wonder if we should do that in a separate stand-alone PR? Just in case it triggers any other changes in the transpilation. Thoughts?\n\nI'd be okay either way.\n\nI guess in that case, maybe here is as good as any to bring in the whole thing and see what happens. It's a big enough change anyway.\n\nMy thoughts precisely", "author": "ChristianMurphy", "createdAt": "2020-03-16T21:55:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NTIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3ODQwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393378404", "bodyText": "Do we have handling for legacy browsers?  E.g. message stating browser is not supported", "author": "edalex-tom", "createdAt": "2020-03-17T00:12:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NTIwNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NDE4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394094183", "bodyText": "this leaves the target for the output the same so browsers should be unaffected.\nThe closest I've seen oEQ having to an official browser matrix is https://github.com/openequella/openequella.github.io/blob/7001aad5156fd20a910acabb6e8314b239a30bb3/guides/FileManagerGuide.md#not-supported-without-reconfiguration-if-at-all", "author": "ChristianMurphy", "createdAt": "2020-03-18T03:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NTIwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1NTQ4Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393155487", "bodyText": "for consistency\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      <SettingsPage refreshUser={() => {}} updateTemplate={_ => {}} />\n          \n          \n            \n                      <SettingsPage refreshUser={() => {}} updateTemplate={() => {}} />", "author": "ChristianMurphy", "createdAt": "2020-03-16T16:34:16Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/index.tsx", "diffHunk": "@@ -245,10 +243,7 @@ export default function() {\n     ReactDOM.render(\n       <BrowserRouter basename={basePath} forceRefresh>\n         <ThemeProvider theme={oeqTheme}>\n-          <bridge.SettingsPage\n-            refreshUser={() => {}}\n-            updateTemplate={_ => {}}\n-          />\n+          <SettingsPage refreshUser={() => {}} updateTemplate={_ => {}} />", "originalCommit": "05b3780b6a1bcf4464fc2e78c406260d4e681670", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTExNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393159117", "bodyText": "could forEach be replaced with a map?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SETTING_CATEGORIES.forEach(category => {\n          \n          \n            \n                  const settingsOfCategory = settings\n          \n          \n            \n                    .filter(setting => setting.group === category.id)\n          \n          \n            \n                    .sort((s1, s2) => {\n          \n          \n            \n                      return s1.name > s2.name ? 1 : -1;\n          \n          \n            \n                    });\n          \n          \n            \n                  groups.push({ category: category, settings: settingsOfCategory });\n          \n          \n            \n                });\n          \n          \n            \n                return SETTING_CATEGORIES.map(category => {\n          \n          \n            \n                  const settingsOfCategory = settings\n          \n          \n            \n                    .filter(setting => setting.group === category.id)\n          \n          \n            \n                    .sort((s1, s2) => {\n          \n          \n            \n                      return s1.name > s2.name ? 1 : -1;\n          \n          \n            \n                    });\n          \n          \n            \n                  return { category: category, settings: settingsOfCategory };\n          \n          \n            \n                });", "author": "ChristianMurphy", "createdAt": "2020-03-16T16:39:51Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });", "originalCommit": "05b3780b6a1bcf4464fc2e78c406260d4e681670", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1Mzc3Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393353777", "bodyText": "Agreed, map is cleaner than pushing to an array", "author": "edalex-tom", "createdAt": "2020-03-16T22:54:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1OTExNw=="}], "type": "inlineReview"}, {"oid": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "url": "https://github.com/openequella/openEQUELLA/commit/99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "message": "Merge branch 'component/search_configuration' into feature/convert-purs-to-tsx-for-setting-menu", "committedDate": "2020-03-16T21:44:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTAzNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393351037", "bodyText": "Can we just use 'type' here because 'SettingCategory' and 'SettingGroup' probably do not need inheritance and other abilities of 'interface' ?", "author": "PenghaiZhang", "createdAt": "2020-03-16T22:45:25Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MjMxNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393362315", "bodyText": "It could be an option.\nGenerally I've seen type either used for managing primitive interfaces which can't be captured with interface or type projections (often using util types) which again aren't easily captured as interfaces.\nWhat benefit do you have in mind for preferring type over interface in all cases?", "author": "ChristianMurphy", "createdAt": "2020-03-16T23:13:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3MDAyNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393370026", "bodyText": "Thanks @ChristianMurphy.  No, I am not preferring type. Yesterday, I  was confused about the mixed use of type and interface in this file: \n  \n    \n      openEQUELLA/Source/Plugins/Core/com.equella.core/js/tsrc/legacycontent/LegacyContent.tsx\n    \n    \n         Line 33\n      in\n      903ca6b\n    \n    \n    \n    \n\n        \n          \n           type LegacyContent = { \n        \n    \n  \n\n\nFor example, I did not work out why using interface for ChangeRoute and type for LegacyContent", "author": "PenghaiZhang", "createdAt": "2020-03-16T23:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NTg0MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393375840", "bodyText": "Yeah, I suspect there is a fair amount of that, if we can get ESLint into the project (similar to #1234)\nWe could add https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-type-definitions.md to normalize this across the project.", "author": "ChristianMurphy", "createdAt": "2020-03-17T00:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTAzNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MTA3MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393381070", "bodyText": "#1234 has been updated, no errors, only a few warnings, if you want to review that.\nOnce it's merged can start exploring adding additional checks like https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/consistent-type-definitions.md", "author": "ChristianMurphy", "createdAt": "2020-03-17T00:24:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTAzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjY3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393352679", "bodyText": "Help wanted !\nHad a short discussion with Tom regarding the usage of this boolean flag. The intention is to avoid the warning:\nCan only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component. This is a no-op.\nIt seems a lot developers have accepted this approach, but I wonder if we have any better approaches.", "author": "PenghaiZhang", "createdAt": "2020-03-16T22:50:46Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NzAyMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393367021", "bodyText": "An approach I've liked is wrapping network calls into hooks.\nThis allows things like cancellation on unmount, suspense support or loading states, etc.\nThere are some nice general purpose premade hooks like https://use-http.com and https://github.com/zeit/swr (or in this particular case https://github.com/mauricedb/use-abortable-fetch)\nOr a hook could be written wrapping a network utility like https://github.com/sindresorhus/ky or https://github.com/axios/axios automatically doing cleanup on unmount.", "author": "ChristianMurphy", "createdAt": "2020-03-16T23:30:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjI0MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394106240", "bodyText": "Thanks @ChristianMurphy . Do you know if any of hooks mentioned above is used in oEQ ?", "author": "PenghaiZhang", "createdAt": "2020-03-18T04:54:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMyNjM0OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394326348", "bodyText": "At this moment, no pre-built hooks or hooks packages are included in oEQ.\nThe utility function Axios is.\n\n  \n    \n      openEQUELLA/Source/Plugins/Core/com.equella.core/js/package.json\n    \n    \n        Lines 31 to 69\n      in\n      220a60f\n    \n    \n    \n    \n\n        \n          \n           \"@date-io/luxon\": \"1.3.11\", \n        \n\n        \n          \n           \"@material-ui/core\": \"3.9.3\", \n        \n\n        \n          \n           \"@material-ui/icons\": \"3.0.2\", \n        \n\n        \n          \n           \"@material-ui/lab\": \"3.0.0-alpha.30\", \n        \n\n        \n          \n           \"@material-ui/styles\": \"3.0.0-alpha.10\", \n        \n\n        \n          \n           \"@tinymce/tinymce-react\": \"3.3.2\", \n        \n\n        \n          \n           \"axios\": \"0.19.0\", \n        \n\n        \n          \n           \"create-react-class\": \"15.6.3\", \n        \n\n        \n          \n           \"downshift\": \"2.2.3\", \n        \n\n        \n          \n           \"es6-object-assign\": \"1.1.0\", \n        \n\n        \n          \n           \"history\": \"4.10.1\", \n        \n\n        \n          \n           \"jspolyfill-array.prototype.find\": \"0.1.3\", \n        \n\n        \n          \n           \"luxon\": \"1.16.0\", \n        \n\n        \n          \n           \"lodash\": \"4.17.15\", \n        \n\n        \n          \n           \"material-ui-pickers\": \"2.2.4\", \n        \n\n        \n          \n           \"oeq-cloudproviders\": \"git+https://github.com/apereo/openEQUELLA-cloudprovidersdk.git#32d958ddfff64ca748e7e1b2eae0f0487946a487\", \n        \n\n        \n          \n           \"parcel-bundler\": \"1.12.1\", \n        \n\n        \n          \n           \"prop-types\": \"15.7.2\", \n        \n\n        \n          \n           \"react\": \"16.8.6\", \n        \n\n        \n          \n           \"react-beautiful-dnd\": \"7.1.3\", \n        \n\n        \n          \n           \"react-color\": \"2.17.0\", \n        \n\n        \n          \n           \"react-dom\": \"16.8.4\", \n        \n\n        \n          \n           \"react-redux\": \"5.1.1\", \n        \n\n        \n          \n           \"react-router\": \"5.0.0\", \n        \n\n        \n          \n           \"react-router-dom\": \"5.0.0\", \n        \n\n        \n          \n           \"react-swipeable-views\": \"0.12.18\", \n        \n\n        \n          \n           \"react-visibility-sensor\": \"3.14.0\", \n        \n\n        \n          \n           \"redux\": \"3.7.2\", \n        \n\n        \n          \n           \"redux-actions\": \"2.6.5\", \n        \n\n        \n          \n           \"redux-logger\": \"3.0.6\", \n        \n\n        \n          \n           \"redux-thunk\": \"2.2.0\", \n        \n\n        \n          \n           \"shallow-equal-object\": \"1.1.1\", \n        \n\n        \n          \n           \"sprintf-js\": \"1.1.2\", \n        \n\n        \n          \n           \"timeago-react\": \"2.0.1\", \n        \n\n        \n          \n           \"tinymce\": \"5.1.6\", \n        \n\n        \n          \n           \"typescript-fsa\": \"2.5.0\", \n        \n\n        \n          \n           \"typescript-fsa-reducers\": \"0.4.5\", \n        \n\n        \n          \n           \"uuid\": \"3.3.2\", \n        \n\n        \n          \n           \"wicked-good-xpath\": \"1.3.0\"", "author": "ChristianMurphy", "createdAt": "2020-03-18T12:58:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY1NDc4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394654789", "bodyText": "Hi @ChristianMurphy , would the Axios example be the cancel token?   We have some internal code implements it but I'm curious to know if there are preferable alternatives.", "author": "edalex-tom", "createdAt": "2020-03-18T21:39:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjY3OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MTM0Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394661346", "bodyText": "Yes, cancellation within Axios would be the cancel token https://github.com/axios/axios#cancellation\nThat could be wrapped as a react hook to automatically cancel on unmount.", "author": "ChristianMurphy", "createdAt": "2020-03-18T21:53:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjY3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1NTE0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393355144", "bodyText": "I remember we had short discussions about the generic error handling in oEQ. This one looks generic but there is only one usage.\n\n  \n    \n      openEQUELLA/Source/Plugins/Core/com.equella.core/js/tsrc/components/index.ts\n    \n    \n         Line 10\n      in\n      903ca6b\n    \n    \n    \n    \n\n        \n          \n           export function handleUnexpectedApiError<P extends TemplateUpdateProps>({", "author": "PenghaiZhang", "createdAt": "2020-03-16T22:58:34Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);", "originalCommit": "05b3780b6a1bcf4464fc2e78c406260d4e681670", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MDc3NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393350775", "bodyText": "May be worth just destructing the properties in the signature, saves the pattern of const {a,b} = props being repeated through the app.\nconst SettingsPage = ({ refreshUser, updateTemplate} = SettingsPageProps) => {", "author": "edalex-tom", "createdAt": "2020-03-16T22:44:36Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTMyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393351323", "bodyText": "If this is immutable then may be better have it declared outside the component body as it doesn't need to be re-evaluated ever", "author": "edalex-tom", "createdAt": "2020-03-16T22:46:19Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1Mjk0OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393352949", "bodyText": "I remember discussing this, it's interesting how it works and may be worth adding an inline comment to highlight it's to stop the setting state when component is being unmounted as it may get confused with a cancel token which it isn't.\nMay be worth discussing whether bringing in cancel tokens is a good pattern, as it'll cater for cancelling background API calls that won't be needed anymore, it may have covered preventing interacting with state when component is unmounting.", "author": "edalex-tom", "createdAt": "2020-03-16T22:51:28Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ2MDQyNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393460427", "bodyText": "OK I will add an inline comment first. Later, we can discuss this with @edalex-ian", "author": "PenghaiZhang", "createdAt": "2020-03-17T06:03:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1Mjk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MzM1Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393353352", "bodyText": "This has shown up a few times, a single function should be able to cover this (even if it does the same thing behind the scenes)", "author": "edalex-tom", "createdAt": "2020-03-16T22:52:54Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEyMTM3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394121379", "bodyText": "As discussed, once we have successfully setup Redux to handle errors in a centralised way, we can remove these handlerErrors. So keep it for a while.", "author": "PenghaiZhang", "createdAt": "2020-03-18T05:59:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MzM1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1ODE0OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393358149", "bodyText": "Personal preference, can this be function be moved outside of the component? (either a file or outside the component body) as it\n\nmakes the component body heavier\nwould be difficult to write a jest test for", "author": "edalex-tom", "createdAt": "2020-03-16T23:04:00Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MDc0MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393360740", "bodyText": "If using typescript 3.7+ or ES2020, it may be time to start using the optional chaining.  E.g. settings?.map\nIf no other functionality is needed in the map then the return can be immediate:\n{settings?.map(setting => (<ListItem key={setting.id}>\n    <ListItemText\n      primary={settingLink(setting)}\n      secondary={setting.description}\n    />\n  </ListItem>))};", "author": "edalex-tom", "createdAt": "2020-03-16T23:08:42Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]\n+  ): ReactElement => {\n+    if (category === \"ui\") {\n+      return (\n+        <UISettingEditor refreshUser={refreshUser} handleError={handleError} />\n+      );\n+    } else {\n+      return (\n+        <ExpansionPanelDetails>\n+          <List>\n+            {settings &&\n+              settings.map(setting => {", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MTY4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393361683", "bodyText": "Has there been any use of the Link component from Material UI?  It creates the same anchor but caters for styling from the MUI theme", "author": "edalex-tom", "createdAt": "2020-03-16T23:11:50Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]\n+  ): ReactElement => {\n+    if (category === \"ui\") {\n+      return (\n+        <UISettingEditor refreshUser={refreshUser} handleError={handleError} />\n+      );\n+    } else {\n+      return (\n+        <ExpansionPanelDetails>\n+          <List>\n+            {settings &&\n+              settings.map(setting => {\n+                return (\n+                  <ListItem key={setting.id}>\n+                    <ListItemText\n+                      primary={settingLink(setting)}\n+                      secondary={setting.description}\n+                    />\n+                  </ListItem>\n+                );\n+              })}\n+          </List>\n+        </ExpansionPanelDetails>\n+      );\n+    }\n+  };\n+\n+  // Create a link for each setting\n+  const settingLink = (setting: GeneralSetting): ReactElement => {\n+    let link = <div />;\n+    if (setting.links.route) {\n+      link = <Link to={setting.links.route}>{setting.name}</Link>;\n+    } else if (setting.links.href) {\n+      link = <a href={setting.links.href}>{setting.name}</a>;\n+    } else if (setting.id === \"adminconsole\") {\n+      link = (\n+        <a href=\"javascript:void(0)\" onClick={() => setAdminDialogOpen(true)}>", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ2MjUyMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393462521", "bodyText": "Hi Tom, this is not a MUI Link. I think it's a react-router Link.", "author": "PenghaiZhang", "createdAt": "2020-03-17T06:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MTY4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3MjEzNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393572134", "bodyText": "Sorry my question wasn't clear, it was more that the a hyperlinks may be better done as MUI Link as they will be tied into the theme rather than just be raw HTML links.  It will need an alias for the MUI link as it will collide with the router link", "author": "edalex-tom", "createdAt": "2020-03-17T10:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MTY4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2MjY0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393362642", "bodyText": "Else isn't needed, there's a return in the if", "author": "edalex-tom", "createdAt": "2020-03-16T23:15:01Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]\n+  ): ReactElement => {\n+    if (category === \"ui\") {\n+      return (\n+        <UISettingEditor refreshUser={refreshUser} handleError={handleError} />\n+      );\n+    } else {", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDIwOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393364209", "bodyText": "Is this div required?", "author": "edalex-tom", "createdAt": "2020-03-16T23:20:10Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]\n+  ): ReactElement => {\n+    if (category === \"ui\") {\n+      return (\n+        <UISettingEditor refreshUser={refreshUser} handleError={handleError} />\n+      );\n+    } else {\n+      return (\n+        <ExpansionPanelDetails>\n+          <List>\n+            {settings &&\n+              settings.map(setting => {\n+                return (\n+                  <ListItem key={setting.id}>\n+                    <ListItemText\n+                      primary={settingLink(setting)}\n+                      secondary={setting.description}\n+                    />\n+                  </ListItem>\n+                );\n+              })}\n+          </List>\n+        </ExpansionPanelDetails>\n+      );\n+    }\n+  };\n+\n+  // Create a link for each setting\n+  const settingLink = (setting: GeneralSetting): ReactElement => {\n+    let link = <div />;\n+    if (setting.links.route) {\n+      link = <Link to={setting.links.route}>{setting.name}</Link>;\n+    } else if (setting.links.href) {\n+      link = <a href={setting.links.href}>{setting.name}</a>;\n+    } else if (setting.id === \"adminconsole\") {\n+      link = (\n+        <a href=\"javascript:void(0)\" onClick={() => setAdminDialogOpen(true)}>\n+          {setting.name}\n+        </a>\n+      );\n+    }\n+\n+    return link;\n+  };\n+\n+  return (\n+    <div id=\"settingsPage\">", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ2NDM2OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393464369", "bodyText": "I think so because quite a few Selenium tests need it.", "author": "PenghaiZhang", "createdAt": "2020-03-17T06:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU3MzMxNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393573316", "bodyText": "Different minds for this but I'd avoid having extra elements that just drive tests, it's adding something to the DOM just a for a test whereas I'd expect extra attributes on real elements (things that are meaningful outside of functional tests) to support tests", "author": "edalex-tom", "createdAt": "2020-03-17T10:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDIwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5MzE4Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394093187", "bodyText": "Yup, definitely agree with that. But I'd prefer not to see this also trigger a whole lot of updates to tests. So for now, let's keep this as is, but not do this in the future. ;)", "author": "edalex-ian", "createdAt": "2020-03-18T03:52:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDIwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDkxNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393364915", "bodyText": "Should \"ui\" be a constant?  I don't know if it'll be used more than once", "author": "edalex-tom", "createdAt": "2020-03-16T23:22:52Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]\n+  ): ReactElement => {\n+    if (category === \"ui\") {", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2NDk5OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393364998", "bodyText": "Can switch this to a jsdoc", "author": "edalex-tom", "createdAt": "2020-03-16T23:23:07Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2ODM1Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393368356", "bodyText": "Can settings be undefined?  The interface has the array as always being defined.\nNot suggesting, as it makes the code harder to read but the signature can be tweaked to support using it as an element which would allow it to be moved to a dedicated file without significantly impacting the page render logic:\nconst ExpansionPanelContent = ({category, settings}: {category: string; settings: GeneralSetting[]}): ReactElement => {\n...\n}\n<ExpansionPanelContent category={category.id} settings={group.settings}></ExpansionPanelContent>", "author": "edalex-tom", "createdAt": "2020-03-16T23:35:28Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM2OTY5OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393369699", "bodyText": "Not sure on this but the settingsGroups function is going to be called on every render, the sorted and filtered groups may be better stored in state once", "author": "edalex-tom", "createdAt": "2020-03-16T23:40:19Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]\n+  ): ReactElement => {\n+    if (category === \"ui\") {\n+      return (\n+        <UISettingEditor refreshUser={refreshUser} handleError={handleError} />\n+      );\n+    } else {\n+      return (\n+        <ExpansionPanelDetails>\n+          <List>\n+            {settings &&\n+              settings.map(setting => {\n+                return (\n+                  <ListItem key={setting.id}>\n+                    <ListItemText\n+                      primary={settingLink(setting)}\n+                      secondary={setting.description}\n+                    />\n+                  </ListItem>\n+                );\n+              })}\n+          </List>\n+        </ExpansionPanelDetails>\n+      );\n+    }\n+  };\n+\n+  // Create a link for each setting\n+  const settingLink = (setting: GeneralSetting): ReactElement => {\n+    let link = <div />;\n+    if (setting.links.route) {\n+      link = <Link to={setting.links.route}>{setting.name}</Link>;\n+    } else if (setting.links.href) {\n+      link = <a href={setting.links.href}>{setting.name}</a>;\n+    } else if (setting.id === \"adminconsole\") {\n+      link = (\n+        <a href=\"javascript:void(0)\" onClick={() => setAdminDialogOpen(true)}>\n+          {setting.name}\n+        </a>\n+      );\n+    }\n+\n+    return link;\n+  };\n+\n+  return (\n+    <div id=\"settingsPage\">\n+      <AdminDownloadDialog\n+        open={adminDialogOpen}\n+        onClose={() => setAdminDialogOpen(false)}\n+      />\n+      {// Display a circular Progress Bar or the Setting menu, depending on the state of 'loading'\n+      loading ? (\n+        <div className={classes.progress}>\n+          <CircularProgress variant=\"indeterminate\" />\n+        </div>\n+      ) : (\n+        settingGroups().map(group => {", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3MjAzOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393372038", "bodyText": "Can daisy chain the destruct or just destruct values from group.category as category is never needed and save needing to do category.variable again and again.\nconst { id, details } = group.category;", "author": "edalex-tom", "createdAt": "2020-03-16T23:48:52Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]\n+  ): ReactElement => {\n+    if (category === \"ui\") {\n+      return (\n+        <UISettingEditor refreshUser={refreshUser} handleError={handleError} />\n+      );\n+    } else {\n+      return (\n+        <ExpansionPanelDetails>\n+          <List>\n+            {settings &&\n+              settings.map(setting => {\n+                return (\n+                  <ListItem key={setting.id}>\n+                    <ListItemText\n+                      primary={settingLink(setting)}\n+                      secondary={setting.description}\n+                    />\n+                  </ListItem>\n+                );\n+              })}\n+          </List>\n+        </ExpansionPanelDetails>\n+      );\n+    }\n+  };\n+\n+  // Create a link for each setting\n+  const settingLink = (setting: GeneralSetting): ReactElement => {\n+    let link = <div />;\n+    if (setting.links.route) {\n+      link = <Link to={setting.links.route}>{setting.name}</Link>;\n+    } else if (setting.links.href) {\n+      link = <a href={setting.links.href}>{setting.name}</a>;\n+    } else if (setting.id === \"adminconsole\") {\n+      link = (\n+        <a href=\"javascript:void(0)\" onClick={() => setAdminDialogOpen(true)}>\n+          {setting.name}\n+        </a>\n+      );\n+    }\n+\n+    return link;\n+  };\n+\n+  return (\n+    <div id=\"settingsPage\">\n+      <AdminDownloadDialog\n+        open={adminDialogOpen}\n+        onClose={() => setAdminDialogOpen(false)}\n+      />\n+      {// Display a circular Progress Bar or the Setting menu, depending on the state of 'loading'\n+      loading ? (\n+        <div className={classes.progress}>\n+          <CircularProgress variant=\"indeterminate\" />\n+        </div>\n+      ) : (\n+        settingGroups().map(group => {\n+          const { category } = group;", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3MzM5Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393373393", "bodyText": "Is the Axios response ever needed?  If not then the results can be returned rather than the response, this will\n\nsave the caller from needing to know about Axios and means the underlying functionality can be switched to native fetch without impacting the callers.\nallow callers to immediately destruct the result data in the then value without needing to do result.data\n\nAlso there's a lot of flipping between function and arrow functions, personal preference is to stick to one\nexport const fetchSettings(): Promise<GeneralSetting[]> => \n  Axios.get<GeneralSetting[]>(GET_SETTINGS_URL).then(resp => resp.data);", "author": "edalex-tom", "createdAt": "2020-03-16T23:53:14Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPageModule.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import Axios, { AxiosPromise } from \"axios\";\n+import { GeneralSetting, UISetting } from \"./SettingsPageEntry\";\n+import { Config } from \"../config\";\n+\n+const GET_SETTINGS_URL = `${Config.baseUrl}api/settings`;\n+const GET_UI_SETTINGS_URL = `${GET_SETTINGS_URL}/ui`;\n+\n+export function fetchSettings(): AxiosPromise<GeneralSetting[]> {\n+  return Axios.get(GET_SETTINGS_URL);", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NDg3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393374874", "bodyText": "I've got mixed habits for JS docs between components and modules but I'm trying to get into the habit of adding them to modules, same as adding them on the java/groovy/scala side.", "author": "edalex-tom", "createdAt": "2020-03-16T23:58:54Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPageModule.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+import Axios, { AxiosPromise } from \"axios\";", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NjkyOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393376928", "bodyText": "The data can be immediately destructed, saves needed to settings.newUI\nconst {enabled, newSearch} = result.data.newUI;", "author": "edalex-tom", "createdAt": "2020-03-17T00:06:39Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/UISettingEditor.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import * as React from \"react\";\n+import { UISetting } from \"./SettingsPageEntry\";\n+import { fetchUISetting, saveUISetting } from \"./SettingsPageModule\";\n+import { ExpansionPanelDetails, Theme } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { Link } from \"react-router-dom\";\n+import { routes } from \"../mainui/routes\";\n+import Button from \"@material-ui/core/Button\";\n+import { languageStrings } from \"../util/langstrings\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import Switch from \"@material-ui/core/Switch\";\n+import { Config } from \"../config\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    fab: {\n+      position: \"absolute\",\n+      bottom: 0,\n+      right: 16\n+    },\n+    enableNewUIColumn: {\n+      flexBasis: \"33.3%\"\n+    },\n+    enableNewSearchColumn: {\n+      flexBasis: \"33.3%\"\n+    }\n+  };\n+});\n+\n+interface UISettingEditorProps {\n+  refreshUser: () => void;\n+  handleError: (error: AxiosError) => void;\n+}\n+\n+const UISettingEditor = (props: UISettingEditorProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, handleError } = props;\n+  const { uiconfig } = languageStrings;\n+\n+  const [newUIEnabled, setNewUIEnabled] = React.useState<boolean>(true);\n+  const [newSearchEnabled, setNewSearchEnabled] = React.useState<boolean>(\n+    false\n+  );\n+\n+  React.useEffect(() => {\n+    fetchUISetting()\n+      .then(result => {\n+        const setting: UISetting = result.data;", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NzI4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393377283", "bodyText": "Not sure this div is needed", "author": "edalex-tom", "createdAt": "2020-03-17T00:07:58Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/UISettingEditor.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import * as React from \"react\";\n+import { UISetting } from \"./SettingsPageEntry\";\n+import { fetchUISetting, saveUISetting } from \"./SettingsPageModule\";\n+import { ExpansionPanelDetails, Theme } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { Link } from \"react-router-dom\";\n+import { routes } from \"../mainui/routes\";\n+import Button from \"@material-ui/core/Button\";\n+import { languageStrings } from \"../util/langstrings\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import Switch from \"@material-ui/core/Switch\";\n+import { Config } from \"../config\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    fab: {\n+      position: \"absolute\",\n+      bottom: 0,\n+      right: 16\n+    },\n+    enableNewUIColumn: {\n+      flexBasis: \"33.3%\"\n+    },\n+    enableNewSearchColumn: {\n+      flexBasis: \"33.3%\"\n+    }\n+  };\n+});\n+\n+interface UISettingEditorProps {\n+  refreshUser: () => void;\n+  handleError: (error: AxiosError) => void;\n+}\n+\n+const UISettingEditor = (props: UISettingEditorProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, handleError } = props;\n+  const { uiconfig } = languageStrings;\n+\n+  const [newUIEnabled, setNewUIEnabled] = React.useState<boolean>(true);\n+  const [newSearchEnabled, setNewSearchEnabled] = React.useState<boolean>(\n+    false\n+  );\n+\n+  React.useEffect(() => {\n+    fetchUISetting()\n+      .then(result => {\n+        const setting: UISetting = result.data;\n+        setNewSearchEnabled(setting.newUI.newSearch);\n+        setNewUIEnabled(setting.newUI.enabled);\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  const setNewUI = (enabled: boolean) => {\n+    setNewUIEnabled(enabled);\n+    saveUISetting(enabled, newSearchEnabled)\n+      .then(_ => {\n+        window.location.href = Config.baseUrl + \"access/settings.do\";\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      });\n+  };\n+\n+  const setNewSearch = (enabled: boolean) => {\n+    setNewSearchEnabled(enabled);\n+    saveUISetting(newUIEnabled, enabled)\n+      .then(_ => refreshUser())\n+      .catch(error => {\n+        handleError(error);\n+      });\n+  };\n+\n+  return (\n+    <ExpansionPanelDetails>\n+      <div>", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5MDY1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394090654", "bodyText": "Without this div, the UI Setting Editor will look different. Therefore, some extra styles are required to ensure the UI consistency. So at this stage I am more inclined to keep this div.", "author": "PenghaiZhang", "createdAt": "2020-03-18T03:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NzI4Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5MjIxNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394092214", "bodyText": "By using MUI Grid we can remove this div.", "author": "PenghaiZhang", "createdAt": "2020-03-18T03:48:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3NzI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3ODA0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393378044", "bodyText": "There's no guarantee the error will be an AxiosError as the catch could return a runtime error", "author": "edalex-tom", "createdAt": "2020-03-17T00:11:05Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/UISettingEditor.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import * as React from \"react\";\n+import { UISetting } from \"./SettingsPageEntry\";\n+import { fetchUISetting, saveUISetting } from \"./SettingsPageModule\";\n+import { ExpansionPanelDetails, Theme } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { Link } from \"react-router-dom\";\n+import { routes } from \"../mainui/routes\";\n+import Button from \"@material-ui/core/Button\";\n+import { languageStrings } from \"../util/langstrings\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import Switch from \"@material-ui/core/Switch\";\n+import { Config } from \"../config\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    fab: {\n+      position: \"absolute\",\n+      bottom: 0,\n+      right: 16\n+    },\n+    enableNewUIColumn: {\n+      flexBasis: \"33.3%\"\n+    },\n+    enableNewSearchColumn: {\n+      flexBasis: \"33.3%\"\n+    }\n+  };\n+});\n+\n+interface UISettingEditorProps {\n+  refreshUser: () => void;\n+  handleError: (error: AxiosError) => void;", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTI5OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393379298", "bodyText": "I think this can be achieved with a MUI Grid which will reduce the need for custom styles and cater for responsive design if desired at some point", "author": "edalex-tom", "createdAt": "2020-03-17T00:16:31Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/UISettingEditor.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import * as React from \"react\";\n+import { UISetting } from \"./SettingsPageEntry\";\n+import { fetchUISetting, saveUISetting } from \"./SettingsPageModule\";\n+import { ExpansionPanelDetails, Theme } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { Link } from \"react-router-dom\";\n+import { routes } from \"../mainui/routes\";\n+import Button from \"@material-ui/core/Button\";\n+import { languageStrings } from \"../util/langstrings\";\n+import FormControl from \"@material-ui/core/FormControl\";\n+import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n+import Switch from \"@material-ui/core/Switch\";\n+import { Config } from \"../config\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    fab: {\n+      position: \"absolute\",\n+      bottom: 0,\n+      right: 16\n+    },\n+    enableNewUIColumn: {\n+      flexBasis: \"33.3%\"\n+    },\n+    enableNewSearchColumn: {\n+      flexBasis: \"33.3%\"\n+    }\n+  };\n+});\n+\n+interface UISettingEditorProps {\n+  refreshUser: () => void;\n+  handleError: (error: AxiosError) => void;\n+}\n+\n+const UISettingEditor = (props: UISettingEditorProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, handleError } = props;\n+  const { uiconfig } = languageStrings;\n+\n+  const [newUIEnabled, setNewUIEnabled] = React.useState<boolean>(true);\n+  const [newSearchEnabled, setNewSearchEnabled] = React.useState<boolean>(\n+    false\n+  );\n+\n+  React.useEffect(() => {\n+    fetchUISetting()\n+      .then(result => {\n+        const setting: UISetting = result.data;\n+        setNewSearchEnabled(setting.newUI.newSearch);\n+        setNewUIEnabled(setting.newUI.enabled);\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  const setNewUI = (enabled: boolean) => {\n+    setNewUIEnabled(enabled);\n+    saveUISetting(enabled, newSearchEnabled)\n+      .then(_ => {\n+        window.location.href = Config.baseUrl + \"access/settings.do\";\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      });\n+  };\n+\n+  const setNewSearch = (enabled: boolean) => {\n+    setNewSearchEnabled(enabled);\n+    saveUISetting(newUIEnabled, enabled)\n+      .then(_ => refreshUser())\n+      .catch(error => {\n+        handleError(error);\n+      });\n+  };\n+\n+  return (\n+    <ExpansionPanelDetails>\n+      <div>\n+        <div className={classes.enableNewUIColumn}>", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5MTEyMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394091122", "bodyText": "Good idea.", "author": "PenghaiZhang", "createdAt": "2020-03-18T03:43:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM3OTI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MDE0Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393380146", "bodyText": "I take it properties are injected into a component at a higher level, as routes has no contract for properties (e.g. component: \"not valid\" is fine and won't cause errors here)", "author": "edalex-tom", "createdAt": "2020-03-17T00:20:30Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/routes.tsx", "diffHunk": "@@ -46,7 +47,7 @@ export const routes = {\n   Settings: {\n     path: \"(/access/settings.do|/page/settings)\",\n     to: \"/page/settings\",\n-    render: (p: OEQRouteComponentProps<any>) => <bridge.SettingsPage {...p} />\n+    component: SettingsPage", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5Mzg5Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394093892", "bodyText": "Yes, I think they are injected here : \n  \n    \n      openEQUELLA/Source/Plugins/Core/com.equella.core/js/tsrc/mainui/index.tsx\n    \n    \n         Line 135\n      in\n      220a60f\n    \n    \n    \n    \n\n        \n          \n           return <oeqRoute.component {...oeqProps} />;", "author": "PenghaiZhang", "createdAt": "2020-03-18T03:56:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MDE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MTI5NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393381295", "bodyText": "Most of the MUI components (excluding icons) can be imported all at once, tree shaking should still work\nimport { Theme, ExpansionPanelDetails, List, ListItem, ListItemText, ExpansionPanel, ExpansionPanelSummary, Typography } from \"@material-ui/core\";", "author": "edalex-tom", "createdAt": "2020-03-17T00:25:26Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MTcwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393381705", "bodyText": "This could be a dedicated oEQ component, allowing it to  be defined once and potentially changed later without needing to update all the pages.", "author": "edalex-tom", "createdAt": "2020-03-17T00:26:57Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,203 @@\n+import * as React from \"react\";\n+import { Theme } from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\n+import ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\n+import ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import Typography from \"@material-ui/core/Typography\";\n+import List from \"@material-ui/core/List\";\n+import ListItem from \"@material-ui/core/ListItem\";\n+import ListItemText from \"@material-ui/core/ListItemText\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import CircularProgress from \"@material-ui/core/CircularProgress\";\n+import { generateFromError } from \"../api/errors\";\n+import { AxiosError } from \"axios\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+interface SettingCategory {\n+  id: string;\n+  details: {\n+    name: string;\n+    desc: string;\n+  };\n+}\n+\n+interface SettingGroup {\n+  category: SettingCategory;\n+  settings: GeneralSetting[];\n+}\n+\n+const SettingsPage = (props: SettingsPageProps) => {\n+  const classes = useStyles();\n+  const { refreshUser, updateTemplate } = props;\n+  const SETTING_CATEGORIES: SettingCategory[] = [\n+    { id: \"general\", details: languageStrings.settings.general },\n+    { id: \"integration\", details: languageStrings.settings.integration },\n+    { id: \"diagnostics\", details: languageStrings.settings.diagnostics },\n+    { id: \"searching\", details: languageStrings.settings.searching },\n+    { id: \"ui\", details: languageStrings.settings.ui }\n+  ];\n+\n+  const [settings, setSettings] = React.useState<GeneralSetting[]>([]);\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+\n+  // Update the title of App Bar\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  // Fetch settings from the server\n+  React.useEffect(() => {\n+    let cancel = false;\n+    fetchSettings()\n+      .then(result => {\n+        if (!cancel) {\n+          setSettings(result.data);\n+        }\n+      })\n+      .catch(error => {\n+        handleError(error);\n+      })\n+      .finally(() => setLoading(false));\n+\n+    return () => {\n+      cancel = true;\n+    };\n+  }, []);\n+\n+  const handleError = (error: AxiosError) => {\n+    updateTemplate(templateError(generateFromError(error)));\n+  };\n+\n+  // Group settings by their category and sort each group by setting name\n+  const settingGroups = (): SettingGroup[] => {\n+    const groups: SettingGroup[] = [];\n+\n+    SETTING_CATEGORIES.forEach(category => {\n+      const settingsOfCategory = settings\n+        .filter(setting => setting.group === category.id)\n+        .sort((s1, s2) => {\n+          return s1.name > s2.name ? 1 : -1;\n+        });\n+      groups.push({ category: category, settings: settingsOfCategory });\n+    });\n+\n+    return groups;\n+  };\n+\n+  // Create the content of each ExpansionPanel\n+  const expansionPanelContent = (\n+    category: string,\n+    settings?: GeneralSetting[]\n+  ): ReactElement => {\n+    if (category === \"ui\") {\n+      return (\n+        <UISettingEditor refreshUser={refreshUser} handleError={handleError} />\n+      );\n+    } else {\n+      return (\n+        <ExpansionPanelDetails>\n+          <List>\n+            {settings &&\n+              settings.map(setting => {\n+                return (\n+                  <ListItem key={setting.id}>\n+                    <ListItemText\n+                      primary={settingLink(setting)}\n+                      secondary={setting.description}\n+                    />\n+                  </ListItem>\n+                );\n+              })}\n+          </List>\n+        </ExpansionPanelDetails>\n+      );\n+    }\n+  };\n+\n+  // Create a link for each setting\n+  const settingLink = (setting: GeneralSetting): ReactElement => {\n+    let link = <div />;\n+    if (setting.links.route) {\n+      link = <Link to={setting.links.route}>{setting.name}</Link>;\n+    } else if (setting.links.href) {\n+      link = <a href={setting.links.href}>{setting.name}</a>;\n+    } else if (setting.id === \"adminconsole\") {\n+      link = (\n+        <a href=\"javascript:void(0)\" onClick={() => setAdminDialogOpen(true)}>\n+          {setting.name}\n+        </a>\n+      );\n+    }\n+\n+    return link;\n+  };\n+\n+  return (\n+    <div id=\"settingsPage\">\n+      <AdminDownloadDialog\n+        open={adminDialogOpen}\n+        onClose={() => setAdminDialogOpen(false)}\n+      />\n+      {// Display a circular Progress Bar or the Setting menu, depending on the state of 'loading'\n+      loading ? (\n+        <div className={classes.progress}>\n+          <CircularProgress variant=\"indeterminate\" />\n+        </div>", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NjgwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394096802", "bodyText": "I have briefly discussed this point with Ian. It might be better that we create an oEQ component for CircularProgress  in another PR, and then we can replace current usages of CircularProgress with the new component.", "author": "PenghaiZhang", "createdAt": "2020-03-18T04:09:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MTcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM4MTg4OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r393381888", "bodyText": "Same as before, the MUI core components can be imported in a single line", "author": "edalex-tom", "createdAt": "2020-03-17T00:27:51Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/UISettingEditor.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import * as React from \"react\";\n+import { UISetting } from \"./SettingsPageEntry\";\n+import { fetchUISetting, saveUISetting } from \"./SettingsPageModule\";\n+import { ExpansionPanelDetails, Theme } from \"@material-ui/core\";", "originalCommit": "99d3f64caf6a959aa4ba075ec8a5ccf662ab4a6c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "2c4ff5cc2d64343acea502bd74d2812f8545a683", "url": "https://github.com/openequella/openEQUELLA/commit/2c4ff5cc2d64343acea502bd74d2812f8545a683", "message": "* Move 'SettingCategory' and 'SettingGroup' to a separate ts file\n\n* Rename 'settingGroups' to 'groupMap'\n\n* Remove the hard-coded 'SETTING_CATEGORIES'\n  and use Object.keys instead\n\n* Store the groups of settings in state\n\n* Use MUI Link rather than raw <a>", "committedDate": "2020-03-18T01:16:05Z", "type": "commit"}, {"oid": "3b31faf7f3285cd94391ebb646aa4739dac93bbf", "url": "https://github.com/openequella/openEQUELLA/commit/3b31faf7f3285cd94391ebb646aa4739dac93bbf", "message": "* Import MUI components at once\n\n* Return the results of 'AxiosResponse' instead of the response itself\n\n* Use MUI Grid for a few For controls", "committedDate": "2020-03-18T04:29:14Z", "type": "commit"}, {"oid": "e815d455ba90743583ce1a0604f7c9a92f713685", "url": "https://github.com/openequella/openEQUELLA/commit/e815d455ba90743583ce1a0604f7c9a92f713685", "message": "* Use JSDoc to create better comments for three important functions\n\n* Add one language string for the Admin Console download link", "committedDate": "2020-03-18T05:25:28Z", "type": "commit"}, {"oid": "12a6e53b7664295ed7f2026e35240b14e6637af3", "url": "https://github.com/openequella/openEQUELLA/commit/12a6e53b7664295ed7f2026e35240b14e6637af3", "message": "Include es2020 in the compilation", "committedDate": "2020-03-18T06:32:17Z", "type": "commit"}, {"oid": "2367f8acddc8a3b365d529897651f827b9f4075a", "url": "https://github.com/openequella/openEQUELLA/commit/2367f8acddc8a3b365d529897651f827b9f4075a", "message": "Make 'handleError' not limited to AxiosError", "committedDate": "2020-03-18T06:37:51Z", "type": "commit"}, {"oid": "e16c6bdb239ad8d2ea0d60a8f3fbdfdddd5bef77", "url": "https://github.com/openequella/openEQUELLA/commit/e16c6bdb239ad8d2ea0d60a8f3fbdfdddd5bef77", "message": "Add cancel token for fetching general settings and the UI setting", "committedDate": "2020-03-19T03:31:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc3MjE1Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r394772153", "bodyText": "I did not add cancel token here because cancelling this request will result in different user experience, and it is out of the scope of this PR.", "author": "PenghaiZhang", "createdAt": "2020-03-19T03:34:50Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPageModule.ts", "diffHunk": "@@ -1,16 +1,22 @@\n-import Axios, { AxiosPromise } from \"axios\";\n+import Axios, { AxiosPromise, CancelToken } from \"axios\";\n import { GeneralSetting, UISetting } from \"./SettingsPageEntry\";\n import { Config } from \"../config\";\n \n const GET_SETTINGS_URL = `${Config.baseUrl}api/settings`;\n const GET_UI_SETTINGS_URL = `${GET_SETTINGS_URL}/ui`;\n \n-export const fetchSettings = (): Promise<GeneralSetting[]> => {\n-  return Axios.get<GeneralSetting[]>(GET_SETTINGS_URL).then(res => res.data);\n+export const fetchSettings = (\n+  token: CancelToken\n+): Promise<GeneralSetting[]> => {\n+  return Axios.get<GeneralSetting[]>(GET_SETTINGS_URL, {\n+    cancelToken: token\n+  }).then(res => res.data);\n };\n \n-export const fetchUISetting = (): Promise<UISetting> => {\n-  return Axios.get<UISetting>(GET_UI_SETTINGS_URL).then(res => res.data);\n+export const fetchUISetting = (token: CancelToken): Promise<UISetting> => {\n+  return Axios.get<UISetting>(GET_UI_SETTINGS_URL, {\n+    cancelToken: token\n+  }).then(res => res.data);\n };\n \n export const saveUISetting = (", "originalCommit": "e16c6bdb239ad8d2ea0d60a8f3fbdfdddd5bef77", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a8a60887a095c0983d65656ac4cd7efe3443e2f3", "url": "https://github.com/openequella/openEQUELLA/commit/a8a60887a095c0983d65656ac4cd7efe3443e2f3", "message": "Merge branch 'component/search_configuration' into feature/convert-purs-to-tsx-for-setting-menu", "committedDate": "2020-03-19T05:03:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NTMwOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r395365309", "bodyText": "Could useEffect and useState be destructured either on the import from react or at the beginning of the file?", "author": "ChristianMurphy", "createdAt": "2020-03-19T22:58:27Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/SettingsPage.tsx", "diffHunk": "@@ -0,0 +1,177 @@\n+import * as React from \"react\";\n+import axios from \"axios\";\n+import {\n+  Theme,\n+  ExpansionPanel,\n+  ExpansionPanelSummary,\n+  ExpansionPanelDetails,\n+  Typography,\n+  List,\n+  ListItem,\n+  ListItemText,\n+  CircularProgress\n+} from \"@material-ui/core\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../mainui/Template\";\n+import { fetchSettings } from \"./SettingsPageModule\";\n+import { GeneralSetting } from \"./SettingsPageEntry\";\n+import { languageStrings } from \"../util/langstrings\";\n+import MUILink from \"@material-ui/core/Link\";\n+import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n+import { Link } from \"react-router-dom\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import AdminDownloadDialog from \"../settings/AdminDownloadDialog\";\n+import { ReactElement } from \"react\";\n+import UISettingEditor from \"./UISettingEditor\";\n+import { generateFromError } from \"../api/errors\";\n+import { groupMap, SettingGroup } from \"./SettingGroups\";\n+\n+const useStyles = makeStyles((theme: Theme) => {\n+  return {\n+    heading: {\n+      fontSize: theme.typography.pxToRem(15),\n+      flexBasis: \"33.33%\",\n+      flexShrink: 0\n+    },\n+    secondaryHeading: {\n+      fontSize: theme.typography.pxToRem(15)\n+    },\n+    progress: {\n+      display: \"flex\",\n+      marginTop: theme.spacing.unit * 4,\n+      justifyContent: \"center\"\n+    }\n+  };\n+});\n+\n+interface SettingsPageProps extends TemplateUpdateProps {\n+  refreshUser: () => void;\n+}\n+\n+const SettingsPage = ({ refreshUser, updateTemplate }: SettingsPageProps) => {\n+  const classes = useStyles();\n+\n+  const [adminDialogOpen, setAdminDialogOpen] = React.useState<boolean>(false);\n+  const [loading, setLoading] = React.useState<boolean>(true);\n+  const [settingGroups, setSettingGroups] = React.useState<SettingGroup[]>([]);\n+\n+  React.useEffect(() => {\n+    updateTemplate(templateDefaults(languageStrings[\"com.equella.core\"].title));\n+  }, []);\n+\n+  React.useEffect(() => {", "originalCommit": "a8a60887a095c0983d65656ac4cd7efe3443e2f3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MDQwMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1541#discussion_r395370401", "bodyText": "Sure can.", "author": "PenghaiZhang", "createdAt": "2020-03-19T23:13:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM2NTMwOQ=="}], "type": "inlineReview"}, {"oid": "a269d9fb9f8ccea85afce2cde36b344fcfebfd1e", "url": "https://github.com/openequella/openEQUELLA/commit/a269d9fb9f8ccea85afce2cde36b344fcfebfd1e", "message": "Destructure 'useEffect' and 'useState'", "committedDate": "2020-03-19T23:12:39Z", "type": "commit"}]}