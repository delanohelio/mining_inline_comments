{"pr_number": 2411, "pr_title": "Feature/view attachments", "pr_createdAt": "2020-10-15T06:15:10Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2411", "timeline": [{"oid": "bb61c853abce2043c3586d5cdb50fc0db04968c2", "url": "https://github.com/openequella/openEQUELLA/commit/bb61c853abce2043c3586d5cdb50fc0db04968c2", "message": "feat(front-end): Establish new MimeTypesModule\n\nIncluded refactoring method from SearchFilterSettingsModule.ts while also addressing a minor typo in function name for validateMimeTypeName.", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "dfa461d9ca3349ce9b461328e0c764e6d505cfe3", "url": "https://github.com/openequella/openEQUELLA/commit/dfa461d9ca3349ce9b461328e0c764e6d505cfe3", "message": "chore(oeq-ts-rest-api): Add viewer type \"save\"", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "ca4f24834aad12bd35bd09fdca7704be615a2f9f", "url": "https://github.com/openequella/openEQUELLA/commit/ca4f24834aad12bd35bd09fdca7704be615a2f9f", "message": "feat(front-end): Add a Lightbox component", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "9e9a06f3c038f6d7de077b24b74c693ba37e089c", "url": "https://github.com/openequella/openEQUELLA/commit/9e9a06f3c038f6d7de077b24b74c693ba37e089c", "message": "feat(front-end): Make Lightbox title param optional", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "2f5df93cb4e548486c8d5e83de5547885aaf4c0a", "url": "https://github.com/openequella/openEQUELLA/commit/2f5df93cb4e548486c8d5e83de5547885aaf4c0a", "message": "feat(front-end): Add support to MimeTypesModule for retrieving viewer configurations", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "3d74bf3d3f7e83927f1901461d9a5f5afe96df8a", "url": "https://github.com/openequella/openEQUELLA/commit/3d74bf3d3f7e83927f1901461d9a5f5afe96df8a", "message": "chore(front-end): Use more relevant attachment description", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "bff171056ac8c7f48c78678cc19ef736b1f2ea34", "url": "https://github.com/openequella/openEQUELLA/commit/bff171056ac8c7f48c78678cc19ef736b1f2ea34", "message": "feat(front-end): Create new ViewerModule to assist with determining viewer", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "ebb606dac760fc67b9141a7bddcb3e1b79324f53", "url": "https://github.com/openequella/openEQUELLA/commit/ebb606dac760fc67b9141a7bddcb3e1b79324f53", "message": "feat(front-end): Create new ItemAttachmentLink for linking to attachments / viewer", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "944ffc5e5b1c5c7deec0b6a0e3fe932c45c3a105", "url": "https://github.com/openequella/openEQUELLA/commit/944ffc5e5b1c5c7deec0b6a0e3fe932c45c3a105", "message": "feat(front-end): Integrate ItemAttachmentLink for linking to attachments / viewer", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "0819a7557660953f9a3b03e5631a209af34a7d6b", "url": "https://github.com/openequella/openEQUELLA/commit/0819a7557660953f9a3b03e5631a209af34a7d6b", "message": "chore(front-end): Tidy-up and document MIME type validator regex", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "b458cc0ef0ca739faa6b2d5510016828e5cc0ed3", "url": "https://github.com/openequella/openEQUELLA/commit/b458cc0ef0ca739faa6b2d5510016828e5cc0ed3", "message": "chore(front-end): Support optional attachments SearchResult.test.tsx", "committedDate": "2020-10-15T03:09:17Z", "type": "commit"}, {"oid": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "url": "https://github.com/openequella/openEQUELLA/commit/c4dee709dbdba69e1235fc4adaa50f2a127fe020", "message": "fix(front-end): Properly handle when there are _no_ attachments\n\nWhen there we no attachments the SearchResult was getting in an infinite loop of state updates. Although it was happy when with an empty collection ([]), for some reason (even though there is a default param to []) when it 'attachments' was undefined, things spiraled out of control.\n\nThis is the case when a user has insufficient privileges to see attachments - and then the property is omitted from the search2 response.", "committedDate": "2020-10-15T05:41:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzNjIzNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506036237", "bodyText": "What about giving an example for this regex ?", "author": "PenghaiZhang", "createdAt": "2020-10-16T03:57:54Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/MimeTypesModule.ts", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { API_BASE_URL } from \"../config\";\n+\n+export const getMIMETypesFromServer = (): Promise<\n+  OEQ.MimeType.MimeTypeEntry[]\n+> => OEQ.MimeType.listMimeTypes(API_BASE_URL);\n+\n+/**\n+ * Given a MIME Type of the form `<type>/<sub-type>`, validate correct form and then return\n+ * `type` and `sub-type` in a tuple. `sub-type` will actually also include any attributes, etc. as\n+ * that's all we need for now (i.e. we're not so interested in sub-types yet).\n+ *\n+ * @param mimeType a MIME type of the form `<type>/<sub-type>`\n+ */\n+export const splitMimeType = (mimeType: string): [string, string] => {\n+  const validMimeTypeRegex = /^\\w+\\/[+.=; \\w\\-]+$/i;", "originalCommit": "bb61c853abce2043c3586d5cdb50fc0db04968c2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0MjgwMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506042801", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Content to be surrounded byt he link.\n          \n          \n            \n               * Content to be surrounded by the link.", "author": "PenghaiZhang", "createdAt": "2020-10-16T04:20:12Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwMTk5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506001996", "bodyText": "We are getting eslint warnings for it blocks starting on 249, 254 and 261 - (it wouldn't let me select these as comment targets as they aren't part of the diff).\n\"Test has no assertions\". Now obviously it does, but they are within the expectSearchItemsCalledWithStatus(liveStatuses) function.\nI wonder if there's any way to get eslint to be happy with that. Perhaps getting it to fit within a standard expect call?\nAlong the lines of: expect(SearchItemsCalledWithStatus(liveStatuses)).toBeTruthy();\nJust a thought - I know this was unchanged within this PR, this review simply highlighted it to me. Feel free to ignore.", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:41:40Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -85,6 +86,13 @@ mockCollections.mockResolvedValue(getCollectionMap);\n mockListUsers.mockResolvedValue(UserSearchMock.users);\n mockListClassification.mockResolvedValue(CategorySelectorMock.classifications);\n \n+// Mock out a collaborator of SearchResult\n+jest\n+  .spyOn(MimeTypesModule, \"getMimeTypeDefaultViewerDetails\")\n+  .mockResolvedValue({\n+    viewerId: \"fancy\",\n+  } as OEQ.MimeType.MimeTypeViewerDetail);\n+", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxMTI2Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507411266", "bodyText": "Yeah, I did see this popping up - but as mentioned, outside the scope of this one.\nAs for a solution.. I wonder if we can tweak the pattern (i.e. check for a function starting with expect). But if not, I see this as a low value rule and would be included to turn it off.", "author": "edalex-ian", "createdAt": "2020-10-19T03:32:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwMTk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwMzA4NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506003085", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Content to be surrounded byt he link.\n          \n          \n            \n               * Content to be surrounded by the link.", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:43:34Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwNDk3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506004971", "bodyText": "These two comments seem a little strange to me - it makes it seem like Lightbox is an example of what could be in the variable rather than an example of a type of viewer.\nPerhaps worth omitting the e.g. Lightbox., or rewording?", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:46:57Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.\n+   */\n+  children: React.ReactNode;\n+  /**\n+   * Optional description that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  description?: string;\n+  /**\n+   * Optional mimeType that will be passed to chosen viewer - e.g. Lightbox.", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwNTM1MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506005351", "bodyText": "Since we are using React, you can safely use ReactElement rather than JSX.Element.", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:47:33Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.\n+   */\n+  children: React.ReactNode;\n+  /**\n+   * Optional description that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  description?: string;\n+  /**\n+   * Optional mimeType that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  mimeType?: string;\n+  /**\n+   * Viewer details for the attachment this link is pointing to. Controls which viewer is triggered\n+   * when the link is clicked.\n+   */\n+  viewerDetails: ViewerDefinition;\n+}\n+\n+/**\n+ * A component to be used for viewing attachments in a uniform manner.\n+ */\n+const ItemAttachmentLink = ({\n+  children,\n+  description,\n+  mimeType,\n+  viewerDetails: [viewer, url],\n+}: ItemAttachmentLinkProps) => {\n+  const [showLightbox, setShowLightbox] = useState<boolean>(false);\n+\n+  let link: JSX.Element = (", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyNTA1Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507425052", "bodyText": "I'm just explicitly matching the inferred type here. So I think I'll leave as is.", "author": "edalex-ian", "createdAt": "2020-10-19T03:56:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwNTM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODIzMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506008231", "bodyText": "Got a feeling the linter might be unhappy with this - I seem to remember there being an rule regarding  tags without a valid href being a no-no.\nPerhaps its just that if there is a href, it must be a valid one? If so, not including one might be alright.", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:52:15Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.\n+   */\n+  children: React.ReactNode;\n+  /**\n+   * Optional description that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  description?: string;\n+  /**\n+   * Optional mimeType that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  mimeType?: string;\n+  /**\n+   * Viewer details for the attachment this link is pointing to. Controls which viewer is triggered\n+   * when the link is clicked.\n+   */\n+  viewerDetails: ViewerDefinition;\n+}\n+\n+/**\n+ * A component to be used for viewing attachments in a uniform manner.\n+ */\n+const ItemAttachmentLink = ({\n+  children,\n+  description,\n+  mimeType,\n+  viewerDetails: [viewer, url],\n+}: ItemAttachmentLinkProps) => {\n+  const [showLightbox, setShowLightbox] = useState<boolean>(false);\n+\n+  let link: JSX.Element = (\n+    <a href={url} target=\"_blank\" rel=\"noreferrer\">\n+      {children}\n+    </a>\n+  );\n+  switch (viewer) {\n+    case \"lightbox\":\n+      if (!mimeType) {\n+        throw new Error(\n+          \"'mimeType' must be specified when viewer is 'lightbox'.\"\n+        );\n+      }\n+      link = (\n+        <>\n+          <a", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNzcwMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507417701", "bodyText": "Yeah, think I might've seen this. Wanted me instead to do a button and style as per a link. Didn't love that idea. \ud83e\udd14\nI run it again and read the warning more. But I may suppress it.", "author": "edalex-ian", "createdAt": "2020-10-19T03:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2NTk2Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r508165963", "bodyText": "Changed to use MUI <Link> with component set to button. \ud83d\ude09", "author": "edalex-ian", "createdAt": "2020-10-20T02:10:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODQxNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506008415", "bodyText": "Language string here? Or do we not do those for error strings?", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:52:42Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.\n+   */\n+  children: React.ReactNode;\n+  /**\n+   * Optional description that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  description?: string;\n+  /**\n+   * Optional mimeType that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  mimeType?: string;\n+  /**\n+   * Viewer details for the attachment this link is pointing to. Controls which viewer is triggered\n+   * when the link is clicked.\n+   */\n+  viewerDetails: ViewerDefinition;\n+}\n+\n+/**\n+ * A component to be used for viewing attachments in a uniform manner.\n+ */\n+const ItemAttachmentLink = ({\n+  children,\n+  description,\n+  mimeType,\n+  viewerDetails: [viewer, url],\n+}: ItemAttachmentLinkProps) => {\n+  const [showLightbox, setShowLightbox] = useState<boolean>(false);\n+\n+  let link: JSX.Element = (\n+    <a href={url} target=\"_blank\" rel=\"noreferrer\">\n+      {children}\n+    </a>\n+  );\n+  switch (viewer) {\n+    case \"lightbox\":\n+      if (!mimeType) {\n+        throw new Error(\n+          \"'mimeType' must be specified when viewer is 'lightbox'.\"", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxMzQyMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507413420", "bodyText": "No, not for error strings and log messages. These are targetted at developers.", "author": "edalex-ian", "createdAt": "2020-10-19T03:35:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwODQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwOTIwOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506009208", "bodyText": "So these colours will be hardcoded, as opposed to derived from the theme?", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:54:26Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/Lightbox.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Backdrop,\n+  Card,\n+  CardContent,\n+  IconButton,\n+  Theme,\n+  Toolbar,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import CloseIcon from \"@material-ui/icons/Close\";\n+import OpenInNewIcon from \"@material-ui/icons/OpenInNew\";\n+import * as React from \"react\";\n+import { SyntheticEvent } from \"react\";\n+import {\n+  isBrowserSupportedAudio,\n+  isBrowserSupportedVideo,\n+  splitMimeType,\n+} from \"../modules/MimeTypesModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+const useStyles = makeStyles((theme: Theme) => ({\n+  lightboxBackdrop: {\n+    backgroundColor: \"#000000cc\",\n+    cursor: \"default\", // Replace the backdrop 'pointer' style\n+    zIndex: theme.zIndex.drawer + 1,\n+  },\n+  lightboxAudio: {\n+    minWidth: 200,\n+    width: \"60vw\",\n+  },\n+  lightboxContent: {\n+    maxWidth: \"80vw\",\n+    maxHeight: \"80vh\",\n+  },\n+  lightboxImage: {\n+    minWidth: 100,\n+    minHeight: 100,\n+  },\n+  menuButton: {\n+    color: \"inherit\",\n+    \"&:hover\": {\n+      background: \"#505050\",\n+    },\n+  },\n+  title: {\n+    flexGrow: 1,\n+  },\n+  toolbar: {\n+    backgroundColor: \"#0a0a0a\",", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNDYyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507414623", "bodyText": "Correct. The lightbox is rather style specific and detached from the standard UI theme. That's typically the way of lightboxes.\nIf we did want to tie it to the theme, we'd want to use the dark part of the MUI theme. But we currently don't offer any really control of this, so I went with this approach.", "author": "edalex-ian", "createdAt": "2020-10-19T03:37:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAwOTIwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxMDE0MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506010141", "bodyText": "This is strange. I have never seen both variant and component set like this.\nIf you omit component here, would it still look the same? I'm pretty sure elsewhere we have h5s that in the html are h2s that didn't get set by the component.", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:56:15Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/Lightbox.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Backdrop,\n+  Card,\n+  CardContent,\n+  IconButton,\n+  Theme,\n+  Toolbar,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import CloseIcon from \"@material-ui/icons/Close\";\n+import OpenInNewIcon from \"@material-ui/icons/OpenInNew\";\n+import * as React from \"react\";\n+import { SyntheticEvent } from \"react\";\n+import {\n+  isBrowserSupportedAudio,\n+  isBrowserSupportedVideo,\n+  splitMimeType,\n+} from \"../modules/MimeTypesModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+const useStyles = makeStyles((theme: Theme) => ({\n+  lightboxBackdrop: {\n+    backgroundColor: \"#000000cc\",\n+    cursor: \"default\", // Replace the backdrop 'pointer' style\n+    zIndex: theme.zIndex.drawer + 1,\n+  },\n+  lightboxAudio: {\n+    minWidth: 200,\n+    width: \"60vw\",\n+  },\n+  lightboxContent: {\n+    maxWidth: \"80vw\",\n+    maxHeight: \"80vh\",\n+  },\n+  lightboxImage: {\n+    minWidth: 100,\n+    minHeight: 100,\n+  },\n+  menuButton: {\n+    color: \"inherit\",\n+    \"&:hover\": {\n+      background: \"#505050\",\n+    },\n+  },\n+  title: {\n+    flexGrow: 1,\n+  },\n+  toolbar: {\n+    backgroundColor: \"#0a0a0a\",\n+    color: \"#fafafa\",\n+    position: \"absolute\",\n+    top: 0,\n+    width: \"100%\",\n+  },\n+}));\n+\n+export interface LightboxProps {\n+  /** MIME type of the items specified by `src` */\n+  mimeType: string;\n+  /** Function to call when the Lightbox is closing. */\n+  onClose: () => void;\n+  /** Control whether to hide (`false`) or show (`true`) the Lightbox. */\n+  open: boolean;\n+  /** URL for the item to display in the Lightbox. */\n+  src: string;\n+  /** Title to display at the top of the Lightbox. */\n+  title?: string;\n+}\n+\n+const Lightbox = ({ mimeType, onClose, open, src, title }: LightboxProps) => {\n+  const classes = useStyles();\n+  const {\n+    close: labelClose,\n+    openInNewWindow: labelOpenInNewWindow,\n+  } = languageStrings.common.action;\n+  const {\n+    unsupportedContent: labelUnsupportedContent,\n+  } = languageStrings.lightboxComponent;\n+\n+  let content = (\n+    <Card>\n+      <CardContent>\n+        <Typography variant=\"h5\" component=\"h2\">", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNTI3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507415279", "bodyText": "We do this in a few other places - and is taken from one of the examples. The idea is one part controls presentation, while the other provides for document structure to help screen readers and the like.", "author": "edalex-ian", "createdAt": "2020-10-19T03:38:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxMDE0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAxMTg4MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506011881", "bodyText": "Really like this. Regex definitions can be so opaque and hard to come back to.", "author": "SammyIsConfused", "createdAt": "2020-10-16T02:59:21Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/MimeTypesModule.ts", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { memoize } from \"lodash\";\n+import { API_BASE_URL } from \"../config\";\n+\n+export const getMIMETypesFromServer = (): Promise<\n+  OEQ.MimeType.MimeTypeEntry[]\n+> => OEQ.MimeType.listMimeTypes(API_BASE_URL);\n+\n+/**\n+ * Retrieve the Viewer Configuration for the specified MIME type from the server - or from cache.\n+ * Note this function is cached (memoized) and so any server side changes will not take effect\n+ * until the app is reloaded.\n+ *\n+ * @param mimeType the MIME type to get the configuration for\n+ */\n+export const getMimeTypeViewerConfiguration: (\n+  mimeType: string\n+) => Promise<OEQ.MimeType.MimeTypeViewerConfiguration> = memoize(\n+  async (mimeType: string): Promise<OEQ.MimeType.MimeTypeViewerConfiguration> =>\n+    await OEQ.MimeType.getViewersForMimeType(API_BASE_URL, mimeType)\n+);\n+\n+/**\n+ * Retrieve the default viewer details for the specified MIME type from the server - or from cache.\n+ * This function relies on `getMimeTypeViewerConfiguration` which is cached (memoized) and so any\n+ * server side changes will not take effect until the app is reloaded.\n+ *\n+ * @param mimeType the MIME type to get default viewer details for\n+ */\n+export const getMimeTypeDefaultViewerDetails = async (\n+  mimeType: string\n+): Promise<OEQ.MimeType.MimeTypeViewerDetail> => {\n+  const cfg = await getMimeTypeViewerConfiguration(mimeType);\n+  const viewerDetails = cfg.viewers.find(\n+    (v) => v.viewerId === cfg.defaultViewer\n+  );\n+  if (!viewerDetails) {\n+    throw new ReferenceError(\n+      `Missing viewer details for default viewer with id: \"${cfg.defaultViewer}\"`\n+    );\n+  }\n+\n+  return viewerDetails;\n+};\n+\n+/**\n+ * Given a MIME Type of the form `<type>/<sub-type>`, validate correct form and then return\n+ * `type` and `sub-type` in a tuple. `sub-type` will actually also include any attributes, etc. as\n+ * that's all we need for now (i.e. we're not so interested in sub-types yet).\n+ *\n+ * @param mimeType a MIME type of the form `<type>/<sub-type>`\n+ */\n+export const splitMimeType = (mimeType: string): [string, string] => {\n+  // Regex break down:", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NzQ3OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506047478", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Optional function to dependency inject for retrieval of viewers (good for storybook etc). Will\n          \n          \n            \n               * Optional function to inject dependency for retrieval of viewers (good for storybook etc). Will", "author": "SammyIsConfused", "createdAt": "2020-10-16T04:40:06Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchResult.tsx", "diffHunk": "@@ -87,6 +90,15 @@ const useStyles = makeStyles((theme: Theme) => {\n });\n \n export interface SearchResultProps {\n+  /**\n+   * Optional function to dependency inject for retrieval of viewers (good for storybook etc). Will", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQxNjUwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507416504", "bodyText": "hmmm, ordering was deliberate to highlight this is undertaking dependency injection. As this is something we infrequently do.", "author": "edalex-ian", "createdAt": "2020-10-19T03:39:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NzQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NzczOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506047739", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Short circuit if this component is unmounted before all it's comms is done.\n          \n          \n            \n                  // Short circuit if this component is unmounted before all its comms is done.", "author": "SammyIsConfused", "createdAt": "2020-10-16T04:41:08Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchResult.tsx", "diffHunk": "@@ -113,13 +126,58 @@ export default function SearchResult({\n   },\n   highlights,\n }: SearchResultProps) {\n-  const classes = useStyles();\n+  interface AttachmentAndViewerDetails {\n+    attachment: OEQ.Search.Attachment;\n+    viewerDetails?: OEQ.MimeType.MimeTypeViewerDetail;\n+  }\n \n-  const searchResultStrings = languageStrings.searchpage.searchresult;\n+  const classes = useStyles();\n \n-  const [attachExpanded, setAttachExpanded] = React.useState(\n+  const [attachExpanded, setAttachExpanded] = useState(\n     displayOptions?.standardOpen ?? false\n   );\n+  const [\n+    attachmentsWithViewerDetails,\n+    setAttachmentsWithViewerDetails,\n+  ] = useState<AttachmentAndViewerDetails[]>([]);\n+\n+  const searchResultStrings = languageStrings.searchpage.searchresult;\n+\n+  // Responsible for determining the MIME type viewer for the provided attachments\n+  useEffect(() => {\n+    let mounted = true;\n+\n+    if (!attachments || !attachments.length) {\n+      // If there are no attachments, skip this effect\n+      return;\n+    }\n+\n+    const transform = async (\n+      a: OEQ.Search.Attachment\n+    ): Promise<AttachmentAndViewerDetails> => {\n+      const viewerDetails = a.mimeType\n+        ? await getViewerDetails(a.mimeType)\n+        : undefined;\n+      return {\n+        attachment: a,\n+        viewerDetails: viewerDetails,\n+      };\n+    };\n+\n+    (async () => {\n+      const viewerDetails = await Promise.all(\n+        attachments.map<Promise<AttachmentAndViewerDetails>>(transform)\n+      );\n+      if (mounted) {\n+        setAttachmentsWithViewerDetails(viewerDetails);\n+      }\n+    })();\n+\n+    return () => {\n+      // Short circuit if this component is unmounted before all it's comms is done.", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0ODExMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506048112", "bodyText": "Got a feeling you can just use item={item} here.", "author": "SammyIsConfused", "createdAt": "2020-10-16T04:42:41Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchResultList.tsx", "diffHunk": "@@ -174,3 +155,27 @@ export const SearchResultList = ({\n     </Card>\n   );\n };\n+\n+/**\n+ * Helper function for generating a collection of child `<SearchResult>` elements (for use inside\n+ * `<SearchResultList>`) from a collection of OEQ.Search.SearchResultItem[].\n+ *\n+ * @param items the search result items to map over\n+ * @param highlights a list of highlight terms\n+ * @param getViewerDetails optional function to override retrieval of viewer details\n+ */\n+export const mapSearchResultItems = (\n+  items: OEQ.Search.SearchResultItem[],\n+  highlights: string[],\n+  getViewerDetails?: (\n+    mimeType: string\n+  ) => Promise<OEQ.MimeType.MimeTypeViewerDetail>\n+): React.ReactNode[] =>\n+  items.map((item) => (\n+    <SearchResult\n+      key={item.uuid}\n+      item={{ ...item }}", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyNzAwMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507427000", "bodyText": "Sure can. I remember was going to copy the object (hence the spread), but then decided the caller can (hence never got back to doing a full copy). So this definitely needs to be rectified.", "author": "edalex-ian", "createdAt": "2020-10-19T03:59:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0ODExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NDY1NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506044655", "bodyText": "We have mixed use of MUI Link and <a> across different pages. Do we want to consistently use either one ?", "author": "PenghaiZhang", "createdAt": "2020-10-16T04:28:13Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.\n+   */\n+  children: React.ReactNode;\n+  /**\n+   * Optional description that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  description?: string;\n+  /**\n+   * Optional mimeType that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  mimeType?: string;\n+  /**\n+   * Viewer details for the attachment this link is pointing to. Controls which viewer is triggered\n+   * when the link is clicked.\n+   */\n+  viewerDetails: ViewerDefinition;\n+}\n+\n+/**\n+ * A component to be used for viewing attachments in a uniform manner.\n+ */\n+const ItemAttachmentLink = ({\n+  children,\n+  description,\n+  mimeType,\n+  viewerDetails: [viewer, url],\n+}: ItemAttachmentLinkProps) => {\n+  const [showLightbox, setShowLightbox] = useState<boolean>(false);\n+\n+  let link: JSX.Element = (\n+    <a href={url} target=\"_blank\" rel=\"noreferrer\">", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2NjExNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r508166115", "bodyText": "MUI <Link> seems definitely the way we should be going. I've converted accordingly.", "author": "edalex-ian", "createdAt": "2020-10-20T02:11:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NDY1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NTQ3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506045479", "bodyText": "I remember there is a MUI rule saying one should not use a link if the link is not really working as a link. A button should be used instead.  I may be wrong though.", "author": "PenghaiZhang", "createdAt": "2020-10-16T04:31:41Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.\n+   */\n+  children: React.ReactNode;\n+  /**\n+   * Optional description that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  description?: string;\n+  /**\n+   * Optional mimeType that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  mimeType?: string;\n+  /**\n+   * Viewer details for the attachment this link is pointing to. Controls which viewer is triggered\n+   * when the link is clicked.\n+   */\n+  viewerDetails: ViewerDefinition;\n+}\n+\n+/**\n+ * A component to be used for viewing attachments in a uniform manner.\n+ */\n+const ItemAttachmentLink = ({\n+  children,\n+  description,\n+  mimeType,\n+  viewerDetails: [viewer, url],\n+}: ItemAttachmentLinkProps) => {\n+  const [showLightbox, setShowLightbox] = useState<boolean>(false);\n+\n+  let link: JSX.Element = (\n+    <a href={url} target=\"_blank\" rel=\"noreferrer\">\n+      {children}\n+    </a>\n+  );\n+  switch (viewer) {\n+    case \"lightbox\":\n+      if (!mimeType) {\n+        throw new Error(\n+          \"'mimeType' must be specified when viewer is 'lightbox'.\"\n+        );\n+      }\n+      link = (\n+        <>\n+          <a", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE2NjMzNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r508166336", "bodyText": "Correct. And thanks to MUI <Link> I was able to simply: <Link component=\"button\" ....>", "author": "edalex-ian", "createdAt": "2020-10-20T02:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NTQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NTg5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506045896", "bodyText": "Why not explicitly set the value to be true ?", "author": "PenghaiZhang", "createdAt": "2020-10-16T04:33:31Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.\n+   */\n+  children: React.ReactNode;\n+  /**\n+   * Optional description that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  description?: string;\n+  /**\n+   * Optional mimeType that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  mimeType?: string;\n+  /**\n+   * Viewer details for the attachment this link is pointing to. Controls which viewer is triggered\n+   * when the link is clicked.\n+   */\n+  viewerDetails: ViewerDefinition;\n+}\n+\n+/**\n+ * A component to be used for viewing attachments in a uniform manner.\n+ */\n+const ItemAttachmentLink = ({\n+  children,\n+  description,\n+  mimeType,\n+  viewerDetails: [viewer, url],\n+}: ItemAttachmentLinkProps) => {\n+  const [showLightbox, setShowLightbox] = useState<boolean>(false);\n+\n+  let link: JSX.Element = (\n+    <a href={url} target=\"_blank\" rel=\"noreferrer\">\n+      {children}\n+    </a>\n+  );\n+  switch (viewer) {\n+    case \"lightbox\":\n+      if (!mimeType) {\n+        throw new Error(\n+          \"'mimeType' must be specified when viewer is 'lightbox'.\"\n+        );\n+      }\n+      link = (\n+        <>\n+          <a\n+            onClick={(event: SyntheticEvent) => {\n+              setShowLightbox(!showLightbox);", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQzMDI1MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507430250", "bodyText": "These are done / treated as toggles. So the underlying events/effects are simply monitoring for any change to the variable. So all we want to / should do is invert the state to ensure it changes. \ud83e\udd37", "author": "edalex-ian", "createdAt": "2020-10-19T04:05:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0NTg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0Njg4MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506046880", "bodyText": "If nothing is done in this case, why not remove it ? I guess you still  keep it because you want to clearly match the type viewer ?\nIf this case is removed, then this switch could be simplified to a if.", "author": "PenghaiZhang", "createdAt": "2020-10-16T04:37:42Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/ItemAttachmentLink.tsx", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { SyntheticEvent, useState } from \"react\";\n+import { ViewerDefinition } from \"../modules/ViewerModule\";\n+import Lightbox from \"./Lightbox\";\n+\n+export interface ItemAttachmentLinkProps {\n+  /**\n+   * Content to be surrounded byt he link.\n+   */\n+  children: React.ReactNode;\n+  /**\n+   * Optional description that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  description?: string;\n+  /**\n+   * Optional mimeType that will be passed to chosen viewer - e.g. Lightbox.\n+   */\n+  mimeType?: string;\n+  /**\n+   * Viewer details for the attachment this link is pointing to. Controls which viewer is triggered\n+   * when the link is clicked.\n+   */\n+  viewerDetails: ViewerDefinition;\n+}\n+\n+/**\n+ * A component to be used for viewing attachments in a uniform manner.\n+ */\n+const ItemAttachmentLink = ({\n+  children,\n+  description,\n+  mimeType,\n+  viewerDetails: [viewer, url],\n+}: ItemAttachmentLinkProps) => {\n+  const [showLightbox, setShowLightbox] = useState<boolean>(false);\n+\n+  let link: JSX.Element = (\n+    <a href={url} target=\"_blank\" rel=\"noreferrer\">\n+      {children}\n+    </a>\n+  );\n+  switch (viewer) {\n+    case \"lightbox\":\n+      if (!mimeType) {\n+        throw new Error(\n+          \"'mimeType' must be specified when viewer is 'lightbox'.\"\n+        );\n+      }\n+      link = (\n+        <>\n+          <a\n+            onClick={(event: SyntheticEvent) => {\n+              setShowLightbox(!showLightbox);\n+              event.stopPropagation();\n+            }}\n+          >\n+            {children}\n+          </a>\n+          {showLightbox && ( // minor optimisation to minimise DOM\n+            <Lightbox\n+              mimeType={mimeType}\n+              onClose={() => setShowLightbox(false)}\n+              open={showLightbox}\n+              src={url}\n+              title={description}\n+            />\n+          )}\n+        </>\n+      );\n+      break;\n+    case \"link\":", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQzNTI3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507435274", "bodyText": "hmmm, interesting pick-up. Had to go back in time and ponder. I think this first foremost has come about as things evolved, but then also occured due thinking we still have to support a lot of viewers. But for now, that's really going to be in the future when we do the balance of New UI. So, can classify as YAGNI.\nI'll rework this, and maybe leave a comment.", "author": "edalex-ian", "createdAt": "2020-10-19T04:15:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0Njg4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ0Mzc4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507443789", "bodyText": "Aww yeah, now it's nicely declarative via a ternary operator. Thanks for the pick-up @PenghaiZhang \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-10-19T04:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0Njg4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0ODQxMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506048412", "bodyText": "items refer to Item attachments, don't they?", "author": "PenghaiZhang", "createdAt": "2020-10-16T04:43:55Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/Lightbox.tsx", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import {\n+  Backdrop,\n+  Card,\n+  CardContent,\n+  IconButton,\n+  Theme,\n+  Toolbar,\n+  Typography,\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+import CloseIcon from \"@material-ui/icons/Close\";\n+import OpenInNewIcon from \"@material-ui/icons/OpenInNew\";\n+import * as React from \"react\";\n+import { SyntheticEvent } from \"react\";\n+import {\n+  isBrowserSupportedAudio,\n+  isBrowserSupportedVideo,\n+  splitMimeType,\n+} from \"../modules/MimeTypesModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+\n+const useStyles = makeStyles((theme: Theme) => ({\n+  lightboxBackdrop: {\n+    backgroundColor: \"#000000cc\",\n+    cursor: \"default\", // Replace the backdrop 'pointer' style\n+    zIndex: theme.zIndex.drawer + 1,\n+  },\n+  lightboxAudio: {\n+    minWidth: 200,\n+    width: \"60vw\",\n+  },\n+  lightboxContent: {\n+    maxWidth: \"80vw\",\n+    maxHeight: \"80vh\",\n+  },\n+  lightboxImage: {\n+    minWidth: 100,\n+    minHeight: 100,\n+  },\n+  menuButton: {\n+    color: \"inherit\",\n+    \"&:hover\": {\n+      background: \"#505050\",\n+    },\n+  },\n+  title: {\n+    flexGrow: 1,\n+  },\n+  toolbar: {\n+    backgroundColor: \"#0a0a0a\",\n+    color: \"#fafafa\",\n+    position: \"absolute\",\n+    top: 0,\n+    width: \"100%\",\n+  },\n+}));\n+\n+export interface LightboxProps {\n+  /** MIME type of the items specified by `src` */", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1ODIzNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507458237", "bodyText": "Should probably just be 'item'. But yes, ultimately src is a URL to an attachment link provided from the server.\nAre you requesting or suggesting any change here?", "author": "edalex-ian", "createdAt": "2020-10-19T04:56:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0ODQxMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMjc0OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r508102749", "bodyText": "No, I was just confused as I thought the MIME type is an attachment/file's MIME type, not an Item's MIME type.", "author": "PenghaiZhang", "createdAt": "2020-10-19T22:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0ODQxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NTEzNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506055137", "bodyText": "We can also use some .\n[\n    // Standard\n    \"audio/mpeg\",\n    \"audio/ogg\",\n    \"audio/wav\",\n    // oEQ standard types\n    \"audio/x-mp3\",\n  ].some((supported) => mimeType.startsWith(supported));", "author": "PenghaiZhang", "createdAt": "2020-10-16T05:10:32Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/MimeTypesModule.ts", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { memoize } from \"lodash\";\n+import { API_BASE_URL } from \"../config\";\n+\n+export const getMIMETypesFromServer = (): Promise<\n+  OEQ.MimeType.MimeTypeEntry[]\n+> => OEQ.MimeType.listMimeTypes(API_BASE_URL);\n+\n+/**\n+ * Retrieve the Viewer Configuration for the specified MIME type from the server - or from cache.\n+ * Note this function is cached (memoized) and so any server side changes will not take effect\n+ * until the app is reloaded.\n+ *\n+ * @param mimeType the MIME type to get the configuration for\n+ */\n+export const getMimeTypeViewerConfiguration: (\n+  mimeType: string\n+) => Promise<OEQ.MimeType.MimeTypeViewerConfiguration> = memoize(\n+  async (mimeType: string): Promise<OEQ.MimeType.MimeTypeViewerConfiguration> =>\n+    await OEQ.MimeType.getViewersForMimeType(API_BASE_URL, mimeType)\n+);\n+\n+/**\n+ * Retrieve the default viewer details for the specified MIME type from the server - or from cache.\n+ * This function relies on `getMimeTypeViewerConfiguration` which is cached (memoized) and so any\n+ * server side changes will not take effect until the app is reloaded.\n+ *\n+ * @param mimeType the MIME type to get default viewer details for\n+ */\n+export const getMimeTypeDefaultViewerDetails = async (\n+  mimeType: string\n+): Promise<OEQ.MimeType.MimeTypeViewerDetail> => {\n+  const cfg = await getMimeTypeViewerConfiguration(mimeType);\n+  const viewerDetails = cfg.viewers.find(\n+    (v) => v.viewerId === cfg.defaultViewer\n+  );\n+  if (!viewerDetails) {\n+    throw new ReferenceError(\n+      `Missing viewer details for default viewer with id: \"${cfg.defaultViewer}\"`\n+    );\n+  }\n+\n+  return viewerDetails;\n+};\n+\n+/**\n+ * Given a MIME Type of the form `<type>/<sub-type>`, validate correct form and then return\n+ * `type` and `sub-type` in a tuple. `sub-type` will actually also include any attributes, etc. as\n+ * that's all we need for now (i.e. we're not so interested in sub-types yet).\n+ *\n+ * @param mimeType a MIME type of the form `<type>/<sub-type>`\n+ */\n+export const splitMimeType = (mimeType: string): [string, string] => {\n+  // Regex break down:\n+  // ^\\w+          Starting with 1 or more word characters\n+  // \\/            Followed by a forward slash\n+  // [+.=; \\w-]+$  Ending with 1 or more of the allowed characters: + . = ; <space> - or word characters\n+  // /i            And all done with case insensitivity\n+  const validMimeTypeRegex = /^\\w+\\/[+.=; \\w-]+$/i;\n+  if (!validMimeTypeRegex.test(mimeType)) {\n+    throw new TypeError(\n+      `Provided string [${mimeType}] is NOT a validly formatted MIME type.`\n+    );\n+  }\n+\n+  return mimeType.split(\"/\", 2) as [string, string];\n+};\n+\n+/**\n+ * Provides a quick check to see if the `mimeType` is a MIME type which can typically be\n+ * played by the built in browser audio player.\n+ *\n+ * @param mimeType A MIME type to be checked\n+ */\n+export const isBrowserSupportedAudio = (mimeType: string): boolean =>\n+  [\n+    // Standard\n+    \"audio/mpeg\",\n+    \"audio/ogg\",\n+    \"audio/wav\",\n+    // oEQ standard types\n+    \"audio/x-mp3\",\n+  ].find((supported) => mimeType.startsWith(supported)) !== undefined;", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MDkxNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507450917", "bodyText": "Ah yes! Thank you. I've redone both with some.", "author": "edalex-ian", "createdAt": "2020-10-19T04:43:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NTEzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NjQ2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506056467", "bodyText": "This function is imported from UI layer. Is this something we try to decouple  ?", "author": "PenghaiZhang", "createdAt": "2020-10-16T05:15:32Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/ViewerModule.ts", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { isLightboxSupportedMimeType } from \"../components/Lightbox\";", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ0ODA1Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507448056", "bodyText": "Very observant @PenghaiZhang , good to see you're paying attention. ;)\nThis was done deliberately and with consideration (before violating our goals). Ultimately with coupling targets we have to be pragmatic, and so they can be violated if required. In this case, the ViewerModule is determining business rules  targetting certain available viewers which are ultimately UI components. As a result, it unfortunately needs to know about what's happening in the view layer.\nThere are a few patterns we could use to abstract that, but I think that's probably adding unnecessary complexity at this point. If in the future we did need to rework this, at least the coupling issue would only be in one place - and is unlikely to spread. But if this grows - especially when we start looking at all the viewers we need to support - we can look at adding an abstraction layer.", "author": "edalex-ian", "createdAt": "2020-10-19T04:36:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NjQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwMzQxNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r508103416", "bodyText": "Thanks Ian for explaining !", "author": "PenghaiZhang", "createdAt": "2020-10-19T22:39:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1NjQ2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1ODQ3Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506058476", "bodyText": "We can remove !attachments because it is an empty array by default.", "author": "PenghaiZhang", "createdAt": "2020-10-16T05:23:07Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchResult.tsx", "diffHunk": "@@ -113,13 +126,58 @@ export default function SearchResult({\n   },\n   highlights,\n }: SearchResultProps) {\n-  const classes = useStyles();\n+  interface AttachmentAndViewerDetails {\n+    attachment: OEQ.Search.Attachment;\n+    viewerDetails?: OEQ.MimeType.MimeTypeViewerDetail;\n+  }\n \n-  const searchResultStrings = languageStrings.searchpage.searchresult;\n+  const classes = useStyles();\n \n-  const [attachExpanded, setAttachExpanded] = React.useState(\n+  const [attachExpanded, setAttachExpanded] = useState(\n     displayOptions?.standardOpen ?? false\n   );\n+  const [\n+    attachmentsWithViewerDetails,\n+    setAttachmentsWithViewerDetails,\n+  ] = useState<AttachmentAndViewerDetails[]>([]);\n+\n+  const searchResultStrings = languageStrings.searchpage.searchresult;\n+\n+  // Responsible for determining the MIME type viewer for the provided attachments\n+  useEffect(() => {\n+    let mounted = true;\n+\n+    if (!attachments || !attachments.length) {", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2MjAzNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507462034", "bodyText": "It would appear we can. But, there's a story behind this line...\nOriginally it was only if(!attachments) { and that worked fine. However when got tripped up by the low access user - where attachments is not even present in the response, this failed with excessive state updates and so I had to add the attachments.length check. Think I must've missed something... but all is now working as just:\nif(!attachments.length) {\n\n\ud83e\udd37", "author": "edalex-ian", "createdAt": "2020-10-19T05:04:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1ODQ3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1OTgzNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r506059834", "bodyText": "Do we need any error handling here ?", "author": "PenghaiZhang", "createdAt": "2020-10-16T05:27:33Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchResult.tsx", "diffHunk": "@@ -113,13 +126,58 @@ export default function SearchResult({\n   },\n   highlights,\n }: SearchResultProps) {\n-  const classes = useStyles();\n+  interface AttachmentAndViewerDetails {\n+    attachment: OEQ.Search.Attachment;\n+    viewerDetails?: OEQ.MimeType.MimeTypeViewerDetail;\n+  }\n \n-  const searchResultStrings = languageStrings.searchpage.searchresult;\n+  const classes = useStyles();\n \n-  const [attachExpanded, setAttachExpanded] = React.useState(\n+  const [attachExpanded, setAttachExpanded] = useState(\n     displayOptions?.standardOpen ?? false\n   );\n+  const [\n+    attachmentsWithViewerDetails,\n+    setAttachmentsWithViewerDetails,\n+  ] = useState<AttachmentAndViewerDetails[]>([]);\n+\n+  const searchResultStrings = languageStrings.searchpage.searchresult;\n+\n+  // Responsible for determining the MIME type viewer for the provided attachments\n+  useEffect(() => {\n+    let mounted = true;\n+\n+    if (!attachments || !attachments.length) {\n+      // If there are no attachments, skip this effect\n+      return;\n+    }\n+\n+    const transform = async (\n+      a: OEQ.Search.Attachment\n+    ): Promise<AttachmentAndViewerDetails> => {\n+      const viewerDetails = a.mimeType\n+        ? await getViewerDetails(a.mimeType)\n+        : undefined;\n+      return {\n+        attachment: a,\n+        viewerDetails: viewerDetails,\n+      };\n+    };\n+\n+    (async () => {\n+      const viewerDetails = await Promise.all(", "originalCommit": "c4dee709dbdba69e1235fc4adaa50f2a127fe020", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2Nzk5NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507467995", "bodyText": "Currently if there are errors (only figured how to test with bad mimetype) here basically the attachments drop down simply doesn't get displayed. However I thought the standard layout's error handling would've been triggered.\nThat said, for some cases I could default to a simple link... I think I'll have more of a play.", "author": "edalex-ian", "createdAt": "2020-10-19T05:14:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1OTgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUxMTE3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r507511171", "bodyText": "Okay, got it now. We've got that error handling function we pass down as a prop from the template. (Maybe in the future we can replace that with a Context.) I'll add this as a prop for SearchResult and use it in some try/catch.", "author": "edalex-ian", "createdAt": "2020-10-19T06:52:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1OTgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MTg5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r508091890", "bodyText": "So I've added error handling to the transform function instead - that's where it's really needed - and also remove the throwing of an error over in ViewerModule to just default back to a simple 'link' viewer.", "author": "edalex-ian", "createdAt": "2020-10-19T22:09:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1OTgzNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODEwNDA1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2411#discussion_r508104054", "bodyText": "Great!", "author": "PenghaiZhang", "createdAt": "2020-10-19T22:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA1OTgzNA=="}], "type": "inlineReview"}, {"oid": "968f844bb6cb4d2ea56e5ffea6c7ae4d7968562b", "url": "https://github.com/openequella/openEQUELLA/commit/968f844bb6cb4d2ea56e5ffea6c7ae4d7968562b", "message": "chore(front-end): Fix typo in comment\n\nFeedback from PR #2411", "committedDate": "2020-10-19T03:30:27Z", "type": "commit"}, {"oid": "fff90cc8df3db4370ebd6c9ecaf91d4f92644445", "url": "https://github.com/openequella/openEQUELLA/commit/fff90cc8df3db4370ebd6c9ecaf91d4f92644445", "message": "chore(front-end): Clarify example in JSDoc for ItemAttachmentLinkProps\n\nFeedback from PR #2411", "committedDate": "2020-10-19T03:41:02Z", "type": "commit"}, {"oid": "7c80023fdb16c63dd0c520dca43c19448cdcf8ee", "url": "https://github.com/openequella/openEQUELLA/commit/7c80023fdb16c63dd0c520dca43c19448cdcf8ee", "message": "chore(front-end): Fix grammar in comment\n\nFeedback from PR #2411", "committedDate": "2020-10-19T03:43:54Z", "type": "commit"}, {"oid": "4cfdb4e9480595b899349a0fec6a260f87f1a54a", "url": "https://github.com/openequella/openEQUELLA/commit/4cfdb4e9480595b899349a0fec6a260f87f1a54a", "message": "fix(front-end): Remove excessive spread operator\n\nFeedback from PR #2411", "committedDate": "2020-10-19T04:01:37Z", "type": "commit"}, {"oid": "21f22371e8540e808849f5b95dd7ab14e610add6", "url": "https://github.com/openequella/openEQUELLA/commit/21f22371e8540e808849f5b95dd7ab14e610add6", "message": "chore(front-end): Refactor viewer determination in ItemAttachmentLink\n\nThe initial implementation morphed overtime, and what was left was really for the future and doco. Review feedback highlighted in its current state (and honoring YAGNI) it could be simplified into a ternary. This in term has also helped to make it more declarative, so that's a win. :)\n\nFeedback from PR #2411", "committedDate": "2020-10-19T04:29:10Z", "type": "commit"}, {"oid": "67b159d59ed33464b2a4f4c807094f6c797422b5", "url": "https://github.com/openequella/openEQUELLA/commit/67b159d59ed33464b2a4f4c807094f6c797422b5", "message": "chore(front-end): Use .some rather than .find\n\nFeedback from PR #2411", "committedDate": "2020-10-19T04:44:49Z", "type": "commit"}, {"oid": "901b643016d8e60d677004c3e818a8db18a605df", "url": "https://github.com/openequella/openEQUELLA/commit/901b643016d8e60d677004c3e818a8db18a605df", "message": "feat(front-end): Add error handling when determining viewer\n\nFeedback from PR #2411", "committedDate": "2020-10-20T00:24:13Z", "type": "commit"}, {"oid": "533845101d43b09ee7617391f303161a90af8f1e", "url": "https://github.com/openequella/openEQUELLA/commit/533845101d43b09ee7617391f303161a90af8f1e", "message": "fix(front-end): Use <Link> instead of <a>\n\nThis way we can maintain consistent styling with an institution's theme, while also being able to use 'component' to specify to use 'button' for links which are just to trigger onClicks.\n\nFeedback from PR #2411", "committedDate": "2020-10-20T02:10:08Z", "type": "commit"}, {"oid": "97845203b8d093f9a5682a145b50ffe6fd00c964", "url": "https://github.com/openequella/openEQUELLA/commit/97845203b8d093f9a5682a145b50ffe6fd00c964", "message": "Merge branch 'develop' into feature/view-attachments", "committedDate": "2020-10-20T05:51:34Z", "type": "commit"}, {"oid": "cb4d620a9f659198811c098bc126bca7d387fca4", "url": "https://github.com/openequella/openEQUELLA/commit/cb4d620a9f659198811c098bc126bca7d387fca4", "message": "refactor(front-end): Use runtypes match rather than switch\n\nThis facilitates maintaining a declarative style and avoid the pitfalls of a switch statement.\n\nFeedback from PR #2411", "committedDate": "2020-10-21T00:53:57Z", "type": "commit"}]}