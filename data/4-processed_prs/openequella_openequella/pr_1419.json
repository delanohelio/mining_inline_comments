{"pr_number": 1419, "pr_title": "Create a REST endpoint to handle Cloud Provider Proxy PUT requests;", "pr_createdAt": "2020-01-13T03:29:59Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1419", "timeline": [{"oid": "11acd802ededb2bebe34a73812a6a1b98333f5ec", "url": "https://github.com/openequella/openEQUELLA/commit/11acd802ededb2bebe34a73812a6a1b98333f5ec", "message": "Create a REST endpoint to handle Cloud Provider Proxy PUT requests;\nCopy and filter headers, and add headers to the proxied requests;", "committedDate": "2020-01-13T03:15:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0MzY2OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1419#discussion_r365643669", "bodyText": "These methods should be private", "author": "nmkae", "createdAt": "2020-01-13T04:20:41Z", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/wizard/WizardApi.scala", "diffHunk": "@@ -184,6 +184,22 @@ class WizardApi {\n \n   }\n \n+  def getStreamedBody(content: InputStream): Stream[IO, ByteBuffer] = {", "originalCommit": "11acd802ededb2bebe34a73812a6a1b98333f5ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0Mzg4NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1419#discussion_r365643885", "bodyText": "This appears to be the same code as the POST (just with a PUT), the buttons could be consolidated into a simple component", "author": "nmkae", "createdAt": "2020-01-13T04:22:47Z", "path": "autotest/IntegTester/ps/www/control.tsx", "diffHunk": "@@ -196,6 +196,22 @@ function TestControl(p: ControlApi<MyConfig>) {\n       >\n         Delete Test\n       </button>\n+\n+      <button\n+        onClick={_ => {\n+          const url = p.providerUrl(serviceId) + \"?\" + queryString;\n+          const req = axios.put(url, {\n+            data: serviceContent\n+          });\n+          return req\n+            .then(resp => setServiceResponse(resp.data))\n+            .catch((err: Error) => {\n+              setServiceResponse(err.message);\n+            });\n+        }}\n+      >\n+        Put Test\n+      </button>", "originalCommit": "11acd802ededb2bebe34a73812a6a1b98333f5ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY0Mzk2MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1419#discussion_r365643960", "bodyText": "Would be nice to sanity check the headers here", "author": "nmkae", "createdAt": "2020-01-13T04:23:36Z", "path": "autotest/IntegTester/src/main/scala/integtester/testprovider/TestingCloudProvider.scala", "diffHunk": "@@ -132,6 +132,11 @@ class TestingCloudProvider(implicit val cs: ContextShift[IO]) extends Http4sDsl[\n       req.decode[String] { serviceData =>\n         Ok(ServiceResponse(user, serviceData, req.queryString).asJson)\n       }\n+    case authReq @ PUT -> Root / \"myService\" as user =>\n+      val req = authReq.req\n+      req.decode[String] { serviceData =>\n+        Ok(ServiceResponse(user, serviceData, req.queryString).asJson)\n+      }", "originalCommit": "11acd802ededb2bebe34a73812a6a1b98333f5ec", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9a8d5dd84b11d234942cc3854ea2988ebb81c5e9", "url": "https://github.com/openequella/openEQUELLA/commit/9a8d5dd84b11d234942cc3854ea2988ebb81c5e9", "message": "Only drop JSESSION rather than all cookies;\nUse a React component instead of replicated HTML buttons;\nRefactor the Integtester.", "committedDate": "2020-01-14T05:57:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjE2ODI4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1419#discussion_r366168283", "bodyText": "Recommend the message states the unexpected cookie name (JSESSIONID) that was found, otherwise it would require tracking down this code to confirm what it really means", "author": "nmkae", "createdAt": "2020-01-14T06:23:17Z", "path": "autotest/IntegTester/src/main/scala/integtester/testprovider/TestingCloudProvider.scala", "diffHunk": "@@ -127,16 +128,36 @@ class TestingCloudProvider(implicit val cs: ContextShift[IO]) extends Http4sDsl[\n     case req @ POST -> Root / \"itemNotification\" as user =>\n       System.err.println(req.req.queryString)\n       Ok()\n+\n     case authReq @ POST -> Root / \"myService\" as user =>\n-      val req = authReq.req\n+      createResponse(true, authReq.req, user)\n+\n+    case authReq @ PUT -> Root / \"myService\" as user =>\n+      createResponse(true, authReq.req, user)\n+\n+    case authReq @ GET -> Root / \"myService\" as user =>\n+      createResponse(false, authReq.req, user)\n+\n+    case authReq @ DELETE -> Root / \"myService\" as user =>\n+      createResponse(false, authReq.req, user)\n+  }\n+  def createResponse(decode: Boolean, req: Request[IO], user: TestUser): IO[Response[IO]] = {\n+    val cookies = req.headers.get(CaseInsensitiveString(\"cookie\"))\n+\n+    // If header includes cookies then check if JSESSIONID exists; if yes then respond with a bad request.\n+    if (cookies.isDefined) {\n+      val jSessionId = cookies.get.value.split(\";\").exists(value => value.startsWith(\"JSESSIONID\"))\n+      if (jSessionId) {\n+        return BadRequest(\"Unexpected cookie is found.\")", "originalCommit": "9a8d5dd84b11d234942cc3854ea2988ebb81c5e9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c6c146e0eb7984a209bc3148bf25229cb2a0d58e", "url": "https://github.com/openequella/openEQUELLA/commit/c6c146e0eb7984a209bc3148bf25229cb2a0d58e", "message": "Reword the message of the bad request.", "committedDate": "2020-01-14T06:26:49Z", "type": "commit"}]}