{"pr_number": 2032, "pr_title": "Jest tests for search page pagination and sorting", "pr_createdAt": "2020-07-09T08:47:45Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2032", "timeline": [{"oid": "b74b7e61744e53ecda9b012ed3ed323fb8544473", "url": "https://github.com/openequella/openEQUELLA/commit/b74b7e61744e53ecda9b012ed3ed323fb8544473", "message": "Jest test for search page pagination and sorting\n\n1. Add tests for pagination and sorting.\n2. Update the test for spinner and debounce query.\n3. Not all tests need fake timer so move fake timer to the test\n   which needs it.", "committedDate": "2020-07-09T08:45:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NjQzNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452066435", "bodyText": "Help wanted here.\nWarning An update to SearchPage inside a test was not wrapped in act(...). is always given.\nI can see it is caused by debouncing search query which triggers a state update after 500ms.  I have not worked out how to put this update inside a act.", "author": "PenghaiZhang", "createdAt": "2020-07-09T08:54:15Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,97 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) => {\n+    await act(async () => {\n+      await update();\n     });\n   };\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {\n-    changeQuery(\"old title\");\n-    //use a timed callback to wait for the debounce before asserting results have populated the page\n-    setTimeout(() => {\n-      expect(component.html()).toContain(\"No results found.\");\n-    }, 1000);\n+  it(\"should support debounce query search\", async () => {\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await updateSearchOptions(() =>\n+      input.simulate(\"change\", { target: { value: \"new query\" } })", "originalCommit": "b74b7e61744e53ecda9b012ed3ed323fb8544473", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQxNjM2OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452416369", "bodyText": "Would moving jest.advanceTimersByTime inside the act resolve the issue? \ud83e\udd14", "author": "ChristianMurphy", "createdAt": "2020-07-09T18:39:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NjQzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzMzk5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452533996", "bodyText": "Thanks @ChristianMurphy ! It does resolve the issue!", "author": "PenghaiZhang", "createdAt": "2020-07-09T22:57:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NjQzNQ=="}], "type": "inlineReview"}, {"oid": "c94ac81834e8cca4ad2f5fd976908646a5fdbb0b", "url": "https://github.com/openequella/openEQUELLA/commit/c94ac81834e8cca4ad2f5fd976908646a5fdbb0b", "message": "Update SearchModule test due to updated mock data.", "committedDate": "2020-07-09T08:59:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjMyMjU4Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452322586", "bodyText": "is this wrapper around act needed?\nIt seems to be a direct pass through", "author": "ChristianMurphy", "createdAt": "2020-07-09T15:56:30Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,97 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) => {\n+    await act(async () => {\n+      await update();", "originalCommit": "c94ac81834e8cca4ad2f5fd976908646a5fdbb0b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9e2eabb8e8ac0faa512fba342015e6ce376d26ae", "url": "https://github.com/openequella/openEQUELLA/commit/9e2eabb8e8ac0faa512fba342015e6ce376d26ae", "message": "Call 'advanceTimersByTime' inside 'act' to remove state update warning.", "committedDate": "2020-07-09T23:22:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNTI5OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452605299", "bodyText": "do these await simulate blocks need to be surrounded with an act function? Whenever I did things like that I'd get warnings in the jest console.", "author": "SammyIsConfused", "createdAt": "2020-07-10T03:38:56Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {\n-    changeQuery(\"old title\");\n-    //use a timed callback to wait for the debounce before asserting results have populated the page\n-    setTimeout(() => {\n-      expect(component.html()).toContain(\"No results found.\");\n-    }, 1000);\n+  it(\"should support debounce query search\", async () => {\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await updateSearchOptions(() => {", "originalCommit": "9e2eabb8e8ac0faa512fba342015e6ce376d26ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwOTE1Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452609152", "bodyText": "Yes they need. updateSearchOptions takes a function as its argument and executes the function inside an act.", "author": "PenghaiZhang", "createdAt": "2020-07-10T03:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNTI5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYxMDA1MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452610051", "bodyText": "Oh I see now, its in the function rather than up here.\nCool! Looks good to me.", "author": "SammyIsConfused", "createdAt": "2020-07-10T04:00:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNTI5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNzQzNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452607436", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Because sorting is done on Server and we are using mock data, we can only check if the selected\n          \n          \n            \n                // Because sorting is done on the server-side and we are using mock data, we can only check if the selected", "author": "SammyIsConfused", "createdAt": "2020-07-10T03:48:27Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {\n-    changeQuery(\"old title\");\n-    //use a timed callback to wait for the debounce before asserting results have populated the page\n-    setTimeout(() => {\n-      expect(component.html()).toContain(\"No results found.\");\n-    }, 1000);\n+  it(\"should support debounce query search\", async () => {\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await updateSearchOptions(() => {\n+      input.simulate(\"change\", { target: { value: \"new query\" } });\n+      jest.advanceTimersByTime(1000);\n+    });\n+    // After 1s the second search should be triggered.\n+    expect(SearchModule.searchItems).toHaveBeenCalledTimes(2);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query\",\n+    });\n   });\n \n-  it(\"should contain the test data after a search bar text change and render\", () => {\n-    changeQuery(\"new title\");\n-    setTimeout(() => {\n-      expect(component.html()).not.toContain(\"No results found.\");\n-      expect(component.html()).toContain(\n-        \"266bb0ff-a730-4658-aec0-c68bbefc227c\"\n-      );\n-    }, 1000);\n+  it(\"should support changing the number of items displayed per page\", async () => {\n+    // Initial items per page is 10.\n+    expect(component.html()).toContain(\"1-10 of 12\");\n+    const itemsPerPageSelect = component.find(\n+      \".MuiTablePagination-input input\"\n+    );\n+    await updateSearchOptions(() =>\n+      itemsPerPageSelect.simulate(\"change\", { target: { value: 25 } })\n+    );\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      rowsPerPage: 25,\n+    });\n+    expect(component.html()).toContain(\"1-12 of 12\");\n+  });\n+\n+  it(\"should support navigating to previous/next page\", async () => {\n+    const prevPageButton = component\n+      .find(\".MuiTablePagination-actions button\")\n+      .at(0);\n+    const nextPageButton = component\n+      .find(\".MuiTablePagination-actions button\")\n+      .at(1);\n+    await updateSearchOptions(() => nextPageButton.simulate(\"click\"));\n+    expect(component.html()).toContain(\"11-12 of 12\");\n+    await updateSearchOptions(() => prevPageButton.simulate(\"click\"));\n+    expect(component.html()).toContain(\"1-10 of 12\");\n+  });\n+\n+  it(\"should support sorting search results\", async () => {\n+    const sortingControl = component.find(\".MuiCardHeader-action input\");\n+    await updateSearchOptions(() =>\n+      sortingControl.simulate(\"change\", {\n+        target: { value: SortOrder.DATEMODIFIED },\n+      })\n+    );\n+    // Because sorting is done on Server and we are using mock data, we can only check if the selected", "originalCommit": "9e2eabb8e8ac0faa512fba342015e6ce376d26ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNzU2MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452607561", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Trigger a search by changing sorting order.\n          \n          \n            \n                // Trigger a search by changing sorting order", "author": "SammyIsConfused", "createdAt": "2020-07-10T03:49:05Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {\n-    changeQuery(\"old title\");\n-    //use a timed callback to wait for the debounce before asserting results have populated the page\n-    setTimeout(() => {\n-      expect(component.html()).toContain(\"No results found.\");\n-    }, 1000);\n+  it(\"should support debounce query search\", async () => {\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await updateSearchOptions(() => {\n+      input.simulate(\"change\", { target: { value: \"new query\" } });\n+      jest.advanceTimersByTime(1000);\n+    });\n+    // After 1s the second search should be triggered.\n+    expect(SearchModule.searchItems).toHaveBeenCalledTimes(2);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query\",\n+    });\n   });\n \n-  it(\"should contain the test data after a search bar text change and render\", () => {\n-    changeQuery(\"new title\");\n-    setTimeout(() => {\n-      expect(component.html()).not.toContain(\"No results found.\");\n-      expect(component.html()).toContain(\n-        \"266bb0ff-a730-4658-aec0-c68bbefc227c\"\n-      );\n-    }, 1000);\n+  it(\"should support changing the number of items displayed per page\", async () => {\n+    // Initial items per page is 10.\n+    expect(component.html()).toContain(\"1-10 of 12\");\n+    const itemsPerPageSelect = component.find(\n+      \".MuiTablePagination-input input\"\n+    );\n+    await updateSearchOptions(() =>\n+      itemsPerPageSelect.simulate(\"change\", { target: { value: 25 } })\n+    );\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      rowsPerPage: 25,\n+    });\n+    expect(component.html()).toContain(\"1-12 of 12\");\n+  });\n+\n+  it(\"should support navigating to previous/next page\", async () => {\n+    const prevPageButton = component\n+      .find(\".MuiTablePagination-actions button\")\n+      .at(0);\n+    const nextPageButton = component\n+      .find(\".MuiTablePagination-actions button\")\n+      .at(1);\n+    await updateSearchOptions(() => nextPageButton.simulate(\"click\"));\n+    expect(component.html()).toContain(\"11-12 of 12\");\n+    await updateSearchOptions(() => prevPageButton.simulate(\"click\"));\n+    expect(component.html()).toContain(\"1-10 of 12\");\n+  });\n+\n+  it(\"should support sorting search results\", async () => {\n+    const sortingControl = component.find(\".MuiCardHeader-action input\");\n+    await updateSearchOptions(() =>\n+      sortingControl.simulate(\"change\", {\n+        target: { value: SortOrder.DATEMODIFIED },\n+      })\n+    );\n+    // Because sorting is done on Server and we are using mock data, we can only check if the selected\n+    // sort order is included in the search params.\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      sortOrder: SortOrder.DATEMODIFIED,\n+    });\n   });\n \n   it(\"should display a spinner when search is in progress\", async () => {\n-    // Trigger a search by changing search query.\n-    changeQuery(\"new query\");\n-    setTimeout(async () => {\n-      expect(component.find(CircularProgress)).toHaveLength(1);\n-    }, 1000);\n+    // Trigger a search by changing sorting order.", "originalCommit": "9e2eabb8e8ac0faa512fba342015e6ce376d26ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNzY0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452607642", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // sort order is included in the search params.\n          \n          \n            \n                // sort order is included in the search params", "author": "SammyIsConfused", "createdAt": "2020-07-10T03:49:26Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {\n-    changeQuery(\"old title\");\n-    //use a timed callback to wait for the debounce before asserting results have populated the page\n-    setTimeout(() => {\n-      expect(component.html()).toContain(\"No results found.\");\n-    }, 1000);\n+  it(\"should support debounce query search\", async () => {\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await updateSearchOptions(() => {\n+      input.simulate(\"change\", { target: { value: \"new query\" } });\n+      jest.advanceTimersByTime(1000);\n+    });\n+    // After 1s the second search should be triggered.\n+    expect(SearchModule.searchItems).toHaveBeenCalledTimes(2);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query\",\n+    });\n   });\n \n-  it(\"should contain the test data after a search bar text change and render\", () => {\n-    changeQuery(\"new title\");\n-    setTimeout(() => {\n-      expect(component.html()).not.toContain(\"No results found.\");\n-      expect(component.html()).toContain(\n-        \"266bb0ff-a730-4658-aec0-c68bbefc227c\"\n-      );\n-    }, 1000);\n+  it(\"should support changing the number of items displayed per page\", async () => {\n+    // Initial items per page is 10.\n+    expect(component.html()).toContain(\"1-10 of 12\");\n+    const itemsPerPageSelect = component.find(\n+      \".MuiTablePagination-input input\"\n+    );\n+    await updateSearchOptions(() =>\n+      itemsPerPageSelect.simulate(\"change\", { target: { value: 25 } })\n+    );\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      rowsPerPage: 25,\n+    });\n+    expect(component.html()).toContain(\"1-12 of 12\");\n+  });\n+\n+  it(\"should support navigating to previous/next page\", async () => {\n+    const prevPageButton = component\n+      .find(\".MuiTablePagination-actions button\")\n+      .at(0);\n+    const nextPageButton = component\n+      .find(\".MuiTablePagination-actions button\")\n+      .at(1);\n+    await updateSearchOptions(() => nextPageButton.simulate(\"click\"));\n+    expect(component.html()).toContain(\"11-12 of 12\");\n+    await updateSearchOptions(() => prevPageButton.simulate(\"click\"));\n+    expect(component.html()).toContain(\"1-10 of 12\");\n+  });\n+\n+  it(\"should support sorting search results\", async () => {\n+    const sortingControl = component.find(\".MuiCardHeader-action input\");\n+    await updateSearchOptions(() =>\n+      sortingControl.simulate(\"change\", {\n+        target: { value: SortOrder.DATEMODIFIED },\n+      })\n+    );\n+    // Because sorting is done on Server and we are using mock data, we can only check if the selected\n+    // sort order is included in the search params.", "originalCommit": "9e2eabb8e8ac0faa512fba342015e6ce376d26ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNzY5MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452607691", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Initial items per page is 10.\n          \n          \n            \n                // Initial items per page is 10", "author": "SammyIsConfused", "createdAt": "2020-07-10T03:49:41Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {\n-    changeQuery(\"old title\");\n-    //use a timed callback to wait for the debounce before asserting results have populated the page\n-    setTimeout(() => {\n-      expect(component.html()).toContain(\"No results found.\");\n-    }, 1000);\n+  it(\"should support debounce query search\", async () => {\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await updateSearchOptions(() => {\n+      input.simulate(\"change\", { target: { value: \"new query\" } });\n+      jest.advanceTimersByTime(1000);\n+    });\n+    // After 1s the second search should be triggered.\n+    expect(SearchModule.searchItems).toHaveBeenCalledTimes(2);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query\",\n+    });\n   });\n \n-  it(\"should contain the test data after a search bar text change and render\", () => {\n-    changeQuery(\"new title\");\n-    setTimeout(() => {\n-      expect(component.html()).not.toContain(\"No results found.\");\n-      expect(component.html()).toContain(\n-        \"266bb0ff-a730-4658-aec0-c68bbefc227c\"\n-      );\n-    }, 1000);\n+  it(\"should support changing the number of items displayed per page\", async () => {\n+    // Initial items per page is 10.", "originalCommit": "9e2eabb8e8ac0faa512fba342015e6ce376d26ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjYwNzc1Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452607756", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // After 1s the second search should be triggered.\n          \n          \n            \n                // After 1s the second search should be triggered", "author": "SammyIsConfused", "createdAt": "2020-07-10T03:49:58Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {\n-    changeQuery(\"old title\");\n-    //use a timed callback to wait for the debounce before asserting results have populated the page\n-    setTimeout(() => {\n-      expect(component.html()).toContain(\"No results found.\");\n-    }, 1000);\n+  it(\"should support debounce query search\", async () => {\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await updateSearchOptions(() => {\n+      input.simulate(\"change\", { target: { value: \"new query\" } });\n+      jest.advanceTimersByTime(1000);\n+    });\n+    // After 1s the second search should be triggered.", "originalCommit": "9e2eabb8e8ac0faa512fba342015e6ce376d26ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b49c170b8fad0e40102a617e622370ce73487b62", "url": "https://github.com/openequella/openEQUELLA/commit/b49c170b8fad0e40102a617e622370ce73487b62", "message": "Reword comments for Search page test.\n\nCo-authored-by: SammyIsConfused <samantha.fisher@edalex.com>", "committedDate": "2020-07-10T03:57:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0OTY5MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r452849691", "bodyText": "wouldn't calling\nupdateSearchOptions(() => itemsPerPageSelect.simulate(\"change\", { target: { value: 25 } }));\nbe the same as\nact(() => itemsPerPageSelect.simulate(\"change\", { target: { value: 25 } }));\n?\nI'm missing what this wrapper around act is adding.", "author": "ChristianMurphy", "createdAt": "2020-07-10T13:39:40Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());", "originalCommit": "b49c170b8fad0e40102a617e622370ce73487b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM4NDYwOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453384608", "bodyText": "With act(() => itemsPerPageSelect.simulate(\"change\", { target: { value: 25 } })); , the warning An update to SearchPage inside a test was not wrapped in act(...). is always given.  So an async act can resolve this warning.\nawait act(async () => {\n  await itemsPerPageSelect.simulate(\"change\", { target: { value: 25 } })\n});\n\nAnd I extracted this await act(...)  into updateSearchOptions", "author": "PenghaiZhang", "createdAt": "2020-07-13T00:40:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0OTY5MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5Nzc3NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453397775", "bodyText": "So is this just to reduce verbosity? If so I do wonder if it should be called awaitAct or some-such, as it would appear to have no direct knowledge of anything to do with search.\nBut also, what's the net gain here? The removal of one use of the async and await keywords? If so, maybe it's not needed, but let me throw in an example for our consideration:\n    await updateSearchOptions(() => {\n      input.simulate(\"change\", { target: { value: \"new query\" } });\n      jest.advanceTimersByTime(1000);\n    });\nIs this simply the same as:\n    await act( async () => {\n      input.simulate(\"change\", { target: { value: \"new query\" } });\n      await jest.advanceTimersByTime(1000);\n    });\n?", "author": "edalex-ian", "createdAt": "2020-07-13T01:59:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg0OTY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5ODQ2NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453398465", "bodyText": "I don't seen an equivalent test for this? Why is it removed?", "author": "edalex-ian", "createdAt": "2020-07-13T02:03:27Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {", "originalCommit": "b49c170b8fad0e40102a617e622370ce73487b62", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwMDQ3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453400471", "bodyText": "Because we are using mock data, the result will always be the mock data no matter  whatever search query we use.", "author": "PenghaiZhang", "createdAt": "2020-07-13T02:13:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5ODQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwMTI4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453401283", "bodyText": "expect(SearchModule.searchItems).toHaveBeenCalledWith({\n  ...defaultSearchOptions,\n  query: \"new query\",\n});\n\nThis expect can make sure that the search query has been updated.", "author": "PenghaiZhang", "createdAt": "2020-07-13T02:18:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5ODQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwMjI0NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453402245", "bodyText": "Because we are using mock data, the result will always be the mock data no matter whatever search query we use.\n\nSo then, should we have a case where we mock with empty data to test the empty data result? It's arguably an important case to test - being a boundary condition.\n\nThis expect can make sure that the search query has been updated.\n\nNot sure which question that's in response to. \ud83e\udd14", "author": "edalex-ian", "createdAt": "2020-07-13T02:22:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5ODQ2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwNzc0Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453407747", "bodyText": "Yes I will add one more test for empty data result!", "author": "PenghaiZhang", "createdAt": "2020-07-13T02:49:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5ODQ2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5ODYzOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453398639", "bodyText": "I don't see an equivalent test for this (especially one that actually verifies that search results are in the list). Why the removal?", "author": "edalex-ian", "createdAt": "2020-07-13T02:04:25Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -62,50 +66,94 @@ describe(\"<SearchPage/>\", () => {\n   });\n \n   afterEach(() => {\n-    mount.cleanUp();\n+    jest.clearAllMocks();\n   });\n \n-  const changeQuery = (query: string) => {\n-    act(() => {\n-      const input = component.find(\"input.MuiInputBase-input\");\n-      input.simulate(\"change\", { target: { value: query } });\n-    });\n-  };\n+  /**\n+   * Update search options in order to trigger a search.\n+   * @param update A function that simulates UI behaviours such as selecting a different value from a dropdown.\n+   */\n+  const updateSearchOptions = async (update: () => void) =>\n+    await act(async () => await update());\n \n-  it(\"should retrieve search settings and do a search when the page is opened\", async () => {\n+  it(\"should retrieve search settings and do a search when the page is opened\", () => {\n     expect(\n       SearchSettingsModule.getSearchSettingsFromServer\n     ).toHaveBeenCalledTimes(1);\n     expect(SearchModule.searchItems).toHaveBeenCalledTimes(1);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith(defaultSearchOptions);\n   });\n \n-  it(\"should display 'No results found.' when there are no search results\", () => {\n-    changeQuery(\"old title\");\n-    //use a timed callback to wait for the debounce before asserting results have populated the page\n-    setTimeout(() => {\n-      expect(component.html()).toContain(\"No results found.\");\n-    }, 1000);\n+  it(\"should support debounce query search\", async () => {\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await updateSearchOptions(() => {\n+      input.simulate(\"change\", { target: { value: \"new query\" } });\n+      jest.advanceTimersByTime(1000);\n+    });\n+    // After 1s the second search should be triggered\n+    expect(SearchModule.searchItems).toHaveBeenCalledTimes(2);\n+    expect(SearchModule.searchItems).toHaveBeenCalledWith({\n+      ...defaultSearchOptions,\n+      query: \"new query\",\n+    });\n   });\n \n-  it(\"should contain the test data after a search bar text change and render\", () => {", "originalCommit": "b49c170b8fad0e40102a617e622370ce73487b62", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1b30261a04c987b6944529f847a5093c97e9ed10", "url": "https://github.com/openequella/openEQUELLA/commit/1b30261a04c987b6944529f847a5093c97e9ed10", "message": "Add one test case for empty search result.", "committedDate": "2020-07-13T03:47:11Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQyODc3NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2032#discussion_r453428775", "bodyText": "This is now duplicated. Seems you need a function of:\nconst doSearch = async (searchTerm: string) => {\n    jest.useFakeTimers(\"modern\");\n    const input = component.find(\"input.MuiInputBase-input\");\n    await awaitAct(() => {\n      input.simulate(\"change\", { target: { value: searchTerm } });\n      jest.advanceTimersByTime(1000);\n    });\n}", "author": "edalex-ian", "createdAt": "2020-07-13T04:30:39Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -97,6 +100,21 @@ describe(\"<SearchPage/>\", () => {\n       ...defaultSearchOptions,\n       query: \"new query\",\n     });\n+    expect(component.html()).not.toContain(\"No results found.\");\n+    expect(component.html()).toContain(\"266bb0ff-a730-4658-aec0-c68bbefc227c\");\n+  });\n+\n+  it(\"should display 'No results found.' when there are no search results\", async () => {\n+    mockSearch.mockImplementationOnce(() =>\n+      Promise.resolve(getEmptySearchResult)\n+    );\n+    jest.useFakeTimers(\"modern\");\n+    const input = component.find(\"input.MuiInputBase-input\");\n+    await awaitAct(() => {\n+      input.simulate(\"change\", { target: { value: \"no items\" } });\n+      jest.advanceTimersByTime(1000);\n+    });", "originalCommit": "1b30261a04c987b6944529f847a5093c97e9ed10", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b92db439b16bf86a66e7ce16a9c4af0deafd4646", "url": "https://github.com/openequella/openEQUELLA/commit/b92db439b16bf86a66e7ce16a9c4af0deafd4646", "message": "Fix the duplication for query search tests.", "committedDate": "2020-07-13T04:45:01Z", "type": "commit"}]}