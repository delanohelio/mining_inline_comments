{"pr_number": 2132, "pr_title": "Feature/frontend usersearch component", "pr_createdAt": "2020-08-03T07:24:08Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2132", "timeline": [{"oid": "3f3048407571ecde984823d8da07f727dfe4f9bc", "url": "https://github.com/openequella/openEQUELLA/commit/3f3048407571ecde984823d8da07f727dfe4f9bc", "message": "front-end: Create generic UserSearch component", "committedDate": "2020-08-03T07:02:01Z", "type": "commit"}, {"oid": "affebd597d588bdf6647db863434e6cdc4b306e3", "url": "https://github.com/openequella/openEQUELLA/commit/affebd597d588bdf6647db863434e6cdc4b306e3", "message": "front-end: Add test for UserSearch component", "committedDate": "2020-08-03T07:02:01Z", "type": "commit"}, {"oid": "30448fc636fda92eced26d73e4298ec4845f3902", "url": "https://github.com/openequella/openEQUELLA/commit/30448fc636fda92eced26d73e4298ec4845f3902", "message": "Merge branch 'component/new-search-page' into feature/frontend-usersearch-component", "committedDate": "2020-08-03T23:49:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNjgwNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464716807", "bodyText": "The default value of alignItems is stretch.", "author": "PenghaiZhang", "createdAt": "2020-08-03T23:38:08Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/UserSearch.tsx", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { KeyboardEvent, useState } from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import {\n+  Grid,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemIcon,\n+  ListItemText,\n+  TextField,\n+} from \"@material-ui/core\";\n+import SearchIcon from \"@material-ui/icons/Search\";\n+import { AccountCircle, ErrorOutline } from \"@material-ui/icons\";\n+import * as UserModule from \"../modules/UserModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+import { sprintf } from \"sprintf-js\";\n+\n+interface UserSearchProps {\n+  /** An optional `id` attribute for the component. Will also be used to prefix core child elements. */\n+  id?: string;\n+  /** How high (in pixels) the list of users should be. */\n+  listHeight?: number;\n+  /** Callback triggered when a user entry is clicked on. */\n+  onSelect: (username: OEQ.UserQuery.UserDetails) => void;\n+  /** Function which will provide the list of users. */\n+  userListProvider?: (query?: string) => Promise<OEQ.UserQuery.UserDetails[]>;\n+}\n+\n+/**\n+ * Provides a control to list users via an input field text query filter. Users can then\n+ * be selected (single select).\n+ */\n+const UserSearch = ({\n+  id,\n+  listHeight,\n+  onSelect,\n+  userListProvider = (query?: string) =>\n+    UserModule.listUsers(query ? `${query}*` : undefined),\n+}: UserSearchProps) => {\n+  const {\n+    failedToFindUsersMessage,\n+    queryFieldLabel,\n+  } = languageStrings.userSearchComponent;\n+\n+  const [query, setQuery] = useState<string>(\"\");\n+  const [users, setUsers] = useState<OEQ.UserQuery.UserDetails[]>([]);\n+  const [selectedUser, setSelectedUser] = useState<\n+    OEQ.Common.UuidString | undefined\n+  >(undefined);\n+  const [hasSearched, setHasSearched] = useState<boolean>(false);\n+\n+  // Simple helper function to assist with providing useful id's for testing and theming.\n+  const genId = (suffix?: string) =>\n+    (id ? `${id}-` : \"\") + \"UserSearch\" + (suffix ? `-${suffix}` : \"\");\n+\n+  const handleOnSearch = () =>\n+    userListProvider(query).then((userDetails: OEQ.UserQuery.UserDetails[]) => {\n+      setHasSearched(true);\n+      setUsers(\n+        userDetails.sort((a, b) =>\n+          a.username.toLowerCase().localeCompare(b.username.toLowerCase())\n+        )\n+      );\n+    });\n+\n+  const handleQueryFieldKeypress = (event: KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.key) {\n+      case \"Escape\":\n+        setQuery(\"\");\n+        setUsers([]);\n+        setSelectedUser(undefined);\n+        setHasSearched(false);\n+        break;\n+      case \"Enter\":\n+        handleOnSearch();\n+        break;\n+    }\n+  };\n+\n+  const queryBar = (\n+    <Grid id={genId(\"QueryBar\")} container spacing={1}>\n+      <Grid item>\n+        <IconButton onClick={handleOnSearch}>\n+          <SearchIcon />\n+        </IconButton>\n+      </Grid>\n+      <Grid item>\n+        <TextField\n+          label={queryFieldLabel}\n+          value={query}\n+          onChange={(event) => {\n+            setHasSearched(false);\n+            setQuery(event.target.value);\n+          }}\n+          onKeyDown={handleQueryFieldKeypress}\n+        />\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  const userList = () => {\n+    // If there's no users because a search has not been done,\n+    // then return with nothing\n+    if (users.length < 1 && !hasSearched) {\n+      return null;\n+    }\n+\n+    return (\n+      <List\n+        id={genId(\"UserList\")}\n+        style={listHeight ? { height: listHeight, overflow: \"auto\" } : {}}\n+      >\n+        {users.length ? (\n+          users.map((userDetails: OEQ.UserQuery.UserDetails) => (\n+            <ListItem\n+              button\n+              onClick={() => {\n+                setSelectedUser(userDetails.id);\n+                onSelect(userDetails);\n+              }}\n+              key={userDetails.id}\n+              selected={selectedUser === userDetails.id}\n+            >\n+              <ListItemIcon>\n+                <AccountCircle />\n+              </ListItemIcon>\n+              <ListItemText\n+                primary={userDetails.username}\n+                secondary={`${userDetails.firstName} ${userDetails.lastName}`}\n+              />\n+            </ListItem>\n+          ))\n+        ) : (\n+          <ListItem>\n+            <ListItemIcon>\n+              <ErrorOutline />\n+            </ListItemIcon>\n+            <ListItemText\n+              secondary={sprintf(failedToFindUsersMessage, query)}\n+            />\n+          </ListItem>\n+        )}\n+      </List>\n+    );\n+  };\n+\n+  return (\n+    <Grid\n+      id={genId()}\n+      container\n+      direction=\"column\"\n+      justify=\"flex-start\"\n+      alignItems=\"stretch\"", "originalCommit": "affebd597d588bdf6647db863434e6cdc4b306e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDY0Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464734643", "bodyText": "hmmm, this must've been part of styling scramble. Removing it is fine. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-08-04T00:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNjgwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNjk0OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464716949", "bodyText": "Default value of justify is flex-start.", "author": "PenghaiZhang", "createdAt": "2020-08-03T23:38:30Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/UserSearch.tsx", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { KeyboardEvent, useState } from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import {\n+  Grid,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemIcon,\n+  ListItemText,\n+  TextField,\n+} from \"@material-ui/core\";\n+import SearchIcon from \"@material-ui/icons/Search\";\n+import { AccountCircle, ErrorOutline } from \"@material-ui/icons\";\n+import * as UserModule from \"../modules/UserModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+import { sprintf } from \"sprintf-js\";\n+\n+interface UserSearchProps {\n+  /** An optional `id` attribute for the component. Will also be used to prefix core child elements. */\n+  id?: string;\n+  /** How high (in pixels) the list of users should be. */\n+  listHeight?: number;\n+  /** Callback triggered when a user entry is clicked on. */\n+  onSelect: (username: OEQ.UserQuery.UserDetails) => void;\n+  /** Function which will provide the list of users. */\n+  userListProvider?: (query?: string) => Promise<OEQ.UserQuery.UserDetails[]>;\n+}\n+\n+/**\n+ * Provides a control to list users via an input field text query filter. Users can then\n+ * be selected (single select).\n+ */\n+const UserSearch = ({\n+  id,\n+  listHeight,\n+  onSelect,\n+  userListProvider = (query?: string) =>\n+    UserModule.listUsers(query ? `${query}*` : undefined),\n+}: UserSearchProps) => {\n+  const {\n+    failedToFindUsersMessage,\n+    queryFieldLabel,\n+  } = languageStrings.userSearchComponent;\n+\n+  const [query, setQuery] = useState<string>(\"\");\n+  const [users, setUsers] = useState<OEQ.UserQuery.UserDetails[]>([]);\n+  const [selectedUser, setSelectedUser] = useState<\n+    OEQ.Common.UuidString | undefined\n+  >(undefined);\n+  const [hasSearched, setHasSearched] = useState<boolean>(false);\n+\n+  // Simple helper function to assist with providing useful id's for testing and theming.\n+  const genId = (suffix?: string) =>\n+    (id ? `${id}-` : \"\") + \"UserSearch\" + (suffix ? `-${suffix}` : \"\");\n+\n+  const handleOnSearch = () =>\n+    userListProvider(query).then((userDetails: OEQ.UserQuery.UserDetails[]) => {\n+      setHasSearched(true);\n+      setUsers(\n+        userDetails.sort((a, b) =>\n+          a.username.toLowerCase().localeCompare(b.username.toLowerCase())\n+        )\n+      );\n+    });\n+\n+  const handleQueryFieldKeypress = (event: KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.key) {\n+      case \"Escape\":\n+        setQuery(\"\");\n+        setUsers([]);\n+        setSelectedUser(undefined);\n+        setHasSearched(false);\n+        break;\n+      case \"Enter\":\n+        handleOnSearch();\n+        break;\n+    }\n+  };\n+\n+  const queryBar = (\n+    <Grid id={genId(\"QueryBar\")} container spacing={1}>\n+      <Grid item>\n+        <IconButton onClick={handleOnSearch}>\n+          <SearchIcon />\n+        </IconButton>\n+      </Grid>\n+      <Grid item>\n+        <TextField\n+          label={queryFieldLabel}\n+          value={query}\n+          onChange={(event) => {\n+            setHasSearched(false);\n+            setQuery(event.target.value);\n+          }}\n+          onKeyDown={handleQueryFieldKeypress}\n+        />\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  const userList = () => {\n+    // If there's no users because a search has not been done,\n+    // then return with nothing\n+    if (users.length < 1 && !hasSearched) {\n+      return null;\n+    }\n+\n+    return (\n+      <List\n+        id={genId(\"UserList\")}\n+        style={listHeight ? { height: listHeight, overflow: \"auto\" } : {}}\n+      >\n+        {users.length ? (\n+          users.map((userDetails: OEQ.UserQuery.UserDetails) => (\n+            <ListItem\n+              button\n+              onClick={() => {\n+                setSelectedUser(userDetails.id);\n+                onSelect(userDetails);\n+              }}\n+              key={userDetails.id}\n+              selected={selectedUser === userDetails.id}\n+            >\n+              <ListItemIcon>\n+                <AccountCircle />\n+              </ListItemIcon>\n+              <ListItemText\n+                primary={userDetails.username}\n+                secondary={`${userDetails.firstName} ${userDetails.lastName}`}\n+              />\n+            </ListItem>\n+          ))\n+        ) : (\n+          <ListItem>\n+            <ListItemIcon>\n+              <ErrorOutline />\n+            </ListItemIcon>\n+            <ListItemText\n+              secondary={sprintf(failedToFindUsersMessage, query)}\n+            />\n+          </ListItem>\n+        )}\n+      </List>\n+    );\n+  };\n+\n+  return (\n+    <Grid\n+      id={genId()}\n+      container\n+      direction=\"column\"\n+      justify=\"flex-start\"", "originalCommit": "affebd597d588bdf6647db863434e6cdc4b306e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDY3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464734679", "bodyText": "hmmm, this must've been part of styling scramble. Removing it is fine. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-08-04T00:41:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNjk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNzgzOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464717838", "bodyText": "Because xs of items are 12, perhaps we don't need to use column.", "author": "PenghaiZhang", "createdAt": "2020-08-03T23:41:20Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/UserSearch.tsx", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import { KeyboardEvent, useState } from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import {\n+  Grid,\n+  IconButton,\n+  List,\n+  ListItem,\n+  ListItemIcon,\n+  ListItemText,\n+  TextField,\n+} from \"@material-ui/core\";\n+import SearchIcon from \"@material-ui/icons/Search\";\n+import { AccountCircle, ErrorOutline } from \"@material-ui/icons\";\n+import * as UserModule from \"../modules/UserModule\";\n+import { languageStrings } from \"../util/langstrings\";\n+import { sprintf } from \"sprintf-js\";\n+\n+interface UserSearchProps {\n+  /** An optional `id` attribute for the component. Will also be used to prefix core child elements. */\n+  id?: string;\n+  /** How high (in pixels) the list of users should be. */\n+  listHeight?: number;\n+  /** Callback triggered when a user entry is clicked on. */\n+  onSelect: (username: OEQ.UserQuery.UserDetails) => void;\n+  /** Function which will provide the list of users. */\n+  userListProvider?: (query?: string) => Promise<OEQ.UserQuery.UserDetails[]>;\n+}\n+\n+/**\n+ * Provides a control to list users via an input field text query filter. Users can then\n+ * be selected (single select).\n+ */\n+const UserSearch = ({\n+  id,\n+  listHeight,\n+  onSelect,\n+  userListProvider = (query?: string) =>\n+    UserModule.listUsers(query ? `${query}*` : undefined),\n+}: UserSearchProps) => {\n+  const {\n+    failedToFindUsersMessage,\n+    queryFieldLabel,\n+  } = languageStrings.userSearchComponent;\n+\n+  const [query, setQuery] = useState<string>(\"\");\n+  const [users, setUsers] = useState<OEQ.UserQuery.UserDetails[]>([]);\n+  const [selectedUser, setSelectedUser] = useState<\n+    OEQ.Common.UuidString | undefined\n+  >(undefined);\n+  const [hasSearched, setHasSearched] = useState<boolean>(false);\n+\n+  // Simple helper function to assist with providing useful id's for testing and theming.\n+  const genId = (suffix?: string) =>\n+    (id ? `${id}-` : \"\") + \"UserSearch\" + (suffix ? `-${suffix}` : \"\");\n+\n+  const handleOnSearch = () =>\n+    userListProvider(query).then((userDetails: OEQ.UserQuery.UserDetails[]) => {\n+      setHasSearched(true);\n+      setUsers(\n+        userDetails.sort((a, b) =>\n+          a.username.toLowerCase().localeCompare(b.username.toLowerCase())\n+        )\n+      );\n+    });\n+\n+  const handleQueryFieldKeypress = (event: KeyboardEvent<HTMLDivElement>) => {\n+    switch (event.key) {\n+      case \"Escape\":\n+        setQuery(\"\");\n+        setUsers([]);\n+        setSelectedUser(undefined);\n+        setHasSearched(false);\n+        break;\n+      case \"Enter\":\n+        handleOnSearch();\n+        break;\n+    }\n+  };\n+\n+  const queryBar = (\n+    <Grid id={genId(\"QueryBar\")} container spacing={1}>\n+      <Grid item>\n+        <IconButton onClick={handleOnSearch}>\n+          <SearchIcon />\n+        </IconButton>\n+      </Grid>\n+      <Grid item>\n+        <TextField\n+          label={queryFieldLabel}\n+          value={query}\n+          onChange={(event) => {\n+            setHasSearched(false);\n+            setQuery(event.target.value);\n+          }}\n+          onKeyDown={handleQueryFieldKeypress}\n+        />\n+      </Grid>\n+    </Grid>\n+  );\n+\n+  const userList = () => {\n+    // If there's no users because a search has not been done,\n+    // then return with nothing\n+    if (users.length < 1 && !hasSearched) {\n+      return null;\n+    }\n+\n+    return (\n+      <List\n+        id={genId(\"UserList\")}\n+        style={listHeight ? { height: listHeight, overflow: \"auto\" } : {}}\n+      >\n+        {users.length ? (\n+          users.map((userDetails: OEQ.UserQuery.UserDetails) => (\n+            <ListItem\n+              button\n+              onClick={() => {\n+                setSelectedUser(userDetails.id);\n+                onSelect(userDetails);\n+              }}\n+              key={userDetails.id}\n+              selected={selectedUser === userDetails.id}\n+            >\n+              <ListItemIcon>\n+                <AccountCircle />\n+              </ListItemIcon>\n+              <ListItemText\n+                primary={userDetails.username}\n+                secondary={`${userDetails.firstName} ${userDetails.lastName}`}\n+              />\n+            </ListItem>\n+          ))\n+        ) : (\n+          <ListItem>\n+            <ListItemIcon>\n+              <ErrorOutline />\n+            </ListItemIcon>\n+            <ListItemText\n+              secondary={sprintf(failedToFindUsersMessage, query)}\n+            />\n+          </ListItem>\n+        )}\n+      </List>\n+    );\n+  };\n+\n+  return (\n+    <Grid\n+      id={genId()}\n+      container\n+      direction=\"column\"", "originalCommit": "affebd597d588bdf6647db863434e6cdc4b306e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMDI2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464730267", "bodyText": "I like to have this to make it explicit as to what the layout is meant to be.", "author": "edalex-ian", "createdAt": "2020-08-04T00:25:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxNzgzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMTY4Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464721686", "bodyText": "Does this mean when this text is found the rendering is completed?\nI will read this testing library's documentation.", "author": "PenghaiZhang", "createdAt": "2020-08-03T23:54:40Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/components/UserSearch.test.tsx", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as React from \"react\";\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { fireEvent, render, screen, waitFor } from \"@testing-library/react\";\n+import \"@testing-library/jest-dom/extend-expect\";\n+import UserSearch from \"../../../tsrc/components/UserSearch\";\n+import { languageStrings } from \"../../../tsrc/util/langstrings\";\n+import { sprintf } from \"sprintf-js\";\n+import * as UserSearchMock from \"../../../__mocks__/UserSearch.mock\";\n+\n+describe(\"<UserSearch/>\", () => {\n+  const {\n+    failedToFindUsersMessage,\n+    queryFieldLabel,\n+  } = languageStrings.userSearchComponent;\n+\n+  // Helper to render and wait for component under test\n+  const renderUserSearch = async (\n+    onSelect: (username: OEQ.UserQuery.UserDetails) => void = jest.fn()\n+  ): Promise<HTMLElement> => {\n+    const { container } = render(\n+      <UserSearch\n+        onSelect={onSelect}\n+        userListProvider={UserSearchMock.userDetailsProvider}\n+      />\n+    );\n+\n+    // Wait for it to be rendered\n+    await waitFor(() => screen.getByText(queryFieldLabel));", "originalCommit": "affebd597d588bdf6647db863434e6cdc4b306e3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczMDAyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2132#discussion_r464730023", "bodyText": "That's correct. Ideally any effects etc have finished executing, and the react render is done.", "author": "edalex-ian", "createdAt": "2020-08-04T00:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcyMTY4Ng=="}], "type": "inlineReview"}, {"oid": "2aa7f175cbf022f0624c8afcfd03c4bf46027c0b", "url": "https://github.com/openequella/openEQUELLA/commit/2aa7f175cbf022f0624c8afcfd03c4bf46027c0b", "message": "front-end: Remove superfluous Grid props in UserSearch component\n\nThese are the defaults, no need to specify here.", "committedDate": "2020-08-04T00:48:01Z", "type": "commit"}]}