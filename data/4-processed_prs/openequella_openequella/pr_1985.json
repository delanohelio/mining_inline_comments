{"pr_number": 1985, "pr_title": "Add pagination to Search page and tweak SearchResult", "pr_createdAt": "2020-07-01T07:20:09Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1985", "timeline": [{"oid": "ff578348c4b687959d7171d978be7dd7f26f6f41", "url": "https://github.com/openequella/openEQUELLA/commit/ff578348c4b687959d7171d978be7dd7f26f6f41", "message": "Add pagination to Search page and tweak SearchResult\n\n1. Render a MUI TablePagination at the bottom of the page.\n\n2. Trigger a search when change the page size or view different pages.\n\n3. Remove a redundant ListItem for SearchResult.", "committedDate": "2020-07-01T07:17:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDEwMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448190103", "bodyText": "The idea is that we don't need to do a search for initial state values.\nSo we can use this hook to create an object that persists until the component is unmounted.  And then use this object to help skip calling below useEffect for initial state values.\nThis way is recommended by react according to my research, but I am happy to discuss better approaches.", "author": "PenghaiZhang", "createdAt": "2020-07-01T08:07:06Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -16,55 +16,88 @@\n  * limitations under the License.\n  */\n import * as React from \"react\";\n-import { useEffect, useState } from \"react\";\n+import { useEffect, useRef, useState } from \"react\";\n import {\n   templateDefaults,\n   templateError,\n   TemplateUpdateProps,\n } from \"../mainui/Template\";\n import { languageStrings } from \"../util/langstrings\";\n import {\n+  Card,\n+  CardActions,\n+  CardContent,\n+  Grid,\n   IconButton,\n   List,\n-  ListItem,\n   ListSubheader,\n+  TablePagination,\n   TextField,\n-  Grid,\n-  Card,\n-  CardContent,\n } from \"@material-ui/core\";\n import SearchIcon from \"@material-ui/icons/Search\";\n-import { searchItems } from \"./SearchModule\";\n+import { defaultPagedSearchResult, searchItems } from \"./SearchModule\";\n import * as OEQ from \"@openequella/rest-api-client\";\n import SearchResult from \"./components/SearchResult\";\n import { generateFromError } from \"../api/errors\";\n import {\n   getSearchSettingsFromServer,\n   SearchSettings,\n+  SortOrder,\n } from \"../settings/Search/SearchSettingsModule\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+\n+const useStyles = makeStyles({\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"center\",\n+  },\n+});\n \n const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const classes = useStyles();\n   const searchStrings = languageStrings.searchpage;\n-  const [searchResultItems, setSearchResultItems] = useState<\n-    OEQ.Search.SearchResultItem[]\n-  >([]);\n+\n+  const [rowsPerPage, setRowsPerPage] = useState<number>(10);\n+  const [currentPage, setCurrentPage] = useState<number>(0);\n+  const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.RANK);\n+  const [pagedSearchResult, setPagedSearchResult] = useState<\n+    OEQ.Common.PagedResult<OEQ.Search.SearchResultItem>\n+  >(defaultPagedSearchResult);\n \n   /**\n-   * Update the page title and do a default search.\n+   * Construct a standard search criteria.\n+   */\n+  const standardParams: OEQ.Search.SearchParams = {\n+    start: currentPage * rowsPerPage,\n+    length: rowsPerPage,\n+    status: [OEQ.Common.ItemStatus.LIVE, OEQ.Common.ItemStatus.REVIEW],\n+    order: sortOrder,\n+  };\n+  /**\n+   * Update the page title and retrieve Search settings.\n    */\n   useEffect(() => {\n     updateTemplate((tp) => ({\n       ...templateDefaults(searchStrings.title)(tp),\n     }));\n \n-    getSearchSettingsFromServer().then((settings: SearchSettings) =>\n-      search({\n-        status: [OEQ.Common.ItemStatus.LIVE, OEQ.Common.ItemStatus.REVIEW],\n-        order: settings.defaultSearchSort,\n-      })\n-    );\n+    getSearchSettingsFromServer().then((settings: SearchSettings) => {\n+      setSortOrder(settings.defaultSearchSort);\n+    });\n   }, []);\n \n+  /**\n+   * Trigger a search when state values change, but skip the initial values.\n+   */\n+  const isInitialSearch = useRef(true);", "originalCommit": "ff578348c4b687959d7171d978be7dd7f26f6f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMTk0Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448721947", "bodyText": "And so are you saying that initially, we wont see any search results until at least the above effect to getSearchSettingsFromServer completes and calls setSortOrder?", "author": "edalex-ian", "createdAt": "2020-07-02T03:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODczNDU0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448734544", "bodyText": "Is the goal of this similar to https://ahooks.js.org/hooks/life-cycle/use-update-effect ?", "author": "ChristianMurphy", "createdAt": "2020-07-02T03:57:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwMTI5OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448801298", "bodyText": "And so are you saying that initially, we wont see any search results until at least the above effect to getSearchSettingsFromServer completes and calls setSortOrder?\n\nYes, but I wonder if we want a initial search no matter getSearchSettingsFromServer succeeds or fails.", "author": "PenghaiZhang", "createdAt": "2020-07-02T07:27:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDEwMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgwMTY0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448801642", "bodyText": "Is the goal of this similar to https://ahooks.js.org/hooks/life-cycle/use-update-effect ?\n\nYes!!", "author": "PenghaiZhang", "createdAt": "2020-07-02T07:27:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MDEwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MTA3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448191079", "bodyText": "I had a pondering that if we should move const [query, setQuery] = React.useState<string>(\"\"); done in #1967 to here,  pass setQuery to SearchBar, and then add query as one dependency for this hook. So I image when the page is completed, this array of dependencies will include values of most controls / panels.", "author": "PenghaiZhang", "createdAt": "2020-07-01T08:08:50Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -16,55 +16,88 @@\n  * limitations under the License.\n  */\n import * as React from \"react\";\n-import { useEffect, useState } from \"react\";\n+import { useEffect, useRef, useState } from \"react\";\n import {\n   templateDefaults,\n   templateError,\n   TemplateUpdateProps,\n } from \"../mainui/Template\";\n import { languageStrings } from \"../util/langstrings\";\n import {\n+  Card,\n+  CardActions,\n+  CardContent,\n+  Grid,\n   IconButton,\n   List,\n-  ListItem,\n   ListSubheader,\n+  TablePagination,\n   TextField,\n-  Grid,\n-  Card,\n-  CardContent,\n } from \"@material-ui/core\";\n import SearchIcon from \"@material-ui/icons/Search\";\n-import { searchItems } from \"./SearchModule\";\n+import { defaultPagedSearchResult, searchItems } from \"./SearchModule\";\n import * as OEQ from \"@openequella/rest-api-client\";\n import SearchResult from \"./components/SearchResult\";\n import { generateFromError } from \"../api/errors\";\n import {\n   getSearchSettingsFromServer,\n   SearchSettings,\n+  SortOrder,\n } from \"../settings/Search/SearchSettingsModule\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+\n+const useStyles = makeStyles({\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"center\",\n+  },\n+});\n \n const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const classes = useStyles();\n   const searchStrings = languageStrings.searchpage;\n-  const [searchResultItems, setSearchResultItems] = useState<\n-    OEQ.Search.SearchResultItem[]\n-  >([]);\n+\n+  const [rowsPerPage, setRowsPerPage] = useState<number>(10);\n+  const [currentPage, setCurrentPage] = useState<number>(0);\n+  const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.RANK);\n+  const [pagedSearchResult, setPagedSearchResult] = useState<\n+    OEQ.Common.PagedResult<OEQ.Search.SearchResultItem>\n+  >(defaultPagedSearchResult);\n \n   /**\n-   * Update the page title and do a default search.\n+   * Construct a standard search criteria.\n+   */\n+  const standardParams: OEQ.Search.SearchParams = {\n+    start: currentPage * rowsPerPage,\n+    length: rowsPerPage,\n+    status: [OEQ.Common.ItemStatus.LIVE, OEQ.Common.ItemStatus.REVIEW],\n+    order: sortOrder,\n+  };\n+  /**\n+   * Update the page title and retrieve Search settings.\n    */\n   useEffect(() => {\n     updateTemplate((tp) => ({\n       ...templateDefaults(searchStrings.title)(tp),\n     }));\n \n-    getSearchSettingsFromServer().then((settings: SearchSettings) =>\n-      search({\n-        status: [OEQ.Common.ItemStatus.LIVE, OEQ.Common.ItemStatus.REVIEW],\n-        order: settings.defaultSearchSort,\n-      })\n-    );\n+    getSearchSettingsFromServer().then((settings: SearchSettings) => {\n+      setSortOrder(settings.defaultSearchSort);\n+    });\n   }, []);\n \n+  /**\n+   * Trigger a search when state values change, but skip the initial values.\n+   */\n+  const isInitialSearch = useRef(true);\n+  useEffect(() => {\n+    if (isInitialSearch.current) {\n+      isInitialSearch.current = false;\n+    } else {\n+      search(standardParams);\n+    }\n+  }, [rowsPerPage, currentPage, sortOrder]);", "originalCommit": "ff578348c4b687959d7171d978be7dd7f26f6f41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyNDMwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448724302", "bodyText": "I like your thinking. \ud83d\udc4d\nI do wonder whether we may need to consider having a single bit of state though which contains an object with all our search options. I feel this will make things clearer and to ensure we don't miss any. Hey, maybe it's even the params that ultimately get passed to search. But I see there is some misalignment there, and you may need an intermediate object. However that object could then be passed to search and perhaps it has to the log to transform it to OEQ.Search.SearchParams. \ud83e\udd14\nWhat do you think? Could we set that up here now? And then when #1967 gets done it just plugs on in with query?", "author": "edalex-ian", "createdAt": "2020-07-02T03:13:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MTA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5MTkzNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448191934", "bodyText": "This ListItem is redundant as SearchResult already returns a ListItem.", "author": "PenghaiZhang", "createdAt": "2020-07-01T08:10:24Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -76,19 +109,17 @@ const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n   const search = (params?: OEQ.Search.SearchParams): void => {\n     searchItems(params)\n       .then((items: OEQ.Common.PagedResult<OEQ.Search.SearchResultItem>) =>\n-        setSearchResultItems(items.results)\n+        setPagedSearchResult(items)\n       )\n       .catch((error: Error) => handleError(error));\n   };\n \n   /**\n    * A SearchResult that represents one of the search result items.\n    */\n-  const searchResults = searchResultItems.map(\n+  const searchResults = pagedSearchResult.results.map(\n     (item: OEQ.Search.SearchResultItem) => (\n-      <ListItem key={item.uuid} divider>", "originalCommit": "ff578348c4b687959d7171d978be7dd7f26f6f41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyMTA2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448721067", "bodyText": "<Grid> is able to do this layout type stuff, I feel we should standardise on using it instead of custom styles.", "author": "edalex-ian", "createdAt": "2020-07-02T02:58:27Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -16,55 +16,88 @@\n  * limitations under the License.\n  */\n import * as React from \"react\";\n-import { useEffect, useState } from \"react\";\n+import { useEffect, useRef, useState } from \"react\";\n import {\n   templateDefaults,\n   templateError,\n   TemplateUpdateProps,\n } from \"../mainui/Template\";\n import { languageStrings } from \"../util/langstrings\";\n import {\n+  Card,\n+  CardActions,\n+  CardContent,\n+  Grid,\n   IconButton,\n   List,\n-  ListItem,\n   ListSubheader,\n+  TablePagination,\n   TextField,\n-  Grid,\n-  Card,\n-  CardContent,\n } from \"@material-ui/core\";\n import SearchIcon from \"@material-ui/icons/Search\";\n-import { searchItems } from \"./SearchModule\";\n+import { defaultPagedSearchResult, searchItems } from \"./SearchModule\";\n import * as OEQ from \"@openequella/rest-api-client\";\n import SearchResult from \"./components/SearchResult\";\n import { generateFromError } from \"../api/errors\";\n import {\n   getSearchSettingsFromServer,\n   SearchSettings,\n+  SortOrder,\n } from \"../settings/Search/SearchSettingsModule\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+\n+const useStyles = makeStyles({\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"center\",\n+  },\n+});", "originalCommit": "ff578348c4b687959d7171d978be7dd7f26f6f41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcyNTM1MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1985#discussion_r448725350", "bodyText": "Are there any non-standard params? Maybe I'm missing something, but it seems like this could just be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const standardParams: OEQ.Search.SearchParams = {\n          \n          \n            \n              const searchParams: OEQ.Search.SearchParams = {", "author": "edalex-ian", "createdAt": "2020-07-02T03:17:25Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -16,55 +16,88 @@\n  * limitations under the License.\n  */\n import * as React from \"react\";\n-import { useEffect, useState } from \"react\";\n+import { useEffect, useRef, useState } from \"react\";\n import {\n   templateDefaults,\n   templateError,\n   TemplateUpdateProps,\n } from \"../mainui/Template\";\n import { languageStrings } from \"../util/langstrings\";\n import {\n+  Card,\n+  CardActions,\n+  CardContent,\n+  Grid,\n   IconButton,\n   List,\n-  ListItem,\n   ListSubheader,\n+  TablePagination,\n   TextField,\n-  Grid,\n-  Card,\n-  CardContent,\n } from \"@material-ui/core\";\n import SearchIcon from \"@material-ui/icons/Search\";\n-import { searchItems } from \"./SearchModule\";\n+import { defaultPagedSearchResult, searchItems } from \"./SearchModule\";\n import * as OEQ from \"@openequella/rest-api-client\";\n import SearchResult from \"./components/SearchResult\";\n import { generateFromError } from \"../api/errors\";\n import {\n   getSearchSettingsFromServer,\n   SearchSettings,\n+  SortOrder,\n } from \"../settings/Search/SearchSettingsModule\";\n+import { makeStyles } from \"@material-ui/core/styles\";\n+\n+const useStyles = makeStyles({\n+  cardAction: {\n+    display: \"flex\",\n+    justifyContent: \"center\",\n+  },\n+});\n \n const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n+  const classes = useStyles();\n   const searchStrings = languageStrings.searchpage;\n-  const [searchResultItems, setSearchResultItems] = useState<\n-    OEQ.Search.SearchResultItem[]\n-  >([]);\n+\n+  const [rowsPerPage, setRowsPerPage] = useState<number>(10);\n+  const [currentPage, setCurrentPage] = useState<number>(0);\n+  const [sortOrder, setSortOrder] = useState<SortOrder>(SortOrder.RANK);\n+  const [pagedSearchResult, setPagedSearchResult] = useState<\n+    OEQ.Common.PagedResult<OEQ.Search.SearchResultItem>\n+  >(defaultPagedSearchResult);\n \n   /**\n-   * Update the page title and do a default search.\n+   * Construct a standard search criteria.\n+   */\n+  const standardParams: OEQ.Search.SearchParams = {", "originalCommit": "ff578348c4b687959d7171d978be7dd7f26f6f41", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ab6a36120108d7514e49d36b69f88a20fb100559", "url": "https://github.com/openequella/openEQUELLA/commit/ab6a36120108d7514e49d36b69f88a20fb100559", "message": "Use MUI Grid to control the position of pagination.", "committedDate": "2020-07-03T00:32:30Z", "type": "commit"}, {"oid": "6123d30332c83cdcf75ccf34d0db554ee24d46ba", "url": "https://github.com/openequella/openEQUELLA/commit/6123d30332c83cdcf75ccf34d0db554ee24d46ba", "message": "Consolidate search controls into a single interface.", "committedDate": "2020-07-03T00:37:59Z", "type": "commit"}, {"oid": "0c27787034a49cd2758288555c31e0f2a8cff95f", "url": "https://github.com/openequella/openEQUELLA/commit/0c27787034a49cd2758288555c31e0f2a8cff95f", "message": "Update the Jest test for SearchModule\n\nDue to the change of parameters that function searchItems takes, update\nthis test to use the default search options. Also, because ts-jest does\nnot support enum well, use the workaround recommended by ts-jest to make\nthis test work.", "committedDate": "2020-07-03T01:52:12Z", "type": "commit"}]}