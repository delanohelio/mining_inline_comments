{"pr_number": 2582, "pr_title": "Support Advanced/Remote searches in Selection Session", "pr_createdAt": "2020-12-03T23:45:44Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2582", "timeline": [{"oid": "fcd8ff6ddf50463dbdadd1def4fed358948e9345", "url": "https://github.com/openequella/openEQUELLA/commit/fcd8ff6ddf50463dbdadd1def4fed358948e9345", "message": "Add a new Link component which provides either a MUI Link\nor a React Router Link.", "committedDate": "2020-12-02T22:43:00Z", "type": "commit"}, {"oid": "7d77e2991e359245a9fcdb413c0647df0c200014", "url": "https://github.com/openequella/openEQUELLA/commit/7d77e2991e359245a9fcdb413c0647df0c200014", "message": "Use component OeqLink in SearchResult.", "committedDate": "2020-12-02T22:43:00Z", "type": "commit"}, {"oid": "7ebd2b5f60d6eafaa16c227b2f54126b93c88d6d", "url": "https://github.com/openequella/openEQUELLA/commit/7ebd2b5f60d6eafaa16c227b2f54126b93c88d6d", "message": "Use component OeqLink for accessing Remote search and\nAdvanced search.", "committedDate": "2020-12-02T22:43:49Z", "type": "commit"}, {"oid": "73766adb122278e9f177ab9db7e69ee8b425d9ae", "url": "https://github.com/openequella/openEQUELLA/commit/73766adb122278e9f177ab9db7e69ee8b425d9ae", "message": "Only prepare draggables when Selection Session\nis in 'structured'.", "committedDate": "2020-12-03T07:10:00Z", "type": "commit"}, {"oid": "3c6084cd8a69247862e35de10529dba50a829240", "url": "https://github.com/openequella/openEQUELLA/commit/3c6084cd8a69247862e35de10529dba50a829240", "message": "Support using Advanced searches with new Search UI in Selection\nSession.\n\nThis includes adding a new Section module and a Section which\nserve 'advanced/searching.do'.", "committedDate": "2020-12-03T23:00:01Z", "type": "commit"}, {"oid": "9f752401f90872a5682de93e6e0f180b7ff878a5", "url": "https://github.com/openequella/openEQUELLA/commit/9f752401f90872a5682de93e6e0f180b7ff878a5", "message": "Update the Storybook of AuxiliarySearchSelector.", "committedDate": "2020-12-03T23:29:01Z", "type": "commit"}, {"oid": "2ff6b085b5e48c6db9eaaef52741c21fd161322d", "url": "https://github.com/openequella/openEQUELLA/commit/2ff6b085b5e48c6db9eaaef52741c21fd161322d", "message": "Update variable name in 'buildSelectionSessionAdvancedSearchLink'.", "committedDate": "2020-12-03T23:51:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc0ODY2NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2582#discussion_r535748665", "bodyText": "To keep things DRY so as to ensure accuracy, this should more so wrap the route in routes, something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const remoteSearchLink = AppConfig.baseUrl.concat(\n          \n          \n            \n                `access/z3950.do?.repository=${uuid}&uc=true&_sl.stateId=${stateId}`\n          \n          \n            \n              );\n          \n          \n            \n              const remoteSearchLink = AppConfig.baseUrl.concat(\n          \n          \n            \n                `${routes.RemoteSearch.to(uuid)}&_sl.stateId=${stateId}`\n          \n          \n            \n              );\n          \n      \n    \n    \n  \n\nThe same suggestion applies for the below Advanced Search.", "author": "edalex-ian", "createdAt": "2020-12-04T00:34:46Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/LegacySelectionSessionModule.ts", "diffHunk": "@@ -215,6 +226,42 @@ export const buildSelectionSessionItemSummaryLink = (\n   return itemSummaryPageLink;\n };\n \n+/**\n+ * Build a Selection Session specific Remote search Link. Recommended to first call `isSelectionSessionOpen()`\n+ * before use.\n+ * @param uuid The UUID of a Remote search\n+ */\n+export const buildSelectionSessionRemoteSearchLink = (uuid: string): string => {\n+  const { stateId, integId } = getSelectionSessionInfo();\n+  const remoteSearchLink = AppConfig.baseUrl.concat(\n+    `access/z3950.do?.repository=${uuid}&uc=true&_sl.stateId=${stateId}`\n+  );", "originalCommit": "2ff6b085b5e48c6db9eaaef52741c21fd161322d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1MDcxOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2582#discussion_r535750719", "bodyText": "This body pretty well duplicates the above function. I'd suggest you have one function such as:\nconst buildSelectionSessionLink = (routerPath: string) => {\n  const { stateId, integId } = getSelectionSessionInfo();\n  const selectionSessionLink = AppConfig.baseUrl.concat(\n    `${routerPath}&_sl.stateId=${stateId}`\n  );\n\n  if (integId) {\n    return selectionSessionLink.concat(`&_int.id=${integId}`);\n  }\n  return selectionSessionLink;\n}\nAnd this this function would simply be:\nexport const buildSelectionSessionAdvancedSearchLink = (\n  uuid: string\n): string => buildSelectionSessionLink(routes.AdvancedSearch.to(uuid));\nAnd you'd obviously do the same for buildSelectionSessionRemoteSearchLink. (And further down this review I've noted you'd probably want the same for buildSelectionSessionItemSummaryLink.)", "author": "edalex-ian", "createdAt": "2020-12-04T00:40:21Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/LegacySelectionSessionModule.ts", "diffHunk": "@@ -215,6 +226,42 @@ export const buildSelectionSessionItemSummaryLink = (\n   return itemSummaryPageLink;\n };\n \n+/**\n+ * Build a Selection Session specific Remote search Link. Recommended to first call `isSelectionSessionOpen()`\n+ * before use.\n+ * @param uuid The UUID of a Remote search\n+ */\n+export const buildSelectionSessionRemoteSearchLink = (uuid: string): string => {\n+  const { stateId, integId } = getSelectionSessionInfo();\n+  const remoteSearchLink = AppConfig.baseUrl.concat(\n+    `access/z3950.do?.repository=${uuid}&uc=true&_sl.stateId=${stateId}`\n+  );\n+\n+  if (integId) {\n+    return remoteSearchLink.concat(`&_int.id=${integId}`);\n+  }\n+  return remoteSearchLink;\n+};\n+\n+/**\n+ * Build a Selection Session specific Advanced search Link. Recommended to first call `isSelectionSessionOpen()`\n+ * before use.\n+ * @param uuid The UUID of an Advanced search\n+ */\n+export const buildSelectionSessionAdvancedSearchLink = (\n+  uuid: string\n+): string => {\n+  const { stateId, integId } = getSelectionSessionInfo();\n+  const advancedSearchLink = AppConfig.baseUrl.concat(\n+    `advanced/searching.do?in=P${uuid}&editquery=true&_sl.stateId=${stateId}`\n+  );\n+\n+  if (integId) {\n+    return advancedSearchLink.concat(`&_int.id=${integId}`);\n+  }\n+  return advancedSearchLink;", "originalCommit": "2ff6b085b5e48c6db9eaaef52741c21fd161322d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc4OTA4NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2582#discussion_r535789085", "bodyText": "There is one small difference. For the ItemSummary URL, it requires &a=${layout} whereas the remote one and advanced one do not need. But I think it's fine to add this query string to the remote one and advanced one.", "author": "PenghaiZhang", "createdAt": "2020-12-04T02:27:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1MDcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1NDE0Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2582#discussion_r535754146", "bodyText": "With this block we now have further conditional logic where we're already inside a ternary. I think for readability sake, this true branch of the ternary should now be in it's own function. So then this value expression might end up looking like:\nconst itemPrimaryContent =\n  inSelectionSession && !isSelectSummaryButtonDisabled() ? (\n    selectionSessionItemContent()\n  ) : (\n    itemLink()\n  );", "author": "edalex-ian", "createdAt": "2020-12-04T00:49:23Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchResult.tsx", "diffHunk": "@@ -482,11 +480,13 @@ export default function SearchResult({\n         data-itemuuid={uuid}\n         data-itemversion={version}\n       >\n-        <Grid item>\n-          <IconButton>\n-            <DragIndicatorIcon />\n-          </IconButton>\n-        </Grid>\n+        {inStructured && (\n+          <Grid item>\n+            <IconButton>\n+              <DragIndicatorIcon />\n+            </IconButton>\n+          </Grid>\n+        )}", "originalCommit": "2ff6b085b5e48c6db9eaaef52741c21fd161322d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1NDk4NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2582#discussion_r535754984", "bodyText": "Could be value here in a comment saying why you're setting this to 'false'.", "author": "edalex-ian", "createdAt": "2020-12-04T00:51:42Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/searching/section/RootAdvancedSearchSection.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.searching.section;\n+\n+import com.tle.web.sections.SectionResult;\n+import com.tle.web.sections.SectionTree;\n+import com.tle.web.sections.events.RenderEventContext;\n+import com.tle.web.sections.events.RenderEventListener;\n+import com.tle.web.sections.render.HtmlRendererListener;\n+import com.tle.web.selection.SelectionSession;\n+import com.tle.web.selection.section.RootSelectionSection.Layout;\n+import com.tle.web.selection.section.SelectionSummarySection;\n+\n+public class RootAdvancedSearchSection extends RootSearchSection {\n+\n+  @Override\n+  public SectionResult renderHtml(RenderEventContext context) {\n+    SelectionSession selectionSession = selectionService.getCurrentSession(context);\n+    if (selectionSession != null) {\n+      // As we keep SelectionSummarySection in the tree for 'advanced/searching.do' regardless of\n+      // Selection Session's layout, we need to dynamically handle whether to show it or not.\n+      // The approach is to remove or add the RenderEventListener for SelectionSummarySection.\n+      SelectionSummarySection selectionSummarySection =\n+          context.lookupSection(SelectionSummarySection.class);\n+      String selectionSummarySectionId = selectionSummarySection.getSectionId();\n+      Layout selectionSessionLayout = selectionSession.getLayout();\n+      boolean selectionSummaryListenerExisting =\n+          context\n+                  .getTree()\n+                  .getListeners(selectionSummarySectionId, RenderEventListener.class)\n+                  .size()\n+              > 0;\n+\n+      // Remove the listener in 'structured'.\n+      if (selectionSessionLayout == Layout.COURSE && selectionSummaryListenerExisting) {\n+        context.getTree().removeListeners(selectionSummarySectionId);\n+      }\n+      // Or add the listener back in 'selectOrAdd'.\n+      else if (selectionSessionLayout == Layout.NORMAL && !selectionSummaryListenerExisting) {\n+        context\n+            .getTree()\n+            .addListener(\n+                selectionSummarySectionId,\n+                RenderEventListener.class,\n+                new HtmlRendererListener(\n+                    selectionSummarySectionId, selectionSummarySection, getTree()));\n+      }\n+    }\n+\n+    return super.renderHtml(context);\n+  }\n+\n+  @Override\n+  public void registered(String id, SectionTree tree) {\n+    super.registered(id, tree);\n+  }\n+\n+  @Override\n+  public boolean useNewSearch() {\n+    return false;", "originalCommit": "2ff6b085b5e48c6db9eaaef52741c21fd161322d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1NTQ4Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2582#discussion_r535755482", "bodyText": "Be good to do as JavaDoc.", "author": "edalex-ian", "createdAt": "2020-12-04T00:52:56Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/searching/section/RootSearchSection.java", "diffHunk": "@@ -70,6 +70,11 @@ protected String getSessionKey() {\n     return SEARCH_SESSIONKEY;\n   }\n \n+  // For child sections that need to skip new Search UI, override this function and return false.", "originalCommit": "2ff6b085b5e48c6db9eaaef52741c21fd161322d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc1NTg0Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2582#discussion_r535755847", "bodyText": "Should this perhaps just be protected?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public boolean useNewSearch() {\n          \n          \n            \n              protected boolean useNewSearch() {\n          \n      \n    \n    \n  \n\nIt's not intended to be used a public interface, just for internal operations.", "author": "edalex-ian", "createdAt": "2020-12-04T00:54:05Z", "path": "Source/Plugins/Core/com.equella.core/src/com/tle/web/searching/section/RootSearchSection.java", "diffHunk": "@@ -70,6 +70,11 @@ protected String getSessionKey() {\n     return SEARCH_SESSIONKEY;\n   }\n \n+  // For child sections that need to skip new Search UI, override this function and return false.\n+  public boolean useNewSearch() {", "originalCommit": "2ff6b085b5e48c6db9eaaef52741c21fd161322d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3c3c8fcecdb888ec1e89b60eeeda2ee1d1a96fba", "url": "https://github.com/openequella/openEQUELLA/commit/3c3c8fcecdb888ec1e89b60eeeda2ee1d1a96fba", "message": "A couple comment rewording for RootAdvancedSearchSection.", "committedDate": "2020-12-04T02:17:46Z", "type": "commit"}, {"oid": "0e83edeaea65043d80e6da10f8f013d2776279de", "url": "https://github.com/openequella/openEQUELLA/commit/0e83edeaea65043d80e6da10f8f013d2776279de", "message": "Centralise the building of URLs used in Selection Session\ninto a function to reduce duplicated code.\n\nThis also includes using the 'URL' class to avoid string\ninterpolation. In addition, add functions to access 'baseUrl'\nprovided by 'AppConfig'. This is primarily because 'baseUrl'\nis an empty string in Jest tests, which result in errors\nwhen using 'URL' class.", "committedDate": "2020-12-04T04:13:53Z", "type": "commit"}, {"oid": "64d5b67cf26ab18e61739adb4e712ae899fa41c1", "url": "https://github.com/openequella/openEQUELLA/commit/64d5b67cf26ab18e61739adb4e712ae899fa41c1", "message": "Make sure the selection submit URL is correct.", "committedDate": "2020-12-04T04:27:23Z", "type": "commit"}]}