{"pr_number": 1513, "pr_title": "Add new Search Settings page", "pr_createdAt": "2020-02-27T23:20:49Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1513", "timeline": [{"oid": "7f649cc92edccd56c834d6fa2e9f1a36c8ffce3a", "url": "https://github.com/openequella/openEQUELLA/commit/7f649cc92edccd56c834d6fa2e9f1a36c8ffce3a", "message": "Add new subcategory to Searching menu", "committedDate": "2020-02-27T22:54:17Z", "type": "commit"}, {"oid": "5ac359d9bb3b1bb371cc75e803fd2ec1e342fcc3", "url": "https://github.com/openequella/openEQUELLA/commit/5ac359d9bb3b1bb371cc75e803fd2ec1e342fcc3", "message": "Add type definitions and API call methods", "committedDate": "2020-02-27T22:54:17Z", "type": "commit"}, {"oid": "240d537d3da94c6cfeb300458d89d70ca4aac8b6", "url": "https://github.com/openequella/openEQUELLA/commit/240d537d3da94c6cfeb300458d89d70ca4aac8b6", "message": "Add route for new search page", "committedDate": "2020-02-27T22:54:17Z", "type": "commit"}, {"oid": "fcb8f4993e93a2d2de65fb305fa8121c07512720", "url": "https://github.com/openequella/openEQUELLA/commit/fcb8f4993e93a2d2de65fb305fa8121c07512720", "message": "Create language strings", "committedDate": "2020-02-27T22:54:17Z", "type": "commit"}, {"oid": "8b0cf2ec46cc311c9f8cbfe5ac57732eb144c4b5", "url": "https://github.com/openequella/openEQUELLA/commit/8b0cf2ec46cc311c9f8cbfe5ac57732eb144c4b5", "message": "Implement Search Page settings page", "committedDate": "2020-02-27T22:54:18Z", "type": "commit"}, {"oid": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "url": "https://github.com/openequella/openEQUELLA/commit/1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "message": "Test against correct ACL", "committedDate": "2020-02-27T23:18:34Z", "type": "commit"}, {"oid": "785419fe8644c464207788427625c03e71ad8807", "url": "https://github.com/openequella/openEQUELLA/commit/785419fe8644c464207788427625c03e71ad8807", "message": "Add IDs for test access", "committedDate": "2020-02-28T05:30:41Z", "type": "commit"}, {"oid": "29207a692771b73c1696fc1ac077b15a52320491", "url": "https://github.com/openequella/openEQUELLA/commit/29207a692771b73c1696fc1ac077b15a52320491", "message": "Change incorrect POST calls to PUT calls", "committedDate": "2020-02-28T05:31:08Z", "type": "commit"}, {"oid": "54ac8d620e8d1af0b22b7396bb05d5c3ad216e5a", "url": "https://github.com/openequella/openEQUELLA/commit/54ac8d620e8d1af0b22b7396bb05d5c3ad216e5a", "message": "Add method for detecting presence of Image Gallery button on search page", "committedDate": "2020-02-28T05:33:17Z", "type": "commit"}, {"oid": "71194b4850b083b00198e4fa5d6fbb2eba0887d2", "url": "https://github.com/openequella/openEQUELLA/commit/71194b4850b083b00198e4fa5d6fbb2eba0887d2", "message": "Update tests to work with the new page and remove filter tests for now", "committedDate": "2020-02-28T05:34:47Z", "type": "commit"}, {"oid": "3c78888208267d483425dd5a224b77c79f0bc3d8", "url": "https://github.com/openequella/openEQUELLA/commit/3c78888208267d483425dd5a224b77c79f0bc3d8", "message": "Increase padding on form controls", "committedDate": "2020-02-28T05:43:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0MTMyOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385441328", "bodyText": "Are these are likely to be global standards?  If so they can be consolidated into the MUI theme with overrides, ideally the styles should be one-offs otherwise they start to repeat across the app.", "author": "edalex-tom", "createdAt": "2020-02-28T00:06:22Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,315 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NjY5NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385446695", "bodyText": "I take it we don't need a bridge entry for this?\nNot sure on the usage of any here, I take it there are complexities involved\nUpdate: Ian gave me a rundown on the purescript shenanigans, may be adding a javascript doc in here to reflect it otherwise it's assumed knowledge", "author": "edalex-tom", "createdAt": "2020-02-28T00:24:37Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/routes.tsx", "diffHunk": "@@ -52,6 +53,10 @@ export const routes = {\n     path: \"/page/search\",\n     render: (p: OEQRouteComponentProps<any>) => <bridge.SearchPage {...p} />\n   },\n+  SearchSettings: {\n+    path: \"/page/searchsettings\",\n+    render: (p: OEQRouteComponentProps<any>) => <SearchPageSettings {...p} />", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcwODE0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386708142", "bodyText": "The Bridge is there as a pathway between Purescript and Typescript, IIRC. Not needed here. I can look into adding doco though.", "author": "SammyIsConfused", "createdAt": "2020-03-02T23:13:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0NjY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0ODk4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385448989", "bodyText": "The name strings isn't really meaningful, sounds very generic and looks odd with things like strings.name", "author": "edalex-tom", "createdAt": "2020-02-28T00:33:12Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,315 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDMzMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386730331", "bodyText": "f86a7cf", "author": "SammyIsConfused", "createdAt": "2020-03-03T00:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ0ODk4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MDUwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385450505", "bodyText": "I think the catch handling can be consolidated into the bottom catch? Although non-axios errors may cause havoc", "author": "edalex-tom", "createdAt": "2020-02-28T00:38:37Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,315 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDYzMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386730633", "bodyText": "6e4b314", "author": "SammyIsConfused", "createdAt": "2020-03-03T00:21:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MDUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MTkxOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385451919", "bodyText": "Alternate approach from nesting the promises is to chain them with a returns, e.g.\n   getSearchSettingsFromServer()\n      .then((settings: AxiosResponse<SearchSettings>) => setSearchSettings(settings.data))\n      .then(() => getCloudSettingsFromServer())\n      .then((settings: AxiosResponse<CloudSettings>) => setCloudSettings(settings.data))\n      .catch((error: AxiosError) => {\n        handleError(error);\n      });\n\nIs there a need for both get calls to run in sequence? Or can they be bundled into a promise collection.  Both calls could be done by a call to a function in the module that then does both calls, it reduces the promise handling in the page and simplifies writing tests for the page.\nAnother alternative in this is to return the data (SearchSettings) or a ErrorResponse (as that's what the errors get transformed into) rather than the Axios specific results (response and error) as it will remove the references to Axios outside of the module so if there's a decision to move to the native fetch then only the modules would need to change.", "author": "edalex-tom", "createdAt": "2020-02-28T00:43:44Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,315 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyOTY0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386729642", "bodyText": "6e4b314", "author": "SammyIsConfused", "createdAt": "2020-03-03T00:17:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1MTkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDQwMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385454401", "bodyText": "Is there a reason why Grid isn't being used?  As it can help standardise layout (including padding), reduce the need for custom styling and support responsive design.\nI'd recommend these simple functional components not include the section wrappers, that's a layout that the page wants and the component doesn't need to know about, it'll streamline what the component needs to focus on and let the page focus on defining the layout and where components sit", "author": "edalex-tom", "createdAt": "2020-02-28T00:52:29Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,315 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {\n+    return (\n+      <div className={classes.section}>", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwMjkyNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386202927", "bodyText": "May I ask what 'section wrappers' refers to here?", "author": "PenghaiZhang", "createdAt": "2020-03-02T05:28:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NTg0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386695844", "bodyText": "The <div className={classes.section> are wrappers", "author": "edalex-tom", "createdAt": "2020-03-02T22:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyMjQyOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386722428", "bodyText": "You were right. After changing to Grids a lot of the className styles are no longer necessary.", "author": "SammyIsConfused", "createdAt": "2020-03-02T23:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDQwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjczMDA4MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386730080", "bodyText": "3561891", "author": "SammyIsConfused", "createdAt": "2020-03-03T00:19:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1NDQwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1Njg1Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385456856", "bodyText": "This looks like a repeating pattern, it's near identical to the NonLiveItemsSetting (and label + checkboxes in GalleryViewsSetting), just with different text and change handler.  They can be consolidated into a component, which helps if there are any changes needed in the future, reducing testing the same thing and can help the app scale.", "author": "edalex-tom", "createdAt": "2020-02-28T01:01:24Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,315 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.defaultSortOrder}</FormLabel>\n+          <Select\n+            disabled={errorMessage}\n+            onChange={event =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                defaultSearchSort: event.target.value as SortOrder\n+              })\n+            }\n+            className={classes.dropDown}\n+            variant={\"standard\"}\n+            value={searchSettings.defaultSearchSort}\n+          >\n+            <MenuItem value={SortOrder.RANK}>{strings.relevance}</MenuItem>\n+            <MenuItem value={SortOrder.DATEMODIFIED}>\n+              {strings.lastModified}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.DATECREATED}>\n+              {strings.dateCreated}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.NAME}>{strings.title}</MenuItem>\n+            <MenuItem value={SortOrder.RATING}>{strings.userRating}</MenuItem>\n+          </Select>\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function NonLiveItemsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.allowNonLive}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingShowNonLiveCheckbox: checked\n+              });\n+            }}\n+            label={strings.allowNonLiveLabel}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.searchingShowNonLiveCheckbox}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function AuthenticatedFeedSetting() {", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1Nzk5OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385457999", "bodyText": "There are some styleguides that suggest if an argument is not used then it can be named _, as some IDEs will identify unused variables and ignore the check if it's named _", "author": "edalex-tom", "createdAt": "2020-02-28T01:05:45Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,315 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.defaultSortOrder}</FormLabel>\n+          <Select\n+            disabled={errorMessage}\n+            onChange={event =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                defaultSearchSort: event.target.value as SortOrder\n+              })\n+            }\n+            className={classes.dropDown}\n+            variant={\"standard\"}\n+            value={searchSettings.defaultSearchSort}\n+          >\n+            <MenuItem value={SortOrder.RANK}>{strings.relevance}</MenuItem>\n+            <MenuItem value={SortOrder.DATEMODIFIED}>\n+              {strings.lastModified}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.DATECREATED}>\n+              {strings.dateCreated}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.NAME}>{strings.title}</MenuItem>\n+            <MenuItem value={SortOrder.RATING}>{strings.userRating}</MenuItem>\n+          </Select>\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function NonLiveItemsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.allowNonLive}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwNDMzNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386204336", "bodyText": "I prefer not to use _ as we already have many _s in Scala and Purescript code :) (just for readability)", "author": "PenghaiZhang", "createdAt": "2020-03-02T05:35:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1Nzk5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjY5NjM4NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386696385", "bodyText": "It's a standard convention in typescript but not fussed", "author": "edalex-tom", "createdAt": "2020-03-02T22:43:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ1Nzk5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4MDU1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385480554", "bodyText": "Can destruct the props to reduce the need to do the props.updateTemplate\nexport function SearchPageSettings({updateTemplate}: TemplateUpdateProps)\n\nThe page should be the default export, as it focuses the import and can reduce the need to add curly brackets when importing.  I've got into the habit of adding the default export to the bottom of components as it's supports cleaning adding HOCs and prevents needing to scan through a large file to figure out the default export, e.g.\nexport default SearchPageSettings;", "author": "edalex-tom", "createdAt": "2020-02-28T02:37:06Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,315 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4MTcwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385481705", "bodyText": "Some of these look generic and likely to be used elsewhere, is there a need to not have a generic section?", "author": "edalex-tom", "createdAt": "2020-02-28T02:42:44Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -321,7 +321,36 @@ export const languageStrings = {\n       desc: \"Settings for integrating with external systems\"\n     },\n     diagnostics: { name: \"Diagnostics\", desc: \"Diagnostic pages\" },\n-    searching: { name: \"Searching\", desc: \"Searching settings\" },\n+    searching: {\n+      name: \"Search\",\n+      desc: \"Searching settings\",\n+      searchPageSettings: {\n+        name: \"Search page settings\",\n+        defaultSortOrder: \"Default sort order\",\n+        relevance: \"Relevance\",\n+        lastModified: \"Date last modified\",\n+        dateCreated: \"Date created\",\n+        title: \"Title\",\n+        userRating: \"User rating\",\n+        allowNonLive: \"Allow non-live results\",\n+        allowNonLiveLabel:\n+          \"Show the 'Include results that are not live' checkbox\",\n+        authFeed: \"Authenticated feeds\",\n+        authFeedLabel: \"Generate authenticated RSS and Atom feed links \",\n+        galleryViews: \"Gallery views\",\n+        disableImages: \"Disable Images\",\n+        disableVideos: \"Disable Videos\",\n+        disableFileCount: \"Disable File Count\",\n+        cloudSearching: \"Cloud searching\",\n+        cloudSearchingLabel:\n+          \"Do not show cloud results when performing searches.\",\n+        disableCloud: \"Disable cloud searching\",\n+        save: \"Save\",\n+        success: \"Settings saved successfully.\",\n+        notFoundError: \"Endpoint not found\",\n+        notFoundErrorDesc: \"Endpoint not found. Refresh to retry.\"", "originalCommit": "1f0ca9ef28eb2e66ba4720f6b49988a89118b9d9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5Mzk4MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386793981", "bodyText": "No not really, aside from not wanting to import multiple language string indexes for single components.", "author": "SammyIsConfused", "createdAt": "2020-03-03T04:31:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQ4MTcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyMDgwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385520804", "bodyText": "Any thoughts on whether this will be a repeating pattern?  It doesn't look like it'd be specific to the search page.\nIt looks like updateTemplate is called in both scenarios, the only difference is what is passed to the templateError.   The approach for error handling seems awkward (three function calls), with everything that wants to set a standard error having to import two functions to pass into a property\nconst template = error.response?.status == 404 ? generateNewErrorID(strings.notFoundError, error.response.status, strings.notFoundErrorDesc) : generateFromError(error)\nprops.updateTemplate(templateError(template))\n\nThe above doesn't look particularly clean, just breaking my brain, it also requires typescript 3.7+ and it looks like the project has 3.3.3333?", "author": "edalex-tom", "createdAt": "2020-02-28T06:02:34Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,322 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginLeft: \"8px\",\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.defaultSortOrder}</FormLabel>\n+          <Select\n+            SelectDisplayProps={{ id: \"_sortOrder\" }}\n+            disabled={errorMessage}\n+            onChange={event =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                defaultSearchSort: event.target.value as SortOrder\n+              })\n+            }\n+            className={classes.dropDown}\n+            variant={\"standard\"}\n+            value={searchSettings.defaultSearchSort}\n+          >\n+            <MenuItem value={SortOrder.RANK}>{strings.relevance}</MenuItem>\n+            <MenuItem value={SortOrder.DATEMODIFIED}>\n+              {strings.lastModified}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.DATECREATED}>\n+              {strings.dateCreated}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.NAME}>{strings.title}</MenuItem>\n+            <MenuItem value={SortOrder.RATING}>{strings.userRating}</MenuItem>\n+          </Select>\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function NonLiveItemsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.allowNonLive}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingShowNonLiveCheckbox: checked\n+              });\n+            }}\n+            label={strings.allowNonLiveLabel}\n+            control={\n+              <Checkbox\n+                id={\"_showNonLiveCheckbox\"}\n+                checked={searchSettings.searchingShowNonLiveCheckbox}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function AuthenticatedFeedSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.authFeed}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                authenticateFeedsByDefault: checked\n+              });\n+            }}\n+            label={strings.authFeedLabel}\n+            control={\n+              <Checkbox\n+                id={\"_authenticateByDefault\"}\n+                checked={searchSettings.authenticateFeedsByDefault}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function GalleryViewsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.galleryViews}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableGallery: checked\n+              });\n+            }}\n+            label={strings.disableImages}\n+            control={\n+              <Checkbox\n+                id={\"_disableGallery\"}\n+                checked={searchSettings.searchingDisableGallery}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableVideos: checked\n+              });\n+            }}\n+            label={strings.disableVideos}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.searchingDisableVideos}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                fileCountDisabled: checked\n+              });\n+            }}\n+            label={strings.disableFileCount}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.fileCountDisabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function CloudSearchSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.cloudSearching}</FormLabel>\n+          <FormHelperText>{strings.cloudSearchingLabel}</FormHelperText>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setCloudSettings({ ...cloudSettings, disabled: checked });\n+            }}\n+            label={strings.disableCloud}\n+            control={\n+              <Checkbox\n+                id={\"cs_dc\"}\n+                checked={cloudSettings.disabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function handleError(error: AxiosError) {\n+    setErrorMessage(true);\n+    if (error.response != undefined) {\n+      switch (error.response.status) {\n+        case 404:\n+          props.updateTemplate(\n+            templateError(\n+              generateNewErrorID(\n+                strings.notFoundError,\n+                error.response.status,\n+                strings.notFoundErrorDesc\n+              )\n+            )\n+          );\n+      }\n+    } else {\n+      props.updateTemplate(templateError(generateFromError(error)));\n+    }\n+  }", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwNjcwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386206702", "bodyText": "Any thoughts on whether this will be a repeating pattern? It doesn't look like it'd be specific to the search page.\nIt looks like updateTemplate is called in both scenarios, the only difference is what is passed to the templateError. The approach for error handling seems awkward (three function calls), with everything that wants to set a standard error having to import two functions to pass into a property\nconst template = error.response?.status == 404 ? generateNewErrorID(strings.notFoundError, error.response.status, strings.notFoundErrorDesc) : generateFromError(error)\nprops.updateTemplate(templateError(template))\n\nThe above doesn't look particularly clean, just breaking my brain, it also requires typescript 3.7+ and it looks like the project has 3.3.3333?\n\nI agree the point of repeating pattern. It's true that some pages (e.g. Cloud provider page and Theme page) have their own error handling, however they don't have significant differences. So it is good to have a general error handling to avoid repeating.", "author": "PenghaiZhang", "createdAt": "2020-03-02T05:47:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyMDgwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDE5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385524190", "bodyText": "Is there any intention of the switch having more cases?   If there's an error that's not a 404 then this will result in no call to updateTemplate", "author": "edalex-tom", "createdAt": "2020-02-28T06:18:38Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,322 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginLeft: \"8px\",\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.defaultSortOrder}</FormLabel>\n+          <Select\n+            SelectDisplayProps={{ id: \"_sortOrder\" }}\n+            disabled={errorMessage}\n+            onChange={event =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                defaultSearchSort: event.target.value as SortOrder\n+              })\n+            }\n+            className={classes.dropDown}\n+            variant={\"standard\"}\n+            value={searchSettings.defaultSearchSort}\n+          >\n+            <MenuItem value={SortOrder.RANK}>{strings.relevance}</MenuItem>\n+            <MenuItem value={SortOrder.DATEMODIFIED}>\n+              {strings.lastModified}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.DATECREATED}>\n+              {strings.dateCreated}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.NAME}>{strings.title}</MenuItem>\n+            <MenuItem value={SortOrder.RATING}>{strings.userRating}</MenuItem>\n+          </Select>\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function NonLiveItemsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.allowNonLive}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingShowNonLiveCheckbox: checked\n+              });\n+            }}\n+            label={strings.allowNonLiveLabel}\n+            control={\n+              <Checkbox\n+                id={\"_showNonLiveCheckbox\"}\n+                checked={searchSettings.searchingShowNonLiveCheckbox}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function AuthenticatedFeedSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.authFeed}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                authenticateFeedsByDefault: checked\n+              });\n+            }}\n+            label={strings.authFeedLabel}\n+            control={\n+              <Checkbox\n+                id={\"_authenticateByDefault\"}\n+                checked={searchSettings.authenticateFeedsByDefault}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function GalleryViewsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.galleryViews}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableGallery: checked\n+              });\n+            }}\n+            label={strings.disableImages}\n+            control={\n+              <Checkbox\n+                id={\"_disableGallery\"}\n+                checked={searchSettings.searchingDisableGallery}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableVideos: checked\n+              });\n+            }}\n+            label={strings.disableVideos}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.searchingDisableVideos}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                fileCountDisabled: checked\n+              });\n+            }}\n+            label={strings.disableFileCount}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.fileCountDisabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function CloudSearchSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.cloudSearching}</FormLabel>\n+          <FormHelperText>{strings.cloudSearchingLabel}</FormHelperText>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setCloudSettings({ ...cloudSettings, disabled: checked });\n+            }}\n+            label={strings.disableCloud}\n+            control={\n+              <Checkbox\n+                id={\"cs_dc\"}\n+                checked={cloudSettings.disabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function handleError(error: AxiosError) {\n+    setErrorMessage(true);\n+    if (error.response != undefined) {\n+      switch (error.response.status) {\n+        case 404:", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDc5Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385524793", "bodyText": "Same as above, this can potentially have chained thens and a single catch", "author": "edalex-tom", "createdAt": "2020-02-28T06:21:21Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,322 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginLeft: \"8px\",\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.defaultSortOrder}</FormLabel>\n+          <Select\n+            SelectDisplayProps={{ id: \"_sortOrder\" }}\n+            disabled={errorMessage}\n+            onChange={event =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                defaultSearchSort: event.target.value as SortOrder\n+              })\n+            }\n+            className={classes.dropDown}\n+            variant={\"standard\"}\n+            value={searchSettings.defaultSearchSort}\n+          >\n+            <MenuItem value={SortOrder.RANK}>{strings.relevance}</MenuItem>\n+            <MenuItem value={SortOrder.DATEMODIFIED}>\n+              {strings.lastModified}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.DATECREATED}>\n+              {strings.dateCreated}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.NAME}>{strings.title}</MenuItem>\n+            <MenuItem value={SortOrder.RATING}>{strings.userRating}</MenuItem>\n+          </Select>\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function NonLiveItemsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.allowNonLive}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingShowNonLiveCheckbox: checked\n+              });\n+            }}\n+            label={strings.allowNonLiveLabel}\n+            control={\n+              <Checkbox\n+                id={\"_showNonLiveCheckbox\"}\n+                checked={searchSettings.searchingShowNonLiveCheckbox}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function AuthenticatedFeedSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.authFeed}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                authenticateFeedsByDefault: checked\n+              });\n+            }}\n+            label={strings.authFeedLabel}\n+            control={\n+              <Checkbox\n+                id={\"_authenticateByDefault\"}\n+                checked={searchSettings.authenticateFeedsByDefault}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function GalleryViewsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.galleryViews}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableGallery: checked\n+              });\n+            }}\n+            label={strings.disableImages}\n+            control={\n+              <Checkbox\n+                id={\"_disableGallery\"}\n+                checked={searchSettings.searchingDisableGallery}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableVideos: checked\n+              });\n+            }}\n+            label={strings.disableVideos}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.searchingDisableVideos}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                fileCountDisabled: checked\n+              });\n+            }}\n+            label={strings.disableFileCount}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.fileCountDisabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function CloudSearchSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.cloudSearching}</FormLabel>\n+          <FormHelperText>{strings.cloudSearchingLabel}</FormHelperText>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setCloudSettings({ ...cloudSettings, disabled: checked });\n+            }}\n+            label={strings.disableCloud}\n+            control={\n+              <Checkbox\n+                id={\"cs_dc\"}\n+                checked={cloudSettings.disabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function handleError(error: AxiosError) {\n+    setErrorMessage(true);\n+    if (error.response != undefined) {\n+      switch (error.response.status) {\n+        case 404:\n+          props.updateTemplate(\n+            templateError(\n+              generateNewErrorID(\n+                strings.notFoundError,\n+                error.response.status,\n+                strings.notFoundErrorDesc\n+              )\n+            )\n+          );\n+      }\n+    } else {\n+      props.updateTemplate(templateError(generateFromError(error)));\n+    }\n+  }\n+\n+  function handleSubmitButton() {\n+    saveSearchSettingsToServer(searchSettings)\n+      .then(() => {\n+        saveCloudSettingsToServer(cloudSettings)\n+          .then(() => {\n+            setSuccessMessage(true);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjcyOTUzNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386729537", "bodyText": "6e4b314", "author": "SammyIsConfused", "createdAt": "2020-03-03T00:17:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUyNDc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzMTc5Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385531797", "bodyText": "Different schools of thought but in the past I've primarily aimed to make the functional tests easily readable, relying on a combination of page objects, fluent methods and ensuring complexity is not in the test method itself.\nThis file has a lot of repeating logic that bloats the test, e.g.\nSearchSettingsPage ssp = new SettingsPage(context).load().searchSettings().load();\n...something\nssp.save();\n\nAlternative might be something like below, which chains things together when all that's desired is the end result so the test can then assert things\nSearchSettingsPage ssp = new SettingsPage(context)\n    .loadSearchSettings()\n    .doSomething()\n    .doOtherThing()\n    .save()\n\nThere's also quite a bit use of hard asserts (fail after the first assert failure) rather than soft asserts (run all the asserts and fail if any fail), this can result in one error hiding other errors.", "author": "edalex-tom", "createdAt": "2020-02-28T06:46:59Z", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/SearchSettingsTest.java", "diffHunk": "@@ -164,89 +154,29 @@ public void testDisableCloud() {\n     assertTrue(!ssp.isDisableCloud(), \"Cloud was not enabled\");\n   }\n \n-  // Test the setup/usage of the MIME type search filters\n-  @Test(dataProvider = \"filters\")\n-  public void testSetupSearchFilters(String filterName, String mimetype, int count) {\n-    logon(\"AutoTest\", \"automated\");\n-    SearchSettingsPage ssp = new SettingsPage(context).load().searchSettings();\n-    CreateSearchFilterPage sfp = ssp.addFilter();\n-    sfp.setName(filterName).selectMimeType(mimetype, true).save();\n-\n-    // Check for receipt\n-    ReceiptPage.waiter(\"Search filter saved successfully\", ssp).get();\n-\n-    // Check table\n-    assertTrue(ssp.hasFilter(filterName), \"Did not find filter with name: \" + filterName);\n-\n-    SearchPage searchPage = new SearchPage(context).load();\n-    assertTrue(\n-        searchPage.hasResourceTypeFilter(filterName),\n-        \"Expected to find \" + filterName + \" in resource type filters\");\n-    searchPage.clearResourceTypeFilters();\n-    searchPage.checkResourceTypeFilter(filterName, true);\n-    String itemName = MessageFormat.format(\"SearchSettings - Image {0} - {1}\", count, filterName);\n-    ItemListPage results = SearchPage.searchExact(context, itemName);\n-    assertTrue(results.doesResultExist(itemName, 1));\n-  }\n-\n-  // Test the editing of MIME type search filters\n-  @Test(dependsOnMethods = {\"testRemoveSearchFilters\"})\n-  public void testEditSearchFilter() {\n+  @Test\n+  public void testDisableGallery() {", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgxNzg2MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394817860", "bodyText": "Definitely all good feedback. \ud83d\udc4d\nAnd something we are aiming for all new tests - I believe @SammyIsConfused is across this from other new tests done. I guess here we're just trying to make sure existing tests continue to function. It'd be nice to refactor them, but we'd quickly run out of time. :'(", "author": "edalex-ian", "createdAt": "2020-03-19T06:42:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzMTc5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzMjkwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385532904", "bodyText": "Is there ever a scenario where a page object construction is not followed by a load?", "author": "edalex-tom", "createdAt": "2020-02-28T06:51:26Z", "path": "autotest/OldTests/src/test/java/com/tle/webtests/test/searching/SearchSettingsTest.java", "diffHunk": "@@ -164,89 +154,29 @@ public void testDisableCloud() {\n     assertTrue(!ssp.isDisableCloud(), \"Cloud was not enabled\");\n   }\n \n-  // Test the setup/usage of the MIME type search filters\n-  @Test(dataProvider = \"filters\")\n-  public void testSetupSearchFilters(String filterName, String mimetype, int count) {\n-    logon(\"AutoTest\", \"automated\");\n-    SearchSettingsPage ssp = new SettingsPage(context).load().searchSettings();\n-    CreateSearchFilterPage sfp = ssp.addFilter();\n-    sfp.setName(filterName).selectMimeType(mimetype, true).save();\n-\n-    // Check for receipt\n-    ReceiptPage.waiter(\"Search filter saved successfully\", ssp).get();\n-\n-    // Check table\n-    assertTrue(ssp.hasFilter(filterName), \"Did not find filter with name: \" + filterName);\n-\n-    SearchPage searchPage = new SearchPage(context).load();\n-    assertTrue(\n-        searchPage.hasResourceTypeFilter(filterName),\n-        \"Expected to find \" + filterName + \" in resource type filters\");\n-    searchPage.clearResourceTypeFilters();\n-    searchPage.checkResourceTypeFilter(filterName, true);\n-    String itemName = MessageFormat.format(\"SearchSettings - Image {0} - {1}\", count, filterName);\n-    ItemListPage results = SearchPage.searchExact(context, itemName);\n-    assertTrue(results.doesResultExist(itemName, 1));\n-  }\n-\n-  // Test the editing of MIME type search filters\n-  @Test(dependsOnMethods = {\"testRemoveSearchFilters\"})\n-  public void testEditSearchFilter() {\n+  @Test\n+  public void testDisableGallery() {\n+    // Disable Images Gallery view\n     logon(\"AutoTest\", \"automated\");\n-    SearchSettingsPage ssp = new SettingsPage(context).load().searchSettings();\n-    CreateSearchFilterPage sfp = ssp.addFilter();\n-    String filterName = \"All Images\";\n-    String filterNameEdited = \"All Images - Edited\";\n-\n-    sfp.saveWithErrors();\n-    assertTrue(sfp.nameValidationExists());\n-    assertTrue(sfp.mimeTypeValidationExists());\n-\n-    sfp.setName(filterName).saveWithErrors();\n-    assertTrue(!sfp.nameValidationExists());\n-\n-    sfp.setName(\"\");\n-    sfp.selectMimeTypes(\n-            Arrays.asList(\"image/jpeg\", \"image/bmp\", \"image/png\", \"image/tiff\", \"equella/plan\"))\n-        .saveWithErrors();\n-    assertTrue(!sfp.mimeTypeValidationExists());\n-\n-    ssp = sfp.setName(filterName).save();\n-\n-    sfp = ssp.editFilter(filterName);\n-    ((JavascriptExecutor) getContext().getDriver())\n-        .executeScript(\"window.scrollTo(0, -document.body.scrollHeight)\");\n-    sfp.selectMimeType(\"equella/plan\", false);\n-    ssp = sfp.selectMimeType(\"image/gif\", true).setName(filterNameEdited).save().get();\n-    assertTrue(\n-        ssp.hasFilter(filterNameEdited), \"Filter '\" + filterNameEdited + \"' was not present\");\n+    SearchSettingsPage ssp = new SettingsPage(context).load().searchSettings().load();\n+    ssp.setDisableImageGallery(true);\n+    ssp.save();\n \n+    // Go to search page, test that gallery is disabled\n     SearchPage searchPage = new SearchPage(context).load();\n-    assertTrue(searchPage.hasResourceTypeFilter(filterNameEdited));\n+    assertFalse(searchPage.isImagesLinkAvailable());\n \n-    ssp = new SettingsPage(context).load().searchSettings();\n-    sfp = ssp.editFilter(filterNameEdited);\n-    String bogusName = \"bogusfiltername\";\n-    sfp.setName(bogusName).cancel();\n-    assertTrue(!ssp.hasFilter(bogusName));\n-\n-    ssp = new SettingsPage(context).load().searchSettings();\n-    ssp.removeFilter(filterNameEdited);\n-    assertTrue(!ssp.hasFilter(filterNameEdited));\n-  }\n+    // Now reenable Images Gallery\n+    ssp = new SettingsPage(context).load().searchSettings().load();\n+    ssp.setDisableImageGallery(false);\n+    ssp.save();\n \n-  // Test the removal of the MIME type search filters\n-  @Test(\n-      dependsOnMethods = {\"testSetupSearchFilters\"},\n-      dataProvider = \"filters\")\n-  public void testRemoveSearchFilters(String filterName, String mimetype, int count) {\n-    SearchSettingsPage ssp = new SettingsPage(context).load().searchSettings();\n-    ssp.removeFilter(filterName);\n-    assertTrue(!ssp.hasFilter(filterName), \"Expected not to see \" + filterName + \" after removal\");\n+    // Go to search page, test that gallery is enabled\n+    searchPage = new SearchPage(context).load();", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIwOTQxOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386209418", "bodyText": "Quite a lot are followed by a get", "author": "PenghaiZhang", "createdAt": "2020-03-02T06:00:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzMjkwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzNjU2OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385536568", "bodyText": "Should the constant still be used?", "author": "edalex-tom", "createdAt": "2020-02-28T07:03:33Z", "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/SearchSettingsPage.java", "diffHunk": "@@ -43,25 +44,34 @@\n   @FindBy(id = \"cs_dc\")\n   private WebElement disableCloud;\n \n+  @FindBy(id = \"_disableGallery\")\n+  private WebElement disableGalleryCheckbox;\n+\n+  @FindBy(id = \"_sortOrder\")\n+  private WebElement sortOrderDropdown;\n+\n   private EquellaSelect resultOrder;\n \n   public SearchSettingsPage(PageContext context) {\n-    super(context, By.xpath(\"//h2[text()='\" + SEARCH_SETTINGS_SECTION_TITLE + \"']\"));\n+    super(context, By.xpath(\"//h5[text()='Search page settings']\"));", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5NzI2MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386797260", "bodyText": "Yep! Done.", "author": "SammyIsConfused", "createdAt": "2020-03-03T04:47:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzNjU2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTUzOTQ3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385539479", "bodyText": "I'm not sure if these sort of components should be dedicated files but they shouldn't be in the SearchPageSettings function:\n\ntests wouldn't be able to access them, the test would have to test the parent component which gets awkward with variation and snapshot testing\nthey will be re-created every time the parent function is called\nthey aren't functional components, as they are taking things outside of their definition so just looking at the component itself won't indicate what would be rendered\nthe parent component needs to import everything used by the child, so when a large page comes in then this approach would result in a massive wall of imports and potentially numerous styling entries", "author": "edalex-tom", "createdAt": "2020-02-28T07:14:07Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,322 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginLeft: \"8px\",\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0MzQyNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385543427", "bodyText": "The != undefined isn't needed", "author": "edalex-tom", "createdAt": "2020-02-28T07:28:11Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,322 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginLeft: \"8px\",\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.defaultSortOrder}</FormLabel>\n+          <Select\n+            SelectDisplayProps={{ id: \"_sortOrder\" }}\n+            disabled={errorMessage}\n+            onChange={event =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                defaultSearchSort: event.target.value as SortOrder\n+              })\n+            }\n+            className={classes.dropDown}\n+            variant={\"standard\"}\n+            value={searchSettings.defaultSearchSort}\n+          >\n+            <MenuItem value={SortOrder.RANK}>{strings.relevance}</MenuItem>\n+            <MenuItem value={SortOrder.DATEMODIFIED}>\n+              {strings.lastModified}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.DATECREATED}>\n+              {strings.dateCreated}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.NAME}>{strings.title}</MenuItem>\n+            <MenuItem value={SortOrder.RATING}>{strings.userRating}</MenuItem>\n+          </Select>\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function NonLiveItemsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.allowNonLive}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingShowNonLiveCheckbox: checked\n+              });\n+            }}\n+            label={strings.allowNonLiveLabel}\n+            control={\n+              <Checkbox\n+                id={\"_showNonLiveCheckbox\"}\n+                checked={searchSettings.searchingShowNonLiveCheckbox}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function AuthenticatedFeedSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.authFeed}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                authenticateFeedsByDefault: checked\n+              });\n+            }}\n+            label={strings.authFeedLabel}\n+            control={\n+              <Checkbox\n+                id={\"_authenticateByDefault\"}\n+                checked={searchSettings.authenticateFeedsByDefault}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function GalleryViewsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.galleryViews}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableGallery: checked\n+              });\n+            }}\n+            label={strings.disableImages}\n+            control={\n+              <Checkbox\n+                id={\"_disableGallery\"}\n+                checked={searchSettings.searchingDisableGallery}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableVideos: checked\n+              });\n+            }}\n+            label={strings.disableVideos}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.searchingDisableVideos}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                fileCountDisabled: checked\n+              });\n+            }}\n+            label={strings.disableFileCount}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.fileCountDisabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function CloudSearchSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.cloudSearching}</FormLabel>\n+          <FormHelperText>{strings.cloudSearchingLabel}</FormHelperText>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setCloudSettings({ ...cloudSettings, disabled: checked });\n+            }}\n+            label={strings.disableCloud}\n+            control={\n+              <Checkbox\n+                id={\"cs_dc\"}\n+                checked={cloudSettings.disabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function handleError(error: AxiosError) {\n+    setErrorMessage(true);\n+    if (error.response != undefined) {", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NDUwOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385544509", "bodyText": "Not entirely sure why NewErrorID is in the function name", "author": "edalex-tom", "createdAt": "2020-02-28T07:31:38Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,322 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import {\n+  Button,\n+  Checkbox,\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel,\n+  MenuItem,\n+  Select\n+} from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings,\n+  SortOrder\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+\n+let useStyles = makeStyles({\n+  dropDown: {\n+    marginTop: \"4px\"\n+  },\n+  section: {\n+    marginLeft: \"8px\",\n+    marginTop: \"4px\",\n+    marginBottom: \"24px\"\n+  },\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  },\n+  checkbox: {\n+    paddingTop: \"4px\",\n+    paddingBottom: \"4px\"\n+  }\n+});\n+\n+export function SearchPageSettings(props: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n+  const [successMessage, setSuccessMessage] = React.useState<boolean>(false);\n+  const strings = languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    props.updateTemplate(tp => ({\n+      ...templateDefaults(strings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) => {\n+        setSearchSettings(settings.data);\n+      })\n+      .then(() => {\n+        getCloudSettingsFromServer()\n+          .then((settings: AxiosResponse<CloudSettings>) => {\n+            setCloudSettings(settings.data);\n+          })\n+          .catch((error: AxiosError) => {\n+            handleError(error);\n+          });\n+      })\n+      .catch((error: AxiosError) => {\n+        handleError(error);\n+      });\n+  }, []);\n+\n+  function DefaultSortOrderSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.defaultSortOrder}</FormLabel>\n+          <Select\n+            SelectDisplayProps={{ id: \"_sortOrder\" }}\n+            disabled={errorMessage}\n+            onChange={event =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                defaultSearchSort: event.target.value as SortOrder\n+              })\n+            }\n+            className={classes.dropDown}\n+            variant={\"standard\"}\n+            value={searchSettings.defaultSearchSort}\n+          >\n+            <MenuItem value={SortOrder.RANK}>{strings.relevance}</MenuItem>\n+            <MenuItem value={SortOrder.DATEMODIFIED}>\n+              {strings.lastModified}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.DATECREATED}>\n+              {strings.dateCreated}\n+            </MenuItem>\n+            <MenuItem value={SortOrder.NAME}>{strings.title}</MenuItem>\n+            <MenuItem value={SortOrder.RATING}>{strings.userRating}</MenuItem>\n+          </Select>\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function NonLiveItemsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.allowNonLive}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingShowNonLiveCheckbox: checked\n+              });\n+            }}\n+            label={strings.allowNonLiveLabel}\n+            control={\n+              <Checkbox\n+                id={\"_showNonLiveCheckbox\"}\n+                checked={searchSettings.searchingShowNonLiveCheckbox}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function AuthenticatedFeedSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.authFeed}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                authenticateFeedsByDefault: checked\n+              });\n+            }}\n+            label={strings.authFeedLabel}\n+            control={\n+              <Checkbox\n+                id={\"_authenticateByDefault\"}\n+                checked={searchSettings.authenticateFeedsByDefault}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function GalleryViewsSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.galleryViews}</FormLabel>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableGallery: checked\n+              });\n+            }}\n+            label={strings.disableImages}\n+            control={\n+              <Checkbox\n+                id={\"_disableGallery\"}\n+                checked={searchSettings.searchingDisableGallery}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingDisableVideos: checked\n+              });\n+            }}\n+            label={strings.disableVideos}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.searchingDisableVideos}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setSearchSettings({\n+                ...searchSettings,\n+                fileCountDisabled: checked\n+              });\n+            }}\n+            label={strings.disableFileCount}\n+            control={\n+              <Checkbox\n+                checked={searchSettings.fileCountDisabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function CloudSearchSetting() {\n+    return (\n+      <div className={classes.section}>\n+        <FormControl>\n+          <FormLabel>{strings.cloudSearching}</FormLabel>\n+          <FormHelperText>{strings.cloudSearchingLabel}</FormHelperText>\n+          <FormControlLabel\n+            disabled={errorMessage}\n+            onChange={(event, checked) => {\n+              setCloudSettings({ ...cloudSettings, disabled: checked });\n+            }}\n+            label={strings.disableCloud}\n+            control={\n+              <Checkbox\n+                id={\"cs_dc\"}\n+                checked={cloudSettings.disabled}\n+                className={classes.checkbox}\n+              />\n+            }\n+          />\n+        </FormControl>\n+      </div>\n+    );\n+  }\n+\n+  function handleError(error: AxiosError) {\n+    setErrorMessage(true);\n+    if (error.response != undefined) {\n+      switch (error.response.status) {\n+        case 404:\n+          props.updateTemplate(\n+            templateError(\n+              generateNewErrorID(", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5NzEwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386797104", "bodyText": "When this was explained to me, it was because each error is assigned a new UUID which is checked against when rendering the template. This is to prevent the same error snackbar happening over and over.", "author": "SammyIsConfused", "createdAt": "2020-03-03T04:46:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NDUwOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0MjYyOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387342629", "bodyText": "It looks like both the generateNewErrorID and generateFromError generate a unique ID", "author": "edalex-tom", "createdAt": "2020-03-03T22:50:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NDUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NzkxNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385547915", "bodyText": "Not sure on any preferences towards adding javadoc to tests", "author": "edalex-tom", "createdAt": "2020-02-28T07:42:32Z", "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/SearchSettingsPage.java", "diffHunk": "@@ -43,25 +44,34 @@\n   @FindBy(id = \"cs_dc\")\n   private WebElement disableCloud;\n \n+  @FindBy(id = \"_disableGallery\")\n+  private WebElement disableGalleryCheckbox;\n+\n+  @FindBy(id = \"_sortOrder\")\n+  private WebElement sortOrderDropdown;\n+\n   private EquellaSelect resultOrder;\n \n   public SearchSettingsPage(PageContext context) {", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgxOTIwOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394819208", "bodyText": "I have a preference for JavaDoc in tests. \ud83d\ude01\nI find it especially in XyzPage classes to tell me where/what this page actually is meant to be representing. Could be good to quickly add that in @SammyIsConfused", "author": "edalex-ian", "createdAt": "2020-03-19T06:46:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU0NzkxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MDQwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r385550405", "bodyText": "Is the normalize-space needed?\nIf the xpath fails then I'm not sure the test really informs what was there, e.g. if Images isn't found then the test could output what was found to give more information about the failure.  Otherwise someone would need to check the artifacts?  I don't know if the UIs tests are performing screenshots and page dumps on failures", "author": "edalex-tom", "createdAt": "2020-02-28T07:50:25Z", "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/searching/SearchPage.java", "diffHunk": "@@ -145,6 +145,14 @@ public PowerSearchPage setWithinPowerSearch(String powersearch) {\n     return new PowerSearchPage(this).get();\n   }\n \n+  public boolean isImagesLinkAvailable() {\n+    return driver\n+            .findElements(\n+                By.xpath(\"//div[@id='result-type-select']/a[normalize-space(@title) = 'Images']\"))", "originalCommit": "3c78888208267d483425dd5a224b77c79f0bc3d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc5NjY5OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386796699", "bodyText": "It hasn't generally been the pattern so far to add context to failures in oEQ (not that that means we shouldn't) mainly because screenshots on failures are performed.", "author": "SammyIsConfused", "createdAt": "2020-03-03T04:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk1MTE4MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386951181", "bodyText": "Fair enough, I've never found screenshots to be super useful from UI tests and have added helpers in the past to dump the HTML plus any console errors", "author": "edalex-tom", "createdAt": "2020-03-03T11:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MDQwNQ=="}], "type": "inlineReview"}, {"oid": "f86a7cf7c1770609ba2f47697833415dcb071eda", "url": "https://github.com/openequella/openEQUELLA/commit/f86a7cf7c1770609ba2f47697833415dcb071eda", "message": "Change string variable identifier to be more specific", "committedDate": "2020-03-02T23:20:11Z", "type": "commit"}, {"oid": "35618918d932d7ae0afe28cc945ec861e84af778", "url": "https://github.com/openequella/openEQUELLA/commit/35618918d932d7ae0afe28cc945ec861e84af778", "message": "Change from section containers to Grid containers, remove unneccessary styles", "committedDate": "2020-03-02T23:53:26Z", "type": "commit"}, {"oid": "6e4b314dfee633307212697316d840b104dbd811", "url": "https://github.com/openequella/openEQUELLA/commit/6e4b314dfee633307212697316d840b104dbd811", "message": "Simplify API call chaining", "committedDate": "2020-03-03T00:14:03Z", "type": "commit"}, {"oid": "079ca239f36281163ff7507e18560a89bc41f3c4", "url": "https://github.com/openequella/openEQUELLA/commit/079ca239f36281163ff7507e18560a89bc41f3c4", "message": "Simplify null check", "committedDate": "2020-03-03T00:31:49Z", "type": "commit"}, {"oid": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "url": "https://github.com/openequella/openEQUELLA/commit/186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "message": "Refactor components into their own files", "committedDate": "2020-03-03T04:03:57Z", "type": "commit"}, {"oid": "e4009595bda78fa22001e54481bbad20a7bc18a8", "url": "https://github.com/openequella/openEQUELLA/commit/e4009595bda78fa22001e54481bbad20a7bc18a8", "message": "Handle permissions errors", "committedDate": "2020-03-03T04:25:27Z", "type": "commit"}, {"oid": "c4c38374c676cb35b1a5cba8126e854b75c04de5", "url": "https://github.com/openequella/openEQUELLA/commit/c4c38374c676cb35b1a5cba8126e854b75c04de5", "message": "Fix edge case in which a non-standard axios error would have no display", "committedDate": "2020-03-03T04:29:40Z", "type": "commit"}, {"oid": "1faeea19d32456609c2dff87d3bdb150b2026262", "url": "https://github.com/openequella/openEQUELLA/commit/1faeea19d32456609c2dff87d3bdb150b2026262", "message": "Use constant string in xpath", "committedDate": "2020-03-03T04:42:36Z", "type": "commit"}, {"oid": "d3eabaf29100e33dee6d6a8fc8c9c994efd59733", "url": "https://github.com/openequella/openEQUELLA/commit/d3eabaf29100e33dee6d6a8fc8c9c994efd59733", "message": "Remove normalize-space from xpath", "committedDate": "2020-03-03T04:43:08Z", "type": "commit"}, {"oid": "1ece8ed9989bdec1c0d73c6b5ac2d334d6793e41", "url": "https://github.com/openequella/openEQUELLA/commit/1ece8ed9989bdec1c0d73c6b5ac2d334d6793e41", "message": "Make testDisableGallery more readable", "committedDate": "2020-03-03T04:57:30Z", "type": "commit"}, {"oid": "8e76e7362a3bbe0b9fb3a5ca5c6e90b2eccb44f7", "url": "https://github.com/openequella/openEQUELLA/commit/8e76e7362a3bbe0b9fb3a5ca5c6e90b2eccb44f7", "message": "Revert to just using setState calls rather than a wrapper function", "committedDate": "2020-03-03T06:01:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzA4Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386803082", "bodyText": "As discussed, this is looking like a base for input controls (that just happen to always be a checkbox atm).  Recommend a checkbox component be created to wrap this, it'll simplify the onChange (as the event is never used) and remove the need to define the checkbox control (i.e. control={Checkbox id=).\nIt also raises the question of whether this is SearchSettings specific or if it can be a common thing, this may need to be discussed with Ian as this gets into grey areas about what is the standard element patterns for inputs", "author": "edalex-tom", "createdAt": "2020-03-03T05:14:21Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/SearchSettingFormControl.tsx", "diffHunk": "@@ -0,0 +1,30 @@\n+import {\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel\n+} from \"@material-ui/core\";\n+import * as React from \"react\";\n+\n+export default function SearchSettingFormControl(props: {", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NjA1OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387386058", "bodyText": "Added a SettingsCheckbox component.", "author": "SammyIsConfused", "createdAt": "2020-03-04T01:02:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzA4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzI2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386803267", "bodyText": "These threw me off as a thought errorMessage would be the message rather than a flag", "author": "edalex-tom", "createdAt": "2020-03-03T05:15:18Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -50,6 +43,7 @@ export function SearchPageSettings(props: TemplateUpdateProps) {\n   });\n   const [errorMessage, setErrorMessage] = React.useState<boolean>(false);\n   const [successMessage, setSuccessMessage] = React.useState<boolean>(false);", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NTg2Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387385862", "bodyText": "Fixed.", "author": "SammyIsConfused", "createdAt": "2020-03-04T01:01:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzI2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwMzYxMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386803613", "bodyText": "Great to see the comments, downside of making generic components as they lose readability", "author": "edalex-tom", "createdAt": "2020-03-03T05:16:51Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -258,15 +91,99 @@ export function SearchPageSettings(props: TemplateUpdateProps) {\n       .catch((error: AxiosError) => handleError(error));\n   }\n \n+  function handleSearchSettingsChange(\n+    key: keyof SearchSettings,\n+    value: boolean | SortOrder\n+  ) {\n+    setSearchSettings({\n+      ...searchSettings,\n+      [key]: value\n+    });\n+  }\n+\n+  function handleCloudSettingsChange(key: keyof CloudSettings, value: boolean) {\n+    setCloudSettings({\n+      ...cloudSettings,\n+      [key]: value\n+    });\n+  }\n+\n   return (\n     <SettingsMenuContainer>\n       <Grid container direction={\"column\"} spacing={8}>\n-        <DefaultSortOrderSetting />\n-        <NonLiveItemsSetting />\n-        <AuthenticatedFeedSetting />\n-        <GalleryViewsSetting />\n-        <CloudSearchSetting />\n+        {/*Default Sort Order*/}", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNTkwNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386805906", "bodyText": "I didn't realise this was here, any thoughts on whether this is the pattern that will continue to be used?  It's a wrapper component that just add padding.\nPros: It's consistent\nCons: It's hiding away styling", "author": "edalex-tom", "createdAt": "2020-03-03T05:27:27Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -258,15 +91,99 @@ export function SearchPageSettings(props: TemplateUpdateProps) {\n       .catch((error: AxiosError) => handleError(error));\n   }\n \n+  function handleSearchSettingsChange(\n+    key: keyof SearchSettings,\n+    value: boolean | SortOrder\n+  ) {\n+    setSearchSettings({\n+      ...searchSettings,\n+      [key]: value\n+    });\n+  }\n+\n+  function handleCloudSettingsChange(key: keyof CloudSettings, value: boolean) {\n+    setCloudSettings({\n+      ...cloudSettings,\n+      [key]: value\n+    });\n+  }\n+\n   return (\n     <SettingsMenuContainer>", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NjYzNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387386637", "bodyText": "It's been used before in other places in oEQ (IIRC, the theme editor, login notice and course editor)", "author": "SammyIsConfused", "createdAt": "2020-03-04T01:02:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwNTkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwOTk3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386809971", "bodyText": "As discusssed, this gets a bit iffy as a pattern as it lacks type safety for the values (e..g this can be called with valid keys but invalid value types for the key), there are ways of doing type inference but it ends up making the helper functions more complicated than it's worth.\nRecommend the onChange handlers just call set state, it'll mean a lot of spreads but negates any type concerns", "author": "edalex-tom", "createdAt": "2020-03-03T05:45:17Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -258,15 +91,99 @@ export function SearchPageSettings(props: TemplateUpdateProps) {\n       .catch((error: AxiosError) => handleError(error));\n   }\n \n+  function handleSearchSettingsChange(\n+    key: keyof SearchSettings,\n+    value: boolean | SortOrder\n+  ) {\n+    setSearchSettings({\n+      ...searchSettings,\n+      [key]: value\n+    });\n+  }", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk2MDcyMA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386960720", "bodyText": "Below is a rough example of a function that could (?) support the state update and tie the key and value types together, not recommending this as I think it's probably bypassing real world type safety.  I was tempted to make the handleChange function even more generic but it gets messy (messier)\ninterface IProps {\n  disabled: boolean;\n  firstName: string;\n  nickname?: string;\n  title: string;\n  year: number;\n}\n\nconst StateUpdate = () => {\n  const [model, setModel] = React.useState<IProps>({\n    disabled: false,\n    firstName: \"\",\n    title: \"\",\n    year: 2018\n  });\n\n  const handleChange = <K extends keyof IProps>(key: K, value: IProps[K]) =>\n    setModel({ ...model, [key]: value });\n\n  handleChange(\"disabled\", \"waffle\"); // Error - \"waffle\" isn't a boolean\n  handleChange(\"disabled\", true); // OK\n  handleChange(\"firstName\", \"waffle\"); // OK\n  handleChange(\"year\", 2018); // OK\n  handleChange(\"nickname\", undefined); // OK\n  handleChange(\"nickname\", 1); // Error - 1 isn't a string\n};", "author": "edalex-tom", "createdAt": "2020-03-03T11:32:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgwOTk3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMDg4NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386820885", "bodyText": "This is just a preferences but I've started avoiding defining a props variable as I end up destructing it everytime and never use the props ever again.\nexport default function DefaultSortOrderSetting({\n  disabled,\n  searchSettings,\n  handleSearchSettingsChange\n}: DefaultSortOrderSettingProps) {\n\nThe searchPageSettingsStrings could be done out of the function (as it's a constant anyway), this with the above means the function is focused on just returning content which can be a very clean pattern", "author": "edalex-tom", "createdAt": "2020-03-03T06:29:01Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/components/DefaultSortOrderSetting.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+import { FormLabel, Grid, MenuItem, Select } from \"@material-ui/core\";\n+import { SearchSettings, SortOrder } from \"../SearchSettingsModule\";\n+import * as React from \"react\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+\n+export interface DefaultSortOrderSettingProps {\n+  disabled: boolean;\n+  searchSettings: SearchSettings;\n+  handleSearchSettingsChange: (\n+    key: keyof SearchSettings,\n+    value: SortOrder\n+  ) => void;\n+}\n+export default function DefaultSortOrderSetting(\n+  props: DefaultSortOrderSettingProps\n+) {\n+  const { disabled, searchSettings, handleSearchSettingsChange } = props;", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NzIzMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387387231", "bodyText": "Fixed.", "author": "SammyIsConfused", "createdAt": "2020-03-04T01:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMDg4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMzk3Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386823976", "bodyText": "Recommend this just be a simple setter (no key), the current implementation would only allow the defaultSearchSort value to be set anyway (as value is typed).\nIf this component needed to handle anything else then it's a toss up as to whether a complex approach (keys + typed values) is better than having multiple simple onChange handlers (one for each field) or a handler that can update the entire object (not recommending it).  The simple handlers are probably a better approach, otherwise the onChange function could be used for changing values that are not related to this component, means simpler testing, lower risk of unexpected behaviour and focuses what this component can do.", "author": "edalex-tom", "createdAt": "2020-03-03T06:40:42Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/components/DefaultSortOrderSetting.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+import { FormLabel, Grid, MenuItem, Select } from \"@material-ui/core\";\n+import { SearchSettings, SortOrder } from \"../SearchSettingsModule\";\n+import * as React from \"react\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+\n+export interface DefaultSortOrderSettingProps {\n+  disabled: boolean;\n+  searchSettings: SearchSettings;\n+  handleSearchSettingsChange: (\n+    key: keyof SearchSettings,\n+    value: SortOrder\n+  ) => void;", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNzk0MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387407941", "bodyText": "Fixed. Now using just the setter.", "author": "SammyIsConfused", "createdAt": "2020-03-04T01:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyMzk3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgyNjc3Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386826777", "bodyText": "Same feedback from DefaultSortOrderSetting, except this time it's handling multiple onChange.\nI'll see if I can track down any examples of how to tie the value to the key, I can appreciate a preference to not having multiple handler properties.\nUpdate: My comment above was out of date.   I don't know on passing the setSearchSettings down, it's kinda making a child component stateful in a roundabout way as it can access both the state value and setter.\nJust rounding out thoughts for the pattern of passing in state value and setter:\n\ngiving it the state value/model means memo won't provide much benefit as it'll cache more values than it uses\n\nany state changes will cause re-rendering of everything (which isn't necessarily bad as nothing is heavy)\nnot recommending memo, I avoid suggesting it unless it's doing something complex (e.g. charts, elements that have tooltips, transitions, graphics, etc...)\n\n\nhaving multiple handlers is simpler and cleaner but will get verbose\ntesting the change handler will be checking the entire state value rather than a call and payload\nthe props contract doesn't scope what this component has access to or what state values it can change\nit's not a scalable pattern, we wouldn't want to do this is a component wanted access to or change a single value as the component would then be bound to a specific state", "author": "edalex-tom", "createdAt": "2020-03-03T06:50:44Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/components/GalleryViewsSettings.tsx", "diffHunk": "@@ -0,0 +1,69 @@\n+import { Checkbox, Grid } from \"@material-ui/core\";\n+import SearchSettingFormControl from \"../../../components/SearchSettingFormControl\";\n+import * as React from \"react\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+import { SearchSettings } from \"../SearchSettingsModule\";\n+\n+export interface GalleryViewsSettingsProps {\n+  searchSettings: SearchSettings;\n+  disabled: boolean;\n+  handleSearchSettingsChange: (\n+    key: keyof SearchSettings,\n+    value: boolean\n+  ) => void;\n+}\n+export default function GalleryViewsSettings(props: GalleryViewsSettingsProps) {", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMzA3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386833079", "bodyText": "This may (?) cause spacing inconsistencies, as there are grid containers in grid containers and each are adding spacing.\n\nGrid container with spacing\n\nGrid item\n\nDefaultSortOrderSetting\n\nGrid container with spacing\n\nGrid item\n\n\n\n\n\n\nGrid item\n- SearchSettingFormControl\n\n\n\nAn alternative is to have the DefaultSortOrderSetting and GalleryViewSettings just return the grid items without the wrapping grid container.\nAre the DefaultSortOrderSetting and GalleryViewSettings just to group sections together?  If so then they may be introducing complexities (spacing, onChange handlers, property drilling).", "author": "edalex-tom", "createdAt": "2020-03-03T07:12:28Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -258,15 +91,99 @@ export function SearchPageSettings(props: TemplateUpdateProps) {\n       .catch((error: AxiosError) => handleError(error));\n   }\n \n+  function handleSearchSettingsChange(\n+    key: keyof SearchSettings,\n+    value: boolean | SortOrder\n+  ) {\n+    setSearchSettings({\n+      ...searchSettings,\n+      [key]: value\n+    });\n+  }\n+\n+  function handleCloudSettingsChange(key: keyof CloudSettings, value: boolean) {\n+    setCloudSettings({\n+      ...cloudSettings,\n+      [key]: value\n+    });\n+  }\n+\n   return (\n     <SettingsMenuContainer>\n       <Grid container direction={\"column\"} spacing={8}>\n-        <DefaultSortOrderSetting />\n-        <NonLiveItemsSetting />\n-        <AuthenticatedFeedSetting />\n-        <GalleryViewsSetting />\n-        <CloudSearchSetting />\n+        {/*Default Sort Order*/}\n+        <Grid item>\n+          <DefaultSortOrderSetting\n+            disabled={errorMessage}\n+            searchSettings={searchSettings}\n+            handleSearchSettingsChange={handleSearchSettingsChange}\n+          />\n+        </Grid>\n+\n+        {/*Include Non-Live checkbox*/}\n+        <Grid item>\n+          <SearchSettingFormControl\n+            control={\n+              <Checkbox\n+                id={\"_showNonLiveCheckbox\"}\n+                checked={searchSettings.searchingShowNonLiveCheckbox}\n+              />\n+            }\n+            label={searchPageSettingsStrings.allowNonLiveLabel}\n+            disabled={errorMessage}\n+            onChange={(_, checked) =>\n+              handleSearchSettingsChange(\n+                \"searchingShowNonLiveCheckbox\",\n+                checked\n+              )\n+            }\n+            title={searchPageSettingsStrings.allowNonLive}\n+          />\n+        </Grid>\n+\n+        {/*Authenticate By Default*/}\n+        <Grid item>\n+          <SearchSettingFormControl\n+            control={\n+              <Checkbox\n+                id={\"_authenticateByDefault\"}\n+                checked={searchSettings.authenticateFeedsByDefault}\n+              />\n+            }\n+            label={searchPageSettingsStrings.authFeedLabel}\n+            disabled={errorMessage}\n+            onChange={(_, checked) =>\n+              handleSearchSettingsChange(\"authenticateFeedsByDefault\", checked)\n+            }\n+            title={searchPageSettingsStrings.authFeed}\n+          />\n+        </Grid>\n+\n+        {/*Gallery views*/}\n+        <Grid item>\n+          <GalleryViewsSettings", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQxMTQ1Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387411453", "bodyText": "Removed the extraneous Grid containers.", "author": "SammyIsConfused", "createdAt": "2020-03-04T02:11:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMzA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMzk0MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386833940", "bodyText": "Does this conflict with the pattern in SearchSettingsFormControl? which doesn't include grids around the FormLabel and corresponding control.", "author": "edalex-tom", "createdAt": "2020-03-03T07:15:17Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/components/DefaultSortOrderSetting.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+import { FormLabel, Grid, MenuItem, Select } from \"@material-ui/core\";\n+import { SearchSettings, SortOrder } from \"../SearchSettingsModule\";\n+import * as React from \"react\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+\n+export interface DefaultSortOrderSettingProps {\n+  disabled: boolean;\n+  searchSettings: SearchSettings;\n+  handleSearchSettingsChange: (\n+    key: keyof SearchSettings,\n+    value: SortOrder\n+  ) => void;\n+}\n+export default function DefaultSortOrderSetting(\n+  props: DefaultSortOrderSettingProps\n+) {\n+  const { disabled, searchSettings, handleSearchSettingsChange } = props;\n+  const searchPageSettingsStrings =\n+    languageStrings.settings.searching.searchPageSettings;\n+  return (\n+    <Grid container direction={\"column\"} spacing={8}>\n+      <Grid item>", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNjU1MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387406551", "bodyText": "The difference is we aren't using a FormControl. I tried doing it in the same way and it breaks - FormControl was never meant to handle a Select.", "author": "SammyIsConfused", "createdAt": "2020-03-04T01:51:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzMzk0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNDUwOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386834509", "bodyText": "This component only needs to handle one onChange event, the handleSearchSettingsChange seems like overkill for convenience while adding complexity to a simple component", "author": "edalex-tom", "createdAt": "2020-03-03T07:17:10Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/components/DefaultSortOrderSetting.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+import { FormLabel, Grid, MenuItem, Select } from \"@material-ui/core\";\n+import { SearchSettings, SortOrder } from \"../SearchSettingsModule\";\n+import * as React from \"react\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+\n+export interface DefaultSortOrderSettingProps {\n+  disabled: boolean;\n+  searchSettings: SearchSettings;\n+  handleSearchSettingsChange: (", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4NTE4Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387385182", "bodyText": "Fixed.", "author": "SammyIsConfused", "createdAt": "2020-03-04T01:00:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNDUwOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNDczOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386834739", "bodyText": "Unsure on this as the component only needs access to the defaultSearchSort value, it doesn't need the SearchSettings object.", "author": "edalex-tom", "createdAt": "2020-03-03T07:17:50Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/components/DefaultSortOrderSetting.tsx", "diffHunk": "@@ -0,0 +1,55 @@\n+import { FormLabel, Grid, MenuItem, Select } from \"@material-ui/core\";\n+import { SearchSettings, SortOrder } from \"../SearchSettingsModule\";\n+import * as React from \"react\";\n+import { languageStrings } from \"../../../util/langstrings\";\n+\n+export interface DefaultSortOrderSettingProps {\n+  disabled: boolean;\n+  searchSettings: SearchSettings;", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNzUyNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r386837526", "bodyText": "This has flipped the pattern for props definition, other components defined a props interface before the function.\nI'm in the habit of defining the props interface and destructing them in the function signature.  Either way it's probably best to define a preferred practice", "author": "edalex-tom", "createdAt": "2020-03-03T07:26:29Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/SearchSettingFormControl.tsx", "diffHunk": "@@ -0,0 +1,30 @@\n+import {\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel\n+} from \"@material-ui/core\";\n+import * as React from \"react\";\n+\n+export default function SearchSettingFormControl(props: {\n+  title?: string;\n+  label?: string;\n+  helperText?: string;\n+  disabled: boolean;\n+  control: React.ReactElement;\n+  onChange: (event: React.ChangeEvent<{}>, checked: boolean) => void;\n+}) {", "originalCommit": "186cb0e6e296b1ada4ff569399186a7c1dcc8e7f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MjIyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387382223", "bodyText": "I like your way, its compact. I've made them all destructure in the function signature.", "author": "SammyIsConfused", "createdAt": "2020-03-04T00:50:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjgzNzUyNg=="}], "type": "inlineReview"}, {"oid": "3258a7d79bf50ef886f7723b65c02050ae428c85", "url": "https://github.com/openequella/openEQUELLA/commit/3258a7d79bf50ef886f7723b65c02050ae428c85", "message": "Rename error and success flags", "committedDate": "2020-03-03T23:00:22Z", "type": "commit"}, {"oid": "f3d48897a583be5d0cd20bdad27f25926b9b1e4e", "url": "https://github.com/openequella/openEQUELLA/commit/f3d48897a583be5d0cd20bdad27f25926b9b1e4e", "message": "Create SettingsCheckbox.tsx wrapper for form control", "committedDate": "2020-03-04T00:20:47Z", "type": "commit"}, {"oid": "c117a10ef16af8dd80359a3da27433c7ec5d4581", "url": "https://github.com/openequella/openEQUELLA/commit/c117a10ef16af8dd80359a3da27433c7ec5d4581", "message": "Remove commented out code", "committedDate": "2020-03-04T00:27:46Z", "type": "commit"}, {"oid": "6aadeafc9886390c9c4966f2d738326aaa9b0454", "url": "https://github.com/openequella/openEQUELLA/commit/6aadeafc9886390c9c4966f2d738326aaa9b0454", "message": "Destructure props in the function signature", "committedDate": "2020-03-04T00:49:09Z", "type": "commit"}, {"oid": "019d1b87cd15ec78752a4afd0c19893489e49652", "url": "https://github.com/openequella/openEQUELLA/commit/019d1b87cd15ec78752a4afd0c19893489e49652", "message": "Stop DefaultSortOrderSetting from accessing the whole searchsettings object", "committedDate": "2020-03-04T00:59:35Z", "type": "commit"}, {"oid": "31eaebb1a5257e6be67057f67580be4c0f8d929e", "url": "https://github.com/openequella/openEQUELLA/commit/31eaebb1a5257e6be67057f67580be4c0f8d929e", "message": "Use React.Fragment rather than a needless Grid container", "committedDate": "2020-03-04T02:05:29Z", "type": "commit"}, {"oid": "9892492dfa81d60edb0be8d8cd40a78c27f18edd", "url": "https://github.com/openequella/openEQUELLA/commit/9892492dfa81d60edb0be8d8cd40a78c27f18edd", "message": "Wrap DefaultSortOrderSetting with FormControl rather than Grid", "committedDate": "2020-03-04T03:05:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNjE5Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r387426193", "bodyText": "As discussed, this may need a review when other pages start doing the same and identify what the pattern is, having to do updateTemplate(templateError(something())) repeatedly looks like a pattern that can be simplified", "author": "edalex-tom", "createdAt": "2020-03-04T03:05:56Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,204 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+import DefaultSortOrderSetting from \"./components/DefaultSortOrderSetting\";\n+import GalleryViewsSettings from \"./components/GalleryViewsSettings\";\n+import SettingsCheckbox from \"../../components/SettingsCheckbox\";\n+\n+let useStyles = makeStyles({\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  }\n+});\n+\n+function SearchPageSettings({ updateTemplate }: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [showError, setShowError] = React.useState<boolean>(false);\n+  const [showSuccess, setShowSuccess] = React.useState<boolean>(false);\n+\n+  const searchPageSettingsStrings =\n+    languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    updateTemplate(tp => ({\n+      ...templateDefaults(searchPageSettingsStrings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) =>\n+        setSearchSettings(settings.data)\n+      )\n+      .then(() => getCloudSettingsFromServer())\n+      .then((settings: AxiosResponse<CloudSettings>) =>\n+        setCloudSettings(settings.data)\n+      )\n+      .catch((error: AxiosError) => handleError(error));\n+  }, []);\n+\n+  function handleError(error: AxiosError) {\n+    setShowError(true);\n+    if (error.response) {\n+      //axios errors\n+      switch (error.response.status) {\n+        case 403:\n+          updateTemplate(\n+            templateError(\n+              generateNewErrorID(\n+                searchPageSettingsStrings.permissionsError,\n+                error.response.status,\n+                searchPageSettingsStrings.permissionsError\n+              )\n+            )\n+          );", "originalCommit": "31eaebb1a5257e6be67057f67580be4c0f8d929e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgxNDk4Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394814982", "bodyText": "I'm putting all my hope in the move to redux removing this duplication and offering us a way to move to a better centralised error handler for our business layer.", "author": "edalex-ian", "createdAt": "2020-03-19T06:32:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNjE5Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Nzk3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395047971", "bodyText": "I'd be cautious putting hope in redux for this.\nRedux may already be overkill for oEQ https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367\nThis may be better handled with ErrorBoundaries and Suspense, than with Redux\nIf redux is used https://medium.com/stashaway-engineering/react-redux-tips-better-way-to-handle-loading-flags-in-your-reducers-afda42a804c6 may allow some centralization", "author": "ChristianMurphy", "createdAt": "2020-03-19T14:02:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQyNjE5Mw=="}], "type": "inlineReview"}, {"oid": "8ed4df73d903fd73e00460847e1848ab444de07a", "url": "https://github.com/openequella/openEQUELLA/commit/8ed4df73d903fd73e00460847e1848ab444de07a", "message": "Use original institution to prevent test collisions\n\nSearchSettingsTest gets in the way of SearchSettingsAutoCompleteTest if\nboth are in the same institution. So, SearchSettingsTest returns to its\noriginal institution.", "committedDate": "2020-03-05T00:56:33Z", "type": "commit"}, {"oid": "309d6af2ab505111130f9e63115127bab4c936a5", "url": "https://github.com/openequella/openEQUELLA/commit/309d6af2ab505111130f9e63115127bab4c936a5", "message": "Add Jest snapshot test", "committedDate": "2020-03-05T03:47:47Z", "type": "commit"}, {"oid": "b4323fbb2ecff72fea71727b8d024404271a273d", "url": "https://github.com/openequella/openEQUELLA/commit/b4323fbb2ecff72fea71727b8d024404271a273d", "message": "Add jest options to package.json", "committedDate": "2020-03-05T04:11:58Z", "type": "commit"}, {"oid": "4e31b345b29523c3ef16772e1dab58d2e22df28f", "url": "https://github.com/openequella/openEQUELLA/commit/4e31b345b29523c3ef16772e1dab58d2e22df28f", "message": "Enable Jest on JS and TS", "committedDate": "2020-03-10T01:33:14Z", "type": "commit"}, {"oid": "1206660028bdefd2dbca35ee616df0c423bf0d35", "url": "https://github.com/openequella/openEQUELLA/commit/1206660028bdefd2dbca35ee616df0c423bf0d35", "message": "Add display names to jest configurations", "committedDate": "2020-03-10T01:39:50Z", "type": "commit"}, {"oid": "331551ecc8d9af79e3301bc671c6e3a817dde6f0", "url": "https://github.com/openequella/openEQUELLA/commit/331551ecc8d9af79e3301bc671c6e3a817dde6f0", "message": "Add dependency for jest-config", "committedDate": "2020-03-10T02:42:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2Nzc3MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r390067770", "bodyText": "Probably want a describe block here, it'll group the tests into a suite and highlight they are for the SearchSettingsFormControl", "author": "edalex-tom", "createdAt": "2020-03-10T02:51:27Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/tests/SearchSettingFormControl.test.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import SearchSettingFormControl from \"../SearchSettingFormControl\";\n+import { Checkbox, TextField } from \"@material-ui/core\";\n+import * as React from \"react\";\n+import { shallow } from \"enzyme\";\n+\n+test(\"snapshot test\", () => {", "originalCommit": "331551ecc8d9af79e3301bc671c6e3a817dde6f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2ODMxMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r390068312", "bodyText": "These seem to be two tests, they should be wrapped in individual test (or it) blocks, otherwise one failure will prevent the other test from running.  Also the test block gives a title to the specific test and snapshots, otherwise they come out as 'snapshot test 1' which isn't meaningful", "author": "edalex-tom", "createdAt": "2020-03-10T02:53:51Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/tests/SearchSettingFormControl.test.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import SearchSettingFormControl from \"../SearchSettingFormControl\";\n+import { Checkbox, TextField } from \"@material-ui/core\";\n+import * as React from \"react\";\n+import { shallow } from \"enzyme\";\n+\n+test(\"snapshot test\", () => {\n+  const onChange = jest.fn();\n+  const textbox = shallow(\n+    <SearchSettingFormControl\n+      control={\n+        <TextField id=\"testTextField\" value={\"test\"} onChange={onChange} />\n+      }\n+      onChange={onChange}\n+    />\n+  );\n+  expect(textbox).toMatchSnapshot();", "originalCommit": "331551ecc8d9af79e3301bc671c6e3a817dde6f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTI4Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r390069287", "bodyText": "Mixed thoughts on tests that are just a snapshot without any other asserts, as they don't prove anything except when someone eyeballs the snapshot or just regenerate the snapshot if it ever fails.\nHard to say what this set of tests should or should not test, may be simulate the onChange and find the control by ID?\nJust a snapshot alone may make sense for the page (quick win for testing layout) but that gets into a grey area of it being updated and needing to constantly be regenerated.", "author": "edalex-tom", "createdAt": "2020-03-10T02:57:57Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/tests/SearchSettingFormControl.test.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import SearchSettingFormControl from \"../SearchSettingFormControl\";\n+import { Checkbox, TextField } from \"@material-ui/core\";\n+import * as React from \"react\";\n+import { shallow } from \"enzyme\";\n+\n+test(\"snapshot test\", () => {\n+  const onChange = jest.fn();\n+  const textbox = shallow(\n+    <SearchSettingFormControl\n+      control={\n+        <TextField id=\"testTextField\" value={\"test\"} onChange={onChange} />\n+      }\n+      onChange={onChange}\n+    />\n+  );\n+  expect(textbox).toMatchSnapshot();\n+  const checkbox = shallow(\n+    <SearchSettingFormControl\n+      control={<Checkbox id=\"testCheckbox\" value={true} onChange={onChange} />}\n+      title={\"this one has a title\"}\n+      label={\"and a label\"}\n+      helperText={\"helper text\"}\n+      onChange={onChange}\n+    />\n+  );\n+  expect(checkbox).toMatchSnapshot();", "originalCommit": "331551ecc8d9af79e3301bc671c6e3a817dde6f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNjY3MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r391206670", "bodyText": "I'd second @edalex-tom, snapshot testing ensures nothing changes, but doesn't ensure it is working as expected.", "author": "ChristianMurphy", "createdAt": "2020-03-11T19:20:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA2OTI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNTcwOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r391205708", "bodyText": "I'm a bit confused by these configurations:\n\nthe config matching ts and tsx (this file) does not enable ts-jest, but the one matching js and jsx does?\nI think ts-jest still supports js and jsx I'm not sure these need to be split", "author": "ChristianMurphy", "createdAt": "2020-03-11T19:19:02Z", "path": "Source/Plugins/Core/com.equella.core/js/jest.jsconfig.js", "diffHunk": "@@ -0,0 +1,7 @@\n+module.exports = {\n+  displayName: \"Javascript tests\",\n+  testEnvironment: \"jsdom\",\n+  snapshotSerializers: [\"enzyme-to-json/serializer\"],\n+  setupFilesAfterEnv: [\"<rootDir>/tsrc/setupEnzyme.js\"],\n+  testPathIgnorePatterns: [\"<rootDir>/target\", \".[t]sx?$\"]", "originalCommit": "331551ecc8d9af79e3301bc671c6e3a817dde6f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzE2MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r391207161", "bodyText": "useStyles doesn't appear to be reassigned, could it be made const?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            let useStyles = makeStyles({\n          \n          \n            \n            const useStyles = makeStyles({", "author": "ChristianMurphy", "createdAt": "2020-03-11T19:21:57Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,204 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+import DefaultSortOrderSetting from \"./components/DefaultSortOrderSetting\";\n+import GalleryViewsSettings from \"./components/GalleryViewsSettings\";\n+import SettingsCheckbox from \"../../components/SettingsCheckbox\";\n+\n+let useStyles = makeStyles({", "originalCommit": "331551ecc8d9af79e3301bc671c6e3a817dde6f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e3ba64bc010d389df250fc602eb1e5a37325ff84", "url": "https://github.com/openequella/openEQUELLA/commit/e3ba64bc010d389df250fc602eb1e5a37325ff84", "message": "Merge branch 'develop' into feature/add_new_search_settings_page", "committedDate": "2020-03-16T23:01:08Z", "type": "commit"}, {"oid": "aa8a6f402597380f1bbffc33603b1398b366d030", "url": "https://github.com/openequella/openEQUELLA/commit/aa8a6f402597380f1bbffc33603b1398b366d030", "message": "Make Jest config match develop", "committedDate": "2020-03-16T23:53:47Z", "type": "commit"}, {"oid": "48d91b56004660198a9ce47a530bc2d27e4be9b9", "url": "https://github.com/openequella/openEQUELLA/commit/48d91b56004660198a9ce47a530bc2d27e4be9b9", "message": "Move test to match with existing pattern", "committedDate": "2020-03-16T23:54:30Z", "type": "commit"}, {"oid": "9669fa05799836bf0d191a08cd099f1f8da9dbc9", "url": "https://github.com/openequella/openEQUELLA/commit/9669fa05799836bf0d191a08cd099f1f8da9dbc9", "message": "Remove unnecessary snapshot test, add onchange testing", "committedDate": "2020-03-17T00:04:18Z", "type": "commit"}, {"oid": "c759ec728f96e02420675b13ff9054425dd51cd4", "url": "https://github.com/openequella/openEQUELLA/commit/c759ec728f96e02420675b13ff9054425dd51cd4", "message": "Merge branch 'component/search_configuration' into feature/add_new_search_settings_page", "committedDate": "2020-03-17T00:19:28Z", "type": "commit"}, {"oid": "bad9f3c3b2424aede5ce83f9be57d9eaf33b80c9", "url": "https://github.com/openequella/openEQUELLA/commit/bad9f3c3b2424aede5ce83f9be57d9eaf33b80c9", "message": "Make useStyles a const\n\nCo-Authored-By: Christian Murphy <christian.murphy.42@gmail.com>", "committedDate": "2020-03-17T00:21:57Z", "type": "commit"}, {"oid": "e0af72915ed229133c417a729ece7f7c22706d02", "url": "https://github.com/openequella/openEQUELLA/commit/e0af72915ed229133c417a729ece7f7c22706d02", "message": "Add wait to save on SearchSettings tests", "committedDate": "2020-03-17T02:53:33Z", "type": "commit"}, {"oid": "24ad41a49b05a7b3f6ff2ad0d5a672fbeb379a62", "url": "https://github.com/openequella/openEQUELLA/commit/24ad41a49b05a7b3f6ff2ad0d5a672fbeb379a62", "message": "Remove whitespace", "committedDate": "2020-03-17T03:33:19Z", "type": "commit"}, {"oid": "ad4f66186ac2b99cd51e1b64715d77844c030d64", "url": "https://github.com/openequella/openEQUELLA/commit/ad4f66186ac2b99cd51e1b64715d77844c030d64", "message": "Merge branch 'develop' into feature/add_new_search_settings_page", "committedDate": "2020-03-17T23:02:25Z", "type": "commit"}, {"oid": "eaf2013d1cd693f0cac1b0e94c5dcdcf4937836f", "url": "https://github.com/openequella/openEQUELLA/commit/eaf2013d1cd693f0cac1b0e94c5dcdcf4937836f", "message": "Fix SearchSettingsTest flakiness", "committedDate": "2020-03-18T00:22:41Z", "type": "commit"}, {"oid": "860d36c5fdc2827b3514088b6c36db0dd4f9ae3f", "url": "https://github.com/openequella/openEQUELLA/commit/860d36c5fdc2827b3514088b6c36db0dd4f9ae3f", "message": "Put save button inside grid", "committedDate": "2020-03-18T02:38:38Z", "type": "commit"}, {"oid": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "url": "https://github.com/openequella/openEQUELLA/commit/2e6bb714f2806f022e5c520a725f5b6846d981ae", "message": "Use JavascriptExecutor for save click\n\nIssue with test in codebuild causes selenium click to break.", "committedDate": "2020-03-18T03:27:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjM3MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394106370", "bodyText": "Is there a reason why it's named enzyme_1?  Curious to know if there was a naming collision somewhere", "author": "edalex-tom", "createdAt": "2020-03-18T04:55:29Z", "path": "Source/Plugins/Core/com.equella.core/js/jest.setup.js", "diffHunk": "@@ -0,0 +1,5 @@\n+\"use strict\";\n+Object.defineProperty(exports, \"__esModule\", { value: true });\n+var enzyme_1 = require(\"enzyme\");\n+var Adapter = require(\"enzyme-adapter-react-16\");\n+enzyme_1.configure({ adapter: new Adapter() });", "originalCommit": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMjAzMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394112033", "bodyText": "I just realized that this entire file was generated from jest.setup.ts and I forgot to remove it. I'll get rid.", "author": "SammyIsConfused", "createdAt": "2020-03-18T05:21:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjM3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjg3Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394106872", "bodyText": "Should this be pinned to the specific version like the rest?", "author": "edalex-tom", "createdAt": "2020-03-18T04:57:41Z", "path": "Source/Plugins/Core/com.equella.core/js/package.json", "diffHunk": "@@ -84,6 +81,7 @@\n     \"@types/react-router\": \"5.1.1\",\n     \"@types/react-router-dom\": \"4.3.5\",\n     \"@types/react-swipeable-views\": \"0.12.2\",\n+    \"@types/react-test-renderer\": \"^16.9.2\",", "originalCommit": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMzg4Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394113882", "bodyText": "Done.", "author": "SammyIsConfused", "createdAt": "2020-03-18T05:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNjg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNzY2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394107667", "bodyText": "Is the mount required?  There's no lifecycle for this component, nothing appears to happen on mount or unmount", "author": "edalex-tom", "createdAt": "2020-03-18T05:01:09Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/__tests__/components/SearchSettingFormControl.test.tsx", "diffHunk": "@@ -0,0 +1,33 @@\n+import SearchSettingFormControl from \"../../components/SearchSettingFormControl\";\n+import { TextField } from \"@material-ui/core\";\n+import * as React from \"react\";\n+import { mount, ReactWrapper, shallow } from \"enzyme\";\n+\n+describe(\"SearchSettingFormControl.tsx\", () => {\n+  const onChange = jest.fn();\n+  let component: ReactWrapper;\n+  beforeEach(() => {\n+    component = mount(", "originalCommit": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMjQ3MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394112470", "bodyText": "The input is nested within the component and so won't be interactible with a shallow.", "author": "SammyIsConfused", "createdAt": "2020-03-18T05:23:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNzY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwODgwMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394108803", "bodyText": "Not sure on this test, it's a sanity check but if the pattern is taken as a standard then every function that's passed to a component would need multiple tests to confirm they aren't called early as opposed to checking they are only called once\nThere's some helper jest functions to assert mock calls\nexpect(onChange).not.toHaveBeenCalled()", "author": "edalex-tom", "createdAt": "2020-03-18T05:06:25Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/__tests__/components/SearchSettingFormControl.test.tsx", "diffHunk": "@@ -0,0 +1,33 @@\n+import SearchSettingFormControl from \"../../components/SearchSettingFormControl\";\n+import { TextField } from \"@material-ui/core\";\n+import * as React from \"react\";\n+import { mount, ReactWrapper, shallow } from \"enzyme\";\n+\n+describe(\"SearchSettingFormControl.tsx\", () => {\n+  const onChange = jest.fn();\n+  let component: ReactWrapper;\n+  beforeEach(() => {\n+    component = mount(\n+      shallow(\n+        <SearchSettingFormControl\n+          control={\n+            <TextField id=\"testTextField\" value={\"test\"} onChange={onChange} />\n+          }\n+          onChange={onChange}\n+        />\n+      ).get(0)\n+    );\n+  });\n+  afterEach(() => jest.clearAllMocks);\n+\n+  test(\"onChange - is not triggered before call\", () => {\n+    expect(onChange.mock.calls.length).toEqual(0);", "originalCommit": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMzk0OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394113949", "bodyText": "Changed to that, the helper function is much more readable.", "author": "SammyIsConfused", "createdAt": "2020-03-18T05:29:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwODgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwODk5NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394108994", "bodyText": "Again not sure on the need to mount (and unmount), if it's needed then it could be done in the afterEach?", "author": "edalex-tom", "createdAt": "2020-03-18T05:07:19Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/__tests__/components/SearchSettingFormControl.test.tsx", "diffHunk": "@@ -0,0 +1,33 @@\n+import SearchSettingFormControl from \"../../components/SearchSettingFormControl\";\n+import { TextField } from \"@material-ui/core\";\n+import * as React from \"react\";\n+import { mount, ReactWrapper, shallow } from \"enzyme\";\n+\n+describe(\"SearchSettingFormControl.tsx\", () => {\n+  const onChange = jest.fn();\n+  let component: ReactWrapper;\n+  beforeEach(() => {\n+    component = mount(\n+      shallow(\n+        <SearchSettingFormControl\n+          control={\n+            <TextField id=\"testTextField\" value={\"test\"} onChange={onChange} />\n+          }\n+          onChange={onChange}\n+        />\n+      ).get(0)\n+    );\n+  });\n+  afterEach(() => jest.clearAllMocks);\n+\n+  test(\"onChange - is not triggered before call\", () => {\n+    expect(onChange.mock.calls.length).toEqual(0);\n+  });\n+\n+  test(\"onChange - is triggered after call\", () => {\n+    const textField = component.find(\"input\");\n+    textField.simulate(\"change\");\n+    expect(onChange.mock.calls.length).toEqual(1);\n+    component.unmount();", "originalCommit": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwOTI5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394109290", "bodyText": "Very clean and sparkly, are there any plans to move this to a more common area?  It's looking like a great standard component", "author": "edalex-tom", "createdAt": "2020-03-18T05:08:38Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/SearchSettingFormControl.tsx", "diffHunk": "@@ -0,0 +1,36 @@\n+import {\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel\n+} from \"@material-ui/core\";\n+import * as React from \"react\";\n+export interface SearchSettingFormControlProps {\n+  title?: string;\n+  label?: string;\n+  helperText?: string;\n+  disabled?: boolean;\n+  control: React.ReactElement;\n+  onChange: (event: React.ChangeEvent<{}>, checked: boolean) => void;\n+}\n+export default function SearchSettingFormControl({\n+  title,\n+  label,\n+  helperText,\n+  disabled,\n+  control,\n+  onChange\n+}: SearchSettingFormControlProps) {\n+  return (\n+    <FormControl>\n+      {title && <FormLabel>{title}</FormLabel>}\n+      {helperText && <FormHelperText>{helperText}</FormHelperText>}\n+      <FormControlLabel\n+        disabled={disabled}\n+        label={label}\n+        control={control}\n+        onChange={onChange}\n+      />\n+    </FormControl>", "originalCommit": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMjc3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394112774", "bodyText": "It's already in the \"components\" folder, which is where up until now we've been putting things like that. I suppose I could just rename it to \"EquellaSettingsFormControl\" or something like that. Make it not specific to search settings.", "author": "SammyIsConfused", "createdAt": "2020-03-18T05:24:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwOTI5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwOTgyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394109823", "bodyText": "If the AxiosResponse are never used then the underlying functions (e.g. getCloudSettingsFromServer) can just return the result data", "author": "edalex-tom", "createdAt": "2020-03-18T05:11:17Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,206 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+import DefaultSortOrderSetting from \"./components/DefaultSortOrderSetting\";\n+import GalleryViewsSettings from \"./components/GalleryViewsSettings\";\n+import SettingsCheckbox from \"../../components/SettingsCheckbox\";\n+\n+const useStyles = makeStyles({\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  }\n+});\n+\n+function SearchPageSettings({ updateTemplate }: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [showError, setShowError] = React.useState<boolean>(false);\n+  const [showSuccess, setShowSuccess] = React.useState<boolean>(false);\n+\n+  const searchPageSettingsStrings =\n+    languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    updateTemplate(tp => ({\n+      ...templateDefaults(searchPageSettingsStrings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()", "originalCommit": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExNDYxMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394114611", "bodyText": "They can, but I'd prefer to keep it consistent.", "author": "SammyIsConfused", "createdAt": "2020-03-18T05:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwOTgyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgxNDM0NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394814345", "bodyText": "I feel maybe the reason that @edalex-tom mentions this is because then what is essentially the view layer (i.e. this code) does not need any coupling to the library (i.e. axios) which is used for the comms or business layers. So removing AxiosResponse where possible will help us move towards that, however the bigger challenge will be our error handling - where we're hoping Redux can significantly help us. \ud83e\udd1e", "author": "edalex-ian", "createdAt": "2020-03-19T06:30:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwOTgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMDM4Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394110387", "bodyText": "Does the _ in the ID has special meaning?", "author": "edalex-tom", "createdAt": "2020-03-18T05:13:32Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,206 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+import DefaultSortOrderSetting from \"./components/DefaultSortOrderSetting\";\n+import GalleryViewsSettings from \"./components/GalleryViewsSettings\";\n+import SettingsCheckbox from \"../../components/SettingsCheckbox\";\n+\n+const useStyles = makeStyles({\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  }\n+});\n+\n+function SearchPageSettings({ updateTemplate }: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(\n+    defaultSearchSettings\n+  );\n+  const [cloudSettings, setCloudSettings] = React.useState<CloudSettings>({\n+    disabled: false\n+  });\n+  const [showError, setShowError] = React.useState<boolean>(false);\n+  const [showSuccess, setShowSuccess] = React.useState<boolean>(false);\n+\n+  const searchPageSettingsStrings =\n+    languageStrings.settings.searching.searchPageSettings;\n+  const classes = useStyles();\n+\n+  React.useEffect(() => {\n+    updateTemplate(tp => ({\n+      ...templateDefaults(searchPageSettingsStrings.name)(tp),\n+      backRoute: routes.Settings.to\n+    }));\n+    getSearchSettingsFromServer()\n+      .then((settings: AxiosResponse<SearchSettings>) =>\n+        setSearchSettings(settings.data)\n+      )\n+      .then(() => getCloudSettingsFromServer())\n+      .then((settings: AxiosResponse<CloudSettings>) =>\n+        setCloudSettings(settings.data)\n+      )\n+      .catch((error: AxiosError) => handleError(error));\n+  }, []);\n+\n+  function handleError(error: AxiosError) {\n+    setShowError(true);\n+    if (error.response) {\n+      //axios errors\n+      switch (error.response.status) {\n+        case 403:\n+          updateTemplate(\n+            templateError(\n+              generateNewErrorID(\n+                searchPageSettingsStrings.permissionsError,\n+                error.response.status,\n+                searchPageSettingsStrings.permissionsError\n+              )\n+            )\n+          );\n+          break;\n+        case 404:\n+          updateTemplate(\n+            templateError(\n+              generateNewErrorID(\n+                searchPageSettingsStrings.notFoundError,\n+                error.response.status,\n+                searchPageSettingsStrings.notFoundErrorDesc\n+              )\n+            )\n+          );\n+          break;\n+        default:\n+          updateTemplate(templateError(generateFromError(error)));\n+          break;\n+      }\n+    } else {\n+      //non axios errors\n+      updateTemplate(templateError(generateFromError(error)));\n+    }\n+  }\n+\n+  function handleSubmitButton() {\n+    saveSearchSettingsToServer(searchSettings)\n+      .then(() => saveCloudSettingsToServer(cloudSettings))\n+      .then(() => setShowSuccess(true))\n+      .catch((error: AxiosError) => handleError(error));\n+  }\n+\n+  return (\n+    <SettingsMenuContainer>\n+      <Grid container direction={\"column\"} spacing={8}>\n+        {/*Default Sort Order*/}\n+        <Grid item>\n+          <DefaultSortOrderSetting\n+            disabled={showError}\n+            value={searchSettings.defaultSearchSort}\n+            setValue={order =>\n+              setSearchSettings({ ...searchSettings, defaultSearchSort: order })\n+            }\n+          />\n+        </Grid>\n+\n+        {/*Include Non-Live checkbox*/}\n+        <Grid item>\n+          <SettingsCheckbox\n+            value={searchSettings.searchingShowNonLiveCheckbox}\n+            setValue={value =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                searchingShowNonLiveCheckbox: value\n+              })\n+            }\n+            label={searchPageSettingsStrings.allowNonLiveLabel}\n+            disabled={showError}\n+            title={searchPageSettingsStrings.allowNonLive}\n+            id={\"_showNonLiveCheckbox\"}\n+          />\n+        </Grid>\n+\n+        {/*Authenticate By Default*/}\n+        <Grid item>\n+          <SettingsCheckbox\n+            value={searchSettings.authenticateFeedsByDefault}\n+            setValue={value =>\n+              setSearchSettings({\n+                ...searchSettings,\n+                authenticateFeedsByDefault: value\n+              })\n+            }\n+            label={searchPageSettingsStrings.authFeedLabel}\n+            disabled={showError}\n+            title={searchPageSettingsStrings.authFeed}\n+            id={\"_authenticateByDefault\"}\n+          />\n+        </Grid>\n+\n+        {/*Gallery views*/}\n+        <Grid item>\n+          <GalleryViewsSettings\n+            disabled={showError}\n+            setSearchSettings={setSearchSettings}\n+            searchSettings={searchSettings}\n+          />\n+        </Grid>\n+\n+        {/*Cloud Settings*/}\n+        <Grid item>\n+          <SettingsCheckbox\n+            value={cloudSettings.disabled}\n+            setValue={value =>\n+              setCloudSettings({ ...cloudSettings, disabled: value })\n+            }\n+            label={searchPageSettingsStrings.cloudSearchingLabel}\n+            disabled={showError}\n+            title={searchPageSettingsStrings.cloudSearching}\n+            id={\"cs_dc\"}\n+          />\n+        </Grid>\n+        <Grid item>\n+          {/*Save Button*/}\n+          <Button\n+            id={\"_saveButton\"}", "originalCommit": "2e6bb714f2806f022e5c520a725f5b6846d981ae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMzA2OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394113069", "bodyText": "All of the existing IDs on the old version of this page were like this. I just kept it to continue with existing patterns.", "author": "SammyIsConfused", "createdAt": "2020-03-18T05:25:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMDM4Nw=="}], "type": "inlineReview"}, {"oid": "1c82763f509ab8e932cba299ca0465336627b323", "url": "https://github.com/openequella/openEQUELLA/commit/1c82763f509ab8e932cba299ca0465336627b323", "message": "Use helper functions in Jest Test", "committedDate": "2020-03-18T05:27:32Z", "type": "commit"}, {"oid": "201a8a3887fdf287deabd6d8e51482cab512b270", "url": "https://github.com/openequella/openEQUELLA/commit/201a8a3887fdf287deabd6d8e51482cab512b270", "message": "Delete obsolete js version of jest.setup.js", "committedDate": "2020-03-18T05:28:00Z", "type": "commit"}, {"oid": "338ff79f864821e663982a6a79e4ce2d482d1f79", "url": "https://github.com/openequella/openEQUELLA/commit/338ff79f864821e663982a6a79e4ce2d482d1f79", "message": "Pin dependency", "committedDate": "2020-03-18T05:28:13Z", "type": "commit"}, {"oid": "94f49e47b78e5a109af5718dbcff016c95397668", "url": "https://github.com/openequella/openEQUELLA/commit/94f49e47b78e5a109af5718dbcff016c95397668", "message": "Merge branch 'component/search_configuration' into feature/add_new_search_settings_page", "committedDate": "2020-03-19T05:27:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgxNjMwOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394816308", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  desc: \"Searching settings\",\n          \n          \n            \n                  desc: \"Search settings\",", "author": "edalex-ian", "createdAt": "2020-03-19T06:37:17Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -338,7 +338,37 @@ export const languageStrings = {\n       desc: \"Settings for integrating with external systems\"\n     },\n     diagnostics: { name: \"Diagnostics\", desc: \"Diagnostic pages\" },\n-    searching: { name: \"Searching\", desc: \"Searching settings\" },\n+    searching: {\n+      name: \"Search\",\n+      desc: \"Searching settings\",", "originalCommit": "94f49e47b78e5a109af5718dbcff016c95397668", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MDAyNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r394990025", "bodyText": "Suggested change", "author": "ChristianMurphy", "createdAt": "2020-03-19T12:30:25Z", "path": "autotest/Tests/src/main/java/com/tle/webtests/pageobject/SettingsPage.java", "diffHunk": "@@ -29,9 +29,8 @@\n   public static final String SEARCH_SETTINGS_LINK_TITLE = \"Search page\";\n   public static final String COURSE_DEFAULTS_LINK_TITLE = \"Copyright\";\n   private static final String SEARCH_SETTING_TITLE = \"Searching and content indexing\";\n-\n+  ", "originalCommit": "94f49e47b78e5a109af5718dbcff016c95397668", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDM0MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395040340", "bodyText": "Since this test and the next test both are related to onChange and the test is prefixed with onChange in the title.\nWould it make sense to wrap these in a describe(\"onChange\", () => { block an use that instead of a prefix?", "author": "ChristianMurphy", "createdAt": "2020-03-19T13:52:02Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/__tests__/components/SearchSettingFormControl.test.tsx", "diffHunk": "@@ -0,0 +1,33 @@\n+import SearchSettingFormControl from \"../../components/SearchSettingFormControl\";\n+import { TextField } from \"@material-ui/core\";\n+import * as React from \"react\";\n+import { mount, ReactWrapper, shallow } from \"enzyme\";\n+\n+describe(\"SearchSettingFormControl.tsx\", () => {\n+  const onChange = jest.fn();\n+  let component: ReactWrapper;\n+  beforeEach(() => {\n+    component = mount(\n+      shallow(\n+        <SearchSettingFormControl\n+          control={\n+            <TextField id=\"testTextField\" value={\"test\"} onChange={onChange} />\n+          }\n+          onChange={onChange}\n+        />\n+      ).get(0)\n+    );\n+  });\n+  afterEach(() => jest.clearAllMocks);\n+\n+  test(\"onChange - is not triggered before call\", () => {", "originalCommit": "94f49e47b78e5a109af5718dbcff016c95397668", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MTc1Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395041753", "bodyText": "Also other tests have been using it(\"shoud {do something}\", () => { to describe cases over test(\"{do something}\" () => {, would it make sense to use the same format here?", "author": "ChristianMurphy", "createdAt": "2020-03-19T13:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDM0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Mjc1OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395042758", "bodyText": "Is the shape/type of the event coming from ChangeEvent known?\nWould it make sense to include that information in the generic?", "author": "ChristianMurphy", "createdAt": "2020-03-19T13:55:23Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/components/SearchSettingFormControl.tsx", "diffHunk": "@@ -0,0 +1,36 @@\n+import {\n+  FormControl,\n+  FormControlLabel,\n+  FormHelperText,\n+  FormLabel\n+} from \"@material-ui/core\";\n+import * as React from \"react\";\n+export interface SearchSettingFormControlProps {\n+  title?: string;\n+  label?: string;\n+  helperText?: string;\n+  disabled?: boolean;\n+  control: React.ReactElement;\n+  onChange: (event: React.ChangeEvent<{}>, checked: boolean) => void;", "originalCommit": "94f49e47b78e5a109af5718dbcff016c95397668", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM0MjUyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395342523", "bodyText": "Since this is a component that can be used for multiple different form controls, the change event can be different. Eg a checkbox would have a different ChangeEvent type than a textbox.", "author": "SammyIsConfused", "createdAt": "2020-03-19T21:57:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Mjc1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM1MzUwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395353504", "bodyText": "Would it be safe to say that it will be an input?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              onChange: (event: React.ChangeEvent<{}>, checked: boolean) => void;\n          \n          \n            \n              onChange: (event: React.ChangeEvent<HTMLInputElement>, checked: boolean) => void;", "author": "ChristianMurphy", "createdAt": "2020-03-19T22:25:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Mjc1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NDI3Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395044273", "bodyText": "could useState and useEffect be destructured in the import or at the beginning of the file?", "author": "ChristianMurphy", "createdAt": "2020-03-19T13:57:31Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchPageSettings.tsx", "diffHunk": "@@ -0,0 +1,206 @@\n+import * as React from \"react\";\n+import SettingsMenuContainer from \"../../components/SettingsMenuContainer\";\n+import {\n+  templateDefaults,\n+  templateError,\n+  TemplateUpdateProps\n+} from \"../../mainui/Template\";\n+import { routes } from \"../../mainui/routes\";\n+import { Button, Grid } from \"@material-ui/core\";\n+import { makeStyles } from \"@material-ui/styles\";\n+import { languageStrings } from \"../../util/langstrings\";\n+import {\n+  CloudSettings,\n+  defaultSearchSettings,\n+  getCloudSettingsFromServer,\n+  getSearchSettingsFromServer,\n+  saveCloudSettingsToServer,\n+  saveSearchSettingsToServer,\n+  SearchSettings\n+} from \"./SearchSettingsModule\";\n+import { AxiosError, AxiosResponse } from \"axios\";\n+import { generateFromError, generateNewErrorID } from \"../../api/errors\";\n+import MessageInfo from \"../../components/MessageInfo\";\n+import DefaultSortOrderSetting from \"./components/DefaultSortOrderSetting\";\n+import GalleryViewsSettings from \"./components/GalleryViewsSettings\";\n+import SettingsCheckbox from \"../../components/SettingsCheckbox\";\n+\n+const useStyles = makeStyles({\n+  floatingButton: {\n+    right: \"16px\",\n+    bottom: \"16px\",\n+    position: \"fixed\"\n+  }\n+});\n+\n+function SearchPageSettings({ updateTemplate }: TemplateUpdateProps) {\n+  const [searchSettings, setSearchSettings] = React.useState<SearchSettings>(", "originalCommit": "94f49e47b78e5a109af5718dbcff016c95397668", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "fcc09b07a8adbc8a074666ed49b5a68c144b3411", "url": "https://github.com/openequella/openEQUELLA/commit/fcc09b07a8adbc8a074666ed49b5a68c144b3411", "message": "Add a generic axios error handler and refactor away from Axios in the page", "committedDate": "2020-03-20T01:31:16Z", "type": "commit"}, {"oid": "6fa295a214c727ec103c0ec5ce71b722492e61d6", "url": "https://github.com/openequella/openEQUELLA/commit/6fa295a214c727ec103c0ec5ce71b722492e61d6", "message": "Reword Searching settings to Search settings", "committedDate": "2020-03-20T01:34:44Z", "type": "commit"}, {"oid": "a7988e721c50936e8af5bbaf595d786f97666186", "url": "https://github.com/openequella/openEQUELLA/commit/a7988e721c50936e8af5bbaf595d786f97666186", "message": "Remove whitespace", "committedDate": "2020-03-20T01:37:09Z", "type": "commit"}, {"oid": "63ba11b6c9483ad0b71374d0665616094184f45e", "url": "https://github.com/openequella/openEQUELLA/commit/63ba11b6c9483ad0b71374d0665616094184f45e", "message": "Add a comment in SearchSettingsPage.java", "committedDate": "2020-03-20T01:41:25Z", "type": "commit"}, {"oid": "d01a58c8e6d12094f30aab5882a28e41950883df", "url": "https://github.com/openequella/openEQUELLA/commit/d01a58c8e6d12094f30aab5882a28e41950883df", "message": "Surround on change with describe block", "committedDate": "2020-03-20T01:46:39Z", "type": "commit"}, {"oid": "1815864fc3e6fdc48cb026e68d5df77ef2366e0d", "url": "https://github.com/openequella/openEQUELLA/commit/1815864fc3e6fdc48cb026e68d5df77ef2366e0d", "message": "Merge branch 'feature/add_new_search_settings_page' of github.com:SammyIsConfused/openEQUELLA into feature/add_new_search_settings_page", "committedDate": "2020-03-20T01:49:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwOTA0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395409042", "bodyText": "Not sure on this, I would have thought it would return a promise rather than be a promise", "author": "edalex-tom", "createdAt": "2020-03-20T01:58:21Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/settings/Search/SearchSettingsModule.ts", "diffHunk": "@@ -0,0 +1,89 @@\n+import Axios from \"axios\";\n+import { fromAxiosError } from \"../../api/errors\";\n+import { templateError, TemplateUpdate } from \"../../mainui/Template\";\n+\n+export interface SearchSettings {\n+  searchingShowNonLiveCheckbox: boolean;\n+  searchingDisableGallery: boolean;\n+  searchingDisableVideos: boolean;\n+  fileCountDisabled: boolean;\n+  defaultSearchSort: SortOrder;\n+  authenticateFeedsByDefault: boolean;\n+\n+  urlLevel: number;\n+  titleBoost: number;\n+  descriptionBoost: number;\n+  attachmentBoost: number;\n+}\n+\n+export interface CloudSettings {\n+  disabled: boolean;\n+}\n+\n+export enum SortOrder {\n+  RANK = \"RANK\",\n+  DATEMODIFIED = \"DATEMODIFIED\",\n+  DATECREATED = \"DATECREATED\",\n+  NAME = \"NAME\",\n+  RATING = \"RATING\"\n+}\n+\n+export const SEARCH_SETTINGS_URL = \"api/settings/search\";\n+export const CLOUD_SETTINGS_URL = \"api/settings/search/cloud\";\n+\n+export const getSearchSettingsFromServer = new Promise(", "originalCommit": "1815864fc3e6fdc48cb026e68d5df77ef2366e0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwOTU2MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1513#discussion_r395409560", "bodyText": "So I should make them all like the save promises? Since they take a parameter they had to be a function.", "author": "SammyIsConfused", "createdAt": "2020-03-20T02:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQwOTA0Mg=="}], "type": "inlineReview"}, {"oid": "c3a5d6867864098e80cb34247c2b4fb6c887269a", "url": "https://github.com/openequella/openEQUELLA/commit/c3a5d6867864098e80cb34247c2b4fb6c887269a", "message": "Wrap the API promises in functions", "committedDate": "2020-03-20T02:05:41Z", "type": "commit"}, {"oid": "d3284df7803df15e1f271d623375f335e9d8abcd", "url": "https://github.com/openequella/openEQUELLA/commit/d3284df7803df15e1f271d623375f335e9d8abcd", "message": "Merge branch 'component/search_configuration' into feature/add_new_search_settings_page", "committedDate": "2020-03-20T03:46:34Z", "type": "commit"}, {"oid": "e6c051a5eea0141a4e7a1331626cee65b3ed5459", "url": "https://github.com/openequella/openEQUELLA/commit/e6c051a5eea0141a4e7a1331626cee65b3ed5459", "message": "Fix prettier", "committedDate": "2020-03-23T23:09:35Z", "type": "commit"}, {"oid": "d793a756242b009c53a974d90c0d17ab77479923", "url": "https://github.com/openequella/openEQUELLA/commit/d793a756242b009c53a974d90c0d17ab77479923", "message": "Merge branch 'feature/add_new_search_settings_page' of github.com:SammyIsConfused/openEQUELLA into feature/add_new_search_settings_page", "committedDate": "2020-03-23T23:11:10Z", "type": "commit"}, {"oid": "39c968e0393ac1539ef6f092eb5450db6b59a385", "url": "https://github.com/openequella/openEQUELLA/commit/39c968e0393ac1539ef6f092eb5450db6b59a385", "message": "Run the correct version of Prettier", "committedDate": "2020-03-24T00:38:54Z", "type": "commit"}, {"oid": "9d705911898c4ef23ab712d0361a6a78c71dcb6a", "url": "https://github.com/openequella/openEQUELLA/commit/9d705911898c4ef23ab712d0361a6a78c71dcb6a", "message": "Reorder imports", "committedDate": "2020-03-24T00:47:21Z", "type": "commit"}]}