{"pr_number": 2207, "pr_title": "Feature/front end search facets module", "pr_createdAt": "2020-08-20T03:35:58Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2207", "timeline": [{"oid": "50061d017d3166ce418aa72c880cad5118fc7d74", "url": "https://github.com/openequella/openEQUELLA/commit/50061d017d3166ce418aa72c880cad5118fc7d74", "message": "front-end: Add new SearchFacetsModule", "committedDate": "2020-08-20T03:21:35Z", "type": "commit"}, {"oid": "d1fece2fd424c40cb8afd0218f82ecbe718845da", "url": "https://github.com/openequella/openEQUELLA/commit/d1fece2fd424c40cb8afd0218f82ecbe718845da", "message": "front-end: Add test for SearchFacetsModule", "committedDate": "2020-08-20T03:21:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5MjA0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2207#discussion_r473592042", "bodyText": "Why is the string api used here?", "author": "PenghaiZhang", "createdAt": "2020-08-20T05:04:31Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchFacetsModule.test.ts", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+import * as OEQ from \"@openequella/rest-api-client\";\n+import { Facet } from \"../../../tsrc/modules/FacetedSearchSettingsModule\";\n+import * as FacetedSearchSettingsModule from \"../../../tsrc/modules/FacetedSearchSettingsModule\";\n+import {\n+  Classification,\n+  listClassifications,\n+} from \"../../../tsrc/modules/SearchFacetsModule\";\n+\n+const CLASSIFICATION_SUBJECT: Facet = {\n+  name: \"Classification 1\",\n+  schemaNode: \"/item/subject\",\n+  maxResults: 1,\n+  orderIndex: 0,\n+};\n+const CLASSIFICATION_KEYWORD: Facet = {\n+  name: \"Classification 2\",\n+  schemaNode: \"/item/keyword\",\n+  orderIndex: 1,\n+};\n+const CATEGORIES_SUBJECT: OEQ.SearchFacets.Facet[] = [\n+  { term: \"subject1\", count: 10 },\n+  { term: \"subject2\", count: 20 },\n+  { term: \"subject3\", count: 30 },\n+];\n+const CATEGORIES_KEYWORD: OEQ.SearchFacets.Facet[] = [\n+  { term: \"keyword1\", count: 101 },\n+  { term: \"keyword2\", count: 202 },\n+  { term: \"keyword3\", count: 303 },\n+];\n+\n+jest\n+  .spyOn(FacetedSearchSettingsModule, \"getFacetsFromServer\")\n+  .mockResolvedValue([CLASSIFICATION_SUBJECT, CLASSIFICATION_KEYWORD]);\n+\n+jest.mock(\"@openequella/rest-api-client\");\n+const mockedSearchFacets = (OEQ.SearchFacets.searchFacets as jest.Mock<\n+  Promise<OEQ.SearchFacets.SearchFacetsResult>\n+>).mockImplementation(\n+  (\n+    _: string,\n+    params?: OEQ.SearchFacets.SearchFacetsParams\n+  ): Promise<OEQ.SearchFacets.SearchFacetsResult> => {\n+    const mockData = new Map<string, OEQ.SearchFacets.Facet[]>([\n+      [CLASSIFICATION_SUBJECT.schemaNode, CATEGORIES_SUBJECT],\n+      [CLASSIFICATION_KEYWORD.schemaNode, CATEGORIES_KEYWORD],\n+    ]);\n+    if (!params?.nodes[0]) {\n+      throw new Error(\"Issue with test data, no schema node provided!\");\n+    }\n+    return Promise.resolve({\n+      results: mockData.get(params.nodes[0]),\n+    } as OEQ.SearchFacets.SearchFacetsResult);\n+  }\n+);\n+\n+describe(\"SearchFacetsModule\", () => {\n+  it(\"Listing classifications\", async () => {\n+    // Do a fully defined call to listClassifications\n+    const queryString = \"some query\";\n+    const collections = [\"uuid1\", \"uuid2\"];\n+    const dateStart = \"2020-01-01\";\n+    const dateEnd = \"2020-02-02\";\n+    const ownerUuid = \"uuidOwner\";\n+    const classifications = await listClassifications({\n+      query: queryString,\n+      rowsPerPage: 10, // n/a\n+      currentPage: 1, // n/a\n+      collections: collections.map((id) => ({\n+        uuid: id,\n+        name: `name of ${id}`,\n+      })),\n+      rawMode: false, // n/a\n+      lastModifiedDateRange: {\n+        start: new Date(dateStart),\n+        end: new Date(dateEnd),\n+      },\n+      owner: {\n+        id: ownerUuid,\n+        username: \"jest\",\n+        firstName: \"Test\",\n+        lastName: \"Owner\",\n+      },\n+      status: OEQ.Common.ItemStatuses.alternatives.map((i) => i.value), // i.e. All statuses\n+      sortOrder: undefined,\n+    });\n+\n+    // Expect the correct data is generated\n+    expect(classifications).toEqual([\n+      {\n+        name: CLASSIFICATION_SUBJECT.name,\n+        maxDisplay: CLASSIFICATION_SUBJECT.maxResults,\n+        categories: CATEGORIES_SUBJECT,\n+        orderIndex: CLASSIFICATION_SUBJECT.orderIndex,\n+      },\n+      {\n+        name: CLASSIFICATION_KEYWORD.name,\n+        maxDisplay: CLASSIFICATION_KEYWORD.maxResults,\n+        categories: CATEGORIES_KEYWORD,\n+        orderIndex: CLASSIFICATION_KEYWORD.orderIndex,\n+      },\n+    ] as Classification[]);\n+    // ... and that the SearchOptions are correctly converted\n+    expect(mockedSearchFacets).toHaveBeenLastCalledWith(\"api\", {", "originalCommit": "d1fece2fd424c40cb8afd0218f82ecbe718845da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5NDAwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2207#discussion_r473594005", "bodyText": "It represents the 'base url' which is passed into the call. The Module gets this from a global config, and when in test mode this just ends up being \"api\".\nAs an aside, for this test this param is irrelevant, so I tried to see if Jest has an option for toHaveBeenNthCalledWith to ignore a param. But, nothing jumped out. \ud83d\ude1e", "author": "edalex-ian", "createdAt": "2020-08-20T05:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5MjA0Mg=="}], "type": "inlineReview"}]}