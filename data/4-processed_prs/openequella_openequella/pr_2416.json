{"pr_number": 2416, "pr_title": "refactor: convert any types to concrete types", "pr_createdAt": "2020-10-16T02:07:10Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2416", "timeline": [{"oid": "a879c32da3710dbfba2660968d01792315b46f16", "url": "https://github.com/openequella/openEQUELLA/commit/a879c32da3710dbfba2660968d01792315b46f16", "message": "refactor: convert any types to concrete types", "committedDate": "2020-10-16T02:08:36Z", "type": "forcePushed"}, {"oid": "8913db986033fc623a8a636f0ae61ed5c756413d", "url": "https://github.com/openequella/openEQUELLA/commit/8913db986033fc623a8a636f0ae61ed5c756413d", "message": "refactor: convert any types to concrete types", "committedDate": "2020-10-16T02:10:09Z", "type": "commit"}, {"oid": "8913db986033fc623a8a636f0ae61ed5c756413d", "url": "https://github.com/openequella/openEQUELLA/commit/8913db986033fc623a8a636f0ae61ed5c756413d", "message": "refactor: convert any types to concrete types", "committedDate": "2020-10-16T02:10:09Z", "type": "forcePushed"}, {"oid": "67d34c0aa67b7d570152ff9f50f0a91cf1a649fa", "url": "https://github.com/openequella/openEQUELLA/commit/67d34c0aa67b7d570152ff9f50f0a91cf1a649fa", "message": "Merge branch 'develop' into refactor/replace-any-types", "committedDate": "2020-10-16T14:44:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwNTQxMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2416#discussion_r506505413", "bodyText": "this could be alternatively be done by wrapping\nnode.children = Object.entries(definition)\nin a conditional, to avoid throwing", "author": "ChristianMurphy", "createdAt": "2020-10-16T14:50:04Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SchemaModule.tsx", "diffHunk": "@@ -59,15 +66,17 @@ export const schemaListSummary = async (): Promise<Map<string, string>> => {\n  * @param parent Mainly for recursive calls to provide back linking to the parents.\n  */\n export const buildSchemaTree = (\n-  definition: any,\n+  definition: Definition | unknown,\n   name: string,\n   parent?: SchemaNode\n ): SchemaNode => {\n   const node: SchemaNode = { name: name, parent: parent };\n-  node.children = Object.keys(definition)\n-    .filter((childName: string) => typeof definition[childName] === \"object\")\n-    .map((childName: string) =>\n-      buildSchemaTree(definition[childName], childName, node)\n+  if (!isDefinition(definition))\n+    throw new TypeError(\"definition is not an indexable object\");\n+  node.children = Object.entries(definition)", "originalCommit": "67d34c0aa67b7d570152ff9f50f0a91cf1a649fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIxOTY4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2416#discussion_r507219683", "bodyText": "\ud83d\ude05\nLeaving this be for now, as it is primarily a PR for typings, it may be something to revisit", "author": "ChristianMurphy", "createdAt": "2020-10-18T22:00:08Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/legacycontent/LegacyContent.tsx", "diffHunk": "@@ -24,12 +24,11 @@ import * as OEQ from \"@openequella/rest-api-client\";\n \n declare global {\n   interface Window {\n-    _trigger: any;\n-    eval: any;\n-    EQ: { [index: string]: any };\n+    _trigger: undefined | ((value: string) => boolean);\n+    EQ: { [index: string]: unknown };\n   }\n \n-  const _trigger: any;\n+  const _trigger: (value: string) => boolean;", "originalCommit": "67d34c0aa67b7d570152ff9f50f0a91cf1a649fa", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNTI4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2416#discussion_r508235289", "bodyText": "@PenghaiZhang do you foresee any issues with this in relation to the recent fixes you did to support custom language strings?", "author": "edalex-ian", "createdAt": "2020-10-20T06:18:52Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -17,7 +17,7 @@\n  */\n import { sprintf } from \"sprintf-js\";\n \n-declare let bundle: any;\n+declare let bundle: { [prefix: string]: string };", "originalCommit": "67d34c0aa67b7d570152ff9f50f0a91cf1a649fa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3MDU5Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2416#discussion_r508870597", "bodyText": "I tested this by updating a couple language strings, uploading again, and I can see the updated texts. So this type works.", "author": "PenghaiZhang", "createdAt": "2020-10-20T22:10:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNTI4OQ=="}], "type": "inlineReview"}]}