{"pr_number": 1591, "pr_title": "types: check typescript types during check process", "pr_createdAt": "2020-03-30T16:04:54Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1591", "timeline": [{"oid": "fbb84db32810964fb3096aaf014f83327b5958a9", "url": "https://github.com/openequella/openEQUELLA/commit/fbb84db32810964fb3096aaf014f83327b5958a9", "message": "types: check typescript types during check process", "committedDate": "2020-03-30T15:59:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ1MjQxNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400452416", "bodyText": "previously languageStrings was cast to LanguageStrings to avoid\nElement implicitly has an 'any' type because expression of type 'string' can't be used to index type\n\non line 26, but this cast caused issues elsewhere in the code.\nTo avoid the cast on languageStrings, refactored the iteration to narrow the type of key from string to keyof typeof languageString so TypeScript knows it can be safely used as an index.", "author": "ChristianMurphy", "createdAt": "2020-03-30T19:50:12Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/util/langstrings.ts", "diffHunk": "@@ -70,12 +70,14 @@ export function prepLangStrings(\n }\n \n export function initStrings() {\n-  for (const key in languageStrings) {\n+  for (const key of Object.keys(languageStrings) as Array<\n+    keyof typeof languageStrings\n+  >) {\n     prepLangStrings(key, languageStrings[key]);", "originalCommit": "9d05c138ad61def1f3cba7364efa1abf6c026f10", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1e21e34e3775975ab79f30fc2c3633aea88ac4c4", "url": "https://github.com/openequella/openEQUELLA/commit/1e21e34e3775975ab79f30fc2c3633aea88ac4c4", "message": "fix: keep literal type of language strings to allow easy access\n\nrefactor `initStrings` so `languageStrings` can be passed to `prepLanguageStrings` in a type safe manner.", "committedDate": "2020-03-30T20:28:22Z", "type": "commit"}, {"oid": "1e21e34e3775975ab79f30fc2c3633aea88ac4c4", "url": "https://github.com/openequella/openEQUELLA/commit/1e21e34e3775975ab79f30fc2c3633aea88ac4c4", "message": "fix: keep literal type of language strings to allow easy access\n\nrefactor `initStrings` so `languageStrings` can be passed to `prepLanguageStrings` in a type safe manner.", "committedDate": "2020-03-30T20:28:22Z", "type": "forcePushed"}, {"oid": "a5711cbd1965291399f720f30750e505ab244fd9", "url": "https://github.com/openequella/openEQUELLA/commit/a5711cbd1965291399f720f30750e505ab244fd9", "message": "Fix types for PreLoginNoticeConfigurator.tsx", "committedDate": "2020-03-30T23:37:31Z", "type": "commit"}, {"oid": "ae3191a0f3dc3f5546f6ba8822b1b11c6537d4e5", "url": "https://github.com/openequella/openEQUELLA/commit/ae3191a0f3dc3f5546f6ba8822b1b11c6537d4e5", "message": "Fix types on store.ts", "committedDate": "2020-03-31T00:00:09Z", "type": "commit"}, {"oid": "8315edcaedf60f3b9c8a5c4895f91b03594603c1", "url": "https://github.com/openequella/openEQUELLA/commit/8315edcaedf60f3b9c8a5c4895f91b03594603c1", "message": "Fix types for index.tsx", "committedDate": "2020-03-31T00:12:52Z", "type": "commit"}, {"oid": "df95ce9d05cace5e10757abfc9b6fc5595b4298d", "url": "https://github.com/openequella/openEQUELLA/commit/df95ce9d05cace5e10757abfc9b6fc5595b4298d", "message": "Fix types for LegacyContent.tsx", "committedDate": "2020-03-31T01:38:52Z", "type": "commit"}, {"oid": "17aaae950c77cd912e8d043239f6f9d46353ff3b", "url": "https://github.com/openequella/openEQUELLA/commit/17aaae950c77cd912e8d043239f6f9d46353ff3b", "message": "Merge branch 'types/check-typescript-types' of github.com:ChristianMurphy/openEquella into types/check-typescript-types", "committedDate": "2020-03-31T01:39:36Z", "type": "commit"}, {"oid": "368555b9d520737b09719cbd27886d85cd4f8914", "url": "https://github.com/openequella/openEQUELLA/commit/368555b9d520737b09719cbd27886d85cd4f8914", "message": "Fix type for index.ts", "committedDate": "2020-03-31T01:44:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDQ5NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400594494", "bodyText": "Elsewhere the pattern\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nis being used, would it make sense to use that here as well?\nOr to convert the other pieces of code to use the inline window as {something} approach?", "author": "ChristianMurphy", "createdAt": "2020-03-31T01:45:36Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/legacycontent/LegacyContent.tsx", "diffHunk": "@@ -176,7 +176,7 @@ export const LegacyContent = React.memo(function LegacyContent({\n   }\n \n   React.useEffect(() => {\n-    window[\"EQ\"] = {\n+    (window as { [key: string]: any })[\"EQ\"] = {", "originalCommit": "17aaae950c77cd912e8d043239f6f9d46353ff3b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNjc4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400606789", "bodyText": "Hi Christian, I don't quite understand how to implement this in LegacyContent.tsx. Can you give me a bit more details?", "author": "PenghaiZhang", "createdAt": "2020-03-31T02:32:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYxMzI2OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400613268", "bodyText": "OK I guess I fixed this.", "author": "PenghaiZhang", "createdAt": "2020-03-31T02:56:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDQ5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNjM2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400626367", "bodyText": "Here it would look something like\ndeclare global {\n  interface Window {\n    EQ: any\n  }\n}\nor even better specify the types being attached\ndeclare global {\n  interface Window {\n    EQ: {\n      event: (command: string) => boolean,\n      eventnv: (command: string) => boolean,\n      // ... etc\n    }\n}", "author": "ChristianMurphy", "createdAt": "2020-03-31T03:47:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NDQ5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NTAzMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400595033", "bodyText": "Is this an any?\nWhen validationErrors is returned, it is given the type IDictionary<string>, could that be used here as well?", "author": "ChristianMurphy", "createdAt": "2020-03-31T01:47:39Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/entity/index.ts", "diffHunk": "@@ -79,7 +79,7 @@ export interface EntityState<E extends Entity> extends PartialEntityState<E> {\n }\n \n function baseValidate<E extends Entity>(entity: E): IDictionary<string> {\n-  const validationErrors = {};\n+  const validationErrors: any = {};", "originalCommit": "368555b9d520737b09719cbd27886d85cd4f8914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYwNTEyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400605123", "bodyText": "Fixed.", "author": "SammyIsConfused", "createdAt": "2020-03-31T02:26:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NTAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NTU4Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400595586", "bodyText": "Is the explicit <HTMLScriptElement> still needed when the initializer is new HTMLScriptElement()?", "author": "ChristianMurphy", "createdAt": "2020-03-31T01:49:40Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/legacycontent/LegacyContent.tsx", "diffHunk": "@@ -306,30 +306,33 @@ function loadMissingScripts(_scripts: string[]) {\n     const doc = window.document;\n     const head = doc.getElementsByTagName(\"head\")[0];\n     const scriptTags = doc.getElementsByTagName(\"script\");\n-    const scriptSrcs = {};\n+    const scriptSrcs: { [index: string]: boolean } = {};\n     for (let i = 0; i < scriptTags.length; i++) {\n       const scriptTag = scriptTags[i];\n       if (scriptTag.src) {\n         scriptSrcs[scriptTag.src] = true;\n       }\n     }\n-    const lastScript = scripts.reduce((lastScript, scriptUrl) => {\n-      if (scriptSrcs[scriptUrl]) {\n-        return lastScript;\n-      } else {\n-        const newScript = doc.createElement(\"script\");\n-        newScript.src = scriptUrl;\n-        newScript.async = false;\n-        head.appendChild(newScript);\n-        return newScript;\n-      }\n-    }, null);\n+    const lastScript = scripts.reduce<HTMLScriptElement>(", "originalCommit": "368555b9d520737b09719cbd27886d85cd4f8914", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNjUxNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400626515", "bodyText": "I'll take that as it is needed?", "author": "ChristianMurphy", "createdAt": "2020-03-31T03:48:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5NTU4Ng=="}], "type": "inlineReview"}, {"oid": "5e7e92b133adf04ffb9b66e2e3cdaa4bd6ca6062", "url": "https://github.com/openequella/openEQUELLA/commit/5e7e92b133adf04ffb9b66e2e3cdaa4bd6ca6062", "message": "Fix type for validationErrors", "committedDate": "2020-03-31T02:25:18Z", "type": "commit"}, {"oid": "b3fb00a7c8654bf0ed16794570aae5b17d862018", "url": "https://github.com/openequella/openEQUELLA/commit/b3fb00a7c8654bf0ed16794570aae5b17d862018", "message": "Add 'EQ' to the interface Window;\n\nRemove the explicit <HTMLScriptElement>;", "committedDate": "2020-03-31T02:56:06Z", "type": "commit"}, {"oid": "06296f91627500d3bc52b1411fa3719be93bb5b5", "url": "https://github.com/openequella/openEQUELLA/commit/06296f91627500d3bc52b1411fa3719be93bb5b5", "message": "The type of 'lastScript' should be 'HTMLScriptElement | null'", "committedDate": "2020-03-31T03:30:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNzQ2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400627467", "bodyText": "Is current never null as the type implies? If so, could the null check on 265 be removed?\nIf not would current be HTMLLinkElement | null?", "author": "ChristianMurphy", "createdAt": "2020-03-31T03:52:01Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/legacycontent/LegacyContent.tsx", "diffHunk": "@@ -259,12 +260,12 @@ function updateStylesheets(\n   const doc = window.document;\n   const insertPoint = doc.getElementById(\"_dynamicInsert\")!;\n   const head = doc.getElementsByTagName(\"head\")[0];\n-  let current = insertPoint.previousElementSibling;\n-  const existingSheets = {};\n+  let current = insertPoint.previousElementSibling as HTMLLinkElement;\n+  const existingSheets: { [index: string]: HTMLLinkElement } = {};\n \n   while (current != null && current.tagName == \"LINK\") {", "originalCommit": "06296f91627500d3bc52b1411fa3719be93bb5b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MDEzNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400640134", "bodyText": "previousElementSibling can be null. So I wonder if we can remove  as HTMLLinkElement on 263 and add && current instanceof HTMLLinkElement on 265?", "author": "PenghaiZhang", "createdAt": "2020-03-31T04:44:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNzQ2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk5Mjg3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r400992879", "bodyText": "Yep, using instanceof would be even better", "author": "ChristianMurphy", "createdAt": "2020-03-31T15:11:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDYyNzQ2Nw=="}], "type": "inlineReview"}, {"oid": "e9b23b48c9a3d6f4f0862fae08de6173f4e07ec4", "url": "https://github.com/openequella/openEQUELLA/commit/e9b23b48c9a3d6f4f0862fae08de6173f4e07ec4", "message": "Use any rather than object for ControlApi type\n\nUsing object causes the typechecker to break on this in the register method -\nsince it uses a generic type.", "committedDate": "2020-03-31T04:13:40Z", "type": "commit"}, {"oid": "bd9fd99fefdb09cc6197108c043e1ff585475829", "url": "https://github.com/openequella/openEQUELLA/commit/bd9fd99fefdb09cc6197108c043e1ff585475829", "message": "Check if 'current' is an instace of HTMLLinkElement", "committedDate": "2020-03-31T05:49:09Z", "type": "commit"}, {"oid": "9fd46b2f0f7efe43ef1330cab740201e10b785db", "url": "https://github.com/openequella/openEQUELLA/commit/9fd46b2f0f7efe43ef1330cab740201e10b785db", "message": "ci: install typings before running check", "committedDate": "2020-03-31T14:52:52Z", "type": "commit"}, {"oid": "1eab1fec29f52f8675d40f85e2d324c71403b857", "url": "https://github.com/openequella/openEQUELLA/commit/1eab1fec29f52f8675d40f85e2d324c71403b857", "message": "ci: use full install ci and install ci test aliases", "committedDate": "2020-03-31T14:58:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NjU4MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r401256581", "bodyText": "Does this order look a little bit better? \n    - npm install-ci\n    - npm run check       \n    - cd Source/Plugins/Core/com.equella.core/js\n    - npm install-ci\n\nMay I ask why we run npm install-ci in  Source/Plugins/Core/com.equella.core/js at this stage?", "author": "PenghaiZhang", "createdAt": "2020-03-31T22:39:11Z", "path": ".travis.yml", "diffHunk": "@@ -75,7 +75,11 @@ jobs:\n   include:\n     - stage: build and check\n       script:\n-        - npm install && npm run check\n+        - cd Source/Plugins/Core/com.equella.core/js\n+        - npm install-ci\n+        - cd ../../../../..\n+        - npm install-ci\n+        - npm run check", "originalCommit": "1eab1fec29f52f8675d40f85e2d324c71403b857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NjE3Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r401276173", "bodyText": "TypeScript is part of npm run check at this point.\nFor the type checks to pass, all the @types repos need to be installed in the Source/Plugins/Core/com.equella.core/js folder before npm run check happens, otherwise all the types coming from imports will fail.\n@edalex-ian had suggested moving the type check into the build script of Source/Plugins/Core/com.equella.core/js/package.json, which could be another solution.\nI haven't had a chance to look into that refactor yet.", "author": "ChristianMurphy", "createdAt": "2020-03-31T23:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NjU4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NzkzMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r401277931", "bodyText": "Ah I see.Thanks for explanation!", "author": "PenghaiZhang", "createdAt": "2020-03-31T23:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI1NjU4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MjE2Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r401262163", "bodyText": "Does cd ../../../../.. work as same as cd - here?\nI can't remember why we used to have cd - here.  As each job runs in a fresh VM, I feel it's unnecessary to change the directory after  npm install-ci-test. But I may be wrong.", "author": "PenghaiZhang", "createdAt": "2020-03-31T22:55:06Z", "path": ".travis.yml", "diffHunk": "@@ -105,7 +109,10 @@ jobs:\n       script: sbt test\n       name: Unit test\n     - stage: build and check\n-      script: cd Source/Plugins/Core/com.equella.core/js && npm install && npm test; cd -\n+      script:\n+        - cd Source/Plugins/Core/com.equella.core/js\n+        - npm install-ci-test\n+        - cd ../../../../..", "originalCommit": "1eab1fec29f52f8675d40f85e2d324c71403b857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTQwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/1591#discussion_r401271402", "bodyText": "not sure, reverted to use cd -", "author": "ChristianMurphy", "createdAt": "2020-03-31T23:23:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MjE2Mw=="}], "type": "inlineReview"}, {"oid": "14a337a13d5379f56eeae5838d3fa28694a5281e", "url": "https://github.com/openequella/openEQUELLA/commit/14a337a13d5379f56eeae5838d3fa28694a5281e", "message": "ci: use `cd -` to go to previous folder", "committedDate": "2020-03-31T23:23:22Z", "type": "commit"}, {"oid": "0a4a61cb4f04a09615509d89bc976b0f89041ce9", "url": "https://github.com/openequella/openEQUELLA/commit/0a4a61cb4f04a09615509d89bc976b0f89041ce9", "message": "Merge branch 'develop' into types/check-typescript-types", "committedDate": "2020-04-02T00:48:46Z", "type": "commit"}]}