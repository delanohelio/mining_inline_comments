{"pr_number": 2414, "pr_title": "Feature/legacy search params", "pr_createdAt": "2020-10-15T23:07:47Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2414", "timeline": [{"oid": "384c05dbc6a21b8dc2bb7f536c5f23282d279027", "url": "https://github.com/openequella/openEQUELLA/commit/384c05dbc6a21b8dc2bb7f536c5f23282d279027", "message": "Initial work to allow searching.do urls and parameters to be used on new ui SearchPage\n* Add resolveUsers function to UserModule, to allow for looking a user up by id.\n* Add new function to SearchModule, which handles all of the conversion of query string params to searchOptions object\n* Alter initial useEffect on SearchPage, so query string params are converted before initial search occurs", "committedDate": "2020-10-15T14:59:22Z", "type": "commit"}, {"oid": "d0fe8d988047b62a0c7da187cb27a038dc64c046", "url": "https://github.com/openequella/openEQUELLA/commit/d0fe8d988047b62a0c7da187cb27a038dc64c046", "message": "Remove null checks in DateModified and SearchBar components\n* This prevents both components from getting their states set to null\\undefined before the convertParamsToSearchOptions promise resolves\n* All of the relevant js tests still pass after this change. And i manually inspected the netwrok traffic, to make sure no double requests are happening after starting a new search (since i think that's the reason why the null checks were there in the first place)", "committedDate": "2020-10-15T14:59:22Z", "type": "commit"}, {"oid": "1d4d8150141704edc26cb660dca8b5e2ab78b546", "url": "https://github.com/openequella/openEQUELLA/commit/1d4d8150141704edc26cb660dca8b5e2ab78b546", "message": "Use Promise.all, so I could get the default sortOrder to work properly", "committedDate": "2020-10-15T14:59:22Z", "type": "commit"}, {"oid": "477f8cd711d5bbf07fa78f6788376358b60e6862", "url": "https://github.com/openequella/openEQUELLA/commit/477f8cd711d5bbf07fa78f6788376358b60e6862", "message": "Attempted to improve readability of convertParamsToSearchOptions, added some jsdoc", "committedDate": "2020-10-15T15:03:06Z", "type": "commit"}, {"oid": "01eede6cbb52e56c3567a26c8f701591aac188d9", "url": "https://github.com/openequella/openEQUELLA/commit/01eede6cbb52e56c3567a26c8f701591aac188d9", "message": "Added tests to  SearchModule and SearchPage.\n* I also had to add the esModuleInterop property to tsconfig. Otherwise the rendering of a SearchPage with dateRangeQuickModeEnabled in jest will fail. Solution was found at https://github.com/mui-org/material-ui-pickers/issues/805\n* I had to modify how the imports work in the jest setup. This came about as a result of adding the esModuleInterop", "committedDate": "2020-10-15T15:03:06Z", "type": "commit"}, {"oid": "4a0bf10f98054290a67963128a1224ae148a28b4", "url": "https://github.com/openequella/openEQUELLA/commit/4a0bf10f98054290a67963128a1224ae148a28b4", "message": "Put the mock back in a beforeEach, so it doesn't interfere with the other tests", "committedDate": "2020-10-15T22:33:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2NDg1Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r506064852", "bodyText": "The change made here means we are no longer able to see the old search page in new UI mode. I think we still need the old search page at this stage.", "author": "PenghaiZhang", "createdAt": "2020-10-16T05:45:16Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/mainui/routes.tsx", "diffHunk": "@@ -57,7 +57,7 @@ export const routes = {\n     component: SettingsPage,\n   },\n   Search: {\n-    path: \"/page/search\",\n+    path: \"(/page/search|/searching.do)\",", "originalCommit": "4a0bf10f98054290a67963128a1224ae148a28b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI0NDM5NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507244394", "bodyText": "This change will affect Selection Section if it's in selectOrAdd mode. The reason is in this mode, the URL to search page is  searching.do whereas it's access/course/searching.do in the other mode.", "author": "PenghaiZhang", "createdAt": "2020-10-18T23:09:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2NDg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI0OTIwNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507249206", "bodyText": "The change made here means we are no longer able to see the old search page in new UI mode. I think we still need the old search page at this stage.\n\nI thought that was our intention, to remove access to the old searching.do in the upcoming release of oEQ", "author": "mrblippy", "createdAt": "2020-10-18T23:21:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2NDg1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3Mzk3Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507273976", "bodyText": "Ultimately yes, but not as part of this work - we plan to do that once all the search features are available in the New Search UI. (And then we'll also remove the toggle option etc.)", "author": "edalex-ian", "createdAt": "2020-10-19T00:17:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA2NDg1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMzU3Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r506523576", "bodyText": "Would this be the same as\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import * as ReactSixteenAdapter from \"enzyme-adapter-react-16\";\n          \n          \n            \n            const adapter = ReactSixteenAdapter as any;\n          \n          \n            \n            configure({ adapter: new adapter.default() });\n          \n          \n            \n            import Adapter from \"enzyme-adapter-react-16\";\n          \n          \n            \n            configure({ adapter: new Adapter() });\n          \n      \n    \n    \n  \n\n?", "author": "ChristianMurphy", "createdAt": "2020-10-16T15:05:09Z", "path": "Source/Plugins/Core/com.equella.core/js/jest.setup.ts", "diffHunk": "@@ -16,6 +16,6 @@\n  * limitations under the License.\n  */\n import { configure } from \"enzyme\";\n-import * as Adapter from \"enzyme-adapter-react-16\";\n-\n-configure({ adapter: new Adapter() });\n+import * as ReactSixteenAdapter from \"enzyme-adapter-react-16\";\n+const adapter = ReactSixteenAdapter as any;\n+configure({ adapter: new adapter.default() });", "originalCommit": "4a0bf10f98054290a67963128a1224ae148a28b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2OTc1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507269754", "bodyText": "@ChristianMurphy I tried this out, but the Adapter import is giving me an error in intellij\nTS1259: Module '\"/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/@types/enzyme-adapter-react-16/index\"' can only be default-imported using the 'esModuleInterop' flag\nBut, despite this error, all of the js tests are passing, so maybe it's ok?", "author": "mrblippy", "createdAt": "2020-10-19T00:08:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMzU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM4MzAzMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507383030", "bodyText": "interesting \ud83e\udd14\nIn it's current form could as any be removed?", "author": "ChristianMurphy", "createdAt": "2020-10-19T02:47:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMzU3Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3MjM5Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510572397", "bodyText": "Nah, any cannot be removed", "author": "mrblippy", "createdAt": "2020-10-23T03:23:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyMzU3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTEyNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r506525127", "bodyText": "Are synthetic defaults needed?\nCould this polyfill be avoided by using import * as SomeName from 'some-package' instead of import SomeName from 'some-package'?", "author": "ChristianMurphy", "createdAt": "2020-10-16T15:06:25Z", "path": "Source/Plugins/Core/com.equella.core/js/tsconfig.json", "diffHunk": "@@ -2,6 +2,8 @@\n   \"compilerOptions\": {\n     \"outDir\": \"target/ts\",\n     \"module\": \"CommonJS\",\n+    \"allowSyntheticDefaultImports\": true,\n+    \"esModuleInterop\": true,", "originalCommit": "4a0bf10f98054290a67963128a1224ae148a28b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2NzIxNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507267214", "bodyText": "May I ask what are the reasons to add these two configurations?", "author": "PenghaiZhang", "createdAt": "2020-10-19T00:02:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI5NTc5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507295796", "bodyText": "Inside my jest test I was rendering the SearchPage component with dateRangeQuickModeEnabled: false, which causes the utils prop of MuiPickersUtilsProvider in DateRangeSelector to be undefined. Because the LuxonUtils import isn't working properly\nThis link suggested adding those configuration options to get around the issue.\nBut, as mentioned by @ChristianMurphy above. I can avoid making changes to the tsconfig.json and jest.setup.ts, simply by modifying the LuxonUtils import in DateRangeSelector.tsx", "author": "mrblippy", "createdAt": "2020-10-19T00:49:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM4MTYwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507381602", "bodyText": "I remember  I used to try the modified LuxonUtils import in DateRangeSelector.tsx and I got warnings/errors, but I might be wrong.", "author": "PenghaiZhang", "createdAt": "2020-10-19T02:44:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3Mjc1Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510572757", "bodyText": "Yeah, you are correct Penghai, changing the import makes the tests work. But it breaks the control when viewed in the browser. I have put it back to how it was", "author": "mrblippy", "createdAt": "2020-10-23T03:24:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4Nzg5NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r506587894", "bodyText": "Could range type be narrowed?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n              const getLastModifiedDateRange = (\n          \n          \n            \n                rangeType: string,\n          \n          \n            \n              type RangeType = \"between\" | \"after\" | \"before\" | \"on\";\n          \n          \n            \n            \n          \n          \n            \n              const getLastModifiedDateRange = (\n          \n          \n            \n                rangeType: RangeType,", "author": "ChristianMurphy", "createdAt": "2020-10-16T16:29:09Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,", "originalCommit": "4a0bf10f98054290a67963128a1224ae148a28b4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwMjk4Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507302982", "bodyText": "Yes, i believe so. Good idea @ChristianMurphy", "author": "mrblippy", "createdAt": "2020-10-19T01:00:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4Nzg5NA=="}], "type": "inlineReview"}, {"oid": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "url": "https://github.com/openequella/openEQUELLA/commit/86d3d5b14bc2cb8572b7846a17d77283d74151f8", "message": "Make SearchQueryProperties test only run in old ui mode, as access to the old searching.do page has now been removed", "committedDate": "2020-10-18T22:40:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI0NzkzNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507247934", "bodyText": "This function can also return undefined.", "author": "PenghaiZhang", "createdAt": "2020-10-18T23:18:01Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3MjgxMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510572813", "bodyText": "Yes, i have added that", "author": "mrblippy", "createdAt": "2020-10-23T03:25:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI0NzkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI1Mzk5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507253996", "bodyText": "Just a personal taste here: if you change the signature of resolveUsers to use rest parameters, than here you can simplify the function to\n const getUserDetails = async (\n    userId: string\n  ): Promise<OEQ.UserQuery.UserDetails> => await resolveUsers(userId)[0]", "author": "PenghaiZhang", "createdAt": "2020-10-18T23:32:41Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI1NjgxOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507256818", "bodyText": "Have you tested when getQueryParam(LegacySearchParams.SORT) returns undefined ? I feel casting undefined to SortOrder will cause error.", "author": "PenghaiZhang", "createdAt": "2020-10-18T23:39:31Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,\n+    primaryDate: Date,\n+    secondaryDate?: Date\n+  ): DateRange => {\n+    let dr: DateRange = {};\n+    switch (rangeType?.toLocaleLowerCase()) {\n+      case undefined:\n+        break;\n+      case \"between\":\n+        dr = { start: primaryDate, end: secondaryDate };\n+        break;\n+      case \"after\":\n+        dr = { start: primaryDate ?? undefined };\n+        break;\n+      case \"before\":\n+        dr = { end: primaryDate };\n+        break;\n+      case \"on\":\n+        dr = { start: primaryDate, end: primaryDate };\n+        break;\n+      default:\n+        throw new TypeError(\"Invalid range\");\n+        break;\n+    }\n+    return dr;\n+  };\n+\n+  const searchOptions: SearchOptions = {\n+    ...defaultSearchOptions,\n+    collections: collection\n+      ? await getCollectionDetails(collection)\n+      : undefined,\n+    query: getQueryParam(LegacySearchParams.QUERY),\n+    owner: owner ? await getUserDetails(owner) : undefined,\n+    lastModifiedDateRange: getLastModifiedDateRange(\n+      dateRange ?? \"\",\n+      new Date(parseInt(getQueryParam(LegacySearchParams.PRIMARYDATE) ?? \"\")),\n+      new Date(parseInt(getQueryParam(LegacySearchParams.SECONDARYDATE) ?? \"\"))\n+    ),\n+    sortOrder:\n+      (getQueryParam(LegacySearchParams.SORT)?.toUpperCase() as SortOrder) ||\n+      undefined,", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3Mjg4Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510572886", "bodyText": "It didn't cause any errors that I could see", "author": "mrblippy", "createdAt": "2020-10-23T03:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI1NjgxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MTI3Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507261272", "bodyText": "I wonder what will happen in this scenario.\nqueryStringSearchOptions includes sortOrder being Rank, changed the sort order to Datemodified, go to another page and go back. Which sort order will be remembered?  From your attached video I am guessing the answer would be Rank.", "author": "PenghaiZhang", "createdAt": "2020-10-18T23:49:34Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -118,21 +119,40 @@ const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n   const [showSpinner, setShowSpinner] = useState<boolean>(false);\n   const [searchSettings, setSearchSettings] = useState<SearchSettings>();\n   const [classifications, setClassifications] = useState<Classification[]>([]);\n+\n+  const location = useLocation();\n+\n   /**\n    * Update the page title and retrieve Search settings.\n    */\n   useEffect(() => {\n     updateTemplate((tp) => ({\n       ...templateDefaults(searchStrings.title)(tp),\n     }));\n-\n     // Show spinner before calling API to retrieve Search settings.\n     setShowSpinner(true);\n-    getSearchSettingsFromServer().then((settings: SearchSettings) => {\n-      setSearchSettings(settings);\n-      handleSortOrderChanged(\n-        searchPageOptions.sortOrder ?? settings.defaultSearchSort\n-      );\n+\n+    Promise.all([\n+      getSearchSettingsFromServer(),\n+      convertParamsToSearchOptions(location.search),\n+    ]).then((results) => {\n+      const [searchSettings, queryStringSearchOptions] = results;\n+      setSearchSettings(searchSettings);\n+\n+      if (queryStringSearchOptions)\n+        setSearchPageOptions({\n+          ...queryStringSearchOptions,\n+          dateRangeQuickModeEnabled: false,\n+          sortOrder:", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3MjkwOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510572908", "bodyText": "yeah", "author": "mrblippy", "createdAt": "2020-10-23T03:25:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MTI3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MjE3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507262174", "bodyText": "Hehe this is the same thing I did, and then I changed back to iff.", "author": "PenghaiZhang", "createdAt": "2020-10-18T23:51:29Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/components/SearchBar.tsx", "diffHunk": "@@ -94,21 +94,20 @@ export default function SearchBar({\n \n   // Update state when search query is cleared.\n   useEffect(() => {\n-    if (!query) {\n-      setCurrentQuery(query);\n-    }\n+    setCurrentQuery(query);\n   }, [query]);\n \n   const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n     if (event.keyCode === ESCAPE_KEY_CODE && currentQuery) {\n-      // iff there is a current query, clear it out and trigger a search\n+      // if there is a current query, clear it out and trigger a search", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMTE1MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507311150", "bodyText": "Yup, it was iff as in https://en.wikipedia.org/wiki/If_and_only_if\nBut if it keeps confusing people, then we can leave it.", "author": "edalex-ian", "createdAt": "2020-10-19T01:11:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MjE3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3Mjk5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510572990", "bodyText": "I changed it back, but now I know what iff means :)", "author": "mrblippy", "createdAt": "2020-10-23T03:25:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2MjE3NA=="}], "type": "inlineReview"}, {"oid": "116ed22329aee54733bcd028816b7235e6930a98", "url": "https://github.com/openequella/openEQUELLA/commit/116ed22329aee54733bcd028816b7235e6930a98", "message": "Modify LuxonUtils import in DateRangeSelector, which means I can remove the two flags I added in tsconfig", "committedDate": "2020-10-19T00:56:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2NTEzOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507265139", "bodyText": "These variable names are mis-leading. Makes it sound like it's just a mock for singular data structure. Better to go with mockedResolveUsers and mockedCollectionListSummary. (Mind you, that second one is not ideal, but at least you're matching the function name you're mocking.)", "author": "edalex-ian", "createdAt": "2020-10-18T23:58:21Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -104,4 +115,101 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery(undefined)).toBeUndefined();\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n+\n+  describe(\"convertParamsToSearchOptions\", () => {\n+    const mockedUser = jest.spyOn(UserModule, \"resolveUsers\");\n+    const mockedCollection = jest.spyOn(", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NDIwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510574205", "bodyText": "I was just following the convention we had in other tests. But yeah, your suggested change makes sense", "author": "mrblippy", "createdAt": "2020-10-23T03:31:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2NTEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2ODYwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507268605", "bodyText": "No need for string template / backticks here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  `converts legacy date range query params: %s to search options containing lastModifiedDateRange of %s`,\n          \n          \n            \n                  \"converts legacy date range query params: %s to search options containing lastModifiedDateRange of %s\",", "author": "edalex-ian", "createdAt": "2020-10-19T00:05:49Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -104,4 +115,101 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery(undefined)).toBeUndefined();\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n+\n+  describe(\"convertParamsToSearchOptions\", () => {\n+    const mockedUser = jest.spyOn(UserModule, \"resolveUsers\");\n+    const mockedCollection = jest.spyOn(\n+      CollectionModule,\n+      \"collectionListSummary\"\n+    );\n+\n+    afterEach(() => {\n+      jest.clearAllMocks();\n+    });\n+\n+    it(\"should return undefined if no query string parameters are defined\", async () => {\n+      const convertedParamsPromise = await convertParamsToSearchOptions(\"\");\n+      expect(convertedParamsPromise).toBeUndefined();\n+    });\n+\n+    it(\"should convert legacy search parameters to searchOptions\", async () => {\n+      mockedUser.mockResolvedValue(users);\n+      mockedCollection.mockResolvedValue(getCollectionMap);\n+\n+      //Query string was obtained from legacy UI searching.do->Share URL\n+      const fullQueryString =\n+        \"?in=C8e3caf16-f3cb-b3dd-d403-e5eb8d545fff&q=test&sort=datecreated&owner=680f5eb7-22e2-4ab6-bcea-25205165e36e&dp=1601510400000&dr=AFTER\";\n+\n+      const convertedParamsPromise = await convertParamsToSearchOptions(\n+        fullQueryString\n+      );\n+\n+      const expectedSearchOptions: SearchOptions = {\n+        ...defaultSearchOptions,\n+        sortOrder: SortOrder.DATECREATED,\n+        searchAttachments: true,\n+        collections: [\n+          {\n+            uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545fff\",\n+            name: \"DRM Test Collection\",\n+          },\n+        ],\n+        query: \"test\",\n+        owner: {\n+          id: \"680f5eb7-22e2-4ab6-bcea-25205165e36e\",\n+          username: \"user200\",\n+          firstName: \"Fabienne\",\n+          lastName: \"Hobson\",\n+        },\n+        lastModifiedDateRange: { start: new Date(\"2020-10-01T00:00:00.000Z\") },\n+      };\n+\n+      expect(convertedParamsPromise).toEqual(expectedSearchOptions);\n+    });\n+\n+    // All combinations of Date Modified parameters that legacy UI uses. Epoch Unix Time Stamp formatted\n+    // dp: DatePrimary ds: DateSecondary dr: DateRange\n+\n+    // dp=15 October 2020 00:00:00\n+    const beforeDateQuery = \"?dp=1602720000000&dr=BEFORE\";\n+    // dp=15 October 2020 00:00:00\n+    const afterDateQuery = \"?dp=1602720000000&dr=AFTER\";\n+    // dp=13 October 2020 00:00:00 ds=15 October 2020 00:00:00\n+    const betweenDateQuery = \"?dp=1602547200000&ds=1602720000000&dr=BETWEEN\";\n+    // dp=15 October 2020 00:00:00 ds=16 October 2020 00:00:00\n+    const onDateQuery = \"?dp=1602720000000&dr=ON\";\n+\n+    const expectedBeforeRange = {\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedAfterRange = {\n+      start: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedBetweenRange = {\n+      start: new Date(\"2020-10-13T00:00:00.000+00:00\"),\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedOnRange = {\n+      start: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+\n+    it.each([\n+      [beforeDateQuery, expectedBeforeRange],\n+      [afterDateQuery, expectedAfterRange],\n+      [betweenDateQuery, expectedBetweenRange],\n+      [onDateQuery, expectedOnRange],\n+    ])(\n+      `converts legacy date range query params: %s to search options containing lastModifiedDateRange of %s`,", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2OTMwNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507269306", "bodyText": "Rather than specifying your types here, I feel it'd be better up in the generic for .each. So you'd have:\nit.each<string, DateRange>([\nAnd then here you'd omit the typing.", "author": "edalex-ian", "createdAt": "2020-10-19T00:07:15Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -104,4 +115,101 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery(undefined)).toBeUndefined();\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n+\n+  describe(\"convertParamsToSearchOptions\", () => {\n+    const mockedUser = jest.spyOn(UserModule, \"resolveUsers\");\n+    const mockedCollection = jest.spyOn(\n+      CollectionModule,\n+      \"collectionListSummary\"\n+    );\n+\n+    afterEach(() => {\n+      jest.clearAllMocks();\n+    });\n+\n+    it(\"should return undefined if no query string parameters are defined\", async () => {\n+      const convertedParamsPromise = await convertParamsToSearchOptions(\"\");\n+      expect(convertedParamsPromise).toBeUndefined();\n+    });\n+\n+    it(\"should convert legacy search parameters to searchOptions\", async () => {\n+      mockedUser.mockResolvedValue(users);\n+      mockedCollection.mockResolvedValue(getCollectionMap);\n+\n+      //Query string was obtained from legacy UI searching.do->Share URL\n+      const fullQueryString =\n+        \"?in=C8e3caf16-f3cb-b3dd-d403-e5eb8d545fff&q=test&sort=datecreated&owner=680f5eb7-22e2-4ab6-bcea-25205165e36e&dp=1601510400000&dr=AFTER\";\n+\n+      const convertedParamsPromise = await convertParamsToSearchOptions(\n+        fullQueryString\n+      );\n+\n+      const expectedSearchOptions: SearchOptions = {\n+        ...defaultSearchOptions,\n+        sortOrder: SortOrder.DATECREATED,\n+        searchAttachments: true,\n+        collections: [\n+          {\n+            uuid: \"8e3caf16-f3cb-b3dd-d403-e5eb8d545fff\",\n+            name: \"DRM Test Collection\",\n+          },\n+        ],\n+        query: \"test\",\n+        owner: {\n+          id: \"680f5eb7-22e2-4ab6-bcea-25205165e36e\",\n+          username: \"user200\",\n+          firstName: \"Fabienne\",\n+          lastName: \"Hobson\",\n+        },\n+        lastModifiedDateRange: { start: new Date(\"2020-10-01T00:00:00.000Z\") },\n+      };\n+\n+      expect(convertedParamsPromise).toEqual(expectedSearchOptions);\n+    });\n+\n+    // All combinations of Date Modified parameters that legacy UI uses. Epoch Unix Time Stamp formatted\n+    // dp: DatePrimary ds: DateSecondary dr: DateRange\n+\n+    // dp=15 October 2020 00:00:00\n+    const beforeDateQuery = \"?dp=1602720000000&dr=BEFORE\";\n+    // dp=15 October 2020 00:00:00\n+    const afterDateQuery = \"?dp=1602720000000&dr=AFTER\";\n+    // dp=13 October 2020 00:00:00 ds=15 October 2020 00:00:00\n+    const betweenDateQuery = \"?dp=1602547200000&ds=1602720000000&dr=BETWEEN\";\n+    // dp=15 October 2020 00:00:00 ds=16 October 2020 00:00:00\n+    const onDateQuery = \"?dp=1602720000000&dr=ON\";\n+\n+    const expectedBeforeRange = {\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedAfterRange = {\n+      start: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedBetweenRange = {\n+      start: new Date(\"2020-10-13T00:00:00.000+00:00\"),\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+    const expectedOnRange = {\n+      start: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+      end: new Date(\"2020-10-15T00:00:00.000+00:00\"),\n+    };\n+\n+    it.each([\n+      [beforeDateQuery, expectedBeforeRange],\n+      [afterDateQuery, expectedAfterRange],\n+      [betweenDateQuery, expectedBetweenRange],\n+      [onDateQuery, expectedOnRange],\n+    ])(\n+      `converts legacy date range query params: %s to search options containing lastModifiedDateRange of %s`,\n+      async (queryString, expectedRange: DateRange) => {", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2OTc0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507269742", "bodyText": "There's no testing in here for any error handling.", "author": "edalex-ian", "createdAt": "2020-10-19T00:08:05Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -104,4 +115,101 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery(undefined)).toBeUndefined();\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n+\n+  describe(\"convertParamsToSearchOptions\", () => {", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NjIyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510576223", "bodyText": "Perhaps I am missing something here. But what error handling would i need to do?", "author": "mrblippy", "createdAt": "2020-10-23T03:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2OTc0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2NjY5NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510666695", "bodyText": "Incorrect/corrupt params or values are set in the URL string - failures to look-up collections/values.", "author": "edalex-ian", "createdAt": "2020-10-23T06:41:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI2OTc0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MDE4Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507270182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            const mockQueryParamSearchOptions = jest.spyOn(\n          \n          \n            \n            const mockConvertParamsToSearchOptions = jest.spyOn(", "author": "edalex-ian", "createdAt": "2020-10-19T00:09:04Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -76,6 +76,10 @@ const mockSearchSettings = jest.spyOn(\n   SearchSettingsModule,\n   \"getSearchSettingsFromServer\"\n );\n+const mockQueryParamSearchOptions = jest.spyOn(", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MTI1MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507271251", "bodyText": "You test here is saying it should call the function if there were query parameters in url however you don't appear to be setting such in the URL. Did I miss something.\nAnd arguably, there should be an inverse function then to ensure it's not called if there are none. (If such implied constraints are correct.)", "author": "edalex-ian", "createdAt": "2020-10-19T00:11:19Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/search/SearchPage.test.tsx", "diffHunk": "@@ -664,3 +668,28 @@ describe(\"<SearchPage/>\", () => {\n     });\n   });\n });\n+\n+describe(\"conversion of legacy query parameters to SearchPageOptions\", () => {\n+  const searchPageOptions: SearchPageOptions = {\n+    ...defaultSearchPageOptions,\n+    dateRangeQuickModeEnabled: false,\n+  };\n+\n+  beforeEach(() => {\n+    mockQueryParamSearchOptions.mockResolvedValueOnce(searchPageOptions);\n+  });\n+\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+\n+  it(\"should call convertParamsToSearchOptions if there were query paramaters in url\", async () => {", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NTM4MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510575380", "bodyText": "This was an oversight by me. I have altered the test to simulate how a query string will be handled when accessing the SearchPage", "author": "mrblippy", "createdAt": "2020-10-23T03:36:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MTI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MjcxNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507272714", "bodyText": "Like @ChristianMurphy I'm also unsure what you're doing here. It looks almost like for like.\nBut also, I'm not sure why you're playing here. The tests you updated were React Testing Library based - not enzyme. Could you please tell us what's the haps?", "author": "edalex-ian", "createdAt": "2020-10-19T00:14:31Z", "path": "Source/Plugins/Core/com.equella.core/js/jest.setup.ts", "diffHunk": "@@ -16,6 +16,6 @@\n  * limitations under the License.\n  */\n import { configure } from \"enzyme\";\n-import * as Adapter from \"enzyme-adapter-react-16\";\n-\n-configure({ adapter: new Adapter() });\n+import * as ReactSixteenAdapter from \"enzyme-adapter-react-16\";\n+const adapter = ReactSixteenAdapter as any;\n+configure({ adapter: new adapter.default() });", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NjA0Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510576047", "bodyText": "I was having issues rendering the search page inside tests with Quick Options disabled for the DateRangeSelector control. More information on the issue can be found here mui-org/material-ui-pickers#805", "author": "mrblippy", "createdAt": "2020-10-23T03:39:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MjcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg5OTc3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510899774", "bodyText": "I'm not sure I follow here, the issue referenced has to do with Moment not Enzyme.\nLooking at enzyme-adapter-react-16 both the source https://github.com/enzymejs/enzyme/blob/7c898db96505f1e7e7462797e8aa4bc90d3cf2ec/packages/enzyme-adapter-react-16/src/ReactSixteenAdapter.js#L967 and the built version https://unpkg.com/enzyme-adapter-react-16@1.15.5/build/index.js\nuse common js imports\nThis would most likely be related to DefinitelyTyped/DefinitelyTyped#29655\nThe official solution appears to be https://github.com/DefinitelyTyped/DefinitelyTyped/blob/9b525a23c4f0c86b9832522f4345ab21e9e71e70/types/enzyme-adapter-react-16/enzyme-adapter-react-16-tests.ts#L2", "author": "ChristianMurphy", "createdAt": "2020-10-23T13:53:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MjcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMTM5Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510901392", "bodyText": "I was having issues rendering the search page inside tests with Quick Options\n\nCan you expand on what the issues were?\nAnd why changing Enzyme fixes what sounds like a Moment issue?", "author": "ChristianMurphy", "createdAt": "2020-10-23T13:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MjcxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTY5NDMzNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r511694336", "bodyText": "I was having issues rendering the search page inside tests with Quick Options\n\nCan you expand on what the issues were?\nAnd why changing Enzyme fixes what sounds like a Moment issue?\n\nSure, this was the sequence of steps that led me to altering the jest.setup.ts file:\n\n\nIn SearchPage.test, I was trying to render a SearchPage containing a MuiPickersUtilsProvider (inside DateRangeSelector.tsx).\n\n\nIt failed with the following error:\n console.error Error: Uncaught [TypeError: Utils is not a constructor] at reportException (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:62:24) at innerInvokeEventListeners (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:333:9) at invokeEventListeners (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:274:3) at HTMLUnknownElementImpl._dispatch (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:221:9) at HTMLUnknownElementImpl.dispatchEvent (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/jsdom/lib/jsdom/living/events/EventTarget-impl.js:94:17) at HTMLUnknownElement.dispatchEvent (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/jsdom/lib/jsdom/living/generated/EventTarget.js:231:34) at Object.invokeGuardedCallbackDev (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/react-dom/cjs/react-dom.development.js:237:16) at invokeGuardedCallback (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/react-dom/cjs/react-dom.development.js:292:31) at beginWork$1 (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/react-dom/cjs/react-dom.development.js:23203:7) at performUnitOfWork (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/react-dom/cjs/react-dom.development.js:22157:12) TypeError: Utils is not a constructor at /home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/@material-ui/src/MuiPickersUtilsProvider.tsx:21:37 at mountMemo (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/react-dom/cjs/react-dom.development.js:15442:19) at Object.useMemo (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/react-dom/cjs/react-dom.development.js:15738:16) at Object.React [as useMemo] (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/react/cjs/react.development.js:1521:21) at MuiPickersUtilsProvider (/home/charlie/Charliequella/Source/Plugins/Core/com.equella.core/js/node_modules/@material-ui/src/MuiPickersUtilsProvider.tsx:21:17) ....\n\n\nI researched the error, and it appeared that others have been having the same issue mui-org/material-ui-pickers#805. I implemented the 'solution' of adding \"esModuleInterop\": true to tsconfig.json\n\n\nAfter setting esModuleInterop to true, running SearchPage.test failed with the following:\n`Test suite failed to run\njest.setup.ts:20:26 - error TS2351: This expression is not constructable.\nType 'typeof ReactSixteenAdapter' has no construct signatures.\n20 configure({ adapter: new Adapter() });\n~~~~~~~\njest.setup.ts:19:1\n  19 import * as Adapter from \"enzyme-adapter-react-16\";\n     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  Type originates at this import. A namespace-style import cannot be called or constructed, and will cause a failure at runtime. Consider using a default import or import require here instead.\n\n\n\n`", "author": "mrblippy", "createdAt": "2020-10-26T02:45:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MjcxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3MzQwNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507273404", "bodyText": "Similar to jest.setup.ts, what was the issue you're trying to address here?", "author": "edalex-ian", "createdAt": "2020-10-19T00:15:53Z", "path": "Source/Plugins/Core/com.equella.core/js/tsconfig.json", "diffHunk": "@@ -2,6 +2,8 @@\n   \"compilerOptions\": {\n     \"outDir\": \"target/ts\",\n     \"module\": \"CommonJS\",\n+    \"allowSyntheticDefaultImports\": true,\n+    \"esModuleInterop\": true,", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI3NzY0MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507277640", "bodyText": "Just a reminder that typescript enums are removed post transpilation and can cause issues in Jest tests. So we're pretty well staying away from them.\nThe more idiomatic way of JS is to use constants, or in typescript it seems safer to go with simple string unions - as unpalatable as that may feel coming from other languages. And lastly, if you also wish to be able to enumerate what is available (not possible with either of the above) then we do have the option of Union fom runtypes as I use in the REST module.\nAny this just in... I've found that runtypes has Pattern Matching!! I was looking for that in my View Attachments work to avoid a switch statement - and so would be a great fit for you here.", "author": "edalex-ian", "createdAt": "2020-10-19T00:25:27Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -87,6 +88,19 @@ export interface DateRange {\n   end?: Date;\n }\n \n+/**\n+ * Legacy searching.do parameters currently supported by SearchPage component.\n+ */\n+export enum LegacySearchParams {\n+  PRIMARYDATE = \"dp\",\n+  SECONDARYDATE = \"ds\",\n+  DATERANGE = \"dr\",\n+  QUERY = \"q\",\n+  SORT = \"sort\",\n+  OWNER = \"owner\",\n+  IN = \"in\",\n+}", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI4MjA4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507282089", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param queryString query string params from a shared searching.do url\n          \n          \n            \n             * @param queryString query string params from a shared `searching.do` URL\n          \n      \n    \n    \n  \n\nTwo things there:\n\ngood to get capitalisation for acronyms right; and\nYou can use markdown in these comments and the formatting will carry over (if we ever get around to generating it)", "author": "edalex-ian", "createdAt": "2020-10-19T00:31:55Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI4MzQwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507283405", "bodyText": "Please specify return type.\nFor exported / externally used functions they should be fully typed.", "author": "edalex-ian", "createdAt": "2020-10-19T00:33:31Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI4NTQ0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507285444", "bodyText": "Should this either:\n\nReturn default search options; or\nThrow an error\n\nMore so though, is this redundant as the function signature does not allow undefined. \ud83e\udd14", "author": "edalex-ian", "createdAt": "2020-10-19T00:35:42Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI5MDI2MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507290261", "bodyText": "So if a userId is invalid, then I guess (without having read resolveUsers) that userDetails.length could be less than 1 and this will return undefined. Should you specify that in the return type, or do you need to throw or...", "author": "edalex-ian", "createdAt": "2020-10-19T00:41:14Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NTExOA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510575118", "bodyText": "I have specified undefined in the return type", "author": "mrblippy", "createdAt": "2020-10-23T03:35:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI5MDI2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzI5NjM4Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507296387", "bodyText": "This will now have the SEARCH_COLLECTION string in three (+) places. Being a standard ACL arguably it should in an ACL_SEARCH_COLLECTION constant. Maybe we need a oeq-ts-rest-api/src/Acl.ts.\nThis ideally would've been addressed when we reached two instances, so we definitely need to do it now.", "author": "edalex-ian", "createdAt": "2020-10-19T00:50:44Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwMTQ3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507301479", "bodyText": "So as mentioned above, I reckon let's bring in runtypes and then setup a Union for the ranges, and then with that in place you can also replace the below switch statement using rangeType a pattern match.", "author": "edalex-ian", "createdAt": "2020-10-19T00:58:22Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwMzExOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507303119", "bodyText": "What's the ?? here for when primaryDate is typed as Date - i.e. no undefined or null allowed.", "author": "edalex-ian", "createdAt": "2020-10-19T01:01:10Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,\n+    primaryDate: Date,\n+    secondaryDate?: Date\n+  ): DateRange => {\n+    let dr: DateRange = {};\n+    switch (rangeType?.toLocaleLowerCase()) {\n+      case undefined:\n+        break;\n+      case \"between\":\n+        dr = { start: primaryDate, end: secondaryDate };\n+        break;\n+      case \"after\":\n+        dr = { start: primaryDate ?? undefined };", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwNDUyNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507304526", "bodyText": "Should this be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  (getQueryParam(LegacySearchParams.SORT)?.toUpperCase() as SortOrder) ||\n          \n          \n            \n                  (getQueryParam(LegacySearchParams.SORT)?.toUpperCase() as SortOrder) ??\n          \n      \n    \n    \n  \n\n?", "author": "edalex-ian", "createdAt": "2020-10-19T01:03:30Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,\n+    primaryDate: Date,\n+    secondaryDate?: Date\n+  ): DateRange => {\n+    let dr: DateRange = {};\n+    switch (rangeType?.toLocaleLowerCase()) {\n+      case undefined:\n+        break;\n+      case \"between\":\n+        dr = { start: primaryDate, end: secondaryDate };\n+        break;\n+      case \"after\":\n+        dr = { start: primaryDate ?? undefined };\n+        break;\n+      case \"before\":\n+        dr = { end: primaryDate };\n+        break;\n+      case \"on\":\n+        dr = { start: primaryDate, end: primaryDate };\n+        break;\n+      default:\n+        throw new TypeError(\"Invalid range\");\n+        break;\n+    }\n+    return dr;\n+  };\n+\n+  const searchOptions: SearchOptions = {\n+    ...defaultSearchOptions,\n+    collections: collection\n+      ? await getCollectionDetails(collection)\n+      : undefined,\n+    query: getQueryParam(LegacySearchParams.QUERY),\n+    owner: owner ? await getUserDetails(owner) : undefined,\n+    lastModifiedDateRange: getLastModifiedDateRange(\n+      dateRange ?? \"\",\n+      new Date(parseInt(getQueryParam(LegacySearchParams.PRIMARYDATE) ?? \"\")),\n+      new Date(parseInt(getQueryParam(LegacySearchParams.SECONDARYDATE) ?? \"\"))\n+    ),\n+    sortOrder:\n+      (getQueryParam(LegacySearchParams.SORT)?.toUpperCase() as SortOrder) ||", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwNTUxNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507305517", "bodyText": "I wonder if in the below where you do various coalescing to undefined or \"\" whether you really should be going back to the value from defaultSearchOptions?", "author": "edalex-ian", "createdAt": "2020-10-19T01:04:45Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +216,84 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do url and converts all applicable params to Search options\n+ * @param queryString query string params from a shared searching.do url\n+ * @return SearchOptions object\n+ */\n+export const convertParamsToSearchOptions = async (queryString: string) => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: string) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collection = getQueryParam(LegacySearchParams.IN)?.substring(1);\n+  const owner = getQueryParam(LegacySearchParams.OWNER);\n+  const dateRange = getQueryParam(LegacySearchParams.DATERANGE);\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails[0];\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[]> => {\n+    const collectionList = await collectionListSummary([\"SEARCH_COLLECTION\"]);\n+    return collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+  };\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: string,\n+    primaryDate: Date,\n+    secondaryDate?: Date\n+  ): DateRange => {\n+    let dr: DateRange = {};\n+    switch (rangeType?.toLocaleLowerCase()) {\n+      case undefined:\n+        break;\n+      case \"between\":\n+        dr = { start: primaryDate, end: secondaryDate };\n+        break;\n+      case \"after\":\n+        dr = { start: primaryDate ?? undefined };\n+        break;\n+      case \"before\":\n+        dr = { end: primaryDate };\n+        break;\n+      case \"on\":\n+        dr = { start: primaryDate, end: primaryDate };\n+        break;\n+      default:\n+        throw new TypeError(\"Invalid range\");\n+        break;\n+    }\n+    return dr;\n+  };\n+\n+  const searchOptions: SearchOptions = {", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ3NjMwMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507476300", "bodyText": "Yeah, i think that would be a good idea. Helps with consistency", "author": "mrblippy", "createdAt": "2020-10-19T05:32:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwNTUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMwNzM2Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507307366", "bodyText": "We know it's an array (more or less) from the type signature. How about reworking to something more generic - and also defining which IDs:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param ids An array of oEQ ids\n          \n          \n            \n             * @param ids A list of oEQ user IDs", "author": "edalex-ian", "createdAt": "2020-10-19T01:06:50Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/UserModule.ts", "diffHunk": "@@ -40,3 +40,16 @@ export const getCurrentUserDetails = () =>\n   OEQ.LegacyContent.getCurrentUserDetails(API_BASE_URL).then(\n     (result: OEQ.LegacyContent.CurrentUserDetails) => result\n   );\n+\n+/**\n+ * Lookup users known in oEQ.\n+ * @param ids An array of oEQ ids", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMDE3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507310174", "bodyText": "Two things:\n\nWhy were the superfluous curly braces added?\nIn doing so we've no lost white space between the end of this function (handleQueryChanged) and the next (handleCollectionSelectionChanged).", "author": "edalex-ian", "createdAt": "2020-10-19T01:10:25Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -184,14 +204,14 @@ const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n   const handleSortOrderChanged = (order: SortOrder) =>\n     setSearchPageOptions({ ...searchPageOptions, sortOrder: order });\n \n-  const handleQueryChanged = (query: string) =>\n+  const handleQueryChanged = (query: string) => {\n     setSearchPageOptions({\n       ...searchPageOptions,\n       query: query,\n       currentPage: 0,\n       selectedCategories: undefined,\n     });\n-\n+  };", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU3NDk4Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510574987", "bodyText": "I don't know how that got added. But i will change it back", "author": "mrblippy", "createdAt": "2020-10-23T03:34:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMDE3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMjgxMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507312811", "bodyText": "We probably need to mark this test with a TODO so that @PenghaiZhang can pick is up when he does his work to exclude tests which only work in old or new from certain modes. \ud83e\udd14", "author": "edalex-ian", "createdAt": "2020-10-19T01:14:14Z", "path": "autotest/Tests/src/test/scala/equellatests/tests/SearchQueryProperties.scala", "diffHunk": "@@ -1,84 +1,92 @@\n package equellatests.tests\n \n-import com.tle.webtests.framework.PageContext\n+import java.io.File\n+import java.lang.System.console\n+\n+import com.tle.webtests.framework.{PageContext, TestConfig}\n import com.tle.webtests.pageobject.searching.SearchPage\n import com.tle.webtests.pageobject.wizard.ContributePage\n+import equellatests.GlobalConfig.{baseFolderForInst, testConfig}\n import equellatests.domain._\n import equellatests.instgen.workflow._\n-import equellatests.ShotProperties\n+import equellatests.{GlobalConfig, ShotProperties}\n import org.scalacheck.Arbitrary._\n import org.scalacheck.Prop._\n import org.scalacheck._\n \n object SearchQueryProperties extends ShotProperties(\"Search Query Properties\") {", "originalCommit": "86d3d5b14bc2cb8572b7846a17d77283d74151f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzM5MzU5Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507393592", "bodyText": "Yes indeedy", "author": "mrblippy", "createdAt": "2020-10-19T03:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMjgxMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQwNzA3NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r507407074", "bodyText": "Yes, please also add this in Jira ticket.", "author": "PenghaiZhang", "createdAt": "2020-10-19T03:25:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzMxMjgxMQ=="}], "type": "inlineReview"}, {"oid": "c09c5ee58b8b560a3dd5ef17af1a55b21cc3b83d", "url": "https://github.com/openequella/openEQUELLA/commit/c09c5ee58b8b560a3dd5ef17af1a55b21cc3b83d", "message": "Add RangeType type to SearchModule", "committedDate": "2020-10-19T01:51:58Z", "type": "commit"}, {"oid": "bfb493cdb1d9e2b8a4bf46bdf363b98bc0e9e1df", "url": "https://github.com/openequella/openEQUELLA/commit/bfb493cdb1d9e2b8a4bf46bdf363b98bc0e9e1df", "message": "Only redirect seraching.do url to SearchPage component if newSeach is enabled in config", "committedDate": "2020-10-19T05:29:47Z", "type": "commit"}, {"oid": "0d7bd036ea12a8bce6df4278e21131e74e90b16d", "url": "https://github.com/openequella/openEQUELLA/commit/0d7bd036ea12a8bce6df4278e21131e74e90b16d", "message": "Address pr feedback that I really should have included in separate commits. Includes:\n* Adding new Acl into the api module to store ACL constants\n* Allow query string to be used inside SearchPage test, in order to validate that the useLocation hook is being used properly\n* Adjust DateRangeSelector Luxon import, as my previous change broke DateSelector in the browser\n* Use defaultSearchOptions in SearchModule, for any searchquery parameters have not been defined", "committedDate": "2020-10-23T01:17:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMzE2NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r510903164", "bodyText": "Out of curiosity, why is runtypes used here for type validation, while\n\n  \n    \n      openEQUELLA/oeq-ts-rest-api/package.json\n    \n    \n         Line 37\n      in\n      7d32b92\n    \n    \n    \n    \n\n        \n          \n           \"typescript-is\": \"^0.16.0\" \n        \n    \n  \n\n\nis used in the rest API?", "author": "ChristianMurphy", "createdAt": "2020-10-23T13:58:15Z", "path": "Source/Plugins/Core/com.equella.core/js/package.json", "diffHunk": "@@ -33,26 +33,27 @@\n     \"@material-ui/core\": \"4.11.0\",\n     \"@material-ui/icons\": \"4.9.1\",\n     \"@material-ui/lab\": \"4.0.0-alpha.56\",\n+    \"@material-ui/pickers\": \"3.2.10\",\n+    \"@openequella/rest-api-client\": \"file:../../../../../oeq-ts-rest-api\",\n     \"@tinymce/tinymce-react\": \"3.6.1\",\n     \"axios\": \"0.20.0\",\n     \"create-react-class\": \"15.6.3\",\n     \"es6-object-assign\": \"1.1.0\",\n     \"history\": \"4.10.1\",\n     \"jspolyfill-array.prototype.find\": \"0.1.3\",\n     \"lodash\": \"4.17.20\",\n-    \"@material-ui/pickers\": \"3.2.10\",\n     \"luxon\": \"1.25.0\",\n-    \"@openequella/rest-api-client\": \"file:../../../../../oeq-ts-rest-api\",\n     \"oeq-cloudproviders\": \"git+https://github.com/apereo/openEQUELLA-cloudprovidersdk.git#32d958ddfff64ca748e7e1b2eae0f0487946a487\",\n     \"prop-types\": \"15.7.2\",\n     \"react\": \"16.14.0\",\n     \"react-beautiful-dnd\": \"13.0.0\",\n     \"react-color\": \"2.18.1\",\n-    \"react-html-parser\": \"2.0.2\",\n     \"react-dom\": \"16.14.0\",\n+    \"react-html-parser\": \"2.0.2\",\n     \"react-router\": \"5.2.0\",\n     \"react-router-dom\": \"5.2.0\",\n     \"react-visibility-sensor\": \"3.14.0\",\n+    \"runtypes\": \"^5.0.1\",", "originalCommit": "0d7bd036ea12a8bce6df4278e21131e74e90b16d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjM2NTg3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512365879", "bodyText": "It's being used for its pattern matching in this context. See:\nhttps://github.com/openequella/openEQUELLA/pull/2414/files#diff-09ca53eeab09f58aab1ed2726f5edfcc2528a21e6d10d232615e850dc2104cc7R276", "author": "edalex-ian", "createdAt": "2020-10-27T01:40:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkwMzE2NA=="}], "type": "inlineReview"}, {"oid": "16f81649e29d7a2d567aa622ea3eda2cd209b543", "url": "https://github.com/openequella/openEQUELLA/commit/16f81649e29d7a2d567aa622ea3eda2cd209b543", "message": "Check if renderData is defined before using it, otherwise we get errors loading the settings page in old ui mode", "committedDate": "2020-10-25T22:25:51Z", "type": "commit"}, {"oid": "ca3cb94e8383f5cbc3deba4b6f9cb3befee12167", "url": "https://github.com/openequella/openEQUELLA/commit/ca3cb94e8383f5cbc3deba4b6f9cb3befee12167", "message": "Remove the Enum that i mistakenly left in here", "committedDate": "2020-10-25T23:07:30Z", "type": "commit"}, {"oid": "984766e93c011959fce52d04b29015b46d178841", "url": "https://github.com/openequella/openEQUELLA/commit/984766e93c011959fce52d04b29015b46d178841", "message": "Return defaults when collections and userids don't exists, and add tests to validate it", "committedDate": "2020-10-26T01:06:26Z", "type": "commit"}, {"oid": "feaf8639390929b773268bff49a1b599254a7e9f", "url": "https://github.com/openequella/openEQUELLA/commit/feaf8639390929b773268bff49a1b599254a7e9f", "message": "Actually use the queryString parameter", "committedDate": "2020-10-26T02:30:27Z", "type": "commit"}, {"oid": "9081024bc7c6c6c8d689fbc73285828db101fc83", "url": "https://github.com/openequella/openEQUELLA/commit/9081024bc7c6c6c8d689fbc73285828db101fc83", "message": "Modify enzyme adapter import, so enzyme based tests run correctly with the esModuleInterop tsconfig flag set to true", "committedDate": "2020-10-27T02:50:42Z", "type": "commit"}, {"oid": "ff9a51e6d57149140d104109738de8e6c924e121", "url": "https://github.com/openequella/openEQUELLA/commit/ff9a51e6d57149140d104109738de8e6c924e121", "message": "Merge branch 'develop' into feature/legacy-search-params", "committedDate": "2020-10-27T03:00:06Z", "type": "commit"}, {"oid": "5b61d4d7b71a6fe91d3670210b081df16a90cc9f", "url": "https://github.com/openequella/openEQUELLA/commit/5b61d4d7b71a6fe91d3670210b081df16a90cc9f", "message": "Remove the duplicate imports and rouge any that snuck into my merge conflict resolution", "committedDate": "2020-10-27T03:23:44Z", "type": "commit"}, {"oid": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2", "url": "https://github.com/openequella/openEQUELLA/commit/0d9770896f89bc1aa1f89aaa8cd3e878906233b2", "message": "Reinstate a MimeTypesModule import in SearchPageTest that I mistakenly removed when resolving merge conflicts", "committedDate": "2020-10-27T03:42:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY3NzY1OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512677659", "bodyText": "according to the typing rangeType should already be RangeType?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                )(rangeType.toLowerCase() as RangeType);\n          \n          \n            \n                )(rangeType.toLowerCase());\n          \n      \n    \n    \n  \n\nalso since the value comes from a dropdown,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                )(rangeType.toLowerCase() as RangeType);\n          \n          \n            \n                )(rangeType);\n          \n      \n    \n    \n  \n\nmay work?", "author": "ChristianMurphy", "createdAt": "2020-10-27T13:10:49Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +220,100 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n+ * @param queryString query string params from a shared `searching.do` URL\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const convertParamsToSearchOptions = async (\n+  queryString: string\n+): Promise<SearchOptions | undefined> => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: LegacyParams) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collectionId = getQueryParam(\"in\")?.substring(1);\n+  const ownerId = getQueryParam(\"owner\");\n+  const dateRange = getQueryParam(\"dr\");\n+  const datePrimary = getQueryParam(\"dp\");\n+  const dateSecondary = getQueryParam(\"ds\");\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[] | undefined> => {\n+    const collectionList = await collectionListSummary([\n+      OEQ.Acl.ACL_SEARCH_COLLECTION,\n+    ]);\n+    const filteredCollectionList = collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+    return filteredCollectionList.length > 0\n+      ? filteredCollectionList\n+      : defaultSearchOptions.collections;\n+  };\n+\n+  const RangeType = Union(\n+    Literal(\"between\"),\n+    Literal(\"after\"),\n+    Literal(\"before\"),\n+    Literal(\"on\")\n+  );\n+\n+  type RangeType = Static<typeof RangeType>;\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: RangeType,\n+    primaryDate?: Date,\n+    secondaryDate?: Date\n+  ): DateRange | undefined => {\n+    if (!primaryDate && !secondaryDate) {\n+      return undefined;\n+    }\n+    return match(\n+      [\n+        Literal(\"between\"),\n+        (): DateRange => ({ start: primaryDate, end: secondaryDate }),\n+      ],\n+      [Literal(\"after\"), (): DateRange => ({ start: primaryDate })],\n+      [Literal(\"before\"), (): DateRange => ({ end: primaryDate })],\n+      [\n+        Literal(\"on\"),\n+        (): DateRange => ({\n+          start: primaryDate,\n+          end: primaryDate,\n+        }),\n+      ]\n+    )(rangeType.toLowerCase() as RangeType);", "originalCommit": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNjM2NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512706364", "bodyText": "[Runtypes is] being used for its pattern matching in this context.\n\nIs matching needed? This looks like it could be a case statement", "author": "ChristianMurphy", "createdAt": "2020-10-27T13:48:47Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +220,100 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n+ * @param queryString query string params from a shared `searching.do` URL\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const convertParamsToSearchOptions = async (\n+  queryString: string\n+): Promise<SearchOptions | undefined> => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: LegacyParams) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collectionId = getQueryParam(\"in\")?.substring(1);\n+  const ownerId = getQueryParam(\"owner\");\n+  const dateRange = getQueryParam(\"dr\");\n+  const datePrimary = getQueryParam(\"dp\");\n+  const dateSecondary = getQueryParam(\"ds\");\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[] | undefined> => {\n+    const collectionList = await collectionListSummary([\n+      OEQ.Acl.ACL_SEARCH_COLLECTION,\n+    ]);\n+    const filteredCollectionList = collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+    return filteredCollectionList.length > 0\n+      ? filteredCollectionList\n+      : defaultSearchOptions.collections;\n+  };\n+\n+  const RangeType = Union(\n+    Literal(\"between\"),\n+    Literal(\"after\"),\n+    Literal(\"before\"),\n+    Literal(\"on\")\n+  );\n+\n+  type RangeType = Static<typeof RangeType>;\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: RangeType,\n+    primaryDate?: Date,\n+    secondaryDate?: Date\n+  ): DateRange | undefined => {\n+    if (!primaryDate && !secondaryDate) {\n+      return undefined;\n+    }\n+    return match(\n+      [\n+        Literal(\"between\"),\n+        (): DateRange => ({ start: primaryDate, end: secondaryDate }),\n+      ],\n+      [Literal(\"after\"), (): DateRange => ({ start: primaryDate })],\n+      [Literal(\"before\"), (): DateRange => ({ end: primaryDate })],\n+      [\n+        Literal(\"on\"),\n+        (): DateRange => ({\n+          start: primaryDate,\n+          end: primaryDate,\n+        }),\n+      ]\n+    )(rangeType.toLowerCase() as RangeType);", "originalCommit": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzMTYzMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r513031630", "bodyText": "Correct, it replaces a switch statement. In replacing the switch statement with pattern matching we can write the code more declaratively rather than imperatively enabling us to avoid the pitfalls of switch statements.", "author": "edalex-ian", "createdAt": "2020-10-27T21:06:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNjM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMTk0Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512711946", "bodyText": "Since runtypes and typescript-is are available would it make sense to validate rather than cast?", "author": "ChristianMurphy", "createdAt": "2020-10-27T13:55:34Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +220,100 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n+ * @param queryString query string params from a shared `searching.do` URL\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const convertParamsToSearchOptions = async (\n+  queryString: string\n+): Promise<SearchOptions | undefined> => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: LegacyParams) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collectionId = getQueryParam(\"in\")?.substring(1);\n+  const ownerId = getQueryParam(\"owner\");\n+  const dateRange = getQueryParam(\"dr\");\n+  const datePrimary = getQueryParam(\"dp\");\n+  const dateSecondary = getQueryParam(\"ds\");\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[] | undefined> => {\n+    const collectionList = await collectionListSummary([\n+      OEQ.Acl.ACL_SEARCH_COLLECTION,\n+    ]);\n+    const filteredCollectionList = collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+    return filteredCollectionList.length > 0\n+      ? filteredCollectionList\n+      : defaultSearchOptions.collections;\n+  };\n+\n+  const RangeType = Union(\n+    Literal(\"between\"),\n+    Literal(\"after\"),\n+    Literal(\"before\"),\n+    Literal(\"on\")\n+  );\n+\n+  type RangeType = Static<typeof RangeType>;\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: RangeType,\n+    primaryDate?: Date,\n+    secondaryDate?: Date\n+  ): DateRange | undefined => {\n+    if (!primaryDate && !secondaryDate) {\n+      return undefined;\n+    }\n+    return match(\n+      [\n+        Literal(\"between\"),\n+        (): DateRange => ({ start: primaryDate, end: secondaryDate }),\n+      ],\n+      [Literal(\"after\"), (): DateRange => ({ start: primaryDate })],\n+      [Literal(\"before\"), (): DateRange => ({ end: primaryDate })],\n+      [\n+        Literal(\"on\"),\n+        (): DateRange => ({\n+          start: primaryDate,\n+          end: primaryDate,\n+        }),\n+      ]\n+    )(rangeType.toLowerCase() as RangeType);\n+  };\n+\n+  const searchOptions: SearchOptions = {\n+    ...defaultSearchOptions,\n+    collections: collectionId\n+      ? await getCollectionDetails(collectionId)\n+      : defaultSearchOptions.collections,\n+    query: getQueryParam(\"q\") ?? defaultSearchOptions.query,\n+    owner: ownerId ? await getUserDetails(ownerId) : defaultSearchOptions.owner,\n+    lastModifiedDateRange:\n+      getLastModifiedDateRange(\n+        dateRange as RangeType,", "originalCommit": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMjA4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2414#discussion_r512712089", "bodyText": "Since runtypes and typescript-is are available would it make sense to validate rather than cast?", "author": "ChristianMurphy", "createdAt": "2020-10-27T13:55:44Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -202,3 +220,100 @@ export const searchItems = ({\n   };\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n+\n+/**\n+ * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n+ * @param queryString query string params from a shared `searching.do` URL\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const convertParamsToSearchOptions = async (\n+  queryString: string\n+): Promise<SearchOptions | undefined> => {\n+  if (!queryString) return undefined;\n+\n+  const params = new URLSearchParams(queryString);\n+\n+  const getQueryParam = (paramName: LegacyParams) => {\n+    return params.get(paramName) ?? undefined;\n+  };\n+\n+  const collectionId = getQueryParam(\"in\")?.substring(1);\n+  const ownerId = getQueryParam(\"owner\");\n+  const dateRange = getQueryParam(\"dr\");\n+  const datePrimary = getQueryParam(\"dp\");\n+  const dateSecondary = getQueryParam(\"ds\");\n+\n+  const getUserDetails = async (\n+    userId: string\n+  ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+    const userDetails = await resolveUsers([userId]);\n+    return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+  };\n+\n+  const getCollectionDetails = async (\n+    collectionUuid: string\n+  ): Promise<Collection[] | undefined> => {\n+    const collectionList = await collectionListSummary([\n+      OEQ.Acl.ACL_SEARCH_COLLECTION,\n+    ]);\n+    const filteredCollectionList = collectionList.filter((c) => {\n+      return c.uuid === collectionUuid;\n+    });\n+    return filteredCollectionList.length > 0\n+      ? filteredCollectionList\n+      : defaultSearchOptions.collections;\n+  };\n+\n+  const RangeType = Union(\n+    Literal(\"between\"),\n+    Literal(\"after\"),\n+    Literal(\"before\"),\n+    Literal(\"on\")\n+  );\n+\n+  type RangeType = Static<typeof RangeType>;\n+\n+  const getLastModifiedDateRange = (\n+    rangeType: RangeType,\n+    primaryDate?: Date,\n+    secondaryDate?: Date\n+  ): DateRange | undefined => {\n+    if (!primaryDate && !secondaryDate) {\n+      return undefined;\n+    }\n+    return match(\n+      [\n+        Literal(\"between\"),\n+        (): DateRange => ({ start: primaryDate, end: secondaryDate }),\n+      ],\n+      [Literal(\"after\"), (): DateRange => ({ start: primaryDate })],\n+      [Literal(\"before\"), (): DateRange => ({ end: primaryDate })],\n+      [\n+        Literal(\"on\"),\n+        (): DateRange => ({\n+          start: primaryDate,\n+          end: primaryDate,\n+        }),\n+      ]\n+    )(rangeType.toLowerCase() as RangeType);\n+  };\n+\n+  const searchOptions: SearchOptions = {\n+    ...defaultSearchOptions,\n+    collections: collectionId\n+      ? await getCollectionDetails(collectionId)\n+      : defaultSearchOptions.collections,\n+    query: getQueryParam(\"q\") ?? defaultSearchOptions.query,\n+    owner: ownerId ? await getUserDetails(ownerId) : defaultSearchOptions.owner,\n+    lastModifiedDateRange:\n+      getLastModifiedDateRange(\n+        dateRange as RangeType,\n+        datePrimary ? new Date(parseInt(datePrimary)) : undefined,\n+        dateSecondary ? new Date(parseInt(dateSecondary)) : undefined\n+      ) ?? defaultSearchOptions.lastModifiedDateRange,\n+    sortOrder:\n+      (getQueryParam(\"sort\")?.toUpperCase() as SortOrder) ??", "originalCommit": "0d9770896f89bc1aa1f89aaa8cd3e878906233b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}