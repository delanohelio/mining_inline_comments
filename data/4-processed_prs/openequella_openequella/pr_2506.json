{"pr_number": 2506, "pr_title": "Feature/new search query params", "pr_createdAt": "2020-11-12T10:20:02Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2506", "timeline": [{"oid": "2a39e7722e79e4e4e911d7f9b76c5ef65f240f38", "url": "https://github.com/openequella/openEQUELLA/commit/2a39e7722e79e4e4e911d7f9b76c5ef65f240f38", "message": "added functionality to serialize SearchOptions to a json formatted query string, and deserialise them back again", "committedDate": "2020-11-12T09:54:20Z", "type": "commit"}, {"oid": "1c3637b58065e04f5f8f30646477f8b572bdf421", "url": "https://github.com/openequella/openEQUELLA/commit/1c3637b58065e04f5f8f30646477f8b572bdf421", "message": "Add tests for searchOptions json serialization/deserialization.\nModified existing legacySearchParams tests to better support both legacy and new search urls", "committedDate": "2020-11-12T09:54:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MTU3OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523281578", "bodyText": "What's all this about?", "author": "edalex-ian", "createdAt": "2020-11-13T23:20:20Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -123,7 +125,7 @@ const SearchPage = ({ updateTemplate }: TemplateUpdateProps) => {\n   const [searchSettings, setSearchSettings] = useState<SearchSettings>();\n   const [classifications, setClassifications] = useState<Classification[]>([]);\n \n-  const location = useLocation();\n+  const location = useLocation<LocationState>();", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc1NTgxNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r524755814", "bodyText": "I mistakenly left this in while still in development. I will remove it, as it has no reason to be here anymore", "author": "mrblippy", "createdAt": "2020-11-16T23:36:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MTU3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4MzQ1Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523283456", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  //defaultSearchOptions contains an an undefined sortOrder property\n          \n          \n            \n                  //defaultSearchOptions contains an undefined sortOrder property", "author": "edalex-ian", "createdAt": "2020-11-13T23:27:47Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -223,10 +258,25 @@ describe(\"SearchModule\", () => {\n       mockedResolvedUser.mockResolvedValue([]);\n       mockedCollectionListSummary.mockResolvedValue(getCollectionMap);\n       const collectionQueryString = \"?in=Cunknowncollection&owner=unknown\";\n-      const convertedSearchOptions = await convertParamsToSearchOptions(\n-        collectionQueryString\n+      const convertedSearchOptions = await legacyQueryStringToSearchOptions(\n+        new URLSearchParams(collectionQueryString)\n       );\n       expect(convertedSearchOptions).toEqual(defaultSearchOptions);\n     });\n   });\n+\n+  describe(\"generateQueryStringFromSearchOptions\", () => {\n+    it(\"converts all searchOptions to a url encoded json string\", () => {\n+      expect(generateQueryStringFromSearchOptions(allSearchOptions)).toEqual(\n+        \"searchOptions=%7B%22rowsPerPage%22%3A10%2C%22currentPage%22%3A0%2C%22sortOrder%22%3A%22NAME%22%2C%22rawMode%22%3Atrue%2C%22status%22%3A%5B%22LIVE%22%2C%22REVIEW%22%5D%2C%22searchAttachments%22%3Atrue%2C%22query%22%3A%22test+machine%22%2C%22collections%22%3A%5B%7B%22uuid%22%3A%228e3caf16-f3cb-b3dd-d403-e5eb8d545fff%22%7D%2C%7B%22uuid%22%3A%228e3caf16-f3cb-b3dd-d403-e5eb8d545ffe%22%7D%2C%7B%22uuid%22%3A%228e3caf16-f3cb-b3dd-d403-e5eb8d545ffg%22%7D%2C%7B%22uuid%22%3A%228e3caf16-f3cb-b3dd-d403-e5eb8d545ffa%22%7D%2C%7B%22uuid%22%3A%228e3caf16-f3cb-b3dd-d403-e5eb8d545ffb%22%7D%5D%2C%22selectedCategories%22%3A%5B%7B%22id%22%3A766943%2C%22categories%22%3A%5B%22Hobart%22%5D%7D%2C%7B%22id%22%3A766944%2C%22categories%22%3A%5B%22Some+cool+things%22%5D%7D%5D%2C%22lastModifiedDateRange%22%3A%7B%22start%22%3A%222020-05-26T03%3A24%3A00.889Z%22%2C%22end%22%3A%222020-05-27T03%3A24%3A00.889Z%22%7D%2C%22owner%22%3A%7B%22id%22%3A%22680f5eb7-22e2-4ab6-bcea-25205165e36e%22%7D%7D\"\n+      );\n+    });\n+\n+    it(\"excludes any undefined properties\", () => {\n+      //defaultSearchOptions contains an an undefined sortOrder property", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4NDAwMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523284000", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A function that takes a parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object\n          \n          \n            \n             * A function that takes and parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object", "author": "edalex-ian", "createdAt": "2020-11-13T23:29:48Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -184,6 +186,92 @@ export const generateCategoryWhereQuery = (\n     .join(and);\n };\n \n+/**\n+ * A function that takes a parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4NDcyNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523284725", "bodyText": "Hmmm, needs to be reworked. I'm not entirely sure what you're saying so I can't provide a concrete suggestion.\nIs it something like:\n* @param location representing a Location which includes search query params - such as from the <SearchPage>", "author": "edalex-ian", "createdAt": "2020-11-13T23:32:36Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -184,6 +186,92 @@ export const generateCategoryWhereQuery = (\n     .join(and);\n };\n \n+/**\n+ * A function that takes a parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object\n+ * @param location object, typically obtained from the SearchPage component.", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4NTA2OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523285068", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @return SearchOptions object, or undefined if there were no query string parameters.\n          \n          \n            \n             * @return SearchOptions containing the options encoded in the query string params, or undefined if there were none.", "author": "edalex-ian", "createdAt": "2020-11-13T23:34:06Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -184,6 +186,92 @@ export const generateCategoryWhereQuery = (\n     .join(and);\n };\n \n+/**\n+ * A function that takes a parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object\n+ * @param location object, typically obtained from the SearchPage component.\n+ * @return SearchOptions object, or undefined if there were no query string parameters.", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4ODA2MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523288060", "bodyText": "So a couple of things here:\n\nI note you've provided two of the three possible types in your value: (object | Collection)[] declaration - why not also the type for \"owner\" (is that perhaps Owner - I assume so in the next point, but could be wrong)?\nBut thinking on that, rather than matching against string Literal on the key how about using the matchers ability to match on Type and instead use Collection, Owner, Unknown?", "author": "edalex-ian", "createdAt": "2020-11-13T23:46:27Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -184,6 +186,92 @@ export const generateCategoryWhereQuery = (\n     .join(and);\n };\n \n+/**\n+ * A function that takes a parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object\n+ * @param location object, typically obtained from the SearchPage component.\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const queryStringParamsToSearchOptions = async (\n+  location: Location\n+): Promise<SearchOptions | undefined> => {\n+  if (!location.search) return undefined;\n+  const params = new URLSearchParams(location.search);\n+\n+  if (location.pathname.endsWith(\"searching.do\")) {\n+    return await legacyQueryStringToSearchOptions(params);\n+  }\n+  return await newSearchQueryToSearchOptions(params.get(\"searchOptions\") ?? \"\");\n+};\n+\n+/**\n+ * A function that takes search options and converts it to to a json representation.\n+ * Collections and owner properties are both reduced down to their uuid and id properties respectively.\n+ * Undefined properties are excluded.\n+ * Intended to be used in conjunction with SearchModule.newSearchQueryToSearchOptions\n+ * @param searchOptions Search options selected on Search page.\n+ * @return url encoded key/value pair of JSON searchOptions\n+ */\n+export const generateQueryStringFromSearchOptions = (\n+  searchOptions: SearchOptions\n+): string => {\n+  const params = new URLSearchParams();\n+  params.set(\n+    \"searchOptions\",\n+    JSON.stringify(\n+      searchOptions,\n+      (key: string, value: (object | Collection)[]) => {\n+        return match(\n+          [\n+            Literal(\"collections\"),\n+            () => value.map((collection) => pick(collection, [\"uuid\"])),\n+          ],\n+          [Literal(\"owner\"), () => pick(value, [\"id\"])],\n+          [Unknown, () => value ?? undefined]\n+        )(key);\n+      }", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4MTYxMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r524881612", "bodyText": "As discussed in-person, runtypes won't match on regular Typescript types. I would need to define them again as Runtypes, which is probably overkill", "author": "mrblippy", "createdAt": "2020-11-17T04:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4ODA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4ODIwOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523288209", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param searchOptionsJSON a JSON representation of a SearchOptions object.\n          \n          \n            \n             * @param searchOptionsJson a JSON representation of a SearchOptions object.", "author": "edalex-ian", "createdAt": "2020-11-13T23:47:08Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -184,6 +186,92 @@ export const generateCategoryWhereQuery = (\n     .join(and);\n };\n \n+/**\n+ * A function that takes a parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object\n+ * @param location object, typically obtained from the SearchPage component.\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const queryStringParamsToSearchOptions = async (\n+  location: Location\n+): Promise<SearchOptions | undefined> => {\n+  if (!location.search) return undefined;\n+  const params = new URLSearchParams(location.search);\n+\n+  if (location.pathname.endsWith(\"searching.do\")) {\n+    return await legacyQueryStringToSearchOptions(params);\n+  }\n+  return await newSearchQueryToSearchOptions(params.get(\"searchOptions\") ?? \"\");\n+};\n+\n+/**\n+ * A function that takes search options and converts it to to a json representation.\n+ * Collections and owner properties are both reduced down to their uuid and id properties respectively.\n+ * Undefined properties are excluded.\n+ * Intended to be used in conjunction with SearchModule.newSearchQueryToSearchOptions\n+ * @param searchOptions Search options selected on Search page.\n+ * @return url encoded key/value pair of JSON searchOptions\n+ */\n+export const generateQueryStringFromSearchOptions = (\n+  searchOptions: SearchOptions\n+): string => {\n+  const params = new URLSearchParams();\n+  params.set(\n+    \"searchOptions\",\n+    JSON.stringify(\n+      searchOptions,\n+      (key: string, value: (object | Collection)[]) => {\n+        return match(\n+          [\n+            Literal(\"collections\"),\n+            () => value.map((collection) => pick(collection, [\"uuid\"])),\n+          ],\n+          [Literal(\"owner\"), () => pick(value, [\"id\"])],\n+          [Unknown, () => value ?? undefined]\n+        )(key);\n+      }\n+    )\n+  );\n+  return params.toString();\n+};\n+\n+/**\n+ * A function that takes a JSON representation of a SearchOptions object, and converts it into an actual SearchOptions object.\n+ * @param searchOptionsJSON a JSON representation of a SearchOptions object.", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI4ODQ0MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523288441", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @return searchOptions Search options selected on Search page.\n          \n          \n            \n             * @return searchOptions A deserialized representation of that provided by `searchOptionsJson`", "author": "edalex-ian", "createdAt": "2020-11-13T23:48:11Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -184,6 +186,92 @@ export const generateCategoryWhereQuery = (\n     .join(and);\n };\n \n+/**\n+ * A function that takes a parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object\n+ * @param location object, typically obtained from the SearchPage component.\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const queryStringParamsToSearchOptions = async (\n+  location: Location\n+): Promise<SearchOptions | undefined> => {\n+  if (!location.search) return undefined;\n+  const params = new URLSearchParams(location.search);\n+\n+  if (location.pathname.endsWith(\"searching.do\")) {\n+    return await legacyQueryStringToSearchOptions(params);\n+  }\n+  return await newSearchQueryToSearchOptions(params.get(\"searchOptions\") ?? \"\");\n+};\n+\n+/**\n+ * A function that takes search options and converts it to to a json representation.\n+ * Collections and owner properties are both reduced down to their uuid and id properties respectively.\n+ * Undefined properties are excluded.\n+ * Intended to be used in conjunction with SearchModule.newSearchQueryToSearchOptions\n+ * @param searchOptions Search options selected on Search page.\n+ * @return url encoded key/value pair of JSON searchOptions\n+ */\n+export const generateQueryStringFromSearchOptions = (\n+  searchOptions: SearchOptions\n+): string => {\n+  const params = new URLSearchParams();\n+  params.set(\n+    \"searchOptions\",\n+    JSON.stringify(\n+      searchOptions,\n+      (key: string, value: (object | Collection)[]) => {\n+        return match(\n+          [\n+            Literal(\"collections\"),\n+            () => value.map((collection) => pick(collection, [\"uuid\"])),\n+          ],\n+          [Literal(\"owner\"), () => pick(value, [\"id\"])],\n+          [Unknown, () => value ?? undefined]\n+        )(key);\n+      }\n+    )\n+  );\n+  return params.toString();\n+};\n+\n+/**\n+ * A function that takes a JSON representation of a SearchOptions object, and converts it into an actual SearchOptions object.\n+ * @param searchOptionsJSON a JSON representation of a SearchOptions object.\n+ * @return searchOptions Search options selected on Search page.", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NjUxNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523296514", "bodyText": "As discussed with @mrblippy\n\nThe type here is not SearchOptions, really it should be unknown and we validate after further work below;\nFor the code further down to rehydrate collections and owner (which had to be split out due to needing async calls), they should be pushed into their own functions for readability.\nAt the end of all this, we really need some validation to confirm we are actually returning SearchOptions.\n\nGrab me at some point, and we'll work together to refactor this function.", "author": "edalex-ian", "createdAt": "2020-11-14T00:15:07Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -184,6 +186,92 @@ export const generateCategoryWhereQuery = (\n     .join(and);\n };\n \n+/**\n+ * A function that takes a parses a saved search query string from a shared legacy searching.do or /page/search URL, and converts it into a SearchOptions object\n+ * @param location object, typically obtained from the SearchPage component.\n+ * @return SearchOptions object, or undefined if there were no query string parameters.\n+ */\n+export const queryStringParamsToSearchOptions = async (\n+  location: Location\n+): Promise<SearchOptions | undefined> => {\n+  if (!location.search) return undefined;\n+  const params = new URLSearchParams(location.search);\n+\n+  if (location.pathname.endsWith(\"searching.do\")) {\n+    return await legacyQueryStringToSearchOptions(params);\n+  }\n+  return await newSearchQueryToSearchOptions(params.get(\"searchOptions\") ?? \"\");\n+};\n+\n+/**\n+ * A function that takes search options and converts it to to a json representation.\n+ * Collections and owner properties are both reduced down to their uuid and id properties respectively.\n+ * Undefined properties are excluded.\n+ * Intended to be used in conjunction with SearchModule.newSearchQueryToSearchOptions\n+ * @param searchOptions Search options selected on Search page.\n+ * @return url encoded key/value pair of JSON searchOptions\n+ */\n+export const generateQueryStringFromSearchOptions = (\n+  searchOptions: SearchOptions\n+): string => {\n+  const params = new URLSearchParams();\n+  params.set(\n+    \"searchOptions\",\n+    JSON.stringify(\n+      searchOptions,\n+      (key: string, value: (object | Collection)[]) => {\n+        return match(\n+          [\n+            Literal(\"collections\"),\n+            () => value.map((collection) => pick(collection, [\"uuid\"])),\n+          ],\n+          [Literal(\"owner\"), () => pick(value, [\"id\"])],\n+          [Unknown, () => value ?? undefined]\n+        )(key);\n+      }\n+    )\n+  );\n+  return params.toString();\n+};\n+\n+/**\n+ * A function that takes a JSON representation of a SearchOptions object, and converts it into an actual SearchOptions object.\n+ * @param searchOptionsJSON a JSON representation of a SearchOptions object.\n+ * @return searchOptions Search options selected on Search page.\n+ */\n+export const newSearchQueryToSearchOptions = async (\n+  searchOptionsJson: string\n+): Promise<SearchOptions> => {\n+  const parsedOptions: SearchOptions = JSON.parse(", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NDE1OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r524884158", "bodyText": "Thank you very much for assisting me in refactoring this @edalex-ian, it was very much appreciated.\nHowever, i wasn't able to fully guard against a extraneous properties being added during the JSON.parse, due to this issue currently in the Runtypes library", "author": "mrblippy", "createdAt": "2020-11-17T04:55:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NjUxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NzE2Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523297163", "bodyText": "return is superfluous.", "author": "edalex-ian", "createdAt": "2020-11-14T00:18:21Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -221,18 +309,35 @@ export const searchItems = ({\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n \n+const getCollectionDetails = async (\n+  collectionUuids: string[]\n+): Promise<Collection[] | undefined> => {\n+  const collectionList = await collectionListSummary([\n+    OEQ.Acl.ACL_SEARCH_COLLECTION,\n+  ]);\n+  const filteredCollectionList = collectionList.filter((c) => {\n+    return collectionUuids.includes(c.uuid);", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NDU1Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r524884553", "bodyText": "I'm (very slowly) getting better at not doing this, but I still slip up sometimes. Thanks for picking up on it", "author": "mrblippy", "createdAt": "2020-11-17T04:57:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NzE2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NzQ0MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523297441", "bodyText": "I wonder if prior to this we want to log a warning or something if filteredCollectionList.length !== collectionUuids.length.", "author": "edalex-ian", "createdAt": "2020-11-14T00:19:34Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -221,18 +309,35 @@ export const searchItems = ({\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n \n+const getCollectionDetails = async (\n+  collectionUuids: string[]\n+): Promise<Collection[] | undefined> => {\n+  const collectionList = await collectionListSummary([\n+    OEQ.Acl.ACL_SEARCH_COLLECTION,\n+  ]);\n+  const filteredCollectionList = collectionList.filter((c) => {\n+    return collectionUuids.includes(c.uuid);\n+  });\n+  return filteredCollectionList.length > 0", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5Nzc0Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523297747", "bodyText": "This function reads more generic, and so shouldn't be tied to a specific implementation detail. Therefore I think it should return undefined or []. I think possibly [] because if a list has been the input, it'd seem the output should also be a list - even if empty due to issues.", "author": "edalex-ian", "createdAt": "2020-11-14T00:21:01Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -221,18 +309,35 @@ export const searchItems = ({\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n \n+const getCollectionDetails = async (\n+  collectionUuids: string[]\n+): Promise<Collection[] | undefined> => {\n+  const collectionList = await collectionListSummary([\n+    OEQ.Acl.ACL_SEARCH_COLLECTION,\n+  ]);\n+  const filteredCollectionList = collectionList.filter((c) => {\n+    return collectionUuids.includes(c.uuid);\n+  });\n+  return filteredCollectionList.length > 0\n+    ? filteredCollectionList\n+    : defaultSearchOptions.collections;", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODA5OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523298099", "bodyText": "hmmm, if we can end up with more than 1 user, we should probably at least log a warning, but maybe we need to throw an error. Just assuming to use the first one is possibly a bit risky. \ud83e\udd14", "author": "edalex-ian", "createdAt": "2020-11-14T00:22:44Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -221,18 +309,35 @@ export const searchItems = ({\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n \n+const getCollectionDetails = async (\n+  collectionUuids: string[]\n+): Promise<Collection[] | undefined> => {\n+  const collectionList = await collectionListSummary([\n+    OEQ.Acl.ACL_SEARCH_COLLECTION,\n+  ]);\n+  const filteredCollectionList = collectionList.filter((c) => {\n+    return collectionUuids.includes(c.uuid);\n+  });\n+  return filteredCollectionList.length > 0\n+    ? filteredCollectionList\n+    : defaultSearchOptions.collections;\n+};\n+\n+const getUserDetails = async (\n+  userId: string\n+): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+  const userDetails = await resolveUsers([userId]);\n+  return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODI4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523298283", "bodyText": "Looks like this comment is completely outta wack. \ud83d\ude15", "author": "edalex-ian", "createdAt": "2020-11-14T00:23:47Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -221,18 +309,35 @@ export const searchItems = ({\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n \n+const getCollectionDetails = async (\n+  collectionUuids: string[]\n+): Promise<Collection[] | undefined> => {\n+  const collectionList = await collectionListSummary([\n+    OEQ.Acl.ACL_SEARCH_COLLECTION,\n+  ]);\n+  const filteredCollectionList = collectionList.filter((c) => {\n+    return collectionUuids.includes(c.uuid);\n+  });\n+  return filteredCollectionList.length > 0\n+    ? filteredCollectionList\n+    : defaultSearchOptions.collections;\n+};\n+\n+const getUserDetails = async (\n+  userId: string\n+): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+  const userDetails = await resolveUsers([userId]);\n+  return userDetails.length > 0 ? userDetails[0] : defaultSearchOptions.owner;\n+};\n+\n /**\n  * A function that takes query string params from a shared searching.do URL and converts all applicable params to Search options\n- * @param queryString query string params from a shared `searching.do` URL\n- * @return SearchOptions object, or undefined if there were no query string parameters.\n+ * @param location query string params from a shared `searching.do` URL", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg4NjE5NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r524886194", "bodyText": "it sure was, my late night typing was subpar at best in this case", "author": "mrblippy", "createdAt": "2020-11-17T05:03:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODI4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyNTgwMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r523825803", "bodyText": "Just a thought on this test...\nWhat is currently here is essentially a regression test. That is, it will work to ensure that if the format of the params change in the future, we'll need to deliberately address it.\nHowever what we missing is a test which explicitly takes the output from the serialisation of params and feeds to back into the deserializer. That is, validating what we produce we can definitely consume at any point in time.\nSo you may need to add one more test.", "author": "edalex-ian", "createdAt": "2020-11-15T22:47:59Z", "path": "Source/Plugins/Core/com.equella.core/js/__tests__/tsrc/modules/SearchModule.test.ts", "diffHunk": "@@ -116,26 +120,57 @@ describe(\"SearchModule\", () => {\n     expect(SearchModule.generateCategoryWhereQuery([])).toBeUndefined();\n   });\n \n-  describe(\"convertParamsToSearchOptions\", () => {\n+  describe(\"newSearchQueryToSearchOptions\", () => {\n     const mockedResolvedUser = jest.spyOn(UserModule, \"resolveUsers\");\n     const mockedCollectionListSummary = jest.spyOn(\n-      CollectionModule,\n+      CollectionsModule,\n       \"collectionListSummary\"\n     );\n \n     afterEach(() => {\n       jest.clearAllMocks();\n     });\n \n+    it(\"should convert query string to searchOptions\", async () => {\n+      mockedResolvedUser.mockResolvedValue(users);\n+      mockedCollectionListSummary.mockResolvedValueOnce(getCollectionMap);\n+      const longSearch =\n+        '{\"rowsPerPage\":10,\"currentPage\":0,\"sortOrder\":\"NAME\",\"query\":\"test machine\",\"rawMode\":true,\"status\":[\"LIVE\",\"REVIEW\"],\"searchAttachments\":true,\"selectedCategories\":[{\"id\":766943,\"categories\":[\"Hobart\"]},{\"id\":766944,\"categories\":[\"Some cool things\"]}],\"collections\":[{\"uuid\":\"8e3caf16-f3cb-b3dd-d403-e5eb8d545fff\"},{\"uuid\":\"8e3caf16-f3cb-b3dd-d403-e5eb8d545ffe\"},{\"uuid\":\"8e3caf16-f3cb-b3dd-d403-e5eb8d545ffg\"},{\"uuid\":\"8e3caf16-f3cb-b3dd-d403-e5eb8d545ffa\"},{\"uuid\":\"8e3caf16-f3cb-b3dd-d403-e5eb8d545ffb\"}],\"lastModifiedDateRange\":{\"start\":\"2020-05-26T03:24:00.889Z\",\"end\":\"2020-05-27T03:24:00.889Z\"},\"owner\":{\"id\":\"680f5eb7-22e2-4ab6-bcea-25205165e36e\"}}';", "originalCommit": "1c3637b58065e04f5f8f30646477f8b572bdf421", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDg3OTc0Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r524879743", "bodyText": "Good point, I hadn't thought of that case. It has been added", "author": "mrblippy", "createdAt": "2020-11-17T04:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzgyNTgwMw=="}], "type": "inlineReview"}, {"oid": "7bd07247c005d63d8b6a449d0713cdbdf1f9c519", "url": "https://github.com/openequella/openEQUELLA/commit/7bd07247c005d63d8b6a449d0713cdbdf1f9c519", "message": "Refactor newSearchQueryToSearchOptions function to make use of runtypes for validation. This also required a refactor of existing searchPage related functionality", "committedDate": "2020-11-17T04:10:42Z", "type": "commit"}, {"oid": "ab613578354f6e1606dfb196f0680b44591df04e", "url": "https://github.com/openequella/openEQUELLA/commit/ab613578354f6e1606dfb196f0680b44591df04e", "message": "Update SearchModule and SearchPage tests to account for inclusion of runtypes", "committedDate": "2020-11-17T04:23:49Z", "type": "commit"}, {"oid": "c0888bae2be5536715572649fb8d8851e5018f26", "url": "https://github.com/openequella/openEQUELLA/commit/c0888bae2be5536715572649fb8d8851e5018f26", "message": "fix comment typo", "committedDate": "2020-11-17T04:40:27Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4NjY5Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r525586693", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const getCollections = async (collectionId: string | undefined) => {\n          \n          \n            \n              const parseCollectionId = async (collectionId: string | undefined): Promise<Collection[]> => {", "author": "edalex-ian", "createdAt": "2020-11-17T23:11:04Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -298,11 +439,22 @@ export const convertParamsToSearchOptions = async (\n     )(rangeType.toLowerCase() as RangeType);\n   };\n \n+  const getCollections = async (collectionId: string | undefined) => {", "originalCommit": "ab613578354f6e1606dfb196f0680b44591df04e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY4MjA2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r525682067", "bodyText": "Yeah, that function naming makes more sense. But I had to change the return type to be Promise<Collection[] | undefined>. Because it turns out that defaultSearchOptions.collections returns undefined", "author": "mrblippy", "createdAt": "2020-11-18T02:48:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4NjY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4NzUyNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r525587525", "bodyText": "As discussed, let's tweak this name a bit. At first I was going to suggest getCollectionsByUuid however this is just a find, as anything that doesn't match is silently skipped. So:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            const getCollectionDetails = async (\n          \n          \n            \n            const findCollectionsByUuid = async (", "author": "edalex-ian", "createdAt": "2020-11-17T23:13:01Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -221,18 +366,35 @@ export const searchItems = ({\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n \n+const getCollectionDetails = async (", "originalCommit": "ab613578354f6e1606dfb196f0680b44591df04e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4OTI0Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r525589243", "bodyText": "Similar to above, this is probably more so a find rather than a get. But I do also wonder if undefined is actually ever returned. \ud83e\udd14\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            const getUserDetails = async (\n          \n          \n            \n              userId: string\n          \n          \n            \n            ): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n          \n          \n            \n            const findUser = async (\n          \n          \n            \n              userId: string\n          \n          \n            \n            ): Promise<OEQ.UserQuery.UserDetails | undefined> => {", "author": "edalex-ian", "createdAt": "2020-11-17T23:17:25Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -221,18 +366,35 @@ export const searchItems = ({\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n \n+const getCollectionDetails = async (\n+  collectionUuids: string[]\n+): Promise<Collection[] | undefined> => {\n+  const collectionList = await collectionListSummary([\n+    OEQ.Acl.ACL_SEARCH_COLLECTION,\n+  ]);\n+  const filteredCollectionList = collectionList.filter((c) =>\n+    collectionUuids.includes(c.uuid)\n+  );\n+  return filteredCollectionList.length > 0 ? filteredCollectionList : undefined;\n+};\n+\n+const getUserDetails = async (\n+  userId: string\n+): Promise<OEQ.UserQuery.UserDetails | undefined> => {", "originalCommit": "ab613578354f6e1606dfb196f0680b44591df04e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4OTQ5MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r525589490", "bodyText": "What if userDetails is empty?", "author": "edalex-ian", "createdAt": "2020-11-17T23:18:10Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/modules/SearchModule.ts", "diffHunk": "@@ -221,18 +366,35 @@ export const searchItems = ({\n   return OEQ.Search.search(API_BASE_URL, searchParams);\n };\n \n+const getCollectionDetails = async (\n+  collectionUuids: string[]\n+): Promise<Collection[] | undefined> => {\n+  const collectionList = await collectionListSummary([\n+    OEQ.Acl.ACL_SEARCH_COLLECTION,\n+  ]);\n+  const filteredCollectionList = collectionList.filter((c) =>\n+    collectionUuids.includes(c.uuid)\n+  );\n+  return filteredCollectionList.length > 0 ? filteredCollectionList : undefined;\n+};\n+\n+const getUserDetails = async (\n+  userId: string\n+): Promise<OEQ.UserQuery.UserDetails | undefined> => {\n+  const userDetails = await resolveUsers([userId]);\n+  if (userDetails.length > 1)\n+    throw new Error(`More than one user was resolved for id: ${userId}`);\n+  return userDetails[0];", "originalCommit": "ab613578354f6e1606dfb196f0680b44591df04e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY3MzY1Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r525673656", "bodyText": "Calling userDetails[0] when it's empty will return undefined. So it won't cause any errors.", "author": "mrblippy", "createdAt": "2020-11-18T02:39:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4OTQ5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MDAwNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r525590007", "bodyText": "Rather than comment out, did you mean to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // import LocationState = History.LocationState;", "author": "edalex-ian", "createdAt": "2020-11-17T23:19:28Z", "path": "Source/Plugins/Core/com.equella.core/js/tsrc/search/SearchPage.tsx", "diffHunk": "@@ -63,6 +65,8 @@ import {\n } from \"./components/SearchResultList\";\n import StatusSelector from \"./components/StatusSelector\";\n \n+// import LocationState = History.LocationState;\n+", "originalCommit": "ab613578354f6e1606dfb196f0680b44591df04e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY4MzkwMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2506#discussion_r525683902", "bodyText": "Yep, that's definitely what should've been done", "author": "mrblippy", "createdAt": "2020-11-18T02:50:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MDAwNw=="}], "type": "inlineReview"}, {"oid": "5ec312a0d4c7259d7dc9f380b928b909097e264e", "url": "https://github.com/openequella/openEQUELLA/commit/5ec312a0d4c7259d7dc9f380b928b909097e264e", "message": "Rename functions to retrieve collections and users, so they make more logical sense to other commiters who come accross this code.", "committedDate": "2020-11-18T03:07:36Z", "type": "commit"}, {"oid": "8f1d728faa5725b5a55be22ac31596e35d45342a", "url": "https://github.com/openequella/openEQUELLA/commit/8f1d728faa5725b5a55be22ac31596e35d45342a", "message": "Remove a rogue commented out import, that should have never even been there to start off with", "committedDate": "2020-11-18T03:08:33Z", "type": "commit"}]}