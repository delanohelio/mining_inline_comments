{"pr_number": 1667, "pr_title": "Basic auth endpoint for REST", "pr_createdAt": "2020-04-29T02:50:20Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1667", "timeline": [{"oid": "0d05dff1284ccdfd95ea8820ab49f4e6722dfc5a", "url": "https://github.com/openequella/openEQUELLA/commit/0d05dff1284ccdfd95ea8820ab49f4e6722dfc5a", "message": "Add new endpoint to support simple end user login\n\n#1656", "committedDate": "2020-04-24T05:28:22Z", "type": "commit"}, {"oid": "022fd1dc760c67fa28e56a7344350f119cfe72ff", "url": "https://github.com/openequella/openEQUELLA/commit/022fd1dc760c67fa28e56a7344350f119cfe72ff", "message": "Add header to Auth.scala\n\nIssue #1656", "committedDate": "2020-04-24T05:31:04Z", "type": "commit"}, {"oid": "b1ca1f4f2d2e98c451b96eb80db02158d76912ee", "url": "https://github.com/openequella/openEQUELLA/commit/b1ca1f4f2d2e98c451b96eb80db02158d76912ee", "message": "Only convert some login failure responses to language strings\n\nIssue #1656", "committedDate": "2020-04-24T06:16:21Z", "type": "commit"}, {"oid": "e017ccf51e54cd81b9f78e622819752abcb07c33", "url": "https://github.com/openequella/openEQUELLA/commit/e017ccf51e54cd81b9f78e622819752abcb07c33", "message": "Fix 500 on /api/auth/logout\n\n#1656", "committedDate": "2020-04-29T02:35:34Z", "type": "commit"}, {"oid": "9732396e8def2c5e1bc8cc8b6b33d7eb69f50486", "url": "https://github.com/openequella/openEQUELLA/commit/9732396e8def2c5e1bc8cc8b6b33d7eb69f50486", "message": "Add basic tests for /api/auth\n\n#1656", "committedDate": "2020-04-29T02:43:44Z", "type": "commit"}, {"oid": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1", "url": "https://github.com/openequella/openEQUELLA/commit/77c967725442ff1fc9bf1f896fa8b688ddb3a4b1", "message": "Fix formatting\n\n#1656", "committedDate": "2020-04-29T05:46:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MjcwNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417662705", "bodyText": "We have a Scala object called ApiErrorResponse which generates responses for 404 and 400. What about we move this method to there ?", "author": "PenghaiZhang", "createdAt": "2020-04-29T23:04:26Z", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/auth/Auth.scala", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.api.auth\n+\n+import com.tle.common.i18n.CurrentLocale\n+import com.tle.common.usermanagement.user.{CurrentUser, WebAuthenticationDetails}\n+import com.tle.exceptions.{\n+  AccountExpiredException,\n+  AuthenticationException,\n+  BadCredentialsException\n+}\n+import com.tle.legacy.LegacyGuice\n+import com.tle.web.resources.{PluginResourceHelper, ResourcesService}\n+import io.swagger.annotations.{Api, ApiOperation}\n+import javax.servlet.http.HttpServletRequest\n+import javax.ws.rs.core.{Context, Response}\n+import javax.ws.rs.{POST, PUT, Path, QueryParam}\n+\n+@Api(\"Authentication\")\n+@Path(\"auth\")\n+class Auth {\n+  val RESOURCE_HELPER: PluginResourceHelper =\n+    ResourcesService.getResourceHelper(classOf[Auth])\n+\n+  /**\n+    * Provide simple username / password login as per a legacy oEQ form based authentication but for\n+    * use with REST APIs - possible the start of an authenticated Single Page App. This basically\n+    * mimics the existing form based login logic.\n+    *\n+    * @see com.tle.web.login.LogonSection#authenticate(SectionInfo)\n+    */\n+  @POST\n+  @Path(\"login\")\n+  @ApiOperation(\n+    value = \"Login as a normal user.\",\n+    notes =\n+      \"Provides a means to establish a simple cookie based (JSESSIONID) session, for easy use of the REST API for user based operations.\",\n+    response = classOf[String]\n+  )\n+  def login(@Context req: HttpServletRequest,\n+            @QueryParam(\"username\") username: String,\n+            @QueryParam(\"password\") password: String): Response = {\n+    LegacyGuice.userSessionService.reenableSessionUse()\n+\n+    val us  = LegacyGuice.userService\n+    val wad = us.getWebAuthenticationDetails(req)\n+    def lfr(messageKey: String): Response =\n+      loginFailedResponse(wad, username, CurrentLocale.get(RESOURCE_HELPER.key(messageKey)))\n+\n+    try {\n+      us.login(username, password, wad, true)\n+      Response.ok().build()\n+    } catch {\n+      case _: BadCredentialsException => lfr(\"logon.invalid\")\n+      case e: AccountExpiredException => loginFailedResponse(wad, username, e.getMessage)\n+      case _: AuthenticationException => lfr(\"logon.problems\")\n+    }\n+  }\n+\n+  @PUT\n+  @Path(\"logout\")\n+  @ApiOperation(\n+    value = \"Logout the current session.\",\n+    notes =\n+      \"This is to logout sessions which were setup with the /api/auth/login endpoint, and will do so based on the JSESSIONID cookie.\"\n+  )\n+  def logout(@Context req: HttpServletRequest): Response = {\n+    LegacyGuice.userSessionService.reenableSessionUse()\n+    val us = LegacyGuice.userService\n+    us.logoutToGuest(us.getWebAuthenticationDetails(req), false)\n+    Response.ok().build()\n+  }\n+\n+  def loginFailedResponse(wad: WebAuthenticationDetails,", "originalCommit": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3NDY4MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417674680", "bodyText": "But I realised this method is specific to loginFailed so it may be fine to stay here.", "author": "PenghaiZhang", "createdAt": "2020-04-29T23:41:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MjcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MzY3MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417683670", "bodyText": "Yeah I was wondering about that, but was then wondering if that's just on the component/search_config branch. \ud83e\udd14\nBut yes, I wouldn't expect 401s anywhere else. It is unique to the auth process.", "author": "edalex-ian", "createdAt": "2020-04-30T00:09:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MjcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MzE4MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417663181", "bodyText": "Can I ask Why use PUT for logout?", "author": "PenghaiZhang", "createdAt": "2020-04-29T23:05:56Z", "path": "Source/Plugins/Core/com.equella.core/scalasrc/com/tle/web/api/auth/Auth.scala", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to The Apereo Foundation under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * The Apereo Foundation licenses this file to you under the Apache License,\n+ * Version 2.0, (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.tle.web.api.auth\n+\n+import com.tle.common.i18n.CurrentLocale\n+import com.tle.common.usermanagement.user.{CurrentUser, WebAuthenticationDetails}\n+import com.tle.exceptions.{\n+  AccountExpiredException,\n+  AuthenticationException,\n+  BadCredentialsException\n+}\n+import com.tle.legacy.LegacyGuice\n+import com.tle.web.resources.{PluginResourceHelper, ResourcesService}\n+import io.swagger.annotations.{Api, ApiOperation}\n+import javax.servlet.http.HttpServletRequest\n+import javax.ws.rs.core.{Context, Response}\n+import javax.ws.rs.{POST, PUT, Path, QueryParam}\n+\n+@Api(\"Authentication\")\n+@Path(\"auth\")\n+class Auth {\n+  val RESOURCE_HELPER: PluginResourceHelper =\n+    ResourcesService.getResourceHelper(classOf[Auth])\n+\n+  /**\n+    * Provide simple username / password login as per a legacy oEQ form based authentication but for\n+    * use with REST APIs - possible the start of an authenticated Single Page App. This basically\n+    * mimics the existing form based login logic.\n+    *\n+    * @see com.tle.web.login.LogonSection#authenticate(SectionInfo)\n+    */\n+  @POST\n+  @Path(\"login\")\n+  @ApiOperation(\n+    value = \"Login as a normal user.\",\n+    notes =\n+      \"Provides a means to establish a simple cookie based (JSESSIONID) session, for easy use of the REST API for user based operations.\",\n+    response = classOf[String]\n+  )\n+  def login(@Context req: HttpServletRequest,\n+            @QueryParam(\"username\") username: String,\n+            @QueryParam(\"password\") password: String): Response = {\n+    LegacyGuice.userSessionService.reenableSessionUse()\n+\n+    val us  = LegacyGuice.userService\n+    val wad = us.getWebAuthenticationDetails(req)\n+    def lfr(messageKey: String): Response =\n+      loginFailedResponse(wad, username, CurrentLocale.get(RESOURCE_HELPER.key(messageKey)))\n+\n+    try {\n+      us.login(username, password, wad, true)\n+      Response.ok().build()\n+    } catch {\n+      case _: BadCredentialsException => lfr(\"logon.invalid\")\n+      case e: AccountExpiredException => loginFailedResponse(wad, username, e.getMessage)\n+      case _: AuthenticationException => lfr(\"logon.problems\")\n+    }\n+  }\n+\n+  @PUT", "originalCommit": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4NDQ0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417684442", "bodyText": "Yes, you may, as the choice of verbs was interesting. I went with POST for the login for two reasons:\n\nSo that it could be used if someone just wanted a simple form login kind of idea - and hence why I went with query params rather than JSON body; and\nAs it does essentially 'create' a new session on the server.\n\nSo with that in mind, using PUT at the other end seemed to make sense as it's updating a session. The other option could be DELETE as it's kind of removing a session, but really a session seems to remain in the oEQ Auth paradigm - as you can see we change the session to be as 'guest'.\nBut with that all now in mind, I'd be interested to hear your thoughts? Does the above play out, or should we change it?", "author": "edalex-ian", "createdAt": "2020-04-30T00:12:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MzE4MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwMDY0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417700642", "bodyText": "There have been a lot similar discussions, and one idea got my attention is If session is the resource in this scenario, does the path (/Authentication)  still match the resource? And yes,  the above makes sense to me.", "author": "PenghaiZhang", "createdAt": "2020-04-30T01:10:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MzE4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTczOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417665739", "bodyText": "Will we use  io.github.openequella.rest.XXX as package names for REST Api tests created in the future ?", "author": "PenghaiZhang", "createdAt": "2020-04-29T23:13:26Z", "path": "autotest/OldTests/testng-travis-webservices.yaml", "diffHunk": "@@ -28,6 +28,7 @@ tests:\n       - com.tle.webtests.test.webservices.rest.TasksApiTest\n       - com.tle.webtests.test.webservices.rest.TaxonomyApiTest\n       - com.tle.webtests.test.webservices.rest.UserGroupManagementApiTest\n+      - io.github.openequella.rest.AuthApiTest", "originalCommit": "77c967725442ff1fc9bf1f896fa8b688ddb3a4b1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4NTU2OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1667#discussion_r417685568", "bodyText": "We might, we'll have to see how things play out.\nThe current REST tests are all token based and are thereby possibly more focused towards system integration as opposed to end user use via a simple login. However the future extensions we'll be focusing on will be to support the new UI so it may make more sense to do them utilising this new login endpoint.\nIf things do play out that way, then we'll probably create a simpler version of AbstractRestTest and place them here. Plus, then we might be able to avoid also needing to interact with a browser and so then the tests can run much after.\nAn although it may not influence if we stay with this package name, it would also possibly make sense to write the new tests in Scala - and maybe with ScalaTest - seeing we plan to write all the endpoints with Scala. \ud83e\udd14\nSo I'm afraid no black and white answer there. But definitely some things to keep in mind when we write the next one. ;)", "author": "edalex-ian", "createdAt": "2020-04-30T00:16:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2NTczOQ=="}], "type": "inlineReview"}]}