{"pr_number": 1409, "pr_title": "Release process documentation", "pr_createdAt": "2020-01-08T00:17:20Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/1409", "timeline": [{"oid": "5e749300a1862a1049d29b8896f02de11160696f", "url": "https://github.com/openequella/openEQUELLA/commit/5e749300a1862a1049d29b8896f02de11160696f", "message": "Adding initial RELEASE.md documenting stable releases\n\nMore work to come in other areas.", "committedDate": "2020-01-07T05:51:25Z", "type": "commit"}, {"oid": "763af2e5d30a17db0c12f3f50eca709f51b801df", "url": "https://github.com/openequella/openEQUELLA/commit/763af2e5d30a17db0c12f3f50eca709f51b801df", "message": "Document process for hotfixes", "committedDate": "2020-01-08T00:07:08Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyMjcxNg==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364022716", "bodyText": "11 needs a carriage return.", "author": "SammyIsConfused", "createdAt": "2020-01-08T00:57:07Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly represent\n+   the version\n+3. Update `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even using\n+   `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the\n+   merge commit on master as `2020.1.0` - ensure to push the tag to git with `git push origin 2020.1.0`\n+9. Now go to GitHub to publish/create the new release utilising the pushed tag\n+10. Merge that tag point into develop (e.g. `git checkout develop && git pull && git merge 2020.1.0`) resolving any conflicts that may arise 11. Last step, update `build.sbt` on `develop`", "originalCommit": "763af2e5d30a17db0c12f3f50eca709f51b801df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxNTc5NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364515794", "bodyText": "Grrrr, this was prettier in the pre-commit hook. I've fixed it now after doing more battle with it, but even now it's rejoined lines and made the line > 100 characters... grrr.. At least it should look right... Will push shortly.", "author": "edalex-ian", "createdAt": "2020-01-09T00:53:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyMjcxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyMjgyOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364022828", "bodyText": "git push -u origin stable-2019.2", "author": "SammyIsConfused", "createdAt": "2020-01-08T00:57:44Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly represent\n+   the version\n+3. Update `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even using\n+   `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the\n+   merge commit on master as `2020.1.0` - ensure to push the tag to git with `git push origin 2020.1.0`\n+9. Now go to GitHub to publish/create the new release utilising the pushed tag\n+10. Merge that tag point into develop (e.g. `git checkout develop && git pull && git merge 2020.1.0`) resolving any conflicts that may arise 11. Last step, update `build.sbt` on `develop`\n+    to reflect the next planned feature release and\n+    setting `equellaStream` to `Alpha`\n+\n+**Publishing release candidate builds:** It is possible to publish the individual RC builds on\n+GitHub too, just tag each point on the `release/` branch - e.g. with a tag of `2020.1.0-RC1`.\n+\n+At this point a new stable release has been successfully released. However this means that the\n+immediately prior stable version needs to be made ready for any future possible hotfixes. To do\n+this, we create a branch now.\n+\n+In the above example 2020.1.0 was the new version, so this would have replaced 2019.2.x. If the\n+latest (hotfix) release for 2019.2.x was 2019.2.3, then we'd want to branch off tag `2019.2.3` to\n+create a new branch called `stable-2019.2`. This is done via:\n+\n+    git checkout master\n+    git pull\n+    git checkout -b stable-2019.2 2019.2.3\n+    git push -u origin stable-201.2", "originalCommit": "763af2e5d30a17db0c12f3f50eca709f51b801df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyNDExOA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364024118", "bodyText": "As we have more than one build.sbt, do we need to clarify that it is the one under root folder requiring updates ?", "author": "PenghaiZhang", "createdAt": "2020-01-08T01:03:24Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly represent", "originalCommit": "763af2e5d30a17db0c12f3f50eca709f51b801df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxNDc1Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364514752", "bodyText": "Not a bad idea.", "author": "edalex-ian", "createdAt": "2020-01-09T00:49:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyNDExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyNTAyMA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364025020", "bodyText": "Just need a new line for step 11.", "author": "PenghaiZhang", "createdAt": "2020-01-08T01:07:30Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly represent\n+   the version\n+3. Update `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even using\n+   `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the\n+   merge commit on master as `2020.1.0` - ensure to push the tag to git with `git push origin 2020.1.0`\n+9. Now go to GitHub to publish/create the new release utilising the pushed tag\n+10. Merge that tag point into develop (e.g. `git checkout develop && git pull && git merge 2020.1.0`) resolving any conflicts that may arise 11. Last step, update `build.sbt` on `develop`", "originalCommit": "763af2e5d30a17db0c12f3f50eca709f51b801df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyNjU3Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364026577", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                git push -u origin stable-201.2\n          \n          \n            \n                git push -u origin stable-2019.2", "author": "PenghaiZhang", "createdAt": "2020-01-08T01:14:45Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly represent\n+   the version\n+3. Update `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even using\n+   `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the\n+   merge commit on master as `2020.1.0` - ensure to push the tag to git with `git push origin 2020.1.0`\n+9. Now go to GitHub to publish/create the new release utilising the pushed tag\n+10. Merge that tag point into develop (e.g. `git checkout develop && git pull && git merge 2020.1.0`) resolving any conflicts that may arise 11. Last step, update `build.sbt` on `develop`\n+    to reflect the next planned feature release and\n+    setting `equellaStream` to `Alpha`\n+\n+**Publishing release candidate builds:** It is possible to publish the individual RC builds on\n+GitHub too, just tag each point on the `release/` branch - e.g. with a tag of `2020.1.0-RC1`.\n+\n+At this point a new stable release has been successfully released. However this means that the\n+immediately prior stable version needs to be made ready for any future possible hotfixes. To do\n+this, we create a branch now.\n+\n+In the above example 2020.1.0 was the new version, so this would have replaced 2019.2.x. If the\n+latest (hotfix) release for 2019.2.x was 2019.2.3, then we'd want to branch off tag `2019.2.3` to\n+create a new branch called `stable-2019.2`. This is done via:\n+\n+    git checkout master\n+    git pull\n+    git checkout -b stable-2019.2 2019.2.3\n+    git push -u origin stable-201.2", "originalCommit": "763af2e5d30a17db0c12f3f50eca709f51b801df", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyODY3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364028671", "bodyText": "Do we need to tell people the Travis folder name in the S3 bucket?", "author": "PenghaiZhang", "createdAt": "2020-01-08T01:24:54Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly represent\n+   the version\n+3. Update `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even using\n+   `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)", "originalCommit": "763af2e5d30a17db0c12f3f50eca709f51b801df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxNDYxNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364514615", "bodyText": "It'd be handy, but it's ever so slightly difficult... Currently all we have is that at the end of the 'build primary artefacts' stage is some output like:\n$ ci/s3cp.sh Source/Server/equellaserver/target/tle-upgrade*.zip $S3_DEST_BUILD\nupload: Source/Server/equellaserver/target/tle-upgrade-2020.1.r20200108 (2020.1.0-Alpha.OSE).zip to s3://edalexdev/travis-openEQUELLA/develop/613/tle-upgrade-2020.1.r20200108 (2020.1.0-Alpha.OSE).zip\n$ ci/s3cp.sh Installer/target/equella-installer*.zip             $S3_DEST_BUILD\nupload: Installer/target/equella-installer-2020.1.0.zip to s3://edalexdev/travis-openEQUELLA/develop/613/equella-installer-2020.1.0.zip\n$ ci/s3cp.sh target/reference-language-pack.zip                  $S3_DEST_BUILD\nupload: target/reference-language-pack.zip to s3://edalexdev/travis-openEQUELLA/develop/613/reference-language-pack.zip\n$ ci/s3cp.sh target/scriptingapi-javadoc-*.zip                   $S3_DEST_BUILD\nupload: target/scriptingapi-javadoc-2020.1.0-Alpha.OSE-geee119b.zip to s3://edalexdev/travis-openEQUELLA/develop/613/scriptingapi-javadoc-2020.1.0-Alpha.OSE-geee119b.zip\n\nThe make up of those strings are encapsulated in .travis.yml. However we'd have to advise of the HTTP endpoint for s3://edalexdev/, but that's a bit rough and ready. Really what we need is:\n\nStop using S3 for this... Update to do the publish endpoint like you did for the admin console package; or\nHave someone modify the script to generate a HTML page as a final step which contains all needed links, and then have a URL just for that single HTML page printed at the end of the build.\n\nSo I'm inclined to leave for now and advise any external parties who need it as needed.", "author": "edalex-ian", "createdAt": "2020-01-09T00:48:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyODY3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU1OTUwOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364559509", "bodyText": "Ok I see. Thanks for explaining!", "author": "PenghaiZhang", "createdAt": "2020-01-09T04:57:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyODY3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyOTc5Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364029793", "bodyText": "For previous releases that I was involved in, it seems that we did not do a final validation in this step. Tests were more focused on RC and conducted before step 7.", "author": "PenghaiZhang", "createdAt": "2020-01-08T01:29:45Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly represent\n+   the version\n+3. Update `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even using\n+   `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the", "originalCommit": "763af2e5d30a17db0c12f3f50eca709f51b801df", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDUxMTU1Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364511552", "bodyText": "We still did a quick validation to ensure the resultant build was good. Just a quick login and ensure all is still working.", "author": "edalex-ian", "createdAt": "2020-01-09T00:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAyOTc5Mw=="}], "type": "inlineReview"}, {"oid": "3dbb7604ff90a40ec502b84247fc5c1bae672f4b", "url": "https://github.com/openequella/openEQUELLA/commit/3dbb7604ff90a40ec502b84247fc5c1bae672f4b", "message": "Fix typo in RELEASE.md raised in PR\r\n\r\n#1409\n\nCo-Authored-By: PenghaiZhang <47203811+PenghaiZhang@users.noreply.github.com>", "committedDate": "2020-01-09T00:33:04Z", "type": "commit"}, {"oid": "24a9c9c836e7967157cdcc9a1a16540bed060999", "url": "https://github.com/openequella/openEQUELLA/commit/24a9c9c836e7967157cdcc9a1a16540bed060999", "message": "Fix missing new line\n\nThis was removed by the pre-commit hook with prettier. :Z\n\nEven with what it is now, is after prettier has meesed with it again -\ni.e. the line now being greater than 100 chars. Anyway, it'll have to\nstay as is. :/", "committedDate": "2020-01-09T00:50:57Z", "type": "commit"}, {"oid": "4d114495bb8399a934574d8c7e8cf4d85e0f9334", "url": "https://github.com/openequella/openEQUELLA/commit/4d114495bb8399a934574d8c7e8cf4d85e0f9334", "message": "Be more explicit in which build.sbt to update\n\nAs per feedback in #1409", "committedDate": "2020-01-09T00:55:41Z", "type": "commit"}, {"oid": "0659e1f879eea5e5b4c295d5f3aae6e1adfd6716", "url": "https://github.com/openequella/openEQUELLA/commit/0659e1f879eea5e5b4c295d5f3aae6e1adfd6716", "message": "Merge branch 'doc/release' of github.com:edalex-ian/openEQUELLA into doc/release", "committedDate": "2020-01-09T00:56:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NDMyOQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364974329", "bodyText": "Is there a concern with just changing stable to stable/6.5 so future release branch names are cleaner?", "author": "cbeach47", "createdAt": "2020-01-09T21:43:32Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update root `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly\n+   represent the version\n+3. Update root `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even\n+   using `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update root `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the\n+   merge commit on master as `2020.1.0` - ensure to push the tag to git with `git push origin 2020.1.0`\n+9. Now go to GitHub to publish/create the new release utilising the pushed tag\n+10. Merge that tag point into develop (e.g. `git checkout develop && git pull && git merge 2020.1.0`) resolving any conflicts that may arise\n+11. Last step, update root `build.sbt` on `develop` to reflect the next planned feature release and\n+    setting `equellaStream` to `Alpha`\n+\n+**Publishing release candidate builds:** It is possible to publish the individual RC builds on\n+GitHub too, just tag each point on the `release/` branch - e.g. with a tag of `2020.1.0-RC1`.\n+\n+At this point a new stable release has been successfully released. However this means that the\n+immediately prior stable version needs to be made ready for any future possible hotfixes. To do\n+this, we create a branch now.\n+\n+In the above example 2020.1.0 was the new version, so this would have replaced 2019.2.x. If the\n+latest (hotfix) release for 2019.2.x was 2019.2.3, then we'd want to branch off tag `2019.2.3` to\n+create a new branch called `stable-2019.2`. This is done via:\n+\n+    git checkout master\n+    git pull\n+    git checkout -b stable-2019.2 2019.2.3\n+    git push -u origin stable-2019.2\n+\n+_NOTE:_ Unfortunately here we're using `stable-<version>` rather than `stable/<version` as\n+historically a `stable` branch was created for oEQ 6.5.\n+", "originalCommit": "0659e1f879eea5e5b4c295d5f3aae6e1adfd6716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyNzQ1NA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r365027454", "bodyText": "It's definitely tempting, but it will also require updating various build bits etc - and we'd have to address the other three stable- branches too.\nMaybe something for the future?\n(That all said, I see I've a typo in the above - so I'll fix that.)", "author": "edalex-ian", "createdAt": "2020-01-10T00:40:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NDMyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NTY0Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364975646", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            With the above starting **base branches** the steps are as follow:\n          \n          \n            \n            With the above starting **base branches** the steps are as follows:", "author": "cbeach47", "createdAt": "2020-01-09T21:47:02Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update root `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly\n+   represent the version\n+3. Update root `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even\n+   using `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update root `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the\n+   merge commit on master as `2020.1.0` - ensure to push the tag to git with `git push origin 2020.1.0`\n+9. Now go to GitHub to publish/create the new release utilising the pushed tag\n+10. Merge that tag point into develop (e.g. `git checkout develop && git pull && git merge 2020.1.0`) resolving any conflicts that may arise\n+11. Last step, update root `build.sbt` on `develop` to reflect the next planned feature release and\n+    setting `equellaStream` to `Alpha`\n+\n+**Publishing release candidate builds:** It is possible to publish the individual RC builds on\n+GitHub too, just tag each point on the `release/` branch - e.g. with a tag of `2020.1.0-RC1`.\n+\n+At this point a new stable release has been successfully released. However this means that the\n+immediately prior stable version needs to be made ready for any future possible hotfixes. To do\n+this, we create a branch now.\n+\n+In the above example 2020.1.0 was the new version, so this would have replaced 2019.2.x. If the\n+latest (hotfix) release for 2019.2.x was 2019.2.3, then we'd want to branch off tag `2019.2.3` to\n+create a new branch called `stable-2019.2`. This is done via:\n+\n+    git checkout master\n+    git pull\n+    git checkout -b stable-2019.2 2019.2.3\n+    git push -u origin stable-2019.2\n+\n+_NOTE:_ Unfortunately here we're using `stable-<version>` rather than `stable/<version` as\n+historically a `stable` branch was created for oEQ 6.5.\n+\n+This newly created branch, will then be used below when creating hotfixes for 'previous' stable\n+releases.\n+\n+### Hotfix Releases\n+\n+Although there are essentially two processes here, they are the same other than the initial starting\n+point for the `hotfix/` branch and then the target for the merge (and later tag).\n+\n+#### For current stable version\n+\n+To do a hotfix for the current stable version (i.e. the most recent feature release) you use\n+`master` as the **base branch**.\n+\n+#### For previous stable versions\n+\n+To do a hotfix for one of the previous stable versions (i.e. versions which have been superseded\n+by a newer feature release currently sitting on `master`), you use `stable-<version>` as the **base\n+branch**. For example, if you wanted to do a new hotfix for 2019.1 your base branch would be\n+`stable-2019.1`.\n+\n+#### Common Steps\n+\n+With the above starting **base branches** the steps are as follow:", "originalCommit": "0659e1f879eea5e5b4c295d5f3aae6e1adfd6716", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NjE0MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r364976141", "bodyText": "Consider a code block around the following list", "author": "cbeach47", "createdAt": "2020-01-09T21:48:16Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update root `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly\n+   represent the version\n+3. Update root `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even\n+   using `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update root `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the\n+   merge commit on master as `2020.1.0` - ensure to push the tag to git with `git push origin 2020.1.0`\n+9. Now go to GitHub to publish/create the new release utilising the pushed tag\n+10. Merge that tag point into develop (e.g. `git checkout develop && git pull && git merge 2020.1.0`) resolving any conflicts that may arise\n+11. Last step, update root `build.sbt` on `develop` to reflect the next planned feature release and\n+    setting `equellaStream` to `Alpha`\n+\n+**Publishing release candidate builds:** It is possible to publish the individual RC builds on\n+GitHub too, just tag each point on the `release/` branch - e.g. with a tag of `2020.1.0-RC1`.\n+\n+At this point a new stable release has been successfully released. However this means that the\n+immediately prior stable version needs to be made ready for any future possible hotfixes. To do\n+this, we create a branch now.\n+\n+In the above example 2020.1.0 was the new version, so this would have replaced 2019.2.x. If the\n+latest (hotfix) release for 2019.2.x was 2019.2.3, then we'd want to branch off tag `2019.2.3` to\n+create a new branch called `stable-2019.2`. This is done via:\n+", "originalCommit": "0659e1f879eea5e5b4c295d5f3aae6e1adfd6716", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTAyOTIwMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r365029201", "bodyText": "My preference for simple blocks like this is to use the four space indent for the code block, as I find it's provides for better reading as plain text - and still provides the same markup when rendered.", "author": "edalex-ian", "createdAt": "2020-01-10T00:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NjE0MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAzODQyNw==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r366038427", "bodyText": "\ud83d\udc4d", "author": "cbeach47", "createdAt": "2020-01-13T21:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk3NjE0MQ=="}], "type": "inlineReview"}, {"oid": "d0b26c6c3ba78a23f5c90869de24ccb4200420eb", "url": "https://github.com/openequella/openEQUELLA/commit/d0b26c6c3ba78a23f5c90869de24ccb4200420eb", "message": "Fix minor typo in RELEASING.md", "committedDate": "2020-01-10T00:45:41Z", "type": "commit"}, {"oid": "bf13fbb5145e1753dff7f938248a302296c2fdd7", "url": "https://github.com/openequella/openEQUELLA/commit/bf13fbb5145e1753dff7f938248a302296c2fdd7", "message": "Fix minor typo in RELEASING.md\n\nCo-Authored-By: Chris Beach <beachcoding47@gmail.com>", "committedDate": "2020-01-10T00:46:33Z", "type": "commit"}, {"oid": "db6ad84f278e72ff56d48ba0cc939a7db709f017", "url": "https://github.com/openequella/openEQUELLA/commit/db6ad84f278e72ff56d48ba0cc939a7db709f017", "message": "Merge branch 'doc/release' of github.com:edalex-ian/openEQUELLA into doc/release", "committedDate": "2020-01-10T00:49:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0ODE3Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r366048176", "bodyText": "For hotfixes, have folks been just leaving the equellaStream as Stable ?", "author": "cbeach47", "createdAt": "2020-01-13T21:52:27Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>\n+\n+Each feature release (new 'stable' release) has:\n+\n+- `year` as per the year it is released;\n+- an incrementing `release` (starting at 1) represent the feature release for that year; and\n+- a `patch` of `0`.\n+\n+For example, the first feature release of 2020 would be `2020.1.0`.\n+\n+Each subsequent update to the stable release and future hotfixes simply increment the `patch`\n+number.\n+\n+For example, the first update to `2020.1.0` will result in `2020.1.1`.\n+\n+Each version also results in a tag in the git repository to facilitate look up of which codeset\n+relates to a distribution.\n+\n+### What about the latest cutting edge code?\n+\n+The oEQ project does not provide nightly builds, however if people wanted access to the code under\n+develop leading to the next feature release, this can be found on the `release` branch. However\n+there are no claims made to the stability of this branch - it's very much at ones own risk, and\n+meant only for developers.\n+\n+## Processes\n+\n+### Stable Releases\n+\n+Creation of 'stable' releases start when 'feature complete'/'code freeze' has been reached. At this\n+point a `release` branch is created from `develop`. On this branch first the version information is\n+updated, and then the first 'release candidate' is built ready for final testing. If issues are\n+found and deemed requiring fixing prior to release then the subsequent builds of this branch can be\n+for additional 'release candidates'.\n+\n+This continues until agreement is reached that the code on the release branch is ready for final\n+release. At which point version information is again updated (to remove any reference to RC), and\n+the release branch is merged into `master` and tagged. The build from that tag is then the new\n+'stable' release. Lastly, that tag point is merged into `develop` to ensure any last minute fixes\n+etc. also make it back into the next feature release.\n+\n+#### Step by Step\n+\n+Starting from a `develop` which is feature complete, assuming we're aiming for version\n+2020.1.0:\n+\n+1. Create a new branch (from `develop`) - e.g. `git checkout -b release/2020.1.0`\n+2. Update root `build.sbt` ensuring `equellaMajor`, `equellaMinor` and `equellaPatch` correctly\n+   represent the version\n+3. Update root `build.sbt` to set `equellaStream` is `RC` - for release candidate, consider even\n+   using `RC1` so that later you can use `RC2` etc for any rework cycles\n+4. Push to git and await a build from Travis CI (which will publish a build - for now - to an S3\n+   bucket maintained by Edalex but which is publicly accessible and noted in build log)\n+5. Download resultant build, and commence testing (and any rework - do more RCs as needed)\n+6. Once agreed that code is ready for release, update root `build.sbt` so that `equellaStream` is\n+   `Stable` and commit\n+7. Now merge `release/2020.1.0` into `master` and push\n+8. Await build and then do a final validation of the resultant artefacts, if all in order tag the\n+   merge commit on master as `2020.1.0` - ensure to push the tag to git with `git push origin 2020.1.0`\n+9. Now go to GitHub to publish/create the new release utilising the pushed tag\n+10. Merge that tag point into develop (e.g. `git checkout develop && git pull && git merge 2020.1.0`) resolving any conflicts that may arise\n+11. Last step, update root `build.sbt` on `develop` to reflect the next planned feature release and\n+    setting `equellaStream` to `Alpha`\n+\n+**Publishing release candidate builds:** It is possible to publish the individual RC builds on\n+GitHub too, just tag each point on the `release/` branch - e.g. with a tag of `2020.1.0-RC1`.\n+\n+At this point a new stable release has been successfully released. However this means that the\n+immediately prior stable version needs to be made ready for any future possible hotfixes. To do\n+this, we create a branch now.\n+\n+In the above example 2020.1.0 was the new version, so this would have replaced 2019.2.x. If the\n+latest (hotfix) release for 2019.2.x was 2019.2.3, then we'd want to branch off tag `2019.2.3` to\n+create a new branch called `stable-2019.2`. This is done via:\n+\n+    git checkout master\n+    git pull\n+    git checkout -b stable-2019.2 2019.2.3\n+    git push -u origin stable-2019.2\n+\n+_NOTE:_ Unfortunately here we're using `stable-<version>` rather than `stable/<version>` as\n+historically a `stable` branch was created for oEQ 6.5.\n+\n+This newly created branch, will then be used below when creating hotfixes for 'previous' stable\n+releases.\n+\n+### Hotfix Releases\n+\n+Although there are essentially two processes here, they are the same other than the initial starting\n+point for the `hotfix/` branch and then the target for the merge (and later tag).\n+\n+#### For current stable version\n+\n+To do a hotfix for the current stable version (i.e. the most recent feature release) you use\n+`master` as the **base branch**.\n+\n+#### For previous stable versions\n+\n+To do a hotfix for one of the previous stable versions (i.e. versions which have been superseded\n+by a newer feature release currently sitting on `master`), you use `stable-<version>` as the **base\n+branch**. For example, if you wanted to do a new hotfix for 2019.1 your base branch would be\n+`stable-2019.1`.\n+\n+#### Common Steps\n+\n+With the above starting **base branches** the steps are as follows:\n+\n+1. Checkout and pull the **base branch**\n+2. Create the new `hotfix/<version>` branch - .e.g `git checkout -b hotfix/2019.2.1`\n+3. Update root `build.sbt` to correct version information - refer to guidance above", "originalCommit": "db6ad84f278e72ff56d48ba0cc939a7db709f017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMTAyNA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r366621024", "bodyText": "That's correct. This relates more so to the older versioning scheme. If anything we're now more so starting to also use it as a Classifier, but for now anything for public consumption ends up with this as Stable.", "author": "edalex-ian", "createdAt": "2020-01-14T23:09:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0ODE3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MjA0OA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r366592048", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n          \n          \n            \n            The oEQ project follows essentially the [Git Flow workflow](https://nvie.com/posts/a-successful-git-branching-model) for the management of its git repository.", "author": "ChristianMurphy", "createdAt": "2020-01-14T21:53:01Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.", "originalCommit": "db6ad84f278e72ff56d48ba0cc939a7db709f017", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MzU4Mw==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r366593583", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            oEQ utilises the following version scheme:\n          \n          \n            \n            oEQ utilises the [calver versioning scheme](https://calver.org):", "author": "ChristianMurphy", "createdAt": "2020-01-14T21:56:34Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:", "originalCommit": "db6ad84f278e72ff56d48ba0cc939a7db709f017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjQ0Mg==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r366622442", "bodyText": "Thanks @ChristianMurphy , I was not aware of the actual name for it and didn't want to reference Semver, so this is great. \ud83d\udc4d", "author": "edalex-ian", "createdAt": "2020-01-14T23:13:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5MzU4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mzc4MA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r366593780", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <year>.<release>.<patch>\n          \n          \n            \n                YYYY.MINOR.MICRO", "author": "ChristianMurphy", "createdAt": "2020-01-14T21:57:04Z", "path": "RELEASING.md", "diffHunk": "@@ -0,0 +1,143 @@\n+# openEQUELLA Release Processes\n+\n+## Overview\n+\n+This document provides guidance on the processes for the release of openEQUELLA (oEQ). This covers\n+the two main release types which are done - stable and hotfix.\n+\n+## Introduction\n+\n+The oEQ project follows essentially the Git Flow workflow for the management of its git repository.\n+Utilising this there are then two key release types:\n+\n+- **Stable** - these are releases which originate from the `master` git branch. These first start\n+  with a new feature release, and then subsequent patches to that until it is superseded by a new\n+  feature release. The code on `master` is always the current 'stable' version;\n+- **Hotfixes** (or patches) - these are releases done on previously released stable versions\n+  (typically only going back two stable releases). The intention with these is that the included\n+  change in any new hotfix is low risk, but addresses key issues being experienced by adopters.\n+\n+Hotfixes include code which has also been included on the latest stable version, and has\n+been deemed safe to 'backport' to older versions. (E.g. a fix may be made to 2019.2.0 resulting in\n+2019.2.1; and then then it may be chosen to backport to the current 2019.1.x release making 2019.1.3.)\n+\n+### Versioning\n+\n+oEQ utilises the following version scheme:\n+\n+    <year>.<release>.<patch>", "originalCommit": "db6ad84f278e72ff56d48ba0cc939a7db709f017", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjYyMjcwMA==", "url": "https://github.com/openequella/openEQUELLA/pull/1409#discussion_r366622700", "bodyText": "Sure, seems to then nicely align with what people would read in Calver.", "author": "edalex-ian", "createdAt": "2020-01-14T23:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU5Mzc4MA=="}], "type": "inlineReview"}, {"oid": "53dd5db63cb593900502a23495c68b6d8f22ab69", "url": "https://github.com/openequella/openEQUELLA/commit/53dd5db63cb593900502a23495c68b6d8f22ab69", "message": "Provide link to Git Flow in RELEASING.md\n\nCo-Authored-By: Christian Murphy <christian.murphy.42@gmail.com>", "committedDate": "2020-01-14T23:13:00Z", "type": "commit"}, {"oid": "f1b790fb6e4b13143e0dd1a9171f72e4e59dbe6b", "url": "https://github.com/openequella/openEQUELLA/commit/f1b790fb6e4b13143e0dd1a9171f72e4e59dbe6b", "message": "Reference Calver site in RELEASING.md\n\nCo-Authored-By: Christian Murphy <christian.murphy.42@gmail.com>", "committedDate": "2020-01-14T23:14:01Z", "type": "commit"}, {"oid": "d678fcdd867abe7672016936b64cd5e78cb8fe4e", "url": "https://github.com/openequella/openEQUELLA/commit/d678fcdd867abe7672016936b64cd5e78cb8fe4e", "message": "Match version scheme in RELEASING.md with Calver\n\nCo-Authored-By: Christian Murphy <christian.murphy.42@gmail.com>", "committedDate": "2020-01-14T23:14:46Z", "type": "commit"}]}