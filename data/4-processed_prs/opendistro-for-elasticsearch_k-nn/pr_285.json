{"pr_number": 285, "pr_title": "Adding support for FAISS JNI", "pr_createdAt": "2020-12-25T07:51:55Z", "pr_url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285", "timeline": [{"oid": "1c3d3731a2d9dae90b02d76af314b026b8847572", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1c3d3731a2d9dae90b02d76af314b026b8847572", "message": "1. New Branch Support Faiss\n2. Right Now Only Support JNI", "committedDate": "2020-12-25T07:03:43Z", "type": "commit"}, {"oid": "6066a658a8681a28216741c6614e7e2ae9ab4ac9", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/6066a658a8681a28216741c6614e7e2ae9ab4ac9", "message": "1. add submmodule faiss", "committedDate": "2020-12-25T07:28:13Z", "type": "commit"}, {"oid": "5165e70bf618244e57ac0079f831cacd266fd948", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/5165e70bf618244e57ac0079f831cacd266fd948", "message": "1. External Submodule", "committedDate": "2020-12-25T07:30:12Z", "type": "commit"}, {"oid": "fb10190e89783dbd8faaa169af6b01608b5084df", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/fb10190e89783dbd8faaa169af6b01608b5084df", "message": "Update CMakeLists.txt\n\nmodified make without clang", "committedDate": "2020-12-25T08:04:18Z", "type": "commit"}, {"oid": "54cf6a52e1511d7679bdcbdf3055c6f09c2752d9", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/54cf6a52e1511d7679bdcbdf3055c6f09c2752d9", "message": "Update CMakeLists.txt\n\nmodified OPENMP build in CMakeLists.txt", "committedDate": "2020-12-25T08:13:25Z", "type": "commit"}, {"oid": "0f4bdf0fd57cbfa733dd4934da75628bfad895ca", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/0f4bdf0fd57cbfa733dd4934da75628bfad895ca", "message": "1. add knnEngine as a Settings\n2. When Write index and query index, we use knnEngine to verify search in faiss or nmslib", "committedDate": "2020-12-25T11:03:21Z", "type": "commit"}, {"oid": "ab8e950dc2752871e2020125d311d6fbc8ed4dd5", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ab8e950dc2752871e2020125d311d6fbc8ed4dd5", "message": "1. Modified some FIXME", "committedDate": "2020-12-25T11:06:27Z", "type": "commit"}, {"oid": "950e46012de9f67d6830ae2960cf5e70dcededd3", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/950e46012de9f67d6830ae2960cf5e70dcededd3", "message": "Merge pull request #1 from luyuncheng/faiss_withIT\n\nAdd index.knn.knnEngine in the ES Settings. When Write a Segment OR Query Index. It would use this settings to find the knn lib", "committedDate": "2020-12-25T11:11:25Z", "type": "commit"}, {"oid": "22ce60540e4a7eecdc3baae2d03f7ec9f4970cbd", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/22ce60540e4a7eecdc3baae2d03f7ec9f4970cbd", "message": "1. gradle build jni and jniFaiss\n2. almost integTest and unitest PASSED", "committedDate": "2020-12-25T12:35:30Z", "type": "commit"}, {"oid": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1a44194c9439c15bf073e62a0e61137ab5b9a301", "message": "Merge pull request #2 from luyuncheng/faiss_withIT\n\nGradle build jni and jniFaiss", "committedDate": "2020-12-25T12:37:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2OTEzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r553569131", "bodyText": "Design question: Should we have separate JNI libraries for FAISS and nmslib, or should they be contained in one?", "author": "jmazanec15", "createdAt": "2021-01-07T20:25:34Z", "path": "jniFaiss/CMakeLists.txt", "diffHunk": "@@ -0,0 +1,144 @@\n+cmake_minimum_required(VERSION 2.8)", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU3MDUzMA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r554570530", "bodyText": "i am not sure which is better.\nAt this, i separate libraries just to elaborate this faiss engine can work with knn-plugin.\nmay be one jni interface can make jni code more simple to maintain", "author": "luyuncheng", "createdAt": "2021-01-10T13:50:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2OTEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NjI4Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555486287", "bodyText": "I feel having seperate JNI would be more cleaner and easy to abstract out the underlying business logic to dedicated files.  I like the current approach.", "author": "vamshin", "createdAt": "2021-01-12T03:24:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2OTEzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjgxNzc5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562817793", "bodyText": "I think having 2 separate libraries is okay.", "author": "jmazanec15", "createdAt": "2021-01-22T18:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU2OTEzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NDQwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r553574405", "bodyText": "What do you mean by this?", "author": "jmazanec15", "createdAt": "2021-01-07T20:37:01Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -151,12 +153,22 @@ private void onRemoval(RemovalNotification<String, KNNIndexCacheEntry> removalNo\n      */\n     public KNNIndex getIndex(String key, final String indexName) {\n         try {\n+            //TODO if Type Not consistent", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU2Nzk0OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r554567948", "bodyText": "when cached an Index, should we verify which engine for this index, and then load the exactly library?", "author": "luyuncheng", "createdAt": "2021-01-10T13:29:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NDQwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0Njk3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562946971", "bodyText": "I see. I think we should add a different file extension for faiss graphs as opposed to nmslib graphs. Maybe .faiss_hnsw.", "author": "jmazanec15", "createdAt": "2021-01-22T22:23:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NDQwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NTA5OQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r553575099", "bodyText": "I think we should keep nmslib as the default engine.", "author": "jmazanec15", "createdAt": "2021-01-07T20:38:43Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNSettings.java", "diffHunk": "@@ -83,6 +85,7 @@\n     /**\n      * Default setting values\n      */\n+    public static final String INDEX_KNN_DEFAULT_ENGINE = \"Faiss\"; // nmslib, faiss", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDU2ODE1Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r554568157", "bodyText": "Yes, you are right. this is just for integration test can cover the faiss engine code.", "author": "luyuncheng", "createdAt": "2021-01-10T13:31:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzU3NTA5OQ=="}], "type": "inlineReview"}, {"oid": "3d13a7b158352b2be042e011a29dd31233f4c8dd", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3d13a7b158352b2be042e011a29dd31233f4c8dd", "message": "Merge pull request #6 from opendistro-for-elasticsearch/master\n\nupstream master merge into local master", "committedDate": "2021-01-11T10:29:28Z", "type": "commit"}, {"oid": "6f7094b5a863adc990875190499d307a31f254bf", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/6f7094b5a863adc990875190499d307a31f254bf", "message": "1. FIXED SpaceType Get From IndexSettings may be EMPTY when a anonymous field create.", "committedDate": "2021-01-11T12:29:33Z", "type": "commit"}, {"oid": "d94881c21e9b6ec5e8855072477f23c24a24d810", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d94881c21e9b6ec5e8855072477f23c24a24d810", "message": "Update CI.yml", "committedDate": "2021-01-11T12:33:45Z", "type": "commit"}, {"oid": "3dfb7146b168a2a1e62cdda8b7566fcb82c5db81", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3dfb7146b168a2a1e62cdda8b7566fcb82c5db81", "message": "1. Add CI branches for faiss", "committedDate": "2021-01-11T12:35:02Z", "type": "commit"}, {"oid": "3834ea0f56356c4c34571c4a06c3cc21a64fda7e", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3834ea0f56356c4c34571c4a06c3cc21a64fda7e", "message": "1. Update Cmake Files", "committedDate": "2021-01-11T13:47:32Z", "type": "commit"}, {"oid": "a775a3dcb220b34e660ee9f3caf45e8ed7f3c498", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/a775a3dcb220b34e660ee9f3caf45e8ed7f3c498", "message": "OFF GPU", "committedDate": "2021-01-11T13:54:05Z", "type": "commit"}, {"oid": "051a54b1d1452313e74267e93089dab5a200badb", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/051a54b1d1452313e74267e93089dab5a200badb", "message": "OFF PYTHON", "committedDate": "2021-01-11T13:59:55Z", "type": "commit"}, {"oid": "8cd57a7c502f69ac420c878265e33297102f62ba", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/8cd57a7c502f69ac420c878265e33297102f62ba", "message": "delete COMPILER", "committedDate": "2021-01-11T14:05:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2ODE2NA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555468164", "bodyText": "You could remove  dependsOn cmakeJniLib and just rely on dependsOn buildJniNmsLib dependsOn buildJniFaissLib as they internally depends on cmakeJniNmsLib and cmakeJniFaissLib", "author": "vamshin", "createdAt": "2021-01-12T02:20:10Z", "path": "build.gradle", "diffHunk": "@@ -120,21 +120,37 @@ loggerUsageCheck.enabled = false\n def es_tmp_dir = rootProject.file('build/private/es_tmp').absoluteFile\n es_tmp_dir.mkdirs()\n \n-task cmakeJniLib(type:Exec) {\n+task cmakeJniNmsLib(type:Exec) {\n     workingDir 'jni'\n     commandLine 'cmake', '.'\n }\n-\n-task buildJniLib(type:Exec) {\n-    dependsOn cmakeJniLib\n+task cmakeJniFaissLib(type:Exec) {\n+    workingDir 'jniFaiss'\n+    commandLine 'cmake', '.'\n+}\n+task cmakeJniLib() {\n+    dependsOn cmakeJniNmsLib\n+    dependsOn cmakeJniFaissLib\n+}\n+task buildJniNmsLib(type:Exec) {\n+    dependsOn cmakeJniNmsLib\n     workingDir 'jni'\n     commandLine 'make'\n }\n-\n+task buildJniFaissLib(type:Exec) {\n+    dependsOn cmakeJniFaissLib\n+    workingDir 'jniFaiss'\n+    commandLine 'make'\n+}\n+task buildJniLib() {\n+    dependsOn cmakeJniLib\n+    dependsOn buildJniNmsLib\n+    dependsOn buildJniFaissLib\n+}", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg5ODY5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555898693", "bodyText": "Thanks, I fixed it", "author": "luyuncheng", "createdAt": "2021-01-12T16:19:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2ODE2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2ODkzNA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555468934", "bodyText": "Is faiss library backward compatible?\nWe should have faiss library version in the function names to support backward compatibility issues if any arises in the future? You could refer nmslib apis.", "author": "vamshin", "createdAt": "2021-01-12T02:23:05Z", "path": "jniFaiss/include/com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex.h", "diffHunk": "@@ -0,0 +1,53 @@\n+/* DO NOT EDIT THIS FILE - it is machine generated */\n+#include <jni.h>\n+/* Header for class com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex */\n+\n+#ifndef _Included_com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex\n+#define _Included_com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex\n+#ifdef __cplusplus\n+extern \"C\" {\n+#endif\n+/*\n+ * Class:     com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex\n+ * Method:    saveIndex\n+ * Signature: ([I[[FLjava/lang/String;[Ljava/lang/String;Ljava/lang/String;)V\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex_saveIndex", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg5OTM1OQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555899359", "bodyText": "Yes, your are right. i will add the version number into it.", "author": "luyuncheng", "createdAt": "2021-01-12T16:20:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ2ODkzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MDY0NA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555470644", "bodyText": "We should run memory leak tests for faiss jni code. @jmazanec15 ran some memory leak tests for nmslib, we could probably ran it on the faiss branch once we create. Lets see if we can test it as part of this PR or atleast we can create an issue to track all TODOs later.", "author": "vamshin", "createdAt": "2021-01-12T02:28:36Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}\n+};\n+\n+extern \"C\"\n+\n+struct JavaException {\n+    JavaException(JNIEnv* env, const char* type = \"\", const char* message = \"\")\n+    {\n+        jclass newExcCls = env->FindClass(type);\n+        if (newExcCls != NULL)\n+            env->ThrowNew(newExcCls, message);\n+    }\n+};\n+\n+inline void has_exception_in_stack(JNIEnv* env)\n+{\n+    if (env->ExceptionCheck() == JNI_TRUE)\n+        throw std::runtime_error(\"Exception Occured\");\n+}\n+\n+void catch_cpp_exception_and_throw_java(JNIEnv* env)\n+{\n+    try {\n+        throw;\n+    }\n+    catch (const std::bad_alloc& rhs) {\n+        JavaException(env, \"java/io/IOException\", rhs.what());\n+    }\n+    catch (const std::runtime_error& re) {\n+        JavaException(env, \"java/lang/Exception\", re.what());\n+    }\n+    catch (const std::exception& e) {\n+        JavaException(env, \"java/lang/Exception\", e.what());\n+    }\n+    catch (...) {\n+        JavaException(env, \"java/lang/Exception\", \"Unknown exception occured\");\n+    }\n+}\n+\n+/**\n+ * Method: saveIndex\n+ *\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex_saveIndex\n+(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\tvector<int64_t> idVector;\n+\tvector<float>   dataset;\n+\tvector<string> paramsList;\n+\tstring indexDescription = \"HNSW32\";\n+\tfaiss::MetricType metric = faiss::METRIC_L2;\n+\tstd::unique_ptr<faiss::Index> indexWriter;\n+\tint dim = 0;\n+\ttry {\n+\t\t//---- ids\n+\t\tint* object_ids = NULL;\n+\t\tobject_ids = env->GetIntArrayElements(ids, 0);\n+\t\tfor(int i = 0; i < env->GetArrayLength(ids); ++i) {\n+\t\t\tidVector.push_back(object_ids[i]);\n+\t\t}\n+\t\tenv->ReleaseIntArrayElements(ids, object_ids, 0);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- vectors\n+\t\tfor (int i = 0; i < env->GetArrayLength(vectors); ++i) {\n+\t\t\tjfloatArray vectorArray = (jfloatArray)env->GetObjectArrayElement(vectors, i);\n+\t\t\tfloat* vector = env->GetFloatArrayElements(vectorArray, 0);\n+\t\t\tdim = env->GetArrayLength(vectorArray);\n+\t\t\tfor(int j = 0; j < dim; ++j) {\n+\t\t\t\tdataset.push_back(vector[j]);\n+\t\t\t}\n+\t\t\tenv->ReleaseFloatArrayElements(vectorArray, vector, 0);\n+\t\t}\n+\t\thas_exception_in_stack(env);\n+\n+\t\t//---- indexPath\n+\t\tconst char *indexString = env->GetStringUTFChars(indexPath, 0);\n+        string indexPathString(indexString);\n+        env->ReleaseStringUTFChars(indexPath, indexString);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- algoParams\n+\t\tint paramsCount = env->GetArrayLength(algoParams);\n+        for (int i=0; i<paramsCount; i++) {\n+            jstring param = (jstring) (env->GetObjectArrayElement(algoParams, i));\n+            const char *rawString = env->GetStringUTFChars(param, 0);\n+            paramsList.push_back(rawString);\n+\n+            int M = 32;\n+            if (sscanf(rawString, \"M=%d\", &M) == 1) {\n+                indexDescription=\"HNSW\"+std::to_string(M);\n+            }\n+            env->ReleaseStringUTFChars(param, rawString);\n+\n+        }\n+\t\thas_exception_in_stack(env);\n+\n+\n+\t\t//---- space\n+\t\tconst char *spaceTypeCStr = env->GetStringUTFChars(spaceType, 0);\n+        string spaceTypeString(spaceTypeCStr);\n+        env->ReleaseStringUTFChars(spaceType, spaceTypeCStr);\n+        has_exception_in_stack(env);\n+\t\t// space mapping faiss::MetricType\n+\t\tif(mapMetric.find(spaceTypeString) != mapMetric.end()) {\n+\t\t\tmetric = mapMetric[spaceTypeString];\n+\t\t}\n+\n+\t\t//---- Create IndexWriter from faiss index_factory\n+\t\tindexWriter.reset(faiss::index_factory(dim, indexDescription.data(), metric));\n+\n+\t\t//Preparation And TODO Verify IndexWriter\n+\t\t//Some Param Can not Create from IndexFactory, Like HNSW efSearch and efCOnstruction\n+\t\t//----FOR HNSW 1st PARAM: M(HNSW32->M=32), efConstruction, efSearch\n+\t\tif(indexDescription.find(\"HNSW\") != std::string::npos) {\n+\t\t    for(int i = 0; i < paramsCount; ++i) {\n+\t\t        const string& param = paramsList[i];\n+\t\t        int efConstruction = 40; //default\n+\t\t        int efSearch = 16;//default\n+\t\t        if(param.find(\"efConstruction\") != std::string::npos &&\n+\t\t            sscanf(param.data(), \"efConstruction=%d\", &efConstruction) == 1) {\n+                        faiss::IndexHNSW* ihp = reinterpret_cast<faiss::IndexHNSW*>(indexWriter.get());\n+                        ihp->hnsw.efConstruction = efConstruction;\n+\t\t        } else if (param.find(\"efSearch\") != std::string::npos &&\n+                            sscanf(param.data(), \"efSearch=%d\", &efSearch) == 1){\n+                        faiss::IndexHNSW* ihp = reinterpret_cast<faiss::IndexHNSW*>(indexWriter.get());\n+                        ihp->hnsw.efSearch = efSearch;\n+\t\t        }\n+\t\t    }\n+\t\t}\n+\n+\t\t//---- Do Index\n+\t\t//----- 1. Train\n+        if(!indexWriter->is_trained) {\n+\t\t\t//TODO if we use like PQ, we have to train dataset\n+\t\t\t// but when a lucene segment only one document, it\n+\t\t\t// can not train the data.\n+\t\t}\n+\t\t//----- 2. Add IDMap\n+\t\t// default all use self defined IndexIDMap cause some class no add_with_ids\n+\t\tfaiss::IndexIDMap idMap =  faiss::IndexIDMap(indexWriter.get());\n+\t\tidMap.add_with_ids(idVector.size(), dataset.data(), idVector.data());\n+\n+\t\t//----- 3. WriteIndex\n+\t\tfaiss::write_index(&idMap, indexPathString.c_str());\n+\t\t\n+\t\t//Explicit delete object\n+\t\tfaiss::Index* indexPointer = indexWriter.release();\n+\t\tif(indexPointer) delete indexPointer;\n+\n+\t}\n+\tcatch(...) {\n+\t\tfaiss::Index* indexPointer = indexWriter.release();\n+\t\tif(indexPointer) delete indexPointer;\n+\t\tcatch_cpp_exception_and_throw_java(env);\n+\t}\n+}\n+\n+\n+JNIEXPORT jobjectArray JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex_queryIndex\n+(JNIEnv* env, jclass cls, jlong indexPointer, jfloatArray queryVector, jint k)\n+{\n+\tfaiss::Index *indexReader = nullptr;\n+\ttry {\n+\t\tindexReader = reinterpret_cast<faiss::Index*>(indexPointer);\n+\t\tfloat* rawQueryvector = env->GetFloatArrayElements(queryVector, 0);\n+\t\tint dim\t= env->GetArrayLength(queryVector);\n+\n+\t\tstd::vector<float> dis(k * dim);\n+\t\tstd::vector<faiss::Index::idx_t> ids( k * dim);\n+\t\tindexReader->search(1, rawQueryvector, k, dis.data(), ids.data());\n+\t\tenv->ReleaseFloatArrayElements(queryVector, rawQueryvector, 0);\n+\t\thas_exception_in_stack(env);\n+\n+\t\tint resultSize = k;\n+\t\t//if result is not enough, padded with -1s\n+\t\tfor(int i = 0; i < k; i++) {\n+\t\t\tif(ids[i] == -1) {\n+\t\t\t\tresultSize = i;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tjclass resultClass = env->FindClass(\"com/amazon/opendistroforelasticsearch/knn/index/KNNQueryResult\");\n+\t\tjmethodID allArgs = env->GetMethodID(resultClass, \"<init>\", \"(IF)V\");\n+\t\tjobjectArray results = env->NewObjectArray(resultSize, resultClass, NULL);\n+\t\tfor(int i = 0; i < resultSize; ++i) {\n+\t\t\tfloat distance = dis[i];\n+\t\t\tlong  id = ids[i];\n+\t\t\tenv->SetObjectArrayElement(results, i, env->NewObject(resultClass, allArgs, id, distance));\n+\t\t}\n+\t\thas_exception_in_stack(env);\n+        return results;\n+\n+\t}\n+\tcatch(...) {\n+\t\tif(indexReader) delete indexReader;\n+\t\tcatch_cpp_exception_and_throw_java(env);\t\n+\t}\n+\treturn NULL;\n+}\n+\n+JNIEXPORT jlong JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex_init\n+(JNIEnv* env, jclass cls,  jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\n+\tfaiss::Index* indexReader = nullptr;\n+\ttry {\n+        const char *indexPathCStr = env->GetStringUTFChars(indexPath, 0);\n+        string indexPathString(indexPathCStr);\n+        env->ReleaseStringUTFChars(indexPath, indexPathCStr);\n+        has_exception_in_stack(env);\n+\t\t//whether set IO_FLAGS = 0 or IO_FLAG_READ_ONLYfaiss::IO_FLAG_READ_ONLY\n+\t\tindexReader = faiss::read_index(indexPathString.c_str(), faiss::IO_FLAG_READ_ONLY);\n+\t\treturn (jlong) indexReader;\n+\t} \n+\tcatch(...) {\n+        if (indexReader) delete indexReader;\n+        catch_cpp_exception_and_throw_java(env);\t\n+\t}\n+\treturn NULL;\n+}\n+\n+/**\n+ * When autoclose class do close, then delete the pointer\n+ * Method GC pointer\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex_gc", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM3MDY1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r556370651", "bodyText": "is there any tools to detect memory leak in JNI code?\nwhen i submit the faiss jni code, i have been writed a demo with valgrind to detect memory leak. but i do not know how to detect it from java test code.", "author": "luyuncheng", "createdAt": "2021-01-13T09:16:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MDY0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE2MDg2OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562160868", "bodyText": "Good point. We used valgrind to detect memory leaks. Last time I remember we build C++ class to call the functions directly and then build the artifact for running valgrind. We could probably help here.", "author": "vamshin", "createdAt": "2021-01-21T20:00:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MDY0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555473326", "bodyText": "Having Faiss part of NmsLibVersion class would add confusion. We should probably have dedicated enum class for Faiss versions? Intension of this class is to hold different versions of same library and refer them from this class incase we happen to maintain more than one version of the library because of compatability issues.", "author": "vamshin", "createdAt": "2021-01-12T02:37:48Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java", "diffHunk": "@@ -25,9 +28,17 @@\n         public String indexLibraryVersion() {\n             return \"KNNIndexV2_0_6\";\n         }\n+    },\n+    VFaiss(\"Faiss\") {", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTkwMDM5OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555900398", "bodyText": "Nice idea! i'll do it", "author": "luyuncheng", "createdAt": "2021-01-12T16:21:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM1OTQ1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r556359455", "bodyText": "How about make\nnmslib: KNNIndex_NMSLIB_V2_0_6,\nfaiss: KNNIndex_FAISS_V1_6_4\nlike this:\npublic enum NmsLibVersion {\n    VNMSLIB_208(\"NMSLIB_208\"){\n        @Override\n        public String indexLibraryVersion() {\n            return \"KNNIndex_NMSLIB_V2_0_8\";\n        }\n    },\n    VFAISS_164(\"FAISS_164\") {\n        @Override\n        public String indexLibraryVersion() {\n            return \"KNNIndex_FAISS_V1_6_4\";\n        }\n    };\n}\n\nor do you have any idea to distinguish the name between nmslib and faiss library.", "author": "luyuncheng", "createdAt": "2021-01-13T08:58:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjE2MjY0Ng==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562162646", "bodyText": "We could have new enum class for FAISS that just holds FAISS versions.  Example\npublic enum FAISSLibVersion {\n\n    /**\n     * Latest available faiss version\n     */\n    V_164(\"164\"){\n        @Override\n        public String indexLibraryVersion() {\n            return \"KNNIndexV2_0_11\";\n        }\n    };\n\n    public static final FAISSLibVersion LATEST = V164;\n\n    public String buildVersion;\n\n    FAISSLibVersion(String buildVersion) {\n        this.buildVersion = buildVersion;\n    }\n\n    /**\n     * FAISS library version used by the KNN codec\n     * @return name\n     */\n    public abstract String indexLibraryVersion();\n}", "author": "vamshin", "createdAt": "2021-01-21T20:04:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMxOTY3MQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563319671", "bodyText": "We could have new enum class for FAISS that just holds FAISS versions. Example\n\nyes, it is great. i added FAISSLibVersion in the latest commits", "author": "luyuncheng", "createdAt": "2021-01-24T16:56:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3MzMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NDI0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555474242", "bodyText": "We should also have some tests that create both nmslib and faiss indices and perform search in the same test and assert right values are retrieved. This is to verify we are not mixing up between library calls.", "author": "vamshin", "createdAt": "2021-01-12T02:41:05Z", "path": "src/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNIFaissTests.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package com.amazon.opendistroforelasticsearch.knn.index;\n+\n+import com.amazon.opendistroforelasticsearch.knn.KNNTestCase;\n+\n+import com.amazon.opendistroforelasticsearch.knn.index.faiss.KNNFIndex;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.lucene.store.Directory;\n+import org.apache.lucene.store.FSDirectory;\n+import org.apache.lucene.store.FilterDirectory;\n+\n+import java.nio.file.Paths;\n+import java.security.AccessController;\n+import java.security.PrivilegedAction;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class KNNJNIFaissTests extends KNNTestCase {", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUyNTAzMQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563525031", "bodyText": "yes, i would add tests for mixed engine and test with exceptions case", "author": "luyuncheng", "createdAt": "2021-01-25T08:07:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NDI0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NjAzOA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555476038", "bodyText": "We should add version information similar to NMSlib to keep it consistent and provides ability to load certain version of the library.", "author": "vamshin", "createdAt": "2021-01-12T02:47:18Z", "path": "src/main/plugin-metadata/plugin-security.policy", "diffHunk": "@@ -1,3 +1,4 @@\n grant {\n     permission java.lang.RuntimePermission \"loadLibrary.KNNIndexV2_0_6\";\n+    permission java.lang.RuntimePermission \"loadLibrary.KNNIndexVFaiss\";", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM1Mzc4OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r556353788", "bodyText": "How about make\nnmslib: KNNIndex_NMSLIB_V2_0_6,\nfaiss: KNNIndex_FAISS_V1_6_4\nlike this:\npublic enum NmsLibVersion {\n    VNMSLIB_208(\"NMSLIB_208\"){\n        @Override\n        public String indexLibraryVersion() {\n            return \"KNNIndex_NMSLIB_V2_0_8\";\n        }\n    },\n    VFAISS_164(\"FAISS_164\") {\n        @Override\n        public String indexLibraryVersion() {\n            return \"KNNIndex_FAISS_V1_6_4\";\n        }\n    };\n}\n\nor do you have any idea to distinguish the name between nmslib and faiss library.\nWith this, we may need to change the package\ncom.amazon.opendistroforelasticsearch.knn.index.v208 to com.amazon.opendistroforelasticsearch.knn.index.nmslib.v208 and com.amazon.opendistroforelasticsearch.knn.index.faiss to com.amazon.opendistroforelasticsearch.knn.index.faiss.v164\nLoad Library:\n    permission java.lang.RuntimePermission \"loadLibrary.KNNIndex_NMSLIB_V2_0_8\";\n    permission java.lang.RuntimePermission \"loadLibrary.KNNIndex_FAISS_V1_6_4\";", "author": "luyuncheng", "createdAt": "2021-01-13T08:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NjAzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NjgxNA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555476814", "bodyText": "package name should have version information similar to nmslib.", "author": "vamshin", "createdAt": "2021-01-12T02:50:02Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/faiss/KNNFIndex.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.amazon.opendistroforelasticsearch.knn.index.faiss;", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMxOTQ3OQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563319479", "bodyText": "in the latest commits, i add faiss version into package and function names.", "author": "luyuncheng", "createdAt": "2021-01-24T16:55:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ3NjgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4MTMwOQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555481309", "bodyText": "How about we move if else check inside the AccessController.doPrivileged. Something like below example\n                AccessController.doPrivileged(\n                        new PrivilegedAction<Void>() {\n                            public Void run() {\n                                if(knnindex)\n                                      KNNIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n                                if(faissindex)\n                                     KNNFIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);      \n                               return null;\n                            }\n      ```", "author": "vamshin", "createdAt": "2021-01-12T03:05:45Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNN80Codec/KNN80DocValuesConsumer.java", "diffHunk": "@@ -98,16 +99,29 @@ public void addKNNBinaryField(FieldInfo field, DocValuesProducer valuesProducer)\n             // Pass the path for the nms library to save the file\n             String tempIndexPath = indexPath + TEMP_SUFFIX;\n             Map<String, String> fieldAttributes = field.attributes();\n+            String knnEngine = fieldAttributes.getOrDefault(KNNConstants.KNNEngine, KNNSettings.INDEX_KNN_DEFAULT_ENGINE);\n             String spaceType = fieldAttributes.getOrDefault(KNNConstants.SPACE_TYPE, SpaceTypes.l2.getValue());\n             String[] algoParams = getKNNIndexParams(fieldAttributes);\n-            AccessController.doPrivileged(\n-                    new PrivilegedAction<Void>() {\n-                        public Void run() {\n-                            KNNIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n-                            return null;\n+\n+            if(knnEngine.contains(NmsLibVersion.VFaiss.getBuildVersion())) {\n+                AccessController.doPrivileged(\n+                        new PrivilegedAction<Void>() {\n+                            public Void run() {\n+                                KNNFIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n+                                return null;\n+                            }\n+                        }\n+                );\n+            } else {\n+                AccessController.doPrivileged(\n+                        new PrivilegedAction<Void>() {\n+                            public Void run() {\n+                                KNNIndex.saveIndex(pair.docs, pair.vectors, tempIndexPath, algoParams, spaceType);\n+                                return null;\n+                            }\n                         }\n-                    }\n-            );\n+                );\n+            }", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NTU2NA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555485564", "bodyText": "How about we pull out the methods in KNNFIndex and KNNIndex to interface so that we could refer with one object to keep it more cleaner? Something like\nKNNIndex index;\nif (fieldAttributes.containsValue(NmsLibVersion.V206.getBuildVersion())) {\n       index = knnIndexCache.getIndex(indexPath.toString(), knnQuery.getIndexName());\n} else {\n       index = knnIndexCache.getFIndex(indexPath.toString(), knnQuery.getIndexName());\n}\nresults = index.queryIndex(knnQuery.getQueryVector(), knnQuery.getK());", "author": "vamshin", "createdAt": "2021-01-12T03:21:30Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java", "diffHunk": "@@ -97,11 +100,21 @@ public Scorer scorer(LeafReaderContext context) throws IOException {\n              */\n \n             Path indexPath = PathUtils.get(directory, hnswFiles.get(0));\n-            final KNNIndex index = knnIndexCache.getIndex(indexPath.toString(), knnQuery.getIndexName());\n-            final KNNQueryResult[] results = index.queryIndex(\n-                    knnQuery.getQueryVector(),\n-                    knnQuery.getK()\n-            );\n+            final KNNQueryResult[] results;\n+\n+            if (fieldAttributes.containsValue(NmsLibVersion.V206.getBuildVersion())) {", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjM0OTI3Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r556349277", "bodyText": "this is may make the log of changes in KNNIndex. In KNNIndex class, it would load the specific library, if we want to pull out the methods getIndex, we need an abstraction of KNNIndex and verify the engine we are using.\nLet me think about it how to do it.", "author": "luyuncheng", "createdAt": "2021-01-13T08:42:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NTU2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUzODk1Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563538952", "bodyText": "How about we pull out the methods in KNNFIndex and KNNIndex to interface so that we could refer with one object to keep it more cleaner? Something like\n\nin the latest commits, I used KNNIndex as abstract class. KNNFaissIndex and KNNNmsLibIndex extends the KNNINdex.\nKNNIndexCacheEntry only save the KNNIndex.\nif you have any other idea, pls let me know", "author": "luyuncheng", "createdAt": "2021-01-25T08:32:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NTU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ4NTg3MA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r555485870", "bodyText": "This class has core logic and would need some insights into way faiss library operates to review the code. I plan to visit this code once I have understanding of faiss interface.", "author": "vamshin", "createdAt": "2021-01-12T03:22:46Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex.h\"", "originalCommit": "1a44194c9439c15bf073e62a0e61137ab5b9a301", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ff99c4c486cb9c6cc5e4971876130da5022fc3c7", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ff99c4c486cb9c6cc5e4971876130da5022fc3c7", "message": "Update CMakeLists.txt\n\nupdate CMakeLists.txt", "committedDate": "2021-01-12T09:21:13Z", "type": "commit"}, {"oid": "d3d9baac6cb0c49b26255df095e7f69ba28c1f68", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d3d9baac6cb0c49b26255df095e7f69ba28c1f68", "message": "Update CMakeLists.txt", "committedDate": "2021-01-12T09:24:37Z", "type": "commit"}, {"oid": "afa1b5c517576ffb786bd31d035d57549f342fa3", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/afa1b5c517576ffb786bd31d035d57549f342fa3", "message": "Update build.gradle\n\nFixed depends On in gradle", "committedDate": "2021-01-12T09:37:21Z", "type": "commit"}, {"oid": "ce389f45d8a546b960e3dba2bf5fe8f116eb60a9", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ce389f45d8a546b960e3dba2bf5fe8f116eb60a9", "message": "Update com_amazon_opendistroforelasticsearch_knn_index_faiss_KNNFIndex.cpp", "committedDate": "2021-01-12T09:49:45Z", "type": "commit"}, {"oid": "716557464a362c5784d98ef5d8c09f8f5e10b175", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/716557464a362c5784d98ef5d8c09f8f5e10b175", "message": "Update CMakeLists.txt", "committedDate": "2021-01-12T10:43:01Z", "type": "commit"}, {"oid": "3d1670d48e029e1dde1187d79dd84d511933c22c", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3d1670d48e029e1dde1187d79dd84d511933c22c", "message": "Merge branch 'faiss' into faiss_dev", "committedDate": "2021-01-12T11:00:09Z", "type": "commit"}, {"oid": "3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3d0a2de094f2bfb6a69c1a9075c00d31cca843e1", "message": "Update KNNCircuitBreakerIT.java", "committedDate": "2021-01-12T12:04:37Z", "type": "commit"}, {"oid": "698fbeaf8cdac40bb7f23eb3a0038aec06e22515", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/698fbeaf8cdac40bb7f23eb3a0038aec06e22515", "message": "Update KNNCircuitBreakerIT.java", "committedDate": "2021-01-12T12:07:30Z", "type": "commit"}, {"oid": "890d6f75ea7c5f0fa3d4f9f6da1b031ef86a0334", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/890d6f75ea7c5f0fa3d4f9f6da1b031ef86a0334", "message": "Update KNNCircuitBreakerIT.java", "committedDate": "2021-01-12T12:07:47Z", "type": "commit"}, {"oid": "8b08b4eb1efdb624c9ea3e79ce825fcd2121c2f0", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/8b08b4eb1efdb624c9ea3e79ce825fcd2121c2f0", "message": "Update KNNCodecTestCase.java", "committedDate": "2021-01-12T12:33:02Z", "type": "commit"}, {"oid": "8fd12205bc17f3a3e28d05ef6921c8f6899dfb9d", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/8fd12205bc17f3a3e28d05ef6921c8f6899dfb9d", "message": "Merge pull request #7 from luyuncheng/faiss_dev\n\nFixed using CI run  integration tests", "committedDate": "2021-01-12T12:42:32Z", "type": "commit"}, {"oid": "381dd58821e40fdc21f3510310d669d6d0c96d64", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/381dd58821e40fdc21f3510310d669d6d0c96d64", "message": "Merge branch 'master' into faiss", "committedDate": "2021-01-12T12:46:07Z", "type": "commit"}, {"oid": "20672dfa243e65b7245f1dcf820904eba3146f9c", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/20672dfa243e65b7245f1dcf820904eba3146f9c", "message": "Update test-workflow.yml", "committedDate": "2021-01-12T13:23:27Z", "type": "commit"}, {"oid": "deeefeb81098132d05828af15ea31071f8f9c99a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/deeefeb81098132d05828af15ea31071f8f9c99a", "message": "Merge pull request #8 from luyuncheng/faiss_dev\n\nUpdate test-workflow.yml", "committedDate": "2021-01-12T13:34:03Z", "type": "commit"}, {"oid": "fdeca84996659452b41ff44f27aeee4c4185cb38", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/fdeca84996659452b41ff44f27aeee4c4185cb38", "message": "Merge branch 'master' into faiss_dev\n\n# Conflicts:\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNVectorFieldMapper.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java\n#\tsrc/main/plugin-metadata/plugin-security.policy\n#\tsrc/test/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNNCodecTestCase.java", "committedDate": "2021-01-12T14:16:29Z", "type": "commit"}, {"oid": "0423466cf09e6747b26141ddfc581903c806fdff", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/0423466cf09e6747b26141ddfc581903c806fdff", "message": "Merge Master Into Faiss", "committedDate": "2021-01-12T14:23:09Z", "type": "commit"}, {"oid": "4d2960d275dc0bb61f5fef8c28a7407e14b97ceb", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/4d2960d275dc0bb61f5fef8c28a7407e14b97ceb", "message": "Merge Master Into Faiss", "committedDate": "2021-01-12T15:09:39Z", "type": "commit"}, {"oid": "654cb52e17296562182ece3bcffc80b4258fa552", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/654cb52e17296562182ece3bcffc80b4258fa552", "message": "Merge Master Into Faiss", "committedDate": "2021-01-12T15:43:18Z", "type": "commit"}, {"oid": "f549e3ef56c60bd32d6d0b5a79ab1020b2c047a1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/f549e3ef56c60bd32d6d0b5a79ab1020b2c047a1", "message": "Merge branch 'faiss' into faiss_dev", "committedDate": "2021-01-12T15:50:11Z", "type": "commit"}, {"oid": "98d44d1e91818216dc31c7eb4e3df210f5c25906", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/98d44d1e91818216dc31c7eb4e3df210f5c25906", "message": "Merge pull request #10 from luyuncheng/faiss_dev\n\nMerge Upstream Maser into faiss", "committedDate": "2021-01-12T16:09:39Z", "type": "commit"}, {"oid": "243eb81c1928828a0b897d1ab3d17c76a4a11acc", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/243eb81c1928828a0b897d1ab3d17c76a4a11acc", "message": "move IndexClass check inside the AccessController.doPrivileged", "committedDate": "2021-01-13T08:45:23Z", "type": "commit"}, {"oid": "3c2e397dfa6a6cdb6371e7f7e00f881f0b4ae854", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3c2e397dfa6a6cdb6371e7f7e00f881f0b4ae854", "message": "Add Tests for Circuit breaker test with different engine", "committedDate": "2021-01-18T12:39:59Z", "type": "commit"}, {"oid": "f23196502a4705636c6d4040f181fcb83521be6a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/f23196502a4705636c6d4040f181fcb83521be6a", "message": "1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-20T12:39:13Z", "type": "commit"}, {"oid": "3bdbc436164e3eb288343ad292951ae29e8f346a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3bdbc436164e3eb288343ad292951ae29e8f346a", "message": "Update CMakeLists.txt\n\nupdate Lib Version", "committedDate": "2021-01-20T12:41:15Z", "type": "commit"}, {"oid": "ce141a3b1a68ecf6be737a73f3c64f6863509075", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ce141a3b1a68ecf6be737a73f3c64f6863509075", "message": "Update CMakeLists.txt", "committedDate": "2021-01-20T12:48:23Z", "type": "commit"}, {"oid": "652c329f06e2b14f2c769162a0546cee52b1d250", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/652c329f06e2b14f2c769162a0546cee52b1d250", "message": "Update CMakeLists.txt", "committedDate": "2021-01-20T13:05:42Z", "type": "commit"}, {"oid": "667281433fb2da253e00d4250f6b11f22b75a5ee", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/667281433fb2da253e00d4250f6b11f22b75a5ee", "message": "Update KNNWeight.java", "committedDate": "2021-01-20T13:21:29Z", "type": "commit"}, {"oid": "b08d2d996c8ca47613181c13154484569831098f", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/b08d2d996c8ca47613181c13154484569831098f", "message": "Update CMakeLists.txt", "committedDate": "2021-01-20T13:23:57Z", "type": "commit"}, {"oid": "f4ebd79541a83db4c0fa898d60218ba314277a88", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/f4ebd79541a83db4c0fa898d60218ba314277a88", "message": "1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-20T13:30:23Z", "type": "commit"}, {"oid": "df4c2185019a1df1d86d74cbb04ed6f6017ba8af", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/df4c2185019a1df1d86d74cbb04ed6f6017ba8af", "message": "Merge remote-tracking branch 'origin/faiss_dev_libversion' into faiss_dev_libversion", "committedDate": "2021-01-20T13:31:03Z", "type": "commit"}, {"oid": "1777bd14ab9e8dc5982b28a09351b82b26e2bf4a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1777bd14ab9e8dc5982b28a09351b82b26e2bf4a", "message": "1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-20T13:39:23Z", "type": "commit"}, {"oid": "576a8eb0ae2c12e64e2e4026630e100f6cc0ef4c", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/576a8eb0ae2c12e64e2e4026630e100f6cc0ef4c", "message": "Merge pull request #11 from luyuncheng/faiss_dev_libversion\n\nAdd Faiss and nmslib LibVersion into knn plugin", "committedDate": "2021-01-20T13:50:18Z", "type": "commit"}, {"oid": "d37a523a778eaed5959175fbe8d1e202721eafac", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d37a523a778eaed5959175fbe8d1e202721eafac", "message": "Add NmsLib Version And Faiss Version into KNN Plugin\n\n1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-20T14:12:06Z", "type": "commit"}, {"oid": "7c83e70d4d9da5e406f12c8f49735a9583b529a8", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/7c83e70d4d9da5e406f12c8f49735a9583b529a8", "message": "Merge pull request #13 from opendistro-for-elasticsearch/master\n\nUpdate Upstream Master", "committedDate": "2021-01-22T15:32:29Z", "type": "commit"}, {"oid": "dd179b571fc218c4ee3d1386d015b83615f4e3de", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/dd179b571fc218c4ee3d1386d015b83615f4e3de", "message": "1. Add NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-22T16:01:20Z", "type": "commit"}, {"oid": "cd7e3e8545304f713ef67e33c8093d9f77ecb6c1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/cd7e3e8545304f713ef67e33c8093d9f77ecb6c1", "message": "1. Merge remote-tracking branch 'origin/master' into faiss_dev\n2. Make Faiss Version into code\n3. Update Hnswlib to 2.0.10\n\n# Conflicts:\n#\tjni/CMakeLists.txt\n#\tjni/include/com_amazon_opendistroforelasticsearch_knn_index_nmslib_v208_KNNIndex.h\n#\tjni/include/com_amazon_opendistroforelasticsearch_knn_index_v2011_KNNIndex.h\n#\tjni/include/com_amazon_opendistroforelasticsearch_knn_index_v208_KNNIndex.h\n#\tjni/src/com_amazon_opendistroforelasticsearch_knn_index_nmslib_v208_KNNIndex.cpp\n#\tjni/src/com_amazon_opendistroforelasticsearch_knn_index_v2011_KNNIndex.cpp\n#\tjni/src/com_amazon_opendistroforelasticsearch_knn_index_v208_KNNIndex.cpp\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexShard.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNWeight.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/codec/KNN80Codec/KNN80DocValuesConsumer.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/nmslib/v208/KNNIndex.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/util/NmsLibVersion.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/v2011/KNNIndex.java\n#\tsrc/main/java/com/amazon/opendistroforelasticsearch/knn/index/v208/KNNIndex.java\n#\tsrc/main/plugin-metadata/plugin-security.policy\n#\tsrc/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCacheTests.java\n#\tsrc/test/java/com/amazon/opendistroforelasticsearch/knn/index/KNNJNITests.java", "committedDate": "2021-01-22T16:38:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI1OTExMg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562259112", "bodyText": "I dont think we need to add this branch to CI action, given that it is a development branch. Please remove. Once review finishes, we will check into faiss branch and develop/test from there. Then, once we are ready, we can create another PR to master.", "author": "jmazanec15", "createdAt": "2021-01-21T23:14:03Z", "path": ".github/workflows/CI.yml", "diffHunk": "@@ -4,6 +4,7 @@ on:\n     branches:\n       - master\n       - opendistro-*\n+      - faiss*", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI4MzI1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563283255", "bodyText": "ok\uff0ci'll fix it", "author": "luyuncheng", "createdAt": "2021-01-24T12:14:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI1OTExMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjI1OTkzOQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562259939", "bodyText": "Same as above. Please remove.", "author": "jmazanec15", "createdAt": "2021-01-21T23:16:01Z", "path": ".github/workflows/test-workflow.yml", "diffHunk": "@@ -5,10 +5,12 @@ on:\n     branches:\n       - master\n       - opendistro-*\n+      - faiss*\n   push:\n     branches:\n       - master\n       - opendistro-*\n+      - faiss*", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MTg2Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562941862", "bodyText": "I think this might be better for CMakeLists.txt: https://gist.github.com/jmazanec15/da1e68aed9073c7d4706597ba8ef2087.", "author": "jmazanec15", "createdAt": "2021-01-22T22:09:42Z", "path": "jniFaiss/CMakeLists.txt", "diffHunk": "@@ -0,0 +1,108 @@\n+cmake_minimum_required(VERSION 2.8)\n+\n+project(KNNIndex_FAISS)", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI4MzQwNQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563283405", "bodyText": "nice code! i'll use this one", "author": "luyuncheng", "createdAt": "2021-01-24T12:15:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MTg2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MjY0Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562942642", "bodyText": "Doesn't FAISS also have cosine space?", "author": "jmazanec15", "createdAt": "2021-01-22T22:11:36Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5NTg1Mw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563295853", "bodyText": "In Doc Faiss-indexes , i added inner product, which means If we have normalized vectors, the inner product becomes cosine similarity.\nAnd there is some issues talk about this: facebookresearch/faiss#593", "author": "luyuncheng", "createdAt": "2021-01-24T13:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MjY0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDEwNjA2Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r564106067", "bodyText": "Oh interesting. That makes sense.", "author": "jmazanec15", "createdAt": "2021-01-25T23:11:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MjY0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MzA5Mg==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562943092", "bodyText": "Can you add a TODO for future to abstract out common logic from JNI levels? This does not have to be completed in this PR, but we should do it in the future.", "author": "jmazanec15", "createdAt": "2021-01-22T22:12:50Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}\n+};\n+\n+extern \"C\"\n+\n+struct JavaException {", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MzY5Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562943697", "bodyText": "I think instead of setting L2 as default, we should just make sure that spaceType is passed in and is valid. Setting L2 as default here could lead to silent failures.", "author": "jmazanec15", "createdAt": "2021-01-22T22:14:36Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}\n+};\n+\n+extern \"C\"\n+\n+struct JavaException {\n+    JavaException(JNIEnv* env, const char* type = \"\", const char* message = \"\")\n+    {\n+        jclass newExcCls = env->FindClass(type);\n+        if (newExcCls != NULL)\n+            env->ThrowNew(newExcCls, message);\n+    }\n+};\n+\n+inline void has_exception_in_stack(JNIEnv* env)\n+{\n+    if (env->ExceptionCheck() == JNI_TRUE)\n+        throw std::runtime_error(\"Exception Occured\");\n+}\n+\n+void catch_cpp_exception_and_throw_java(JNIEnv* env)\n+{\n+    try {\n+        throw;\n+    }\n+    catch (const std::bad_alloc& rhs) {\n+        JavaException(env, \"java/io/IOException\", rhs.what());\n+    }\n+    catch (const std::runtime_error& re) {\n+        JavaException(env, \"java/lang/Exception\", re.what());\n+    }\n+    catch (const std::exception& e) {\n+        JavaException(env, \"java/lang/Exception\", e.what());\n+    }\n+    catch (...) {\n+        JavaException(env, \"java/lang/Exception\", \"Unknown exception occured\");\n+    }\n+}\n+\n+/**\n+ * Method: saveIndex\n+ *\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_saveIndex\n+(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\tvector<int64_t> idVector;\n+\tvector<float>   dataset;\n+\tvector<string> paramsList;\n+\tstring indexDescription = \"HNSW32\";\n+\tfaiss::MetricType metric = faiss::METRIC_L2;", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzQ3MDAyNA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563470024", "bodyText": "L72 just init a default value. at L121 i verify the Metric Space:\nif(mapMetric.find(spaceTypeString) != mapMetric.end()) {\n    metric = mapMetric[spaceTypeString];\n}\n\nI have a question: if we verify the metricSpace in the jni code. this may cause ES shard failed assert when an invalid space param passed in jni code.  should i throw an exception when mapMetric can not find spaceTypeString?", "author": "luyuncheng", "createdAt": "2021-01-25T05:26:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0MzY5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0Mzg5Mw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562943893", "bodyText": "Indentation in this file looks off. Could you please fix?", "author": "jmazanec15", "createdAt": "2021-01-22T22:15:10Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}\n+};\n+\n+extern \"C\"\n+\n+struct JavaException {\n+    JavaException(JNIEnv* env, const char* type = \"\", const char* message = \"\")\n+    {\n+        jclass newExcCls = env->FindClass(type);\n+        if (newExcCls != NULL)\n+            env->ThrowNew(newExcCls, message);\n+    }\n+};\n+\n+inline void has_exception_in_stack(JNIEnv* env)\n+{\n+    if (env->ExceptionCheck() == JNI_TRUE)\n+        throw std::runtime_error(\"Exception Occured\");\n+}\n+\n+void catch_cpp_exception_and_throw_java(JNIEnv* env)\n+{\n+    try {\n+        throw;\n+    }\n+    catch (const std::bad_alloc& rhs) {\n+        JavaException(env, \"java/io/IOException\", rhs.what());\n+    }\n+    catch (const std::runtime_error& re) {\n+        JavaException(env, \"java/lang/Exception\", re.what());\n+    }\n+    catch (const std::exception& e) {\n+        JavaException(env, \"java/lang/Exception\", e.what());\n+    }\n+    catch (...) {\n+        JavaException(env, \"java/lang/Exception\", \"Unknown exception occured\");\n+    }\n+}\n+\n+/**\n+ * Method: saveIndex\n+ *\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_saveIndex\n+(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\tvector<int64_t> idVector;\n+\tvector<float>   dataset;\n+\tvector<string> paramsList;\n+\tstring indexDescription = \"HNSW32\";\n+\tfaiss::MetricType metric = faiss::METRIC_L2;\n+\tstd::unique_ptr<faiss::Index> indexWriter;\n+\tint dim = 0;\n+\ttry {\n+\t\t//---- ids\n+\t\tint* object_ids = NULL;\n+\t\tobject_ids = env->GetIntArrayElements(ids, 0);\n+\t\tfor(int i = 0; i < env->GetArrayLength(ids); ++i) {\n+\t\t\tidVector.push_back(object_ids[i]);\n+\t\t}\n+\t\tenv->ReleaseIntArrayElements(ids, object_ids, 0);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- vectors\n+\t\tfor (int i = 0; i < env->GetArrayLength(vectors); ++i) {\n+\t\t\tjfloatArray vectorArray = (jfloatArray)env->GetObjectArrayElement(vectors, i);\n+\t\t\tfloat* vector = env->GetFloatArrayElements(vectorArray, 0);\n+\t\t\tdim = env->GetArrayLength(vectorArray);\n+\t\t\tfor(int j = 0; j < dim; ++j) {\n+\t\t\t\tdataset.push_back(vector[j]);\n+\t\t\t}\n+\t\t\tenv->ReleaseFloatArrayElements(vectorArray, vector, 0);\n+\t\t}\n+\t\thas_exception_in_stack(env);\n+\n+\t\t//---- indexPath\n+\t\tconst char *indexString = env->GetStringUTFChars(indexPath, 0);\n+        string indexPathString(indexString);", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NDQ1MQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562944451", "bodyText": "Could you add a TODO here to eventually parametrize this? I think we should be able to support any Faiss index in the future.", "author": "jmazanec15", "createdAt": "2021-01-22T22:16:35Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}\n+};\n+\n+extern \"C\"\n+\n+struct JavaException {\n+    JavaException(JNIEnv* env, const char* type = \"\", const char* message = \"\")\n+    {\n+        jclass newExcCls = env->FindClass(type);\n+        if (newExcCls != NULL)\n+            env->ThrowNew(newExcCls, message);\n+    }\n+};\n+\n+inline void has_exception_in_stack(JNIEnv* env)\n+{\n+    if (env->ExceptionCheck() == JNI_TRUE)\n+        throw std::runtime_error(\"Exception Occured\");\n+}\n+\n+void catch_cpp_exception_and_throw_java(JNIEnv* env)\n+{\n+    try {\n+        throw;\n+    }\n+    catch (const std::bad_alloc& rhs) {\n+        JavaException(env, \"java/io/IOException\", rhs.what());\n+    }\n+    catch (const std::runtime_error& re) {\n+        JavaException(env, \"java/lang/Exception\", re.what());\n+    }\n+    catch (const std::exception& e) {\n+        JavaException(env, \"java/lang/Exception\", e.what());\n+    }\n+    catch (...) {\n+        JavaException(env, \"java/lang/Exception\", \"Unknown exception occured\");\n+    }\n+}\n+\n+/**\n+ * Method: saveIndex\n+ *\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_saveIndex\n+(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\tvector<int64_t> idVector;\n+\tvector<float>   dataset;\n+\tvector<string> paramsList;\n+\tstring indexDescription = \"HNSW32\";", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NTA2NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562945065", "bodyText": "Why do we need to sscanf here?", "author": "jmazanec15", "createdAt": "2021-01-22T22:18:10Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}\n+};\n+\n+extern \"C\"\n+\n+struct JavaException {\n+    JavaException(JNIEnv* env, const char* type = \"\", const char* message = \"\")\n+    {\n+        jclass newExcCls = env->FindClass(type);\n+        if (newExcCls != NULL)\n+            env->ThrowNew(newExcCls, message);\n+    }\n+};\n+\n+inline void has_exception_in_stack(JNIEnv* env)\n+{\n+    if (env->ExceptionCheck() == JNI_TRUE)\n+        throw std::runtime_error(\"Exception Occured\");\n+}\n+\n+void catch_cpp_exception_and_throw_java(JNIEnv* env)\n+{\n+    try {\n+        throw;\n+    }\n+    catch (const std::bad_alloc& rhs) {\n+        JavaException(env, \"java/io/IOException\", rhs.what());\n+    }\n+    catch (const std::runtime_error& re) {\n+        JavaException(env, \"java/lang/Exception\", re.what());\n+    }\n+    catch (const std::exception& e) {\n+        JavaException(env, \"java/lang/Exception\", e.what());\n+    }\n+    catch (...) {\n+        JavaException(env, \"java/lang/Exception\", \"Unknown exception occured\");\n+    }\n+}\n+\n+/**\n+ * Method: saveIndex\n+ *\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_saveIndex\n+(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\tvector<int64_t> idVector;\n+\tvector<float>   dataset;\n+\tvector<string> paramsList;\n+\tstring indexDescription = \"HNSW32\";\n+\tfaiss::MetricType metric = faiss::METRIC_L2;\n+\tstd::unique_ptr<faiss::Index> indexWriter;\n+\tint dim = 0;\n+\ttry {\n+\t\t//---- ids\n+\t\tint* object_ids = NULL;\n+\t\tobject_ids = env->GetIntArrayElements(ids, 0);\n+\t\tfor(int i = 0; i < env->GetArrayLength(ids); ++i) {\n+\t\t\tidVector.push_back(object_ids[i]);\n+\t\t}\n+\t\tenv->ReleaseIntArrayElements(ids, object_ids, 0);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- vectors\n+\t\tfor (int i = 0; i < env->GetArrayLength(vectors); ++i) {\n+\t\t\tjfloatArray vectorArray = (jfloatArray)env->GetObjectArrayElement(vectors, i);\n+\t\t\tfloat* vector = env->GetFloatArrayElements(vectorArray, 0);\n+\t\t\tdim = env->GetArrayLength(vectorArray);\n+\t\t\tfor(int j = 0; j < dim; ++j) {\n+\t\t\t\tdataset.push_back(vector[j]);\n+\t\t\t}\n+\t\t\tenv->ReleaseFloatArrayElements(vectorArray, vector, 0);\n+\t\t}\n+\t\thas_exception_in_stack(env);\n+\n+\t\t//---- indexPath\n+\t\tconst char *indexString = env->GetStringUTFChars(indexPath, 0);\n+        string indexPathString(indexString);\n+        env->ReleaseStringUTFChars(indexPath, indexString);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- algoParams\n+\t\tint paramsCount = env->GetArrayLength(algoParams);\n+        for (int i=0; i<paramsCount; i++) {\n+            jstring param = (jstring) (env->GetObjectArrayElement(algoParams, i));\n+            const char *rawString = env->GetStringUTFChars(param, 0);\n+            paramsList.push_back(rawString);\n+\n+            int M = 32;\n+            if (sscanf(rawString, \"M=%d\", &M) == 1) {", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMxOTI0NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563319245", "bodyText": "Why do we need to sscanf here?\n\nIn the KNN plugin we would make algoParam like: M=32, efSearch=20, As faiss index factory docs shows, if M=32 we need use string: HNSW32 for index Description. so i use sscanf to get M.\ni think we need an adapter to match different knnEngine algorithms params. if you have good idea, pls let me know.", "author": "luyuncheng", "createdAt": "2021-01-24T16:52:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NTA2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDEwNTU2NA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r564105564", "bodyText": "Ah got it. I think makes sense.", "author": "jmazanec15", "createdAt": "2021-01-25T23:10:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NTA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NTU0OQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562945549", "bodyText": "Yeah I was thinking about this a little bit. It seems like it might make sense to fall back to a flat index if we do not have enough points to train. But we can think about this later.", "author": "jmazanec15", "createdAt": "2021-01-22T22:19:18Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}\n+};\n+\n+extern \"C\"\n+\n+struct JavaException {\n+    JavaException(JNIEnv* env, const char* type = \"\", const char* message = \"\")\n+    {\n+        jclass newExcCls = env->FindClass(type);\n+        if (newExcCls != NULL)\n+            env->ThrowNew(newExcCls, message);\n+    }\n+};\n+\n+inline void has_exception_in_stack(JNIEnv* env)\n+{\n+    if (env->ExceptionCheck() == JNI_TRUE)\n+        throw std::runtime_error(\"Exception Occured\");\n+}\n+\n+void catch_cpp_exception_and_throw_java(JNIEnv* env)\n+{\n+    try {\n+        throw;\n+    }\n+    catch (const std::bad_alloc& rhs) {\n+        JavaException(env, \"java/io/IOException\", rhs.what());\n+    }\n+    catch (const std::runtime_error& re) {\n+        JavaException(env, \"java/lang/Exception\", re.what());\n+    }\n+    catch (const std::exception& e) {\n+        JavaException(env, \"java/lang/Exception\", e.what());\n+    }\n+    catch (...) {\n+        JavaException(env, \"java/lang/Exception\", \"Unknown exception occured\");\n+    }\n+}\n+\n+/**\n+ * Method: saveIndex\n+ *\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_saveIndex\n+(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\tvector<int64_t> idVector;\n+\tvector<float>   dataset;\n+\tvector<string> paramsList;\n+\tstring indexDescription = \"HNSW32\";\n+\tfaiss::MetricType metric = faiss::METRIC_L2;\n+\tstd::unique_ptr<faiss::Index> indexWriter;\n+\tint dim = 0;\n+\ttry {\n+\t\t//---- ids\n+\t\tint* object_ids = NULL;\n+\t\tobject_ids = env->GetIntArrayElements(ids, 0);\n+\t\tfor(int i = 0; i < env->GetArrayLength(ids); ++i) {\n+\t\t\tidVector.push_back(object_ids[i]);\n+\t\t}\n+\t\tenv->ReleaseIntArrayElements(ids, object_ids, 0);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- vectors\n+\t\tfor (int i = 0; i < env->GetArrayLength(vectors); ++i) {\n+\t\t\tjfloatArray vectorArray = (jfloatArray)env->GetObjectArrayElement(vectors, i);\n+\t\t\tfloat* vector = env->GetFloatArrayElements(vectorArray, 0);\n+\t\t\tdim = env->GetArrayLength(vectorArray);\n+\t\t\tfor(int j = 0; j < dim; ++j) {\n+\t\t\t\tdataset.push_back(vector[j]);\n+\t\t\t}\n+\t\t\tenv->ReleaseFloatArrayElements(vectorArray, vector, 0);\n+\t\t}\n+\t\thas_exception_in_stack(env);\n+\n+\t\t//---- indexPath\n+\t\tconst char *indexString = env->GetStringUTFChars(indexPath, 0);\n+        string indexPathString(indexString);\n+        env->ReleaseStringUTFChars(indexPath, indexString);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- algoParams\n+\t\tint paramsCount = env->GetArrayLength(algoParams);\n+        for (int i=0; i<paramsCount; i++) {\n+            jstring param = (jstring) (env->GetObjectArrayElement(algoParams, i));\n+            const char *rawString = env->GetStringUTFChars(param, 0);\n+            paramsList.push_back(rawString);\n+\n+            int M = 32;\n+            if (sscanf(rawString, \"M=%d\", &M) == 1) {\n+                indexDescription=\"HNSW\"+std::to_string(M);\n+            }\n+            env->ReleaseStringUTFChars(param, rawString);\n+\n+        }\n+\t\thas_exception_in_stack(env);\n+\n+\n+\t\t//---- space\n+\t\tconst char *spaceTypeCStr = env->GetStringUTFChars(spaceType, 0);\n+        string spaceTypeString(spaceTypeCStr);\n+        env->ReleaseStringUTFChars(spaceType, spaceTypeCStr);\n+        has_exception_in_stack(env);\n+\t\t// space mapping faiss::MetricType\n+\t\tif(mapMetric.find(spaceTypeString) != mapMetric.end()) {\n+\t\t\tmetric = mapMetric[spaceTypeString];\n+\t\t}\n+\n+\t\t//---- Create IndexWriter from faiss index_factory\n+\t\tindexWriter.reset(faiss::index_factory(dim, indexDescription.data(), metric));\n+\n+\t\t//Preparation And TODO Verify IndexWriter\n+\t\t//Some Param Can not Create from IndexFactory, Like HNSW efSearch and efCOnstruction\n+\t\t//----FOR HNSW 1st PARAM: M(HNSW32->M=32), efConstruction, efSearch\n+\t\tif(indexDescription.find(\"HNSW\") != std::string::npos) {\n+\t\t    for(int i = 0; i < paramsCount; ++i) {\n+\t\t        const string& param = paramsList[i];\n+\t\t        int efConstruction = 40; //default\n+\t\t        int efSearch = 16;//default\n+\t\t        if(param.find(\"efConstruction\") != std::string::npos &&\n+\t\t            sscanf(param.data(), \"efConstruction=%d\", &efConstruction) == 1) {\n+                        faiss::IndexHNSW* ihp = reinterpret_cast<faiss::IndexHNSW*>(indexWriter.get());\n+                        ihp->hnsw.efConstruction = efConstruction;\n+\t\t        } else if (param.find(\"efSearch\") != std::string::npos &&\n+                            sscanf(param.data(), \"efSearch=%d\", &efSearch) == 1){\n+                        faiss::IndexHNSW* ihp = reinterpret_cast<faiss::IndexHNSW*>(indexWriter.get());\n+                        ihp->hnsw.efSearch = efSearch;\n+\t\t        }\n+\t\t    }\n+\t\t}\n+\n+\t\t//---- Do Index\n+\t\t//----- 1. Train\n+        if(!indexWriter->is_trained) {\n+\t\t\t//TODO if we use like PQ, we have to train dataset", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NTcyMA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562945720", "bodyText": "Why is this commented out?", "author": "jmazanec15", "createdAt": "2021-01-22T22:19:46Z", "path": "jniFaiss/src/com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.cpp", "diffHunk": "@@ -0,0 +1,272 @@\n+#include \"com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex.h\"\n+\n+#include <cmath>\n+#include <cstdio>\n+#include <cstdlib>\n+#include <string>\n+#include <vector>\n+#include <sys/time.h>\n+#include <omp.h>\n+\n+#include \"faiss/index_factory.h\"\n+#include \"faiss/MetaIndexes.h\"\n+#include \"faiss/index_io.h\"\n+#include \"faiss/IndexHNSW.h\"\n+\n+\n+using std::string;\n+using std::vector;\n+\n+std::unordered_map<string, faiss::MetricType> mapMetric = {\n+        {\"l2\", faiss::METRIC_L2},\n+        {\"innerproduct\", faiss::METRIC_INNER_PRODUCT}\n+};\n+\n+extern \"C\"\n+\n+struct JavaException {\n+    JavaException(JNIEnv* env, const char* type = \"\", const char* message = \"\")\n+    {\n+        jclass newExcCls = env->FindClass(type);\n+        if (newExcCls != NULL)\n+            env->ThrowNew(newExcCls, message);\n+    }\n+};\n+\n+inline void has_exception_in_stack(JNIEnv* env)\n+{\n+    if (env->ExceptionCheck() == JNI_TRUE)\n+        throw std::runtime_error(\"Exception Occured\");\n+}\n+\n+void catch_cpp_exception_and_throw_java(JNIEnv* env)\n+{\n+    try {\n+        throw;\n+    }\n+    catch (const std::bad_alloc& rhs) {\n+        JavaException(env, \"java/io/IOException\", rhs.what());\n+    }\n+    catch (const std::runtime_error& re) {\n+        JavaException(env, \"java/lang/Exception\", re.what());\n+    }\n+    catch (const std::exception& e) {\n+        JavaException(env, \"java/lang/Exception\", e.what());\n+    }\n+    catch (...) {\n+        JavaException(env, \"java/lang/Exception\", \"Unknown exception occured\");\n+    }\n+}\n+\n+/**\n+ * Method: saveIndex\n+ *\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_saveIndex\n+(JNIEnv* env, jclass cls, jintArray ids, jobjectArray vectors, jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\tvector<int64_t> idVector;\n+\tvector<float>   dataset;\n+\tvector<string> paramsList;\n+\tstring indexDescription = \"HNSW32\";\n+\tfaiss::MetricType metric = faiss::METRIC_L2;\n+\tstd::unique_ptr<faiss::Index> indexWriter;\n+\tint dim = 0;\n+\ttry {\n+\t\t//---- ids\n+\t\tint* object_ids = NULL;\n+\t\tobject_ids = env->GetIntArrayElements(ids, 0);\n+\t\tfor(int i = 0; i < env->GetArrayLength(ids); ++i) {\n+\t\t\tidVector.push_back(object_ids[i]);\n+\t\t}\n+\t\tenv->ReleaseIntArrayElements(ids, object_ids, 0);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- vectors\n+\t\tfor (int i = 0; i < env->GetArrayLength(vectors); ++i) {\n+\t\t\tjfloatArray vectorArray = (jfloatArray)env->GetObjectArrayElement(vectors, i);\n+\t\t\tfloat* vector = env->GetFloatArrayElements(vectorArray, 0);\n+\t\t\tdim = env->GetArrayLength(vectorArray);\n+\t\t\tfor(int j = 0; j < dim; ++j) {\n+\t\t\t\tdataset.push_back(vector[j]);\n+\t\t\t}\n+\t\t\tenv->ReleaseFloatArrayElements(vectorArray, vector, 0);\n+\t\t}\n+\t\thas_exception_in_stack(env);\n+\n+\t\t//---- indexPath\n+\t\tconst char *indexString = env->GetStringUTFChars(indexPath, 0);\n+        string indexPathString(indexString);\n+        env->ReleaseStringUTFChars(indexPath, indexString);\n+        has_exception_in_stack(env);\n+\n+\t\t//---- algoParams\n+\t\tint paramsCount = env->GetArrayLength(algoParams);\n+        for (int i=0; i<paramsCount; i++) {\n+            jstring param = (jstring) (env->GetObjectArrayElement(algoParams, i));\n+            const char *rawString = env->GetStringUTFChars(param, 0);\n+            paramsList.push_back(rawString);\n+\n+            int M = 32;\n+            if (sscanf(rawString, \"M=%d\", &M) == 1) {\n+                indexDescription=\"HNSW\"+std::to_string(M);\n+            }\n+            env->ReleaseStringUTFChars(param, rawString);\n+\n+        }\n+\t\thas_exception_in_stack(env);\n+\n+\n+\t\t//---- space\n+\t\tconst char *spaceTypeCStr = env->GetStringUTFChars(spaceType, 0);\n+        string spaceTypeString(spaceTypeCStr);\n+        env->ReleaseStringUTFChars(spaceType, spaceTypeCStr);\n+        has_exception_in_stack(env);\n+\t\t// space mapping faiss::MetricType\n+\t\tif(mapMetric.find(spaceTypeString) != mapMetric.end()) {\n+\t\t\tmetric = mapMetric[spaceTypeString];\n+\t\t}\n+\n+\t\t//---- Create IndexWriter from faiss index_factory\n+\t\tindexWriter.reset(faiss::index_factory(dim, indexDescription.data(), metric));\n+\n+\t\t//Preparation And TODO Verify IndexWriter\n+\t\t//Some Param Can not Create from IndexFactory, Like HNSW efSearch and efCOnstruction\n+\t\t//----FOR HNSW 1st PARAM: M(HNSW32->M=32), efConstruction, efSearch\n+\t\tif(indexDescription.find(\"HNSW\") != std::string::npos) {\n+\t\t    for(int i = 0; i < paramsCount; ++i) {\n+\t\t        const string& param = paramsList[i];\n+\t\t        int efConstruction = 40; //default\n+\t\t        int efSearch = 16;//default\n+\t\t        if(param.find(\"efConstruction\") != std::string::npos &&\n+\t\t            sscanf(param.data(), \"efConstruction=%d\", &efConstruction) == 1) {\n+                        faiss::IndexHNSW* ihp = reinterpret_cast<faiss::IndexHNSW*>(indexWriter.get());\n+                        ihp->hnsw.efConstruction = efConstruction;\n+\t\t        } else if (param.find(\"efSearch\") != std::string::npos &&\n+                            sscanf(param.data(), \"efSearch=%d\", &efSearch) == 1){\n+                        faiss::IndexHNSW* ihp = reinterpret_cast<faiss::IndexHNSW*>(indexWriter.get());\n+                        ihp->hnsw.efSearch = efSearch;\n+\t\t        }\n+\t\t    }\n+\t\t}\n+\n+\t\t//---- Do Index\n+\t\t//----- 1. Train\n+        if(!indexWriter->is_trained) {\n+\t\t\t//TODO if we use like PQ, we have to train dataset\n+\t\t\t// but when a lucene segment only one document, it\n+\t\t\t// can not train the data.\n+\t\t}\n+\t\t//----- 2. Add IDMap\n+\t\t// default all use self defined IndexIDMap cause some class no add_with_ids\n+\t\tfaiss::IndexIDMap idMap =  faiss::IndexIDMap(indexWriter.get());\n+\t\tidMap.add_with_ids(idVector.size(), dataset.data(), idVector.data());\n+\n+\t\t//----- 3. WriteIndex\n+\t\tfaiss::write_index(&idMap, indexPathString.c_str());\n+\t\t\n+\t\t//Explicit delete object\n+\t\tfaiss::Index* indexPointer = indexWriter.release();\n+\t\tif(indexPointer) delete indexPointer;\n+\n+\t}\n+\tcatch(...) {\n+\t\tfaiss::Index* indexPointer = indexWriter.release();\n+\t\tif(indexPointer) delete indexPointer;\n+\t\tcatch_cpp_exception_and_throw_java(env);\n+\t}\n+}\n+\n+\n+JNIEXPORT jobjectArray JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_queryIndex\n+(JNIEnv* env, jclass cls, jlong indexPointer, jfloatArray queryVector, jint k)\n+{\n+\tfaiss::Index *indexReader = nullptr;\n+\ttry {\n+\t\tindexReader = reinterpret_cast<faiss::Index*>(indexPointer);\n+\t\tfloat* rawQueryvector = env->GetFloatArrayElements(queryVector, 0);\n+\t\tint dim\t= env->GetArrayLength(queryVector);\n+\n+\t\tstd::vector<float> dis(k * dim);\n+\t\tstd::vector<faiss::Index::idx_t> ids( k * dim);\n+\t\tindexReader->search(1, rawQueryvector, k, dis.data(), ids.data());\n+\t\tenv->ReleaseFloatArrayElements(queryVector, rawQueryvector, 0);\n+\t\thas_exception_in_stack(env);\n+\n+\t\tint resultSize = k;\n+\t\t//if result is not enough, padded with -1s\n+\t\tfor(int i = 0; i < k; i++) {\n+\t\t\tif(ids[i] == -1) {\n+\t\t\t\tresultSize = i;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tjclass resultClass = env->FindClass(\"com/amazon/opendistroforelasticsearch/knn/index/KNNQueryResult\");\n+\t\tjmethodID allArgs = env->GetMethodID(resultClass, \"<init>\", \"(IF)V\");\n+\t\tjobjectArray results = env->NewObjectArray(resultSize, resultClass, NULL);\n+\t\tfor(int i = 0; i < resultSize; ++i) {\n+\t\t\tfloat distance = dis[i];\n+\t\t\tlong  id = ids[i];\n+\t\t\tenv->SetObjectArrayElement(results, i, env->NewObject(resultClass, allArgs, id, distance));\n+\t\t}\n+\t\thas_exception_in_stack(env);\n+        return results;\n+\n+\t}\n+\tcatch(...) {\n+\t\tif(indexReader) delete indexReader;\n+\t\tcatch_cpp_exception_and_throw_java(env);\t\n+\t}\n+\treturn NULL;\n+}\n+\n+JNIEXPORT jlong JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_init\n+(JNIEnv* env, jclass cls,  jstring indexPath, jobjectArray algoParams, jstring spaceType)\n+{\n+\n+\tfaiss::Index* indexReader = nullptr;\n+\ttry {\n+        const char *indexPathCStr = env->GetStringUTFChars(indexPath, 0);\n+        string indexPathString(indexPathCStr);\n+        env->ReleaseStringUTFChars(indexPath, indexPathCStr);\n+        has_exception_in_stack(env);\n+\t\t//whether set IO_FLAGS = 0 or IO_FLAG_READ_ONLYfaiss::IO_FLAG_READ_ONLY\n+\t\tindexReader = faiss::read_index(indexPathString.c_str(), faiss::IO_FLAG_READ_ONLY);\n+\t\treturn (jlong) indexReader;\n+\t} \n+\tcatch(...) {\n+        if (indexReader) delete indexReader;\n+        catch_cpp_exception_and_throw_java(env);\t\n+\t}\n+\treturn NULL;\n+}\n+\n+/**\n+ * When autoclose class do close, then delete the pointer\n+ * Method GC pointer\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_gc\n+(JNIEnv* env, jclass cls,  jlong indexPointer)\n+{\n+\ttry {\n+\t\tfaiss::Index *indexWrapper = reinterpret_cast<faiss::Index*>(indexPointer);\n+        has_exception_in_stack(env);\n+        delete indexWrapper;\n+        has_exception_in_stack(env);\n+    }\n+    catch (...) {\n+        catch_cpp_exception_and_throw_java(env);\n+    }\n+}\n+\n+/**\n+ * Method: Global Init\n+ *\n+ */\n+JNIEXPORT void JNICALL Java_com_amazon_opendistroforelasticsearch_knn_index_faiss_v164_KNNFIndex_initLibrary(JNIEnv *, jclass)\n+{\n+\t//set thread 1 cause ES has Search thread\n+\t//TODO make it different at search and write\n+//\tomp_set_num_threads(1);", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzI5Njg3MA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563296870", "bodyText": "i am no sure is it appropriate to set threads as 1 or  reuse the settings:\npublic static final String KNN_ALGO_PARAM_INDEX_THREAD_QTY = \"knn.algo_param.index_thread_qty\";", "author": "luyuncheng", "createdAt": "2021-01-24T13:58:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NTcyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDEwNTM0Nw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r564105347", "bodyText": "I think it probably makes sense to reuse KNN_ALGO_PARAM_INDEX_THREAD_QTY.", "author": "jmazanec15", "createdAt": "2021-01-25T23:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NTcyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NzU4OA==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r562947588", "bodyText": "Seems to me that knnIndex and knnFindex should inherit from some kind of abstract class.", "author": "jmazanec15", "createdAt": "2021-01-22T22:25:22Z", "path": "src/main/java/com/amazon/opendistroforelasticsearch/knn/index/KNNIndexCache.java", "diffHunk": "@@ -320,22 +339,52 @@ public KNNIndexCacheEntry loadIndex(String indexPathUrl, String indexName) throw\n      * upon expiration of the cache.\n      */\n     private static class KNNIndexCacheEntry {\n+\n         private final KNNIndex knnIndex;\n+        private final KNNFIndex knnFindex;\n         private final String indexPathUrl;\n         private final String esIndexName;\n         private final WatcherHandle<FileWatcher> fileWatcherHandle;\n \n         private KNNIndexCacheEntry(final KNNIndex knnIndex, final String indexPathUrl, final String esIndexName,\n                                    final WatcherHandle<FileWatcher> fileWatcherHandle) {\n             this.knnIndex = knnIndex;\n+            this.knnFindex = null;", "originalCommit": "d37a523a778eaed5959175fbe8d1e202721eafac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzMxNzU1NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563317555", "bodyText": "I see. I think we should add a different file extension for faiss graphs as opposed to nmslib graphs. Maybe .faiss_hnsw.\n\nin the latest commit, i use knnEngine name in the index file names like:\nString hnswFileName = String.format(\"%s_%s_%s%s\", \n    state.segmentInfo.name, \n    knnEngine.getLatestBuildVersion(),\n    field.name, \n    KNNCodecUtil.HNSW_EXTENSION);\n\n\nSeems to me that knnIndex and knnFindex should inherit from some kind of abstract class.\n\nyes, you are right. let me think about how to abstract this.", "author": "luyuncheng", "createdAt": "2021-01-24T16:38:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NzU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MzUzNzYwNw==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r563537607", "bodyText": "Seems to me that knnIndex and knnFindex should inherit from some kind of abstract class.\n\nI used KNNIndex as abstract class. KNNFaissIndex and KNNNmsLibIndex extends the KNNINdex.\nKNNIndexCacheEntry only save the KNNIndex.\nif you have any other idea, pls let me know", "author": "luyuncheng", "createdAt": "2021-01-25T08:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NzU4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NDEwNTA4NQ==", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/pull/285#discussion_r564105085", "bodyText": "I think that makes sense. Thanks for making the change!", "author": "jmazanec15", "createdAt": "2021-01-25T23:09:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2Mjk0NzU4OA=="}], "type": "inlineReview"}, {"oid": "9056b858d7f2fab56fdb885a7184c9d3a6316b60", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/9056b858d7f2fab56fdb885a7184c9d3a6316b60", "message": "1. Update Submodule FAISS to new version\n2. Remove no useful libfaiss.a\n3. Update JniFaiss CmakeLists.txt", "committedDate": "2021-01-24T13:04:27Z", "type": "commit"}, {"oid": "a33625cbe034be7b04f19c638bb46724d6384ff1", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/a33625cbe034be7b04f19c638bb46724d6384ff1", "message": "1. Update Submodule FAISS to new version V1.6.5(HASH:88eabe9)", "committedDate": "2021-01-24T13:38:05Z", "type": "commit"}, {"oid": "ee0a3fe92a72855c6177627bca1a6c103991615b", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/ee0a3fe92a72855c6177627bca1a6c103991615b", "message": "1. Update Submodule FAISS to new version V1.6.5(HASH:88eabe9)\n2. Remove no use comments", "committedDate": "2021-01-24T13:41:58Z", "type": "commit"}, {"oid": "d613095a3a418c76dde0f8020c2334eaad1b2c8a", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/d613095a3a418c76dde0f8020c2334eaad1b2c8a", "message": "1. Remove nouse CI branches", "committedDate": "2021-01-24T13:52:49Z", "type": "commit"}, {"oid": "7715563c70b2850b86bff2fe4358791d7b636008", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/7715563c70b2850b86bff2fe4358791d7b636008", "message": "Merge pull request #14 from luyuncheng/faiss_dev\n\nAdd NmsLib Version And Faiss Version into KNN Plugin", "committedDate": "2021-01-24T14:04:20Z", "type": "commit"}, {"oid": "82671ad0d0818d3b69ee42de62f671cb78ba1d48", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/82671ad0d0818d3b69ee42de62f671cb78ba1d48", "message": "1. Fixed Indentation", "committedDate": "2021-01-25T05:10:13Z", "type": "commit"}, {"oid": "bea16d6d5b6c8c48f8b44991c7335e21ed04465e", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/bea16d6d5b6c8c48f8b44991c7335e21ed04465e", "message": "1. Make KNNIndex as abstract class\n2. Add KNNNmsLibIndex and KNNFaissIndex inherit the KNNIndex", "committedDate": "2021-01-25T07:01:14Z", "type": "commit"}, {"oid": "3dc4f1fa6786f004a603e1853fddfd666c431594", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/3dc4f1fa6786f004a603e1853fddfd666c431594", "message": "1. Make KNNIndex as abstract class\n2. Add KNNNmsLibIndex and KNNFaissIndex inherit the KNNIndex\n3. Move JNITests into JNINmsLibTests\n4. Add New JNITests which would mixed knnEngine, and test with exception", "committedDate": "2021-01-25T08:01:56Z", "type": "commit"}, {"oid": "1207bac03b2a5d097bdb59684b273dbb525b6d8e", "url": "https://github.com/opendistro-for-elasticsearch/k-NN/commit/1207bac03b2a5d097bdb59684b273dbb525b6d8e", "message": "Merge pull request #15 from luyuncheng/opendistro-faiss_dev\n\nMake KNNIndex as abstract class", "committedDate": "2021-01-25T08:15:07Z", "type": "commit"}]}