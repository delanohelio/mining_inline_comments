{"pr_number": 2337, "pr_title": "[#2029] Add documentation for the Command Router component", "pr_createdAt": "2020-12-01T13:43:34Z", "pr_url": "https://github.com/eclipse/hono/pull/2337", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5ODI1NA==", "url": "https://github.com/eclipse/hono/pull/2337#discussion_r533498254", "bodyText": "how about\n\n... The Command Router service creates a receiver link scoped to the device's tenant (3) if it doesn't exist yet. ...", "author": "sophokles73", "createdAt": "2020-12-01T15:24:19Z", "path": "site/documentation/content/concepts/command-and-control/index.md", "diffHunk": "@@ -121,3 +129,20 @@ Handling of the command response is done in the same way as shown in the chapter\n \n If a gateway has already subscribed for commands for all its device, it may still subscribe for commands for a particular device (and the other way around).\n The particular device subscription has precedence then in choosing over which subscription protocol/channel to send the command to the gateway.\n+\n+<a name=\"command-router-service\"></a>\n+## New approach using the Command Router service\n+\n+The following diagrams show the message flow if protocol adapters are configured to use the [Command Router service]({{< relref \"/admin-guide/command-router-config\" >}}) instead of the Device Connection service.\n+\n+{{< figure src=\"command_control_concept_cmdrouter_1.svg\" title=\"Command subscription\" >}}\n+\n+In the scenario the device subscribes for commands (1) and the protocol adapter [registers the command consumer]({{< relref \"/api/command-router#register-command-consumer-for-device\" >}}) with the Command Router service, associating the device with its protocol adapter instance identifier (2). The Command Router service creates the receiver link (3) on the tenant-scoped link if it doesn't already exist. Following that, the notification about the device subscription is sent to the application via the AMQP messaging network (4).", "originalCommit": "e35a07882ca97a2eb5c7cbf17c7c6807879fbe6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ5OTAwNA==", "url": "https://github.com/eclipse/hono/pull/2337#discussion_r533499004", "bodyText": ".... an accepted disposition will be sent ...", "author": "sophokles73", "createdAt": "2020-12-01T15:25:16Z", "path": "site/documentation/content/concepts/command-and-control/index.md", "diffHunk": "@@ -121,3 +129,20 @@ Handling of the command response is done in the same way as shown in the chapter\n \n If a gateway has already subscribed for commands for all its device, it may still subscribe for commands for a particular device (and the other way around).\n The particular device subscription has precedence then in choosing over which subscription protocol/channel to send the command to the gateway.\n+\n+<a name=\"command-router-service\"></a>\n+## New approach using the Command Router service\n+\n+The following diagrams show the message flow if protocol adapters are configured to use the [Command Router service]({{< relref \"/admin-guide/command-router-config\" >}}) instead of the Device Connection service.\n+\n+{{< figure src=\"command_control_concept_cmdrouter_1.svg\" title=\"Command subscription\" >}}\n+\n+In the scenario the device subscribes for commands (1) and the protocol adapter [registers the command consumer]({{< relref \"/api/command-router#register-command-consumer-for-device\" >}}) with the Command Router service, associating the device with its protocol adapter instance identifier (2). The Command Router service creates the receiver link (3) on the tenant-scoped link if it doesn't already exist. Following that, the notification about the device subscription is sent to the application via the AMQP messaging network (4).\n+\n+{{< figure src=\"command_control_concept_cmdrouter_2.svg\" title=\"Command handling\" >}}\n+\n+Upon receiving the notification, the application prepares sender and command response receiver links (1,2) and sends the command message to the AMQP messaging network. The message is received by the Command Router service component (3), which will determine the protocol adapter instance #1 that is able to handle the command message. The command then gets forwarded to the AMQP messaging network on the address for adapter instance #1 (4). The protocol adapter instance #1 will receive the message (5) and forward it to the device (6). As the last step, an \"accepted\" disposition will be sent back to the application (7).", "originalCommit": "e35a07882ca97a2eb5c7cbf17c7c6807879fbe6b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMTE4NA==", "url": "https://github.com/eclipse/hono/pull/2337#discussion_r533501184", "bodyText": "_DEVICECONNECTION_ ?", "author": "sophokles73", "createdAt": "2020-12-01T15:27:57Z", "path": "site/documentation/content/admin-guide/command-router-config.md", "diffHunk": "@@ -0,0 +1,154 @@\n++++\n+title = \"Configuring the Command Router Service\"\n+linkTitle = \"Command Router Service Configuration\"\n+weight = 317\n++++\n+\n+The Command Router service provides an implementation of Eclipse Hono&trade;'s [Command Router API]({{< relref \"/api/command-router\" >}}).\n+\n+*Protocol Adapters* use the *Command Router API* to supply information with which a Command Router service component can route command & control messages to the protocol adapters that the target devices are connected to.\n+\n+<!--more-->\n+\n+{{% note title=\"Tech preview\" %}}\n+This component is not considered production ready yet. It is meant as a replacement for the component implementing the [Device Connection API]({{< relref \"/api/device-connection\" >}}).\n+It can be used by configuring the [Command Router service connection properties]({{< relref \"common-config.md/#command-router-service-connection-configuration\" >}}), instead of the Device Connection service connection properties, in the protocol adapter.\n+{{% /note %}}\n+\n+The Command Router component provides an implementation of the Command Router API which uses a remote *data grid* for storing information about device connections. The data grid can be scaled out independently from the Command Router service components to meet the storage demands at hand.\n+\n+The Command Router component is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the corresponding [Docker image](https://hub.docker.com/r/eclipse/hono-service-command-router/) created from it.\n+\n+\n+## Service Configuration\n+\n+In addition to the following options, this component supports the options described in [Common Configuration]({{< relref \"common-config.md\" >}}).\n+\n+The following table provides an overview of the configuration variables and corresponding command line options for configuring the Command Router component.\n+\n+| Environment Variable<br>Command Line Option | Mandatory | Default | Description                                                             |\n+| :------------------------------------------ | :-------: | :------ | :-----------------------------------------------------------------------|\n+| `HONO_APP_MAX_INSTANCES`<br>`--hono.app.maxInstances` | no | *#CPU cores* | The number of Verticle instances to deploy. If not set, one Verticle per processor core is deployed. |\n+| `HONO_COMMANDROUTER_AMQP_BIND_ADDRESS`<br>`--hono.commandRouter.amqp.bindAddress` | no | `127.0.0.1` | The IP address of the network interface that the secure AMQP port should be bound to.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_CERT_PATH`<br>`--hono.commandRouter.amqp.certPath` | no | - | The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with `HONO_COMMANDROUTER_AMQP_KEY_PATH`.<br>Alternatively, the `HONO_COMMANDROUTER_AMQP_KEY_STORE_PATH` option can be used to configure a key store containing both the key as well as the certificate. |\n+| `HONO_COMMANDROUTER_AMQP_INSECURE_PORT`<br>`--hono.commandRouter.amqp.insecurePort` | no | - | The insecure port the server should listen on for AMQP 1.0 connections.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_BIND_ADDRESS`<br>`--hono.commandRouter.amqp.insecurePortBindAddress` | no | `127.0.0.1` | The IP address of the network interface that the insecure AMQP port should be bound to.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_ENABLED`<br>`--hono.commandRouter.amqp.insecurePortEnabled` | no | `false` | If set to `true` the server will open an insecure port (not secured by TLS) using either the port number set via `HONO_COMMANDROUTER_AMQP_INSECURE_PORT` or the default AMQP port number (`5672`) if not set explicitly.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_KEY_PATH`<br>`--hono.commandRouter.amqp.keyPath` | no | - | The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with `HONO_COMMANDROUTER_AMQP_CERT_PATH`. Alternatively, the `HONO_COMMANDROUTER_AMQP_KEY_STORE_PATH` option can be used to configure a key store containing both the key as well as the certificate. |\n+| `HONO_COMMANDROUTER_AMQP_KEY_STORE_PASSWORD`<br>`--hono.commandRouter.amqp.keyStorePassword` | no | - | The password required to read the contents of the key store. |\n+| `HONO_COMMANDROUTER_AMQP_KEY_STORE_PATH`<br>`--hono.commandRouter.amqp.keyStorePath` | no | - | The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the `HONO_COMMANDROUTER_AMQP_KEY_PATH` and `HONO_COMMANDROUTER_AMQP_CERT_PATH` options need to be set in order to enable TLS secured connections with clients. The key store format can be either `JKS` or `PKCS12` indicated by a `.jks` or `.p12` file suffix respectively. |\n+| `HONO_COMMANDROUTER_AMQP_NATIVE_TLS_REQUIRED`<br>`--hono.commandRouter.amqp.nativeTlsRequired` | no | `false` | The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM's default SSL engine if not available. However, if set to `true`, the server will fail to start at all in this case. |\n+| `HONO_COMMANDROUTER_AMQP_PORT`<br>`--hono.commandRouter.amqp.port` | no | `5671` | The secure port that the server should listen on for AMQP 1.0 connections.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_RECEIVER_LINK_CREDIT`<br>`--hono.commandRouter.amqp.receiverLinkCredit` | no | `100` | The number of credits to flow to a client connecting to the service's AMQP endpoint. |\n+| `HONO_COMMANDROUTER_AMQP_SECURE_PROTOCOLS`<br>`--hono.commandRouter.amqp.secureProtocols` | no | `TLSv1.2` | A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the [vert.x documentation](https://vertx.io/docs/vertx-core/java/#ssl) for a list of supported protocol names. |\n+\n+The variables only need to be set if the default value does not match your environment.\n+\n+## Port Configuration\n+\n+The Command Router component supports configuration of an AMQP based endpoint that can be configured to listen for connections on\n+\n+* a secure port only (default) or\n+* an insecure port only or\n+* both a secure and an insecure port (dual port configuration)\n+\n+The server will fail to start if none of the ports is configured properly.\n+\n+### Secure Port Only\n+\n+The server needs to be configured with a private key and certificate in order to open a TLS secured port.\n+\n+There are two alternative ways for doing so:\n+\n+1. Setting the `HONO_COMMANDROUTER_AMQP_KEY_STORE_PATH` and the `HONO_COMMANDROUTER_AMQP_KEY_STORE_PASSWORD` variables in order to load the key & certificate from a password protected key store, or\n+1. setting the `HONO_COMMANDROUTER_AMQP_KEY_PATH` and `HONO_COMMANDROUTER_AMQP_CERT_PATH` variables in order to load the key and certificate from two separate PEM files in PKCS8 format.\n+\n+When starting up, the server will bind a TLS secured socket to the default secure AMQP port 5671. The port number can also be set explicitly using the `HONO_COMMANDROUTER_AMQP_PORT` variable.\n+\n+The `HONO_COMMANDROUTER_AMQP_BIND_ADDRESS` variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the *loopback device* only, i.e. the port will only be accessible from the local host. Setting this variable to `0.0.0.0` will let the port being bound to **all** network interfaces (be careful not to expose the port unintentionally to the outside world).\n+\n+### Insecure Port Only\n+\n+The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead, e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by\n+\n+- explicitly setting `HONO_COMMANDROUTER_AMQP_INSECURE_PORT` to a valid port number, or by\n+- implicitly configuring the default AMQP port (5672) by simply setting `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_ENABLED` to `true`.\n+\n+The server issues a warning on the console if `HONO_COMMANDROUTER_AMQP_INSECURE_PORT` is set to the default secure AMQP port (5671).\n+\n+The `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_BIND_ADDRESS` variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the *loopback device* only, i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.\n+\n+Setting this variable to `0.0.0.0` will let the port being bound to **all** network interfaces (be careful not to expose the port unintentionally to the outside world).\n+\n+### Dual Port\n+ \n+In test setups and some production scenarios Hono server may be configured to open one secure **and** one insecure port at the same time.\n+ \n+This is achieved by configuring both ports correctly (see above). The server will fail to start if both ports are configured to use the same port number.\n+\n+Since the secure port may need different visibility in the network setup compared to the secure port, it has its own binding address `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_BIND_ADDRESS`. \n+This can be used to narrow the visibility of the insecure port to a local network e.g., while the secure port may be visible worldwide. \n+\n+### Ephemeral Ports\n+\n+Both the secure as well as the insecure port numbers may be explicitly set to `0`. The Command Router component will then use arbitrary (unused) port numbers determined by the operating system during startup.\n+\n+## Data Grid Connection Configuration\n+\n+The Command Router component requires either an embedded cache or a remote\n+data grid, using the Infinispan Hotrod protocol to store device information.\n+\n+The following table provides an overview of the configuration variables and corresponding command line options for configuring the common aspects of the service:\n+\n+| Environment Variable<br>Command Line Option | Mandatory | Default | Description                                                             |\n+| :------------------------------------------ | :-------: | :------ | :-----------------------------------------------------------------------|\n+| `HONO_DEVICECONNECTION_COMMON_CACHENAME`<br>`--hono.deviceConnection.common.cacheName` | no | `device-connection` | The name of the cache |", "originalCommit": "e35a07882ca97a2eb5c7cbf17c7c6807879fbe6b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDcxNzQzNQ==", "url": "https://github.com/eclipse/hono/pull/2337#discussion_r534717435", "bodyText": "I have used that deliberately, combining configuration data used by the (CacheBased)DeviceConnectionInfo class (which will probably still be there even when the DeviceConnection API has been removed).\nAnother option would be using \"commandRouter.cache\" instead (as in hono.commandRouter.cache.common.cacheName for example). I'd be fine with that as well. WDYT?", "author": "calohmn", "createdAt": "2020-12-03T06:16:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDgwMDY4Ng==", "url": "https://github.com/eclipse/hono/pull/2337#discussion_r534800686", "bodyText": "FMPOV it would be rather confusing to have configuration properties with two different prefixes for configuring the command router service, don't you think?", "author": "sophokles73", "createdAt": "2020-12-03T07:24:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMTE4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyMzU5NA==", "url": "https://github.com/eclipse/hono/pull/2337#discussion_r535023594", "bodyText": "Well, configuring access to the (possibly external) cache could be seen as analogous to the configuration for the other external services (registration, credentials, etc), having their own prefix.\nBut as it's no defined external Hono service, I see that the \"hono.commandRouter.cache\" prefix may be better.\nI've added commits now changing the prefix in the Command Router component and in the above documentation and also changing the default cache name.", "author": "calohmn", "createdAt": "2020-12-03T09:48:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMTE4NA=="}], "type": "inlineReview"}, {"oid": "7bbc670723159d4f1a3c467750451f7b25d656e8", "url": "https://github.com/eclipse/hono/commit/7bbc670723159d4f1a3c467750451f7b25d656e8", "message": "[#2029] Add documentation for the Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-12-02T12:41:43Z", "type": "forcePushed"}, {"oid": "cfa7af29fe196cc7a9f885138e0d5bf6ab09eef8", "url": "https://github.com/eclipse/hono/commit/cfa7af29fe196cc7a9f885138e0d5bf6ab09eef8", "message": "[#2029] Change Command Router cache config prefix.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-12-03T09:43:52Z", "type": "commit"}, {"oid": "0acb1e4e42606d05f1bdd3b0dff68180b61786ab", "url": "https://github.com/eclipse/hono/commit/0acb1e4e42606d05f1bdd3b0dff68180b61786ab", "message": "[#2029] Change Command Router default cache name.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-12-03T09:43:52Z", "type": "commit"}, {"oid": "7587702fe22b070d45d882b1f4ae63da4578735d", "url": "https://github.com/eclipse/hono/commit/7587702fe22b070d45d882b1f4ae63da4578735d", "message": "[#2029] Add documentation for the Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-12-03T09:43:52Z", "type": "commit"}, {"oid": "7587702fe22b070d45d882b1f4ae63da4578735d", "url": "https://github.com/eclipse/hono/commit/7587702fe22b070d45d882b1f4ae63da4578735d", "message": "[#2029] Add documentation for the Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-12-03T09:43:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwMjk1Ng==", "url": "https://github.com/eclipse/hono/pull/2337#discussion_r535202956", "bodyText": "this change of the prefix will also need to be reflected in the configuration classes, won't it?", "author": "sophokles73", "createdAt": "2020-12-03T12:53:06Z", "path": "site/documentation/content/admin-guide/command-router-config.md", "diffHunk": "@@ -0,0 +1,160 @@\n++++\n+title = \"Configuring the Command Router Service\"\n+linkTitle = \"Command Router Service Configuration\"\n+weight = 317\n++++\n+\n+The Command Router service provides an implementation of Eclipse Hono&trade;'s [Command Router API]({{< relref \"/api/command-router\" >}}).\n+\n+*Protocol Adapters* use the *Command Router API* to supply information with which a Command Router service component can route command & control messages to the protocol adapters that the target devices are connected to.\n+\n+<!--more-->\n+\n+{{% note title=\"Tech preview\" %}}\n+This component is not considered production ready yet. It is meant as a replacement for the component implementing the [Device Connection API]({{< relref \"/api/device-connection\" >}}).\n+It can be used by configuring the [Command Router service connection properties]({{< relref \"common-config.md/#command-router-service-connection-configuration\" >}}), instead of the Device Connection service connection properties, in the protocol adapter.\n+{{% /note %}}\n+\n+The Command Router component provides an implementation of the Command Router API which uses a remote *data grid* for storing information about device connections. The data grid can be scaled out independently from the Command Router service components to meet the storage demands at hand.\n+\n+The Command Router component is implemented as a Spring Boot application. It can be run either directly from the command line or by means of starting the corresponding [Docker image](https://hub.docker.com/r/eclipse/hono-service-command-router/) created from it.\n+\n+\n+## Service Configuration\n+\n+In addition to the following options, this component supports the options described in [Common Configuration]({{< relref \"common-config.md\" >}}).\n+\n+The following table provides an overview of the configuration variables and corresponding command line options for configuring the Command Router component.\n+\n+| Environment Variable<br>Command Line Option | Mandatory | Default | Description                                                             |\n+| :------------------------------------------ | :-------: | :------ | :-----------------------------------------------------------------------|\n+| `HONO_APP_MAX_INSTANCES`<br>`--hono.app.maxInstances` | no | *#CPU cores* | The number of Verticle instances to deploy. If not set, one Verticle per processor core is deployed. |\n+| `HONO_COMMANDROUTER_AMQP_BIND_ADDRESS`<br>`--hono.commandRouter.amqp.bindAddress` | no | `127.0.0.1` | The IP address of the network interface that the secure AMQP port should be bound to.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_CERT_PATH`<br>`--hono.commandRouter.amqp.certPath` | no | - | The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with `HONO_COMMANDROUTER_AMQP_KEY_PATH`.<br>Alternatively, the `HONO_COMMANDROUTER_AMQP_KEY_STORE_PATH` option can be used to configure a key store containing both the key as well as the certificate. |\n+| `HONO_COMMANDROUTER_AMQP_INSECURE_PORT`<br>`--hono.commandRouter.amqp.insecurePort` | no | - | The insecure port the server should listen on for AMQP 1.0 connections.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_BIND_ADDRESS`<br>`--hono.commandRouter.amqp.insecurePortBindAddress` | no | `127.0.0.1` | The IP address of the network interface that the insecure AMQP port should be bound to.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_ENABLED`<br>`--hono.commandRouter.amqp.insecurePortEnabled` | no | `false` | If set to `true` the server will open an insecure port (not secured by TLS) using either the port number set via `HONO_COMMANDROUTER_AMQP_INSECURE_PORT` or the default AMQP port number (`5672`) if not set explicitly.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_KEY_PATH`<br>`--hono.commandRouter.amqp.keyPath` | no | - | The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with `HONO_COMMANDROUTER_AMQP_CERT_PATH`. Alternatively, the `HONO_COMMANDROUTER_AMQP_KEY_STORE_PATH` option can be used to configure a key store containing both the key as well as the certificate. |\n+| `HONO_COMMANDROUTER_AMQP_KEY_STORE_PASSWORD`<br>`--hono.commandRouter.amqp.keyStorePassword` | no | - | The password required to read the contents of the key store. |\n+| `HONO_COMMANDROUTER_AMQP_KEY_STORE_PATH`<br>`--hono.commandRouter.amqp.keyStorePath` | no | - | The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the `HONO_COMMANDROUTER_AMQP_KEY_PATH` and `HONO_COMMANDROUTER_AMQP_CERT_PATH` options need to be set in order to enable TLS secured connections with clients. The key store format can be either `JKS` or `PKCS12` indicated by a `.jks` or `.p12` file suffix respectively. |\n+| `HONO_COMMANDROUTER_AMQP_NATIVE_TLS_REQUIRED`<br>`--hono.commandRouter.amqp.nativeTlsRequired` | no | `false` | The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM's default SSL engine if not available. However, if set to `true`, the server will fail to start at all in this case. |\n+| `HONO_COMMANDROUTER_AMQP_PORT`<br>`--hono.commandRouter.amqp.port` | no | `5671` | The secure port that the server should listen on for AMQP 1.0 connections.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_COMMANDROUTER_AMQP_RECEIVER_LINK_CREDIT`<br>`--hono.commandRouter.amqp.receiverLinkCredit` | no | `100` | The number of credits to flow to a client connecting to the service's AMQP endpoint. |\n+| `HONO_COMMANDROUTER_AMQP_SECURE_PROTOCOLS`<br>`--hono.commandRouter.amqp.secureProtocols` | no | `TLSv1.2` | A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the [vert.x documentation](https://vertx.io/docs/vertx-core/java/#ssl) for a list of supported protocol names. |\n+\n+The variables only need to be set if the default value does not match your environment.\n+\n+## Port Configuration\n+\n+The Command Router component supports configuration of an AMQP based endpoint that can be configured to listen for connections on\n+\n+* a secure port only (default) or\n+* an insecure port only or\n+* both a secure and an insecure port (dual port configuration)\n+\n+The server will fail to start if none of the ports is configured properly.\n+\n+### Secure Port Only\n+\n+The server needs to be configured with a private key and certificate in order to open a TLS secured port.\n+\n+There are two alternative ways for doing so:\n+\n+1. Setting the `HONO_COMMANDROUTER_AMQP_KEY_STORE_PATH` and the `HONO_COMMANDROUTER_AMQP_KEY_STORE_PASSWORD` variables in order to load the key & certificate from a password protected key store, or\n+1. setting the `HONO_COMMANDROUTER_AMQP_KEY_PATH` and `HONO_COMMANDROUTER_AMQP_CERT_PATH` variables in order to load the key and certificate from two separate PEM files in PKCS8 format.\n+\n+When starting up, the server will bind a TLS secured socket to the default secure AMQP port 5671. The port number can also be set explicitly using the `HONO_COMMANDROUTER_AMQP_PORT` variable.\n+\n+The `HONO_COMMANDROUTER_AMQP_BIND_ADDRESS` variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the *loopback device* only, i.e. the port will only be accessible from the local host. Setting this variable to `0.0.0.0` will let the port being bound to **all** network interfaces (be careful not to expose the port unintentionally to the outside world).\n+\n+### Insecure Port Only\n+\n+The secure port will mostly be required for production scenarios. However, it might be desirable to expose a non-TLS secured port instead, e.g. for testing purposes. In any case, the non-secure port needs to be explicitly enabled either by\n+\n+- explicitly setting `HONO_COMMANDROUTER_AMQP_INSECURE_PORT` to a valid port number, or by\n+- implicitly configuring the default AMQP port (5672) by simply setting `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_ENABLED` to `true`.\n+\n+The server issues a warning on the console if `HONO_COMMANDROUTER_AMQP_INSECURE_PORT` is set to the default secure AMQP port (5671).\n+\n+The `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_BIND_ADDRESS` variable can be used to specify the network interface that the port should be exposed on. By default the port is bound to the *loopback device* only, i.e. the port will only be accessible from the local host. This variable might be used to e.g. expose the non-TLS secured port on a local interface only, thus providing easy access from within the local network, while still requiring encrypted communication when accessed from the outside over public network infrastructure.\n+\n+Setting this variable to `0.0.0.0` will let the port being bound to **all** network interfaces (be careful not to expose the port unintentionally to the outside world).\n+\n+### Dual Port\n+ \n+In test setups and some production scenarios Hono server may be configured to open one secure **and** one insecure port at the same time.\n+ \n+This is achieved by configuring both ports correctly (see above). The server will fail to start if both ports are configured to use the same port number.\n+\n+Since the secure port may need different visibility in the network setup compared to the secure port, it has its own binding address `HONO_COMMANDROUTER_AMQP_INSECURE_PORT_BIND_ADDRESS`. \n+This can be used to narrow the visibility of the insecure port to a local network e.g., while the secure port may be visible worldwide. \n+\n+### Ephemeral Ports\n+\n+Both the secure as well as the insecure port numbers may be explicitly set to `0`. The Command Router component will then use arbitrary (unused) port numbers determined by the operating system during startup.\n+\n+## Command & Control Connection Configuration\n+\n+The Command Router component requires a connection to the *AMQP 1.0 Messaging Network* in order to receive\n+commands from downstream applications and forward them on a specific link on which the target protocol adapter will receive them.\n+\n+The connection is configured according to [Hono Client Configuration]({{< relref \"hono-client-configuration.md\" >}})\n+with `HONO_COMMAND` being used as `${PREFIX}`. The properties for configuring response caching can be ignored.\n+\n+## Data Grid Connection Configuration\n+\n+The Command Router component requires either an embedded cache or a remote\n+data grid, using the Infinispan Hotrod protocol to store device information.\n+\n+The following table provides an overview of the configuration variables and corresponding command line options for configuring the common aspects of the service:\n+\n+| Environment Variable<br>Command Line Option | Mandatory | Default | Description                                                             |\n+| :------------------------------------------ | :-------: | :------ | :-----------------------------------------------------------------------|\n+| `HONO_COMMANDROUTER_CACHE_COMMON_CACHENAME`<br>`--hono.commandRouter.cache.common.cacheName` | no | `command-router` | The name of the cache |", "originalCommit": "7587702fe22b070d45d882b1f4ae63da4578735d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwMzQxMQ==", "url": "https://github.com/eclipse/hono/pull/2337#discussion_r535203411", "bodyText": "ah, just saw that it is ...", "author": "sophokles73", "createdAt": "2020-12-03T12:53:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIwMjk1Ng=="}], "type": "inlineReview"}]}