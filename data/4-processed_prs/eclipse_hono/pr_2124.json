{"pr_number": 2124, "pr_title": "Add metrics sending messages downstream", "pr_createdAt": "2020-08-20T11:14:05Z", "pr_url": "https://github.com/eclipse/hono/pull/2124", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMjY5NQ==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r473912695", "bodyText": "IMHO relreased would also be an interesting state to record ....", "author": "sophokles73", "createdAt": "2020-08-20T11:53:12Z", "path": "client/src/main/java/org/eclipse/hono/client/SendMessageSampler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client;\n+\n+/**\n+ * An interface for sampling <em>send message</em> operations.\n+ */\n+public interface SendMessageSampler {\n+\n+    /**\n+     * A factory for creating samplers.\n+     */\n+    interface Factory {\n+\n+        /**\n+         * Create a new sampler.\n+         *\n+         * @param messageType The message type to create a sampler for.\n+         * @return A new sampler.\n+         */\n+        SendMessageSampler create(String messageType);\n+\n+    }\n+\n+    /**\n+     * Get a default, no-op implementation.\n+     *\n+     * @return A no-op implementation, never returns {@code null}.\n+     */\n+    static SendMessageSampler.Factory noop() {\n+        return Noop.FACTORY;\n+    }\n+\n+    /**\n+     * Get a default, no-op implementation.\n+     *\n+     * @param messageType The message type to create the instance for.\n+     * @return A no-op implementation, never returns {@code null}.\n+     */\n+    static SendMessageSampler noop(final String messageType) {\n+        return noop().create(messageType);\n+    }\n+\n+    /**\n+     * A default no-op implementations.\n+     */\n+    class Noop {\n+\n+        private static final Sample SAMPLE = new Sample() {\n+\n+            @Override\n+            public void accepted() {\n+            }\n+\n+            @Override\n+            public void rejected(final int errorCode) {\n+            }\n+\n+            @Override\n+            public void timeout() {\n+            }\n+\n+        };\n+\n+        private static final SendMessageSampler SAMPLER = new SendMessageSampler() {\n+\n+            @Override\n+            public Sample start(final String tenantId) {\n+                return SAMPLE;\n+            }\n+\n+            @Override\n+            public void queueFull(final String tenantId) {\n+            }\n+\n+        };\n+\n+        private static final Factory FACTORY = new Factory() {\n+\n+            @Override\n+            public SendMessageSampler create(final String messageType) {\n+                return SAMPLER;\n+            }\n+\n+        };\n+\n+        private Noop() {\n+        }\n+\n+    }\n+\n+    /**\n+     * An active sample instance.\n+     */\n+    interface Sample {\n+\n+        /**\n+         * Call when the message was accepted by the remote peer.\n+         */\n+        void accepted();\n+\n+        /**\n+         * Call when the message was rejected by the remote peer.\n+         *\n+         * @param errorCode The rejection code. Expected to be a valid HTTP error code.\n+         */\n+        void rejected(int errorCode);", "originalCommit": "0bccc7f974f02ed1c9ed01401604ff0ba0c9589f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyODk2Mg==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r474028962", "bodyText": "That is what the error code was intended to. Released would translate into 503. The again Modified would translate into the same status code.\nMaybe using the actual name (Rejected, \u2026) is a better approach here?!", "author": "ctron", "createdAt": "2020-08-20T14:31:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMjY5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3MjgzOA==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r474072838", "bodyText": "Maybe we can combine both accepted() and rejected() into one method, e.g. completed(String outcome) which takes the delivery state as an argument?", "author": "sophokles73", "createdAt": "2020-08-20T15:31:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMjY5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMjk4Ng==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r473912986", "bodyText": "does this represent the case when the client is out of credit?", "author": "sophokles73", "createdAt": "2020-08-20T11:53:45Z", "path": "client/src/main/java/org/eclipse/hono/client/SendMessageSampler.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client;\n+\n+/**\n+ * An interface for sampling <em>send message</em> operations.\n+ */\n+public interface SendMessageSampler {\n+\n+    /**\n+     * A factory for creating samplers.\n+     */\n+    interface Factory {\n+\n+        /**\n+         * Create a new sampler.\n+         *\n+         * @param messageType The message type to create a sampler for.\n+         * @return A new sampler.\n+         */\n+        SendMessageSampler create(String messageType);\n+\n+    }\n+\n+    /**\n+     * Get a default, no-op implementation.\n+     *\n+     * @return A no-op implementation, never returns {@code null}.\n+     */\n+    static SendMessageSampler.Factory noop() {\n+        return Noop.FACTORY;\n+    }\n+\n+    /**\n+     * Get a default, no-op implementation.\n+     *\n+     * @param messageType The message type to create the instance for.\n+     * @return A no-op implementation, never returns {@code null}.\n+     */\n+    static SendMessageSampler noop(final String messageType) {\n+        return noop().create(messageType);\n+    }\n+\n+    /**\n+     * A default no-op implementations.\n+     */\n+    class Noop {\n+\n+        private static final Sample SAMPLE = new Sample() {\n+\n+            @Override\n+            public void accepted() {\n+            }\n+\n+            @Override\n+            public void rejected(final int errorCode) {\n+            }\n+\n+            @Override\n+            public void timeout() {\n+            }\n+\n+        };\n+\n+        private static final SendMessageSampler SAMPLER = new SendMessageSampler() {\n+\n+            @Override\n+            public Sample start(final String tenantId) {\n+                return SAMPLE;\n+            }\n+\n+            @Override\n+            public void queueFull(final String tenantId) {\n+            }\n+\n+        };\n+\n+        private static final Factory FACTORY = new Factory() {\n+\n+            @Override\n+            public SendMessageSampler create(final String messageType) {\n+                return SAMPLER;\n+            }\n+\n+        };\n+\n+        private Noop() {\n+        }\n+\n+    }\n+\n+    /**\n+     * An active sample instance.\n+     */\n+    interface Sample {\n+\n+        /**\n+         * Call when the message was accepted by the remote peer.\n+         */\n+        void accepted();\n+\n+        /**\n+         * Call when the message was rejected by the remote peer.\n+         *\n+         * @param errorCode The rejection code. Expected to be a valid HTTP error code.\n+         */\n+        void rejected(int errorCode);\n+\n+        /**\n+         * Call when the operation timed out.\n+         */\n+        void timeout();\n+\n+    }\n+\n+    /**\n+     * Start operation.\n+     *\n+     * @param tenantId The tenant ID to sample for.\n+     * @return A sample instance.\n+     */\n+    Sample start(String tenantId);\n+\n+    /**\n+     * Record a case of \"queue full\".\n+     * @param tenantId The tenant ID to sample for.\n+     */\n+    void queueFull(String tenantId);", "originalCommit": "0bccc7f974f02ed1c9ed01401604ff0ba0c9589f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyNzE5MQ==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r474027191", "bodyText": "I think so. It is derived from the fact that the sendQueueFull() method returns true, thus the name.", "author": "ctron", "createdAt": "2020-08-20T14:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMjk4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxNDM3NQ==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r473914375", "bodyText": "how about using TelemetryConstants.TELEMETRY_ENDPOINT instead of a literal string?", "author": "sophokles73", "createdAt": "2020-08-20T11:56:31Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/DownstreamSenderFactoryImpl.java", "diffHunk": "@@ -65,7 +69,7 @@ protected void onDisconnect() {\n                 .compose(v -> connection.executeOnContext(result -> {\n                     clientFactory.getOrCreateClient(\n                             AddressHelper.getTargetAddress(TelemetryConstants.TELEMETRY_ENDPOINT, tenantId, null, connection.getConfig()),\n-                            () -> TelemetrySenderImpl.create(connection, tenantId,\n+                            () -> TelemetrySenderImpl.create(connection, tenantId, samplerFactory.create(\"telemetry\"),", "originalCommit": "0bccc7f974f02ed1c9ed01401604ff0ba0c9589f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxNDQ4Nw==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r473914487", "bodyText": "how about using EventConstants.EVENT_ENDPOINT instead of a literal string?", "author": "sophokles73", "createdAt": "2020-08-20T11:56:45Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/DownstreamSenderFactoryImpl.java", "diffHunk": "@@ -84,7 +88,7 @@ protected void onDisconnect() {\n                 .compose(v -> connection.executeOnContext(result -> {\n                     clientFactory.getOrCreateClient(\n                             AddressHelper.getTargetAddress(EventConstants.EVENT_ENDPOINT, tenantId, null, connection.getConfig()),\n-                            () -> EventSenderImpl.create(connection, tenantId,\n+                            () -> EventSenderImpl.create(connection, tenantId, samplerFactory.create(\"event\"),", "originalCommit": "0bccc7f974f02ed1c9ed01401604ff0ba0c9589f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxNTY0Mg==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r473915642", "bodyText": "for the other metrics we followed an approach of using a tag to indicate the outcome of the operation. Is there a particular reason why we wouldn't want to follow that approach here as well?", "author": "sophokles73", "createdAt": "2020-08-20T11:59:05Z", "path": "service-base/src/main/java/org/eclipse/hono/service/metric/MicrometerBasedMetrics.java", "diffHunk": "@@ -81,6 +82,18 @@\n      * The name of the meter for command messages.\n      */\n     public static final String METER_COMMANDS_RECEIVED = \"hono.commands.received\";\n+    /**\n+     * The name of the meter for queue full events.\n+     */\n+    public static final String METER_DOWNSTREAM_FULL = \"hono.downstream.full\";\n+    /**\n+     * The name of the meter for sent messages.\n+     */\n+    public static final String METER_DOWNSTREAM_SENT = \"hono.downstream.sent\";\n+    /**\n+     * The name of the meter for timed out messages.\n+     */\n+    public static final String METER_DOWNSTREAM_TIMEOUT = \"hono.downstream.timeout\";", "originalCommit": "0bccc7f974f02ed1c9ed01401604ff0ba0c9589f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAzMzc2Nw==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r474033767", "bodyText": "Yes.  I put a note into the timeout() method, maybe there is a better place:\n/*\n * We report timeouts with a different meter, since the message might still be\n * accepted by the remote peer, at a time after the timeout expired. And so we\n * can still track those times.\n */\nI an nutshell, timeout and \"completion\" are actually two different events. For timeout we simply decide to, no longer listen to the outcome of the \"send message\" operation. Still we should get back a disposition, and thus would have the total run time of the operation, which we can log. This would give us an understanding of how long operations actually run.\nFor the \"queue full\" situation we don't even start sending. So it doesn't seem to make sense to capture any time.", "author": "ctron", "createdAt": "2020-08-20T14:38:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxNTY0Mg=="}], "type": "inlineReview"}, {"oid": "77ad2db9b2161f366e6791aaaf4b26f6075a39de", "url": "https://github.com/eclipse/hono/commit/77ad2db9b2161f366e6791aaaf4b26f6075a39de", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-20T13:29:06Z", "type": "forcePushed"}, {"oid": "27c117539c46c7919f36ce5dbf66e68cf4c124bb", "url": "https://github.com/eclipse/hono/commit/27c117539c46c7919f36ce5dbf66e68cf4c124bb", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-20T14:33:46Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3Mzk2Ng==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r474073966", "bodyText": "if we use a single method completed(String outcome) instead of accepted() and rejected(int) then we can also omit the success tag ..", "author": "sophokles73", "createdAt": "2020-08-20T15:32:24Z", "path": "service-base/src/main/java/org/eclipse/hono/service/metric/MicrometerBasedMetrics.java", "diffHunk": "@@ -431,4 +448,75 @@ private void trackDeviceConnectionDuration(final String tenantId, final long dev\n                             return null;\n                         }));\n     }\n+\n+    @Override\n+    public SendMessageSampler create(final String messageType) {\n+        return new SendMessageSampler() {\n+            @Override\n+            public Sample start(final String tenantId) {\n+\n+                final Timer.Sample sample = Timer.start(registry);\n+\n+                return new Sample() {\n+\n+                    private void complete(final String ...tags) {\n+                        sample.stop(registry.timer(METER_DOWNSTREAM_SENT, tags));\n+                    }\n+\n+\n+                    @Override\n+                    public void accepted() {\n+\n+                        complete(\n+                                \"type\", messageType,\n+                                \"success\", \"true\"\n+                        );\n+\n+                    }\n+\n+                    @Override\n+                    public void rejected(final int errorCode) {", "originalCommit": "27c117539c46c7919f36ce5dbf66e68cf4c124bb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f79ef487163eb58698a27d51a2b65c2b85afa1d7", "url": "https://github.com/eclipse/hono/commit/f79ef487163eb58698a27d51a2b65c2b85afa1d7", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-20T17:34:09Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQzMDkxMw==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r474430913", "bodyText": "\ud83d\udc4d", "author": "sophokles73", "createdAt": "2020-08-21T06:19:13Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/AbstractSender.java", "diffHunk": "@@ -280,6 +292,7 @@ protected final Span startSpan(final Message message) {\n                         messageId, getMessageAddress(message));\n             } else if (deliveryUpdated.remotelySettled()) {\n                 logUpdatedDeliveryState(currentSpan, message, deliveryUpdated);\n+                sample.completed(remoteState.getClass().getSimpleName());", "originalCommit": "f79ef487163eb58698a27d51a2b65c2b85afa1d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQzMzc1NQ==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r474433755", "bodyText": "is there a particular reason why you only want to add the sampler to the async command client and not the one returned by getOrCreateCommandClient()? In general, I wonder if an northbound application client should be required to provide a sampler factory when creating the ApplicationClientFactory. IMHO we should at least also provide a constructor that doesn't require a sampler factory but instead simply uses the Noop one under the hood. WDYT?", "author": "sophokles73", "createdAt": "2020-08-21T06:27:33Z", "path": "client/src/main/java/org/eclipse/hono/client/impl/ApplicationClientFactoryImpl.java", "diffHunk": "@@ -167,6 +171,7 @@ private void removeCommandClient(final String key) {\n                     () -> AsyncCommandClientImpl.create(\n                             connection,\n                             tenantId,\n+                            samplerFactory.create(CommandConstants.NORTHBOUND_COMMAND_REQUEST_ENDPOINT),", "originalCommit": "f79ef487163eb58698a27d51a2b65c2b85afa1d7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "26a38e976e1f430298f5058ac620ccc8fba53212", "url": "https://github.com/eclipse/hono/commit/26a38e976e1f430298f5058ac620ccc8fba53212", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-21T13:46:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2ODAyOA==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r475368028", "bodyText": "IMHO it would be worthwhile to also document which outcome will be used in this case and we should probably use a constant instead of literal string for that value, shouldn't we?", "author": "sophokles73", "createdAt": "2020-08-24T06:26:55Z", "path": "client/src/main/java/org/eclipse/hono/client/SendMessageSampler.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.client;\n+\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+\n+/**\n+ * An interface for sampling <em>send message</em> operations.\n+ */\n+public interface SendMessageSampler {\n+\n+    /**\n+     * A factory for creating samplers.\n+     */\n+    interface Factory {\n+\n+        /**\n+         * Create a new sampler.\n+         *\n+         * @param messageType The message type to create a sampler for.\n+         * @return A new sampler.\n+         */\n+        SendMessageSampler create(String messageType);\n+\n+        /**\n+         * Get a default, no-op implementation.\n+         *\n+         * @return A no-op implementation, never returns {@code null}.\n+         */\n+        static SendMessageSampler.Factory noop() {\n+            return Noop.FACTORY;\n+        }\n+\n+    }\n+\n+    /**\n+     * Get a default, no-op implementation.\n+     *\n+     * @return A no-op implementation, never returns {@code null}.\n+     */\n+    static SendMessageSampler noop() {\n+        return Noop.SAMPLER;\n+    }\n+\n+    /**\n+     * A default no-op implementations.\n+     */\n+    class Noop {\n+\n+        private static final Sample SAMPLE = new Sample() {\n+\n+            @Override\n+            public void completed(final String outcome) {\n+            }\n+\n+            @Override\n+            public void timeout() {\n+            }\n+\n+        };\n+\n+        private static final SendMessageSampler SAMPLER = new SendMessageSampler() {\n+\n+            @Override\n+            public Sample start(final String tenantId) {\n+                return SAMPLE;\n+            }\n+\n+            @Override\n+            public void queueFull(final String tenantId) {\n+            }\n+\n+        };\n+\n+        private static final Factory FACTORY = new Factory() {\n+\n+            @Override\n+            public SendMessageSampler create(final String messageType) {\n+                return SAMPLER;\n+            }\n+\n+        };\n+\n+        private Noop() {\n+        }\n+\n+    }\n+\n+    /**\n+     * An active sample instance.\n+     */\n+    interface Sample {\n+\n+        /**\n+         * Call when the message was processed by the remote peer.\n+         *\n+         * @param outcome The outcome of the message. This is expected to be one of AMQP dispositions.\n+         */\n+        void completed(String outcome);\n+\n+        /**\n+         * Call when the message was processed by the remote peer.\n+         * <p>\n+         * This method will also handle the case when the delivery state is {@code null}.", "originalCommit": "26a38e976e1f430298f5058ac620ccc8fba53212", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQxNTMyMA==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r475415320", "bodyText": "Done", "author": "ctron", "createdAt": "2020-08-24T08:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2ODAyOA=="}], "type": "inlineReview"}, {"oid": "7b8a2762d9ec78bf2e0eb3ee8393e6f10949d61e", "url": "https://github.com/eclipse/hono/commit/7b8a2762d9ec78bf2e0eb3ee8393e6f10949d61e", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-24T08:09:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzMjg1Mg==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r475432852", "bodyText": "MetricsTags.TAG_TYPE, MetricsTags.TAG_TENANT ?", "author": "sophokles73", "createdAt": "2020-08-24T08:42:23Z", "path": "service-base/src/main/java/org/eclipse/hono/service/metric/MicrometerBasedMetrics.java", "diffHunk": "@@ -436,4 +453,59 @@ private void trackDeviceConnectionDuration(final String tenantId, final long dev\n                             return null;\n                         }));\n     }\n+\n+    @Override\n+    public SendMessageSampler create(final String messageType) {\n+        return new SendMessageSampler() {\n+            @Override\n+            public Sample start(final String tenantId) {\n+\n+                final Timer.Sample sample = Timer.start(registry);\n+\n+                return new Sample() {\n+\n+                    @Override\n+                    public void completed(final String outcome) {\n+\n+                        sample.stop(registry.timer(METER_DOWNSTREAM_SENT,\n+                                \"type\", messageType,\n+                                \"outcome\", outcome\n+                        ));\n+\n+                    }\n+\n+                    @Override\n+                    public void timeout() {\n+\n+                        /*\n+                         * We report timeouts with a different meter, since the message might still be\n+                         * accepted by the remote peer, at a time after the timeout expired. And so we\n+                         * can still track those times.\n+                         */\n+\n+                        registry\n+                                .counter(\n+                                        METER_DOWNSTREAM_TIMEOUT,\n+                                        \"type\", messageType,\n+                                        \"tenant\", tenantId)", "originalCommit": "7b8a2762d9ec78bf2e0eb3ee8393e6f10949d61e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzMzExOQ==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r475433119", "bodyText": "MetricsTags.TAG_TYPE, MetricsTags.TAG_TENANT ?", "author": "sophokles73", "createdAt": "2020-08-24T08:42:46Z", "path": "service-base/src/main/java/org/eclipse/hono/service/metric/MicrometerBasedMetrics.java", "diffHunk": "@@ -436,4 +453,59 @@ private void trackDeviceConnectionDuration(final String tenantId, final long dev\n                             return null;\n                         }));\n     }\n+\n+    @Override\n+    public SendMessageSampler create(final String messageType) {\n+        return new SendMessageSampler() {\n+            @Override\n+            public Sample start(final String tenantId) {\n+\n+                final Timer.Sample sample = Timer.start(registry);\n+\n+                return new Sample() {\n+\n+                    @Override\n+                    public void completed(final String outcome) {\n+\n+                        sample.stop(registry.timer(METER_DOWNSTREAM_SENT,\n+                                \"type\", messageType,\n+                                \"outcome\", outcome\n+                        ));\n+\n+                    }\n+\n+                    @Override\n+                    public void timeout() {\n+\n+                        /*\n+                         * We report timeouts with a different meter, since the message might still be\n+                         * accepted by the remote peer, at a time after the timeout expired. And so we\n+                         * can still track those times.\n+                         */\n+\n+                        registry\n+                                .counter(\n+                                        METER_DOWNSTREAM_TIMEOUT,\n+                                        \"type\", messageType,\n+                                        \"tenant\", tenantId)\n+                                .increment();\n+\n+                    }\n+                };\n+\n+            }\n+\n+            @Override\n+            public void queueFull(final String tenantId) {\n+\n+                registry\n+                        .counter(\n+                                METER_DOWNSTREAM_FULL,\n+                                \"type\", messageType,\n+                                \"tenant\", tenantId)", "originalCommit": "7b8a2762d9ec78bf2e0eb3ee8393e6f10949d61e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzMzk0NA==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r475433944", "bodyText": "MetricsTags.TAG_TYPE ?", "author": "sophokles73", "createdAt": "2020-08-24T08:44:11Z", "path": "service-base/src/main/java/org/eclipse/hono/service/metric/MicrometerBasedMetrics.java", "diffHunk": "@@ -436,4 +453,59 @@ private void trackDeviceConnectionDuration(final String tenantId, final long dev\n                             return null;\n                         }));\n     }\n+\n+    @Override\n+    public SendMessageSampler create(final String messageType) {\n+        return new SendMessageSampler() {\n+            @Override\n+            public Sample start(final String tenantId) {\n+\n+                final Timer.Sample sample = Timer.start(registry);\n+\n+                return new Sample() {\n+\n+                    @Override\n+                    public void completed(final String outcome) {\n+\n+                        sample.stop(registry.timer(METER_DOWNSTREAM_SENT,\n+                                \"type\", messageType,", "originalCommit": "7b8a2762d9ec78bf2e0eb3ee8393e6f10949d61e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQzNTM0Mw==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r475435343", "bodyText": "IMHO we should also provide a factory method that doesn't require a sampler factory because AMQP adapter clients will usually be external to a Hono instance and thus most likely not integrate with Hono's metrics backend. WDYT?", "author": "sophokles73", "createdAt": "2020-08-24T08:46:38Z", "path": "client/src/main/java/org/eclipse/hono/client/device/amqp/AmqpAdapterClientFactory.java", "diffHunk": "@@ -33,11 +34,12 @@\n      *\n      * @param connection The connection to use.\n      * @param tenantId The ID of the tenant for which the connection is authenticated.\n+     * @param samplerFactory The sampler factory to use.\n      * @return The factory.\n      * @throws NullPointerException if any of the parameters is {@code null}\n      */\n-    static AmqpAdapterClientFactory create(final HonoConnection connection, final String tenantId) {\n-        return new AmqpAdapterClientFactoryImpl(connection, tenantId);\n+    static AmqpAdapterClientFactory create(final HonoConnection connection, final String tenantId, final SendMessageSampler.Factory samplerFactory) {", "originalCommit": "7b8a2762d9ec78bf2e0eb3ee8393e6f10949d61e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8f2020d56ec65067e53d67fe6b9c55780e531801", "url": "https://github.com/eclipse/hono/commit/8f2020d56ec65067e53d67fe6b9c55780e531801", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-25T09:50:57Z", "type": "forcePushed"}, {"oid": "fd56de6a528008277c26144430a2401adbed70e7", "url": "https://github.com/eclipse/hono/commit/fd56de6a528008277c26144430a2401adbed70e7", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-26T11:12:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyOTI3OQ==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r477229279", "bodyText": "I find it quite confusing to have two descriptions of the same tag name here. Maybe we should structure the metrics documentation differently so that we describe the tags in the context of the individual metrics instead of having a single place for all tags? We could also keep a list of shared tags which includes that standard tags which have the same semantics across all metrics. The descriptions of the metrics could then refer to them but could also define other tags in the context of the particular metric (e.g. the outcome tag). WDYT?", "author": "sophokles73", "createdAt": "2020-08-26T11:28:56Z", "path": "site/documentation/content/api/Metrics.md", "diffHunk": "@@ -65,7 +65,8 @@ Additional tags for protocol adapters are:\n | *tenant*    | *string*                                           | The identifier of the tenant that the metric is being reported for |\n | *ttd*       | `command`, `expired`, `none`                    | A status indicating the outcome of processing a TTD value contained in a message received from a device.<br>`command` indicates that a command for the device has been included in the response to the device's request for uploading the message.<br>`expired` indicates that a response without a command has been sent to the device.<br>`none` indicates that either no TTD value has been specified by the device or that the protocol adapter does not support it. |\n | *type*      | `telemetry`, `event`                             | The type of (downstream) message that the metric is being reported for. |\n-| *outcome*   | `adapter-disabled`, `connection-duration-exceeded`,<br/>`data-volume-exceeded`, `registration-assertion-failure`,<br/>`succeeded`, `tenant-connections-exceeded`,<br/>`unauthorized`, `unavailable`, `unknown` | The outcome of a device's connection attempt.<br/>`adapter-connections-exceeded` indicates that the maximum number of connections that the adapter instance can handle are exceeded<br/>`adapter-disabled` indicates that the protocol adapter is not enabled for the device's tenant<br/>`connection-duration-exceeded` indicates that the overall amount of time that a tenant's devices may be connected to an adapter has exceeded<br/>`data-volume-exceeded` indicates that the overall amount of data that a tenant's device may transfer per time period has exceeded<br/>`registration-assertion-failure` indicates that the device is either unknown or disabled<br/>`succeeded` indicates a successfully established connection<br/>`tenant-connections-exceeded` indicates that the maximum number of devices that may be connected simultaneously for a tenant has been exceeded<br/>`unauthorized` indicates that the device failed to authenticate<br/>`unavailable` indicates that some of Hono's (required) services are not available<br/>`unknown` indicates an unknown reason. |\n+| *outcome* (for *hono.connections.attempts*) | `adapter-disabled`, `connection-duration-exceeded`,<br/>`data-volume-exceeded`, `registration-assertion-failure`,<br/>`succeeded`, `tenant-connections-exceeded`,<br/>`unauthorized`, `unavailable`, `unknown` | The outcome of a device's connection attempt.<br/>`adapter-connections-exceeded` indicates that the maximum number of connections that the adapter instance can handle are exceeded<br/>`adapter-disabled` indicates that the protocol adapter is not enabled for the device's tenant<br/>`connection-duration-exceeded` indicates that the overall amount of time that a tenant's devices may be connected to an adapter has exceeded<br/>`data-volume-exceeded` indicates that the overall amount of data that a tenant's device may transfer per time period has exceeded<br/>`registration-assertion-failure` indicates that the device is either unknown or disabled<br/>`succeeded` indicates a successfully established connection<br/>`tenant-connections-exceeded` indicates that the maximum number of devices that may be connected simultaneously for a tenant has been exceeded<br/>`unauthorized` indicates that the device failed to authenticate<br/>`unavailable` indicates that some of Hono's (required) services are not available<br/>`unknown` indicates an unknown reason. |\n+| *outcome* (for *hono.downstream.sent*) | *string* (AMQP 1.0 disposition) | Any of the AMQP 1.0 disposition states, as well as `Aborted`, in the case the connection/link was closed before the disposition could be read. | ", "originalCommit": "fd56de6a528008277c26144430a2401adbed70e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzI3NjA0MA==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r477276040", "bodyText": "Like this?", "author": "ctron", "createdAt": "2020-08-26T12:52:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzIyOTI3OQ=="}], "type": "inlineReview"}, {"oid": "47f2736b01ac92d354c22c7ea83b1c23ff1af8b5", "url": "https://github.com/eclipse/hono/commit/47f2736b01ac92d354c22c7ea83b1c23ff1af8b5", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-26T12:52:25Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwMjc5Nw==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r477302797", "bodyText": "I think this is better. However, it is unclear, which values are actually allowed here.\nThe AMQP 1.0 spec defines the delivery states as received, accepted, rejected, released and modified.\nThe code currently uses the simple class names, i.e. starting with a capital letter, plus the non-AMQP state Aborted.\nFor the other tags we only use all lowercase values so far so I would prefer to stick to that pattern and explicitly list the possible values here. WDYT?", "author": "sophokles73", "createdAt": "2020-08-26T13:32:35Z", "path": "site/documentation/content/api/Metrics.md", "diffHunk": "@@ -65,8 +65,19 @@ Additional tags for protocol adapters are:\n | *tenant*    | *string*                                           | The identifier of the tenant that the metric is being reported for |\n | *ttd*       | `command`, `expired`, `none`                    | A status indicating the outcome of processing a TTD value contained in a message received from a device.<br>`command` indicates that a command for the device has been included in the response to the device's request for uploading the message.<br>`expired` indicates that a response without a command has been sent to the device.<br>`none` indicates that either no TTD value has been specified by the device or that the protocol adapter does not support it. |\n | *type*      | `telemetry`, `event`                             | The type of (downstream) message that the metric is being reported for. |\n+\n+Additional tags for *hono.connections.attempts*:\n+\n+| Name        | Value                                              | Description |\n+| ----------- | -------------------------------------------------- | ----------- |\n | *outcome*   | `adapter-disabled`, `connection-duration-exceeded`,<br/>`data-volume-exceeded`, `registration-assertion-failure`,<br/>`succeeded`, `tenant-connections-exceeded`,<br/>`unauthorized`, `unavailable`, `unknown` | The outcome of a device's connection attempt.<br/>`adapter-connections-exceeded` indicates that the maximum number of connections that the adapter instance can handle are exceeded<br/>`adapter-disabled` indicates that the protocol adapter is not enabled for the device's tenant<br/>`connection-duration-exceeded` indicates that the overall amount of time that a tenant's devices may be connected to an adapter has exceeded<br/>`data-volume-exceeded` indicates that the overall amount of data that a tenant's device may transfer per time period has exceeded<br/>`registration-assertion-failure` indicates that the device is either unknown or disabled<br/>`succeeded` indicates a successfully established connection<br/>`tenant-connections-exceeded` indicates that the maximum number of devices that may be connected simultaneously for a tenant has been exceeded<br/>`unauthorized` indicates that the device failed to authenticate<br/>`unavailable` indicates that some of Hono's (required) services are not available<br/>`unknown` indicates an unknown reason. |\n \n+Additional tags for *hono.downstream.sent*:\n+\n+| Name        | Value                                              | Description |\n+| ----------- | -------------------------------------------------- | ----------- |\n+| *outcome*   | *string* (AMQP 1.0 disposition) | Any of the AMQP 1.0 disposition states, as well as `Aborted`, in the case the connection/link was closed before the disposition could be read. | ", "originalCommit": "47f2736b01ac92d354c22c7ea83b1c23ff1af8b5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwNzI5Ng==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r477307296", "bodyText": "It would have been more efficient to do this right away, I will amend the PR \u2026 anything else?", "author": "ctron", "createdAt": "2020-08-26T13:38:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwMjc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMxNzAyMA==", "url": "https://github.com/eclipse/hono/pull/2124#discussion_r477317020", "bodyText": "No, that should be it FMPOV. Sorry for the inconvenience ...", "author": "sophokles73", "createdAt": "2020-08-26T13:51:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzMwMjc5Nw=="}], "type": "inlineReview"}, {"oid": "2b56742064fdb033fc14f88fac45edcbf3fa6c56", "url": "https://github.com/eclipse/hono/commit/2b56742064fdb033fc14f88fac45edcbf3fa6c56", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-26T13:51:14Z", "type": "commit"}, {"oid": "2b56742064fdb033fc14f88fac45edcbf3fa6c56", "url": "https://github.com/eclipse/hono/commit/2b56742064fdb033fc14f88fac45edcbf3fa6c56", "message": "Add metrics sending messages downstream", "committedDate": "2020-08-26T13:51:14Z", "type": "forcePushed"}]}