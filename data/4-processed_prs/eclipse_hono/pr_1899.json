{"pr_number": 1899, "pr_title": "added ChirpStack lora provider", "pr_createdAt": "2020-04-14T13:27:11Z", "pr_url": "https://github.com/eclipse/hono/pull/1899", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4Mzc4Mg==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r408683782", "bodyText": "I do not think that you started working on this last year, did you? ;-)", "author": "sophokles73", "createdAt": "2020-04-15T08:52:10Z", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ChirpStackProvider.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation", "originalCommit": "ea50d79ed465cf813cfb68942a2284c43d2146bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NTkxNg==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r408685916", "bodyText": "this should throw LoraProviderMalformedPayloadException if the device ID cannot be extracted", "author": "sophokles73", "createdAt": "2020-04-15T08:55:41Z", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ChirpStackProvider.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.lora.providers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.hono.adapter.lora.LoraConstants;\n+import org.eclipse.hono.adapter.lora.LoraMessageType;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A LoRaWAN provider with API for ChirpStack.\n+ */\n+@Component\n+public class ChirpStackProvider implements LoraProvider {\n+\n+    private static final String FIELD_CHIRPSTACK_PAYLOAD = \"data\";\n+    private static final String FIELD_CHIRPSTACK_DEVICE = \"devEUI\";\n+    private static final String FIELD_CHIRPSTACK_TX_INFO = \"txInfo\";\n+    private static final String FIELD_CHIRPSTACK_SPREADING_FACTOR = \"spreadingFactor\";\n+    private static final String FIELD_CHIRPSTACK_BANDWIDTH = \"bandwidth\";\n+    private static final String FIELD_CHIRPSTACK_FUNCTION_PORT = \"fPort\";\n+    private static final String FIELD_CHIRPSTACK_CODE_RATE = \"codeRate\";\n+    private static final String FIELD_CHIRPSTACK_LORA_MODULATION_INFO = \"loRaModulationInfo\";\n+    private static final String FIELD_CHIRPSTACK_FREQUENCY = \"frequency\";\n+    private static final String FIELD_CHIRPSTACK_FRAME_COUNT = \"fCnt\";\n+    private static final String FIELD_CHIRPSTACK_RX_INFO = \"rxInfo\";\n+    private static final String FIELD_CHIRPSTACK_GATEWAY_ID = \"gatewayID\";\n+    private static final String FIELD_CHIRPSTACK_RSSI = \"rssi\";\n+    private static final String FIELD_CHIRPSTACK_LSNR = \"loRaSNR\";\n+    private static final String FIELD_CHIRPSTACK_CHANNEL = \"channel\";\n+    private static final String FIELD_CHIRPSTACK_LOCATION = \"location\";\n+    private static final String FIELD_CHIRPSTACK_LATITUDE = \"latitude\";\n+    private static final String FIELD_CHIRPSTACK_LONGITUDE = \"longitude\";\n+\n+    @Override\n+    public String getProviderName() {\n+        return \"chirpStack\";\n+    }\n+\n+    @Override\n+    public String pathPrefix() {\n+        return \"/chirpstack\";\n+    }\n+\n+    @Override\n+    public String extractDeviceId(final JsonObject loraMessage) {\n+        return loraMessage.getString(FIELD_CHIRPSTACK_DEVICE);", "originalCommit": "ea50d79ed465cf813cfb68942a2284c43d2146bd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTMzNzY3Nw==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r409337677", "bodyText": "ok, first thing I've heard from it.", "author": "BobClaerhout", "createdAt": "2020-04-16T07:26:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NTkxNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NDcyNg==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r409574726", "bodyText": "this is defined by the LoraProvider interface ...", "author": "sophokles73", "createdAt": "2020-04-16T13:54:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NTkxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjAzNQ==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r408686035", "bodyText": "this should throw LoraProviderMalformedPayloadException if the payload cannot be extracted", "author": "sophokles73", "createdAt": "2020-04-15T08:55:51Z", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ChirpStackProvider.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.lora.providers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.hono.adapter.lora.LoraConstants;\n+import org.eclipse.hono.adapter.lora.LoraMessageType;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A LoRaWAN provider with API for ChirpStack.\n+ */\n+@Component\n+public class ChirpStackProvider implements LoraProvider {\n+\n+    private static final String FIELD_CHIRPSTACK_PAYLOAD = \"data\";\n+    private static final String FIELD_CHIRPSTACK_DEVICE = \"devEUI\";\n+    private static final String FIELD_CHIRPSTACK_TX_INFO = \"txInfo\";\n+    private static final String FIELD_CHIRPSTACK_SPREADING_FACTOR = \"spreadingFactor\";\n+    private static final String FIELD_CHIRPSTACK_BANDWIDTH = \"bandwidth\";\n+    private static final String FIELD_CHIRPSTACK_FUNCTION_PORT = \"fPort\";\n+    private static final String FIELD_CHIRPSTACK_CODE_RATE = \"codeRate\";\n+    private static final String FIELD_CHIRPSTACK_LORA_MODULATION_INFO = \"loRaModulationInfo\";\n+    private static final String FIELD_CHIRPSTACK_FREQUENCY = \"frequency\";\n+    private static final String FIELD_CHIRPSTACK_FRAME_COUNT = \"fCnt\";\n+    private static final String FIELD_CHIRPSTACK_RX_INFO = \"rxInfo\";\n+    private static final String FIELD_CHIRPSTACK_GATEWAY_ID = \"gatewayID\";\n+    private static final String FIELD_CHIRPSTACK_RSSI = \"rssi\";\n+    private static final String FIELD_CHIRPSTACK_LSNR = \"loRaSNR\";\n+    private static final String FIELD_CHIRPSTACK_CHANNEL = \"channel\";\n+    private static final String FIELD_CHIRPSTACK_LOCATION = \"location\";\n+    private static final String FIELD_CHIRPSTACK_LATITUDE = \"latitude\";\n+    private static final String FIELD_CHIRPSTACK_LONGITUDE = \"longitude\";\n+\n+    @Override\n+    public String getProviderName() {\n+        return \"chirpStack\";\n+    }\n+\n+    @Override\n+    public String pathPrefix() {\n+        return \"/chirpstack\";\n+    }\n+\n+    @Override\n+    public String extractDeviceId(final JsonObject loraMessage) {\n+        return loraMessage.getString(FIELD_CHIRPSTACK_DEVICE);\n+    }\n+\n+    @Override\n+    public String extractPayload(final JsonObject loraMessage) {\n+        return loraMessage.getString(FIELD_CHIRPSTACK_PAYLOAD);", "originalCommit": "ea50d79ed465cf813cfb68942a2284c43d2146bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NjgzNw==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r408686837", "bodyText": "I do not think that you need to look up the key twice ...\nthe same is true for all of the other properties you are retrieving in the remainder of the method.", "author": "sophokles73", "createdAt": "2020-04-15T08:57:13Z", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ChirpStackProvider.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.lora.providers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.hono.adapter.lora.LoraConstants;\n+import org.eclipse.hono.adapter.lora.LoraMessageType;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A LoRaWAN provider with API for ChirpStack.\n+ */\n+@Component\n+public class ChirpStackProvider implements LoraProvider {\n+\n+    private static final String FIELD_CHIRPSTACK_PAYLOAD = \"data\";\n+    private static final String FIELD_CHIRPSTACK_DEVICE = \"devEUI\";\n+    private static final String FIELD_CHIRPSTACK_TX_INFO = \"txInfo\";\n+    private static final String FIELD_CHIRPSTACK_SPREADING_FACTOR = \"spreadingFactor\";\n+    private static final String FIELD_CHIRPSTACK_BANDWIDTH = \"bandwidth\";\n+    private static final String FIELD_CHIRPSTACK_FUNCTION_PORT = \"fPort\";\n+    private static final String FIELD_CHIRPSTACK_CODE_RATE = \"codeRate\";\n+    private static final String FIELD_CHIRPSTACK_LORA_MODULATION_INFO = \"loRaModulationInfo\";\n+    private static final String FIELD_CHIRPSTACK_FREQUENCY = \"frequency\";\n+    private static final String FIELD_CHIRPSTACK_FRAME_COUNT = \"fCnt\";\n+    private static final String FIELD_CHIRPSTACK_RX_INFO = \"rxInfo\";\n+    private static final String FIELD_CHIRPSTACK_GATEWAY_ID = \"gatewayID\";\n+    private static final String FIELD_CHIRPSTACK_RSSI = \"rssi\";\n+    private static final String FIELD_CHIRPSTACK_LSNR = \"loRaSNR\";\n+    private static final String FIELD_CHIRPSTACK_CHANNEL = \"channel\";\n+    private static final String FIELD_CHIRPSTACK_LOCATION = \"location\";\n+    private static final String FIELD_CHIRPSTACK_LATITUDE = \"latitude\";\n+    private static final String FIELD_CHIRPSTACK_LONGITUDE = \"longitude\";\n+\n+    @Override\n+    public String getProviderName() {\n+        return \"chirpStack\";\n+    }\n+\n+    @Override\n+    public String pathPrefix() {\n+        return \"/chirpstack\";\n+    }\n+\n+    @Override\n+    public String extractDeviceId(final JsonObject loraMessage) {\n+        return loraMessage.getString(FIELD_CHIRPSTACK_DEVICE);\n+    }\n+\n+    @Override\n+    public String extractPayload(final JsonObject loraMessage) {\n+        return loraMessage.getString(FIELD_CHIRPSTACK_PAYLOAD);\n+    }\n+\n+    @Override\n+    public LoraMessageType extractMessageType(final JsonObject loraMessage) {\n+        if (loraMessage.containsKey(FIELD_CHIRPSTACK_PAYLOAD)) {\n+            return LoraMessageType.UPLINK;\n+        }\n+        return LoraMessageType.UNKNOWN;\n+    }\n+\n+    @Override\n+    public Map<String, Object> extractNormalizedData(final JsonObject loraMessage) {\n+        final Map<String, Object> returnMap = new HashMap<>();\n+        if (loraMessage.containsKey(FIELD_CHIRPSTACK_TX_INFO)) {\n+            final JsonObject txInfo = loraMessage.getJsonObject(FIELD_CHIRPSTACK_TX_INFO);", "originalCommit": "ea50d79ed465cf813cfb68942a2284c43d2146bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4NzUwNw==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r408687507", "bodyText": "2020?", "author": "sophokles73", "createdAt": "2020-04-15T08:58:15Z", "path": "adapters/lora-vertx/src/test/java/org/eclipse/hono/adapter/lora/providers/ChirpStackProviderTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation", "originalCommit": "ea50d79ed465cf813cfb68942a2284c43d2146bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4ODUzOA==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r408688538", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-04-15T08:59:50Z", "path": "adapters/lora-vertx/src/test/resources/payload/chirpStack.uplink.json", "diffHunk": "@@ -0,0 +1,46 @@\n+{\n+  \"applicationID\": \"123\",\n+  \"applicationName\": \"temperature-sensor\",\n+  \"deviceName\": \"garden-sensor\",\n+  \"devEUI\": \"AgICAgICAgI=\",\n+  \"rxInfo\": [\n+    {\n+      \"gatewayID\": \"AwMDAwMDAwM=\",\n+      \"time\": \"2019-11-08T13:59:25.048445Z\",\n+      \"timeSinceGPSEpoch\": null,\n+      \"rssi\": -48,\n+      \"loRaSNR\": 9,\n+      \"channel\": 5,\n+      \"rfChain\": 0,\n+      \"board\": 0,\n+      \"antenna\": 0,\n+      \"location\": {\n+        \"latitude\": 52.3740364,\n+        \"longitude\": 4.9144401,\n+        \"altitude\": 10.5\n+      },\n+      \"fineTimestampType\": \"NONE\",\n+      \"context\": \"9u/uvA==\",\n+      \"uplinkID\": \"jhMh8Gq6RAOChSKbi83RHQ==\"\n+    }\n+  ],\n+  \"txInfo\": {\n+    \"frequency\": 868100000,\n+    \"modulation\": \"LORA\",\n+    \"loRaModulationInfo\": {\n+      \"bandwidth\": 125,\n+      \"spreadingFactor\": 11,\n+      \"codeRate\": \"4/5\",\n+      \"polarizationInversion\": false\n+    }\n+  },\n+  \"adr\": true,\n+  \"dr\": 1,\n+  \"fCnt\": 10,\n+  \"fPort\": 5,\n+  \"data\": \"data\",\n+  \"objectJSON\": \"{\\\"temperatureSensor\\\":25,\\\"humiditySensor\\\":32}\",\n+  \"tags\": {\n+    \"key\": \"value\"\n+  }\n+}", "originalCommit": "ea50d79ed465cf813cfb68942a2284c43d2146bd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f499cf891bfbf7e516888b22d185cd2c745e45bb", "url": "https://github.com/eclipse/hono/commit/f499cf891bfbf7e516888b22d185cd2c745e45bb", "message": "added ChirpStack lora provider\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-16T07:31:04Z", "type": "forcePushed"}, {"oid": "244911bc816d912130bc4daf1204197f42056945", "url": "https://github.com/eclipse/hono/commit/244911bc816d912130bc4daf1204197f42056945", "message": "added ChirpStack lora provider\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-16T08:56:31Z", "type": "forcePushed"}, {"oid": "dfba9ed42f4511b564c3b97eb72f185e69d70e70", "url": "https://github.com/eclipse/hono/commit/dfba9ed42f4511b564c3b97eb72f185e69d70e70", "message": "added ChirpStack lora provider\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-16T09:04:56Z", "type": "forcePushed"}, {"oid": "2b20fbf6041c18926b65abd7f8b74af7360af1a5", "url": "https://github.com/eclipse/hono/commit/2b20fbf6041c18926b65abd7f8b74af7360af1a5", "message": "added ChirpStack lora provider\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-16T09:13:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU3NjI2MQ==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r409576261", "bodyText": "I believe that this will throw a ClassCastException if the property is not a String ...\nHow about a more defensive approach:\nfinal Object obj = loraMessage.getValue(FIELD_CHIRPSTACK_DEVICE);\nif (obj instanceof String) {\n  return (String) obj;\n} else {\n  return null;\n}", "author": "sophokles73", "createdAt": "2020-04-16T13:56:14Z", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ChirpStackProvider.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.lora.providers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.hono.adapter.lora.LoraConstants;\n+import org.eclipse.hono.adapter.lora.LoraMessageType;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A LoRaWAN provider with API for ChirpStack.\n+ */\n+@Component\n+public class ChirpStackProvider implements LoraProvider {\n+\n+    private static final String FIELD_CHIRPSTACK_PAYLOAD = \"data\";\n+    private static final String FIELD_CHIRPSTACK_DEVICE = \"devEUI\";\n+    private static final String FIELD_CHIRPSTACK_TX_INFO = \"txInfo\";\n+    private static final String FIELD_CHIRPSTACK_SPREADING_FACTOR = \"spreadingFactor\";\n+    private static final String FIELD_CHIRPSTACK_BANDWIDTH = \"bandwidth\";\n+    private static final String FIELD_CHIRPSTACK_FUNCTION_PORT = \"fPort\";\n+    private static final String FIELD_CHIRPSTACK_CODE_RATE = \"codeRate\";\n+    private static final String FIELD_CHIRPSTACK_LORA_MODULATION_INFO = \"loRaModulationInfo\";\n+    private static final String FIELD_CHIRPSTACK_FREQUENCY = \"frequency\";\n+    private static final String FIELD_CHIRPSTACK_FRAME_COUNT = \"fCnt\";\n+    private static final String FIELD_CHIRPSTACK_RX_INFO = \"rxInfo\";\n+    private static final String FIELD_CHIRPSTACK_GATEWAY_ID = \"gatewayID\";\n+    private static final String FIELD_CHIRPSTACK_RSSI = \"rssi\";\n+    private static final String FIELD_CHIRPSTACK_LSNR = \"loRaSNR\";\n+    private static final String FIELD_CHIRPSTACK_CHANNEL = \"channel\";\n+    private static final String FIELD_CHIRPSTACK_LOCATION = \"location\";\n+    private static final String FIELD_CHIRPSTACK_LATITUDE = \"latitude\";\n+    private static final String FIELD_CHIRPSTACK_LONGITUDE = \"longitude\";\n+\n+    @Override\n+    public String getProviderName() {\n+        return \"chirpStack\";\n+    }\n+\n+    @Override\n+    public String pathPrefix() {\n+        return \"/chirpstack\";\n+    }\n+\n+    @Override\n+    public String extractDeviceId(final JsonObject loraMessage) {\n+        final String deviceId = loraMessage.getString(FIELD_CHIRPSTACK_DEVICE);", "originalCommit": "2b20fbf6041c18926b65abd7f8b74af7360af1a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9643b06a859c5c4953ccf2c6db171cf64b84df32", "url": "https://github.com/eclipse/hono/commit/9643b06a859c5c4953ccf2c6db171cf64b84df32", "message": "added ChirpStack lora provider\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-20T14:44:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk1MDI0Mw==", "url": "https://github.com/eclipse/hono/pull/1899#discussion_r411950243", "bodyText": "shouldn't we also throw the exception if the object is not null but is e.g. a number instead of a String? Isn't the devEUI field expected to be contained in each message and to hold a (Base64) String value?", "author": "sophokles73", "createdAt": "2020-04-21T07:43:36Z", "path": "adapters/lora-vertx/src/main/java/org/eclipse/hono/adapter/lora/providers/ChirpStackProvider.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.adapter.lora.providers;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.eclipse.hono.adapter.lora.LoraConstants;\n+import org.eclipse.hono.adapter.lora.LoraMessageType;\n+import org.springframework.stereotype.Component;\n+\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * A LoRaWAN provider with API for ChirpStack.\n+ */\n+@Component\n+public class ChirpStackProvider implements LoraProvider {\n+\n+    private static final String FIELD_CHIRPSTACK_PAYLOAD = \"data\";\n+    private static final String FIELD_CHIRPSTACK_DEVICE = \"devEUI\";\n+    private static final String FIELD_CHIRPSTACK_TX_INFO = \"txInfo\";\n+    private static final String FIELD_CHIRPSTACK_SPREADING_FACTOR = \"spreadingFactor\";\n+    private static final String FIELD_CHIRPSTACK_BANDWIDTH = \"bandwidth\";\n+    private static final String FIELD_CHIRPSTACK_FUNCTION_PORT = \"fPort\";\n+    private static final String FIELD_CHIRPSTACK_CODE_RATE = \"codeRate\";\n+    private static final String FIELD_CHIRPSTACK_LORA_MODULATION_INFO = \"loRaModulationInfo\";\n+    private static final String FIELD_CHIRPSTACK_FREQUENCY = \"frequency\";\n+    private static final String FIELD_CHIRPSTACK_FRAME_COUNT = \"fCnt\";\n+    private static final String FIELD_CHIRPSTACK_RX_INFO = \"rxInfo\";\n+    private static final String FIELD_CHIRPSTACK_GATEWAY_ID = \"gatewayID\";\n+    private static final String FIELD_CHIRPSTACK_RSSI = \"rssi\";\n+    private static final String FIELD_CHIRPSTACK_LSNR = \"loRaSNR\";\n+    private static final String FIELD_CHIRPSTACK_CHANNEL = \"channel\";\n+    private static final String FIELD_CHIRPSTACK_LOCATION = \"location\";\n+    private static final String FIELD_CHIRPSTACK_LATITUDE = \"latitude\";\n+    private static final String FIELD_CHIRPSTACK_LONGITUDE = \"longitude\";\n+\n+    @Override\n+    public String getProviderName() {\n+        return \"chirpStack\";\n+    }\n+\n+    @Override\n+    public String pathPrefix() {\n+        return \"/chirpstack\";\n+    }\n+\n+    @Override\n+    public String extractDeviceId(final JsonObject loraMessage) {\n+        final Object deviceId = loraMessage.getValue(FIELD_CHIRPSTACK_DEVICE);\n+        if (deviceId == null) {\n+            throw new LoraProviderMalformedPayloadException(\"DeviceId could not be extracted from message.\", null);\n+        }\n+        if (deviceId instanceof String) {\n+            return LoraUtils.convertFromBase64ToHex((String) deviceId);\n+        }\n+\n+        return null;", "originalCommit": "9643b06a859c5c4953ccf2c6db171cf64b84df32", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6ffa383c0033b450361ed0db2e9995b14f82a6c7", "url": "https://github.com/eclipse/hono/commit/6ffa383c0033b450361ed0db2e9995b14f82a6c7", "message": "added ChirpStack lora provider\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-21T09:02:54Z", "type": "commit"}, {"oid": "6ffa383c0033b450361ed0db2e9995b14f82a6c7", "url": "https://github.com/eclipse/hono/commit/6ffa383c0033b450361ed0db2e9995b14f82a6c7", "message": "added ChirpStack lora provider\n\nSigned-off-by: Bob Claerhout <claerhout.bob@gmail.com>", "committedDate": "2020-04-21T09:02:54Z", "type": "forcePushed"}]}