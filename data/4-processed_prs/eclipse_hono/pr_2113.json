{"pr_number": 2113, "pr_title": "[#2112] Part 1: Extend device registry base classes for search devices operation", "pr_createdAt": "2020-08-14T11:36:18Z", "pr_url": "https://github.com/eclipse/hono/pull/2113", "timeline": [{"oid": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "url": "https://github.com/eclipse/hono/commit/f0c121bbdcd19b68677e574507175a8dbadc2cb8", "message": "[#2112] Extend device registry base classes for search devices operation.\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-08-14T11:34:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NzMyMg==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470587322", "bodyText": "these are query params, thus I guess we should name them starting with PARAM_ ...", "author": "sophokles73", "createdAt": "2020-08-14T12:14:14Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -104,6 +104,46 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the field that contains the JSON pointer corresponding to the field used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_FIELD = \"field\";\n+\n+    /**\n+     * The name of the field that contains the filter JSON object for search devices operation.\n+     */\n+    public static final String FIELD_FILTER_JSON = \"filterJson\";\n+\n+    /**\n+     * The name of the field that contains the operator used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_OPERATOR = \"op\";\n+\n+    /**\n+     * The name of the field that contains the value used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_VALUE = \"value\";\n+\n+    /**\n+     * The name of the field that contains the page offset for search devices operation.\n+     */\n+    public static final String FIELD_PAGE_OFFSET = \"pageOffset\";\n+\n+    /**\n+     * The name of the field that contains the page size for search devices operation.\n+     */\n+    public static final String FIELD_PAGE_SIZE = \"pageSize\";", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NzU0NQ==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470587545", "bodyText": "this is a query param, thus I guess we should name it starting with PARAM_ .", "author": "sophokles73", "createdAt": "2020-08-14T12:14:43Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -104,6 +104,46 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the field that contains the JSON pointer corresponding to the field used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_FIELD = \"field\";\n+\n+    /**\n+     * The name of the field that contains the filter JSON object for search devices operation.\n+     */\n+    public static final String FIELD_FILTER_JSON = \"filterJson\";", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4NzU5MA==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470587590", "bodyText": "this is a query param, thus I guess we should name it starting with PARAM_ .", "author": "sophokles73", "createdAt": "2020-08-14T12:14:51Z", "path": "core/src/main/java/org/eclipse/hono/util/RegistryManagementConstants.java", "diffHunk": "@@ -104,6 +104,46 @@\n      */\n     public static final String FIELD_MEMBER_OF = \"memberOf\";\n \n+    /**\n+     * The name of the field that contains the JSON pointer corresponding to the field used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_FIELD = \"field\";\n+\n+    /**\n+     * The name of the field that contains the filter JSON object for search devices operation.\n+     */\n+    public static final String FIELD_FILTER_JSON = \"filterJson\";\n+\n+    /**\n+     * The name of the field that contains the operator used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_OPERATOR = \"op\";\n+\n+    /**\n+     * The name of the field that contains the value used for filtering devices.\n+     */\n+    public static final String FIELD_FILTER_VALUE = \"value\";\n+\n+    /**\n+     * The name of the field that contains the page offset for search devices operation.\n+     */\n+    public static final String FIELD_PAGE_OFFSET = \"pageOffset\";\n+\n+    /**\n+     * The name of the field that contains the page size for search devices operation.\n+     */\n+    public static final String FIELD_PAGE_SIZE = \"pageSize\";\n+\n+    /**\n+     * The name of the field that contains sort direction used by search devices operation to sort the result set.\n+     */\n+    public static final String FIELD_SORT_DIRECTION = \"direction\";\n+\n+    /**\n+     * The name of the field that contains the sort JSON object used by search devices operation to sort the result set.\n+     */\n+    public static final String FIELD_SORT_JSON = \"sortJson\";", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODMxNA==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470588314", "bodyText": "I do not think that we need to check the tenant ID here as we are merely using it as a query parameter, right? We do not need to prevent creation of a tenant with an illegal ID here,", "author": "sophokles73", "createdAt": "2020-08-14T12:16:32Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -135,6 +143,39 @@ private void doGetDevice(final RoutingContext ctx) {\n             .onComplete(s -> span.finish());\n     }\n \n+    private void doSearchDevices(final RoutingContext ctx) {\n+        final Span span = TracingHelper.buildServerChildSpan(\n+                tracer,\n+                TracingHandler.serverSpanContext(ctx),\n+                SPAN_NAME_SEARCH_DEVICES,\n+                getClass().getSimpleName()).start();\n+\n+        final Future<String> tenantId = getRequestParameter(ctx, PARAM_TENANT_ID,\n+                getPredicate(config.getTenantIdPattern(), false));", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY1MDUzMA==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470650530", "bodyText": "Ok. I will change it to String tenantId = getTenantParam(ctx)", "author": "kaniyan", "createdAt": "2020-08-14T14:16:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODMxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODU2MA==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470588560", "bodyText": "what if it's a float?", "author": "sophokles73", "createdAt": "2020-08-14T12:17:06Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -135,6 +143,39 @@ private void doGetDevice(final RoutingContext ctx) {\n             .onComplete(s -> span.finish());\n     }\n \n+    private void doSearchDevices(final RoutingContext ctx) {\n+        final Span span = TracingHelper.buildServerChildSpan(\n+                tracer,\n+                TracingHandler.serverSpanContext(ctx),\n+                SPAN_NAME_SEARCH_DEVICES,\n+                getClass().getSimpleName()).start();\n+\n+        final Future<String> tenantId = getRequestParameter(ctx, PARAM_TENANT_ID,\n+                getPredicate(config.getTenantIdPattern(), false));\n+        final Optional<Integer> pageSize = Optional\n+                .ofNullable(ctx.request().getParam(RegistryManagementConstants.FIELD_PAGE_SIZE))\n+                .map(Integer::parseInt);", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYyOTA5OQ==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470629099", "bodyText": "In the spec, the required data type for the pageSize is mentioned as integer. If it is float, then NumberFormatException will be thrown. I didn't get the intention of the comment. Is it to handle this exception using ClientErrorExecption?", "author": "kaniyan", "createdAt": "2020-08-14T13:38:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYzNTcxMg==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470635712", "bodyText": "When I run a curl command on my machine against your implementation:\ncurl http://registry/v1/devices/my-tenant?pageSize=23.5\n\nwhat will happen?", "author": "sophokles73", "createdAt": "2020-08-14T13:50:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODU2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY0Nzg2Mg==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470647862", "bodyText": "It will return 500 Internal Server Error. I will handle those exceptions so that  400 Bad Request is returned.", "author": "kaniyan", "createdAt": "2020-08-14T14:11:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4ODY0Mg==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470588642", "bodyText": "what if it's a float?", "author": "sophokles73", "createdAt": "2020-08-14T12:17:18Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -135,6 +143,39 @@ private void doGetDevice(final RoutingContext ctx) {\n             .onComplete(s -> span.finish());\n     }\n \n+    private void doSearchDevices(final RoutingContext ctx) {\n+        final Span span = TracingHelper.buildServerChildSpan(\n+                tracer,\n+                TracingHandler.serverSpanContext(ctx),\n+                SPAN_NAME_SEARCH_DEVICES,\n+                getClass().getSimpleName()).start();\n+\n+        final Future<String> tenantId = getRequestParameter(ctx, PARAM_TENANT_ID,\n+                getPredicate(config.getTenantIdPattern(), false));\n+        final Optional<Integer> pageSize = Optional\n+                .ofNullable(ctx.request().getParam(RegistryManagementConstants.FIELD_PAGE_SIZE))\n+                .map(Integer::parseInt);\n+        final Optional<Integer> pageOffset = Optional\n+                .ofNullable(ctx.request().getParam(RegistryManagementConstants.FIELD_PAGE_OFFSET))\n+                .map(Integer::parseInt);", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU4OTczMg==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470589732", "bodyText": "Finds devices ...", "author": "sophokles73", "createdAt": "2020-08-14T12:19:46Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -67,6 +71,51 @@\n      */\n     Future<OperationResult<Device>> readDevice(String tenantId, String deviceId, Span span);\n \n+    /**\n+     * Search devices belonging to the given tenant with optional filters, paging and sorting options.", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MDE2MA==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470590160", "bodyText": "how about\nreturn Future.succeededFuture(OperationResult.empty(HttpURLConnection.HTTP_NOT_IMPLEMENTED));", "author": "sophokles73", "createdAt": "2020-08-14T12:20:43Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -67,6 +71,51 @@\n      */\n     Future<OperationResult<Device>> readDevice(String tenantId, String deviceId, Span span);\n \n+    /**\n+     * Search devices belonging to the given tenant with optional filters, paging and sorting options.\n+     * <p>\n+     * This search operation is considered as optional since it is not required for the normal functioning of Hono and\n+     * is more of a convenient operation. Hence here it is declared as a default method which returns\n+     * {@link HttpURLConnection#HTTP_NOT_IMPLEMENTED}. It is upto the implementors of this interface to offer an\n+     * implementation of this service or not.\n+     *\n+     * @param tenantId The tenant that the devices belong to.\n+     * @param pageSize The maximum number of results to include in a response.\n+     * @param pageOffset The offset into the result set from which to include objects in the response. This allows to\n+     *                   retrieve the whole result set page by page.\n+     * @param filters A list of filters. The filters are predicates that objects in the result set must match.\n+     * @param sortOptions A list of sort options. The sortOptions specify properties to sort the result set by.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n+     *            implementation should log (error) events on this span and it may set tags and use this span as the\n+     *            parent for any spans created in this method.\n+     * @return A future indicating the outcome of the operation. The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\"> Device\n+     *         Registry Management API - Search Devices</a>\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\"> Device Registry\n+     *      Management API - Search Devices</a>\n+     */\n+    default Future<OperationResult<List<DeviceWithId>>> searchDevices(\n+            final String tenantId,\n+            final Optional<Integer> pageSize,\n+            final Optional<Integer> pageOffset,\n+            final Optional<List<Filter>> filters,\n+            final Optional<List<Sort>> sortOptions,\n+            final Span span) {\n+\n+        Objects.requireNonNull(tenantId);\n+        Objects.requireNonNull(pageSize);\n+        Objects.requireNonNull(pageOffset);\n+        Objects.requireNonNull(filters);\n+        Objects.requireNonNull(sortOptions);\n+        Objects.requireNonNull(span);\n+\n+        final Promise<OperationResult<List<DeviceWithId>>> defaultSearchDevicesResult = Promise.promise();\n+        defaultSearchDevicesResult.complete(OperationResult.empty(HttpURLConnection.HTTP_NOT_IMPLEMENTED));\n+\n+        return defaultSearchDevicesResult.future();", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MTUxNg==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470591516", "bodyText": "how about failing the result with a ClientErrorExecption in case the JSON cannot be parsed?", "author": "sophokles73", "createdAt": "2020-08-14T12:23:53Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -244,4 +285,23 @@ private void doDeleteDevice(final RoutingContext ctx) {\n                     () -> result.complete(new Device()));\n         return result.future();\n     }\n+\n+    private <T> Future<Optional<List<T>>> decodeJsonFromRequestParameter(final RoutingContext ctx,\n+            final String paramKey, final Class<T> clazz) {\n+\n+        Objects.requireNonNull(ctx);\n+        Objects.requireNonNull(paramKey);\n+        Objects.requireNonNull(clazz);\n+\n+        final Promise<Optional<List<T>>> result = Promise.promise();\n+        final Optional<List<T>> values = Optional.ofNullable(ctx.request().params()\n+                .getAll(paramKey))\n+                .map(jsons -> jsons\n+                        .stream()\n+                        .map(json -> Json.decodeValue(json, clazz))\n+                        .collect(Collectors.toList()));\n+        result.complete(values);\n+\n+        return result.future();", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5Mjc4NA==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470592784", "bodyText": "Operator", "author": "sophokles73", "createdAt": "2020-08-14T12:26:42Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Filter.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.vertx.core.json.pointer.JsonPointer;\n+\n+/**\n+ * Filter to apply during search operation in Device Registry Management API.\n+ *\n+ * @param <T> The filter value type.\n+ */\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public final class Filter<T> {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_FIELD)\n+    private JsonPointer field;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_VALUE)\n+    private T value;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_OPERATOR)\n+    private OPERATOR operator = OPERATOR.eq;\n+\n+    /**\n+     * An enum defining supported filter operators.\n+     */\n+    public enum OPERATOR {", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxMzc1NQ==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470613755", "bodyText": "My bad. I will change it.", "author": "kaniyan", "createdAt": "2020-08-14T13:10:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5Mjc4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MzE2OQ==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470593169", "bodyText": "Direction", "author": "sophokles73", "createdAt": "2020-08-14T12:27:31Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Sort.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.vertx.core.json.pointer.JsonPointer;\n+\n+/**\n+ * It specifies properties to sort the result set during search operation\n+ * in Device Registry Management API.\n+ */\n+public final class Sort {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_FIELD)\n+    private JsonPointer field;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_SORT_DIRECTION)\n+    private DIRECTION direction = DIRECTION.asc;\n+\n+    /**\n+     * An enum defining the sort directions.\n+     */\n+    public enum DIRECTION {", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NDU5NQ==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470594595", "bodyText": "can we add a constructor that accepts the mandatory field property and remove the setField method and make field final?", "author": "sophokles73", "createdAt": "2020-08-14T12:30:41Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Sort.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.util.Objects;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.vertx.core.json.pointer.JsonPointer;\n+\n+/**\n+ * It specifies properties to sort the result set during search operation\n+ * in Device Registry Management API.\n+ */\n+public final class Sort {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_FIELD)\n+    private JsonPointer field;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_SORT_DIRECTION)\n+    private DIRECTION direction = DIRECTION.asc;\n+\n+    /**\n+     * An enum defining the sort directions.\n+     */\n+    public enum DIRECTION {\n+        asc,\n+        desc\n+    }\n+", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5NTAwNg==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r470595006", "bodyText": "can we add a constructor accepting the mandatory properties and remove setField and setValue?", "author": "sophokles73", "createdAt": "2020-08-14T12:31:28Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/Filter.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.management.device;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import io.vertx.core.json.pointer.JsonPointer;\n+\n+/**\n+ * Filter to apply during search operation in Device Registry Management API.\n+ *\n+ * @param <T> The filter value type.\n+ */\n+@JsonInclude(value = JsonInclude.Include.NON_NULL)\n+public final class Filter<T> {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_FIELD)\n+    private JsonPointer field;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_VALUE)\n+    private T value;\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_FILTER_OPERATOR)\n+    private OPERATOR operator = OPERATOR.eq;\n+\n+    /**\n+     * An enum defining supported filter operators.\n+     */\n+    public enum OPERATOR {\n+        eq\n+    }\n+", "originalCommit": "f0c121bbdcd19b68677e574507175a8dbadc2cb8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "80b041f24fb2da9a697af062dc10422bd2edab66", "url": "https://github.com/eclipse/hono/commit/80b041f24fb2da9a697af062dc10422bd2edab66", "message": "Changes based on review comments\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-08-14T16:27:38Z", "type": "commit"}, {"oid": "80b041f24fb2da9a697af062dc10422bd2edab66", "url": "https://github.com/eclipse/hono/commit/80b041f24fb2da9a697af062dc10422bd2edab66", "message": "Changes based on review comments\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-08-14T16:27:38Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MjA4NQ==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r471262085", "bodyText": "what about checking the min/max values and returning a default value?", "author": "sophokles73", "createdAt": "2020-08-17T06:45:31Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -244,4 +282,46 @@ private void doDeleteDevice(final RoutingContext ctx) {\n                     () -> result.complete(new Device()));\n         return result.future();\n     }\n+\n+    private <T> Future<Optional<List<T>>> decodeJsonFromRequestParameter(final RoutingContext ctx,\n+            final String paramKey, final Class<T> clazz) {\n+\n+        Objects.requireNonNull(ctx);\n+        Objects.requireNonNull(paramKey);\n+        Objects.requireNonNull(clazz);\n+\n+        final Promise<Optional<List<T>>> result = Promise.promise();\n+        try {\n+            final Optional<List<T>> values = Optional.ofNullable(ctx.request().params()\n+                    .getAll(paramKey))\n+                    .map(jsons -> jsons\n+                            .stream()\n+                            .map(json -> Json.decodeValue(json, clazz))\n+                            .collect(Collectors.toList()));\n+            result.complete(values);\n+        } catch (final DecodeException e) {\n+            result.fail(new ClientErrorException(HttpURLConnection.HTTP_BAD_REQUEST,\n+                    String.format(\"error parsing json value of parameter [%s]\", paramKey), e));\n+        }\n+\n+        return result.future();\n+    }\n+\n+    private Future<Optional<Integer>> getRequestParameterIntegerValue(final RoutingContext ctx,\n+            final String paramKey) {\n+        Objects.requireNonNull(ctx);\n+        Objects.requireNonNull(paramKey);\n+\n+        final Promise<Optional<Integer>> result = Promise.promise();\n+        try {\n+            final Optional<Integer> value = Optional.ofNullable(ctx.request().params().get(paramKey))\n+                    .map(Integer::parseInt);\n+            result.complete(value);", "originalCommit": "80b041f24fb2da9a697af062dc10422bd2edab66", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU1MTQwMA==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r471551400", "bodyText": "The properties such as tenantId and deviceId patterns used for validations are made configurable by adding them to the ServiceConfigProperties. Following the same approach, min, max and default values for page size and offset could be made configurable. FMPOV these properties are specific to the device registry and doesn't suit well in that class. Hence I have created a new class DeviceRegistryManagementHttpServiceConfigProperties which extends HttpServiceConfigProperties to accommodate these min, max and default config properties. I have pushed a separate commit with those changes. If there is another alternate better way to achieve the above, I am open for it :)", "author": "kaniyan", "createdAt": "2020-08-17T15:18:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MjA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTU3NjMzMg==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r471576332", "bodyText": "FMPOV there is no need to make these configurable as we have defined all those values in the OpenAPI spec ...", "author": "sophokles73", "createdAt": "2020-08-17T15:55:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MjA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYwNzAwMw==", "url": "https://github.com/eclipse/hono/pull/2113#discussion_r471607003", "bodyText": "I have changed it accordingly.", "author": "kaniyan", "createdAt": "2020-08-17T16:47:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MjA4NQ=="}], "type": "inlineReview"}, {"oid": "5261b64e7c11f961056766fb681edcf6065fd7de", "url": "https://github.com/eclipse/hono/commit/5261b64e7c11f961056766fb681edcf6065fd7de", "message": "Validate and set default value for the current page size and page offset\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-08-17T16:43:18Z", "type": "commit"}, {"oid": "5261b64e7c11f961056766fb681edcf6065fd7de", "url": "https://github.com/eclipse/hono/commit/5261b64e7c11f961056766fb681edcf6065fd7de", "message": "Validate and set default value for the current page size and page offset\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>", "committedDate": "2020-08-17T16:43:18Z", "type": "forcePushed"}]}