{"pr_number": 2009, "pr_title": "[#1958]  implementation of the search devices operation for the file-based registry", "pr_createdAt": "2020-06-03T11:35:58Z", "pr_url": "https://github.com/eclipse/hono/pull/2009", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NTA4Nw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r437285087", "bodyText": "The description doesn't match the intention of the method.", "author": "kaniyan", "createdAt": "2020-06-09T09:50:14Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractDeviceManagementService.java", "diffHunk": "@@ -90,6 +93,22 @@ public void setTenantInformationService(final TenantInformationService tenantInf\n      */\n     protected abstract Future<Result<Void>> processDeleteDevice(DeviceKey key, Optional<String> resourceVersion, Span span);\n \n+    /**\n+     * Delete a device with a specified key.", "originalCommit": "c1e62e98a253b4d76a8b059137e51cc513655777", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4NzAxNQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r437287015", "bodyText": "This variable is used only within this class and IMHO this could be private.", "author": "kaniyan", "createdAt": "2020-06-09T09:53:30Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "diffHunk": "@@ -26,11 +26,17 @@\n      */\n     public static final int DEFAULT_MAX_AGE_SECONDS = 180;\n \n+    /**\n+     * The default limit of results returned by the service when searching for multiples devices.\n+     */\n+    public static final int DEFAULT_PAGE_LIMIT = 30;", "originalCommit": "c1e62e98a253b4d76a8b059137e51cc513655777", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI4OTkyMA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r437289920", "bodyText": "How about Optional.empty() instead of null?", "author": "kaniyan", "createdAt": "2020-06-09T09:58:25Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +522,43 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * This implementation is for demo purpose, it does not support filtering and sorting.\n+     * Moreover, the order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.\n+     */\n+    @Override\n+    public Future<OperationResult<List<DeviceWithId>>> searchDevices(final String tenantId, final Optional<Integer> limit, final Optional<Integer> offset,\n+                                                                     final Optional<Map> sorting, final Optional<Map> filters, final Span span) {\n+\n+        final int actualLimit = limit.orElse(config.getDefaultPageLimit());\n+        final int actualOffset = offset.orElse(0);\n+\n+        return Future.succeededFuture(doSearchDevices(tenantId, actualLimit, actualOffset));\n+    }\n+\n+    private OperationResult<List<DeviceWithId>> doSearchDevices(final String tenantId, final int limit, final int offset) {\n+\n+        final Set allDevicesIds = getDevicesForTenant(tenantId).keySet();\n+        final List<DeviceWithId> devicesList = new ArrayList<>();\n+\n+        for (int i = offset; i < limit + offset; i++ ) {\n+            final String id = (String) allDevicesIds.toArray()[i];\n+            final Device device = getDevicesForTenant(tenantId).get(id).getValue();\n+            final DeviceWithId withId = DeviceWithId.fromDevice(device, id);\n+\n+            devicesList.add(withId);\n+        }\n+\n+        return OperationResult.ok(HttpURLConnection.HTTP_OK,\n+                devicesList,\n+                Optional.ofNullable(DeviceRegistryUtils.getCacheDirective(config.getCacheMaxAge())),\n+                null);", "originalCommit": "c1e62e98a253b4d76a8b059137e51cc513655777", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDA3NA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r437304074", "bodyText": "IMHO it is better if the type is also specified for the Map that holds the filters elements(e.g Optional<Map<String, String>> filters). Also please check if it is also applicable for sorting .", "author": "kaniyan", "createdAt": "2020-06-09T10:23:49Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -106,4 +108,28 @@\n      *      Device Registry Management API - Delete Device Registration</a>\n      */\n     Future<Result<Void>> deleteDevice(String tenantId, String deviceId, Optional<String> resourceVersion, Span span);\n+\n+    /**\n+     * Gets all devices registration data by tenant ID. Optionally searchable with filters.\n+     *\n+     * @param tenantId The tenant the devices belongs to.\n+     * @param limit The maximum number of result to return.\n+     * @param offset The number of results to skip before applying the limit.\n+     * @param sorting A Map entry containing the JSON Path of a key to sort by, and the sorting method.\n+     *                If the sorting method is null, a default sort will be applied.\n+     * @param filters a Map containing the JSON Path of a key to filter by, and the value to filter with.\n+     *                If a filter key is given with a null value, it will be ignored.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method!\n+     *          An implementation should log (error) events on this span and it may set tags and use this span as the\n+     *          parent for any spans created in this method.\n+     * @return A future indicating the outcome of the operation.\n+     *         The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\">\n+     *         Device Registry Management API - Search devices for a tenant </a>\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\">\n+     *      Device Registry Management API - Search devices for a tenant</a>\n+     */\n+    Future<OperationResult<List<DeviceWithId>>> searchDevices(String tenantId, Optional<Integer> limit, Optional<Integer> offset,\n+                                                              Optional<Map> sorting, Optional<Map> filters, Span span);", "originalCommit": "c1e62e98a253b4d76a8b059137e51cc513655777", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkxNjkxMg==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r437916912", "bodyText": "I originally wanted to use Map.Entry for the sorting parameter but ran into issues at compilation. I'll look into it a bit more", "author": "jbtrystram", "createdAt": "2020-06-10T07:33:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMwNDA3NA=="}], "type": "inlineReview"}, {"oid": "74a1ed6daf6dd29406a2e4cb0d68de1533169cc8", "url": "https://github.com/eclipse/hono/commit/74a1ed6daf6dd29406a2e4cb0d68de1533169cc8", "message": "search device support work", "committedDate": "2020-07-27T16:27:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDYxMw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461520613", "bodyText": "I think it would be better to combine multiple filters into a single predicate and apply it only once, rather than iterating collection multiple times. This might not be the topic for this PR, but right now we're supporting only applying all filters. By combining predicated we could support OR functionality, but this might be left for the future.", "author": "dejanb", "createdAt": "2020-07-28T11:51:07Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +526,102 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * This implementation is for demo purpose, it does not support filtering and sorting.\n+     * Moreover, the order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.\n+     */\n+    @Override\n+    public Future<OperationResult<List<DeviceWithId>>> searchDevices(final String tenantId, final Optional<Integer> limit, final Optional<Integer> offset,\n+                                                                     final Optional<List<SortingOption>> sorting, final Optional<List<Filter>> filters, final Span span) {\n+\n+        final int actualLimit = limit.orElse(config.getDefaultPageLimit());\n+        final int actualOffset = offset.orElse(0);\n+\n+        return Future.succeededFuture(doSearchDevices(tenantId, actualLimit, actualOffset, sorting.orElse(null), filters.orElse(null)));\n+    }\n+\n+    private OperationResult<List<DeviceWithId>> doSearchDevices(final String tenantId, final int limit, final int offset,\n+                                                                final List<SortingOption> sort, final List<Filter> filters) {\n+\n+        final Set allDevicesIds = getDevicesForTenant(tenantId).keySet();\n+        List<DeviceWithId> devicesList = new ArrayList<>();\n+\n+        for (int i = offset; i < limit + offset; i++ ) {\n+            final String id = (String) allDevicesIds.toArray()[i];\n+            final Device device = getDevicesForTenant(tenantId).get(id).getValue();\n+            final DeviceWithId withId = DeviceWithId.fromDevice(device, id);\n+\n+            devicesList.add(withId);\n+        }\n+\n+        for (Filter f : filters) {\n+            devicesList = filterDeviceList(devicesList, f);\n+        }\n+\n+        for (SortingOption s : sort) {\n+            devicesList = sortDeviceList(devicesList, s);\n+        }\n+\n+        return OperationResult.ok(HttpURLConnection.HTTP_OK,\n+                devicesList,\n+                Optional.ofNullable(DeviceRegistryUtils.getCacheDirective(config.getCacheMaxAge())),\n+                Optional.empty());\n+    }\n+\n+    private List<DeviceWithId> filterDeviceList(final List<DeviceWithId> list, final Filter filter) {\n+\n+        return list\n+                .stream()\n+                .filter(buildJsonBasedPredicate(filter))", "originalCommit": "74a1ed6daf6dd29406a2e4cb0d68de1533169cc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4MjM5MA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r467082390", "bodyText": "Done :)", "author": "jbtrystram", "createdAt": "2020-08-07T14:38:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMDYxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTc4Ng==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461521786", "bodyText": "Same here, if we could build one comparator and then use one stream() to filter and sort that would be great.", "author": "dejanb", "createdAt": "2020-07-28T11:53:40Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +526,102 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * This implementation is for demo purpose, it does not support filtering and sorting.\n+     * Moreover, the order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.\n+     */\n+    @Override\n+    public Future<OperationResult<List<DeviceWithId>>> searchDevices(final String tenantId, final Optional<Integer> limit, final Optional<Integer> offset,\n+                                                                     final Optional<List<SortingOption>> sorting, final Optional<List<Filter>> filters, final Span span) {\n+\n+        final int actualLimit = limit.orElse(config.getDefaultPageLimit());\n+        final int actualOffset = offset.orElse(0);\n+\n+        return Future.succeededFuture(doSearchDevices(tenantId, actualLimit, actualOffset, sorting.orElse(null), filters.orElse(null)));\n+    }\n+\n+    private OperationResult<List<DeviceWithId>> doSearchDevices(final String tenantId, final int limit, final int offset,\n+                                                                final List<SortingOption> sort, final List<Filter> filters) {\n+\n+        final Set allDevicesIds = getDevicesForTenant(tenantId).keySet();\n+        List<DeviceWithId> devicesList = new ArrayList<>();\n+\n+        for (int i = offset; i < limit + offset; i++ ) {\n+            final String id = (String) allDevicesIds.toArray()[i];\n+            final Device device = getDevicesForTenant(tenantId).get(id).getValue();\n+            final DeviceWithId withId = DeviceWithId.fromDevice(device, id);\n+\n+            devicesList.add(withId);\n+        }\n+\n+        for (Filter f : filters) {\n+            devicesList = filterDeviceList(devicesList, f);\n+        }\n+\n+        for (SortingOption s : sort) {\n+            devicesList = sortDeviceList(devicesList, s);\n+        }\n+\n+        return OperationResult.ok(HttpURLConnection.HTTP_OK,\n+                devicesList,\n+                Optional.ofNullable(DeviceRegistryUtils.getCacheDirective(config.getCacheMaxAge())),\n+                Optional.empty());\n+    }\n+\n+    private List<DeviceWithId> filterDeviceList(final List<DeviceWithId> list, final Filter filter) {\n+\n+        return list\n+                .stream()\n+                .filter(buildJsonBasedPredicate(filter))\n+                .collect(Collectors.toList());\n+    }\n+\n+    //TODO : support JSON Path\n+    // won't be supported by vertx : https://github.com/eclipse-vertx/vert.x/issues/1661\n+    private Predicate<DeviceWithId> buildJsonBasedPredicate(final Filter filter) {\n+        return deviceWithId -> {\n+            final Map<String, Object> device = JsonObject.mapFrom(deviceWithId).getMap();\n+\n+            switch (filter.getOperation()) {\n+                case eq:\n+                    return device.get(filter.getField()) == filter.getValue();\n+                default:\n+                    return true;\n+            }\n+        };\n+    }\n+\n+    private List<DeviceWithId> sortDeviceList(final List<DeviceWithId> list, final SortingOption sort) {\n+\n+        return list\n+                .stream()\n+                .sorted(buildJsonBasedComparator(sort))", "originalCommit": "74a1ed6daf6dd29406a2e4cb0d68de1533169cc8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4MjM0MQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r467082341", "bodyText": "@dejanb I am not sure how that one is possible.", "author": "jbtrystram", "createdAt": "2020-08-07T14:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUyMTc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MjExOA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461552118", "bodyText": "Also please update this interface method as per the updated OpenAPI spec in #1995?", "author": "kaniyan", "createdAt": "2020-07-28T12:47:55Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -106,4 +108,28 @@\n      *      Device Registry Management API - Delete Device Registration</a>\n      */\n     Future<Result<Void>> deleteDevice(String tenantId, String deviceId, Optional<String> resourceVersion, Span span);\n+\n+    /**\n+     * Gets all devices registration data by tenant ID. Optionally searchable with filters.\n+     *\n+     * @param tenantId The tenant the devices belongs to.\n+     * @param limit The maximum number of result to return.\n+     * @param offset The number of results to skip before applying the limit.\n+     * @param sorting A Map entry containing the JSON Path of a key to sort by, and the sorting method.\n+     *                If the sorting method is null, a default sort will be applied.\n+     * @param filters a Map containing the JSON Path of a key to filter by, and the value to filter with.\n+     *                If a filter key is given with a null value, it will be ignored.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method!\n+     *          An implementation should log (error) events on this span and it may set tags and use this span as the\n+     *          parent for any spans created in this method.\n+     * @return A future indicating the outcome of the operation.\n+     *         The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\">\n+     *         Device Registry Management API - Search devices for a tenant </a>\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\">\n+     *      Device Registry Management API - Search devices for a tenant</a>\n+     */\n+    Future<OperationResult<List<DeviceWithId>>> searchDevices(String tenantId, Optional<Integer> limit, Optional<Integer> offset,\n+                                                              Optional<Map> sorting, Optional<Map> filters, Span span);", "originalCommit": "794976912d2bbb9e23aecbf271d731c91bb10bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4MDM5Ng==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461580396", "bodyText": "I did, I created value objects for Sorting Option and filters. You commented an outdated commit, or maybe I missed something ? what do you have in mind ?", "author": "jbtrystram", "createdAt": "2020-07-28T13:30:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MjExOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MDIxMQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461590211", "bodyText": "My bad! I looked into an outdated commit. Pls ignore the above comment.", "author": "kaniyan", "createdAt": "2020-07-28T13:43:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1MjExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NTM2MA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461555360", "bodyText": "My understanding is that the searchDevices operation is not mandatory and it is also not needed for Hono to function normally. IMHO we can declare this method as default, there by the implementers of device registry APIs can decide if they would like to implement it or not. This default method could respond with http status code 501 Not Implemented.  WDYT?", "author": "kaniyan", "createdAt": "2020-07-28T12:53:12Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -106,4 +108,28 @@\n      *      Device Registry Management API - Delete Device Registration</a>\n      */\n     Future<Result<Void>> deleteDevice(String tenantId, String deviceId, Optional<String> resourceVersion, Span span);\n+\n+    /**\n+     * Gets all devices registration data by tenant ID. Optionally searchable with filters.\n+     *\n+     * @param tenantId The tenant the devices belongs to.\n+     * @param limit The maximum number of result to return.\n+     * @param offset The number of results to skip before applying the limit.\n+     * @param sorting A Map entry containing the JSON Path of a key to sort by, and the sorting method.\n+     *                If the sorting method is null, a default sort will be applied.\n+     * @param filters a Map containing the JSON Path of a key to filter by, and the value to filter with.\n+     *                If a filter key is given with a null value, it will be ignored.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method!\n+     *          An implementation should log (error) events on this span and it may set tags and use this span as the\n+     *          parent for any spans created in this method.\n+     * @return A future indicating the outcome of the operation.\n+     *         The <em>status code</em> is set as specified in the\n+     *         <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\">\n+     *         Device Registry Management API - Search devices for a tenant </a>\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\">\n+     *      Device Registry Management API - Search devices for a tenant</a>\n+     */\n+    Future<OperationResult<List<DeviceWithId>>> searchDevices(String tenantId, Optional<Integer> limit, Optional<Integer> offset,", "originalCommit": "794976912d2bbb9e23aecbf271d731c91bb10bc9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4MDg1MA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461580850", "bodyText": "Very good point !", "author": "jbtrystram", "createdAt": "2020-07-28T13:30:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NTM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU4NTk5Nw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461585997", "bodyText": "@kaniyan added in 775da13", "author": "jbtrystram", "createdAt": "2020-07-28T13:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NTM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MzczNQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461593735", "bodyText": "\ud83d\udc4d  IMHO it would be also useful to add some info about it and why the status code 501 is being returned to the JavaDoc.", "author": "kaniyan", "createdAt": "2020-07-28T13:48:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NTM2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NjExNQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461656115", "bodyText": "Done.", "author": "jbtrystram", "createdAt": "2020-07-28T15:06:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU1NTM2MA=="}], "type": "inlineReview"}, {"oid": "5210671adc512ffd120b9c1f0e34fa39217c0d79", "url": "https://github.com/eclipse/hono/commit/5210671adc512ffd120b9c1f0e34fa39217c0d79", "message": "add a default implementation returning non implemented", "committedDate": "2020-07-28T13:44:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxNjk4OQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461616989", "bodyText": "How about null check of the arguments as described in the JavaDoc of the searchDevices method?\n@throws NullPointerException if any of the parameters is {@code null}.", "author": "kaniyan", "createdAt": "2020-07-28T14:17:13Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -129,6 +131,11 @@\n      * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/#/devices/searchDevicesForTenant\">\n      *      Device Registry Management API - Search devices for a tenant</a>\n      */\n-    Future<OperationResult<List<DeviceWithId>>> searchDevices(String tenantId, Optional<Integer> limit, Optional<Integer> offset,\n-                                                              Optional<List<SortingOption>> sorting, Optional<List<Filter>> filters, Span span);\n+    default Future<OperationResult<List<DeviceWithId>>> searchDevices(String tenantId, Optional<Integer> limit, Optional<Integer> offset,\n+                                                              Optional<List<SortingOption>> sorting, Optional<List<Filter>> filters, Span span) {\n+", "originalCommit": "5210671adc512ffd120b9c1f0e34fa39217c0d79", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NTk4Nw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r461655987", "bodyText": "ah good catch, thanks.", "author": "jbtrystram", "createdAt": "2020-07-28T15:05:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxNjk4OQ=="}], "type": "inlineReview"}, {"oid": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "url": "https://github.com/eclipse/hono/commit/b46dd99f6c31f3cc44d5207a067ae03841a71c85", "message": "add check for limit size to not exceed configured max value", "committedDate": "2020-08-07T14:41:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNTM1NA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r467705354", "bodyText": "I can only see a List but no Map here ...\nJSON Pointer?", "author": "sophokles73", "createdAt": "2020-08-10T06:18:52Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractDeviceManagementService.java", "diffHunk": "@@ -90,6 +94,22 @@ public void setTenantInformationService(final TenantInformationService tenantInf\n      */\n     protected abstract Future<Result<Void>> processDeleteDevice(DeviceKey key, Optional<String> resourceVersion, Span span);\n \n+    /**\n+     * Search for the devices optionally using filters and sort options.\n+     *\n+     * @param tenantId The tenantID.\n+     * @param limit The maximum number of result to return.\n+     * @param offset The number of results to skip before applying the limit.\n+     * @param sorting A Map entry containing the JSON Path of a key to sort by, and the sorting method.", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNTgwNQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r467705805", "bodyText": "List? JSON Pointer?", "author": "sophokles73", "createdAt": "2020-08-10T06:20:22Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractDeviceManagementService.java", "diffHunk": "@@ -90,6 +94,22 @@ public void setTenantInformationService(final TenantInformationService tenantInf\n      */\n     protected abstract Future<Result<Void>> processDeleteDevice(DeviceKey key, Optional<String> resourceVersion, Span span);\n \n+    /**\n+     * Search for the devices optionally using filters and sort options.\n+     *\n+     * @param tenantId The tenantID.\n+     * @param limit The maximum number of result to return.\n+     * @param offset The number of results to skip before applying the limit.\n+     * @param sorting A Map entry containing the JSON Path of a key to sort by, and the sorting method.\n+     *                If the sorting method is null, a default sort will be applied.\n+     * @param filters a Map containing the JSON Path of a key to filter by, and the value to filter with.", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNzAwMg==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r467707002", "bodyText": "I have just now realized that we are using a GET request with a request body (containing the query params). This is commonly considered bad practice for RESTful APIs. One of the reasons being that standard HTTP infrastructure like proxies will often not consider the body of a GET request and might return a cached response which has been created for a different set of query params.\nThe common advice is to either use POST instead or encode the search criteria in URI query params. The latter approach is used by most GET based APIs of common services AFAIK.\nSince the POST /tenantID resource is already in use we might want to consider using query params instead.\nSome references:\nhttps://stackoverflow.com/questions/978061/http-get-with-request-body\nhttps://softwareengineering.stackexchange.com/questions/372664/use-case-of-http-get-request-with-a-body\nHere's one which explicitly proposes a design for a search API:\nhttps://stackoverflow.blog/2020/03/02/best-practices-for-rest-api-design/\n@dejanb @ctron @calohmn WDYT?", "author": "sophokles73", "createdAt": "2020-08-10T06:24:32Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DelegatingDeviceManagementHttpEndpoint.java", "diffHunk": "@@ -101,6 +105,11 @@ public void addRoutes(final Router router) {\n         router.get(pathWithTenantAndDeviceId)\n                 .handler(this::doGetDevice);\n \n+        //GET devices for tenant\n+        router.get(pathWithTenant)", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ5NDU0Nw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r468494547", "bodyText": "@sophokles73 I looked up a little bit on this topic. It seems like it's generally not considered a good practice but there are exceptions like Elastic supporting it (but they also have POST alternative for environments that are challenged by this).\nI could see that specifying JSON query as a GET param can be a bit messy? But it still might be a better option than introducing the whole new endpoint for search.", "author": "dejanb", "createdAt": "2020-08-11T10:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODUwNzkzMA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r468507930", "bodyText": "I agree that using GET with a query string will be preferable.\n@jbtrystram we will need to update the OpenAPI spec accordingly ...", "author": "sophokles73", "createdAt": "2020-08-11T11:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNzAwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkzMTIxMA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r482931210", "bodyText": "@sophokles73 this was taken care of by @kaniyan in #2113.", "author": "jbtrystram", "createdAt": "2020-09-03T12:14:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNzAwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwODI0MQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r467708241", "bodyText": "there is no Map here, just Lists AFAIC\nJSON Pointer ...", "author": "sophokles73", "createdAt": "2020-08-10T06:28:56Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceManagementService.java", "diffHunk": "@@ -106,4 +110,42 @@\n      *      Device Registry Management API - Delete Device Registration</a>\n      */\n     Future<Result<Void>> deleteDevice(String tenantId, String deviceId, Optional<String> resourceVersion, Span span);\n+\n+    /**\n+     * Gets all devices registration data by tenant ID. Optionally searchable with filters.\n+     * As this method is optional to support for implementations the default implementation will respond\n+     * with http status code: 501 Not Implemented.\n+     *\n+     * @param tenantId The tenant the devices belongs to.\n+     * @param limit The maximum number of result to return.\n+     * @param offset The number of results to skip before applying the limit.\n+     * @param sorting A Map entry containing the JSON Path of a key to sort by, and the sorting method.\n+     *                If the sorting method is null, a default sort will be applied.\n+     * @param filters a Map containing the JSON Path of a key to filter by, and the value to filter with.\n+     *                If a filter key is given with a null value, it will be ignored.", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjExOA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r467712118", "bodyText": "FMPOV the expected order of applying the sorting and filtering is this:\n\napply the filter on the set of all devices\nsort the selected elements according to the sorting criteria\nreturn the requested subset according to the paging options\n\nOtherwise, you might get back less objects than requested, if fewer objects in the page match the filtering criteria ...", "author": "sophokles73", "createdAt": "2020-08-10T06:41:05Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +527,108 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * This implementation is for demo purpose, it does not support filtering and sorting.\n+     * Moreover, the order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.\n+     */\n+    @Override\n+    public Future<OperationResult<List<DeviceWithId>>> searchDevices(final String tenantId, final Optional<Integer> limit, final Optional<Integer> offset,\n+                                                                     final Optional<List<SortingOption>> sorting, final Optional<List<Filter>> filters, final Span span) {\n+        final int actualLimit = limit.map(l -> {\n+            if (l > config.getMaxPageLimit()) {\n+              return config.getMaxPageLimit();\n+            } else {\n+              return l;\n+            }\n+        }).orElse(config.getDefaultPageLimit());\n+        final int actualOffset = offset.orElse(0);\n+\n+        return Future.succeededFuture(doSearchDevices(tenantId, actualLimit, actualOffset, sorting.orElse(Collections.EMPTY_LIST), filters.orElse(Collections.EMPTY_LIST)));\n+    }\n+\n+    private OperationResult<List<DeviceWithId>> doSearchDevices(final String tenantId, final int limit, final int offset,\n+                                                                final List<SortingOption> sort, final List<Filter> filters) {\n+\n+        final Set allDevicesIds = getDevicesForTenant(tenantId).keySet();\n+        List<DeviceWithId> devicesList = new ArrayList<>();\n+\n+        for (int i = offset; i < allDevicesIds.size() && devicesList.size() < limit; i++) {\n+            final String id = (String) allDevicesIds.toArray()[i];\n+            final Device device = getDevicesForTenant(tenantId).get(id).getValue();\n+            final DeviceWithId withId = DeviceWithId.fromDevice(device, id);\n+\n+            devicesList.add(withId);\n+        }\n+\n+        final List<Predicate<DeviceWithId>> predicates = new ArrayList<>();\n+        for (Filter f : filters) {\n+            predicates.add(buildJsonBasedPredicate(f));\n+        }\n+\n+        //Regroup predicates in a single one with AND.\n+        final Predicate<DeviceWithId> predicate = predicates.stream()\n+                .reduce(x -> true, Predicate::and);\n+\n+        // filter the list\n+        devicesList = devicesList\n+                .stream()\n+                .filter(predicate)\n+                .collect(Collectors.toList());\n+\n+        for (SortingOption s : sort) {\n+            devicesList = sortDeviceList(devicesList, s);\n+        }\n+\n+        return OperationResult.ok(HttpURLConnection.HTTP_OK,\n+                devicesList,\n+                Optional.ofNullable(DeviceRegistryUtils.getCacheDirective(config.getCacheMaxAge())),\n+                Optional.empty());", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxMjMxMw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r467712313", "bodyText": "?", "author": "sophokles73", "createdAt": "2020-08-10T06:41:42Z", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedDeviceBackend.java", "diffHunk": "@@ -125,6 +125,7 @@ public MongoDbBasedDeviceBackend(\n         return registrationService.updateDevice(tenantId, deviceId, device, resourceVersion, span);\n     }\n \n+", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3MTg3Ng==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r469071876", "bodyText": "I do not think that you want to be able to change the identifier after the instance has been created, do you?", "author": "sophokles73", "createdAt": "2020-08-12T07:50:51Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceWithId.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.device;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+\n+/**\n+ * Device Information.\n+ */\n+@JsonInclude(value = Include.NON_NULL)\n+public class DeviceWithId extends Device {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID)\n+    private String deviceId;\n+\n+    private DeviceWithId(final Device device, final String id) {\n+        super(device);\n+        setDeviceId(id);\n+    }\n+\n+    /**\n+     * Creates a new DeviceWithId instance.\n+     */\n+    public DeviceWithId() {\n+    }\n+\n+    /**\n+     * Creates a new DeviceWithId instance from a Device object, adding the Id.\n+     *\n+     * @param device The Device object.\n+     * @param id the device Id as a string.\n+     * @return a deviceWithId object.\n+     */\n+    public static DeviceWithId fromDevice(final Device device, final String id) {\n+\n+        return new DeviceWithId(device, id);\n+    }\n+\n+    /**\n+     * Set the device Id for this device.\n+     *\n+     * @param deviceId The resource ID for this device.\n+     * @return A reference to this for fluent use.\n+     */\n+    public DeviceWithId setDeviceId(final String deviceId) {\n+        this.deviceId = deviceId;\n+        return this;\n+    }", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3MTk1Ng==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r469071956", "bodyText": "final?", "author": "sophokles73", "createdAt": "2020-08-12T07:51:01Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/DeviceWithId.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.device;\n+\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+\n+/**\n+ * Device Information.\n+ */\n+@JsonInclude(value = Include.NON_NULL)\n+public class DeviceWithId extends Device {\n+\n+    @JsonProperty(RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID)\n+    private String deviceId;\n+\n+    private DeviceWithId(final Device device, final String id) {\n+        super(device);\n+        setDeviceId(id);\n+    }\n+\n+    /**\n+     * Creates a new DeviceWithId instance.\n+     */\n+    public DeviceWithId() {\n+    }\n+\n+    /**\n+     * Creates a new DeviceWithId instance from a Device object, adding the Id.\n+     *\n+     * @param device The Device object.\n+     * @param id the device Id as a string.\n+     * @return a deviceWithId object.\n+     */\n+    public static DeviceWithId fromDevice(final Device device, final String id) {\n+\n+        return new DeviceWithId(device, id);\n+    }\n+\n+    /**\n+     * Set the device Id for this device.\n+     *\n+     * @param deviceId The resource ID for this device.\n+     * @return A reference to this for fluent use.\n+     */\n+    public DeviceWithId setDeviceId(final String deviceId) {\n+        this.deviceId = deviceId;\n+        return this;\n+    }\n+\n+    /**\n+     * Get the device Id for this device.\n+     *\n+     * @return A string containing the deviceID.\n+     */\n+    @JsonIgnore\n+    public String getDeviceId() {", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3Mzk5Mw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r469073993", "bodyText": "If I am not mistaken then you are returning DeviceWithId instances to the client which include the device identifier. However, the OpenAPI spec defines the returned result as an array of Device objects which do not contain an ID.", "author": "sophokles73", "createdAt": "2020-08-12T07:54:48Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +527,108 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * This implementation is for demo purpose, it does not support filtering and sorting.\n+     * Moreover, the order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.\n+     */\n+    @Override\n+    public Future<OperationResult<List<DeviceWithId>>> searchDevices(final String tenantId, final Optional<Integer> limit, final Optional<Integer> offset,\n+                                                                     final Optional<List<SortingOption>> sorting, final Optional<List<Filter>> filters, final Span span) {\n+        final int actualLimit = limit.map(l -> {\n+            if (l > config.getMaxPageLimit()) {\n+              return config.getMaxPageLimit();\n+            } else {\n+              return l;\n+            }\n+        }).orElse(config.getDefaultPageLimit());\n+        final int actualOffset = offset.orElse(0);\n+\n+        return Future.succeededFuture(doSearchDevices(tenantId, actualLimit, actualOffset, sorting.orElse(Collections.EMPTY_LIST), filters.orElse(Collections.EMPTY_LIST)));\n+    }\n+\n+    private OperationResult<List<DeviceWithId>> doSearchDevices(final String tenantId, final int limit, final int offset,", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjk3NzA5Mw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r482977093", "bodyText": "I see that you updated the openAPI spec the same day you wrote this comment.", "author": "jbtrystram", "createdAt": "2020-09-03T13:28:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3Mzk5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTA3NDE0Nw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r469074147", "bodyText": "Is this still true?", "author": "sophokles73", "createdAt": "2020-08-12T07:55:00Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +527,108 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * This implementation is for demo purpose, it does not support filtering and sorting.\n+     * Moreover, the order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.", "originalCommit": "b46dd99f6c31f3cc44d5207a067ae03841a71c85", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9f4daba776d1a453e189d55a5412b6565406c3e1", "url": "https://github.com/eclipse/hono/commit/9f4daba776d1a453e189d55a5412b6565406c3e1", "message": "align file based search devices implem to base classes", "committedDate": "2020-09-03T15:10:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0MDk5Ng==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r483540996", "bodyText": "Could you please rebase again with the master? searchDevices(...) doesn't return List<DeviceWithId> anymore rather SearchDevicesResult.", "author": "kaniyan", "createdAt": "2020-09-04T10:49:19Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedDeviceBackend.java", "diffHunk": "@@ -175,9 +175,8 @@ public FileBasedDeviceBackend(\n     }\n \n     @Override\n-    public Future<OperationResult<List<DeviceWithId>>> searchDevices(final String tenantId, final Optional<Integer> limit,\n-                                                                     final Optional<Integer> offset, final Optional<List<SortingOption>> sorting, final Optional<List<Filter>> filters, final Span span) {\n-        return registrationService.searchDevices(tenantId, limit, offset, sorting, filters, span);\n+    public Future<OperationResult<List<DeviceWithId>>> searchDevices(final String tenantId, final int pageSize, final int pageOffset, final List<Filter> filters, final List<Sort> sortOptions, final Span span) {", "originalCommit": "9f4daba776d1a453e189d55a5412b6565406c3e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyMTg2Mw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r484421863", "bodyText": "Done.", "author": "jbtrystram", "createdAt": "2020-09-07T13:07:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU0MDk5Ng=="}], "type": "inlineReview"}, {"oid": "b9718a4a65d77e9931e677377c6f621fcb96d554", "url": "https://github.com/eclipse/hono/commit/b9718a4a65d77e9931e677377c6f621fcb96d554", "message": "align file based search devices implem to base classes", "committedDate": "2020-09-07T13:06:04Z", "type": "forcePushed"}, {"oid": "7f65b8b04fe51d54c3f08dd7fb5ee4d105ab7783", "url": "https://github.com/eclipse/hono/commit/7f65b8b04fe51d54c3f08dd7fb5ee4d105ab7783", "message": "[#1958] Follow up of issue #1995. Add a preliminary implementation of the search devices operation for the file-based registry, with paging support only.\nFiltering and sorting should be implemented using databases features.\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-07T13:13:07Z", "type": "forcePushed"}, {"oid": "de3eb978d86a929782db0829122478f6370cce48", "url": "https://github.com/eclipse/hono/commit/de3eb978d86a929782db0829122478f6370cce48", "message": "[#1958] Follow up of issue #1995. Add a preliminary implementation of the search devices operation for the file-based registry, with paging support only.\nFiltering and sorting should be implemented using databases features.\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-07T13:13:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxMDMzNw==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r484810337", "bodyText": "IMHO it doesn't return all devices for a tenant. The JavaDoc from the parent class could be well reused by using {@inheritdoc} and then adding your additional comment regarding in-memory storage and paging inconsistency.", "author": "kaniyan", "createdAt": "2020-09-08T10:19:49Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +527,120 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.", "originalCommit": "de3eb978d86a929782db0829122478f6370cce48", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3NjI2OA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r484876268", "bodyText": "Good catch !", "author": "jbtrystram", "createdAt": "2020-09-08T12:27:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxMDMzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxMTMyNA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r484811324", "bodyText": "How about Set<String>?", "author": "kaniyan", "createdAt": "2020-09-08T10:21:41Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +527,120 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * The order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.\n+     */\n+    @Override\n+    public Future<OperationResult<SearchDevicesResult>> searchDevices(final String tenantId, final int pageSize, final int pageOffset,\n+                                                                       final List<Filter> filters, final List<Sort> sortOptions, final Span span) {\n+\n+        final Set allDevicesIds = getDevicesForTenant(tenantId).keySet();", "originalCommit": "de3eb978d86a929782db0829122478f6370cce48", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8ca9c1d1e0ee3a47b56512277f93e158e029e87a", "url": "https://github.com/eclipse/hono/commit/8ca9c1d1e0ee3a47b56512277f93e158e029e87a", "message": "add unit tests and enable integration tests for add search devices operation\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-08T13:23:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MjA3MQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r484972071", "bodyText": "pageOffset corresponds to pages and not the place holder of the result in resultset. I think here it should be int i = pageOffset*PageSize+1. Eg. When the pageSize is set to 10 and pageOffset to 2, the result should start with 21st device in the resultset and not 2nd.", "author": "kaniyan", "createdAt": "2020-09-08T14:37:54Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +527,120 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * The order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.\n+     */\n+    @Override\n+    public Future<OperationResult<SearchDevicesResult>> searchDevices(final String tenantId, final int pageSize, final int pageOffset,\n+                                                                       final List<Filter> filters, final List<Sort> sortOptions, final Span span) {\n+\n+        final Set allDevicesIds = getDevicesForTenant(tenantId).keySet();\n+        List<DeviceWithId> devicesList = new ArrayList<>();\n+\n+        for (int i = 0; i < allDevicesIds.size(); i++) {\n+            final String id = (String) allDevicesIds.toArray()[i];\n+            final Device device = getDevicesForTenant(tenantId).get(id).getValue();\n+            final DeviceWithId withId = DeviceWithId.from(id, device);\n+\n+            devicesList.add(withId);\n+        }\n+\n+        final List<Predicate<DeviceWithId>> predicates = new ArrayList<>();\n+        for (Filter f : filters) {\n+            predicates.add(buildJsonBasedPredicate(f));\n+        }\n+\n+        //Regroup predicates in a single one with AND.\n+        final Predicate<DeviceWithId> predicate = predicates.stream()\n+                .reduce(x -> true, Predicate::and);\n+\n+        // 1. apply the filter options to the list\n+        devicesList = devicesList\n+                .stream()\n+                .filter(predicate)\n+                .collect(Collectors.toList());\n+\n+        // 2. sort the selected elements\n+        for (Sort s : sortOptions) {\n+            devicesList = sortDeviceList(devicesList, s);\n+        }\n+\n+        // 3. limit the results according to the page settings.\n+        final List<DeviceWithId> returnDevicesList = new ArrayList<>();\n+\n+        for (int i = pageOffset; i < devicesList.size() && returnDevicesList.size() < pageSize; i++) {", "originalCommit": "531c11fee80ee6ff99bcdc4a86f291af0caa0d61", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQxNjU5MQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r485416591", "bodyText": "IMO the offset should not be tied to the page size, they are different things. Otherwise If I want to ignore the first 5 results for whatever reason and have a page size of 10, how would I do ?\nWriting this makes me realise that I should not have followed your variables names, as offset was more suited for this variable.", "author": "jbtrystram", "createdAt": "2020-09-09T08:03:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MjA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MDY2Mg==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r485450662", "bodyText": "In the spec, it is also specified as pageOffset and not just offset. Additionally the below line is also in the description of the pageOffset.\n\nThis allows to retrieve the whole result set page by page.\n\nAFAIK, assume that a search devices request with pageSize defined as 10 matched 100 records. By specifying offset to 0 should return the first page with 10 records. With offset 1 should retrieve the second page with next 10 records and so on. @sophokles73 WDYT?", "author": "kaniyan", "createdAt": "2020-09-09T08:56:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MjA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ2OTcxMg==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r485469712", "bodyText": "Yes, the pageOffset contains the number of the page to retrieve. In conjunction with the pageSize (number of entries per page) you can page through the whole result set. If you want to ignore the first entries on a page, then simply retrieve the corresponding page and skip the first entries :-) This is how all APIs that I have stumbled across so far work as well ...", "author": "sophokles73", "createdAt": "2020-09-09T09:24:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MjA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMDk4OA==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r487020988", "bodyText": "Ok I aligned to that.", "author": "jbtrystram", "createdAt": "2020-09-11T12:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk3MjA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk5MjQ5MQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r484992491", "bodyText": "As per the spec, if none of the devices are matched, then 404 should be returned.", "author": "kaniyan", "createdAt": "2020-09-08T15:03:15Z", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedRegistrationService.java", "diffHunk": "@@ -520,6 +527,120 @@ private JsonObject convertDevice(final String deviceId, final Device payload) {\n         return identities.computeIfAbsent(tenantId, id -> new ConcurrentHashMap<>());\n     }\n \n+    /**\n+     * Return all devices for a tenant.\n+     *\n+     * The order of devices cannot be guaranteed by the underlying in-memory storage\n+     * so the paging may be inconsistent.\n+     */\n+    @Override\n+    public Future<OperationResult<SearchDevicesResult>> searchDevices(final String tenantId, final int pageSize, final int pageOffset,\n+                                                                       final List<Filter> filters, final List<Sort> sortOptions, final Span span) {\n+\n+        final Set allDevicesIds = getDevicesForTenant(tenantId).keySet();\n+        List<DeviceWithId> devicesList = new ArrayList<>();\n+\n+        for (int i = 0; i < allDevicesIds.size(); i++) {\n+            final String id = (String) allDevicesIds.toArray()[i];\n+            final Device device = getDevicesForTenant(tenantId).get(id).getValue();\n+            final DeviceWithId withId = DeviceWithId.from(id, device);\n+\n+            devicesList.add(withId);\n+        }\n+\n+        final List<Predicate<DeviceWithId>> predicates = new ArrayList<>();\n+        for (Filter f : filters) {\n+            predicates.add(buildJsonBasedPredicate(f));\n+        }\n+\n+        //Regroup predicates in a single one with AND.\n+        final Predicate<DeviceWithId> predicate = predicates.stream()\n+                .reduce(x -> true, Predicate::and);\n+\n+        // 1. apply the filter options to the list\n+        devicesList = devicesList\n+                .stream()\n+                .filter(predicate)\n+                .collect(Collectors.toList());\n+\n+        // 2. sort the selected elements\n+        for (Sort s : sortOptions) {\n+            devicesList = sortDeviceList(devicesList, s);\n+        }\n+\n+        // 3. limit the results according to the page settings.\n+        final List<DeviceWithId> returnDevicesList = new ArrayList<>();\n+\n+        for (int i = pageOffset; i < devicesList.size() && returnDevicesList.size() < pageSize; i++) {\n+            returnDevicesList.add(devicesList.get(i));\n+        }\n+\n+        return Future.succeededFuture(", "originalCommit": "531c11fee80ee6ff99bcdc4a86f291af0caa0d61", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a02a8e60fa16822b71893441023a48b5d79737fe", "url": "https://github.com/eclipse/hono/commit/a02a8e60fa16822b71893441023a48b5d79737fe", "message": "add unit tests and enable integration tests for add search devices operation\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-11T12:47:43Z", "type": "forcePushed"}, {"oid": "ab06c3dac4226772fc608b13941cc8ed2da0e966", "url": "https://github.com/eclipse/hono/commit/ab06c3dac4226772fc608b13941cc8ed2da0e966", "message": "add unit tests and enable integration tests for add search devices operation\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-11T12:49:41Z", "type": "forcePushed"}, {"oid": "2fd9242ff4b7ff372a520e32fafee14307f36f1b", "url": "https://github.com/eclipse/hono/commit/2fd9242ff4b7ff372a520e32fafee14307f36f1b", "message": "[#1958] Follow up of issue #1995. Add an implementation of the search devices operation for the file-based registry.\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-11T12:50:51Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4MDI5NQ==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r488780295", "bodyText": "testContext is not being set to complete properly. It is one of the reasons for the tests failure.\nThis can be removed as it is not being used insde the setup(...) method.", "author": "kaniyan", "createdAt": "2020-09-15T15:56:37Z", "path": "services/device-registry-file/src/test/java/org/eclipse/hono/deviceregistry/file/FileBasedDeviceManagementSearchDevicesTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*****************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.file;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.net.HttpURLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.device.AbstractDeviceManagementSearchDevicesTest;\n+import org.eclipse.hono.service.management.device.Device;\n+import org.eclipse.hono.service.management.device.DeviceManagementService;\n+import org.eclipse.hono.service.management.device.Filter;\n+import org.eclipse.hono.service.management.device.SearchDevicesResult;\n+import org.eclipse.hono.service.management.device.Sort;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import io.opentracing.Span;\n+import io.opentracing.noop.NoopSpan;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.file.FileSystem;\n+import io.vertx.junit5.Timeout;\n+import io.vertx.junit5.VertxExtension;\n+import io.vertx.junit5.VertxTestContext;\n+\n+/**\n+ * Tests for {@link FileBasedRegistrationService#searchDevices(String, int, int, List, List, Span)}.\n+ */\n+@ExtendWith(VertxExtension.class)\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+@Timeout(value = 5, timeUnit = TimeUnit.SECONDS)\n+public final class FileBasedDeviceManagementSearchDevicesTest implements AbstractDeviceManagementSearchDevicesTest {\n+\n+    private static final String FILE_NAME = \"/device-identities.json\";\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(FileBasedDeviceManagementSearchDevicesTest.class);\n+    private Vertx vertx;\n+    private FileBasedRegistrationService registrationService;\n+    private FileBasedRegistrationConfigProperties registrationConfig;\n+    private FileSystem fileSystem;\n+\n+    /**\n+     * Sets up static fixture.\n+     *\n+     * @param testContext The test context to use for running asynchronous tests.\n+     */\n+    @BeforeAll\n+    public void setup(final VertxTestContext testContext) {", "originalCommit": "2fd9242ff4b7ff372a520e32fafee14307f36f1b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NTA5Mg==", "url": "https://github.com/eclipse/hono/pull/2009#discussion_r490785092", "bodyText": "Thanks for figuring it out !", "author": "jbtrystram", "createdAt": "2020-09-18T08:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc4MDI5NQ=="}], "type": "inlineReview"}, {"oid": "3ff594334536af49ef8a927f272381308b4aa102", "url": "https://github.com/eclipse/hono/commit/3ff594334536af49ef8a927f272381308b4aa102", "message": "[#1958] Follow up of issue #1995. Add an implementation of the search devices operation for the file-based registry.\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-18T08:19:49Z", "type": "forcePushed"}, {"oid": "f3e1dc410afcbe3f64e6c0a611e03f64777124ad", "url": "https://github.com/eclipse/hono/commit/f3e1dc410afcbe3f64e6c0a611e03f64777124ad", "message": "[#1958] Follow up of issue #1995. Add an implementation of the search devices operation for the file-based registry.\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-21T12:06:19Z", "type": "forcePushed"}, {"oid": "ae04ac052e36f6433bc3493ebeba43ea702f1c22", "url": "https://github.com/eclipse/hono/commit/ae04ac052e36f6433bc3493ebeba43ea702f1c22", "message": "[#1958] Follow up of issue #1995. Add an implementation of the search devices operation for the file-based registry.\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-21T12:07:35Z", "type": "forcePushed"}, {"oid": "12589612855f0a958b6fa6970210fcbc020dc33c", "url": "https://github.com/eclipse/hono/commit/12589612855f0a958b6fa6970210fcbc020dc33c", "message": "[#1958] Follow up of issue #1995. Add an implementation of the search devices operation for the file-based registry.\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-23T08:38:39Z", "type": "commit"}, {"oid": "12589612855f0a958b6fa6970210fcbc020dc33c", "url": "https://github.com/eclipse/hono/commit/12589612855f0a958b6fa6970210fcbc020dc33c", "message": "[#1958] Follow up of issue #1995. Add an implementation of the search devices operation for the file-based registry.\n\nSigned-off-by: Jean-Baptiste Trystram <jbtrystram@redhat.com>", "committedDate": "2020-09-23T08:38:39Z", "type": "forcePushed"}]}