{"pr_number": 2159, "pr_title": "Add JDBC device registry", "pr_createdAt": "2020-09-07T07:26:33Z", "pr_url": "https://github.com/eclipse/hono/pull/2159", "timeline": [{"oid": "6041e4db0630ad63f9a5297aa792f043f152f486", "url": "https://github.com/eclipse/hono/commit/6041e4db0630ad63f9a5297aa792f043f152f486", "message": "Add JDBC device registry", "committedDate": "2020-09-21T11:38:58Z", "type": "forcePushed"}, {"oid": "2becd144fc3675a47912edba95329afa6124d04d", "url": "https://github.com/eclipse/hono/commit/2becd144fc3675a47912edba95329afa6124d04d", "message": "Add JDBC device registry", "committedDate": "2020-09-23T12:19:37Z", "type": "forcePushed"}, {"oid": "8e880b8bb1e38e21f8f8d4e1f925ec80de432cc7", "url": "https://github.com/eclipse/hono/commit/8e880b8bb1e38e21f8f8d4e1f925ec80de432cc7", "message": "Add JDBC device registry", "committedDate": "2020-09-23T13:28:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE0Njk0Mg==", "url": "https://github.com/eclipse/hono/pull/2159#discussion_r494146942", "bodyText": "DeviceRegistryUtils.getUniqueIdentifier()?", "author": "sophokles73", "createdAt": "2020-09-24T08:49:51Z", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/tenant/AbstractTenantManagementService.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.service.tenant;\n+\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.eclipse.hono.service.management.Id;\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.tenant.Tenant;\n+import org.eclipse.hono.service.management.tenant.TenantManagementService;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.Future;\n+\n+/**\n+ * An abstract base class implementation for {@link TenantManagementService}.\n+ */\n+public abstract class AbstractTenantManagementService implements TenantManagementService {\n+\n+    /**\n+     * Create a new tenant.\n+     *\n+     * @param tenantId The ID of the tenant to create.\n+     * @param tenantObj The tenant information.\n+     * @param span The span to contribute to.\n+     * @return A future, tracking the outcome of the operation.\n+     */\n+    protected abstract Future<OperationResult<Id>> createTenant(String tenantId, Tenant tenantObj, Span span);\n+\n+    @Override\n+    public Future<OperationResult<Id>> createTenant(final Optional<String> tenantId, final Tenant tenantObj, final Span span) {\n+        return createTenant(tenantId.orElseGet(this::createId), tenantObj, span);\n+    }\n+\n+    /**\n+     * Create a new tenant ID.\n+     * @return The new tenant ID.\n+     */\n+    protected String createId() {\n+        return UUID.randomUUID().toString();", "originalCommit": "8e880b8bb1e38e21f8f8d4e1f925ec80de432cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1OTUyMA==", "url": "https://github.com/eclipse/hono/pull/2159#discussion_r494159520", "bodyText": "can we use the version defined in bom/POM.xml here instead?", "author": "sophokles73", "createdAt": "2020-09-24T09:09:45Z", "path": "tests/pom.xml", "diffHunk": "@@ -267,6 +286,74 @@ Test cases are run against Docker images of Hono server + (Apache Qpid Dispatch\n               <autoCreateCustomNetworks>true</autoCreateCustomNetworks>\n               <startParallel>false</startParallel>\n               <images>\n+                <!-- ##### H2 instance for the device registry ##### -->\n+                <image>\n+                  <name>${docker.image.org-name}/hono-h2-test</name>\n+                  <alias>h2</alias>\n+                  <build>\n+                    <skip>${hono.h2.disabled}</skip>\n+                    <imagePullPolicy>IfNotPresent</imagePullPolicy>\n+                    <from>registry.access.redhat.com/ubi8/ubi-minimal</from>\n+                    <assembly>\n+                      <mode>dir</mode>\n+                      <basedir>/</basedir>\n+                      <inline>\n+                        <id>sql</id>\n+                        <fileSet>\n+                          <directory>${project.build.directory}/../../services/base-jdbc/src/main/sql</directory>\n+                          <outputDirectory>sql/</outputDirectory>\n+                          <includes>\n+                            <include>**/*</include>\n+                          </includes>\n+                        </fileSet>\n+                      </inline>\n+                    </assembly>\n+                    <runCmds>\n+\n+                      <run>microdnf -y install java-11-openjdk-headless</run>\n+                      <run>curl -sL https://repo1.maven.org/maven2/com/h2database/h2/1.4.200/h2-1.4.200.jar -o h2.jar</run>", "originalCommit": "8e880b8bb1e38e21f8f8d4e1f925ec80de432cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE1OTg3Mg==", "url": "https://github.com/eclipse/hono/pull/2159#discussion_r494159872", "bodyText": "this seems to be a duplicate", "author": "sophokles73", "createdAt": "2020-09-24T09:10:19Z", "path": "tests/pom.xml", "diffHunk": "@@ -314,6 +401,7 @@ Test cases are run against Docker images of Hono server + (Apache Qpid Dispatch\n                     </network>\n                     <memorySwap>524288000</memorySwap>\n                     <memory>524288000</memory>\n+                    <memory>524288000</memory>", "originalCommit": "8e880b8bb1e38e21f8f8d4e1f925ec80de432cc7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a7187dbc2a0453f73f283c7fc551a5cd5c475931", "url": "https://github.com/eclipse/hono/commit/a7187dbc2a0453f73f283c7fc551a5cd5c475931", "message": "Add JDBC device registry", "committedDate": "2020-09-24T12:22:17Z", "type": "forcePushed"}, {"oid": "c8dec47010cfc59b7bb6ed4dd41eb2ea3cfcb7f6", "url": "https://github.com/eclipse/hono/commit/c8dec47010cfc59b7bb6ed4dd41eb2ea3cfcb7f6", "message": "Add JDBC device registry", "committedDate": "2020-09-24T12:32:45Z", "type": "forcePushed"}, {"oid": "c7bb334b8f25e11f0ac2a61d13ded2dcf3fc4eb4", "url": "https://github.com/eclipse/hono/commit/c7bb334b8f25e11f0ac2a61d13ded2dcf3fc4eb4", "message": "Add JDBC device registry", "committedDate": "2020-10-08T12:51:55Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUyMTg2Mg==", "url": "https://github.com/eclipse/hono/pull/2159#discussion_r502521862", "bodyText": "@sophokles73 @ctron\nSorry for raising this comment now. I noticed this just now with the merge of the PR #2241 for adjusting the tests.\nThe Credentials API docs says:\n\nAdapters MUST only consider secrets for authentication which\nhave their not-before property set to either null or the current or a past point in time and\nhave their not-after property set to either null or the current or a future point in time.\n\n\nAFAIK the credentials API includes all the secrets irrespective of the not-before & not-after property. Based on the above quotes, the adapters are responsible for filtering them out. Various AuthProvider implementations already do this by using CredentialsObject.getCandidateSecrets(...) where the secrets are already being filtered out based on the validity period. IMHO we need not filter secrets based on the validity period in the credentials API implementation. I don't think we need to adapt the tests as in #2241\nEDIT:\n@sophokles73 @ctron\nIn another place, it is written as below in the Credentials API.\n\nFor secrets for example, this could mean that the device registry does not return secrets which are not valid at the current point in time.\n\nFrom this point of view, filtering secrets based on the validity period in the device registry, is also valid. So I think we can keep the code as it is and merge it. With this perspective, it also makes sense with #2241. IMHO we could later revisit the credentials API and sort it out with various implementations.", "author": "kaniyan", "createdAt": "2020-10-09T15:48:59Z", "path": "services/device-registry-jdbc/src/main/java/org/eclipse/hono/deviceregistry/jdbc/impl/CredentialsServiceImpl.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+\n+package org.eclipse.hono.deviceregistry.jdbc.impl;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.Objects;\n+import java.util.function.BiFunction;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.hono.deviceregistry.service.credentials.AbstractCredentialsService;\n+import org.eclipse.hono.deviceregistry.service.credentials.CredentialKey;\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+import org.eclipse.hono.service.base.jdbc.store.device.TableAdapterStore;\n+import org.eclipse.hono.util.CacheDirective;\n+import org.eclipse.hono.util.Constants;\n+import org.eclipse.hono.util.CredentialsConstants;\n+import org.eclipse.hono.util.CredentialsResult;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.Future;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+\n+/**\n+ * Implementation of the <em>Credentials Service</em>.\n+ */\n+public class CredentialsServiceImpl extends AbstractCredentialsService {\n+\n+    private final TableAdapterStore store;\n+\n+    /**\n+     * Create a new instance.\n+     *\n+     * @param store The backing service to use.\n+     */\n+    public CredentialsServiceImpl(final TableAdapterStore store) {\n+        this.store = store;\n+    }\n+\n+    @Override\n+    protected Future<CredentialsResult<JsonObject>> processGet(final TenantKey tenant, final CredentialKey key, final JsonObject clientContext, final Span span) {\n+        return this.store.findCredentials(key, span.context())\n+                .map(r -> {\n+\n+                    if (r.isEmpty()) {\n+                        return CredentialsResult.from(HttpURLConnection.HTTP_NOT_FOUND);\n+                    }\n+\n+                    final var result = r.get();\n+\n+                    final var secrets = result.getCredentials()\n+                            .stream()\n+                            .map(JsonObject::mapFrom)\n+                            .filter(filter(key.getType(), key.getAuthId()))\n+                            .flatMap(c -> c.getJsonArray(CredentialsConstants.FIELD_SECRETS)\n+                                    .stream()\n+                                    .filter(JsonObject.class::isInstance)\n+                                    .map(JsonObject.class::cast))\n+                            .filter(CredentialsServiceImpl::filterSecrets)\n+                            .collect(Collectors.toList());\n+\n+                    if (secrets.isEmpty()) {\n+                        // nothing was left after filtering ... not found\n+                        return CredentialsResult.from(HttpURLConnection.HTTP_NOT_FOUND);\n+                    }\n+\n+                    final var payload = new JsonObject()\n+                            .put(Constants.JSON_FIELD_DEVICE_ID, result.getDeviceId())\n+                            .put(CredentialsConstants.FIELD_TYPE, key.getType())\n+                            .put(CredentialsConstants.FIELD_AUTH_ID, key.getAuthId())\n+                            .put(CredentialsConstants.FIELD_SECRETS, new JsonArray(secrets));\n+\n+                    return CredentialsResult.from(HttpURLConnection.HTTP_OK, payload, CacheDirective.noCacheDirective());\n+\n+                });\n+    }\n+\n+    private static boolean filterSecrets(final JsonObject secret) {\n+        if (secret == null) {\n+            return false;\n+        }\n+\n+        if (!secret.getBoolean(CredentialsConstants.FIELD_ENABLED, true)) {\n+            return false;\n+        }\n+\n+        if (!validTime(secret, CredentialsConstants.FIELD_SECRETS_NOT_BEFORE, Instant::isAfter)) {\n+            return false;\n+        }\n+        if (!validTime(secret, CredentialsConstants.FIELD_SECRETS_NOT_AFTER, Instant::isBefore)) {", "originalCommit": "c7bb334b8f25e11f0ac2a61d13ded2dcf3fc4eb4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "e0543486ccb57a2664b1f577ad26c6bc0b6efd20", "url": "https://github.com/eclipse/hono/commit/e0543486ccb57a2664b1f577ad26c6bc0b6efd20", "message": "Add JDBC device registry", "committedDate": "2020-10-12T09:11:39Z", "type": "commit"}, {"oid": "e0543486ccb57a2664b1f577ad26c6bc0b6efd20", "url": "https://github.com/eclipse/hono/commit/e0543486ccb57a2664b1f577ad26c6bc0b6efd20", "message": "Add JDBC device registry", "committedDate": "2020-10-12T09:11:39Z", "type": "forcePushed"}]}