{"pr_number": 2149, "pr_title": "Refactor tests for JDBC device registry", "pr_createdAt": "2020-09-02T12:29:46Z", "pr_url": "https://github.com/eclipse/hono/pull/2149", "timeline": [{"oid": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "url": "https://github.com/eclipse/hono/commit/80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "message": "refactor tests for JDBC", "committedDate": "2020-09-03T07:13:44Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MDczNA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482740734", "bodyText": "A PSK as used in TLS is always a byte array. In a UI it might be entered as a string but IMHO the parameter type here should be byte[] or the method should at least be overloaded accordingly ...", "author": "sophokles73", "createdAt": "2020-09-03T06:45:29Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.credentials;\n+\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.hono.auth.EncodedPassword;\n+import org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordSecret;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.PskSecret;\n+\n+/**\n+ * Helper methods for working with credentials.\n+ */\n+public final class Credentials {\n+\n+    private Credentials() {\n+    }\n+\n+    /**\n+     * Creates a PSK type based credential containing a psk secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param psk The psk to use.\n+     * @return The fully populated secret.\n+     */\n+    public static PskCredential createPSKCredential(final String authId, final String psk) {", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NDc1Mw==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482784753", "bodyText": "The code isn't new, just in a different location: \n  \n    \n      hono/services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java\n    \n    \n        Lines 159 to 175\n      in\n      c267680\n    \n    \n    \n    \n\n        \n          \n               /** \n        \n\n        \n          \n                * Creates a PSK type based credential containing a psk secret. \n        \n\n        \n          \n                * \n        \n\n        \n          \n                * @param authId The authentication to use. \n        \n\n        \n          \n                * @param psk The psk to use. \n        \n\n        \n          \n                * @return The fully populated secret. \n        \n\n        \n          \n                */ \n        \n\n        \n          \n               public static PskCredential createPSKCredential(final String authId, final String psk) { \n        \n\n        \n          \n                   final PskCredential p = new PskCredential(authId); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   final PskSecret s = new PskSecret(); \n        \n\n        \n          \n                   s.setKey(psk.getBytes()); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   p.setSecrets(Collections.singletonList(s)); \n        \n\n        \n          \n            \n        \n\n        \n          \n                   return p; \n        \n\n        \n          \n               } \n        \n    \n  \n\n\nThat is why I would like to keep it as is, and focus on the current changes of this PR, in order to not make it any bigger.", "author": "ctron", "createdAt": "2020-09-03T08:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MDczNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5MzI4Nw==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482793287", "bodyText": "I see", "author": "sophokles73", "createdAt": "2020-09-03T08:15:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MDczNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTIyMQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482741221", "bodyText": "since this is a new file it should probably be 2020 only, right?", "author": "sophokles73", "createdAt": "2020-09-03T06:46:36Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NDgzMQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482784831", "bodyText": "See comment below.", "author": "ctron", "createdAt": "2020-09-03T08:01:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTIyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTM2NA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482741364", "bodyText": "Creates ...", "author": "sophokles73", "createdAt": "2020-09-03T06:46:55Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.credentials;\n+\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.hono.auth.EncodedPassword;\n+import org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordSecret;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.PskSecret;\n+\n+/**\n+ * Helper methods for working with credentials.\n+ */\n+public final class Credentials {\n+\n+    private Credentials() {\n+    }\n+\n+    /**\n+     * Creates a PSK type based credential containing a psk secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param psk The psk to use.\n+     * @return The fully populated secret.\n+     */\n+    public static PskCredential createPSKCredential(final String authId, final String psk) {\n+        final PskCredential p = new PskCredential(authId);\n+\n+        final PskSecret s = new PskSecret();\n+        s.setKey(psk.getBytes());\n+\n+        p.setSecrets(Collections.singletonList(s));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Creates a password type based credential containing a hashed password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @param maxBcryptIterations max bcrypt iterations to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPasswordCredential(final String authId, final String password,\n+                                                        final OptionalInt maxBcryptIterations) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        p.setSecrets(Collections.singletonList(createPasswordSecret(password, maxBcryptIterations)));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a plain password secret.", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NTAwMQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482785001", "bodyText": "Just copied. We can fix existing code in an additional PR.", "author": "ctron", "createdAt": "2020-09-03T08:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTM2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTQyMA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482741420", "bodyText": "Creates ...", "author": "sophokles73", "createdAt": "2020-09-03T06:47:04Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.credentials;\n+\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.hono.auth.EncodedPassword;\n+import org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordSecret;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.PskSecret;\n+\n+/**\n+ * Helper methods for working with credentials.\n+ */\n+public final class Credentials {\n+\n+    private Credentials() {\n+    }\n+\n+    /**\n+     * Creates a PSK type based credential containing a psk secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param psk The psk to use.\n+     * @return The fully populated secret.\n+     */\n+    public static PskCredential createPSKCredential(final String authId, final String psk) {\n+        final PskCredential p = new PskCredential(authId);\n+\n+        final PskSecret s = new PskSecret();\n+        s.setKey(psk.getBytes());\n+\n+        p.setSecrets(Collections.singletonList(s));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Creates a password type based credential containing a hashed password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @param maxBcryptIterations max bcrypt iterations to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPasswordCredential(final String authId, final String password,\n+                                                        final OptionalInt maxBcryptIterations) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        p.setSecrets(Collections.singletonList(createPasswordSecret(password, maxBcryptIterations)));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a plain password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPlainPasswordCredential(final String authId, final String password) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        final PasswordSecret secret = new PasswordSecret();\n+        secret.setPasswordPlain(password);\n+\n+        p.setSecrets(Collections.singletonList(secret));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a password secret.", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NTEzNw==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482785137", "bodyText": "Same as above.", "author": "ctron", "createdAt": "2020-09-03T08:01:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTQyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTQ5Ng==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482741496", "bodyText": "Creates ..", "author": "sophokles73", "createdAt": "2020-09-03T06:47:14Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/Credentials.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.credentials;\n+\n+import java.util.Base64;\n+import java.util.Collections;\n+import java.util.OptionalInt;\n+\n+import org.eclipse.hono.auth.EncodedPassword;\n+import org.eclipse.hono.auth.SpringBasedHonoPasswordEncoder;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordSecret;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.PskSecret;\n+\n+/**\n+ * Helper methods for working with credentials.\n+ */\n+public final class Credentials {\n+\n+    private Credentials() {\n+    }\n+\n+    /**\n+     * Creates a PSK type based credential containing a psk secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param psk The psk to use.\n+     * @return The fully populated secret.\n+     */\n+    public static PskCredential createPSKCredential(final String authId, final String psk) {\n+        final PskCredential p = new PskCredential(authId);\n+\n+        final PskSecret s = new PskSecret();\n+        s.setKey(psk.getBytes());\n+\n+        p.setSecrets(Collections.singletonList(s));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Creates a password type based credential containing a hashed password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @param maxBcryptIterations max bcrypt iterations to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPasswordCredential(final String authId, final String password,\n+                                                        final OptionalInt maxBcryptIterations) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        p.setSecrets(Collections.singletonList(createPasswordSecret(password, maxBcryptIterations)));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a plain password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPlainPasswordCredential(final String authId, final String password) {\n+        final PasswordCredential p = new PasswordCredential(authId);\n+\n+        final PasswordSecret secret = new PasswordSecret();\n+        secret.setPasswordPlain(password);\n+\n+        p.setSecrets(Collections.singletonList(secret));\n+\n+        return p;\n+    }\n+\n+    /**\n+     * Create a password type based credential containing a password secret.\n+     *\n+     * @param authId The authentication to use.\n+     * @param password The password to use.\n+     * @return The fully populated credential.\n+     */\n+    public static PasswordCredential createPasswordCredential(final String authId, final String password) {\n+        return createPasswordCredential(authId, password, OptionalInt.empty());\n+    }\n+\n+    /**\n+     * Create a new password secret.", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NTE3Nw==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482785177", "bodyText": "Same as above.", "author": "ctron", "createdAt": "2020-09-03T08:01:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTQ5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjkzNA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482742934", "bodyText": "Asserts ...", "author": "sophokles73", "createdAt": "2020-09-03T06:50:33Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/tenant/AbstractTenantServiceTest.java", "diffHunk": "@@ -581,13 +579,21 @@ public void testUpdateTenantFailsForDuplicateCa(final VertxTestContext ctx) {\n      * @param tenant The tenant.\n      * @return A succeeded future if the tenant does not exist.\n      */\n-    protected static Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n+    default Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n             final TenantManagementService svc,\n             final String tenant) {\n \n         return assertGet(svc, tenant, HttpURLConnection.HTTP_NOT_FOUND);\n     }\n \n+    /**\n+     * Assert a get operation result.", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzEyOQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482743129", "bodyText": "empty line between description and params?", "author": "sophokles73", "createdAt": "2020-09-03T06:50:57Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/tenant/AbstractTenantServiceTest.java", "diffHunk": "@@ -581,13 +579,21 @@ public void testUpdateTenantFailsForDuplicateCa(final VertxTestContext ctx) {\n      * @param tenant The tenant.\n      * @return A succeeded future if the tenant does not exist.\n      */\n-    protected static Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n+    default Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n             final TenantManagementService svc,\n             final String tenant) {\n \n         return assertGet(svc, tenant, HttpURLConnection.HTTP_NOT_FOUND);\n     }\n \n+    /**\n+     * Assert a get operation result.\n+     * @param svc The service to use.", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzIxNg==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482743216", "bodyText": "remove empty line", "author": "sophokles73", "createdAt": "2020-09-03T06:51:07Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/tenant/AbstractTenantServiceTest.java", "diffHunk": "@@ -581,13 +579,21 @@ public void testUpdateTenantFailsForDuplicateCa(final VertxTestContext ctx) {\n      * @param tenant The tenant.\n      * @return A succeeded future if the tenant does not exist.\n      */\n-    protected static Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n+    default Future<OperationResult<Tenant>> assertTenantDoesNotExist(\n             final TenantManagementService svc,\n             final String tenant) {\n \n         return assertGet(svc, tenant, HttpURLConnection.HTTP_NOT_FOUND);\n     }\n \n+    /**\n+     * Assert a get operation result.\n+     * @param svc The service to use.\n+     * @param tenantId The ID of the tenant.\n+     * @param expectedStatusCode The expected status code.\n+     *", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzY1MA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482743650", "bodyText": "Asserts ...", "author": "sophokles73", "createdAt": "2020-09-03T06:52:00Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java", "diffHunk": "@@ -415,6 +332,11 @@ public void testCreatePlainPasswordSecret(final VertxTestContext ctx) {\n                                 }))))));\n     }\n \n+    /**\n+     * Assert if the resource version is present.", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NDQ4Mg==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482744482", "bodyText": "Asserts ...", "author": "sophokles73", "createdAt": "2020-09-03T06:53:41Z", "path": "services/device-registry-base/src/test/java/org/eclipse/hono/service/credentials/AbstractCredentialsServiceTest.java", "diffHunk": "@@ -1354,6 +1279,18 @@ public void testSecretMetadataDeletion(final VertxTestContext ctx) {\n         return assertGet(svc, tenant, authId, type, HttpURLConnection.HTTP_NOT_FOUND);\n     }\n \n+    /**\n+     * Assert a get operation.", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NjUzOA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482746538", "bodyText": "The future will fail with the exception thrown by the first failing predicate, but that will not be a ServiceInvocationException. FMPOV you can simply omit the ... with a ServiceInvocationExpception as we do in all the other methods.", "author": "sophokles73", "createdAt": "2020-09-03T06:57:49Z", "path": "tests/src/test/java/org/eclipse/hono/tests/DeviceRegistryHttpClient.java", "diffHunk": "@@ -318,6 +319,21 @@ private static String registrationWithoutIdUri(final String tenant) {\n         return removeTenant(tenantId, HttpURLConnection.HTTP_NO_CONTENT);\n     }\n \n+    /**\n+     * Removes configuration information for a tenant.\n+     * <p>\n+     * This method simply invokes {@link #removeTenant(String, int)} with {@link HttpURLConnection#HTTP_NO_CONTENT} as\n+     * the expected status code.\n+     *\n+     * @param tenantId The tenant to remove.\n+     * @param ignoreMissing Ignore a missing tenant.\n+     * @return A future indicating the outcome of the operation. The future will succeed if the tenant has been removed.\n+     *         Otherwise the future will fail with a {@link org.eclipse.hono.client.ServiceInvocationException}.", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0NjkxNg==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482746916", "bodyText": "whitespace before uri param ...", "author": "sophokles73", "createdAt": "2020-09-03T06:58:40Z", "path": "tests/src/test/java/org/eclipse/hono/tests/DeviceRegistryHttpClient.java", "diffHunk": "@@ -327,11 +343,21 @@ private static String registrationWithoutIdUri(final String tenant) {\n      *         expected status code. Otherwise the future will fail.\n      */\n     public Future<HttpResponse<Buffer>> removeTenant(final String tenantId, final int expectedStatusCode) {\n+        return removeTenant(tenantId, ResponsePredicate.status(expectedStatusCode));\n+    }\n \n+    /**\n+     * Removes configuration information for a tenant.\n+     *\n+     * @param tenantId The tenant to remove.\n+     * @param successPredicates Checks on the HTTP response that need to pass for the request\n+     *                          to be considered successful.\n+     * @return A future indicating the outcome of the operation. The future will succeed if the response contained the\n+     *         expected status code. Otherwise the future will fail.\n+     */\n+    public Future<HttpResponse<Buffer>> removeTenant(final String tenantId, final ResponsePredicate ... successPredicates) {\n         final String uri = tenantInstanceUri(tenantId);\n-        return httpClient.delete(\n-                uri,\n-                ResponsePredicate.status(expectedStatusCode));\n+        return httpClient.delete( uri, successPredicates);", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1MTU5NQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482751595", "bodyText": "what's wrong with the code that already exists and has worked for months?", "author": "sophokles73", "createdAt": "2020-09-03T07:03:56Z", "path": "tests/src/test/java/org/eclipse/hono/tests/IntegrationTestSupport.java", "diffHunk": "@@ -639,30 +636,58 @@ public boolean isGatewayModeSupported() {\n     /**\n      * Deletes all temporary objects from the Device Registry which\n      * have been created during the last test execution.\n+     * <p>\n+     * <strong>Note:</strong> This wil consume the test context.\n      *\n      * @param ctx The vert.x context.\n      */\n     public void deleteObjects(final VertxTestContext ctx) {\n \n-        if (!devicesToDelete.isEmpty()) {\n-            devicesToDelete.forEach((tenantId, devices) -> {\n-                final Checkpoint deviceDeletion = ctx.checkpoint(devices.size());\n-                devices.forEach(deviceId -> {\n-                    registry.deregisterDevice(tenantId, deviceId).onComplete(ok -> deviceDeletion.flag());\n-                });\n-                LOGGER.debug(\"deleted {} devices from tenant {}\", devicesToDelete.size(), tenantId);\n-            });\n-            devicesToDelete.clear();\n-        }\n+        // first delete devices", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5MTEzMQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482791131", "bodyText": "It assumes that you can delete devices and tenants at the same time. Which you can only, because the current implementations fail to verify the tenant before doing device operations.\nDevices and tenants get deleted in parallel. This lead to test failures, when a tenant got deleted before a device. The deletion of a devices would fail, but that would be ignored. Still, the device exists in the data store.\nWhen the next test comes along, creates the same tenant, the device will again be there, and fail the test.", "author": "ctron", "createdAt": "2020-09-03T08:12:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1MTU5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc1MjU3Nw==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482752577", "bodyText": "nice \ud83d\udc4d", "author": "sophokles73", "createdAt": "2020-09-03T07:04:47Z", "path": "tests/src/test/java/org/eclipse/hono/tests/IntegrationTestSupport.java", "diffHunk": "@@ -745,16 +770,8 @@ public String setupGatewayDeviceBlocking(\n             final String gatewayId,\n             final int timeoutSeconds) {\n \n-        final CompletableFuture<String> result = new CompletableFuture<>();\n-\n-        setupGatewayDevice(tenantId, gatewayId)\n-        .onComplete(attempt -> {\n-            if (attempt.succeeded()) {\n-                result.complete(attempt.result());\n-            } else {\n-                result.completeExceptionally(attempt.cause());\n-            }\n-        });\n+        final var result = setupGatewayDevice(tenantId, gatewayId)\n+                .toCompletionStage().toCompletableFuture();", "originalCommit": "a982468522aaed53e6f257cf755e02d85940914e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NjY5NQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482766695", "bodyText": "disconnect()?", "author": "sophokles73", "createdAt": "2020-09-03T07:31:43Z", "path": "tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java", "diffHunk": "@@ -197,6 +197,16 @@ public void deleteObjects(final VertxTestContext ctx) {\n         if (deviceCert != null) {\n             deviceCert.delete();\n         }\n+\n+    }\n+\n+    /**\n+     * Disconnect helper.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @AfterEach\n+    public void cleanup(final VertxTestContext ctx) {", "originalCommit": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2ODA0Nw==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482768047", "bodyText": "the JavaDoc of the postTest method should be updated accordingly ...", "author": "sophokles73", "createdAt": "2020-09-03T07:34:14Z", "path": "tests/src/test/java/org/eclipse/hono/tests/mqtt/MqttTestBase.java", "diffHunk": "@@ -80,6 +80,18 @@ public void setUp(final TestInfo testInfo, final VertxTestContext ctx) {\n         helper.init().onComplete(ctx.completing());\n     }\n \n+    /**\n+     * Deletes all temporary objects from the Device Registry which\n+     * have been created during the last test execution.\n+     *\n+     *\n+     * @param ctx The vert.x context.\n+     */\n+    @AfterEach\n+    public void deleteObjects(final VertxTestContext ctx) {", "originalCommit": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTUyOQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482769529", "bodyText": "can we use a tenant with a random ID instead?", "author": "sophokles73", "createdAt": "2020-09-03T07:36:40Z", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsAmqpIT.java", "diffHunk": "@@ -59,6 +60,20 @@ public static void prepareDeviceRegistry(final VertxTestContext ctx) {\n                                 IntegrationTestSupport.HONO_PWD)));\n \n         client.connect().onComplete(ctx.completing());\n+\n+    }\n+\n+    /**\n+     * Setup device registry.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @BeforeEach\n+    public void setupDeviceRegistry(final VertxTestContext ctx) {\n+        helper.addTenantIdForRemoval(Constants.DEFAULT_TENANT);\n+        helper.registry\n+                .addTenant(Constants.DEFAULT_TENANT)\n+                .onComplete(ctx.completing());", "originalCommit": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5MjM3MQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482792371", "bodyText": "We could. However, that way I found some other issues. In any case, this is all over the place, and I think it makes sense to do this in another PR, to keep this one smaller.", "author": "ctron", "createdAt": "2020-09-03T08:14:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTUyOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5Mzk3Mg==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482793972", "bodyText": "Ok, makes sense", "author": "sophokles73", "createdAt": "2020-09-03T08:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTUyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTg1MA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482769850", "bodyText": "random tenant ID?", "author": "sophokles73", "createdAt": "2020-09-03T07:37:07Z", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/CredentialsJmsIT.java", "diffHunk": "@@ -69,6 +69,20 @@ public static void init(final VertxTestContext ctx) {\n \n         connection = JmsBasedHonoConnection.newConnection(props);\n         connection.connect().onComplete(ctx.completing());\n+\n+    }\n+\n+    /**\n+     * Setup device registry.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @BeforeEach\n+    public void setupDeviceRegistry(final VertxTestContext ctx) {\n+        helper.addTenantIdForRemoval(Constants.DEFAULT_TENANT);\n+        helper.registry\n+                .addTenant(Constants.DEFAULT_TENANT)\n+                .onComplete(ctx.completing());", "originalCommit": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5MjQ1MA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482792450", "bodyText": "See above.", "author": "ctron", "createdAt": "2020-09-03T08:14:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2OTg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MTY2Nw==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482771667", "bodyText": "random tenant ID?", "author": "sophokles73", "createdAt": "2020-09-03T07:40:06Z", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/DeviceRegistrationAmqpIT.java", "diffHunk": "@@ -58,6 +60,19 @@ public static void init(final VertxTestContext ctx) {\n         registrationClientFactory.connect().onComplete(ctx.completing());\n     }\n \n+    /**\n+     * Setup device registry.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @BeforeEach\n+    public void setupDeviceRegistry(final VertxTestContext ctx) {\n+        helper.addTenantIdForRemoval(Constants.DEFAULT_TENANT);", "originalCommit": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5MjUwMQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482792501", "bodyText": "See above.", "author": "ctron", "createdAt": "2020-09-03T08:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MTY2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjMzMQ==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482772331", "bodyText": "random tenant ID?", "author": "sophokles73", "createdAt": "2020-09-03T07:41:10Z", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/DeviceRegistrationJmsIT.java", "diffHunk": "@@ -68,6 +69,19 @@ public static void init(final VertxTestContext ctx) {\n         registrationConnection.connect().onComplete(ctx.completing());\n     }\n \n+    /**\n+     * Setup device registry.\n+     *\n+     * @param ctx The vert.x test context.\n+     */\n+    @BeforeEach\n+    public void setupDeviceRegistry(final VertxTestContext ctx) {\n+        helper.addTenantIdForRemoval(Constants.DEFAULT_TENANT);", "originalCommit": "80fa9f750ba75e9b6e4b8818e49c796b40c30ff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc5MjUyMA==", "url": "https://github.com/eclipse/hono/pull/2149#discussion_r482792520", "bodyText": "See above.", "author": "ctron", "createdAt": "2020-09-03T08:14:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc3MjMzMQ=="}], "type": "inlineReview"}, {"oid": "2d2dd3084d680c85e7ade6dd26ccfd2e51b35b57", "url": "https://github.com/eclipse/hono/commit/2d2dd3084d680c85e7ade6dd26ccfd2e51b35b57", "message": "refactor tests for JDBC", "committedDate": "2020-09-03T08:06:18Z", "type": "forcePushed"}, {"oid": "0814d13a347de8749eae6aa89287c372ba1dbd47", "url": "https://github.com/eclipse/hono/commit/0814d13a347de8749eae6aa89287c372ba1dbd47", "message": "refactor tests for JDBC", "committedDate": "2020-09-03T08:09:16Z", "type": "forcePushed"}, {"oid": "0e109710e702ec40c60e35852ffbd5d84cfc658a", "url": "https://github.com/eclipse/hono/commit/0e109710e702ec40c60e35852ffbd5d84cfc658a", "message": "refactor tests for JDBC", "committedDate": "2020-09-03T08:13:28Z", "type": "commit"}, {"oid": "0e109710e702ec40c60e35852ffbd5d84cfc658a", "url": "https://github.com/eclipse/hono/commit/0e109710e702ec40c60e35852ffbd5d84cfc658a", "message": "refactor tests for JDBC", "committedDate": "2020-09-03T08:13:28Z", "type": "forcePushed"}]}