{"pr_number": 1724, "pr_title": "[#1646] Add documentation how to implement a third party protocol adapter", "pr_createdAt": "2020-01-28T13:51:38Z", "pr_url": "https://github.com/eclipse/hono/pull/1724", "timeline": [{"oid": "57fee7a208067213837e73b62dea762bb238ea6d", "url": "https://github.com/eclipse/hono/commit/57fee7a208067213837e73b62dea762bb238ea6d", "message": "[#1646] add thirdparty adapter example\n\nWith contributions of Johannes.kristan@bosch.io:\nsite/documentation/content/dev-guide/third_party_adapter.md#L1-L35\n\nWith contributions of carsten.lohmann@bosch.io:\nsite/documentation/content/dev-guide/third_party_adapter.png\n\nSigned-off-by: Jan kostulski (INST-CSS/BSV-OS2) <jan.kostulski@bosch.io>", "committedDate": "2020-01-29T08:34:30Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MDAxNg==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r372270016", "bodyText": "FMPOV this should go into a separate document under concepts. I can imagine something like Connecting Devices in which we describe the different options for how devices connect to Hono, e.g. directly or via a gateway. There we could then also introduce the notion of what you call here Third Party Adapter but which we actually call a Protocol Gateway as it is not a protocol adapter but instead is just a standard gateway which is potentially able to scale out horizontally.", "author": "sophokles73", "createdAt": "2020-01-29T09:25:32Z", "path": "site/documentation/content/dev-guide/third_party_adapter.md", "diffHunk": "@@ -0,0 +1,263 @@\n++++\n+title = \"Implementing Third Party Adapters\"\n+weight = 390\n++++\n+\n+Eclipse Hono&trade; has the concept of protocol adapters (check the [Component Overview]({{< relref \"architecture/component-view/index.md\" >}}) for details),\n+which provide protocol endpoints for devices.\n+Hono already comes with a set of protocol adapters for some of the well known IoT protocols.\n+However, in some cases devices do not communicate via standardized protocols but use a proprietary protocol.\n+To provide the service user of a Hono service the possibility to also connect devices speaking a proprietary protocol\n+Hono supports the concept of *Third Party Adapters*.\n+\n+A *Third Party Adapter* is a separately deployed micro service, which understands proprietary protocol messages and translates\n+them to AMQP messages processable by Hono's AMQP protocol adapter.\n+In that sense a *Third Party Adapter* behaves like a gateway for the devices speaking the proprietary protocol and forwards their\n+messages to the AMQP Messaging Network. \n+\n+The diagram below provides an overview of the *Third Party Adapter* setup.\n+\n+{{< figure src=\"../third_party_adapter.png\" >}}  \n+\n+Devices send telemetry/event messages via their own proprietary protocols to the *Third Party Adapters* gateway,\n+which send the messages via AMQP to the Hono AMQP adapter.\n+\n+A prerequisite for using *Third Party Adapters* is that devices are registered in Hono's Device Registry\n+and are configured in such a way that the *Third Party Adapters* can act on their behalf i.e.\n+with a device registration \"via\" property containing the gateway id of the *Third Party Adapters*.\n+", "originalCommit": "57fee7a208067213837e73b62dea762bb238ea6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxNjg0OA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r372416848", "bodyText": "That sounds good. I took the naming from the issue, but find Protocol Gateway also better describing the module.", "author": "ko-j", "createdAt": "2020-01-29T14:34:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MDAxNg=="}], "type": "inlineReview"}, {"oid": "d2571f9e968f5f3a4578f94bad5b9258407f8215", "url": "https://github.com/eclipse/hono/commit/d2571f9e968f5f3a4578f94bad5b9258407f8215", "message": "[#1646] reformat\n\nigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-07T14:08:05Z", "type": "forcePushed"}, {"oid": "6927f577c1f5d01b14dbdae8743c754d39891bad", "url": "https://github.com/eclipse/hono/commit/6927f577c1f5d01b14dbdae8743c754d39891bad", "message": "[#1646] resolve conflict\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-07T14:21:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxODI0OQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376418249", "bodyText": "why not add this script to the repository?", "author": "sophokles73", "createdAt": "2020-02-07T14:29:12Z", "path": "example/protocol-adapter-example/README.md", "diffHunk": "@@ -0,0 +1,98 @@\n+# Example *Protocol adapter* to connect to the AMQP adapter\n+\n+> Disclaimer: This example is considered a POC and not intended to be run in a productive environment.\n+\n+This example show how a external protocol could be connected to a running *Hono AMQP adapter* re-using classes from the [Hono CLI module](https://github.com/eclipse/hono/blob/master/cli/src/main/java/org/eclipse/hono/cli/).\n+For this example a simple TCP socket is opened and listen to commands that initiate communication with the *Hono AMQP adapter*.\n+\n+## Prerequisites \n+> optional if tenantId, deviceId and device credentials present\n+\n+From your Hono instance get:\n+    - AMQP hono adapter ip, referred to as `AMQP_ADAPTER_IP`\n+    - AMQP hono adapter port, referred to as `AMQP_ADAPTER_PORT` (default: 5672)\n+    - A device `d` username, a combination of hono deviceId and tenantId, concatenated with `'@'`, , referred to as `USERNAME`\n+    E.g.: `7c7c9777-2acd-450e-aa61-ab73d37ad0ef@6d12841d-0458-4271-b060-44a46f3417a9`\n+    - A password for device `d`, referred to as `PASSWORD`\n+\n+How to get these values, can be found in [Getting started guide](https://www.eclipse.org/hono/getting-started/).\n+\n+Alternatively, these values can be fetched and created using the following script:\n+\n+```bash\n+# prior: setup hono in kubernetes namespace \"hono\"\n+export REGISTRY_IP=$(kubectl -n hono get service  hono-service-device-registry-ext --output='jsonpath={.status.loadBalancer.ingress[0].ip}')\n+echo \"REGISTRY_IP=${REGISTRY_IP}\"\n+export AMQP_NETWORK_IP=$(kubectl -n hono get service hono-dispatch-router-ext --output='jsonpath={.status.loadBalancer.ingress[0].ip}')\n+echo \"AMQP_NETWORK_IP=${AMQP_NETWORK_IP}\"\n+export AMQP_ADAPTER_PORT=$(kubectl -n hono get service hono-adapter-amqp-vertx --output='jsonpath={.status.loadBalancer.ingress[0].port}')\n+echo \"AMQP_ADAPTER_IP=${AMQP_ADAPTER_IP}\"\n+\n+# Get example tenant or\n+export MY_TENANT=\"DEFAULT_TENANT\"\n+# register new tenant\n+# export MY_TENANT=$(curl -X POST http://$REGISTRY_IP:28080/v1/tenants 2>/dev/null | jq -r .id)\n+\n+echo \"MY_TENANT=\\\"${MY_TENANT}\\\"\"\n+\n+# register new device\n+export MY_DEVICE=$(curl -X POST http://$REGISTRY_IP:28080/v1/devices/$MY_TENANT 2>/dev/null | jq -r .id)\n+echo \"MY_DEVICE=\\\"${MY_DEVICE}\\\"\"\n+\n+# set credential secret for device\n+export MY_PWD=\"dummyDevicePassword\"\n+echo \"MY_PWD=\\\"${MY_PWD}\\\"\"\n+curl -i -X PUT -H \"content-type: application/json\" --data-binary '[{\n+  \"type\": \"hashed-password\",\n+  \"auth-id\": \"'$MY_DEVICE'\",\n+  \"secrets\": [{ \"pwd-plain\": \"'$MY_PWD'\" }]\n+}]' http://$REGISTRY_IP:28080/v1/credentials/$MY_TENANT/$MY_DEVICE\n+", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2MzUyNg==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376463526", "bodyText": "done", "author": "ko-j", "createdAt": "2020-02-07T15:49:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxODI0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxODgwMw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376418803", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:30:15Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxODk0Mg==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376418942", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:30:29Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.eclipse.hono.example.protocoladapter</groupId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <artifactId>example-protocoladapter</artifactId>\n+    <name>protocol adapter example</name>\n+    <description>A simple example to ilustrate how a protocol adapter could be implemented using classes from the Hono CLI module</description>\n+\n+    <properties>\n+        <java.version>8</java.version>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>org.eclipse.hono</groupId>\n+            <artifactId>hono-cli</artifactId>\n+            <version>1.1.0-SNAPSHOT</version>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.springframework.boot</groupId>\n+                <artifactId>spring-boot-maven-plugin</artifactId>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+</project>", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxOTU5Mg==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376419592", "bodyText": "please define the parent and only set the artifactId here", "author": "sophokles73", "createdAt": "2020-02-07T14:31:36Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.eclipse.hono.example.protocoladapter</groupId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <artifactId>example-protocoladapter</artifactId>\n+    <name>protocol adapter example</name>\n+    <description>A simple example to ilustrate how a protocol adapter could be implemented using classes from the Hono CLI module</description>\n+", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxOTgzMw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376419833", "bodyText": "IMHO this should be Java 11", "author": "sophokles73", "createdAt": "2020-02-07T14:32:05Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -0,0 +1,36 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.eclipse.hono.example.protocoladapter</groupId>\n+    <version>0.0.1-SNAPSHOT</version>\n+    <artifactId>example-protocoladapter</artifactId>\n+    <name>protocol adapter example</name>\n+    <description>A simple example to ilustrate how a protocol adapter could be implemented using classes from the Hono CLI module</description>\n+\n+    <properties>\n+        <java.version>8</java.version>", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NTM5MA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376465390", "bodyText": "properties removed, since inherited by parent.", "author": "ko-j", "createdAt": "2020-02-07T15:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxOTgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDIyMA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420220", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:32:45Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/DemoTCPApplication.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.eclipse.hono.example.protocoladapter;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDI5OQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420299", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:32:52Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/ServiceProperties.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.eclipse.hono.example.protocoladapter;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDM2NQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420365", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:33:00Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/adapter/CommandAndControlReceiver.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.eclipse.hono.example.protocoladapter.adapter;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDUxMw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420513", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:33:18Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/adapter/TelemetryAndEventSender.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package org.eclipse.hono.example.protocoladapter.adapter;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDYzMQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420631", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:33:30Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/controller/ProtocolAdapterExample.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.eclipse.hono.example.protocoladapter.controller;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDczNA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420734", "bodyText": "please add the copyright/license header", "author": "sophokles73", "createdAt": "2020-02-07T14:33:42Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/interfaces/ICommandHandler.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.eclipse.hono.example.protocoladapter.interfaces;", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDk4Mw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376420983", "bodyText": "we do not use a special prefix character for interfaces", "author": "sophokles73", "createdAt": "2020-02-07T14:34:10Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/interfaces/ICommandHandler.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.eclipse.hono.example.protocoladapter.interfaces;\n+\n+public interface ICommandHandler {", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMTExNg==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376421116", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:34:24Z", "path": "example/protocol-adapter-example/src/main/resources/application.yml", "diffHunk": "@@ -0,0 +1,6 @@\n+spring:\n+  profiles:\n+    active: dev\n+\n+app:\n+  serverPort: 6666", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMTE3Nw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376421177", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:34:32Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/interfaces/ICommandHandler.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.eclipse.hono.example.protocoladapter.interfaces;\n+\n+public interface ICommandHandler {\n+    /**\n+     * Pass through function to handle commands and return response body\n+     *\n+     * @param commandPayload body of command\n+     * @param subject        subject of command\n+     * @param contentType    HTML content type\n+     * @param isOneWay       signals if response string necessary\n+     * @return\n+     */\n+    String handleCommand(String commandPayload, String subject, String contentType, boolean isOneWay);\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMTMzMg==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376421332", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:34:51Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/controller/ProtocolAdapterExample.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package org.eclipse.hono.example.protocoladapter.controller;\n+\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.proton.ProtonDelivery;\n+import org.apache.qpid.proton.amqp.transport.DeliveryState;\n+import org.eclipse.hono.example.protocoladapter.adapter.CommandAndControlReceiver;\n+import org.eclipse.hono.example.protocoladapter.adapter.TelemetryAndEventSender;\n+import org.eclipse.hono.example.protocoladapter.interfaces.ICommandHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+\n+/**\n+ * Example protocol adapter service to send AMQP messages to Hono amqp adapter using Hono cli module classes\n+ */\n+@Service\n+public class ProtocolAdapterExample {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ProtocolAdapterExample.class);\n+\n+    private final TelemetryAndEventSender telemetryAndEventSender;\n+    private final CommandAndControlReceiver commandAndControlReceiver;\n+\n+    @Autowired\n+    public ProtocolAdapterExample(final TelemetryAndEventSender telemetryAndEventSender,\n+                                  final CommandAndControlReceiver commandAndControlReceiver) {\n+        this.telemetryAndEventSender = telemetryAndEventSender;\n+        this.commandAndControlReceiver = commandAndControlReceiver;\n+    }\n+\n+    /**\n+     * Sets AMQP client properties and command handler {@link ICommandHandler}\n+     *\n+     * @param host           AMQP Hono adapter IP address\n+     * @param port           AMQP Hono adapter port\n+     * @param username       username consists of DEVICE_ID@TENANT_ID\n+     * @param password       device credentials\n+     * @param commandHandler function to process incoming commands\n+     */\n+    public void setAMQPClientProps(final String host, final int port, final String username, final String password, final ICommandHandler commandHandler) {\n+        telemetryAndEventSender.setAMQPClientProps(host, port, username, password);\n+        commandAndControlReceiver.setAMQPClientProps(host, port, username, password, commandHandler);\n+    }\n+\n+    /**\n+     * Sends AMQP message to Hono AMQP adapter\n+     * <p>\n+     * Connection properties have to be set with {@link #setAMQPClientProps(String, int, String, String, ICommandHandler) } beforehand\n+     *\n+     * @param messagePayload Message payload\n+     * @param messageAddress \"telemetry\" (\"t\") or \"event\" (\"e\")\n+     * @return response from Hono AMQP adapter\n+     */\n+    public Future<String> sendAMQPMessage(final String messagePayload, final String messageAddress) {\n+        final CompletableFuture<ProtonDelivery> messageSent = new CompletableFuture<>();\n+        final Promise<String> messageResponse = Promise.promise();\n+\n+        try {\n+            telemetryAndEventSender.sendMessage(messagePayload, messageAddress, messageSent);\n+        } catch (final IllegalArgumentException e) {\n+            messageResponse.fail(e.getCause());\n+            log.error(String.format(\"Sending message failed [reason: %s] %n\", e.getMessage()));\n+            return messageResponse.future();\n+        }\n+\n+        try {\n+            final ProtonDelivery delivery = messageSent.join();\n+            // Logs the delivery state to the console\n+            final DeliveryState state = delivery.getRemoteState();\n+            messageResponse.complete(state.getType().toString());\n+            log.info(String.format(\"Delivery State: %s\", state.getType()));\n+        } catch (final CompletionException e) {\n+            log.error(String.format(\"Sending message failed [reason: %s] %n\", e.getMessage()));\n+            messageResponse.fail(e.getCause());\n+        } catch (final CancellationException e) {\n+            // do-nothing\n+            messageResponse.fail(e.getCause());\n+        }\n+        return messageResponse.future();\n+    }\n+\n+    /**\n+     * Start listening for commands\n+     * <p>\n+     * Connection properties have to be set with {@link #setAMQPClientProps(String, int, String, String, ICommandHandler) } beforehand\n+     */\n+    public void listenCommands() {\n+        commandAndControlReceiver.listenCommands();\n+    }\n+\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMTcxMw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376421713", "bodyText": "this doesn't seem related to your PR, is it?", "author": "sophokles73", "createdAt": "2020-02-07T14:35:29Z", "path": "site/homepage/content/sandbox.md", "diffHunk": "@@ -39,9 +39,12 @@ All services are exposed via the same ports as used in the guide.\n   Telemetry and/or Event APIs, make sure to not set a trust store explicitly but instead set the *tlsEnabled* property to `true`.\n   The command line client binary is available from the [downloads page]({{< relref \"downloads#binaries\" >}}) and\n   can be used to consume telemetry/event messages from the sandbox as below:\n-  \n-        java -jar hono-cli-*-exec.jar --hono.client.host=hono.eclipse.org --hono.client.port=15671 --hono.client.tlsEnabled=true --hono.client.username=consumer@HONO --hono.client.password=verysecret --spring.profiles.active=receiver`\n-  Note that  only the *receiver* profile is activated but not the *ssl* profile.\n+\n+  ~~~sh\n+  # in directory where the hono-cli-*-exec.jar file has been downloaded to\n+  java -jar hono-cli-*-exec.jar --hono.client.host=hono.eclipseprojects.io --hono.client.port=15671 --hono.client.tlsEnabled=true --hono.client.username=consumer@HONO --hono.client.password=verysecret --spring.profiles.active=receiver\n+  ~~~\n+  Note that only the *receiver* profile is activated but not the *ssl* profile.", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1MTg5Mw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376951893", "bodyText": "That's right. Was caused by a merger mishap. Removed", "author": "ko-j", "createdAt": "2020-02-10T09:39:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMTcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjA3Ng==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376422076", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:36:06Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/adapter/CommandAndControlReceiver.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package org.eclipse.hono.example.protocoladapter.adapter;\n+\n+import io.vertx.core.Promise;\n+import io.vertx.proton.*;\n+import org.apache.qpid.proton.amqp.messaging.Data;\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.cli.adapter.AmqpCliClient;\n+import org.eclipse.hono.config.ClientConfigProperties;\n+import org.eclipse.hono.example.protocoladapter.interfaces.ICommandHandler;\n+import org.eclipse.hono.util.CommandConstants;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import java.net.HttpURLConnection;\n+\n+/**\n+ * Command and receiver listener using methods and properties from {@link AmqpCliClient} to simplify handling\n+ * <p>\n+ * based loosely on {@link org.eclipse.hono.cli.adapter.CommandAndControlClient}\n+ *\n+ * @see org.eclipse.hono.cli.adapter.CommandAndControlClient\n+ */\n+@Component\n+public class CommandAndControlReceiver extends AmqpCliClient {\n+\n+    private static final Logger log = LoggerFactory.getLogger(CommandAndControlReceiver.class);\n+    private ProtonSender sender;\n+    private ICommandHandler commandHandler;\n+\n+    /**\n+     * Listen for incoming commands\n+     */\n+    public void listenCommands() {\n+        final ProtonMessageHandler messageHandler = (d, m) -> {\n+            String commandPayload = null;\n+            if (m.getBody() instanceof Data) {\n+                final byte[] body = (((Data) m.getBody()).getValue()).getArray();\n+                commandPayload = new String(body);\n+            }\n+            final boolean isOneWay = m.getReplyTo() == null;\n+            if (isOneWay) {\n+                log.info(String.format(\"received one-way command [name: %s]: %s%n\", m.getSubject(), commandPayload));\n+                this.commandHandler.handleCommand(commandPayload, m.getSubject(), m.getContentType(), isOneWay);\n+            } else {\n+                log.info(String.format(\"received command [name: %s]: %s%n\", m.getSubject(), commandPayload));\n+                final String responseMessagePayload = this.commandHandler.handleCommand(commandPayload, m.getSubject(), m.getContentType(), isOneWay);\n+\n+                final Message commandResponse = ProtonHelper.message(m.getReplyTo(), responseMessagePayload);\n+                commandResponse.setCorrelationId(m.getCorrelationId());\n+                MessageHelper.addProperty(commandResponse, MessageHelper.APP_PROPERTY_STATUS, HttpURLConnection.HTTP_OK);\n+                commandResponse.setContentType(m.getContentType());\n+                this.sender.send(commandResponse, delivery -> {\n+                    if (delivery.remotelySettled()) {\n+                        log.info(String.format(\"sent response to command [name: %s, outcome: %s]%n\", m.getSubject(), delivery.getRemoteState().getType()));\n+                    } else {\n+                        log.info(\"application did not settle command response message\");\n+                    }\n+                });\n+            }\n+        };\n+\n+        connectToAdapter()\n+                .compose(con -> {\n+                    this.adapterConnection = con;\n+                    return createSender();\n+                }).map(s -> {\n+            this.sender = s;\n+            final Promise<ProtonReceiver> result = Promise.promise();\n+            final ProtonReceiver receiver = adapterConnection.createReceiver(CommandConstants.COMMAND_ENDPOINT);\n+            receiver.setQoS(ProtonQoS.AT_LEAST_ONCE);\n+            receiver.handler(messageHandler);\n+            receiver.openHandler(result);\n+            receiver.open();\n+            return result.future().map(recver -> {\n+                log.info(\"Command receiver ready\");\n+                return recver;\n+            });\n+        });\n+\n+    }\n+\n+    /**\n+     * Sets AMQP client connection properties and command handler {@link ICommandHandler}\n+     *\n+     * @param host           AMQP Hono adapter IP address\n+     * @param port           AMQP Hono adapter port\n+     * @param username       username consists of DEVICE_ID@TENANT_ID\n+     * @param password       device credentials\n+     * @param commandHandler handler for incoming commands\n+     */\n+    public void setAMQPClientProps(final String host, final int port, final String username, final String password, final ICommandHandler commandHandler) {\n+        final ClientConfigProperties props = new ClientConfigProperties();\n+        props.setHost(host);\n+        props.setPort(port);\n+        props.setUsername(username);\n+        props.setPassword(password);\n+        setClientConfig(props);\n+        this.commandHandler = commandHandler;\n+    }\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjE5Ng==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376422196", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:36:19Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/ServiceProperties.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package org.eclipse.hono.example.protocoladapter;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Configure vertx, which is used in {@link org.eclipse.hono.cli.adapter.AmqpCliClient}\n+ */\n+@Configuration\n+public class ServiceProperties {\n+    /**\n+     * Exposes a Vert.x instance as a Spring bean.\n+     *\n+     * @return The Vert.x instance.\n+     */\n+    @Bean\n+    public Vertx vertx() {\n+        final VertxOptions options = new VertxOptions().setWarningExceptionTime(1500000000);\n+        return Vertx.vertx(options);\n+    }\n+\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjI5Nw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376422297", "bodyText": "missing EOL", "author": "sophokles73", "createdAt": "2020-02-07T14:36:30Z", "path": "example/protocol-adapter-example/src/main/java/org/eclipse/hono/example/protocoladapter/DemoTCPApplication.java", "diffHunk": "@@ -0,0 +1,172 @@\n+package org.eclipse.hono.example.protocoladapter;\n+\n+import io.vertx.core.Future;\n+import org.eclipse.hono.example.protocoladapter.controller.ProtocolAdapterExample;\n+import org.eclipse.hono.example.protocoladapter.interfaces.ICommandHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+import javax.annotation.PostConstruct;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.PrintWriter;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * Example Tcp server to send event and telemetry messages to Hono AMQP adapter and receives commands\n+ */\n+@SpringBootApplication\n+@ConfigurationProperties(\"app\")\n+public class DemoTCPApplication {\n+\n+    private static final Logger log = LoggerFactory.getLogger(DemoTCPApplication.class);\n+    private final ProtocolAdapterExample protocolAdapterExample;\n+    // TCP server properties\n+    private int serverPort;\n+    private ServerSocket serverSocket;\n+    private Socket clientSocket;\n+    private PrintWriter out;\n+    private BufferedReader in;\n+\n+    public DemoTCPApplication(ProtocolAdapterExample protocolAdapterExample) throws IOException {\n+        this.protocolAdapterExample = protocolAdapterExample;\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        SpringApplication.run(DemoTCPApplication.class, args);\n+        log.info(\"Start DemoTCPApplication\");\n+    }\n+\n+    public void setServerPort(int serverPort) {\n+        this.serverPort = serverPort;\n+    }\n+\n+    /**\n+     * Starts example tcp server listening to command to be relayed to the AMQP adapter\n+     */\n+    @PostConstruct\n+    public void startTcpServer() throws IOException {\n+        serverSocket = new ServerSocket(this.serverPort);\n+\n+        while (true) {\n+            clientSocket = serverSocket.accept();\n+            out = new PrintWriter(clientSocket.getOutputStream(), true);\n+            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n+            String greeting;\n+\n+            while (clientSocket.isConnected()) {\n+                greeting = in.readLine();\n+                if (greeting == null) {\n+                    close();\n+                    break;\n+                }\n+\n+                switch (greeting) {\n+                    case \"initConnection\":\n+                        log.info(\"Command: initConnection\");\n+                        out.println(\"host:\");\n+                        String host = in.readLine();\n+                        out.println(\"port:\");\n+                        int port = Integer.parseInt(in.readLine());\n+                        out.println(\"username (DEVICE_ID@TENANT_ID):\");\n+                        String username = in.readLine();\n+                        out.println(\"password:\");\n+                        String password = in.readLine();\n+                        initConnection(host, port, username, password);\n+                        out.println(\"OK\");\n+                        break;\n+                    case \"listenCommands\":\n+                        log.info(\"Command: listenCommands\");\n+                        listenCommands();\n+                        out.println(\"OK\");\n+                        break;\n+                    case \"sendAMQPMessage\":\n+                        log.info(\"Command: sendAMQPMessage\");\n+                        out.println(\"message address (\\\"telemetry\\\"/\\\"event\\\"):\");\n+                        String messageAddress = in.readLine();\n+                        out.println(\"payload:\");\n+                        String payload = in.readLine();\n+                        Future<String> amqpResponse = sendAMQPMessage(payload, messageAddress);\n+                        amqpResponse.setHandler(response -> {\n+                            if (response.succeeded()) {\n+                                out.println(\"OK\");\n+                                log.info(String.format(\"sendAMQPMessage result: \\\"%s\\\"\", response.result()));\n+                                out.println(\"response: \" + response.result());\n+                            } else {\n+                                out.println(\"FAIL\");\n+                            }\n+                        });\n+                        break;\n+                    default:\n+                        out.println(\"Unrecognized Command.\\nCommands:\\n - \\\"initConnection\\\"\\n - \\\"listenCommands\\\"\\n - \\\"sendAMQPMessage\\\"\");\n+                        break;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Closes sockets and streams if client is disconnected\n+     */\n+    private void close() {\n+        try {\n+            in.close();\n+            out.close();\n+            clientSocket.close();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    /**\n+     * Sets connection properties, sets a commandHandler for incoming commands\n+     *\n+     * @param host     AMQP Hono adapter IP address\n+     * @param port     AMQP Hono adapter port\n+     * @param username username consists of DEVICE_ID@TENANT_ID\n+     * @param password device credentials\n+     */\n+    public void initConnection(String host, int port, String username, String password) {\n+\n+        // Example command handler responds with time if incoming subject is \"tellTime\"\n+        ICommandHandler commandHandler = (commandPayload, subject, contentType, isOneWay) -> {\n+            log.info(String.format(\"Got now command: \\\"%s\\\" for subject \\\"%s\\\"\", commandPayload, subject));\n+            if (!isOneWay && subject.contains(\"tellTime\")) {\n+                return String.format(\"myCurrentTime: %s\",\n+                        DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\").format(LocalDateTime.now())\n+                );\n+            }\n+            return \"{}\";\n+        };\n+        this.protocolAdapterExample.setAMQPClientProps(host, port, username, password, commandHandler);\n+    }\n+\n+    /**\n+     * Starts listening to commands\n+     * <p>\n+     * Connection properties have to be set with {@link #initConnection(String, int, String, String) } beforehand\n+     */\n+    public void listenCommands() {\n+        this.protocolAdapterExample.listenCommands();\n+    }\n+\n+    /**\n+     * Sends telemtry or event message to Hono AMQP adapter\n+     * <p>\n+     * Connection properties have to be set with {@link #initConnection(String, int, String, String) } beforehand\n+     *\n+     * @param payload        message payload\n+     * @param messageAddress address can be either \"telemetry\" or \"event\"\n+     * @return\n+     */\n+    public Future<String> sendAMQPMessage(String payload, String messageAddress) {\n+        return protocolAdapterExample.sendAMQPMessage(payload, messageAddress);\n+    }\n+}", "originalCommit": "6927f577c1f5d01b14dbdae8743c754d39891bad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MzY5NA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376483694", "bodyText": "since this is a new file, it should only contain the current year", "author": "sophokles73", "createdAt": "2020-02-07T16:26:52Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -1,22 +1,34 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2016, 2018 Contributors to the Eclipse Foundation", "originalCommit": "8cfcd0b5353779fbc23bef32b5d185968c1ba525", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4NDE4Mw==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376484183", "bodyText": "current year only\nthis probably applies to all the other files you have added as well ...", "author": "sophokles73", "createdAt": "2020-02-07T16:27:50Z", "path": "example/protocol-adapter-example/scripts/create_hono_device.sh", "diffHunk": "@@ -0,0 +1,43 @@\n+#!/bin/bash\n+#*******************************************************************************\n+# Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation", "originalCommit": "8cfcd0b5353779fbc23bef32b5d185968c1ba525", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "942c008864eee1bd5f1f6e3c3999c5e8d2f5ee3b", "url": "https://github.com/eclipse/hono/commit/942c008864eee1bd5f1f6e3c3999c5e8d2f5ee3b", "message": "[#1646] add thirdparty adapter example\n\nWith contributions of Johannes.kristan@bosch.io:\nsite/documentation/content/dev-guide/third_party_adapter.md#L1-L35\n\nWith contributions of carsten.lohmann@bosch.io:\nsite/documentation/content/dev-guide/third_party_adapter.png\n\nSigned-off-by: Jan kostulski (INST-CSS/BSV-OS2) <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "dcf6a09b8a5414a6fb81ced56c88a29300b72f52", "url": "https://github.com/eclipse/hono/commit/dcf6a09b8a5414a6fb81ced56c88a29300b72f52", "message": "[#1646] alter docu protocol adapter to a more gerneral one\n\nA more general docu about device connection methods, instead of a single dev guide documentation about the protocol adapter.\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "3b5cf1a1efa708b0d1276b337ebd8222e2418194", "url": "https://github.com/eclipse/hono/commit/3b5cf1a1efa708b0d1276b337ebd8222e2418194", "message": "[#1646] fix missing \")\"\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "5eb072b2fc0f11fdc3e33abd0b0418d914a1d382", "url": "https://github.com/eclipse/hono/commit/5eb072b2fc0f11fdc3e33abd0b0418d914a1d382", "message": "[#1646] mv Hono client example in subfolder, add example TCP to AMQP protocol adapter\n\nTCP protocol adapter added to example module to illustrate how exisiting Hono classes utilized\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"oid": "1afd6bc25fc432d4bea583b5d4a71b56d48b7e29", "url": "https://github.com/eclipse/hono/commit/1afd6bc25fc432d4bea583b5d4a71b56d48b7e29", "message": "[#1646] reformat\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T08:28:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNTUwNQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376925505", "bodyText": "the parent of this module is hono-example", "author": "sophokles73", "createdAt": "2020-02-10T08:44:03Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2016, 2018 Contributors to the Eclipse Foundation\n+   \n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+   \n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+   \n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.eclipse.hono</groupId>\n+        <artifactId>hono-bom</artifactId>", "originalCommit": "8cfcd0b5353779fbc23bef32b5d185968c1ba525", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjkyNjI5MA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r376926290", "bodyText": "the parent of this module now is hono-example", "author": "sophokles73", "createdAt": "2020-02-10T08:45:50Z", "path": "example/hono-client-examples/pom.xml", "diffHunk": "@@ -0,0 +1,99 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2016, 2018 Contributors to the Eclipse Foundation\n+   \n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+   \n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+   \n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.eclipse.hono</groupId>\n+    <artifactId>hono-bom</artifactId>", "originalCommit": "8cfcd0b5353779fbc23bef32b5d185968c1ba525", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a94ddb5f88a23598bcfa807c1bdf17a8c4e212be", "url": "https://github.com/eclipse/hono/commit/a94ddb5f88a23598bcfa807c1bdf17a8c4e212be", "message": "[#1646] PR fixes\n\n- mv hono-client-examples in a src folder\n- extract device creation from readme into sh file\n- append EOLs\n- add licenses\n- update parent in POM\n- rn CommandHandler\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T09:19:20Z", "type": "commit"}, {"oid": "a94ddb5f88a23598bcfa807c1bdf17a8c4e212be", "url": "https://github.com/eclipse/hono/commit/a94ddb5f88a23598bcfa807c1bdf17a8c4e212be", "message": "[#1646] PR fixes\n\n- mv hono-client-examples in a src folder\n- extract device creation from readme into sh file\n- append EOLs\n- add licenses\n- update parent in POM\n- rn CommandHandler\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T09:19:20Z", "type": "forcePushed"}, {"oid": "3747c7af8a0c53a769929b54e4c661274c57461a", "url": "https://github.com/eclipse/hono/commit/3747c7af8a0c53a769929b54e4c661274c57461a", "message": "[#1646] update version to 1.2.0-SNAPSHOT\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T12:00:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NTIzOA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r377075238", "bodyText": "this file has been around since 2016. The two years define the period during which the file has been evolved, i.e. it has been created 2016 and has been last updated 2018. Since this is an existing file, you should only set the upper boundary to the current year.", "author": "sophokles73", "createdAt": "2020-02-10T13:54:32Z", "path": "example/pom.xml", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!--\n-    Copyright (c) 2016, 2018 Contributors to the Eclipse Foundation\n+    Copyright (c) 2020 Contributors to the Eclipse Foundation", "originalCommit": "3747c7af8a0c53a769929b54e4c661274c57461a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExMjIwNA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r377112204", "bodyText": "Since the original file in this directory was moved to example/hono-client-examples/pom.xml one could argue that this is a new file.", "author": "ko-j", "createdAt": "2020-02-10T14:56:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NTIzOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NjM3MA==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r377076370", "bodyText": "IMHO we already agreed that this is called a Protocol Gateway, right?\nIf we do, please also replace the other occurrences as well, e.g. in package/class names, artifact ID etc", "author": "sophokles73", "createdAt": "2020-02-10T13:56:31Z", "path": "example/protocol-adapter-example/README.md", "diffHunk": "@@ -0,0 +1,67 @@\n+# Example *Protocol adapter* to connect to the AMQP adapter", "originalCommit": "3747c7af8a0c53a769929b54e4c661274c57461a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzYxNQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r377077615", "bodyText": "protocol-gateway? It is clear that this is an example because it is a sub-module of hono-example, right?", "author": "sophokles73", "createdAt": "2020-02-10T13:58:34Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2018 Contributors to the Eclipse Foundation\n+   \n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+   \n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+   \n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.eclipse.hono</groupId>\n+        <artifactId>hono-example</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+        <relativePath>..</relativePath>\n+    </parent>\n+\n+    <artifactId>example-protocoladapter</artifactId>", "originalCommit": "3747c7af8a0c53a769929b54e4c661274c57461a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Nzc2MQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r377077761", "bodyText": "protocol  gateway", "author": "sophokles73", "createdAt": "2020-02-10T13:58:48Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2018 Contributors to the Eclipse Foundation\n+   \n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+   \n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+   \n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.eclipse.hono</groupId>\n+        <artifactId>hono-example</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+        <relativePath>..</relativePath>\n+    </parent>\n+\n+    <artifactId>example-protocoladapter</artifactId>\n+\n+    <name>protocol adapter example</name>\n+    <description>A simple example to illustrate how a protocol adapter could be implemented using classes from the Hono CLI module</description>", "originalCommit": "3747c7af8a0c53a769929b54e4c661274c57461a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODA2OQ==", "url": "https://github.com/eclipse/hono/pull/1724#discussion_r377078069", "bodyText": "better use ${project.version} so that you do not need to change it all the time ...", "author": "sophokles73", "createdAt": "2020-02-10T13:59:24Z", "path": "example/protocol-adapter-example/pom.xml", "diffHunk": "@@ -0,0 +1,48 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+    Copyright (c) 2018 Contributors to the Eclipse Foundation\n+   \n+    See the NOTICE file(s) distributed with this work for additional\n+    information regarding copyright ownership.\n+   \n+    This program and the accompanying materials are made available under the\n+    terms of the Eclipse Public License 2.0 which is available at\n+    http://www.eclipse.org/legal/epl-2.0\n+   \n+    SPDX-License-Identifier: EPL-2.0\n+ -->\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.eclipse.hono</groupId>\n+        <artifactId>hono-example</artifactId>\n+        <version>1.2.0-SNAPSHOT</version>\n+        <relativePath>..</relativePath>\n+    </parent>\n+\n+    <artifactId>example-protocoladapter</artifactId>\n+\n+    <name>protocol adapter example</name>\n+    <description>A simple example to illustrate how a protocol adapter could be implemented using classes from the Hono CLI module</description>\n+    <url>https://www.eclipse.org/hono</url>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.hono</groupId>\n+            <artifactId>hono-cli</artifactId>\n+            <version>1.2.0-SNAPSHOT</version>", "originalCommit": "3747c7af8a0c53a769929b54e4c661274c57461a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "24e9cd92871fe26af3160db73d5de80a1a3cd71a", "url": "https://github.com/eclipse/hono/commit/24e9cd92871fe26af3160db73d5de80a1a3cd71a", "message": "[#1646] PR fixes\n\n- rn \"protocol adapter\" occurences -> \"protocol gateway\"\n\nSigned-off-by: Jan Kostulski <jan.kostulski@bosch.io>", "committedDate": "2020-02-10T15:42:29Z", "type": "commit"}]}