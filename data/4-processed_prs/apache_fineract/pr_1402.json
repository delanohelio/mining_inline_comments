{"pr_number": 1402, "pr_title": "FINERACT-1189: fineract client as a separate module", "pr_createdAt": "2020-10-14T10:58:02Z", "pr_url": "https://github.com/apache/fineract/pull/1402", "timeline": [{"oid": "a0e45730c3b0ed5084322994c91fcf6e4e018b4d", "url": "https://github.com/apache/fineract/commit/a0e45730c3b0ed5084322994c91fcf6e4e018b4d", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-14T10:59:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NjU0NA==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504596544", "bodyText": "There was a bit of a debate about this earlier. Initially we just had spotlessCheck which complained about any formatting issues, and then people had to manually run spotlessApply to fix them. There was a fair bit of dissatisfaction about this - and hence this was introduced: if you run build manually it will automatically fix any spotless issues with spotlessApply - but when you run the build in Travis, it just checks and doesn't modify the code. If we want to change that behaviour now that should be a different JIRA & PR up for discussion...", "author": "ptuomola", "createdAt": "2020-10-14T11:17:11Z", "path": "build.gradle", "diffHunk": "@@ -85,51 +218,235 @@ allprojects  {\n             trimTrailingWhitespace()\n         }\n \n-        if (plugins.hasPlugin('java')) {\n-            java {\n-                targetExclude '**/build/**', '**/bin/**', '**/out/**'\n-                importOrder() //sort imports alphabetically\n-                removeUnusedImports()\n-                eclipse().configFile \"$rootDir/config/fineractdev-formatter.xml\"\n-                endWithNewline()\n-                trimTrailingWhitespace()\n-\n-                // Enforce style modifier order\n-                custom 'Modifier ordering', {\n-                    def modifierRanking = [\n-                        public      : 1,\n-                        protected   : 2,\n-                        private     : 3,\n-                        abstract    : 4,\n-                        default     : 5,\n-                        static      : 6,\n-                        final       : 7,\n-                        transient   : 8,\n-                        volatile    : 9,\n-                        synchronized: 10,\n-                        native      : 11,\n-                        strictfp    : 12]\n-                    // Find any instance of multiple modifiers. Lead with a non-word character to avoid\n-                    // accidental matching against for instance, \"an alternative default value\"\n-                    it.replaceAll(/\\W(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {\n-                        // Do not replace the leading non-word character.  Identify the modifiers\n-                        it.replaceAll(/(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {\n-                            // Sort the modifiers according to the ranking above\n-                            it.split().sort({ modifierRanking[it] }).join(' ') + ' '\n-                        }\n-                        )\n+        lineEndings 'UNIX'\n+    }\n+\n+    // Configuration for Gradle license plug-in\n+    // https://github.com/hierynomus/license-gradle-plugin\n+    license {\n+        header rootProject.file(\"$rootDir/APACHE_LICENSETEXT.md\")\n+        excludes([\n+            \"**/git.properties\",\n+            \"**/*.html\",\n+            \"**/*.mustache\",\n+            \"**/package-info.java\",\n+            \"**/keystore.jks\",\n+            \"**/static/swagger-ui/**\",\n+            \"**/api-docs/**\",\n+        ])\n+        strictCheck true\n+    }\n+\n+    task licenseFormatBuildScripts (type:nl.javadude.gradle.plugins.license.License) {\n+        source = fileTree(dir: \"$rootDir/\", includes: [\n+            '**/*.bat',\n+            '**/*.sh',\n+            '**/*.sql'\n+        ])\n+    }\n+    licenseFormat.dependsOn licenseFormatBuildScripts\n+\n+    // Configuration for Apache Release Audit Tool task\n+    // https://github.com/eskatos/creadur-rat-gradle\n+    rat {\n+        verbose = false\n+        reportDir = file(\"$buildDir/reports/rat\")\n+        excludes = [\n+            '**/src/main/templates/**/*.mustache',\n+            '**/.dockerignore',\n+            '**/*.launch',\n+            '**/licenses/**',\n+            '**/*.md',\n+            '**/*.github/**',\n+            '**/MANIFEST.MF',\n+            '**/*.json',\n+            '**/*.json.template',\n+            '**/*.txt',\n+            '**/*.log',\n+            '**/fineractdev-eclipse-preferences.epf',\n+            '**/template-expected.html',\n+            '**/template.mustache',\n+            '**/.classpath',\n+            '**/.project',\n+            '**/.idea/**',\n+            '**/*.ipr',\n+            '**/*.iws',\n+            '**/.settings/**',\n+            '**/bin/**',\n+            '**/.git/**',\n+            '**/.gitignore',\n+            '**/.gitkeep',\n+            '**/*.iml',\n+            '**/config/swagger/templates/**',\n+            // Notice files\n+            '**/NOTICE_RELEASE',\n+            '**/NOTICE_SOURCE',\n+            // Swagger License\n+            '**/src/main/resources/static/swagger-ui/**',\n+            // gradle\n+            '**/.gradle/**',\n+            '**/gradlew',\n+            '**/gradlew.bat',\n+            '**/gradle/wrapper/gradle-wrapper.properties',\n+            '**/caches/**',\n+            '**/daemon/**',\n+            '**/native/**',\n+            '**/wrapper/**',\n+            '**/build/**',\n+            // Api Docs\n+            '**/api-docs/*.*',\n+            '**/docs/system-architecture/.htaccess',\n+            '**/docs/system-architecture/404.html',\n+            '**/docs/system-architecture/index.html',\n+            '**/docs/system-architecture/**/*.xml',\n+            '**/bootstrap-3.0.0/assets/application.js',\n+            '**/system-architecture/js/plugins.js',\n+            // Apache License\n+            '**/bootstrap-3.0.0/assets/less.js',\n+            '**/css/bootstrap-3.0.0/**/*.*',\n+            // Public Domain See http://www.JSON.org/js.html\n+            '**/bootstrap-3.0.0/assets/json2.js.htm',\n+            // MIT License\n+            '**/modernizr-2.6.2.min.js',\n+            '**/css/normalize.css',\n+            '**/assets/filesaver.js',\n+            '**/css/fonts/glyphicons-halflings-regular.svg',\n+            '**/assets/jszip.js',\n+            '**/assets/jquery.js',\n+            '**/api-docs/jquery-1.7.min.js',\n+            '**/css/toc-0.1.2/**/*.*',\n+            '**/docs/system-architecture/css/main.css',\n+            '**/system-architecture/js/vendor/jquery-1.9.1.min.js',\n+            '**/system-architecture/js/vendor/toc-0.1.2/jquery.toc.min.js',\n+            '**/assets/respond.min.js',\n+            '**/assets/html5shiv.js',\n+            // BSD License\n+            '**/assets/uglify.js',\n+            // Ignore out folder\n+            '**/out/**',\n+            // Git build info\n+            \"**/git.properties\",\n+        ]\n+    }\n+}\n+\n+configure(project.fineractJavaProjects) {\n+    // NOTE: order matters!\n+\n+    apply plugin: 'java-library'\n+    apply plugin: 'idea'\n+\n+    /* define the valid syntax level for source files */\n+    sourceCompatibility = JavaVersion.VERSION_11\n+    /* define binary compatibility version */\n+    targetCompatibility = JavaVersion.VERSION_11\n+\n+    /* http://stackoverflow.com/questions/19653311/jpa-repository-works-in-idea-and-production-but-not-in-gradle */\n+    sourceSets.main.output.resourcesDir = sourceSets.main.java.outputDir\n+    sourceSets.test.output.resourcesDir = sourceSets.test.java.outputDir\n+\n+    sourceSets {\n+        integrationTest {\n+            compileClasspath += main.output + test.output\n+            runtimeClasspath += main.output + test.output\n+        }\n+    }\n+\n+    configurations {\n+        implementation.setCanBeResolved(true)\n+        api.setCanBeResolved(true)\n+\n+        integrationTestCompile.extendsFrom testImplementation\n+        integrationTestRuntime.extendsFrom testRuntime\n+    }\n+\n+    tasks.withType(JavaCompile) {\n+        options.compilerArgs += [\n+            \"-Xlint:unchecked\",\n+            \"-Xlint:cast\",\n+            \"-Xlint:auxiliaryclass\",\n+            \"-Xlint:deprecation\",\n+            \"-Xlint:dep-ann\",\n+            \"-Xlint:divzero\",\n+            \"-Xlint:empty\",\n+            \"-Xlint:exports\",\n+            \"-Xlint:fallthrough\",\n+            \"-Xlint:finally\",\n+            \"-Xlint:module\",\n+            \"-Xlint:opens\",\n+            \"-Xlint:options\",\n+            \"-Xlint:overloads\",\n+            \"-Xlint:overrides\",\n+            \"-Xlint:path\",\n+            \"-Xlint:processing\",\n+            \"-Xlint:removal\",\n+            \"-Xlint:requires-automatic\",\n+            \"-Xlint:requires-transitive-automatic\",\n+            \"-Xlint:try\",\n+            \"-Xlint:varargs\",\n+            \"-Xlint:preview\",\n+            \"-Xlint:static\",\n+            // \"-Werror\" // TODO: @vidakovic fix this\n+        ]\n+        // TODO FINERACT-959 (gradually) enable -Xlint:all (see \"javac -help -X\")\n+\n+        options.deprecation = true\n+\n+        options.compilerArgs +=[\n+            \"-Xmaxwarns\",\n+            1500,\n+            \"-Xmaxerrs\",\n+            1500\n+        ]\n+    }\n+\n+    // Configuration for the spotless plugin\n+    // https://github.com/diffplug/spotless/tree/main/plugin-gradle\n+    spotless {\n+        java {\n+            targetExclude '**/build/**', '**/bin/**', '**/out/**'\n+            importOrder() //sort imports alphabetically\n+            removeUnusedImports()\n+            eclipse().configFile \"$rootDir/config/fineractdev-formatter.xml\"\n+            endWithNewline()\n+            trimTrailingWhitespace()\n+\n+            // Enforce style modifier order\n+            custom 'Modifier ordering', {\n+                def modifierRanking = [\n+                    public      : 1,\n+                    protected   : 2,\n+                    private     : 3,\n+                    abstract    : 4,\n+                    default     : 5,\n+                    static      : 6,\n+                    final       : 7,\n+                    transient   : 8,\n+                    volatile    : 9,\n+                    synchronized: 10,\n+                    native      : 11,\n+                    strictfp    : 12]\n+                // Find any instance of multiple modifiers. Lead with a non-word character to avoid\n+                // accidental matching against for instance, \"an alternative default value\"\n+                it.replaceAll(/\\W(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {\n+                    // Do not replace the leading non-word character.  Identify the modifiers\n+                    it.replaceAll(/(?:public |protected |private |abstract |default |static |final |transient |volatile |synchronized |native |strictfp ){2,}/, {\n+                        // Sort the modifiers according to the ranking above\n+                        it.split().sort({ modifierRanking[it] }).join(' ') + ' '\n                     }\n                     )\n                 }\n-            }\n-\n-            if (project.hasProperty(\"automatedBuild\")) {\n-                dependsOn(spotlessCheck)\n-            } else {\n-                dependsOn(spotlessApply)\n+                )\n             }\n         }\n \n+        // TODO: @vidakovic why do we need this again? Spotless is checking anyway\n+        // if (project.hasProperty(\"automatedBuild\")) {\n+        //     dependsOn(spotlessCheck)\n+        // } else {\n+        //     dependsOn(spotlessApply)\n+        // }", "originalCommit": "a0e45730c3b0ed5084322994c91fcf6e4e018b4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxMjkzNA==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504612934", "bodyText": "Ok, understood. Then I have to move this most likely somewhere else. As is, it complains about spotlessApply not being available.", "author": "vidakovic", "createdAt": "2020-10-14T11:48:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NjU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyNzA1Mw==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504627053", "bodyText": "Concerning the automatic yaml file generation: the intention is not to regress. Right now unfortunately Gradle is resisting all attempts to order the builds. But sooner or later I'll find a solution for that. So, we are on the same page here.\nOn that note: there's also a little bit of a chicken and egg problem left there concerning the distribution task. We need to build fineract-provider first which gives us the fineract.yaml file and then we can build fineract-client without the need to hold a hard copy. But as it is right now fineract-provider is also responsible to create the distribution which should include the client library... which would create in this current configuration a circular dependency. Solution: a separate module (fineract-distribution) should be responsible just for creating the distribution file (and signing it etc.). That way we can avoid the circular dependency. Later PR.", "author": "vidakovic", "createdAt": "2020-10-14T12:14:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NjU0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NjY3NQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504676675", "bodyText": "Found a solutions:\n\nautomatic spotlessApply works again as before\nI found a way to express the dependency of fineract-client on fineract-provider; works like a charm; no hard copy of fineract.yaml in fineract-client needed anymore", "author": "vidakovic", "createdAt": "2020-10-14T13:28:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NjU0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NzIzMA==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504597230", "bodyText": "Hmm... I thought we wanted to only have \"common\" plugins in the main Gradle file. But the OpenAPI one is only needed / used on the client project. Is there any way to make it specific for that subproject only?", "author": "ptuomola", "createdAt": "2020-10-14T11:18:38Z", "path": "build.gradle", "diffHunk": "@@ -46,6 +56,7 @@ buildscript {\n plugins {\n     id 'io.spring.dependency-management' version '1.0.10.RELEASE'\n     id 'com.diffplug.spotless' version '5.6.1'\n+    id 'org.openapi.generator' version '4.3.1'", "originalCommit": "a0e45730c3b0ed5084322994c91fcf6e4e018b4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxMDk0Ng==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504610946", "bodyText": "This is just to define the plugin dependencies. We could also do something like this:\n...\nid 'org.openapi.generator' version '4.3.1' apply false\n...\n\nThen this is really just declaring a dependency (much like the dependencyManagement section) and the respective plugins would only be activated with (same example):\napply plugin: 'org.openapi.generator'", "author": "vidakovic", "createdAt": "2020-10-14T11:45:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYxMjE5Mg==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504612192", "bodyText": "On that note: all those plugin dependencies declared like this in the buildscript section:\n    dependencies {\n        classpath 'com.bmuschko:gradle-cargo-plugin:2.7.1'\n        classpath 'org.zeroturnaround:gradle-jrebel-plugin:1.1.10'\n        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.3.4.RELEASE'\n        classpath 'gradle.plugin.com.hierynomus.gradle.plugins:license-gradle-plugin:0.15.0'\n        classpath 'org.apache.openjpa:openjpa:3.1.2' // when upgrading, also change OpenJPA version repeated in fineract-provider/build.gradle!\n        classpath 'com.radcortez.gradle:openjpa-gradle-plugin:3.1.0'\n        classpath 'org.nosphere.apache:creadur-rat-gradle:0.7.0'\n        classpath \"gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.1\"\n        classpath \"gradle.plugin.com.github.andygoossens:gradle-modernizer-plugin:1.3.0\"\n        classpath \"gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.2.3\"\n        classpath \"net.ltgt.gradle:gradle-errorprone-plugin:1.2.1\"\n        classpath \"io.swagger.core.v3:swagger-gradle-plugin:2.1.5\"\n        classpath \"gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:2.18.2\"\n    }\n\n... are considered deprecated Gradle style (will probably not be supported in Gradle 7).", "author": "vidakovic", "createdAt": "2020-10-14T11:47:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NzIzMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDY3NzQzNw==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504677437", "bodyText": "I've added \"apply false\" in the plugin section; that way we are sure that those plugins are not activated globally (with potential side effects). FYI", "author": "vidakovic", "createdAt": "2020-10-14T13:29:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NzIzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NzY0Ng==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504597646", "bodyText": "It's going to be pretty big list to have all dependencies in a single list covering all possible future subprojects. Is there any way to make these lists subproject-specific, and only keep any common dependencies here?", "author": "ptuomola", "createdAt": "2020-10-14T11:19:33Z", "path": "build.gradle", "diffHunk": "@@ -63,14 +74,136 @@ allprojects  {\n     }\n \n     apply plugin: 'io.spring.dependency-management'\n-    apply plugin: \"com.diffplug.spotless\"\n+    apply plugin: 'com.diffplug.spotless'\n+    apply plugin: 'com.github.hierynomus.license'\n+    apply plugin: 'org.nosphere.apache.rat'\n+\n+    // Configuration for the dependency management plugin\n+    // https://github.com/spring-gradle-plugins/dependency-management-plugin\n+    dependencyManagement {\n+        imports {\n+            mavenBom 'org.springframework:spring-framework-bom:5.2.9.RELEASE'\n+        }\n+\n+        dependencies {\n+            // We use fixed versions, instead of inheriting them from the Spring BOM, to be able to be on more recent ones.\n+            // We do not use :+ to get the latest available version available on Maven Central, as that could suddenly break things.\n+            // We use the Renovate Bot to automatically propose Pull Requests (PRs) when upgrades for all of these versions are available.\n+\n+            dependency 'org.springframework.security.oauth:spring-security-oauth2:2.5.0.RELEASE'\n+            dependency 'org.apache.openjpa:openjpa:3.1.2' // when upgrading, also change OpenJPA version repeated above in buildscript!\n+            dependency 'com.squareup.retrofit:retrofit:1.9.0'\n+            dependency 'com.squareup.okhttp:okhttp:2.7.5'\n+            dependency 'com.squareup.okhttp:okhttp-urlconnection:2.7.5'\n+            dependency 'com.google.guava:guava:29.0-jre'\n+            dependency 'com.google.code.gson:gson:2.8.6'\n+            dependency 'org.apache.commons:commons-email:1.5'\n+            dependency 'commons-io:commons-io:2.8.0'\n+            dependency 'org.drizzle.jdbc:drizzle-jdbc:1.4'\n+            dependency 'com.github.librepdf:openpdf:1.3.22'\n+            dependency 'org.mnode.ical4j:ical4j:3.0.20'\n+            dependency 'org.quartz-scheduler:quartz:2.3.2'\n+            dependency 'com.amazonaws:aws-java-sdk-s3:1.11.874'\n+            dependency 'org.ehcache:ehcache:3.9.0'\n+            dependency 'com.github.spullara.mustache.java:compiler:0.9.6'\n+            dependency 'com.jayway.jsonpath:json-path:2.4.0'\n+            dependency 'org.apache.tika:tika-core:1.24.1'\n+            dependency 'org.apache.httpcomponents:httpclient:4.5.13'\n+            dependency 'io.swagger.core.v3:swagger-annotations:2.1.5'\n+            dependency 'jakarta.management.j2ee:jakarta.management.j2ee-api:1.1.4'\n+            dependency 'jakarta.jms:jakarta.jms-api:2.0.3'\n+            dependency 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'\n+            dependency 'jakarta.validation:jakarta.validation-api:3.0.0'\n+            dependency 'org.apache.activemq:activemq-broker:5.16.0'\n+            dependency 'org.apache.bval:org.apache.bval.bundle:2.0.4'\n+            dependency 'org.mockito:mockito-core:3.5.13'\n+            dependency 'org.mockito:mockito-junit-jupiter:3.5.13'\n+            dependency 'io.github.classgraph:classgraph:4.8.90'\n+            dependency 'org.awaitility:awaitility:4.0.3'\n+            dependency 'com.github.spotbugs:spotbugs-annotations:4.1.3'\n+            dependency 'javax.cache:cache-api:1.1.1'\n+            dependency 'org.mock-server:mockserver-junit-jupiter:5.11.1'\n+            dependency 'org.webjars.npm:swagger-ui-dist:3.35.1'\n+            dependency 'org.webjars:webjars-locator-core:0.46'\n+\n+            // fineract client dependencies\n+            dependency \"com.squareup.retrofit2:retrofit:$retrofitVersion\"", "originalCommit": "a0e45730c3b0ed5084322994c91fcf6e4e018b4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwODczNQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504608735", "bodyText": "Yes, use BOMs. I went through that phase with my old projects already. Switching to BOMs makes life so much easier and ensures that mechanics (e. g. Spring - Spring Boot - Spring Cloud) are working well together. Nowadays a handful of BOMs cover 99.9% of all dependencies that you might ever use. And they are really up to date, even for the transitive dependencies. I used to have a weekly task that would list me everything that is new and then I would update that manually. Not worth it, BOMs are your friends.", "author": "vidakovic", "createdAt": "2020-10-14T11:41:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5NzY0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMTE1Mg==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504601152", "bodyText": "These files look like boilerplate... have we modified them? If not, is there a possibility to have them as dependency we download rather than something we check into git?", "author": "ptuomola", "createdAt": "2020-10-14T11:26:34Z", "path": "fineract-client/src/main/templates/java/retrofit2/ApiClient.mustache", "diffHunk": "@@ -0,0 +1,468 @@\n+{{>licenseInfo}}\n+package {{invokerPackage}};", "originalCommit": "a0e45730c3b0ed5084322994c91fcf6e4e018b4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwNjc5OQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r504606799", "bodyText": "We could leave them out; the templates are already available as a dependency... but: I thought we want at least the license info included and this is the only way to do it. And in the current upstream client generation there are also a handful of templates tweaking things.\nFor me both approaches are OK; if we just use the dependencies then one thing less to maintain.", "author": "vidakovic", "createdAt": "2020-10-14T11:37:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMTE1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4NzQ0MQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505487441", "bodyText": "If it's just for the license headers, then yes I would remove this, to reduce ma maintenance. If we need to improve or fix things, then we should, ideally, contribute that upstream... Remove?", "author": "vorburger", "createdAt": "2020-10-15T12:06:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYwMTE1Mg=="}], "type": "inlineReview"}, {"oid": "7ed61809ce458e03fa81b111ffb56ba4f4883b36", "url": "https://github.com/apache/fineract/commit/7ed61809ce458e03fa81b111ffb56ba4f4883b36", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-14T13:36:53Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTczNg==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505151736", "bodyText": "As part of this refactoring, we seem to have lost this ErrorProne configuration. At least I now get 20 pages of errorprone warnings about all these things that used to be disabled...", "author": "ptuomola", "createdAt": "2020-10-15T04:06:11Z", "path": "fineract-provider/build.gradle", "diffHunk": "@@ -302,140 +125,6 @@ configurations {\n     runtime\n }\n \n-tasks.withType(JavaCompile) {\n-    options.compilerArgs += [\n-        \"-Xlint:unchecked\",\n-        \"-Xlint:cast\",\n-        \"-Xlint:auxiliaryclass\",\n-        \"-Xlint:deprecation\",\n-        \"-Xlint:dep-ann\",\n-        \"-Xlint:divzero\",\n-        \"-Xlint:empty\",\n-        \"-Xlint:exports\",\n-        \"-Xlint:fallthrough\",\n-        \"-Xlint:finally\",\n-        \"-Xlint:module\",\n-        \"-Xlint:opens\",\n-        \"-Xlint:options\",\n-        \"-Xlint:overloads\",\n-        \"-Xlint:overrides\",\n-        \"-Xlint:path\",\n-        \"-Xlint:processing\",\n-        \"-Xlint:removal\",\n-        \"-Xlint:requires-automatic\",\n-        \"-Xlint:requires-transitive-automatic\",\n-        \"-Xlint:try\",\n-        \"-Xlint:varargs\",\n-        \"-Xlint:preview\",\n-        \"-Xlint:static\",\n-        \"-Werror\"\n-    ]\n-    // TODO FINERACT-959 (gradually) enable -Xlint:all (see \"javac -help -X\")\n-\n-    options.deprecation = true\n-    options.errorprone {\n-        disableWarningsInGeneratedCode = true\n-        //Todo Remove necessary checks from this list\n-        disable(\n-                \"UnusedVariable\",", "originalCommit": "7ed61809ce458e03fa81b111ffb56ba4f4883b36", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQzMjE1NA==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505432154", "bodyText": "Thanks for catching that one... will fix that.", "author": "vidakovic", "createdAt": "2020-10-15T10:24:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTczNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ0MDAzMw==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505440033", "bodyText": "@ptuomola Found and fixed it... I was a bit too eager when I moved the Java compiler configuration to the root build.gradle. I verified locally, no more Errorprone warnings.", "author": "vidakovic", "createdAt": "2020-10-15T10:38:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1MTczNg=="}], "type": "inlineReview"}, {"oid": "08a8e9cde52752294d473637bf03565446f8516c", "url": "https://github.com/apache/fineract/commit/08a8e9cde52752294d473637bf03565446f8516c", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-15T10:35:37Z", "type": "forcePushed"}, {"oid": "1b7f1261279c4e0bbf6301523b20bd9a834716f8", "url": "https://github.com/apache/fineract/commit/1b7f1261279c4e0bbf6301523b20bd9a834716f8", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-15T10:41:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4ODA1Ng==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505488056", "bodyText": "How does Travis cover for the client now? Just curious.", "author": "vorburger", "createdAt": "2020-10-15T12:07:49Z", "path": ".travis.yml", "diffHunk": "@@ -72,6 +72,6 @@ script:\n # using \"&&\" instead of several \"-\" means that integrationTest does not run if test fails,\n # and Docker test does not run if integration test fails, which makes PR failure easier to understand.\n # @see https://docs.travis-ci.com/user/job-lifecycle/#customizing-the-build-phase\n-  - ./gradlew --console=plain -PautomatedBuild=true licenseMain licenseTest licenseIntegrationTest check  &&  ./gradlew --console=plain -PautomatedBuild=true integrationTest --fail-fast  &&  sudo service mysql stop  &&  docker-compose build  &&  docker-compose up -d  &&  sleep 60s  && curl -f -k --retry 5 --retry-connrefused --connect-timeout 30 --retry-delay 30 https://localhost:8443/fineract-provider/actuator/health  &&  (( $(curl -f -k --retry 5 --retry-connrefused --connect-timeout 30 --retry-delay 30 https://localhost:8443/fineract-provider/actuator/info | wc --chars) > 100 )) && ./gradlew generateSwaggerCode && cd fineract-provider/build/swagger-code-fineract && mvn test\n+  - ./gradlew --console=plain -PautomatedBuild=true licenseMain licenseTest licenseIntegrationTest check  &&  ./gradlew --console=plain -PautomatedBuild=true integrationTest --fail-fast  &&  sudo service mysql stop  &&  docker-compose build  &&  docker-compose up -d  &&  sleep 60s  && curl -f -k --retry 5 --retry-connrefused --connect-timeout 30 --retry-delay 30 https://localhost:8443/fineract-provider/actuator/health  &&  (( $(curl -f -k --retry 5 --retry-connrefused --connect-timeout 30 --retry-delay 30 https://localhost:8443/fineract-provider/actuator/info | wc --chars) > 100 ))", "originalCommit": "1b7f1261279c4e0bbf6301523b20bd9a834716f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwNDM5Mw==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505504393", "bodyText": "The modified templates only contain additional license headers (thought this was a requirement). If that doesn't matter we can leave out, easy. Just let me know what how you decide.", "author": "vidakovic", "createdAt": "2020-10-15T12:34:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4ODA1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjkzODM2NQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r506938365", "bodyText": "@vidakovic wait, what does this Q have to do with the (now removed) license headers? I may be missing something. What I was asking about here is why we're removing ./gradlew generateSwaggerCode from Travis.. I've just pulled this PR and tried building it locally, and noticed that Gradle task doesn't seem to exist anymore now, so.. do we not need to run this on Travis anymore now, because... Swagger code generation now runs as part of the multi module build in fineract-client?", "author": "vorburger", "createdAt": "2020-10-17T12:28:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4ODA1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4OTI3Nw==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505489277", "bodyText": "This seems curious, to me.. isn't this RUNTIME related, not BUILD time? Why is e.g. okhttp required to generate code? There's probably a good reason. But we didn't seem to have it before, so I thought I could ask.", "author": "vorburger", "createdAt": "2020-10-15T12:09:56Z", "path": "build.gradle", "diffHunk": "@@ -20,6 +20,16 @@\n buildscript {\n     ext {\n         jacocoVersion = '0.8.5'\n+        retrofitVersion = '2.9.0'\n+        okhttpVersion = '4.7.2'\n+        oltuVersion = '1.0.1'", "originalCommit": "1b7f1261279c4e0bbf6301523b20bd9a834716f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwODAzNQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505508035", "bodyText": "OKHttp doesn't generate anything, but we are still building the client JAR... so unless I'm missing something here seems to be normal to me...\nBefore it was not defined in Fineract's dependency management section, because the build was driven by a totally independent - single project - Maven pom.xml that had no ties to the fineract project setup (in terms of dependencies).\nThese dependencies are just a consequence of having fineract-client as a module.", "author": "vidakovic", "createdAt": "2020-10-15T12:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4OTI3Nw=="}], "type": "inlineReview"}, {"oid": "6fad50ef27f372840f2ceb29f6fb08a3acb8d92c", "url": "https://github.com/apache/fineract/commit/6fad50ef27f372840f2ceb29f6fb08a3acb8d92c", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-15T13:52:00Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MDc5Nw==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505780797", "bodyText": "Hmm... are we changing the license that is on gradlew.bat? Surely we should retain the existing license that it is provided with", "author": "ptuomola", "createdAt": "2020-10-15T19:15:31Z", "path": "gradlew.bat", "diffHunk": "@@ -1,3 +1,22 @@\n+@REM\r\n+@REM Licensed to the Apache Software Foundation (ASF) under one\r\n+@REM or more contributor license agreements. See the NOTICE file\r", "originalCommit": "6fad50ef27f372840f2ceb29f6fb08a3acb8d92c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NzI5MQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505877291", "bodyText": "That one was not intended... have to adjust the license excludes... fixing.", "author": "vidakovic", "createdAt": "2020-10-15T21:39:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MDc5Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NzYwMg==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r505887602", "bodyText": "Yup, as expected was the license plugin configuration that just included a bit too much (**/*.bat). Fixed.", "author": "vidakovic", "createdAt": "2020-10-15T21:56:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc4MDc5Nw=="}], "type": "inlineReview"}, {"oid": "9a58ac211cbe41755618f51a84c43280e0def66b", "url": "https://github.com/apache/fineract/commit/9a58ac211cbe41755618f51a84c43280e0def66b", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-15T21:53:25Z", "type": "forcePushed"}, {"oid": "8db055620880be1742f92888b09c563bfaf0f941", "url": "https://github.com/apache/fineract/commit/8db055620880be1742f92888b09c563bfaf0f941", "message": "Remove OpenAPI templates", "committedDate": "2020-10-16T09:52:42Z", "type": "forcePushed"}, {"oid": "517e0247c855dea6cdc3b46fe2c93230cc121ef9", "url": "https://github.com/apache/fineract/commit/517e0247c855dea6cdc3b46fe2c93230cc121ef9", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-16T09:54:45Z", "type": "forcePushed"}, {"oid": "c92ac8903f043ec3968ba3c93fe5b796ccfbf1f2", "url": "https://github.com/apache/fineract/commit/c92ac8903f043ec3968ba3c93fe5b796ccfbf1f2", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-17T12:52:20Z", "type": "commit"}, {"oid": "c92ac8903f043ec3968ba3c93fe5b796ccfbf1f2", "url": "https://github.com/apache/fineract/commit/c92ac8903f043ec3968ba3c93fe5b796ccfbf1f2", "message": "FINERACT-1189: fineract client as a separate module", "committedDate": "2020-10-17T12:52:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTI4NQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r506941285", "bodyText": "Not sure why this is suddenly needed here, and what it has to do with FINERACT-1189, but doesn't really hurt much either, not a reason to request removing it. I do expect that likely will be a small PITA for anyone ever making changes to this file again - because it's exported from Eclipse, not manually edited, and when Eclipse rewrites it, it will most likely loose this ASL header again, so whoever makes such changes will have to manually put it back (if we're enforcing this now, else we'll just loose it again sooner or later).", "author": "vorburger", "createdAt": "2020-10-17T13:03:57Z", "path": "config/fineractdev-cleanup.xml", "diffHunk": "@@ -1,4 +1,24 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--", "originalCommit": "c92ac8903f043ec3968ba3c93fe5b796ccfbf1f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTQyMg==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r506941422", "bodyText": "FYI we have FINERACT-1102 about that - do you want to \"take\" it and assign it to yourself?", "author": "vorburger", "createdAt": "2020-10-17T13:05:05Z", "path": "fineract-client/build.gradle", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+description = 'Fineract Client'\n+\n+ext['swaggerFile'] = \"$rootDir/fineract-provider/build/classes/java/main/static/swagger-ui/fineract.yaml\".toString()\n+\n+apply plugin: 'org.openapi.generator'\n+\n+apply from: 'dependencies.gradle'\n+\n+// TODO: @vidakovic we should publish this lib to Maven Central; do in separate PR", "originalCommit": "c92ac8903f043ec3968ba3c93fe5b796ccfbf1f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2NzgxNg==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r506967816", "bodyText": "On it.", "author": "vidakovic", "createdAt": "2020-10-17T17:58:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTY2Mw==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r506941663", "bodyText": "IMHO much more interesting and directly useful than Go, Ruby, Swift would be a TS (better; or JS) one.. UIs could use!", "author": "vorburger", "createdAt": "2020-10-17T13:08:16Z", "path": "fineract-client/build.gradle", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+description = 'Fineract Client'\n+\n+ext['swaggerFile'] = \"$rootDir/fineract-provider/build/classes/java/main/static/swagger-ui/fineract.yaml\".toString()\n+\n+apply plugin: 'org.openapi.generator'\n+\n+apply from: 'dependencies.gradle'\n+\n+// TODO: @vidakovic we should publish this lib to Maven Central; do in separate PR\n+\n+openApiMeta {\n+    generatorName = 'Fineract'\n+    packageName = 'org.apache.fineract.client'\n+    outputFolder = \"$buildDir/meta\".toString()\n+}\n+\n+openApiValidate {\n+    inputSpec = \"$swaggerFile\"\n+    recommend = true\n+}\n+\n+task buildJavaSdk(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){\n+    generatorName = 'java'\n+    verbose = false\n+    validateSpec = false\n+    skipValidateSpec = true\n+    inputSpec = \"$swaggerFile\"\n+    outputDir = \"$buildDir/generated/java\".toString()\n+    groupId = 'org.apache.fineract'\n+    apiPackage = 'org.apache.fineract.client.services'\n+    invokerPackage = 'org.apache.fineract.client'\n+    modelPackage = 'org.apache.fineract.client.models'\n+    configOptions = [\n+        dateLibrary: 'java8',\n+        useRxJava2: 'true',\n+        library: 'retrofit2',\n+        hideGenerationTimestamp: 'true',\n+    ]\n+    generateModelTests = false\n+    generateApiTests = false\n+    // trick to make sure fineract.yaml is generated first\n+    dependsOn = [\n+        ':fineract-provider:compileJava'\n+    ]\n+    finalizedBy = [licenseFormat]\n+}\n+\n+// TODO: @vidakovic we could provide even more client libs in different languages (Go, Ruby, Swift etc.)", "originalCommit": "c92ac8903f043ec3968ba3c93fe5b796ccfbf1f2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0ODI5Ng==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r506948296", "bodyText": "see FINERACT-1210", "author": "vorburger", "createdAt": "2020-10-17T14:23:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MTY2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0NTQzMQ==", "url": "https://github.com/apache/fineract/pull/1402#discussion_r506945431", "bodyText": "FTR: we're not actually remove RAT (or hierynomus.license) here, as they were already copied to build.gradle in a previous PR, so this is just clean up. (@vidakovic perhaps in future build refactorings we can have the move more clearly in a single PR.)", "author": "vorburger", "createdAt": "2020-10-17T13:50:59Z", "path": "fineract-provider/build.gradle", "diffHunk": "@@ -18,15 +18,11 @@\n  */\n description = 'Fineract Provider'\n \n-apply plugin: \"org.nosphere.apache.rat\"", "originalCommit": "c92ac8903f043ec3968ba3c93fe5b796ccfbf1f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}