{"pr_number": 1235, "pr_title": "FINERACT-734 Creditbureau-Integration-phase3", "pr_createdAt": "2020-08-04T12:48:12Z", "pr_url": "https://github.com/apache/fineract/pull/1235", "timeline": [{"oid": "76c3b3f9905c9ec5f4a1746aac8ef7b1ad80a163", "url": "https://github.com/apache/fineract/commit/76c3b3f9905c9ec5f4a1746aac8ef7b1ad80a163", "message": "token and get_creditreport module completed", "committedDate": "2020-08-05T09:02:21Z", "type": "forcePushed"}, {"oid": "0430d46c93b914c2d4c62aa528d497291c25eaa4", "url": "https://github.com/apache/fineract/commit/0430d46c93b914c2d4c62aa528d497291c25eaa4", "message": "token and get_creditreport module completed", "committedDate": "2020-08-05T09:52:44Z", "type": "forcePushed"}, {"oid": "2df8e7ea10d63c056dc6707ec53aa13f672094a0", "url": "https://github.com/apache/fineract/commit/2df8e7ea10d63c056dc6707ec53aa13f672094a0", "message": "token and get_creditreport module completed", "committedDate": "2020-08-09T00:44:02Z", "type": "forcePushed"}, {"oid": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "url": "https://github.com/apache/fineract/commit/59c95b91ad70a18fcf86856036298ff9cef3dee0", "message": "token and get_creditreport module completed", "committedDate": "2020-08-09T13:18:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5MzczNw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468293737", "bodyText": "change the datatypes to actual datatypes", "author": "nikpawar89", "createdAt": "2020-08-11T02:41:55Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/data/CreditReportData.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.data;\n+\n+import java.io.Serializable;\n+\n+public final class CreditReportData implements Serializable {\n+\n+    @SuppressWarnings(\"unused\")\n+    private final Object creditScore;", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2Njk3Ng==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474866976", "bodyText": "comment has been addressed.", "author": "rrpawar96", "createdAt": "2020-08-21T18:45:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5MzczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NDAyOA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468294028", "bodyText": "why String is used instead of date.", "author": "nikpawar89", "createdAt": "2020-08-11T02:43:03Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/domain/CreditBureauToken.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.apache.fineract.infrastructure.creditbureau.domain;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.domain.AbstractPersistableCustom;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Entity\n+@Table(name = \"m_creditbureau_token\")\n+public class CreditBureauToken extends AbstractPersistableCustom {\n+\n+    @Column(name = \"username\")\n+    private String userName;\n+\n+    @Column(name = \"token\")\n+    private String access_token;\n+\n+    @Column(name = \"token_type\")\n+    private String token_type;\n+\n+    @Column(name = \"expires_in\")\n+    private String expires_in;\n+\n+    @Column(name = \"issued\")\n+    private String issued;\n+\n+    @Column(name = \"expires\")", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzA3Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474867077", "bodyText": "comment has been addressed.", "author": "rrpawar96", "createdAt": "2020-08-21T18:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NDAyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NTk1Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468295957", "bodyText": "don't hard code time zones", "author": "nikpawar89", "createdAt": "2020-08-11T02:50:17Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CreditReportData retrieveAllSearchReport(final String searchId) {\n+        String result = null;\n+        Long uniqueID = 0L;\n+        try {\n+            this.context.authenticatedUser();\n+\n+            final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+            String userName = credittokendata.getUserName();\n+            String password = credittokendata.getPassword();\n+            String subscriptionId = credittokendata.getSubscriptionId();\n+            String subscriptionKey = credittokendata.getSubscriptionKey();\n+            String tokenDate;\n+\n+            CreditBureauToken creditbureautoken = this.tokenRepository.getToken();\n+            LOG.info(\"credit bureau token : {} \", creditbureautoken);\n+\n+            // check the expiry date of the previous token.\n+            if (creditbureautoken != null) {\n+                try {\n+                    Date current = new Date();\n+\n+                    String getDate = creditbureautoken.getTokenExpiryDate();\n+                    DateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);\n+                    Date getExpiryDate = dateformat.parse(getDate);\n+                    LOG.info(\"current date : {} \", current);\n+                    LOG.info(\"getExpiryDate : {} \", getExpiryDate);\n+\n+                    ZoneId zid = ZoneId.of(\"Asia/Rangoon\");", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzEzMA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474867130", "bodyText": "comment has been addressed", "author": "rrpawar96", "createdAt": "2020-08-21T18:46:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NTk1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NjE3Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468296177", "bodyText": "change data type to Date and come up with better way to compare dates", "author": "nikpawar89", "createdAt": "2020-08-11T02:51:07Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CreditReportData retrieveAllSearchReport(final String searchId) {\n+        String result = null;\n+        Long uniqueID = 0L;\n+        try {\n+            this.context.authenticatedUser();\n+\n+            final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+            String userName = credittokendata.getUserName();\n+            String password = credittokendata.getPassword();\n+            String subscriptionId = credittokendata.getSubscriptionId();\n+            String subscriptionKey = credittokendata.getSubscriptionKey();\n+            String tokenDate;\n+\n+            CreditBureauToken creditbureautoken = this.tokenRepository.getToken();\n+            LOG.info(\"credit bureau token : {} \", creditbureautoken);\n+\n+            // check the expiry date of the previous token.\n+            if (creditbureautoken != null) {\n+                try {\n+                    Date current = new Date();\n+\n+                    String getDate = creditbureautoken.getTokenExpiryDate();", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzE3OA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474867178", "bodyText": "comment has been addressed", "author": "rrpawar96", "createdAt": "2020-08-21T18:46:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NjE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NjUwMQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468296501", "bodyText": "Please be consistent with date data types, use either of date, LocalDate or LocalDateTime.", "author": "nikpawar89", "createdAt": "2020-08-11T02:52:22Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CreditReportData retrieveAllSearchReport(final String searchId) {\n+        String result = null;\n+        Long uniqueID = 0L;\n+        try {\n+            this.context.authenticatedUser();\n+\n+            final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+            String userName = credittokendata.getUserName();\n+            String password = credittokendata.getPassword();\n+            String subscriptionId = credittokendata.getSubscriptionId();\n+            String subscriptionKey = credittokendata.getSubscriptionKey();\n+            String tokenDate;\n+\n+            CreditBureauToken creditbureautoken = this.tokenRepository.getToken();\n+            LOG.info(\"credit bureau token : {} \", creditbureautoken);\n+\n+            // check the expiry date of the previous token.\n+            if (creditbureautoken != null) {\n+                try {\n+                    Date current = new Date();\n+\n+                    String getDate = creditbureautoken.getTokenExpiryDate();\n+                    DateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);\n+                    Date getExpiryDate = dateformat.parse(getDate);\n+                    LOG.info(\"current date : {} \", current);\n+                    LOG.info(\"getExpiryDate : {} \", getExpiryDate);\n+\n+                    ZoneId zid = ZoneId.of(\"Asia/Rangoon\");\n+                    final LocalDate date = LocalDate.now(zid);", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzIzMg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474867232", "bodyText": "comment has been addressed", "author": "rrpawar96", "createdAt": "2020-08-21T18:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NjUwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5Njg2MQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468296861", "bodyText": "encapsulate http connection into method, so that it can be resued.", "author": "nikpawar89", "createdAt": "2020-08-11T02:53:48Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CreditReportData retrieveAllSearchReport(final String searchId) {\n+        String result = null;\n+        Long uniqueID = 0L;\n+        try {\n+            this.context.authenticatedUser();\n+\n+            final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+            String userName = credittokendata.getUserName();\n+            String password = credittokendata.getPassword();\n+            String subscriptionId = credittokendata.getSubscriptionId();\n+            String subscriptionKey = credittokendata.getSubscriptionKey();\n+            String tokenDate;\n+\n+            CreditBureauToken creditbureautoken = this.tokenRepository.getToken();\n+            LOG.info(\"credit bureau token : {} \", creditbureautoken);\n+\n+            // check the expiry date of the previous token.\n+            if (creditbureautoken != null) {\n+                try {\n+                    Date current = new Date();\n+\n+                    String getDate = creditbureautoken.getTokenExpiryDate();\n+                    DateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);\n+                    Date getExpiryDate = dateformat.parse(getDate);\n+                    LOG.info(\"current date : {} \", current);\n+                    LOG.info(\"getExpiryDate : {} \", getExpiryDate);\n+\n+                    ZoneId zid = ZoneId.of(\"Asia/Rangoon\");\n+                    final LocalDate date = LocalDate.now(zid);\n+                    LOG.info(\"local date : {} \", date);\n+\n+                    if (getExpiryDate.before(current)) {\n+                        LOG.info(\"The token is expired\");\n+                        final CreditBureauToken credittoken = this.tokenRepository.getToken();\n+                        if (credittoken != null) {\n+\n+                            this.tokenRepository.delete(credittoken);\n+                            creditbureautoken = null;\n+                        }\n+\n+                    }\n+\n+                } catch (ParseException Ex) {\n+                    LOG.error(\"Error occured.\", Ex);\n+                }\n+            }\n+\n+            // if token is not available or previous token is expired then create a new token\n+            if (creditbureautoken == null) {\n+\n+                LOG.info(\"-----creating new token-----\");\n+                final String POST_PARAMS = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName\n+                        + \"&\\r\\n\" + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL obj = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                String readLine = null;\n+\n+                HttpURLConnection postConnection = (HttpURLConnection) obj.openConnection();", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzMwMQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474867301", "bodyText": "comment has been addressed", "author": "rrpawar96", "createdAt": "2020-08-21T18:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5Njg2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NzA3NA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468297074", "bodyText": "refactor http connection into method.", "author": "nikpawar89", "createdAt": "2020-08-11T02:54:21Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CreditReportData retrieveAllSearchReport(final String searchId) {\n+        String result = null;\n+        Long uniqueID = 0L;\n+        try {\n+            this.context.authenticatedUser();\n+\n+            final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+            String userName = credittokendata.getUserName();\n+            String password = credittokendata.getPassword();\n+            String subscriptionId = credittokendata.getSubscriptionId();\n+            String subscriptionKey = credittokendata.getSubscriptionKey();\n+            String tokenDate;\n+\n+            CreditBureauToken creditbureautoken = this.tokenRepository.getToken();\n+            LOG.info(\"credit bureau token : {} \", creditbureautoken);\n+\n+            // check the expiry date of the previous token.\n+            if (creditbureautoken != null) {\n+                try {\n+                    Date current = new Date();\n+\n+                    String getDate = creditbureautoken.getTokenExpiryDate();\n+                    DateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);\n+                    Date getExpiryDate = dateformat.parse(getDate);\n+                    LOG.info(\"current date : {} \", current);\n+                    LOG.info(\"getExpiryDate : {} \", getExpiryDate);\n+\n+                    ZoneId zid = ZoneId.of(\"Asia/Rangoon\");\n+                    final LocalDate date = LocalDate.now(zid);\n+                    LOG.info(\"local date : {} \", date);\n+\n+                    if (getExpiryDate.before(current)) {\n+                        LOG.info(\"The token is expired\");\n+                        final CreditBureauToken credittoken = this.tokenRepository.getToken();\n+                        if (credittoken != null) {\n+\n+                            this.tokenRepository.delete(credittoken);\n+                            creditbureautoken = null;\n+                        }\n+\n+                    }\n+\n+                } catch (ParseException Ex) {\n+                    LOG.error(\"Error occured.\", Ex);\n+                }\n+            }\n+\n+            // if token is not available or previous token is expired then create a new token\n+            if (creditbureautoken == null) {\n+\n+                LOG.info(\"-----creating new token-----\");\n+                final String POST_PARAMS = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName\n+                        + \"&\\r\\n\" + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL obj = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                String readLine = null;\n+\n+                HttpURLConnection postConnection = (HttpURLConnection) obj.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+                postConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+                postConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+                postConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+                postConnection.setDoOutput(true);\n+\n+                OutputStream os = postConnection.getOutputStream();\n+                os.write(POST_PARAMS.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+\n+                int responseCode = postConnection.getResponseCode();\n+\n+                String ResponseMessage = postConnection.getResponseMessage();\n+\n+                if (responseCode == HttpURLConnection.HTTP_OK) {\n+                    BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream(), StandardCharsets.UTF_8));\n+                    StringBuilder response = new StringBuilder();\n+                    while ((readLine = in.readLine()) != null) {\n+                        response.append(readLine);\n+                    }\n+                    in.close();\n+\n+                    result = response.toString();\n+\n+                    final CommandWrapper wrapper = new CommandWrapperBuilder().withJson(result).build();\n+                    final String json = wrapper.getJson();\n+                    result = null;\n+                    JsonCommand apicommand = null;\n+                    boolean isApprovedByChecker = false;\n+                    final JsonElement parsedCommand = this.fromApiJsonHelper.parse(json);\n+\n+                    apicommand = JsonCommand.from(json, parsedCommand, this.fromApiJsonHelper, wrapper.getEntityName(),\n+                            wrapper.getEntityId(), wrapper.getSubentityId(), wrapper.getGroupId(), wrapper.getClientId(),\n+                            wrapper.getLoanId(), wrapper.getSavingsId(), wrapper.getTransactionId(), wrapper.getHref(),\n+                            wrapper.getProductId(), wrapper.getCreditBureauId(), wrapper.getOrganisationCreditBureauId());\n+\n+                    this.fromApiJsonDeserializer.validateForCreate(apicommand.json());\n+\n+                    final CreditBureauToken generatedtoken = CreditBureauToken.fromJson(apicommand);\n+\n+                    this.tokenRepository.save(generatedtoken);\n+\n+                } else {\n+                    LOG.info(\"Request is Invalid\");\n+\n+                }\n+            }\n+\n+            // Search Methods\n+            LOG.info(\"-----Search by NRC-----\");\n+            StringBuilder response = new StringBuilder();\n+            creditbureautoken = this.tokenRepository.getToken();\n+            String token = creditbureautoken.getCurrentToken();\n+\n+            final String POST_PARAMS = \"BODY=x-www-form-urlencoded&nrc=\" + searchId + \"&\";\n+\n+            URL obj = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + searchId);\n+            String readLine = null;\n+            LOG.info(\"POST_PARAMS : {} \", POST_PARAMS);\n+            LOG.info(\"obj : {} \", obj);\n+            LOG.info(\"subscriptionId : {} \", subscriptionId);\n+            LOG.info(\"subscriptionKey : {} \", subscriptionKey);\n+            LOG.info(\"token : {} \", token);\n+\n+            HttpURLConnection postConnection = (HttpURLConnection) obj.openConnection();", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzM1Mg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474867352", "bodyText": "comment has been addressed", "author": "rrpawar96", "createdAt": "2020-08-21T18:46:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NzA3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NzU4MA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468297580", "bodyText": "extract http connection code into method", "author": "nikpawar89", "createdAt": "2020-08-11T02:56:10Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauTokenWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonElement;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.commands.service.PortfolioCommandSourceWritePlatformService;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResultBuilder;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauTokenWritePlatformServiceImpl implements CreditBureauTokenWritePlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauTokenWritePlatformServiceImpl.class);\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final CreditBureauTokenRepository creditBureauTokenRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+    private final CreditBureauTokenReadPlatformService readPlatformServiceCreditBureauToken;\n+    private final PortfolioCommandSourceWritePlatformService commandsSourceWritePlatformService;\n+    private final CreditBureauToken creditBureauToken;\n+    private final TokenDataRepository tokendatRepository;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private static String tokenstr;\n+    private final JdbcTemplate jdbcTemplate;\n+\n+    @Autowired\n+    public CreditBureauTokenWritePlatformServiceImpl(final PlatformSecurityContext context,\n+            final CreditBureauTokenRepository creditBureauTokenRepository, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository, final TokenDataRepository tokendatRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer, final FromJsonHelper fromApiJsonHelper,\n+            final CreditBureauTokenReadPlatformService readPlatformServiceCreditBureauToken,\n+            final PortfolioCommandSourceWritePlatformService commandsSourceWritePlatformService, final CreditBureauToken creditBureauToken,\n+            final RoutingDataSource dataSource) {\n+        this.context = context;\n+        this.creditBureauTokenRepository = creditBureauTokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.tokenRepository = tokenRepository;\n+        this.tokendatRepository = tokendatRepository;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.readPlatformServiceCreditBureauToken = readPlatformServiceCreditBureauToken;\n+        this.commandsSourceWritePlatformService = commandsSourceWritePlatformService;\n+        this.creditBureauToken = creditBureauToken;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"credittoken\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CommandProcessingResult createCreditBureauToken(JsonCommand command) {\n+        try {\n+            this.context.authenticatedUser();\n+\n+            // fetch the token credentials for using it in header\n+            final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+\n+            String userName = credittokendata.getUserName();\n+            String password = credittokendata.getPassword();\n+            String subscriptionId = credittokendata.getSubscriptionId();\n+            String subscriptionKey = credittokendata.getSubscriptionKey();\n+\n+            final String POST_PARAMS = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName\n+                    + \"&\\r\\n\" + \"password=\" + password + \"&\\r\\n\";\n+\n+            URL obj = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+            String readLine = null;\n+\n+            HttpURLConnection postConnection = (HttpURLConnection) obj.openConnection();\n+            postConnection.setRequestMethod(\"POST\");", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzQ0OQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474867449", "bodyText": "comment has been addressed", "author": "rrpawar96", "createdAt": "2020-08-21T18:46:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NzU4MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MjM3NQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475152375", "bodyText": "i don't see a method.", "author": "nikpawar89", "createdAt": "2020-08-23T00:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5NzU4MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5Nzg1OA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468297858", "bodyText": "this data should not be given. Take this out", "author": "nikpawar89", "createdAt": "2020-08-11T02:57:12Z", "path": "fineract-provider/src/main/resources/sql/migrations/core_db/V273__oauth_changes.sql", "diffHunk": "@@ -59,3 +59,42 @@ CREATE TABLE `oauth_refresh_token` (\n )\n COLLATE='utf8mb4_general_ci'\n ENGINE=InnoDB;\n+\n+CREATE TABLE `m_creditbureau_tokendata` (\n+  `id` INT(128) NOT NULL AUTO_INCREMENT,\n+  `userNames` varchar(128) DEFAULT NULL,\n+  `password` varchar(128) DEFAULT NULL,\n+  `subscription_id` varchar(128) DEFAULT NULL,\n+  `subscription_key` varchar(128) DEFAULT NULL,\n+\n+  PRIMARY KEY (`id`)\n+)\n+COLLATE='utf8mb4_general_ci'\n+ENGINE=InnoDB;\n+\n+INSERT INTO `m_creditbureau_tokendata` (`id`, `userNames`, `password`, `subscription_id`, `subscription_key`) VALUES", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDg2NzUyOQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r474867529", "bodyText": "comment has been addressed", "author": "rrpawar96", "createdAt": "2020-08-21T18:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5Nzg1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5ODUxMw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468298513", "bodyText": "Come up with more generic design to store configurations of credit bureau, we can't have one table per credit bureau for storing configurations. You may have to refactor this token module.", "author": "nikpawar89", "createdAt": "2020-08-11T02:59:47Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/domain/CreditBureauTokenCredential.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.domain;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.domain.AbstractPersistableCustom;\n+\n+@Entity", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI5ODc0Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r468298747", "bodyText": "come up with more generic design to store configs.", "author": "nikpawar89", "createdAt": "2020-08-11T03:00:36Z", "path": "fineract-provider/src/main/resources/sql/migrations/core_db/V273__oauth_changes.sql", "diffHunk": "@@ -59,3 +59,42 @@ CREATE TABLE `oauth_refresh_token` (\n )\n COLLATE='utf8mb4_general_ci'\n ENGINE=InnoDB;\n+\n+CREATE TABLE `m_creditbureau_tokendata` (\n+  `id` INT(128) NOT NULL AUTO_INCREMENT,\n+  `userNames` varchar(128) DEFAULT NULL,\n+  `password` varchar(128) DEFAULT NULL,\n+  `subscription_id` varchar(128) DEFAULT NULL,\n+  `subscription_key` varchar(128) DEFAULT NULL,\n+\n+  PRIMARY KEY (`id`)\n+)\n+COLLATE='utf8mb4_general_ci'\n+ENGINE=InnoDB;\n+\n+INSERT INTO `m_creditbureau_tokendata` (`id`, `userNames`, `password`, `subscription_id`, `subscription_key`) VALUES\n+('1', 'demomfi1@gmail.com','Sampleuser123*' ,'317A1FF8-625D-41BA-BE0F-F8ED8A644A7C', 'cb225c15ff1742feab2f1fb444393ace'),\n+('2', 'demomfi2@gmail.com','Sampleuser123*' ,'B76FEFF5-5B42-4A36-AFDA-AB5C7398220C', '91ce69a972b14c7fab057788fe61ce8a'),\n+('3', 'demomfi3@gmail.com','Sampleuser123*' ,'31333A80-BDE7-43EE-B1FD-6699C518AF85', '86f4f58542554e0ba9a309003eadd1fc'),\n+('4', 'demomfi4@gmail.com','Sampleuser123*' ,'C929C107-E779-4233-8493-176CF6DEA251', '302ed3b928df43ccb0de97f008b07320');\n+\n+-- permissions added\n+\n+\n+INSERT INTO `m_permission` (`grouping`, `code`, `entity_name`, `action_name`, `can_maker_checker`) VALUES ('configuration', 'CREATE_CREDITBUREAUTOKEN', 'CREDITBUREAUTOKEN', 'CREATE', 0);\n+INSERT INTO `m_permission` (`grouping`, `code`, `entity_name`, `action_name`, `can_maker_checker`) VALUES ('configuration', 'CREATE_CREDITBUREAUTOKENDATA', 'CREDITBUREAUTOKENDATA', 'CREATE', 0);\n+\n+CREATE TABLE `m_creditbureau_token` (", "originalCommit": "59c95b91ad70a18fcf86856036298ff9cef3dee0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "4b23b921e64f38668861a2b5ca77174c96f8b467", "url": "https://github.com/apache/fineract/commit/4b23b921e64f38668861a2b5ca77174c96f8b467", "message": "token and get_creditreport module completed", "committedDate": "2020-08-11T06:48:23Z", "type": "forcePushed"}, {"oid": "261d516b6bf62d54f1d2444e2ce8dc906dde3a17", "url": "https://github.com/apache/fineract/commit/261d516b6bf62d54f1d2444e2ce8dc906dde3a17", "message": "token and get_creditreport module completed", "committedDate": "2020-08-21T18:39:46Z", "type": "forcePushed"}, {"oid": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "url": "https://github.com/apache/fineract/commit/e34b1d52b6156fd7b86e97ab7e33a973f401f560", "message": "token and get_creditreport module completed", "committedDate": "2020-08-21T21:39:42Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0OTgxMg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475149812", "bodyText": "mark private", "author": "nikpawar89", "createdAt": "2020-08-22T23:44:55Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxODM3Mw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492518373", "bodyText": "Kept it public to make it accessible for test case", "author": "rrpawar96", "createdAt": "2020-09-22T07:14:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0OTgxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0OTg2NA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475149864", "bodyText": "url should be part of configuration and should not be hard coded.", "author": "nikpawar89", "createdAt": "2020-08-22T23:45:38Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxODU1Mg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492518552", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-09-22T07:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0OTg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0OTkwNQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475149905", "bodyText": "same here", "author": "nikpawar89", "createdAt": "2020-08-22T23:46:23Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                readLine = null;\n+                postConnection = (HttpURLConnection) tokenurl.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+                // Search Methods\n+                LOG.info(\"-----Search by NRC-----\");\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcId + \"&\";\n+\n+                URL NrcURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + nrcId);", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxODkwOQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492518909", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-09-22T07:15:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0OTkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0OTkyNA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475149924", "bodyText": "here as well", "author": "nikpawar89", "createdAt": "2020-08-22T23:46:38Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                readLine = null;\n+                postConnection = (HttpURLConnection) tokenurl.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+                // Search Methods\n+                LOG.info(\"-----Search by NRC-----\");\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcId + \"&\";\n+\n+                URL NrcURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + nrcId);\n+                postConnection = (HttpURLConnection) NrcURL.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            else if (process.equals(\"CREDITREPORT\")) {\n+                LOG.info(\"-----Search by CREDIT_REPORT-----\");\n+                URL CreditReportURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Dashboard/GetCreditReport?uniqueId=\" + uniqueID);", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxODk3Mw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492518973", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-09-22T07:15:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE0OTkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDA0NA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475150044", "bodyText": "please keep the scope of variables as small as possible. Applies to all the variables below", "author": "nikpawar89", "createdAt": "2020-08-22T23:48:48Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxOTMyNg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492519326", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-09-22T07:16:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDExMQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475150111", "bodyText": "why do we need @CacheEvict", "author": "nikpawar89", "createdAt": "2020-08-22T23:49:39Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                readLine = null;\n+                postConnection = (HttpURLConnection) tokenurl.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+                // Search Methods\n+                LOG.info(\"-----Search by NRC-----\");\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcId + \"&\";\n+\n+                URL NrcURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + nrcId);\n+                postConnection = (HttpURLConnection) NrcURL.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            else if (process.equals(\"CREDITREPORT\")) {\n+                LOG.info(\"-----Search by CREDIT_REPORT-----\");\n+                URL CreditReportURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Dashboard/GetCreditReport?uniqueId=\" + uniqueID);\n+                postConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                postConnection.setRequestMethod(\"GET\");\n+\n+            }\n+\n+            // common set of headers\n+            postConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            postConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            postConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                postConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set of code only required for fetching uniqueID from Nrc fetched data (POST-SimpleSearch)\n+            if (process.equals(\"NRC\") || process.equals(\"token\")) {\n+                LOG.info(\"-----NRC & CREDITREPORT -----\");\n+                postConnection.setDoOutput(true);\n+                OutputStream os = postConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+\n+            }\n+\n+            // common part of code in http connection method\n+            int responseCode = postConnection.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+                BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream(), StandardCharsets.UTF_8));\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxOTY4Mw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492519683", "bodyText": "Removed CacheEvict", "author": "rrpawar96", "createdAt": "2020-09-22T07:16:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDExMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDI3Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475150277", "bodyText": "I liked this approach, its just that make process as parameter to this method.", "author": "nikpawar89", "createdAt": "2020-08-22T23:52:27Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDM1NQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475150355", "bodyText": "Try resources could be helpful here, please check out the java doc.", "author": "nikpawar89", "createdAt": "2020-08-22T23:53:36Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                readLine = null;\n+                postConnection = (HttpURLConnection) tokenurl.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+                // Search Methods\n+                LOG.info(\"-----Search by NRC-----\");\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcId + \"&\";\n+\n+                URL NrcURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + nrcId);\n+                postConnection = (HttpURLConnection) NrcURL.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            else if (process.equals(\"CREDITREPORT\")) {\n+                LOG.info(\"-----Search by CREDIT_REPORT-----\");\n+                URL CreditReportURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Dashboard/GetCreditReport?uniqueId=\" + uniqueID);\n+                postConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                postConnection.setRequestMethod(\"GET\");\n+\n+            }\n+\n+            // common set of headers\n+            postConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            postConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            postConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                postConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set of code only required for fetching uniqueID from Nrc fetched data (POST-SimpleSearch)\n+            if (process.equals(\"NRC\") || process.equals(\"token\")) {", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDg5OA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475150898", "bodyText": "keep it simple : SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss.SSS\");", "author": "nikpawar89", "createdAt": "2020-08-23T00:01:42Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                readLine = null;\n+                postConnection = (HttpURLConnection) tokenurl.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+                // Search Methods\n+                LOG.info(\"-----Search by NRC-----\");\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcId + \"&\";\n+\n+                URL NrcURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + nrcId);\n+                postConnection = (HttpURLConnection) NrcURL.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            else if (process.equals(\"CREDITREPORT\")) {\n+                LOG.info(\"-----Search by CREDIT_REPORT-----\");\n+                URL CreditReportURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Dashboard/GetCreditReport?uniqueId=\" + uniqueID);\n+                postConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                postConnection.setRequestMethod(\"GET\");\n+\n+            }\n+\n+            // common set of headers\n+            postConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            postConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            postConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                postConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set of code only required for fetching uniqueID from Nrc fetched data (POST-SimpleSearch)\n+            if (process.equals(\"NRC\") || process.equals(\"token\")) {\n+                LOG.info(\"-----NRC & CREDITREPORT -----\");\n+                postConnection.setDoOutput(true);\n+                OutputStream os = postConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+\n+            }\n+\n+            // common part of code in http connection method\n+            int responseCode = postConnection.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+                BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream(), StandardCharsets.UTF_8));\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CreditReportData retrieveAllSearchReport(final String searchId) {\n+        String Name = null;\n+        String Gender = null;\n+        nrcId = searchId;\n+        String Address = null;\n+\n+        this.context.authenticatedUser();\n+\n+        final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+\n+        if (credittokendata != null) {\n+            userName = credittokendata.getUserName();\n+            password = credittokendata.getPassword();\n+            subscriptionId = credittokendata.getSubscriptionId();\n+            subscriptionKey = credittokendata.getSubscriptionKey();\n+\n+            // validation required, incase when configuration is not stored in database while fetching data.\n+        } else {\n+\n+            String configJson = \"{ 'userName':'\" + userName + \"','password':'\" + password + \"','subscriptionId':'\" + subscriptionId\n+                    + \"','subscriptionKey':'\" + subscriptionKey + \"'}\";\n+\n+            this.fromApiJsonDeserializer.validateForUsingTokenConfig(configJson);\n+        }\n+\n+        CreditBureauToken creditbureautoken = this.tokenRepository.getToken();\n+        LOG.info(\"creditbureautoken : {} \", creditbureautoken);\n+\n+        // check the expiry date of the previous token.\n+        if (creditbureautoken != null) {\n+            Date current = new Date();\n+            Date getExpiryDate = creditbureautoken.getTokenExpiryDate();\n+\n+            LOG.info(\"current date : {} \", current);\n+            LOG.info(\"getExpiryDate : {} \", getExpiryDate);\n+\n+            if (getExpiryDate.before(current)) {\n+                LOG.info(\"The token is expired\");\n+                this.tokenRepository.delete(creditbureautoken);\n+                creditbureautoken = null;\n+            }\n+        }\n+        // storing token if it is valid token(not expired)\n+        if (creditbureautoken != null) {\n+            token = creditbureautoken.getCurrentToken();\n+        }\n+\n+        // if token is not available or previous token is expired then create a new token\n+        if (creditbureautoken == null) {\n+\n+            // using common http connection method for creating token\n+            process = \"token\";\n+            this.httpConnectionMethod();\n+\n+            JsonObject tokenObject = JsonParser.parseString(result).getAsJsonObject();\n+            String expiresextra = tokenObject.get(\".expires\").toString();\n+            String expires = expiresextra.substring(1, expiresextra.length() - 1);\n+            DateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUxOTc2Mg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492519762", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-09-22T07:17:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDk2Ng==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475150966", "bodyText": "SimpleDateFormat df = new SimpleDateFormat(\"dd-MM-yyyy HH:mm:ss.SSS\");", "author": "nikpawar89", "createdAt": "2020-08-23T00:02:26Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/domain/CreditBureauToken.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.apache.fineract.infrastructure.creditbureau.domain;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.domain.AbstractPersistableCustom;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Entity\n+@Table(name = \"m_creditbureau_token\")\n+public class CreditBureauToken extends AbstractPersistableCustom {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauToken.class);\n+\n+    @Column(name = \"username\")\n+    private String userName;\n+\n+    @Column(name = \"token\")\n+    private String accessToken;\n+\n+    @Column(name = \"token_type\")\n+    private String tokenType;\n+\n+    @Column(name = \"expires_in\")\n+    private String expiresIn;\n+\n+    @Column(name = \"issued\")\n+    private String issued;\n+\n+    @Column(name = \"expires\")\n+    private Date expires;\n+\n+    public CreditBureauToken(String userName, String accessToken, String tokenType, String expiresIn, String issued, Date expires) {\n+        this.userName = userName;\n+        this.accessToken = accessToken;\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issued = issued;\n+        this.expires = expires;\n+    }\n+\n+    public CreditBureauToken() {\n+        this.userName = null;\n+        this.accessToken = null;\n+        this.tokenType = null;\n+        this.expiresIn = null;\n+        this.issued = null;\n+        this.expires = null;\n+    }\n+\n+    public static CreditBureauToken fromJson(final JsonCommand command) {\n+        final String userName = command.stringValueOfParameterNamed(\"userName\");\n+        final String accessToken = command.stringValueOfParameterNamed(\"access_token\");\n+        final String tokenType = command.stringValueOfParameterNamed(\"token_type\");\n+        final String expiresIn = command.stringValueOfParameterNamed(\"expires_in\");\n+        final String issued = command.stringValueOfParameterNamed(\".issued\");\n+        final String expiry = command.stringValueOfParameterNamed(\".expires\");\n+\n+        LOG.info(\"Expiry {}\", expiry);\n+\n+        DateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMjE3OA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492522178", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-09-22T07:22:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MDk2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MTAwMw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475151003", "bodyText": "did you intend to add this File in commit?", "author": "nikpawar89", "createdAt": "2020-08-23T00:03:04Z", "path": "fineract-provider/config/swagger/fineract-input.yaml", "diffHunk": "@@ -0,0 +1,37 @@\n+openapi: 3.0.3", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMjYwMQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492522601", "bodyText": "No, So it has been removed.", "author": "rrpawar96", "createdAt": "2020-09-22T07:22:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MTAwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MTU4OQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475151589", "bodyText": "I think result should be the return type of this method.", "author": "nikpawar89", "createdAt": "2020-08-23T00:11:17Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                readLine = null;\n+                postConnection = (HttpURLConnection) tokenurl.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+                // Search Methods\n+                LOG.info(\"-----Search by NRC-----\");\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcId + \"&\";\n+\n+                URL NrcURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + nrcId);\n+                postConnection = (HttpURLConnection) NrcURL.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            else if (process.equals(\"CREDITREPORT\")) {\n+                LOG.info(\"-----Search by CREDIT_REPORT-----\");\n+                URL CreditReportURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Dashboard/GetCreditReport?uniqueId=\" + uniqueID);\n+                postConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                postConnection.setRequestMethod(\"GET\");\n+\n+            }\n+\n+            // common set of headers\n+            postConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            postConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            postConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                postConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set of code only required for fetching uniqueID from Nrc fetched data (POST-SimpleSearch)\n+            if (process.equals(\"NRC\") || process.equals(\"token\")) {\n+                LOG.info(\"-----NRC & CREDITREPORT -----\");\n+                postConnection.setDoOutput(true);\n+                OutputStream os = postConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+\n+            }\n+\n+            // common part of code in http connection method\n+            int responseCode = postConnection.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+                BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream(), StandardCharsets.UTF_8));\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUyMjY5NA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r492522694", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-09-22T07:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MTU4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MTY5MQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475151691", "bodyText": "Get result as return type of httpConnectionMethod() and validate if it is null.\nProcessing it directly is a potential NPE.", "author": "nikpawar89", "createdAt": "2020-08-23T00:12:51Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                readLine = null;\n+                postConnection = (HttpURLConnection) tokenurl.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+                // Search Methods\n+                LOG.info(\"-----Search by NRC-----\");\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcId + \"&\";\n+\n+                URL NrcURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + nrcId);\n+                postConnection = (HttpURLConnection) NrcURL.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            else if (process.equals(\"CREDITREPORT\")) {\n+                LOG.info(\"-----Search by CREDIT_REPORT-----\");\n+                URL CreditReportURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Dashboard/GetCreditReport?uniqueId=\" + uniqueID);\n+                postConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                postConnection.setRequestMethod(\"GET\");\n+\n+            }\n+\n+            // common set of headers\n+            postConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            postConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            postConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                postConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set of code only required for fetching uniqueID from Nrc fetched data (POST-SimpleSearch)\n+            if (process.equals(\"NRC\") || process.equals(\"token\")) {\n+                LOG.info(\"-----NRC & CREDITREPORT -----\");\n+                postConnection.setDoOutput(true);\n+                OutputStream os = postConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+\n+            }\n+\n+            // common part of code in http connection method\n+            int responseCode = postConnection.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+                BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream(), StandardCharsets.UTF_8));\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CreditReportData retrieveAllSearchReport(final String searchId) {\n+        String Name = null;\n+        String Gender = null;\n+        nrcId = searchId;\n+        String Address = null;\n+\n+        this.context.authenticatedUser();\n+\n+        final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+\n+        if (credittokendata != null) {\n+            userName = credittokendata.getUserName();\n+            password = credittokendata.getPassword();\n+            subscriptionId = credittokendata.getSubscriptionId();\n+            subscriptionKey = credittokendata.getSubscriptionKey();\n+\n+            // validation required, incase when configuration is not stored in database while fetching data.\n+        } else {\n+\n+            String configJson = \"{ 'userName':'\" + userName + \"','password':'\" + password + \"','subscriptionId':'\" + subscriptionId\n+                    + \"','subscriptionKey':'\" + subscriptionKey + \"'}\";\n+\n+            this.fromApiJsonDeserializer.validateForUsingTokenConfig(configJson);\n+        }\n+\n+        CreditBureauToken creditbureautoken = this.tokenRepository.getToken();\n+        LOG.info(\"creditbureautoken : {} \", creditbureautoken);\n+\n+        // check the expiry date of the previous token.\n+        if (creditbureautoken != null) {\n+            Date current = new Date();\n+            Date getExpiryDate = creditbureautoken.getTokenExpiryDate();\n+\n+            LOG.info(\"current date : {} \", current);\n+            LOG.info(\"getExpiryDate : {} \", getExpiryDate);\n+\n+            if (getExpiryDate.before(current)) {\n+                LOG.info(\"The token is expired\");\n+                this.tokenRepository.delete(creditbureautoken);\n+                creditbureautoken = null;\n+            }\n+        }\n+        // storing token if it is valid token(not expired)\n+        if (creditbureautoken != null) {\n+            token = creditbureautoken.getCurrentToken();\n+        }\n+\n+        // if token is not available or previous token is expired then create a new token\n+        if (creditbureautoken == null) {\n+\n+            // using common http connection method for creating token\n+            process = \"token\";\n+            this.httpConnectionMethod();\n+\n+            JsonObject tokenObject = JsonParser.parseString(result).getAsJsonObject();\n+            String expiresextra = tokenObject.get(\".expires\").toString();\n+            String expires = expiresextra.substring(1, expiresextra.length() - 1);\n+            DateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);\n+            try {\n+                Date getExpiryDate = dateformat.parse(expires);\n+                LOG.info(\"The expirydate {}\", getExpiryDate);\n+            } catch (ParseException Ex) {\n+                LOG.error(\"Error occured.\", Ex);\n+            }\n+\n+            // created token will be storing it into database\n+            final CommandWrapper wrapper = new CommandWrapperBuilder().withJson(result).build();\n+            final String json = wrapper.getJson();\n+            result = null;\n+            JsonCommand apicommand = null;\n+            boolean isApprovedByChecker = false;\n+            final JsonElement parsedCommand = this.fromApiJsonHelper.parse(json);\n+\n+            apicommand = JsonCommand.from(json, parsedCommand, this.fromApiJsonHelper, wrapper.getEntityName(), wrapper.getEntityId(),\n+                    wrapper.getSubentityId(), wrapper.getGroupId(), wrapper.getClientId(), wrapper.getLoanId(), wrapper.getSavingsId(),\n+                    wrapper.getTransactionId(), wrapper.getHref(), wrapper.getProductId(), wrapper.getCreditBureauId(),\n+                    wrapper.getOrganisationCreditBureauId());\n+\n+            this.fromApiJsonDeserializer.validateForCreate(apicommand.json());\n+\n+            final CreditBureauToken generatedtoken = CreditBureauToken.fromJson(apicommand);\n+\n+            // saved new token\n+            this.tokenRepository.save(generatedtoken);\n+\n+            // fetched\n+            creditbureautoken = this.tokenRepository.getToken();\n+            token = creditbureautoken.getCurrentToken();\n+\n+            // at this stage token is available for all cases i.e.(deleted expired token and saved new token)\n+        }\n+\n+        // will use only \"NRC\" part of code from common http method to get data based on nrc\n+        process = \"NRC\";\n+        this.httpConnectionMethod();\n+\n+        // after fetching the data from httpconnection it will be come back here for fetching UniqueID from data\n+        if (process.equals(\"NRC\")) {\n+\n+            // to fetch the Unique ID from Result\n+            JsonObject jsonObject = JsonParser.parseString(result).getAsJsonObject();", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE1MjE5NA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r475152194", "bodyText": "is there a better way to do this null check?\nusing instanceof is not considered as good practice:\nhttps://dzone.com/articles/instanceof-considered-harmful", "author": "nikpawar89", "createdAt": "2020-08-23T00:20:11Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditBureauReportsReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauTokenCredential;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenDataRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.cache.annotation.CacheEvict;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditBureauReportsReadPlatformServiceImpl implements CreditBureauReportsReadPlatformService {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauReportsReadPlatformServiceImpl.class);\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final TokenDataRepositoryWrapper tokenDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public CreditBureauReportsReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final TokenDataRepositoryWrapper tokenDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.tokenDataRepository = tokenDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    String nrcId = null;\n+    Long uniqueID = 0L;\n+    String userName = \"\";\n+    String password = \"\";\n+    String subscriptionId = \"\";\n+    String subscriptionKey = \"\";\n+\n+    StringBuilder response = new StringBuilder();\n+    HttpURLConnection postConnection;\n+    String tokenDate;\n+    String token = null;\n+    String process = null;\n+    String result = null;\n+\n+    public void httpConnectionMethod() {\n+        try {\n+            String readLine = null;\n+            String post_params = null;\n+\n+            if (process.equals(\"token\")) {\n+                LOG.info(\"-----creating new token-----\");\n+                post_params = \"\\n\" + \"BODY=x-www-form-urlencoded&\\r\\n\" + \"grant_type=password&\\r\\n\" + \"userName=\" + userName + \"&\\r\\n\"\n+                        + \"password=\" + password + \"&\\r\\n\";\n+\n+                URL tokenurl = new URL(\"https://mmcix.azure-api.net/qa/20200324/Token\");\n+                readLine = null;\n+                postConnection = (HttpURLConnection) tokenurl.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+                // Search Methods\n+                LOG.info(\"-----Search by NRC-----\");\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcId + \"&\";\n+\n+                URL NrcURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Search/SimpleSearch?nrc=\" + nrcId);\n+                postConnection = (HttpURLConnection) NrcURL.openConnection();\n+                postConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            else if (process.equals(\"CREDITREPORT\")) {\n+                LOG.info(\"-----Search by CREDIT_REPORT-----\");\n+                URL CreditReportURL = new URL(\"https://mmcix.azure-api.net/qa/20200324/api/Dashboard/GetCreditReport?uniqueId=\" + uniqueID);\n+                postConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                postConnection.setRequestMethod(\"GET\");\n+\n+            }\n+\n+            // common set of headers\n+            postConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            postConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            postConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                postConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set of code only required for fetching uniqueID from Nrc fetched data (POST-SimpleSearch)\n+            if (process.equals(\"NRC\") || process.equals(\"token\")) {\n+                LOG.info(\"-----NRC & CREDITREPORT -----\");\n+                postConnection.setDoOutput(true);\n+                OutputStream os = postConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+\n+            }\n+\n+            // common part of code in http connection method\n+            int responseCode = postConnection.getResponseCode();\n+\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+                BufferedReader in = new BufferedReader(new InputStreamReader(postConnection.getInputStream(), StandardCharsets.UTF_8));\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    @CacheEvict(value = \"searchreport\", key = \"T(org.apache.fineract.infrastructure.core.service.ThreadLocalContextUtil).getTenant().getTenantIdentifier().concat('cv')\")\n+    public CreditReportData retrieveAllSearchReport(final String searchId) {\n+        String Name = null;\n+        String Gender = null;\n+        nrcId = searchId;\n+        String Address = null;\n+\n+        this.context.authenticatedUser();\n+\n+        final CreditBureauTokenCredential credittokendata = this.tokenDataRepository.getTokenCredential();\n+\n+        if (credittokendata != null) {\n+            userName = credittokendata.getUserName();\n+            password = credittokendata.getPassword();\n+            subscriptionId = credittokendata.getSubscriptionId();\n+            subscriptionKey = credittokendata.getSubscriptionKey();\n+\n+            // validation required, incase when configuration is not stored in database while fetching data.\n+        } else {\n+\n+            String configJson = \"{ 'userName':'\" + userName + \"','password':'\" + password + \"','subscriptionId':'\" + subscriptionId\n+                    + \"','subscriptionKey':'\" + subscriptionKey + \"'}\";\n+\n+            this.fromApiJsonDeserializer.validateForUsingTokenConfig(configJson);\n+        }\n+\n+        CreditBureauToken creditbureautoken = this.tokenRepository.getToken();\n+        LOG.info(\"creditbureautoken : {} \", creditbureautoken);\n+\n+        // check the expiry date of the previous token.\n+        if (creditbureautoken != null) {\n+            Date current = new Date();\n+            Date getExpiryDate = creditbureautoken.getTokenExpiryDate();\n+\n+            LOG.info(\"current date : {} \", current);\n+            LOG.info(\"getExpiryDate : {} \", getExpiryDate);\n+\n+            if (getExpiryDate.before(current)) {\n+                LOG.info(\"The token is expired\");\n+                this.tokenRepository.delete(creditbureautoken);\n+                creditbureautoken = null;\n+            }\n+        }\n+        // storing token if it is valid token(not expired)\n+        if (creditbureautoken != null) {\n+            token = creditbureautoken.getCurrentToken();\n+        }\n+\n+        // if token is not available or previous token is expired then create a new token\n+        if (creditbureautoken == null) {\n+\n+            // using common http connection method for creating token\n+            process = \"token\";\n+            this.httpConnectionMethod();\n+\n+            JsonObject tokenObject = JsonParser.parseString(result).getAsJsonObject();\n+            String expiresextra = tokenObject.get(\".expires\").toString();\n+            String expires = expiresextra.substring(1, expiresextra.length() - 1);\n+            DateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);\n+            try {\n+                Date getExpiryDate = dateformat.parse(expires);\n+                LOG.info(\"The expirydate {}\", getExpiryDate);\n+            } catch (ParseException Ex) {\n+                LOG.error(\"Error occured.\", Ex);\n+            }\n+\n+            // created token will be storing it into database\n+            final CommandWrapper wrapper = new CommandWrapperBuilder().withJson(result).build();\n+            final String json = wrapper.getJson();\n+            result = null;\n+            JsonCommand apicommand = null;\n+            boolean isApprovedByChecker = false;\n+            final JsonElement parsedCommand = this.fromApiJsonHelper.parse(json);\n+\n+            apicommand = JsonCommand.from(json, parsedCommand, this.fromApiJsonHelper, wrapper.getEntityName(), wrapper.getEntityId(),\n+                    wrapper.getSubentityId(), wrapper.getGroupId(), wrapper.getClientId(), wrapper.getLoanId(), wrapper.getSavingsId(),\n+                    wrapper.getTransactionId(), wrapper.getHref(), wrapper.getProductId(), wrapper.getCreditBureauId(),\n+                    wrapper.getOrganisationCreditBureauId());\n+\n+            this.fromApiJsonDeserializer.validateForCreate(apicommand.json());\n+\n+            final CreditBureauToken generatedtoken = CreditBureauToken.fromJson(apicommand);\n+\n+            // saved new token\n+            this.tokenRepository.save(generatedtoken);\n+\n+            // fetched\n+            creditbureautoken = this.tokenRepository.getToken();\n+            token = creditbureautoken.getCurrentToken();\n+\n+            // at this stage token is available for all cases i.e.(deleted expired token and saved new token)\n+        }\n+\n+        // will use only \"NRC\" part of code from common http method to get data based on nrc\n+        process = \"NRC\";\n+        this.httpConnectionMethod();\n+\n+        // after fetching the data from httpconnection it will be come back here for fetching UniqueID from data\n+        if (process.equals(\"NRC\")) {\n+\n+            // to fetch the Unique ID from Result\n+            JsonObject jsonObject = JsonParser.parseString(result).getAsJsonObject();\n+            JsonArray jArray = jsonObject.getAsJsonArray(\"Data\");\n+            JsonObject jobject = jArray.get(0).getAsJsonObject();\n+            String uniqueIdString = jobject.get(\"UniqueID\").toString();\n+\n+            // cleaned the uniqueID value. Example id: \"123\" to 123\n+            String TrimUniqueId = uniqueIdString.substring(1, uniqueIdString.length() - 1);\n+\n+            // unique ID is stored\n+            uniqueID = Long.parseLong(TrimUniqueId);\n+\n+            // will use \"CREDITREPORT\" part of code from common http method to fetch creditreport based on UniqueID\n+            process = \"CREDITREPORT\";\n+            this.httpConnectionMethod();\n+\n+        }\n+\n+        // after fetching the data from httpconnection it will be come back here to assign data(result) to generic\n+        // creditreportdata object\n+\n+        JsonObject reportObject = JsonParser.parseString(result).getAsJsonObject();\n+\n+        JsonObject borrowerInfo = null;\n+        JsonObject CreditScore = null;\n+        JsonArray ActiveLoans = null;\n+        JsonArray PaidLoans = null;\n+\n+        // Credit Reports Stored into Generic CreditReportData\n+        JsonObject data = null;\n+        JsonElement element = reportObject.get(\"Data\");\n+\n+        if (!(element instanceof JsonNull)) { // NOTE : \"element instanceof JsonNull\" is for handling empty values (and", "originalCommit": "e34b1d52b6156fd7b86e97ab7e33a973f401f560", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cd4212339e062bec85f033e27bdd6bd95db8fda0", "url": "https://github.com/apache/fineract/commit/cd4212339e062bec85f033e27bdd6bd95db8fda0", "message": "Credit_Bureau_Phase3 (FINERACT-734)", "committedDate": "2020-09-22T07:11:28Z", "type": "forcePushed"}, {"oid": "69eb3d215b59b7a0a8c152e8ee2dc423922cda17", "url": "https://github.com/apache/fineract/commit/69eb3d215b59b7a0a8c152e8ee2dc423922cda17", "message": "Credit_Bureau_Phase3 (FINERACT-734)", "committedDate": "2020-09-22T08:53:08Z", "type": "forcePushed"}, {"oid": "643fef05a5c12247bbcb9e40f405d461f0003790", "url": "https://github.com/apache/fineract/commit/643fef05a5c12247bbcb9e40f405d461f0003790", "message": "Submit-creditReport and Configuration modification", "committedDate": "2020-09-25T14:07:00Z", "type": "forcePushed"}, {"oid": "df8b070742979c7da096d06b217d2e188b74ecb1", "url": "https://github.com/apache/fineract/commit/df8b070742979c7da096d06b217d2e188b74ecb1", "message": "Submit-creditReport and Configuration modification", "committedDate": "2020-09-25T16:28:58Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMyNzY0Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r499327647", "bodyText": "is this the format of date we get from creditbureau?", "author": "nikpawar89", "createdAt": "2020-10-05T03:09:17Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/domain/CreditBureauToken.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package org.apache.fineract.infrastructure.creditbureau.domain;\n+\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.domain.AbstractPersistableCustom;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Entity\n+@Table(name = \"m_creditbureau_token\")\n+public class CreditBureauToken extends AbstractPersistableCustom {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauToken.class);\n+\n+    @Column(name = \"username\")\n+    private String userName;\n+\n+    @Column(name = \"token\")\n+    private String accessToken;\n+\n+    @Column(name = \"token_type\")\n+    private String tokenType;\n+\n+    @Column(name = \"expires_in\")\n+    private String expiresIn;\n+\n+    @Column(name = \"issued\")\n+    private String issued;\n+\n+    @Column(name = \"expires\")\n+    private Date expires;\n+\n+    public CreditBureauToken(String userName, String accessToken, String tokenType, String expiresIn, String issued, Date expires) {\n+        this.userName = userName;\n+        this.accessToken = accessToken;\n+        this.tokenType = tokenType;\n+        this.expiresIn = expiresIn;\n+        this.issued = issued;\n+        this.expires = expires;\n+    }\n+\n+    public CreditBureauToken() {\n+        this.userName = null;\n+        this.accessToken = null;\n+        this.tokenType = null;\n+        this.expiresIn = null;\n+        this.issued = null;\n+        this.expires = null;\n+    }\n+\n+    public static CreditBureauToken fromJson(final JsonCommand command) {\n+        final String userName = command.stringValueOfParameterNamed(\"userName\");\n+        final String accessToken = command.stringValueOfParameterNamed(\"access_token\");\n+        final String tokenType = command.stringValueOfParameterNamed(\"token_type\");\n+        final String expiresIn = command.stringValueOfParameterNamed(\"expires_in\");\n+        final String issued = command.stringValueOfParameterNamed(\".issued\");\n+        final String expiry = command.stringValueOfParameterNamed(\".expires\");\n+\n+        SimpleDateFormat dateformat = new SimpleDateFormat(\"EEE, dd MMM yyyy kk:mm:ss zzz\", Locale.ENGLISH);", "originalCommit": "df8b070742979c7da096d06b217d2e188b74ecb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTMzMjAyMw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r499332023", "bodyText": "why are we using File in http request", "author": "nikpawar89", "createdAt": "2020-10-05T03:35:29Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditReportWritePlatformServiceImpl.java", "diffHunk": "@@ -95,7 +95,7 @@ public CreditReportWritePlatformServiceImpl(final PlatformSecurityContext contex\n     private static final Logger LOG = LoggerFactory.getLogger(CreditReportWritePlatformServiceImpl.class);\n \n     public String httpConnectionMethod(String process, String nrcID, String userName, String password, String subscriptionKey,\n-            String subscriptionId, String url, String token, Long uniqueID) {\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {", "originalCommit": "df8b070742979c7da096d06b217d2e188b74ecb1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "90bf8686f7b991428caef883ab2b69492a7fc640", "url": "https://github.com/apache/fineract/commit/90bf8686f7b991428caef883ab2b69492a7fc640", "message": "separeted-thitsawork-with-generic", "committedDate": "2020-10-25T13:50:17Z", "type": "forcePushed"}, {"oid": "1b26e5e64cd26dfb4073c82fd245e4aa2b954243", "url": "https://github.com/apache/fineract/commit/1b26e5e64cd26dfb4073c82fd245e4aa2b954243", "message": "separeted-thitsawork-with-generic", "committedDate": "2020-10-25T15:17:41Z", "type": "forcePushed"}, {"oid": "3b9f7c63c9bd06ba7cdcb6658d31bb9906eef513", "url": "https://github.com/apache/fineract/commit/3b9f7c63c9bd06ba7cdcb6658d31bb9906eef513", "message": "spotless-apply", "committedDate": "2020-10-26T14:06:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNDgzOQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r512404839", "bodyText": "potential null pointer excption", "author": "nikpawar89", "createdAt": "2020-10-27T04:07:34Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditReportWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.File;\n+import java.util.NoSuchElementException;\n+import javax.persistence.PersistenceException;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResultBuilder;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureaNames;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureau;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauLoanProductMappingRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditReportWritePlatformServiceImpl implements CreditReportWritePlatformService {\n+\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+    private final CreditBureauLoanProductMappingRepository loanProductMappingRepository;\n+    private final CreditBureauRepository creditBureauRepository;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService;\n+\n+    @Autowired\n+    public CreditReportWritePlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer,\n+            final CreditBureauLoanProductMappingRepository loanProductMappingRepository,\n+            final CreditBureauRepository creditBureauRepository,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+        this.loanProductMappingRepository = loanProductMappingRepository;\n+        this.creditBureauRepository = creditBureauRepository;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformService = thitsaWorksCreditBureauIntegrationWritePlatformService;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditReportWritePlatformServiceImpl.class);\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult getCreditReport(JsonCommand command) {\n+\n+        try {\n+            this.context.authenticatedUser();\n+\n+            String creditBureauID = command.stringValueOfParameterNamed(\"creditBureauID\");\n+\n+            String creditBureauName = getCreditBureau(creditBureauID);\n+\n+            CreditReportData reportobj = null;\n+\n+            if (creditBureauName.equals(CreditBureaNames.THITSAWORKS.toString())) {\n+                reportobj = this.thitsaWorksCreditBureauIntegrationWritePlatformService.getCreditReportFromThitsaWorks(command);\n+            }\n+\n+            return new CommandProcessingResultBuilder().withCreditReport(reportobj).build();\n+        } catch (final DataIntegrityViolationException dve) {\n+            handleTokenDataIntegrityIssues(command, dve.getMostSpecificCause(), dve);\n+            return CommandProcessingResult.empty();\n+        } catch (final PersistenceException ee) {\n+            Throwable throwable = ExceptionUtils.getRootCause(ee.getCause());\n+            handleTokenDataIntegrityIssues(command, throwable, ee);\n+            return CommandProcessingResult.empty();\n+        }\n+\n+    }\n+\n+    private String getCreditBureau(final String creditBureauID) {\n+\n+        String creditBureauName = null;\n+        CreditBureau creditBureau = null;\n+        if (creditBureauID != null) {\n+\n+            Long bureauID = Long.parseLong(creditBureauID);\n+\n+            try {\n+                creditBureau = this.creditBureauRepository.findById(bureauID).get();", "originalCommit": "3b9f7c63c9bd06ba7cdcb6658d31bb9906eef513", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQwNDk1Mg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r512404952", "bodyText": "I think, if string does not match you should let client know,", "author": "nikpawar89", "createdAt": "2020-10-27T04:08:03Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditReportWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.File;\n+import java.util.NoSuchElementException;\n+import javax.persistence.PersistenceException;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResultBuilder;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureaNames;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureau;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauLoanProductMappingRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditReportWritePlatformServiceImpl implements CreditReportWritePlatformService {\n+\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+    private final CreditBureauLoanProductMappingRepository loanProductMappingRepository;\n+    private final CreditBureauRepository creditBureauRepository;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService;\n+\n+    @Autowired\n+    public CreditReportWritePlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer,\n+            final CreditBureauLoanProductMappingRepository loanProductMappingRepository,\n+            final CreditBureauRepository creditBureauRepository,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+        this.loanProductMappingRepository = loanProductMappingRepository;\n+        this.creditBureauRepository = creditBureauRepository;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformService = thitsaWorksCreditBureauIntegrationWritePlatformService;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditReportWritePlatformServiceImpl.class);\n+\n+    @SuppressWarnings({ \"CatchAndPrintStackTrace\", \"DefaultCharset\" })\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult getCreditReport(JsonCommand command) {\n+\n+        try {\n+            this.context.authenticatedUser();\n+\n+            String creditBureauID = command.stringValueOfParameterNamed(\"creditBureauID\");\n+\n+            String creditBureauName = getCreditBureau(creditBureauID);\n+\n+            CreditReportData reportobj = null;\n+\n+            if (creditBureauName.equals(CreditBureaNames.THITSAWORKS.toString())) {\n+                reportobj = this.thitsaWorksCreditBureauIntegrationWritePlatformService.getCreditReportFromThitsaWorks(command);", "originalCommit": "3b9f7c63c9bd06ba7cdcb6658d31bb9906eef513", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c60a32386c1c2a10b1b4fe29a84d26923999eda1", "url": "https://github.com/apache/fineract/commit/c60a32386c1c2a10b1b4fe29a84d26923999eda1", "message": "cleaned-and-fixed", "committedDate": "2020-11-07T21:02:41Z", "type": "forcePushed"}, {"oid": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "url": "https://github.com/apache/fineract/commit/ccfdc2a8c8da9244116744073dc32ed576c93c24", "message": "cleaned-and-fixed", "committedDate": "2020-11-08T19:01:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3MzgzNA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519473834", "bodyText": "Can we have subscriptionId and other config params as enums?", "author": "nikpawar89", "createdAt": "2020-11-08T20:35:11Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditReportWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.persistence.PersistenceException;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResultBuilder;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureaNames;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureau;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauLoanProductMappingRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReport;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReportRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditReportWritePlatformServiceImpl implements CreditReportWritePlatformService {\n+\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+    private final CreditBureauLoanProductMappingRepository loanProductMappingRepository;\n+    private final CreditBureauRepository creditBureauRepository;\n+    private final CreditReportRepository creditReportRepository;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService;\n+\n+    @Autowired\n+    public CreditReportWritePlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer,\n+            final CreditBureauLoanProductMappingRepository loanProductMappingRepository,\n+            final CreditBureauRepository creditBureauRepository, final CreditReportRepository creditReportRepository,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+        this.loanProductMappingRepository = loanProductMappingRepository;\n+        this.creditBureauRepository = creditBureauRepository;\n+        this.creditReportRepository = creditReportRepository;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformService = thitsaWorksCreditBureauIntegrationWritePlatformService;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditReportWritePlatformServiceImpl.class);\n+\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult getCreditReport(JsonCommand command) {\n+\n+        try {\n+            this.context.authenticatedUser();\n+\n+            Long creditBureauID = command.longValueOfParameterNamed(\"creditBureauID\");\n+\n+            Optional<String> creditBureauName = getCreditBureau(creditBureauID);\n+\n+            if (creditBureauName.isEmpty()) {\n+                throw new PlatformDataIntegrityException(\"Credit Bureau has not been Integrated\", \"Credit Bureau has not been Integrated\");\n+            }\n+\n+            if (Objects.equals(creditBureauName.get(), CreditBureaNames.THITSAWORKS.toString())) {\n+                CreditReportData reportobj = this.thitsaWorksCreditBureauIntegrationWritePlatformService\n+                        .getCreditReportFromThitsaWorks(command);\n+                return new CommandProcessingResultBuilder().withCreditReport(reportobj).build();\n+            }\n+\n+            throw new PlatformDataIntegrityException(\"Credit Bureau has not been Integrated\", \"Credit Bureau has not been Integrated\");\n+\n+        } catch (final DataIntegrityViolationException dve) {\n+            handleTokenDataIntegrityIssues(command, dve.getMostSpecificCause(), dve);\n+            return CommandProcessingResult.empty();\n+        } catch (final PersistenceException ee) {\n+            Throwable throwable = ExceptionUtils.getRootCause(ee.getCause());\n+            handleTokenDataIntegrityIssues(command, throwable, ee);\n+            return CommandProcessingResult.empty();\n+        }\n+\n+    }\n+\n+    private Optional<String> getCreditBureau(Long creditBureauID) {\n+\n+        if (creditBureauID != null) {\n+            Optional<CreditBureau> creditBureau = this.creditBureauRepository.findById(creditBureauID);\n+\n+            if (creditBureau.isEmpty()) {\n+                LOG.info(\"Credit Bureau Id {} not found\", creditBureauID);\n+                return Optional.empty();\n+            }\n+\n+            return Optional.of(creditBureau.get().getName());\n+\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public String addCreditReport(File report, Long bureauId) {\n+\n+        Optional<String> creditBureauName = getCreditBureau(bureauId);\n+\n+        if (Objects.equals(creditBureauName.get(), CreditBureaNames.THITSAWORKS.toString())) {\n+\n+            Integer creditBureauId = bureauId.intValue();\n+\n+            // make lower case\n+            CreditBureauConfiguration subscriptionIdData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                    \"SubscriptionId\");", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Mzk0Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519473947", "bodyText": "Instead of catching NPE here, Can we check if CreditBureauConfiguration itself is Null, if yes, not move ahead", "author": "nikpawar89", "createdAt": "2020-11-08T20:36:14Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditReportWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.persistence.PersistenceException;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResultBuilder;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureaNames;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureau;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauLoanProductMappingRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReport;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReportRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditReportWritePlatformServiceImpl implements CreditReportWritePlatformService {\n+\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+    private final CreditBureauLoanProductMappingRepository loanProductMappingRepository;\n+    private final CreditBureauRepository creditBureauRepository;\n+    private final CreditReportRepository creditReportRepository;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService;\n+\n+    @Autowired\n+    public CreditReportWritePlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer,\n+            final CreditBureauLoanProductMappingRepository loanProductMappingRepository,\n+            final CreditBureauRepository creditBureauRepository, final CreditReportRepository creditReportRepository,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+        this.loanProductMappingRepository = loanProductMappingRepository;\n+        this.creditBureauRepository = creditBureauRepository;\n+        this.creditReportRepository = creditReportRepository;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformService = thitsaWorksCreditBureauIntegrationWritePlatformService;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditReportWritePlatformServiceImpl.class);\n+\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult getCreditReport(JsonCommand command) {\n+\n+        try {\n+            this.context.authenticatedUser();\n+\n+            Long creditBureauID = command.longValueOfParameterNamed(\"creditBureauID\");\n+\n+            Optional<String> creditBureauName = getCreditBureau(creditBureauID);\n+\n+            if (creditBureauName.isEmpty()) {\n+                throw new PlatformDataIntegrityException(\"Credit Bureau has not been Integrated\", \"Credit Bureau has not been Integrated\");\n+            }\n+\n+            if (Objects.equals(creditBureauName.get(), CreditBureaNames.THITSAWORKS.toString())) {\n+                CreditReportData reportobj = this.thitsaWorksCreditBureauIntegrationWritePlatformService\n+                        .getCreditReportFromThitsaWorks(command);\n+                return new CommandProcessingResultBuilder().withCreditReport(reportobj).build();\n+            }\n+\n+            throw new PlatformDataIntegrityException(\"Credit Bureau has not been Integrated\", \"Credit Bureau has not been Integrated\");\n+\n+        } catch (final DataIntegrityViolationException dve) {\n+            handleTokenDataIntegrityIssues(command, dve.getMostSpecificCause(), dve);\n+            return CommandProcessingResult.empty();\n+        } catch (final PersistenceException ee) {\n+            Throwable throwable = ExceptionUtils.getRootCause(ee.getCause());\n+            handleTokenDataIntegrityIssues(command, throwable, ee);\n+            return CommandProcessingResult.empty();\n+        }\n+\n+    }\n+\n+    private Optional<String> getCreditBureau(Long creditBureauID) {\n+\n+        if (creditBureauID != null) {\n+            Optional<CreditBureau> creditBureau = this.creditBureauRepository.findById(creditBureauID);\n+\n+            if (creditBureau.isEmpty()) {\n+                LOG.info(\"Credit Bureau Id {} not found\", creditBureauID);\n+                return Optional.empty();\n+            }\n+\n+            return Optional.of(creditBureau.get().getName());\n+\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public String addCreditReport(File report, Long bureauId) {\n+\n+        Optional<String> creditBureauName = getCreditBureau(bureauId);\n+\n+        if (Objects.equals(creditBureauName.get(), CreditBureaNames.THITSAWORKS.toString())) {\n+\n+            Integer creditBureauId = bureauId.intValue();\n+\n+            // make lower case\n+            CreditBureauConfiguration subscriptionIdData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                    \"SubscriptionId\");\n+            CreditBureauConfiguration subscriptionKeyData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                    \"SubscriptionKey\");\n+            CreditBureauConfiguration userNameData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Username\");\n+            CreditBureauConfiguration passwordData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Password\");\n+\n+            String subscriptionId = \"\";\n+            String subscriptionKey = \"\";\n+            String userName = \"\";\n+            String password = \"\";\n+\n+            try {\n+                subscriptionId = subscriptionIdData.getValue();\n+                subscriptionKey = subscriptionKeyData.getValue();\n+                userName = userNameData.getValue();\n+                password = passwordData.getValue();\n+            } catch (NullPointerException ex) {", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDUwNw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519474507", "bodyText": "you can check if there is common string class method which would check if string is null or empty, instead of repeating logic everywhere. If there isn't try to create one mehtod. ex boolisStringNullOrEmpty(String str) {\nif (str != null && !str.isEmpty()) {\nreturn true;} return false;}    or may be come up with more better checks", "author": "nikpawar89", "createdAt": "2020-11-08T20:41:54Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditReportWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,248 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.File;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.persistence.PersistenceException;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResultBuilder;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureaNames;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureau;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauLoanProductMappingRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReport;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReportRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditReportWritePlatformServiceImpl implements CreditReportWritePlatformService {\n+\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+    private final CreditBureauLoanProductMappingRepository loanProductMappingRepository;\n+    private final CreditBureauRepository creditBureauRepository;\n+    private final CreditReportRepository creditReportRepository;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService;\n+\n+    @Autowired\n+    public CreditReportWritePlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer,\n+            final CreditBureauLoanProductMappingRepository loanProductMappingRepository,\n+            final CreditBureauRepository creditBureauRepository, final CreditReportRepository creditReportRepository,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+        this.loanProductMappingRepository = loanProductMappingRepository;\n+        this.creditBureauRepository = creditBureauRepository;\n+        this.creditReportRepository = creditReportRepository;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformService = thitsaWorksCreditBureauIntegrationWritePlatformService;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditReportWritePlatformServiceImpl.class);\n+\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult getCreditReport(JsonCommand command) {\n+\n+        try {\n+            this.context.authenticatedUser();\n+\n+            Long creditBureauID = command.longValueOfParameterNamed(\"creditBureauID\");\n+\n+            Optional<String> creditBureauName = getCreditBureau(creditBureauID);\n+\n+            if (creditBureauName.isEmpty()) {\n+                throw new PlatformDataIntegrityException(\"Credit Bureau has not been Integrated\", \"Credit Bureau has not been Integrated\");\n+            }\n+\n+            if (Objects.equals(creditBureauName.get(), CreditBureaNames.THITSAWORKS.toString())) {\n+                CreditReportData reportobj = this.thitsaWorksCreditBureauIntegrationWritePlatformService\n+                        .getCreditReportFromThitsaWorks(command);\n+                return new CommandProcessingResultBuilder().withCreditReport(reportobj).build();\n+            }\n+\n+            throw new PlatformDataIntegrityException(\"Credit Bureau has not been Integrated\", \"Credit Bureau has not been Integrated\");\n+\n+        } catch (final DataIntegrityViolationException dve) {\n+            handleTokenDataIntegrityIssues(command, dve.getMostSpecificCause(), dve);\n+            return CommandProcessingResult.empty();\n+        } catch (final PersistenceException ee) {\n+            Throwable throwable = ExceptionUtils.getRootCause(ee.getCause());\n+            handleTokenDataIntegrityIssues(command, throwable, ee);\n+            return CommandProcessingResult.empty();\n+        }\n+\n+    }\n+\n+    private Optional<String> getCreditBureau(Long creditBureauID) {\n+\n+        if (creditBureauID != null) {\n+            Optional<CreditBureau> creditBureau = this.creditBureauRepository.findById(creditBureauID);\n+\n+            if (creditBureau.isEmpty()) {\n+                LOG.info(\"Credit Bureau Id {} not found\", creditBureauID);\n+                return Optional.empty();\n+            }\n+\n+            return Optional.of(creditBureau.get().getName());\n+\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    public String addCreditReport(File report, Long bureauId) {\n+\n+        Optional<String> creditBureauName = getCreditBureau(bureauId);\n+\n+        if (Objects.equals(creditBureauName.get(), CreditBureaNames.THITSAWORKS.toString())) {\n+\n+            Integer creditBureauId = bureauId.intValue();\n+\n+            // make lower case\n+            CreditBureauConfiguration subscriptionIdData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                    \"SubscriptionId\");\n+            CreditBureauConfiguration subscriptionKeyData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                    \"SubscriptionKey\");\n+            CreditBureauConfiguration userNameData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Username\");\n+            CreditBureauConfiguration passwordData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Password\");\n+\n+            String subscriptionId = \"\";\n+            String subscriptionKey = \"\";\n+            String userName = \"\";\n+            String password = \"\";\n+\n+            try {\n+                subscriptionId = subscriptionIdData.getValue();\n+                subscriptionKey = subscriptionKeyData.getValue();\n+                userName = userNameData.getValue();\n+                password = passwordData.getValue();\n+            } catch (NullPointerException ex) {\n+                throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                        \"Credit Bureau Configuration is not available\" + ex);\n+            }\n+\n+            LOG.info(\"subscriptionIdData {}\", subscriptionIdData + \"subscriptionId {}\", subscriptionId);\n+\n+            if (!\"\".equals(subscriptionId) && !\"\".equals(subscriptionKey) && !\"\".equals(userName) && !\"\".equals(password)) {", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2MTkzNA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r522461934", "bodyText": "There is one in Commons Lang and in Guava.", "author": "vorburger", "createdAt": "2020-11-12T22:14:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA4ODQ1Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r532088457", "bodyText": "@rrpawar96 this code is no longer there and seems to have moved now? Anyway, I see that you are now using StringUtils.defaultIfEmpty(newValue, null) in CreditBureauConfiguration so shall we resolve this comment now @nikpawar89?", "author": "vorburger", "createdAt": "2020-11-28T17:56:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3NDUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Nzk2NA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519477964", "bodyText": "I think we can break this method down to two methods, getHTTPPostConnection() and getHTTPGetConnection(). Let me know if you agree.", "author": "nikpawar89", "createdAt": "2020-11-08T21:14:23Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+@Service\n+public class ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl implements ThitsaWorksCreditBureauIntegrationWritePlatformService {\n+\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl(final PlatformSecurityContext context,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.class);\n+\n+    @Transactional\n+    @Override\n+    public String httpConnectionMethod(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        String result = null;\n+\n+        try {\n+            String post_params = null;\n+            HttpURLConnection httpConnection = this.process(process, nrcID, userName, password, subscriptionKey, subscriptionId, url, token,\n+                    uniqueID, report);\n+\n+            if (process.equals(\"token\")) {\n+                post_params = \"\" + \"BODY=x-www-form-urlencoded&\\r\" + \"grant_type=password&\\r\" + \"userName=\" + userName + \"&\\r\" + \"password=\"\n+                        + password + \"&\\r\";\n+            } else if (process.equals(\"NRC\")) {\n+\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcID + \"&\";\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                post_params = \"BODY=formdata&\" + report + \"&\" + \"userName=\" + userName + \"&\";\n+            }\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                httpConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set is required only for (POST METHOD)- fetching uniqueID from NRC/Creating Token/Add Credit report\n+            if (process.equals(\"NRC\") || process.equals(\"token\") || process.equals(\"UploadCreditReport\")) {\n+                httpConnection.setDoOutput(true);\n+                OutputStream os = httpConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+            }\n+\n+            result = this.httpResponse(httpConnection);\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+\n+    }\n+\n+    private HttpURLConnection process(String process, String nrcID, String userName, String password, String subscriptionKey,", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjQ2NjA1Mg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r522466052", "bodyText": "It would be even better not to code at this low level, but use a higher level ready made HTTP Client library. Do you know of https://square.github.io/okhttp/ and https://square.github.io/retrofit/? Both are already used in Fineract, search the existing code for examples how to use it...", "author": "vorburger", "createdAt": "2020-11-12T22:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Nzk2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjA4ODA2Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r532088067", "bodyText": "@rrpawar96 I see that you've switched to using OkHTTP now, looks great, thank you; I'm therefore resolving this comment. FYI @nikpawar89.", "author": "vorburger", "createdAt": "2020-11-28T17:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3Nzk2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3ODY0OA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519478648", "bodyText": "i gave feedback regarding this approach above.", "author": "nikpawar89", "createdAt": "2020-11-08T21:21:00Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+@Service\n+public class ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl implements ThitsaWorksCreditBureauIntegrationWritePlatformService {\n+\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl(final PlatformSecurityContext context,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.class);\n+\n+    @Transactional\n+    @Override\n+    public String httpConnectionMethod(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        String result = null;\n+\n+        try {\n+            String post_params = null;\n+            HttpURLConnection httpConnection = this.process(process, nrcID, userName, password, subscriptionKey, subscriptionId, url, token,\n+                    uniqueID, report);\n+\n+            if (process.equals(\"token\")) {\n+                post_params = \"\" + \"BODY=x-www-form-urlencoded&\\r\" + \"grant_type=password&\\r\" + \"userName=\" + userName + \"&\\r\" + \"password=\"\n+                        + password + \"&\\r\";\n+            } else if (process.equals(\"NRC\")) {\n+\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcID + \"&\";\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                post_params = \"BODY=formdata&\" + report + \"&\" + \"userName=\" + userName + \"&\";\n+            }\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                httpConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set is required only for (POST METHOD)- fetching uniqueID from NRC/Creating Token/Add Credit report\n+            if (process.equals(\"NRC\") || process.equals(\"token\") || process.equals(\"UploadCreditReport\")) {\n+                httpConnection.setDoOutput(true);\n+                OutputStream os = httpConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+            }\n+\n+            result = this.httpResponse(httpConnection);\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+\n+    }\n+\n+    private HttpURLConnection process(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        HttpURLConnection httpConnection = null;\n+\n+        try {\n+            if (process.equals(\"token\")) {\n+\n+                URL tokenurl = new URL(url);\n+                httpConnection = (HttpURLConnection) tokenurl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+\n+                URL NrcURL = new URL(url + nrcID);\n+                httpConnection = (HttpURLConnection) NrcURL.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"CreditReport\")) {\n+\n+                URL CreditReportURL = new URL(url + uniqueID);\n+                httpConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                httpConnection.setRequestMethod(\"GET\");\n+\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                URL addCreditReporturl = new URL(url);\n+                httpConnection = (HttpURLConnection) addCreditReporturl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            // common set of headers\n+            httpConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            httpConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            httpConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return httpConnection;\n+    }\n+\n+    public String httpResponse(HttpURLConnection httpConnection) {\n+\n+        String result = null; // return type of this method\n+        try {\n+            int responseCode = httpConnection.getResponseCode();\n+\n+            StringBuilder response = new StringBuilder();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+\n+                BufferedReader in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream(), StandardCharsets.UTF_8));\n+\n+                String readLine = null;\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+                LOG.info(\"----- result-----{}\", result);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_UNAUTHORIZED\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_FORBIDDEN\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+    }\n+\n+    @Transactional\n+    @Override\n+    @SuppressWarnings(\"StringSplitter\")\n+    public CreditReportData getCreditReportFromThitsaWorks(final JsonCommand command) {\n+\n+        this.context.authenticatedUser();\n+        String nrcId = command.stringValueOfParameterNamed(\"NRC\");\n+        String bureauID = command.stringValueOfParameterNamed(\"creditBureauID\");\n+        Integer creditBureauId = Integer.parseInt(bureauID);\n+\n+        CreditBureauConfiguration subscriptionIdData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionId\");\n+        CreditBureauConfiguration subscriptionKeyData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionKey\");\n+        CreditBureauConfiguration userNameData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Username\");\n+        CreditBureauConfiguration passwordData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Password\");\n+\n+        String subscriptionId = \"\";\n+        String subscriptionKey = \"\";\n+        String userName = \"\";\n+        String password = \"\";\n+\n+        try {\n+            subscriptionId = subscriptionIdData.getValue();", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ3OTE0Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519479147", "bodyText": "extract a method of NRC process", "author": "nikpawar89", "createdAt": "2020-11-08T21:26:08Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+@Service\n+public class ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl implements ThitsaWorksCreditBureauIntegrationWritePlatformService {\n+\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl(final PlatformSecurityContext context,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.class);\n+\n+    @Transactional\n+    @Override\n+    public String httpConnectionMethod(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        String result = null;\n+\n+        try {\n+            String post_params = null;\n+            HttpURLConnection httpConnection = this.process(process, nrcID, userName, password, subscriptionKey, subscriptionId, url, token,\n+                    uniqueID, report);\n+\n+            if (process.equals(\"token\")) {\n+                post_params = \"\" + \"BODY=x-www-form-urlencoded&\\r\" + \"grant_type=password&\\r\" + \"userName=\" + userName + \"&\\r\" + \"password=\"\n+                        + password + \"&\\r\";\n+            } else if (process.equals(\"NRC\")) {\n+\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcID + \"&\";\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                post_params = \"BODY=formdata&\" + report + \"&\" + \"userName=\" + userName + \"&\";\n+            }\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                httpConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set is required only for (POST METHOD)- fetching uniqueID from NRC/Creating Token/Add Credit report\n+            if (process.equals(\"NRC\") || process.equals(\"token\") || process.equals(\"UploadCreditReport\")) {\n+                httpConnection.setDoOutput(true);\n+                OutputStream os = httpConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+            }\n+\n+            result = this.httpResponse(httpConnection);\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+\n+    }\n+\n+    private HttpURLConnection process(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        HttpURLConnection httpConnection = null;\n+\n+        try {\n+            if (process.equals(\"token\")) {\n+\n+                URL tokenurl = new URL(url);\n+                httpConnection = (HttpURLConnection) tokenurl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+\n+                URL NrcURL = new URL(url + nrcID);\n+                httpConnection = (HttpURLConnection) NrcURL.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"CreditReport\")) {\n+\n+                URL CreditReportURL = new URL(url + uniqueID);\n+                httpConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                httpConnection.setRequestMethod(\"GET\");\n+\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                URL addCreditReporturl = new URL(url);\n+                httpConnection = (HttpURLConnection) addCreditReporturl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            // common set of headers\n+            httpConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            httpConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            httpConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return httpConnection;\n+    }\n+\n+    public String httpResponse(HttpURLConnection httpConnection) {\n+\n+        String result = null; // return type of this method\n+        try {\n+            int responseCode = httpConnection.getResponseCode();\n+\n+            StringBuilder response = new StringBuilder();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+\n+                BufferedReader in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream(), StandardCharsets.UTF_8));\n+\n+                String readLine = null;\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+                LOG.info(\"----- result-----{}\", result);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_UNAUTHORIZED\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_FORBIDDEN\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+    }\n+\n+    @Transactional\n+    @Override\n+    @SuppressWarnings(\"StringSplitter\")\n+    public CreditReportData getCreditReportFromThitsaWorks(final JsonCommand command) {\n+\n+        this.context.authenticatedUser();\n+        String nrcId = command.stringValueOfParameterNamed(\"NRC\");\n+        String bureauID = command.stringValueOfParameterNamed(\"creditBureauID\");\n+        Integer creditBureauId = Integer.parseInt(bureauID);\n+\n+        CreditBureauConfiguration subscriptionIdData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionId\");\n+        CreditBureauConfiguration subscriptionKeyData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionKey\");\n+        CreditBureauConfiguration userNameData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Username\");\n+        CreditBureauConfiguration passwordData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Password\");\n+\n+        String subscriptionId = \"\";\n+        String subscriptionKey = \"\";\n+        String userName = \"\";\n+        String password = \"\";\n+\n+        try {\n+            subscriptionId = subscriptionIdData.getValue();\n+            subscriptionKey = subscriptionKeyData.getValue();\n+            userName = userNameData.getValue();\n+            password = passwordData.getValue();\n+        } catch (NullPointerException ex) {\n+            throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                    \"Credit Bureau Configuration is not available\" + ex);\n+        }\n+\n+        String token = null;\n+        if (!\"\".equals(subscriptionId) && !\"\".equals(subscriptionKey) && !\"\".equals(userName) && !\"\".equals(password)) {\n+            token = createToken(userName, password, subscriptionId, subscriptionKey, creditBureauId);\n+        } else {\n+            throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                    \"Credit Bureau Configuration is not available\");\n+        }\n+\n+        // will use only \"NRC\" part of code from common http method to get data based on nrc\n+        String process = \"NRC\";\n+        CreditBureauConfiguration SearchURL = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"searchurl\");\n+        String url = SearchURL.getValue();\n+        String result = this.httpConnectionMethod(process, nrcId, userName, password, subscriptionKey, subscriptionId, url, token, 0L,\n+                null);\n+\n+        // after fetching the data from httpconnection it will be come back here for fetching UniqueID from data\n+        if (process.equals(\"NRC\")) {", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MDEwNA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519480104", "bodyText": "don't start with caps for url names, applies throughout the PR.", "author": "nikpawar89", "createdAt": "2020-11-08T21:35:36Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+@Service\n+public class ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl implements ThitsaWorksCreditBureauIntegrationWritePlatformService {\n+\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl(final PlatformSecurityContext context,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.class);\n+\n+    @Transactional\n+    @Override\n+    public String httpConnectionMethod(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        String result = null;\n+\n+        try {\n+            String post_params = null;\n+            HttpURLConnection httpConnection = this.process(process, nrcID, userName, password, subscriptionKey, subscriptionId, url, token,\n+                    uniqueID, report);\n+\n+            if (process.equals(\"token\")) {\n+                post_params = \"\" + \"BODY=x-www-form-urlencoded&\\r\" + \"grant_type=password&\\r\" + \"userName=\" + userName + \"&\\r\" + \"password=\"\n+                        + password + \"&\\r\";\n+            } else if (process.equals(\"NRC\")) {\n+\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcID + \"&\";\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                post_params = \"BODY=formdata&\" + report + \"&\" + \"userName=\" + userName + \"&\";\n+            }\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                httpConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set is required only for (POST METHOD)- fetching uniqueID from NRC/Creating Token/Add Credit report\n+            if (process.equals(\"NRC\") || process.equals(\"token\") || process.equals(\"UploadCreditReport\")) {\n+                httpConnection.setDoOutput(true);\n+                OutputStream os = httpConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+            }\n+\n+            result = this.httpResponse(httpConnection);\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+\n+    }\n+\n+    private HttpURLConnection process(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        HttpURLConnection httpConnection = null;\n+\n+        try {\n+            if (process.equals(\"token\")) {\n+\n+                URL tokenurl = new URL(url);\n+                httpConnection = (HttpURLConnection) tokenurl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+\n+                URL NrcURL = new URL(url + nrcID);\n+                httpConnection = (HttpURLConnection) NrcURL.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"CreditReport\")) {\n+\n+                URL CreditReportURL = new URL(url + uniqueID);\n+                httpConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                httpConnection.setRequestMethod(\"GET\");\n+\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                URL addCreditReporturl = new URL(url);\n+                httpConnection = (HttpURLConnection) addCreditReporturl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            // common set of headers\n+            httpConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            httpConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            httpConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return httpConnection;\n+    }\n+\n+    public String httpResponse(HttpURLConnection httpConnection) {\n+\n+        String result = null; // return type of this method\n+        try {\n+            int responseCode = httpConnection.getResponseCode();\n+\n+            StringBuilder response = new StringBuilder();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+\n+                BufferedReader in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream(), StandardCharsets.UTF_8));\n+\n+                String readLine = null;\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+                LOG.info(\"----- result-----{}\", result);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_UNAUTHORIZED\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_FORBIDDEN\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+    }\n+\n+    @Transactional\n+    @Override\n+    @SuppressWarnings(\"StringSplitter\")\n+    public CreditReportData getCreditReportFromThitsaWorks(final JsonCommand command) {\n+\n+        this.context.authenticatedUser();\n+        String nrcId = command.stringValueOfParameterNamed(\"NRC\");\n+        String bureauID = command.stringValueOfParameterNamed(\"creditBureauID\");\n+        Integer creditBureauId = Integer.parseInt(bureauID);\n+\n+        CreditBureauConfiguration subscriptionIdData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionId\");\n+        CreditBureauConfiguration subscriptionKeyData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionKey\");\n+        CreditBureauConfiguration userNameData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Username\");\n+        CreditBureauConfiguration passwordData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Password\");\n+\n+        String subscriptionId = \"\";\n+        String subscriptionKey = \"\";\n+        String userName = \"\";\n+        String password = \"\";\n+\n+        try {\n+            subscriptionId = subscriptionIdData.getValue();\n+            subscriptionKey = subscriptionKeyData.getValue();\n+            userName = userNameData.getValue();\n+            password = passwordData.getValue();\n+        } catch (NullPointerException ex) {\n+            throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                    \"Credit Bureau Configuration is not available\" + ex);\n+        }\n+\n+        String token = null;\n+        if (!\"\".equals(subscriptionId) && !\"\".equals(subscriptionKey) && !\"\".equals(userName) && !\"\".equals(password)) {\n+            token = createToken(userName, password, subscriptionId, subscriptionKey, creditBureauId);\n+        } else {\n+            throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                    \"Credit Bureau Configuration is not available\");\n+        }\n+\n+        // will use only \"NRC\" part of code from common http method to get data based on nrc\n+        String process = \"NRC\";\n+        CreditBureauConfiguration SearchURL = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"searchurl\");", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MjM1NQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519482355", "bodyText": "extract this logic in method. Can we validate uniqueId, instead of depending on IndexOutOfBoundsExcp", "author": "nikpawar89", "createdAt": "2020-11-08T21:54:53Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+@Service\n+public class ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl implements ThitsaWorksCreditBureauIntegrationWritePlatformService {\n+\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl(final PlatformSecurityContext context,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.class);\n+\n+    @Transactional\n+    @Override\n+    public String httpConnectionMethod(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        String result = null;\n+\n+        try {\n+            String post_params = null;\n+            HttpURLConnection httpConnection = this.process(process, nrcID, userName, password, subscriptionKey, subscriptionId, url, token,\n+                    uniqueID, report);\n+\n+            if (process.equals(\"token\")) {\n+                post_params = \"\" + \"BODY=x-www-form-urlencoded&\\r\" + \"grant_type=password&\\r\" + \"userName=\" + userName + \"&\\r\" + \"password=\"\n+                        + password + \"&\\r\";\n+            } else if (process.equals(\"NRC\")) {\n+\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcID + \"&\";\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                post_params = \"BODY=formdata&\" + report + \"&\" + \"userName=\" + userName + \"&\";\n+            }\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                httpConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set is required only for (POST METHOD)- fetching uniqueID from NRC/Creating Token/Add Credit report\n+            if (process.equals(\"NRC\") || process.equals(\"token\") || process.equals(\"UploadCreditReport\")) {\n+                httpConnection.setDoOutput(true);\n+                OutputStream os = httpConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+            }\n+\n+            result = this.httpResponse(httpConnection);\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+\n+    }\n+\n+    private HttpURLConnection process(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        HttpURLConnection httpConnection = null;\n+\n+        try {\n+            if (process.equals(\"token\")) {\n+\n+                URL tokenurl = new URL(url);\n+                httpConnection = (HttpURLConnection) tokenurl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+\n+                URL NrcURL = new URL(url + nrcID);\n+                httpConnection = (HttpURLConnection) NrcURL.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"CreditReport\")) {\n+\n+                URL CreditReportURL = new URL(url + uniqueID);\n+                httpConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                httpConnection.setRequestMethod(\"GET\");\n+\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                URL addCreditReporturl = new URL(url);\n+                httpConnection = (HttpURLConnection) addCreditReporturl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            // common set of headers\n+            httpConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            httpConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            httpConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return httpConnection;\n+    }\n+\n+    public String httpResponse(HttpURLConnection httpConnection) {\n+\n+        String result = null; // return type of this method\n+        try {\n+            int responseCode = httpConnection.getResponseCode();\n+\n+            StringBuilder response = new StringBuilder();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+\n+                BufferedReader in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream(), StandardCharsets.UTF_8));\n+\n+                String readLine = null;\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+                LOG.info(\"----- result-----{}\", result);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_UNAUTHORIZED\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_FORBIDDEN\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+    }\n+\n+    @Transactional\n+    @Override\n+    @SuppressWarnings(\"StringSplitter\")\n+    public CreditReportData getCreditReportFromThitsaWorks(final JsonCommand command) {\n+\n+        this.context.authenticatedUser();\n+        String nrcId = command.stringValueOfParameterNamed(\"NRC\");\n+        String bureauID = command.stringValueOfParameterNamed(\"creditBureauID\");\n+        Integer creditBureauId = Integer.parseInt(bureauID);\n+\n+        CreditBureauConfiguration subscriptionIdData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionId\");\n+        CreditBureauConfiguration subscriptionKeyData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionKey\");\n+        CreditBureauConfiguration userNameData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Username\");\n+        CreditBureauConfiguration passwordData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Password\");\n+\n+        String subscriptionId = \"\";\n+        String subscriptionKey = \"\";\n+        String userName = \"\";\n+        String password = \"\";\n+\n+        try {\n+            subscriptionId = subscriptionIdData.getValue();\n+            subscriptionKey = subscriptionKeyData.getValue();\n+            userName = userNameData.getValue();\n+            password = passwordData.getValue();\n+        } catch (NullPointerException ex) {\n+            throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                    \"Credit Bureau Configuration is not available\" + ex);\n+        }\n+\n+        String token = null;\n+        if (!\"\".equals(subscriptionId) && !\"\".equals(subscriptionKey) && !\"\".equals(userName) && !\"\".equals(password)) {\n+            token = createToken(userName, password, subscriptionId, subscriptionKey, creditBureauId);\n+        } else {\n+            throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                    \"Credit Bureau Configuration is not available\");\n+        }\n+\n+        // will use only \"NRC\" part of code from common http method to get data based on nrc\n+        String process = \"NRC\";\n+        CreditBureauConfiguration SearchURL = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"searchurl\");\n+        String url = SearchURL.getValue();\n+        String result = this.httpConnectionMethod(process, nrcId, userName, password, subscriptionKey, subscriptionId, url, token, 0L,\n+                null);\n+\n+        // after fetching the data from httpconnection it will be come back here for fetching UniqueID from data\n+        if (process.equals(\"NRC\")) {\n+\n+            JsonObject reportObject = JsonParser.parseString(result).getAsJsonObject();\n+\n+            JsonElement element = reportObject.get(\"Data\");\n+\n+            if (element.isJsonNull()) {\n+                String ResponseMessage = reportObject.get(\"ResponseMessage\").getAsString();\n+                handleAPIIntegrityIssues(ResponseMessage);\n+            }\n+\n+            // to fetch the Unique ID from Result\n+            JsonObject jsonObject = JsonParser.parseString(result).getAsJsonObject();\n+            Long uniqueID = 0L;\n+            try {\n+                JsonArray jArray = jsonObject.getAsJsonArray(\"Data\");\n+                JsonObject jobject = jArray.get(0).getAsJsonObject();\n+                String uniqueIdString = jobject.get(\"UniqueID\").toString();", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTQ4MjUzMw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r519482533", "bodyText": "extract this repeating logic in method", "author": "nikpawar89", "createdAt": "2020-11-08T21:56:31Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,420 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonNull;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.HttpURLConnection;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Date;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfiguration;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauToken;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+@Service\n+public class ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl implements ThitsaWorksCreditBureauIntegrationWritePlatformService {\n+\n+    private final PlatformSecurityContext context;\n+    private final FromJsonHelper fromApiJsonHelper;\n+    private final TokenRepositoryWrapper tokenRepository;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer;\n+\n+    @Autowired\n+    public ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl(final PlatformSecurityContext context,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer) {\n+        this.context = context;\n+        this.tokenRepository = tokenRepository;\n+        this.configDataRepository = configDataRepository;\n+        this.fromApiJsonHelper = fromApiJsonHelper;\n+        this.fromApiJsonDeserializer = fromApiJsonDeserializer;\n+    }\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl.class);\n+\n+    @Transactional\n+    @Override\n+    public String httpConnectionMethod(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        String result = null;\n+\n+        try {\n+            String post_params = null;\n+            HttpURLConnection httpConnection = this.process(process, nrcID, userName, password, subscriptionKey, subscriptionId, url, token,\n+                    uniqueID, report);\n+\n+            if (process.equals(\"token\")) {\n+                post_params = \"\" + \"BODY=x-www-form-urlencoded&\\r\" + \"grant_type=password&\\r\" + \"userName=\" + userName + \"&\\r\" + \"password=\"\n+                        + password + \"&\\r\";\n+            } else if (process.equals(\"NRC\")) {\n+\n+                post_params = \"BODY=x-www-form-urlencoded&nrc=\" + nrcID + \"&\";\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                post_params = \"BODY=formdata&\" + report + \"&\" + \"userName=\" + userName + \"&\";\n+            }\n+\n+            // token header not used when creating token i.e. when token will be null\n+            if (token != null) {\n+                httpConnection.setRequestProperty(\"Authorization\", \"Bearer \" + token);\n+            }\n+\n+            // this set is required only for (POST METHOD)- fetching uniqueID from NRC/Creating Token/Add Credit report\n+            if (process.equals(\"NRC\") || process.equals(\"token\") || process.equals(\"UploadCreditReport\")) {\n+                httpConnection.setDoOutput(true);\n+                OutputStream os = httpConnection.getOutputStream();\n+                os.write(post_params.getBytes(StandardCharsets.UTF_8));\n+                os.flush();\n+                os.close();\n+            }\n+\n+            result = this.httpResponse(httpConnection);\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+\n+    }\n+\n+    private HttpURLConnection process(String process, String nrcID, String userName, String password, String subscriptionKey,\n+            String subscriptionId, String url, String token, Long uniqueID, File report) {\n+\n+        HttpURLConnection httpConnection = null;\n+\n+        try {\n+            if (process.equals(\"token\")) {\n+\n+                URL tokenurl = new URL(url);\n+                httpConnection = (HttpURLConnection) tokenurl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"NRC\")) {\n+\n+                URL NrcURL = new URL(url + nrcID);\n+                httpConnection = (HttpURLConnection) NrcURL.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+\n+            } else if (process.equals(\"CreditReport\")) {\n+\n+                URL CreditReportURL = new URL(url + uniqueID);\n+                httpConnection = (HttpURLConnection) CreditReportURL.openConnection();\n+                httpConnection.setRequestMethod(\"GET\");\n+\n+            } else if (process.equals(\"UploadCreditReport\")) {\n+\n+                URL addCreditReporturl = new URL(url);\n+                httpConnection = (HttpURLConnection) addCreditReporturl.openConnection();\n+                httpConnection.setRequestMethod(\"POST\");\n+            }\n+\n+            // common set of headers\n+            httpConnection.setRequestProperty(\"mcix-subscription-key\", subscriptionKey);\n+            httpConnection.setRequestProperty(\"mcix-subscription-id\", subscriptionId);\n+            httpConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return httpConnection;\n+    }\n+\n+    public String httpResponse(HttpURLConnection httpConnection) {\n+\n+        String result = null; // return type of this method\n+        try {\n+            int responseCode = httpConnection.getResponseCode();\n+\n+            StringBuilder response = new StringBuilder();\n+            if (responseCode == HttpURLConnection.HTTP_OK) {\n+                response = new StringBuilder();\n+\n+                LOG.info(\"----- RESPONSE OK-----\");\n+\n+                BufferedReader in = new BufferedReader(new InputStreamReader(httpConnection.getInputStream(), StandardCharsets.UTF_8));\n+\n+                String readLine = null;\n+                while ((readLine = in.readLine()) != null) {\n+                    response.append(readLine);\n+                }\n+                in.close();\n+                result = response.toString();\n+                LOG.info(\"----- result-----{}\", result);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_UNAUTHORIZED) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_UNAUTHORIZED\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else if (responseCode == HttpURLConnection.HTTP_FORBIDDEN) {\n+                LOG.info(\"-----IP FORBIDDEN-----\");\n+                String httpResponse = \"HTTP_FORBIDDEN\";\n+                this.handleAPIIntegrityIssues(httpResponse);\n+\n+            } else {\n+                LOG.info(\"Request is Invalid\");\n+            }\n+\n+        } catch (IOException e) {\n+            LOG.error(\"Error occured.\", e);\n+        }\n+        return result;\n+    }\n+\n+    @Transactional\n+    @Override\n+    @SuppressWarnings(\"StringSplitter\")\n+    public CreditReportData getCreditReportFromThitsaWorks(final JsonCommand command) {\n+\n+        this.context.authenticatedUser();\n+        String nrcId = command.stringValueOfParameterNamed(\"NRC\");\n+        String bureauID = command.stringValueOfParameterNamed(\"creditBureauID\");\n+        Integer creditBureauId = Integer.parseInt(bureauID);\n+\n+        CreditBureauConfiguration subscriptionIdData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionId\");\n+        CreditBureauConfiguration subscriptionKeyData = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                \"SubscriptionKey\");\n+        CreditBureauConfiguration userNameData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Username\");\n+        CreditBureauConfiguration passwordData = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"Password\");\n+\n+        String subscriptionId = \"\";\n+        String subscriptionKey = \"\";\n+        String userName = \"\";\n+        String password = \"\";\n+\n+        try {\n+            subscriptionId = subscriptionIdData.getValue();\n+            subscriptionKey = subscriptionKeyData.getValue();\n+            userName = userNameData.getValue();\n+            password = passwordData.getValue();\n+        } catch (NullPointerException ex) {\n+            throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                    \"Credit Bureau Configuration is not available\" + ex);\n+        }\n+\n+        String token = null;\n+        if (!\"\".equals(subscriptionId) && !\"\".equals(subscriptionKey) && !\"\".equals(userName) && !\"\".equals(password)) {\n+            token = createToken(userName, password, subscriptionId, subscriptionKey, creditBureauId);\n+        } else {\n+            throw new PlatformDataIntegrityException(\"Credit Bureau Configuration is not available\",\n+                    \"Credit Bureau Configuration is not available\");\n+        }\n+\n+        // will use only \"NRC\" part of code from common http method to get data based on nrc\n+        String process = \"NRC\";\n+        CreditBureauConfiguration SearchURL = this.configDataRepository.getCreditBureauConfigData(creditBureauId, \"searchurl\");\n+        String url = SearchURL.getValue();\n+        String result = this.httpConnectionMethod(process, nrcId, userName, password, subscriptionKey, subscriptionId, url, token, 0L,\n+                null);\n+\n+        // after fetching the data from httpconnection it will be come back here for fetching UniqueID from data\n+        if (process.equals(\"NRC\")) {\n+\n+            JsonObject reportObject = JsonParser.parseString(result).getAsJsonObject();\n+\n+            JsonElement element = reportObject.get(\"Data\");\n+\n+            if (element.isJsonNull()) {\n+                String ResponseMessage = reportObject.get(\"ResponseMessage\").getAsString();\n+                handleAPIIntegrityIssues(ResponseMessage);\n+            }\n+\n+            // to fetch the Unique ID from Result\n+            JsonObject jsonObject = JsonParser.parseString(result).getAsJsonObject();\n+            Long uniqueID = 0L;\n+            try {\n+                JsonArray jArray = jsonObject.getAsJsonArray(\"Data\");\n+                JsonObject jobject = jArray.get(0).getAsJsonObject();\n+                String uniqueIdString = jobject.get(\"UniqueID\").toString();\n+\n+                String TrimUniqueId = uniqueIdString.substring(1, uniqueIdString.length() - 1);\n+                uniqueID = Long.parseLong(TrimUniqueId);\n+            } catch (IndexOutOfBoundsException e) {\n+                String ResponseMessage = reportObject.get(\"ResponseMessage\").getAsString();\n+                handleAPIIntegrityIssues(ResponseMessage);\n+            }\n+\n+            process = \"CreditReport\";\n+            CreditBureauConfiguration creditReportURL = this.configDataRepository.getCreditBureauConfigData(creditBureauId,\n+                    \"creditReporturl\");\n+            url = creditReportURL.getValue();\n+            result = this.httpConnectionMethod(process, nrcId, userName, password, subscriptionKey, subscriptionId, url, token, uniqueID,\n+                    null);\n+\n+        }\n+\n+        // after getting the result(creditreport) from httpconnection-response it will assign creditreport to generic\n+        // creditreportdata object\n+\n+        JsonObject reportObject = JsonParser.parseString(result).getAsJsonObject();\n+\n+        JsonObject borrowerInfos = null;\n+        String borrowerInfo = null;\n+        String CreditScore = null;\n+        String ActiveLoans = null;\n+        String PaidLoans = null;\n+\n+        // Credit Reports Stored into Generic CreditReportData\n+        JsonObject data = null;\n+        JsonElement element = reportObject.get(\"Data\");\n+\n+        if (!(element instanceof JsonNull)) { // NOTE : \"element instanceof JsonNull\" is for handling empty values (and\n+                                              // assigning null) while fetching data from results\n+            data = (JsonObject) element;\n+        }\n+\n+        borrowerInfo = null;\n+        element = data.get(\"BorrowerInfo\");\n+        if (!(element instanceof JsonNull)) {\n+            borrowerInfos = (JsonObject) element;", "originalCommit": "ccfdc2a8c8da9244116744073dc32ed576c93c24", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da27f6774005291b16d7b72a45af3e19cc682828", "url": "https://github.com/apache/fineract/commit/da27f6774005291b16d7b72a45af3e19cc682828", "message": "okHttp-library_and_refactor-code", "committedDate": "2020-11-29T08:16:37Z", "type": "forcePushed"}, {"oid": "2f904375b0cbcc772ad7665437679c21c31c12cd", "url": "https://github.com/apache/fineract/commit/2f904375b0cbcc772ad7665437679c21c31c12cd", "message": "okHttp-library_and_refactor-code", "committedDate": "2020-11-29T11:13:24Z", "type": "forcePushed"}, {"oid": "0fe911172b1b7113947d7f36cd8568773b8ac66d", "url": "https://github.com/apache/fineract/commit/0fe911172b1b7113947d7f36cd8568773b8ac66d", "message": "refactoring and test-cases added", "committedDate": "2020-12-14T19:49:43Z", "type": "forcePushed"}, {"oid": "429102e6f1caca4e8bee7878be01141d96c38a0a", "url": "https://github.com/apache/fineract/commit/429102e6f1caca4e8bee7878be01141d96c38a0a", "message": "refactoring and test-cases added", "committedDate": "2020-12-14T21:16:02Z", "type": "forcePushed"}, {"oid": "fdecb679032c0f2e0a151bab572c1ae3762c1e51", "url": "https://github.com/apache/fineract/commit/fdecb679032c0f2e0a151bab572c1ae3762c1e51", "message": "Credit_Bureau_Phase3 (FINERACT-734)", "committedDate": "2020-12-15T21:05:27Z", "type": "forcePushed"}, {"oid": "e31fa1f1ed89d9b1bce6e48125a36e06c035f578", "url": "https://github.com/apache/fineract/commit/e31fa1f1ed89d9b1bce6e48125a36e06c035f578", "message": "Credit_Bureau_Phase3 (FINERACT-734)", "committedDate": "2020-12-16T18:14:34Z", "type": "forcePushed"}, {"oid": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "url": "https://github.com/apache/fineract/commit/a92ac0ff5a725092eb954bcd411da9c8a981cb47", "message": "Credit_Bureau_Phase3 (FINERACT-734)", "committedDate": "2020-12-16T18:43:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTQyOQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546415429", "bodyText": "this should be fetch credit report not post", "author": "nikpawar89", "createdAt": "2020-12-20T18:59:43Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/api/CreditBureauIntegrationAPI.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.api;\n+\n+import com.google.gson.Gson;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.UriInfo;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.commands.service.PortfolioCommandSourceWritePlatformService;\n+import org.apache.fineract.infrastructure.core.api.ApiRequestParameterHelper;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.serialization.ApiRequestJsonSerializationSettings;\n+import org.apache.fineract.infrastructure.core.serialization.DefaultToApiJsonSerializer;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.service.CreditReportReadPlatformService;\n+import org.apache.fineract.infrastructure.creditbureau.service.CreditReportWritePlatformService;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+@Path(\"/creditBureauIntegration\")\n+@Component\n+@Scope(\"singleton\")\n+public class CreditBureauIntegrationAPI {\n+\n+    private static final Set<String> RESPONSE_DATA_PARAMETERS = new HashSet<>(Arrays.asList(\"id\", \"creditBureauId\", \"nrc\", \"creditReport\"));\n+\n+    private final PlatformSecurityContext context;\n+    private final DefaultToApiJsonSerializer<CreditReportData> toCreditReportApiJsonSerializer;\n+    private final PortfolioCommandSourceWritePlatformService commandsSourceWritePlatformService;\n+    private final ApiRequestParameterHelper apiRequestParameterHelper;\n+    private final CreditReportWritePlatformService creditReportWritePlatformService;\n+    private final CreditReportReadPlatformService creditReportReadPlatformService;\n+    private final DefaultToApiJsonSerializer<CreditReportData> toApiJsonSerializer;\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauIntegrationAPI.class);\n+\n+    @Autowired\n+    public CreditBureauIntegrationAPI(final PlatformSecurityContext context,\n+            final DefaultToApiJsonSerializer<CreditReportData> toCreditReportApiJsonSerializer,\n+            final PortfolioCommandSourceWritePlatformService commandsSourceWritePlatformService,\n+            final ApiRequestParameterHelper apiRequestParameterHelper,\n+            final CreditReportWritePlatformService creditReportWritePlatformService,\n+            final CreditReportReadPlatformService creditReportReadPlatformService,\n+            final DefaultToApiJsonSerializer<CreditReportData> toApiJsonSerializer) {\n+        this.context = context;\n+        this.toCreditReportApiJsonSerializer = toCreditReportApiJsonSerializer;\n+        this.commandsSourceWritePlatformService = commandsSourceWritePlatformService;\n+        this.apiRequestParameterHelper = apiRequestParameterHelper;\n+        this.creditReportWritePlatformService = creditReportWritePlatformService;\n+        this.creditReportReadPlatformService = creditReportReadPlatformService;\n+        this.toApiJsonSerializer = toApiJsonSerializer;\n+\n+    }\n+\n+    @POST\n+    @Path(\"creditReport\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String postCreditReport(@Context final UriInfo uriInfo, @RequestParam(\"params\") final Map<String, Object> params) {", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTE1NA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548881154", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-12-25T14:49:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTQyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTU4OA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546415588", "bodyText": "enum values should be all caps", "author": "nikpawar89", "createdAt": "2020-12-20T19:01:43Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/data/CreditBureauConfigurations.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.data;\n+\n+public enum CreditBureauConfigurations {\n+\n+    THITSAWORKS, subscriptionId, subscriptionKey, userName, password;", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MTE5MQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548881191", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-12-25T14:49:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTU4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTgxNg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546415816", "bodyText": "rename creditBureauID to creditReportID", "author": "nikpawar89", "createdAt": "2020-12-20T19:03:54Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/api/CreditBureauIntegrationAPI.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.api;\n+\n+import com.google.gson.Gson;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.UriInfo;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.commands.service.PortfolioCommandSourceWritePlatformService;\n+import org.apache.fineract.infrastructure.core.api.ApiRequestParameterHelper;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.serialization.ApiRequestJsonSerializationSettings;\n+import org.apache.fineract.infrastructure.core.serialization.DefaultToApiJsonSerializer;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.service.CreditReportReadPlatformService;\n+import org.apache.fineract.infrastructure.creditbureau.service.CreditReportWritePlatformService;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+@Path(\"/creditBureauIntegration\")\n+@Component\n+@Scope(\"singleton\")\n+public class CreditBureauIntegrationAPI {\n+\n+    private static final Set<String> RESPONSE_DATA_PARAMETERS = new HashSet<>(Arrays.asList(\"id\", \"creditBureauId\", \"nrc\", \"creditReport\"));\n+\n+    private final PlatformSecurityContext context;\n+    private final DefaultToApiJsonSerializer<CreditReportData> toCreditReportApiJsonSerializer;\n+    private final PortfolioCommandSourceWritePlatformService commandsSourceWritePlatformService;\n+    private final ApiRequestParameterHelper apiRequestParameterHelper;\n+    private final CreditReportWritePlatformService creditReportWritePlatformService;\n+    private final CreditReportReadPlatformService creditReportReadPlatformService;\n+    private final DefaultToApiJsonSerializer<CreditReportData> toApiJsonSerializer;\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauIntegrationAPI.class);\n+\n+    @Autowired\n+    public CreditBureauIntegrationAPI(final PlatformSecurityContext context,\n+            final DefaultToApiJsonSerializer<CreditReportData> toCreditReportApiJsonSerializer,\n+            final PortfolioCommandSourceWritePlatformService commandsSourceWritePlatformService,\n+            final ApiRequestParameterHelper apiRequestParameterHelper,\n+            final CreditReportWritePlatformService creditReportWritePlatformService,\n+            final CreditReportReadPlatformService creditReportReadPlatformService,\n+            final DefaultToApiJsonSerializer<CreditReportData> toApiJsonSerializer) {\n+        this.context = context;\n+        this.toCreditReportApiJsonSerializer = toCreditReportApiJsonSerializer;\n+        this.commandsSourceWritePlatformService = commandsSourceWritePlatformService;\n+        this.apiRequestParameterHelper = apiRequestParameterHelper;\n+        this.creditReportWritePlatformService = creditReportWritePlatformService;\n+        this.creditReportReadPlatformService = creditReportReadPlatformService;\n+        this.toApiJsonSerializer = toApiJsonSerializer;\n+\n+    }\n+\n+    @POST\n+    @Path(\"creditReport\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String postCreditReport(@Context final UriInfo uriInfo, @RequestParam(\"params\") final Map<String, Object> params) {\n+\n+        Gson gson = new Gson();\n+        final String json = gson.toJson(params);\n+        final CommandWrapper commandRequest = new CommandWrapperBuilder().getCreditReport().withJson(json).build();\n+\n+        final CommandProcessingResult result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n+        return this.toCreditReportApiJsonSerializer.serialize(result);\n+\n+    }\n+\n+    // saves fetched-creditreport into database\n+    @POST\n+    @Path(\"saveCreditReport\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String saveCreditReport(@Parameter(hidden = true) final String apiRequestBodyAsJson,\n+            @QueryParam(\"creditBureauId\") @Parameter(description = \"creditBureauId\") final Long creditBureauId,\n+            @QueryParam(\"creditReportNumber\") @Parameter(description = \"creditReportNumber\") final String creditReportNumber) {\n+\n+        final CommandWrapper commandRequest = new CommandWrapperBuilder() //\n+                .saveCreditReport(creditBureauId, creditReportNumber) // creditReportNumber is a NRC number for\n+                                                                      // Thitsawork\n+                .withJson(apiRequestBodyAsJson) // apiRequestBodyAsJson is a creditReport\n+                .build(); //\n+\n+        final CommandProcessingResult result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n+        return this.toCreditReportApiJsonSerializer.serialize(result);\n+\n+    }\n+\n+    // fetch saved creditReports(NRC) from DB by creditBureauId, to select for downloading and deleting the reports\n+    @GET\n+    @Path(\"creditReport/{creditBureauId}\")", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MjE3NA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548882174", "bodyText": "To get the details of the credit report specifically of that credit bureau, we are using creditBureauId, It fetches the credit report details like (national Id/NRC) to check whether that specific credit report has been stored or not in the database.", "author": "rrpawar96", "createdAt": "2020-12-25T14:59:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTgxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTg1NQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546415855", "bodyText": "rename creditBureauID to creditReportID", "author": "nikpawar89", "createdAt": "2020-12-20T19:04:21Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/api/CreditBureauIntegrationAPI.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.api;\n+\n+import com.google.gson.Gson;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.Context;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.UriInfo;\n+import org.apache.fineract.commands.domain.CommandWrapper;\n+import org.apache.fineract.commands.service.CommandWrapperBuilder;\n+import org.apache.fineract.commands.service.PortfolioCommandSourceWritePlatformService;\n+import org.apache.fineract.infrastructure.core.api.ApiRequestParameterHelper;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.serialization.ApiRequestJsonSerializationSettings;\n+import org.apache.fineract.infrastructure.core.serialization.DefaultToApiJsonSerializer;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditReportData;\n+import org.apache.fineract.infrastructure.creditbureau.service.CreditReportReadPlatformService;\n+import org.apache.fineract.infrastructure.creditbureau.service.CreditReportWritePlatformService;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+@Path(\"/creditBureauIntegration\")\n+@Component\n+@Scope(\"singleton\")\n+public class CreditBureauIntegrationAPI {\n+\n+    private static final Set<String> RESPONSE_DATA_PARAMETERS = new HashSet<>(Arrays.asList(\"id\", \"creditBureauId\", \"nrc\", \"creditReport\"));\n+\n+    private final PlatformSecurityContext context;\n+    private final DefaultToApiJsonSerializer<CreditReportData> toCreditReportApiJsonSerializer;\n+    private final PortfolioCommandSourceWritePlatformService commandsSourceWritePlatformService;\n+    private final ApiRequestParameterHelper apiRequestParameterHelper;\n+    private final CreditReportWritePlatformService creditReportWritePlatformService;\n+    private final CreditReportReadPlatformService creditReportReadPlatformService;\n+    private final DefaultToApiJsonSerializer<CreditReportData> toApiJsonSerializer;\n+    private static final Logger LOG = LoggerFactory.getLogger(CreditBureauIntegrationAPI.class);\n+\n+    @Autowired\n+    public CreditBureauIntegrationAPI(final PlatformSecurityContext context,\n+            final DefaultToApiJsonSerializer<CreditReportData> toCreditReportApiJsonSerializer,\n+            final PortfolioCommandSourceWritePlatformService commandsSourceWritePlatformService,\n+            final ApiRequestParameterHelper apiRequestParameterHelper,\n+            final CreditReportWritePlatformService creditReportWritePlatformService,\n+            final CreditReportReadPlatformService creditReportReadPlatformService,\n+            final DefaultToApiJsonSerializer<CreditReportData> toApiJsonSerializer) {\n+        this.context = context;\n+        this.toCreditReportApiJsonSerializer = toCreditReportApiJsonSerializer;\n+        this.commandsSourceWritePlatformService = commandsSourceWritePlatformService;\n+        this.apiRequestParameterHelper = apiRequestParameterHelper;\n+        this.creditReportWritePlatformService = creditReportWritePlatformService;\n+        this.creditReportReadPlatformService = creditReportReadPlatformService;\n+        this.toApiJsonSerializer = toApiJsonSerializer;\n+\n+    }\n+\n+    @POST\n+    @Path(\"creditReport\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String postCreditReport(@Context final UriInfo uriInfo, @RequestParam(\"params\") final Map<String, Object> params) {\n+\n+        Gson gson = new Gson();\n+        final String json = gson.toJson(params);\n+        final CommandWrapper commandRequest = new CommandWrapperBuilder().getCreditReport().withJson(json).build();\n+\n+        final CommandProcessingResult result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n+        return this.toCreditReportApiJsonSerializer.serialize(result);\n+\n+    }\n+\n+    // saves fetched-creditreport into database\n+    @POST\n+    @Path(\"saveCreditReport\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String saveCreditReport(@Parameter(hidden = true) final String apiRequestBodyAsJson,\n+            @QueryParam(\"creditBureauId\") @Parameter(description = \"creditBureauId\") final Long creditBureauId,\n+            @QueryParam(\"creditReportNumber\") @Parameter(description = \"creditReportNumber\") final String creditReportNumber) {\n+\n+        final CommandWrapper commandRequest = new CommandWrapperBuilder() //\n+                .saveCreditReport(creditBureauId, creditReportNumber) // creditReportNumber is a NRC number for\n+                                                                      // Thitsawork\n+                .withJson(apiRequestBodyAsJson) // apiRequestBodyAsJson is a creditReport\n+                .build(); //\n+\n+        final CommandProcessingResult result = this.commandsSourceWritePlatformService.logCommandSource(commandRequest);\n+        return this.toCreditReportApiJsonSerializer.serialize(result);\n+\n+    }\n+\n+    // fetch saved creditReports(NRC) from DB by creditBureauId, to select for downloading and deleting the reports\n+    @GET\n+    @Path(\"creditReport/{creditBureauId}\")\n+    @Consumes({ MediaType.APPLICATION_JSON })\n+    @Produces({ MediaType.APPLICATION_JSON })\n+    public String getSavedCreditReport(@PathParam(\"creditBureauId\") @Parameter(description = \"creditBureauId\") final Long creditBureauId,\n+            @Context final UriInfo uriInfo) {\n+\n+        this.context.authenticatedUser();\n+\n+        final Collection<CreditReportData> creditReport = this.creditReportReadPlatformService.retrieveCreditReport(creditBureauId);\n+\n+        final ApiRequestJsonSerializationSettings settings = this.apiRequestParameterHelper.process(uriInfo.getQueryParameters());\n+        return this.toApiJsonSerializer.serialize(settings, creditReport, RESPONSE_DATA_PARAMETERS);\n+\n+    }\n+\n+    // deletes saved creditReports from database\n+    @DELETE\n+    @Path(\"deleteCreditReport/{creditBureauId}\")", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MzE4Mg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548883182", "bodyText": "we will need two parameters(creditBureauId/nationalId) to delete the saved CreditReports in database. So creditBureauId is passing from pathparam and nationalId is passing from body", "author": "rrpawar96", "createdAt": "2020-12-25T15:10:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTg1NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQxNzk2Nw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r549417967", "bodyText": "alright", "author": "nikpawar89", "createdAt": "2020-12-28T17:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNTg1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNjE2MA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546416160", "bodyText": "is this plain string or do you want to put this in array or some collection?", "author": "nikpawar89", "createdAt": "2020-12-20T19:06:54Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/data/CreditBureauReportData.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.data;\n+\n+import java.io.Serializable;\n+\n+public final class CreditBureauReportData implements Serializable {\n+\n+    @SuppressWarnings(\"unused\")\n+    private final String name;\n+\n+    private final String gender;\n+\n+    private final String address;\n+\n+    private final String creditScore;\n+\n+    private final String borrowerInfo;\n+\n+    private final String activeLoans;", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MjQ0Mg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548882442", "bodyText": "Comment Addressed. Implemented String[] instead of Plain String", "author": "rrpawar96", "createdAt": "2020-12-25T15:02:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNjE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNjQxOA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546416418", "bodyText": "same here, this could be multiple accounts, so you may want to put it in array/collections. You may also rename this to closedAccounts and rename activeLoans to openAccounts. I am fine if you don't rename it.", "author": "nikpawar89", "createdAt": "2020-12-20T19:09:30Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/data/CreditBureauReportData.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.data;\n+\n+import java.io.Serializable;\n+\n+public final class CreditBureauReportData implements Serializable {\n+\n+    @SuppressWarnings(\"unused\")\n+    private final String name;\n+\n+    private final String gender;\n+\n+    private final String address;\n+\n+    private final String creditScore;\n+\n+    private final String borrowerInfo;\n+\n+    private final String activeLoans;\n+\n+    private final String paidLoans;", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MjUyMA==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548882520", "bodyText": "Comment Addressed. Implemented String[] instead of Plain String and renamed the parameters to openAccounts and closedAccounts", "author": "rrpawar96", "createdAt": "2020-12-25T15:03:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNjQxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNjQ2OQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546416469", "bodyText": "remove commented code.", "author": "nikpawar89", "createdAt": "2020-12-20T19:09:57Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/data/CreditBureauReportData.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.fineract.infrastructure.creditbureau.data;\n+\n+import java.io.Serializable;\n+\n+public final class CreditBureauReportData implements Serializable {\n+\n+    @SuppressWarnings(\"unused\")\n+    private final String name;\n+\n+    private final String gender;\n+\n+    private final String address;\n+\n+    private final String creditScore;\n+\n+    private final String borrowerInfo;\n+\n+    private final String activeLoans;\n+\n+    private final String paidLoans;\n+\n+    /*\n+     * private final Object borrowerInformation; private final Object creditScore; private final Object activeLoans;", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNjgwMw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546416803", "bodyText": "I don't see we are retrieving credit report.", "author": "nikpawar89", "createdAt": "2020-12-20T19:13:46Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/data/CreditReportReadPlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.data;\n+\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Collection;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.service.CreditReportReadPlatformService;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.jdbc.core.JdbcTemplate;\n+import org.springframework.jdbc.core.RowMapper;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class CreditReportReadPlatformServiceImpl implements CreditReportReadPlatformService {\n+\n+    private final JdbcTemplate jdbcTemplate;\n+    private final PlatformSecurityContext context;\n+\n+    @Autowired\n+    public CreditReportReadPlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource) {\n+        this.context = context;\n+        this.jdbcTemplate = new JdbcTemplate(dataSource);\n+    }\n+\n+    private static final class CreditReportDataMapper implements RowMapper<CreditReportData> {\n+\n+        public String schema() {\n+            return \" c.id as id, c.creditBureauId as creditBureauId , c.nrc as nrc from m_creditreport c \";\n+        }\n+\n+        @Override\n+        public CreditReportData mapRow(final ResultSet rs, @SuppressWarnings(\"unused\") final int rowNum) throws SQLException {\n+\n+            final Long id = rs.getLong(\"id\");\n+            final Long creditBureauId = rs.getLong(\"creditBureauId\");\n+            final String nrc = rs.getString(\"nrc\");\n+            // final byte[] creditReports = rs.getBytes(\"creditReports\");\n+\n+            return CreditReportData.instance(id, creditBureauId, nrc);// , creditReports);\n+        }\n+    }\n+\n+    @Override\n+    public Collection<CreditReportData> retrieveCreditReport(Long creditBureauId) {", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4Mjc3NQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548882775", "bodyText": "we are retreiving creditReportDetails, so to avoid confusion, renamed it from retrieveCreditReport to retrieveCreditReportDetails, will use this to download/delete creditReports in further enhancement.", "author": "rrpawar96", "createdAt": "2020-12-25T15:06:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNjgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNzQyMg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546417422", "bodyText": "you can rename nrc to nationalID to make it sound as generic", "author": "nikpawar89", "createdAt": "2020-12-20T19:18:51Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/domain/CreditReport.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.domain;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Table;\n+import org.apache.fineract.infrastructure.core.domain.AbstractPersistableCustom;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Entity\n+@Table(name = \"m_creditreport\")\n+public final class CreditReport extends AbstractPersistableCustom {\n+\n+    @Column(name = \"creditBureauId\")\n+    private Long creditBureauId;\n+\n+    @Column(name = \"nrc\")\n+    private String nrc;", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MjgwNQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548882805", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-12-25T15:06:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNzQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNzc2Mg==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546417762", "bodyText": "I think If you rename nrc to nationalID, I would say other credit bureaus would also have such a ID. So this can be generic as well. We may revisit this later, if we think this is not the case.", "author": "nikpawar89", "createdAt": "2020-12-20T19:22:41Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/domain/CreditReportRepository.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.domain;\n+\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n+\n+public interface CreditReportRepository extends JpaRepository<CreditReport, Long>, JpaSpecificationExecutor<CreditReport> {\n+\n+    @Query(\"SELECT creditBureauReport from CreditReport creditBureauReport where creditBureauReport.nrc = :nrc and creditBureauReport.creditBureauId = :creditBureauId \")\n+    CreditReport getThitsaWorksCreditReport(@Param(\"creditBureauId\") Long creditBureauId, @Param(\"nrc\") String nrc);", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MjgzNw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548882837", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-12-25T15:06:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxNzc2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxODk4NQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546418985", "bodyText": "I don't think you need to check if null here, it would always be null.", "author": "nikpawar89", "createdAt": "2020-12-20T19:34:23Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditReportWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.persistence.PersistenceException;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.data.ApiParameterError;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResultBuilder;\n+import org.apache.fineract.infrastructure.core.data.DataValidatorBuilder;\n+import org.apache.fineract.infrastructure.core.exception.PlatformApiDataValidationException;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureauConfigurations;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureauReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureau;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauLoanProductMappingRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReport;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReportRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.orm.jpa.JpaSystemException;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditReportWritePlatformServiceImpl implements CreditReportWritePlatformService {\n+\n+    private final PlatformSecurityContext context;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauRepository creditBureauRepository;\n+    private final CreditReportRepository creditReportRepository;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl thitsaWorksCreditBureauIntegrationWritePlatformServiceImpl;\n+    private final List<ApiParameterError> dataValidationErrors = new ArrayList<>();\n+    private final DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors)\n+            .resource(\"creditBureauIntegration\");\n+\n+    @Autowired\n+    public CreditReportWritePlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer,\n+            final CreditBureauLoanProductMappingRepository loanProductMappingRepository,\n+            final CreditBureauRepository creditBureauRepository, final CreditReportRepository creditReportRepository,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl thitsaWorksCreditBureauIntegrationWritePlatformServiceImpl) {\n+        this.context = context;\n+        this.configDataRepository = configDataRepository;\n+        this.creditBureauRepository = creditBureauRepository;\n+        this.creditReportRepository = creditReportRepository;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformService = thitsaWorksCreditBureauIntegrationWritePlatformService;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformServiceImpl = thitsaWorksCreditBureauIntegrationWritePlatformServiceImpl;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult getCreditReport(JsonCommand command) {\n+\n+        try {\n+            Long creditBureauID = command.longValueOfParameterNamed(\"creditBureauID\");\n+\n+            Optional<String> creditBureauName = getCreditBureau(creditBureauID);\n+\n+            if (creditBureauName.isEmpty()) {\n+                baseDataValidator.reset().failWithCode(\"creditBureau.has.not.been.Integrated\");\n+                throw new PlatformApiDataValidationException(\"creditBureau.has.not.been.Integrated\", \"creditBureau.has.not.been.Integrated\",\n+                        dataValidationErrors);\n+            }\n+\n+            if (Objects.equals(creditBureauName.get(), CreditBureauConfigurations.THITSAWORKS.toString())) {\n+\n+                // CreditBureauToken creditBureauToken = this.thitsaWorksCreditBureauIntegrationWritePlatformService\n+                // .createToken(creditBureauID);\n+\n+                CreditBureauReportData reportobj = this.thitsaWorksCreditBureauIntegrationWritePlatformService\n+                        .getCreditReportFromThitsaWorks(command);\n+\n+                // return new\n+                // CommandProcessingResultBuilder().withCreditReport(reportobj).withCreditBureauToken(creditBureauToken).build();\n+                return new CommandProcessingResultBuilder().withCreditReport(reportobj).build();\n+            }\n+\n+            baseDataValidator.reset().failWithCode(\"creditBureau.has.not.been.Integrated\");\n+            throw new PlatformApiDataValidationException(\"creditBureau.has.not.been.Integrated\", \"creditBureau.has.not.been.Integrated\",\n+                    dataValidationErrors);\n+\n+        } catch (final DataIntegrityViolationException dve) {\n+            handleTokenDataIntegrityIssues(command, dve.getMostSpecificCause(), dve);\n+            return CommandProcessingResult.empty();\n+        } catch (final PersistenceException ee) {\n+            Throwable throwable = ExceptionUtils.getRootCause(ee.getCause());\n+            handleTokenDataIntegrityIssues(command, throwable, ee);\n+            return CommandProcessingResult.empty();\n+        }\n+\n+    }\n+\n+    private Optional<String> getCreditBureau(Long creditBureauID) {\n+\n+        if (creditBureauID != null) {\n+            Optional<CreditBureau> creditBureau = this.creditBureauRepository.findById(creditBureauID);\n+\n+            if (creditBureau.isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            return Optional.of(creditBureau.get().getName());\n+\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    // saving the fetched creditreport in database\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult saveCreditReport(Long creditBureauId, String creditReportNumber, JsonCommand command) {\n+\n+        try {\n+            this.context.authenticatedUser();\n+\n+            Optional<String> creditBureauName = getCreditBureau(creditBureauId);\n+            CreditReport creditReport = null;\n+\n+            if (Objects.equals(creditBureauName.get(), CreditBureauConfigurations.THITSAWORKS.toString())) {\n+\n+                creditReport = creditReportRepository.getThitsaWorksCreditReport(creditBureauId, creditReportNumber);\n+\n+                // checks whether the creditReport for same NRC was saved before. if yes, then deletes it and replaces\n+                // it with new one.\n+                if (creditReport != null) {\n+                    this.creditReportRepository.delete(creditReport);\n+                    creditReport = null;\n+                }\n+\n+                if (creditReport == null) {", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MjkxMQ==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548882911", "bodyText": "Comment Addressed.", "author": "rrpawar96", "createdAt": "2020-12-25T15:07:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxODk4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxOTE0Ng==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r546419146", "bodyText": "don't set it as null and remove the null check below", "author": "nikpawar89", "createdAt": "2020-12-20T19:35:48Z", "path": "fineract-provider/src/main/java/org/apache/fineract/infrastructure/creditbureau/service/CreditReportWritePlatformServiceImpl.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.fineract.infrastructure.creditbureau.service;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import javax.persistence.PersistenceException;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.fineract.infrastructure.core.api.JsonCommand;\n+import org.apache.fineract.infrastructure.core.data.ApiParameterError;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResult;\n+import org.apache.fineract.infrastructure.core.data.CommandProcessingResultBuilder;\n+import org.apache.fineract.infrastructure.core.data.DataValidatorBuilder;\n+import org.apache.fineract.infrastructure.core.exception.PlatformApiDataValidationException;\n+import org.apache.fineract.infrastructure.core.exception.PlatformDataIntegrityException;\n+import org.apache.fineract.infrastructure.core.serialization.FromJsonHelper;\n+import org.apache.fineract.infrastructure.core.service.RoutingDataSource;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureauConfigurations;\n+import org.apache.fineract.infrastructure.creditbureau.data.CreditBureauReportData;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureau;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauConfigurationRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauLoanProductMappingRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditBureauRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReport;\n+import org.apache.fineract.infrastructure.creditbureau.domain.CreditReportRepository;\n+import org.apache.fineract.infrastructure.creditbureau.domain.TokenRepositoryWrapper;\n+import org.apache.fineract.infrastructure.creditbureau.serialization.CreditBureauTokenCommandFromApiJsonDeserializer;\n+import org.apache.fineract.infrastructure.security.service.PlatformSecurityContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.orm.jpa.JpaSystemException;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Service\n+public class CreditReportWritePlatformServiceImpl implements CreditReportWritePlatformService {\n+\n+    private final PlatformSecurityContext context;\n+    private final CreditBureauConfigurationRepositoryWrapper configDataRepository;\n+    private final CreditBureauRepository creditBureauRepository;\n+    private final CreditReportRepository creditReportRepository;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService;\n+    private final ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl thitsaWorksCreditBureauIntegrationWritePlatformServiceImpl;\n+    private final List<ApiParameterError> dataValidationErrors = new ArrayList<>();\n+    private final DataValidatorBuilder baseDataValidator = new DataValidatorBuilder(dataValidationErrors)\n+            .resource(\"creditBureauIntegration\");\n+\n+    @Autowired\n+    public CreditReportWritePlatformServiceImpl(final PlatformSecurityContext context, final RoutingDataSource dataSource,\n+            final FromJsonHelper fromApiJsonHelper, final TokenRepositoryWrapper tokenRepository,\n+            final CreditBureauConfigurationRepositoryWrapper configDataRepository,\n+            final CreditBureauTokenCommandFromApiJsonDeserializer fromApiJsonDeserializer,\n+            final CreditBureauLoanProductMappingRepository loanProductMappingRepository,\n+            final CreditBureauRepository creditBureauRepository, final CreditReportRepository creditReportRepository,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformService thitsaWorksCreditBureauIntegrationWritePlatformService,\n+            final ThitsaWorksCreditBureauIntegrationWritePlatformServiceImpl thitsaWorksCreditBureauIntegrationWritePlatformServiceImpl) {\n+        this.context = context;\n+        this.configDataRepository = configDataRepository;\n+        this.creditBureauRepository = creditBureauRepository;\n+        this.creditReportRepository = creditReportRepository;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformService = thitsaWorksCreditBureauIntegrationWritePlatformService;\n+        this.thitsaWorksCreditBureauIntegrationWritePlatformServiceImpl = thitsaWorksCreditBureauIntegrationWritePlatformServiceImpl;\n+    }\n+\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult getCreditReport(JsonCommand command) {\n+\n+        try {\n+            Long creditBureauID = command.longValueOfParameterNamed(\"creditBureauID\");\n+\n+            Optional<String> creditBureauName = getCreditBureau(creditBureauID);\n+\n+            if (creditBureauName.isEmpty()) {\n+                baseDataValidator.reset().failWithCode(\"creditBureau.has.not.been.Integrated\");\n+                throw new PlatformApiDataValidationException(\"creditBureau.has.not.been.Integrated\", \"creditBureau.has.not.been.Integrated\",\n+                        dataValidationErrors);\n+            }\n+\n+            if (Objects.equals(creditBureauName.get(), CreditBureauConfigurations.THITSAWORKS.toString())) {\n+\n+                // CreditBureauToken creditBureauToken = this.thitsaWorksCreditBureauIntegrationWritePlatformService\n+                // .createToken(creditBureauID);\n+\n+                CreditBureauReportData reportobj = this.thitsaWorksCreditBureauIntegrationWritePlatformService\n+                        .getCreditReportFromThitsaWorks(command);\n+\n+                // return new\n+                // CommandProcessingResultBuilder().withCreditReport(reportobj).withCreditBureauToken(creditBureauToken).build();\n+                return new CommandProcessingResultBuilder().withCreditReport(reportobj).build();\n+            }\n+\n+            baseDataValidator.reset().failWithCode(\"creditBureau.has.not.been.Integrated\");\n+            throw new PlatformApiDataValidationException(\"creditBureau.has.not.been.Integrated\", \"creditBureau.has.not.been.Integrated\",\n+                    dataValidationErrors);\n+\n+        } catch (final DataIntegrityViolationException dve) {\n+            handleTokenDataIntegrityIssues(command, dve.getMostSpecificCause(), dve);\n+            return CommandProcessingResult.empty();\n+        } catch (final PersistenceException ee) {\n+            Throwable throwable = ExceptionUtils.getRootCause(ee.getCause());\n+            handleTokenDataIntegrityIssues(command, throwable, ee);\n+            return CommandProcessingResult.empty();\n+        }\n+\n+    }\n+\n+    private Optional<String> getCreditBureau(Long creditBureauID) {\n+\n+        if (creditBureauID != null) {\n+            Optional<CreditBureau> creditBureau = this.creditBureauRepository.findById(creditBureauID);\n+\n+            if (creditBureau.isEmpty()) {\n+                return Optional.empty();\n+            }\n+\n+            return Optional.of(creditBureau.get().getName());\n+\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    // saving the fetched creditreport in database\n+    @Override\n+    @Transactional\n+    public CommandProcessingResult saveCreditReport(Long creditBureauId, String creditReportNumber, JsonCommand command) {\n+\n+        try {\n+            this.context.authenticatedUser();\n+\n+            Optional<String> creditBureauName = getCreditBureau(creditBureauId);\n+            CreditReport creditReport = null;\n+\n+            if (Objects.equals(creditBureauName.get(), CreditBureauConfigurations.THITSAWORKS.toString())) {\n+\n+                creditReport = creditReportRepository.getThitsaWorksCreditReport(creditBureauId, creditReportNumber);\n+\n+                // checks whether the creditReport for same NRC was saved before. if yes, then deletes it and replaces\n+                // it with new one.\n+                if (creditReport != null) {\n+                    this.creditReportRepository.delete(creditReport);\n+                    creditReport = null;", "originalCommit": "a92ac0ff5a725092eb954bcd411da9c8a981cb47", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg4MjkzNw==", "url": "https://github.com/apache/fineract/pull/1235#discussion_r548882937", "bodyText": "comment addressed.", "author": "rrpawar96", "createdAt": "2020-12-25T15:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQxOTE0Ng=="}], "type": "inlineReview"}, {"oid": "50ff4871aa7f69f95a74c7d9de4199236e74581b", "url": "https://github.com/apache/fineract/commit/50ff4871aa7f69f95a74c7d9de4199236e74581b", "message": "renaming-and-stringarray", "committedDate": "2020-12-25T13:41:05Z", "type": "forcePushed"}, {"oid": "2b0e21b44c11ad5018207a47213111593c1525fd", "url": "https://github.com/apache/fineract/commit/2b0e21b44c11ad5018207a47213111593c1525fd", "message": "CreditBureau-Integration-Api-documentation", "committedDate": "2020-12-25T14:39:20Z", "type": "forcePushed"}, {"oid": "d7c36b20e8cde0347c4658a718727153479e7ffa", "url": "https://github.com/apache/fineract/commit/d7c36b20e8cde0347c4658a718727153479e7ffa", "message": "CreditBureau-Integration-Api-documentation", "committedDate": "2020-12-25T14:46:17Z", "type": "forcePushed"}, {"oid": "2f45a8bc26618a51dc6c892c731ddbcda4e62f9d", "url": "https://github.com/apache/fineract/commit/2f45a8bc26618a51dc6c892c731ddbcda4e62f9d", "message": "CreditBureau-Integration-Api-documentation", "committedDate": "2020-12-29T16:29:22Z", "type": "forcePushed"}, {"oid": "e24b32e6d858e68e81a48dea683623fabda610c6", "url": "https://github.com/apache/fineract/commit/e24b32e6d858e68e81a48dea683623fabda610c6", "message": "Credit_Bureau_Phase3 (FINERACT-734)", "committedDate": "2020-12-29T16:59:39Z", "type": "commit"}, {"oid": "bffbdb3d2b99b852ee3fd52a6f2894bf2535d32f", "url": "https://github.com/apache/fineract/commit/bffbdb3d2b99b852ee3fd52a6f2894bf2535d32f", "message": "CreditBureau-Integration-Api-documentation", "committedDate": "2020-12-29T16:59:40Z", "type": "commit"}, {"oid": "bffbdb3d2b99b852ee3fd52a6f2894bf2535d32f", "url": "https://github.com/apache/fineract/commit/bffbdb3d2b99b852ee3fd52a6f2894bf2535d32f", "message": "CreditBureau-Integration-Api-documentation", "committedDate": "2020-12-29T16:59:40Z", "type": "forcePushed"}]}