{"pr_number": 7861, "pr_title": "Provide global context for current user preferences.", "pr_createdAt": "2020-04-10T10:19:25Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/7861", "timeline": [{"oid": "85b6ccb8b675f4cac2d12ae94244ee1a38945659", "url": "https://github.com/Graylog2/graylog2-server/commit/85b6ccb8b675f4cac2d12ae94244ee1a38945659", "message": "Creating user preferences context and default provider.", "committedDate": "2020-04-10T11:00:16Z", "type": "commit"}, {"oid": "5ce3ac49fc954ad5d540800c8a1cd82c2eb18732", "url": "https://github.com/Graylog2/graylog2-server/commit/5ce3ac49fc954ad5d540800c8a1cd82c2eb18732", "message": "Use default user preferences provider to wrap when logged in.", "committedDate": "2020-04-10T11:00:17Z", "type": "commit"}, {"oid": "99672e70908d6109e0e5cbc8608a4c84b6e1ba3b", "url": "https://github.com/Graylog2/graylog2-server/commit/99672e70908d6109e0e5cbc8608a4c84b6e1ba3b", "message": "Make PreferencesStore use actions.", "committedDate": "2020-04-10T11:00:17Z", "type": "commit"}, {"oid": "4b46384e211f81bf1533594137b6d4bcbdd9fc51", "url": "https://github.com/Graylog2/graylog2-server/commit/4b46384e211f81bf1533594137b6d4bcbdd9fc51", "message": "Also export mocks with names usable in `jest.mock()` calls.", "committedDate": "2020-04-10T11:00:17Z", "type": "commit"}, {"oid": "615cb866ad583138b9fefca1fd675ac10594f87b", "url": "https://github.com/Graylog2/graylog2-server/commit/615cb866ad583138b9fefca1fd675ac10594f87b", "message": "Fix linter hints in `CombinedProviderMock`.", "committedDate": "2020-04-10T11:00:17Z", "type": "commit"}, {"oid": "40658eb569de1b658692d1ef61065fd1cd880e90", "url": "https://github.com/Graylog2/graylog2-server/commit/40658eb569de1b658692d1ef61065fd1cd880e90", "message": "Make `CurrentUserStore` reload when preferences are saved.", "committedDate": "2020-04-10T11:00:17Z", "type": "commit"}, {"oid": "a1502b86dd10b986a4d6dffcb09d27d40ce8cff2", "url": "https://github.com/Graylog2/graylog2-server/commit/a1502b86dd10b986a4d6dffcb09d27d40ce8cff2", "message": "Fixing linter hints.", "committedDate": "2020-04-10T11:02:59Z", "type": "commit"}, {"oid": "a1502b86dd10b986a4d6dffcb09d27d40ce8cff2", "url": "https://github.com/Graylog2/graylog2-server/commit/a1502b86dd10b986a4d6dffcb09d27d40ce8cff2", "message": "Fixing linter hints.", "committedDate": "2020-04-10T11:02:59Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwNzA0MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7861#discussion_r408107041", "bodyText": "What is the reason to use CombinedProvider.get( here? Compared with import CurrentUserStore from 'stores/users/CurrentUserStore'; the only difference is that using the CombinedProvider, preferences is not undefined initially.", "author": "linuspahl", "createdAt": "2020-04-14T12:46:02Z", "path": "graylog2-web-interface/src/contexts/CurrentUserPreferencesProvider.jsx", "diffHunk": "@@ -0,0 +1,27 @@\n+// @flow strict\n+import * as React from 'react';\n+import PropTypes from 'prop-types';\n+import { get } from 'lodash';\n+\n+import { useStore } from 'stores/connect';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import UserPreferencesContext from './UserPreferencesContext';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');", "originalCommit": "a1502b86dd10b986a4d6dffcb09d27d40ce8cff2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzAzOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7861#discussion_r408123039", "bodyText": "One thought regarding the placement, which does not require a change right now: At some point it will be very useful to wrap the <GraylogThemeProvider> with the <CurrentUserPreferencesProvider> to show a specific theme based on the user settings. But we can still adjust this when we have the need.", "author": "linuspahl", "createdAt": "2020-04-14T13:10:22Z", "path": "graylog2-web-interface/src/pages/LoggedInPage.jsx", "diffHunk": "@@ -1,10 +1,11 @@\n import React from 'react';\n import AppRouter from 'routing/AppRouter';\n+import CurrentUserPreferencesProvider from '../contexts/CurrentUserPreferencesProvider';\n \n-class LoggedInPage extends React.Component {\n-  render() {\n-    return <AppRouter />;\n-  }\n-}\n+const LoggedInPage = () => (\n+  <CurrentUserPreferencesProvider>\n+    <AppRouter />\n+  </CurrentUserPreferencesProvider>\n+);", "originalCommit": "a1502b86dd10b986a4d6dffcb09d27d40ce8cff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNjQ2MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7861#discussion_r408136461", "bodyText": "Good point!", "author": "dennisoelkers", "createdAt": "2020-04-14T13:29:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMzAzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzODcwMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7861#discussion_r408138701", "bodyText": "I guess it is a possible improvement for a follow up PR to replace the usage of StoreProviderMock and StoreMock in all our tests?", "author": "linuspahl", "createdAt": "2020-04-14T13:32:50Z", "path": "graylog2-web-interface/test/helpers/mocking/index.js", "diffHunk": "@@ -1,4 +1,7 @@\n export { default as CombinedProviderMock } from './CombinedProviderMock';\n+export { default as MockCombinedProvider } from './CombinedProviderMock';\n export { default as StoreMock } from './StoreMock';\n+export { default as MockStore } from './StoreMock';\n export { default as StoreProviderMock } from './StoreProviderMock';\n+export { default as MockStoreProvider } from './StoreProviderMock';\n export { default as asMock } from './AsMock';", "originalCommit": "a1502b86dd10b986a4d6dffcb09d27d40ce8cff2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE1MzYzNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7861#discussion_r408153636", "bodyText": "Yes, that was the plan. Good catch!", "author": "dennisoelkers", "createdAt": "2020-04-14T13:53:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzODcwMQ=="}], "type": "inlineReview"}]}