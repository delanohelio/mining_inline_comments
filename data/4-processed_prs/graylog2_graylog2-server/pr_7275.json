{"pr_number": 7275, "pr_title": "UrlWhitelist Contextual UI", "pr_createdAt": "2020-01-24T14:58:58Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/7275", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMjY3Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380212677", "bodyText": "Should we use createRef here?", "author": "kyleknighted", "createdAt": "2020-02-17T14:28:50Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,157 @@\n+// @flow\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { IfPermitted } from 'components/common';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  formType: string,\n+};\n+\n+\n+class URLWhitelistFormModal extends React.Component<Props, State> {\n+    configModal: ?BootstrapModalForm;\n+\n+    inputs = {};\n+\n+    static defaultProps = {\n+      newUrlEntry: '',\n+      onUpdate: () => {},\n+      configuration: {},\n+      formType: '',\n+    }\n+\n+    constructor(props) {\n+      super(props);\n+      this.state = {\n+        config: { entries: [], disabled: false },\n+        isValid: false,\n+      };\n+    }\n+\n+    componentDidMount() {\n+      const { currentUser: { permissions } } = this.props;\n+      if (PermissionsMixin.isPermitted(permissions, ['urlwhitelist:read'])) {\n+        ConfigurationsActions.listWhiteListConfig(URL_WHITELIST_CONFIG);\n+      }\n+    }\n+\n+\n+  _getConfig = (configType: string) => {\n+    const { configuration } = this.props;\n+    if (configuration && configuration[configType]) {\n+      return configuration[configType];\n+    }\n+    return null;\n+  }\n+\n+  _openModal = () => {\n+    if (this.configModal) {\n+      this.configModal.open();\n+    }\n+  }\n+\n+  _closeModal = () => {\n+    if (this.configModal) {\n+      this.configModal.close();\n+    }\n+  }\n+\n+  _saveConfig = (event) => {\n+    if (event) {\n+      event.preventDefault();\n+      event.stopPropagation();\n+    }\n+    const { onUpdate } = this.props;\n+    const { config, isValid } = this.state;\n+    if (isValid) {\n+      this._updateConfig(URL_WHITELIST_CONFIG, config).then(() => {\n+        onUpdate();\n+        this._closeModal();\n+      });\n+    }\n+  }\n+\n+  _update = (config, isValid) => {\n+    const updatedState = { config, isValid };\n+    this.setState(updatedState);\n+  }\n+\n+\n+  _resetConfig = () => {\n+\n+  }\n+\n+  _updateConfig = (configType, config) => {\n+    switch (configType) {\n+      case URL_WHITELIST_CONFIG:\n+        return ConfigurationsActions.updateWhitelist(configType, config);\n+      default:\n+        return ConfigurationsActions.update(configType, config);\n+    }\n+  };\n+\n+\n+  render() {\n+    const urlwhitelistConfig = this._getConfig(URL_WHITELIST_CONFIG);\n+    if (urlwhitelistConfig) {\n+      const { newUrlEntry, formType } = this.props;\n+      const initialConfig = { entries: [...urlwhitelistConfig.entries, { id: uuid(), title: '', value: newUrlEntry, type: formType || 'literal' }], disabled: urlwhitelistConfig.disabled };\n+      const { entries, disabled } = initialConfig;\n+      const { isValid } = this.state;\n+      return (\n+        <>\n+          <IfPermitted permissions=\"urlwhitelist:write\">\n+            <Button bsStyle=\"info\" bsSize=\"xs\" onClick={this._openModal}>Add to URL Whitelist</Button>\n+          </IfPermitted>\n+          <BootstrapModalForm ref={(configModal) => { this.configModal = configModal; }}", "originalCommit": "67ff2ecb909b6937cab45897d4c167f41feddcdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MDUzNA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380240534", "bodyText": "I agree with that. will change that.", "author": "ousmaneo", "createdAt": "2020-02-17T15:19:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxMjY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxNjU2MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380216561", "bodyText": "Appears to be a floating semicolon", "author": "kyleknighted", "createdAt": "2020-02-17T14:36:07Z", "path": "graylog2-web-interface/src/components/event-notifications/event-notification-types/HttpNotificationForm.jsx", "diffHunk": "@@ -12,9 +11,7 @@ class HttpNotificationForm extends React.Component {\n     onChange: PropTypes.func.isRequired,\n   };\n \n-  static defaultConfig = {\n-    url: '',\n-  };\n+  ;", "originalCommit": "67ff2ecb909b6937cab45897d4c167f41feddcdb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MDYxMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380240612", "bodyText": "fixed", "author": "ousmaneo", "createdAt": "2020-02-17T15:19:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIxNjU2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1MzE0Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380753146", "bodyText": "Since we don't use the result of new URL(), I guess we can remove the const.", "author": "edmundoa", "createdAt": "2020-02-18T15:39:53Z", "path": "graylog2-web-interface/src/util/URLUtils.js", "diffHunk": "@@ -41,17 +41,29 @@ const URLUtils = {\n   },\n   concatURLPath(...allArgs) {\n     const args = Array(allArgs.length);\n+    // eslint-disable-next-line no-plusplus\n     for (let i = 0; i < allArgs.length; i++) {\n       args[i] = allArgs[i];\n     }\n \n     const joinedPath = `/${args.join('/')}`;\n+    // eslint-disable-next-line no-useless-escape\n     return joinedPath.replace(/[\\/]+/g, '/');\n   },\n   areCredentialsInURLSupported() {\n     const browser = this.parser.getBrowser();\n     return browser.name !== 'IE' && browser.name !== 'Edge';\n   },\n-};\n+  isValidURL(str) {\n+    let isValid = true;\n+    try {\n+      // eslint-disable-next-line no-unused-vars\n+      const test = new URL(str);", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMzkxMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381903912", "bodyText": "ok", "author": "ousmaneo", "createdAt": "2020-02-20T10:14:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1MzE0Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1NTcwMw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380755703", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                UrlWhitelistCheck: () => { return { url: '/system/urlwhitelist/check' }; },\n          \n          \n            \n                urlWhitelistCheck: () => { return { url: '/system/urlwhitelist/check' }; },", "author": "edmundoa", "createdAt": "2020-02-18T15:43:37Z", "path": "graylog2-web-interface/src/routing/ApiRoutes.js", "diffHunk": "@@ -227,6 +227,8 @@ const ApiRoutes = {\n     substringTest: () => { return { url: '/tools/substring_tester' }; },\n     containsStringTest: () => { return { url: '/tools/contains_string_tester' }; },\n     lookupTableTest: () => { return { url: '/tools/lookup_table_tester' }; },\n+    UrlWhitelistCheck: () => { return { url: '/system/urlwhitelist/check' }; },", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1ODY3MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380758671", "bodyText": "We should use flow strict in the header\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // @flow\n          \n          \n            \n            // @flow strict", "author": "edmundoa", "createdAt": "2020-02-18T15:47:41Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc1ODgyOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380758829", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // @flow\n          \n          \n            \n            // @flow strict", "author": "edmundoa", "createdAt": "2020-02-18T15:47:54Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+// @flow", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NTE5Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380775196", "bodyText": "As far as I can see this method is not needed, we could use handleFormEvent directly.", "author": "edmundoa", "createdAt": "2020-02-18T16:11:26Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isError = () => currentValidationState === 'error';\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        setOwnValidationMessage(`URL ${suggestedUrl} is not whitelisted or not valid URL.`);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, formType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    UIUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  const handleChange = (event: SyntheticInputEvent<EventTarget>) => {", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg0NDU0MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381844540", "bodyText": "Agree, this is some code from the previous version where I was doing another thing in the handleChange. Fixed!", "author": "ousmaneo", "createdAt": "2020-02-20T08:23:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NTE5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NjI0Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380776243", "bodyText": "I think handleFormEvent is not descriptive of what the prop does. Since other inputs use onChange for this, I think it would be better to also use that name.", "author": "edmundoa", "createdAt": "2020-02-18T16:13:03Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5MzI4NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381893285", "bodyText": "Changed !", "author": "ousmaneo", "createdAt": "2020-02-20T09:55:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NjI0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NDU5MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380794590", "bodyText": "I have some troubles understanding parts of this code. I think we should try to use the callback directly with a fake event or make the callback support non-event values.", "author": "edmundoa", "createdAt": "2020-02-18T16:40:48Z", "path": "graylog2-web-interface/src/util/UIUtils.js", "diffHunk": "@@ -22,6 +22,16 @@ const UIUtils = {\n \n     return rect.top > 0 && rect.bottom > 0;\n   },\n+  triggerInput(urlInput) {", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NjM4Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r380796387", "bodyText": "This message is using an old URL when I'm editing the input:", "author": "edmundoa", "createdAt": "2020-02-18T16:43:38Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isError = () => currentValidationState === 'error';\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        setOwnValidationMessage(`URL ${suggestedUrl} is not whitelisted or not valid URL.`);", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3MTM4Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381871387", "bodyText": "Fixed", "author": "ousmaneo", "createdAt": "2020-02-20T09:16:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NjM4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE4ODc1NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381188754", "bodyText": "I think we should restrict the actual values that are accepted for this prop. I also think that the name could be more descriptive, something like urlType is clearer to me than formType.", "author": "edmundoa", "createdAt": "2020-02-19T10:00:35Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isError = () => currentValidationState === 'error';\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        setOwnValidationMessage(`URL ${suggestedUrl} is not whitelisted or not valid URL.`);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, formType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    UIUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  const handleChange = (event: SyntheticInputEvent<EventTarget>) => {\n+    handleFormEvent(event);\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();\n+  }, [url, validationState]);\n+\n+\n+  const addButton = isError() && !isWhitelisted ? <URLWhitelistFormModal newUrlEntry={suggestedUrl} onUpdate={onUpdate} formType={formType} /> : '';\n+  const helpMessage = <>{ownValidationMessage} {addButton}</>;\n+  return (\n+    <Input type=\"text\"\n+           id=\"url\"\n+           name=\"url\"\n+           label={label}\n+           ref={ref}\n+           autoFocus\n+           required\n+           onChange={handleChange}\n+           help={helpMessage}\n+           bsStyle={currentValidationState}\n+           value={url}\n+           labelClassName={labelClassName}\n+           wrapperClassName={wrapperClassName} />\n+  );\n+};\n+\n+URLWhitelistInput.propTypes = {\n+  label: PropTypes.string.isRequired,\n+  handleFormEvent: PropTypes.func.isRequired,\n+  validationState: PropTypes.string,\n+  validationMessage: PropTypes.oneOfType([\n+    PropTypes.object,\n+    PropTypes.string,\n+  ]),\n+  url: PropTypes.string,\n+  labelClassName: PropTypes.string,\n+  wrapperClassName: PropTypes.string,\n+  formType: PropTypes.string,", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDM1NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381190354", "bodyText": "The inline button there looks odd to me, maybe @kyleknighted has an idea to improve that a bit? Also I think we should treat differently the case when a URL is not in the whitelist, and when the URL is not valid.", "author": "edmundoa", "createdAt": "2020-02-19T10:03:23Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isError = () => currentValidationState === 'error';\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        setOwnValidationMessage(`URL ${suggestedUrl} is not whitelisted or not valid URL.`);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, formType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    UIUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  const handleChange = (event: SyntheticInputEvent<EventTarget>) => {\n+    handleFormEvent(event);\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();\n+  }, [url, validationState]);\n+\n+\n+  const addButton = isError() && !isWhitelisted ? <URLWhitelistFormModal newUrlEntry={suggestedUrl} onUpdate={onUpdate} formType={formType} /> : '';", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwNDM2OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r382004368", "bodyText": "@edmundoa What is the recommended way for validating a URL?\nIn my server host file I can add 127.0.0.1 foobar and then this is a valid URL, even though there is no dot com.\nwikipedi\u0430.org and wikipedia.org are both different thanks to Cyrillic and Latin homographs. So we can't really strip away everything that isn't a Latin letter.\nI'm not sure if we have any specific way to validate what a \"real\" URL is.\nAs for the button placement, I would probably need more insight on the entire flow & design of this feature to provide much feedback there.", "author": "kyleknighted", "createdAt": "2020-02-20T13:41:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjcwMTgzMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r382701832", "bodyText": "@kyleknighted this is not about ensuring a given URL is \"real\" or not, for what I have seen in the code, we consider a URL valid if new URL() does not throw an exception. So, for instance, a missing or wrong schema in the URL would do that.\nThe biggest concern I have is that users will see the message and try to put the URL in the whitelist. Then the form will complain that is not a valid URL, so it is kind of misleading when we could do that check in first place.\nRegarding the button, I think the alignment and spacing doesn't look right, and also the colours look kind of odd to me. Other than that I think it's fine.", "author": "edmundoa", "createdAt": "2020-02-21T17:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDM1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2ODMxMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r383768312", "bodyText": "Hi @edmundoa I added a fix to separate Url and Whitelist validation.", "author": "ousmaneo", "createdAt": "2020-02-25T09:49:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5MDM1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NDUzNw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381194537", "bodyText": "Since the URLWhitelistInput will be used in many different forms across the product, I think it should live somewhere else. Since some shared inputs are already in components/common, I would suggest moving it there.", "author": "edmundoa", "createdAt": "2020-02-19T10:10:39Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,122 @@\n+// @flow\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/configurations/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import UIUtils from 'util/UIUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  handleFormEvent: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  formType: string\n+}\n+const URLWhitelistInput = ({ label, handleFormEvent, validationMessage, validationState, url, labelClassName, wrapperClassName, formType }: Props) => {", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjA4NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381196085", "bodyText": "I'm not sure why we need to return true in here, could you please explain it? :)", "author": "edmundoa", "createdAt": "2020-02-19T10:13:25Z", "path": "graylog2-web-interface/src/components/configurations/UrlWhiteListForm.jsx", "diffHunk": "@@ -132,7 +134,7 @@ const UrlWhiteListForm = ({ urls, onUpdate, disabled }: Props) => {\n           <td>\n             <Input type=\"text\"\n                    id={`title-input${idx}`}\n-                   ref={(elem) => { inputs[`title${idx}`] = elem; }}\n+                   ref={(elem) => { inputs[`title${idx}`] = elem; return true; }}", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwNDg2Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r382004863", "bodyText": "And is it possible to use the createRef that I had mentioned in a previous comment?", "author": "kyleknighted", "createdAt": "2020-02-20T13:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjA4NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NDg0MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r382044841", "bodyText": "Hi @kyleknighted , these are dynamically created refs for the url whitelist from that's why I use callback ref.", "author": "ousmaneo", "createdAt": "2020-02-20T14:47:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjA4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5NjE3OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381196178", "bodyText": "Same as above.", "author": "edmundoa", "createdAt": "2020-02-19T10:13:33Z", "path": "graylog2-web-interface/src/components/configurations/UrlWhiteListForm.jsx", "diffHunk": "@@ -143,7 +145,7 @@ const UrlWhiteListForm = ({ urls, onUpdate, disabled }: Props) => {\n           <td>\n             <Input type=\"text\"\n                    id={`value-input${idx}`}\n-                   ref={(elem) => { inputs[`value${idx}`] = elem; }}\n+                   ref={(elem) => { inputs[`value${idx}`] = elem; return true; }}", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE5OTgwNQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381199805", "bodyText": "Most of the code in this component should be very similar to parts of what we have in UrlWhiteListConfig.jsx, I think we should try and make a single component doing this, so we can reuse it better whenever is needed.", "author": "edmundoa", "createdAt": "2020-02-19T10:20:09Z", "path": "graylog2-web-interface/src/components/configurations/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+// @flow\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { IfPermitted } from 'components/common';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  formType: string,\n+};\n+\n+\n+class URLWhitelistFormModal extends React.Component<Props, State> {", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMDQ1NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381200455", "bodyText": "This prop is marked as unused, do we really use it in the component or can we delete it?", "author": "edmundoa", "createdAt": "2020-02-19T10:21:17Z", "path": "graylog2-web-interface/src/components/lookup-tables/adapters/DSVHTTPAdapterFieldSet.jsx", "diffHunk": "@@ -107,4 +103,13 @@ const DSVHTTPAdapterFieldSet = ({ handleFormEvent, validationState, validationMe\n   );\n };\n \n+DSVHTTPAdapterFieldSet.propTypes = {\n+  config: PropTypes.object.isRequired,\n+  // eslint-disable-next-line react/no-unused-prop-types\n+  updateConfig: PropTypes.func.isRequired,", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NzI3OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381897279", "bodyText": "Fixed", "author": "ousmaneo", "createdAt": "2020-02-20T10:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwMDQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNDM1Mg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381204352", "bodyText": "When creating a new Data Adapter the whitelist check is returning errors before the field is set, but I think that should not happen.", "author": "edmundoa", "createdAt": "2020-02-19T10:28:19Z", "path": "graylog2-web-interface/src/components/lookup-tables/adapters/HTTPJSONPathAdapterFieldSet.jsx", "diffHunk": "@@ -17,46 +18,43 @@ class HTTPJSONPathAdapterFieldSet extends React.Component {\n   state = {};\n \n   onHTTPHeaderUpdate = (headers) => {\n-    const config = ObjectUtils.clone(this.props.config);\n-    config.headers = headers;\n-    this.props.updateConfig(config);\n+    const { config, updateConfig } = this.props;\n+    const configChange = ObjectUtils.clone(config);\n+    configChange.headers = headers;\n+    updateConfig(config);\n   };\n \n   render() {\n-    const { config } = this.props;\n+    const { config, handleFormEvent, validationMessage, validationState } = this.props;\n \n     return (\n       <fieldset>\n-        <Input type=\"text\"\n-               id=\"url\"\n-               name=\"url\"\n-               label=\"Lookup URL\"\n-               autoFocus\n-               required\n-               onChange={this.props.handleFormEvent}\n-               help={this.props.validationMessage('url', 'The URL for the lookup. (this is a template - see documentation)')}\n-               bsStyle={this.props.validationState('url')}\n-               value={config.url}\n-               labelClassName=\"col-sm-3\"\n-               wrapperClassName=\"col-sm-9\" />\n+        <URLWhitelistInput label=\"Lookup URL\"", "originalCommit": "707ed48ac346c0d6d5e085dffa30c9f2f5e5e00f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM2NjUyNw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381366527", "bodyText": "This is caused by the normal data adapters form validation not the whitelist check.\nData adapter validation happen on OnChange, on any of the field that need to be sent to the backend. Sending the data without any value in the other fields result in some params missing in the data that are sent causing this.", "author": "ousmaneo", "createdAt": "2020-02-19T15:57:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNDM1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5NzQyNw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r381897427", "bodyText": "I will create an issue for this", "author": "ousmaneo", "createdAt": "2020-02-20T10:02:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTIwNDM1Mg=="}], "type": "inlineReview"}, {"oid": "b0e07b4633d280f60f1db8803d8f465ad3f5edbe", "url": "https://github.com/Graylog2/graylog2-server/commit/b0e07b4633d280f60f1db8803d8f465ad3f5edbe", "message": "URLWhitelistInput component\n\nThis commit add a functionality that wrap a normal component to allow having a button to show UrlWhiteListForm in modal on validation error.\n\n* Implement URLWhitelistInput\n* Implement URLWhitelistFormModal", "committedDate": "2020-02-25T14:38:58Z", "type": "commit"}, {"oid": "c62a7f00ad26c70b6a3b17ef43102c4b7b723243", "url": "https://github.com/Graylog2/graylog2-server/commit/c62a7f00ad26c70b6a3b17ef43102c4b7b723243", "message": "Trigger validate on url added to whitelist", "committedDate": "2020-02-25T14:38:58Z", "type": "commit"}, {"oid": "e84e610041d2a78fe9fb0b54d8aaf0904dfbd06c", "url": "https://github.com/Graylog2/graylog2-server/commit/e84e610041d2a78fe9fb0b54d8aaf0904dfbd06c", "message": "Add check urlwhitelist to component on url change.\n\n* Add check whitelist url to ApiRoutes\n* Add checkIsWhitelisted to ToolsStore", "committedDate": "2020-02-25T14:38:58Z", "type": "commit"}, {"oid": "56f9d7ca34d05b3fd6a6dc1422a810081baa401e", "url": "https://github.com/Graylog2/graylog2-server/commit/56f9d7ca34d05b3fd6a6dc1422a810081baa401e", "message": "Replace Url Input with URLWhitelistInput\n\n* Use URLWhitelistInput in form that need url whitelist validation.\n* fix linter", "committedDate": "2020-02-25T14:38:58Z", "type": "commit"}, {"oid": "b0e56adcec14f6ea7ff77fd4198e0466b785644d", "url": "https://github.com/Graylog2/graylog2-server/commit/b0e56adcec14f6ea7ff77fd4198e0466b785644d", "message": "Remove unused variables", "committedDate": "2020-02-25T14:38:59Z", "type": "commit"}, {"oid": "81dbacbe5611f86198ffd2e8dfc418047b785649", "url": "https://github.com/Graylog2/graylog2-server/commit/81dbacbe5611f86198ffd2e8dfc418047b785649", "message": "Fix error Message on load", "committedDate": "2020-02-25T14:38:59Z", "type": "commit"}, {"oid": "9eef4bf0343abbc0d045242c7b335749f45e8a3e", "url": "https://github.com/Graylog2/graylog2-server/commit/9eef4bf0343abbc0d045242c7b335749f45e8a3e", "message": "Add API to generate a whitelist regex for a template URL\n\nExposes the regex generation logic previously only used in a migration\nto be used by the frontend to propose a regex for a URL template.", "committedDate": "2020-02-25T14:38:59Z", "type": "commit"}, {"oid": "640540156216d234502a5ab6de0dcf3dbc74278e", "url": "https://github.com/Graylog2/graylog2-server/commit/640540156216d234502a5ab6de0dcf3dbc74278e", "message": "Integrate regex suggestion for HTTPJSONPathAdapter\nThis commit will add Url suggestion for HTTP JSON Adpter using the\nURLWhitelist field.\n* Use generate_regex endpoint to suggest url whitelist entry for a url\ncontaining ${key}.\n* Validate entry on modal loaded.\n* Move triggerInput to utils.", "committedDate": "2020-02-25T14:38:59Z", "type": "commit"}, {"oid": "97c19b1eb97b07fc7181c068cd4c1aa8e35ecfaf", "url": "https://github.com/Graylog2/graylog2-server/commit/97c19b1eb97b07fc7181c068cd4c1aa8e35ecfaf", "message": "Add flow typing", "committedDate": "2020-02-25T14:38:59Z", "type": "commit"}, {"oid": "ad96d726c075abd6078ab253faf9debccc71cb89", "url": "https://github.com/Graylog2/graylog2-server/commit/ad96d726c075abd6078ab253faf9debccc71cb89", "message": "fix linter", "committedDate": "2020-02-25T14:39:00Z", "type": "commit"}, {"oid": "690cad27efab2e82647e9cbd7fb6556116ed8099", "url": "https://github.com/Graylog2/graylog2-server/commit/690cad27efab2e82647e9cbd7fb6556116ed8099", "message": "Fix propTypes validation and validate state update", "committedDate": "2020-02-25T14:39:00Z", "type": "commit"}, {"oid": "94ae6239bfbf2e19deb0feb63fbb3b0342c7451d", "url": "https://github.com/Graylog2/graylog2-server/commit/94ae6239bfbf2e19deb0feb63fbb3b0342c7451d", "message": "Fix newUrlEntry propType", "committedDate": "2020-02-25T14:39:00Z", "type": "commit"}, {"oid": "36c25b4b1326289e16579ea93405546c8cae8f87", "url": "https://github.com/Graylog2/graylog2-server/commit/36c25b4b1326289e16579ea93405546c8cae8f87", "message": "update snapshot", "committedDate": "2020-02-25T14:39:00Z", "type": "commit"}, {"oid": "b295684460c3e040075c48b0daedf07305e7a7cd", "url": "https://github.com/Graylog2/graylog2-server/commit/b295684460c3e040075c48b0daedf07305e7a7cd", "message": "use createRef instead of callback.", "committedDate": "2020-02-25T14:39:00Z", "type": "commit"}, {"oid": "8039ada66dd60bfcdf75e55b3754c083fbe17eae", "url": "https://github.com/Graylog2/graylog2-server/commit/8039ada66dd60bfcdf75e55b3754c083fbe17eae", "message": "Refactoring and small fixes", "committedDate": "2020-02-25T14:39:01Z", "type": "commit"}, {"oid": "136f7880fdc9efbe4384d9d7e1e56b7ea3506c1f", "url": "https://github.com/Graylog2/graylog2-server/commit/136f7880fdc9efbe4384d9d7e1e56b7ea3506c1f", "message": "Update graylog2-web-interface/src/components/configurations/URLWhitelistInput.jsx\r\n\r\nlegit\n\nCo-Authored-By: Edmundo Alvarez <edmundo@graylog.com>", "committedDate": "2020-02-25T14:39:01Z", "type": "commit"}, {"oid": "ceddc5c9ff342d9e12cd5db54884af06cdb5c757", "url": "https://github.com/Graylog2/graylog2-server/commit/ceddc5c9ff342d9e12cd5db54884af06cdb5c757", "message": "Update graylog2-web-interface/src/components/configurations/URLWhitelistFormModal.jsx\n\nCo-Authored-By: Edmundo Alvarez <edmundo@graylog.com>", "committedDate": "2020-02-25T14:39:01Z", "type": "commit"}, {"oid": "48d1555ffacad2f79af0f6714385a71e0dc3ab4c", "url": "https://github.com/Graylog2/graylog2-server/commit/48d1555ffacad2f79af0f6714385a71e0dc3ab4c", "message": "Update graylog2-web-interface/src/routing/ApiRoutes.js\n\nCo-Authored-By: Edmundo Alvarez <edmundo@graylog.com>", "committedDate": "2020-02-25T14:39:01Z", "type": "commit"}, {"oid": "27e43f3eb85e1b161259edb2d8cffc0a38eca97d", "url": "https://github.com/Graylog2/graylog2-server/commit/27e43f3eb85e1b161259edb2d8cffc0a38eca97d", "message": "Move URLWhitelistInput to common folder", "committedDate": "2020-02-25T14:39:01Z", "type": "commit"}, {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad", "url": "https://github.com/Graylog2/graylog2-server/commit/906ff88951652cfd84ddef6ef72975ffb82267ad", "message": "Add URL validation\n\n* check url validation and adjust message\n* Move UrlWhiteListModalForm to common", "committedDate": "2020-02-25T14:39:02Z", "type": "commit"}, {"oid": "906ff88951652cfd84ddef6ef72975ffb82267ad", "url": "https://github.com/Graylog2/graylog2-server/commit/906ff88951652cfd84ddef6ef72975ffb82267ad", "message": "Add URL validation\n\n* check url validation and adjust message\n* Move UrlWhiteListModalForm to common", "committedDate": "2020-02-25T14:39:02Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwODM3NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384408375", "bodyText": "We should add this component into components/common/index.jsx, so we can import it using the package, like other common components.", "author": "edmundoa", "createdAt": "2020-02-26T10:37:29Z", "path": "graylog2-web-interface/src/components/common/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,118 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/common/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhitelistInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {", "originalCommit": "906ff88951652cfd84ddef6ef72975ffb82267ad", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA0MzA4Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r385043087", "bodyText": "Done !", "author": "ousmaneo", "createdAt": "2020-02-27T10:36:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQwODM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQxNDQ5NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384414495", "bodyText": "I think this should not allow any string but list some options. I suggest using probably regex and literal.", "author": "edmundoa", "createdAt": "2020-02-26T10:48:31Z", "path": "graylog2-web-interface/src/components/common/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,118 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/common/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhitelistInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+        setOwnValidationMessage(message);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();\n+  }, [url, validationState]);\n+\n+\n+  const addButton = isWhitelistError() && !isWhitelisted ? <URLWhitelistFormModal newUrlEntry={suggestedUrl} onUpdate={onUpdate} urlType={urlType} /> : '';\n+  const helpMessage = <>{validationState === null ? ownValidationMessage : validationMessage} {addButton}</>;\n+  return (\n+    <Input type=\"text\"\n+           id=\"url\"\n+           name=\"url\"\n+           label={label}\n+           ref={ref}\n+           autoFocus\n+           required\n+           onChange={onChange}\n+           help={helpMessage}\n+           bsStyle={currentValidationState}\n+           value={url}\n+           labelClassName={labelClassName}\n+           wrapperClassName={wrapperClassName} />\n+  );\n+};\n+\n+URLWhitelistInput.propTypes = {\n+  label: PropTypes.string.isRequired,\n+  onChange: PropTypes.func.isRequired,\n+  validationState: PropTypes.string,\n+  validationMessage: PropTypes.oneOfType([\n+    PropTypes.object,\n+    PropTypes.string,\n+  ]),\n+  url: PropTypes.string,\n+  labelClassName: PropTypes.string,\n+  wrapperClassName: PropTypes.string,\n+  urlType: PropTypes.string,", "originalCommit": "906ff88951652cfd84ddef6ef72975ffb82267ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4NDY1OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384484659", "bodyText": "After looking at this effect again, I think it should actually be split into two different effects: one computing the suggestedUrl, one doing the whitelist check.\nThat way I think it will be clearer what each effect does, and will also let us do the whitelist check before the suggested URL is computed, since right now it doesn't seem to depend on its result.", "author": "edmundoa", "createdAt": "2020-02-26T13:17:04Z", "path": "graylog2-web-interface/src/components/common/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,118 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/common/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhitelistInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+        setOwnValidationMessage(message);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();", "originalCommit": "906ff88951652cfd84ddef6ef72975ffb82267ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ5NjYyMg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384496622", "bodyText": "I think the checkIsWhitelisted function should be added as dependency of the effect: https://reactjs.org/docs/hooks-faq.html#is-it-safe-to-omit-functions-from-the-list-of-dependencies", "author": "edmundoa", "createdAt": "2020-02-26T13:39:28Z", "path": "graylog2-web-interface/src/components/common/URLWhitelistInput.jsx", "diffHunk": "@@ -0,0 +1,118 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import URLWhitelistFormModal from 'components/common/URLWhitelistFormModal';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhitelistInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const handleCheckIsWhitelisted = () => {\n+    const promise = ToolsStore.urlWhiteListCheck(url);\n+    promise.then((result) => {\n+      if (!result.is_whitelisted && validationState === null) {\n+        setCurrentValidationState('error');\n+        const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+        setOwnValidationMessage(message);\n+      } else {\n+        setOwnValidationMessage(validationMessage);\n+        setCurrentValidationState(validationState);\n+      }\n+      setIsWhitelisted(result.is_whitelisted);\n+    });\n+  };\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+      if (typeof suggestion === 'object') {\n+        suggestion.then((result) => {\n+          setSuggestedUrl(result.regex);\n+          handleCheckIsWhitelisted();\n+        });\n+      } else {\n+        setSuggestedUrl(url);\n+        handleCheckIsWhitelisted();\n+      }\n+    }\n+  };\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    checkIsWhitelisted();\n+  }, [url, validationState]);", "originalCommit": "906ff88951652cfd84ddef6ef72975ffb82267ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU1MjgwOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384552809", "bodyText": "I guess we can remove this empty method.", "author": "edmundoa", "createdAt": "2020-02-26T15:08:04Z", "path": "graylog2-web-interface/src/components/common/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { IfPermitted } from 'components/common';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  urlType: string,\n+};\n+\n+\n+class URLWhitelistFormModal extends React.Component<Props, State> {\n+    configModal: ?BootstrapModalForm = React.createRef();\n+\n+    inputs = {};\n+\n+    static defaultProps = {\n+      newUrlEntry: '',\n+      onUpdate: () => {},\n+      configuration: {},\n+      urlType: '',\n+    }\n+\n+    constructor(props) {\n+      super(props);\n+      this.state = {\n+        config: { entries: [], disabled: false },\n+        isValid: false,\n+      };\n+      this.configModal = React.createRef();\n+    }\n+\n+    componentDidMount() {\n+      const { currentUser: { permissions } } = this.props;\n+      if (PermissionsMixin.isPermitted(permissions, ['urlwhitelist:read'])) {\n+        ConfigurationsActions.listWhiteListConfig(URL_WHITELIST_CONFIG);\n+      }\n+    }\n+\n+\n+  _getConfig = (configType: string) => {\n+    const { configuration } = this.props;\n+    if (configuration && configuration[configType]) {\n+      return configuration[configType];\n+    }\n+    return null;\n+  }\n+\n+  _openModal = () => {\n+    if (this.configModal) {\n+      this.configModal.current.open();\n+    }\n+  }\n+\n+  _closeModal = () => {\n+    if (this.configModal) {\n+      this.configModal.current.close();\n+    }\n+  }\n+\n+  _saveConfig = (event) => {\n+    if (event) {\n+      event.preventDefault();\n+      event.stopPropagation();\n+    }\n+    const { onUpdate } = this.props;\n+    const { config, isValid } = this.state;\n+    if (isValid) {\n+      this._updateConfig(URL_WHITELIST_CONFIG, config).then(() => {\n+        onUpdate();\n+        this._closeModal();\n+      });\n+    }\n+  }\n+\n+  _update = (config, isValid) => {\n+    const updatedState = { config, isValid };\n+    this.setState(updatedState);\n+  }\n+\n+\n+  _resetConfig = () => {", "originalCommit": "906ff88951652cfd84ddef6ef72975ffb82267ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU2NDU3Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r384564573", "bodyText": "For what I could understand about this component, URLWhitelistFormModal is holding the current state of the whitelist entries, but those are generated from props on render time and they only come into the state when URLWhitelistForm's onUpdate is called.\nThat works, but I think it goes against the React way of using a one-way data flow in your component hierarchy. I think initializing and keeping an up-to-date config state here would help us not relying on a child component updating to get the right state in this component.", "author": "edmundoa", "createdAt": "2020-02-26T15:24:45Z", "path": "graylog2-web-interface/src/components/common/URLWhitelistFormModal.jsx", "diffHunk": "@@ -0,0 +1,158 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { IfPermitted } from 'components/common';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  urlType: string,\n+};\n+\n+\n+class URLWhitelistFormModal extends React.Component<Props, State> {\n+    configModal: ?BootstrapModalForm = React.createRef();\n+\n+    inputs = {};\n+\n+    static defaultProps = {\n+      newUrlEntry: '',\n+      onUpdate: () => {},\n+      configuration: {},\n+      urlType: '',\n+    }\n+\n+    constructor(props) {\n+      super(props);\n+      this.state = {\n+        config: { entries: [], disabled: false },", "originalCommit": "906ff88951652cfd84ddef6ef72975ffb82267ad", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a3c045983812b0dec86c8196670c0fb5e4e8b5ee", "url": "https://github.com/Graylog2/graylog2-server/commit/a3c045983812b0dec86c8196670c0fb5e4e8b5ee", "message": "Refactoring and bug fixes\n\n* Add UrlWhitelistInput and URLWhitelistFormModal to index.js\n* remove unused function\n* Separate whitelischeck and regex suggestion effect hooks", "committedDate": "2020-02-27T13:19:35Z", "type": "commit"}, {"oid": "0ac5b5356cd5c395ae2993174e64ef80d16092bc", "url": "https://github.com/Graylog2/graylog2-server/commit/0ac5b5356cd5c395ae2993174e64ef80d16092bc", "message": "Merge branch 'master' into url-whitelist-contextual-ui", "committedDate": "2020-02-28T12:48:11Z", "type": "commit"}, {"oid": "afa81c140e4302a47c37c605be4509bc0c019e4d", "url": "https://github.com/Graylog2/graylog2-server/commit/afa81c140e4302a47c37c605be4509bc0c019e4d", "message": "Refactoring and use state in UrlWhiteListFormModal\n\n* use state instead of props to get the urlwhitelist\n* add UrlWhitelistInput and URLWhitelistFormModal to index.js in\ncomponent/common\n* Fix linter", "committedDate": "2020-02-28T12:55:32Z", "type": "commit"}, {"oid": "22bb56a5ef83f2172a2e75849b785a665fafaeec", "url": "https://github.com/Graylog2/graylog2-server/commit/22bb56a5ef83f2172a2e75849b785a665fafaeec", "message": " Rename files", "committedDate": "2020-02-28T13:58:05Z", "type": "commit"}, {"oid": "e46276de685d52c5e9de8d7a64130b9b2b0bcbea", "url": "https://github.com/Graylog2/graylog2-server/commit/e46276de685d52c5e9de8d7a64130b9b2b0bcbea", "message": " add placholder for select and update snapshot", "committedDate": "2020-02-28T15:23:29Z", "type": "commit"}, {"oid": "3865669d30b157a61a1a376fd171f38beb147751", "url": "https://github.com/Graylog2/graylog2-server/commit/3865669d30b157a61a1a376fd171f38beb147751", "message": " Add timeout to debounce url check in Effect", "committedDate": "2020-03-02T13:29:20Z", "type": "commit"}, {"oid": "be9c5553ba3682b76158c891d40e6f223e129bbc", "url": "https://github.com/Graylog2/graylog2-server/commit/be9c5553ba3682b76158c891d40e6f223e129bbc", "message": " remove unsuded lodash debounce", "committedDate": "2020-03-02T13:31:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU2MzI5MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387563291", "bodyText": "This should also reflect the more strict values for urlType.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              urlType: string,\n          \n          \n            \n              urlType: 'regex' | 'literal',", "author": "edmundoa", "createdAt": "2020-03-04T10:05:16Z", "path": "graylog2-web-interface/src/components/common/URLWhiteListFormModal.jsx", "diffHunk": "@@ -0,0 +1,172 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+import IfPermitted from 'components/common/IfPermitted';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  urlType: string,", "originalCommit": "be9c5553ba3682b76158c891d40e6f223e129bbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDkwNQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387574905", "bodyText": "I would personally use lodash' debounce function to make clearer what we do here (and also removes the need for a clean-up function). This is a personal preference, though, so feel free to ignore it.", "author": "edmundoa", "createdAt": "2020-03-04T10:25:42Z", "path": "graylog2-web-interface/src/components/common/URLWhiteListInput.jsx", "diffHunk": "@@ -0,0 +1,124 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+import URLWhiteListFormModal from 'components/common/URLWhiteListFormModal';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhiteListInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const promise = ToolsStore.urlWhiteListCheck(url);\n+      promise.then((result) => {\n+        if (!result.is_whitelisted && validationState === null) {\n+          setCurrentValidationState('error');\n+          const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+          setOwnValidationMessage(message);\n+        } else {\n+          setOwnValidationMessage(validationMessage);\n+          setCurrentValidationState(validationState);\n+        }\n+        setIsWhitelisted(result.is_whitelisted);\n+      });\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    const checkSuggestion = () => {\n+      if (url) {\n+        const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+        if (typeof suggestion === 'object') {\n+          suggestion.then((result) => {\n+            setSuggestedUrl(result.regex);\n+          });\n+        } else {\n+          setSuggestedUrl(url);\n+        }\n+      }\n+    };\n+    const timer = setTimeout(() => checkSuggestion(), 500);", "originalCommit": "be9c5553ba3682b76158c891d40e6f223e129bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDk1Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387574956", "bodyText": "I think we should make the timeout a bit shorter, in other places we set it to 200 or 250 milliseconds, so the results appear a bit faster and we still don't fire on every change.", "author": "edmundoa", "createdAt": "2020-03-04T10:25:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDkwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3Mzg2NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r388173865", "bodyText": "I changed the timeout to 250 milliseconds, But as for the lodash debounce it was my first choice but it does not seems to work in React functional component, wrapping it with useCallback hook also does not help too.", "author": "ousmaneo", "createdAt": "2020-03-05T09:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NDkwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3NTA0Mg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387575042", "bodyText": "Same as above", "author": "edmundoa", "createdAt": "2020-03-04T10:25:54Z", "path": "graylog2-web-interface/src/components/common/URLWhiteListInput.jsx", "diffHunk": "@@ -0,0 +1,124 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import StoreProvider from 'injection/StoreProvider';\n+import URLUtils from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+import URLWhiteListFormModal from 'components/common/URLWhiteListFormModal';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhiteListInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && URLUtils.isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && URLUtils.isValidURL(url);\n+  const ref = useRef();\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const promise = ToolsStore.urlWhiteListCheck(url);\n+      promise.then((result) => {\n+        if (!result.is_whitelisted && validationState === null) {\n+          setCurrentValidationState('error');\n+          const message = URLUtils.isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n+          setOwnValidationMessage(message);\n+        } else {\n+          setOwnValidationMessage(validationMessage);\n+          setCurrentValidationState(validationState);\n+        }\n+        setIsWhitelisted(result.is_whitelisted);\n+      });\n+    }\n+  };\n+\n+\n+  const onUpdate = () => {\n+    FormsUtils.triggerInput(ref.current);\n+    checkIsWhitelisted();\n+  };\n+\n+  useEffect(() => {\n+    const checkSuggestion = () => {\n+      if (url) {\n+        const suggestion = suggestRegexWhitelistUrl(url, urlType);\n+        if (typeof suggestion === 'object') {\n+          suggestion.then((result) => {\n+            setSuggestedUrl(result.regex);\n+          });\n+        } else {\n+          setSuggestedUrl(url);\n+        }\n+      }\n+    };\n+    const timer = setTimeout(() => checkSuggestion(), 500);\n+    return () => clearTimeout(timer);\n+  }, [url]);\n+\n+  useEffect(() => {\n+    const timer = setTimeout(() => checkIsWhitelisted(), 500);", "originalCommit": "be9c5553ba3682b76158c891d40e6f223e129bbc", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3Njg2OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387576869", "bodyText": "We usually do module imports from components/common, so I would prefer\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import IfPermitted from 'components/common/IfPermitted';\n          \n          \n            \n            import { IfPermitted } from 'components/common';", "author": "edmundoa", "createdAt": "2020-03-04T10:29:08Z", "path": "graylog2-web-interface/src/components/common/URLWhiteListFormModal.jsx", "diffHunk": "@@ -0,0 +1,172 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+import IfPermitted from 'components/common/IfPermitted';", "originalCommit": "be9c5553ba3682b76158c891d40e6f223e129bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5MjI1OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r388892259", "bodyText": "As in UrlWhiteListForm, let's add a comment about the import style.", "author": "edmundoa", "createdAt": "2020-03-06T13:08:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3Njg2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3ODk4Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387578983", "bodyText": "There's an extra empty line here :)", "author": "edmundoa", "createdAt": "2020-03-04T10:32:59Z", "path": "graylog2-web-interface/src/components/common/URLWhiteListFormModal.jsx", "diffHunk": "@@ -0,0 +1,172 @@\n+// @flow strict\n+import React from 'react';\n+import PropTypes from 'prop-types';\n+import uuid from 'uuid/v4';\n+import connect from 'stores/connect';\n+import { Button } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import UrlWhiteListForm from 'components/configurations/UrlWhiteListForm';\n+import CombinedProvider from 'injection/CombinedProvider';\n+import PermissionsMixin from 'util/PermissionsMixin';\n+import type { WhiteListConfig } from 'stores/configurations/ConfigurationsStore';\n+import IfPermitted from 'components/common/IfPermitted';\n+\n+const { CurrentUserStore } = CombinedProvider.get('CurrentUser');\n+const { ConfigurationsActions, ConfigurationsStore } = CombinedProvider.get('Configurations');\n+\n+const URL_WHITELIST_CONFIG = 'org.graylog2.system.urlwhitelist.UrlWhitelist';\n+\n+type State = {\n+  config: WhiteListConfig,\n+  isValid: boolean\n+};\n+\n+type Props = {\n+  newUrlEntry: string,\n+  onUpdate: () => void,\n+  configuration: {},\n+  currentUser: {permissions: Array<string>},\n+  urlType: string,\n+};\n+\n+\n+class URLWhiteListFormModal extends React.Component<Props, State> {\n+    configModal: ?BootstrapModalForm = React.createRef();\n+\n+    inputs = {};\n+\n+    static defaultProps = {\n+      newUrlEntry: '',\n+      onUpdate: () => {},\n+      configuration: {},\n+      urlType: '',\n+    }\n+\n+    constructor(props) {\n+      super(props);\n+      this.state = {\n+        config: { entries: [], disabled: false },\n+        isValid: false,\n+      };\n+      this.configModal = React.createRef();\n+    }\n+\n+    componentDidMount() {\n+      const { currentUser: { permissions } } = this.props;\n+      if (PermissionsMixin.isPermitted(permissions, ['urlwhitelist:read'])) {\n+        ConfigurationsActions.listWhiteListConfig(URL_WHITELIST_CONFIG);\n+      }\n+    }\n+\n+", "originalCommit": "be9c5553ba3682b76158c891d40e6f223e129bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NDc0MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r388174740", "bodyText": "+1", "author": "ousmaneo", "createdAt": "2020-03-05T09:35:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU3ODk4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5MjE3MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387592171", "bodyText": "We usually do module imports from components/common, which would let us write these two imports in a more concise way.", "author": "edmundoa", "createdAt": "2020-03-04T10:57:34Z", "path": "graylog2-web-interface/src/components/configurations/UrlWhiteListForm.jsx", "diffHunk": "@@ -4,7 +4,8 @@ import PropTypes from 'prop-types';\n import uuid from 'uuid/v4';\n import { cloneDeep, debounce } from 'lodash';\n import Input from 'components/bootstrap/Input';\n-import { Select, Icon } from 'components/common';\n+import Select from 'components/common/Select';\n+import Icon from 'components/common/Icon';", "originalCommit": "be9c5553ba3682b76158c891d40e6f223e129bbc", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MDEyNA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r388180124", "bodyText": "That's what I was using but it resulted into eslint no circular dependency and I fixed it by having these self references explicit.", "author": "ousmaneo", "createdAt": "2020-03-05T09:44:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5MjE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5MjA0OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r388892049", "bodyText": "Alright, let's add a comment before them to clarify that.", "author": "edmundoa", "createdAt": "2020-03-06T13:07:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5MjE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5NzY0OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r387597648", "bodyText": "I still think this function (or a strip down version of it) should be called from the constructor, so the initial state comes from the given props and it's not empty.", "author": "edmundoa", "createdAt": "2020-03-04T11:08:37Z", "path": "graylog2-web-interface/src/components/common/URLWhitelistFormModal.jsx", "diffHunk": "@@ -59,7 +59,22 @@ class URLWhiteListFormModal extends React.Component<Props, State> {\n     }\n \n \n-  _getConfig = (configType: string) => {\n+    componentDidUpdate() {\n+      const { config: { entries } } = this.state;\n+      const urlwhitelistConfig = this._getConfig(URL_WHITELIST_CONFIG);\n+      if (urlwhitelistConfig && entries.length === 0) {\n+        this._setDefaultWhiteListState(urlwhitelistConfig);\n+      }\n+    }\n+\n+  _setDefaultWhiteListState =(urlwhitelistConfig) => {", "originalCommit": "afa81c140e4302a47c37c605be4509bc0c019e4d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5MzA3OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r388893079", "bodyText": "As we discussed, the data is fetched in componentDidMount() and setting a default state until then is fine.", "author": "edmundoa", "createdAt": "2020-03-06T13:10:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU5NzY0OA=="}], "type": "inlineReview"}, {"oid": "1913455cc245193261d117d55c21769ac3c559cd", "url": "https://github.com/Graylog2/graylog2-server/commit/1913455cc245193261d117d55c21769ac3c559cd", "message": "Merge branch 'master' into url-whitelist-contextual-ui", "committedDate": "2020-03-05T08:19:48Z", "type": "commit"}, {"oid": "6d968347c1b9ebbbad97b7e92a759a14eb2d596c", "url": "https://github.com/Graylog2/graylog2-server/commit/6d968347c1b9ebbbad97b7e92a759a14eb2d596c", "message": "Refactoring\n\n* Use named import for qualifyUrl and other", "committedDate": "2020-03-05T13:54:03Z", "type": "commit"}, {"oid": "487f39c2f44a1687aec13da9c451428accbb4b59", "url": "https://github.com/Graylog2/graylog2-server/commit/487f39c2f44a1687aec13da9c451428accbb4b59", "message": "Use named import for qualifyUrl", "committedDate": "2020-03-05T15:13:59Z", "type": "commit"}, {"oid": "1df0eb40eb4397b75f65ab1c182bb5ef4b0ccdf5", "url": "https://github.com/Graylog2/graylog2-server/commit/1df0eb40eb4397b75f65ab1c182bb5ef4b0ccdf5", "message": "Merge remote-tracking branch 'origin/master' into url-whitelist-contextual-ui", "committedDate": "2020-03-05T15:15:18Z", "type": "commit"}, {"oid": "e3368d7e4a17936165e37e564c6f98ec523e8a9d", "url": "https://github.com/Graylog2/graylog2-server/commit/e3368d7e4a17936165e37e564c6f98ec523e8a9d", "message": "Add marginTop to table\n\n* remove margin-top class and replace it with styled_component\n* update snapshot", "committedDate": "2020-03-05T15:45:15Z", "type": "commit"}, {"oid": "acf824cce8321d1af3d79df20802082e9666125d", "url": "https://github.com/Graylog2/graylog2-server/commit/acf824cce8321d1af3d79df20802082e9666125d", "message": "Fix cycle dependency and remove unused variables", "committedDate": "2020-03-06T08:35:15Z", "type": "commit"}, {"oid": "a1c80d8bd2119a3d5e2800b9ec45e1ecf92f231d", "url": "https://github.com/Graylog2/graylog2-server/commit/a1c80d8bd2119a3d5e2800b9ec45e1ecf92f231d", "message": "Merge remote-tracking branch 'origin/master' into url-whitelist-contextual-ui", "committedDate": "2020-03-06T08:39:29Z", "type": "commit"}, {"oid": "e5a4dc108104f0bf5a612c56d598753284228648", "url": "https://github.com/Graylog2/graylog2-server/commit/e5a4dc108104f0bf5a612c56d598753284228648", "message": " fix linter", "committedDate": "2020-03-06T09:33:03Z", "type": "commit"}, {"oid": "cd0038de776c60a049d778092210f97f463c2045", "url": "https://github.com/Graylog2/graylog2-server/commit/cd0038de776c60a049d778092210f97f463c2045", "message": " Add comments for eslint fix", "committedDate": "2020-03-06T13:56:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NTU5OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7275#discussion_r390345599", "bodyText": "Nitpick:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      const message = isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;\n          \n          \n            \n                      const message = isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not a valid URL.`;", "author": "edmundoa", "createdAt": "2020-03-10T14:17:29Z", "path": "graylog2-web-interface/src/components/common/URLWhiteListInput.jsx", "diffHunk": "@@ -0,0 +1,125 @@\n+// @flow strict\n+import React, { useRef, useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { Input } from 'components/bootstrap';\n+import StoreProvider from 'injection/StoreProvider';\n+import { isValidURL } from 'util/URLUtils';\n+import FormsUtils from 'util/FormsUtils';\n+// Explicit import to fix eslint import/no-cycle\n+import URLWhiteListFormModal from 'components/common/URLWhiteListFormModal';\n+\n+const ToolsStore = StoreProvider.getStore('Tools');\n+type Props = {\n+  label: string,\n+  onChange: (event: SyntheticInputEvent<EventTarget>) => void,\n+  validationMessage: string,\n+  validationState: string,\n+  url: string,\n+  labelClassName: string,\n+  wrapperClassName: string,\n+  urlType: string\n+}\n+const URLWhiteListInput = ({ label, onChange, validationMessage, validationState, url, labelClassName, wrapperClassName, urlType }: Props) => {\n+  const [isWhitelisted, setIsWhitelisted] = useState(false);\n+  const [currentValidationState, setCurrentValidationState] = useState(validationState);\n+  const [ownValidationMessage, setOwnValidationMessage] = useState(validationMessage);\n+\n+  const suggestRegexWhitelistUrl = (typedUrl: string, type: string): string | Promise<any> => {\n+    // eslint-disable-next-line no-template-curly-in-string\n+    const keyWildcard = '${key}';\n+    return type && type === 'regex' && isValidURL(typedUrl) ? ToolsStore.urlWhiteListGenerateRegex(typedUrl, keyWildcard) : typedUrl;\n+  };\n+\n+  const [suggestedUrl, setSuggestedUrl] = useState(url);\n+  const isWhitelistError = () => currentValidationState === 'error' && isValidURL(url);\n+  const ref = useRef();\n+\n+  const checkIsWhitelisted = () => {\n+    if (url) {\n+      const promise = ToolsStore.urlWhiteListCheck(url);\n+      promise.then((result) => {\n+        if (!result.is_whitelisted && validationState === null) {\n+          setCurrentValidationState('error');\n+          const message = isValidURL(url) ? `URL ${url} is not whitelisted` : `URL ${url} is not valid URL.`;", "originalCommit": "cd0038de776c60a049d778092210f97f463c2045", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "354ad9d087a2867c2e323273df4777f3491650a9", "url": "https://github.com/Graylog2/graylog2-server/commit/354ad9d087a2867c2e323273df4777f3491650a9", "message": "Update graylog2-web-interface/src/components/common/URLWhiteListInput.jsx\n\nCo-Authored-By: Edmundo Alvarez <edmundo@graylog.com>", "committedDate": "2020-03-10T14:20:55Z", "type": "commit"}]}