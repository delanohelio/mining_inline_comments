{"pr_number": 8236, "pr_title": "Move widget to tab", "pr_createdAt": "2020-05-29T10:09:37Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/8236", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwMzg3OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433803879", "bodyText": "Let's call the component MoveWidgetToTabModal to unify the naming with comparable components.", "author": "linuspahl", "createdAt": "2020-06-02T11:24:43Z", "path": "graylog2-web-interface/src/views/components/widgets/Widget.jsx", "diffHunk": "@@ -328,6 +361,12 @@ class Widget extends React.Component<Props, State> {\n                                      onCancel={this._onToggleCopyToDashboard} />\n                   )}\n                   {showCsvExport && <CSVExportModal view={view.view} directExportWidgetId={widget.id} closeModal={this._onToggleCSVExport} />}\n+                  {showMoveWidgetToTab && (\n+                    <MoveWidgetToTabForm view={view.view}", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwNjE3Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433806177", "bodyText": "Let's use the BootstrapModalForm here.", "author": "linuspahl", "createdAt": "2020-06-02T11:29:24Z", "path": "graylog2-web-interface/src/views/components/widgets/MoveWidgetToTab.jsx", "diffHunk": "@@ -0,0 +1,66 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import { Map } from 'immutable';\n+import { Button, ListGroup, ListGroupItem, Modal } from 'components/graylog';\n+import Input from 'components/bootstrap/Input';\n+\n+import View from 'views/logic/views/View';\n+\n+type Props = {\n+  view: View,\n+  widgetId: string,\n+  onCancel: () => void,\n+  onSubmit: (widgetId: string, selectedTab: ?string, keepCopy: boolean) => void,\n+};\n+\n+type TabEntry = { id: string, name: string };\n+\n+const _tabList = (view: View): Array<TabEntry> => {\n+  const queryIds = Object.keys(view.state.toObject());\n+  return queryIds.map((queryId, index) => {\n+    const tabTitle = view.state.get(queryId).titles.get('tab', Map({ title: `Page#${index + 1}` }));\n+    return ({ id: queryId, name: tabTitle.get('title') });\n+  });\n+};\n+\n+const MoveWidgetToTab = ({ view, onCancel, onSubmit, widgetId }: Props) => {\n+  const [selectedTab, setSelectedTab] = useState(null);\n+  const [keepCopy, setKeepCopy] = useState(false);\n+\n+  const list = _tabList(view);\n+\n+  const tabList = list.map(({ id, name }) => (\n+    <ListGroupItem header={name}\n+                   onClick={() => setSelectedTab(id)}\n+                   active={id === selectedTab}\n+                   key={id} />\n+  ));\n+  const renderResult = list && list.length > 0\n+    ? <ListGroup>{tabList}</ListGroup>\n+    : <span>No dashboards found</span>;\n+\n+  return (\n+    <Modal show>", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNzUyNw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433837527", "bodyText": "We should either sort the list alphabetically or use the order defined by the dashboard.", "author": "linuspahl", "createdAt": "2020-06-02T12:29:46Z", "path": "graylog2-web-interface/src/views/components/widgets/MoveWidgetToTab.jsx", "diffHunk": "@@ -0,0 +1,66 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import { Map } from 'immutable';\n+import { Button, ListGroup, ListGroupItem, Modal } from 'components/graylog';\n+import Input from 'components/bootstrap/Input';\n+\n+import View from 'views/logic/views/View';\n+\n+type Props = {\n+  view: View,\n+  widgetId: string,\n+  onCancel: () => void,\n+  onSubmit: (widgetId: string, selectedTab: ?string, keepCopy: boolean) => void,\n+};\n+\n+type TabEntry = { id: string, name: string };\n+\n+const _tabList = (view: View): Array<TabEntry> => {\n+  const queryIds = Object.keys(view.state.toObject());\n+  return queryIds.map((queryId, index) => {\n+    const tabTitle = view.state.get(queryId).titles.get('tab', Map({ title: `Page#${index + 1}` }));\n+    return ({ id: queryId, name: tabTitle.get('title') });\n+  });", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5MzEwNw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433893107", "bodyText": "What do you think about not including the current page in the list?\nIf \"Keep Copy\" is not active, nothing happens and otherwise the widget will be copied.\nIf the user wants to copy a widget on the same dashboard page he can also use the copy action.", "author": "linuspahl", "createdAt": "2020-06-02T13:54:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNzUyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTcyODc5MQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r435728791", "bodyText": "We should either sort the list alphabetically or use the order defined by the dashboard\n\nAs you see I need to \"make up\" the names of the page titles on the fly. That means it is in order defined by the dashboard.", "author": "kmerz", "createdAt": "2020-06-05T07:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzNzUyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0MzU2Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433843563", "bodyText": "I thought about extracting the Page# part and using the reference here, in QueryTitle.js and QueryTabs.jsx. But having a look at QueryTitle.js you can also use the related queryTitle function, like we do it in BigDisplayMode.", "author": "linuspahl", "createdAt": "2020-06-02T12:40:31Z", "path": "graylog2-web-interface/src/views/components/widgets/MoveWidgetToTab.jsx", "diffHunk": "@@ -0,0 +1,66 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import { Map } from 'immutable';\n+import { Button, ListGroup, ListGroupItem, Modal } from 'components/graylog';\n+import Input from 'components/bootstrap/Input';\n+\n+import View from 'views/logic/views/View';\n+\n+type Props = {\n+  view: View,\n+  widgetId: string,\n+  onCancel: () => void,\n+  onSubmit: (widgetId: string, selectedTab: ?string, keepCopy: boolean) => void,\n+};\n+\n+type TabEntry = { id: string, name: string };\n+\n+const _tabList = (view: View): Array<TabEntry> => {\n+  const queryIds = Object.keys(view.state.toObject());\n+  return queryIds.map((queryId, index) => {\n+    const tabTitle = view.state.get(queryId).titles.get('tab', Map({ title: `Page#${index + 1}` }));", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NzY2MA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433847660", "bodyText": "Just a side note, it would be great if we could unify the styling of this list, the list which is visible when copying a widget to a dashboard and the saved searches list. We are sometimes defining the title as a header and sometimes as a child, which is supposed to be the description. I will create a separate issue for this change.", "author": "linuspahl", "createdAt": "2020-06-02T12:47:16Z", "path": "graylog2-web-interface/src/views/components/widgets/MoveWidgetToTab.jsx", "diffHunk": "@@ -0,0 +1,66 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import { Map } from 'immutable';\n+import { Button, ListGroup, ListGroupItem, Modal } from 'components/graylog';\n+import Input from 'components/bootstrap/Input';\n+\n+import View from 'views/logic/views/View';\n+\n+type Props = {\n+  view: View,\n+  widgetId: string,\n+  onCancel: () => void,\n+  onSubmit: (widgetId: string, selectedTab: ?string, keepCopy: boolean) => void,\n+};\n+\n+type TabEntry = { id: string, name: string };\n+\n+const _tabList = (view: View): Array<TabEntry> => {\n+  const queryIds = Object.keys(view.state.toObject());\n+  return queryIds.map((queryId, index) => {\n+    const tabTitle = view.state.get(queryId).titles.get('tab', Map({ title: `Page#${index + 1}` }));\n+    return ({ id: queryId, name: tabTitle.get('title') });\n+  });\n+};\n+\n+const MoveWidgetToTab = ({ view, onCancel, onSubmit, widgetId }: Props) => {\n+  const [selectedTab, setSelectedTab] = useState(null);\n+  const [keepCopy, setKeepCopy] = useState(false);\n+\n+  const list = _tabList(view);\n+\n+  const tabList = list.map(({ id, name }) => (\n+    <ListGroupItem header={name}\n+                   onClick={() => setSelectedTab(id)}\n+                   active={id === selectedTab}\n+                   key={id} />\n+  ));", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3NzAwOA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r435777008", "bodyText": "I now used the children way since it looks much nicer than the header way. Thanks for pointing that out.", "author": "kmerz", "createdAt": "2020-06-05T08:43:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NzY2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MzAxMw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433853013", "bodyText": "You could use the newly created WidgetId type from views/types here.", "author": "linuspahl", "createdAt": "2020-06-02T12:56:07Z", "path": "graylog2-web-interface/src/views/logic/views/FindWidgetAndQueryIdInView.js", "diffHunk": "@@ -0,0 +1,21 @@\n+// @flow strict\n+import View from './View';\n+import Widget from '../widgets/Widget';\n+import ViewState from './ViewState';\n+\n+type QueryId = string;\n+\n+const FindWidgetAndQueryIdInView = (widgetId: string, view: View): ?[Widget, QueryId] => {", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MzIxOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433853219", "bodyText": "You could use the newly created WidgetId type from views/types here as well.", "author": "linuspahl", "createdAt": "2020-06-02T12:56:26Z", "path": "graylog2-web-interface/src/views/logic/views/MoveWidgetToTab.js", "diffHunk": "@@ -0,0 +1,53 @@\n+// @flow strict\n+import uuid from 'uuid/v4';\n+import View from './View';\n+import FindWidgetAndQueryIdInView from './FindWidgetAndQueryIdInView';\n+import Widget from '../widgets/Widget';\n+import UpdateSearchForWidgets from './UpdateSearchForWidgets';\n+\n+type QueryId = string;\n+\n+const _removeWidgetFromTab = (widgetId: string, queryId: string, dashboard: View): View => {\n+  const viewState = dashboard.state.get(queryId);\n+  const widgetIndex = viewState.widgets.findIndex((widget) => widget.id === widgetId);\n+  const widgetPosition = viewState.widgetPositions;\n+  delete widgetPosition[widgetId];\n+  const { widgetMapping } = viewState;\n+  const newWidgetMapping = widgetMapping.remove(widgetId);\n+  const newViewState = viewState.toBuilder()\n+    .widgets(viewState.widgets.delete(widgetIndex))\n+    .widgetMapping(newWidgetMapping)\n+    .widgetPositions(widgetPosition)\n+    .build();\n+  return dashboard.toBuilder()\n+    .state(dashboard.state.set(queryId, newViewState))\n+    .build();\n+};\n+\n+const _addWidgetToTab = (widget: Widget, targetQueryId: QueryId, dashboard: View): View => {\n+  const viewState = dashboard.state.get(targetQueryId);\n+  const newWidget = widget.toBuilder().id(uuid()).build();\n+  const newViewState = viewState.toBuilder()\n+    .widgets(viewState.widgets.push(newWidget))\n+    .build();\n+  return dashboard.toBuilder()\n+    .state(dashboard.state.set(targetQueryId, newViewState))\n+    .build();\n+};\n+\n+const MoveWidgetToTab = (widgetId: string, targetQueryId: QueryId, dashboard: View, copy: boolean = false): ?View => {", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTMwMw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433855303", "bodyText": "I would prefer to expect that this function returns a View and to throw an error if the search type does not match or if the the related Query does not exist.", "author": "linuspahl", "createdAt": "2020-06-02T12:59:53Z", "path": "graylog2-web-interface/src/views/logic/views/MoveWidgetToTab.js", "diffHunk": "@@ -0,0 +1,53 @@\n+// @flow strict\n+import uuid from 'uuid/v4';\n+import View from './View';\n+import FindWidgetAndQueryIdInView from './FindWidgetAndQueryIdInView';\n+import Widget from '../widgets/Widget';\n+import UpdateSearchForWidgets from './UpdateSearchForWidgets';\n+\n+type QueryId = string;\n+\n+const _removeWidgetFromTab = (widgetId: string, queryId: string, dashboard: View): View => {\n+  const viewState = dashboard.state.get(queryId);\n+  const widgetIndex = viewState.widgets.findIndex((widget) => widget.id === widgetId);\n+  const widgetPosition = viewState.widgetPositions;\n+  delete widgetPosition[widgetId];\n+  const { widgetMapping } = viewState;\n+  const newWidgetMapping = widgetMapping.remove(widgetId);\n+  const newViewState = viewState.toBuilder()\n+    .widgets(viewState.widgets.delete(widgetIndex))\n+    .widgetMapping(newWidgetMapping)\n+    .widgetPositions(widgetPosition)\n+    .build();\n+  return dashboard.toBuilder()\n+    .state(dashboard.state.set(queryId, newViewState))\n+    .build();\n+};\n+\n+const _addWidgetToTab = (widget: Widget, targetQueryId: QueryId, dashboard: View): View => {\n+  const viewState = dashboard.state.get(targetQueryId);\n+  const newWidget = widget.toBuilder().id(uuid()).build();\n+  const newViewState = viewState.toBuilder()\n+    .widgets(viewState.widgets.push(newWidget))\n+    .build();\n+  return dashboard.toBuilder()\n+    .state(dashboard.state.set(targetQueryId, newViewState))\n+    .build();\n+};\n+\n+const MoveWidgetToTab = (widgetId: string, targetQueryId: QueryId, dashboard: View, copy: boolean = false): ?View => {\n+  if (dashboard.type !== View.Type.Dashboard) {\n+    return undefined;", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3MzkyNA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433873924", "bodyText": "Let's call this variable widgetPositions", "author": "linuspahl", "createdAt": "2020-06-02T13:28:04Z", "path": "graylog2-web-interface/src/views/logic/views/MoveWidgetToTab.js", "diffHunk": "@@ -0,0 +1,53 @@\n+// @flow strict\n+import uuid from 'uuid/v4';\n+import View from './View';\n+import FindWidgetAndQueryIdInView from './FindWidgetAndQueryIdInView';\n+import Widget from '../widgets/Widget';\n+import UpdateSearchForWidgets from './UpdateSearchForWidgets';\n+\n+type QueryId = string;\n+\n+const _removeWidgetFromTab = (widgetId: string, queryId: string, dashboard: View): View => {\n+  const viewState = dashboard.state.get(queryId);\n+  const widgetIndex = viewState.widgets.findIndex((widget) => widget.id === widgetId);\n+  const widgetPosition = viewState.widgetPositions;", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyOTQxMQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r433929411", "bodyText": "One bigger topic I would like to discuss is the handling of the widget positions when removing / adding a widget.\nWhen the widget is being moved to a page, we do not define / calculate a widget position. This can lead to strange behaviours. During my tests the newly created widget is mostly being displayed in the second row of the widget grid. But when I open and close the widget edit modal, it moves to the first row. It would be great if we could reuse some parts of the logic we are using when creating a widget. (CurrentViewStateStore -> widgets())\nWhen a user removes a widget, by not using the \"Keep Copy\" option, we are just removing the widget position, which is ok, because it behaves like when using the widget action Delete. But in my opinion we should check if this effects other widgets and recalculate their positions. E.g. when the widget was the only one in its row.\nThe WidgetGrid is currently able to handle this \"empty space\", but it is possible that this will lead to problems in the future. For now I would not change this part, but I will create an issue to adjust this behaviour which includes writing a migration which checks if empty spaces theoretically exists on a dashboard and which recalculates the related widget positions.\nWhat do you think?", "author": "linuspahl", "createdAt": "2020-06-02T14:40:36Z", "path": "graylog2-web-interface/src/views/logic/views/MoveWidgetToTab.js", "diffHunk": "@@ -0,0 +1,53 @@\n+// @flow strict\n+import uuid from 'uuid/v4';\n+import View from './View';\n+import FindWidgetAndQueryIdInView from './FindWidgetAndQueryIdInView';\n+import Widget from '../widgets/Widget';\n+import UpdateSearchForWidgets from './UpdateSearchForWidgets';\n+\n+type QueryId = string;\n+\n+const _removeWidgetFromTab = (widgetId: string, queryId: string, dashboard: View): View => {\n+  const viewState = dashboard.state.get(queryId);\n+  const widgetIndex = viewState.widgets.findIndex((widget) => widget.id === widgetId);\n+  const widgetPosition = viewState.widgetPositions;\n+  delete widgetPosition[widgetId];\n+  const { widgetMapping } = viewState;\n+  const newWidgetMapping = widgetMapping.remove(widgetId);\n+  const newViewState = viewState.toBuilder()\n+    .widgets(viewState.widgets.delete(widgetIndex))\n+    .widgetMapping(newWidgetMapping)\n+    .widgetPositions(widgetPosition)\n+    .build();\n+  return dashboard.toBuilder()\n+    .state(dashboard.state.set(queryId, newViewState))\n+    .build();\n+};\n+\n+const _addWidgetToTab = (widget: Widget, targetQueryId: QueryId, dashboard: View): View => {\n+  const viewState = dashboard.state.get(targetQueryId);\n+  const newWidget = widget.toBuilder().id(uuid()).build();\n+  const newViewState = viewState.toBuilder()\n+    .widgets(viewState.widgets.push(newWidget))\n+    .build();\n+  return dashboard.toBuilder()\n+    .state(dashboard.state.set(targetQueryId, newViewState))\n+    .build();\n+};\n+\n+const MoveWidgetToTab = (widgetId: string, targetQueryId: QueryId, dashboard: View, copy: boolean = false): ?View => {\n+  if (dashboard.type !== View.Type.Dashboard) {\n+    return undefined;\n+  }\n+\n+  const match: ?[Widget, QueryId] = FindWidgetAndQueryIdInView(widgetId, dashboard);\n+\n+  if (match) {\n+    const [widget, queryId] = match;\n+    const tempDashboard = copy ? dashboard : _removeWidgetFromTab(widgetId, queryId, dashboard);\n+    return UpdateSearchForWidgets(_addWidgetToTab(widget, targetQueryId, tempDashboard));\n+  }\n+  return undefined;\n+};\n+\n+export default MoveWidgetToTab;", "originalCommit": "6da9c3df76af964e8fb77c830a5ef9128f9907e5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8adf9e60f1a1e2e7aba0d42f5b10c39190e00e5b", "url": "https://github.com/Graylog2/graylog2-server/commit/8adf9e60f1a1e2e7aba0d42f5b10c39190e00e5b", "message": "Add move widget to tab functionallity\n\nPrior to this change, there was no code providing the possibility\nto move a widget from one tab to another.\n\nThis change will add a function.", "committedDate": "2020-06-05T12:59:07Z", "type": "commit"}, {"oid": "a6d95dbb0da34b9257eb31478212ee56b67f43ae", "url": "https://github.com/Graylog2/graylog2-server/commit/a6d95dbb0da34b9257eb31478212ee56b67f43ae", "message": "Create MoveWidgetToTab Modal\n\nPrior to this change, there was no Modal where a user\ncould select to which tab he would like to move a widget.\n\nThis change will create a new Modal and connects it\nto the former MoveWidgetToTab logic.", "committedDate": "2020-06-05T12:59:33Z", "type": "commit"}, {"oid": "9a871e1e364d06710f3af3b843c58372a9ee9a4b", "url": "https://github.com/Graylog2/graylog2-server/commit/9a871e1e364d06710f3af3b843c58372a9ee9a4b", "message": "Fix failing snapshot tests\n\nPrior to these changes, we did not update the search id,\nwhich needed to be change, since we changed the search.\n\nThis change will mock the id generation so we do not have\nfailing snapshots tests with every run.", "committedDate": "2020-06-05T12:59:35Z", "type": "commit"}, {"oid": "3e6fbff58a3f408430fd8f59f1a648fda8978dd1", "url": "https://github.com/Graylog2/graylog2-server/commit/3e6fbff58a3f408430fd8f59f1a648fda8978dd1", "message": "Make it possible to keep a copy of a widget\n\nPrior to this change, you could only move a widget\nto a different page. Now you can also copy it instead.\n\nThis change will add a checkbox where the user can\ndecide to copy the widget instead of moving it.", "committedDate": "2020-06-05T13:00:01Z", "type": "commit"}, {"oid": "85f267cd2e7ec101487467905e8c44f060a0dc47", "url": "https://github.com/Graylog2/graylog2-server/commit/85f267cd2e7ec101487467905e8c44f060a0dc47", "message": "Rename MoveWidgetToTab to MoveWidgetToTabModal", "committedDate": "2020-06-05T13:00:03Z", "type": "commit"}, {"oid": "6595fb8df167e6de738f65af67a9dfca88d1c91d", "url": "https://github.com/Graylog2/graylog2-server/commit/6595fb8df167e6de738f65af67a9dfca88d1c91d", "message": "Use BootstrapModalForm and beautify ListGroupItem usage", "committedDate": "2020-06-05T13:00:04Z", "type": "commit"}, {"oid": "b17769a26d63db8754b373f743d043bdd353b73c", "url": "https://github.com/Graylog2/graylog2-server/commit/b17769a26d63db8754b373f743d043bdd353b73c", "message": "Filter active query from selection list", "committedDate": "2020-06-05T13:00:04Z", "type": "commit"}, {"oid": "b4103753648df9502b3ea1702d0c928d56624523", "url": "https://github.com/Graylog2/graylog2-server/commit/b4103753648df9502b3ea1702d0c928d56624523", "message": "Use QueryTitle for title generation", "committedDate": "2020-06-05T13:00:04Z", "type": "commit"}, {"oid": "88c794c36db41259ac05000ea2e73fee52dfb767", "url": "https://github.com/Graylog2/graylog2-server/commit/88c794c36db41259ac05000ea2e73fee52dfb767", "message": "Reuse existing types instead of reinventing", "committedDate": "2020-06-05T13:00:05Z", "type": "commit"}, {"oid": "adbc3c6a869c29ed1489c216517737b968b921cc", "url": "https://github.com/Graylog2/graylog2-server/commit/adbc3c6a869c29ed1489c216517737b968b921cc", "message": "use better VariableName and throw Error when type is unexpected", "committedDate": "2020-06-05T13:00:05Z", "type": "commit"}, {"oid": "754bd74732d096b5b88a3558c90474cd7043d644", "url": "https://github.com/Graylog2/graylog2-server/commit/754bd74732d096b5b88a3558c90474cd7043d644", "message": "When moving a widget also add new WidgetPostion", "committedDate": "2020-06-05T13:00:05Z", "type": "commit"}, {"oid": "754bd74732d096b5b88a3558c90474cd7043d644", "url": "https://github.com/Graylog2/graylog2-server/commit/754bd74732d096b5b88a3558c90474cd7043d644", "message": "When moving a widget also add new WidgetPostion", "committedDate": "2020-06-05T13:00:05Z", "type": "forcePushed"}, {"oid": "8a27bea7bc009448c37867762069c411978746d2", "url": "https://github.com/Graylog2/graylog2-server/commit/8a27bea7bc009448c37867762069c411978746d2", "message": "fix linter warnings", "committedDate": "2020-06-05T13:09:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMDc3Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r436510773", "bodyText": "What is the reason you've implemented .col(0).row(0) here?\nIt would be great if moving a widget to a dashboard tab would add the widget to the tab in the same way, like when adding a new widget to a tab. We could reuse some of the logic to recalculate the widget positions from CurrentViewStateStore -> widgets()", "author": "linuspahl", "createdAt": "2020-06-08T07:44:54Z", "path": "graylog2-web-interface/src/views/logic/views/MoveWidgetToTab.js", "diffHunk": "@@ -0,0 +1,66 @@\n+// @flow strict\n+import uuid from 'uuid/v4';\n+import type { QueryId } from 'views/logic/queries/Query';\n+import type { WidgetId } from 'views/logic/views/types';\n+import View from './View';\n+import FindWidgetAndQueryIdInView from './FindWidgetAndQueryIdInView';\n+import Widget from '../widgets/Widget';\n+import UpdateSearchForWidgets from './UpdateSearchForWidgets';\n+import WidgetPosition from '../widgets/WidgetPosition';\n+\n+\n+const _removeWidgetFromTab = (widgetId: WidgetId, queryId: QueryId, dashboard: View): View => {\n+  const viewState = dashboard.state.get(queryId);\n+  const widgetIndex = viewState.widgets.findIndex((widget) => widget.id === widgetId);\n+  const { widgetPositions } = viewState;\n+  delete widgetPositions[widgetId];\n+  const { widgetMapping } = viewState;\n+  const newWidgetMapping = widgetMapping.remove(widgetId);\n+  const newViewState = viewState.toBuilder()\n+    .widgets(viewState.widgets.delete(widgetIndex))\n+    .widgetMapping(newWidgetMapping)\n+    .widgetPositions(widgetPositions)\n+    .build();\n+  return dashboard.toBuilder()\n+    .state(dashboard.state.set(queryId, newViewState))\n+    .build();\n+};\n+\n+const _addWidgetToTab = (widget: Widget, targetQueryId: QueryId, dashboard: View, widgetPosition: WidgetPosition): View => {\n+  const viewState = dashboard.state.get(targetQueryId);\n+  const newWidget = widget.toBuilder().id(uuid()).build();\n+  const { widgetPositions } = viewState;\n+  widgetPositions[newWidget.id] = widgetPosition;\n+  const newViewState = viewState.toBuilder()\n+    .widgets(viewState.widgets.push(newWidget))\n+    .widgetPositions(widgetPositions)\n+    .build();\n+  return dashboard.toBuilder()\n+    .state(dashboard.state.set(targetQueryId, newViewState))\n+    .build();\n+};\n+\n+const _getWidgetPosition = (widgetId: WidgetId, queryId: QueryId, view: View): WidgetPosition => {\n+  return view.state.get(queryId).widgetPositions[widgetId];\n+};\n+\n+const MoveWidgetToTab = (widgetId: WidgetId, targetQueryId: QueryId, dashboard: View, copy: boolean = false): ?View => {\n+  if (dashboard.type !== View.Type.Dashboard) {\n+    throw new Error(`Unexpected type ${dashboard.type} expected ${View.Type.Dashboard}`);\n+  }\n+\n+  const match: ?[Widget, QueryId] = FindWidgetAndQueryIdInView(widgetId, dashboard);\n+\n+  if (match) {\n+    const [widget, queryId] = match;\n+    const newWidgetPosition = _getWidgetPosition(widgetId, queryId, dashboard).toBuilder()\n+      .col(0)\n+      .row(0)\n+      .build();\n+    const tempDashboard = copy ? dashboard : _removeWidgetFromTab(widgetId, queryId, dashboard);", "originalCommit": "8a27bea7bc009448c37867762069c411978746d2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUxMjM2NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r436512365", "bodyText": "Let's reimplement submitButtonDisabled={!selectedTab} here.", "author": "linuspahl", "createdAt": "2020-06-08T07:48:07Z", "path": "graylog2-web-interface/src/views/components/widgets/MoveWidgetToTabModal.jsx", "diffHunk": "@@ -30,36 +31,30 @@ const MoveWidgetToTabModal = ({ view, onCancel, onSubmit, widgetId }: Props) =>\n   const list = _tabList(view);\n \n   const tabList = list.map(({ id, name }) => (\n-    <ListGroupItem header={name}\n-                   onClick={() => setSelectedTab(id)}\n+    <ListGroupItem onClick={() => setSelectedTab(id)}\n                    active={id === selectedTab}\n-                   key={id} />\n+                   key={id}>\n+      {name}\n+    </ListGroupItem>\n   ));\n   const renderResult = list && list.length > 0\n     ? <ListGroup>{tabList}</ListGroup>\n     : <span>No dashboards found</span>;\n \n   return (\n-    <Modal show>\n-      <Modal.Body>\n-        {renderResult}\n-        <Input type=\"checkbox\"\n-               id=\"keepCopy\"\n-               name=\"keepCopy\"\n-               label=\"Keep Copy on this Page\"\n-               onChange={(e) => setKeepCopy(e.target.checked)}\n-               help=\"When 'Keep Copy on the Page' is enabled, the widget will be copied and not moved to another page\"\n-               checked={keepCopy} />\n-      </Modal.Body>\n-      <Modal.Footer>\n-        <Button bsStyle=\"primary\"\n-                disabled={selectedTab === null}\n-                onClick={() => onSubmit(widgetId, selectedTab, keepCopy)}>\n-          Select\n-        </Button>\n-        <Button onClick={onCancel}>Cancel</Button>\n-      </Modal.Footer>\n-    </Modal>\n+    <BootstrapModalForm show\n+                        onCancel={onCancel}\n+                        onSubmitForm={() => onSubmit(widgetId, selectedTab, keepCopy)}\n+                        title=\"Choose Target Page\">", "originalCommit": "6595fb8df167e6de738f65af67a9dfca88d1c91d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyMzA5NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r436523094", "bodyText": "Regarding the sort, it does not look correct to me, compared with the dashboard:\n\nOne solution is using the order / values provided by the QueryIdsStore.", "author": "linuspahl", "createdAt": "2020-06-08T08:09:09Z", "path": "graylog2-web-interface/src/views/components/widgets/MoveWidgetToTabModal.jsx", "diffHunk": "@@ -0,0 +1,64 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import { ListGroup, ListGroupItem } from 'components/graylog';\n+import BootstrapModalForm from 'components/bootstrap/BootstrapModalForm';\n+import Input from 'components/bootstrap/Input';\n+import { useStore } from 'stores/connect';\n+import QueryTitle from 'views/logic/queries/QueryTitle';\n+import { CurrentQueryStore } from 'views/stores/CurrentQueryStore';\n+\n+import View from 'views/logic/views/View';\n+\n+type Props = {\n+  view: View,\n+  widgetId: string,\n+  onCancel: () => void,\n+  onSubmit: (widgetId: string, selectedTab: ?string, keepCopy: boolean) => void,\n+};\n+\n+type TabEntry = { id: string, name: string };\n+\n+const _tabList = (view: View): Array<TabEntry> => {\n+  const queryIds = Object.keys(view.state.toObject());\n+  return queryIds.map((queryId) => {\n+    const tabTitle = QueryTitle(view, queryId) || 'Unknown Page title';\n+    return ({ id: queryId, name: tabTitle });\n+  });\n+};\n+\n+const MoveWidgetToTabModal = ({ view, onCancel, onSubmit, widgetId }: Props) => {\n+  const [selectedTab, setSelectedTab] = useState(null);\n+  const [keepCopy, setKeepCopy] = useState(false);\n+  const { id: activeQuery } = useStore(CurrentQueryStore);\n+\n+  const list = _tabList(view).filter(({ id }) => id !== activeQuery);", "originalCommit": "8a27bea7bc009448c37867762069c411978746d2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyNjk1Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r436526957", "bodyText": "With the last review I suggested to remove the current tab from the list, but after having another look I prefer to just disable the active tab. It has the benefits, that the user always sees the \"same\" list no matter on which tab he opens the modal and it is easier to find the surrounding tabs.", "author": "linuspahl", "createdAt": "2020-06-08T08:16:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyMzA5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzE4MDA3NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/8236#discussion_r437180075", "bodyText": "Regarding the sort: #8264 there is no order :( Which we need to fix before this PR I think now. :(\nRegarding disable: I think you were right before, the user does not expect to find the current tab here. Therefore I would leave it out to reduce the visual noise. Let's discuss it later in or after the meeting.", "author": "kmerz", "createdAt": "2020-06-09T07:02:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUyMzA5NA=="}], "type": "inlineReview"}, {"oid": "a5675dd7ede92f5f77234f06f908ea3d68780ac3", "url": "https://github.com/Graylog2/graylog2-server/commit/a5675dd7ede92f5f77234f06f908ea3d68780ac3", "message": "Use QueryIds store to keep the order of pages", "committedDate": "2020-06-09T13:48:09Z", "type": "commit"}, {"oid": "4ca17029586be58a60e5b4dbe4188a0a0c8eb44a", "url": "https://github.com/Graylog2/graylog2-server/commit/4ca17029586be58a60e5b4dbe4188a0a0c8eb44a", "message": "Disable submit button if nothing is selected", "committedDate": "2020-06-09T13:49:31Z", "type": "commit"}, {"oid": "d1c3c145c35b45a2fd9bce0e3f912ff738ada056", "url": "https://github.com/Graylog2/graylog2-server/commit/d1c3c145c35b45a2fd9bce0e3f912ff738ada056", "message": "Use the first row notation from WidgetGrid (starting by 1)", "committedDate": "2020-06-09T14:19:24Z", "type": "commit"}, {"oid": "7c27fb773b4545ebf5d14d820086130cba94beff", "url": "https://github.com/Graylog2/graylog2-server/commit/7c27fb773b4545ebf5d14d820086130cba94beff", "message": "zero was correct", "committedDate": "2020-06-09T14:20:57Z", "type": "commit"}, {"oid": "d78309da7871dcfe45b9de824b6945b1085faf2e", "url": "https://github.com/Graylog2/graylog2-server/commit/d78309da7871dcfe45b9de824b6945b1085faf2e", "message": "Recalcutate WidgetPositions\n\nPrior to this change, we simply add a new WidgetPosition with row 1 and\ncol 1. This will only lead to the problem that now 2 widgets have this\ncoordinates.\n\nThis change will reuse the calculation method from\nCurrentViewStateStore.", "committedDate": "2020-06-10T12:07:26Z", "type": "commit"}, {"oid": "6021e6e1208ce9370486b3b3814d709fa169d9fb", "url": "https://github.com/Graylog2/graylog2-server/commit/6021e6e1208ce9370486b3b3814d709fa169d9fb", "message": "Also move the title of the widget", "committedDate": "2020-06-12T08:47:31Z", "type": "commit"}, {"oid": "420b22c06b4785844b2c8015f18a0b23a246e149", "url": "https://github.com/Graylog2/graylog2-server/commit/420b22c06b4785844b2c8015f18a0b23a246e149", "message": "useCallback to memorize the callbacks", "committedDate": "2020-06-12T09:12:12Z", "type": "commit"}]}