{"pr_number": 7281, "pr_title": "Stream alert panel", "pr_createdAt": "2020-01-24T17:13:18Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/7281", "timeline": [{"oid": "68a41ab2a2b939699550454c2fbd26dab341e4a5", "url": "https://github.com/Graylog2/graylog2-server/commit/68a41ab2a2b939699550454c2fbd26dab341e4a5", "message": "Updating Stream Rules alert styles", "committedDate": "2020-01-24T17:19:27Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNDUwMA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r371734500", "bodyText": "I'm wondering: why do we use inline styles here instead of a styled component?", "author": "edmundoa", "createdAt": "2020-01-28T10:57:35Z", "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -79,39 +94,45 @@ class StreamRulesEditor extends React.Component {\n   };\n \n   _explainMatchResult = () => {\n-    if (this.state.matchData) {\n-      if (this.state.matchData.matches) {\n+    const { matchData } = this.state;\n+\n+    if (matchData) {\n+      if (matchData.matches) {\n         return (\n-          <span>\n-            <Icon name=\"check\" style={{ color: 'green' }} /> This message would be routed to this stream.\n-          </span>\n+          <>\n+            <Icon name=\"check\" style={{ color: '#00AE42', marginRight: 3 }} /> This message would be routed to this stream!", "originalCommit": "68a41ab2a2b939699550454c2fbd26dab341e4a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5MTk2NQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r371791965", "bodyText": "Was just using what was already there, i can easily convert them to SC", "author": "kyleknighted", "createdAt": "2020-01-28T13:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNDUwMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTc5MzAzNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r371793036", "bodyText": "It's fine, I was wondering if there was any other reason :)", "author": "edmundoa", "createdAt": "2020-01-28T13:13:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNDUwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTczNzg5OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r371737899", "bodyText": "matchData is passed down, but never used.", "author": "edmundoa", "createdAt": "2020-01-28T11:05:02Z", "path": "graylog2-web-interface/src/components/streamrules/StreamRuleList.jsx", "diffHunk": "@@ -14,36 +14,51 @@ class StreamRuleList extends React.Component {\n     streamRuleTypes: PropTypes.array.isRequired,\n   };\n \n+  static defaultProps = {\n+    matchData: {},\n+    onSubmit: () => {},\n+    onDelete: () => {},\n+  }\n+\n   _formatStreamRules = (streamRules) => {\n     if (streamRules && streamRules.length > 0) {\n-      return streamRules.map((streamRule) => {\n-        return (\n-          <StreamRule key={streamRule.id}\n-                      permissions={this.props.permissions}\n-                      matchData={this.props.matchData}\n-                      onSubmit={this.props.onSubmit}\n-                      onDelete={this.props.onDelete}\n-                      stream={this.props.stream}\n-                      streamRule={streamRule}\n-                      streamRuleTypes={this.props.streamRuleTypes} />\n-        );\n-      });\n+      const {\n+        matchData,\n+        onDelete,\n+        onSubmit,\n+        permissions,\n+        stream,\n+        streamRuleTypes,\n+      } = this.props;\n+\n+      return streamRules.map(streamRule => (\n+        <StreamRule key={streamRule.id}\n+                    permissions={permissions}\n+                    matchData={matchData}", "originalCommit": "68a41ab2a2b939699550454c2fbd26dab341e4a5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "56e17ea52031d80c188ec9cc971cc95ddc7fa6a9", "url": "https://github.com/Graylog2/graylog2-server/commit/56e17ea52031d80c188ec9cc971cc95ddc7fa6a9", "message": "Keeping code consistent", "committedDate": "2020-01-28T15:40:57Z", "type": "forcePushed"}, {"oid": "a056fc3d062904695d56be6fe4682f0f09422cfe", "url": "https://github.com/Graylog2/graylog2-server/commit/a056fc3d062904695d56be6fe4682f0f09422cfe", "message": "Keeping code consistent", "committedDate": "2020-01-28T16:52:34Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3MjgyNA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r372872824", "bodyText": "This will throw a console warning when empty or matches are true, since styled-components passes all props through: styled-components/styled-components#1198 (comment)", "author": "edmundoa", "createdAt": "2020-01-30T10:35:41Z", "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -17,14 +18,35 @@ import StoreProvider from 'injection/StoreProvider';\n const StreamsStore = StoreProvider.getStore('Streams');\n const StreamRulesStore = StoreProvider.getStore('StreamRules');\n \n+const StreamAlertHeader = styled.h4`\n+  font-weight: bold;\n+  margin: 0 0 12px;\n+`;\n+\n+const MatchIcon = styled(Icon)(({ empty, matches }) => {", "originalCommit": "08b3ba8464a127513157eaad9e04b74bf74cc3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzUzOTA3NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r373539074", "bodyText": "Good catch!", "author": "kyleknighted", "createdAt": "2020-01-31T15:31:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3MjgyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3Mzk0NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r372873944", "bodyText": "This throws a warning because the value of bsStyle can be a boolean and it is not the right prop type. We should replace && with a conditional operator.", "author": "edmundoa", "createdAt": "2020-01-30T10:38:10Z", "path": "graylog2-web-interface/src/components/streamrules/StreamRule.jsx", "diffHunk": "@@ -1,96 +1,109 @@\n+import React, { useRef } from 'react';\n import PropTypes from 'prop-types';\n-import React from 'react';\n-\n-import createReactClass from 'create-react-class';\n+import { isEmpty } from 'lodash';\n+import styled from 'styled-components';\n \n import { Icon } from 'components/common';\n+import { Button, ListGroupItem } from 'components/graylog';\n import PermissionsMixin from 'util/PermissionsMixin';\n import StreamRuleForm from 'components/streamrules/StreamRuleForm';\n-import HumanReadableStreamRule from 'components/streamrules//HumanReadableStreamRule';\n+import HumanReadableStreamRule from 'components/streamrules/HumanReadableStreamRule';\n \n import StoreProvider from 'injection/StoreProvider';\n \n import UserNotification from 'util/UserNotification';\n \n const StreamRulesStore = StoreProvider.getStore('StreamRules');\n+const { isPermitted } = PermissionsMixin;\n \n-const StreamRule = createReactClass({\n-  displayName: 'StreamRule',\n-\n-  propTypes: {\n-    matchData: PropTypes.array,\n-    onDelete: PropTypes.func,\n-    onSubmit: PropTypes.func,\n-    permissions: PropTypes.array.isRequired,\n-    stream: PropTypes.object.isRequired,\n-    streamRule: PropTypes.object.isRequired,\n-    streamRuleTypes: PropTypes.array.isRequired,\n-  },\n+const ActionButtonsWrap = styled.span`\n+  margin-right: 6px;\n+`;\n \n-  mixins: [PermissionsMixin],\n+const StreamRule = ({ matchData, permissions, stream, streamRule, streamRuleTypes, onSubmit, onDelete }) => {\n+  const streamRuleFormRef = useRef();\n \n-  _onEdit(event) {\n+  const _onEdit = (event) => {\n     event.preventDefault();\n-    this.streamRuleForm.open();\n-  },\n+    streamRuleFormRef.current.open();\n+  };\n \n-  _onDelete(event) {\n+  const _onDelete = (event) => {\n     event.preventDefault();\n+\n+    /* TODO: Replace with custom confirmation dialog */\n+    // eslint-disable-next-line no-alert\n     if (window.confirm('Do you really want to delete this stream rule?')) {\n-      StreamRulesStore.remove(this.props.stream.id, this.props.streamRule.id, () => {\n-        if (this.props.onDelete) {\n-          this.props.onDelete(this.props.streamRule.id);\n+      StreamRulesStore.remove(stream.id, streamRule.id, () => {\n+        if (onDelete) {\n+          onDelete(streamRule.id);\n         }\n         UserNotification.success('Stream rule has been successfully deleted.', 'Success');\n       });\n     }\n-  },\n+  };\n \n-  _onSubmit(streamRuleId, data) {\n-    StreamRulesStore.update(this.props.stream.id, streamRuleId, data, () => {\n-      if (this.props.onSubmit) {\n-        this.props.onSubmit(streamRuleId, data);\n+  const _onSubmit = (streamRuleId, data) => {\n+    StreamRulesStore.update(stream.id, streamRuleId, data, () => {\n+      if (onSubmit) {\n+        onSubmit(streamRuleId, data);\n       }\n       UserNotification.success('Stream rule has been successfully updated.', 'Success');\n     });\n-  },\n+  };\n \n-  _formatActionItems() {\n+  const _formatActionItems = () => {\n     return (\n-      <span>\n-        <a href=\"#\" onClick={this._onDelete} style={{ marginRight: 5 }}>\n+      <ActionButtonsWrap>\n+        <Button bsStyle=\"link\"\n+                bsSize=\"xsmall\"\n+                onClick={_onDelete}>\n           <Icon name=\"trash-o\" />\n-        </a>\n-        <a href=\"#\" onClick={this._onEdit} style={{ marginRight: 5 }}>\n+        </Button>\n+        <Button bsStyle=\"link\"\n+                bsSize=\"xsmall\"\n+                onClick={_onEdit}>\n           <Icon name=\"edit\" />\n-        </a>\n-      </span>\n-    );\n-  },\n-\n-  _getMatchDataClassNames() {\n-    return (this.props.matchData.rules[this.props.streamRule.id] ? 'alert-success' : 'alert-danger');\n-  },\n-\n-  render() {\n-    const { streamRule } = this.props;\n-    const { streamRuleTypes } = this.props;\n-    const actionItems = (this.isPermitted(this.props.permissions, [`streams:edit:${this.props.stream.id}`]) ? this._formatActionItems() : null);\n-    const className = (this.props.matchData ? this._getMatchDataClassNames() : null);\n-    const description = this.props.streamRule.description ? <small>{' '}({this.props.streamRule.description})</small> : null;\n-    return (\n-      <li className={className}>\n-        {actionItems}\n-        <HumanReadableStreamRule streamRule={streamRule} streamRuleTypes={streamRuleTypes} />\n-        <StreamRuleForm ref={(streamRuleForm) => { this.streamRuleForm = streamRuleForm; }}\n-                        streamRule={streamRule}\n-                        streamRuleTypes={streamRuleTypes}\n-                        title=\"Edit Stream Rule\"\n-                        onSubmit={this._onSubmit} />\n-        {description}\n-      </li>\n+        </Button>\n+      </ActionButtonsWrap>\n     );\n-  },\n-});\n+  };\n+\n+  const matchDataStyle = () => (matchData.rules[streamRule.id] ? 'success' : 'danger');\n+  const actionItems = isPermitted(permissions, [`streams:edit:${stream.id}`]) ? _formatActionItems() : null;\n+  const description = streamRule.description ? <small>{' '}({streamRule.description})</small> : null;\n+\n+  return (\n+    <ListGroupItem bsStyle={!isEmpty(matchData) && matchDataStyle()}>", "originalCommit": "08b3ba8464a127513157eaad9e04b74bf74cc3cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3NTc1Ng==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r372875756", "bodyText": "Stream IDs should be strings instead of numbers.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                id: PropTypes.number,\n          \n          \n            \n                id: PropTypes.string,", "author": "edmundoa", "createdAt": "2020-01-30T10:42:08Z", "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "diffHunk": "@@ -0,0 +1,82 @@\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+\n+import CollapsibleStreamRuleList from 'components/streamrules/CollapsibleStreamRuleList';\n+import { Pluralize } from 'components/common';\n+import { Button } from 'components/graylog';\n+\n+import StreamThroughput from './StreamThroughput';\n+\n+const StreamMetaData = ({ isDefaultStream, stream, streamRuleTypes, permissions }) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const toggleText = expanded ? 'Hide' : 'Show';\n+\n+  const _formatNumberOfStreamRules = () => {\n+    if (stream.is_default) {\n+      return 'The default stream contains all messages.';\n+    }\n+    if (stream.rules.length === 0) {\n+      return 'No configured rules.';\n+    }\n+\n+    let verbalMatchingType;\n+    switch (stream.matching_type) {\n+      case 'OR': verbalMatchingType = 'at least one'; break;\n+      default:\n+      case 'AND': verbalMatchingType = 'all'; break;\n+    }\n+\n+    return (\n+      <span>\n+        Must match {verbalMatchingType} of the {stream.rules.length} configured stream{' '}\n+        <Pluralize value={stream.rules.length} plural=\"rules\" singular=\"rule\" />.\n+      </span>\n+    );\n+  };\n+\n+  const _onHandleToggle = () => {\n+    setExpanded(!expanded);\n+  };\n+\n+  return (\n+    <div className=\"stream-metadata\">\n+      <StreamThroughput streamId={stream.id} />. {_formatNumberOfStreamRules()}\n+\n+      {!isDefaultStream && (\n+        <>\n+          <span className=\"stream-rules-link\">\n+            <Button bsStyle=\"link\"\n+                    bsSize=\"xsmall\"\n+                    onClick={_onHandleToggle}>\n+              {toggleText} stream rules\n+            </Button>\n+          </span>\n+\n+          <CollapsibleStreamRuleList key={`streamRules-${stream.id}`}\n+                                     stream={stream}\n+                                     streamRuleTypes={streamRuleTypes}\n+                                     permissions={permissions}\n+                                     expanded={expanded} />\n+        </>\n+      )}\n+    </div>\n+  );\n+};\n+\n+StreamMetaData.propTypes = {\n+  isDefaultStream: PropTypes.bool,\n+  stream: PropTypes.shape({\n+    id: PropTypes.number,", "originalCommit": "08b3ba8464a127513157eaad9e04b74bf74cc3cf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3OTI3OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r372879278", "bodyText": "Small thing: using an actual button here makes sense, but breaks the link alignment with text, since the browser will render it differently as a regular anchor:", "author": "edmundoa", "createdAt": "2020-01-30T10:49:29Z", "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "diffHunk": "@@ -0,0 +1,82 @@\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+\n+import CollapsibleStreamRuleList from 'components/streamrules/CollapsibleStreamRuleList';\n+import { Pluralize } from 'components/common';\n+import { Button } from 'components/graylog';\n+\n+import StreamThroughput from './StreamThroughput';\n+\n+const StreamMetaData = ({ isDefaultStream, stream, streamRuleTypes, permissions }) => {\n+  const [expanded, setExpanded] = useState(false);\n+  const toggleText = expanded ? 'Hide' : 'Show';\n+\n+  const _formatNumberOfStreamRules = () => {\n+    if (stream.is_default) {\n+      return 'The default stream contains all messages.';\n+    }\n+    if (stream.rules.length === 0) {\n+      return 'No configured rules.';\n+    }\n+\n+    let verbalMatchingType;\n+    switch (stream.matching_type) {\n+      case 'OR': verbalMatchingType = 'at least one'; break;\n+      default:\n+      case 'AND': verbalMatchingType = 'all'; break;\n+    }\n+\n+    return (\n+      <span>\n+        Must match {verbalMatchingType} of the {stream.rules.length} configured stream{' '}\n+        <Pluralize value={stream.rules.length} plural=\"rules\" singular=\"rule\" />.\n+      </span>\n+    );\n+  };\n+\n+  const _onHandleToggle = () => {\n+    setExpanded(!expanded);\n+  };\n+\n+  return (\n+    <div className=\"stream-metadata\">\n+      <StreamThroughput streamId={stream.id} />. {_formatNumberOfStreamRules()}\n+\n+      {!isDefaultStream && (\n+        <>\n+          <span className=\"stream-rules-link\">\n+            <Button bsStyle=\"link\"", "originalCommit": "08b3ba8464a127513157eaad9e04b74bf74cc3cf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzU4MjI2OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r373582269", "bodyText": "Got it fixed up!", "author": "kyleknighted", "createdAt": "2020-01-31T16:57:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjg3OTI3OA=="}], "type": "inlineReview"}, {"oid": "7607724bcc0501e937f8110f6fac4bc9a54de438", "url": "https://github.com/Graylog2/graylog2-server/commit/7607724bcc0501e937f8110f6fac4bc9a54de438", "message": "pr ui feedback", "committedDate": "2020-01-31T16:32:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyNjg0Nw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r374026847", "bodyText": "It looks like when trying to load the \"Manage rules\" page there's an error:\nObjects are not valid as a React child (found: object with keys {$$typeof, render, displayName, attrs, componentStyle, foldedComponentIds, styledComponentId, target, withComponent, warnTooManyClasses, toString}). If you meant to render a collection of children, use an array instead.\n    in templateFunction (created by StreamRulesEditor)\n    in h4 (created by Context.Consumer)\n    in StyledComponent (created by StreamRulesEditor__StreamAlertHeader)\n    in StreamRulesEditor__StreamAlertHeader (created by StreamRulesEditor)\n    in div (created by Panel)\n    in div (created by Panel)\n    in Panel (created by Context.Consumer)\n    in StyledComponent (created by Panel__StyledPanel)\n    in Panel__StyledPanel (created by StreamRulesEditor)\n    in div (created by Col)\n    in Col (created by StreamRulesEditor)\n    in div (created by Row)\n    in Row (created by StreamRulesEditor)\n    in StreamRulesEditor (created by StreamEditPage)", "author": "edmundoa", "createdAt": "2020-02-03T10:31:15Z", "path": "graylog2-web-interface/src/components/streamrules/StreamRulesEditor.jsx", "diffHunk": "@@ -79,83 +107,87 @@ class StreamRulesEditor extends React.Component {\n   };\n \n   _explainMatchResult = () => {\n-    if (this.state.matchData) {\n-      if (this.state.matchData.matches) {\n+    const { matchData } = this.state;\n+\n+    if (matchData) {\n+      if (matchData.matches) {\n         return (\n-          <span>\n-            <Icon name=\"check\" style={{ color: 'green' }} /> This message would be routed to this stream.\n-          </span>\n+          <>\n+            <MatchIcon matches name=\"check\" /> This message would be routed to this stream!\n+          </>\n         );\n       }\n       return (\n-        <span>\n-          <Icon name=\"remove\" style={{ color: 'red' }} /> This message would not be routed to this stream.\n-        </span>\n+        <>\n+          <MatchIcon name=\"remove\" /> This message would not be routed to this stream.\n+        </>\n       );\n     }\n-    return ('Please load a message to check if it would match against these rules and therefore be routed into this stream.');\n+\n+    return (\n+      <>\n+        <MatchIcon empty name=\"exclamation-circle\" /> Please load a message in Step 1 above to check if it would match against these rules.\n+      </>\n+    );\n   };\n \n   render() {\n-    const styles = (this.state.matchData ? this._getListClassName(this.state.matchData) : 'info');\n-    if (this.state.stream && this.state.streamRuleTypes) {\n+    const { matchData, stream, streamRuleTypes } = this.state;\n+    const { currentUser, messageId, index } = this.props;\n+    const styles = (matchData ? this._getListClassName(matchData) : 'info');\n+\n+    if (stream && streamRuleTypes) {\n       return (\n-        <div className=\"row content\">\n-          <div className=\"col-md-12 streamrule-sample-message\">\n-            <h2>\n-              1. Load a message to test rules\n-            </h2>\n+        <Row className=\"content\">\n+          <Col md={12} className=\"streamrule-sample-message\">\n+            <h2>1. Load a message to test rules</h2>\n \n             <div className=\"stream-loader\">\n-              <LoaderTabs messageId={this.props.messageId} index={this.props.index} onMessageLoaded={this.onMessageLoaded} />\n-            </div>\n-\n-            <div className=\"spinner\" style={{ display: 'none' }}><h2><Icon name=\"spinner\" spin /> &nbsp;Loading message\n-            </h2>\n-            </div>\n-\n-            <div className=\"sample-message-display\" style={{ display: 'none', marginTop: '5px' }}>\n-              <strong>Next step:</strong>\n-              Add/delete/modify stream rules in step 2 and see if the example message would have been\n-              routed into the stream or not. Use the button on the right to add a stream rule.\n+              <LoaderTabs messageId={messageId}\n+                          index={index}\n+                          onMessageLoaded={this.onMessageLoaded} />\n             </div>\n \n             <hr />\n \n             <div className=\"buttons pull-right\">\n-              <button className=\"btn btn-success show-stream-rule\" onClick={this._onAddStreamRule}>\n+              <Button bsStyle=\"success\"\n+                      className=\"show-stream-rule\"\n+                      onClick={this._onAddStreamRule}>\n                 Add stream rule\n-              </button>\n+              </Button>\n               <StreamRuleForm ref={(newStreamRuleForm) => { this.newStreamRuleForm = newStreamRuleForm; }}\n                               title=\"New Stream Rule\"\n-                              streamRuleTypes={this.state.streamRuleTypes}\n+                              streamRuleTypes={streamRuleTypes}\n                               onSubmit={this._onStreamRuleFormSubmit} />\n             </div>\n \n-            <h2>\n-              2. Manage stream rules\n-            </h2>\n+            <h2>2. Manage stream rules</h2>\n \n-            {this._explainMatchResult()}\n+            <MatchingTypeSwitcher stream={stream} onChange={this.loadData} />\n+            <Panel bsStyle={styles}>\n+              <StreamAlertHeader>{this._explainMatchResult()}</StreamAlertHeader>", "originalCommit": "7607724bcc0501e937f8110f6fac4bc9a54de438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExMDA5OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r374110099", "bodyText": "Bad parenthesis wrap in a styled-component \ud83d\ude29", "author": "kyleknighted", "createdAt": "2020-02-03T13:47:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyNjg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyNzE2OA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r374027168", "bodyText": "With the last changes this doesn't look right:", "author": "edmundoa", "createdAt": "2020-02-03T10:31:57Z", "path": "graylog2-web-interface/src/components/streams/StreamMetaData.jsx", "diffHunk": "@@ -0,0 +1,82 @@\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import styled from 'styled-components';\n+\n+import CollapsibleStreamRuleList from 'components/streamrules/CollapsibleStreamRuleList';\n+import { Pluralize } from 'components/common';\n+import { Button } from 'components/graylog';\n+\n+import StreamThroughput from './StreamThroughput';\n+\n+const StreamMetaDataWrapper = styled.div`\n+  display: flex;\n+  align-items: center;\n+`;\n+\n+const StreamMetaData = ({ isDefaultStream, stream, streamRuleTypes, permissions }) => {\n+  let verbalMatchingType;\n+  const [expanded, setExpanded] = useState(false);\n+  const toggleText = expanded ? 'Hide' : 'Show';\n+\n+  if (stream.is_default) {\n+    return 'The default stream contains all messages.';\n+  }\n+  if (stream.rules.length === 0) {\n+    return 'No configured rules.';\n+  }\n+\n+  switch (stream.matching_type) {\n+    case 'OR': verbalMatchingType = 'at least one'; break;\n+    default:\n+    case 'AND': verbalMatchingType = 'all'; break;\n+  }\n+\n+  const _onHandleToggle = () => {\n+    setExpanded(!expanded);\n+  };\n+\n+  return (\n+    <StreamMetaDataWrapper>\n+      <StreamThroughput streamId={stream.id} />.\n+\n+      <span>\n+        &nbsp;Must match {verbalMatchingType} of the {stream.rules.length} configured stream&nbsp;\n+        <Pluralize value={stream.rules.length} plural=\"rules\" singular=\"rule\" />.\n+      </span>\n+\n+      {!isDefaultStream && (\n+        <>\n+          <Button bsStyle=\"link\"\n+                  bsSize=\"xsmall\"\n+                  onClick={_onHandleToggle}>\n+            {toggleText} stream rules\n+          </Button>\n+\n+          <CollapsibleStreamRuleList key={`streamRules-${stream.id}`}", "originalCommit": "7607724bcc0501e937f8110f6fac4bc9a54de438", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEwNDc4Mw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7281#discussion_r374104783", "bodyText": "", "author": "kyleknighted", "createdAt": "2020-02-03T13:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAyNzE2OA=="}], "type": "inlineReview"}, {"oid": "84488ae02799d3d99be72d4a379b2980e7ad2239", "url": "https://github.com/Graylog2/graylog2-server/commit/84488ae02799d3d99be72d4a379b2980e7ad2239", "message": "Updating Stream Rules alert styles", "committedDate": "2020-02-03T13:48:42Z", "type": "commit"}, {"oid": "7a9e608c683f3cfe24d86912870cdd7b04334353", "url": "https://github.com/Graylog2/graylog2-server/commit/7a9e608c683f3cfe24d86912870cdd7b04334353", "message": "Keeping code consistent", "committedDate": "2020-02-03T13:50:03Z", "type": "commit"}, {"oid": "e46e3926cebc98cc5711e61c77b644c8c50b7500", "url": "https://github.com/Graylog2/graylog2-server/commit/e46e3926cebc98cc5711e61c77b644c8c50b7500", "message": "Stream Preview Rules", "committedDate": "2020-02-03T13:50:25Z", "type": "commit"}, {"oid": "a97ac07c8561b1d4e7e56bf5f7729f04b765aec8", "url": "https://github.com/Graylog2/graylog2-server/commit/a97ac07c8561b1d4e7e56bf5f7729f04b765aec8", "message": "Linting, but replacing CRC is out of scope of this PR", "committedDate": "2020-02-03T13:50:27Z", "type": "commit"}, {"oid": "c26dace8d26ce3b430d84e6c2eb8452f8d813ad3", "url": "https://github.com/Graylog2/graylog2-server/commit/c26dace8d26ce3b430d84e6c2eb8452f8d813ad3", "message": "pr code feedback", "committedDate": "2020-02-03T13:50:27Z", "type": "commit"}, {"oid": "6d16f3518471f21f65bde9543f46ca6654c51df2", "url": "https://github.com/Graylog2/graylog2-server/commit/6d16f3518471f21f65bde9543f46ca6654c51df2", "message": "pr ui feedback", "committedDate": "2020-02-03T13:50:27Z", "type": "commit"}, {"oid": "f134d42e8a6ef92369f42b999b3836c91c0062db", "url": "https://github.com/Graylog2/graylog2-server/commit/f134d42e8a6ef92369f42b999b3836c91c0062db", "message": "fixing metadata layout", "committedDate": "2020-02-03T13:50:27Z", "type": "commit"}, {"oid": "9413f008d270fa50ede093bab66977796d52c840", "url": "https://github.com/Graylog2/graylog2-server/commit/9413f008d270fa50ede093bab66977796d52c840", "message": "Fix broken styled component", "committedDate": "2020-02-03T13:50:27Z", "type": "commit"}, {"oid": "9413f008d270fa50ede093bab66977796d52c840", "url": "https://github.com/Graylog2/graylog2-server/commit/9413f008d270fa50ede093bab66977796d52c840", "message": "Fix broken styled component", "committedDate": "2020-02-03T13:50:27Z", "type": "forcePushed"}]}