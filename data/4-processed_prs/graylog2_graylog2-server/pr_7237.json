{"pr_number": 7237, "pr_title": "Add CSV export to new search", "pr_createdAt": "2020-01-21T15:52:15Z", "pr_url": "https://github.com/Graylog2/graylog2-server/pull/7237", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzOTEyOQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369439129", "bodyText": "When opening the modal, I am receiving the following PropType warning:\nWarning: Failed prop type: Invalid prop `availableFields` of type `object` supplied to `CSVExport`, expected `array`", "author": "linuspahl", "createdAt": "2020-01-22T09:07:26Z", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,", "originalCommit": "a05a2eb99299962e4b381c2d9f624a18c9621407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NTAwNQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370085005", "bodyText": "\ud83d\udc4d", "author": "kmerz", "createdAt": "2020-01-23T12:18:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzOTEyOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MTgyNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369441826", "bodyText": "Could you implement the BootstrapModalWrapper? We mainly use the component to handle the modal state, but it also unifies the modal behaviour / settings.", "author": "linuspahl", "createdAt": "2020-01-22T09:13:28Z", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {\n+  const [selectedStream, setSelectedStream] = useState();\n+  const [selectedFields, setSelectedFields] = useState(defaultFieldOptions);\n+\n+  const link = selectedFields.length > 0\n+    ? (\n+      /* eslint-disable-next-line react/jsx-no-target-blank */\n+      <a href={getURLForExportAsCSV((selectedStream || {}).value, selectedFields.map(f => f.value))} target=\"_blank\">\n+        <Icon name=\"cloud-download\" />&nbsp;\n+        Download\n+      </a>\n+    )\n+    : <p>Select at least on field to export messages as CSV.</p>;\n+\n+  const infoText = (URLUtils.areCredentialsInURLSupported()\n+    ? 'Please right click the download link below and choose \"Save Link As...\" to download the CSV file.'\n+    : 'Please click the download link below. Your browser may ask for your username and password to '\n+    + 'download the CSV file.');\n+\n+  const Content = styled.div`\n+    margin-left: 10px;\n+    margin-right: 10px;\n+  `;\n+  return (\n+    <Modal show>", "originalCommit": "a05a2eb99299962e4b381c2d9f624a18c9621407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjIxNw==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370086217", "bodyText": "\ud83d\udc4d", "author": "kmerz", "createdAt": "2020-01-23T12:20:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MTgyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MzU2NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369443564", "bodyText": "Because the component is a Modal, I would prefer the component name CSVExportModal. Comparable components have a similar name.", "author": "linuspahl", "createdAt": "2020-01-22T09:17:14Z", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {", "originalCommit": "a05a2eb99299962e4b381c2d9f624a18c9621407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjI4OQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370086289", "bodyText": "\ud83d\udc4d", "author": "kmerz", "createdAt": "2020-01-23T12:20:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0MzU2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0NzQxNQ==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369447415", "bodyText": "We could also use target=\"_parent\" to start the download in the same browser tab. When it comes to downloads, I would still use target=\"_blank\" for PDF's, because of PDF readers, but not for CSV files.", "author": "linuspahl", "createdAt": "2020-01-22T09:25:20Z", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {\n+  const [selectedStream, setSelectedStream] = useState();\n+  const [selectedFields, setSelectedFields] = useState(defaultFieldOptions);\n+\n+  const link = selectedFields.length > 0\n+    ? (\n+      /* eslint-disable-next-line react/jsx-no-target-blank */\n+      <a href={getURLForExportAsCSV((selectedStream || {}).value, selectedFields.map(f => f.value))} target=\"_blank\">", "originalCommit": "a05a2eb99299962e4b381c2d9f624a18c9621407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4Nzc3NA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370087774", "bodyText": "\ud83d\udc4d", "author": "kmerz", "createdAt": "2020-01-23T12:24:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ0NzQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NDYxNg==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r369484616", "bodyText": "Sorting availableStreams and availableFields would really improve the usability.", "author": "linuspahl", "createdAt": "2020-01-22T10:38:21Z", "path": "graylog2-web-interface/src/views/components/searchbar/CSVExport.jsx", "diffHunk": "@@ -0,0 +1,154 @@\n+// @flow strict\n+import React, { useState } from 'react';\n+import PropTypes from 'prop-types';\n+import URI from 'urijs';\n+import connect from 'stores/connect';\n+/* $FlowFixMe: Need to add to flow typed */\n+import styled from 'styled-components';\n+\n+import { StreamsStore } from 'views/stores/StreamsStore';\n+import { FieldTypesStore } from 'views/stores/FieldTypesStore';\n+import { ViewStore } from 'views/stores/ViewStore';\n+import URLUtils from 'util/URLUtils';\n+import { Modal, Button, Row } from 'components/graylog';\n+import { Icon } from 'components/common';\n+import ApiRoutes from 'routing/ApiRoutes';\n+import StoreProvider from 'injection/StoreProvider';\n+import View from 'views/logic/views/View';\n+import Select from 'views/components/Select';\n+\n+const SessionStore = StoreProvider.getStore('Session');\n+\n+type Option = {\n+  label: String,\n+  value: String,\n+};\n+\n+type Props = {\n+  availableStreams: Array<Option>,\n+  availableFields: Array<Option>,\n+  closeModal: () => void,\n+};\n+\n+const getURLForExportAsCSV = (selectedStream: ?string, selectedFields: Array<string> = []) => {\n+  const { view } = ViewStore.getInitialState() || {};\n+  if (view && view.type === View.Type.Search) {\n+    const { queries } = view.search;\n+    if (queries.size !== 1) {\n+      throw new Error('Searches must only have a single query!');\n+    }\n+    const firstQuery = queries.first();\n+    if (firstQuery) {\n+      const { query: { query_string: queryString }, timerange } = firstQuery;\n+      const query = !queryString ? '*' : queryString;\n+      const url = new URI(URLUtils.qualifyUrl(\n+        ApiRoutes.UniversalSearchApiController.export(\n+          timerange.type,\n+          query,\n+          timerange,\n+          selectedStream,\n+          0,\n+          0,\n+          selectedFields,\n+        ).url,\n+      ));\n+      if (URLUtils.areCredentialsInURLSupported()) {\n+        url\n+          .username(SessionStore.getSessionId())\n+          .password('session');\n+      }\n+\n+      return url.toString();\n+    }\n+  }\n+  return new URI(URLUtils.qualifyUrl('/notfound'));\n+};\n+\n+const wrapOption = o => ({ label: o, value: o });\n+const defaultFields = ['timestamp', 'source', 'message'];\n+const defaultFieldOptions = defaultFields.map(wrapOption);\n+\n+const CSVExport = ({ closeModal, availableStreams, availableFields }: Props) => {", "originalCommit": "a05a2eb99299962e4b381c2d9f624a18c9621407", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NzgyOA==", "url": "https://github.com/Graylog2/graylog2-server/pull/7237#discussion_r370087828", "bodyText": "\ud83d\udc4d", "author": "kmerz", "createdAt": "2020-01-23T12:24:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQ4NDYxNg=="}], "type": "inlineReview"}, {"oid": "16f5d0af1725f78e0040d39e5a92943173e632c1", "url": "https://github.com/Graylog2/graylog2-server/commit/16f5d0af1725f78e0040d39e5a92943173e632c1", "message": "Introducing context for function to load new/reset view.", "committedDate": "2020-01-23T10:21:40Z", "type": "commit"}, {"oid": "8a4a06a48ba32cde297399a20bc6afb5e9b7f23f", "url": "https://github.com/Graylog2/graylog2-server/commit/8a4a06a48ba32cde297399a20bc6afb5e9b7f23f", "message": "Supply function for new view loader context.", "committedDate": "2020-01-23T10:21:41Z", "type": "commit"}, {"oid": "f3e9b97d7b7e7c809ad980257c8b4a7d11afe7dc", "url": "https://github.com/Graylog2/graylog2-server/commit/f3e9b97d7b7e7c809ad980257c8b4a7d11afe7dc", "message": "Changing glyphs, adding text & dropdown, fixing reset search.", "committedDate": "2020-01-23T10:21:41Z", "type": "commit"}, {"oid": "9874c025c81d23f878ce13d92eb987affd5aae90", "url": "https://github.com/Graylog2/graylog2-server/commit/9874c025c81d23f878ce13d92eb987affd5aae90", "message": "Adding testid to reset search item.", "committedDate": "2020-01-23T10:21:41Z", "type": "commit"}, {"oid": "a79048f4c41acfabd4576dd76ead577113ff9e80", "url": "https://github.com/Graylog2/graylog2-server/commit/a79048f4c41acfabd4576dd76ead577113ff9e80", "message": "Simplifying & updating snapshots, adapting test case.", "committedDate": "2020-01-23T10:21:42Z", "type": "commit"}, {"oid": "0d83e0f35386ea7c3dd4a5a68ad80db1da21b6a5", "url": "https://github.com/Graylog2/graylog2-server/commit/0d83e0f35386ea7c3dd4a5a68ad80db1da21b6a5", "message": "Fixing linter hints.", "committedDate": "2020-01-23T10:21:42Z", "type": "commit"}, {"oid": "6c2f20d3e3e109d7f41e9b608f0fe78d960da4fd", "url": "https://github.com/Graylog2/graylog2-server/commit/6c2f20d3e3e109d7f41e9b608f0fe78d960da4fd", "message": "Add modal to download the csv", "committedDate": "2020-01-23T10:21:43Z", "type": "commit"}, {"oid": "3faa0fa05aefb3506dfddd7c8d40e9026237900f", "url": "https://github.com/Graylog2/graylog2-server/commit/3faa0fa05aefb3506dfddd7c8d40e9026237900f", "message": "Add stream filter selection", "committedDate": "2020-01-23T10:21:43Z", "type": "commit"}, {"oid": "59dcffc2b29c85206ebe478e236d329069eddaa8", "url": "https://github.com/Graylog2/graylog2-server/commit/59dcffc2b29c85206ebe478e236d329069eddaa8", "message": "Add fields selection for the CSV export", "committedDate": "2020-01-23T10:21:43Z", "type": "commit"}, {"oid": "b3739c9511301583d1c67e0f473c1cd566563e9d", "url": "https://github.com/Graylog2/graylog2-server/commit/b3739c9511301583d1c67e0f473c1cd566563e9d", "message": "Add Icon and fix typo", "committedDate": "2020-01-23T10:21:44Z", "type": "commit"}, {"oid": "3eea8659d93672287f570da982c3d40de844a90b", "url": "https://github.com/Graylog2/graylog2-server/commit/3eea8659d93672287f570da982c3d40de844a90b", "message": "Fix annotations from @linuspahl", "committedDate": "2020-01-23T12:25:16Z", "type": "commit"}, {"oid": "3eea8659d93672287f570da982c3d40de844a90b", "url": "https://github.com/Graylog2/graylog2-server/commit/3eea8659d93672287f570da982c3d40de844a90b", "message": "Fix annotations from @linuspahl", "committedDate": "2020-01-23T12:25:16Z", "type": "forcePushed"}]}