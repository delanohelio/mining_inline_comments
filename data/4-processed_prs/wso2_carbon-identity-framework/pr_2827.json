{"pr_number": 2827, "pr_title": "Modify Template Manager to use Configuration Store", "pr_createdAt": "2020-03-16T13:38:08Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/2827", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NjY0OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r393096649", "bodyText": "@thanujalk do we need filtering/sorting for the templates?", "author": "emswbandara", "createdAt": "2020-03-16T15:09:56Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManager.java", "diffHunk": "@@ -77,4 +77,51 @@\n      */\n     List<TemplateInfo> listTemplates(Integer limit, Integer offset) throws TemplateManagementException;\n \n+    /**\n+     * Return the template given the template id.\n+     *\n+     * @param templateId unique identifier of the template.\n+     * @return template.\n+     * @throws TemplateManagementException if an error occurs while retrieving the template.\n+     */\n+    default Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Update a template given the template id by replacing the existing template object.\n+     *\n+     * @param templateId unique identifier of the the template.\n+     * @param template   updated template object.\n+     * @throws TemplateManagementException if an error occurs while updating the template.\n+     */\n+    default void updateTemplateById(String templateId, Template template) throws TemplateManagementException {\n+\n+    }\n+\n+    /**\n+     * Delete a template given the template id.\n+     *\n+     * @param templateId unique identifier of the template.\n+     * @throws TemplateManagementException if an error occurs while deleting the template.\n+     */\n+    default void deleteTemplateById(String templateId) throws TemplateManagementException {\n+\n+    }\n+\n+    /**\n+     * List all the templates of a given type.\n+     *\n+     * @param templateType template type\n+     * @param limit number of templates required for the list.\n+     * @param offset offset of the list of templates.\n+     * @return list templates\n+     * @throws TemplateManagementException if an error occurs while retrieving the templates.\n+     */\n+    default List<Template> listTemplates(String templateType, Integer limit, Integer offset) throws", "originalCommit": "b76e83066645585cb29eb3e870284e9a9f259310", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzMDIzMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396230233", "bodyText": "If the backend has the support... yes", "author": "thanujalk", "createdAt": "2020-03-23T06:13:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzA5NjY0OQ=="}], "type": "inlineReview"}, {"oid": "6f4f5d3302b526555bbba282af91f7ded4423678", "url": "https://github.com/wso2/carbon-identity-framework/commit/6f4f5d3302b526555bbba282af91f7ded4423678", "message": "Update the template model and interface", "committedDate": "2020-03-17T06:44:36Z", "type": "forcePushed"}, {"oid": "8126406deade50e76d9dcccaaa079568607bf19b", "url": "https://github.com/wso2/carbon-identity-framework/commit/8126406deade50e76d9dcccaaa079568607bf19b", "message": "Update template-mgt test cases to run with TemplateManagerDAO", "committedDate": "2020-03-19T09:10:22Z", "type": "forcePushed"}, {"oid": "baf487a94ec656f70dcacc651d6508ca877b1bef", "url": "https://github.com/wso2/carbon-identity-framework/commit/baf487a94ec656f70dcacc651d6508ca877b1bef", "message": "Add methods to retrieve and delete resources by id", "committedDate": "2020-03-19T10:32:53Z", "type": "commit"}, {"oid": "47e97802bcb8c43744902bd3eac9bd921f1be8c4", "url": "https://github.com/wso2/carbon-identity-framework/commit/47e97802bcb8c43744902bd3eac9bd921f1be8c4", "message": "Remove template-mgt dependency from authentication-framework", "committedDate": "2020-03-19T10:33:12Z", "type": "commit"}, {"oid": "16708b43628695e58d57fd5569fb70e44d3c395e", "url": "https://github.com/wso2/carbon-identity-framework/commit/16708b43628695e58d57fd5569fb70e44d3c395e", "message": "Add template management service with config-store", "committedDate": "2020-03-19T10:34:08Z", "type": "commit"}, {"oid": "2b6202957389d95f5983b9c20215a132143ec2ff", "url": "https://github.com/wso2/carbon-identity-framework/commit/2b6202957389d95f5983b9c20215a132143ec2ff", "message": "Update template-mgt test cases to run with TemplateManagerDAO", "committedDate": "2020-03-19T10:34:32Z", "type": "commit"}, {"oid": "abe5e7eefa4d5d9543b1a3017b5a4b25054fe612", "url": "https://github.com/wso2/carbon-identity-framework/commit/abe5e7eefa4d5d9543b1a3017b5a4b25054fe612", "message": "Refactor the code", "committedDate": "2020-03-19T13:14:47Z", "type": "forcePushed"}, {"oid": "e68268fd7e879fc3f59e3d245cac51b7acc0d5bd", "url": "https://github.com/wso2/carbon-identity-framework/commit/e68268fd7e879fc3f59e3d245cac51b7acc0d5bd", "message": "Refactor the code", "committedDate": "2020-03-19T13:20:53Z", "type": "forcePushed"}, {"oid": "7ae7bec2162fdcf95712228110b209b1ec017dc5", "url": "https://github.com/wso2/carbon-identity-framework/commit/7ae7bec2162fdcf95712228110b209b1ec017dc5", "message": "Refactor the code", "committedDate": "2020-03-19T13:25:46Z", "type": "forcePushed"}, {"oid": "538235e8d09048212b4d79fad0dda527c1f651c9", "url": "https://github.com/wso2/carbon-identity-framework/commit/538235e8d09048212b4d79fad0dda527c1f651c9", "message": "Refactor the code", "committedDate": "2020-03-19T20:07:13Z", "type": "commit"}, {"oid": "538235e8d09048212b4d79fad0dda527c1f651c9", "url": "https://github.com/wso2/carbon-identity-framework/commit/538235e8d09048212b4d79fad0dda527c1f651c9", "message": "Refactor the code", "committedDate": "2020-03-19T20:07:13Z", "type": "forcePushed"}, {"oid": "68664b1c7bb03dfd736271ca227ec13fa00afc03", "url": "https://github.com/wso2/carbon-identity-framework/commit/68664b1c7bb03dfd736271ca227ec13fa00afc03", "message": "Improve exception handling", "committedDate": "2020-03-20T02:39:03Z", "type": "commit"}, {"oid": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "url": "https://github.com/wso2/carbon-identity-framework/commit/7340dab3d80b07c80718a7aebd275dc7798abbc5", "message": "Add template update possibility", "committedDate": "2020-03-22T18:27:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMDUxNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396220517", "bodyText": "Shall we throw the NotImplementedException in Apache commons library?", "author": "tharindu-bandara", "createdAt": "2020-03-23T05:31:00Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/ConfigurationManager.java", "diffHunk": "@@ -252,4 +252,34 @@ InputStream getFileById(String resourceType, String resourceName, String fileId)\n     void deleteFileById(String resourceType, String resourceName, String fileId)\n             throws ConfigurationManagementException;\n \n+    /**\n+     * This function is used to get a resource by the resource id.\n+     *\n+     * @param resourceId Id representing the resource.\n+     * @throws ConfigurationManagementException Configuration management exception.\n+     */\n+    default Resource getTenantResourceById(String resourceId) throws ConfigurationManagementException {\n+\n+        return null;", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2NDc4OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396364788", "bodyText": "We have implemented this method in the child class, ConfigurationManagerImpl.java where this interface is implemented. Therefore we don't need to have default methods at this level.", "author": "pamodaaw", "createdAt": "2020-03-23T10:55:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMDUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMDk0NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396220944", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                default void replaceResourceAndFiles(Resource resource) throws ConfigurationManagementException {\n          \n          \n            \n                default void replaceResourceWithFiles(Resource resource) throws ConfigurationManagementException {", "author": "tharindu-bandara", "createdAt": "2020-03-23T05:32:53Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/ConfigurationManager.java", "diffHunk": "@@ -252,4 +252,34 @@ InputStream getFileById(String resourceType, String resourceName, String fileId)\n     void deleteFileById(String resourceType, String resourceName, String fileId)\n             throws ConfigurationManagementException;\n \n+    /**\n+     * This function is used to get a resource by the resource id.\n+     *\n+     * @param resourceId Id representing the resource.\n+     * @throws ConfigurationManagementException Configuration management exception.\n+     */\n+    default Resource getTenantResourceById(String resourceId) throws ConfigurationManagementException {\n+\n+        return null;\n+    }\n+\n+    /**\n+     * This function is used to delete the given resource id.\n+     *\n+     * @param resourceId Request to delete the {@link Resource}.\n+     * @throws ConfigurationManagementException Configuration management exception.\n+     */\n+    default void deleteResourceById(String resourceId) throws ConfigurationManagementException {\n+\n+    }\n+\n+    /**\n+     * This function is used to replace a given resource along with all its file.\n+     *\n+     * @param resource resource object.\n+     * @throws ConfigurationManagementException Configuration management exception.\n+     */\n+    default void replaceResourceAndFiles(Resource resource) throws ConfigurationManagementException {", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1ODUxMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396258512", "bodyText": "can't we simply use replaceResource for the method name here? from the description we can imply that its files will also be replaced.. WDYT", "author": "emswbandara", "createdAt": "2020-03-23T07:44:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMDk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2ODYwMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396368603", "bodyText": "@emswbandara, that is what should be implied from this. There is another 'replaceResource' method which updates only the resource metadata and resource attributes.", "author": "pamodaaw", "createdAt": "2020-03-23T11:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMDk0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyMjYwOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396922608", "bodyText": "Changed the function name to replaceResource(Resource resource). The arguments are different from the what is there in the existing replaceResource method", "author": "pamodaaw", "createdAt": "2020-03-24T06:17:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMDk0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTM4Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396225382", "bodyText": "Shall we throw NotImplementedException from Apache commons?", "author": "tharindu-bandara", "createdAt": "2020-03-23T05:52:30Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/dao/ConfigurationDAO.java", "diffHunk": "@@ -71,6 +71,39 @@ Resource getResourceByName(int tenantId, String resourceTypeId, String name)\n      */\n     Resource getResourceById(String resourceId) throws ConfigurationManagementException;\n \n+    /**\n+     * Returns {@link Resource} by id given the tenant id.\n+     *\n+     * @param tenantId   Tenant id of the {@link Resource}.\n+     * @param resourceId Id value of the {@link Resource} to be returned.\n+     * @return {@link Resource} for the given name.\n+     * @throws ConfigurationManagementException Configuration Management Exception.\n+     */\n+    default Resource getTenantResourceById(int tenantId, String resourceId) throws ConfigurationManagementException {\n+\n+        return null;", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM2OTYzNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396369637", "bodyText": "We have implemented this method in the child class, ConfigurationDAOImpl.java where this interface is implemented. Therefore we don't need to have default methods at this level.", "author": "pamodaaw", "createdAt": "2020-03-23T11:04:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNTM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNzE1MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396227150", "bodyText": "Instead, shall we define a separate query constant for  AND R.TENANT_ID = ??", "author": "tharindu-bandara", "createdAt": "2020-03-23T06:00:08Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/dao/impl/ConfigurationDAOImpl.java", "diffHunk": "@@ -321,6 +369,60 @@ public Resource getResourceById(String resourceId) throws ConfigurationManagemen\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Resource getTenantResourceById(int tenantId, String resourceId) throws ConfigurationManagementException {\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        List<ConfigurationRawDataCollector> configurationRawDataCollectors;\n+        try {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(useCreatedTimeField() ? GET_RESOURCE_BY_ID_MYSQL :\n+                    GET_RESOURCE_BY_ID_MYSQL_WITHOUT_CREATED_TIME);\n+            sb.append(\" AND R.TENANT_ID = ?\");", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI1ODU4MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396258580", "bodyText": "This was decided during the last code review to avoid the code duplication", "author": "pamodaaw", "createdAt": "2020-03-23T07:44:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNzE1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyOTc1OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396929758", "bodyText": "+1 for that. What I meant is to use a constant for the tenant ID appending query", "author": "tharindu-bandara", "createdAt": "2020-03-24T06:41:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNzE1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyODM3Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396228372", "bodyText": "How does the template.getTemplateType() is created?", "author": "tharindu-bandara", "createdAt": "2020-03-23T06:05:40Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManagerImpl.java", "diffHunk": "@@ -238,4 +244,149 @@ private void validatePaginationParameters(Integer limit, Integer offset) throws\n         }\n     }\n \n+    @Override\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            Resource resource = configManager.getTenantResourceById(templateId);\n+            Template template = new ResourceToTemplate().apply(resource);\n+            if (resource.getFiles().size() == 1) {\n+                InputStream templateScriptInputStream = configManager.getFileById(resource.getResourceType(),\n+                        resource.getResourceName(), resource.getFiles().get(0).getId());\n+                template.setTemplateScript(IOUtils.toString(templateScriptInputStream));\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(template.getTemplateType().toString() + \" can have only one templated object. But the \" +\n+                            \"template with id: \" + templateId + \" has \" + resource.getFiles().size() + \" templated \" +\n+                            \"object/s. Therefore templated object is not retrieved.\");\n+                }\n+            }\n+            return template;\n+        } catch (ConfigurationManagementException e) {\n+            if(ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ID_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())){\n+                throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND, e,\n+                        templateId, getTenantDomainFromCarbonContext());\n+            }\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_RETRIEVE_TEMPLATE_BY_ID, e,\n+                    templateId, getTenantDomainFromCarbonContext());\n+        } catch (IOException e) {\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_RETRIEVE_TEMPLATE_BY_ID, e,\n+                    templateId, getTenantDomainFromCarbonContext());        }\n+    }\n+\n+    @Override\n+    public List<Template> listTemplates(String templateType, Integer limit, Integer offset) throws\n+            TemplateManagementException {\n+\n+        if (!isValidTemplateType(templateType)) {\n+            throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_TEMPLATE_TYPE,\n+                    templateType);\n+        }\n+        if (limit != null || offset != null) {\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_PAGINATION_NOT_SUPPORTED, null);\n+        }\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            Resources resourcesList = configManager.getResourcesByType(templateType);\n+            return resourcesList.getResources().stream().map(resource -> {\n+                resource.setResourceType(templateType);\n+                return new ResourceToTemplate().apply(resource);\n+            }).collect(Collectors.toList());\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_LIST_TEMPLATES, e, templateType,\n+                    getTenantDomainFromCarbonContext());\n+        }\n+    }\n+\n+    @Override\n+    public void deleteTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            configManager.deleteResourceById(templateId);\n+        } catch (ConfigurationManagementException e) {\n+            if (ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ID_DOES_NOT_EXISTS.getCode().equals(\n+                    e.getErrorCode())) {\n+                throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND, e,\n+                        templateId, getTenantDomainFromCarbonContext());\n+            }\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_DELETE_TEMPLATE_BY_ID, e,\n+                    templateId, getTenantDomainFromCarbonContext());\n+        }\n+    }\n+\n+    private String addTemplateToConfigStore(Template template) throws TemplateManagementException {\n+\n+        if (!isValidTemplateType(template.getTemplateType().toString())) {\n+            throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_TEMPLATE_TYPE,\n+                    template.getTemplateType().toString());\n+        }\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            Resource resource = configManager.addResource(template.getTemplateType().toString(), new", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM3Mjg2Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396372863", "bodyText": "There's an attribute in the Template object to store the template type. This can take a one of the enums that are defined. During the execution of DB scripts, we need to add those types to the resource-type table.", "author": "pamodaaw", "createdAt": "2020-03-23T11:10:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyODM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzMDQ0Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396930447", "bodyText": "We may need to implement to make sure that the corresponding resource type always do exist in the DB. Ex: When creating the template, if the resource type does not exist, it can be created on the fly.", "author": "tharindu-bandara", "createdAt": "2020-03-24T06:43:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyODM3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4Nzg4NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r398087884", "bodyText": "Added with commit 105acf9", "author": "pamodaaw", "createdAt": "2020-03-25T18:43:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyODM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMDQ0Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396200442", "bodyText": "missing 'return'", "author": "thanujalk", "createdAt": "2020-03-23T03:46:46Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/ConfigurationManager.java", "diffHunk": "@@ -252,4 +252,34 @@ InputStream getFileById(String resourceType, String resourceName, String fileId)\n     void deleteFileById(String resourceType, String resourceName, String fileId)\n             throws ConfigurationManagementException;\n \n+    /**\n+     * This function is used to get a resource by the resource id.\n+     *\n+     * @param resourceId Id representing the resource.\n+     * @throws ConfigurationManagementException Configuration management exception.", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyMjcyOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396922728", "bodyText": "updated", "author": "pamodaaw", "createdAt": "2020-03-24T06:17:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMDQ0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMDg2MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396200861", "bodyText": "Do we need this debug log here? otherwise can simplify to \"return StringUtils.isNotBlank(resourceId);\"", "author": "thanujalk", "createdAt": "2020-03-23T03:49:02Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/ConfigurationManagerImpl.java", "diffHunk": "@@ -419,6 +421,17 @@ private void validateResourcesRetrieveRequest(String resourceTypeName)\n         }\n     }\n \n+    private boolean isValidResourceId(String resourceId) {\n+\n+        if (StringUtils.isBlank(resourceId)) {", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIwMTU1NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396201554", "bodyText": "We are not using the loaded Resource here... so that's unnecessary load... So, create a different method to check isResourceExistsById() which returns a boolean from the data level.", "author": "thanujalk", "createdAt": "2020-03-23T03:52:46Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/ConfigurationManagerImpl.java", "diffHunk": "@@ -495,6 +508,19 @@ private boolean isResourceExists(String resourceTypeName, String resourceName)\n         return true;\n     }\n \n+    private boolean isResourceExistsById(String resourceId) throws ConfigurationManagementException {\n+\n+        try {\n+            getTenantResourceById(resourceId);", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxOTIzNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396219236", "bodyText": "remove \\n", "author": "thanujalk", "createdAt": "2020-03-23T05:24:59Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/constant/SQLConstants.java", "diffHunk": "@@ -301,6 +303,11 @@\n             \"  NAME = ?\\n\" +\n             \"  AND TENANT_ID = ?\\n\" +\n             \"  AND TYPE_ID = ?\";\n+    public static final String DELETE_RESOURCE_BY_ID_SQL = \"DELETE FROM\\n\" +\n+            \"  IDN_CONFIG_RESOURCE\\n\" +", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMDQ2Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396220462", "bodyText": "Suggestion: instead of null we can return Optional here... then the method will be public Optional getTenantResourceById(int tenantId, String resourceId) throws ConfigurationManagementException {", "author": "thanujalk", "createdAt": "2020-03-23T05:30:47Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/dao/impl/ConfigurationDAOImpl.java", "diffHunk": "@@ -321,6 +369,60 @@ public Resource getResourceById(String resourceId) throws ConfigurationManagemen\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public Resource getTenantResourceById(int tenantId, String resourceId) throws ConfigurationManagementException {\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        List<ConfigurationRawDataCollector> configurationRawDataCollectors;\n+        try {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(useCreatedTimeField() ? GET_RESOURCE_BY_ID_MYSQL :\n+                    GET_RESOURCE_BY_ID_MYSQL_WITHOUT_CREATED_TIME);\n+            sb.append(\" AND R.TENANT_ID = ?\");\n+            configurationRawDataCollectors = jdbcTemplate.executeQuery(sb.toString(), (resultSet, rowNumber) -> {\n+                        ConfigurationRawDataCollector.ConfigurationRawDataCollectorBuilder\n+                                configurationRawDataCollectorBuilder =\n+                                new ConfigurationRawDataCollector.ConfigurationRawDataCollectorBuilder()\n+                                        .setResourceId(resultSet.getString(DB_SCHEMA_COLUMN_NAME_ID))\n+                                        .setTenantId(resultSet.getInt(DB_SCHEMA_COLUMN_NAME_TENANT_ID))\n+                                        .setResourceName(resultSet.getString(DB_SCHEMA_COLUMN_NAME_NAME))\n+                                        .setLastModified(resultSet.getTimestamp(DB_SCHEMA_COLUMN_NAME_LAST_MODIFIED,\n+                                                calendar))\n+                                        .setResourceTypeName(resultSet.getString(DB_SCHEMA_COLUMN_NAME_RESOURCE_TYPE))\n+                                        .setResourceTypeDescription(resultSet.getString\n+                                                (DB_SCHEMA_COLUMN_NAME_DESCRIPTTION))\n+                                        .setAttributeKey(resultSet.getString(DB_SCHEMA_COLUMN_NAME_ATTRIBUTE_KEY))\n+                                        .setAttributeValue(resultSet.getString(DB_SCHEMA_COLUMN_NAME_ATTRIBUTE_VALUE))\n+                                        .setAttributeId(resultSet.getString(DB_SCHEMA_COLUMN_NAME_ATTRIBUTE_ID))\n+                                        .setFileId(resultSet.getString(DB_SCHEMA_COLUMN_NAME_FILE_ID))\n+                                        .setHasFile(resultSet.getBoolean(DB_SCHEMA_COLUMN_NAME_HAS_FILE))\n+                                        .setHasAttribute(resultSet.getBoolean(DB_SCHEMA_COLUMN_NAME_HAS_ATTRIBUTE));\n+                        if (useCreatedTimeField()) {\n+                            configurationRawDataCollectorBuilder.setCreatedTime(\n+                                    resultSet.getTimestamp(DB_SCHEMA_COLUMN_NAME_CREATED_TIME,\n+                                            calendar)\n+                            );\n+                        }\n+                        return configurationRawDataCollectorBuilder.build();\n+                    },\n+                    preparedStatement -> {\n+                        preparedStatement.setString(1, resourceId);\n+                        preparedStatement.setInt(2, tenantId);\n+                    });\n+            /*\n+            Database call can contain duplicate data for some columns. Need to filter them in order to build the\n+            resource.\n+            */\n+            return configurationRawDataCollectors == null || configurationRawDataCollectors.size() == 0 ?\n+                    null : buildResourceFromRawData(configurationRawDataCollectors);", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMjQ3OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396222478", "bodyText": "can go to previous line", "author": "thanujalk", "createdAt": "2020-03-23T05:39:45Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/dao/impl/ConfigurationDAOImpl.java", "diffHunk": "@@ -341,6 +443,25 @@ public void deleteResourceByName(int tenantId, String resourceTypeId, String res\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteResourceById(int tenantId, String resourceId)\n+            throws ConfigurationManagementException {", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMjY1OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396222658", "bodyText": "Better set values by column name", "author": "thanujalk", "createdAt": "2020-03-23T05:40:33Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/dao/impl/ConfigurationDAOImpl.java", "diffHunk": "@@ -341,6 +443,25 @@ public void deleteResourceByName(int tenantId, String resourceTypeId, String res\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void deleteResourceById(int tenantId, String resourceId)\n+            throws ConfigurationManagementException {\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            jdbcTemplate.executeUpdate(SQLConstants.DELETE_RESOURCE_BY_ID_SQL, preparedStatement -> {\n+                int initialParameterIndex = 1;\n+                preparedStatement.setString(initialParameterIndex, resourceId);", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMyOTY1NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396329654", "bodyText": "in the preparedStatement, the value should be passed with the index of the place holder. we cannot do that with the column name.", "author": "pamodaaw", "createdAt": "2020-03-23T09:55:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMjY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMzQ4Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396223483", "bodyText": "some places you start with 0 and some other 1... have a unified way... better set with column names.", "author": "thanujalk", "createdAt": "2020-03-23T05:43:53Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/dao/impl/ConfigurationDAOImpl.java", "diffHunk": "@@ -766,6 +920,18 @@ private void updateMetadataForH2(Resource resource, String resourceTypeId, boole\n         }\n     }\n \n+    private void updateResourceMetadata(Template<?> template, Resource resource, boolean isAttributeExists, boolean\n+            isFileExists, Timestamp currentTime) throws DataAccessException {\n+\n+        template.executeUpdate(UPDATE_RESOURCE, preparedStatement -> {\n+            int initialParameterIndex = 1;", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjM5ODU0NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396398545", "bodyText": "changed all the places to 1. In this line, the initial value is given as 0, because a dynamic query is generated based on the number of attributes that the resource contains. \n  \n    \n      carbon-identity-framework/components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/dao/impl/ConfigurationDAOImpl.java\n    \n    \n         Line 1389\n      in\n      7340dab\n    \n    \n    \n    \n\n        \n          \n           int attributeCount = 0;", "author": "pamodaaw", "createdAt": "2020-03-23T11:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyMzQ4Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzMDY5OA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396230698", "bodyText": "format the line", "author": "thanujalk", "createdAt": "2020-03-23T06:15:37Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManagerImpl.java", "diffHunk": "@@ -238,4 +244,149 @@ private void validatePaginationParameters(Integer limit, Integer offset) throws\n         }\n     }\n \n+    @Override\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            Resource resource = configManager.getTenantResourceById(templateId);\n+            Template template = new ResourceToTemplate().apply(resource);\n+            if (resource.getFiles().size() == 1) {\n+                InputStream templateScriptInputStream = configManager.getFileById(resource.getResourceType(),\n+                        resource.getResourceName(), resource.getFiles().get(0).getId());\n+                template.setTemplateScript(IOUtils.toString(templateScriptInputStream));\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(template.getTemplateType().toString() + \" can have only one templated object. But the \" +\n+                            \"template with id: \" + templateId + \" has \" + resource.getFiles().size() + \" templated \" +\n+                            \"object/s. Therefore templated object is not retrieved.\");\n+                }\n+            }\n+            return template;\n+        } catch (ConfigurationManagementException e) {\n+            if(ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ID_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())){", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIzMTQ3MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396231471", "bodyText": "if-else will be nice", "author": "thanujalk", "createdAt": "2020-03-23T06:18:30Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/function/ResourceToTemplate.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.function;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.identity.template.mgt.TemplateMgtConstants;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts the Resource object coming from configuration manager service to a Template object.\n+ */\n+public class ResourceToTemplate implements Function<Resource, Template> {\n+\n+    @Override\n+    public Template apply(Resource resource) {\n+\n+        Template template = convertAttributesToProperties(resource.getAttributes());\n+        template.setTemplateName(resource.getResourceName());\n+        template.setTemplateId(resource.getResourceId());\n+        template.setTenantId(IdentityTenantUtil.getTenantId(resource.getTenantDomain()));\n+        template.setTemplateType(getTemplateTypeFromResourceType(resource.getResourceType()));\n+        return template;\n+    }\n+\n+    private Template convertAttributesToProperties(List<Attribute> attributeList) {\n+\n+        Template template = new Template();\n+        Map<String, String> propertiesMap = new HashMap<>();\n+\n+        attributeList.forEach(attribute -> {\n+            switch (attribute.getKey()) {", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MDU5OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396260599", "bodyText": "is the old query where we used to allow the id to be changed used by existing features? if so, let's add a new query without changing existing one", "author": "emswbandara", "createdAt": "2020-03-23T07:49:25Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/constant/SQLConstants.java", "diffHunk": "@@ -86,9 +86,11 @@\n             \"(NAME), \" +\n             \"LAST_MODIFIED = VALUES(LAST_MODIFIED), HAS_FILE = VALUES(HAS_FILE), HAS_ATTRIBUTE = VALUES\" +\n             \"(HAS_ATTRIBUTE), TYPE_ID = VALUES(TYPE_ID)\";\n+    public static final String UPDATE_RESOURCE =\n+            \"UPDATE IDN_CONFIG_RESOURCE SET LAST_MODIFIED = ?, HAS_FILE = ?, HAS_ATTRIBUTE = ? WHERE ID = ?\";\n     public static final String UPDATE_RESOURCE_H2 =\n-            \"UPDATE IDN_CONFIG_RESOURCE SET ID = ?, TENANT_ID = ?, NAME = ?, LAST_MODIFIED = ?, HAS_FILE = ?, \" +", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjMwMTA4MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396301081", "bodyText": "I have already added a new one for the new functionality required. But this query is wrong. In this table, the ID is unique. Here the query is updating all the values without any validation. Since there's no validation, all the entries will get updated giving the unique key constraint violation.", "author": "pamodaaw", "createdAt": "2020-03-23T09:08:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MDU5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MjM2Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396262366", "bodyText": "shall we inline line 1383 and 1384", "author": "emswbandara", "createdAt": "2020-03-23T07:53:45Z", "path": "components/configuration-mgt/org.wso2.carbon.identity.configuration.mgt.core/src/main/java/org/wso2/carbon/identity/configuration/mgt/core/dao/impl/ConfigurationDAOImpl.java", "diffHunk": "@@ -1213,4 +1379,21 @@ public void deleteFiles(String resourceId) throws ConfigurationManagementExcepti\n         }\n     }\n \n+    private void insertResourceAttributes(Template<?> template, Resource resource) throws\n+            DataAccessException,\n+            ConfigurationManagementClientException {", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyNTA4Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396925087", "bodyText": "updated", "author": "pamodaaw", "createdAt": "2020-03-24T06:25:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MjM2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MzIxNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396263215", "bodyText": "since we don't have 'resource' in other operations e.g. get, delete, list. shall we modify this method name to addTemplate?", "author": "emswbandara", "createdAt": "2020-03-23T07:55:53Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManagerImpl.java", "diffHunk": "@@ -55,18 +73,10 @@\n      * @throws TemplateManagementException Template Management Exception.\n      */\n     @Override\n-    public Template addTemplate(Template template) throws TemplateManagementException {\n+    public String addTemplateResource(Template template) throws TemplateManagementException {", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzODI4Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r397038286", "bodyText": "Changed this. Rename and deprecated the existing addTemplate() method", "author": "pamodaaw", "createdAt": "2020-03-24T10:12:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2MzIxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NDEwOQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396264109", "bodyText": "we can use StringUtils.isNotBlank here", "author": "emswbandara", "createdAt": "2020-03-23T07:57:52Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/TemplateManagerImpl.java", "diffHunk": "@@ -238,4 +244,149 @@ private void validatePaginationParameters(Integer limit, Integer offset) throws\n         }\n     }\n \n+    @Override\n+    public Template getTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            Resource resource = configManager.getTenantResourceById(templateId);\n+            Template template = new ResourceToTemplate().apply(resource);\n+            if (resource.getFiles().size() == 1) {\n+                InputStream templateScriptInputStream = configManager.getFileById(resource.getResourceType(),\n+                        resource.getResourceName(), resource.getFiles().get(0).getId());\n+                template.setTemplateScript(IOUtils.toString(templateScriptInputStream));\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(template.getTemplateType().toString() + \" can have only one templated object. But the \" +\n+                            \"template with id: \" + templateId + \" has \" + resource.getFiles().size() + \" templated \" +\n+                            \"object/s. Therefore templated object is not retrieved.\");\n+                }\n+            }\n+            return template;\n+        } catch (ConfigurationManagementException e) {\n+            if(ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ID_DOES_NOT_EXISTS.getCode().equals(e.getErrorCode())){\n+                throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND, e,\n+                        templateId, getTenantDomainFromCarbonContext());\n+            }\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_RETRIEVE_TEMPLATE_BY_ID, e,\n+                    templateId, getTenantDomainFromCarbonContext());\n+        } catch (IOException e) {\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_RETRIEVE_TEMPLATE_BY_ID, e,\n+                    templateId, getTenantDomainFromCarbonContext());        }\n+    }\n+\n+    @Override\n+    public List<Template> listTemplates(String templateType, Integer limit, Integer offset) throws\n+            TemplateManagementException {\n+\n+        if (!isValidTemplateType(templateType)) {\n+            throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_TEMPLATE_TYPE,\n+                    templateType);\n+        }\n+        if (limit != null || offset != null) {\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_PAGINATION_NOT_SUPPORTED, null);\n+        }\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            Resources resourcesList = configManager.getResourcesByType(templateType);\n+            return resourcesList.getResources().stream().map(resource -> {\n+                resource.setResourceType(templateType);\n+                return new ResourceToTemplate().apply(resource);\n+            }).collect(Collectors.toList());\n+        } catch (ConfigurationManagementException e) {\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_LIST_TEMPLATES, e, templateType,\n+                    getTenantDomainFromCarbonContext());\n+        }\n+    }\n+\n+    @Override\n+    public void deleteTemplateById(String templateId) throws TemplateManagementException {\n+\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            configManager.deleteResourceById(templateId);\n+        } catch (ConfigurationManagementException e) {\n+            if (ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ID_DOES_NOT_EXISTS.getCode().equals(\n+                    e.getErrorCode())) {\n+                throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_NOT_FOUND, e,\n+                        templateId, getTenantDomainFromCarbonContext());\n+            }\n+            throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_DELETE_TEMPLATE_BY_ID, e,\n+                    templateId, getTenantDomainFromCarbonContext());\n+        }\n+    }\n+\n+    private String addTemplateToConfigStore(Template template) throws TemplateManagementException {\n+\n+        if (!isValidTemplateType(template.getTemplateType().toString())) {\n+            throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_INVALID_TEMPLATE_TYPE,\n+                    template.getTemplateType().toString());\n+        }\n+        ConfigurationManager configManager = TemplateManagerDataHolder.getInstance().getConfigurationManager();\n+        try {\n+            Resource resource = configManager.addResource(template.getTemplateType().toString(), new\n+                    TemplateToResourceAdd().apply(template));\n+            configManager.addFile(template.getTemplateType().toString(), template.getTemplateName(),\n+                    template.getTemplateName() + \"_template_object\",\n+                    IOUtils.toInputStream(template.getTemplateScript()));\n+            return resource.getResourceId();\n+        } catch (ConfigurationManagementException e) {\n+            if (ConfigurationConstants.ErrorMessages.ERROR_CODE_RESOURCE_ALREADY_EXISTS.getCode().equals(\n+                    e.getErrorCode())) {\n+                throw handleClientException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_TEMPLATE_ALREADY_EXIST, e,\n+                        template.getTemplateName());\n+            } else {\n+                throw handleServerException(TemplateMgtConstants.ErrorMessages.ERROR_CODE_INSERT_TEMPLATE, e,\n+                        template.getTemplateName());\n+            }\n+        }\n+    }\n+\n+    private boolean isValidTemplateType(String templateType) {\n+\n+        return EnumUtils.isValidEnum(TemplateMgtConstants.TemplateType.class, templateType);\n+    }\n+\n+    private boolean isValidTemplateId(String templateId) {\n+\n+        return !StringUtils.isBlank(templateId);", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NDkwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396264901", "bodyText": "shall we add a class level comment?", "author": "emswbandara", "createdAt": "2020-03-23T07:59:41Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/function/TemplatePropertiesToAttributes.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.function;\n+\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.template.mgt.TemplateMgtConstants;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+public class TemplatePropertiesToAttributes implements Function<Template, List<Attribute>> {", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyNzc2Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396927762", "bodyText": "added", "author": "pamodaaw", "createdAt": "2020-03-24T06:34:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NDkwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTAwMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396265001", "bodyText": "shall we add a class level comment?", "author": "emswbandara", "createdAt": "2020-03-23T07:59:57Z", "path": "components/template-mgt/org.wso2.carbon.identity.template.mgt/src/main/java/org/wso2/carbon/identity/template/mgt/function/TemplateToResource.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.template.mgt.function;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceFile;\n+import org.wso2.carbon.identity.template.mgt.TemplateMgtConstants;\n+import org.wso2.carbon.identity.template.mgt.model.Template;\n+import org.wso2.carbon.identity.template.mgt.util.TemplateMgtUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.configuration.mgt.core.util.ConfigurationUtils.generateUniqueID;\n+\n+public class TemplateToResource implements Function<Template, Resource> {", "originalCommit": "7340dab3d80b07c80718a7aebd275dc7798abbc5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkyNzg0Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2827#discussion_r396927847", "bodyText": "added", "author": "pamodaaw", "createdAt": "2020-03-24T06:35:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjI2NTAwMQ=="}], "type": "inlineReview"}, {"oid": "3fc917b922e5fcc40d274e88111522392b5e520c", "url": "https://github.com/wso2/carbon-identity-framework/commit/3fc917b922e5fcc40d274e88111522392b5e520c", "message": "Format the code", "committedDate": "2020-03-23T12:44:37Z", "type": "commit"}, {"oid": "dca6a811247d1bcfec62eeacaeac55e8a5644ffe", "url": "https://github.com/wso2/carbon-identity-framework/commit/dca6a811247d1bcfec62eeacaeac55e8a5644ffe", "message": "Deprecate the existing template add logic", "committedDate": "2020-03-23T17:10:56Z", "type": "commit"}, {"oid": "dca6a811247d1bcfec62eeacaeac55e8a5644ffe", "url": "https://github.com/wso2/carbon-identity-framework/commit/dca6a811247d1bcfec62eeacaeac55e8a5644ffe", "message": "Deprecate the existing template add logic", "committedDate": "2020-03-23T17:10:56Z", "type": "forcePushed"}, {"oid": "21141a2ec73b9007b991aa7c46fc0bd29b5a7fa7", "url": "https://github.com/wso2/carbon-identity-framework/commit/21141a2ec73b9007b991aa7c46fc0bd29b5a7fa7", "message": "Change updateResource method signature", "committedDate": "2020-03-23T17:23:27Z", "type": "commit"}, {"oid": "21141a2ec73b9007b991aa7c46fc0bd29b5a7fa7", "url": "https://github.com/wso2/carbon-identity-framework/commit/21141a2ec73b9007b991aa7c46fc0bd29b5a7fa7", "message": "Change updateResource method signature", "committedDate": "2020-03-23T17:23:27Z", "type": "forcePushed"}, {"oid": "3c8f09d1cd43cd61d8473013ee137c4aedf5514e", "url": "https://github.com/wso2/carbon-identity-framework/commit/3c8f09d1cd43cd61d8473013ee137c4aedf5514e", "message": "Add new method to check resource existence with id", "committedDate": "2020-03-24T06:32:25Z", "type": "commit"}, {"oid": "3c8f09d1cd43cd61d8473013ee137c4aedf5514e", "url": "https://github.com/wso2/carbon-identity-framework/commit/3c8f09d1cd43cd61d8473013ee137c4aedf5514e", "message": "Add new method to check resource existence with id", "committedDate": "2020-03-24T06:32:25Z", "type": "forcePushed"}, {"oid": "105acf9bfe2a8d8ba258c0986ea7f1596cccee94", "url": "https://github.com/wso2/carbon-identity-framework/commit/105acf9bfe2a8d8ba258c0986ea7f1596cccee94", "message": "Create resurce-type if not exist when creating templates", "committedDate": "2020-03-25T18:41:37Z", "type": "commit"}]}