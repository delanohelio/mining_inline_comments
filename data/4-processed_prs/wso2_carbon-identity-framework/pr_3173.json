{"pr_number": 3173, "pr_title": "Add nonce cookie validation to login flow.", "pr_createdAt": "2020-10-17T15:12:58Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/3173", "timeline": [{"oid": "8d61dd35e9a46adff3c903c70ed2378a12345cc1", "url": "https://github.com/wso2/carbon-identity-framework/commit/8d61dd35e9a46adff3c903c70ed2378a12345cc1", "message": "Add configuration for nonce cookie.", "committedDate": "2020-10-28T07:17:19Z", "type": "forcePushed"}, {"oid": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "url": "https://github.com/wso2/carbon-identity-framework/commit/8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "message": "Add configuration for nonce cookie.", "committedDate": "2020-11-04T08:12:06Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc3ODQ5OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517778499", "bodyText": "no need to declare a variable.", "author": "thanujalk", "createdAt": "2020-11-05T03:56:31Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;", "originalCommit": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4MDkzNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517780935", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (nonceCookieConfig == null) {\n          \n          \n            \n                    if (nonceCookieConfig == null) {\n          \n          \n            \n                        nonceCookieConfig = Boolean.parseBoolean(IdentityUtil.getProperty(NONCE_COOKIE_CONFIG));\n          \n          \n            \n                    }\n          \n          \n            \n                    return nonceCookieConfig;", "author": "thanujalk", "createdAt": "2020-11-05T04:07:28Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;\n+    }\n+\n+    /**\n+     * Initiate or update nonce value in both cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void addNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                      AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String nonceId = UUIDGenerator.generateUUID();\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.setCookie(request, response, cookieName, nonceId, null);\n+            context.setProperty(cookieName, nonceId);\n+        }\n+    }\n+\n+    /**\n+     * Validate whether nonce value matches in cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param context Authentication Context.\n+     *\n+     * @return boolean whether nonce cookie value valid or not.\n+     */\n+    public static boolean validateNonceCookie(HttpServletRequest request,\n+                                              AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            boolean validNonceValue = false;\n+            String cookieName = getNonceCookieName(context);\n+            String nonceFromContext = (String) context.getProperty(cookieName);\n+            Cookie nonceCookie = FrameworkUtils.getCookie(request, cookieName);\n+            String nonceFromSession = null;\n+            if (nonceCookie != null) {\n+                nonceFromSession = nonceCookie.getValue();\n+            }\n+            if (!StringUtils.isEmpty(nonceFromContext) && !StringUtils.isEmpty(nonceFromSession)\n+                    && nonceFromContext.equals(nonceFromSession)) {\n+                validNonceValue = true;\n+            }\n+            return validNonceValue;\n+        } else {\n+            // Return true if session nonce cookie config is not enabled.\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * Removes nonce value from context and cookie.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void removeNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                         AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.removeCookie(request, response, cookieName);\n+            context.removeProperty(cookieName);\n+        }\n+    }\n+\n+    /**\n+     * Check whether nonce cookie config is enabled or not.\n+     *\n+     * @return nonce cookie enabled or not.\n+     */\n+    public static boolean isNonceCookieEnabled() {\n+\n+        if (nonceCookieConfig == null) {", "originalCommit": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc4MTgwMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/3173#discussion_r517781802", "bodyText": "Suggestion: if you start the method like\nif (!isNonceCookieEnabled()) {\n   return true;\n}\n\n....rest of the logic...\n\nIt is much cleaner.", "author": "thanujalk", "createdAt": "2020-11-05T04:11:22Z", "path": "components/authentication-framework/org.wso2.carbon.identity.application.authentication.framework/src/main/java/org/wso2/carbon/identity/application/authentication/framework/util/SessionNonceCookieUtil.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.identity.application.authentication.framework.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.registry.core.utils.UUIDGenerator;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * Handles session nonce cookie.\n+ * Session nonce cookie helps to mitigate the session hijacking.\n+ */\n+public class SessionNonceCookieUtil {\n+\n+    public static final String NONCE_COOKIE = \"sessionNonceCookie\";\n+    public static final String NONCE_COOKIE_CONFIG = \"EnableSessionNonceCookie\";\n+    public static final String NONCE_ERROR_CODE = \"sessionNonceErrorCode\";\n+\n+    private static Boolean nonceCookieConfig;\n+\n+    /**\n+     * Get dynamic name for the nonce cookie\n+     *\n+     * @param context Authentication Context.\n+     *\n+     * @return name of the nonce cookie for that context.\n+     */\n+    public static String getNonceCookieName(AuthenticationContext context) {\n+\n+        String cookieName = NONCE_COOKIE + \"-\" + context.getContextIdentifier();\n+        return cookieName;\n+    }\n+\n+    /**\n+     * Initiate or update nonce value in both cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param response HttpServletResponse.\n+     * @param context Authentication Context.\n+     */\n+    public static void addNonceCookie(HttpServletRequest request, HttpServletResponse response,\n+                                      AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            String nonceId = UUIDGenerator.generateUUID();\n+            String cookieName = getNonceCookieName(context);\n+            FrameworkUtils.setCookie(request, response, cookieName, nonceId, null);\n+            context.setProperty(cookieName, nonceId);\n+        }\n+    }\n+\n+    /**\n+     * Validate whether nonce value matches in cookie and context.\n+     *\n+     * @param request HttpServletRequest.\n+     * @param context Authentication Context.\n+     *\n+     * @return boolean whether nonce cookie value valid or not.\n+     */\n+    public static boolean validateNonceCookie(HttpServletRequest request,\n+                                              AuthenticationContext context) {\n+\n+        if (isNonceCookieEnabled()) {\n+            boolean validNonceValue = false;\n+            String cookieName = getNonceCookieName(context);\n+            String nonceFromContext = (String) context.getProperty(cookieName);\n+            Cookie nonceCookie = FrameworkUtils.getCookie(request, cookieName);\n+            String nonceFromSession = null;\n+            if (nonceCookie != null) {\n+                nonceFromSession = nonceCookie.getValue();\n+            }\n+            if (!StringUtils.isEmpty(nonceFromContext) && !StringUtils.isEmpty(nonceFromSession)\n+                    && nonceFromContext.equals(nonceFromSession)) {\n+                validNonceValue = true;\n+            }\n+            return validNonceValue;\n+        } else {\n+            // Return true if session nonce cookie config is not enabled.\n+            return true;", "originalCommit": "8ee9a5154f6fc12b8ae511dc915c9b3cdb0d3631", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0a4ca2feac29eaeca23d069ac9a4c4f2fd4cdc43", "url": "https://github.com/wso2/carbon-identity-framework/commit/0a4ca2feac29eaeca23d069ac9a4c4f2fd4cdc43", "message": "Add nonce cookie validation to login flow.", "committedDate": "2020-11-05T05:16:53Z", "type": "commit"}, {"oid": "56520d87e7957b0b5e24f33e72bd2a809bf3ba47", "url": "https://github.com/wso2/carbon-identity-framework/commit/56520d87e7957b0b5e24f33e72bd2a809bf3ba47", "message": "Add configuration for nonce cookie.", "committedDate": "2020-11-05T05:16:53Z", "type": "commit"}, {"oid": "56520d87e7957b0b5e24f33e72bd2a809bf3ba47", "url": "https://github.com/wso2/carbon-identity-framework/commit/56520d87e7957b0b5e24f33e72bd2a809bf3ba47", "message": "Add configuration for nonce cookie.", "committedDate": "2020-11-05T05:16:53Z", "type": "forcePushed"}]}