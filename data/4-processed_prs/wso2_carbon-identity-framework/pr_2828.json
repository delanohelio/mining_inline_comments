{"pr_number": 2828, "pr_title": "Add tenant-qualified URL support for endpoints", "pr_createdAt": "2020-03-17T11:39:47Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/2828", "timeline": [{"oid": "86e156a60effa2d4fbfc5e1a81f8ba4931071097", "url": "https://github.com/wso2/carbon-identity-framework/commit/86e156a60effa2d4fbfc5e1a81f8ba4931071097", "message": "Support for tenant qualified URLs", "committedDate": "2020-03-17T10:35:07Z", "type": "commit"}, {"oid": "8c776eb463a7f1b586b893aa0630dd913f5be93b", "url": "https://github.com/wso2/carbon-identity-framework/commit/8c776eb463a7f1b586b893aa0630dd913f5be93b", "message": "tenant-qualify SAML metadata and endpoints", "committedDate": "2020-03-17T10:38:36Z", "type": "commit"}, {"oid": "ed31b860296306d089c9a6efdbc725329d59973b", "url": "https://github.com/wso2/carbon-identity-framework/commit/ed31b860296306d089c9a6efdbc725329d59973b", "message": "add enableTenantQualifiedURLs configuration", "committedDate": "2020-03-17T10:40:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1OTAzNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393659037", "bodyText": "Shall we remove the new line? WDYT?", "author": "somindatommy", "createdAt": "2020-03-17T12:58:15Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1OTYwNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393659604", "bodyText": "Can we make this contant variable?", "author": "somindatommy", "createdAt": "2020-03-17T12:59:09Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0MzE0Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393843142", "bodyText": "It's not extensively used. I don't think it's required", "author": "malithie", "createdAt": "2020-03-17T17:19:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY1OTYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MDc3NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393660774", "bodyText": "Shall we remove the extra new line?", "author": "somindatommy", "createdAt": "2020-03-17T13:01:13Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to read hostname.\", e);\n+        }\n+        return hostName;\n+    }\n+\n+    private void appendWebContextRoot(StringBuilder serverUrl) {\n+\n+        String webContextRoot = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .WEB_CONTEXT_ROOT);\n+        // If webContextRoot is defined then append it.\n+        if (StringUtils.isNotBlank(webContextRoot)) {\n+            if (webContextRoot.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(webContextRoot.trim());\n+            } else {\n+                serverUrl.append(webContextRoot.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendProxyContextPath(StringBuilder serverUrl) {\n+\n+        String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .PROXY_CONTEXT_PATH);\n+        // If ProxyContextPath is defined then append it.\n+        if (StringUtils.isNotBlank(proxyContextPath)) {\n+            if (proxyContextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(proxyContextPath.trim());\n+            } else {\n+                serverUrl.append(proxyContextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendTenantAsPathParam(StringBuilder serverUrl) {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }\n+        if (tenantDomain != null) {\n+            if (serverUrl.toString().endsWith(\"/\")) {\n+                serverUrl.append(\"t/\").append(tenantDomain);\n+            } else {\n+                serverUrl.append(\"/t/\").append(tenantDomain);\n+            }\n+        }\n+    }\n+\n+    private void appendTenantAsQueryParam(StringBuilder serverUrl) {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (!StringUtils.isBlank(tenantDomain)) {\n+            if (!MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equalsIgnoreCase(tenantDomain)) {\n+                serverUrl.append(\"?\").append(MultitenantConstants.TENANT_DOMAIN).append(\"=\").append(tenantDomain);\n+            }\n+        }\n+", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MjE2MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393662160", "bodyText": "Shall we format the method comment?", "author": "somindatommy", "createdAt": "2020-03-17T13:03:33Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/URLResolverService.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import java.util.Map;\n+\n+/**\n+ * This interface is defined to resolve a provided URL or a URL context by adding a proxy context path, web context\n+ * root, and the tenant domain as specified. The URL would be resolved for the tenant domain by either adding the tenant\n+ * context to the path or adding a tenant parameter (legacy mode).\n+ */\n+public interface URLResolverService {\n+\n+    /**\n+     * This method is used to return a URL with a proxy context path, a web context root and the tenant domain (If", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MjgyNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393662826", "bodyText": "Shall we format other comments as well in other methods?", "author": "somindatommy", "createdAt": "2020-03-17T13:04:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MjE2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NDI5MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393844290", "bodyText": "Shall we check for an empty hostname rather than just checking null", "author": "malithie", "createdAt": "2020-03-17T17:21:17Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NTIyMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393845220", "bodyText": "Is it reading hostname. This should denote that trying to resolve hostname from system", "author": "malithie", "createdAt": "2020-03-17T17:22:46Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to read hostname.\", e);", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NzIzMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393847232", "bodyText": "We will be having this empty check everywhere right. What if we move this to the same util.\n@mefarazath WDYT?", "author": "malithie", "createdAt": "2020-03-17T17:25:58Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/DefaultURLResolverService.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.wso2.carbon.identity.core;\n+\n+import org.apache.axis2.engine.AxisConfiguration;\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.base.ServerConfiguration;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.identity.core.internal.IdentityCoreServiceComponent;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityTenantUtil;\n+import org.wso2.carbon.utils.CarbonUtils;\n+import org.wso2.carbon.utils.NetworkUtils;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import java.net.MalformedURLException;\n+import java.net.SocketException;\n+import java.net.URL;\n+import java.util.Map;\n+\n+import static org.wso2.carbon.identity.core.util.IdentityTenantUtil.isTenantURLSupportEnabled;\n+\n+/**\n+ * URL Resolver service implementation.\n+ */\n+public class DefaultURLResolverService implements URLResolverService {\n+\n+    @Override\n+    public String resolveUrl(String url, boolean addProxyContextPath, boolean addWebContextRoot,\n+                             Map<String, Object> properties) throws URLResolverException {\n+\n+        try {\n+            URL parsedUrl = new URL(url);\n+            StringBuilder urlBuilder = new StringBuilder(parsedUrl.getProtocol())\n+                    .append(\"://\")\n+                    .append(parsedUrl.getHost())\n+                    .append(\":\")\n+                    .append(parsedUrl.getPort());\n+            appendContextToUri(parsedUrl.getPath(), addProxyContextPath, addWebContextRoot, urlBuilder,\n+                    false);\n+            return urlBuilder.toString();\n+\n+        } catch (MalformedURLException e) {\n+            throw new URLResolverException(\"Error while parsing the URL: \" + url, e);\n+        }\n+    }\n+\n+    @Override\n+    public String resolveUrlContext(String urlContext, boolean addProxyContextPath, boolean addWebContextRoot,\n+                                    boolean addTenantQueryParamInLegacyMode, Map<String, Object> properties)\n+            throws URLResolverException {\n+\n+        String hostName = getHostName();\n+        String mgtTransport = CarbonUtils.getManagementTransport();\n+        int mgtTransportPort = getMgtTransportPort(mgtTransport);\n+\n+        if (hostName.endsWith(\"/\")) {\n+            hostName = hostName.substring(0, hostName.length() - 1);\n+        }\n+        StringBuilder serverUrl = new StringBuilder(mgtTransport).append(\"://\").append(hostName.toLowerCase());\n+        // If it's well known HTTPS port, skip adding port.\n+        if (mgtTransportPort != IdentityCoreConstants.DEFAULT_HTTPS_PORT) {\n+            serverUrl.append(\":\").append(mgtTransportPort);\n+        }\n+\n+        appendContextToUri(urlContext, addProxyContextPath, addWebContextRoot, serverUrl, addTenantQueryParamInLegacyMode);\n+\n+        return serverUrl.toString();\n+    }\n+\n+    private int getMgtTransportPort(String mgtTransport) {\n+\n+        AxisConfiguration axisConfiguration = IdentityCoreServiceComponent.getConfigurationContextService().\n+                getServerConfigContext().getAxisConfiguration();\n+        int mgtTransportPort = CarbonUtils.getTransportProxyPort(axisConfiguration, mgtTransport);\n+        if (mgtTransportPort <= 0) {\n+            mgtTransportPort = CarbonUtils.getTransportPort(axisConfiguration, mgtTransport);\n+        }\n+        return mgtTransportPort;\n+    }\n+\n+    private String getHostName() throws URLResolverException {\n+\n+        String hostName = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants.HOST_NAME);\n+        try {\n+            if (hostName == null) {\n+                hostName = NetworkUtils.getLocalHostname();\n+            }\n+        } catch (SocketException e) {\n+            throw new URLResolverException(\"Error while trying to read hostname.\", e);\n+        }\n+        return hostName;\n+    }\n+\n+    private void appendWebContextRoot(StringBuilder serverUrl) {\n+\n+        String webContextRoot = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .WEB_CONTEXT_ROOT);\n+        // If webContextRoot is defined then append it.\n+        if (StringUtils.isNotBlank(webContextRoot)) {\n+            if (webContextRoot.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(webContextRoot.trim());\n+            } else {\n+                serverUrl.append(webContextRoot.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendProxyContextPath(StringBuilder serverUrl) {\n+\n+        String proxyContextPath = ServerConfiguration.getInstance().getFirstProperty(IdentityCoreConstants\n+                .PROXY_CONTEXT_PATH);\n+        // If ProxyContextPath is defined then append it.\n+        if (StringUtils.isNotBlank(proxyContextPath)) {\n+            if (proxyContextPath.trim().charAt(0) != '/') {\n+                serverUrl.append(\"/\").append(proxyContextPath.trim());\n+            } else {\n+                serverUrl.append(proxyContextPath.trim());\n+            }\n+        }\n+    }\n+\n+    private void appendTenantAsPathParam(StringBuilder serverUrl) {\n+\n+        String tenantDomain = IdentityTenantUtil.getTenantDomainFromContext();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            tenantDomain = PrivilegedCarbonContext.getThreadLocalCarbonContext().getTenantDomain();\n+        }", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1MzQ5NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394153494", "bodyText": "Thinking again I think this is the way we should proceed as there can be ways tenant will be available based on context", "author": "malithie", "createdAt": "2020-03-18T07:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg0NzIzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1MTc3Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393851772", "bodyText": "Better to rename the reference name accordingly", "author": "malithie", "createdAt": "2020-03-17T17:32:54Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityCoreConstants.java", "diffHunk": "@@ -28,6 +28,8 @@\n     public static final String FILE_NAME_REGEX = \"FileNameRegEx\";\n     public static final String PORTS_OFFSET = \"Ports.Offset\";\n \n+    public static final String TENANT_NAME_FROM_CONTEXT = \"TenantNameFromContext\";\n+    public static final String ENABLE_TENANT_QUALIFIED_URL_SUPPORT = \"EnableTenantQualifiedUrls\";", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1MjI5OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393852299", "bodyText": "What if we rename the method to match with the config", "author": "malithie", "createdAt": "2020-03-17T17:33:40Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityTenantUtil.java", "diffHunk": "@@ -320,4 +320,25 @@ public static int getTenantIdOfUser(String username) throws IdentityRuntimeExcep\n             return tenantId;\n         }\n     }\n+\n+    /**\n+     * Get the tenant name from the thread local properties.\n+     *\n+     * @return Tenant name from the context.\n+     */\n+    public static String getTenantDomainFromContext() {\n+        String tenantDomain = (String) IdentityUtil.threadLocalProperties.get().get\n+                (IdentityCoreConstants.TENANT_NAME_FROM_CONTEXT);\n+        return tenantDomain;\n+    }\n+\n+    /**\n+     * Checks whether the tenant URL support is enabled.\n+     *\n+     * @return true if the config is set to true, false otherwise.\n+     */\n+    public static boolean isTenantURLSupportEnabled() {", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r393856071", "bodyText": "I think this config should change. Can we check with @pulasthi7", "author": "malithie", "createdAt": "2020-03-17T17:39:40Z", "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "diffHunk": "@@ -1913,6 +1913,8 @@\n     -->\n     <EnableFederatedUserAssociation>{{user.association.enable_for_federated_users}}</EnableFederatedUserAssociation>\n \n+    <EnableTenantQualifiedUrls>{{tenant.url_support_enable}}</EnableTenantQualifiedUrls>", "originalCommit": "ed31b860296306d089c9a6efdbc725329d59973b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwNTk0Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394105947", "bodyText": "@pulasthi7 suggested {{tenant_context.qualify_urls}} for the config. WDYT?", "author": "chamathns", "createdAt": "2020-03-18T04:53:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NzYzMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394157630", "bodyText": "But it's still missing with which we qualify the URL right. Shouldn't we have that info", "author": "malithie", "createdAt": "2020-03-18T07:50:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2ODYyNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394168626", "bodyText": "How about {{tenant_context.enable_tenant_qualified_urls}} ?", "author": "chamathns", "createdAt": "2020-03-18T08:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDIxODM5OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394218399", "bodyText": "+1", "author": "malithie", "createdAt": "2020-03-18T09:45:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg1NjA3MQ=="}], "type": "inlineReview"}, {"oid": "4f6342ef09b98348a076679ea6921b3af02019d0", "url": "https://github.com/wso2/carbon-identity-framework/commit/4f6342ef09b98348a076679ea6921b3af02019d0", "message": "fix minor issues", "committedDate": "2020-03-18T04:43:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE1NjIyOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2828#discussion_r394156228", "bodyText": "isTenantQualifiedUrlsEnabled\nOtherwise the method defines an action but it should denote it's a check", "author": "malithie", "createdAt": "2020-03-18T07:47:12Z", "path": "components/identity-core/org.wso2.carbon.identity.core/src/main/java/org/wso2/carbon/identity/core/util/IdentityTenantUtil.java", "diffHunk": "@@ -320,4 +320,26 @@ public static int getTenantIdOfUser(String username) throws IdentityRuntimeExcep\n             return tenantId;\n         }\n     }\n+\n+    /**\n+     * Get the tenant name from the thread local properties.\n+     *\n+     * @return Tenant name from the context.\n+     */\n+    public static String getTenantDomainFromContext() {\n+\n+        String tenantDomain = (String) IdentityUtil.threadLocalProperties.get().get\n+                (IdentityCoreConstants.TENANT_NAME_FROM_CONTEXT);\n+        return tenantDomain;\n+    }\n+\n+    /**\n+     * Checks whether the tenant URL support is enabled.\n+     *\n+     * @return true if the config is set to true, false otherwise.\n+     */\n+    public static boolean enableTenantQualifiedUrls() {", "originalCommit": "4f6342ef09b98348a076679ea6921b3af02019d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "24f444bad5d86c0cb0bdbe2dd16519a0788f8339", "url": "https://github.com/wso2/carbon-identity-framework/commit/24f444bad5d86c0cb0bdbe2dd16519a0788f8339", "message": "Add a resource context for the SAML metadata endpoint\nAdd the SAML metadata servlet to the ContextRewrite Valve", "committedDate": "2020-03-18T08:07:31Z", "type": "commit"}, {"oid": "133d67554290274f43fdd297bde18fb7a9ade77b", "url": "https://github.com/wso2/carbon-identity-framework/commit/133d67554290274f43fdd297bde18fb7a9ade77b", "message": "fixes for minor issues", "committedDate": "2020-03-18T08:07:32Z", "type": "commit"}, {"oid": "1f0fc761d958805cc001377a34e06a0ccfb700f6", "url": "https://github.com/wso2/carbon-identity-framework/commit/1f0fc761d958805cc001377a34e06a0ccfb700f6", "message": "fix the configuration for enabling tenant-qualified URLs", "committedDate": "2020-03-18T08:23:03Z", "type": "commit"}]}