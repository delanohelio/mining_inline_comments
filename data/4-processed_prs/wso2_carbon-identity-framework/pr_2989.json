{"pr_number": 2989, "pr_title": "Introduce CORS configurations for the CORS Management OSGi service", "pr_createdAt": "2020-06-30T04:44:08Z", "pr_url": "https://github.com/wso2/carbon-identity-framework/pull/2989", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMDkwNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447430907", "bodyText": "same error code as: ERROR_CODE_CORS_RETRIEVE", "author": "dewniMW", "createdAt": "2020-06-30T06:06:29Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,144 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.\n+     */\n     ERROR_CODE_CORS_SET(\"CMS-65002\",\n             \"Unable to set CORS Origins.\",\n             \"Server encountered an error while setting the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to add CORS.\n+     */\n     ERROR_CODE_CORS_ADD(\"CMS-65003\",\n             \"Unable to add CORS Origins.\",\n             \"Server encountered an error while adding the CORS Origins to %s.\"),\n+\n+    /**\n+     * Unable to delete CORS.\n+     */\n     ERROR_CODE_CORS_DELETE(\"CMS-65004\",\n             \"Unable to delete CORS Origins.\",\n             \"Server encountered an error while deleting the CORS Origins of %s.\"),\n-    ERROR_CODE_INVALID_TENANT_DOMAIN(\"CMS-60001\",\n+\n+    /**\n+     * Unable to retrieve CORS configuration.\n+     */\n+    ERROR_CODE_CORS_CONFIG_RETRIEVE(\"CMS-65001\",", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMTA2Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447431063", "bodyText": "same error code as: ERROR_CODE_CORS_SET", "author": "dewniMW", "createdAt": "2020-06-30T06:06:58Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,144 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.\n+     */\n     ERROR_CODE_CORS_SET(\"CMS-65002\",\n             \"Unable to set CORS Origins.\",\n             \"Server encountered an error while setting the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to add CORS.\n+     */\n     ERROR_CODE_CORS_ADD(\"CMS-65003\",\n             \"Unable to add CORS Origins.\",\n             \"Server encountered an error while adding the CORS Origins to %s.\"),\n+\n+    /**\n+     * Unable to delete CORS.\n+     */\n     ERROR_CODE_CORS_DELETE(\"CMS-65004\",\n             \"Unable to delete CORS Origins.\",\n             \"Server encountered an error while deleting the CORS Origins of %s.\"),\n-    ERROR_CODE_INVALID_TENANT_DOMAIN(\"CMS-60001\",\n+\n+    /**\n+     * Unable to retrieve CORS configuration.\n+     */\n+    ERROR_CODE_CORS_CONFIG_RETRIEVE(\"CMS-65001\",\n+            \"Unable to retrieve CORS configuration.\",\n+            \"Server encountered an error while retrieving the CORS configuration of %s.\"),\n+\n+    /**\n+     * Unable to set CORS configuration.\n+     */\n+    ERROR_CODE_CORS_CONFIG_SET(\"CMS-65002\",", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMjQzMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447432432", "bodyText": "missing license header", "author": "dewniMW", "createdAt": "2020-06-30T06:11:00Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/CORSConfigurationToResourceAdd.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMjkyOQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447432929", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (value != null) {\n          \n          \n            \n                    if (StringUtils.isNotBlank(value)) {", "author": "dewniMW", "createdAt": "2020-06-30T06:12:16Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/CORSConfigurationToResourceAdd.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.ResourceAdd;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.ALLOW_ANY_ORIGIN;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.ALLOW_GENERIC_HTTP_REQUESTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.ALLOW_SUBDOMAINS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.EXPOSED_HEADERS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.MAX_AGE;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.SUPPORTED_HEADERS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.SUPPORTED_METHODS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.SUPPORTS_CREDENTIALS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.SUPPORT_ANY_HEADER;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORSConfigurationAttributes.TAG_REQUESTS;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.Constants.CORS_CONFIGURATION_RESOURCE_NAME;\n+import static org.wso2.carbon.identity.cors.mgt.core.internal.util.SerializationUtils.serializeStringSet;\n+\n+/**\n+ * Converts a CORSConfiguration object to a ConfigurationManagement Resource.\n+ */\n+public class CORSConfigurationToResourceAdd implements Function<CORSConfiguration, ResourceAdd> {\n+\n+    @Override\n+    public ResourceAdd apply(CORSConfiguration corsConfiguration) {\n+\n+        ResourceAdd resourceAdd = new ResourceAdd();\n+        resourceAdd.setName(CORS_CONFIGURATION_RESOURCE_NAME);\n+\n+        List<Attribute> attributes = new ArrayList<>();\n+        addAttribute(attributes, ALLOW_GENERIC_HTTP_REQUESTS,\n+                String.valueOf(corsConfiguration.isAllowGenericHttpRequests()));\n+        addAttribute(attributes, ALLOW_ANY_ORIGIN, String.valueOf(corsConfiguration.isAllowAnyOrigin()));\n+        addAttribute(attributes, ALLOW_SUBDOMAINS, String.valueOf(corsConfiguration.isAllowSubdomains()));\n+        addAttribute(attributes, SUPPORTED_METHODS, serializeStringSet(corsConfiguration.getSupportedMethods()));\n+        addAttribute(attributes, SUPPORT_ANY_HEADER, String.valueOf(corsConfiguration.isSupportAnyHeader()));\n+        addAttribute(attributes, SUPPORTED_HEADERS, serializeStringSet(corsConfiguration.getSupportedHeaders()));\n+        addAttribute(attributes, EXPOSED_HEADERS, serializeStringSet(corsConfiguration.getExposedHeaders()));\n+        addAttribute(attributes, SUPPORTS_CREDENTIALS, String.valueOf(corsConfiguration.isSupportsCredentials()));\n+        addAttribute(attributes, MAX_AGE, String.valueOf(corsConfiguration.getMaxAge()));\n+        addAttribute(attributes, TAG_REQUESTS, String.valueOf(corsConfiguration.isTagRequests()));\n+\n+        resourceAdd.setAttributes(attributes);\n+        return resourceAdd;\n+    }\n+\n+    private void addAttribute(List<Attribute> attributeList, String key, String value) {\n+\n+        if (value != null) {", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzIwOQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447433209", "bodyText": "missing license header", "author": "dewniMW", "createdAt": "2020-06-30T06:13:01Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourceToCORSConfiguration.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzg3NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447433874", "bodyText": "Is it expected to log and ignore the IOException?", "author": "dewniMW", "createdAt": "2020-06-30T06:14:52Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourceToValidatedOrigin.java", "diffHunk": "@@ -23,32 +23,40 @@\n import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n-import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n \n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n+import java.util.function.Function;\n \n /**\n- * Converts a ConfigurationManagement Resource to a list of CORSOrigins.\n+ * Converts a ConfigurationManagement Resource to a list of ValidatedOrigins.\n  */\n-public class ResourceToCORSOrigin implements CheckedFunction<Resource, List<CORSOrigin>> {\n+public class ResourceToValidatedOrigin implements Function<Resource, List<ValidatedOrigin>> {\n \n-    private static final Log log = LogFactory.getLog(ResourceToCORSOrigin.class);\n+    private static final Log log = LogFactory.getLog(ResourceToValidatedOrigin.class);\n \n     @Override\n-    public List<CORSOrigin> apply(Resource resource) throws IOException {\n-\n-        ObjectMapper mapper = new ObjectMapper();\n-\n-        ArrayList<CORSOrigin> corsOrigins = new ArrayList<>();\n-        if (resource.isHasAttribute()) {\n-            List<Attribute> attributes = resource.getAttributes();\n-            for (Attribute attribute : attributes) {\n-                CORSOrigin corsOrigin = mapper.readValue(attribute.getValue(), CORSOrigin.class);\n-                corsOrigins.add(corsOrigin);\n+    public List<ValidatedOrigin> apply(Resource resource) {\n+\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();\n+\n+            ArrayList<ValidatedOrigin> corsOrigins = new ArrayList<>();\n+            if (resource.isHasAttribute()) {\n+                List<Attribute> attributes = resource.getAttributes();\n+                for (Attribute attribute : attributes) {\n+                    ValidatedOrigin corsOrigin = mapper.readValue(attribute.getValue(), ValidatedOrigin.class);\n+                    corsOrigins.add(corsOrigin);\n+                }\n+            }\n+            return corsOrigins;\n+        } catch (IOException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(e);", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNDM5Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447434392", "bodyText": "Is it expected to log and ignore the JsonProcessingException?", "author": "dewniMW", "createdAt": "2020-06-30T06:16:03Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ValidatedOriginToAttribute.java", "diffHunk": "@@ -23,24 +23,33 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.wso2.carbon.identity.configuration.mgt.core.model.Attribute;\n-import org.wso2.carbon.identity.cors.mgt.core.model.CORSOrigin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.function.Function;\n \n /**\n- * Converts a CORSOrigin to a ConfigurationManagement Resource attribute.\n+ * Converts a ValidatedOrigin to a ConfigurationManagement Resource attribute.\n  */\n-public class CORSOriginToAttribute implements CheckedFunction<CORSOrigin, Attribute> {\n+public class ValidatedOriginToAttribute implements Function<ValidatedOrigin, Attribute> {\n \n-    private static final Log log = LogFactory.getLog(CORSOriginToAttribute.class);\n+    private static final Log log = LogFactory.getLog(ValidatedOriginToAttribute.class);\n \n     @Override\n-    public Attribute apply(CORSOrigin corsOrigin) throws JsonProcessingException {\n+    public Attribute apply(ValidatedOrigin corsOrigin) {\n \n-        ObjectMapper mapper = new ObjectMapper();\n+        try {\n+            ObjectMapper mapper = new ObjectMapper();\n \n-        Attribute attribute = new Attribute();\n-        attribute.setKey(String.valueOf(corsOrigin.hashCode()));\n-        String corsOriginString = mapper.writeValueAsString(corsOrigin);\n-        attribute.setValue(corsOriginString);\n-        return attribute;\n+            Attribute attribute = new Attribute();\n+            attribute.setKey(String.valueOf(corsOrigin.hashCode()));\n+            String corsOriginString = mapper.writeValueAsString(corsOrigin);\n+            attribute.setValue(corsOriginString);\n+            return attribute;\n+        } catch (JsonProcessingException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(e);\n+            }", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNjYwNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447436606", "bodyText": "can't we inline line 66 to 69?", "author": "dewniMW", "createdAt": "2020-06-30T06:21:32Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/CORSConfigurationUtil.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+import org.wso2.carbon.identity.cors.mgt.core.model.Origin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for CORS configuration operations.\n+ */\n+public class CORSConfigurationUtil {\n+\n+    private static final Log log = LogFactory.getLog(CORSConfigurationUtil.class);\n+\n+    /**\n+     * Read the default CORS configuration properties in the identity.xml.\n+     *\n+     * @return Server default {@code CORSConfiguration} object.\n+     */\n+    public static CORSConfiguration getDefaultCORSConfiguration() {\n+\n+        CORSConfiguration corsConfiguration = new CORSConfiguration();\n+\n+        corsConfiguration.setAllowGenericHttpRequests(\n+                Boolean.parseBoolean(IdentityUtil.getProperty(IdentityConstants.CORS.ALLOW_GENERIC_HTTP_REQUESTS)));\n+\n+        String allowedOrigins = IdentityUtil.getProperty(IdentityConstants.CORS.ALLOWED_ORIGINS).trim();\n+        if (allowedOrigins.equals(\"*\")) {\n+            corsConfiguration.setAllowAnyOrigin(true);\n+        } else {\n+            corsConfiguration.setAllowAnyOrigin(false);\n+\n+            List<Origin> origins = parseWords(allowedOrigins)\n+                    .stream()\n+                    .map(Origin::new)\n+                    .collect(Collectors.toList());", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNzkzMQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447437931", "bodyText": "end the exception message with a full stop. Do in all applicable places.", "author": "dewniMW", "createdAt": "2020-06-30T06:24:48Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/Origin.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Resource request origin (not validated), as defined in The Web Origin Concept (RFC 6454).\n+ */\n+public class Origin {\n+\n+    /**\n+     * A random UUID.\n+     */\n+    String id;\n+\n+    /**\n+     * The original origin value, used in hash code generation and equality checking.\n+     */\n+    String value;\n+\n+    /**\n+     * Creates a new origin from the specified URI string. Note that the syntax is not validated.\n+     *\n+     * @param value The URI string for the origin. Must not be {@code null}.\n+     */\n+    public Origin(final String value) {\n+\n+        this.id = UUID.randomUUID().toString();\n+\n+        if (value == null) {\n+            throw new IllegalArgumentException(\"The origin value must not be null\");", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzODkxOQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447438919", "bodyText": "better to use StringUtil.isNotBlank method. do this in all applicable places.", "author": "dewniMW", "createdAt": "2020-06-30T06:27:06Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/Origin.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+import java.util.UUID;\n+\n+/**\n+ * Resource request origin (not validated), as defined in The Web Origin Concept (RFC 6454).\n+ */\n+public class Origin {\n+\n+    /**\n+     * A random UUID.\n+     */\n+    String id;\n+\n+    /**\n+     * The original origin value, used in hash code generation and equality checking.\n+     */\n+    String value;\n+\n+    /**\n+     * Creates a new origin from the specified URI string. Note that the syntax is not validated.\n+     *\n+     * @param value The URI string for the origin. Must not be {@code null}.\n+     */\n+    public Origin(final String value) {\n+\n+        this.id = UUID.randomUUID().toString();\n+\n+        if (value == null) {", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTY2NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447439664", "bodyText": "why is this test case commented out?", "author": "dewniMW", "createdAt": "2020-06-30T06:28:57Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementServiceTest.java", "diffHunk": "@@ -177,18 +190,18 @@ public void testAddCORSOrigins() throws ConfigurationManagementException, CORSMa\n                 SAMPLE_ORIGIN_LIST_2.stream()).collect(Collectors.toList()), corsOrigins);\n     }\n \n-    @Test(priority = 4)\n+    @Test(priority = 5)\n     public void testDeleteCORSOrigins() throws CORSManagementServiceException, ConfigurationManagementException {\n \n-        corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);\n-        corsManagementService.deleteCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1.subList(0, 2));\n-        List<CORSOrigin> corsOrigins = configurationManager.getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                CORS_ORIGIN_RESOURCE_NAME)\n-                .getAttributes()\n-                .stream()\n-                .map(CORSServiceTestHelper::attributeToCORSOrigin)\n-                .collect(Collectors.toList());\n-\n-        assertEquals(SAMPLE_ORIGIN_LIST_1.subList(2, SAMPLE_ORIGIN_LIST_1.size()), corsOrigins);\n+//        corsManagementService.setCORSOrigins(SUPER_TENANT_DOMAIN_NAME, SAMPLE_ORIGIN_LIST_1);", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1ODg4Mg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447458882", "bodyText": "Resolved", "author": "ivantha", "createdAt": "2020-06-30T07:10:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTY2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0MDU3OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447440579", "bodyText": "shouldn't we allow these values to be configurable via the deployment.toml?", "author": "dewniMW", "createdAt": "2020-06-30T06:31:01Z", "path": "features/identity-core/org.wso2.carbon.identity.core.server.feature/resources/identity.xml.j2", "diffHunk": "@@ -2155,4 +2155,16 @@\n \n     <!-- Configuration for allowing an uninterrupted token building flow upon facing claim handling errors. -->\n     <ContinueOnClaimHandlingError>{{continue_on_claim_handling_error}}</ContinueOnClaimHandlingError>\n+\n+    <!-- CORS -->\n+    <CORS>\n+        <AllowGenericHttpRequests>true</AllowGenericHttpRequests>\n+        <AllowSubdomains>false</AllowSubdomains>\n+        <SupportedMethods>GET, POST, HEAD, OPTIONS</SupportedMethods>\n+        <SupportedHeaders>*</SupportedHeaders>\n+        <ExposedHeaders></ExposedHeaders>\n+        <SupportsCredentials>true</SupportsCredentials>\n+        <MaxAge>-1</MaxAge>\n+        <TagRequests>false</TagRequests>\n+    </CORS>", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4MDI3MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447480271", "bodyText": "I'll change this.", "author": "ivantha", "createdAt": "2020-06-30T07:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0MDU3OQ=="}], "type": "inlineReview"}, {"oid": "7738611bb8164b7ec35433a066c7baa7ea771668", "url": "https://github.com/wso2/carbon-identity-framework/commit/7738611bb8164b7ec35433a066c7baa7ea771668", "message": "Add tenant CORS configurations", "committedDate": "2020-06-30T07:07:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MjM5NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447452395", "bodyText": "Shall we change the return type.", "author": "GANGANI", "createdAt": "2020-06-30T06:57:00Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -35,7 +36,7 @@\n      * @return List<CORSOrigins> Returns a list of CORS Origins configured by the tenant as CORSOrigin objects.", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1MzM2MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447453361", "bodyText": "Shall we change the param type.", "author": "GANGANI", "createdAt": "2020-06-30T06:58:56Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -44,7 +45,7 @@\n      * @param corsOrigins  A list of CORS Origins to be set.", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDMxOA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447454318", "bodyText": "Since you have changed a parameter type of an already existing method, won't this break the existing implementations?", "author": "GANGANI", "createdAt": "2020-06-30T07:00:52Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -53,14 +54,33 @@\n      * @param corsOrigins  A list of CORS Origins to be added.\n      * @throws CORSManagementServiceException\n      */\n-    void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void addCORSOrigins(String tenantDomain, List<Origin> corsOrigins) throws CORSManagementServiceException;\n \n     /**\n      * Delete the CORS Origin(s) from the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be deleted.\n+     * @param ids          A list of CORS Origin IDs to be deleted.\n      * @throws CORSManagementServiceException\n      */\n-    void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void deleteCORSOrigins(String tenantDomain, List<String> ids) throws CORSManagementServiceException;", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ2NjE3Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447466173", "bodyText": "Nothing uses this service yet \ud83d\ude04", "author": "ivantha", "createdAt": "2020-06-30T07:24:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDMxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ1NDczMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r447454732", "bodyText": "Shall we change the param type? Check other places as well.", "author": "GANGANI", "createdAt": "2020-06-30T07:01:50Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -53,14 +54,33 @@\n      * @param corsOrigins  A list of CORS Origins to be added.", "originalCommit": "57c1c7e82b9a11d579fa6786185be699138a413e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "711ec5ada1a6b7a19489705c5ede54976b567ccb", "url": "https://github.com/wso2/carbon-identity-framework/commit/711ec5ada1a6b7a19489705c5ede54976b567ccb", "message": "Add tenant CORS configurations", "committedDate": "2020-06-30T07:28:09Z", "type": "forcePushed"}, {"oid": "ca3c740c8af152cee11ca335bc881e37ea406c87", "url": "https://github.com/wso2/carbon-identity-framework/commit/ca3c740c8af152cee11ca335bc881e37ea406c87", "message": "Add tenant CORS configurations", "committedDate": "2020-06-30T09:19:44Z", "type": "forcePushed"}, {"oid": "16b5fc87a83ed313cdb46b0a930a5c8dc50c0a7b", "url": "https://github.com/wso2/carbon-identity-framework/commit/16b5fc87a83ed313cdb46b0a930a5c8dc50c0a7b", "message": "Add tenant CORS configurations", "committedDate": "2020-06-30T16:00:38Z", "type": "forcePushed"}, {"oid": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "url": "https://github.com/wso2/carbon-identity-framework/commit/051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "message": "Add tenant CORS configurations", "committedDate": "2020-07-06T08:37:32Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNDgzMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r450204830", "bodyText": "remove unncessary new line", "author": "emswbandara", "createdAt": "2020-07-06T13:02:52Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/Constants.java", "diffHunk": "@@ -23,12 +23,38 @@\n  */\n public class Constants {\n \n-    public static final String CORS_ORIGIN_RESOURCE_TYPE_NAME = \"CORS\";\n-    public static final String CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION = \"A resource type to keep the tenant \" +\n-            \"CORS Origins\";\n-    public static final String CORS_ORIGIN_RESOURCE_NAME = \"CORS_ORIGINS\";\n+    public static final String CORS_ORIGIN_RESOURCE_TYPE_NAME = \"CORS_ORIGIN\";\n+    public static final String CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION = \"A resource type to keep a tenant \" +\n+            \"CORS origin.\";\n+", "originalCommit": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNDk5Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r450204993", "bodyText": "can't we inline 27 and 28", "author": "emswbandara", "createdAt": "2020-07-06T13:03:08Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/Constants.java", "diffHunk": "@@ -23,12 +23,38 @@\n  */\n public class Constants {\n \n-    public static final String CORS_ORIGIN_RESOURCE_TYPE_NAME = \"CORS\";\n-    public static final String CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION = \"A resource type to keep the tenant \" +\n-            \"CORS Origins\";\n-    public static final String CORS_ORIGIN_RESOURCE_NAME = \"CORS_ORIGINS\";\n+    public static final String CORS_ORIGIN_RESOURCE_TYPE_NAME = \"CORS_ORIGIN\";\n+    public static final String CORS_ORIGIN_RESOURCE_TYPE_DESCRIPTION = \"A resource type to keep a tenant \" +", "originalCommit": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNTYzNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r450205636", "bodyText": "add license", "author": "emswbandara", "createdAt": "2020-07-06T13:04:22Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToOrigins.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;", "originalCommit": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwNjc5NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r450206794", "bodyText": "use meaningful variable names", "author": "emswbandara", "createdAt": "2020-07-06T13:06:30Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/ValidatedOrigin.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+\n+import java.net.IDN;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Locale;\n+\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_INVALID_URI;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_MISSING_HOST;\n+import static org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages.ERROR_CODE_MISSING_SCHEME;\n+\n+/**\n+ * Validated resource request origin, as defined in The Web Origin Concept (RFC 6454). Supported schemes are {@code\n+ * http} and {@code https}.\n+ */\n+public class ValidatedOrigin extends Origin {\n+\n+    /**\n+     * The origin scheme.\n+     */\n+    private String scheme;\n+\n+    /**\n+     * The origin host.\n+     */\n+    private String host;\n+\n+    /**\n+     * The parsed origin port, -1 for default port.\n+     */\n+    private int port = -1;\n+\n+    /**\n+     * Creates a new validated origin.\n+     *\n+     * @param origin The origin to validate. Must not be {@code null}.\n+     * @throws CORSManagementServiceClientException If the value doesn't represent a valid URI and a supported origin.\n+     */\n+    public ValidatedOrigin(final String origin) throws CORSManagementServiceClientException {\n+\n+        super(origin);\n+\n+        // Parse URI value.\n+        URI uri;\n+        try {\n+            uri = new URI(origin);\n+        } catch (URISyntaxException e) {\n+            throw new CORSManagementServiceClientException(\n+                    String.format(ERROR_CODE_INVALID_URI.getMessage(), origin),\n+                    ERROR_CODE_INVALID_URI.getCode());\n+        }\n+\n+        scheme = uri.getScheme();\n+        host = uri.getHost();\n+        port = uri.getPort();\n+\n+        if (scheme == null) {\n+            throw new CORSManagementServiceClientException(\n+                    String.format(ERROR_CODE_MISSING_SCHEME.getMessage(), origin),\n+                    ERROR_CODE_MISSING_SCHEME.getCode());\n+        }\n+\n+        // Canonicalise scheme and host.\n+        scheme = scheme.toLowerCase(Locale.ENGLISH);\n+\n+        if (host == null) {\n+            throw new CORSManagementServiceClientException(\n+                    String.format(ERROR_CODE_MISSING_HOST.getMessage(), origin),\n+                    ERROR_CODE_MISSING_HOST.getCode());\n+        }\n+\n+        // Apply the IDNA to ASCII algorithm [RFC3490] to /host/.\n+        host = IDN.toASCII(host, IDN.ALLOW_UNASSIGNED | IDN.USE_STD3_ASCII_RULES);\n+\n+        // Convert to lower case.\n+        host = host.toLowerCase(Locale.ENGLISH);\n+    }\n+\n+    /**\n+     * Overrides {@code Object.hashCode}.\n+     *\n+     * @return The object hash code.\n+     */\n+    @Override\n+    public int hashCode() {\n+\n+        return value.hashCode();\n+    }\n+\n+    /**\n+     * Overrides {@code Object.equals()}.\n+     *\n+     * @param object The object to compare to.\n+     * @return {@code true} if the objects are both origins with the same value, else {@code false}.\n+     */\n+    @Override\n+    public boolean equals(Object object) {\n+\n+        return object != null && object.getClass() == this.getClass() && this.toString().equals(object.toString());\n+    }\n+\n+    /**\n+     * Returns the scheme.\n+     *\n+     * @return The scheme.\n+     */\n+    public String getScheme() {\n+\n+        return scheme;\n+    }\n+\n+    /**\n+     * Returns the host (name or IP address).\n+     *\n+     * @return The host name or IP address.\n+     */\n+    public String getHost() {\n+\n+        return host;\n+    }\n+\n+    /**\n+     * Returns the port number.\n+     *\n+     * @return The port number, -1 for default port.\n+     */\n+    public int getPort() {\n+\n+        return port;\n+    }\n+\n+    /**\n+     * Returns the suffix which is made up of the host name / IP address\n+     * and port (if a non-default port is specified).\n+     *\n+     * @return The suffix.\n+     */\n+    public String getSuffix() {\n+\n+        String s = host;", "originalCommit": "051184785c3258fddd36ea72c0d5a9d5e3ad4ed7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f9fca2664c1965479a88708d8d16b233875c2b8d", "url": "https://github.com/wso2/carbon-identity-framework/commit/f9fca2664c1965479a88708d8d16b233875c2b8d", "message": "Add tenant CORS configurations", "committedDate": "2020-07-06T16:10:32Z", "type": "forcePushed"}, {"oid": "26532700419b78be009906fe15652fe414b5617e", "url": "https://github.com/wso2/carbon-identity-framework/commit/26532700419b78be009906fe15652fe414b5617e", "message": "Add tenant CORS configurations", "committedDate": "2020-07-07T07:53:03Z", "type": "forcePushed"}, {"oid": "b8fcbbfb74d3cf806f0a9ab59078212d1dd1e88d", "url": "https://github.com/wso2/carbon-identity-framework/commit/b8fcbbfb74d3cf806f0a9ab59078212d1dd1e88d", "message": "Add tenant CORS configurations", "committedDate": "2020-07-07T19:37:21Z", "type": "forcePushed"}, {"oid": "012c2b8feef3fc42ee5aa16fa151a73fee4afa41", "url": "https://github.com/wso2/carbon-identity-framework/commit/012c2b8feef3fc42ee5aa16fa151a73fee4afa41", "message": "Add tenant CORS configurations", "committedDate": "2020-07-08T01:27:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3NzUzNw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451277537", "bodyText": "Shouldn't this be a list of origin IDs?", "author": "ashensw", "createdAt": "2020-07-08T04:35:52Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -41,26 +42,52 @@\n      * Set the CORS Origins for a tenant. This method replaces any existing Origins.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be set.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be set.\n      * @throws CORSManagementServiceException\n      */\n-    void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void setCORSOrigins(String tenantDomain, String appId, List<String> origins) throws CORSManagementServiceException;\n \n     /**\n      * Add the CORS Origin(s) to the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be added.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be added.\n      * @throws CORSManagementServiceException\n      */\n-    void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void addCORSOrigins(String tenantDomain, String appId, List<String> origins) throws CORSManagementServiceException;\n \n     /**\n      * Delete the CORS Origin(s) from the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be deleted.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be deleted.\n      * @throws CORSManagementServiceException\n      */\n-    void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void deleteCORSOrigins(String tenantDomain, String appId, List<String> origins)", "originalCommit": "012c2b8feef3fc42ee5aa16fa151a73fee4afa41", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3ODY4Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451278686", "bodyText": "Yup. I'll rename.", "author": "ivantha", "createdAt": "2020-07-08T04:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTI3NzUzNw=="}], "type": "inlineReview"}, {"oid": "0f892bf193808d429683cb677c185e1f1bdc3f56", "url": "https://github.com/wso2/carbon-identity-framework/commit/0f892bf193808d429683cb677c185e1f1bdc3f56", "message": "Add tenant CORS configurations", "committedDate": "2020-07-08T04:42:12Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTkwMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451301900", "bodyText": "why was this commented?", "author": "emswbandara", "createdAt": "2020-07-08T06:01:45Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/pom.xml", "diffHunk": "@@ -157,7 +162,7 @@\n                                         <limit implementation=\"org.jacoco.report.check.Limit\">\n                                             <counter>COMPLEXITY</counter>\n                                             <value>COVEREDRATIO</value>\n-<!--                                            <minimum>0.50</minimum>-->\n+                                            <!--<minimum>0.50</minimum>-->", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMxMjE4MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451312180", "bodyText": "The unit test coverage is about 0.28. Is above 0.5 a strict necessity?", "author": "ivantha", "createdAt": "2020-07-08T06:30:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMTkwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMjI1NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451302254", "bodyText": "add license header", "author": "emswbandara", "createdAt": "2020-07-08T06:02:54Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToValidatedOrigins.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMjQwNg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451302406", "bodyText": "use multi-line comments", "author": "emswbandara", "createdAt": "2020-07-08T06:03:24Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToValidatedOrigins.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resources;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a ConfigurationManagement Resources to a list of ValidatedOrigins.\n+ */\n+public class ResourcesToValidatedOrigins implements Function<Resources, List<ValidatedOrigin>> {\n+\n+    private static final Log log = LogFactory.getLog(ResourcesToValidatedOrigins.class);\n+\n+    @Override\n+    public List<ValidatedOrigin> apply(Resources resources) {\n+\n+        ArrayList<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n+        for (Resource resource : resources.getResources()) {\n+            try {\n+                ValidatedOrigin validatedOrigin = new ValidatedOrigin(resource.getResourceName());\n+                validatedOrigins.add(validatedOrigin);\n+            } catch (CORSManagementServiceClientException e) {\n+                if (log.isDebugEnabled()) {\n+                    // The program should never reach here as all the origins in the configuration management store", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMjU0NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451302545", "bodyText": "let's add an informative error message as well", "author": "emswbandara", "createdAt": "2020-07-08T06:03:51Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToValidatedOrigins.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resources;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a ConfigurationManagement Resources to a list of ValidatedOrigins.\n+ */\n+public class ResourcesToValidatedOrigins implements Function<Resources, List<ValidatedOrigin>> {\n+\n+    private static final Log log = LogFactory.getLog(ResourcesToValidatedOrigins.class);\n+\n+    @Override\n+    public List<ValidatedOrigin> apply(Resources resources) {\n+\n+        ArrayList<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n+        for (Resource resource : resources.getResources()) {\n+            try {\n+                ValidatedOrigin validatedOrigin = new ValidatedOrigin(resource.getResourceName());\n+                validatedOrigins.add(validatedOrigin);\n+            } catch (CORSManagementServiceClientException e) {\n+                if (log.isDebugEnabled()) {\n+                    // The program should never reach here as all the origins in the configuration management store\n+                    // are properly validated.\n+                    log.debug(e);", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQ4NDA3OQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451484079", "bodyText": "The error already has a message.", "author": "ivantha", "createdAt": "2020-07-08T11:53:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMjU0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzEzMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303130", "bodyText": "use a defined constant", "author": "emswbandara", "createdAt": "2020-07-08T06:05:23Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -183,26 +306,60 @@ private ConfigurationManager getConfigurationManager() {\n     }\n \n     /**\n-     * Returns true if the tenant already has a particular CORS Origin.\n+     * Configuration Management API returns a ConfigurationManagementException with the error code CONFIGM_00017 when\n+     * resource is not found. This method wraps the original method and returns null if the resource is not found.\n      *\n-     * @param origin The Origin to be checked against the existing Origins.\n-     * @return {@code true} if the tenant already have the particular CORS Origin, {@code false} otherwise.\n+     * @param resourceTypeName Resource type name.\n+     * @param resourceName     Resource name.\n+     * @return Retrieved resource from the configuration store. Returns {@code null} if the resource is not found.\n      * @throws ConfigurationManagementException\n      */\n-    private boolean isDefinedCORSOriginResource(CORSOrigin origin) throws ConfigurationManagementException,\n-            IOException {\n+    private Resource getResource(String resourceTypeName, String resourceName) throws ConfigurationManagementException {\n \n-        Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                CORS_ORIGIN_RESOURCE_NAME);\n-        if (resource != null) {\n-            List<CORSOrigin> currentCORSOrigins = new ResourceToCORSOrigin().apply(resource);\n+        try {\n+            return getConfigurationManager().getResource(resourceTypeName, resourceName);\n+        } catch (ConfigurationManagementException e) {\n+            if (e.getErrorCode().equals(\"CONFIGM_00017\")) {", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzM5NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303395", "bodyText": "add error message with contextual information", "author": "emswbandara", "createdAt": "2020-07-08T06:06:12Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -217,44 +374,31 @@ private void validateTenantDomain(String tenantDomain) throws CORSManagementServ\n     }\n \n     /**\n-     * Validate the CORSOrigin list.\n+     * Validate the application ID.\n      *\n-     * @param corsOrigins List of CORSOrigin instances.\n-     * @throws CORSManagementServiceClientException\n+     * @param tenantDomain The tenant domain.\n+     * @param appId        The application ID.\n      */\n-    private void validateOrigins(List<CORSOrigin> corsOrigins) throws CORSManagementServiceClientException {\n+    private void validateApplicationId(String tenantDomain, String appId) throws CORSManagementServiceClientException {\n \n-        if (corsOrigins == null) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(ERROR_CODE_EMPTY_LIST.getMessage());\n-            }\n-            throw handleClientException(ERROR_CODE_EMPTY_LIST);\n+        // If the appId is blank then the CORS origins that should be set/add/delete belong in the tenant level.\n+        if (StringUtils.isBlank(appId)) {\n+            return;\n         }\n \n-        for (CORSOrigin corsOrigin : corsOrigins) {\n-            if (isInvalidOrigin(corsOrigin)) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(String.format(ERROR_CODE_INVALID_ORIGIN.getMessage(), corsOrigin.getUrl()));\n-                }\n-                throw handleClientException(ERROR_CODE_INVALID_ORIGIN, corsOrigin.getUrl());\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Check if the format of the Origin is valid.\n-     *\n-     * @param origin Origin to be checked for validity.\n-     * @return {@code true} if the origin is valid, {@code false} otherwise.\n-     */\n-    private boolean isInvalidOrigin(CORSOrigin origin) {\n-\n+        // Check whether the appId belongs to the tenant with the tenantDomain.\n         try {\n-            new URL(origin.getUrl()).toURI();\n-        } catch (MalformedURLException | URISyntaxException e) {\n-            return true;\n+            ApplicationBasicInfo applicationBasicInfo = ApplicationManagementService.getInstance()\n+                    .getApplicationBasicInfoByResourceId(appId, tenantDomain);\n+            if (applicationBasicInfo == null) {\n+                throw handleClientException(ErrorMessages.ERROR_CODE_INVALID_APP_ID, appId);\n+            }\n+        } catch (IdentityApplicationManagementException e) {\n+            // Something else happened.\n+            if (log.isDebugEnabled()) {\n+                log.debug(e);", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkzODI0Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451938247", "bodyText": "The error already has a message.", "author": "ivantha", "createdAt": "2020-07-09T03:07:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzM5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzUzNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303534", "bodyText": "make the constructor private", "author": "emswbandara", "createdAt": "2020-07-08T06:06:40Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/CORSConfigurationUtil.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+import org.wso2.carbon.identity.cors.mgt.core.model.Origin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for CORS configuration operations.\n+ */\n+public class CORSConfigurationUtil {", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzc1NQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303755", "bodyText": "use meaningful variable name instead of 's'", "author": "emswbandara", "createdAt": "2020-07-08T06:07:14Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/CORSConfigurationUtil.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import edu.emory.mathcs.backport.java.util.Arrays;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+import org.wso2.carbon.identity.cors.mgt.core.model.Origin;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility class for CORS configuration operations.\n+ */\n+public class CORSConfigurationUtil {\n+\n+    private static final Log log = LogFactory.getLog(CORSConfigurationUtil.class);\n+\n+    /**\n+     * Read the default CORS configuration properties in the identity.xml.\n+     *\n+     * @return Server default {@code CORSConfiguration} object.\n+     */\n+    public static CORSConfiguration getDefaultCORSConfiguration() {\n+\n+        CORSConfiguration corsConfiguration = new CORSConfiguration();\n+\n+        // Set allowGenericHttpRequests.\n+        corsConfiguration.setAllowGenericHttpRequests(Boolean.parseBoolean(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.ALLOW_GENERIC_HTTP_REQUESTS)));\n+\n+        // Set allowAnyOrigin and allowedOrigins.\n+        String allowedOriginsProperty = Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.ALLOWED_ORIGINS)).trim();\n+        if (allowedOriginsProperty.equals(\"*\")) {\n+            corsConfiguration.setAllowAnyOrigin(true);\n+        } else {\n+            corsConfiguration.setAllowAnyOrigin(false);\n+\n+            Set<ValidatedOrigin> allowedOrigins = new HashSet<>();\n+            for (Origin origin : parseWords(allowedOriginsProperty).stream().map(Origin::new)\n+                    .collect(Collectors.toList())) {\n+                try {\n+                    allowedOrigins.add(new ValidatedOrigin(origin.getValue()));\n+                } catch (CORSManagementServiceClientException e) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(e);\n+                    }\n+                }\n+            }\n+            corsConfiguration.setAllowedOrigins(allowedOrigins);\n+        }\n+\n+        // Set allowSubdomains.\n+        corsConfiguration.setAllowSubdomains(Boolean.parseBoolean(Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.ALLOW_SUBDOMAINS))));\n+\n+        // Set supportedMethods.\n+        Set<String> supportedMethods = new HashSet<>(parseWords(\n+                Objects.requireNonNull(IdentityUtil.getProperty(IdentityConstants.CORS.SUPPORTED_METHODS))));\n+        corsConfiguration.setSupportedMethods(supportedMethods);\n+\n+        // Set supportAnyHeader and supportedHeaders.\n+        String supportedHeadersProperty = Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.SUPPORTED_HEADERS)).trim();\n+        if (supportedHeadersProperty.equals(\"*\")) {\n+            corsConfiguration.setSupportAnyHeader(true);\n+        } else {\n+            corsConfiguration.setSupportAnyHeader(false);\n+\n+            Set<String> supportedHeaders = new HashSet<>();\n+            for (String header : parseWords(supportedHeadersProperty)) {\n+                try {\n+                    supportedHeaders.add(HeaderUtils.formatCanonical(header));\n+                } catch (IllegalArgumentException e) {\n+                    throw new IllegalArgumentException(String.format(\n+                            ErrorMessages.ERROR_CODE_BAD_HEADER.getDescription(), header));\n+                }\n+            }\n+            corsConfiguration.setSupportedHeaders(supportedHeaders);\n+        }\n+\n+        // Set exposedHeaders.\n+        Set<String> exposedHeaders = new HashSet<>();\n+        String exposedHeadersProperty = Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.EXPOSED_HEADERS));\n+        for (String header : parseWords(exposedHeadersProperty)) {\n+            try {\n+                exposedHeaders.add(HeaderUtils.formatCanonical(header));\n+            } catch (IllegalArgumentException e) {\n+                throw new IllegalArgumentException(String.format(\n+                        ErrorMessages.ERROR_CODE_BAD_HEADER.getDescription(), header));\n+            }\n+        }\n+        corsConfiguration.setExposedHeaders(exposedHeaders);\n+\n+        // Set supportsCredentials.\n+        corsConfiguration.setSupportsCredentials(Boolean.parseBoolean(Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.SUPPORTS_CREDENTIALS))));\n+\n+        // Set maxAge.\n+        corsConfiguration.setMaxAge(Integer.parseInt(Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.MAX_AGE))));\n+\n+        // Set tagRequests.\n+        corsConfiguration.setTagRequests(Boolean.parseBoolean(Objects.requireNonNull(IdentityUtil.getProperty(\n+                IdentityConstants.CORS.TAG_REQUESTS))));\n+\n+        return corsConfiguration;\n+    }\n+\n+    /**\n+     * Parses a string containing words separated by space and/or comma.\n+     *\n+     * @param s The string to parse. Must not be {@code null}.\n+     * @return An array of the parsed words, empty if none were found.\n+     */\n+    protected static List<String> parseWords(final String s) {", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMwMzk5Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r451303993", "bodyText": "why was this removed", "author": "emswbandara", "createdAt": "2020-07-08T06:07:59Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/CORSOrigin.java", "diffHunk": "@@ -1,117 +1,91 @@\n-/*", "originalCommit": "0f892bf193808d429683cb677c185e1f1bdc3f56", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d393b431f8f582c8e4ff379ec85b96c3076f2eb9", "url": "https://github.com/wso2/carbon-identity-framework/commit/d393b431f8f582c8e4ff379ec85b96c3076f2eb9", "message": "Add tenant CORS configurations", "committedDate": "2020-07-08T14:02:17Z", "type": "forcePushed"}, {"oid": "2cec639325b8c89430f5972125fbe857f99d80c7", "url": "https://github.com/wso2/carbon-identity-framework/commit/2cec639325b8c89430f5972125fbe857f99d80c7", "message": "Add tenant CORS configurations", "committedDate": "2020-07-09T07:39:45Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA0Mzc0MA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452043740", "bodyText": "let's change this to an error log. WDYT", "author": "emswbandara", "createdAt": "2020-07-09T08:15:39Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/function/ResourcesToValidatedOrigins.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.function;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resource;\n+import org.wso2.carbon.identity.configuration.mgt.core.model.Resources;\n+import org.wso2.carbon.identity.cors.mgt.core.exception.CORSManagementServiceClientException;\n+import org.wso2.carbon.identity.cors.mgt.core.model.ValidatedOrigin;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.function.Function;\n+\n+/**\n+ * Converts a ConfigurationManagement Resources to a list of ValidatedOrigins.\n+ */\n+public class ResourcesToValidatedOrigins implements Function<Resources, List<ValidatedOrigin>> {\n+\n+    private static final Log log = LogFactory.getLog(ResourcesToValidatedOrigins.class);\n+\n+    @Override\n+    public List<ValidatedOrigin> apply(Resources resources) {\n+\n+        ArrayList<ValidatedOrigin> validatedOrigins = new ArrayList<>();\n+        for (Resource resource : resources.getResources()) {\n+            try {\n+                ValidatedOrigin validatedOrigin = new ValidatedOrigin(resource.getResourceName());\n+                validatedOrigins.add(validatedOrigin);\n+            } catch (CORSManagementServiceClientException e) {\n+                if (log.isDebugEnabled()) {", "originalCommit": "2cec639325b8c89430f5972125fbe857f99d80c7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "728fa09f81a14c1ec4283061f6715a1800cb8eaa", "url": "https://github.com/wso2/carbon-identity-framework/commit/728fa09f81a14c1ec4283061f6715a1800cb8eaa", "message": "Add tenant CORS configurations", "committedDate": "2020-07-09T08:16:34Z", "type": "forcePushed"}, {"oid": "7604960608e34eb140f1ad72e76680b9bf17c503", "url": "https://github.com/wso2/carbon-identity-framework/commit/7604960608e34eb140f1ad72e76680b9bf17c503", "message": "Add tenant CORS configurations", "committedDate": "2020-07-09T08:30:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2NzUzMg==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452067532", "bodyText": "make the constructor private in all util classes", "author": "emswbandara", "createdAt": "2020-07-09T08:55:53Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/test/java/org/wso2/carbon/identity/cors/mgt/core/util/FileUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+\n+import java.nio.file.Paths;\n+\n+/**\n+ * Utility class for file functions.\n+ */\n+public class FileUtils {", "originalCommit": "7604960608e34eb140f1ad72e76680b9bf17c503", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2ODU1Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452068557", "bodyText": "shall we make this private?", "author": "emswbandara", "createdAt": "2020-07-09T08:57:34Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/model/Origin.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.model;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+\n+/**\n+ * Resource request origin (not validated), as defined in The Web Origin Concept (RFC 6454).\n+ */\n+public class Origin {\n+\n+    /**\n+     * The original origin value, used in hash code generation and equality checking.\n+     */\n+    String value;", "originalCommit": "7604960608e34eb140f1ad72e76680b9bf17c503", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA2OTA1Ng==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452069056", "bodyText": "use standard comment format", "author": "emswbandara", "createdAt": "2020-07-09T08:58:25Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/SerializationUtils.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * Utility class for serialization operations.\n+ */\n+public class SerializationUtils {\n+\n+    /**\n+     * Serialises the items of a set into a string. Each item must have a meaningful {@code toString()} method.\n+     *\n+     * @param set The set to serialise. Must not be {@code null}.\n+     * @return The serialised set as string.\n+     */\n+    public static String serializeStringSet(final Set<String> set) {\n+\n+        StringBuilder sb = new StringBuilder();\n+        Iterator<String> it = set.iterator();\n+        while (it.hasNext()) {\n+            sb.append(it.next());\n+            if (it.hasNext()) {\n+                sb.append(\";\");\n+            }\n+        }\n+\n+        return sb.toString();\n+    }\n+\n+    /**\n+     * Deserialize a string into a Set.\n+     *\n+     * @param serializedString The string to deserialize. Must not be {@code null}.\n+     * @return The deserialized Set<String>.\n+     */\n+    public static Set<String> deserializeStringSet(String serializedString) {\n+\n+        if (serializedString == null) {\n+            return new HashSet<>(); // empty set", "originalCommit": "7604960608e34eb140f1ad72e76680b9bf17c503", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "886d732e7d4bb835ccc8347e5b5493ce2c36fa99", "url": "https://github.com/wso2/carbon-identity-framework/commit/886d732e7d4bb835ccc8347e5b5493ce2c36fa99", "message": "Add tenant CORS configurations", "committedDate": "2020-07-09T10:07:28Z", "type": "forcePushed"}, {"oid": "59a96836b742eda126ffdd18ff446f1ab3387313", "url": "https://github.com/wso2/carbon-identity-framework/commit/59a96836b742eda126ffdd18ff446f1ab3387313", "message": "Add tenant CORS configurations", "committedDate": "2020-07-09T11:09:39Z", "type": "forcePushed"}, {"oid": "2b6401a8587ab67d014583f6c1ccfce1df0c5d14", "url": "https://github.com/wso2/carbon-identity-framework/commit/2b6401a8587ab67d014583f6c1ccfce1df0c5d14", "message": "Add tenant CORS configurations", "committedDate": "2020-07-09T12:12:05Z", "type": "forcePushed"}, {"oid": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "url": "https://github.com/wso2/carbon-identity-framework/commit/7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "message": "Add tenant CORS configurations", "committedDate": "2020-07-10T07:55:04Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzM0NA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452717344", "bodyText": "Any reasons why we went with IDs instead of the origin itself here?\nTo me, it might be a bit confusing when we compare the addCORSOrigins() and deleteCORSOrigins() method.", "author": "mefarazath", "createdAt": "2020-07-10T09:00:31Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/CORSManagementService.java", "diffHunk": "@@ -41,26 +42,52 @@\n      * Set the CORS Origins for a tenant. This method replaces any existing Origins.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be set.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be set.\n      * @throws CORSManagementServiceException\n      */\n-    void setCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void setCORSOrigins(String tenantDomain, String appId, List<String> origins) throws CORSManagementServiceException;\n \n     /**\n      * Add the CORS Origin(s) to the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be added.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param origins      A list of CORS origins to be added.\n      * @throws CORSManagementServiceException\n      */\n-    void addCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void addCORSOrigins(String tenantDomain, String appId, List<String> origins) throws CORSManagementServiceException;\n \n     /**\n      * Delete the CORS Origin(s) from the existing CORS Origin list of the tenant.\n      *\n      * @param tenantDomain The tenant domain.\n-     * @param corsOrigins  A list of CORS Origins to be deleted.\n+     * @param appId        The  application ID that the CORS origin(s) belongs to. Should be {@code null} if the CORS\n+     *                     origin(s) belong to the tenant level.\n+     * @param originIds    A list of CORS origin IDs to be deleted.\n      * @throws CORSManagementServiceException\n      */\n-    void deleteCORSOrigins(String tenantDomain, List<CORSOrigin> corsOrigins) throws CORSManagementServiceException;\n+    void deleteCORSOrigins(String tenantDomain, String appId, List<String> originIds)", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjczOTAxMw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452739013", "bodyText": "This should be fine IMO as we follow the similar approach in most of the other APIs? it gives the origin url and the id from the getCORSOrigins() request. So the user can use that resource id to delete the resource.", "author": "ashensw", "createdAt": "2020-07-10T09:42:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzM0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc2Mjk5Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452762997", "bodyText": "Since the REST API is taking IDs for delete operations, I thought it might be straightforward to use them here.", "author": "ivantha", "createdAt": "2020-07-10T10:32:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzM0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzgyNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452717825", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Unable to retrieve CORS.\n          \n          \n            \n                 * Unable to retrieve CORS origins.", "author": "mefarazath", "createdAt": "2020-07-10T09:01:24Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,179 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxNzkxOQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452717919", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Unable to set CORS.\n          \n          \n            \n                 * Unable to set CORS origins.", "author": "mefarazath", "createdAt": "2020-07-10T09:01:34Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,179 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxODAzNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452718034", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Unable to add CORS.\n          \n          \n            \n                 * Unable to add CORS origins.", "author": "mefarazath", "createdAt": "2020-07-10T09:01:46Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,179 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.\n+     */\n     ERROR_CODE_CORS_SET(\"CMS-65002\",\n             \"Unable to set CORS Origins.\",\n             \"Server encountered an error while setting the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to add CORS.", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcxODE0Mw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452718143", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Unable to delete CORS.\n          \n          \n            \n                 * Unable to delete CORS origins.", "author": "mefarazath", "createdAt": "2020-07-10T09:01:57Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/constant/ErrorMessages.java", "diffHunk": "@@ -24,55 +24,179 @@\n  */\n public enum ErrorMessages {\n \n+    /**\n+     * Unable to retrieve CORS.\n+     */\n     ERROR_CODE_CORS_RETRIEVE(\"CMS-65001\",\n             \"Unable to retrieve CORS Origins.\",\n             \"Server encountered an error while retrieving the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to set CORS.\n+     */\n     ERROR_CODE_CORS_SET(\"CMS-65002\",\n             \"Unable to set CORS Origins.\",\n             \"Server encountered an error while setting the CORS Origins of %s.\"),\n+\n+    /**\n+     * Unable to add CORS.\n+     */\n     ERROR_CODE_CORS_ADD(\"CMS-65003\",\n             \"Unable to add CORS Origins.\",\n             \"Server encountered an error while adding the CORS Origins to %s.\"),\n+\n+    /**\n+     * Unable to delete CORS.", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMTAwNA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452721004", "bodyText": "Since all the attributes of this configuration are read from the identity.xml, shouldn't this be a one time task?", "author": "mefarazath", "createdAt": "2020-07-10T09:06:55Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/CORSConfigurationUtil.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.wso2.carbon.identity.base.IdentityConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.cors.mgt.core.constant.ErrorMessages;\n+import org.wso2.carbon.identity.cors.mgt.core.model.CORSConfiguration;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Utility class for CORS configuration operations.\n+ */\n+public class CORSConfigurationUtil {\n+\n+    /**\n+     * Private constructor of CORSConfigurationUtil.\n+     */\n+    private CORSConfigurationUtil() {\n+\n+    }\n+\n+    /**\n+     * Read the default CORS configuration properties in the identity.xml.\n+     *\n+     * @return Server default {@code CORSConfiguration} object.\n+     */\n+    public static CORSConfiguration getServerCORSConfiguration() {", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc1OTgzMA==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452759830", "bodyText": "Moved the first read to a static variable.", "author": "ivantha", "createdAt": "2020-07-10T10:25:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMTAwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMjUyNQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452722525", "bodyText": "Can we have some unit tests covering the utility methods?", "author": "mefarazath", "createdAt": "2020-07-10T09:09:56Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/SerializationUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+/**\n+ * Utility class for serialization operations.\n+ */\n+public class SerializationUtils {", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyMjU2Nw==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452722567", "bodyText": "Can we have some unit tests covering the utility methods?", "author": "mefarazath", "createdAt": "2020-07-10T09:10:01Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/util/HeaderUtils.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ *\n+ * NOTE: The code/logic in this class is copied from https://bitbucket.org/thetransactioncompany/cors-filter.\n+ * All credits goes to the original authors of the project https://bitbucket.org/thetransactioncompany/cors-filter.\n+ */\n+\n+package org.wso2.carbon.identity.cors.mgt.core.internal.util;\n+\n+import java.util.Locale;\n+import java.util.regex.Pattern;\n+\n+import static java.util.regex.Pattern.compile;\n+\n+/**\n+ * Header utilities.\n+ */\n+public class HeaderUtils {", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjcyNTI2MQ==", "url": "https://github.com/wso2/carbon-identity-framework/pull/2989#discussion_r452725261", "bodyText": "Can't we move this line within the try block?", "author": "mefarazath", "createdAt": "2020-07-10T09:15:21Z", "path": "components/cors-mgt/org.wso2.carbon.identity.cors.mgt.core/src/main/java/org/wso2/carbon/identity/cors/mgt/core/internal/impl/CORSManagementServiceImpl.java", "diffHunk": "@@ -70,108 +78,222 @@\n     public List<CORSOrigin> getCORSOrigins(String tenantDomain) throws CORSManagementServiceException {\n \n         validateTenantDomain(tenantDomain);\n+\n+        List<CORSOrigin> corsOrigins;\n         try {\n             FrameworkUtils.startTenantFlow(tenantDomain);\n \n-            Resource resource = getConfigurationManager().getResource(CORS_ORIGIN_RESOURCE_TYPE_NAME,\n-                    CORS_ORIGIN_RESOURCE_NAME);\n-            List<CORSOrigin> corsOrigins;\n-            if (resource == null) {\n-                corsOrigins = new ArrayList<>();\n-            } else {\n-                corsOrigins = new ResourceToCORSOrigin().apply(resource);\n-            }\n-\n-            return Collections.unmodifiableList(corsOrigins);\n-        } catch (ConfigurationManagementException | IOException e) {\n+            Resources resources = getResources(CORS_ORIGIN_RESOURCE_TYPE_NAME);\n+            corsOrigins = resources.getResources().stream().map(new ResourceToCORSOrigin())\n+                    .collect(Collectors.toList());\n+        } catch (ConfigurationManagementException e) {\n             throw handleServerException(ERROR_CODE_CORS_RETRIEVE, e, tenantDomain);\n         } finally {\n             FrameworkUtils.endTenantFlow();\n         }\n+\n+        return Collections.unmodifiableList(corsOrigins);", "originalCommit": "7ad750edc7cccb7f26d72a22db84d1ad5cf8ae5b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "eed54a6168add4dce20320479690045d8f53b39b", "url": "https://github.com/wso2/carbon-identity-framework/commit/eed54a6168add4dce20320479690045d8f53b39b", "message": "Add tenant CORS configurations", "committedDate": "2020-07-10T12:01:21Z", "type": "commit"}, {"oid": "eed54a6168add4dce20320479690045d8f53b39b", "url": "https://github.com/wso2/carbon-identity-framework/commit/eed54a6168add4dce20320479690045d8f53b39b", "message": "Add tenant CORS configurations", "committedDate": "2020-07-10T12:01:21Z", "type": "forcePushed"}]}