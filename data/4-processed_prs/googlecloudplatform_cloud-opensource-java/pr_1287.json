{"pr_number": 1287, "pr_title": "Linkage Checker to use exclusion XML file for default special cases", "pr_createdAt": "2020-03-12T16:23:29Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287", "timeline": [{"oid": "8abe61cca4b97cd7d46ad370cf7c94e0fd380b99", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/8abe61cca4b97cd7d46ad370cf7c94e0fd380b99", "message": "Test passes", "committedDate": "2020-03-12T16:09:42Z", "type": "commit"}, {"oid": "9a3d88c3e1e567facd4451f77b51ffdf8901072e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9a3d88c3e1e567facd4451f77b51ffdf8901072e", "message": "Parse URL", "committedDate": "2020-03-12T16:22:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczODk1OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391738959", "bodyText": "linkage-checker-exclusion-default.xml is a file in a JAR file when running as enforcer rule. So picking up URL rather than Path.", "author": "suztomo", "createdAt": "2020-03-12T16:25:26Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -69,13 +70,29 @@\n   static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n       throws SAXException, IOException, VerifierConfigurationException {\n \n+    InputSource inputSource = new InputSource(Files.newInputStream(exclusionFile));\n+    inputSource.setSystemId(exclusionFile.toUri().toString());\n+\n+    return parse(inputSource);\n+  }\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(URL exclusionFile)", "originalCommit": "9a3d88c3e1e567facd4451f77b51ffdf8901072e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTczOTYyNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391739627", "bodyText": "This method is non-static because exclusionMatchers field is an instance variable.", "author": "suztomo", "createdAt": "2020-03-12T16:26:20Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -186,39 +196,38 @@ private LinkageChecker(\n \n     // Filter classes in whitelist\n     SetMultimap<SymbolProblem, ClassFile> filteredMap =\n-        Multimaps.filterEntries(problemToClass.build(), LinkageChecker::problemFilter);\n+        Multimaps.filterEntries(problemToClass.build(), this::problemFilter);\n     return ImmutableSetMultimap.copyOf(filteredMap);\n   }\n \n+  private static ImmutableList<LinkageErrorMatcher> readExclusionMatchers() throws IOException {\n+    ImmutableList.Builder<LinkageErrorMatcher> exclusionMatchers = ImmutableList.builder();\n+\n+    try {\n+      URL defaultRuleUrl = ClassLoader.getSystemResource(\"linkage-checker-exclusion-default.xml\");\n+      ImmutableList<LinkageErrorMatcher> defaultMatchers =\n+          ExclusionFileParser.parse(defaultRuleUrl);\n+      exclusionMatchers.addAll(defaultMatchers);\n+    } catch (SAXException | VerifierConfigurationException ex) {\n+      throw new IOException(\"Could not read default exclusion rule\", ex);\n+    }\n+\n+    return exclusionMatchers.build();\n+  }\n+\n   /**\n    * Returns true if the linkage error {@code entry} should be reported. False if it should be\n    * suppressed.\n    */\n-  private static boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n-    ClassFile classFile = entry.getValue();\n+  private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {", "originalCommit": "9a3d88c3e1e567facd4451f77b51ffdf8901072e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MDE4NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391740185", "bodyText": "These Java logic is replaced with the XML file linkage-checker-exclusion-default.xml below.", "author": "suztomo", "createdAt": "2020-03-12T16:27:09Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -186,39 +196,38 @@ private LinkageChecker(\n \n     // Filter classes in whitelist\n     SetMultimap<SymbolProblem, ClassFile> filteredMap =\n-        Multimaps.filterEntries(problemToClass.build(), LinkageChecker::problemFilter);\n+        Multimaps.filterEntries(problemToClass.build(), this::problemFilter);\n     return ImmutableSetMultimap.copyOf(filteredMap);\n   }\n \n+  private static ImmutableList<LinkageErrorMatcher> readExclusionMatchers() throws IOException {\n+    ImmutableList.Builder<LinkageErrorMatcher> exclusionMatchers = ImmutableList.builder();\n+\n+    try {\n+      URL defaultRuleUrl = ClassLoader.getSystemResource(\"linkage-checker-exclusion-default.xml\");\n+      ImmutableList<LinkageErrorMatcher> defaultMatchers =\n+          ExclusionFileParser.parse(defaultRuleUrl);\n+      exclusionMatchers.addAll(defaultMatchers);\n+    } catch (SAXException | VerifierConfigurationException ex) {\n+      throw new IOException(\"Could not read default exclusion rule\", ex);\n+    }\n+\n+    return exclusionMatchers.build();\n+  }\n+\n   /**\n    * Returns true if the linkage error {@code entry} should be reported. False if it should be\n    * suppressed.\n    */\n-  private static boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n-    ClassFile classFile = entry.getValue();\n+  private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n+    ClassFile sourceClass = entry.getValue();\n     SymbolProblem symbolProblem = entry.getKey();\n-    String sourceClassName = classFile.getBinaryName();\n-    if (SOURCE_CLASSES_TO_SUPPRESS.contains(sourceClassName)) {\n-      return false;\n-    }\n-\n-    // GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that only exists in\n-    // special JDK. https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929\n-    String problematicClassName = symbolProblem.getSymbol().getClassBinaryName();\n-    if (problematicClassName.startsWith(\"jdk.vm.ci\")\n-        && (sourceClassName.startsWith(\"com.oracle.svm\")\n-            || sourceClassName.startsWith(\"com.oracle.graal\")\n-            || sourceClassName.startsWith(\"org.graalvm\"))) {\n-      return false;\n-    }\n \n-    // Mockito's MockMethodDispatcher uses special class loader to load MockMethodDispatcher.raw\n-    // https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/407\n-    if (problematicClassName.equals(\"org.mockito.internal.creation.bytebuddy.MockMethodDispatcher\")\n-        && sourceClassName.startsWith(\"org.mockito.internal.creation.bytebuddy\")) {\n-      return false;", "originalCommit": "9a3d88c3e1e567facd4451f77b51ffdf8901072e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a307b484bac633a92458ed8cf2d3aab12956d81c", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a307b484bac633a92458ed8cf2d3aab12956d81c", "message": "Using LinkageChecker's class loader", "committedDate": "2020-03-12T16:52:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwOTk0OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391809949", "bodyText": "List feels wrong here, as if it's exposing implementation details. Would it make sense to have a single object that contains a list, rather than a bunch of matchers? See comment below.", "author": "elharo", "createdAt": "2020-03-12T18:22:51Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -99,18 +106,21 @@ public static LinkageChecker create(Bom bom) throws IOException {\n \n   @VisibleForTesting\n   LinkageChecker cloneWith(SymbolReferenceMaps newSymbolMaps) {\n-    return new LinkageChecker(classDumper, jars, newSymbolMaps, classReferenceGraph);\n+    return new LinkageChecker(\n+        classDumper, jars, newSymbolMaps, classReferenceGraph, exclusionMatchers);\n   }\n \n   private LinkageChecker(\n       ClassDumper classDumper,\n       List<Path> jars,\n       SymbolReferenceMaps symbolReferenceMaps,\n-      ClassReferenceGraph classReferenceGraph) {\n+      ClassReferenceGraph classReferenceGraph,\n+      ImmutableList<LinkageErrorMatcher> exclusionMatchers) {", "originalCommit": "a307b484bac633a92458ed8cf2d3aab12956d81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyOTA3NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391829074", "bodyText": "Nice idea. Changed to ExcludedErrors.", "author": "suztomo", "createdAt": "2020-03-12T18:58:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgwOTk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMDgwMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391810803", "bodyText": "This list iteration logic could become part of an ExcludedErrors class. Then it becomes simply\nreturn excludedErrors.contains(symbolProblem, sourceClass)", "author": "elharo", "createdAt": "2020-03-12T18:24:28Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -186,39 +196,41 @@ private LinkageChecker(\n \n     // Filter classes in whitelist\n     SetMultimap<SymbolProblem, ClassFile> filteredMap =\n-        Multimaps.filterEntries(problemToClass.build(), LinkageChecker::problemFilter);\n+        Multimaps.filterEntries(problemToClass.build(), this::problemFilter);\n     return ImmutableSetMultimap.copyOf(filteredMap);\n   }\n \n+  private static ImmutableList<LinkageErrorMatcher> readExclusionMatchers() throws IOException {\n+    ImmutableList.Builder<LinkageErrorMatcher> exclusionMatchers = ImmutableList.builder();\n+\n+    try {\n+      URL defaultRuleUrl =\n+          LinkageChecker.class\n+              .getClassLoader()\n+              .getResource(\"linkage-checker-exclusion-default.xml\");\n+      ImmutableList<LinkageErrorMatcher> defaultMatchers =\n+          ExclusionFileParser.parse(defaultRuleUrl);\n+      exclusionMatchers.addAll(defaultMatchers);\n+    } catch (SAXException | VerifierConfigurationException ex) {\n+      throw new IOException(\"Could not read default exclusion rule\", ex);\n+    }\n+\n+    return exclusionMatchers.build();\n+  }\n+\n   /**\n    * Returns true if the linkage error {@code entry} should be reported. False if it should be\n    * suppressed.\n    */\n-  private static boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n-    ClassFile classFile = entry.getValue();\n+  private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n+    ClassFile sourceClass = entry.getValue();\n     SymbolProblem symbolProblem = entry.getKey();\n-    String sourceClassName = classFile.getBinaryName();\n-    if (SOURCE_CLASSES_TO_SUPPRESS.contains(sourceClassName)) {\n-      return false;\n-    }\n-\n-    // GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that only exists in\n-    // special JDK. https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929\n-    String problematicClassName = symbolProblem.getSymbol().getClassBinaryName();\n-    if (problematicClassName.startsWith(\"jdk.vm.ci\")\n-        && (sourceClassName.startsWith(\"com.oracle.svm\")\n-            || sourceClassName.startsWith(\"com.oracle.graal\")\n-            || sourceClassName.startsWith(\"org.graalvm\"))) {\n-      return false;\n-    }\n \n-    // Mockito's MockMethodDispatcher uses special class loader to load MockMethodDispatcher.raw\n-    // https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/407\n-    if (problematicClassName.equals(\"org.mockito.internal.creation.bytebuddy.MockMethodDispatcher\")\n-        && sourceClassName.startsWith(\"org.mockito.internal.creation.bytebuddy\")) {\n-      return false;\n+    for (LinkageErrorMatcher matcher : exclusionMatchers) {", "originalCommit": "a307b484bac633a92458ed8cf2d3aab12956d81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgyOTI1NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391829254", "bodyText": "Moved to ExcludedErrors.contains.", "author": "suztomo", "createdAt": "2020-03-12T18:58:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMDgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTEyOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391811128", "bodyText": "Expand comment to explain why this is not a problem.", "author": "elharo", "createdAt": "2020-03-12T18:25:05Z", "path": "dependencies/src/main/resources/linkage-checker-exclusion-default.xml", "diffHunk": "@@ -0,0 +1,50 @@\n+<LinkageCheckerFilter>\n+  <!-- reactor-core's Traces catches Throwable to detect classes available in\n+    Java 9+.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/816 -->\n+  <LinkageError>\n+    <Source>\n+      <Package name=\"reactor.core.publisher.Traces\" />\n+    </Source>\n+  </LinkageError>\n+\n+  <!-- GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that\n+    only exists in special JDK.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929 -->", "originalCommit": "a307b484bac633a92458ed8cf2d3aab12956d81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzMzgwMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391833801", "bodyText": "Added explanation. It's not \"why this is not a problem\" but \"why Linkage Checker reports false positives\".", "author": "suztomo", "createdAt": "2020-03-12T19:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MTY1Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391851656", "bodyText": "The benefit of using elements and being flexible in what's allowed is that it enables people to fill needs we didn't plan for. It's the eXtensible part of XML.  We don't show these today. Tomorrow, who knows? It didn't occur to me when you designed this format that we might want documentation like this, bit now I can see the need.", "author": "elharo", "createdAt": "2020-03-12T19:44:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MzQ0MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391853440", "bodyText": "Also, I'm not sure this is correct. The reason is not that \"As Linkage Checker does not use GraalVM, it ignores the errors to avoid false positives.\" Even if we did use GraalVM, I suspect this would happen. What we need here is an answer to the question of why do we consider this a false positive, and that answer is that the code is only invoked when running in a GraalVM that does have those classes.  In a non-Graal VM it's unreachable.", "author": "elharo", "createdAt": "2020-03-12T19:48:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTEyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4MjI4Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391882283", "bodyText": "Created an issue: #1288 (not in this PR)\n\nEven if we did use GraalVM, I suspect this would happen.\n\nIf we use Java runtime that provides JVMCI Java Compiler Interface (JVMCI), this missing classes won't happen.\n\nthe code is only invoked when running in a GraalVM\n\nUpdated so.", "author": "suztomo", "createdAt": "2020-03-12T20:40:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMTEyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMjAwNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391812006", "bodyText": "The comment should explain why we don't care about this. In fact this doesn't need to be a comment. It can be another element, and include full HTML markup (if that's useful).", "author": "elharo", "createdAt": "2020-03-12T18:26:45Z", "path": "dependencies/src/main/resources/linkage-checker-exclusion-default.xml", "diffHunk": "@@ -0,0 +1,50 @@\n+<LinkageCheckerFilter>\n+  <!-- reactor-core's Traces catches Throwable to detect classes available in\n+    Java 9+.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/816 -->\n+  <LinkageError>\n+    <Source>\n+      <Package name=\"reactor.core.publisher.Traces\" />\n+    </Source>\n+  </LinkageError>\n+\n+  <!-- GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that\n+    only exists in special JDK.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929 -->\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.svm\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.graal\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"org.graalvm\" />\n+    </Source>\n+  </LinkageError>\n+\n+  <!-- Mockito's MockMethodDispatcher uses special class loader to load", "originalCommit": "a307b484bac633a92458ed8cf2d3aab12956d81c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgzNzYwNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391837604", "bodyText": "Added explanation why the errors are false positives.\nI just thought about adding <reason> element that would enable HTML markup. However it does not help users because the exclusion rules are for errors that won't be shown to users, nor in an HTML renderer. If you still think <reason> element helpful, feel free to file an issue. I'll check that later.", "author": "suztomo", "createdAt": "2020-03-12T19:15:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMjAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4Mjk1MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391882951", "bodyText": "Created #1288", "author": "suztomo", "createdAt": "2020-03-12T20:42:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMjAwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQxNDE1Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r392414157", "bodyText": "I'm not OK with leaving this for later. This PR needs that information, and that information belongs in an element, not a comment.", "author": "elharo", "createdAt": "2020-03-13T18:56:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTgxMjAwNg=="}], "type": "inlineReview"}, {"oid": "1b6361cc6cd842895e5a90e641a08b74d524f0bb", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/1b6361cc6cd842895e5a90e641a08b74d524f0bb", "message": "ExcludedErrors", "committedDate": "2020-03-12T19:17:35Z", "type": "commit"}, {"oid": "a0dd32902567a816c831e4da84ef7e3edcbc4cf5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a0dd32902567a816c831e4da84ef7e3edcbc4cf5", "message": "ExcludedErrorsTest", "committedDate": "2020-03-12T19:25:36Z", "type": "commit"}, {"oid": "2d21eb2c6ff24f7022144dc1a065b4388c58cdd2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/2d21eb2c6ff24f7022144dc1a065b4388c58cdd2", "message": "revert unwanted change", "committedDate": "2020-03-12T19:26:35Z", "type": "commit"}, {"oid": "04e696141ddec6d2632da1a7c60e09f3aa634da3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/04e696141ddec6d2632da1a7c60e09f3aa634da3", "message": "2020", "committedDate": "2020-03-12T19:27:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MjMyOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391852328", "bodyText": "There's no reason not to summarize the relevant parts of #407 here. I think there's more content there than in this file.", "author": "elharo", "createdAt": "2020-03-12T19:46:22Z", "path": "dependencies/src/main/resources/linkage-checker-exclusion-default.xml", "diffHunk": "@@ -0,0 +1,53 @@\n+<LinkageCheckerFilter>\n+  <!-- reactor-core's Traces catches Throwable to detect classes available in\n+    Java 9+. As Linkage Checker targets Java 8, it ignores these errors to avoid\n+    false positives.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/816 -->\n+  <LinkageError>\n+    <Source>\n+      <Package name=\"reactor.core.publisher.Traces\" />\n+    </Source>\n+  </LinkageError>\n+\n+  <!-- GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that\n+    only exists in special JDK. As Linkage Checker does not use GraalVM, it\n+    ignores the errors to avoid false positives.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929 -->\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.svm\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.graal\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"org.graalvm\" />\n+    </Source>\n+  </LinkageError>\n+\n+  <!-- Mockito's MockMethodDispatcher uses special class loader to load\n+    MockMethodDispatcher.raw. As Linkage Checker does not use the class loader,\n+    it ignores the missing class errors to avoid false positives.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/407 -->", "originalCommit": "04e696141ddec6d2632da1a7c60e09f3aa634da3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg4NjY3NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r391886674", "bodyText": "Added the raw file is in the mockito JAR.", "author": "suztomo", "createdAt": "2020-03-12T20:50:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTg1MjMyOA=="}], "type": "inlineReview"}, {"oid": "b409b60f76e7ac3baa826df074f0ab85ac917fa0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b409b60f76e7ac3baa826df074f0ab85ac917fa0", "message": "Updating comments", "committedDate": "2020-03-12T20:48:22Z", "type": "commit"}, {"oid": "40cfa20836b02ab8ba9194ced0a4ec0d0c602330", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/40cfa20836b02ab8ba9194ced0a4ec0d0c602330", "message": "updating comments", "committedDate": "2020-03-12T20:49:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5NzM4Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r392297383", "bodyText": "delete the sentence beginning \"As long as\"", "author": "elharo", "createdAt": "2020-03-13T15:25:23Z", "path": "dependencies/src/main/resources/linkage-checker-exclusion-default.xml", "diffHunk": "@@ -0,0 +1,55 @@\n+<LinkageCheckerFilter>\n+  <!-- reactor-core's Traces catches Throwable to detect classes available in\n+    Java 9+. As Linkage Checker targets Java 8, it ignores these errors to avoid\n+    false positives.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/816 -->\n+  <LinkageError>\n+    <Source>\n+      <Package name=\"reactor.core.publisher.Traces\" />\n+    </Source>\n+  </LinkageError>\n+\n+  <!-- GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that\n+    only exists in special JDK. These missing classes are false positives, because\n+    the code is only invoked when running in a GraalVM.\n+    https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929 -->\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.svm\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.graal\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"org.graalvm\" />\n+    </Source>\n+  </LinkageError>\n+\n+  <!-- Mockito's MockMethodDispatcher uses special class loader to load\n+    MockMethodDispatcher.raw. The class file with \"raw\" suffix is in mockito-core JAR file.\n+    As long as developers use Mockito through a normal usage, there should not be", "originalCommit": "40cfa20836b02ab8ba9194ced0a4ec0d0c602330", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMwNDE1Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1287#discussion_r392304157", "bodyText": "Deleted.", "author": "suztomo", "createdAt": "2020-03-13T15:36:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI5NzM4Mw=="}], "type": "inlineReview"}, {"oid": "403d08e11f5d229639d17b0399c82b335b068ffa", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/403d08e11f5d229639d17b0399c82b335b068ffa", "message": "Merge remote-tracking branch 'origin/master' into i1272", "committedDate": "2020-03-13T15:33:20Z", "type": "commit"}, {"oid": "8dcee799d41f21394eb1bddc5880c00546ec8c97", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/8dcee799d41f21394eb1bddc5880c00546ec8c97", "message": "Applied review", "committedDate": "2020-03-13T15:36:01Z", "type": "commit"}, {"oid": "d5b2cb64cba0c62d4b96f07ddf906abf983064f5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d5b2cb64cba0c62d4b96f07ddf906abf983064f5", "message": "Merge remote-tracking branch 'origin/master' into i1272", "committedDate": "2020-03-16T14:59:42Z", "type": "commit"}, {"oid": "7d39d02bbef3a53c1e957079080211dcf80f1bcc", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7d39d02bbef3a53c1e957079080211dcf80f1bcc", "message": "Reason element in schema", "committedDate": "2020-03-16T15:20:04Z", "type": "commit"}, {"oid": "18f2c5cf1a4d5d56a38a4774d233d4106d33d079", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/18f2c5cf1a4d5d56a38a4774d233d4106d33d079", "message": "Using Reason element in default rule", "committedDate": "2020-03-16T15:21:49Z", "type": "commit"}, {"oid": "58d1cc4a6943b66cd8da730a63f46bc873e34837", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/58d1cc4a6943b66cd8da730a63f46bc873e34837", "message": "format", "committedDate": "2020-03-16T15:22:18Z", "type": "commit"}, {"oid": "707d64b0aca31cca41492d562901bc005dbde69f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/707d64b0aca31cca41492d562901bc005dbde69f", "message": "Merge branch 'master' into i1272", "committedDate": "2020-03-17T15:24:17Z", "type": "commit"}, {"oid": "c1d2fca834b36ff05df85f1ac899e470661648af", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c1d2fca834b36ff05df85f1ac899e470661648af", "message": "Merge branch 'master' into i1272", "committedDate": "2020-03-17T16:08:30Z", "type": "commit"}]}