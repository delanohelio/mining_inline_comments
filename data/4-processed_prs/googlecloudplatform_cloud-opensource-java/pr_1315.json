{"pr_number": 1315, "pr_title": "LinkageCheckerMain and LinkageCheckerRule to support exclusion filter file option", "pr_createdAt": "2020-03-27T19:42:55Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315", "timeline": [{"oid": "3c74f76cbc7daac4f5ffbae3f0ce6f4d27f1f3c0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3c74f76cbc7daac4f5ffbae3f0ce6f4d27f1f3c0", "message": "Linkage Checker to support exclusion-filter-file", "committedDate": "2020-03-27T19:40:28Z", "type": "commit"}, {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0f30156e50abe3f835b8478e8ada07b6de6c07f8", "message": "setExclusionFilterFile", "committedDate": "2020-03-27T19:41:44Z", "type": "commit"}, {"oid": "80f9b124b01e036ca4470605f9814e1840c8a6e1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/80f9b124b01e036ca4470605f9814e1840c8a6e1", "message": "format", "committedDate": "2020-03-27T20:01:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTYwMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399509602", "bodyText": "\"JAR files to find linkage errors in\"", "author": "elharo", "createdAt": "2020-03-27T20:01:56Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors", "originalCommit": "0f30156e50abe3f835b8478e8ada07b6de6c07f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MDAyNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399550025", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-03-27T21:38:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTY5Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399509693", "bodyText": "List of JAR --> JAR", "author": "elharo", "createdAt": "2020-03-27T20:02:11Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors\n+   * @param entryPoints List of JAR files to define entry point classes in reachability.", "originalCommit": "0f30156e50abe3f835b8478e8ada07b6de6c07f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0OTk4Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399549983", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-03-27T21:37:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTg2Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399509863", "bodyText": "exclusion file to suppress linkage errors.", "author": "elharo", "createdAt": "2020-03-27T20:02:35Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors\n+   * @param entryPoints List of JAR files to define entry point classes in reachability.\n+   * @param exclusionFile Exclusion file to filter out linkage errors.", "originalCommit": "0f30156e50abe3f835b8478e8ada07b6de6c07f8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MDAwMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399550002", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-03-27T21:37:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTg2Mw=="}], "type": "inlineReview"}, {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4b26b919abdd410fe1c27e3edb2d2699518a6403", "message": "Applied review", "committedDate": "2020-03-27T21:40:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3ODM4NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400278384", "bodyText": "Might be worth having an overloaded method to avoid the null argument.", "author": "elharo", "createdAt": "2020-03-30T15:21:32Z", "path": "boms/integration-tests/src/test/java/com/google/cloud/MaximumLinkageErrorsTest.java", "diffHunk": "@@ -50,8 +50,8 @@ public void testForNewLinkageErrors()\n     Bom bom = RepositoryUtility.readBom(bomFile);\n \n     ImmutableSetMultimap<SymbolProblem, ClassFile> oldProblems =\n-        LinkageChecker.create(baseline).findSymbolProblems();\n-    LinkageChecker checker = LinkageChecker.create(bom);\n+        LinkageChecker.create(baseline, null).findSymbolProblems();", "originalCommit": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MzM2OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400353369", "bodyText": "Created overloaded method.\nWhat do you think about applying builder pattern? Created #1321", "author": "suztomo", "createdAt": "2020-03-30T17:07:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3ODM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3OTc4Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400279786", "bodyText": "rule --> rule file.", "author": "elharo", "createdAt": "2020-03-30T15:23:08Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExcludedErrors.java", "diffHunk": "@@ -36,8 +42,12 @@ static ExcludedErrors create() throws IOException {\n       ImmutableList<LinkageErrorMatcher> defaultMatchers =\n           ExclusionFileParser.parse(defaultRuleUrl);\n       exclusionMatchers.addAll(defaultMatchers);\n+\n+      if (exclusionFile != null) {\n+        exclusionMatchers.addAll(ExclusionFileParser.parse(exclusionFile));\n+      }\n     } catch (SAXException | VerifierConfigurationException ex) {\n-      throw new IOException(\"Could not read default exclusion rule\", ex);\n+      throw new IOException(\"Could not read exclusion rule\", ex);", "originalCommit": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0OTMyNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400349324", "bodyText": "This big try-catch is split  into two: one for default exclusion rule and the other for the argument.", "author": "suztomo", "createdAt": "2020-03-30T17:00:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3OTc4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MTUxMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400281512", "bodyText": "JAR files that are entry points for reachability analysis", "author": "elharo", "createdAt": "2020-03-30T15:25:16Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath JAR files to find linkage errors in\n+   * @param entryPoints JAR files to define entry point classes in reachability", "originalCommit": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NzQ2Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400347463", "bodyText": "Updated to JAR files to specify entry point classes in reachability. The reachability analysis is on classes, not JAR files. If you think of a better word than define or specify, let me know.", "author": "suztomo", "createdAt": "2020-03-30T16:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MTUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MjY5Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400282693", "bodyText": "this is called exclusion file elsewhere.", "author": "elharo", "createdAt": "2020-03-30T15:26:51Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -160,7 +161,15 @@ private static Options configureOptions() {\n             .desc(\"Show usage instructions\")\n             .build();\n     options.addOption(help);\n-    \n+\n+    Option exclusionFile =\n+        Option.builder(\"e\")\n+            .longOpt(\"exclude-filter-file\")", "originalCommit": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0Mzg1Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400343852", "bodyText": "Updated to `exclusion-file'", "author": "suztomo", "createdAt": "2020-03-30T16:52:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MjY5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzQ1OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400283459", "bodyText": "Command", "author": "elharo", "createdAt": "2020-03-30T15:27:49Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArgumentsTest.java", "diffHunk": "@@ -158,4 +159,19 @@ public void testReadCommandLine_reportOnlyReachableOn() throws ParseException {\n \n     Truth.assertThat(parsedArguments.getReportOnlyReachable()).isTrue();\n   }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile() throws ParseException {", "originalCommit": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0Mjk5OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400342998", "bodyText": "Fixed", "author": "suztomo", "createdAt": "2020-03-30T16:51:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzQ1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzU4NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400283585", "bodyText": "Command", "author": "elharo", "createdAt": "2020-03-30T15:27:59Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArgumentsTest.java", "diffHunk": "@@ -158,4 +159,19 @@ public void testReadCommandLine_reportOnlyReachableOn() throws ParseException {\n \n     Truth.assertThat(parsedArguments.getReportOnlyReachable()).isTrue();\n   }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile() throws ParseException {\n+    LinkageCheckerArguments parsedArguments =\n+        LinkageCheckerArguments.readCommandLine(\"-j\", \"dummy.jar\", \"-e\", \"foo/exclusion.xml\");\n+    Path exclusionFile = parsedArguments.getExclusionFile();\n+    Assert.assertEquals(Paths.get(\"foo/exclusion.xml\"), exclusionFile);\n+  }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile_unspecified() throws ParseException {", "originalCommit": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0MzA1Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400343057", "bodyText": "Fixed", "author": "suztomo", "createdAt": "2020-03-30T16:51:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzU4NQ=="}], "type": "inlineReview"}, {"oid": "ec8813daa541b8b15f3df5e0e25a4249906d0570", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ec8813daa541b8b15f3df5e0e25a4249906d0570", "message": "Applied review", "committedDate": "2020-03-30T17:10:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NTIwMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400355201", "bodyText": "Madd LinkageChecker.create(classPath) public; the dashboard does not use reachability analysis or exclusion files.", "author": "suztomo", "createdAt": "2020-03-30T17:10:13Z", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -190,7 +190,7 @@ private static Path generate(Bom bom) throws IOException, TemplateException, URI\n     List<ClassPathEntry> artifactJarsInBom = classpath.subList(0, managedDependencies.size());\n     ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(artifactJarsInBom);\n \n-    LinkageChecker linkageChecker = LinkageChecker.create(classpath, entryPoints);\n+    LinkageChecker linkageChecker = LinkageChecker.create(classpath, entryPoints, null);", "originalCommit": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "35c428cd661fef81ea2cc0486f09345212f62bb3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/35c428cd661fef81ea2cc0486f09345212f62bb3", "message": "Merge remote-tracking branch 'origin/master' into i1274", "committedDate": "2020-03-30T17:13:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5Njc1Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400396753", "bodyText": "for --> from", "author": "elharo", "createdAt": "2020-03-30T18:15:49Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExcludedErrors.java", "diffHunk": "@@ -19,13 +19,19 @@\n import com.google.common.collect.ImmutableList;\n import java.io.IOException;\n import java.net.URL;\n+import java.nio.file.Path;\n+import javax.annotation.Nullable;\n import org.iso_relax.verifier.VerifierConfigurationException;\n import org.xml.sax.SAXException;\n \n class ExcludedErrors {\n   private final ImmutableList<LinkageErrorMatcher> exclusionMatchers;\n \n-  static ExcludedErrors create() throws IOException {\n+  /**\n+   * Creates exclusion matchers for {@code exclusionFile} with default rules. If {@code", "originalCommit": "35c428cd661fef81ea2cc0486f09345212f62bb3", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7040d7b9217f3c26b7a138c052e299c7cd0ae51c", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7040d7b9217f3c26b7a138c052e299c7cd0ae51c", "message": "creates matchers 'from' file", "committedDate": "2020-03-30T18:27:31Z", "type": "commit"}]}