{"pr_number": 1403, "pr_title": "Linkage Checker to use class file names when checking existence of a class in ClassPathEntry", "pr_createdAt": "2020-05-13T21:50:35Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403", "timeline": [{"oid": "375ec7618004ee8c971cc15d393f3e713f257a0c", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/375ec7618004ee8c971cc15d393f3e713f257a0c", "message": "Added test", "committedDate": "2020-05-13T21:24:59Z", "type": "commit"}, {"oid": "9f6b0bc14f070deb535daa414446526347c30f9e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9f6b0bc14f070deb535daa414446526347c30f9e", "message": "Added integration test", "committedDate": "2020-05-13T21:47:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1MzIyNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r424753227", "bodyText": "This is the root cause of the problem. LinkageChecker was checking the existence of a class by class binary name (e.g., pzrep.ReportServlet), while the ClassPathEntry.getClassNames() returns a set of class file names (e.g., WEB-INF.classes.pzrep.ReportServlet).", "author": "suztomo", "createdAt": "2020-05-13T21:54:15Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -202,9 +209,12 @@ private LinkageChecker(\n         classToSymbols.getClassToFieldSymbols();\n     for (ClassFile classFile : classToFieldSymbols.keySet()) {\n       ImmutableSet<FieldSymbol> fieldSymbols = classToFieldSymbols.get(classFile);\n+      ImmutableSet<String> classFileNamesInSource =\n+          classFile.getClassPathEntry().getClassFileNames();\n       for (FieldSymbol fieldSymbol : fieldSymbols) {\n-        if (!classFile.getClassPathEntry().getClassNames()\n-            .contains(fieldSymbol.getClassBinaryName())) {\n+        String classBinaryName = fieldSymbol.getClassBinaryName();", "originalCommit": "9f6b0bc14f070deb535daa414446526347c30f9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NDY1OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r424754658", "bodyText": "This integration test case would fail with the latest enforcer rule 1.4.0:\nhttps://gist.github.com/suztomo/859543af569e53c7ba06fde6ec1f68ba", "author": "suztomo", "createdAt": "2020-05-13T21:57:41Z", "path": "enforcer-rules/src/it/war-project-private-modifier/src/main/java/com.google.example/Dummy.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.example;\n+\n+class Dummy {\n+  private int privateField = 0;\n+\n+  private int privateMethod() {", "originalCommit": "9f6b0bc14f070deb535daa414446526347c30f9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NDM5Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425094392", "bodyText": "\"Returns class file name\" --> Converts a binary name to a class file name.\nIt is not a location. It is a name.", "author": "elharo", "createdAt": "2020-05-14T12:23:22Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -334,6 +334,19 @@ ClassPathEntry findClassLocation(String className) {\n     return Iterables.getFirst(classFileNameToClassPathEntry.get(specialLocation), null);\n   }\n \n+  /**\n+   * Returns class file name which is a location of a class file within a JAR file. Usually it is", "originalCommit": "9f6b0bc14f070deb535daa414446526347c30f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2MzQ3Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425163472", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-05-14T14:05:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NDM5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NDk3Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425094972", "bodyText": "a framework-specific", "author": "elharo", "createdAt": "2020-05-14T12:24:27Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -334,6 +334,19 @@ ClassPathEntry findClassLocation(String className) {\n     return Iterables.getFirst(classFileNameToClassPathEntry.get(specialLocation), null);\n   }\n \n+  /**\n+   * Returns class file name which is a location of a class file within a JAR file. Usually it is\n+   * the same as {@code classBinaryName}, however it may be different if the JAR file has framework-", "originalCommit": "9f6b0bc14f070deb535daa414446526347c30f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2MTg5MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425161890", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-05-14T14:03:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NDk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NjI1Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425096252", "bodyText": "This logic belongs in ClassPathEntry and ClassFile, not here.", "author": "elharo", "createdAt": "2020-05-14T12:26:46Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -334,6 +334,19 @@ ClassPathEntry findClassLocation(String className) {\n     return Iterables.getFirst(classFileNameToClassPathEntry.get(specialLocation), null);\n   }\n \n+  /**\n+   * Returns class file name which is a location of a class file within a JAR file. Usually it is\n+   * the same as {@code classBinaryName}, however it may be different if the JAR file has framework-\n+   * specific prefix such as \"WEB-INF.classes\".\n+   */\n+  String getClassFileName(String classBinaryName) {", "originalCommit": "9f6b0bc14f070deb535daa414446526347c30f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2MTEyNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425161127", "bodyText": "ClassPathEntry cannot convert class binary names to class file names, because it does not read the content of .class files. On the other hand, ClassDumper (through classRepository) already reads the content of class files and thus can convert class binary names to class file names.", "author": "suztomo", "createdAt": "2020-05-14T14:02:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NjI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1NDEyNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425254124", "bodyText": "How is BCEL getting these names? Is it reading the individual .class files? Or does it know something we don't know about the format of JAR files?", "author": "elharo", "createdAt": "2020-05-14T16:05:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NjI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1ODE4MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425258180", "bodyText": "BCEL's JavaClass reads class name from class file's constant pool: https://github.com/apache/commons-bcel/blob/master/src/main/java/org/apache/bcel/classfile/JavaClass.java#L157", "author": "suztomo", "createdAt": "2020-05-14T16:11:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NjI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI4NTM5NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425285395", "bodyText": "It feels right that readClassFileNames be the place this happens, if necessary by reading the byte code, though perhaps there's a simpler way to do this. For instance we could strip off known prefixes.", "author": "elharo", "createdAt": "2020-05-14T16:49:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NjI1Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg2NTc3MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425865770", "bodyText": "As the classRepository maintains the mappings, we do not need to read the class files again in ClassPathEntry.", "author": "suztomo", "createdAt": "2020-05-15T15:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NjI1Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NzM4Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425097382", "bodyText": "I'm hesitant to expose implementation details in API doc", "author": "elharo", "createdAt": "2020-05-14T12:28:47Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathEntry.java", "diffHunk": "@@ -112,13 +113,18 @@ private void readClassFileNames() throws IOException {\n       this.classFileNames = classNames.build();\n     }\n   }\n-  \n+\n   /**\n-   * Returns the fully qualified names of the classes in this entry's jar file.\n-   * \n+   * Returns a list of class file names in {@link #jar} as in {@link JavaClass#getFileName()}. This\n+   * class file name is usually a fully qualified class name. However a class file name may have a\n+   * framework-specific prefix. Example: {@code BOOT-INF.classes.com.google.Foo}.\n+   *\n+   * <p>This function caches the result. Therefore the caller does not need to worry about the", "originalCommit": "9f6b0bc14f070deb535daa414446526347c30f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE2NDk5Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425164996", "bodyText": "Removed the mention about the caching.", "author": "suztomo", "createdAt": "2020-05-14T14:07:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5NzM4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5ODI2Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425098266", "bodyText": "Avoid moving data between classes. Instead ClassSymbol should be able to return the classFileName if that's what we need.", "author": "elharo", "createdAt": "2020-05-14T12:30:15Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -163,9 +166,10 @@ private LinkageChecker(\n             }\n           }\n         }\n-        if (!classFile.getClassPathEntry().getClassNames()\n-            .contains(classSymbol.getClassBinaryName())) {\n \n+        String classBinaryName = classSymbol.getClassBinaryName();", "originalCommit": "9f6b0bc14f070deb535daa414446526347c30f9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3MTg4Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425171882", "bodyText": "A ClassSymbol cannot know the class file name. A symbol is an abstract entity apart from concrete class files. For example, when a class file's constant pool references a class symbol of \"com.google.Foo\", it does not know the class symbol is materialized by a class file \"BOOT-INF/classes/com/google/Foo.class\", another class file \"WEB-INF/classes/com/google/Foo.class\", or just \"com/google/Foo.class\".", "author": "suztomo", "createdAt": "2020-05-14T14:16:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5ODI2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5ODg1MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425098851", "bodyText": "again, just methodSymbol.getClassFileName()", "author": "elharo", "createdAt": "2020-05-14T12:31:14Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -189,9 +193,12 @@ private LinkageChecker(\n         classToSymbols.getClassToMethodSymbols();\n     for (ClassFile classFile : classToMethodSymbols.keySet()) {\n       ImmutableSet<MethodSymbol> methodSymbols = classToMethodSymbols.get(classFile);\n+      ImmutableSet<String> classFileNamesInSource =\n+          classFile.getClassPathEntry().getClassFileNames();\n       for (MethodSymbol methodSymbol : methodSymbols) {\n-        if (!classFile.getClassPathEntry().getClassNames()\n-            .contains(methodSymbol.getClassBinaryName())) {\n+        String classBinaryName = methodSymbol.getClassBinaryName();", "originalCommit": "9f6b0bc14f070deb535daa414446526347c30f9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "771bbc36a0e9df81093743f293e63a7835db45e1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/771bbc36a0e9df81093743f293e63a7835db45e1", "message": "Merge remote-tracking branch 'origin/master' into i1401-2", "committedDate": "2020-05-14T14:00:39Z", "type": "commit"}, {"oid": "b517071b67d0dd84417ef4084f53dd266fbe22ce", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b517071b67d0dd84417ef4084f53dd266fbe22ce", "message": "getClassFileName", "committedDate": "2020-05-14T14:05:20Z", "type": "commit"}, {"oid": "b8a48a7df8aebb21a33aacf2f5a3dcb8e057674e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b8a48a7df8aebb21a33aacf2f5a3dcb8e057674e", "message": "Javadoc", "committedDate": "2020-05-14T14:48:12Z", "type": "commit"}, {"oid": "9f0e19ae35299a233f183ff61e40a205f151da10", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9f0e19ae35299a233f183ff61e40a205f151da10", "message": "javadoc", "committedDate": "2020-05-14T14:48:47Z", "type": "commit"}, {"oid": "32a08359c8479d9a0d8b074b577def230eb0a025", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/32a08359c8479d9a0d8b074b577def230eb0a025", "message": "Javadoc", "committedDate": "2020-05-14T14:50:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE5ODk0OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425198949", "bodyText": "The previous javadoc was incorrect. It is not fully qualified class names. It returns class file names in a JAR.", "author": "suztomo", "createdAt": "2020-05-14T14:52:07Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathEntry.java", "diffHunk": "@@ -112,13 +114,15 @@ private void readClassFileNames() throws IOException {\n       this.classFileNames = classNames.build();\n     }\n   }\n-  \n+\n   /**\n-   * Returns the fully qualified names of the classes in this entry's jar file.\n-   * ", "originalCommit": "32a08359c8479d9a0d8b074b577def230eb0a025", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5d20fd6a938b08a988fbbd32186845f8f3836eea", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5d20fd6a938b08a988fbbd32186845f8f3836eea", "message": "rename", "committedDate": "2020-05-15T14:11:50Z", "type": "commit"}, {"oid": "c4ecce81be114a342fedf5ddbe39a0450361807e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c4ecce81be114a342fedf5ddbe39a0450361807e", "message": "Merge remote-tracking branch 'origin/master' into i1401-2", "committedDate": "2020-05-15T14:23:49Z", "type": "commit"}, {"oid": "976cc32de4bd50d0091ea135ec2bd37f446c7cfe", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/976cc32de4bd50d0091ea135ec2bd37f446c7cfe", "message": "format", "committedDate": "2020-05-15T14:28:55Z", "type": "commit"}, {"oid": "fbf8bb7a315966a9819f26148456d74d4eb82c0b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/fbf8bb7a315966a9819f26148456d74d4eb82c0b", "message": "Format", "committedDate": "2020-05-15T14:38:17Z", "type": "commit"}, {"oid": "11d4a5da15854e9936e9821c8e726671e5e5b915", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/11d4a5da15854e9936e9821c8e726671e5e5b915", "message": "Javadoc", "committedDate": "2020-05-15T14:43:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1NjgzMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r425856830", "bodyText": "I was thinking to rename this variable to fileName or fileNameOfClass. But classFileName fits best.", "author": "suztomo", "createdAt": "2020-05-15T14:53:40Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -163,9 +165,10 @@ private LinkageChecker(\n             }\n           }\n         }\n-        if (!classFile.getClassPathEntry().getFileNames()\n-            .contains(classSymbol.getClassBinaryName())) {\n \n+        String classBinaryName = classSymbol.getClassBinaryName();\n+        String classFileName = classDumper.getFileName(classBinaryName);", "originalCommit": "11d4a5da15854e9936e9821c8e726671e5e5b915", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2MTA2Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r426661067", "bodyText": "a fully qualified class name --> fully qualified class names", "author": "elharo", "createdAt": "2020-05-18T14:19:07Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathEntry.java", "diffHunk": "@@ -92,11 +93,11 @@ public String toString() {\n   }\n \n   /**\n-   * Returns a list of class file names in {@link #jar} as in {@link JavaClass#getFileName()}. This\n-   * class file name is usually a fully qualified class name. However a class file name may have a\n-   * framework-specific prefix. Example: {@code BOOT-INF.classes.com.google.Foo}.\n+   * Populates {@link #fileNames} through the classes in {@link #jar}. These file names are usually\n+   * a fully qualified class name. However a class file name may have a framework-specific prefix.", "originalCommit": "11d4a5da15854e9936e9821c8e726671e5e5b915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY4ODczMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r426688733", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-05-18T14:57:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2MTA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2NDA2MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r426664060", "bodyText": "Not new in this PR, but I notice this is another case where the OO API is turned inside out. This should be classFile.getClassSymbols.", "author": "elharo", "createdAt": "2020-05-18T14:23:22Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -150,6 +150,8 @@ private LinkageChecker(\n     \n     for (ClassFile classFile : classToClassSymbols.keySet()) {\n       ImmutableSet<ClassSymbol> classSymbols = classToClassSymbols.get(classFile);", "originalCommit": "11d4a5da15854e9936e9821c8e726671e5e5b915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY5NjM1Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r426696352", "bodyText": "The mismatch from OO API might came from my mental design of Linkage Checker:\n\nGet class path (JAR files) from input artifact\nGet symbol references in class files (such as this classToClassSymbols) from the class path\nGet linkage errors by validating the symbol references\n\nI was feeling that this fits declarative/functional-programming style, not object-oriented:\nlinkageCheck = \n  artifact <- input\n  classPath <- resolve(artifact)\n  symbolReferences <- read(classPath)\n  linkageErrors <- validate(symbolReferences)\n  return linkageErrors\n\nWith that, I think I wanted to keep the clear separation of the value classes (e.g., ClassFile) from implementing IO operations. LinkageChecker and ClassDumper are responsible for the IO operations and logic to generate the value classes.\n(This is not saying I'm against the object-oriented API, but sharing my finding.)", "author": "suztomo", "createdAt": "2020-05-18T15:08:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2NDA2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0NTkwMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r426745901", "bodyText": "Writing functional code in a non-functional language such as Java is a recipe for confusion. Case in point: I am constantly confused while reading our code. I usually have to review several classes to remind myself what the code does and how in each PR.\nSeparating I/O makes sense, but we shouldn't be storing the results of those I/O operations outside of the relevant classes.", "author": "elharo", "createdAt": "2020-05-18T16:20:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2NDA2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2NDc2Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r426664767", "bodyText": "why \"InSource\"? Would just classFileNames work?", "author": "elharo", "createdAt": "2020-05-18T14:24:25Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -150,6 +150,8 @@ private LinkageChecker(\n     \n     for (ClassFile classFile : classToClassSymbols.keySet()) {\n       ImmutableSet<ClassSymbol> classSymbols = classToClassSymbols.get(classFile);\n+      ImmutableSet<String> classFileNamesInSource = classFile.getClassPathEntry().getFileNames();", "originalCommit": "11d4a5da15854e9936e9821c8e726671e5e5b915", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcwMDE4Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r426700186", "bodyText": "classFileNames works. Updated.", "author": "suztomo", "createdAt": "2020-05-18T15:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY2NDc2Nw=="}], "type": "inlineReview"}, {"oid": "fa8f11eeb15c1e496963f241f788c84d80e0321e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/fa8f11eeb15c1e496963f241f788c84d80e0321e", "message": "Applied review", "committedDate": "2020-05-18T15:23:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjcxMjI5Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1403#discussion_r426712293", "bodyText": "just \"className\" might be enough here.", "author": "elharo", "createdAt": "2020-05-18T15:30:42Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -326,6 +326,14 @@ ClassPathEntry findClassLocation(String className) {\n     return Iterables.getFirst(fileNameToClassPathEntry.get(filename), null);\n   }\n \n+  /**\n+   * Converts a binary name to the file name of a class. Read {@link FixedSizeClassPathRepository}\n+   * for the difference.\n+   */\n+  String getFileName(String classBinaryName) {", "originalCommit": "fa8f11eeb15c1e496963f241f788c84d80e0321e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "584c208b87aa09de432472071af1710bdad05086", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/584c208b87aa09de432472071af1710bdad05086", "message": "classBinaryName -> className", "committedDate": "2020-05-18T15:32:53Z", "type": "commit"}, {"oid": "0a8042243a87a41b5d7325258b22a1d187e19d26", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0a8042243a87a41b5d7325258b22a1d187e19d26", "message": "Merge remote-tracking branch 'origin/master' into i1401-2", "committedDate": "2020-05-18T15:56:44Z", "type": "commit"}]}