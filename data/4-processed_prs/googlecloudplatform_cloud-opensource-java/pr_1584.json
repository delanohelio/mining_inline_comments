{"pr_number": 1584, "pr_title": "link to requireUpperBoundDeps", "pr_createdAt": "2020-08-11T15:04:04Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1584", "timeline": [{"oid": "2a7000f29da7cc4f5207e39e3dda4a3e4638b829", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/2a7000f29da7cc4f5207e39e3dda4a3e4638b829", "message": "link to requireUpperBoundDeps", "committedDate": "2020-08-11T15:03:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODc3NjI1Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1584#discussion_r468776252", "bodyText": "Nice. Making this as a bullet point highlights the two cases of \"with BOM\" and \"without BOM\".", "author": "suztomo", "createdAt": "2020-08-11T18:21:14Z", "path": "docs/JLBP-0016.md", "diffHunk": "@@ -11,58 +11,56 @@ Upper version alignment ensures that upgrading packages to compatible higher ver\n \n ## Achieving upper version alignment\n \n-Upper version alignment increases the likelihood that consumers' build systems\n+Upper version alignment increases the likelihood that build systems\n select the right versions of direct and transitive dependencies, reducing the\n number of conflicts.\n \n See the details specific to each build system in the following sections.\n \n ## Maven\n \n-Use `requireUpperBoundDeps` enforcement to ensure that you are using the\n+Use the [`requireUpperBoundDeps` Maven enforcer\n+rule](https://maven.apache.org/enforcer/enforcer-rules/requireUpperBoundDeps.html)\n+to ensure that you are using the\n highest version of each dependency in your dependency tree.\n \n+For any transitive dependency that fails the `requireUpperBoundDeps` check, add\n+the dependency as a direct dependency so that the path to the correct version\n+is shorter, leading Maven to select it instead of the wrong version.\n+\n To ensure that dependencies between modules in the project are consistent,\n-the parent POM should import the library's own BOM into its\n-`<dependencyManagement>` section.\n+the project [should publish a BOM](JLBP-0015.md) and\n+the parent POM should import this BOM in its `<dependencyManagement>` section.\n+Each module's POM should inherit from the parent POM of the library.\n+\n \n   - [Example import in google-cloud-java](https://github.com/GoogleCloudPlatform/google-cloud-java/blob/36409f5b1df89609eaef92d09cebea97931339bd/google-cloud-clients/pom.xml#L174).\n \n-To ensure that usage of dependencies is consistent, for any direct\n-dependencies that have a BOM of their own, import those BOMs in a\n-`<dependencyManagement>` section.\n+To ensure consistency of dependencies from outside the project:\n \n-  - If multiple imported BOMs manage the same dependency, use the\n+  - If the dependency publishes a BOM, import that BOM in the `<dependencyManagement>` section.\n+  \n+    If multiple imported BOMs manage the same dependency, use the\n     `<dependencyManagement>` of the parent POM to select a compatible version,\n     typically the highest.\n-  - Order doesn't matter for the override, because all explicit version\n+    Order doesn't matter for the override, because all explicit version\n     declarations in `<dependencyManagement>` take precedence over all BOM\n-    imports. (Order between BOMs matters - the earliest import of a dependency\n-    takes precedence over later imports of the same dependency.)\n+    imports. Order between BOMs does matter. The first import of a dependency\n+    takes precedence over later imports of the same dependency.\n \n-For direct dependencies that don't have a BOM (for example, Joda-Time), make\n-sure only one pom.xml defines the version, so that the library doesn't\n-accidentally depend on different versions in different modules.\n+  - If a dependency does not have have a BOM (for example, Joda-Time), make", "originalCommit": "2a7000f29da7cc4f5207e39e3dda4a3e4638b829", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}