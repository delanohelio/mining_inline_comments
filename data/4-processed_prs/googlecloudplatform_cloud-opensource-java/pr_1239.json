{"pr_number": 1239, "pr_title": "LevelOrder not to call resolveCompileDependencies", "pr_createdAt": "2020-02-20T21:51:25Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239", "timeline": [{"oid": "ac1d3510a9128444adbd4570a6f5b597c148255f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ac1d3510a9128444adbd4570a6f5b597c148255f", "message": "CycleBreakingGraphTransformer", "committedDate": "2020-02-18T18:19:02Z", "type": "commit"}, {"oid": "51b56f138abf1ea650069461755a721598390bc8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/51b56f138abf1ea650069461755a721598390bc8", "message": "Merge remote-tracking branch 'origin/master' into resolveCompileDependencies", "committedDate": "2020-02-20T21:10:26Z", "type": "commit"}, {"oid": "a0a508dbc5919fabe6e05390f949c3934312ea22", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a0a508dbc5919fabe6e05390f949c3934312ea22", "message": "fixed dashboard test", "committedDate": "2020-02-20T21:49:32Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3OTU1OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382279558", "bodyText": "Before this fix the artifact report for grpc-google-common-protos was showing Upper Bound Fixes for jsr305 version 3.0.1. But that version should not appear in the tree because grpc-core declares exclusions.\nTree: https://screenshot.googleplex.com/g8cQ3BXq36O.png", "author": "suztomo", "createdAt": "2020-02-20T21:55:21Z", "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardTest.java", "diffHunk": "@@ -332,10 +332,13 @@ public void testComponent_success() throws IOException, ParsingException {\n   public void testComponent_failure() throws IOException, ParsingException {\n     Document document = parseOutputFile(\n         \"com.google.api.grpc_grpc-google-common-protos_1.14.0.html\");\n+\n+    // com.google.api.grpc:grpc-google-common-protos:1.14.0 selects the highest version of all dependencies.\n     Nodes greens = document.query(\"//h3[@style='color: green']\");\n-    Assert.assertEquals(0, greens.size());\n+    Assert.assertEquals(1, greens.size());", "originalCommit": "a0a508dbc5919fabe6e05390f949c3934312ea22", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5MDU4Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r384090583", "bodyText": "The comment above was correct but grpc-google-common-protos:1.14.0's dependency tree still has old protobuf-java dependency. So the section should be red.", "author": "suztomo", "createdAt": "2020-02-25T19:53:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3OTU1OA=="}], "type": "inlineReview"}, {"oid": "48366c22eace4310fd99682cd8672bb180899c41", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/48366c22eace4310fd99682cd8672bb180899c41", "message": "Javadoc", "committedDate": "2020-02-20T22:35:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MDE5MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382280191", "bodyText": "This is the main purpose of this fix. The levelOrder does not need to call resolveCompileTimeDependencies.\nThis implementation was not preserving exclusions element.", "author": "suztomo", "createdAt": "2020-02-20T21:56:45Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -358,29 +351,6 @@ private DependencyGraphResult levelOrder(\n         path.add(dependencyNode.getDependency());\n         parentNodes.push(dependencyNode);\n         graph.addPath(path);\n-\n-        if (resolveFullDependency && !\"system\".equals(dependencyNode.getDependency().getScope())) {\n-          try {\n-            dependencyNode =\n-                resolveCompileTimeDependencies(\n-                    ImmutableList.of(dependencyNode), resolveFullDependency);\n-          } catch (DependencyResolutionException resolutionException) {\n-            // A dependency may be unavailable. For example, com.google.guava:guava-gwt:jar:20.0\n-            // has a transitive dependency to org.eclipse.jdt.core.compiler:ecj:jar:4.4RC4 (not\n-            // found in Maven central)\n-            for (ArtifactResult artifactResult :\n-                resolutionException.getResult().getArtifactResults()) {\n-              if (artifactResult.getArtifact() == null) {\n-                DependencyNode failedDependencyNode =\n-                    artifactResult.getRequest().getDependencyNode();\n-                \n-                List<DependencyNode> fullPath = makeFullPath(parentNodes, failedDependencyNode);\n-                \n-                artifactProblems.add(new UnresolvableArtifactProblem(fullPath));\n-              }\n-            }\n-          }\n-        }", "originalCommit": "a0a508dbc5919fabe6e05390f949c3934312ea22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MDkwOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382280909", "bodyText": "Before this PR, this test would fail because levelOrder was not respecting exclusion elements.", "author": "suztomo", "createdAt": "2020-02-20T21:58:16Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "diffHunk": "@@ -250,4 +250,36 @@ public void testBuildLinkageCheckDependencyGraph_catchRootException() throws Rep\n             \"xml-apis:xml-apis:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2\"\n                 + \" (compile) > xml-apis:xml-apis:jar:2.6.2 (compile?)\");\n   }\n+\n+  @Test\n+  public void testAlts_exclusionElements() throws RepositoryException {", "originalCommit": "a0a508dbc5919fabe6e05390f949c3934312ea22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MTUyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382281529", "bodyText": "The nodes in the tree changed because now exclusion elements take effect entire subtree.", "author": "suztomo", "createdAt": "2020-02-20T21:59:40Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphIntegrationTest.java", "diffHunk": "@@ -74,8 +74,6 @@ public void testFindUpdates() throws RepositoryException {\n                 + \"upgrade com.google.protobuf:protobuf-java:3.5.1 to 3.6.0\",\n             \"com.google.api.grpc:proto-google-iam-v1:0.12.0 needs to \"\n                 + \"upgrade com.google.protobuf:protobuf-java:3.5.1 to 3.6.0\",\n-            \"com.google.guava:guava-jdk5:17.0 needs to \"\n-                + \"upgrade com.google.code.findbugs:jsr305:1.3.9 to 3.0.2\",", "originalCommit": "a0a508dbc5919fabe6e05390f949c3934312ea22", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "844032beb979db4fab09fb690b9e8be65a3f6c6c", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/844032beb979db4fab09fb690b9e8be65a3f6c6c", "message": "Added test", "committedDate": "2020-02-21T16:42:55Z", "type": "commit"}, {"oid": "c0ad980e85bd36cc49f470c46a759eda527d8050", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c0ad980e85bd36cc49f470c46a759eda527d8050", "message": "Merge remote-tracking branch 'origin/master' into resolveCompileDependencies", "committedDate": "2020-02-21T16:50:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MjAzNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382692037", "bodyText": "No need to wrap DependencyGraph with DependencyGraphResult. Because this function does not encounter UnresolvedArtifactProblem any more.", "author": "suztomo", "createdAt": "2020-02-21T16:52:21Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -316,15 +313,11 @@ public static UnresolvableArtifactProblem createUnresolvableArtifactProblem(\n    * just follows the given dependency tree starting with firstNode.\n    *\n    * @param firstNode node to start traversal\n-   * @param graphTraversalOption option to recursively resolve the dependency to build complete\n-   *     dependency tree, with or without dependencies of provided scope\n    */\n-  private DependencyGraphResult levelOrder(\n-      DependencyNode firstNode, GraphTraversalOption graphTraversalOption) {\n+  private DependencyGraph levelOrder(DependencyNode firstNode) {", "originalCommit": "c0ad980e85bd36cc49f470c46a759eda527d8050", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MjgzMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382692830", "bodyText": "Without this class, this test would throw StackOverflowError.", "author": "suztomo", "createdAt": "2020-02-21T16:53:53Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/CycleBreakerGraphTransformerTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.CollectRequest;\n+import org.eclipse.aether.graph.Dependency;\n+import org.eclipse.aether.resolution.DependencyRequest;\n+import org.eclipse.aether.resolution.DependencyResolutionException;\n+import org.eclipse.aether.util.graph.selector.ScopeDependencySelector;\n+import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;\n+import org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner;\n+import org.junit.Test;\n+\n+public class CycleBreakerGraphTransformerTest {\n+\n+  @Test\n+  public void testCycleBreaking() throws DependencyResolutionException {\n+    RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+    DefaultRepositorySystemSession session =\n+        RepositoryUtility.createDefaultRepositorySystemSession(system);\n+\n+    // This dependencySelector selects everything except test scope. This creates a dependency tree\n+    // with a cycle of dom4j:dom4j:jar:1.6.1 (optional) and jaxen:jaxen:jar:1.1-beta-6 (optional).\n+    session.setDependencySelector(new ScopeDependencySelector(\"test\"));\n+\n+    session.setDependencyGraphTransformer(\n+        new ChainedDependencyGraphTransformer(\n+            new CycleBreakerGraphTransformer(), // This prevents StackOverflowError", "originalCommit": "c0ad980e85bd36cc49f470c46a759eda527d8050", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b2bca2da44558c206986852490ce1913945e33d6", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b2bca2da44558c206986852490ce1913945e33d6", "message": "Explicitly specifying repository", "committedDate": "2020-02-21T16:58:02Z", "type": "commit"}, {"oid": "39ed66436a98cd40bed2130c9866180b9a07c1de", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/39ed66436a98cd40bed2130c9866180b9a07c1de", "message": "Merge remote-tracking branch 'origin/master' into resolveCompileDependencies", "committedDate": "2020-02-21T18:39:12Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1ODI5NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382758295", "bodyText": "There's only one parent. Perhaps this is ancestors? e.g. like in XPath", "author": "elharo", "createdAt": "2020-02-21T19:15:03Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> parents) {", "originalCommit": "b2bca2da44558c206986852490ce1913945e33d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NTg5NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382765894", "bodyText": "Nice. Updated to ancestor.", "author": "suztomo", "createdAt": "2020-02-21T19:31:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1ODI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1ODg3MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382758870", "bodyText": "Is node the child to remove? If so, rename to child.\nAlso it could be a tad clearer if the argument order match the method name. That is,\nremoveChildFromParent( DependencyNode child, DependencyNode parent)", "author": "elharo", "createdAt": "2020-02-21T19:16:15Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> parents) {\n+    Artifact artifact = node.getArtifact();\n+    if (parents.contains(artifact)) {\n+      // parent is not null when parents is not empty\n+      removeChildFromParent(parent, node);\n+      return;\n+    }\n+\n+    parents.add(artifact);\n+    for (DependencyNode child : node.getChildren()) {\n+      removeCycle(node, child, parents);\n+    }\n+    parents.remove(artifact);\n+  }\n+\n+  private void removeChildFromParent(DependencyNode parent, DependencyNode node) {", "originalCommit": "b2bca2da44558c206986852490ce1913945e33d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NzMyOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382767328", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-02-21T19:34:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1ODg3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1OTE1Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382759156", "bodyText": "I think this method can be static", "author": "elharo", "createdAt": "2020-02-21T19:16:57Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> parents) {\n+    Artifact artifact = node.getArtifact();\n+    if (parents.contains(artifact)) {\n+      // parent is not null when parents is not empty\n+      removeChildFromParent(parent, node);\n+      return;\n+    }\n+\n+    parents.add(artifact);\n+    for (DependencyNode child : node.getChildren()) {\n+      removeCycle(node, child, parents);\n+    }\n+    parents.remove(artifact);\n+  }\n+\n+  private void removeChildFromParent(DependencyNode parent, DependencyNode node) {", "originalCommit": "b2bca2da44558c206986852490ce1913945e33d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NzQzNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382767436", "bodyText": "Updated to static.", "author": "suztomo", "createdAt": "2020-02-21T19:35:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc1OTE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2MDUyNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382760524", "bodyText": "Set feels wrong for parents, because these are ordered, even if we're not using the order here.", "author": "elharo", "createdAt": "2020-02-21T19:20:15Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> parents) {\n+    Artifact artifact = node.getArtifact();\n+    if (parents.contains(artifact)) {\n+      // parent is not null when parents is not empty\n+      removeChildFromParent(parent, node);\n+      return;\n+    }\n+\n+    parents.add(artifact);", "originalCommit": "b2bca2da44558c206986852490ce1913945e33d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NzExNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382767117", "bodyText": "Set is preferred here. Using a Set for ancestors gives O(1) lookup. At line 47:\nif (ancestors.contains(artifact)) {", "author": "suztomo", "createdAt": "2020-02-21T19:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2MDUyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2MDk0NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382760945", "bodyText": "static", "author": "elharo", "createdAt": "2020-02-21T19:21:07Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> parents) {", "originalCommit": "b2bca2da44558c206986852490ce1913945e33d6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2NTgxNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382765816", "bodyText": "Updated", "author": "suztomo", "createdAt": "2020-02-21T19:31:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc2MDk0NQ=="}], "type": "inlineReview"}, {"oid": "098b05b1dd748a52b6b050f2b8caae5d15660aee", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/098b05b1dd748a52b6b050f2b8caae5d15660aee", "message": "Merge remote-tracking branch 'origin/master' into resolveCompileDependencies", "committedDate": "2020-02-21T19:28:42Z", "type": "commit"}, {"oid": "b4f71cf0f00daca89b37e3cad64584fab071c5a1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b4f71cf0f00daca89b37e3cad64584fab071c5a1", "message": "Applied review", "committedDate": "2020-02-21T19:36:44Z", "type": "commit"}, {"oid": "643618d01abca073b5dadb7f42cb936c63769983", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/643618d01abca073b5dadb7f42cb936c63769983", "message": "Format", "committedDate": "2020-02-21T19:37:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzgwOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382817808", "bodyText": "How many elements are we talking about though? 10? Maybe 20 at the outside? Even if it were 1000 the difference is unlikely to be measurable.", "author": "elharo", "createdAt": "2020-02-21T21:38:25Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<>());\n+    return dependencyNode;\n+  }\n+\n+  private static void removeCycle(\n+      DependencyNode parent, DependencyNode node, Set<Artifact> ancestors) {\n+    Artifact artifact = node.getArtifact();\n+\n+    if (ancestors.contains(artifact)) { // Set (rather than List) gives O(1) lookup here\n+      // parent is not null when ancestors is not empty", "originalCommit": "643618d01abca073b5dadb7f42cb936c63769983", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMjM1MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382832350", "bodyText": "Sometimes around 1,000,000 nodes in a full dependency tree.\n#1145 (comment)", "author": "suztomo", "createdAt": "2020-02-21T22:16:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzgwOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgzMzEwMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1239#discussion_r382833102", "bodyText": "The tree height (ancestors.size) is not big, but this ancestors.contains is called that many times.\nI'll measure the speed difference when I have time; 20 equals calls may be faster than 1 hashCode plus equals call.", "author": "suztomo", "createdAt": "2020-02-21T22:18:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjgxNzgwOA=="}], "type": "inlineReview"}, {"oid": "e1577c3d7a28cacfb0a79907f6eadaaeb01ab17e", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e1577c3d7a28cacfb0a79907f6eadaaeb01ab17e", "message": "Merge branch 'master' into resolveCompileDependencies", "committedDate": "2020-02-21T22:16:33Z", "type": "commit"}, {"oid": "1c341ce268767b22b31ebda3d228cb184804ef5a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/1c341ce268767b22b31ebda3d228cb184804ef5a", "message": "Merge branch 'master' into resolveCompileDependencies", "committedDate": "2020-02-24T17:28:25Z", "type": "commit"}, {"oid": "1d685309118c32c15356fd577adb37308a74801f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/1d685309118c32c15356fd577adb37308a74801f", "message": "Merge branch 'master' into resolveCompileDependencies", "committedDate": "2020-02-24T18:47:30Z", "type": "commit"}]}