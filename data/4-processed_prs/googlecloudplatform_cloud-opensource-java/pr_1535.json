{"pr_number": 1535, "pr_title": "LinkageProblemCause that explains why there is an invalid reference", "pr_createdAt": "2020-07-15T02:16:43Z", "pr_url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535", "timeline": [{"oid": "734e262bc4511ee7a1df4236c5eacc0618c9e39d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/734e262bc4511ee7a1df4236c5eacc0618c9e39d", "message": "Test passsed", "committedDate": "2020-07-15T01:05:30Z", "type": "commit"}, {"oid": "94163352007e060e6009f0fd5a996c90a5c66ed5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/94163352007e060e6009f0fd5a996c90a5c66ed5", "message": "Added to LinkageCheckerMain", "committedDate": "2020-07-15T02:14:17Z", "type": "commit"}, {"oid": "e2149c080cc35bc6ab6c50d2f37f0001c72164a4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e2149c080cc35bc6ab6c50d2f37f0001c72164a4", "message": "Format", "committedDate": "2020-07-15T02:37:35Z", "type": "commit"}, {"oid": "a24e3ab750eccfeda11cdb24cb9c9aa6a1b4eff2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a24e3ab750eccfeda11cdb24cb9c9aa6a1b4eff2", "message": "Format even if cause is null", "committedDate": "2020-07-15T02:44:56Z", "type": "commit"}, {"oid": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "message": "Reverted provided dependency testAnnotate_parquetProvidedDependency", "committedDate": "2020-07-15T03:09:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NDc0NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r454994744", "bodyText": "why are we passing multimaps again?", "author": "elharo", "createdAt": "2020-07-15T11:54:33Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -58,9 +59,8 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n    *     included. If false, optional dependencies are not included.\n    */\n   public ClassPathResult resolve(List<Artifact> artifacts, boolean full) {\n-    LinkedListMultimap<ClassPathEntry, DependencyPath> multimap = LinkedListMultimap.create();\n     if (artifacts.isEmpty()) {\n-      return new ClassPathResult(multimap, ImmutableList.of());\n+      return new ClassPathResult(LinkedListMultimap.create(), ImmutableList.of());", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNjgwNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455036805", "bodyText": "ClassPathResult maintains the multimap from ClassPathEntry to DependencyPath. We didn't change that.", "author": "suztomo", "createdAt": "2020-07-15T13:08:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NDc0NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2MjQ4MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455062481", "bodyText": "I found this logic of handling empty input is redundant. When the list is empty, the subsequent operations return an empty ClassPathResult.", "author": "suztomo", "createdAt": "2020-07-15T13:44:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NDc0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTI3OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r454995278", "bodyText": "Is this variable used anywhere?", "author": "elharo", "createdAt": "2020-07-15T11:55:32Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -69,13 +69,30 @@ public ClassPathResult resolve(List<Artifact> artifacts, boolean full) {\n     } else {\n       result = dependencyGraphBuilder.buildVerboseDependencyGraph(artifacts);\n     }\n-    List<DependencyPath> dependencyPaths = result.list();\n+    return performMediation(result);\n+  }\n \n+  /**\n+   * Builds a class path from the dependency graph with {@code artifact} as the root, in the same\n+   * way as Maven would do when the artifact was built.\n+   *\n+   * <p>Compared to {@link #resolve(List, boolean)}, this method includes direct optional\n+   * dependencies of {@code artifact} but excludes its transitive optional dependencies.\n+   */\n+  ClassPathResult resolveWithMaven(Artifact artifact) {\n+    DependencyGraph result =\n+        dependencyGraphBuilder.buildMavenDependencyGraph(new Dependency(artifact, \"compile\"));\n+    return performMediation(result);\n+  }\n+\n+  private ClassPathResult performMediation(DependencyGraph result) {\n     // TODO should DependencyGraphResult have a mediate() method that returns a ClassPathResult?\n-    \n+\n     // To remove duplicates on (groupId:artifactId) for dependency mediation\n     MavenDependencyMediation mediation = new MavenDependencyMediation();\n \n+    LinkedListMultimap<ClassPathEntry, DependencyPath> multimap = LinkedListMultimap.create();", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNzE1OA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455037158", "bodyText": "It's used at 7 lines below.", "author": "suztomo", "createdAt": "2020-07-15T13:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTI3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTUxNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r454995517", "bodyText": "delete \"FromSource\"", "author": "elharo", "createdAt": "2020-07-15T11:55:57Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.util.Objects;\n+\n+/**\n+ * Diamond dependency conflict caused a {@link LinkageProblem} where the {@link LinkageProblem}'s\n+ * invalid reference points to the symbol in {@code pathToSelectedArtifact.getLeaf()} but a valid\n+ * symbol is in {@code pathToUnselectedArtifact.getLeaf()}.\n+ */\n+class DependencyConflict extends LinkageProblemCause {\n+  DependencyPath pathToUnselectedArtifact;\n+  DependencyPath pathToSelectedArtifact;\n+\n+  DependencyConflict(\n+      DependencyPath pathToSelectedArtifact, DependencyPath pathToUnselectedArtifactFromSource) {", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNzQ4Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455037483", "bodyText": "Deleted.", "author": "suztomo", "createdAt": "2020-07-15T13:09:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTUxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTg5Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r454995896", "bodyText": "in reading JAR files. --> reading JAR files", "author": "elharo", "createdAt": "2020-07-15T11:56:45Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import com.google.common.base.Verify;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem in reading JAR files.", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzODEyMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455038120", "bodyText": "Removed 'in'.", "author": "suztomo", "createdAt": "2020-07-15T13:10:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NTg5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjExOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r454996118", "bodyText": "Handle null appropriately if it can happen. Verify has all but one of the problems assertions have", "author": "elharo", "createdAt": "2020-07-15T11:57:08Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import com.google.common.base.Verify;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem in reading JAR files.\n+   */\n+  static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem> linkageProblems)\n+      throws IOException {\n+\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      ClassFile sourceClass = linkageProblem.getSourceClass();\n+      ClassPathEntry sourceEntry = sourceClass.getClassPathEntry();\n+\n+      Artifact sourceArtifact = sourceEntry.getArtifact();\n+      Verify.verify(sourceArtifact != null);", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzOTg3Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455039872", "bodyText": "Removed this. This was redundant as all ClassPathEntries from ClassPathResult have artifacts.", "author": "suztomo", "createdAt": "2020-07-15T13:12:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5NjExOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5ODY5MQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r454998691", "bodyText": "matches", "author": "elharo", "createdAt": "2020-07-15T12:02:09Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import com.google.common.base.Verify;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem in reading JAR files.\n+   */\n+  static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem> linkageProblems)\n+      throws IOException {\n+\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      ClassFile sourceClass = linkageProblem.getSourceClass();\n+      ClassPathEntry sourceEntry = sourceClass.getClassPathEntry();\n+\n+      Artifact sourceArtifact = sourceEntry.getArtifact();\n+      Verify.verify(sourceArtifact != null);\n+\n+      // Resolves the dependency graph with the source artifact at the root.\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);\n+\n+      ClassPathEntry entryInSubtree =\n+          findClassPathEntryForSymbol(subtreeResult, linkageProblem.getSymbol());\n+      if (entryInSubtree == null) {\n+        linkageProblem.setCause(new UnknownCause());\n+      } else {\n+        Artifact artifactInSubtree = entryInSubtree.getArtifact();\n+        DependencyPath pathToSourceEntry = rootResult.getDependencyPaths(sourceEntry).get(0);\n+        DependencyPath pathFromSourceEntryToUnselectedEntry =\n+            subtreeResult.getDependencyPaths(entryInSubtree).get(0);\n+        DependencyPath pathToUnselectedEntry =\n+            pathToSourceEntry.concat(pathFromSourceEntryToUnselectedEntry);\n+\n+        ClassPathEntry selectedEntry =\n+            findEntryByArtifactId(\n+                rootResult, artifactInSubtree.getGroupId(), artifactInSubtree.getArtifactId());\n+        if (selectedEntry != null) {\n+          Artifact selectedArtifact = selectedEntry.getArtifact();\n+          if (!selectedArtifact.getVersion().equals(artifactInSubtree.getVersion())) {\n+            // Different version of that artifact is selected in rootResult\n+            linkageProblem.setCause(\n+                new DependencyConflict(\n+                    rootResult.getDependencyPaths(selectedEntry).get(0), pathToUnselectedEntry));\n+          } else {\n+            // A linkage error was already there when sourceArtifact was built.\n+            linkageProblem.setCause(new UnknownCause());\n+          }\n+        } else {\n+          // No artifact that match groupId and artifactId in rootResult.", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MDMwMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455040302", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-07-15T13:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5ODY5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5OTYzMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r454999632", "bodyText": "This tempts me to suggest a singleton.", "author": "elharo", "createdAt": "2020-07-15T12:04:03Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/UnknownCause.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * Linkage Checker cannot determine the cause of the linkage error.\n+ *\n+ * <p>This occurs when the POM file that used in building a library and the published POM file are\n+ * different.\n+ */\n+public class UnknownCause extends LinkageProblemCause {\n+\n+  @Override\n+  public String toString() {\n+    return \"Unknown\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    return obj instanceof UnknownCause;", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1MTQ0NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455051445", "bodyText": "Made this as singleton.", "author": "suztomo", "createdAt": "2020-07-15T13:29:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5OTYzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk5OTcxNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r454999715", "bodyText": "nice class", "author": "elharo", "createdAt": "2020-07-15T12:04:15Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MissingDependency.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.util.Objects;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.graph.Dependency;\n+\n+/** An optional or provided-scope dependency is not supplied. */\n+class MissingDependency extends LinkageProblemCause {", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMDQxNQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455000415", "bodyText": "don't static import unfamiliar classes", "author": "elharo", "createdAt": "2020-07-15T12:05:38Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassDumperTest.java", "diffHunk": "@@ -16,8 +16,8 @@\n \n package com.google.cloud.tools.opensource.classpath;\n \n-import static com.google.cloud.tools.opensource.classpath.LinkageCheckerTest.resolvePaths;\n import static com.google.cloud.tools.opensource.classpath.TestHelper.classPathEntryOfResource;\n+import static com.google.cloud.tools.opensource.classpath.TestHelper.resolve;", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1MjY1Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455052656", "bodyText": "Moved to nonstatic import.", "author": "suztomo", "createdAt": "2020-07-15T13:30:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMDQxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwODk4Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455008987", "bodyText": "don't static import here", "author": "elharo", "createdAt": "2020-07-15T12:21:28Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -18,6 +18,7 @@\n \n import static com.google.cloud.tools.opensource.classpath.TestHelper.COORDINATES;\n import static com.google.cloud.tools.opensource.classpath.TestHelper.classPathEntryOfResource;\n+import static com.google.cloud.tools.opensource.classpath.TestHelper.resolve;", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1NDI2OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455054269", "bodyText": "Changed to nonstatic import", "author": "suztomo", "createdAt": "2020-07-15T13:33:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwODk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwOTE3Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455009173", "bodyText": "don't static import this", "author": "elharo", "createdAt": "2020-07-15T12:21:51Z", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotatorTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.cloud.tools.opensource.classpath.TestHelper.resolve;", "originalCommit": "89c89478911b56a384dbff2e926ce4dd0ed2e7b9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA1NDYxMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455054610", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-07-15T13:33:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwOTE3Mw=="}], "type": "inlineReview"}, {"oid": "5a52cd414d9edb47a333529f7b3354fc5cba2e4b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5a52cd414d9edb47a333529f7b3354fc5cba2e4b", "message": "Applied review", "committedDate": "2020-07-15T13:34:56Z", "type": "commit"}, {"oid": "3723748b09a4dedd8b9a0fb9a82e9f2e7687e8fe", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3723748b09a4dedd8b9a0fb9a82e9f2e7687e8fe", "message": "Applied review", "committedDate": "2020-07-15T13:44:14Z", "type": "commit"}, {"oid": "e5b8a4da28d1d74e3ba54ea899ca68a75d65d9d4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e5b8a4da28d1d74e3ba54ea899ca68a75d65d9d4", "message": "Empty input test case", "committedDate": "2020-07-15T13:56:33Z", "type": "commit"}, {"oid": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/375f4da57d319186d3e88514fcdd65d6eb7a4066", "message": "Not special-casing empty input", "committedDate": "2020-07-15T14:11:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExNTQ4NQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455115485", "bodyText": "performMediation --> mediate", "author": "elharo", "createdAt": "2020-07-15T14:53:56Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -48,34 +49,47 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n   }\n \n   /**\n-   * Builds a classpath from the transitive dependency graph of a list of artifacts.\n-   * When there are multiple versions of an artifact in\n-   * the dependency tree, the closest to the root in breadth-first order is picked up. This \"pick\n-   * closest\" strategy follows Maven's dependency mediation.\n+   * Builds a classpath from the transitive dependency graph from {@code artifacts}. When there are\n+   * multiple versions of an artifact in the dependency tree, the closest to the root in\n+   * breadth-first order is picked up. This \"pick closest\" strategy follows Maven's dependency\n+   * mediation.\n    *\n    * @param artifacts the first artifacts that appear in the classpath, in order\n-   * @param full if true all optional dependencies and their transitive dependencies are\n-   *     included. If false, optional dependencies are not included.\n+   * @param full if true all optional dependencies and their transitive dependencies are included.\n+   *     If false, optional dependencies are not included.\n    */\n   public ClassPathResult resolve(List<Artifact> artifacts, boolean full) {\n-    LinkedListMultimap<ClassPathEntry, DependencyPath> multimap = LinkedListMultimap.create();\n-    if (artifacts.isEmpty()) {\n-      return new ClassPathResult(multimap, ImmutableList.of());\n-    }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraph result;\n     if (full) {\n       result = dependencyGraphBuilder.buildFullDependencyGraph(artifacts);\n     } else {\n       result = dependencyGraphBuilder.buildVerboseDependencyGraph(artifacts);\n     }\n-    List<DependencyPath> dependencyPaths = result.list();\n+    return performMediation(result);\n+  }\n+\n+  /**\n+   * Builds a class path from the dependency graph with {@code artifact} as the root, in the same\n+   * way as Maven would do when the artifact was built.\n+   *\n+   * <p>Compared to {@link #resolve(List, boolean)}, this method includes direct optional\n+   * dependencies of {@code artifact} but excludes its transitive optional dependencies.\n+   */\n+  ClassPathResult resolveWithMaven(Artifact artifact) {\n+    DependencyGraph result =\n+        dependencyGraphBuilder.buildMavenDependencyGraph(new Dependency(artifact, \"compile\"));\n+    return performMediation(result);\n+  }\n \n+  private ClassPathResult performMediation(DependencyGraph result) {", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1NjEzMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455156132", "bodyText": "Done.", "author": "suztomo", "createdAt": "2020-07-15T15:52:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExNTQ4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExODA2Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455118066", "bodyText": "Not quite. The difference is that this method takes a root artifact and that method takes a list of artifacts from non-root dependencies.", "author": "elharo", "createdAt": "2020-07-15T14:56:00Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -48,34 +49,47 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n   }\n \n   /**\n-   * Builds a classpath from the transitive dependency graph of a list of artifacts.\n-   * When there are multiple versions of an artifact in\n-   * the dependency tree, the closest to the root in breadth-first order is picked up. This \"pick\n-   * closest\" strategy follows Maven's dependency mediation.\n+   * Builds a classpath from the transitive dependency graph from {@code artifacts}. When there are\n+   * multiple versions of an artifact in the dependency tree, the closest to the root in\n+   * breadth-first order is picked up. This \"pick closest\" strategy follows Maven's dependency\n+   * mediation.\n    *\n    * @param artifacts the first artifacts that appear in the classpath, in order\n-   * @param full if true all optional dependencies and their transitive dependencies are\n-   *     included. If false, optional dependencies are not included.\n+   * @param full if true all optional dependencies and their transitive dependencies are included.\n+   *     If false, optional dependencies are not included.\n    */\n   public ClassPathResult resolve(List<Artifact> artifacts, boolean full) {\n-    LinkedListMultimap<ClassPathEntry, DependencyPath> multimap = LinkedListMultimap.create();\n-    if (artifacts.isEmpty()) {\n-      return new ClassPathResult(multimap, ImmutableList.of());\n-    }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraph result;\n     if (full) {\n       result = dependencyGraphBuilder.buildFullDependencyGraph(artifacts);\n     } else {\n       result = dependencyGraphBuilder.buildVerboseDependencyGraph(artifacts);\n     }\n-    List<DependencyPath> dependencyPaths = result.list();\n+    return performMediation(result);\n+  }\n+\n+  /**\n+   * Builds a class path from the dependency graph with {@code artifact} as the root, in the same\n+   * way as Maven would do when the artifact was built.\n+   *\n+   * <p>Compared to {@link #resolve(List, boolean)}, this method includes direct optional", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1OTY1MA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455159650", "bodyText": "Updated the javadoc \"This method takes the root artifact of a dependency graph, while {@link #resolve(List, boolean)} takes a list of artifacts as the dependencies of a pseudo root artifact.\"\nDoes this read better?", "author": "suztomo", "createdAt": "2020-07-15T15:57:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExODA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExODY3Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455118673", "bodyText": "no period", "author": "elharo", "createdAt": "2020-07-15T14:56:42Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1OTkwOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455159908", "bodyText": "Removed.", "author": "suztomo", "createdAt": "2020-07-15T15:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExODY3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExODk0Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455118942", "bodyText": "no period", "author": "elharo", "createdAt": "2020-07-15T14:57:06Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem reading JAR files.", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE1OTk0Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455159943", "bodyText": "Removed.", "author": "suztomo", "createdAt": "2020-07-15T15:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTExODk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDQ0OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455120449", "bodyText": "I'm a little worried this might blow up in memory or CPU or both. Have you tested this with the Beam projects that cause us problems?", "author": "elharo", "createdAt": "2020-07-15T14:59:10Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem reading JAR files.\n+   */\n+  static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem> linkageProblems)\n+      throws IOException {\n+\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      ClassFile sourceClass = linkageProblem.getSourceClass();\n+      ClassPathEntry sourceEntry = sourceClass.getClassPathEntry();\n+\n+      Artifact sourceArtifact = sourceEntry.getArtifact();\n+\n+      // Resolves the dependency graph with the source artifact at the root.\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE4NTMyNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455185326", "bodyText": "I added a cache for class path resolution. Then I tried with org.apache.beam:beam-sdks-java-io-hcatalog:2.19.0 with a debug output (76c56bd#diff-237bbf9f02edc92dbe22580599219834R51). It took 30 seconds to annotate linkage problems.\nhttps://gist.github.com/suztomo/e40eb79989d20317eb61784a9c8de654", "author": "suztomo", "createdAt": "2020-07-15T16:40:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMDQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMTMyNw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455121327", "bodyText": "findEntryById since it's not just the artifact ID", "author": "elharo", "createdAt": "2020-07-15T15:00:29Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem reading JAR files.\n+   */\n+  static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem> linkageProblems)\n+      throws IOException {\n+\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      ClassFile sourceClass = linkageProblem.getSourceClass();\n+      ClassPathEntry sourceEntry = sourceClass.getClassPathEntry();\n+\n+      Artifact sourceArtifact = sourceEntry.getArtifact();\n+\n+      // Resolves the dependency graph with the source artifact at the root.\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);\n+\n+      ClassPathEntry entryInSubtree =\n+          findClassPathEntryForSymbol(subtreeResult, linkageProblem.getSymbol());\n+      if (entryInSubtree == null) {\n+        linkageProblem.setCause(UnknownCause.getInstance());\n+      } else {\n+        Artifact artifactInSubtree = entryInSubtree.getArtifact();\n+        DependencyPath pathToSourceEntry = rootResult.getDependencyPaths(sourceEntry).get(0);\n+        DependencyPath pathFromSourceEntryToUnselectedEntry =\n+            subtreeResult.getDependencyPaths(entryInSubtree).get(0);\n+        DependencyPath pathToUnselectedEntry =\n+            pathToSourceEntry.concat(pathFromSourceEntryToUnselectedEntry);\n+\n+        ClassPathEntry selectedEntry =\n+            findEntryByArtifactId(\n+                rootResult, artifactInSubtree.getGroupId(), artifactInSubtree.getArtifactId());\n+        if (selectedEntry != null) {\n+          Artifact selectedArtifact = selectedEntry.getArtifact();\n+          if (!selectedArtifact.getVersion().equals(artifactInSubtree.getVersion())) {\n+            // Different version of that artifact is selected in rootResult\n+            linkageProblem.setCause(\n+                new DependencyConflict(\n+                    rootResult.getDependencyPaths(selectedEntry).get(0), pathToUnselectedEntry));\n+          } else {\n+            // A linkage error was already there when sourceArtifact was built.\n+            linkageProblem.setCause(UnknownCause.getInstance());\n+          }\n+        } else {\n+          // No artifact that matches groupId and artifactId in rootResult.\n+          linkageProblem.setCause(new MissingDependency(pathToUnselectedEntry));\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Returns the class path entry in {@code classPathResult} for the artifact that matches {@code\n+   * groupId} and {@code artifactId}. {@code Null} if no matching artifact is found.\n+   */\n+  private static ClassPathEntry findEntryByArtifactId(", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MTc2OQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455161769", "bodyText": "Updated.", "author": "suztomo", "createdAt": "2020-07-15T16:01:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMTMyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMjIyNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455122226", "bodyText": "This works better as an instance method in ClassPathResult than a static method elsewhere.", "author": "elharo", "createdAt": "2020-07-15T15:01:47Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem reading JAR files.\n+   */\n+  static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem> linkageProblems)\n+      throws IOException {\n+\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      ClassFile sourceClass = linkageProblem.getSourceClass();\n+      ClassPathEntry sourceEntry = sourceClass.getClassPathEntry();\n+\n+      Artifact sourceArtifact = sourceEntry.getArtifact();\n+\n+      // Resolves the dependency graph with the source artifact at the root.\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);\n+\n+      ClassPathEntry entryInSubtree =\n+          findClassPathEntryForSymbol(subtreeResult, linkageProblem.getSymbol());\n+      if (entryInSubtree == null) {\n+        linkageProblem.setCause(UnknownCause.getInstance());\n+      } else {\n+        Artifact artifactInSubtree = entryInSubtree.getArtifact();\n+        DependencyPath pathToSourceEntry = rootResult.getDependencyPaths(sourceEntry).get(0);\n+        DependencyPath pathFromSourceEntryToUnselectedEntry =\n+            subtreeResult.getDependencyPaths(entryInSubtree).get(0);\n+        DependencyPath pathToUnselectedEntry =\n+            pathToSourceEntry.concat(pathFromSourceEntryToUnselectedEntry);\n+\n+        ClassPathEntry selectedEntry =\n+            findEntryByArtifactId(\n+                rootResult, artifactInSubtree.getGroupId(), artifactInSubtree.getArtifactId());\n+        if (selectedEntry != null) {\n+          Artifact selectedArtifact = selectedEntry.getArtifact();\n+          if (!selectedArtifact.getVersion().equals(artifactInSubtree.getVersion())) {\n+            // Different version of that artifact is selected in rootResult\n+            linkageProblem.setCause(\n+                new DependencyConflict(\n+                    rootResult.getDependencyPaths(selectedEntry).get(0), pathToUnselectedEntry));\n+          } else {\n+            // A linkage error was already there when sourceArtifact was built.\n+            linkageProblem.setCause(UnknownCause.getInstance());\n+          }\n+        } else {\n+          // No artifact that matches groupId and artifactId in rootResult.\n+          linkageProblem.setCause(new MissingDependency(pathToUnselectedEntry));\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Returns the class path entry in {@code classPathResult} for the artifact that matches {@code\n+   * groupId} and {@code artifactId}. {@code Null} if no matching artifact is found.\n+   */\n+  private static ClassPathEntry findEntryByArtifactId(", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MTg2Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455161862", "bodyText": "Nice idea. Moved to ClassPathResult.", "author": "suztomo", "createdAt": "2020-07-15T16:01:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMjIyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMjkwOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455122908", "bodyText": "This also feels like it fits naturally as an instance method in ClasspathResult", "author": "elharo", "createdAt": "2020-07-15T15:02:38Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem reading JAR files.\n+   */\n+  static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem> linkageProblems)\n+      throws IOException {\n+\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      ClassFile sourceClass = linkageProblem.getSourceClass();\n+      ClassPathEntry sourceEntry = sourceClass.getClassPathEntry();\n+\n+      Artifact sourceArtifact = sourceEntry.getArtifact();\n+\n+      // Resolves the dependency graph with the source artifact at the root.\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);\n+\n+      ClassPathEntry entryInSubtree =\n+          findClassPathEntryForSymbol(subtreeResult, linkageProblem.getSymbol());\n+      if (entryInSubtree == null) {\n+        linkageProblem.setCause(UnknownCause.getInstance());\n+      } else {\n+        Artifact artifactInSubtree = entryInSubtree.getArtifact();\n+        DependencyPath pathToSourceEntry = rootResult.getDependencyPaths(sourceEntry).get(0);\n+        DependencyPath pathFromSourceEntryToUnselectedEntry =\n+            subtreeResult.getDependencyPaths(entryInSubtree).get(0);\n+        DependencyPath pathToUnselectedEntry =\n+            pathToSourceEntry.concat(pathFromSourceEntryToUnselectedEntry);\n+\n+        ClassPathEntry selectedEntry =\n+            findEntryByArtifactId(\n+                rootResult, artifactInSubtree.getGroupId(), artifactInSubtree.getArtifactId());\n+        if (selectedEntry != null) {\n+          Artifact selectedArtifact = selectedEntry.getArtifact();\n+          if (!selectedArtifact.getVersion().equals(artifactInSubtree.getVersion())) {\n+            // Different version of that artifact is selected in rootResult\n+            linkageProblem.setCause(\n+                new DependencyConflict(\n+                    rootResult.getDependencyPaths(selectedEntry).get(0), pathToUnselectedEntry));\n+          } else {\n+            // A linkage error was already there when sourceArtifact was built.\n+            linkageProblem.setCause(UnknownCause.getInstance());\n+          }\n+        } else {\n+          // No artifact that matches groupId and artifactId in rootResult.\n+          linkageProblem.setCause(new MissingDependency(pathToUnselectedEntry));\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Returns the class path entry in {@code classPathResult} for the artifact that matches {@code\n+   * groupId} and {@code artifactId}. {@code Null} if no matching artifact is found.\n+   */\n+  private static ClassPathEntry findEntryByArtifactId(\n+      ClassPathResult classPathResult, String groupId, String artifactId) {\n+    for (ClassPathEntry entry : classPathResult.getClassPath()) {\n+      Artifact artifact = entry.getArtifact();\n+      if (artifact.getGroupId().equals(groupId) && artifact.getArtifactId().equals(artifactId)) {\n+        return entry;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the {@link ClassPathEntry} in {@code classPathResult} that contains the class of {@code\n+   * symbol}. {@code Null} if no matching entry is found.\n+   */\n+  private static ClassPathEntry findClassPathEntryForSymbol(", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MzI2Mg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455163262", "bodyText": "Yes, moved.", "author": "suztomo", "createdAt": "2020-07-15T16:03:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyMjkwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDEyMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455124122", "bodyText": "Another instance method for ClasspathResult. I suspect what you have here is three overloaded findEntry methods with different argument types.", "author": "elharo", "createdAt": "2020-07-15T15:04:23Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.io.IOException;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/** Annotates {@link LinkageProblem}s with {@link LinkageProblemCause}s. */\n+public class LinkageProblemCauseAnnotator {\n+\n+  /**\n+   * Annotates the cause field of {@link LinkageProblem}s with the {@link LinkageProblemCause}.\n+   *\n+   * @param rootResult the class path used for generating the linkage problems.\n+   * @param linkageProblems linkage problems to annotate\n+   * @throws IOException when there is a problem reading JAR files.\n+   */\n+  static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem> linkageProblems)\n+      throws IOException {\n+\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      ClassFile sourceClass = linkageProblem.getSourceClass();\n+      ClassPathEntry sourceEntry = sourceClass.getClassPathEntry();\n+\n+      Artifact sourceArtifact = sourceEntry.getArtifact();\n+\n+      // Resolves the dependency graph with the source artifact at the root.\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);\n+\n+      ClassPathEntry entryInSubtree =\n+          findClassPathEntryForSymbol(subtreeResult, linkageProblem.getSymbol());\n+      if (entryInSubtree == null) {\n+        linkageProblem.setCause(UnknownCause.getInstance());\n+      } else {\n+        Artifact artifactInSubtree = entryInSubtree.getArtifact();\n+        DependencyPath pathToSourceEntry = rootResult.getDependencyPaths(sourceEntry).get(0);\n+        DependencyPath pathFromSourceEntryToUnselectedEntry =\n+            subtreeResult.getDependencyPaths(entryInSubtree).get(0);\n+        DependencyPath pathToUnselectedEntry =\n+            pathToSourceEntry.concat(pathFromSourceEntryToUnselectedEntry);\n+\n+        ClassPathEntry selectedEntry =\n+            findEntryByArtifactId(\n+                rootResult, artifactInSubtree.getGroupId(), artifactInSubtree.getArtifactId());\n+        if (selectedEntry != null) {\n+          Artifact selectedArtifact = selectedEntry.getArtifact();\n+          if (!selectedArtifact.getVersion().equals(artifactInSubtree.getVersion())) {\n+            // Different version of that artifact is selected in rootResult\n+            linkageProblem.setCause(\n+                new DependencyConflict(\n+                    rootResult.getDependencyPaths(selectedEntry).get(0), pathToUnselectedEntry));\n+          } else {\n+            // A linkage error was already there when sourceArtifact was built.\n+            linkageProblem.setCause(UnknownCause.getInstance());\n+          }\n+        } else {\n+          // No artifact that matches groupId and artifactId in rootResult.\n+          linkageProblem.setCause(new MissingDependency(pathToUnselectedEntry));\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Returns the class path entry in {@code classPathResult} for the artifact that matches {@code\n+   * groupId} and {@code artifactId}. {@code Null} if no matching artifact is found.\n+   */\n+  private static ClassPathEntry findEntryByArtifactId(\n+      ClassPathResult classPathResult, String groupId, String artifactId) {\n+    for (ClassPathEntry entry : classPathResult.getClassPath()) {\n+      Artifact artifact = entry.getArtifact();\n+      if (artifact.getGroupId().equals(groupId) && artifact.getArtifactId().equals(artifactId)) {\n+        return entry;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the {@link ClassPathEntry} in {@code classPathResult} that contains the class of {@code\n+   * symbol}. {@code Null} if no matching entry is found.\n+   */\n+  private static ClassPathEntry findClassPathEntryForSymbol(\n+      ClassPathResult classPathResult, Symbol symbol) throws IOException {\n+    String className = symbol.getClassBinaryName();\n+    for (ClassPathEntry entry : classPathResult.getClassPath()) {\n+      if (entry.getFileNames().contains(className)) {\n+        return entry;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the dependency path of the first {@link ClassPathEntry} in {@code classPathResult} that\n+   * contains the class of {@code symbol}. Null if no such entry is found.\n+   */\n+  private static DependencyPath findDependencyPathForSymbol(", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2MzUyOQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455163529", "bodyText": "This method has been removed.", "author": "suztomo", "createdAt": "2020-07-15T16:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNDEyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNTA5Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455125093", "bodyText": "2020", "author": "elharo", "createdAt": "2020-07-15T15:05:49Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DirectProvidedDependencySelector.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2019 Google LLC.", "originalCommit": "375f4da57d319186d3e88514fcdd65d6eb7a4066", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE2NDM1Ng==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r455164356", "bodyText": "Fixed.", "author": "suztomo", "createdAt": "2020-07-15T16:05:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNTA5Mw=="}], "type": "inlineReview"}, {"oid": "76c56bd2e32cea5a716ef82a59b2d2c27dc8cafa", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/76c56bd2e32cea5a716ef82a59b2d2c27dc8cafa", "message": "Measuring performance", "committedDate": "2020-07-15T16:20:14Z", "type": "commit"}, {"oid": "c18512649a879a32ca45bfbfa46c19a155731715", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c18512649a879a32ca45bfbfa46c19a155731715", "message": "Cache at annotator", "committedDate": "2020-07-15T16:41:55Z", "type": "commit"}, {"oid": "76bb9d6e91f12d08b63841103a9dd93c39c1c44b", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/76bb9d6e91f12d08b63841103a9dd93c39c1c44b", "message": "reverting verbose tree", "committedDate": "2020-07-15T16:52:00Z", "type": "commit"}, {"oid": "5ae34b128aa4fc18bdf07ef1205b7837d25e4ea0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5ae34b128aa4fc18bdf07ef1205b7837d25e4ea0", "message": "Merge remote-tracking branch 'origin/master' into cause", "committedDate": "2020-07-15T19:39:44Z", "type": "commit"}, {"oid": "d9aaba8c13352932ffebb991270c8798ca74798f", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d9aaba8c13352932ffebb991270c8798ca74798f", "message": "Merge remote-tracking branch 'origin/master' into cause", "committedDate": "2020-07-17T18:05:07Z", "type": "commit"}, {"oid": "d21d2ecb1ec54358264f8b49fc5a8f0a41a30eb1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d21d2ecb1ec54358264f8b49fc5a8f0a41a30eb1", "message": "multiline dependency conflict toString", "committedDate": "2020-07-17T18:31:04Z", "type": "commit"}, {"oid": "223fa5321f65306ec25f6c4f24e6c7cc80b2bb02", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/223fa5321f65306ec25f6c4f24e6c7cc80b2bb02", "message": "format", "committedDate": "2020-07-17T18:31:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjYxMTg4Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r456611887", "bodyText": "Example output:\n(com.google.guava:guava:20.0) com.google.common.base.Verify's method verify(boolean arg1, String arg2, Object arg3) is not found;\n  referenced by 3 class files\n    io.grpc.internal.ServiceConfigInterceptor (io.grpc:grpc-core:1.17.1)\n    io.grpc.internal.JndiResourceResolverFactory (io.grpc:grpc-core:1.17.1)\n    io.grpc.internal.DnsNameResolver (io.grpc:grpc-core:1.17.1)\n  Cause:\n    Dependency conflict: com.google.guava:guava:20.0 was in the class path but version '26.0-android' has a valid symbol.\n      selected: com.google.api-client:google-api-client:1.27.0 (compile) / com.google.guava:guava:20.0 (compile)\n      unselected: io.grpc:grpc-core:1.17.1 (compile) / com.google.guava:guava:26.0-android (compile)\n\nNote that when there's an invalid reference between ArtifactX and ArtifactY, it's not always true that we should upgrade ArtifactY. Users may have to upgrade or downgrade Artifact X or Artifact Y.\nA DependencyConflict class does not know the symbol. It's LinkageProblem's field.", "author": "suztomo", "createdAt": "2020-07-17T18:39:02Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.cloud.tools.opensource.dependencies.Artifacts;\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.util.Objects;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * Diamond dependency conflict caused a {@link LinkageProblem} where the {@link LinkageProblem}'s\n+ * invalid reference points to the symbol in {@code pathToSelectedArtifact.getLeaf()} but a valid\n+ * symbol is in {@code pathToUnselectedArtifact.getLeaf()}.\n+ */\n+class DependencyConflict extends LinkageProblemCause {\n+  DependencyPath pathToUnselectedArtifact;\n+  DependencyPath pathToSelectedArtifact;\n+\n+  DependencyConflict(\n+      DependencyPath pathToSelectedArtifact, DependencyPath pathToUnselectedArtifact) {\n+    this.pathToUnselectedArtifact = checkNotNull(pathToUnselectedArtifact);\n+    this.pathToSelectedArtifact = checkNotNull(pathToSelectedArtifact);\n+  }\n+\n+  public DependencyPath getPathToUnselectedArtifact() {\n+    return pathToUnselectedArtifact;\n+  }\n+\n+  public DependencyPath getPathToSelectedArtifact() {\n+    return pathToSelectedArtifact;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    Artifact selected = pathToSelectedArtifact.getLeaf();\n+    Artifact unselected = pathToUnselectedArtifact.getLeaf();\n+\n+    return \"Dependency conflict: \"\n+        + Artifacts.toCoordinates(selected)\n+        + \" was in the class path \"\n+        + \"but version '\"\n+        + unselected.getVersion()\n+        + \"' has a valid symbol.\\n\"\n+        + \"  selected: \"\n+        + pathToSelectedArtifact\n+        + \"\\n  unselected: \"\n+        + pathToUnselectedArtifact;", "originalCommit": "223fa5321f65306ec25f6c4f24e6c7cc80b2bb02", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "31f6049a80cffc0fcc701db082da2e2b49cba364", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/31f6049a80cffc0fcc701db082da2e2b49cba364", "message": "Better toString with symbol", "committedDate": "2020-07-20T16:06:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMjgwMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r457532801", "bodyText": "arg1 means nothing. You can drop it.", "author": "elharo", "createdAt": "2020-07-20T16:17:46Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -50,13 +54,15 @@ public DependencyPath getPathToSelectedArtifact() {\n   public String toString() {\n     Artifact selected = pathToSelectedArtifact.getLeaf();\n     Artifact unselected = pathToUnselectedArtifact.getLeaf();\n-\n+    //    com.google:foo:1 (selected in the class path) does not have symbol 'java.lang.Object's\n+    // method equals(Object arg1)' but version '2' has it.", "originalCommit": "31f6049a80cffc0fcc701db082da2e2b49cba364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3MDEwOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r457570108", "bodyText": "Removed arg.", "author": "suztomo", "createdAt": "2020-07-20T17:20:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMjgwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMzcwOA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r457533708", "bodyText": "I'm not sure you need the word \"symbol\" here. I think this can be\ncom.google:foo:1 (selected in the class path) does not have the method 'java.lang.Object#equals(Object)' but version 2 has it.", "author": "elharo", "createdAt": "2020-07-20T16:19:12Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -50,13 +54,15 @@ public DependencyPath getPathToSelectedArtifact() {\n   public String toString() {\n     Artifact selected = pathToSelectedArtifact.getLeaf();\n     Artifact unselected = pathToUnselectedArtifact.getLeaf();\n-\n+    //    com.google:foo:1 (selected in the class path) does not have symbol 'java.lang.Object's", "originalCommit": "31f6049a80cffc0fcc701db082da2e2b49cba364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3MDEyMw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r457570123", "bodyText": "Removed \"the symbol\"", "author": "suztomo", "createdAt": "2020-07-20T17:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMzcwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMzkwNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r457533904", "bodyText": "no need to use quote marks here.", "author": "elharo", "createdAt": "2020-07-20T16:19:31Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -50,13 +54,15 @@ public DependencyPath getPathToSelectedArtifact() {\n   public String toString() {\n     Artifact selected = pathToSelectedArtifact.getLeaf();\n     Artifact unselected = pathToUnselectedArtifact.getLeaf();\n-\n+    //    com.google:foo:1 (selected in the class path) does not have symbol 'java.lang.Object's\n+    // method equals(Object arg1)' but version '2' has it.", "originalCommit": "31f6049a80cffc0fcc701db082da2e2b49cba364", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU3MDM5NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r457570394", "bodyText": "This version part is replaced with artifact coordinates without quotes, because now the two artifact coordinates are placed a bit far.", "author": "suztomo", "createdAt": "2020-07-20T17:20:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMzkwNA=="}], "type": "inlineReview"}, {"oid": "f33b20b16c9ae456ffeb76e40f332e4bdd094790", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f33b20b16c9ae456ffeb76e40f332e4bdd094790", "message": "Removed arg1, arg2 in tests", "committedDate": "2020-07-20T16:20:11Z", "type": "commit"}, {"oid": "568bc25407498d281f7e205f3010914d02f5b167", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/568bc25407498d281f7e205f3010914d02f5b167", "message": "Removed 'the symbol'", "committedDate": "2020-07-20T16:42:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzMTUyMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r457531521", "bodyText": "This change removes \"arg0, arg1, ...\" in the method arguments.", "author": "suztomo", "createdAt": "2020-07-20T16:15:45Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodSymbol.java", "diffHunk": "@@ -77,10 +79,15 @@ public int hashCode() {\n     return Objects.hash(this.getClassBinaryName(), name, descriptor, isInterfaceMethod);\n   }\n \n+  // This empty table removes the argument name in toString()\n+  private static LocalVariableTable emptyLocalVariableTable =\n+      new LocalVariableTable(0, 0, new LocalVariable[0], null);\n+\n   @Override\n   public String toString() {\n     // https://docs.oracle.com/javase/specs/jls/se8/html/jls-8.html#jls-8.4.2\n-    String signaturePlusReturnType = Utility.methodSignatureToString(descriptor, name, \"\");\n+    String signaturePlusReturnType =\n+        Utility.methodSignatureToString(descriptor, name, \"\", true, emptyLocalVariableTable);\n     String signature = signaturePlusReturnType.substring(signaturePlusReturnType.indexOf(' ') + 1);", "originalCommit": "31f6049a80cffc0fcc701db082da2e2b49cba364", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "50601b09dd8b1a602d59f77fc81d9c09f9a572e1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/50601b09dd8b1a602d59f77fc81d9c09f9a572e1", "message": "Simplifying the message", "committedDate": "2020-07-20T18:17:06Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDIzMQ==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r458280231", "bodyText": "How does this handle the case where there's more than one unselected artifact? I.e. when there's three or more versions in the tree?", "author": "elharo", "createdAt": "2020-07-21T17:48:56Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.cloud.tools.opensource.dependencies.Artifacts;\n+import com.google.cloud.tools.opensource.dependencies.DependencyPath;\n+import java.util.Objects;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * Diamond dependency conflict caused a {@link LinkageProblem} where the {@link LinkageProblem}'s\n+ * invalid reference points to the symbol in {@code pathToSelectedArtifact.getLeaf()} but a valid\n+ * symbol is in {@code pathToUnselectedArtifact.getLeaf()}.\n+ */\n+class DependencyConflict extends LinkageProblemCause {\n+  private Symbol symbol;\n+  private DependencyPath pathToUnselectedArtifact;\n+  private DependencyPath pathToSelectedArtifact;\n+\n+  DependencyConflict(\n+      Symbol symbol,\n+      DependencyPath pathToSelectedArtifact,\n+      DependencyPath pathToUnselectedArtifact) {\n+    this.symbol = checkNotNull(symbol);\n+    this.pathToUnselectedArtifact = checkNotNull(pathToUnselectedArtifact);\n+    this.pathToSelectedArtifact = checkNotNull(pathToSelectedArtifact);\n+  }\n+\n+  public DependencyPath getPathToUnselectedArtifact() {", "originalCommit": "50601b09dd8b1a602d59f77fc81d9c09f9a572e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxODQ5Nw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r458318497", "bodyText": "The first artifact is enough. This method tells which artifact was used when the problematic artifact (that has dependency conflicts) was built.", "author": "suztomo", "createdAt": "2020-07-21T18:54:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1NTAwMA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r458355000", "bodyText": "pathToTheArtifactThruSource.\npath to the artifact which was used when building the artifact that source class belongs to.", "author": "suztomo", "createdAt": "2020-07-21T20:03:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MTU5NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r458281594", "bodyText": "perhaps final", "author": "elharo", "createdAt": "2020-07-21T17:51:16Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/UnknownCause.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * Linkage Checker cannot determine the cause of the linkage error.\n+ *\n+ * <p>This occurs when the POM file that used in building a library and the published POM file are\n+ * different.\n+ */\n+public class UnknownCause extends LinkageProblemCause {", "originalCommit": "50601b09dd8b1a602d59f77fc81d9c09f9a572e1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMxODYxNA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r458318614", "bodyText": "Yes. Updated.", "author": "suztomo", "createdAt": "2020-07-21T18:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MTU5NA=="}], "type": "inlineReview"}, {"oid": "a0c017277201c12314b5afc48d70e2f7cf7075b3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a0c017277201c12314b5afc48d70e2f7cf7075b3", "message": "final", "committedDate": "2020-07-21T18:50:42Z", "type": "commit"}, {"oid": "cf4678ca72e9715a00277fe623cad5c3cf5959bd", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cf4678ca72e9715a00277fe623cad5c3cf5959bd", "message": "format", "committedDate": "2020-07-21T18:51:38Z", "type": "commit"}, {"oid": "69385cface6c64edce2ac85472daf2b7289073d3", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/69385cface6c64edce2ac85472daf2b7289073d3", "message": "pathToTheArtifactThruSource", "committedDate": "2020-07-21T20:25:50Z", "type": "commit"}, {"oid": "e9964c6a8beb4e12ff31e4a8405c92abfff77cb2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e9964c6a8beb4e12ff31e4a8405c92abfff77cb2", "message": "Merge remote-tracking branch 'origin/master' into cause", "committedDate": "2020-07-23T15:01:05Z", "type": "commit"}, {"oid": "fa022566eb8f6a09935434dc4a83f1d28a28c14a", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/fa022566eb8f6a09935434dc4a83f1d28a28c14a", "message": "Removing 'the'", "committedDate": "2020-07-23T15:15:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MTc2Mw==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r459541763", "bodyText": "except we don't handle version ranges :-(", "author": "elharo", "createdAt": "2020-07-23T15:35:33Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -48,34 +48,47 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n   }\n \n   /**\n-   * Builds a classpath from the transitive dependency graph of a list of artifacts.\n-   * When there are multiple versions of an artifact in\n-   * the dependency tree, the closest to the root in breadth-first order is picked up. This \"pick\n-   * closest\" strategy follows Maven's dependency mediation.\n+   * Builds a classpath from the transitive dependency graph from {@code artifacts}. When there are\n+   * multiple versions of an artifact in the dependency tree, the closest to the root in\n+   * breadth-first order is picked up. This \"pick closest\" strategy follows Maven's dependency\n+   * mediation.", "originalCommit": "fa022566eb8f6a09935434dc4a83f1d28a28c14a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1NTkwMg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r459555902", "bodyText": "True. Maven dependency tree is more complex than we model our tree in this repository.", "author": "suztomo", "createdAt": "2020-07-23T15:56:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MTc2Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MjQ2NA==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r459542464", "bodyText": "findEntryBySymbol to parallel findEntryById", "author": "elharo", "createdAt": "2020-07-23T15:36:38Z", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -111,5 +112,32 @@ public String formatDependencyPaths(Iterable<ClassPathEntry> entries) {\n     }\n     return builder.build();\n   }\n-  \n+\n+  /**\n+   * Returns the class path entry for the artifact that matches {@code groupId} and {@code\n+   * artifactId}. {@code Null} if no matching artifact is found.\n+   */\n+  ClassPathEntry findEntryById(String groupId, String artifactId) {\n+    for (ClassPathEntry entry : getClassPath()) {\n+      Artifact artifact = entry.getArtifact();\n+      if (artifact.getGroupId().equals(groupId) && artifact.getArtifactId().equals(artifactId)) {\n+        return entry;\n+      }\n+    }\n+    return null;\n+  }\n+\n+  /**\n+   * Returns the class path entry that contains the class of {@code symbol}. {@code Null} if no\n+   * matching entry is found.\n+   */\n+  ClassPathEntry findClassPathEntryForSymbol(Symbol symbol) throws IOException {", "originalCommit": "fa022566eb8f6a09935434dc4a83f1d28a28c14a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU1ODIwNg==", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1535#discussion_r459558206", "bodyText": "Updated. Yes. ClassPathEntry is clear in the return type.", "author": "suztomo", "createdAt": "2020-07-23T15:59:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MjQ2NA=="}], "type": "inlineReview"}, {"oid": "c54cc152b1ae77e724abad002c2f6d0bf79bae2d", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c54cc152b1ae77e724abad002c2f6d0bf79bae2d", "message": "findEntryBySymbol", "committedDate": "2020-07-23T15:58:03Z", "type": "commit"}]}