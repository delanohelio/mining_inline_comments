{"pr_number": 956, "pr_title": "RDM-8325 - Internal /searchCases API", "pr_createdAt": "2020-05-27T08:19:09Z", "pr_url": "https://github.com/hmcts/ccd-data-store-api/pull/956", "timeline": [{"oid": "d88a7069533e3aed2b0c53af5c0c9a453d29bd03", "url": "https://github.com/hmcts/ccd-data-store-api/commit/d88a7069533e3aed2b0c53af5c0c9a453d29bd03", "message": "RDM-8685 - Add consumes to controller", "committedDate": "2020-06-09T14:54:04Z", "type": "commit"}, {"oid": "5b6e07290eb42d73ac7ffc64b0468ea77debe351", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5b6e07290eb42d73ac7ffc64b0468ea77debe351", "message": "RDM-8598 - Integration tests for external ES search endpoint", "committedDate": "2020-06-12T10:31:08Z", "type": "commit"}, {"oid": "0d903cec2456867c09145d68c48ca5ea9372d1ba", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0d903cec2456867c09145d68c48ca5ea9372d1ba", "message": "Checkstyle", "committedDate": "2020-06-12T10:38:59Z", "type": "commit"}, {"oid": "884a998d9d149e08c14338b1b8e6df56dc887b77", "url": "https://github.com/hmcts/ccd-data-store-api/commit/884a998d9d149e08c14338b1b8e6df56dc887b77", "message": "RDM-8608 Suppress CVE-2020-13692", "committedDate": "2020-06-12T11:12:17Z", "type": "commit"}, {"oid": "b9a1161c158ce594be61f3aa607f12313b77b46b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b9a1161c158ce594be61f3aa607f12313b77b46b", "message": "Unused import", "committedDate": "2020-06-12T11:17:23Z", "type": "commit"}, {"oid": "7e8b82403f702daaa53b0670e601de6e70e51167", "url": "https://github.com/hmcts/ccd-data-store-api/commit/7e8b82403f702daaa53b0670e601de6e70e51167", "message": "RDM-8598 - Further integration tests", "committedDate": "2020-06-16T08:20:48Z", "type": "commit"}, {"oid": "a057d0a1f95e1cf02a7275d25e665a7f762b25b9", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a057d0a1f95e1cf02a7275d25e665a7f762b25b9", "message": "RDM-8598 - Cleanup and new test", "committedDate": "2020-06-16T12:14:39Z", "type": "commit"}, {"oid": "5d6542e45239051714bbd621ac866207e595fcd5", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5d6542e45239051714bbd621ac866207e595fcd5", "message": "Fix intermittent failing pipeline tests", "committedDate": "2020-06-16T12:20:19Z", "type": "commit"}, {"oid": "9ba7b0314333074f3d8e9adde5d260a59cd8cd01", "url": "https://github.com/hmcts/ccd-data-store-api/commit/9ba7b0314333074f3d8e9adde5d260a59cd8cd01", "message": "RDM-8460 - Implement date formatting for the internal ES API response (#967)\n\n* RDM-8460 - Support #DATETIMEDISPLAY formatting in internal ES search response\r\n\r\n* RDM-8460 - Add default created_date sort for internal ES\r\n\r\n* Use useCaseUppercase\r\n\r\nCo-authored-by: Dan Lysiak <daniel.lysiak@cgi.com>", "committedDate": "2020-06-17T10:18:39Z", "type": "commit"}, {"oid": "8c18a09addc78df4ba8d3008b18644992bbb25cd", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8c18a09addc78df4ba8d3008b18644992bbb25cd", "message": "Merge branch 'RDM-8325' into RDM-8598", "committedDate": "2020-06-17T10:27:36Z", "type": "commit"}, {"oid": "c47fe3219e1a0e383d8c03c18d3039c62f14382f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/c47fe3219e1a0e383d8c03c18d3039c62f14382f", "message": "Merge branch 'develop' into RDM-8325", "committedDate": "2020-06-17T11:07:13Z", "type": "commit"}, {"oid": "b534756e02f56eb596ad01526ba6dbaeca564359", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b534756e02f56eb596ad01526ba6dbaeca564359", "message": "Merge branch 'RDM-8325' into RDM-8598", "committedDate": "2020-06-17T11:08:38Z", "type": "commit"}, {"oid": "f6b1e5ac62f24a1a178056e3b2bce44bc89e618c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f6b1e5ac62f24a1a178056e3b2bce44bc89e618c", "message": "RDM-8598 - Address TODOs following merge", "committedDate": "2020-06-17T11:26:34Z", "type": "commit"}, {"oid": "ae5fd170a2e9e0afbc849962604e419c10c55a3f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ae5fd170a2e9e0afbc849962604e419c10c55a3f", "message": "Merge pull request #960 from hmcts/RDM-8598\n\nRDM-8598 - Integration tests for external search API", "committedDate": "2020-06-18T08:22:35Z", "type": "commit"}, {"oid": "d0e01c9a99a74017eaf24375f9cae09a2479692e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/d0e01c9a99a74017eaf24375f9cae09a2479692e", "message": "Make test data creation dates unique for consistent test results", "committedDate": "2020-06-18T08:50:14Z", "type": "commit"}, {"oid": "1777b9bb95a2936a8efa9dc74c10cc88b3b370e6", "url": "https://github.com/hmcts/ccd-data-store-api/commit/1777b9bb95a2936a8efa9dc74c10cc88b3b370e6", "message": "RDM-8598 - Additional integration test for granted case access", "committedDate": "2020-06-18T14:12:09Z", "type": "commit"}, {"oid": "cc02481ccd4d4069abf166a06549774f25ce88de", "url": "https://github.com/hmcts/ccd-data-store-api/commit/cc02481ccd4d4069abf166a06549774f25ce88de", "message": "RDM-8598 - Add greater coverage for security scenarios; refactor to simplify test methods", "committedDate": "2020-06-22T08:09:39Z", "type": "commit"}, {"oid": "08933b0f736d8205976b5b90c4f6bf2efa5a5a3b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/08933b0f736d8205976b5b90c4f6bf2efa5a5a3b", "message": "RDM-8598 - Test", "committedDate": "2020-06-22T08:10:04Z", "type": "commit"}, {"oid": "99ed0dec5bd7725ce54219f4647eadf5375aa601", "url": "https://github.com/hmcts/ccd-data-store-api/commit/99ed0dec5bd7725ce54219f4647eadf5375aa601", "message": "RDM-8699 - Return only requested fields when specified (#981)\n\n* RDM-8699 - Use requested fields when building response\r\n\r\n* RDM-8699 - Separate out SearchResultDefinition methods; tests\r\n\r\n* Checkstyle\r\n\r\n* RDM-8699 - Integration test\r\n\r\n* Review comments for Sonar\r\n\r\nCo-authored-by: Dan Lysiak <daniel.lysiak@cgi.com>", "committedDate": "2020-06-22T09:32:59Z", "type": "commit"}, {"oid": "fa2058fdb8e0abbcb4d8905275c7f9a07729c134", "url": "https://github.com/hmcts/ccd-data-store-api/commit/fa2058fdb8e0abbcb4d8905275c7f9a07729c134", "message": "Empty commit", "committedDate": "2020-06-29T15:31:49Z", "type": "commit"}, {"oid": "6dedaa368aa9d4597d711d2a25ff5fc7dc56edcd", "url": "https://github.com/hmcts/ccd-data-store-api/commit/6dedaa368aa9d4597d711d2a25ff5fc7dc56edcd", "message": "RDM-8782 Authorisation on fields (#990)\n\n* RDM-8782 Initial commit for filtering by authorisation\r\n\r\n* RDM-8782 updated logic and added test scenarios to be modified in the future\r\n\r\n* RDM-8782 added integration tests\r\n\r\n* RDM-8782 fixed unit tests and logic\r\n\r\n* RDM-8782 fixed checkstyle\r\n\r\n* RDM-8782 fixed checkstyle\r\n\r\n* RDM-8782 disabled two tests\r\n\r\n* RDM-8782 fixed test\r\n\r\n* RDM-8782 fixed tests\r\n\r\n* RDM-8782 fixed integration tests and refactored unit tests\r\n\r\n* RDM-8782 fixed checkstyle\r\n\r\n* RDM-8782 fixed checkstyle\r\n\r\n* RDM-8782 fixed remaining tests and updated logic\r\n\r\n* RDM-8782 fixed remaining tests and updated logic\r\n\r\n* RDM-8782 fixed sonar issue\r\n\r\n* RDM-8782 fixed issues on checking security classification and added role testing\r\n\r\n* RDM-8782 actioned review comments\r\n\r\n* RDM-8782 added assert on field size to ensure only meta data is returned\r\n\r\n* RDM-8782 fixed checkstyle\r\n\r\n* RDM-8782 removed unused class\r\n\r\n* RDM-8782 actioned review comments\r\n\r\n* RDM-8782 actioned review comments removed check on Read privilege as this is handled by external search endpoint\r\n\r\n* RDM-8782 removed parameter searchResultDefinition as it was un-needed\r\n\r\n* Update src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java\r\n\r\nCo-authored-by: Mario Paniccia <mario.paniccia@hmcts.net>\r\n\r\n* Update src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultDefinition.java\r\n\r\nCo-authored-by: Mario Paniccia <mario.paniccia@hmcts.net>\r\n\r\n* RDM-8782 fixed logic\r\n\r\nCo-authored-by: Mario Paniccia <mario.paniccia@hmcts.net>", "committedDate": "2020-07-01T14:20:08Z", "type": "commit"}, {"oid": "09c1175168d015f84418b9f69abc5202e2bdc3a4", "url": "https://github.com/hmcts/ccd-data-store-api/commit/09c1175168d015f84418b9f69abc5202e2bdc3a4", "message": "tests for internal search api (#986)\n\n* convert existing ES tests to befta\r\n\r\n* tidy up\r\n\r\n* Update build.gradle\r\n\r\n* fix checkstyle\r\n\r\n* tests for internal search api\r\n\r\n* update build.gradle\r\n\r\n* final updates\r\n\r\n* move external es api test to this pr, review comments addressed", "committedDate": "2020-07-01T16:54:09Z", "type": "commit"}, {"oid": "826567a62f236699316dec9fe5ba46adbddaa6a9", "url": "https://github.com/hmcts/ccd-data-store-api/commit/826567a62f236699316dec9fe5ba46adbddaa6a9", "message": "Merge branch 'develop' into RDM-8325", "committedDate": "2020-07-02T07:12:53Z", "type": "commit"}, {"oid": "a24147ce0efbe37069eac4b22ea59effb157e41c", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a24147ce0efbe37069eac4b22ea59effb157e41c", "message": "checkstyle fixes", "committedDate": "2020-07-02T07:25:40Z", "type": "commit"}, {"oid": "0b550e9bfc1140ba7b97bbac03f501a54b4f1982", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0b550e9bfc1140ba7b97bbac03f501a54b4f1982", "message": "checkstyle fixes", "committedDate": "2020-07-02T07:35:09Z", "type": "commit"}, {"oid": "15dc807369cbf89e7fca25f315e3028f8ba9fa8e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/15dc807369cbf89e7fca25f315e3028f8ba9fa8e", "message": "checkstyle fixes", "committedDate": "2020-07-02T07:35:46Z", "type": "commit"}, {"oid": "fbe0ea7d2e905aa28ac91cf662e24c2fee5b09a7", "url": "https://github.com/hmcts/ccd-data-store-api/commit/fbe0ea7d2e905aa28ac91cf662e24c2fee5b09a7", "message": "rename all test number ids", "committedDate": "2020-07-02T08:25:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NzYxMw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r456377613", "bodyText": "should be external\n@tomxelliott", "author": "MSancaktutar", "createdAt": "2020-07-17T11:11:31Z", "path": "src/aat/resources/features/F-108/F-108_Test_Data_Base.td.json", "diffHunk": "@@ -0,0 +1,22 @@\n+{\n+  \"_guid_\": \"F-108_Test_Data_Base\",\n+  \"title\": \"External Elastic Search Endpoint\",\n+  \"productName\": \"CCD Data Store Elastic Search API\",\n+  \"operationName\": \"internal search query\",", "originalCommit": "fbe0ea7d2e905aa28ac91cf662e24c2fee5b09a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3ODQ1OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r456378458", "bodyText": "And the response [contains only the first case created above]\n@tomxelliott", "author": "MSancaktutar", "createdAt": "2020-07-17T11:13:44Z", "path": "src/aat/resources/features/F-108/F-108.feature", "diffHunk": "@@ -0,0 +1,269 @@\n+@F-108 @elasticsearch\n+Feature: Elasticsearch external endpoint\n+\n+  Background: Load test data for the scenario\n+    Given an appropriate test context as detailed in the test data source\n+\n+  @S-900\n+  Scenario: should return the case for a role with same security classification as case type classification and read access on case type\n+    Given a case that has just been created as in [Private_Case_Creation_Autotest1_Data]\n+    And a wait time of 5 seconds [to allow for Logstash to index the case just created]\n+    And a user with [a role with security classification of PRIVATE]\n+    When the request [is configured to search for the previously created case via exact match]\n+    And a request is prepared with appropriate values\n+    And it is submitted to call the [internal search query] operation of [CCD Data Store Elastic Search API]\n+    Then a positive response is received\n+    And the response [contains the previously created case data]\n+    And the response [does not contain fields with RESTRICTED security classification]\n+    And the response has all other details as expected\n+\n+\n+    @S-901\n+  Scenario: should NOT return the case for a role with read access on case type and lower security classification than then case type\n+    Given a case that has just been created as in [Private_Case_Creation_Autotest1_Data]\n+    And a wait time of 5 seconds [to allow for Logstash to index the case just created]\n+    And a user with [a role with security classification of PUBLIC]\n+    When the request [is configured to search for the previously created case via exact match]\n+    And a request is prepared with appropriate values\n+    And it is submitted to call the [internal search query] operation of [CCD Data Store Elastic Search API]\n+    Then a positive response is received\n+    And the response [contains no cases]\n+    And the response has all other details as expected\n+\n+\n+    @S-903\n+  Scenario: should return the case for a role with read access to the case state\n+    Given a case that has just been created as in [Private_Case_Creation_Autotest1_Data]\n+    And a wait time of 5 seconds [to allow for Logstash to index the case just created]\n+    And a user with [a role with read access to the case state]\n+    When the request [is configured to search for the previously created case via exact match]\n+    And a request is prepared with appropriate values\n+    And it is submitted to call the [internal search query] operation of [CCD Data Store Elastic Search API]\n+    Then a positive response is received\n+    And the response [contains the previously created case data]\n+    And the response has all other details as expected\n+\n+\n+    @S-904\n+  Scenario: should NOT return the case for a role with no read access to a case state\n+    Given a case that has just been created as in [Private_Case_Creation_Autotest1_Data]\n+    And a wait time of 5 seconds [to allow for Logstash to index the case just created]\n+    And a user with [a role with no read access to the case state]\n+    When the request [is configured to search for the previously created case via exact match]\n+    And a request is prepared with appropriate values\n+    And it is submitted to call the [internal search query] operation of [CCD Data Store Elastic Search API]\n+    Then a positive response is received\n+    And the response [contains no cases]\n+    And the response has all other details as expected\n+\n+\n+    @S-905\n+  Scenario: should return the case field where user role matches ACL and security classification\n+    Given a case that has just been created as in [Private_Case_Creation_Autotest1_Data]\n+    And a wait time of 5 seconds [to allow for Logstash to index the case just created]\n+    And a user with [a role with security classification of RESTRICTED]\n+    When the request [is configured to search for the previously created case via exact match]\n+    And a request is prepared with appropriate values\n+    And it is submitted to call the [internal search query] operation of [CCD Data Store Elastic Search API]\n+    Then a positive response is received\n+    And the response [contains the RESTRICTED email field value]\n+    And the response has all other details as expected\n+\n+  ### CrossCaseTypeSearch\n+    @S-910\n+  Scenario: should return cases only for case types the user has access to - the user role can read case type and has same security classification \"\n+  + \"as case type\n+    Given a case that has just been created as in [S-910_Create_Case_Private_Autotest1]\n+    And a case that has just been created as in [S-910_Create_Case_Private_Autotest2]\n+    And a wait time of 5 seconds [to allow for Logstash to index the case just created]\n+    And a user with [private access to AUTOTEST1 jurisdiction only]\n+    When the request [is configured to search for both the previously created cases]\n+    And a request is prepared with appropriate values\n+    And it is submitted to call the [internal search query] operation of [CCD Data Store Elastic Search API]\n+    Then a positive response is received\n+    And the response [contains only S-910_Create_Case_Private_Autotest1]", "originalCommit": "fbe0ea7d2e905aa28ac91cf662e24c2fee5b09a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM4Mjk2MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r456382960", "bodyText": "a seperate step impl class won't be needed. @tomxelliott", "author": "MSancaktutar", "createdAt": "2020-07-17T11:25:08Z", "path": "src/aat/java/uk/gov/hmcts/ccd/datastore/befta/DataStoreBeftaRunner.java", "diffHunk": "@@ -8,11 +8,10 @@\n import io.cucumber.junit.CucumberOptions;\n import uk.gov.hmcts.befta.BeftaMain;\n \n-\n @RunWith(Cucumber.class)\n @CucumberOptions(plugin = \"json:target/cucumber.json\",\n-    glue = \"uk.gov.hmcts.befta.player\",\n-        features = { \"classpath:features\" }, tags = { \"not @Ignore\" })\n+    glue = {\"uk.gov.hmcts.befta.player\", \"uk.gov.hmcts.ccd.datastore.befta\"},", "originalCommit": "fbe0ea7d2e905aa28ac91cf662e24c2fee5b09a7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f15d8119beae6b0187a4d200031cba8123d95003", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f15d8119beae6b0187a4d200031cba8123d95003", "message": "RDM-8325 - Initial changes for internal /searchCases API", "committedDate": "2020-05-27T07:56:19Z", "type": "commit"}, {"oid": "be6a3b9a841fe48eb6b7733705e04a8644745273", "url": "https://github.com/hmcts/ccd-data-store-api/commit/be6a3b9a841fe48eb6b7733705e04a8644745273", "message": "Checkstyle", "committedDate": "2020-05-27T08:13:13Z", "type": "commit"}, {"oid": "2f3d06da04caacefa5cb24cce00957f1fdc29cbf", "url": "https://github.com/hmcts/ccd-data-store-api/commit/2f3d06da04caacefa5cb24cce00957f1fdc29cbf", "message": "Add data_classification to default _source; tests", "committedDate": "2020-05-27T11:41:49Z", "type": "commit"}, {"oid": "a6a36541caf5a6cfef62ead5bb6dbb26fde759f6", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a6a36541caf5a6cfef62ead5bb6dbb26fde759f6", "message": "Refactoring & tests", "committedDate": "2020-05-27T12:21:50Z", "type": "commit"}, {"oid": "506ef4b771dc7eb6823f737f44d53642d32949a5", "url": "https://github.com/hmcts/ccd-data-store-api/commit/506ef4b771dc7eb6823f737f44d53642d32949a5", "message": "Add Log and Audit to internal /searchCases", "committedDate": "2020-05-27T13:12:05Z", "type": "commit"}, {"oid": "0fc75ab4364e95f78271f62bb04322f94b406a4f", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0fc75ab4364e95f78271f62bb04322f94b406a4f", "message": "Further unit testing/minor refactoring", "committedDate": "2020-05-27T16:42:47Z", "type": "commit"}, {"oid": "5c9ec6ace45d74bc194a5d80671f140f2b3b7284", "url": "https://github.com/hmcts/ccd-data-store-api/commit/5c9ec6ace45d74bc194a5d80671f140f2b3b7284", "message": "Checkstyle", "committedDate": "2020-05-27T16:54:20Z", "type": "commit"}, {"oid": "1155c1691e0b026452aa675058c284faa5aee514", "url": "https://github.com/hmcts/ccd-data-store-api/commit/1155c1691e0b026452aa675058c284faa5aee514", "message": "Add usecase request param for def store", "committedDate": "2020-05-28T11:31:28Z", "type": "commit"}, {"oid": "97910d410515ba7eba9b75a2ee7e7682562b9773", "url": "https://github.com/hmcts/ccd-data-store-api/commit/97910d410515ba7eba9b75a2ee7e7682562b9773", "message": "Update log message", "committedDate": "2020-05-28T11:35:34Z", "type": "commit"}, {"oid": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f9a84505dd3e6b6a7e677b921b5e302da68a4531", "message": "Add query param to test data", "committedDate": "2020-05-28T11:55:23Z", "type": "commit"}, {"oid": "ee04b18575fd00c31ea183236f97abdb4187024e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ee04b18575fd00c31ea183236f97abdb4187024e", "message": "RDM-8598 - Introduce embedded ES for integration testing; including configuration/data load and sample test", "committedDate": "2020-05-28T19:38:09Z", "type": "commit"}, {"oid": "32c9b1f80366fff3721c4be06e9de0f6e147bc38", "url": "https://github.com/hmcts/ccd-data-store-api/commit/32c9b1f80366fff3721c4be06e9de0f6e147bc38", "message": "Conditional ES config", "committedDate": "2020-05-28T21:59:11Z", "type": "commit"}, {"oid": "89c70db669e45235ce898c60a1d6de95a8e9a592", "url": "https://github.com/hmcts/ccd-data-store-api/commit/89c70db669e45235ce898c60a1d6de95a8e9a592", "message": "Remove non-required stop", "committedDate": "2020-05-28T22:08:28Z", "type": "commit"}, {"oid": "bcda3f02e466858a91acbacc51a49b4f51843775", "url": "https://github.com/hmcts/ccd-data-store-api/commit/bcda3f02e466858a91acbacc51a49b4f51843775", "message": "Init ES data only when required", "committedDate": "2020-05-29T08:37:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ3OTU2MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432479560", "bodyText": "can you remove final please? makes the code heavy to read for little gain", "author": "mario-paniccia", "createdAt": "2020-05-29T13:24:09Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CachedUIDefinitionGateway.java", "diffHunk": "@@ -43,6 +44,13 @@ public SearchResult getSearchResult(final int version, final String caseTypeId)\n         return httpUiDefinitionGateway.getSearchResult(version, caseTypeId);\n     }\n \n+    @Override\n+    @Cacheable(\"searchCasesResultCache\")\n+    public SearchResult getSearchCasesResult(final int version, final String caseTypeId, final UseCase useCase) {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MDI4Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432480286", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.debug(\"remote retrieving version {} of search cases result for {}\", version, caseTypeId);\n          \n          \n            \n                    LOG.debug(\"remote retrieving version {} of search cases result definition for {}\", version, caseTypeId);", "author": "mario-paniccia", "createdAt": "2020-05-29T13:25:17Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CachedUIDefinitionGateway.java", "diffHunk": "@@ -43,6 +44,13 @@ public SearchResult getSearchResult(final int version, final String caseTypeId)\n         return httpUiDefinitionGateway.getSearchResult(version, caseTypeId);\n     }\n \n+    @Override\n+    @Cacheable(\"searchCasesResultCache\")\n+    public SearchResult getSearchCasesResult(final int version, final String caseTypeId, final UseCase useCase) {\n+        LOG.debug(\"remote retrieving version {} of search cases result for {}\", version, caseTypeId);", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4MzExMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432483112", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public SearchResult getSearchCasesResult(final int version, final String caseTypeId, final UseCase useCase) {\n          \n          \n            \n                public SearchResult getSearchCasesResultDefinition(int version, String caseTypeId, UseCase useCase) {", "author": "mario-paniccia", "createdAt": "2020-05-29T13:29:58Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CachedUIDefinitionGateway.java", "diffHunk": "@@ -43,6 +44,13 @@ public SearchResult getSearchResult(final int version, final String caseTypeId)\n         return httpUiDefinitionGateway.getSearchResult(version, caseTypeId);\n     }\n \n+    @Override\n+    @Cacheable(\"searchCasesResultCache\")\n+    public SearchResult getSearchCasesResult(final int version, final String caseTypeId, final UseCase useCase) {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NTAyMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432485022", "bodyText": "temporary: do we need caseTypeId? is this only for the caching? how does this work for use case across multiple case types?", "author": "mario-paniccia", "createdAt": "2020-05-29T13:33:18Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CachedUIDefinitionGateway.java", "diffHunk": "@@ -43,6 +44,13 @@ public SearchResult getSearchResult(final int version, final String caseTypeId)\n         return httpUiDefinitionGateway.getSearchResult(version, caseTypeId);\n     }\n \n+    @Override\n+    @Cacheable(\"searchCasesResultCache\")\n+    public SearchResult getSearchCasesResult(final int version, final String caseTypeId, final UseCase useCase) {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ad83f92fbcc9c7f0db7c189fa8d63e363e632acf", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ad83f92fbcc9c7f0db7c189fa8d63e363e632acf", "message": "Swagger docs; add internal APIs to published docs", "committedDate": "2020-05-29T13:36:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ4NzQzNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432487434", "bodyText": "have you got final configured in your IDE? I think final added everywhere really makes the code heavy to read. I think it's not worth it", "author": "mario-paniccia", "createdAt": "2020-05-29T13:37:12Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/HttpUIDefinitionGateway.java", "diffHunk": "@@ -182,6 +183,30 @@ public SearchResult getWorkBasketResult(int version, String caseTypeId) {\n         }\n     }\n \n+    @Override\n+    public SearchResult getSearchCasesResult(int version, String caseTypeId, UseCase useCase) {\n+        try {\n+            final Instant start = Instant.now();", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8853f3907c7d99b64591744751ca0f8f5207d676", "url": "https://github.com/hmcts/ccd-data-store-api/commit/8853f3907c7d99b64591744751ca0f8f5207d676", "message": "Fix SwaggerGeneratorTest", "committedDate": "2020-05-29T13:50:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5NjMzMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432496331", "bodyText": "this is an interesting solution in general. But for ManagaCaseAssignment won't work I think. I've been recently told that the only IDAM role the client has is caseworker-caa and she needs to see all the existing case types. In this case this will return an empty list", "author": "mario-paniccia", "createdAt": "2020-05-29T13:51:34Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/user/UserService.java", "diffHunk": "@@ -58,6 +62,13 @@ public UserProfile getUserProfile() {\n         return createUserProfile(idamProperties, userId, jurisdictionDefinitions);\n     }\n \n+    public List<CaseTypeDefinition> getUserCaseTypes() {\n+        return Arrays.stream(getUserProfile().getJurisdictions())\n+            .map(JurisdictionDisplayProperties::getCaseTypeDefinitions)\n+            .flatMap(Collection::stream)\n+            .collect(Collectors.toList());\n+    }", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwODY2OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432508668", "bodyText": "temporary: why we getting only the field of type label here?", "author": "mario-paniccia", "createdAt": "2020-05-29T14:11:35Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseTypeDefinition.java", "diffHunk": "@@ -168,4 +174,27 @@ public boolean isCaseFieldACollection(String caseFieldId) {\n     public Optional<CaseFieldDefinition> getCaseField(String caseFieldId) {\n         return caseFieldDefinitions.stream().filter(caseField -> caseField.getId().equalsIgnoreCase(caseFieldId)).findFirst();\n     }\n+\n+    @JsonIgnore\n+    public Optional<CommonField> getCommonFieldByPath(String path) {\n+        if (StringUtils.isBlank(path)) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = Arrays.stream(path.trim().split(\"\\\\.\")).collect(toList());\n+\n+        Optional<CaseFieldDefinition> topLevelCaseField = getCaseField(pathElements.get(0));\n+        if (topLevelCaseField.isPresent()) {\n+            return topLevelCaseField.get().getComplexFieldNestedField(pathElements.stream().skip(1).collect(Collectors.joining(\",\")));\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, TextNode> getLabelsFromCaseFields() {\n+        return getCaseFieldDefinitions()\n+            .stream()\n+            .filter(caseField -> LABEL.equals(caseField.getFieldTypeDefinition().getType()))", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYxMDI0Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r434610246", "bodyText": "Just to not break existing behaviour with generating the case response data (this was originally in MergeDataToSearchResultOperation). Unsure of the original reasoning behind it, however..", "author": "danlysiak", "createdAt": "2020-06-03T14:27:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwODY2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwODk2Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432508963", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .collect(Collectors.toMap(CaseFieldDefinition::getId, caseField -> instance.textNode(caseField.getLabel())));\n          \n          \n            \n                        .collect(Collectors.toMap(CaseFieldDefinition::getId, caseField -> jsonNodeFactory.textNode(caseField.getLabel())));", "author": "mario-paniccia", "createdAt": "2020-05-29T14:12:05Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseTypeDefinition.java", "diffHunk": "@@ -168,4 +174,27 @@ public boolean isCaseFieldACollection(String caseFieldId) {\n     public Optional<CaseFieldDefinition> getCaseField(String caseFieldId) {\n         return caseFieldDefinitions.stream().filter(caseField -> caseField.getId().equalsIgnoreCase(caseFieldId)).findFirst();\n     }\n+\n+    @JsonIgnore\n+    public Optional<CommonField> getCommonFieldByPath(String path) {\n+        if (StringUtils.isBlank(path)) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = Arrays.stream(path.trim().split(\"\\\\.\")).collect(toList());\n+\n+        Optional<CaseFieldDefinition> topLevelCaseField = getCaseField(pathElements.get(0));\n+        if (topLevelCaseField.isPresent()) {\n+            return topLevelCaseField.get().getComplexFieldNestedField(pathElements.stream().skip(1).collect(Collectors.joining(\",\")));\n+        }\n+\n+        return Optional.empty();\n+    }\n+\n+    @JsonIgnore\n+    public Map<String, TextNode> getLabelsFromCaseFields() {\n+        return getCaseFieldDefinitions()\n+            .stream()\n+            .filter(caseField -> LABEL.equals(caseField.getFieldTypeDefinition().getType()))\n+            .collect(Collectors.toMap(CaseFieldDefinition::getId, caseField -> instance.textNode(caseField.getLabel())));", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMDk4MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432510981", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Optional<CommonField> getCommonFieldByPath(String path) {\n          \n          \n            \n                public Optional<CommonField> getComplexSubfieldDefinitionByPath(String path) {", "author": "mario-paniccia", "createdAt": "2020-05-29T14:14:59Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseTypeDefinition.java", "diffHunk": "@@ -168,4 +174,27 @@ public boolean isCaseFieldACollection(String caseFieldId) {\n     public Optional<CaseFieldDefinition> getCaseField(String caseFieldId) {\n         return caseFieldDefinitions.stream().filter(caseField -> caseField.getId().equalsIgnoreCase(caseFieldId)).findFirst();\n     }\n+\n+    @JsonIgnore\n+    public Optional<CommonField> getCommonFieldByPath(String path) {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMDM5OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432520399", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (topLevelCaseField.isPresent()) {\n          \n          \n            \n                        return topLevelCaseField.get().getComplexFieldNestedField(pathElements.stream().skip(1).collect(Collectors.joining(\",\")));\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    return Optional.empty();\n          \n          \n            \n              return topLevelCaseField.flatMap(f -> \n          \n          \n            \n                        f.getComplexFieldNestedField(pathElements.stream().skip(1).collect(Collectors.joining(\",\")))\n          \n          \n            \n                    );", "author": "mario-paniccia", "createdAt": "2020-05-29T14:24:53Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseTypeDefinition.java", "diffHunk": "@@ -168,4 +174,27 @@ public boolean isCaseFieldACollection(String caseFieldId) {\n     public Optional<CaseFieldDefinition> getCaseField(String caseFieldId) {\n         return caseFieldDefinitions.stream().filter(caseField -> caseField.getId().equalsIgnoreCase(caseFieldId)).findFirst();\n     }\n+\n+    @JsonIgnore\n+    public Optional<CommonField> getCommonFieldByPath(String path) {\n+        if (StringUtils.isBlank(path)) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = Arrays.stream(path.trim().split(\"\\\\.\")).collect(toList());\n+\n+        Optional<CaseFieldDefinition> topLevelCaseField = getCaseField(pathElements.get(0));\n+        if (topLevelCaseField.isPresent()) {\n+            return topLevelCaseField.get().getComplexFieldNestedField(pathElements.stream().skip(1).collect(Collectors.joining(\",\")));\n+        }\n+\n+        return Optional.empty();", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyNjIyMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432526220", "bodyText": "lots of code emerging more and more often to deal with path manipulation. 2 examples in this class, here another:\n\n  \n    \n      ccd-data-store-api/src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultField.java\n    \n    \n         Line 61\n      in\n      0fc75ab\n    \n    \n    \n    \n\n        \n          \n           return Arrays.stream(this.caseFieldPath.trim().split(\"\\\\.\")).collect(Collectors.toList()); \n        \n    \n  \n\n\nShall we gather all path related code into a new class CaseFieldPathUtils?", "author": "mario-paniccia", "createdAt": "2020-05-29T14:30:52Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/CaseTypeDefinition.java", "diffHunk": "@@ -168,4 +174,27 @@ public boolean isCaseFieldACollection(String caseFieldId) {\n     public Optional<CaseFieldDefinition> getCaseField(String caseFieldId) {\n         return caseFieldDefinitions.stream().filter(caseField -> caseField.getId().equalsIgnoreCase(caseFieldId)).findFirst();\n     }\n+\n+    @JsonIgnore\n+    public Optional<CommonField> getCommonFieldByPath(String path) {\n+        if (StringUtils.isBlank(path)) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = Arrays.stream(path.trim().split(\"\\\\.\")).collect(toList());", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMDI2Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432530267", "bodyText": "temporary: not sure this is the best place for this code. Maybe better moving this to a new method in CaseFieldPathUtils?", "author": "mario-paniccia", "createdAt": "2020-05-29T14:36:35Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultField.java", "diffHunk": "@@ -108,4 +119,32 @@ public String getDisplayContextParameter() {\n     public void setDisplayContextParameter(String displayContextParameter) {\n         this.displayContextParameter = displayContextParameter;\n     }\n+\n+    public UseCase getUseCase() {\n+        return useCase;\n+    }\n+\n+    public void setUseCase(UseCase useCase) {\n+        this.useCase = useCase;\n+    }\n+\n+    public Object getObjectByPath(JsonNode value) {\n+        List<String> pathElements = getCaseFieldPathElements();\n+\n+        return reduce(value, pathElements, getCaseFieldPath());\n+    }\n+\n+    private Object reduce(JsonNode caseFields, List<String> pathElements, String path) {\n+        String firstPathElement = pathElements.get(0);\n+\n+        JsonNode caseField = Optional.ofNullable(caseFields.get(firstPathElement))\n+            .orElseThrow(() -> new BadRequestException(format(NESTED_ELEMENT_NOT_FOUND_FOR_PATH, path)));\n+\n+        if (pathElements.size() == 1) {\n+            return caseField;\n+        } else {\n+            List<String> tail = pathElements.subList(1, pathElements.size());\n+            return reduce(caseField, tail, path);\n+        }\n+    }", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzMjcwNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432532706", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public List<String> buildCaseReferenceList(String caseTypeId) {\n          \n          \n            \n                public List<String> getCasesReference(String caseTypeId) {", "author": "mario-paniccia", "createdAt": "2020-05-29T14:40:25Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/CaseSearchResult.java", "diffHunk": "@@ -28,4 +29,10 @@ public CaseSearchResult(Long total, List<CaseDetails> cases) {\n     public Long getTotal() {\n         return total;\n     }\n+\n+    public List<String> buildCaseReferenceList(String caseTypeId) {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzNDcwOQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432534709", "bodyText": "temporary: does this mean every time a service introduces a new use case we need to do a new release of Data Store?", "author": "mario-paniccia", "createdAt": "2020-05-29T14:43:30Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/UseCase.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package uk.gov.hmcts.ccd.domain.model.search;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonValue;\n+import com.google.common.base.Strings;\n+\n+import java.util.Arrays;\n+\n+public enum UseCase {\n+\n+    WORKBASKET(\"WORKBASKET\"),\n+    SEARCH(\"SEARCH\"),\n+    ORG_CASES(\"ORGCASES\"),\n+    DEFAULT(\"\");", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0MjQ0OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432542448", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class SearchResultViewColumn {\n          \n          \n            \n            public class SearchResultViewHeader {", "author": "mario-paniccia", "createdAt": "2020-05-29T14:55:08Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/elasticsearch/SearchResultViewColumn.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package uk.gov.hmcts.ccd.domain.model.search.elasticsearch;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+import lombok.NoArgsConstructor;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+\n+@NoArgsConstructor\n+@AllArgsConstructor\n+@Getter\n+public class SearchResultViewColumn {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NTE4Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432545182", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class UICaseSearchHeader {\n          \n          \n            \n            public class SearchResultViewHeaderGroup {", "author": "mario-paniccia", "createdAt": "2020-05-29T14:59:10Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/elasticsearch/UICaseSearchHeader.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package uk.gov.hmcts.ccd.domain.model.search.elasticsearch;\n+\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.util.List;\n+\n+@Data\n+public class UICaseSearchHeader {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NjI1MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432546250", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private UICaseSearchHeaderMetadata metadata;\n          \n          \n            \n                private HeaderGroupMetadata metadata;", "author": "mario-paniccia", "createdAt": "2020-05-29T15:00:54Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/elasticsearch/UICaseSearchHeader.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package uk.gov.hmcts.ccd.domain.model.search.elasticsearch;\n+\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.util.List;\n+\n+@Data\n+public class UICaseSearchHeader {\n+\n+    @NonNull\n+    private UICaseSearchHeaderMetadata metadata;", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NzUxMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432547510", "bodyText": "we are trying to follow the convention that all internal api result objects are denoted by View. Well probably need to do some renaming of the various classes. Let's discuss that separately", "author": "mario-paniccia", "createdAt": "2020-05-29T15:02:59Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/elasticsearch/UICaseSearchResult.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package uk.gov.hmcts.ccd.domain.model.search.elasticsearch;\n+\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyList;\n+\n+@Data\n+public class UICaseSearchResult {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1NDI2Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432554262", "bodyText": "temporary: I would not model this as an operation with an execute method. Because by convention in Data Store Operation classes correspond to business operations like create case, view case. Even thought I can see we are introducing them for other things recently. This could just be a Service maybe?", "author": "mario-paniccia", "createdAt": "2020-05-29T15:14:04Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/aggregated/MergeDataToSearchCasesOperation.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package uk.gov.hmcts.ccd.domain.service.aggregated;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.UseCase;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class MergeDataToSearchCasesOperation {", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU1NzE5OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r432557199", "bodyText": "was thinking it might prove useful to also add the use case here. For standard requests it's going to have value null", "author": "mario-paniccia", "createdAt": "2020-05-29T15:18:39Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/elasticsearch/UICaseSearchResult.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package uk.gov.hmcts.ccd.domain.model.search.elasticsearch;\n+\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyList;\n+\n+@Data\n+public class UICaseSearchResult {\n+\n+    public static final UICaseSearchResult EMPTY = new UICaseSearchResult(emptyList(), emptyList(), 0L);\n+\n+    @NonNull\n+    private List<UICaseSearchHeader> headers;\n+    @NonNull\n+    private List<SearchResultViewItem> cases;\n+    @NonNull\n+    private Long total;\n+", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTg4NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433111885", "bodyText": "not needed. Let's removed it please", "author": "mario-paniccia", "createdAt": "2020-06-01T08:41:29Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Slf4j\n+public class UICaseSearchController {\n+    private static final String ERROR_CASE_ID_INVALID = \"Case ID is not valid\";\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        headers = {\n+            V2.EXPERIMENTAL_HEADER", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMzk2OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433113969", "bodyText": "I know other v2 apis have versioned custom vendor types, but I'd like to follow HMCTS guidelines from now on which says API versioning should be avoided. We can then use a generic media type application/json here. See:\nhttps://tools.hmcts.net/confluence/pages/viewpage.action?pageId=1392411337#RDM-8325:InternalSearchAPI-3.1-Vendor-SpecificMediaTypes", "author": "mario-paniccia", "createdAt": "2020-06-01T08:46:02Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Slf4j\n+public class UICaseSearchController {\n+    private static final String ERROR_CASE_ID_INVALID = \"Case ID is not valid\";\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        headers = {\n+            V2.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V2.MediaType.UI_CASE_SEARCH", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExOTY3MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433119671", "bodyText": "notes = V2.EXPERIMENTAL_WARNING\ncan you remove please", "author": "mario-paniccia", "createdAt": "2020-06-01T08:58:31Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Slf4j\n+public class UICaseSearchController {\n+    private static final String ERROR_CASE_ID_INVALID = \"Case ID is not valid\";\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        headers = {\n+            V2.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V2.MediaType.UI_CASE_SEARCH\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Elastic search for cases returning paginated data\",\n+        notes = V2.EXPERIMENTAL_WARNING", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMTg0OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433121849", "bodyText": "do we need to document other error codes?", "author": "mario-paniccia", "createdAt": "2020-06-01T09:03:22Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Slf4j\n+public class UICaseSearchController {\n+    private static final String ERROR_CASE_ID_INVALID = \"Case ID is not valid\";\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        headers = {\n+            V2.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V2.MediaType.UI_CASE_SEARCH\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Elastic search for cases returning paginated data\",\n+        notes = V2.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Success\",\n+            response = CaseSearchResultViewResource.class\n+        ),\n+        @ApiResponse(\n+            code = 400,\n+            message = ERROR_CASE_ID_INVALID\n+        ),\n+        @ApiResponse(\n+            code = 404,\n+            message = \"Case not found\"\n+        )\n+    })\n+    // TODO: Docs", "originalCommit": "f9a84505dd3e6b6a7e677b921b5e302da68a4531", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNTcwNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433125704", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                 @ApiParam(value = \"Comma-separated list of case type ID(s).\")\n          \n          \n            \n                                                 @ApiParam(value = \"Comma-separated list of case type ID(s). If omitted, the search is across all existing case types. For better performance, prefer specifying the case types when possible\")", "author": "mario-paniccia", "createdAt": "2020-06-01T09:12:11Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Api(tags = {\"Elastic Based Search API\"})\n+@SwaggerDefinition(tags = {\n+    @Tag(name = \"Elastic Based Search API\", description = \"Internal ElasticSearch based search API\")\n+})\n+@Slf4j\n+public class UICaseSearchController {\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        headers = {\n+            V2.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V2.MediaType.UI_CASE_SEARCH\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Search cases according to the provided ElasticSearch query. Supports searching across multiple case types and a use case.\",\n+        notes = V2.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Success.\",\n+            response = CaseSearchResultViewResource.class\n+        ),\n+        @ApiResponse(\n+            code = 400,\n+            message = \"Request is invalid. For some other types HTTP code 500 is returned instead.\\n\"\n+                      + \"Examples include:\\n\"\n+                      + \"- Unsupported use case specified in `usecase` query parameter.\\n\"\n+                      + \"- Query is missing required `query` field.\\n\"\n+                      + \"- Query includes blacklisted type.\\n\"\n+                      + \"- Query has failed in ElasticSearch - for example, a sort is attempted on an unknown/unmapped field.\"\n+        ),\n+        @ApiResponse(\n+            code = 401,\n+            message = \"Request doesn't include a valid `Authorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\"\n+        ),\n+        @ApiResponse(\n+            code = 403,\n+            message = \"Request doesn't include a valid `ServiceAuthorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\\n\\n\"\n+                      + \"A valid S2S token issued to the name of a non-permitted API Client will also return the same.\"\n+        ),\n+        @ApiResponse(\n+            code = 404,\n+            message = \"Case type specified in `ctid` query parameter could not be found.\"\n+        ),\n+        @ApiResponse(\n+            code = 500,\n+            message = \"An unexpected situation that is not attributable to the user or API Client; or request is invalid. \"\n+                      + \"For some other types HTTP code 400 is returned instead.\\n\"\n+                      + \"Invalid request examples include:\\n\"\n+                      + \"- Malformed JSON request.\"\n+        )\n+    })\n+    @LogAudit(operationType = AuditOperationType.SEARCH_CASE, caseTypeIds = \"#caseTypeIds\",\n+        caseId = \"T(uk.gov.hmcts.ccd.v2.internal.controller.UICaseSearchController).buildCaseIds(#result)\")\n+    public ResponseEntity<CaseSearchResultViewResource> searchCases(\n+                                     @ApiParam(value = \"Comma-separated list of case type ID(s).\")", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNjkxMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433126912", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                 @ApiParam(value = \"Use case for search. Examples include `WORKBASKET`, `SEARCH` or `ORGCASES`.\")\n          \n          \n            \n                                                 @ApiParam(value = \"Use case for search. Examples include `WORKBASKET`, `SEARCH` or `ORGCASES`. Used when the list of fields to return is configured in the CCD definition. If omitted, all the case fields are returned\")", "author": "mario-paniccia", "createdAt": "2020-06-01T09:14:58Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Api(tags = {\"Elastic Based Search API\"})\n+@SwaggerDefinition(tags = {\n+    @Tag(name = \"Elastic Based Search API\", description = \"Internal ElasticSearch based search API\")\n+})\n+@Slf4j\n+public class UICaseSearchController {\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        headers = {\n+            V2.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V2.MediaType.UI_CASE_SEARCH\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Search cases according to the provided ElasticSearch query. Supports searching across multiple case types and a use case.\",\n+        notes = V2.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Success.\",\n+            response = CaseSearchResultViewResource.class\n+        ),\n+        @ApiResponse(\n+            code = 400,\n+            message = \"Request is invalid. For some other types HTTP code 500 is returned instead.\\n\"\n+                      + \"Examples include:\\n\"\n+                      + \"- Unsupported use case specified in `usecase` query parameter.\\n\"\n+                      + \"- Query is missing required `query` field.\\n\"\n+                      + \"- Query includes blacklisted type.\\n\"\n+                      + \"- Query has failed in ElasticSearch - for example, a sort is attempted on an unknown/unmapped field.\"\n+        ),\n+        @ApiResponse(\n+            code = 401,\n+            message = \"Request doesn't include a valid `Authorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\"\n+        ),\n+        @ApiResponse(\n+            code = 403,\n+            message = \"Request doesn't include a valid `ServiceAuthorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\\n\\n\"\n+                      + \"A valid S2S token issued to the name of a non-permitted API Client will also return the same.\"\n+        ),\n+        @ApiResponse(\n+            code = 404,\n+            message = \"Case type specified in `ctid` query parameter could not be found.\"\n+        ),\n+        @ApiResponse(\n+            code = 500,\n+            message = \"An unexpected situation that is not attributable to the user or API Client; or request is invalid. \"\n+                      + \"For some other types HTTP code 400 is returned instead.\\n\"\n+                      + \"Invalid request examples include:\\n\"\n+                      + \"- Malformed JSON request.\"\n+        )\n+    })\n+    @LogAudit(operationType = AuditOperationType.SEARCH_CASE, caseTypeIds = \"#caseTypeIds\",\n+        caseId = \"T(uk.gov.hmcts.ccd.v2.internal.controller.UICaseSearchController).buildCaseIds(#result)\")\n+    public ResponseEntity<CaseSearchResultViewResource> searchCases(\n+                                     @ApiParam(value = \"Comma-separated list of case type ID(s).\")\n+                                     @RequestParam(value = \"ctid\", required = false) List<String> caseTypeIds,\n+                                     @ApiParam(value = \"Use case for search. Examples include `WORKBASKET`, `SEARCH` or `ORGCASES`.\")", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyNzg1Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433127856", "bodyText": "can you also point them to the elastic search API LLD please: https://tools.hmcts.net/confluence/pages/viewpage.action?pageId=843514186#CCDElasticSearchandnewsearchAPIDesign-ElasticSearchRequestsImportantConcepts", "author": "mario-paniccia", "createdAt": "2020-06-01T09:17:05Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,124 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Api(tags = {\"Elastic Based Search API\"})\n+@SwaggerDefinition(tags = {\n+    @Tag(name = \"Elastic Based Search API\", description = \"Internal ElasticSearch based search API\")\n+})\n+@Slf4j\n+public class UICaseSearchController {\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        headers = {\n+            V2.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V2.MediaType.UI_CASE_SEARCH\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Search cases according to the provided ElasticSearch query. Supports searching across multiple case types and a use case.\",\n+        notes = V2.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Success.\",\n+            response = CaseSearchResultViewResource.class\n+        ),\n+        @ApiResponse(\n+            code = 400,\n+            message = \"Request is invalid. For some other types HTTP code 500 is returned instead.\\n\"\n+                      + \"Examples include:\\n\"\n+                      + \"- Unsupported use case specified in `usecase` query parameter.\\n\"\n+                      + \"- Query is missing required `query` field.\\n\"\n+                      + \"- Query includes blacklisted type.\\n\"\n+                      + \"- Query has failed in ElasticSearch - for example, a sort is attempted on an unknown/unmapped field.\"\n+        ),\n+        @ApiResponse(\n+            code = 401,\n+            message = \"Request doesn't include a valid `Authorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\"\n+        ),\n+        @ApiResponse(\n+            code = 403,\n+            message = \"Request doesn't include a valid `ServiceAuthorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\\n\\n\"\n+                      + \"A valid S2S token issued to the name of a non-permitted API Client will also return the same.\"\n+        ),\n+        @ApiResponse(\n+            code = 404,\n+            message = \"Case type specified in `ctid` query parameter could not be found.\"\n+        ),\n+        @ApiResponse(\n+            code = 500,\n+            message = \"An unexpected situation that is not attributable to the user or API Client; or request is invalid. \"\n+                      + \"For some other types HTTP code 400 is returned instead.\\n\"\n+                      + \"Invalid request examples include:\\n\"\n+                      + \"- Malformed JSON request.\"\n+        )\n+    })\n+    @LogAudit(operationType = AuditOperationType.SEARCH_CASE, caseTypeIds = \"#caseTypeIds\",\n+        caseId = \"T(uk.gov.hmcts.ccd.v2.internal.controller.UICaseSearchController).buildCaseIds(#result)\")\n+    public ResponseEntity<CaseSearchResultViewResource> searchCases(\n+                                     @ApiParam(value = \"Comma-separated list of case type ID(s).\")\n+                                     @RequestParam(value = \"ctid\", required = false) List<String> caseTypeIds,\n+                                     @ApiParam(value = \"Use case for search. Examples include `WORKBASKET`, `SEARCH` or `ORGCASES`.\")\n+                                     @RequestParam(value = \"usecase\", required = false) final String useCase,\n+                                     @ApiParam(value = \"Native ElasticSearch Search API request. Please refer to the ElasticSearch official \"\n+                                         + \"documentation.\",", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMTYwNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433131604", "bodyText": "temporary: now that we are making ctid optional in the external search API to allow searching on all existing case types, is there any benefit in doing this? maybe yes since we have to know anyway for access control the actual case types a user can access. In that case, probably this is something that should be done by the external search API itself.", "author": "mario-paniccia", "createdAt": "2020-06-01T09:25:59Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.data.user.UserService;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.search.UseCase;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {\n+\n+    private static final String SORT = \"sort\";\n+    private static final String CASE_DATA_PREFIX = \"data.\";\n+    private static final String COLLECTION_VALUE_SUFFIX = \".value\";\n+    private static final String KEYWORD_SUFFIX = \".keyword\";\n+\n+    private final ObjectMapper objectMapper;\n+    private final ApplicationParams applicationParams;\n+    private final ObjectMapperService objectMapperService;\n+    private final SearchQueryOperation searchQueryOperation;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final UserService userService;\n+    private final ElasticsearchMappings elasticsearchMappings;\n+\n+    @Autowired\n+    public ElasticsearchQueryHelper(@Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n+                                    ApplicationParams applicationParams,\n+                                    ObjectMapperService objectMapperService,\n+                                    SearchQueryOperation searchQueryOperation,\n+                                    @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) GetCaseTypeOperation getCaseTypeOperation,\n+                                    UserService userService,\n+                                    ElasticsearchMappings elasticsearchMappings) {\n+        this.objectMapper = objectMapper;\n+        this.applicationParams = applicationParams;\n+        this.objectMapperService = objectMapperService;\n+        this.searchQueryOperation = searchQueryOperation;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.userService = userService;\n+        this.elasticsearchMappings = elasticsearchMappings;\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(List<String> caseTypeIds, String useCaseString, String jsonSearchRequest) {\n+        UseCase useCase;\n+        try {\n+            useCase = UseCase.valueOfReference(useCaseString);\n+        } catch (IllegalArgumentException ex) {\n+            throw new BadSearchRequest(String.format(\"The provided use case '%s' is unsupported.\", useCaseString));\n+        }\n+\n+        rejectBlackListedQuery(jsonSearchRequest);\n+\n+        final List<String> updatedCaseTypeIds = buildCaseTypeIds(caseTypeIds);\n+\n+        JsonNode searchRequest = stringToJsonNode(jsonSearchRequest);\n+        if (useCase != UseCase.DEFAULT) {\n+            applyConfiguredSort(searchRequest, updatedCaseTypeIds, useCase);\n+        }\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(updatedCaseTypeIds)\n+            .withSearchRequest(searchRequest)\n+            .build();\n+    }\n+\n+    private void applyConfiguredSort(JsonNode searchRequest, List<String> caseTypeIds, UseCase useCase) {\n+        JsonNode sortNode = searchRequest.get(SORT);\n+        if (sortNode == null) {\n+            ArrayNode appliedSortsNode = buildSortNode(caseTypeIds, useCase);\n+            if (appliedSortsNode.size() > 0) {\n+                ((ObjectNode)searchRequest).set(SORT, appliedSortsNode);\n+            }\n+        }\n+    }\n+\n+    private ArrayNode buildSortNode(List<String> caseTypeIds, UseCase useCase) {\n+        ArrayNode sortNode = objectMapper.createArrayNode();\n+        caseTypeIds.forEach(caseTypeId -> addCaseTypeSorts(caseTypeId, useCase, sortNode));\n+        return sortNode;\n+    }\n+\n+    private void addCaseTypeSorts(String caseTypeId, UseCase useCase, ArrayNode sortNode) {\n+        Optional<CaseTypeDefinition> caseTypeOpt = getCaseTypeOperation.execute(caseTypeId, CAN_READ);\n+        caseTypeOpt.ifPresent(caseType -> searchQueryOperation.getSortOrders(caseType, useCase)\n+            .forEach(field -> sortNode.add(buildSortOrderFieldNode(caseType, field))));\n+    }\n+\n+    private ObjectNode buildSortOrderFieldNode(CaseTypeDefinition caseTypeDefinition, SortOrderField sortOrderField) {\n+        ObjectNode objectNode = objectMapper.createObjectNode();\n+        final CommonField commonField = caseTypeDefinition.getCommonFieldByPath(sortOrderField.getCaseFieldId()).orElseThrow(() ->\n+            new NullPointerException(String.format(\"Case field '%s' does not exist in configuration for case type '%s'.\",\n+                sortOrderField.getCaseFieldId(), caseTypeDefinition.getId()))\n+        );\n+        final FieldTypeDefinition fieldType = commonField.getFieldTypeDefinition();\n+\n+        StringBuilder sb = new StringBuilder();\n+\n+        if (sortOrderField.isMetadata()) {\n+            sb.append(MetaData.CaseField.valueOfReference(sortOrderField.getCaseFieldId()).getDbColumnName());\n+        } else {\n+            sb.append(CASE_DATA_PREFIX).append(sortOrderField.getCaseFieldId());\n+            if (fieldType.getType().equals(FieldTypeDefinition.COLLECTION)) {\n+                sb.append(COLLECTION_VALUE_SUFFIX);\n+            }\n+        }\n+\n+        if ((sortOrderField.isMetadata() && elasticsearchMappings.isDefaultTextMetadata(sb.toString()))\n+             || (!sortOrderField.isMetadata() && elasticsearchMappings.isDefaultTextCaseData(fieldType))) {\n+            sb.append(KEYWORD_SUFFIX);\n+        }\n+\n+        objectNode.set(sb.toString(), new TextNode(sortOrderField.getDirection()));\n+        return objectNode;\n+    }\n+\n+    private JsonNode stringToJsonNode(String jsonSearchRequest) {\n+        return objectMapperService.convertStringToObject(jsonSearchRequest, JsonNode.class);\n+    }\n+\n+    private void rejectBlackListedQuery(String jsonSearchRequest) {\n+        List<String> blackListedQueries = applicationParams.getSearchBlackList();\n+        Optional<String> blackListedQueryOpt = blackListedQueries\n+            .stream()\n+            .filter(blacklisted -> {\n+                Pattern p = Pattern.compile(\"\\\\b\" + blacklisted + \"\\\\b\");\n+                Matcher m = p.matcher(jsonSearchRequest);\n+                return m.find();\n+            })\n+            .findFirst();\n+        blackListedQueryOpt.ifPresent(blacklisted -> {\n+            throw new BadSearchRequest(String.format(\"Query of type '%s' is not allowed\", blacklisted));\n+        });\n+    }\n+\n+    private List<String> buildCaseTypeIds(List<String> caseTypeIds) {\n+        return CollectionUtils.isEmpty(caseTypeIds)\n+            ? userService.getUserCaseTypes().stream().map(CaseTypeDefinition::getId).collect(Collectors.toList())", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNjEwOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433136108", "bodyText": "furthermore, this can negatively impact search performance. If you consider a just redeployed DataStore, where all caches are empty. For each user jurisdiction we need to load its definition from def store before we can make the search. This might be too inefficient. It heavily relies on caching of the definitions.", "author": "mario-paniccia", "createdAt": "2020-06-01T09:36:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMTYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4MDQzMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433180432", "bodyText": "I wouldn't introduce a concept of Default use case. It's a bit misleading we don't really have a default use case. If use case is not passed then is missing.\nCan't we just check whether the string is empty or null?", "author": "mario-paniccia", "createdAt": "2020-06-01T11:25:50Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,166 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.data.user.UserService;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.search.UseCase;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {\n+\n+    private static final String SORT = \"sort\";\n+    private static final String CASE_DATA_PREFIX = \"data.\";\n+    private static final String COLLECTION_VALUE_SUFFIX = \".value\";\n+    private static final String KEYWORD_SUFFIX = \".keyword\";\n+\n+    private final ObjectMapper objectMapper;\n+    private final ApplicationParams applicationParams;\n+    private final ObjectMapperService objectMapperService;\n+    private final SearchQueryOperation searchQueryOperation;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final UserService userService;\n+    private final ElasticsearchMappings elasticsearchMappings;\n+\n+    @Autowired\n+    public ElasticsearchQueryHelper(@Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n+                                    ApplicationParams applicationParams,\n+                                    ObjectMapperService objectMapperService,\n+                                    SearchQueryOperation searchQueryOperation,\n+                                    @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) GetCaseTypeOperation getCaseTypeOperation,\n+                                    UserService userService,\n+                                    ElasticsearchMappings elasticsearchMappings) {\n+        this.objectMapper = objectMapper;\n+        this.applicationParams = applicationParams;\n+        this.objectMapperService = objectMapperService;\n+        this.searchQueryOperation = searchQueryOperation;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.userService = userService;\n+        this.elasticsearchMappings = elasticsearchMappings;\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(List<String> caseTypeIds, String useCaseString, String jsonSearchRequest) {\n+        UseCase useCase;\n+        try {\n+            useCase = UseCase.valueOfReference(useCaseString);\n+        } catch (IllegalArgumentException ex) {\n+            throw new BadSearchRequest(String.format(\"The provided use case '%s' is unsupported.\", useCaseString));\n+        }\n+\n+        rejectBlackListedQuery(jsonSearchRequest);\n+\n+        final List<String> updatedCaseTypeIds = buildCaseTypeIds(caseTypeIds);\n+\n+        JsonNode searchRequest = stringToJsonNode(jsonSearchRequest);\n+        if (useCase != UseCase.DEFAULT) {", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4ODc3NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433188775", "bodyText": "use case is a concept of the internal API only. It should not appear here. Better to keep in this common class only some minimal code needed for sure by both.", "author": "mario-paniccia", "createdAt": "2020-06-01T11:47:27Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -67,45 +59,25 @@ public CaseSearchResult searchCases(\n             + \"the search results will contain only metadata by default (no case field data). To get case data in the \"\n             + \"search results, please state the alias fields to be returned in the _source property for e.g.\"\n             + \" \\\"_source\\\":[\\\"alias.customer\\\",\\\"alias.postcode\\\"]\",\n-                  required = true)\n+            required = true)\n         @RequestBody String jsonSearchRequest) {\n \n         Instant start = Instant.now();\n \n-        rejectBlackListedQuery(jsonSearchRequest);\n+        CrossCaseTypeSearchRequest request = elasticsearchQueryHelper.prepareRequest(\n+            caseTypeIds,\n+            UseCase.DEFAULT.getReference(),", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4OTMxOQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433189319", "bodyText": "also, having a common helper to prepare both internal and external request will make our life more complicated in the future because if a dev changes it not realising it's shared by both internal and external api, it might introduce unwanted regressions. I'd say better removing it, but let's discuss about it.", "author": "mario-paniccia", "createdAt": "2020-06-01T11:49:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE4ODc3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5MTA0Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433191042", "bodyText": "potential regression risk here \u26a0\ufe0f . We have changed the external API. We introduced:\nbuildCaseTypeIds(caseTypeIds)\non the external API which definitely would require regression testing.", "author": "mario-paniccia", "createdAt": "2020-06-01T11:53:43Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -67,45 +59,25 @@ public CaseSearchResult searchCases(\n             + \"the search results will contain only metadata by default (no case field data). To get case data in the \"\n             + \"search results, please state the alias fields to be returned in the _source property for e.g.\"\n             + \" \\\"_source\\\":[\\\"alias.customer\\\",\\\"alias.postcode\\\"]\",\n-                  required = true)\n+            required = true)\n         @RequestBody String jsonSearchRequest) {\n \n         Instant start = Instant.now();\n \n-        rejectBlackListedQuery(jsonSearchRequest);\n+        CrossCaseTypeSearchRequest request = elasticsearchQueryHelper.prepareRequest(", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NTA4OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433195088", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Tag(name = \"Elastic Based Search API\", description = \"External ElasticSearch based search API\")\n          \n          \n            \n                @Tag(name = \"Elastic Based Search API\", description = \"ElasticSearch based search API\")", "author": "mario-paniccia", "createdAt": "2020-06-01T12:04:21Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -1,55 +1,47 @@\n package uk.gov.hmcts.ccd.endpoint.std;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n import io.swagger.annotations.*;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.http.MediaType;\n import org.springframework.web.bind.annotation.*;\n-import uk.gov.hmcts.ccd.ApplicationParams;\n import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n import uk.gov.hmcts.ccd.auditlog.LogAudit;\n import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n-import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.domain.model.search.UseCase;\n import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.CaseSearchOperation;\n import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.CrossCaseTypeSearchRequest;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.ElasticsearchQueryHelper;\n import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.AuthorisedCaseSearchOperation;\n-import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n \n import java.time.Duration;\n import java.time.Instant;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n \n @RestController\n @RequestMapping(path = \"/\",\n-                consumes = MediaType.APPLICATION_JSON_VALUE,\n-                produces = MediaType.APPLICATION_JSON_VALUE)\n+    consumes = MediaType.APPLICATION_JSON_VALUE,\n+    produces = MediaType.APPLICATION_JSON_VALUE)\n @Api(tags = {\"Elastic Based Search API\"})\n @SwaggerDefinition(tags = {\n-    @Tag(name = \"Elastic Based Search API\", description = \"New ElasticSearch based search API\")\n+    @Tag(name = \"Elastic Based Search API\", description = \"External ElasticSearch based search API\")", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5NjEyMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433196121", "bodyText": "in the code base methods we don't really mention external vs internal. I'd keep it agnostic as simply execute.", "author": "mario-paniccia", "createdAt": "2020-06-01T12:07:07Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -67,45 +59,25 @@ public CaseSearchResult searchCases(\n             + \"the search results will contain only metadata by default (no case field data). To get case data in the \"\n             + \"search results, please state the alias fields to be returned in the _source property for e.g.\"\n             + \" \\\"_source\\\":[\\\"alias.customer\\\",\\\"alias.postcode\\\"]\",\n-                  required = true)\n+            required = true)\n         @RequestBody String jsonSearchRequest) {\n \n         Instant start = Instant.now();\n \n-        rejectBlackListedQuery(jsonSearchRequest);\n+        CrossCaseTypeSearchRequest request = elasticsearchQueryHelper.prepareRequest(\n+            caseTypeIds,\n+            UseCase.DEFAULT.getReference(),\n+            jsonSearchRequest\n+        );\n \n-        CrossCaseTypeSearchRequest request = new CrossCaseTypeSearchRequest.Builder()\n-            .withCaseTypes(caseTypeIds)\n-            .withSearchRequest(stringToJsonNode(jsonSearchRequest))\n-            .build();\n-\n-        CaseSearchResult result = caseSearchOperation.execute(request);\n+        CaseSearchResult result = caseSearchOperation.executeExternal(request);", "originalCommit": "8853f3907c7d99b64591744751ca0f8f5207d676", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "110fed028a7d7d2802992692621cdd26ea264133", "url": "https://github.com/hmcts/ccd-data-store-api/commit/110fed028a7d7d2802992692621cdd26ea264133", "message": "Remove UseCase enum", "committedDate": "2020-06-01T12:08:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5ODY0Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433198647", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String useCaseTransformed = Strings.isNullOrEmpty(useCase) ? useCase : useCase.toUpperCase();\n          \n          \n            \n                    String useCaseUppercase = Strings.isNullOrEmpty(useCase) ? useCase : useCase.toUpperCase();", "author": "mario-paniccia", "createdAt": "2020-06-01T12:13:22Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import com.google.common.base.Strings;\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Api(tags = {\"Elastic Based Search API\"})\n+@SwaggerDefinition(tags = {\n+    @Tag(name = \"Elastic Based Search API\", description = \"Internal ElasticSearch based search API\")\n+})\n+@Slf4j\n+public class UICaseSearchController {\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        headers = {\n+            V2.EXPERIMENTAL_HEADER\n+        },\n+        produces = {\n+            V2.MediaType.UI_CASE_SEARCH\n+        }\n+    )\n+    @ApiOperation(\n+        value = \"Search cases according to the provided ElasticSearch query. Supports searching across multiple case types and a use case.\",\n+        notes = V2.EXPERIMENTAL_WARNING\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Success.\",\n+            response = CaseSearchResultViewResource.class\n+        ),\n+        @ApiResponse(\n+            code = 400,\n+            message = \"Request is invalid. For some other types HTTP code 500 is returned instead.\\n\"\n+                      + \"Examples include:\\n\"\n+                      + \"- Unsupported use case specified in `usecase` query parameter.\\n\"\n+                      + \"- Query is missing required `query` field.\\n\"\n+                      + \"- Query includes blacklisted type.\\n\"\n+                      + \"- Query has failed in ElasticSearch - for example, a sort is attempted on an unknown/unmapped field.\"\n+        ),\n+        @ApiResponse(\n+            code = 401,\n+            message = \"Request doesn't include a valid `Authorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\"\n+        ),\n+        @ApiResponse(\n+            code = 403,\n+            message = \"Request doesn't include a valid `ServiceAuthorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\\n\\n\"\n+                      + \"A valid S2S token issued to the name of a non-permitted API Client will also return the same.\"\n+        ),\n+        @ApiResponse(\n+            code = 404,\n+            message = \"Case type specified in `ctid` query parameter could not be found.\"\n+        ),\n+        @ApiResponse(\n+            code = 500,\n+            message = \"An unexpected situation that is not attributable to the user or API Client; or request is invalid. \"\n+                      + \"For some other types HTTP code 400 is returned instead.\\n\"\n+                      + \"Invalid request examples include:\\n\"\n+                      + \"- Malformed JSON request.\"\n+        )\n+    })\n+    @LogAudit(operationType = AuditOperationType.SEARCH_CASE, caseTypeIds = \"#caseTypeIds\",\n+        caseId = \"T(uk.gov.hmcts.ccd.v2.internal.controller.UICaseSearchController).buildCaseIds(#result)\")\n+    public ResponseEntity<CaseSearchResultViewResource> searchCases(\n+                                     @ApiParam(value = \"Comma-separated list of case type ID(s).\")\n+                                     @RequestParam(value = \"ctid\", required = false) List<String> caseTypeIds,\n+                                     @ApiParam(value = \"Use case for search. Examples include `WORKBASKET`, `SEARCH` or `ORGCASES`.\")\n+                                     @RequestParam(value = \"usecase\", required = false) final String useCase,\n+                                     @ApiParam(value = \"Native ElasticSearch Search API request. Please refer to the ElasticSearch official \"\n+                                         + \"documentation.\",\n+                                     example = \"{\\\"_source\\\":[\\\"data.TextField\\\"],\\\"query\\\":{\\\"match_all\\\":{}},\\\"size\\\":20,\\\"from\\\":1}\")\n+                                     @RequestBody String jsonSearchRequest) {\n+        Instant start = Instant.now();\n+\n+        String useCaseTransformed = Strings.isNullOrEmpty(useCase) ? useCase : useCase.toUpperCase();", "originalCommit": "110fed028a7d7d2802992692621cdd26ea264133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE5OTc1Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433199752", "bodyText": "I would keep the code method and classes agnostic to the external vs internal classification", "author": "mario-paniccia", "createdAt": "2020-06-01T12:15:58Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchCaseSearchOperation.java", "diffHunk": "@@ -43,22 +45,25 @@\n     private final CaseDetailsMapper caseDetailsMapper;\n     private final ApplicationParams applicationParams;\n     private final CaseSearchRequestSecurity caseSearchRequestSecurity;\n+    private final MergeDataToSearchCasesOperation mergeDataToSearchCasesOperation;\n \n     @Autowired\n     public ElasticsearchCaseSearchOperation(JestClient jestClient,\n                                             @Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n                                             CaseDetailsMapper caseDetailsMapper,\n                                             ApplicationParams applicationParams,\n-                                            CaseSearchRequestSecurity caseSearchRequestSecurity) {\n+                                            CaseSearchRequestSecurity caseSearchRequestSecurity,\n+                                            MergeDataToSearchCasesOperation mergeDataToSearchCasesOperation) {\n         this.jestClient = jestClient;\n         this.objectMapper = objectMapper;\n         this.caseDetailsMapper = caseDetailsMapper;\n         this.applicationParams = applicationParams;\n         this.caseSearchRequestSecurity = caseSearchRequestSecurity;\n+        this.mergeDataToSearchCasesOperation = mergeDataToSearchCasesOperation;\n     }\n \n     @Override\n-    public CaseSearchResult execute(CrossCaseTypeSearchRequest request) {\n+    public CaseSearchResult executeExternal(CrossCaseTypeSearchRequest request) {", "originalCommit": "110fed028a7d7d2802992692621cdd26ea264133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwMDQ2OQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433200469", "bodyText": "some elements are not suitable for the external API. for example the concept of use case, and the adding of the default sorting. If we want to keep this common class shared between the external and internal api, then let's keep only the things strictly in common", "author": "mario-paniccia", "createdAt": "2020-06-01T12:17:55Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.elasticsearch.common.Strings;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.data.user.UserService;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {\n+\n+    private static final String SORT = \"sort\";\n+    private static final String CASE_DATA_PREFIX = \"data.\";\n+    private static final String COLLECTION_VALUE_SUFFIX = \".value\";\n+    private static final String KEYWORD_SUFFIX = \".keyword\";\n+\n+    private final ObjectMapper objectMapper;\n+    private final ApplicationParams applicationParams;\n+    private final ObjectMapperService objectMapperService;\n+    private final SearchQueryOperation searchQueryOperation;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final UserService userService;\n+    private final ElasticsearchMappings elasticsearchMappings;\n+\n+    @Autowired\n+    public ElasticsearchQueryHelper(@Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n+                                    ApplicationParams applicationParams,\n+                                    ObjectMapperService objectMapperService,\n+                                    SearchQueryOperation searchQueryOperation,\n+                                    @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) GetCaseTypeOperation getCaseTypeOperation,\n+                                    UserService userService,\n+                                    ElasticsearchMappings elasticsearchMappings) {\n+        this.objectMapper = objectMapper;\n+        this.applicationParams = applicationParams;\n+        this.objectMapperService = objectMapperService;\n+        this.searchQueryOperation = searchQueryOperation;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.userService = userService;\n+        this.elasticsearchMappings = elasticsearchMappings;\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(List<String> caseTypeIds, String useCase, String jsonSearchRequest) {", "originalCommit": "110fed028a7d7d2802992692621cdd26ea264133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0ac227e8fe062b29622927c0da5978dcfaae51b6", "url": "https://github.com/hmcts/ccd-data-store-api/commit/0ac227e8fe062b29622927c0da5978dcfaae51b6", "message": "Merge branch 'develop' into RDM-8325", "committedDate": "2020-06-01T12:24:59Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIwNDMyNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433204324", "bodyText": "following the vision that we should delegate as much as possible to the external API, especially access control, I'd suggest here we call directly\nCaseDefinitionRepository.getCaseType(String caseTypeId);\nThe external search API will block the call for sure if the user has got no Read access to the case type. We just have to have a test for this and we are good. But I'd leave the external API to bother with all access control.", "author": "mario-paniccia", "createdAt": "2020-06-01T12:27:11Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,159 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.elasticsearch.common.Strings;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.data.user.UserService;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {\n+\n+    private static final String SORT = \"sort\";\n+    private static final String CASE_DATA_PREFIX = \"data.\";\n+    private static final String COLLECTION_VALUE_SUFFIX = \".value\";\n+    private static final String KEYWORD_SUFFIX = \".keyword\";\n+\n+    private final ObjectMapper objectMapper;\n+    private final ApplicationParams applicationParams;\n+    private final ObjectMapperService objectMapperService;\n+    private final SearchQueryOperation searchQueryOperation;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final UserService userService;\n+    private final ElasticsearchMappings elasticsearchMappings;\n+\n+    @Autowired\n+    public ElasticsearchQueryHelper(@Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n+                                    ApplicationParams applicationParams,\n+                                    ObjectMapperService objectMapperService,\n+                                    SearchQueryOperation searchQueryOperation,\n+                                    @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) GetCaseTypeOperation getCaseTypeOperation,\n+                                    UserService userService,\n+                                    ElasticsearchMappings elasticsearchMappings) {\n+        this.objectMapper = objectMapper;\n+        this.applicationParams = applicationParams;\n+        this.objectMapperService = objectMapperService;\n+        this.searchQueryOperation = searchQueryOperation;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.userService = userService;\n+        this.elasticsearchMappings = elasticsearchMappings;\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(List<String> caseTypeIds, String useCase, String jsonSearchRequest) {\n+        rejectBlackListedQuery(jsonSearchRequest);\n+\n+        final List<String> updatedCaseTypeIds = buildCaseTypeIds(caseTypeIds);\n+\n+        JsonNode searchRequest = stringToJsonNode(jsonSearchRequest);\n+        if (!Strings.isNullOrEmpty(useCase)) {\n+            applyConfiguredSort(searchRequest, updatedCaseTypeIds, useCase);\n+        }\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(updatedCaseTypeIds)\n+            .withSearchRequest(searchRequest)\n+            .build();\n+    }\n+\n+    private void applyConfiguredSort(JsonNode searchRequest, List<String> caseTypeIds, String useCase) {\n+        JsonNode sortNode = searchRequest.get(SORT);\n+        if (sortNode == null) {\n+            ArrayNode appliedSortsNode = buildSortNode(caseTypeIds, useCase);\n+            if (appliedSortsNode.size() > 0) {\n+                ((ObjectNode)searchRequest).set(SORT, appliedSortsNode);\n+            }\n+        }\n+    }\n+\n+    private ArrayNode buildSortNode(List<String> caseTypeIds, String useCase) {\n+        ArrayNode sortNode = objectMapper.createArrayNode();\n+        caseTypeIds.forEach(caseTypeId -> addCaseTypeSorts(caseTypeId, useCase, sortNode));\n+        return sortNode;\n+    }\n+\n+    private void addCaseTypeSorts(String caseTypeId, String useCase, ArrayNode sortNode) {\n+        Optional<CaseTypeDefinition> caseTypeOpt = getCaseTypeOperation.execute(caseTypeId, CAN_READ);", "originalCommit": "110fed028a7d7d2802992692621cdd26ea264133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a41e9f7a2150ce4b238daafe792b4cdd43c0caaf", "url": "https://github.com/hmcts/ccd-data-store-api/commit/a41e9f7a2150ce4b238daafe792b4cdd43c0caaf", "message": "Update in line with RDM-8350", "committedDate": "2020-06-01T12:48:48Z", "type": "commit"}, {"oid": "6512ad914d73578e1daacbd7a9edd8ca78eb866d", "url": "https://github.com/hmcts/ccd-data-store-api/commit/6512ad914d73578e1daacbd7a9edd8ca78eb866d", "message": "Mimic test from RDM-8350", "committedDate": "2020-06-01T12:59:18Z", "type": "commit"}, {"oid": "ffd687b296fdb876dfc6ddc42f01ca3585b58f7b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ffd687b296fdb876dfc6ddc42f01ca3585b58f7b", "message": "Checkstyle cleanup", "committedDate": "2020-06-01T13:08:56Z", "type": "commit"}, {"oid": "65432dc8cab3bbdc52586f35f385bd1b187fdac9", "url": "https://github.com/hmcts/ccd-data-store-api/commit/65432dc8cab3bbdc52586f35f385bd1b187fdac9", "message": "Preemptively add last_state_modified_date to case predefined mappings types", "committedDate": "2020-06-01T17:30:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5MjkzNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433692936", "bodyText": "why are these needed? I thought we only needed to know whether a CCD type is a defaultText", "author": "mario-paniccia", "createdAt": "2020-06-02T08:03:35Z", "path": "src/main/resources/application.properties", "diffHunk": "@@ -149,6 +149,19 @@ spring.elasticsearch.jest.read-timeout=10000ms\n management.health.elasticsearch.enabled=false\n management.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP, OUT_OF_SYNC, PROBLEM, COULD_NOT_CONNECT\n \n+# Elasticsearch mappings\n+elasticsearch.type-mappings.defaultText=Text, TextArea, FixedList, FixedListEdit, MultiSelectList, FixedRadioList, DynamicList\n+elasticsearch.type-mappings.defaultDouble=Number, MoneyGBP\n+elasticsearch.type-mappings.defaultDate=Date, Time, DateTime\n+elasticsearch.type-mappings.ccdPhoneUK=PhoneUK\n+elasticsearch.type-mappings.defaultKeyword=YesOrNo, Email, Postcode\n+elasticsearch.type-mappings.ccdDocument=Document", "originalCommit": "110fed028a7d7d2802992692621cdd26ea264133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5MzE3NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r433693175", "bodyText": "why are these needed? I thought we only needed to know whether a CCD metadata is a defaultText", "author": "mario-paniccia", "createdAt": "2020-06-02T08:04:04Z", "path": "src/main/resources/application.properties", "diffHunk": "@@ -149,6 +149,19 @@ spring.elasticsearch.jest.read-timeout=10000ms\n management.health.elasticsearch.enabled=false\n management.health.status.order=DOWN, OUT_OF_SERVICE, UNKNOWN, UP, OUT_OF_SYNC, PROBLEM, COULD_NOT_CONNECT\n \n+# Elasticsearch mappings\n+elasticsearch.type-mappings.defaultText=Text, TextArea, FixedList, FixedListEdit, MultiSelectList, FixedRadioList, DynamicList\n+elasticsearch.type-mappings.defaultDouble=Number, MoneyGBP\n+elasticsearch.type-mappings.defaultDate=Date, Time, DateTime\n+elasticsearch.type-mappings.ccdPhoneUK=PhoneUK\n+elasticsearch.type-mappings.defaultKeyword=YesOrNo, Email, Postcode\n+elasticsearch.type-mappings.ccdDocument=Document\n+elasticsearch.case-predefined-mappings.defaultText=reference, jurisdiction, state, case_type_id\n+elasticsearch.case-predefined-mappings.defaultLong=id\n+elasticsearch.case-predefined-mappings.defaultDate=created_date, last_modified\n+elasticsearch.case-predefined-mappings.defaultKeyword=security_classification\n+elasticsearch.case-predefined-mappings.disabled=@timestamp, @version, index_id", "originalCommit": "110fed028a7d7d2802992692621cdd26ea264133", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "adf28caf0a6a23df380d2be462697fd214b437bd", "url": "https://github.com/hmcts/ccd-data-store-api/commit/adf28caf0a6a23df380d2be462697fd214b437bd", "message": "RDM-8325 - Make ctid query param mandatory; refactoring", "committedDate": "2020-06-03T10:24:53Z", "type": "commit"}, {"oid": "cbfb563b54c3eaeaa06b5a1a5b67864c3b9a843b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/cbfb563b54c3eaeaa06b5a1a5b67864c3b9a843b", "message": "RDM-8325 - Update ctid to single value; refactoring", "committedDate": "2020-06-03T13:11:54Z", "type": "commit"}, {"oid": "7f95f00d03f8377abb1b4f9808a7d2b2ca0892e3", "url": "https://github.com/hmcts/ccd-data-store-api/commit/7f95f00d03f8377abb1b4f9808a7d2b2ca0892e3", "message": "RDM-8325 - Add usecase to response; refactoring", "committedDate": "2020-06-03T13:32:27Z", "type": "commit"}, {"oid": "b70e030ea094bcf80d4d634def0f7b00093b89ce", "url": "https://github.com/hmcts/ccd-data-store-api/commit/b70e030ea094bcf80d4d634def0f7b00093b89ce", "message": "Checkstyle", "committedDate": "2020-06-03T13:40:20Z", "type": "commit"}, {"oid": "ab325f02d6a0e2937399bb6cb023a8842e1dda9b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/ab325f02d6a0e2937399bb6cb023a8842e1dda9b", "message": "Minor refactor", "committedDate": "2020-06-03T13:55:35Z", "type": "commit"}, {"oid": "67676c8e6a6911f1d6f41465e49dda9bf24cae7b", "url": "https://github.com/hmcts/ccd-data-store-api/commit/67676c8e6a6911f1d6f41465e49dda9bf24cae7b", "message": "Revert previously edited files to originals following simplification", "committedDate": "2020-06-03T14:24:35Z", "type": "commit"}, {"oid": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "url": "https://github.com/hmcts/ccd-data-store-api/commit/588918d0569aa6a39311bba157ce8459d3dd0b9e", "message": "Method rename", "committedDate": "2020-06-03T14:34:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjQyOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435032428", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                 @ApiParam(value = \"Use case for search. Examples include `WORKBASKET`, `SEARCH` or `ORGCASES`. \"\n          \n          \n            \n                                                 @ApiParam(value = \"Use case for search. Examples include `WORKBASKET`, `SEARCH` or `orgCases`. \"", "author": "mario-paniccia", "createdAt": "2020-06-04T06:58:40Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import com.google.common.base.Strings;\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.CaseSearchResultGenerator;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Api(tags = {\"Elastic Based Search API\"})\n+@SwaggerDefinition(tags = {\n+    @Tag(name = \"Elastic Based Search API\", description = \"Internal ElasticSearch based search API\")\n+})\n+@Slf4j\n+public class UICaseSearchController {\n+\n+    private final CaseSearchOperation caseSearchOperation;\n+    private final ElasticsearchQueryHelper elasticsearchQueryHelper;\n+    private final CaseSearchResultGenerator caseSearchResultGenerator;\n+\n+    @Autowired\n+    public UICaseSearchController(\n+        @Qualifier(AuthorisedCaseSearchOperation.QUALIFIER) CaseSearchOperation caseSearchOperation,\n+        ElasticsearchQueryHelper elasticsearchQueryHelper,\n+        CaseSearchResultGenerator caseSearchResultGenerator) {\n+        this.caseSearchOperation = caseSearchOperation;\n+        this.elasticsearchQueryHelper = elasticsearchQueryHelper;\n+        this.caseSearchResultGenerator = caseSearchResultGenerator;\n+    }\n+\n+    @PostMapping(\n+        path = \"\",\n+        produces = MediaType.APPLICATION_JSON_VALUE\n+    )\n+    @ApiOperation(\n+        value = \"Search cases according to the provided ElasticSearch query. Supports searching a single case type and a use case.\"\n+    )\n+    @ApiResponses({\n+        @ApiResponse(\n+            code = 200,\n+            message = \"Success.\",\n+            response = CaseSearchResultViewResource.class\n+        ),\n+        @ApiResponse(\n+            code = 400,\n+            message = \"Request is invalid. For some other types HTTP code 500 is returned instead.\\n\"\n+                      + \"Examples include:\\n\"\n+                      + \"- Unsupported use case specified in `usecase` query parameter.\\n\"\n+                      + \"- No case type query parameter `ctid` provided.\\n\"\n+                      + \"- Query is missing required `query` field.\\n\"\n+                      + \"- Query includes blacklisted type.\\n\"\n+                      + \"- Query has failed in ElasticSearch - for example, a sort is attempted on an unknown/unmapped field.\"\n+        ),\n+        @ApiResponse(\n+            code = 401,\n+            message = \"Request doesn't include a valid `Authorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\"\n+        ),\n+        @ApiResponse(\n+            code = 403,\n+            message = \"Request doesn't include a valid `ServiceAuthorization` header. \"\n+                      + \"This applies to all missing, malformed & expired tokens.\\n\"\n+                      + \"A valid S2S token issued to the name of a non-permitted API Client will also return the same.\"\n+        ),\n+        @ApiResponse(\n+            code = 404,\n+            message = \"Case type specified in `ctid` query parameter could not be found.\"\n+        ),\n+        @ApiResponse(\n+            code = 500,\n+            message = \"An unexpected situation that is not attributable to the user or API Client; or request is invalid. \"\n+                      + \"For some other types HTTP code 400 is returned instead.\\n\"\n+                      + \"Invalid request examples include:\\n\"\n+                      + \"- Malformed JSON request.\"\n+        )\n+    })\n+    @ApiImplicitParams(\n+        @ApiImplicitParam(\n+            name = \"jsonSearchRequest\",\n+            value = \"Native ElasticSearch Search API request as a JSON string. \"\n+                    + \"Please refer to the following for further information:\\n\"\n+                    + \"- [Official ElasticSearch Documentation - Search APIs]\"\n+                    + \"(https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html)\\n\"\n+                    + \"- [Official ElasticSearch Documentation - Query DSL]\"\n+                    + \"(https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html)\\n\"\n+                    + \"- [CCD ElasticSearch API LLD]\"\n+                    + \"(https://tools.hmcts.net/confluence/pages/viewpage.action?pageId=843514186)\",\n+            example = \"{\\n\\t\\\"query\\\": { \\n\\t\\t\\\"match_all\\\": {} \\n\\t},\\n\\t\\\"sort\\\": [\\n\\t\\t{ \\\"reference.keyword\\\": \\\"asc\\\" }\\n\\t],\"\n+                      + \"\\n\\t\\\"size\\\": 20,\\n\\t\\\"from\\\": 1\\n}\",\n+            required = true\n+        )\n+    )\n+    @LogAudit(operationType = AuditOperationType.SEARCH_CASE, caseTypeIds = \"#caseTypeIds\",\n+        caseId = \"T(uk.gov.hmcts.ccd.v2.internal.controller.UICaseSearchController).buildCaseIds(#result)\")\n+    public ResponseEntity<CaseSearchResultViewResource> searchCases(\n+                                     @ApiParam(value = \"Case type ID for search.\", required = true)\n+                                     @RequestParam(value = \"ctid\") String caseTypeId,\n+                                     @ApiParam(value = \"Use case for search. Examples include `WORKBASKET`, `SEARCH` or `ORGCASES`. \"", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjU3Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435032576", "bodyText": "So that we don't give the impression that it has to be uppercase", "author": "mario-paniccia", "createdAt": "2020-06-04T06:59:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjQyOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzNTkwNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435035907", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Tag(name = \"Elastic Based Search API\", description = \"Internal ElasticSearch based search API\")\n          \n          \n            \n                @Tag(name = \"Elastic Based Search API\", description = \"Internal ElasticSearch based cases search API. It returns extra information on case fields required by the UI for display purposes \")", "author": "mario-paniccia", "createdAt": "2020-06-04T07:05:54Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/controller/UICaseSearchController.java", "diffHunk": "@@ -0,0 +1,139 @@\n+package uk.gov.hmcts.ccd.v2.internal.controller;\n+\n+import com.google.common.base.Strings;\n+import io.swagger.annotations.*;\n+import lombok.extern.slf4j.*;\n+import org.springframework.beans.factory.annotation.*;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import uk.gov.hmcts.ccd.auditlog.AuditOperationType;\n+import uk.gov.hmcts.ccd.auditlog.LogAudit;\n+import uk.gov.hmcts.ccd.domain.model.search.*;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.service.search.CaseSearchResultGenerator;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.search.elasticsearch.security.*;\n+import uk.gov.hmcts.ccd.v2.internal.resource.*;\n+\n+import java.time.*;\n+import java.util.stream.Collectors;\n+\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.CASE_ID_SEPARATOR;\n+import static uk.gov.hmcts.ccd.auditlog.aop.AuditContext.MAX_CASE_IDS_LIST;\n+\n+@RestController\n+@RequestMapping(path = \"/internal/searchCases\")\n+@Api(tags = {\"Elastic Based Search API\"})\n+@SwaggerDefinition(tags = {\n+    @Tag(name = \"Elastic Based Search API\", description = \"Internal ElasticSearch based search API\")", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzNjAwOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435036008", "bodyText": "or something similar :)", "author": "mario-paniccia", "createdAt": "2020-06-04T07:06:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzNTkwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1OTI2MA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435059260", "bodyText": "my IDE flag this as unused. Can we remove?", "author": "mario-paniccia", "createdAt": "2020-06-04T07:50:33Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -87,25 +73,6 @@ public CaseSearchResult searchCases(\n         return result;\n     }\n \n-    private JsonNode stringToJsonNode(String jsonSearchRequest) {\n-        return objectMapperService.convertStringToObject(jsonSearchRequest, JsonNode.class);\n-    }\n-\n-    private void rejectBlackListedQuery(String jsonSearchRequest) {\n-        List<String> blackListedQueries = applicationParams.getSearchBlackList();\n-        Optional<String> blackListedQueryOpt = blackListedQueries\n-            .stream()\n-            .filter(blacklisted -> {\n-                Pattern p = Pattern.compile(\"\\\\b\" + blacklisted + \"\\\\b\");\n-                Matcher m = p.matcher(jsonSearchRequest);\n-                return m.find();\n-            })\n-            .findFirst();\n-        blackListedQueryOpt.ifPresent(blacklisted -> {\n-            throw new BadSearchRequest(String.format(\"Query of type '%s' is not allowed\", blacklisted));\n-        });\n-    }\n-\n     public static String buildCaseIds(CaseSearchResult caseSearchResult) {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg2NTkxMA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435865910", "bodyText": "This is still required (reference by string) for log and audit.", "author": "danlysiak", "createdAt": "2020-06-05T11:42:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1OTI2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA2Mjc5Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435062796", "bodyText": "I like the idea of having common code in ElasticsearchQueryHelper but because we are moving everything in there the controllers are almost empty and ElasticsearchQueryHelper is quite complex. We could improve things by moving the code in prepareRequest back to the controllers. And leave the utility methods common to both in ElasticsearchQueryHelper. I prefer to see in the controller method itself the steps it's taking.", "author": "mario-paniccia", "createdAt": "2020-06-04T07:56:54Z", "path": "src/main/java/uk/gov/hmcts/ccd/endpoint/std/CaseSearchEndpoint.java", "diffHunk": "@@ -67,17 +58,12 @@ public CaseSearchResult searchCases(\n             + \"the search results will contain only metadata by default (no case field data). To get case data in the \"\n             + \"search results, please state the alias fields to be returned in the _source property for e.g.\"\n             + \" \\\"_source\\\":[\\\"alias.customer\\\",\\\"alias.postcode\\\"]\",\n-                  required = true)\n+            required = true)\n         @RequestBody String jsonSearchRequest) {\n \n         Instant start = Instant.now();\n \n-        rejectBlackListedQuery(jsonSearchRequest);\n-\n-        CrossCaseTypeSearchRequest request = new CrossCaseTypeSearchRequest.Builder()\n-            .withCaseTypes(caseTypeIds)\n-            .withSearchRequest(stringToJsonNode(jsonSearchRequest))\n-            .build();\n+        CrossCaseTypeSearchRequest request = elasticsearchQueryHelper.prepareRequest(caseTypeIds, jsonSearchRequest);", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3MDI3NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435070274", "bodyText": "minor: if we moved this code inside the CaseSearchOperation.execute we could have the external search API be completely responsible to create the CrossCaseTypeSearchRequest. We just delegate to the external. What do you think? too much stuff to move around?\nMy point is that I would rather have the internal delegate stuff as much as possible to the external.", "author": "mario-paniccia", "createdAt": "2020-06-04T08:10:03Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.google.common.base.Strings;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {\n+\n+    private static final String SORT = \"sort\";\n+    private static final String CASE_DATA_PREFIX = \"data.\";\n+    private static final String COLLECTION_VALUE_SUFFIX = \".value\";\n+    private static final String KEYWORD_SUFFIX = \".keyword\";\n+\n+    private final ObjectMapper objectMapper;\n+    private final ApplicationParams applicationParams;\n+    private final ObjectMapperService objectMapperService;\n+    private final SearchQueryOperation searchQueryOperation;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final ElasticsearchMappings elasticsearchMappings;\n+\n+    @Autowired\n+    public ElasticsearchQueryHelper(@Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n+                                    ApplicationParams applicationParams,\n+                                    ObjectMapperService objectMapperService,\n+                                    SearchQueryOperation searchQueryOperation,\n+                                    @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) GetCaseTypeOperation getCaseTypeOperation,\n+                                    ElasticsearchMappings elasticsearchMappings) {\n+        this.objectMapper = objectMapper;\n+        this.applicationParams = applicationParams;\n+        this.objectMapperService = objectMapperService;\n+        this.searchQueryOperation = searchQueryOperation;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.elasticsearchMappings = elasticsearchMappings;\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(List<String> caseTypeIds, String jsonSearchRequest) {\n+        if (CollectionUtils.isEmpty(caseTypeIds)) {\n+            throw new BadSearchRequest(\"At least one case type ID is required.\");\n+        }\n+\n+        JsonNode searchRequest = validateAndConvertRequest(jsonSearchRequest);\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(caseTypeIds)\n+            .withSearchRequest(searchRequest)\n+            .build();", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MTY1Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r436051657", "bodyText": "Did look into this potential but it did require more than expected so I have just put back to the controllers for now as per other comments.", "author": "danlysiak", "createdAt": "2020-06-05T17:08:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3MDI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA3OTI5Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435079296", "bodyText": "I would strongly suggest we introduce a separated class that deals only with manipulation of the JSON response. Nothing else.\nFor example a ElasticSearchRequest class. With methods like:\nnew ElasticSearchRequest(jsonRequest)\nesr.toJson()\nesr.isSorted()\nesr.addSorting(fields)\nFor now we can use it here only and then pass down to the external API the json request by calling .toJson(). So we don't have to change much code", "author": "mario-paniccia", "createdAt": "2020-06-04T08:25:03Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.google.common.base.Strings;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {\n+\n+    private static final String SORT = \"sort\";\n+    private static final String CASE_DATA_PREFIX = \"data.\";\n+    private static final String COLLECTION_VALUE_SUFFIX = \".value\";\n+    private static final String KEYWORD_SUFFIX = \".keyword\";\n+\n+    private final ObjectMapper objectMapper;\n+    private final ApplicationParams applicationParams;\n+    private final ObjectMapperService objectMapperService;\n+    private final SearchQueryOperation searchQueryOperation;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final ElasticsearchMappings elasticsearchMappings;\n+\n+    @Autowired\n+    public ElasticsearchQueryHelper(@Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n+                                    ApplicationParams applicationParams,\n+                                    ObjectMapperService objectMapperService,\n+                                    SearchQueryOperation searchQueryOperation,\n+                                    @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) GetCaseTypeOperation getCaseTypeOperation,\n+                                    ElasticsearchMappings elasticsearchMappings) {\n+        this.objectMapper = objectMapper;\n+        this.applicationParams = applicationParams;\n+        this.objectMapperService = objectMapperService;\n+        this.searchQueryOperation = searchQueryOperation;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.elasticsearchMappings = elasticsearchMappings;\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(List<String> caseTypeIds, String jsonSearchRequest) {\n+        if (CollectionUtils.isEmpty(caseTypeIds)) {\n+            throw new BadSearchRequest(\"At least one case type ID is required.\");\n+        }\n+\n+        JsonNode searchRequest = validateAndConvertRequest(jsonSearchRequest);\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(caseTypeIds)\n+            .withSearchRequest(searchRequest)\n+            .build();\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(String caseTypeId, String jsonSearchRequest, String useCase) {\n+        if (Strings.isNullOrEmpty(caseTypeId)) {\n+            throw new BadSearchRequest(\"Case type ID is required.\");\n+        }\n+\n+        JsonNode searchRequest = validateAndConvertRequest(jsonSearchRequest);\n+        applyConfiguredSort(searchRequest, caseTypeId, useCase);\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(Collections.singletonList(caseTypeId))\n+            .withSearchRequest(searchRequest)\n+            .build();\n+    }\n+\n+    private void applyConfiguredSort(JsonNode searchRequest, String caseTypeId, String useCase) {\n+        JsonNode sortNode = searchRequest.get(SORT);\n+        if (sortNode == null || useCase == null) {\n+            ArrayNode appliedSortsNode = buildSortNode(caseTypeId, useCase);\n+            if (appliedSortsNode.size() > 0) {\n+                ((ObjectNode)searchRequest).set(SORT, appliedSortsNode);\n+            }\n+        }", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTAxNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435081017", "bodyText": "this class is too big, because is doing too many unrelated things. Like applying sorting, validation, Json manipulation. We need to apply separation of concerns and move some stuff out to other helper classes. Some thing can be moved back to the controller.", "author": "mario-paniccia", "createdAt": "2020-06-04T08:27:54Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.google.common.base.Strings;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2OTU3Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435569577", "bodyText": "minor: probably we could have considered removing the use case so we cache the whole SearchCasesResultFields tab to decrease the network calls when requesting different use cases", "author": "mario-paniccia", "createdAt": "2020-06-04T21:43:10Z", "path": "src/main/java/uk/gov/hmcts/ccd/data/definition/CachedUIDefinitionGateway.java", "diffHunk": "@@ -43,6 +43,13 @@ public SearchResult getSearchResult(final int version, final String caseTypeId)\n         return httpUiDefinitionGateway.getSearchResult(version, caseTypeId);\n     }\n \n+    @Override\n+    @Cacheable(\"searchCasesResultCache\")\n+    public SearchResult getSearchCasesResultDefinition(int version, String caseTypeId, String useCase) {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDA5NQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435570095", "bodyText": "can we find a better name? maybe getNestedCaseFieldByPath?\ncan you also add a little javadoc with description here and on the other methods too please", "author": "mario-paniccia", "createdAt": "2020-06-04T21:44:23Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/common/CaseFieldPathUtils.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package uk.gov.hmcts.ccd.domain.model.common;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.apache.commons.lang3.StringUtils;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseFieldDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+\n+import java.util.*;\n+\n+import static java.util.stream.Collectors.toList;\n+\n+public class CaseFieldPathUtils {\n+\n+    private static final String SEPARATOR = \".\";\n+    private static final String SEPARATOR_REGEX = \"\\\\.\";\n+\n+    private CaseFieldPathUtils() {\n+    }\n+\n+    public static Optional<CommonField> getFieldDefinitionByPath(CaseTypeDefinition caseTypeDefinition, String path) {\n+        if (StringUtils.isBlank(path)) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = getPathElements(path);\n+\n+        Optional<CaseFieldDefinition> topLevelCaseField = caseTypeDefinition.getCaseField(pathElements.get(0));\n+\n+        return topLevelCaseField.flatMap(field -> getFieldDefinitionByPath(field, getPathElementsTailAsString(pathElements)));\n+    }\n+\n+    public static Optional<CommonField> getFieldDefinitionByPath(CommonField commonField, String path) {\n+        if (StringUtils.isBlank(path)) {\n+            return Optional.of(commonField);\n+        }\n+\n+        return getFieldDefinitionByPath(commonField.getFieldTypeDefinition(), path, false);\n+    }\n+\n+    public static Optional<CommonField> getFieldDefinitionByPath(FieldTypeDefinition fieldTypeDefinition,\n+                                                                 String path,\n+                                                                 boolean pathIncludesParent) {\n+        if (StringUtils.isBlank(path) || fieldTypeDefinition.getChildren().isEmpty() || (pathIncludesParent && splitPath(path).length == 1)) {\n+            return Optional.empty();\n+        }\n+        List<String> pathElements = getPathElements(path);\n+\n+        return reduce(fieldTypeDefinition.getChildren(), pathIncludesParent ? getPathElementsTail(pathElements) : pathElements);\n+    }\n+\n+    public static JsonNode getCaseFieldNodeByPath(JsonNode node, String path) {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDI4Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435570286", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class CaseSearchResultGenerator {\n          \n          \n            \n            public class CaseSearchResultViewGenerator {", "author": "mario-paniccia", "createdAt": "2020-06-04T21:44:50Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDY5Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435570696", "bodyText": "minor: sorry Dan I changed my mind only if it's not a big change can we remove use case? I should have applied YAGNI", "author": "mario-paniccia", "createdAt": "2020-06-04T21:45:45Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {\n+\n+    private final UserRepository userRepository;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final SearchQueryOperation searchQueryOperation;\n+\n+    public CaseSearchResultGenerator(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                     @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) final GetCaseTypeOperation getCaseTypeOperation,\n+                                     final SearchQueryOperation searchQueryOperation) {\n+        this.userRepository = userRepository;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.searchQueryOperation = searchQueryOperation;\n+    }\n+\n+    public UICaseSearchResult execute(final String caseTypeId,\n+                                      final CaseSearchResult caseSearchResult,\n+                                      final String useCase) {\n+        // TODO: Filter out fields from result that haven't been requested before returning (RDM-8556)\n+        return new UICaseSearchResult(\n+            buildHeaders(caseTypeId, useCase, caseSearchResult),\n+            buildItems(useCase, caseSearchResult),\n+            caseSearchResult.getTotal(),\n+            useCase", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MTMwMQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435571301", "bodyText": "I find it very confusing that once there results are already returned by the searchQueryOperation then we are then calling it again during the\ngeneration of the final response", "author": "mario-paniccia", "createdAt": "2020-06-04T21:47:03Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {\n+\n+    private final UserRepository userRepository;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final SearchQueryOperation searchQueryOperation;\n+\n+    public CaseSearchResultGenerator(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                     @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) final GetCaseTypeOperation getCaseTypeOperation,\n+                                     final SearchQueryOperation searchQueryOperation) {\n+        this.userRepository = userRepository;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.searchQueryOperation = searchQueryOperation;\n+    }\n+\n+    public UICaseSearchResult execute(final String caseTypeId,\n+                                      final CaseSearchResult caseSearchResult,\n+                                      final String useCase) {\n+        // TODO: Filter out fields from result that haven't been requested before returning (RDM-8556)\n+        return new UICaseSearchResult(\n+            buildHeaders(caseTypeId, useCase, caseSearchResult),\n+            buildItems(useCase, caseSearchResult),\n+            caseSearchResult.getTotal(),\n+            useCase\n+        );\n+    }\n+\n+    private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewItem> items = new ArrayList<>();\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            getCaseTypeDefinition(caseDetails.getCaseTypeId()).ifPresent(caseType -> {\n+                final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MjAwNg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435572006", "bodyText": "I wouldn't call the whole operation. I think we can simplify things by just getting it from the DefRepo? The external API will take care of access control. Important thing that we test this.", "author": "mario-paniccia", "createdAt": "2020-06-04T21:48:43Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {\n+\n+    private final UserRepository userRepository;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final SearchQueryOperation searchQueryOperation;\n+\n+    public CaseSearchResultGenerator(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                     @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) final GetCaseTypeOperation getCaseTypeOperation,\n+                                     final SearchQueryOperation searchQueryOperation) {\n+        this.userRepository = userRepository;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.searchQueryOperation = searchQueryOperation;\n+    }\n+\n+    public UICaseSearchResult execute(final String caseTypeId,\n+                                      final CaseSearchResult caseSearchResult,\n+                                      final String useCase) {\n+        // TODO: Filter out fields from result that haven't been requested before returning (RDM-8556)\n+        return new UICaseSearchResult(\n+            buildHeaders(caseTypeId, useCase, caseSearchResult),\n+            buildItems(useCase, caseSearchResult),\n+            caseSearchResult.getTotal(),\n+            useCase\n+        );\n+    }\n+\n+    private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewItem> items = new ArrayList<>();\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            getCaseTypeDefinition(caseDetails.getCaseTypeId()).ifPresent(caseType -> {\n+                final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+                items.add(buildSearchResultViewItem(caseDetails, caseType, searchResult));\n+            });\n+        });\n+\n+        return items;\n+    }\n+\n+    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId, String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewHeaderGroup> headers = new ArrayList<>();\n+        getCaseTypeDefinition(caseTypeId).ifPresent(caseType -> {\n+            SearchResultViewHeaderGroup caseSearchHeader = buildHeader(useCase, caseSearchResult, caseTypeId, caseType);\n+            headers.add(caseSearchHeader);\n+        });\n+\n+        return headers;\n+    }\n+\n+    private Optional<CaseTypeDefinition> getCaseTypeDefinition(String caseTypeId) {\n+        return getCaseTypeOperation.execute(caseTypeId, CAN_READ);", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MjMwNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435572304", "bodyText": "how come we are building new hashmaps?", "author": "mario-paniccia", "createdAt": "2020-06-04T21:49:25Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {\n+\n+    private final UserRepository userRepository;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final SearchQueryOperation searchQueryOperation;\n+\n+    public CaseSearchResultGenerator(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                     @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) final GetCaseTypeOperation getCaseTypeOperation,\n+                                     final SearchQueryOperation searchQueryOperation) {\n+        this.userRepository = userRepository;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.searchQueryOperation = searchQueryOperation;\n+    }\n+\n+    public UICaseSearchResult execute(final String caseTypeId,\n+                                      final CaseSearchResult caseSearchResult,\n+                                      final String useCase) {\n+        // TODO: Filter out fields from result that haven't been requested before returning (RDM-8556)\n+        return new UICaseSearchResult(\n+            buildHeaders(caseTypeId, useCase, caseSearchResult),\n+            buildItems(useCase, caseSearchResult),\n+            caseSearchResult.getTotal(),\n+            useCase\n+        );\n+    }\n+\n+    private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewItem> items = new ArrayList<>();\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            getCaseTypeDefinition(caseDetails.getCaseTypeId()).ifPresent(caseType -> {\n+                final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+                items.add(buildSearchResultViewItem(caseDetails, caseType, searchResult));\n+            });\n+        });\n+\n+        return items;\n+    }\n+\n+    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId, String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewHeaderGroup> headers = new ArrayList<>();\n+        getCaseTypeDefinition(caseTypeId).ifPresent(caseType -> {\n+            SearchResultViewHeaderGroup caseSearchHeader = buildHeader(useCase, caseSearchResult, caseTypeId, caseType);\n+            headers.add(caseSearchHeader);\n+        });\n+\n+        return headers;\n+    }\n+\n+    private Optional<CaseTypeDefinition> getCaseTypeDefinition(String caseTypeId) {\n+        return getCaseTypeOperation.execute(caseTypeId, CAN_READ);\n+    }\n+\n+    private SearchResultViewHeaderGroup buildHeader(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, CaseTypeDefinition caseType) {\n+        final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+        if (searchResult.getFields().length == 0) {\n+            throw new BadSearchRequest(String.format(\"The provided use case '%s' is unsupported for case type '%s'.\",\n+                useCase, caseType.getId()));\n+        }\n+        return new SearchResultViewHeaderGroup(\n+            new HeaderGroupMetadata(caseType.getJurisdictionId(), caseTypeId),\n+            buildSearchResultViewColumns(caseType, searchResult),\n+            caseSearchResult.getCaseReferences(caseTypeId)\n+        );\n+    }\n+\n+    private List<SearchResultViewHeader> buildSearchResultViewColumns(final CaseTypeDefinition caseTypeDefinition,\n+                                                                      final SearchResult searchResult) {\n+        final HashSet<String> addedFields = new HashSet<>();\n+\n+        return Arrays.stream(searchResult.getFields())\n+            .flatMap(searchResultField -> caseTypeDefinition.getCaseFieldDefinitions().stream()\n+                .filter(caseField -> caseField.getId().equals(searchResultField.getCaseFieldId()))\n+                .filter(caseField -> filterDistinctFieldsByRole(addedFields, searchResultField))\n+                .map(caseField -> buildSearchResultViewColumn(searchResultField, caseField))\n+            )\n+            .collect(Collectors.toList());\n+    }\n+\n+    private SearchResultViewHeader buildSearchResultViewColumn(final SearchResultField searchResultField,\n+                                                               final CaseFieldDefinition caseFieldDefinition) {\n+        CommonField commonField = commonField(searchResultField, caseFieldDefinition);\n+        return new SearchResultViewHeader(\n+            searchResultField.buildCaseFieldId(),\n+            commonField.getFieldTypeDefinition(),\n+            searchResultField.getLabel(),\n+            searchResultField.getDisplayOrder(),\n+            searchResultField.isMetadata(),\n+            displayContextParameter(searchResultField, commonField));\n+    }\n+\n+    private boolean filterDistinctFieldsByRole(final HashSet<String> addedFields, final SearchResultField resultField) {\n+        String id = resultField.buildCaseFieldId();\n+        if (addedFields.contains(id)) {\n+            return false;\n+        } else {\n+            if (StringUtils.isEmpty(resultField.getRole()) || userRepository.getUserRoles().contains(resultField.getRole())) {\n+                addedFields.add(id);\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private CommonField commonField(SearchResultField searchResultField, CaseFieldDefinition caseFieldDefinition) {\n+        return caseFieldDefinition.getComplexFieldNestedField(searchResultField.getCaseFieldPath())\n+            .orElseThrow(() ->\n+                new BadRequestException(format(\"CaseField %s has no nested elements with code %s.\",\n+                    caseFieldDefinition.getId(), searchResultField.getCaseFieldPath())));\n+    }\n+\n+    private String displayContextParameter(SearchResultField searchResultField, CommonField commonField) {\n+        return searchResultField.getDisplayContextParameter() == null\n+            ? commonField.getDisplayContextParameter()\n+            : searchResultField.getDisplayContextParameter();\n+    }\n+\n+    private SearchResultViewItem buildSearchResultViewItem(final CaseDetails caseDetails,\n+                                                           final CaseTypeDefinition caseTypeDefinition,\n+                                                           final SearchResult searchResult) {\n+\n+        Map<String, JsonNode> caseData = new HashMap<>(caseDetails.getData());", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NjAzNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435876037", "bodyText": "Inherited behaviour from MergeDataToSearchResultOperation. It does look redundant here so removing \ud83d\udc4d", "author": "danlysiak", "createdAt": "2020-06-05T12:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MjMwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3Mjg0Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435572843", "bodyText": "not sure I understand why we are getting the fields of type label for here. Furthermore, shall we rename the method to\ngetLabelFieldTypesFromCaseFields() or sim? unless I'm misunderstanding what this is doing", "author": "mario-paniccia", "createdAt": "2020-06-04T21:50:34Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {\n+\n+    private final UserRepository userRepository;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final SearchQueryOperation searchQueryOperation;\n+\n+    public CaseSearchResultGenerator(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                     @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) final GetCaseTypeOperation getCaseTypeOperation,\n+                                     final SearchQueryOperation searchQueryOperation) {\n+        this.userRepository = userRepository;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.searchQueryOperation = searchQueryOperation;\n+    }\n+\n+    public UICaseSearchResult execute(final String caseTypeId,\n+                                      final CaseSearchResult caseSearchResult,\n+                                      final String useCase) {\n+        // TODO: Filter out fields from result that haven't been requested before returning (RDM-8556)\n+        return new UICaseSearchResult(\n+            buildHeaders(caseTypeId, useCase, caseSearchResult),\n+            buildItems(useCase, caseSearchResult),\n+            caseSearchResult.getTotal(),\n+            useCase\n+        );\n+    }\n+\n+    private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewItem> items = new ArrayList<>();\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            getCaseTypeDefinition(caseDetails.getCaseTypeId()).ifPresent(caseType -> {\n+                final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+                items.add(buildSearchResultViewItem(caseDetails, caseType, searchResult));\n+            });\n+        });\n+\n+        return items;\n+    }\n+\n+    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId, String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewHeaderGroup> headers = new ArrayList<>();\n+        getCaseTypeDefinition(caseTypeId).ifPresent(caseType -> {\n+            SearchResultViewHeaderGroup caseSearchHeader = buildHeader(useCase, caseSearchResult, caseTypeId, caseType);\n+            headers.add(caseSearchHeader);\n+        });\n+\n+        return headers;\n+    }\n+\n+    private Optional<CaseTypeDefinition> getCaseTypeDefinition(String caseTypeId) {\n+        return getCaseTypeOperation.execute(caseTypeId, CAN_READ);\n+    }\n+\n+    private SearchResultViewHeaderGroup buildHeader(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, CaseTypeDefinition caseType) {\n+        final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+        if (searchResult.getFields().length == 0) {\n+            throw new BadSearchRequest(String.format(\"The provided use case '%s' is unsupported for case type '%s'.\",\n+                useCase, caseType.getId()));\n+        }\n+        return new SearchResultViewHeaderGroup(\n+            new HeaderGroupMetadata(caseType.getJurisdictionId(), caseTypeId),\n+            buildSearchResultViewColumns(caseType, searchResult),\n+            caseSearchResult.getCaseReferences(caseTypeId)\n+        );\n+    }\n+\n+    private List<SearchResultViewHeader> buildSearchResultViewColumns(final CaseTypeDefinition caseTypeDefinition,\n+                                                                      final SearchResult searchResult) {\n+        final HashSet<String> addedFields = new HashSet<>();\n+\n+        return Arrays.stream(searchResult.getFields())\n+            .flatMap(searchResultField -> caseTypeDefinition.getCaseFieldDefinitions().stream()\n+                .filter(caseField -> caseField.getId().equals(searchResultField.getCaseFieldId()))\n+                .filter(caseField -> filterDistinctFieldsByRole(addedFields, searchResultField))\n+                .map(caseField -> buildSearchResultViewColumn(searchResultField, caseField))\n+            )\n+            .collect(Collectors.toList());\n+    }\n+\n+    private SearchResultViewHeader buildSearchResultViewColumn(final SearchResultField searchResultField,\n+                                                               final CaseFieldDefinition caseFieldDefinition) {\n+        CommonField commonField = commonField(searchResultField, caseFieldDefinition);\n+        return new SearchResultViewHeader(\n+            searchResultField.buildCaseFieldId(),\n+            commonField.getFieldTypeDefinition(),\n+            searchResultField.getLabel(),\n+            searchResultField.getDisplayOrder(),\n+            searchResultField.isMetadata(),\n+            displayContextParameter(searchResultField, commonField));\n+    }\n+\n+    private boolean filterDistinctFieldsByRole(final HashSet<String> addedFields, final SearchResultField resultField) {\n+        String id = resultField.buildCaseFieldId();\n+        if (addedFields.contains(id)) {\n+            return false;\n+        } else {\n+            if (StringUtils.isEmpty(resultField.getRole()) || userRepository.getUserRoles().contains(resultField.getRole())) {\n+                addedFields.add(id);\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private CommonField commonField(SearchResultField searchResultField, CaseFieldDefinition caseFieldDefinition) {\n+        return caseFieldDefinition.getComplexFieldNestedField(searchResultField.getCaseFieldPath())\n+            .orElseThrow(() ->\n+                new BadRequestException(format(\"CaseField %s has no nested elements with code %s.\",\n+                    caseFieldDefinition.getId(), searchResultField.getCaseFieldPath())));\n+    }\n+\n+    private String displayContextParameter(SearchResultField searchResultField, CommonField commonField) {\n+        return searchResultField.getDisplayContextParameter() == null\n+            ? commonField.getDisplayContextParameter()\n+            : searchResultField.getDisplayContextParameter();\n+    }\n+\n+    private SearchResultViewItem buildSearchResultViewItem(final CaseDetails caseDetails,\n+                                                           final CaseTypeDefinition caseTypeDefinition,\n+                                                           final SearchResult searchResult) {\n+\n+        Map<String, JsonNode> caseData = new HashMap<>(caseDetails.getData());\n+        Map<String, Object> caseMetadata = new HashMap<>(caseDetails.getMetadata());\n+        Map<String, TextNode> labels = caseTypeDefinition.getLabelsFromCaseFields();", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3Njk5NA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435876994", "bodyText": "Inherited behaviour from MergeDataToSearchResultOperation. I'm a bit hesitant to remove in case of breaking anything the UI is depending on, so will leave unless we see at a later date that definitely not required.", "author": "danlysiak", "createdAt": "2020-06-05T12:06:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3Mjg0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MzA2MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435573061", "bodyText": "we can just call caseDetails.getId(). We will never be searching on draft cases that are the ones with  no id", "author": "mario-paniccia", "createdAt": "2020-06-04T21:51:03Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {\n+\n+    private final UserRepository userRepository;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final SearchQueryOperation searchQueryOperation;\n+\n+    public CaseSearchResultGenerator(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                     @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) final GetCaseTypeOperation getCaseTypeOperation,\n+                                     final SearchQueryOperation searchQueryOperation) {\n+        this.userRepository = userRepository;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.searchQueryOperation = searchQueryOperation;\n+    }\n+\n+    public UICaseSearchResult execute(final String caseTypeId,\n+                                      final CaseSearchResult caseSearchResult,\n+                                      final String useCase) {\n+        // TODO: Filter out fields from result that haven't been requested before returning (RDM-8556)\n+        return new UICaseSearchResult(\n+            buildHeaders(caseTypeId, useCase, caseSearchResult),\n+            buildItems(useCase, caseSearchResult),\n+            caseSearchResult.getTotal(),\n+            useCase\n+        );\n+    }\n+\n+    private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewItem> items = new ArrayList<>();\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            getCaseTypeDefinition(caseDetails.getCaseTypeId()).ifPresent(caseType -> {\n+                final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+                items.add(buildSearchResultViewItem(caseDetails, caseType, searchResult));\n+            });\n+        });\n+\n+        return items;\n+    }\n+\n+    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId, String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewHeaderGroup> headers = new ArrayList<>();\n+        getCaseTypeDefinition(caseTypeId).ifPresent(caseType -> {\n+            SearchResultViewHeaderGroup caseSearchHeader = buildHeader(useCase, caseSearchResult, caseTypeId, caseType);\n+            headers.add(caseSearchHeader);\n+        });\n+\n+        return headers;\n+    }\n+\n+    private Optional<CaseTypeDefinition> getCaseTypeDefinition(String caseTypeId) {\n+        return getCaseTypeOperation.execute(caseTypeId, CAN_READ);\n+    }\n+\n+    private SearchResultViewHeaderGroup buildHeader(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, CaseTypeDefinition caseType) {\n+        final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+        if (searchResult.getFields().length == 0) {\n+            throw new BadSearchRequest(String.format(\"The provided use case '%s' is unsupported for case type '%s'.\",\n+                useCase, caseType.getId()));\n+        }\n+        return new SearchResultViewHeaderGroup(\n+            new HeaderGroupMetadata(caseType.getJurisdictionId(), caseTypeId),\n+            buildSearchResultViewColumns(caseType, searchResult),\n+            caseSearchResult.getCaseReferences(caseTypeId)\n+        );\n+    }\n+\n+    private List<SearchResultViewHeader> buildSearchResultViewColumns(final CaseTypeDefinition caseTypeDefinition,\n+                                                                      final SearchResult searchResult) {\n+        final HashSet<String> addedFields = new HashSet<>();\n+\n+        return Arrays.stream(searchResult.getFields())\n+            .flatMap(searchResultField -> caseTypeDefinition.getCaseFieldDefinitions().stream()\n+                .filter(caseField -> caseField.getId().equals(searchResultField.getCaseFieldId()))\n+                .filter(caseField -> filterDistinctFieldsByRole(addedFields, searchResultField))\n+                .map(caseField -> buildSearchResultViewColumn(searchResultField, caseField))\n+            )\n+            .collect(Collectors.toList());\n+    }\n+\n+    private SearchResultViewHeader buildSearchResultViewColumn(final SearchResultField searchResultField,\n+                                                               final CaseFieldDefinition caseFieldDefinition) {\n+        CommonField commonField = commonField(searchResultField, caseFieldDefinition);\n+        return new SearchResultViewHeader(\n+            searchResultField.buildCaseFieldId(),\n+            commonField.getFieldTypeDefinition(),\n+            searchResultField.getLabel(),\n+            searchResultField.getDisplayOrder(),\n+            searchResultField.isMetadata(),\n+            displayContextParameter(searchResultField, commonField));\n+    }\n+\n+    private boolean filterDistinctFieldsByRole(final HashSet<String> addedFields, final SearchResultField resultField) {\n+        String id = resultField.buildCaseFieldId();\n+        if (addedFields.contains(id)) {\n+            return false;\n+        } else {\n+            if (StringUtils.isEmpty(resultField.getRole()) || userRepository.getUserRoles().contains(resultField.getRole())) {\n+                addedFields.add(id);\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private CommonField commonField(SearchResultField searchResultField, CaseFieldDefinition caseFieldDefinition) {\n+        return caseFieldDefinition.getComplexFieldNestedField(searchResultField.getCaseFieldPath())\n+            .orElseThrow(() ->\n+                new BadRequestException(format(\"CaseField %s has no nested elements with code %s.\",\n+                    caseFieldDefinition.getId(), searchResultField.getCaseFieldPath())));\n+    }\n+\n+    private String displayContextParameter(SearchResultField searchResultField, CommonField commonField) {\n+        return searchResultField.getDisplayContextParameter() == null\n+            ? commonField.getDisplayContextParameter()\n+            : searchResultField.getDisplayContextParameter();\n+    }\n+\n+    private SearchResultViewItem buildSearchResultViewItem(final CaseDetails caseDetails,\n+                                                           final CaseTypeDefinition caseTypeDefinition,\n+                                                           final SearchResult searchResult) {\n+\n+        Map<String, JsonNode> caseData = new HashMap<>(caseDetails.getData());\n+        Map<String, Object> caseMetadata = new HashMap<>(caseDetails.getMetadata());\n+        Map<String, TextNode> labels = caseTypeDefinition.getLabelsFromCaseFields();\n+        Map<String, Object> caseFields = prepareData(searchResult, caseData, caseMetadata, labels);\n+\n+        String caseId = caseDetails.hasCaseReference() ? caseDetails.getReferenceAsString() : caseDetails.getId();", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MzIwOA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435573208", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        JsonNode jsonNode = caseData.get(searchResultField.getCaseFieldId());\n          \n          \n            \n                        JsonNode topLevelCaseFieldNode = caseData.get(searchResultField.getCaseFieldId());", "author": "mario-paniccia", "createdAt": "2020-06-04T21:51:22Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {\n+\n+    private final UserRepository userRepository;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final SearchQueryOperation searchQueryOperation;\n+\n+    public CaseSearchResultGenerator(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                     @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) final GetCaseTypeOperation getCaseTypeOperation,\n+                                     final SearchQueryOperation searchQueryOperation) {\n+        this.userRepository = userRepository;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.searchQueryOperation = searchQueryOperation;\n+    }\n+\n+    public UICaseSearchResult execute(final String caseTypeId,\n+                                      final CaseSearchResult caseSearchResult,\n+                                      final String useCase) {\n+        // TODO: Filter out fields from result that haven't been requested before returning (RDM-8556)\n+        return new UICaseSearchResult(\n+            buildHeaders(caseTypeId, useCase, caseSearchResult),\n+            buildItems(useCase, caseSearchResult),\n+            caseSearchResult.getTotal(),\n+            useCase\n+        );\n+    }\n+\n+    private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewItem> items = new ArrayList<>();\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            getCaseTypeDefinition(caseDetails.getCaseTypeId()).ifPresent(caseType -> {\n+                final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+                items.add(buildSearchResultViewItem(caseDetails, caseType, searchResult));\n+            });\n+        });\n+\n+        return items;\n+    }\n+\n+    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId, String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewHeaderGroup> headers = new ArrayList<>();\n+        getCaseTypeDefinition(caseTypeId).ifPresent(caseType -> {\n+            SearchResultViewHeaderGroup caseSearchHeader = buildHeader(useCase, caseSearchResult, caseTypeId, caseType);\n+            headers.add(caseSearchHeader);\n+        });\n+\n+        return headers;\n+    }\n+\n+    private Optional<CaseTypeDefinition> getCaseTypeDefinition(String caseTypeId) {\n+        return getCaseTypeOperation.execute(caseTypeId, CAN_READ);\n+    }\n+\n+    private SearchResultViewHeaderGroup buildHeader(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, CaseTypeDefinition caseType) {\n+        final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+        if (searchResult.getFields().length == 0) {\n+            throw new BadSearchRequest(String.format(\"The provided use case '%s' is unsupported for case type '%s'.\",\n+                useCase, caseType.getId()));\n+        }\n+        return new SearchResultViewHeaderGroup(\n+            new HeaderGroupMetadata(caseType.getJurisdictionId(), caseTypeId),\n+            buildSearchResultViewColumns(caseType, searchResult),\n+            caseSearchResult.getCaseReferences(caseTypeId)\n+        );\n+    }\n+\n+    private List<SearchResultViewHeader> buildSearchResultViewColumns(final CaseTypeDefinition caseTypeDefinition,\n+                                                                      final SearchResult searchResult) {\n+        final HashSet<String> addedFields = new HashSet<>();\n+\n+        return Arrays.stream(searchResult.getFields())\n+            .flatMap(searchResultField -> caseTypeDefinition.getCaseFieldDefinitions().stream()\n+                .filter(caseField -> caseField.getId().equals(searchResultField.getCaseFieldId()))\n+                .filter(caseField -> filterDistinctFieldsByRole(addedFields, searchResultField))\n+                .map(caseField -> buildSearchResultViewColumn(searchResultField, caseField))\n+            )\n+            .collect(Collectors.toList());\n+    }\n+\n+    private SearchResultViewHeader buildSearchResultViewColumn(final SearchResultField searchResultField,\n+                                                               final CaseFieldDefinition caseFieldDefinition) {\n+        CommonField commonField = commonField(searchResultField, caseFieldDefinition);\n+        return new SearchResultViewHeader(\n+            searchResultField.buildCaseFieldId(),\n+            commonField.getFieldTypeDefinition(),\n+            searchResultField.getLabel(),\n+            searchResultField.getDisplayOrder(),\n+            searchResultField.isMetadata(),\n+            displayContextParameter(searchResultField, commonField));\n+    }\n+\n+    private boolean filterDistinctFieldsByRole(final HashSet<String> addedFields, final SearchResultField resultField) {\n+        String id = resultField.buildCaseFieldId();\n+        if (addedFields.contains(id)) {\n+            return false;\n+        } else {\n+            if (StringUtils.isEmpty(resultField.getRole()) || userRepository.getUserRoles().contains(resultField.getRole())) {\n+                addedFields.add(id);\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private CommonField commonField(SearchResultField searchResultField, CaseFieldDefinition caseFieldDefinition) {\n+        return caseFieldDefinition.getComplexFieldNestedField(searchResultField.getCaseFieldPath())\n+            .orElseThrow(() ->\n+                new BadRequestException(format(\"CaseField %s has no nested elements with code %s.\",\n+                    caseFieldDefinition.getId(), searchResultField.getCaseFieldPath())));\n+    }\n+\n+    private String displayContextParameter(SearchResultField searchResultField, CommonField commonField) {\n+        return searchResultField.getDisplayContextParameter() == null\n+            ? commonField.getDisplayContextParameter()\n+            : searchResultField.getDisplayContextParameter();\n+    }\n+\n+    private SearchResultViewItem buildSearchResultViewItem(final CaseDetails caseDetails,\n+                                                           final CaseTypeDefinition caseTypeDefinition,\n+                                                           final SearchResult searchResult) {\n+\n+        Map<String, JsonNode> caseData = new HashMap<>(caseDetails.getData());\n+        Map<String, Object> caseMetadata = new HashMap<>(caseDetails.getMetadata());\n+        Map<String, TextNode> labels = caseTypeDefinition.getLabelsFromCaseFields();\n+        Map<String, Object> caseFields = prepareData(searchResult, caseData, caseMetadata, labels);\n+\n+        String caseId = caseDetails.hasCaseReference() ? caseDetails.getReferenceAsString() : caseDetails.getId();\n+        return new SearchResultViewItem(caseId, caseFields, new HashMap<>(caseFields));\n+    }\n+\n+    private Map<String, Object> prepareData(SearchResult searchResult,\n+                                            Map<String, JsonNode> caseData,\n+                                            Map<String, Object> metadata,\n+                                            Map<String, TextNode> labels) {\n+\n+        Map<String, Object> newResults = new HashMap<>();\n+\n+        searchResult.getFieldsWithPaths().forEach(searchResultField -> {\n+            JsonNode jsonNode = caseData.get(searchResultField.getCaseFieldId());", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MzQwOQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435573409", "bodyText": "I can see this is duplicated in a couple of places. Can you add a method to the searchResultField class called getIdIncludingPath() or sim?", "author": "mario-paniccia", "createdAt": "2020-06-04T21:51:52Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/CaseSearchResultGenerator.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package uk.gov.hmcts.ccd.domain.service.search;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import uk.gov.hmcts.ccd.data.user.CachedUserRepository;\n+import uk.gov.hmcts.ccd.data.user.UserRepository;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.*;\n+import uk.gov.hmcts.ccd.domain.model.search.CaseSearchResult;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.*;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadRequestException;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static java.lang.String.format;\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+public class CaseSearchResultGenerator {\n+\n+    private final UserRepository userRepository;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final SearchQueryOperation searchQueryOperation;\n+\n+    public CaseSearchResultGenerator(@Qualifier(CachedUserRepository.QUALIFIER) final UserRepository userRepository,\n+                                     @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) final GetCaseTypeOperation getCaseTypeOperation,\n+                                     final SearchQueryOperation searchQueryOperation) {\n+        this.userRepository = userRepository;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.searchQueryOperation = searchQueryOperation;\n+    }\n+\n+    public UICaseSearchResult execute(final String caseTypeId,\n+                                      final CaseSearchResult caseSearchResult,\n+                                      final String useCase) {\n+        // TODO: Filter out fields from result that haven't been requested before returning (RDM-8556)\n+        return new UICaseSearchResult(\n+            buildHeaders(caseTypeId, useCase, caseSearchResult),\n+            buildItems(useCase, caseSearchResult),\n+            caseSearchResult.getTotal(),\n+            useCase\n+        );\n+    }\n+\n+    private List<SearchResultViewItem> buildItems(String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewItem> items = new ArrayList<>();\n+        caseSearchResult.getCases().forEach(caseDetails -> {\n+            getCaseTypeDefinition(caseDetails.getCaseTypeId()).ifPresent(caseType -> {\n+                final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+                items.add(buildSearchResultViewItem(caseDetails, caseType, searchResult));\n+            });\n+        });\n+\n+        return items;\n+    }\n+\n+    private List<SearchResultViewHeaderGroup> buildHeaders(String caseTypeId, String useCase, CaseSearchResult caseSearchResult) {\n+        List<SearchResultViewHeaderGroup> headers = new ArrayList<>();\n+        getCaseTypeDefinition(caseTypeId).ifPresent(caseType -> {\n+            SearchResultViewHeaderGroup caseSearchHeader = buildHeader(useCase, caseSearchResult, caseTypeId, caseType);\n+            headers.add(caseSearchHeader);\n+        });\n+\n+        return headers;\n+    }\n+\n+    private Optional<CaseTypeDefinition> getCaseTypeDefinition(String caseTypeId) {\n+        return getCaseTypeOperation.execute(caseTypeId, CAN_READ);\n+    }\n+\n+    private SearchResultViewHeaderGroup buildHeader(String useCase, CaseSearchResult caseSearchResult, String caseTypeId, CaseTypeDefinition caseType) {\n+        final SearchResult searchResult = searchQueryOperation.getSearchResultDefinition(caseType, useCase);\n+        if (searchResult.getFields().length == 0) {\n+            throw new BadSearchRequest(String.format(\"The provided use case '%s' is unsupported for case type '%s'.\",\n+                useCase, caseType.getId()));\n+        }\n+        return new SearchResultViewHeaderGroup(\n+            new HeaderGroupMetadata(caseType.getJurisdictionId(), caseTypeId),\n+            buildSearchResultViewColumns(caseType, searchResult),\n+            caseSearchResult.getCaseReferences(caseTypeId)\n+        );\n+    }\n+\n+    private List<SearchResultViewHeader> buildSearchResultViewColumns(final CaseTypeDefinition caseTypeDefinition,\n+                                                                      final SearchResult searchResult) {\n+        final HashSet<String> addedFields = new HashSet<>();\n+\n+        return Arrays.stream(searchResult.getFields())\n+            .flatMap(searchResultField -> caseTypeDefinition.getCaseFieldDefinitions().stream()\n+                .filter(caseField -> caseField.getId().equals(searchResultField.getCaseFieldId()))\n+                .filter(caseField -> filterDistinctFieldsByRole(addedFields, searchResultField))\n+                .map(caseField -> buildSearchResultViewColumn(searchResultField, caseField))\n+            )\n+            .collect(Collectors.toList());\n+    }\n+\n+    private SearchResultViewHeader buildSearchResultViewColumn(final SearchResultField searchResultField,\n+                                                               final CaseFieldDefinition caseFieldDefinition) {\n+        CommonField commonField = commonField(searchResultField, caseFieldDefinition);\n+        return new SearchResultViewHeader(\n+            searchResultField.buildCaseFieldId(),\n+            commonField.getFieldTypeDefinition(),\n+            searchResultField.getLabel(),\n+            searchResultField.getDisplayOrder(),\n+            searchResultField.isMetadata(),\n+            displayContextParameter(searchResultField, commonField));\n+    }\n+\n+    private boolean filterDistinctFieldsByRole(final HashSet<String> addedFields, final SearchResultField resultField) {\n+        String id = resultField.buildCaseFieldId();\n+        if (addedFields.contains(id)) {\n+            return false;\n+        } else {\n+            if (StringUtils.isEmpty(resultField.getRole()) || userRepository.getUserRoles().contains(resultField.getRole())) {\n+                addedFields.add(id);\n+                return true;\n+            } else {\n+                return false;\n+            }\n+        }\n+    }\n+\n+    private CommonField commonField(SearchResultField searchResultField, CaseFieldDefinition caseFieldDefinition) {\n+        return caseFieldDefinition.getComplexFieldNestedField(searchResultField.getCaseFieldPath())\n+            .orElseThrow(() ->\n+                new BadRequestException(format(\"CaseField %s has no nested elements with code %s.\",\n+                    caseFieldDefinition.getId(), searchResultField.getCaseFieldPath())));\n+    }\n+\n+    private String displayContextParameter(SearchResultField searchResultField, CommonField commonField) {\n+        return searchResultField.getDisplayContextParameter() == null\n+            ? commonField.getDisplayContextParameter()\n+            : searchResultField.getDisplayContextParameter();\n+    }\n+\n+    private SearchResultViewItem buildSearchResultViewItem(final CaseDetails caseDetails,\n+                                                           final CaseTypeDefinition caseTypeDefinition,\n+                                                           final SearchResult searchResult) {\n+\n+        Map<String, JsonNode> caseData = new HashMap<>(caseDetails.getData());\n+        Map<String, Object> caseMetadata = new HashMap<>(caseDetails.getMetadata());\n+        Map<String, TextNode> labels = caseTypeDefinition.getLabelsFromCaseFields();\n+        Map<String, Object> caseFields = prepareData(searchResult, caseData, caseMetadata, labels);\n+\n+        String caseId = caseDetails.hasCaseReference() ? caseDetails.getReferenceAsString() : caseDetails.getId();\n+        return new SearchResultViewItem(caseId, caseFields, new HashMap<>(caseFields));\n+    }\n+\n+    private Map<String, Object> prepareData(SearchResult searchResult,\n+                                            Map<String, JsonNode> caseData,\n+                                            Map<String, Object> metadata,\n+                                            Map<String, TextNode> labels) {\n+\n+        Map<String, Object> newResults = new HashMap<>();\n+\n+        searchResult.getFieldsWithPaths().forEach(searchResultField -> {\n+            JsonNode jsonNode = caseData.get(searchResultField.getCaseFieldId());\n+            if (jsonNode != null) {\n+                newResults.put(searchResultField.getCaseFieldId() + \".\" + searchResultField.getCaseFieldPath(),", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDE3Mw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435574173", "bodyText": "minor: NPE doesn't fit very well here? what about just a RuntimeException?", "author": "mario-paniccia", "createdAt": "2020-06-04T21:53:51Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.google.common.base.Strings;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {\n+\n+    private static final String SORT = \"sort\";\n+    private static final String CASE_DATA_PREFIX = \"data.\";\n+    private static final String COLLECTION_VALUE_SUFFIX = \".value\";\n+    private static final String KEYWORD_SUFFIX = \".keyword\";\n+\n+    private final ObjectMapper objectMapper;\n+    private final ApplicationParams applicationParams;\n+    private final ObjectMapperService objectMapperService;\n+    private final SearchQueryOperation searchQueryOperation;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final ElasticsearchMappings elasticsearchMappings;\n+\n+    @Autowired\n+    public ElasticsearchQueryHelper(@Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n+                                    ApplicationParams applicationParams,\n+                                    ObjectMapperService objectMapperService,\n+                                    SearchQueryOperation searchQueryOperation,\n+                                    @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) GetCaseTypeOperation getCaseTypeOperation,\n+                                    ElasticsearchMappings elasticsearchMappings) {\n+        this.objectMapper = objectMapper;\n+        this.applicationParams = applicationParams;\n+        this.objectMapperService = objectMapperService;\n+        this.searchQueryOperation = searchQueryOperation;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.elasticsearchMappings = elasticsearchMappings;\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(List<String> caseTypeIds, String jsonSearchRequest) {\n+        if (CollectionUtils.isEmpty(caseTypeIds)) {\n+            throw new BadSearchRequest(\"At least one case type ID is required.\");\n+        }\n+\n+        JsonNode searchRequest = validateAndConvertRequest(jsonSearchRequest);\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(caseTypeIds)\n+            .withSearchRequest(searchRequest)\n+            .build();\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(String caseTypeId, String jsonSearchRequest, String useCase) {\n+        if (Strings.isNullOrEmpty(caseTypeId)) {\n+            throw new BadSearchRequest(\"Case type ID is required.\");\n+        }\n+\n+        JsonNode searchRequest = validateAndConvertRequest(jsonSearchRequest);\n+        applyConfiguredSort(searchRequest, caseTypeId, useCase);\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(Collections.singletonList(caseTypeId))\n+            .withSearchRequest(searchRequest)\n+            .build();\n+    }\n+\n+    private void applyConfiguredSort(JsonNode searchRequest, String caseTypeId, String useCase) {\n+        JsonNode sortNode = searchRequest.get(SORT);\n+        if (sortNode == null || useCase == null) {\n+            ArrayNode appliedSortsNode = buildSortNode(caseTypeId, useCase);\n+            if (appliedSortsNode.size() > 0) {\n+                ((ObjectNode)searchRequest).set(SORT, appliedSortsNode);\n+            }\n+        }\n+    }\n+\n+    private ArrayNode buildSortNode(String caseTypeId, String useCase) {\n+        ArrayNode sortNode = objectMapper.createArrayNode();\n+        addCaseTypeSorts(caseTypeId, useCase, sortNode);\n+        return sortNode;\n+    }\n+\n+    private void addCaseTypeSorts(String caseTypeId, String useCase, ArrayNode sortNode) {\n+        Optional<CaseTypeDefinition> caseTypeOpt = getCaseTypeOperation.execute(caseTypeId, CAN_READ);\n+        caseTypeOpt.ifPresent(caseType -> searchQueryOperation.getSortOrders(caseType, useCase)\n+            .forEach(field -> sortNode.add(buildSortOrderFieldNode(caseType, field))));\n+    }\n+\n+    private ObjectNode buildSortOrderFieldNode(CaseTypeDefinition caseTypeDefinition, SortOrderField sortOrderField) {\n+        ObjectNode objectNode = objectMapper.createObjectNode();\n+        CommonField commonField = caseTypeDefinition.getComplexSubfieldDefinitionByPath(sortOrderField.getCaseFieldId()).orElseThrow(() ->\n+            new NullPointerException(String.format(\"Case field '%s' does not exist in configuration for case type '%s'.\",", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDQxNw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435574417", "bodyText": "it would be good adding some explanatory comment here since it's not possible to deduct from the code why we are doing this.", "author": "mario-paniccia", "createdAt": "2020-06-04T21:54:38Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/search/elasticsearch/ElasticsearchQueryHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package uk.gov.hmcts.ccd.domain.service.search.elasticsearch;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ArrayNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import com.google.common.base.Strings;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n+import uk.gov.hmcts.ccd.ApplicationParams;\n+import uk.gov.hmcts.ccd.data.casedetails.search.MetaData;\n+import uk.gov.hmcts.ccd.data.casedetails.search.SortOrderField;\n+import uk.gov.hmcts.ccd.domain.model.aggregated.CommonField;\n+import uk.gov.hmcts.ccd.domain.model.definition.CaseTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.model.definition.FieldTypeDefinition;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.AuthorisedGetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.GetCaseTypeOperation;\n+import uk.gov.hmcts.ccd.domain.service.aggregated.SearchQueryOperation;\n+import uk.gov.hmcts.ccd.domain.service.common.ObjectMapperService;\n+import uk.gov.hmcts.ccd.endpoint.exceptions.BadSearchRequest;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static uk.gov.hmcts.ccd.domain.service.common.AccessControlService.CAN_READ;\n+\n+@Service\n+@Slf4j\n+public class ElasticsearchQueryHelper {\n+\n+    private static final String SORT = \"sort\";\n+    private static final String CASE_DATA_PREFIX = \"data.\";\n+    private static final String COLLECTION_VALUE_SUFFIX = \".value\";\n+    private static final String KEYWORD_SUFFIX = \".keyword\";\n+\n+    private final ObjectMapper objectMapper;\n+    private final ApplicationParams applicationParams;\n+    private final ObjectMapperService objectMapperService;\n+    private final SearchQueryOperation searchQueryOperation;\n+    private final GetCaseTypeOperation getCaseTypeOperation;\n+    private final ElasticsearchMappings elasticsearchMappings;\n+\n+    @Autowired\n+    public ElasticsearchQueryHelper(@Qualifier(\"DefaultObjectMapper\") ObjectMapper objectMapper,\n+                                    ApplicationParams applicationParams,\n+                                    ObjectMapperService objectMapperService,\n+                                    SearchQueryOperation searchQueryOperation,\n+                                    @Qualifier(AuthorisedGetCaseTypeOperation.QUALIFIER) GetCaseTypeOperation getCaseTypeOperation,\n+                                    ElasticsearchMappings elasticsearchMappings) {\n+        this.objectMapper = objectMapper;\n+        this.applicationParams = applicationParams;\n+        this.objectMapperService = objectMapperService;\n+        this.searchQueryOperation = searchQueryOperation;\n+        this.getCaseTypeOperation = getCaseTypeOperation;\n+        this.elasticsearchMappings = elasticsearchMappings;\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(List<String> caseTypeIds, String jsonSearchRequest) {\n+        if (CollectionUtils.isEmpty(caseTypeIds)) {\n+            throw new BadSearchRequest(\"At least one case type ID is required.\");\n+        }\n+\n+        JsonNode searchRequest = validateAndConvertRequest(jsonSearchRequest);\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(caseTypeIds)\n+            .withSearchRequest(searchRequest)\n+            .build();\n+    }\n+\n+    public CrossCaseTypeSearchRequest prepareRequest(String caseTypeId, String jsonSearchRequest, String useCase) {\n+        if (Strings.isNullOrEmpty(caseTypeId)) {\n+            throw new BadSearchRequest(\"Case type ID is required.\");\n+        }\n+\n+        JsonNode searchRequest = validateAndConvertRequest(jsonSearchRequest);\n+        applyConfiguredSort(searchRequest, caseTypeId, useCase);\n+\n+        return new CrossCaseTypeSearchRequest.Builder()\n+            .withCaseTypes(Collections.singletonList(caseTypeId))\n+            .withSearchRequest(searchRequest)\n+            .build();\n+    }\n+\n+    private void applyConfiguredSort(JsonNode searchRequest, String caseTypeId, String useCase) {\n+        JsonNode sortNode = searchRequest.get(SORT);\n+        if (sortNode == null || useCase == null) {\n+            ArrayNode appliedSortsNode = buildSortNode(caseTypeId, useCase);\n+            if (appliedSortsNode.size() > 0) {\n+                ((ObjectNode)searchRequest).set(SORT, appliedSortsNode);\n+            }\n+        }\n+    }\n+\n+    private ArrayNode buildSortNode(String caseTypeId, String useCase) {\n+        ArrayNode sortNode = objectMapper.createArrayNode();\n+        addCaseTypeSorts(caseTypeId, useCase, sortNode);\n+        return sortNode;\n+    }\n+\n+    private void addCaseTypeSorts(String caseTypeId, String useCase, ArrayNode sortNode) {\n+        Optional<CaseTypeDefinition> caseTypeOpt = getCaseTypeOperation.execute(caseTypeId, CAN_READ);\n+        caseTypeOpt.ifPresent(caseType -> searchQueryOperation.getSortOrders(caseType, useCase)\n+            .forEach(field -> sortNode.add(buildSortOrderFieldNode(caseType, field))));\n+    }\n+\n+    private ObjectNode buildSortOrderFieldNode(CaseTypeDefinition caseTypeDefinition, SortOrderField sortOrderField) {\n+        ObjectNode objectNode = objectMapper.createObjectNode();\n+        CommonField commonField = caseTypeDefinition.getComplexSubfieldDefinitionByPath(sortOrderField.getCaseFieldId()).orElseThrow(() ->\n+            new NullPointerException(String.format(\"Case field '%s' does not exist in configuration for case type '%s'.\",\n+                sortOrderField.getCaseFieldId(), caseTypeDefinition.getId()))\n+        );\n+        FieldTypeDefinition fieldType = commonField.getFieldTypeDefinition();\n+\n+        StringBuilder sb = new StringBuilder();\n+\n+        if (sortOrderField.isMetadata()) {\n+            sb.append(MetaData.CaseField.valueOfReference(sortOrderField.getCaseFieldId()).getDbColumnName());\n+        } else {\n+            sb.append(CASE_DATA_PREFIX).append(sortOrderField.getCaseFieldId());\n+            if (fieldType.getType().equals(FieldTypeDefinition.COLLECTION)) {\n+                sb.append(COLLECTION_VALUE_SUFFIX);\n+            }\n+        }\n+\n+        if ((sortOrderField.isMetadata() && elasticsearchMappings.isDefaultTextMetadata(sb.toString()))\n+             || (!sortOrderField.isMetadata() && elasticsearchMappings.isDefaultTextCaseData(fieldType))) {\n+            sb.append(KEYWORD_SUFFIX);", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTUxOQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435575519", "bodyText": "I know it was like this already. But I don't think this method belongs here. The SearchQueryOperation should only concern with the actual execution of the external search. And be invoked only in that case. It's instead called before and after the actual search as well now which indicates it's doing too many unrelated things", "author": "mario-paniccia", "createdAt": "2020-06-04T21:57:31Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/aggregated/SearchQueryOperation.java", "diffHunk": "@@ -87,27 +90,57 @@ public SearchResultView execute(final String view,\n         return mergeDataToSearchResultOperation.execute(caseType.get(), searchResult, draftsAndCases, draftResultError);\n     }\n \n-    private SearchResult getSearchResultDefinition(final CaseTypeDefinition caseTypeDefinition, final String view) {\n-        if (WORKBASKET.equalsIgnoreCase(view)) {\n-            return uiDefinitionRepository.getWorkBasketResult(caseTypeDefinition.getId());\n+    public SearchResult getSearchResultDefinition(final CaseTypeDefinition caseTypeDefinition, final String useCase) {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTc2Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435575762", "bodyText": "minor: I would be great if we can rename SearchResult to SearchResultDefinition", "author": "mario-paniccia", "createdAt": "2020-06-04T21:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTUxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTg4Nw==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435575887", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return buildSearchResultFromCaseFields(caseTypeDefinition);\n          \n          \n            \n                        return buildSearchResultDefinitionFromCaseFields(caseTypeDefinition);", "author": "mario-paniccia", "createdAt": "2020-06-04T21:58:24Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/aggregated/SearchQueryOperation.java", "diffHunk": "@@ -87,27 +90,57 @@ public SearchResultView execute(final String view,\n         return mergeDataToSearchResultOperation.execute(caseType.get(), searchResult, draftsAndCases, draftResultError);\n     }\n \n-    private SearchResult getSearchResultDefinition(final CaseTypeDefinition caseTypeDefinition, final String view) {\n-        if (WORKBASKET.equalsIgnoreCase(view)) {\n-            return uiDefinitionRepository.getWorkBasketResult(caseTypeDefinition.getId());\n+    public SearchResult getSearchResultDefinition(final CaseTypeDefinition caseTypeDefinition, final String useCase) {\n+        final String caseTypeId = caseTypeDefinition.getId();\n+        if (Strings.isNullOrEmpty(useCase)) {\n+            return buildSearchResultFromCaseFields(caseTypeDefinition);", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NjIwMg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435576202", "bodyText": "perfect example of method than can be moved inside SearchResult itself", "author": "mario-paniccia", "createdAt": "2020-06-04T21:59:12Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/aggregated/SearchQueryOperation.java", "diffHunk": "@@ -87,27 +90,57 @@ public SearchResultView execute(final String view,\n         return mergeDataToSearchResultOperation.execute(caseType.get(), searchResult, draftsAndCases, draftResultError);\n     }\n \n-    private SearchResult getSearchResultDefinition(final CaseTypeDefinition caseTypeDefinition, final String view) {\n-        if (WORKBASKET.equalsIgnoreCase(view)) {\n-            return uiDefinitionRepository.getWorkBasketResult(caseTypeDefinition.getId());\n+    public SearchResult getSearchResultDefinition(final CaseTypeDefinition caseTypeDefinition, final String useCase) {\n+        final String caseTypeId = caseTypeDefinition.getId();\n+        if (Strings.isNullOrEmpty(useCase)) {\n+            return buildSearchResultFromCaseFields(caseTypeDefinition);\n+        }\n+        // TODO: Once all *ResultFields tabs are merged, remove switch statement and always call default method\n+        switch (useCase) {\n+            case WORKBASKET:\n+                return uiDefinitionRepository.getWorkBasketResult(caseTypeId);\n+            case SEARCH:\n+                return uiDefinitionRepository.getSearchResult(caseTypeId);\n+            default:\n+                return uiDefinitionRepository.getSearchCasesResult(caseTypeId, useCase);\n         }\n-        return uiDefinitionRepository.getSearchResult(caseTypeDefinition.getId());\n     }\n \n-    private void addSortOrderFields(MetaData metadata,SearchResult searchResult) {\n-        List<SortOrderField> sortOrders = getSortOrders(searchResult);\n-        metadata.setSortOrderFields(sortOrders);\n+    public List<SortOrderField> getSortOrders(CaseTypeDefinition caseType, String useCase) {\n+        return getSortOrders(getSearchResultDefinition(caseType, useCase));\n     }\n \n     private List<SortOrderField> getSortOrders(SearchResult searchResult) {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3Njg3Mg==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435576872", "bodyText": "minor:\nI've noticed that the \"getSearchResultDefinition\" is called multiple times, which will call this code multiple\ntimes. Given that the performance of the search operation is important and this is potentially slow for big case types, we could consider refactoring to have it called only once if not a big change", "author": "mario-paniccia", "createdAt": "2020-06-04T22:00:55Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/service/aggregated/SearchQueryOperation.java", "diffHunk": "@@ -87,27 +90,57 @@ public SearchResultView execute(final String view,\n         return mergeDataToSearchResultOperation.execute(caseType.get(), searchResult, draftsAndCases, draftResultError);\n     }\n \n-    private SearchResult getSearchResultDefinition(final CaseTypeDefinition caseTypeDefinition, final String view) {\n-        if (WORKBASKET.equalsIgnoreCase(view)) {\n-            return uiDefinitionRepository.getWorkBasketResult(caseTypeDefinition.getId());\n+    public SearchResult getSearchResultDefinition(final CaseTypeDefinition caseTypeDefinition, final String useCase) {\n+        final String caseTypeId = caseTypeDefinition.getId();\n+        if (Strings.isNullOrEmpty(useCase)) {\n+            return buildSearchResultFromCaseFields(caseTypeDefinition);\n+        }\n+        // TODO: Once all *ResultFields tabs are merged, remove switch statement and always call default method\n+        switch (useCase) {\n+            case WORKBASKET:\n+                return uiDefinitionRepository.getWorkBasketResult(caseTypeId);\n+            case SEARCH:\n+                return uiDefinitionRepository.getSearchResult(caseTypeId);\n+            default:\n+                return uiDefinitionRepository.getSearchCasesResult(caseTypeId, useCase);\n         }\n-        return uiDefinitionRepository.getSearchResult(caseTypeDefinition.getId());\n     }\n \n-    private void addSortOrderFields(MetaData metadata,SearchResult searchResult) {\n-        List<SortOrderField> sortOrders = getSortOrders(searchResult);\n-        metadata.setSortOrderFields(sortOrders);\n+    public List<SortOrderField> getSortOrders(CaseTypeDefinition caseType, String useCase) {\n+        return getSortOrders(getSearchResultDefinition(caseType, useCase));\n     }\n \n     private List<SortOrderField> getSortOrders(SearchResult searchResult) {\n         return Arrays.stream(searchResult.getFields())\n-            .filter(searchResultField -> hasSortField(searchResultField))\n-            .filter(searchResultField -> filterByRole(searchResultField))\n+            .filter(this::hasSortField)\n+            .filter(this::filterByRole)\n             .sorted(Comparator.comparing(srf -> srf.getSortOrder().getPriority()))\n             .map(this::toSortOrderField)\n             .collect(Collectors.toList());\n     }\n \n+    private SearchResult buildSearchResultFromCaseFields(final CaseTypeDefinition caseTypeDefinition) {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkwMTIzNA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435901234", "bodyText": "Made some changes in the generator to reduce the number since we can assume it'll always be a single case type for all items currently \ud83d\udc4d", "author": "danlysiak", "createdAt": "2020-06-05T12:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3Njg3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NzE2OA==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435577168", "bodyText": "any particular reason for adding the use case here? If not I'd suggest removing it", "author": "mario-paniccia", "createdAt": "2020-06-04T22:01:43Z", "path": "src/main/java/uk/gov/hmcts/ccd/v2/internal/resource/CaseSearchResultViewResource.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package uk.gov.hmcts.ccd.v2.internal.resource;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.annotations.ApiModel;\n+import io.swagger.annotations.ApiModelProperty;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n+import lombok.NonNull;\n+import org.springframework.hateoas.RepresentationModel;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewItem;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.SearchResultViewHeaderGroup;\n+import uk.gov.hmcts.ccd.domain.model.search.elasticsearch.UICaseSearchResult;\n+\n+import java.util.List;\n+\n+@Data\n+@EqualsAndHashCode(callSuper = true)\n+@NoArgsConstructor\n+@ApiModel(description = \"\")\n+public class CaseSearchResultViewResource extends RepresentationModel {\n+\n+    @ApiModelProperty(value = \"Headers for each case type\")\n+    private List<SearchResultViewHeaderGroup> headers;\n+    @ApiModelProperty(value = \"All cases across case types\")\n+    private List<SearchResultViewItem> cases;\n+    @ApiModelProperty(value = \"Total number of search results (including results not returned due to pagination)\")\n+    private Long total;\n+    @ApiModelProperty(value = \"The use case that the response represents; null for standard requests\")\n+    @JsonProperty(\"use_case\")\n+    private String useCase;", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3ODE3MQ==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435578171", "bodyText": "can you inline this method? i.e. remove it and call directly the CaseFieldPathUtils in the current invoker of this method", "author": "mario-paniccia", "createdAt": "2020-06-04T22:04:15Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/definition/SearchResultField.java", "diffHunk": "@@ -108,4 +106,16 @@ public String getDisplayContextParameter() {\n     public void setDisplayContextParameter(String displayContextParameter) {\n         this.displayContextParameter = displayContextParameter;\n     }\n+\n+    public String getUseCase() {\n+        return useCase;\n+    }\n+\n+    public void setUseCase(String useCase) {\n+        this.useCase = useCase;\n+    }\n+\n+    public JsonNode getCaseFieldNode(JsonNode topLevelCaseFieldNode) {\n+        return CaseFieldPathUtils.getCaseFieldNodeByPath(topLevelCaseFieldNode, getCaseFieldPath());", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3ODQ1Ng==", "url": "https://github.com/hmcts/ccd-data-store-api/pull/956#discussion_r435578456", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class UICaseSearchResult {\n          \n          \n            \n            public class CaseSearchResultView {", "author": "mario-paniccia", "createdAt": "2020-06-04T22:04:54Z", "path": "src/main/java/uk/gov/hmcts/ccd/domain/model/search/elasticsearch/UICaseSearchResult.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package uk.gov.hmcts.ccd.domain.model.search.elasticsearch;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import static java.util.Collections.emptyList;\n+\n+@Data\n+@AllArgsConstructor\n+public class UICaseSearchResult {", "originalCommit": "588918d0569aa6a39311bba157ce8459d3dd0b9e", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f41836564db97039a7c7d1eacb7a44e4763b6dbc", "url": "https://github.com/hmcts/ccd-data-store-api/commit/f41836564db97039a7c7d1eacb7a44e4763b6dbc", "message": "RDM-8325 - Review comments", "committedDate": "2020-06-05T17:30:32Z", "type": "commit"}, {"oid": "fe99f5bb00fd4f4f5421432b66934fc5ae8db636", "url": "https://github.com/hmcts/ccd-data-store-api/commit/fe99f5bb00fd4f4f5421432b66934fc5ae8db636", "message": "Merge branch 'RDM-8325' into RDM-8598", "committedDate": "2020-06-09T13:07:27Z", "type": "commit"}]}