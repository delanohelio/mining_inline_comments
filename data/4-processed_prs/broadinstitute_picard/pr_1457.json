{"pr_number": 1457, "pr_title": "Add haplotype map liftover", "pr_createdAt": "2020-01-26T13:07:14Z", "pr_url": "https://github.com/broadinstitute/picard/pull/1457", "timeline": [{"oid": "2de836bead1d455c817d508065b1d24a8d3c669d", "url": "https://github.com/broadinstitute/picard/commit/2de836bead1d455c817d508065b1d24a8d3c669d", "message": "copyright and finals", "committedDate": "2020-02-09T12:21:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5MjU3NA==", "url": "https://github.com/broadinstitute/picard/pull/1457#discussion_r426792574", "bodyText": "whitespace\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return anyFailed? LIFTOVER_FAILED_FOR_ONE_OR_MORE_SNPS: 0;\n          \n          \n            \n                    return anyFailed ? LIFTOVER_FAILED_FOR_ONE_OR_MORE_SNPS : 0;", "author": "pshapiro4broad", "createdAt": "2020-05-18T17:42:39Z", "path": "src/main/java/picard/fingerprint/LiftOverHaplotypeMap.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * The MIT License\n+ *\n+ * Copyright (c) 2020 The Broad Institute\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package picard.fingerprint;\n+\n+import htsjdk.samtools.SAMFileHeader;\n+import htsjdk.samtools.SAMSequenceDictionary;\n+import htsjdk.samtools.liftover.LiftOver;\n+import htsjdk.samtools.util.IOUtil;\n+import htsjdk.samtools.util.Interval;\n+import htsjdk.samtools.util.Log;\n+import htsjdk.variant.utils.SAMSequenceDictionaryExtractor;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import picard.cmdline.CommandLineProgram;\n+import picard.cmdline.StandardOptionDefinitions;\n+import picard.cmdline.programgroups.DiagnosticsAndQCProgramGroup;\n+\n+import java.io.File;\n+\n+/**\n+ * Liftover SNPs in HaplotypeMaps from one reference to another\n+ *\n+ */\n+@CommandLineProgramProperties(\n+        summary = \"Lifts over a haplotype database from one reference to another. Based on UCSC liftOver.\\n\" +\n+                \" Uses a UCSC chain file to guide the liftOver.\",\n+        oneLineSummary = \"Lifts over a haplotype database from one reference to another\",\n+        programGroup = DiagnosticsAndQCProgramGroup.class\n+)\n+public class LiftOverHaplotypeMap extends CommandLineProgram {\n+\n+    @Argument(doc = \"Haplotype database to be lifted over.\", shortName = StandardOptionDefinitions.INPUT_SHORT_NAME)\n+    public File INPUT;\n+\n+    @Argument(doc = \"Where to write lifted-over haplotype database.\", shortName = StandardOptionDefinitions.OUTPUT_SHORT_NAME)\n+    public File OUTPUT;\n+\n+    @Argument(doc = \"Sequence dictionary to write into the output haplotype database. (Any file from which a dictionary is extractable.)\",\n+            shortName = StandardOptionDefinitions.SEQUENCE_DICTIONARY_SHORT_NAME)\n+    public File SEQUENCE_DICTIONARY;\n+\n+    @Argument(doc = \"Chain file that guides LiftOver. (UCSC format)\")\n+    public File CHAIN;\n+\n+    public static final int LIFTOVER_FAILED_FOR_ONE_OR_MORE_SNPS = 101;\n+\n+    private static final Log log = Log.getInstance(LiftOverHaplotypeMap.class);\n+\n+    @Override\n+    protected int doWork() {\n+        IOUtil.assertFileIsReadable(INPUT);\n+        IOUtil.assertFileIsReadable(SEQUENCE_DICTIONARY);\n+        IOUtil.assertFileIsReadable(CHAIN);\n+        IOUtil.assertFileIsWritable(OUTPUT);\n+\n+        final LiftOver liftOver = new LiftOver(CHAIN);\n+\n+        final HaplotypeMap fromMap = new HaplotypeMap(INPUT);\n+\n+        final SAMSequenceDictionary dict = SAMSequenceDictionaryExtractor.extractDictionary(SEQUENCE_DICTIONARY);\n+\n+        liftOver.validateToSequences(dict);\n+        final SAMFileHeader newHeader = new SAMFileHeader(dict);\n+        final HaplotypeMap toMap = new HaplotypeMap(newHeader);\n+\n+        boolean anyFailed = false;\n+\n+        for (final HaplotypeBlock fromHaplotypeBlock : fromMap.getHaplotypes()) {\n+            final HaplotypeBlock toHaplotypeBlock = new HaplotypeBlock(fromHaplotypeBlock.getMaf());\n+\n+            for (final Snp snp : fromHaplotypeBlock.getSnps()) {\n+                final Interval interval = liftOver.liftOver(\n+                        new Interval(snp.getChrom(), snp.getPos(), snp.getPos()));\n+                if (interval != null) {\n+                    toHaplotypeBlock.addSnp(new Snp(snp.getName(), interval.getContig(), interval.getStart(),\n+                            snp.getAllele1(), snp.getAllele2(), snp.getMaf(),\n+                            snp.getFingerprintPanels()));\n+                } else {\n+                    anyFailed = true;\n+                    log.warn(\"Liftover failed for \", snp.getName(), \"(\", snp.getChrom(), \":\", snp.getPos(), \")\");\n+                }\n+            }\n+\n+            toMap.addHaplotype(toHaplotypeBlock);\n+        }\n+\n+        toMap.writeToFile(OUTPUT);\n+        return anyFailed? LIFTOVER_FAILED_FOR_ONE_OR_MORE_SNPS: 0;", "originalCommit": "6b617444157c8c0070cd61a61826d0ee149b9b97", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "51c6ecb08f8c8db771052dad0dd7221e55dba668", "url": "https://github.com/broadinstitute/picard/commit/51c6ecb08f8c8db771052dad0dd7221e55dba668", "message": "- add liftoverHaplotypeMap program for lifting-over haplotypeMaps.", "committedDate": "2020-06-17T20:16:07Z", "type": "commit"}, {"oid": "621f8055bca87ce98aeb481c90a7abd172fa1bf4", "url": "https://github.com/broadinstitute/picard/commit/621f8055bca87ce98aeb481c90a7abd172fa1bf4", "message": "copyright and finals", "committedDate": "2020-06-17T20:16:07Z", "type": "commit"}, {"oid": "0466124a29d8d3bbeda694589de76540103b41ab", "url": "https://github.com/broadinstitute/picard/commit/0466124a29d8d3bbeda694589de76540103b41ab", "message": "-- oops didn't compile", "committedDate": "2020-06-17T20:16:07Z", "type": "commit"}, {"oid": "7d455a73daa36e680f8b228ac6bfdfa4c6e08b3e", "url": "https://github.com/broadinstitute/picard/commit/7d455a73daa36e680f8b228ac6bfdfa4c6e08b3e", "message": "Apply suggestions from code review\n\nCo-authored-by: Phil Shapiro <pshapiro@broadinstitute.org>", "committedDate": "2020-06-17T20:16:07Z", "type": "commit"}, {"oid": "7d455a73daa36e680f8b228ac6bfdfa4c6e08b3e", "url": "https://github.com/broadinstitute/picard/commit/7d455a73daa36e680f8b228ac6bfdfa4c6e08b3e", "message": "Apply suggestions from code review\n\nCo-authored-by: Phil Shapiro <pshapiro@broadinstitute.org>", "committedDate": "2020-06-17T20:16:07Z", "type": "forcePushed"}, {"oid": "62253211e9ef4fdcf8edf60035e251d69189bbc6", "url": "https://github.com/broadinstitute/picard/commit/62253211e9ef4fdcf8edf60035e251d69189bbc6", "message": "Merge branch 'master' into yf_add_haplotypeMap_liftover", "committedDate": "2020-07-20T16:55:07Z", "type": "commit"}]}