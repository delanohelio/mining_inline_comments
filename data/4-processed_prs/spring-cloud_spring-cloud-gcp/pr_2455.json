{"pr_number": 2455, "pr_title": "Add metrics sample", "pr_createdAt": "2020-07-08T02:58:45Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2455", "timeline": [{"oid": "1e59338470ec663ad933e2d0b69aeb7af1b8211a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/1e59338470ec663ad933e2d0b69aeb7af1b8211a", "message": "Add metrics sample\n\nSee gh-2403", "committedDate": "2020-07-08T02:58:06Z", "type": "commit"}, {"oid": "a8d4084bd0107247f0a99dbad3d42b6681769a35", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/a8d4084bd0107247f0a99dbad3d42b6681769a35", "message": "Fix url", "committedDate": "2020-07-08T03:46:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyMzU3Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2455#discussion_r451923572", "bodyText": "Optional: curly braces not necessary, since there is only one class.", "author": "elefeint", "createdAt": "2020-07-09T02:09:59Z", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-metrics-sample/src/test/java/com/example/MetricsSampleApplicationTests.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.api.MetricDescriptor;\n+import com.google.cloud.monitoring.v3.MetricServiceClient;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assume.assumeThat;\n+\n+/**\n+ * Tests for the metrics sample app.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = {Application.class})", "originalCommit": "a8d4084bd0107247f0a99dbad3d42b6681769a35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyNDMyOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2455#discussion_r451924328", "bodyText": "Starting from the second time the test is run, it will always pass when run on an existing project, even if the metric recording functionality broke. It will pass because the metric exists before the test starts running. I deliberately \"broke\" it by recording \"ping4\" in ExampleController but validating for regular \"ping\", and the test passed.\nI think to really validate that the new metric reached GCP properly, you'd have to generate a random metric name on each test, so it starts with a clean slate every time.", "author": "elefeint", "createdAt": "2020-07-09T02:13:00Z", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-metrics-sample/src/test/java/com/example/MetricsSampleApplicationTests.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.api.MetricDescriptor;\n+import com.google.cloud.monitoring.v3.MetricServiceClient;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assume.assumeThat;\n+\n+/**\n+ * Tests for the metrics sample app.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = {Application.class})\n+public class MetricsSampleApplicationTests {\n+\n+\t@Autowired\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\t@Autowired\n+\tprivate TestRestTemplate testRestTemplate;\n+\n+\t@LocalServerPort\n+\tprivate int port;\n+\n+\tprivate MetricServiceClient metricClient;\n+\n+\t@BeforeClass\n+\tpublic static void checkToRun() {\n+\t\tassumeThat(\n+\t\t\t\t\"Google Cloud Monitoring integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.metrics=true' to enable them. \",\n+\t\t\t\tSystem.getProperty(\"it.metrics\"), is(\"true\"));\n+\t}\n+\n+\t@Before\n+\tpublic void setupLogging() throws IOException {\n+\t\tthis.metricClient = MetricServiceClient.create();\n+\t}\n+\n+\t@Test\n+\tpublic void testMetricRecordedInStackdriver() {\n+\t\tString url = String.format(\"http://localhost:%s/\", this.port);\n+\t\tString projectId = this.projectIdProvider.getProjectId();\n+\t\tString metricType = \"custom.googleapis.com/ping\";\n+\t\tString metricName = \"projects/\" + projectId + \"/metricDescriptors/\" + metricType;\n+\n+\t\tResponseEntity<String> responseEntity = this.testRestTemplate.getForEntity(url, String.class);\n+\t\tassertThat(responseEntity.getStatusCode().is2xxSuccessful()).isTrue();\n+\n+\t\tawait().atMost(4, TimeUnit.MINUTES)\n+\t\t\t\t.pollInterval(5, TimeUnit.SECONDS)\n+\t\t\t\t.untilAsserted(() -> {\n+\t\t\t\t\tMetricDescriptor metricDescriptor = this.metricClient.getMetricDescriptor(metricName);\n+\t\t\t\t\tassertThat(metricDescriptor.getName()).isEqualTo(metricName);", "originalCommit": "a8d4084bd0107247f0a99dbad3d42b6681769a35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyNTI4Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2455#discussion_r451925286", "bodyText": "Could you name it MetricsApplication? We are trying to make failing sample apps easier to identify by giving them distinct names (they all used to be SampleApp and such).", "author": "elefeint", "createdAt": "2020-07-09T02:16:43Z", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-metrics-sample/src/main/java/com/example/Application.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+@SpringBootApplication\n+public class Application {", "originalCommit": "a8d4084bd0107247f0a99dbad3d42b6681769a35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyNjQwOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2455#discussion_r451926409", "bodyText": "Let's return a hard-coded string such as \"Ping sent successfully\" back to the front-end, so the user does not have to wonder whether anything happened.", "author": "elefeint", "createdAt": "2020-07-09T02:21:04Z", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-metrics-sample/src/main/java/com/example/ExampleController.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import io.micrometer.core.instrument.MeterRegistry;\n+\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+public class ExampleController {\n+\n+\tprivate final MeterRegistry meterRegistry;\n+\n+\tpublic ExampleController(MeterRegistry meterRegistry) {\n+\t\tthis.meterRegistry = meterRegistry;\n+\t}\n+\n+\t@GetMapping(\"/\")\n+\tpublic void counter() {", "originalCommit": "a8d4084bd0107247f0a99dbad3d42b6681769a35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTkyOTU2OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2455#discussion_r451929568", "bodyText": "I think this needs .ignoreExceptionsMatching(e -> e.getMessage().contains(\"Could not find descriptor for metric\")) because the first time the test is run, the first few attempts to invoke untilAsserted would be to early for the metric to propagate through, so the test will fail on the first invocation.", "author": "elefeint", "createdAt": "2020-07-09T02:33:24Z", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-metrics-sample/src/test/java/com/example/MetricsSampleApplicationTests.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.example;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+\n+import com.google.api.MetricDescriptor;\n+import com.google.cloud.monitoring.v3.MetricServiceClient;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.web.client.TestRestTemplate;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.awaitility.Awaitility.await;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assume.assumeThat;\n+\n+/**\n+ * Tests for the metrics sample app.\n+ *\n+ * @author Edd\u00fa Mel\u00e9ndez\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT, classes = {Application.class})\n+public class MetricsSampleApplicationTests {\n+\n+\t@Autowired\n+\tprivate GcpProjectIdProvider projectIdProvider;\n+\n+\t@Autowired\n+\tprivate TestRestTemplate testRestTemplate;\n+\n+\t@LocalServerPort\n+\tprivate int port;\n+\n+\tprivate MetricServiceClient metricClient;\n+\n+\t@BeforeClass\n+\tpublic static void checkToRun() {\n+\t\tassumeThat(\n+\t\t\t\t\"Google Cloud Monitoring integration tests are disabled. \"\n+\t\t\t\t\t\t+ \"Please use '-Dit.metrics=true' to enable them. \",\n+\t\t\t\tSystem.getProperty(\"it.metrics\"), is(\"true\"));\n+\t}\n+\n+\t@Before\n+\tpublic void setupLogging() throws IOException {\n+\t\tthis.metricClient = MetricServiceClient.create();\n+\t}\n+\n+\t@Test\n+\tpublic void testMetricRecordedInStackdriver() {\n+\t\tString url = String.format(\"http://localhost:%s/\", this.port);\n+\t\tString projectId = this.projectIdProvider.getProjectId();\n+\t\tString metricType = \"custom.googleapis.com/ping\";\n+\t\tString metricName = \"projects/\" + projectId + \"/metricDescriptors/\" + metricType;\n+\n+\t\tResponseEntity<String> responseEntity = this.testRestTemplate.getForEntity(url, String.class);\n+\t\tassertThat(responseEntity.getStatusCode().is2xxSuccessful()).isTrue();\n+\n+\t\tawait().atMost(4, TimeUnit.MINUTES)\n+\t\t\t\t.pollInterval(5, TimeUnit.SECONDS)", "originalCommit": "a8d4084bd0107247f0a99dbad3d42b6681769a35", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "d1601545dc1392696e0a2d6e696ccd36a71dffbf", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d1601545dc1392696e0a2d6e696ccd36a71dffbf", "message": "Fix comments", "committedDate": "2020-07-10T01:40:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NDg5OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2455#discussion_r454044899", "bodyText": "This block ideally would run once, before the await(), so a new test metric is generated every time this test runs, but not more often.\nRight now, with this block inside the assert lambda, a new metric is created every 5 seconds, and has to complete immediately for the test to succeed.", "author": "elefeint", "createdAt": "2020-07-14T01:33:42Z", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-metrics-sample/src/test/java/com/example/MetricsSampleApplicationTests.java", "diffHunk": "@@ -74,17 +75,21 @@ public void setupLogging() throws IOException {\n \n \t@Test\n \tpublic void testMetricRecordedInStackdriver() {\n-\t\tString url = String.format(\"http://localhost:%s/\", this.port);\n \t\tString projectId = this.projectIdProvider.getProjectId();\n-\t\tString metricType = \"custom.googleapis.com/ping\";\n-\t\tString metricName = \"projects/\" + projectId + \"/metricDescriptors/\" + metricType;\n-\n-\t\tResponseEntity<String> responseEntity = this.testRestTemplate.getForEntity(url, String.class);\n-\t\tassertThat(responseEntity.getStatusCode().is2xxSuccessful()).isTrue();\n \n \t\tawait().atMost(4, TimeUnit.MINUTES)\n \t\t\t\t.pollInterval(5, TimeUnit.SECONDS)\n+\t\t\t\t.ignoreExceptionsMatching(e -> e.getMessage().contains(\"Could not find descriptor for metric\"))\n \t\t\t\t.untilAsserted(() -> {\n+\t\t\t\t\tString id = UUID.randomUUID().toString();\n+\t\t\t\t\tString url = String.format(\"http://localhost:%s/%s\", this.port, id);\n+\n+\t\t\t\t\tResponseEntity<String> responseEntity = this.testRestTemplate.postForEntity(url, null, String.class);\n+\t\t\t\t\tassertThat(responseEntity.getStatusCode().is2xxSuccessful()).isTrue();\n+\n+\t\t\t\t\tString metricType = \"custom.googleapis.com/\" + id;\n+\t\t\t\t\tString metricName = \"projects/\" + projectId + \"/metricDescriptors/\" + metricType;", "originalCommit": "d1601545dc1392696e0a2d6e696ccd36a71dffbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDA0NTIwOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2455#discussion_r454045209", "bodyText": "Let's prefix the metric with \"integration_test\". It will make the test metrics easier to find.\nAlso, Stackdriver seems to replace all dashes with underscores; let's help it out:\nString id = \"integration_test_\" + UUID.randomUUID().toString().replace('-', '_');", "author": "elefeint", "createdAt": "2020-07-14T01:34:55Z", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-metrics-sample/src/test/java/com/example/MetricsSampleApplicationTests.java", "diffHunk": "@@ -74,17 +75,21 @@ public void setupLogging() throws IOException {\n \n \t@Test\n \tpublic void testMetricRecordedInStackdriver() {\n-\t\tString url = String.format(\"http://localhost:%s/\", this.port);\n \t\tString projectId = this.projectIdProvider.getProjectId();\n-\t\tString metricType = \"custom.googleapis.com/ping\";\n-\t\tString metricName = \"projects/\" + projectId + \"/metricDescriptors/\" + metricType;\n-\n-\t\tResponseEntity<String> responseEntity = this.testRestTemplate.getForEntity(url, String.class);\n-\t\tassertThat(responseEntity.getStatusCode().is2xxSuccessful()).isTrue();\n \n \t\tawait().atMost(4, TimeUnit.MINUTES)\n \t\t\t\t.pollInterval(5, TimeUnit.SECONDS)\n+\t\t\t\t.ignoreExceptionsMatching(e -> e.getMessage().contains(\"Could not find descriptor for metric\"))\n \t\t\t\t.untilAsserted(() -> {\n+\t\t\t\t\tString id = UUID.randomUUID().toString();", "originalCommit": "d1601545dc1392696e0a2d6e696ccd36a71dffbf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5ca23eb9ed176cb14ea781023310c0d9fb9f812c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5ca23eb9ed176cb14ea781023310c0d9fb9f812c", "message": "Fix comments", "committedDate": "2020-07-14T02:13:13Z", "type": "commit"}]}