{"pr_number": 2520, "pr_title": "Differentiate between Publisher and Subscriber TransportChannelProvider", "pr_createdAt": "2020-09-11T03:19:26Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520", "timeline": [{"oid": "4893794f0f18d493eea05769c1f3ad04e6ec6427", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4893794f0f18d493eea05769c1f3ad04e6ec6427", "message": "Differentiate between Publisher and Subscriber TransportChannelProvider\n\nEnsures that the correct client library defaults are applied for `maxInboundMessageSize`.\n\nFixes: #2511.", "committedDate": "2020-09-11T03:14:14Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MDEyNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520#discussion_r487040127", "bodyText": "define a 20MB constant maybe? Bit shifting is a bit obfuscated.", "author": "elefeint", "createdAt": "2020-09-11T13:20:48Z", "path": "spring-cloud-gcp-autoconfigure/src/test/java/org/springframework/cloud/gcp/autoconfigure/pubsub/GcpPubSubAutoConfigurationTests.java", "diffHunk": "@@ -64,12 +69,33 @@ public void keepAliveValue_custom() {\n \t\t\tGcpPubSubProperties props = ctx.getBean(GcpPubSubProperties.class);\n \t\t\tassertThat(props.getKeepAliveIntervalMinutes()).isEqualTo(2);\n \n-\t\t\tTransportChannelProvider tcp = ctx.getBean(TransportChannelProvider.class);\n-\t\t\tassertThat(((InstantiatingGrpcChannelProvider) tcp).getKeepAliveTime().toMinutes())\n+\t\t\tTransportChannelProvider subscriberTcp = ctx.getBean(\"subscriberTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tTransportChannelProvider publisherTcp = ctx.getBean(\"publisherTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tassertThat(((InstantiatingGrpcChannelProvider) subscriberTcp).getKeepAliveTime().toMinutes())\n+\t\t\t\t\t.isEqualTo(2);\n+\t\t\tassertThat(((InstantiatingGrpcChannelProvider) publisherTcp).getKeepAliveTime().toMinutes())\n \t\t\t\t\t.isEqualTo(2);\n \t\t});\n \t}\n \n+\t@Test\n+\tpublic void maxInboundMessageSize_default() {\n+\t\tApplicationContextRunner contextRunner = new ApplicationContextRunner()\n+\t\t\t\t.withConfiguration(AutoConfigurations.of(GcpPubSubAutoConfiguration.class))\n+\t\t\t\t.withUserConfiguration(TestConfig.class);\n+\n+\t\tcontextRunner.run(ctx -> {\n+\n+\t\t\tTransportChannelProvider subscriberTcp = ctx.getBean(\"subscriberTransportChannelProvider\", TransportChannelProvider.class);\n+\t\t\tassertThat(FieldUtils.readField(subscriberTcp, \"maxInboundMessageSize\", true))\n+\t\t\t\t\t.isEqualTo(20 << 20);", "originalCommit": "4893794f0f18d493eea05769c1f3ad04e6ec6427", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2MTU1NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520#discussion_r487061554", "bodyText": "It's a copy-paste from the client library.", "author": "meltsufin", "createdAt": "2020-09-11T13:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MDEyNw=="}], "type": "inlineReview"}, {"oid": "7783948f2939039ad35dd0b7d3d028a8b2a13731", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/7783948f2939039ad35dd0b7d3d028a8b2a13731", "message": "Merge remote-tracking branch 'origin/master' into pubsub-transport-channel-provider", "committedDate": "2020-09-11T15:41:25Z", "type": "commit"}, {"oid": "3356932eeaf3fa706646fdc628ea83da1e058c0a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3356932eeaf3fa706646fdc628ea83da1e058c0a", "message": "fix emulator tests", "committedDate": "2020-09-11T15:46:00Z", "type": "commit"}, {"oid": "861f199ed9481f5b0b3d44bc0c9266dfced13b1f", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/861f199ed9481f5b0b3d44bc0c9266dfced13b1f", "message": "add release note", "committedDate": "2020-09-11T15:57:11Z", "type": "commit"}, {"oid": "861f199ed9481f5b0b3d44bc0c9266dfced13b1f", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/861f199ed9481f5b0b3d44bc0c9266dfced13b1f", "message": "add release note", "committedDate": "2020-09-11T15:57:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MTEzMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520#discussion_r487141130", "bodyText": "I wonder if admin functionality should have its own. The most obvious usecase is needing different credentials for admin operations.", "author": "elefeint", "createdAt": "2020-09-11T16:00:59Z", "path": "spring-cloud-gcp-autoconfigure/src/main/java/org/springframework/cloud/gcp/autoconfigure/pubsub/GcpPubSubAutoConfiguration.java", "diffHunk": "@@ -352,12 +353,12 @@ public TopicAdminClient topicAdminClient(\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic TopicAdminSettings topicAdminSettings(\n-\t\t\tTransportChannelProvider transportChannelProvider) {\n+\t\t\t@Qualifier(\"publisherTransportChannelProvider\") TransportChannelProvider publisherTransportChannelProvider) {", "originalCommit": "861f199ed9481f5b0b3d44bc0c9266dfced13b1f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0NDk4Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2520#discussion_r487144982", "bodyText": "I thought that too, but I saw that they use exactly the same default for admin client.\nhttps://github.com/googleapis/java-pubsub/blob/8cf77ee3b31356f342942a9ffaa61db2d0686769/google-cloud-pubsub/src/main/java/com/google/cloud/pubsub/v1/SubscriptionAdminSettings.java#L227", "author": "meltsufin", "createdAt": "2020-09-11T16:07:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE0MTEzMA=="}], "type": "inlineReview"}]}