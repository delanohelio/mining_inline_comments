{"pr_number": 2441, "pr_title": "Add maxMessages to PubSubReactiveFactory.poll", "pr_createdAt": "2020-06-19T05:39:45Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2441", "timeline": [{"oid": "3b1b51ba0c7593dbba5c07866a13b3cfdcd36e30", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3b1b51ba0c7593dbba5c07866a13b3cfdcd36e30", "message": "Add maxMessages to PubSubReactiveFactory.poll", "committedDate": "2020-06-19T05:33:02Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4OTA1MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2441#discussion_r444889050", "bodyText": "Could you exclude 0, as well? Underlying API requires a positive integer.", "author": "elefeint", "createdAt": "2020-06-24T13:22:49Z", "path": "spring-cloud-gcp-pubsub/src/main/java/org/springframework/cloud/gcp/pubsub/reactive/PubSubReactiveFactory.java", "diffHunk": "@@ -72,23 +72,29 @@ public PubSubReactiveFactory(PubSubSubscriberOperations subscriberOperations, Sc\n \t * batches of up to the requested number of messages until the full demand is fulfilled\n \t * or subscription terminated.\n \t * <p>For unlimited demand, the underlying subscription will be polled at a regular interval,\n-\t * requesting up to {@code Integer.MAX_VALUE} messages at each poll.\n+\t * requesting up to {@code maxMessages} messages at each poll.\n \t * <p>For specific demand, as many messages as are available will be returned immediately,\n \t * with remaining demand being fulfilled in the future.\n \t * Pub/Sub timeout will cause a retry with the same demand.\n \t * <p>Any exceptions that are thrown by the Pub/Sub client will be passed as an error to the stream.\n \t * The error handling operators, like {@link Flux#retry()},\n \t * can be used to recover and continue streaming messages.\n \t * @param subscriptionName subscription from which to retrieve messages.\n-\t * @param pollingPeriodMs how frequently to poll the source subscription in case of unlimited demand, in milliseconds.\n+\t * @param pollingPeriodMs how frequently to poll the source subscription in case of\n+\t * unlimited demand, in milliseconds.\n+\t * @param maxMessages max number of messages that may be pulled from the source\n+\t * subscription in case of unlimited demand.\n \t * @return infinite stream of {@link AcknowledgeablePubsubMessage} objects.\n+\t * @throws IllegalArgumentException if {@code maxMessages < 0}\n \t */\n-\tpublic Flux<AcknowledgeablePubsubMessage> poll(String subscriptionName, long pollingPeriodMs) {\n-\n+\tpublic Flux<AcknowledgeablePubsubMessage> poll(String subscriptionName, long pollingPeriodMs, int maxMessages) {\n+\t\tif (maxMessages < 0) {\n+\t\t\tthrow new IllegalArgumentException(\"maxMessages cannot be less than 0\");", "originalCommit": "3b1b51ba0c7593dbba5c07866a13b3cfdcd36e30", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3ODUxMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2441#discussion_r445078513", "bodyText": "Methods with multiple numeric parameters can get confusing (we have String, long, int here). I think I'd prefer to set maxMessages in an overloaded PubSubReactiveFactory constructor.\nUpsides:\n\nwe get to keep a single poll() method.\nmaxMessages can be autoconfigured to current max int value by default and overridden with a property, keeping it backwards compatible and consistent with how we configure other functionality.\nmaxMessages won't need to be propagated from poll() to pollingPull() to pullAll().\n\nDownside:\n\ndifferent instances of the factory have to be created if different maxMessages settings are required in a single application. This is mitigated by how lightweight PubSubReactiveFactory is; it's just a wrapper around PubSubTemplate and a reactor scheduler.\n\n@meltsufin What do you think?", "author": "elefeint", "createdAt": "2020-06-24T18:08:40Z", "path": "spring-cloud-gcp-pubsub/src/main/java/org/springframework/cloud/gcp/pubsub/reactive/PubSubReactiveFactory.java", "diffHunk": "@@ -72,23 +72,29 @@ public PubSubReactiveFactory(PubSubSubscriberOperations subscriberOperations, Sc\n \t * batches of up to the requested number of messages until the full demand is fulfilled\n \t * or subscription terminated.\n \t * <p>For unlimited demand, the underlying subscription will be polled at a regular interval,\n-\t * requesting up to {@code Integer.MAX_VALUE} messages at each poll.\n+\t * requesting up to {@code maxMessages} messages at each poll.\n \t * <p>For specific demand, as many messages as are available will be returned immediately,\n \t * with remaining demand being fulfilled in the future.\n \t * Pub/Sub timeout will cause a retry with the same demand.\n \t * <p>Any exceptions that are thrown by the Pub/Sub client will be passed as an error to the stream.\n \t * The error handling operators, like {@link Flux#retry()},\n \t * can be used to recover and continue streaming messages.\n \t * @param subscriptionName subscription from which to retrieve messages.\n-\t * @param pollingPeriodMs how frequently to poll the source subscription in case of unlimited demand, in milliseconds.\n+\t * @param pollingPeriodMs how frequently to poll the source subscription in case of\n+\t * unlimited demand, in milliseconds.\n+\t * @param maxMessages max number of messages that may be pulled from the source\n+\t * subscription in case of unlimited demand.\n \t * @return infinite stream of {@link AcknowledgeablePubsubMessage} objects.\n+\t * @throws IllegalArgumentException if {@code maxMessages < 0}\n \t */\n-\tpublic Flux<AcknowledgeablePubsubMessage> poll(String subscriptionName, long pollingPeriodMs) {\n-\n+\tpublic Flux<AcknowledgeablePubsubMessage> poll(String subscriptionName, long pollingPeriodMs, int maxMessages) {", "originalCommit": "3b1b51ba0c7593dbba5c07866a13b3cfdcd36e30", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MjAzOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2441#discussion_r445092039", "bodyText": "Makes sense, I see the maxMessages setting being something not changed too frequently so setting in constructor seems appropriate.", "author": "dzou", "createdAt": "2020-06-24T18:33:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3ODUxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIzMTYwNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2441#discussion_r445231605", "bodyText": "Overloaded constructor or overloaded poll methods would work. Since it affects multiple methods, constructor is probably preferred.\nEither way, the way it is now, is not good because it would causes a breaking change.", "author": "meltsufin", "createdAt": "2020-06-24T23:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA3ODUxMw=="}], "type": "inlineReview"}, {"oid": "8aa020783b7645bbe9a6bd055440ca4b88aee467", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8aa020783b7645bbe9a6bd055440ca4b88aee467", "message": "Revert \"Add maxMessages to PubSubReactiveFactory.poll\"\n\nThis reverts commit 3b1b51ba", "committedDate": "2020-06-25T03:20:47Z", "type": "commit"}, {"oid": "8a63241a6b76c5ebc8a0ff8064e7316060441c9a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8a63241a6b76c5ebc8a0ff8064e7316060441c9a", "message": "Add maxMessages to overloaded PubSubReactiveFactory constructor", "committedDate": "2020-06-25T03:44:32Z", "type": "commit"}, {"oid": "d89a52ef76be2be775713c4cbf35fed11465476d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d89a52ef76be2be775713c4cbf35fed11465476d", "message": "Fix trailing whitespace in PubSubReactiveFactoryTests", "committedDate": "2020-06-25T03:57:43Z", "type": "commit"}]}