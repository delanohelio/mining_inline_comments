{"pr_number": 2284, "pr_title": "Secret manager template with project (#2283)", "pr_createdAt": "2020-03-26T15:17:49Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284", "timeline": [{"oid": "d38c47ba4e7ab8d82060c281ff704b7995caa120", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d38c47ba4e7ab8d82060c281ff704b7995caa120", "message": "Add projectId selection capability to SecretManagerTemplate class. The default project is still use by default, but can be overridden by a parameter for the creation and the access to the secrets.", "committedDate": "2020-03-26T14:36:00Z", "type": "commit"}, {"oid": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8943344de4ac0ecf72ea6c1e9aa0460302263cc0", "message": "Doc improvement: add the directory for the eclipse formatter.", "committedDate": "2020-03-26T14:36:29Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNTMwOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398725308", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order` in the `src/eclipse` directory\n          \n          \n            \n            Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order` in the `src/eclipse` directory.", "author": "meltsufin", "createdAt": "2020-03-26T16:45:37Z", "path": "CONTRIBUTING.adoc", "diffHunk": "@@ -47,7 +47,7 @@ Install the plugin `Eclipse Code Formatter`.\n You can find it by searching in \"Browse Repositories\", under `Settings > Plugins` within IDEA (Once installed, you will need to reboot IDEA for it to take effect).\n \n Then navigate to `Settings > Other Settings` (this might be under `Preferences` on Mac) and select the Eclipse Code Formatter.\n-Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order`.\n+Select the `eclipse-code-formatter.xml` file for the field `Eclipse Java Formatter config file` and the file `eclipse.importorder` for the field `Import order` in the `src/eclipse` directory", "originalCommit": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMDY2OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398930668", "bodyText": "done in newer commit", "author": "guillaumeblaquiere", "createdAt": "2020-03-26T22:29:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNTMwOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNjA4OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398726088", "bodyText": "I would just create an overloaded method createSecret(secretId, payload, projectId)", "author": "meltsufin", "createdAt": "2020-03-26T16:46:41Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -40,6 +40,21 @@\n \t */\n \tvoid createSecret(String secretId, String payload);\n \n+\t/**\n+\t * Creates a new secret or a new version of existing secret with the provided\n+\t * {@code payload} for a specific {@code projectId}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with the secret\n+\t * {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload string.\n+\t * @param projectId unique identifier of your project.\n+\t */\n+\tvoid createSecretWithProject(String secretId, String payload, String projectId);", "originalCommit": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMDYyMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398930622", "bodyText": "done in newer commit", "author": "guillaumeblaquiere", "createdAt": "2020-03-26T22:29:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODcyNjA4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NTg1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398745851", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void testCreateSecretIfMissingWithProject() {\n          \n          \n            \n            \tpublic void testCreateSecretIfMissing_withProject() {\n          \n      \n    \n    \n  \n\nMinor style - if you could make modify the test name to be _withProject I think it is more clear that it refers to using the project parameter", "author": "dzou", "createdAt": "2020-03-26T17:13:25Z", "path": "spring-cloud-gcp-secretmanager/src/test/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplateTests.java", "diffHunk": "@@ -90,6 +90,35 @@ public void testCreateSecretIfMissing() {\n \t\tverify(this.client).addSecretVersion(addSecretVersionRequest);\n \t}\n \n+\t@Test\n+\tpublic void testCreateSecretIfMissingWithProject() {", "originalCommit": "8943344de4ac0ecf72ea6c1e9aa0460302263cc0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzMDU0NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398930545", "bodyText": "done in newer commit", "author": "guillaumeblaquiere", "createdAt": "2020-03-26T22:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc0NTg1MQ=="}], "type": "inlineReview"}, {"oid": "fdff00468033caa3c8096b1a2c33a1bb17640a21", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/fdff00468033caa3c8096b1a2c33a1bb17640a21", "message": "Fix typo", "committedDate": "2020-03-26T20:40:26Z", "type": "commit"}, {"oid": "7e03bf7a76aba8e365132f78d78e67866071db16", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/7e03bf7a76aba8e365132f78d78e67866071db16", "message": "Update overload method definition.\nAdd public static field for latest value.", "committedDate": "2020-03-26T21:26:15Z", "type": "commit"}, {"oid": "94e11f017e07cfd1c56efaed92408a2214371c0d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/94e11f017e07cfd1c56efaed92408a2214371c0d", "message": "Add bootstap with projectId selection. Same logic as versions.", "committedDate": "2020-03-26T22:04:03Z", "type": "commit"}, {"oid": "ea6633054da63aa75c8524edb7019dbb7d5a73c6", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ea6633054da63aa75c8524edb7019dbb7d5a73c6", "message": "Update example with command, other project use, bootstrap configuration for versions and projectId.", "committedDate": "2020-03-26T22:05:50Z", "type": "commit"}, {"oid": "a28aff22f4fcf781a23e1e2a2b4713f0ec204f12", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/a28aff22f4fcf781a23e1e2a2b4713f0ec204f12", "message": "Fix typo", "committedDate": "2020-03-26T22:22:30Z", "type": "commit"}, {"oid": "e5190f2591a055590a5977df143c7b18a6b3b0eb", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e5190f2591a055590a5977df143c7b18a6b3b0eb", "message": "Prevent test error", "committedDate": "2020-03-26T22:23:08Z", "type": "commit"}, {"oid": "e871b87335400e8b6d075c447d2c17a748c6138d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e871b87335400e8b6d075c447d2c17a748c6138d", "message": "Fix Style", "committedDate": "2020-03-26T22:43:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNjgwMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398936801", "bodyText": "Oh yup, I see. We would prefer all uppercase name here: LATEST_VERSION.", "author": "dzou", "createdAt": "2020-03-26T22:45:24Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -40,6 +40,11 @@\n  */\n public class SecretManagerTemplate implements SecretManagerOperations {\n \n+\t/**\n+\t * Default value for the latest version of the secret.\n+\t */\n+\tpublic static final String latestVersion = \"latest\";", "originalCommit": "e5190f2591a055590a5977df143c7b18a6b3b0eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzOTQ0OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r398939449", "bodyText": "Pushed", "author": "guillaumeblaquiere", "createdAt": "2020-03-26T22:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODkzNjgwMQ=="}], "type": "inlineReview"}, {"oid": "26e0334cecb44cb7ea76532d6904a7292c584bc0", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/26e0334cecb44cb7ea76532d6904a7292c584bc0", "message": "Refactor Public static variable to UPPER", "committedDate": "2020-03-26T22:52:42Z", "type": "commit"}, {"oid": "e9d0a5b9ec5f4bbea0b8ef387af9f283420e81ff", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e9d0a5b9ec5f4bbea0b8ef387af9f283420e81ff", "message": "Fix @Where with ORDER BY query generation (#2267)\n\nFixes: #2266.", "committedDate": "2020-03-27T08:23:37Z", "type": "commit"}, {"oid": "e08484c021e3fd2ed206ceda3e097dc39c52eb1e", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e08484c021e3fd2ed206ceda3e097dc39c52eb1e", "message": "Remove the version property in secret manager (#2270)\n\nRemoves the version property for secret manager", "committedDate": "2020-03-27T08:23:56Z", "type": "commit"}, {"oid": "e8a9538a7f660eaa31ae4204f9d14fd57bb4b284", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/e8a9538a7f660eaa31ae4204f9d14fd57bb4b284", "message": "Roolback for having only template update in this PR", "committedDate": "2020-03-27T08:23:57Z", "type": "commit"}, {"oid": "5a6f81866a0087f46d47ca2045ca88c44deff0f9", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5a6f81866a0087f46d47ca2045ca88c44deff0f9", "message": "Keep new line for readability", "committedDate": "2020-03-27T08:23:57Z", "type": "commit"}, {"oid": "39e94e3483a6a47e6ad5aebd13312c781c702161", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/39e94e3483a6a47e6ad5aebd13312c781c702161", "message": "Remove the version property in secret manager (#2270)\n\nRemoves the version property for secret manager", "committedDate": "2020-03-27T08:31:38Z", "type": "commit"}, {"oid": "2d2600893816b2d677f708cabb15488637761950", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2d2600893816b2d677f708cabb15488637761950", "message": "Add bootstap with projectId selection. Same logic as versions.", "committedDate": "2020-03-27T08:31:38Z", "type": "commit"}, {"oid": "00f1c94103efe39a6918d1ab96d3e16bc3eb6d6e", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/00f1c94103efe39a6918d1ab96d3e16bc3eb6d6e", "message": "Fix wrong commit", "committedDate": "2020-03-27T08:35:45Z", "type": "commit"}, {"oid": "6b4210932a5734dbe28011c4b0dd906c5fbf50f8", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6b4210932a5734dbe28011c4b0dd906c5fbf50f8", "message": "Merge branch 'master' into guillaume", "committedDate": "2020-03-27T15:07:26Z", "type": "commit"}, {"oid": "d4296e740fdfeff1f773fba21151d48f8402dbcc", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d4296e740fdfeff1f773fba21151d48f8402dbcc", "message": "fix sample tests", "committedDate": "2020-03-27T15:46:10Z", "type": "commit"}, {"oid": "cd866834820b7cf978eed80dfabfe37725c662b6", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/cd866834820b7cf978eed80dfabfe37725c662b6", "message": "refactor unit tests", "committedDate": "2020-03-27T15:57:16Z", "type": "commit"}, {"oid": "b0519b8ae416ad6673076776bbb1a93256e08342", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b0519b8ae416ad6673076776bbb1a93256e08342", "message": "fix checkstyle", "committedDate": "2020-03-27T16:52:01Z", "type": "commit"}, {"oid": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3", "message": "checkstyle", "committedDate": "2020-03-27T17:31:22Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTgzNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399539834", "bodyText": "Are we missing String getSecretString(String secretId, String projectId) variation or would this be too much?", "author": "meltsufin", "createdAt": "2020-03-27T21:11:22Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -73,6 +103,18 @@\n \t */\n \tString getSecretString(String secretId, String versionName);\n \n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName} for a specific {@code projectId}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @param projectId unique identifier of your project.\n+\t * @return The secret payload as String\n+\t */\n+\tString getSecretString(String secretId, String versionName, String projectId);", "originalCommit": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1OTgyNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399559824", "bodyText": "No, it's not missing. We discussed previously about this.\n\nJava method signature are on the type, not on the param name and there were a conflict between these (for example):\n  @Override\n  public String getSecretString(String secretId, String versionName) {....}\n\n  @Override\n  public String getSecretString(String secretId, String projectId) {....}\n\n\nSo we choose to only propose the projectId with the version. And that's why I also introduced a static public variable LATEST_VERSION for helping the developers when they want to get the secret without care about the version\nBut, we can explore another solution.", "author": "guillaumeblaquiere", "createdAt": "2020-03-27T22:06:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUzOTgzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg3NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399540875", "bodyText": "Does it make sense to have secretExists(String secretId, String versionName, String projectId)?\nThis would check if a specific version of the secret exists.", "author": "meltsufin", "createdAt": "2020-03-27T21:13:52Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -111,4 +177,14 @@\n \t * @return true if the secret exists in Secret Manager; false otherwise\n \t */\n \tboolean secretExists(String secretId);\n+\n+\t/**\n+\t * Returns true if there already exists a secret under the GCP {@code projectId} with the\n+\t * {@code secretId}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param projectId unique identifier of your project.\n+\t * @return true if the secret exists in Secret Manager; false otherwise\n+\t */\n+\tboolean secretExists(String secretId, String projectId);", "originalCommit": "baae0dd94d1756b8c26f5a5e22a705b42ca9f8d3", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU2MjA1Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399562057", "bodyText": "I guess that the primary use of this function is internal for the secret creation (create a new secret or add a version to an existing secret). Thereby, the version is useless in this context.\nHowever, if we want to offer a convenient interface to developer, it could be interesting. If you agree, I propose these interfaces:\nboolean secretExists(String secretId);// Check latest version in default project\nboolean secretExists(String secretId, String version); // Check specific version in default project\nboolean secretExists(String secretId, String version, String projectId);// // Check specific version in specific project\n\nLike for your getSecretString comment, I won't be able to keep boolean secretExists(String secretId, String projectId); because of method signature conflict with boolean secretExists(String secretId, String version);\nLet me know.", "author": "guillaumeblaquiere", "createdAt": "2020-03-27T22:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU4NTI0OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399585248", "bodyText": "Yeah let's omit adding secretExists(String secretId, String versionName, String projectId), since it would conflict with existing method signature and I think its value is relatively limited as you say with it being primarily internal.", "author": "dzou", "createdAt": "2020-03-27T23:45:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg3NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY1OTY3Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399659672", "bodyText": "Sorry for the noise, you are absolutely right about the method signature collisions. I didn't think of that.", "author": "meltsufin", "createdAt": "2020-03-28T12:57:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0MDg3NQ=="}], "type": "inlineReview"}, {"oid": "bea11dc8f01f819d2d2c15fd8dd63bd9381eb02c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/bea11dc8f01f819d2d2c15fd8dd63bd9381eb02c", "message": "Reduce number of overloaded methods", "committedDate": "2020-03-28T17:39:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwNjk1OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r399706958", "bodyText": "Should we remove this variant of getSecretString as well? Same goes for getSecretBytes.", "author": "meltsufin", "createdAt": "2020-03-28T20:39:00Z", "path": "spring-cloud-gcp-samples/spring-cloud-gcp-secretmanager-sample/src/main/java/com/example/SecretManagerWebController.java", "diffHunk": "@@ -46,25 +48,58 @@\n \t@Value(\"${secrets.application-secret}\")\n \tprivate String applicationSecretValue;\n \n+\t// Application secret is set into the properties file and get here using @Value\n+\t@Value(\"${my-application-secret}\")\n+\tprivate String myApplicationSecretValue;\n+\n \t@GetMapping(\"/\")\n \tpublic ModelAndView renderIndex(ModelMap map) {\n \t\tmap.put(\"applicationSecret\", this.applicationSecretValue);\n+\t\tmap.put(\"myApplicationSecret\", this.myApplicationSecretValue);\n \t\treturn new ModelAndView(\"index.html\", map);\n \t}\n \n \t@GetMapping(\"/getSecret\")\n \t@ResponseBody\n-\tpublic String getSecret(@RequestParam String secretId, ModelMap map) {\n-\t\tString secretPayload = this.secretManagerTemplate.getSecretString(secretId);\n+\tpublic String getSecret(\n+\t\t\t@RequestParam String secretId,\n+\t\t\t@RequestParam(required = false) String version,\n+\t\t\t@RequestParam(required = false) String projectId,\n+\t\t\tModelMap map) {\n+\n+\t\tif (StringUtils.isEmpty(version)) {\n+\t\t\tversion = SecretManagerTemplate.LATEST_VERSION;\n+\t\t}\n+\n+\t\tString secretPayload;\n+\t\tif (StringUtils.isEmpty(projectId)) {\n+\t\t\tsecretPayload = this.secretManagerTemplate.getSecretString(secretId, version);", "originalCommit": "bea11dc8f01f819d2d2c15fd8dd63bd9381eb02c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE3NTY1Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r400175653", "bodyText": "These variants exist in the version 1.2.2. We shouldn't remove them to ensure the downward compatibility.", "author": "guillaumeblaquiere", "createdAt": "2020-03-30T13:07:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwNjk1OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxMzYwNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2284#discussion_r400213604", "bodyText": "Ah, didn't realize that. Thanks!", "author": "meltsufin", "createdAt": "2020-03-30T13:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTcwNjk1OA=="}], "type": "inlineReview"}]}