{"pr_number": 2322, "pr_title": "rely on spring for nullability constraints checking", "pr_createdAt": "2020-04-15T18:45:56Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322", "timeline": [{"oid": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "message": "rely on spring for nullabiliy constraints checking", "committedDate": "2020-04-15T18:43:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409065277", "bodyText": "Can we keep the test but change the assertions?", "author": "meltsufin", "createdAt": "2020-04-15T18:58:10Z", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/repository/query/PartTreeDatastoreQueryTests.java", "diffHunk": "@@ -789,19 +789,6 @@ public void usingIdField() throws NoSuchMethodException {\n \t\tassertThat(this.partTreeDatastoreQuery.execute(params)).isEqualTo(trade);\n \t}\n \n-\n-\t@Test\n-\tpublic void nonCollectionReturnTypeNoResults() throws NoSuchMethodException {", "originalCommit": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTk3MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409091970", "bodyText": "The checks are now in AOP method interceptor. It would be hard to set up it in a unit test.", "author": "dmitry-s", "createdAt": "2020-04-15T19:46:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0Nzk2OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147969", "bodyText": "Can it be moved to an integration test then?", "author": "meltsufin", "createdAt": "2020-04-15T21:35:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY2NzQ3NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409667475", "bodyText": "I added an IT test for that.", "author": "dmitry-s", "createdAt": "2020-04-16T15:55:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTU5MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409065591", "bodyText": "What does this do?", "author": "meltsufin", "createdAt": "2020-04-15T18:58:40Z", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/package-info.java", "diffHunk": "@@ -0,0 +1,5 @@\n+/**\n+ * IT tests for spring-cloud-gcp-data-datastore.\n+ */\n+@org.springframework.lang.NonNullApi\n+package org.springframework.cloud.gcp.data.datastore.it;", "originalCommit": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3NzA1Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409077056", "bodyText": "@org.springframework.lang.NonNullApi enables null checks", "author": "dmitry-s", "createdAt": "2020-04-15T19:18:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NTU5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NjE2OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409066168", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ==== Null Handling of Repository Methods\n          \n          \n            \n            ==== Empty result handling in repository methods", "author": "meltsufin", "createdAt": "2020-04-15T18:59:34Z", "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods", "originalCommit": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2Njc0MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409066740", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n          \n          \n            \n            Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty collection.", "author": "meltsufin", "createdAt": "2020-04-15T19:00:30Z", "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.", "originalCommit": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067139", "bodyText": "Is this supposed to be a subsection of the above or a new section?", "author": "meltsufin", "createdAt": "2020-04-15T19:01:11Z", "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations", "originalCommit": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA4Nzk3Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409087973", "bodyText": "I think it's a separate section.", "author": "dmitry-s", "createdAt": "2020-04-15T19:39:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NzIxMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147213", "bodyText": "My question is more on \"should it be\"?", "author": "meltsufin", "createdAt": "2020-04-15T21:34:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE2ODA0MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409168041", "bodyText": "I don't think it should. It's not only about return values, but also about (non-)nullable parameters.", "author": "dmitry-s", "createdAt": "2020-04-15T22:20:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MzA3Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409563072", "bodyText": "Whether an exception is thrown or null is returned seems directly related to the handling of empty results. Handling null parameters can be a separate section.", "author": "meltsufin", "createdAt": "2020-04-16T13:38:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzEzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzUwMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067503", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            They provide an opt-in null checks during runtime, as follows:\n          \n          \n            \n            They enable null checks during runtime, as follows:", "author": "meltsufin", "createdAt": "2020-04-15T19:01:55Z", "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:", "originalCommit": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA2NzkyMQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409067921", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n          \n          \n            \n             . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where `@NonNullApi` applies).", "author": "meltsufin", "createdAt": "2020-04-15T19:02:39Z", "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).", "originalCommit": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409070025", "bodyText": "Is there anything you can use at a class level or method level?\nWouldn't @NonNull on  a method work?\nThis sentence makes it sound like you can only make it work on methods by using the package-level annotation which is extremely inflexible and cumbersome.", "author": "meltsufin", "createdAt": "2020-04-15T19:06:17Z", "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,36 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Null Handling of Repository Methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty representation.\n+\n+==== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].\n+They provide an opt-in null checks during runtime, as follows:\n+\n+ . `@NonNullApi`: Used on the package level to declare that the default behavior for parameters and return values is to not accept or produce null values.\n+\n+ . `@NonNull`: Used on a parameter or return value that must not be null.\n+\n+ . `@Nullable`: Used on a parameter or return value that can be `null` (not needed on a parameter and return value where @NonNullApi applies).\n+\n+To enable runtime checking of nullability constraints for query methods, you need to activate non-nullability on the package level by using Spring\u2019s `@NonNullApi` in `package-info.java`, as shown in the following example:", "originalCommit": "2c15f7aa71ef6a4e576ceeb636c746f44be20e63", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA5MTI3NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409091274", "bodyText": "I think @NonNull should work on a method without @NonNullApi, but for some reason it doesn't. I'll look into that.", "author": "dmitry-s", "createdAt": "2020-04-15T19:45:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE0NzM3Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409147377", "bodyText": "Let's resolve this before merging.", "author": "meltsufin", "createdAt": "2020-04-15T21:34:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTE3NDc5OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409174798", "bodyText": "So turns out the class has to be annotated with javax.annotation.Nonnull in order for @NonNull to work on methods and parameters. This is not documented. I'm not sure if it's bag or undocumented feature.", "author": "dmitry-s", "createdAt": "2020-04-15T22:38:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTU2MDU4Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r409560587", "bodyText": "Can you file it as bug/question on the Spring side just to make sure we're not missing anything.", "author": "meltsufin", "createdAt": "2020-04-16T13:35:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NzM3Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r410257376", "bodyText": "I created an issue for Spring Data: https://jira.spring.io/browse/DATACMNS-1705", "author": "dmitry-s", "createdAt": "2020-04-17T14:23:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA3MDAyNQ=="}], "type": "inlineReview"}, {"oid": "d416fae8c2c21d6ff593940d72e7cf9fa6c2c67e", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d416fae8c2c21d6ff593940d72e7cf9fa6c2c67e", "message": "rely on spring for nullabiliy constraints checking", "committedDate": "2020-04-15T19:13:39Z", "type": "commit"}, {"oid": "8feec21beece7c50ad43c3282369a9996c5364a6", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8feec21beece7c50ad43c3282369a9996c5364a6", "message": "Apply suggestions from code review\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>", "committedDate": "2020-04-15T19:19:05Z", "type": "commit"}, {"oid": "508bcd7c1422820540ce943f10badd59a758dd86", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/508bcd7c1422820540ce943f10badd59a758dd86", "message": "Merge branch 'master' of github.com:spring-cloud/spring-cloud-gcp into datastore-nullability-constraints", "committedDate": "2020-04-17T18:56:21Z", "type": "commit"}, {"oid": "fece5abac5055cf948c4aaa7a61c9d7a75224ce6", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/fece5abac5055cf948c4aaa7a61c9d7a75224ce6", "message": "Merge branch 'datastore-nullability-constraints' of github.com:spring-cloud/spring-cloud-gcp into datastore-nullability-constraints", "committedDate": "2020-04-17T18:57:09Z", "type": "commit"}, {"oid": "486ff863a5ace0715ca23400ed85845dda8fdd94", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/486ff863a5ace0715ca23400ed85845dda8fdd94", "message": "add spanner test and docs", "committedDate": "2020-04-17T22:53:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyODA3Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r411428077", "bodyText": "I took another look at this documentation and realized that this is part of core Spring and is not specific to Spring Data at all. Hence, I don't think we need to make a big deal out of it here. I think it's enough to mention that if you want null checks use null-safety annotations and link to them.\nAlso, please use the non-version-specific link: https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#null-safety", "author": "meltsufin", "createdAt": "2020-04-20T14:33:28Z", "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,37 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+==== Empty result handling in repository methods\n+Java `java.util.Optional` can be used to indicate the potential absence of a return value.\n+\n+Alternatively, query methods can return the result without a wrapper.\n+In that case the absence of a query result is indicated by returning `null`.\n+Repository methods returning collections are guaranteed never to return `null` but rather the corresponding empty collection.\n+\n+===== Nullability Annotations\n+You can express nullability constraints for repository methods by using https://docs.spring.io/spring/docs/5.2.5.RELEASE/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability annotations].", "originalCommit": "486ff863a5ace0715ca23400ed85845dda8fdd94", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9dae3df2d06ed6a3d20442d7d6fb11fa8885f795", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/9dae3df2d06ed6a3d20442d7d6fb11fa8885f795", "message": "PR comments", "committedDate": "2020-04-20T17:07:01Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5NzU5NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2322#discussion_r411597595", "bodyText": "I think you deleted too much. The part about empty result handling was useful in my opinion. I would just collapse the whole nullability section into what you have here. The rest was fine.", "author": "meltsufin", "createdAt": "2020-04-20T18:28:33Z", "path": "docs/src/main/asciidoc/datastore.adoc", "diffHunk": "@@ -985,6 +985,8 @@ If a method's return type is `org.springframework.data.domain.Page`, the returne\n NOTE: Methods that return `Page` execute an additional query to compute total number of pages.\n Methods that return `Slice`, on the other hand, don't execute any additional queries and therefore are much more efficient.\n \n+NOTE: You can enable nullability checks. For more details please see https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#null-safety[Spring Framework\u2019s nullability docs].", "originalCommit": "9dae3df2d06ed6a3d20442d7d6fb11fa8885f795", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "23f72f5370c98701ff4c41f548c4c27f202bea06", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/23f72f5370c98701ff4c41f548c4c27f202bea06", "message": "PR comments", "committedDate": "2020-04-20T20:55:39Z", "type": "commit"}]}