{"pr_number": 2108, "pr_title": "support lazy loading for one-to-one references", "pr_createdAt": "2020-01-08T17:47:29Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108", "timeline": [{"oid": "9f51de542f7e2ed9ef7ab5fb254cf7dca4b9622a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/9f51de542f7e2ed9ef7ab5fb254cf7dca4b9622a", "message": "support lazy loading", "committedDate": "2020-01-08T17:43:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3ODkyNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r364378924", "bodyText": "I thought this was done in the previous PR, but I guess we missed it somehow.", "author": "meltsufin", "createdAt": "2020-01-08T18:32:04Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplate.java", "diffHunk": "@@ -462,18 +462,17 @@ public Key createKey(Class aClass, Object id) {\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tValue<?> value;\n-\t\t\tif (persistentProperty.isCollectionLike() || persistentProperty.getType() == Optional.class) {\n-\t\t\t\tif (LazyUtil.isLazyAndNotLoaded(val)) {\n-\t\t\t\t\tvalue = ListValue.of(LazyUtil.getKeys(val));\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tIterable<?> iterableVal = (Iterable<?>) ValueUtil.toListIfArray(val);\n-\t\t\t\t\tentitiesToSave.addAll(getEntitiesForSave(iterableVal, persistedEntities));\n-\t\t\t\t\tList<KeyValue> keyValues = StreamSupport.stream((iterableVal).spliterator(), false)\n-\t\t\t\t\t\t\t.map((o) -> KeyValue.of(this.getKey(o, false)))\n-\t\t\t\t\t\t\t.collect(Collectors.toList());\n-\t\t\t\t\tvalue = ListValue.of(keyValues);\n-\t\t\t\t}\n+\t\t\tif (LazyUtil.isLazyAndNotLoaded(val)) {", "originalCommit": "9f51de542f7e2ed9ef7ab5fb254cf7dca4b9622a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM3OTU0OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r364379548", "bodyText": "Suggested change", "author": "meltsufin", "createdAt": "2020-01-08T18:33:35Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/LazyUtil.java", "diffHunk": "@@ -37,12 +41,29 @@\n  */\n final class LazyUtil {\n \n+\tstatic private final ObjenesisStd objenesis = new ObjenesisStd();\n+\n \tprivate LazyUtil() {\n \t}\n \n-\tpublic static <T> T wrapSimpleLazyProxy(Function<List<Value<Key>>, T> supplierFunc, Class<T> type, List keys) {\n-\t\treturn (T) Proxy.newProxyInstance(type.getClassLoader(), new Class[] {type},\n+\tstatic <T> T wrapSimpleLazyProxy(Supplier<T> supplierFunc, Class<T> type, Value keys) {\n+\t\tif (type.isInterface()) {\n+\t\t\treturn (T) Proxy.newProxyInstance(type.getClassLoader(), new Class[] {type},\n \t\t\t\tnew SimpleLazyDynamicInvocationHandler<T>(supplierFunc, keys));\n+\t\t}\n+\t\tFactory factory = (Factory) objenesis.newInstance(getEnhancedTypeFor(type));\n+\t\tfactory.setCallbacks(new Callback[] { new SimpleLazyDynamicInvocationHandler<T>(supplierFunc, keys) });\n+\n+\t\treturn (T) factory;\n+\t}\n+\n+\tprivate static Class<?> getEnhancedTypeFor(Class<?> type) {\n+", "originalCommit": "9f51de542f7e2ed9ef7ab5fb254cf7dca4b9622a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0a71f05308da0f7539ea8028bc76c1c8d165eede", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/0a71f05308da0f7539ea8028bc76c1c8d165eede", "message": "PR comments", "committedDate": "2020-01-08T20:32:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDA2Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r364924067", "bodyText": "Should we log a warning if callbacks length is > 1? Is this a \"this should never happen\" scenario?", "author": "elefeint", "createdAt": "2020-01-09T19:37:43Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/LazyUtil.java", "diffHunk": "@@ -79,23 +99,30 @@ private static SimpleLazyDynamicInvocationHandler getProxy(Object object) {\n \t\t\treturn (SimpleLazyDynamicInvocationHandler) Proxy\n \t\t\t\t\t.getInvocationHandler(object);\n \t\t}\n+\t\telse if (object instanceof Factory) {\n+\t\t\tCallback[] callbacks = ((Factory) object).getCallbacks();\n+\t\t\tif (callbacks != null && callbacks.length == 1\n+\t\t\t\t\t&& callbacks[0] instanceof SimpleLazyDynamicInvocationHandler) {\n+\t\t\t\treturn (SimpleLazyDynamicInvocationHandler) callbacks[0];\n+\t\t\t}", "originalCommit": "0a71f05308da0f7539ea8028bc76c1c8d165eede", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwOTY1Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r365309657", "bodyText": "This should never happen if it's our proxy.", "author": "dmitry-s", "createdAt": "2020-01-10T16:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDUwNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r364924507", "bodyText": "Is there anything we could say about the difference between treatment of collections, interfaces and objects in the javadoc?", "author": "elefeint", "createdAt": "2020-01-09T19:38:40Z", "path": "spring-cloud-gcp-data-datastore/src/main/java/org/springframework/cloud/gcp/data/datastore/core/LazyUtil.java", "diffHunk": "@@ -63,7 +83,7 @@ public static boolean isLazyAndNotLoaded(Object object) {\n \t * @param object a proxy object\n \t * @return list of keys if the object is a proxy, null otherwise\n \t */", "originalCommit": "0a71f05308da0f7539ea8028bc76c1c8d165eede", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwODU2MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r365308560", "bodyText": "sure", "author": "dmitry-s", "createdAt": "2020-01-10T16:07:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNDUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNjk1OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r364926959", "bodyText": "Is this going to also go through the collection path (similar to saveTestCollectionLazy)?", "author": "elefeint", "createdAt": "2020-01-09T19:44:18Z", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/core/DatastoreTemplateTests.java", "diffHunk": "@@ -538,10 +537,20 @@ public void saveTest() {\n \t}\n \n \t@Test\n-\tpublic void saveTestLazy() {\n+\tpublic void saveTestCollectionLazy() {\n \t\tthis.ob1.lazyMultipleReference = LazyUtil.wrapSimpleLazyProxy(\n-\t\t\t\t(keys) -> Collections.singletonList(this.childEntity7), List.class,\n-\t\t\t\tCollections.singletonList(KeyValue.of(this.childKey7)));\n+\t\t\t\t() -> Collections.singletonList(this.childEntity7), List.class,\n+\t\t\t\tListValue.of(KeyValue.of(this.childKey7)));\n+\t\tsaveTestCommon(this.ob1, true);\n+\t}\n+\n+\t@Test\n+\tpublic void saveTestNotInterfaceLazy() {\n+\t\tArrayList<ChildEntity> arrayList = new ArrayList();", "originalCommit": "0a71f05308da0f7539ea8028bc76c1c8d165eede", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwNjgzMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r365306832", "bodyText": "no, ArrayList is not an interface, so it will be proxied using cglib", "author": "dmitry-s", "createdAt": "2020-01-10T16:03:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyNjk1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyODU5OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r364928598", "bodyText": "does this have the same problem that we had in previous PR where the equality does not necessarily prove anything?", "author": "elefeint", "createdAt": "2020-01-09T19:48:05Z", "path": "spring-cloud-gcp-data-datastore/src/test/java/org/springframework/cloud/gcp/data/datastore/it/DatastoreIntegrationTests.java", "diffHunk": "@@ -536,18 +538,43 @@ public void referenceTest() {\n \t}\n \n \t@Test\n-\tpublic void lazyReferenceTest() {\n+\tpublic void lazyReferenceCollectionTest() {\n \t\tReferenceEntry parent = saveEntitiesGraph();\n \n-\t\t//Saving an entity with not loaded lazy field\n \t\tReferenceEntry lazyParent = this.datastoreTemplate.findById(parent.id, ReferenceEntry.class);\n \n+\t\t//Saving an entity with not loaded lazy field\n \t\tthis.datastoreTemplate.save(lazyParent);\n \n \t\tReferenceEntry loadedParent = this.datastoreTemplate.findById(lazyParent.id, ReferenceEntry.class);\n \t\tassertThat(loadedParent.children).containsExactlyInAnyOrder(parent.children.toArray(new ReferenceEntry[0]));\n \t}\n \n+\n+\t@Test\n+\tpublic void lazyReferenceTest() throws InterruptedException {\n+\t\tLazyEntity lazyParentEntity = new LazyEntity(new LazyEntity(new LazyEntity()));\n+\t\tthis.datastoreTemplate.save(lazyParentEntity);\n+\n+\t\tLazyEntity loadedParent = this.datastoreTemplate.findById(lazyParentEntity.id, LazyEntity.class);\n+\n+\t\t//Saving an entity with not loaded lazy field\n+\t\tthis.datastoreTemplate.save(loadedParent);\n+\n+\t\tloadedParent = this.datastoreTemplate.findById(loadedParent.id, LazyEntity.class);", "originalCommit": "0a71f05308da0f7539ea8028bc76c1c8d165eede", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwODA3MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2108#discussion_r365308071", "bodyText": "it did prove everything we needed actually :) I only changed it for readability.\nBut in this case I'm testing multi-level lazy loading.", "author": "dmitry-s", "createdAt": "2020-01-10T16:06:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkyODU5OA=="}], "type": "inlineReview"}, {"oid": "4b5dc8c70c4e3101c8cf1f2d638e1605a996510e", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4b5dc8c70c4e3101c8cf1f2d638e1605a996510e", "message": "PR comments", "committedDate": "2020-01-10T16:24:37Z", "type": "commit"}, {"oid": "f0db9fb170a7a6ea641c30f5718efd762557425c", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/f0db9fb170a7a6ea641c30f5718efd762557425c", "message": "PR comments", "committedDate": "2020-01-10T16:42:00Z", "type": "commit"}]}