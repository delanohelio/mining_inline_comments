{"pr_number": 2480, "pr_title": "add FirestoreTemplate docs", "pr_createdAt": "2020-07-29T22:05:06Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480", "timeline": [{"oid": "59db734a4179705fcba28f4bbf2d5da388e77309", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/59db734a4179705fcba28f4bbf2d5da388e77309", "message": "add FirestoreTemplate docs", "committedDate": "2020-07-29T21:57:58Z", "type": "commit"}, {"oid": "248a316b596a87f54c37a8b00ece5355d05611c9", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/248a316b596a87f54c37a8b00ece5355d05611c9", "message": "update docs", "committedDate": "2020-07-29T22:04:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2MDE5Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463060192", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            NOTE: Currently some features are not supported: query by example, projections, auditing.\n          \n          \n            \n            NOTE: Currently some features are not supported: query by example, projections, and auditing.", "author": "dzou", "createdAt": "2020-07-30T14:58:49Z", "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -1,7 +1,7 @@\n :spring-data-commons-ref: https://docs.spring.io/spring-data/data-commons/docs/current/reference/html\n \n == Spring Data Cloud Firestore\n-NOTE: Currently some features are not supported: transactions, sorting, query by example, projections, auditing.\n+NOTE: Currently some features are not supported: query by example, projections, auditing.", "originalCommit": "248a316b596a87f54c37a8b00ece5355d05611c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2MjM0MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463062341", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the value is null, and the property type is `String`, the Id is generated automatically.\n          \n          \n            \n            NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "author": "dzou", "createdAt": "2020-07-30T15:01:31Z", "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+If the value is null, and the property type is `String`, the Id is generated automatically.", "originalCommit": "248a316b596a87f54c37a8b00ece5355d05611c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NDUwNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463064507", "bodyText": "Could you also add another sentence describing what is the generated ID? (i.e. an X-character long UUID string.) This is to distinguish it from other generated IDs, such as sequences", "author": "dzou", "createdAt": "2020-07-30T15:04:37Z", "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+If the value is null, and the property type is `String`, the Id is generated automatically.", "originalCommit": "248a316b596a87f54c37a8b00ece5355d05611c9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI5NzMzMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463297332", "bodyText": "I don't think we should do that. It is implementation detail and could change.", "author": "dmitry-s", "createdAt": "2020-07-30T22:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NDUwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NjMxMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464576310", "bodyText": "I see, but I think there still should be some general description of this generated ID. How would the user know if it is a sequence-based generation vs. random-based?", "author": "dzou", "createdAt": "2020-08-03T18:03:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NDUwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA2NjM4NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r463066385", "bodyText": "It would be better if the code snippet did not use .block() because you want to avoid synchronous operations in reactive.\nWould suggest renaming method to: public Mono<XXX>/Flux<XXX> doSomething() and then have the method return a mono/flux.", "author": "dzou", "createdAt": "2020-07-30T15:07:20Z", "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -159,6 +160,39 @@ Repositories allow you to define custom Query Methods (detailed in the following\n \n NOTE: Custom queries with `@Query` annotation are not supported since there is no query language in Cloud Firestore\n \n+\n+=== Firestore Operations & Template\n+\n+`FirestoreOperations` and its implementation, `FirestoreTemplate`, provides the Template pattern familiar to Spring developers.\n+\n+Using the auto-configuration provided by Spring Data Cloud Firestore, your Spring application context will contain a fully configured `FirestoreTemplate` object that you can autowire in your application:\n+\n+[source,java]\n+----\n+@SpringBootApplication\n+public class FirestoreTemplateExample {\n+\n+\t@Autowired\n+\tFirestoreTemplate firestoreTemplate;\n+\n+\tpublic void doSomething() {\n+\n+\t\tthis.firestoreTemplate.save(new User(\"Alice\", 29))", "originalCommit": "248a316b596a87f54c37a8b00ece5355d05611c9", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "84c5bcd13b95e0d82b1a6027a7e71861134b0821", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/84c5bcd13b95e0d82b1a6027a7e71861134b0821", "message": "PR comments", "committedDate": "2020-07-30T22:15:31Z", "type": "commit"}, {"oid": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/a1db414f1e5dd420cf74efd25c47737ac6d1b19b", "message": "Apply suggestions from code review\n\nCo-authored-by: Daniel Zou <dzou@users.noreply.github.com>", "committedDate": "2020-07-30T22:16:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3Njk1MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464576951", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t.then(this.firestoreTemplate.save(new User(\"Bob\", 60)));\n          \n          \n            \n            \t\t\t.then(this.firestoreTemplate.save(new User(\"Bob\", 60)));", "author": "dzou", "createdAt": "2020-08-03T18:04:34Z", "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -175,13 +175,17 @@ public class FirestoreTemplateExample {\n \t@Autowired\n \tFirestoreTemplate firestoreTemplate;\n \n-\tpublic void doSomething() {\n+\tpublic Mono<User> createUsers() {\n+\t\treturn this.firestoreTemplate.save(new User(\"Alice\", 29))\n+\t\t.then(this.firestoreTemplate.save(new User(\"Bob\", 60)));", "originalCommit": "84c5bcd13b95e0d82b1a6027a7e71861134b0821", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODAxMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464578010", "bodyText": "Add a new line above the NOTE: so that it gets rendered correctly as a note in the asciidoc.", "author": "dzou", "createdAt": "2020-08-03T18:06:41Z", "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,7 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n-If the value is null, and the property type is `String`, the Id is generated automatically.\n+NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "originalCommit": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MzI2Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464763266", "bodyText": "@dmitry-s This is still not addressed. It won't render correctly otherwise.", "author": "meltsufin", "createdAt": "2020-08-04T02:33:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3ODAxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjQzOQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464666439", "bodyText": "@dmitry-s Could the id field be an Integer? In that case, what happens if it's null?\nIt just seems odd that it's so specific to String.", "author": "meltsufin", "createdAt": "2020-08-03T21:15:58Z", "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -110,6 +110,7 @@ include::{project-root}/spring-cloud-gcp-data-firestore/src/test/java/org/spring\n This annotation is optional, by default the collection name is derived from the class name.\n \n `@DocumentId` annotation marks a field to be used as document id. This annotation is required.\n+NOTE: If the property annotated with `@DocumentId` is `null` and the property type is `String`, the document id is generated automatically when the entity is saved.", "originalCommit": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDczNDkxNA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464734914", "bodyText": "It can't be an Integer. The client library can generate String ids only.", "author": "dmitry-s", "createdAt": "2020-08-04T00:42:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjQzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc2MzkzMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464763930", "bodyText": "Well, we're actually generating the IDs, but yes, because they need to be very random, it only works for strings.\nI would maybe clarifying by adding that ID auto-generation does not work for types other than String.", "author": "meltsufin", "createdAt": "2020-08-04T02:35:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjQzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4MjU5NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r465182595", "bodyText": "Actually we only support String ids. I'll document this.", "author": "dmitry-s", "createdAt": "2020-08-04T16:37:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjQzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjkzNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r464666935", "bodyText": "What not recommend autowiring FirestoreOperations?", "author": "meltsufin", "createdAt": "2020-08-03T21:17:09Z", "path": "docs/src/main/asciidoc/firestore.adoc", "diffHunk": "@@ -159,6 +160,43 @@ Repositories allow you to define custom Query Methods (detailed in the following\n \n NOTE: Custom queries with `@Query` annotation are not supported since there is no query language in Cloud Firestore\n \n+\n+=== Firestore Operations & Template\n+\n+`FirestoreOperations` and its implementation, `FirestoreTemplate`, provides the Template pattern familiar to Spring developers.\n+\n+Using the auto-configuration provided by Spring Data Cloud Firestore, your Spring application context will contain a fully configured `FirestoreTemplate` object that you can autowire in your application:", "originalCommit": "a1db414f1e5dd420cf74efd25c47737ac6d1b19b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMwMzQzOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2480#discussion_r465303438", "bodyText": "switched to FirestoreOperations", "author": "dmitry-s", "createdAt": "2020-08-04T20:13:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY2NjkzNQ=="}], "type": "inlineReview"}, {"oid": "6172ac39df277387294a9cb39026244dc54390d7", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/6172ac39df277387294a9cb39026244dc54390d7", "message": "Apply suggestions from code review\n\nCo-authored-by: Daniel Zou <dzou@users.noreply.github.com>", "committedDate": "2020-08-04T00:43:22Z", "type": "commit"}, {"oid": "61e8f10dc395933242c72fa271dea0afc233ec81", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/61e8f10dc395933242c72fa271dea0afc233ec81", "message": "verify that ID is String", "committedDate": "2020-08-04T20:10:51Z", "type": "commit"}, {"oid": "34d6f7b2c77a4b7ba6ec166678bf9290305ce67e", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/34d6f7b2c77a4b7ba6ec166678bf9290305ce67e", "message": "refactoring", "committedDate": "2020-08-04T20:15:26Z", "type": "commit"}]}