{"pr_number": 2195, "pr_title": "Add basic template for Secret Manager", "pr_createdAt": "2020-02-13T22:54:44Z", "pr_url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195", "timeline": [{"oid": "3f2010caf62cbdad19fbcb9312243cdbcf905975", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3f2010caf62cbdad19fbcb9312243cdbcf905975", "message": "Add basic Secret Manager Template", "committedDate": "2020-02-13T22:47:25Z", "type": "commit"}, {"oid": "5fba0ae7a1d01b81363a8e278701f129016d48e7", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/5fba0ae7a1d01b81363a8e278701f129016d48e7", "message": "clarify comments", "committedDate": "2020-02-13T22:50:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3Nzg5MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r379477891", "bodyText": "getSecretBytes perhaps?", "author": "meltsufin", "createdAt": "2020-02-14T15:03:27Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with\n+\t * the secret {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload; supported payload types: (UTF-8 encoded) String and\n+\t *     byte[].\n+\t */\n+\tpublic void createSecret(String secretId, Object payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tcreateNewSecretVersion(secretId, payload);\n+\t}\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as String\n+\t */\n+\tpublic String getSecretString(String secretId, String versionName) {\n+\t\treturn getSecretVersion(secretId, versionName).toStringUtf8();\n+\t}\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as byte[]\n+\t */\n+\tpublic byte[] getSecretPayload(String secretId, String versionName) {", "originalCommit": "5fba0ae7a1d01b81363a8e278701f129016d48e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2Mjc3OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384062778", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-02-25T19:01:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3Nzg5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3ODgwMA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r379478800", "bodyText": "I know it's a private method, but maybe even make it public?\nAlso for naming consistency: getSecretByteString?", "author": "meltsufin", "createdAt": "2020-02-14T15:05:07Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with\n+\t * the secret {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload; supported payload types: (UTF-8 encoded) String and\n+\t *     byte[].\n+\t */\n+\tpublic void createSecret(String secretId, Object payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tcreateNewSecretVersion(secretId, payload);\n+\t}\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as String\n+\t */\n+\tpublic String getSecretString(String secretId, String versionName) {\n+\t\treturn getSecretVersion(secretId, versionName).toStringUtf8();\n+\t}\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as byte[]\n+\t */\n+\tpublic byte[] getSecretPayload(String secretId, String versionName) {\n+\t\treturn getSecretVersion(secretId, versionName).toByteArray();\n+\t}\n+\n+\tprivate ByteString getSecretVersion(String secretId, String versionName) {", "originalCommit": "5fba0ae7a1d01b81363a8e278701f129016d48e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2Mjg3NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384062875", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-02-25T19:01:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3ODgwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MDI2NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r379480264", "bodyText": "Why do we need to expose it?\nIt's a bean in the application context anyway.", "author": "meltsufin", "createdAt": "2020-02-14T15:07:45Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with\n+\t * the secret {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload; supported payload types: (UTF-8 encoded) String and\n+\t *     byte[].\n+\t */\n+\tpublic void createSecret(String secretId, Object payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tcreateNewSecretVersion(secretId, payload);\n+\t}\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as String\n+\t */\n+\tpublic String getSecretString(String secretId, String versionName) {\n+\t\treturn getSecretVersion(secretId, versionName).toStringUtf8();\n+\t}\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as byte[]\n+\t */\n+\tpublic byte[] getSecretPayload(String secretId, String versionName) {\n+\t\treturn getSecretVersion(secretId, versionName).toByteArray();\n+\t}\n+\n+\tprivate ByteString getSecretVersion(String secretId, String versionName) {\n+\t\tSecretVersionName secretVersionName = SecretVersionName.of(\n+\t\t\t\tthis.projectIdProvider.getProjectId(),\n+\t\t\t\tsecretId,\n+\t\t\t\tversionName);\n+\n+\t\tAccessSecretVersionResponse response = secretManagerServiceClient.accessSecretVersion(secretVersionName);\n+\n+\t\treturn response.getPayload().getData();\n+\t}\n+\n+\t/**\n+\t * Returns the lower-level {@link SecretManagerServiceClient} client object for making API\n+\t * calls to Secret Manager service.\n+\t *\n+\t * <p>\n+\t * Useful for executing more advanced use-cases that are not covered by\n+\t * {@link SecretManagerTemplate}.\n+\t *\n+\t * @return the {@link SecretManagerServiceClient} client object.\n+\t */\n+\tpublic SecretManagerServiceClient getSecretManagerServiceClient() {", "originalCommit": "5fba0ae7a1d01b81363a8e278701f129016d48e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2MzAwOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384063008", "bodyText": "Done. Removed.", "author": "dzou", "createdAt": "2020-02-25T19:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MDI2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MTEzMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r379481132", "bodyText": "Why not just have two overloaded methods: one with String and one with byte[]?", "author": "meltsufin", "createdAt": "2020-02-14T15:09:26Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with\n+\t * the secret {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload; supported payload types: (UTF-8 encoded) String and\n+\t *     byte[].\n+\t */\n+\tpublic void createSecret(String secretId, Object payload) {", "originalCommit": "5fba0ae7a1d01b81363a8e278701f129016d48e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODI2OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384068269", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-02-25T19:11:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MTEzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MTg0OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r379481849", "bodyText": "You can get rid of this method if instead you rely on the two possible types: String and byte[].", "author": "meltsufin", "createdAt": "2020-02-14T15:10:42Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with\n+\t * the secret {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload; supported payload types: (UTF-8 encoded) String and\n+\t *     byte[].\n+\t */\n+\tpublic void createSecret(String secretId, Object payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tcreateNewSecretVersion(secretId, payload);\n+\t}\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as String\n+\t */\n+\tpublic String getSecretString(String secretId, String versionName) {\n+\t\treturn getSecretVersion(secretId, versionName).toStringUtf8();\n+\t}\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as byte[]\n+\t */\n+\tpublic byte[] getSecretPayload(String secretId, String versionName) {\n+\t\treturn getSecretVersion(secretId, versionName).toByteArray();\n+\t}\n+\n+\tprivate ByteString getSecretVersion(String secretId, String versionName) {\n+\t\tSecretVersionName secretVersionName = SecretVersionName.of(\n+\t\t\t\tthis.projectIdProvider.getProjectId(),\n+\t\t\t\tsecretId,\n+\t\t\t\tversionName);\n+\n+\t\tAccessSecretVersionResponse response = secretManagerServiceClient.accessSecretVersion(secretVersionName);\n+\n+\t\treturn response.getPayload().getData();\n+\t}\n+\n+\t/**\n+\t * Returns the lower-level {@link SecretManagerServiceClient} client object for making API\n+\t * calls to Secret Manager service.\n+\t *\n+\t * <p>\n+\t * Useful for executing more advanced use-cases that are not covered by\n+\t * {@link SecretManagerTemplate}.\n+\t *\n+\t * @return the {@link SecretManagerServiceClient} client object.\n+\t */\n+\tpublic SecretManagerServiceClient getSecretManagerServiceClient() {\n+\t\treturn this.secretManagerServiceClient;\n+\t}\n+\n+\t/**\n+\t * Create a new version of the secret with the specified payload under a {@link Secret}.\n+\t */\n+\tprivate void createNewSecretVersion(String secretId, Object rawPayload) {\n+\t\tByteString payload = convertToByteString(rawPayload);\n+\n+\t\tSecretName name = SecretName.of(projectIdProvider.getProjectId(), secretId);\n+\t\tSecretPayload payloadObject = SecretPayload.newBuilder()\n+\t\t\t\t.setData(payload)\n+\t\t\t\t.build();\n+\n+\t\tAddSecretVersionRequest payloadRequest = AddSecretVersionRequest.newBuilder()\n+\t\t\t\t.setParent(name.toString())\n+\t\t\t\t.setPayload(payloadObject)\n+\t\t\t\t.build();\n+\t\tsecretManagerServiceClient.addSecretVersion(payloadRequest);\n+\t}\n+\n+\t/**\n+\t * Creates a new secret for the GCP Project.\n+\t *\n+\t * <p>\n+\t * Note that the {@link Secret} object does not contain the secret payload. You must\n+\t * create versions of the secret which stores the payload of the secret.\n+\t */\n+\tprivate void createSecret(String secretId) {\n+\t\tProjectName projectName = ProjectName.of(projectIdProvider.getProjectId());\n+\n+\t\tSecret secret = Secret.newBuilder()\n+\t\t\t\t.setReplication(\n+\t\t\t\t\t\tReplication.newBuilder()\n+\t\t\t\t\t\t\t\t.setAutomatic(Replication.Automatic.newBuilder().build())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t\tCreateSecretRequest request = CreateSecretRequest.newBuilder()\n+\t\t\t\t.setParent(projectName.toString())\n+\t\t\t\t.setSecretId(secretId)\n+\t\t\t\t.setSecret(secret)\n+\t\t\t\t.build();\n+\t\tthis.secretManagerServiceClient.createSecret(request);\n+\t}\n+\n+\t/**\n+\t * Returns true if there already exists a secret under the GCP project with the\n+\t * {@code secretId}.\n+\t */\n+\tprivate boolean secretExists(String secretId) {\n+\t\tProjectName projectName = ProjectName.of(this.projectIdProvider.getProjectId());\n+\t\tListSecretsPagedResponse listSecretsResponse = this.secretManagerServiceClient.listSecrets(projectName);\n+\n+\t\treturn StreamSupport.stream(listSecretsResponse.iterateAll().spliterator(), false)\n+\t\t\t\t.anyMatch(secret -> secret.getName().contains(secretId));\n+\t}\n+\n+\tprivate ByteString convertToByteString(Object rawPayload) {", "originalCommit": "5fba0ae7a1d01b81363a8e278701f129016d48e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODMzMg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384068332", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-02-25T19:11:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MTg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MjQzNw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r379482437", "bodyText": "Typically we would create an interface as well called SecretManagerOperations.", "author": "meltsufin", "createdAt": "2020-02-14T15:11:38Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate {", "originalCommit": "5fba0ae7a1d01b81363a8e278701f129016d48e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2ODM1Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384068353", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-02-25T19:11:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MjQzNw=="}], "type": "inlineReview"}, {"oid": "4275511b8c3074dcd280d1f312301195b455a837", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4275511b8c3074dcd280d1f312301195b455a837", "message": "PR Comments", "committedDate": "2020-02-25T17:23:39Z", "type": "commit"}, {"oid": "d960238bd6ee404ae7a6c19c9bdd212a4afe8ab7", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/d960238bd6ee404ae7a6c19c9bdd212a4afe8ab7", "message": "Add operations interface", "committedDate": "2020-02-25T18:56:13Z", "type": "commit"}, {"oid": "898dd93b34d25e2b9f02a5331f1731c7e0139c76", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/898dd93b34d25e2b9f02a5331f1731c7e0139c76", "message": "Fix formatting", "committedDate": "2020-02-25T18:58:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NTg0NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384095844", "bodyText": "\"Creates a new secret or a new version of existing secret\"?", "author": "elefeint", "createdAt": "2020-02-25T20:03:12Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.protobuf.ByteString;\n+\n+/**\n+ * Describes supported operations that one can perform on the Secret Manager API.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public interface SecretManagerOperations {\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with the secret\n+\t * {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload string.\n+\t */\n+\tvoid createSecret(String secretId, String payload);\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.", "originalCommit": "898dd93b34d25e2b9f02a5331f1731c7e0139c76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2Nzg3NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384167875", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-02-25T22:34:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NTg0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjMzMw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384096333", "bodyText": "I wonder if setSecret is more precise, since the secret could be created or updated.", "author": "elefeint", "createdAt": "2020-02-25T20:04:12Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.protobuf.ByteString;\n+\n+/**\n+ * Describes supported operations that one can perform on the Secret Manager API.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public interface SecretManagerOperations {\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with the secret\n+\t * {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload string.\n+\t */\n+\tvoid createSecret(String secretId, String payload);", "originalCommit": "898dd93b34d25e2b9f02a5331f1731c7e0139c76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyNTk3OA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384125978", "bodyText": "Ah, so in Secret Manager previous versions of secrets are never deleted; i.e. the Secret is like a container/parent, and then you create SecretVersions under the Secret. I think \"create\" would be correct, but not sure if there may be better choices for what is being created; like do you feel createSecretVersion may be more clear?", "author": "dzou", "createdAt": "2020-02-25T21:06:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyOTQ0Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384129442", "bodyText": "I think it's okay to leave it as is.\nI thought about createSecretVersion but that takes focus off \"secret\" and onto \"version\", which is also not ideal.", "author": "elefeint", "createdAt": "2020-02-25T21:13:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjMzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NzUzOA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384167538", "bodyText": "Sounds good, will leave as is.", "author": "dzou", "createdAt": "2020-02-25T22:33:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5NjMzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5Njk0Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384096942", "bodyText": "Does it make sense to just ask for getSecretString(String secretId) without specifying a version and getting back latest label by default? It feels like the most common usecase.", "author": "elefeint", "createdAt": "2020-02-25T20:05:31Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerOperations.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.protobuf.ByteString;\n+\n+/**\n+ * Describes supported operations that one can perform on the Secret Manager API.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public interface SecretManagerOperations {\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with the secret\n+\t * {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload string.\n+\t */\n+\tvoid createSecret(String secretId, String payload);\n+\n+\t/**\n+\t * Creates a new secret using the provided {@code secretId} and creates a new version of\n+\t * the secret with the provided {@code payload}.\n+\t *\n+\t * <p>\n+\t * If there is already a secret saved in SecretManager with the specified\n+\t * {@code secretId}, then it simply creates a new version under the secret with the secret\n+\t * {@code payload}.\n+\t *\n+\t * @param secretId the secret ID of the secret to create.\n+\t * @param payload the secret payload as a byte array.\n+\t */\n+\tvoid createSecret(String secretId, byte[] payload);\n+\n+\t/**\n+\t * Gets the secret payload of the specified {@code secretId} at version\n+\t * {@code versionName}.\n+\t *\n+\t * @param secretId unique identifier of your secret in Secret Manager.\n+\t * @param versionName which version of the secret to load. The version can be a version\n+\t *     number as a string (e.g. \"5\") or an alias (e.g. \"latest\").\n+\t * @return The secret payload as String\n+\t */\n+\tString getSecretString(String secretId, String versionName);", "originalCommit": "898dd93b34d25e2b9f02a5331f1731c7e0139c76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2OTM1OQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384169359", "bodyText": "I added an overloaded method which omits versionName to return the latest.\nAccording to a secret manager dev defulting to accessing the latest version may not be a \"production best practice\" so I think we ought to keep a method that accepts versions. #2168 (comment)", "author": "dzou", "createdAt": "2020-02-25T22:37:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA5Njk0Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMDUxNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384100516", "bodyText": "since we know whether a secret is new or existing, would it make sense to return a boolean flag, an enum or a version number indicating the result?", "author": "elefeint", "createdAt": "2020-02-25T20:12:39Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate implements SecretManagerOperations {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic void createSecret(String secretId, String payload) {", "originalCommit": "898dd93b34d25e2b9f02a5331f1731c7e0139c76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MDIxNg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384170216", "bodyText": "I prefer void just to keep it simple for now; but definitely open to implementing this if users request for it in the future.", "author": "dzou", "createdAt": "2020-02-25T22:39:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMDUxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMTE3Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384101177", "bodyText": "This is not a large amount of logic, but it is repeated between the different overloaded versions of this method.\nI think I'd call createSecret(String, byte[]) right away and not do any version determination in this method.", "author": "elefeint", "createdAt": "2020-02-25T20:13:57Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate implements SecretManagerOperations {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic void createSecret(String secretId, String payload) {\n+\t\tif (!secretExists(secretId)) {", "originalCommit": "898dd93b34d25e2b9f02a5331f1731c7e0139c76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MDI3Mw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384170273", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-02-25T22:39:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMTE3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMjQ4Ng==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384102486", "bodyText": "You can remove the intermediate build() calls -- proto builders usually take ether a final object or its builder.", "author": "elefeint", "createdAt": "2020-02-25T20:16:34Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate implements SecretManagerOperations {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic void createSecret(String secretId, String payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tcreateNewSecretVersion(secretId, ByteString.copyFromUtf8(payload));\n+\t}\n+\n+\t@Override\n+\tpublic void createSecret(String secretId, byte[] payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tcreateNewSecretVersion(secretId, ByteString.copyFrom(payload));\n+\t}\n+\n+\t@Override\n+\tpublic String getSecretString(String secretId, String versionName) {\n+\t\treturn getSecretByteString(secretId, versionName).toStringUtf8();\n+\t}\n+\n+\t@Override\n+\tpublic byte[] getSecretBytes(String secretId, String versionName) {\n+\t\treturn getSecretByteString(secretId, versionName).toByteArray();\n+\t}\n+\n+\t@Override\n+\tpublic ByteString getSecretByteString(String secretId, String versionName) {\n+\t\tSecretVersionName secretVersionName = SecretVersionName.of(\n+\t\t\t\tthis.projectIdProvider.getProjectId(),\n+\t\t\t\tsecretId,\n+\t\t\t\tversionName);\n+\n+\t\tAccessSecretVersionResponse response = secretManagerServiceClient.accessSecretVersion(secretVersionName);\n+\n+\t\treturn response.getPayload().getData();\n+\t}\n+\n+\t/**\n+\t * Create a new version of the secret with the specified payload under a {@link Secret}.\n+\t */\n+\tprivate void createNewSecretVersion(String secretId, ByteString byteStringPayload) {\n+\t\tSecretName name = SecretName.of(projectIdProvider.getProjectId(), secretId);\n+\t\tSecretPayload payloadObject = SecretPayload.newBuilder()\n+\t\t\t\t.setData(byteStringPayload)\n+\t\t\t\t.build();\n+\n+\t\tAddSecretVersionRequest payloadRequest = AddSecretVersionRequest.newBuilder()\n+\t\t\t\t.setParent(name.toString())\n+\t\t\t\t.setPayload(payloadObject)\n+\t\t\t\t.build();\n+\t\tsecretManagerServiceClient.addSecretVersion(payloadRequest);\n+\t}\n+\n+\t/**\n+\t * Creates a new secret for the GCP Project.\n+\t *\n+\t * <p>\n+\t * Note that the {@link Secret} object does not contain the secret payload. You must\n+\t * create versions of the secret which stores the payload of the secret.\n+\t */\n+\tprivate void createSecret(String secretId) {\n+\t\tProjectName projectName = ProjectName.of(projectIdProvider.getProjectId());\n+\n+\t\tSecret secret = Secret.newBuilder()\n+\t\t\t\t.setReplication(\n+\t\t\t\t\t\tReplication.newBuilder()\n+\t\t\t\t\t\t\t\t.setAutomatic(Replication.Automatic.newBuilder().build())", "originalCommit": "898dd93b34d25e2b9f02a5331f1731c7e0139c76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MDMxNQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384170315", "bodyText": "Done.", "author": "dzou", "createdAt": "2020-02-25T22:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwMjQ4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNDk2MA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384104960", "bodyText": "This can be a lot of secrets.\nCan getSecret() be used instead to retrieve the specific secret?", "author": "elefeint", "createdAt": "2020-02-25T20:21:47Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import java.util.stream.StreamSupport;\n+\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient.ListSecretsPagedResponse;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate implements SecretManagerOperations {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic void createSecret(String secretId, String payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tcreateNewSecretVersion(secretId, ByteString.copyFromUtf8(payload));\n+\t}\n+\n+\t@Override\n+\tpublic void createSecret(String secretId, byte[] payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tcreateNewSecretVersion(secretId, ByteString.copyFrom(payload));\n+\t}\n+\n+\t@Override\n+\tpublic String getSecretString(String secretId, String versionName) {\n+\t\treturn getSecretByteString(secretId, versionName).toStringUtf8();\n+\t}\n+\n+\t@Override\n+\tpublic byte[] getSecretBytes(String secretId, String versionName) {\n+\t\treturn getSecretByteString(secretId, versionName).toByteArray();\n+\t}\n+\n+\t@Override\n+\tpublic ByteString getSecretByteString(String secretId, String versionName) {\n+\t\tSecretVersionName secretVersionName = SecretVersionName.of(\n+\t\t\t\tthis.projectIdProvider.getProjectId(),\n+\t\t\t\tsecretId,\n+\t\t\t\tversionName);\n+\n+\t\tAccessSecretVersionResponse response = secretManagerServiceClient.accessSecretVersion(secretVersionName);\n+\n+\t\treturn response.getPayload().getData();\n+\t}\n+\n+\t/**\n+\t * Create a new version of the secret with the specified payload under a {@link Secret}.\n+\t */\n+\tprivate void createNewSecretVersion(String secretId, ByteString byteStringPayload) {\n+\t\tSecretName name = SecretName.of(projectIdProvider.getProjectId(), secretId);\n+\t\tSecretPayload payloadObject = SecretPayload.newBuilder()\n+\t\t\t\t.setData(byteStringPayload)\n+\t\t\t\t.build();\n+\n+\t\tAddSecretVersionRequest payloadRequest = AddSecretVersionRequest.newBuilder()\n+\t\t\t\t.setParent(name.toString())\n+\t\t\t\t.setPayload(payloadObject)\n+\t\t\t\t.build();\n+\t\tsecretManagerServiceClient.addSecretVersion(payloadRequest);\n+\t}\n+\n+\t/**\n+\t * Creates a new secret for the GCP Project.\n+\t *\n+\t * <p>\n+\t * Note that the {@link Secret} object does not contain the secret payload. You must\n+\t * create versions of the secret which stores the payload of the secret.\n+\t */\n+\tprivate void createSecret(String secretId) {\n+\t\tProjectName projectName = ProjectName.of(projectIdProvider.getProjectId());\n+\n+\t\tSecret secret = Secret.newBuilder()\n+\t\t\t\t.setReplication(\n+\t\t\t\t\t\tReplication.newBuilder()\n+\t\t\t\t\t\t\t\t.setAutomatic(Replication.Automatic.newBuilder().build())\n+\t\t\t\t\t\t\t\t.build())\n+\t\t\t\t.build();\n+\t\tCreateSecretRequest request = CreateSecretRequest.newBuilder()\n+\t\t\t\t.setParent(projectName.toString())\n+\t\t\t\t.setSecretId(secretId)\n+\t\t\t\t.setSecret(secret)\n+\t\t\t\t.build();\n+\t\tthis.secretManagerServiceClient.createSecret(request);\n+\t}\n+\n+\t/**\n+\t * Returns true if there already exists a secret under the GCP project with the\n+\t * {@code secretId}.\n+\t */\n+\tprivate boolean secretExists(String secretId) {\n+\t\tProjectName projectName = ProjectName.of(this.projectIdProvider.getProjectId());\n+\t\tListSecretsPagedResponse listSecretsResponse = this.secretManagerServiceClient.listSecrets(projectName);", "originalCommit": "898dd93b34d25e2b9f02a5331f1731c7e0139c76", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3MDQ3MQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r384170471", "bodyText": "Done! The getSecret approach is now being used; requires a try/catch style.", "author": "dzou", "createdAt": "2020-02-25T22:40:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEwNDk2MA=="}], "type": "inlineReview"}, {"oid": "9d4a3743adb340f20f05aedd8cfed42734510bc6", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/9d4a3743adb340f20f05aedd8cfed42734510bc6", "message": "PR Comments", "committedDate": "2020-02-25T22:29:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzE5Nw==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r385177197", "bodyText": "Could it be useful as a public method?", "author": "meltsufin", "createdAt": "2020-02-27T15:16:21Z", "path": "spring-cloud-gcp-secretmanager/src/main/java/org/springframework/cloud/gcp/secretmanager/SecretManagerTemplate.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Copyright 2017-2020 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.cloud.gcp.secretmanager;\n+\n+import com.google.api.gax.rpc.NotFoundException;\n+import com.google.cloud.secretmanager.v1beta1.AccessSecretVersionResponse;\n+import com.google.cloud.secretmanager.v1beta1.AddSecretVersionRequest;\n+import com.google.cloud.secretmanager.v1beta1.CreateSecretRequest;\n+import com.google.cloud.secretmanager.v1beta1.ProjectName;\n+import com.google.cloud.secretmanager.v1beta1.Replication;\n+import com.google.cloud.secretmanager.v1beta1.Secret;\n+import com.google.cloud.secretmanager.v1beta1.SecretManagerServiceClient;\n+import com.google.cloud.secretmanager.v1beta1.SecretName;\n+import com.google.cloud.secretmanager.v1beta1.SecretPayload;\n+import com.google.cloud.secretmanager.v1beta1.SecretVersionName;\n+import com.google.protobuf.ByteString;\n+\n+import org.springframework.cloud.gcp.core.GcpProjectIdProvider;\n+\n+/**\n+ * Offers convenience methods for performing common operations on Secret Manager including\n+ * creating and reading secrets.\n+ *\n+ * @author Daniel Zou\n+ * @since 1.3\n+ */\n+public class SecretManagerTemplate implements SecretManagerOperations {\n+\n+\tprivate final SecretManagerServiceClient secretManagerServiceClient;\n+\n+\tprivate final GcpProjectIdProvider projectIdProvider;\n+\n+\tpublic SecretManagerTemplate(\n+\t\t\tSecretManagerServiceClient secretManagerServiceClient,\n+\t\t\tGcpProjectIdProvider projectIdProvider) {\n+\t\tthis.secretManagerServiceClient = secretManagerServiceClient;\n+\t\tthis.projectIdProvider = projectIdProvider;\n+\t}\n+\n+\t@Override\n+\tpublic void createSecret(String secretId, String payload) {\n+\t\tcreateNewSecretVersion(secretId, ByteString.copyFromUtf8(payload));\n+\t}\n+\n+\t@Override\n+\tpublic void createSecret(String secretId, byte[] payload) {\n+\t\tcreateNewSecretVersion(secretId, ByteString.copyFrom(payload));\n+\t}\n+\n+\t@Override\n+\tpublic String getSecretString(String secretId) {\n+\t\treturn getSecretString(secretId, \"latest\");\n+\t}\n+\n+\t@Override\n+\tpublic String getSecretString(String secretId, String versionName) {\n+\t\treturn getSecretByteString(secretId, versionName).toStringUtf8();\n+\t}\n+\n+\t@Override\n+\tpublic byte[] getSecretBytes(String secretId) {\n+\t\treturn getSecretBytes(secretId, \"latest\");\n+\t}\n+\n+\t@Override\n+\tpublic byte[] getSecretBytes(String secretId, String versionName) {\n+\t\treturn getSecretByteString(secretId, versionName).toByteArray();\n+\t}\n+\n+\t@Override\n+\tpublic ByteString getSecretByteString(String secretId, String versionName) {\n+\t\tSecretVersionName secretVersionName = SecretVersionName.of(\n+\t\t\t\tthis.projectIdProvider.getProjectId(),\n+\t\t\t\tsecretId,\n+\t\t\t\tversionName);\n+\n+\t\tAccessSecretVersionResponse response = secretManagerServiceClient.accessSecretVersion(secretVersionName);\n+\n+\t\treturn response.getPayload().getData();\n+\t}\n+\n+\t/**\n+\t * Create a new version of the secret with the specified payload under a {@link Secret}.\n+\t * Will also create the parent secret if it does not already exist.\n+\t */\n+\tprivate void createNewSecretVersion(String secretId, ByteString payload) {\n+\t\tif (!secretExists(secretId)) {\n+\t\t\tcreateSecret(secretId);\n+\t\t}\n+\n+\t\tSecretName name = SecretName.of(projectIdProvider.getProjectId(), secretId);\n+\t\tAddSecretVersionRequest payloadRequest = AddSecretVersionRequest.newBuilder()\n+\t\t\t\t.setParent(name.toString())\n+\t\t\t\t.setPayload(SecretPayload.newBuilder().setData(payload))\n+\t\t\t\t.build();\n+\t\tsecretManagerServiceClient.addSecretVersion(payloadRequest);\n+\t}\n+\n+\t/**\n+\t * Creates a new secret for the GCP Project.\n+\t *\n+\t * <p>\n+\t * Note that the {@link Secret} object does not contain the secret payload. You must\n+\t * create versions of the secret which stores the payload of the secret.\n+\t */\n+\tprivate void createSecret(String secretId) {\n+\t\tProjectName projectName = ProjectName.of(projectIdProvider.getProjectId());\n+\n+\t\tSecret secret = Secret.newBuilder()\n+\t\t\t\t.setReplication(\n+\t\t\t\t\t\tReplication.newBuilder().setAutomatic(\n+\t\t\t\t\t\t\t\tReplication.Automatic.getDefaultInstance()))\n+\t\t\t\t.build();\n+\t\tCreateSecretRequest request = CreateSecretRequest.newBuilder()\n+\t\t\t\t.setParent(projectName.toString())\n+\t\t\t\t.setSecretId(secretId)\n+\t\t\t\t.setSecret(secret)\n+\t\t\t\t.build();\n+\t\tthis.secretManagerServiceClient.createSecret(request);\n+\t}\n+\n+\t/**\n+\t * Returns true if there already exists a secret under the GCP project with the\n+\t * {@code secretId}.\n+\t */\n+\tprivate boolean secretExists(String secretId) {", "originalCommit": "9d4a3743adb340f20f05aedd8cfed42734510bc6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM3NDA1NA==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r385374054", "bodyText": "Done; made public.", "author": "dzou", "createdAt": "2020-02-27T21:12:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE3NzE5Nw=="}], "type": "inlineReview"}, {"oid": "8766c2a40359620bd4ac1636780ead9c18c2adcd", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/8766c2a40359620bd4ac1636780ead9c18c2adcd", "message": "Add additional tests.", "committedDate": "2020-02-27T21:08:22Z", "type": "commit"}, {"oid": "3fc903abfa1aa003328eff06d14fb6e07dc1e719", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/3fc903abfa1aa003328eff06d14fb6e07dc1e719", "message": "make secretExists public", "committedDate": "2020-02-27T21:12:25Z", "type": "commit"}, {"oid": "55cb7cb3dedc20a688913334321f48880ca88b4a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/55cb7cb3dedc20a688913334321f48880ca88b4a", "message": "fix checkstyle", "committedDate": "2020-02-27T21:34:01Z", "type": "commit"}, {"oid": "b081c10dc7a842277d413c123c0263cfa125b4c9", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/b081c10dc7a842277d413c123c0263cfa125b4c9", "message": "Merge branch 'master' into secret-template", "committedDate": "2020-02-27T22:22:13Z", "type": "commit"}, {"oid": "ee8ab95c43cb509104e96dba91ccc20107be319d", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/ee8ab95c43cb509104e96dba91ccc20107be319d", "message": "Merge branch 'master' into secret-template", "committedDate": "2020-02-28T16:07:24Z", "type": "commit"}, {"oid": "4a1708453c09ec49869be11ee4773a44a20f9d2a", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/4a1708453c09ec49869be11ee4773a44a20f9d2a", "message": "Update @since version numbers", "committedDate": "2020-02-28T18:07:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0OTg0Mg==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r385849842", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <version>1.3.0.BUILD-SNAPSHOT</version>\n          \n          \n            \n                <version>1.2.2.BUILD-SNAPSHOT</version>", "author": "meltsufin", "createdAt": "2020-02-28T18:22:10Z", "path": "spring-cloud-gcp-secretmanager/pom.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>spring-cloud-gcp</artifactId>\n+    <groupId>org.springframework.cloud</groupId>\n+    <version>1.3.0.BUILD-SNAPSHOT</version>", "originalCommit": "4a1708453c09ec49869be11ee4773a44a20f9d2a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg1MDU3NQ==", "url": "https://github.com/spring-cloud/spring-cloud-gcp/pull/2195#discussion_r385850575", "bodyText": "Nice catch, thanks.", "author": "dzou", "createdAt": "2020-02-28T18:23:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTg0OTg0Mg=="}], "type": "inlineReview"}, {"oid": "73688412e3dd91fe4927aca32c3a27414745e2a1", "url": "https://github.com/spring-cloud/spring-cloud-gcp/commit/73688412e3dd91fe4927aca32c3a27414745e2a1", "message": "Update spring-cloud-gcp-secretmanager/pom.xml\n\nCo-Authored-By: Mike Eltsufin <meltsufin@google.com>", "committedDate": "2020-02-28T18:23:29Z", "type": "commit"}]}