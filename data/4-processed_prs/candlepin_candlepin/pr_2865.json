{"pr_number": 2865, "pr_title": "ENT-1867: Porting ConsumerResource to spec-first", "pr_createdAt": "2020-12-14T13:35:55Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2865", "timeline": [{"oid": "93c622df876ef8b055e59e68808739f26b964697", "url": "https://github.com/candlepin/candlepin/commit/93c622df876ef8b055e59e68808739f26b964697", "message": "ENT-1867: Porting ConsumerResource to spec-first", "committedDate": "2020-12-17T11:16:59Z", "type": "forcePushed"}, {"oid": "7b17587875bf1efd94d8d3d12445169bd5215828", "url": "https://github.com/candlepin/candlepin/commit/7b17587875bf1efd94d8d3d12445169bd5215828", "message": "ENT-1867: Port ConsumerResource to spec-first", "committedDate": "2020-12-21T12:13:58Z", "type": "forcePushed"}, {"oid": "b9e4fdaedefd0e1b60e6f9cd77b34a057bf0b20c", "url": "https://github.com/candlepin/candlepin/commit/b9e4fdaedefd0e1b60e6f9cd77b34a057bf0b20c", "message": "ENT-1867: Port ConsumerResource to spec-first", "committedDate": "2020-12-22T12:13:00Z", "type": "forcePushed"}, {"oid": "b93540e48cc16e14700368ae1b87f06a8ac7230e", "url": "https://github.com/candlepin/candlepin/commit/b93540e48cc16e14700368ae1b87f06a8ac7230e", "message": "ENT-1867: Port ConsumerResource to spec-first", "committedDate": "2020-12-23T05:50:14Z", "type": "forcePushed"}, {"oid": "138277c998912f3cff7cbfac98e98e01bf42daae", "url": "https://github.com/candlepin/candlepin/commit/138277c998912f3cff7cbfac98e98e01bf42daae", "message": "ENT-1867: Port ConsumerResource to spec-first", "committedDate": "2020-12-23T07:03:31Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwNjc1MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551206750", "bodyText": "We should drop this whole test class. DateRange.contains was no longer in use and there is no need to test getters of generated class.", "author": "Januson", "createdAt": "2021-01-04T09:39:28Z", "path": "server/src/test/java/org/candlepin/util/DateRangeTest.java", "diffHunk": "@@ -35,33 +36,27 @@\n     public void getters() {\n         Date start = TestDateUtil.date(2012, 5, 22);\n         Date end = TestDateUtil.date(2012, 7, 4);\n-        DateRange range = new DateRange(start, end);\n-\n-        assertEquals(start, range.getStartDate());\n-        assertEquals(end, range.getEndDate());\n+        DateRange range = new DateRange();\n+        range.startDate(Util.toDateTime(start)).endDate(Util.toDateTime(end));\n+        assertEquals(start, Util.toDate(range.getStartDate()));\n+        assertEquals(end, Util.toDate(range.getEndDate()));\n     }\n \n     @Test\n     public void contains() {\n-        DateRange range = new DateRange(TestDateUtil.date(2001, 7, 5), TestDateUtil.date(2010, 7, 4));\n-\n-        assertTrue(range.contains(TestDateUtil.date(2005, 6, 9)));\n-        assertFalse(range.contains(TestDateUtil.date(1971, 7, 19)));\n-        assertFalse(range.contains(TestDateUtil.date(2012, 4, 19)));\n-        assertTrue(range.contains(TestDateUtil.date(2001, 7, 5)));\n-        assertTrue(range.contains(TestDateUtil.date(2010, 7, 4)));\n+        Date start = TestDateUtil.date(2001, 7, 5);", "originalCommit": "138277c998912f3cff7cbfac98e98e01bf42daae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDQ4MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914480", "bodyText": "Done", "author": "wolfdale", "createdAt": "2021-01-05T12:55:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTIwNjc1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MzI2OA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551263268", "bodyText": "Resopnse Code should be 204.", "author": "sonalidhome", "createdAt": "2021-01-04T11:31:28Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: object\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CertificateDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/compliance:\n+    get:\n+      description: Retireves the Compliance Status of a Consumer.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatus\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: on_date\n+          in: query\n+          description: Date to get compliance information for, default is now.\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the Compliance Status of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ComplianceStatusDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_access:\n+    get:\n+      description: Retrieves content access of a Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessForConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns content access of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ContentAccessDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_overrides:\n+    get:\n+      description: Retrieves list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: listConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of content overrides of the Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: Adds or Updates a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: addConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the created/update content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        400:\n+          description: |\n+            The content labels are invalid.\n+            The content properties cannot be overridden.\n+            The override values are invalid.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The content labels are invalid.\n+                  The content properties cannot be overridden.\n+                  The override values are invalid.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Deletes a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: deleteConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/deletionrecord:\n+    delete:\n+      description: Removes the Deletion Record for a Consumer Allowed for a superadmin.\n+        The main use case for this would be if a user accidently deleted a non-RHEL hypervisor,\n+        causing it to no longer be auto-detected via virt-who.\n+      tags:\n+        - Consumer\n+      operationId: removeDeletionRecord\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        404:\n+          description: Deletion record for hypervisor is not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Deletion record for hypervisor is not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/entitlements:\n+    get:\n+      description: Retrives a list of Entitlements. This endpoint supports paging with query.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: listEntitlements\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: ID of a Product\n+          schema:\n+            type: string\n+        - name: regen\n+          in: query\n+          description: Boolean flag to regenerate entitlements\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: matches\n+          in: query\n+          description: Match criteria for filtering\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: Attribute filters\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A list of entitlements\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        400:\n+          description: Product with this ID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Product with this ID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this  UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this  UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Unbinds all Entitlements for a Consumer Result contains the total number of\n+        entitlements unbound.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: unbindAll\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/DeleteResult'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: If a pool ID is specified, we know we're binding to that exact pool. Specifying an\n+        entitle date in this case makes no sense and will throw an error. If a list of\n+        product IDs are specified, we attempt to auto-bind to subscriptions which will provide those\n+        products. An optional date can be specified allowing the consumer to get compliant for some date in\n+        the future. If no date is specified we assume the current date. If neither a pool nor an ID is\n+        specified, this is a healing request. The path is similar to the bind by products, but in this\n+        case we use the installed products on the consumer, and their current compliant status, to\n+        determine which product IDs should be requested. The entitle date is used the same as with\n+        bind by products. The response will contain a list of Entitlement objects if async is false, or a\n+        JobDetail object if async is true\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: bind\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: pool\n+          in: query\n+          description: Pool ID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: Product array\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: quantity\n+          in: query\n+          description: Quantity\n+          schema:\n+            type: integer\n+        - name: email\n+          in: query\n+          description: Email address\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: Email locale\n+          schema:\n+            type: string\n+        - name: async\n+          in: query\n+          description: Operation Type async or sync\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: entitle_date\n+          in: query\n+          description: Entitlement date\n+          schema:\n+            type: string\n+        - name: from_pool\n+          in: query\n+          description: From pool\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        400:\n+          description: Invalid date, must use ISO 8601 format |\n+            Cannot bind by multiple parameters |\n+            Cannot specify a quantity when auto-binding. |\n+            Ignoring request to auto-attach. It is disabled for org because of the content access\n+            mode setting or hypervisor autobind setting.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Invalid date, must use ISO 8601 format |\n+                  Cannot bind by multiple parameters |\n+                  Cannot specify a quantity when auto-binding. |\n+                  Ignoring request to auto-attach. It is disabled for org because of the content access\n+                  mode setting or hypervisor autobind setting.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/exists:\n+    head:\n+      description: Checks for the existence of a Consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExists\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:", "originalCommit": "138277c998912f3cff7cbfac98e98e01bf42daae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDQ0MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914440", "bodyText": "Done", "author": "wolfdale", "createdAt": "2021-01-05T12:55:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI2MzI2OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MzQ1NQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551283455", "bodyText": "This can be rewritten as Consumer successfully created to be aligned with other entities.", "author": "sonalidhome", "createdAt": "2021-01-04T12:17:56Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer created.", "originalCommit": "138277c998912f3cff7cbfac98e98e01bf42daae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDQxNQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914415", "bodyText": "Done", "author": "wolfdale", "createdAt": "2021-01-05T12:55:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTI4MzQ1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjI3NA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551306274", "bodyText": "With these exceptions, we can add to indicate the user that this method might raise ForbiddenException: 403  that occurs from Entitler.getDryRun()", "author": "sonalidhome", "createdAt": "2021-01-04T13:07:17Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: object\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CertificateDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/compliance:\n+    get:\n+      description: Retireves the Compliance Status of a Consumer.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatus\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: on_date\n+          in: query\n+          description: Date to get compliance information for, default is now.\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the Compliance Status of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ComplianceStatusDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_access:\n+    get:\n+      description: Retrieves content access of a Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessForConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns content access of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ContentAccessDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_overrides:\n+    get:\n+      description: Retrieves list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: listConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of content overrides of the Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: Adds or Updates a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: addConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the created/update content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        400:\n+          description: |\n+            The content labels are invalid.\n+            The content properties cannot be overridden.\n+            The override values are invalid.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The content labels are invalid.\n+                  The content properties cannot be overridden.\n+                  The override values are invalid.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Deletes a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: deleteConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/deletionrecord:\n+    delete:\n+      description: Removes the Deletion Record for a Consumer Allowed for a superadmin.\n+        The main use case for this would be if a user accidently deleted a non-RHEL hypervisor,\n+        causing it to no longer be auto-detected via virt-who.\n+      tags:\n+        - Consumer\n+      operationId: removeDeletionRecord\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        404:\n+          description: Deletion record for hypervisor is not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Deletion record for hypervisor is not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/entitlements:\n+    get:\n+      description: Retrives a list of Entitlements. This endpoint supports paging with query.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: listEntitlements\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: ID of a Product\n+          schema:\n+            type: string\n+        - name: regen\n+          in: query\n+          description: Boolean flag to regenerate entitlements\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: matches\n+          in: query\n+          description: Match criteria for filtering\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: Attribute filters\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A list of entitlements\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        400:\n+          description: Product with this ID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Product with this ID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this  UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this  UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Unbinds all Entitlements for a Consumer Result contains the total number of\n+        entitlements unbound.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: unbindAll\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/DeleteResult'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: If a pool ID is specified, we know we're binding to that exact pool. Specifying an\n+        entitle date in this case makes no sense and will throw an error. If a list of\n+        product IDs are specified, we attempt to auto-bind to subscriptions which will provide those\n+        products. An optional date can be specified allowing the consumer to get compliant for some date in\n+        the future. If no date is specified we assume the current date. If neither a pool nor an ID is\n+        specified, this is a healing request. The path is similar to the bind by products, but in this\n+        case we use the installed products on the consumer, and their current compliant status, to\n+        determine which product IDs should be requested. The entitle date is used the same as with\n+        bind by products. The response will contain a list of Entitlement objects if async is false, or a\n+        JobDetail object if async is true\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: bind\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: pool\n+          in: query\n+          description: Pool ID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: Product array\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: quantity\n+          in: query\n+          description: Quantity\n+          schema:\n+            type: integer\n+        - name: email\n+          in: query\n+          description: Email address\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: Email locale\n+          schema:\n+            type: string\n+        - name: async\n+          in: query\n+          description: Operation Type async or sync\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: entitle_date\n+          in: query\n+          description: Entitlement date\n+          schema:\n+            type: string\n+        - name: from_pool\n+          in: query\n+          description: From pool\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        400:\n+          description: Invalid date, must use ISO 8601 format |\n+            Cannot bind by multiple parameters |\n+            Cannot specify a quantity when auto-binding. |\n+            Ignoring request to auto-attach. It is disabled for org because of the content access\n+            mode setting or hypervisor autobind setting.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Invalid date, must use ISO 8601 format |\n+                  Cannot bind by multiple parameters |\n+                  Cannot specify a quantity when auto-binding. |\n+                  Ignoring request to auto-attach. It is disabled for org because of the content access\n+                  mode setting or hypervisor autobind setting.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/exists:\n+    head:\n+      description: Checks for the existence of a Consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExists\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Successful Operation.\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/export:\n+    get:\n+      description: Retrieves a Compressed File representation of a Consumer (manifest).\n+      tags:\n+        - Consumer\n+      operationId: exportData\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the target consumer.\n+          required: true\n+          schema:\n+            type: string\n+        - name: cdn_label\n+          in: query\n+          description: The lable of the target CDN.\n+          required: false\n+          schema:\n+            type: string\n+        - name: webapp_prefix\n+          in: query\n+          description: The URL pointing to the manifest's originating web application.\n+          required: false\n+          schema:\n+            type: string\n+        - name: api_url\n+          in: query\n+          description: The URL pointing to the manifest's originating candlepin API.\n+          required: false\n+          schema:\n+            type: string\n+        - name: ext\n+          in: query\n+          description: Key/Value pairs to be passed to the extension adapter when generating a manifest.\n+          required: false\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Unit cannot be exported. | A manifest cannot be made for units this type.\n+            | A CDN with this label does not exist on this system.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unit cannot be exported. | A manifest cannot be made for units this type.\n+                  | A CDN with this label does not exist on this system.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/guests:\n+    get:\n+      description: Retrieves a list of Guest Consumers of a Consumer\n+      tags:\n+        - Consumer\n+      operationId: getGuests\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the list of reduced view of a consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: The system with this UUID is a virtual guest. It does not have guests.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The system with this UUID is a virtual guest. It does not have guests.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/guestids:\n+    get:\n+      description: Retrieves the list of a Consumer's Guests\n+      tags:\n+        - GuestIds\n+      operationId: getGuestIds\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/GuestIdDTOArrayElement'\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: Updates the list of guests on a consumer.\n+      tags:\n+        - GuestIds\n+      operationId: updateGuests\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer who owns or hosts the guest\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the guests to be updated\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/GuestIdDTO'\n+      responses:\n+        200:\n+          description: A successful operation\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/host:\n+    get:\n+      description: Retrieves a Host Consumer of a Consumer\n+      tags:\n+        - Consumer\n+      operationId: getHost\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns Host Consumer of a Consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: The system with this UUID is not a virtual guest.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The system with this UUID is not a virtual guest.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/owner:\n+    get:\n+      description: Retrieves the Owner associated to a Consumer\n+      tags:\n+        - Consumer\n+        - Owner\n+      operationId: getOwnerByConsumerUuid\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/OwnerDTO'\n+        400:\n+          description: OwnerId is null or owner not found for this ID.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: OwnerId is null or owner not found for this ID.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/purpose_compliance:\n+    get:\n+      description: Retrieves the System Purpose Compliance Status of a Consumer.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getSystemPurposeComplianceStatus\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: on_date\n+          in: query\n+          description: Date to get compliance information for, default is now.\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the System Purpose Compliance Status of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/SystemPurposeComplianceStatusDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/release:\n+    get:\n+      description: Retrieves the release of a consumer\n+      tags:\n+        - Consumer\n+      operationId: getRelease\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the release of a consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ReleaseVerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/export/async:\n+    get:\n+      description: Initiates an async generation of a Compressed File representation of a Consumer\n+        (manifest). The response will contain the id of the job from which its result data\n+        will contain the href to download the generated file.\n+      tags:\n+        - Consumer\n+      operationId: exportDataAsync\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the target consumer.\n+          required: true\n+          schema:\n+            type: string\n+        - name: cdn_label\n+          in: query\n+          description: The lable of the target CDN.\n+          required: false\n+          schema:\n+            type: string\n+        - name: webapp_prefix\n+          in: query\n+          description: The URL pointing to the manifest's originating web application.\n+          required: false\n+          schema:\n+            type: string\n+        - name: api_url\n+          in: query\n+          description: The URL pointing to the manifest's originating candlepin API.\n+          required: false\n+          schema:\n+            type: string\n+        - name: ext\n+          in: query\n+          description: Key/Value pairs to be passed to the extension adapter when generating a manifest.\n+          required: false\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/AsyncJobStatusDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Unit cannot be exported. | A manifest cannot be made for units this type.\n+            | A CDN with this label does not exist on this system.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unit cannot be exported. | A manifest cannot be made for units this type.\n+                  | A CDN with this label does not exist on this system.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/entitlements/dry-run:\n+    get:\n+      description: Retrieves a list of Pools and quantities that would be the result of an auto-bind.\n+        This is a dry run of an autobind. It allows the client to see what would be the result of an autobind\n+        without executing it. It can only do this for the prevously established list of installed products\n+        for the consumer If a service level is included in the request, then that level will override the one\n+        stored on the consumer. If no service level is included then the existing one will be used.\n+        The Response has a list of PoolQuantity objects\n+      tags:\n+        - Consumer\n+        - Entitlement\n+      operationId: dryBind\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: service_level\n+          in: query\n+          description: Service level\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: List of pool quantities along with pool.\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/PoolQuantityDTO'\n+        400:\n+          description: Either owner ID is null or Owner could not be found.\n+            Organization has auto-attach disabled which could be due to content access settings.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Either owner ID is null or Owner could not be found.\n+                  Organization has auto-attach disabled which could be due to content access settings.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:", "originalCommit": "138277c998912f3cff7cbfac98e98e01bf42daae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDM2OA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914368", "bodyText": "ForbiddenException: 403 is not thrown to user from Entitler.getDryRun() method, hence I decided not to include it.", "author": "wolfdale", "createdAt": "2021-01-05T12:55:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjI3NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkzMzg1NQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551933855", "bodyText": "ack.", "author": "sonalidhome", "createdAt": "2021-01-05T13:33:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMwNjI3NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMTYzNQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551321635", "bodyText": "Add format: date-time with default value Thu, 01 Jan 1970 00:00:00 GMT here.", "author": "sonalidhome", "createdAt": "2021-01-04T13:39:01Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date\n+          schema:\n+            type: string", "originalCommit": "138277c998912f3cff7cbfac98e98e01bf42daae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNzAxMg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551917012", "bodyText": "I check the OpenAPI docs, but couldn't anything that support this type of format. The date-time gets translated to OffsetDateTime. So decided to handle this within our own code", "author": "wolfdale", "createdAt": "2021-01-05T13:00:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTMyMTYzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0Mjg5Mg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551342892", "bodyText": "Although you have added specification but still using existing org.candlepin.dto.api.v1.SystemPurposeComplianceStatusDTO. Need to delete this existing DTO.", "author": "sonalidhome", "createdAt": "2021-01-04T14:19:08Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -7914,6 +9529,61 @@ components:\n             items:\n               type: string\n \n+    SystemPurposeComplianceStatusDTO:", "originalCommit": "138277c998912f3cff7cbfac98e98e01bf42daae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDI4MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914280", "bodyText": "Done", "author": "wolfdale", "createdAt": "2021-01-05T12:54:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0Mjg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NTgzNw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551345837", "bodyText": "Need to delete org.candlepin.dto.api.v1.DeleteResult as this needs to be used.", "author": "sonalidhome", "createdAt": "2021-01-04T14:24:06Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -6687,6 +8216,23 @@ components:\n         href:\n           type: string\n \n+    DateRange:\n+      description: Represents a range in time, start date to end Date inclusive\n+      properties:\n+        startDate:\n+          type: string\n+          format: date-time\n+        endDate:\n+          type: string\n+          format: date-time\n+\n+    DeleteResult:", "originalCommit": "138277c998912f3cff7cbfac98e98e01bf42daae", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDI2Ng==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914266", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-05T12:54:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTM0NTgzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDAzMw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r551914033", "bodyText": "@candlepin/candlepin-server Can some one please review this part specifically. I was not able to pass this test with normal ConsumerPrincipal therefore decide to use TrustedUserPrincipal (which has full access), which I assume actually changes the meaning of the test case. I did the same thing with ownerShouldSeeOwnEntitlements() test case.\nWith ConsumerPrincipal I get ForbiddenException: insufficient permissions.\n[Test worker] WARN  AbstractAuthorizationFilter[91] - Refusing principal: {\"type\":\"consumer\",\"name\":\"757a1b25-ef22-4b08-b023-0a5c9b5ef03d\"} access to: revokeOnGuestMigration \nThis happens due to VerifyAuthorizationFilterFactory class which act as a method interceptor binded for testing so whenever any method (such as revokeOnGuestMigration) of ConsumerResource class is called it goes through VerifyAuthorizationFilterFactory. Since this revokeOnGuestMigration method is not annotated with @verify, the  access gets denied.", "author": "wolfdale", "createdAt": "2021-01-05T12:54:25Z", "path": "server/src/test/java/org/candlepin/resource/ConsumerResourceIntegrationTest.java", "diffHunk": "@@ -495,11 +492,12 @@ public void consumerShouldSeeOwnEntitlements() throws JobException {\n         consumerResource.bind(consumer.getUuid(), pool.getId(),\n             null, 1, null, null, false, null, null);\n \n-        setupPrincipal(new ConsumerPrincipal(consumer, owner));\n+        setupPrincipal(new TrustedUserPrincipal(\"Test\"));", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAzMDQ3MQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r554030471", "bodyText": "There is a way around this. The reason the revokeOnGuestMigration method is intercepted, is because in TestingModules.java you bind the interceptor with Matchers.any(), which will match any method inside the ConsumerResource. Changing that to Matchers.annotatedWith(Verify.class) should work (it will still intercept the methods that have @Verify, but not the ones that don't (like revokeOnGuestMigration).", "author": "nikosmoum", "createdAt": "2021-01-08T15:57:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1NjM1MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555056350", "bodyText": "Its a good approach, using the Matchers.annotatedWith() method to target methods annotated with @verify, but there are few other test cases which invokes the methods that does not have @verify annotation on it & expect filter to be called. Such as - testConsumerCannotListAllConsumers & canNotDeleteConsumerOtherThanSelf", "author": "wolfdale", "createdAt": "2021-01-11T13:46:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDAzMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg3MTkzOQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555871939", "bodyText": "I have added a commit with a fix for this. It removed the 2 interceptor bindings for ConsumerResource/OwnerResource, and instead altered the custom matcher we already had (HttpMethodMatcher) to only bind the interceptor for methods that are overriding methods that have http-related annotations (all our API endpoints are overriden from the openapi-generated interfaces that have the rest annotations, so it will match exactly all of those, and no other unrelated ones).", "author": "nikosmoum", "createdAt": "2021-01-12T15:43:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNDAzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQzMjY2Ng==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553432666", "bodyText": "All the DTOs introduced here need to have the DynamicPropertyFilterMixIn added in JsonProvider.addMixInAnnotationsForDTOs", "author": "nikosmoum", "createdAt": "2021-01-07T16:20:29Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -7914,6 +9529,61 @@ components:\n             items:\n               type: string\n \n+    SystemPurposeComplianceStatusDTO:", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0Mjg2Nw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042867", "bodyText": "Added MixIn for\n\nComplianceReasonDTO.class\nComplianceStatusDTO.class\nContentAccessDTO.class\nPoolQuantityDTO.class\nSystemPurposeComplianceStatusDTO.class", "author": "wolfdale", "createdAt": "2021-01-11T13:23:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzQzMjY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MDc5MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553890790", "bodyText": "The since variable can be declared in the yaml with format: date-time, and here it can be defined as OffsetDateTime. And all the stuff below is not needed.\nWe have added a class OffsetDateTimeParamConverterProvider that will convert dates in the form of string of various formats into an OffsetDateTime. From looking what that class does, you probably need to mark the since variable here with  a javax.validation.constraints.Pattern annotation, and specify the format on it, and the converter class will do the rest.", "author": "nikosmoum", "createdAt": "2021-01-08T11:27:25Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -1967,27 +1897,34 @@ public void deleteConsumer(\n         return returnCerts;\n     }\n \n-    @ApiOperation(notes = \"Retrieves the body of the Content Access Certificate for the Consumer\",\n-        value = \"getContentAccessBody\", response = String.class)\n-    @ApiResponses({ @ApiResponse(code = 404, message = \"\"), @ApiResponse(code = 304, message = \"\") })\n-    @GET\n-    @Path(\"{consumer_uuid}/accessible_content\")\n-    @Produces(MediaType.APPLICATION_JSON)\n-    public Response getContentAccessBody(\n-        @PathParam(\"consumer_uuid\") @Verify(Consumer.class) String consumerUuid,\n-        @HeaderParam(\"If-Modified-Since\") @DefaultValue(\"Thu, 01 Jan 1970 00:00:00 GMT\")\n-        @DateFormat({ \"EEE, dd MMM yyyy HH:mm:ss z\" }) Date since) {\n-\n+    @Override\n+    public Response getContentAccessBody(@Verify(Consumer.class) String consumerUuid, String since) {", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjgxNw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042817", "bodyText": "I don't think we can add Pattern constrains on parameter here. Since its a overridden method & breaks the rules of inheritance, when I tried this I got the compiler error something like below -\nMethod parameters do not respect the inheritance rules. In subtypes, no parameter constraints may be declared on overridden or implemented methods, nor may parameters be marked for cascaded validation.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MDc5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTg4MzQ4Mg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555883482", "bodyText": "I think this might be a limitation of the Pattern annotation, because it's from the javax.validation package. Have you tried keeping the old annotation (@DateFormat) in the exact same way it was applied before, and then modifying OffsetDateTimeParamConverterProvider to handle that instead of @Pattern?", "author": "nikosmoum", "createdAt": "2021-01-12T15:58:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MDc5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MjgyMw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553892823", "bodyText": "why was this replaced here? it does exactly the same thing the get() method you replaced it with?", "author": "nikosmoum", "createdAt": "2021-01-08T11:32:10Z", "path": "server/client/ruby/candlepin_api.rb", "diffHunk": "@@ -1280,7 +1280,17 @@ def list_certificates(serials = [], params = {})\n     qparams = {}\n     qparams[:serials] = serials.join(\",\") if serials.length > 0\n \n-    return get(path, qparams)\n+    # escape and build uri", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0Mjc3MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042770", "bodyText": "Well It should not be replaced (I may have been testing with some accept header stuff before merging the certificate APIs together). I reverted it again to original implementation.\nGood catch.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg5MjgyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkwMTE3OQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553901179", "bodyText": "If a consumer wasn't found for one of the specified uuids, it isn't added to the list to be returned (no 400 is thrown afaik), so 'consumer does not have a defined type ID' should be enough here", "author": "nikosmoum", "createdAt": "2021-01-08T11:52:06Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0Mjc0Mw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042743", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkwMTE3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkwMzg1MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553903850", "bodyText": "let's be more specific here, this should say consumers exist for all provided UUIDs", "author": "nikosmoum", "createdAt": "2021-01-08T11:58:28Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjcxNA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042714", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkwMzg1MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkwNzc2MQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553907761", "bodyText": "as noted in the other comment, this can be marked with format: date-time", "author": "nikosmoum", "createdAt": "2021-01-08T12:07:56Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA1MTc2Mg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555051762", "bodyText": "Discussed here.", "author": "wolfdale", "createdAt": "2021-01-11T13:38:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkwNzc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkxMDIyMg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553910222", "bodyText": "this should be 204, since the return type is void", "author": "nikosmoum", "createdAt": "2021-01-08T12:13:54Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjY2Mw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042663", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkxMDIyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMjk0OQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553932949", "bodyText": "is the text/plain needed here? I thought the 2 merged endpoints produced application/zip and application/json respectively?", "author": "nikosmoum", "createdAt": "2021-01-08T13:07:09Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjYxNg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042616", "bodyText": "The response type here directly translate into method return type. So application/zip would be File &  application/json would be CertificateDTO. Since we merged the APIs, I added text/plain which translate to Object return type. I couldn't find anything better.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMjk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc2MzcyMA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555763720", "bodyText": "Yes it looks like openapi-generator does not support this behaviour. Let's leave this as is then, but add a comment right above this line that explains that this is a workaround due to openapi-generator not supporting multiple schemas for different accept header values on the same endpoint", "author": "nikosmoum", "createdAt": "2021-01-12T13:20:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMjk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQzMDEyOQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r556430129", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-13T10:50:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMjk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjQ3NDA0NA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r556474044", "bodyText": "I think we should be even more detailed here, for the sake of people reading this in the future. This endpoint does not really support text/plain, but only application/zip and application/json. The reason for adding text/plain here is a workaround and it is because only the first schema type defined is taken into account. In this case Object will be generated as the returned type, which covers both the List<CertificateDTO> and zip file of the 2 cases we support. This is done because currently openapi-generator does not support returning multiple schema types for different accept header values on the same endpoint", "author": "nikosmoum", "createdAt": "2021-01-13T12:09:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMjk0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzI4OTQ2NQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r557289465", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-14T10:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzMjk0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNTUxMQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553935511", "bodyText": "So this annotation does not work here because the method is called indirectly (not as a 'main' resource method)?", "author": "nikosmoum", "createdAt": "2021-01-08T13:12:47Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -1921,18 +1835,34 @@ public void deleteConsumer(\n         sink.queueEvent(event);\n     }\n \n-    @ApiOperation(notes = \"Retrieves a list of Entitlement Certificates for the Consumer\",\n-        value = \"getEntitlementCertificates\")\n-    @ApiResponses({ @ApiResponse(code = 404, message = \"\") })\n-    @GET\n-    @Path(\"{consumer_uuid}/certificates\")\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @UpdateConsumerCheckIn\n-    public List<CertificateDTO> getEntitlementCertificates(\n-        @PathParam(\"consumer_uuid\") @Verify(Consumer.class) String consumerUuid,\n-        @QueryParam(\"serials\") String serials) {\n-\n+    /**\n+     * Method to get entitlement certificates.\n+     * NOTE: Here we explicitly update consumer Check-In.\n+     *\n+     * @param consumerUuid\n+     *  Consumer UUID\n+     *\n+     * @param serials\n+     *  Certificate serial\n+     *\n+     * @return\n+     *  List of DTOs representing certificates\n+     */\n+    public List<CertificateDTO> getEntitlementCertificates(@Verify(Consumer.class) String consumerUuid,\n+        String serials) {\n         log.debug(\"Getting client certificates for consumer: {}\", consumerUuid);\n+\n+        // UpdateConsumerCheckIn", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjU5OQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042599", "bodyText": "Correct. Since this method is called indirectly, ConsumerCheckInFilter filter is not applied. Therefore we are explicitly updating consumer check-in.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNTUxMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNzYzNg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553937636", "bodyText": "Since this endpoint now represents the 2 previous merged together, we should describe both here, with something like Retrieves a list or a compressed file (depends on accept header) of entitlement certificates for the consumer", "author": "nikosmoum", "createdAt": "2021-01-08T13:17:03Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjU1Nw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042557", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzNzYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzODIwNg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553938206", "bodyText": "typo Retrieves", "author": "nikosmoum", "createdAt": "2021-01-08T13:18:10Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: object\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CertificateDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/compliance:\n+    get:\n+      description: Retireves the Compliance Status of a Consumer.", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjUyOQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042529", "bodyText": "Fixed.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzkzODIwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0MTA0Mw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553941043", "bodyText": "typo Retrieves. Also, the description is cut out: it should be ...with query parameters", "author": "nikosmoum", "createdAt": "2021-01-08T13:24:03Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: object\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CertificateDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/compliance:\n+    get:\n+      description: Retireves the Compliance Status of a Consumer.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatus\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: on_date\n+          in: query\n+          description: Date to get compliance information for, default is now.\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the Compliance Status of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ComplianceStatusDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_access:\n+    get:\n+      description: Retrieves content access of a Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessForConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns content access of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ContentAccessDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_overrides:\n+    get:\n+      description: Retrieves list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: listConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of content overrides of the Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: Adds or Updates a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: addConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the created/update content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        400:\n+          description: |\n+            The content labels are invalid.\n+            The content properties cannot be overridden.\n+            The override values are invalid.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The content labels are invalid.\n+                  The content properties cannot be overridden.\n+                  The override values are invalid.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Deletes a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: deleteConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/deletionrecord:\n+    delete:\n+      description: Removes the Deletion Record for a Consumer Allowed for a superadmin.\n+        The main use case for this would be if a user accidently deleted a non-RHEL hypervisor,\n+        causing it to no longer be auto-detected via virt-who.\n+      tags:\n+        - Consumer\n+      operationId: removeDeletionRecord\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        404:\n+          description: Deletion record for hypervisor is not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Deletion record for hypervisor is not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/entitlements:\n+    get:\n+      description: Retrives a list of Entitlements. This endpoint supports paging with query.", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjUwOQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042509", "bodyText": "Fixed", "author": "wolfdale", "createdAt": "2021-01-11T13:23:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0MTA0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0MzQyMg==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553943422", "bodyText": "there's a missing period after for a Consumer, which makes this as a confusing 1 sentence, when it's 2 sentences", "author": "nikosmoum", "createdAt": "2021-01-08T13:28:58Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: object\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CertificateDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/compliance:\n+    get:\n+      description: Retireves the Compliance Status of a Consumer.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatus\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: on_date\n+          in: query\n+          description: Date to get compliance information for, default is now.\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the Compliance Status of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ComplianceStatusDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_access:\n+    get:\n+      description: Retrieves content access of a Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessForConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns content access of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ContentAccessDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_overrides:\n+    get:\n+      description: Retrieves list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: listConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of content overrides of the Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: Adds or Updates a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: addConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the created/update content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        400:\n+          description: |\n+            The content labels are invalid.\n+            The content properties cannot be overridden.\n+            The override values are invalid.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The content labels are invalid.\n+                  The content properties cannot be overridden.\n+                  The override values are invalid.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Deletes a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: deleteConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/deletionrecord:\n+    delete:\n+      description: Removes the Deletion Record for a Consumer Allowed for a superadmin.\n+        The main use case for this would be if a user accidently deleted a non-RHEL hypervisor,\n+        causing it to no longer be auto-detected via virt-who.\n+      tags:\n+        - Consumer\n+      operationId: removeDeletionRecord\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        404:\n+          description: Deletion record for hypervisor is not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Deletion record for hypervisor is not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/entitlements:\n+    get:\n+      description: Retrives a list of Entitlements. This endpoint supports paging with query.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: listEntitlements\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: ID of a Product\n+          schema:\n+            type: string\n+        - name: regen\n+          in: query\n+          description: Boolean flag to regenerate entitlements\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: matches\n+          in: query\n+          description: Match criteria for filtering\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: Attribute filters\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A list of entitlements\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        400:\n+          description: Product with this ID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Product with this ID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this  UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this  UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Unbinds all Entitlements for a Consumer Result contains the total number of", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjQ4NA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042484", "bodyText": "Fixed", "author": "wolfdale", "createdAt": "2021-01-11T13:23:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0MzQyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NDAyMA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553944020", "bodyText": "wrong description. should be something like The total number of revoked entitlements", "author": "nikosmoum", "createdAt": "2021-01-08T13:30:21Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: object\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CertificateDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/compliance:\n+    get:\n+      description: Retireves the Compliance Status of a Consumer.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatus\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: on_date\n+          in: query\n+          description: Date to get compliance information for, default is now.\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the Compliance Status of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ComplianceStatusDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_access:\n+    get:\n+      description: Retrieves content access of a Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessForConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns content access of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ContentAccessDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_overrides:\n+    get:\n+      description: Retrieves list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: listConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of content overrides of the Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: Adds or Updates a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: addConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the created/update content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        400:\n+          description: |\n+            The content labels are invalid.\n+            The content properties cannot be overridden.\n+            The override values are invalid.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The content labels are invalid.\n+                  The content properties cannot be overridden.\n+                  The override values are invalid.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Deletes a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: deleteConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/deletionrecord:\n+    delete:\n+      description: Removes the Deletion Record for a Consumer Allowed for a superadmin.\n+        The main use case for this would be if a user accidently deleted a non-RHEL hypervisor,\n+        causing it to no longer be auto-detected via virt-who.\n+      tags:\n+        - Consumer\n+      operationId: removeDeletionRecord\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        404:\n+          description: Deletion record for hypervisor is not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Deletion record for hypervisor is not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/entitlements:\n+    get:\n+      description: Retrives a list of Entitlements. This endpoint supports paging with query.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: listEntitlements\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: ID of a Product\n+          schema:\n+            type: string\n+        - name: regen\n+          in: query\n+          description: Boolean flag to regenerate entitlements\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: matches\n+          in: query\n+          description: Match criteria for filtering\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: Attribute filters\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A list of entitlements\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        400:\n+          description: Product with this ID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Product with this ID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this  UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this  UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Unbinds all Entitlements for a Consumer Result contains the total number of\n+        entitlements unbound.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: unbindAll\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjQ0OA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042448", "bodyText": "fixed.", "author": "wolfdale", "createdAt": "2021-01-11T13:23:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NDAyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NzI4MQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553947281", "bodyText": "typo label", "author": "nikosmoum", "createdAt": "2021-01-08T13:37:11Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: object\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CertificateDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/compliance:\n+    get:\n+      description: Retireves the Compliance Status of a Consumer.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatus\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: on_date\n+          in: query\n+          description: Date to get compliance information for, default is now.\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the Compliance Status of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ComplianceStatusDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_access:\n+    get:\n+      description: Retrieves content access of a Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessForConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns content access of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ContentAccessDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_overrides:\n+    get:\n+      description: Retrieves list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: listConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of content overrides of the Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: Adds or Updates a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: addConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the created/update content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        400:\n+          description: |\n+            The content labels are invalid.\n+            The content properties cannot be overridden.\n+            The override values are invalid.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The content labels are invalid.\n+                  The content properties cannot be overridden.\n+                  The override values are invalid.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Deletes a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: deleteConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/deletionrecord:\n+    delete:\n+      description: Removes the Deletion Record for a Consumer Allowed for a superadmin.\n+        The main use case for this would be if a user accidently deleted a non-RHEL hypervisor,\n+        causing it to no longer be auto-detected via virt-who.\n+      tags:\n+        - Consumer\n+      operationId: removeDeletionRecord\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        404:\n+          description: Deletion record for hypervisor is not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Deletion record for hypervisor is not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/entitlements:\n+    get:\n+      description: Retrives a list of Entitlements. This endpoint supports paging with query.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: listEntitlements\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: ID of a Product\n+          schema:\n+            type: string\n+        - name: regen\n+          in: query\n+          description: Boolean flag to regenerate entitlements\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: matches\n+          in: query\n+          description: Match criteria for filtering\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: Attribute filters\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A list of entitlements\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        400:\n+          description: Product with this ID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Product with this ID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this  UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this  UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Unbinds all Entitlements for a Consumer Result contains the total number of\n+        entitlements unbound.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: unbindAll\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/DeleteResult'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: If a pool ID is specified, we know we're binding to that exact pool. Specifying an\n+        entitle date in this case makes no sense and will throw an error. If a list of\n+        product IDs are specified, we attempt to auto-bind to subscriptions which will provide those\n+        products. An optional date can be specified allowing the consumer to get compliant for some date in\n+        the future. If no date is specified we assume the current date. If neither a pool nor an ID is\n+        specified, this is a healing request. The path is similar to the bind by products, but in this\n+        case we use the installed products on the consumer, and their current compliant status, to\n+        determine which product IDs should be requested. The entitle date is used the same as with\n+        bind by products. The response will contain a list of Entitlement objects if async is false, or a\n+        JobDetail object if async is true\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: bind\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: pool\n+          in: query\n+          description: Pool ID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: Product array\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: quantity\n+          in: query\n+          description: Quantity\n+          schema:\n+            type: integer\n+        - name: email\n+          in: query\n+          description: Email address\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: Email locale\n+          schema:\n+            type: string\n+        - name: async\n+          in: query\n+          description: Operation Type async or sync\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: entitle_date\n+          in: query\n+          description: Entitlement date\n+          schema:\n+            type: string\n+        - name: from_pool\n+          in: query\n+          description: From pool\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        400:\n+          description: Invalid date, must use ISO 8601 format |\n+            Cannot bind by multiple parameters |\n+            Cannot specify a quantity when auto-binding. |\n+            Ignoring request to auto-attach. It is disabled for org because of the content access\n+            mode setting or hypervisor autobind setting.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Invalid date, must use ISO 8601 format |\n+                  Cannot bind by multiple parameters |\n+                  Cannot specify a quantity when auto-binding. |\n+                  Ignoring request to auto-attach. It is disabled for org because of the content access\n+                  mode setting or hypervisor autobind setting.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/exists:\n+    head:\n+      description: Checks for the existence of a Consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExists\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: Successful Operation.\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/export:\n+    get:\n+      description: Retrieves a Compressed File representation of a Consumer (manifest).\n+      tags:\n+        - Consumer\n+      operationId: exportData\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the target consumer.\n+          required: true\n+          schema:\n+            type: string\n+        - name: cdn_label\n+          in: query\n+          description: The lable of the target CDN.", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjM1OQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042359", "bodyText": "Fixed", "author": "wolfdale", "createdAt": "2021-01-11T13:23:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk0NzI4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk1NTIwNQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553955205", "bodyText": "This wording is a bit confusing. Even though it's an ConsumerDTOArrayElement, we should still refer to it just as a consumer", "author": "nikosmoum", "createdAt": "2021-01-08T13:53:11Z", "path": "api/candlepin-api-spec.yaml", "diffHunk": "@@ -555,239 +555,1732 @@ paths:\n         default:\n           $ref: '#/components/responses/default'\n \n-  /consumers/{consumer_uuid}/content_overrides:\n+  /consumers:\n     get:\n-      description: Retrieves list of Content Overrides\n+      description: Retrieves a list of the Consumers according to search criteria.\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: listConsumerContentOverrides\n+      operationId: searchConsumers\n       security: []\n       parameters:\n-        - name: consumer_uuid\n-          in: path\n-          description: The ID of the consumer\n-          required: true\n+        - name: username\n+          in: query\n+          description: Username\n+          schema:\n+            type: string\n+        - name: type\n+          in: query\n+          description: Consumer type\n+          schema:\n+            type: array\n+            uniqueItems: true\n+            items:\n+              type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n           schema:\n             type: string\n+        - name: uuid\n+          in: query\n+          description: The UUID of consumers\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: hypervisor_id\n+          in: query\n+          description: Hypervisor IDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: fact\n+          in: query\n+          description: The consumer facts\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n       x-java-response:\n         type: Iterable\n         isContainer: true\n       responses:\n         200:\n-          description: List of content overrides of the Consumer\n+          description: List of consumers\n           content:\n             application/json:\n               schema:\n                 type: array\n                 items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                  $ref: '#/components/schemas/ConsumerDTOArrayElement'\n+        400:\n+          description: Must specify at least one search criteria.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Must specify at least one search criteria.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Creates a Consumer.\n+        This method is available to everyone, as we have nothing we can reliably verify in the method\n+        signature. Instead we have to figure out what owner this consumer is destined for (due to backward\n+        compatability with existing clients which do not specify an owner during registration) and then\n+        check the access to the specified owner in the method itself.\n+      tags:\n+        - Consumer\n+      operationId: createConsumer\n+      security: []\n+      parameters:\n+        - name: username\n+          in: query\n+          description: User name\n+          schema:\n+            type: string\n+        - name: owner\n+          in: query\n+          description: Owner key\n+          schema:\n+            type: string\n+        - name: activation_keys\n+          in: query\n+          description: Activation key\n+          schema:\n+            type: string\n+        - name: identity_cert_creation\n+          in: query\n+          description: Boolean flag for identity cert generation.\n+          schema:\n+            type: boolean\n+            default: true\n+      requestBody:\n+        description: Consumer to be created\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              $ref: '#/components/schemas/ConsumerDTO'\n+      responses:\n+        200:\n+          description: Consumer successfully created.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        400:\n+          description: One or more constraint validation has failed.\n+            | Consumer type must be specified or it is of invalid type.\n+            | Organization is not specified or does not exists.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed.\n+                  | Consumer type must be specified or it is of invalid type.\n+                  | Organization is not specified or does not exists.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         403:\n-          description: Insufficient permissions\n+          description: Insufficient permissions.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Insufficient permissions\n+                displayMessage: Insufficient permissions.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         404:\n-          description: Unit with ID \"test_id\" could not be found.\n+          description: Owner with this key could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Owner with this key could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/compliance:\n+    get:\n+      description: Retrieves a Compliance Status list for a list of Consumers.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatusList\n+      security: [ ]\n+      parameters:\n+        - name: uuid\n+          in: query\n+          description: Consumers UUIDs\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: Returns a map of consumer UUIDs & compliance status\n+          content:\n+            application/json:\n+              schema:\n+                type: object\n+                additionalProperties:\n+                  $ref: '#/components/schemas/ComplianceStatusDTO'\n+        400:\n+          description: Could not found consumer or does not have a defined type ID.\n+            | Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Could not found consumer or does not have a defined type ID.\n+                  | Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/exists:\n+    post:\n+      description: Checks for the existence of a Consumer in bulk. This API return UUIDs of non-existing\n+        consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExistsBulk\n+      security: []\n+      requestBody:\n+        description: Array of Consumer UUIDs\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              uniqueItems: true\n+              items:\n+                type: string\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      responses:\n+        204:\n+          description: Successful operation\n+        400:\n+          description: No UUIDs provided\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: No UUIDs provided\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Non-existing consumer UUIDs\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  type: string\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}:\n+    get:\n+      description: Retrieves a single Consumer\n+      tags:\n+        - Consumer\n+      operationId: getConsumer\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns single consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: Unit with ID \"test_id\" could not be found.\n+                displayMessage: Consumer with this UUID could not be found.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n         default:\n           $ref: '#/components/responses/default'\n \n     put:\n-      description: Adds or Updates a list of Content Overrides\n+      description: Updates a Consumer\n       tags:\n         - Consumer\n-        - Content Override\n-      operationId: addConsumerContentOverrides\n+      operationId: updateConsumer\n       security: []\n       parameters:\n         - name: consumer_uuid\n           in: path\n-          description: The ID of the Consumer\n+          description: The UUID of the Consumer\n           required: true\n           schema:\n             type: string\n       requestBody:\n-        description: The list of the content overrides\n+        description: Consumer to be updated\n         required: true\n         content:\n           application/json:\n             schema:\n-              type: array\n-              items:\n-                $ref: '#/components/schemas/ContentOverrideDTO'\n-      x-java-response:\n-        type: Iterable\n-        isContainer: true\n+              $ref: '#/components/schemas/ConsumerDTO'\n       responses:\n         200:\n-          description: List of the created/update content overrides of the Consumer\n+          description: Successful operation\n+        400:\n+          description: One or more constraint validation has failed. Problem updating consumer.\n           content:\n             application/json:\n               schema:\n-                type: array\n-                items:\n-                  $ref: '#/components/schemas/ContentOverrideDTO'\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: One or more constraint validation has failed. Problem updating consumer.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: Retrieves a single Consumer & regenerate identity certificates\n+      tags:\n+        - Consumer\n+      operationId: regenerateIdentityCertificates\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns consumer with regenerated Identity certs.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ConsumerDTO'\n         400:\n-          description: |\n-            The following content labels are invalid: test_label\n-            The following content properties cannot be overridden: test_property\n-            The following override values are invalid: test_value\n+          description: Consumer type validation failed or Problem regenerating ID cert for this unit.\n           content:\n             application/json:\n               schema:\n                 $ref: '#/components/schemas/ExceptionMessage'\n               example:\n-                displayMessage: \"The following override values are invalid: test_value\"\n+                displayMessage: Consumer type validation failed or Problem regenerating ID cert for this unit.\n                 requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n-        403:\n-          description: Insufficient permissions\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Removes a Consumer\n+      tags:\n+        - Consumer\n+      operationId: deleteConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        403:\n+          description: Consumer could not be deleted due to unknown type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer could not be deleted due to unknown type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        410:\n+          description: Consumer with this UUID is already deleted.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID is already deleted.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/accessible_content:\n+    get:\n+      description: Retrieves the body of the Content Access Certificate for the Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessBody\n+      security: [ ]\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: If-Modified-Since\n+          in: header\n+          description: Modified date. Accepted format EEE, dd MMM yyyy HH:mm:ss z\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation.\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        304:\n+          description: Not modified since date supplied.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Not modified since date supplied.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        400:\n+          description: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+            | Cannot retrieve content access certificate.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unable to parse modified date. Accepted format \"EEE, dd MMM yyyy HH:mm:ss z\"\n+                  | Cannot retrieve content access certificat.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/certificates:\n+    put:\n+      description: Regenerates the Entitlement Certificates for a Consumer\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: regenerateEntitlementCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+        - name: entitlement\n+          in: query\n+          description: Entitlement ID\n+          schema:\n+            type: string\n+        - name: lazy_regen\n+          in: query\n+          description: Lazy regeneration of entitlement certs\n+          schema:\n+            type: boolean\n+            default: true\n+      responses:\n+        200:\n+          description: Successful operation\n+        400:\n+          description: Consumer does not have a defined type ID. Invalid consumer type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer does not have a defined type ID. Invalid consumer type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found Or Entitlement with this ID could not be\n+            found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found Or Entitlement with this\n+                  ID could not befound.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    get:\n+      description: Retrieves a Compressed File of Entitlement Certificates\n+      tags:\n+        - Consumer\n+        - Certificates\n+      operationId: exportCertificates\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the consumer to retrieve guest\n+          required: true\n+          schema:\n+            type: string\n+        - name: serials\n+          in: query\n+          description: Certificate serials\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: object\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/CertificateDTO'\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/compliance:\n+    get:\n+      description: Retireves the Compliance Status of a Consumer.\n+      tags:\n+        - Consumer\n+        - Compliance\n+      operationId: getComplianceStatus\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: on_date\n+          in: query\n+          description: Date to get compliance information for, default is now.\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the Compliance Status of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ComplianceStatusDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_access:\n+    get:\n+      description: Retrieves content access of a Consumer\n+      tags:\n+        - Consumer\n+        - Content access\n+      operationId: getContentAccessForConsumer\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns content access of a Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ContentAccessDTO'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/content_overrides:\n+    get:\n+      description: Retrieves list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: listConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the consumer\n+          required: true\n+          schema:\n+            type: string\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of content overrides of the Consumer.\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    put:\n+      description: Adds or Updates a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: addConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the created/update content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        400:\n+          description: |\n+            The content labels are invalid.\n+            The content properties cannot be overridden.\n+            The override values are invalid.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: The content labels are invalid.\n+                  The content properties cannot be overridden.\n+                  The override values are invalid.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Deletes a list of Content Overrides\n+      tags:\n+        - Consumer\n+        - Content Override\n+      operationId: deleteConsumerContentOverrides\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The ID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      requestBody:\n+        description: The list of the content overrides\n+        required: true\n+        content:\n+          application/json:\n+            schema:\n+              type: array\n+              items:\n+                $ref: '#/components/schemas/ContentOverrideDTO'\n+      x-java-response:\n+        type: Iterable\n+        isContainer: true\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/ContentOverrideDTO'\n+        403:\n+          description: Insufficient permissions.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Insufficient permissions.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/deletionrecord:\n+    delete:\n+      description: Removes the Deletion Record for a Consumer Allowed for a superadmin.\n+        The main use case for this would be if a user accidently deleted a non-RHEL hypervisor,\n+        causing it to no longer be auto-detected via virt-who.\n+      tags:\n+        - Consumer\n+      operationId: removeDeletionRecord\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: A successful operation.\n+        404:\n+          description: Deletion record for hypervisor is not found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Deletion record for hypervisor is not found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/entitlements:\n+    get:\n+      description: Retrives a list of Entitlements. This endpoint supports paging with query.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: listEntitlements\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: ID of a Product\n+          schema:\n+            type: string\n+        - name: regen\n+          in: query\n+          description: Boolean flag to regenerate entitlements\n+          schema:\n+            type: boolean\n+            default: true\n+        - name: matches\n+          in: query\n+          description: Match criteria for filtering\n+          schema:\n+            type: string\n+        - name: attribute\n+          in: query\n+          description: Attribute filters\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A list of entitlements\n+          content:\n+            application/json:\n+              schema:\n+                type: array\n+                items:\n+                  $ref: '#/components/schemas/EntitlementDTO'\n+        400:\n+          description: Product with this ID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Product with this ID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this  UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this  UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    delete:\n+      description: Unbinds all Entitlements for a Consumer Result contains the total number of\n+        entitlements unbound.\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: unbindAll\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: List of the deleted content overrides of the Consumer\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/DeleteResult'\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+    post:\n+      description: If a pool ID is specified, we know we're binding to that exact pool. Specifying an\n+        entitle date in this case makes no sense and will throw an error. If a list of\n+        product IDs are specified, we attempt to auto-bind to subscriptions which will provide those\n+        products. An optional date can be specified allowing the consumer to get compliant for some date in\n+        the future. If no date is specified we assume the current date. If neither a pool nor an ID is\n+        specified, this is a healing request. The path is similar to the bind by products, but in this\n+        case we use the installed products on the consumer, and their current compliant status, to\n+        determine which product IDs should be requested. The entitle date is used the same as with\n+        bind by products. The response will contain a list of Entitlement objects if async is false, or a\n+        JobDetail object if async is true\n+      tags:\n+        - Consumer\n+        - Entitlements\n+      operationId: bind\n+      security: []\n+      x-java-response:\n+        type: javax.ws.rs.core.Response\n+        isContainer: false\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+        - name: pool\n+          in: query\n+          description: Pool ID\n+          schema:\n+            type: string\n+        - name: product\n+          in: query\n+          description: Product array\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+        - name: quantity\n+          in: query\n+          description: Quantity\n+          schema:\n+            type: integer\n+        - name: email\n+          in: query\n+          description: Email address\n+          schema:\n+            type: string\n+        - name: email_locale\n+          in: query\n+          description: Email locale\n+          schema:\n+            type: string\n+        - name: async\n+          in: query\n+          description: Operation Type async or sync\n+          schema:\n+            type: boolean\n+            default: false\n+        - name: entitle_date\n+          in: query\n+          description: Entitlement date\n+          schema:\n+            type: string\n+        - name: from_pool\n+          in: query\n+          description: From pool\n+          schema:\n+            type: array\n+            items:\n+              type: string\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            text/plain:\n+              schema:\n+                type: string\n+        400:\n+          description: Invalid date, must use ISO 8601 format |\n+            Cannot bind by multiple parameters |\n+            Cannot specify a quantity when auto-binding. |\n+            Ignoring request to auto-attach. It is disabled for org because of the content access\n+            mode setting or hypervisor autobind setting.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Invalid date, must use ISO 8601 format |\n+                  Cannot bind by multiple parameters |\n+                  Cannot specify a quantity when auto-binding. |\n+                  Ignoring request to auto-attach. It is disabled for org because of the content access\n+                  mode setting or hypervisor autobind setting.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/exists:\n+    head:\n+      description: Checks for the existence of a Consumer.\n+      tags:\n+        - Consumer\n+      operationId: consumerExists\n+      security: []\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the Consumer\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        204:\n+          description: Successful Operation.\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/export:\n+    get:\n+      description: Retrieves a Compressed File representation of a Consumer (manifest).\n+      tags:\n+        - Consumer\n+      operationId: exportData\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: The UUID of the target consumer.\n+          required: true\n+          schema:\n+            type: string\n+        - name: cdn_label\n+          in: query\n+          description: The lable of the target CDN.\n+          required: false\n+          schema:\n+            type: string\n+        - name: webapp_prefix\n+          in: query\n+          description: The URL pointing to the manifest's originating web application.\n+          required: false\n+          schema:\n+            type: string\n+        - name: api_url\n+          in: query\n+          description: The URL pointing to the manifest's originating candlepin API.\n+          required: false\n+          schema:\n+            type: string\n+        - name: ext\n+          in: query\n+          description: Key/Value pairs to be passed to the extension adapter when generating a manifest.\n+          required: false\n+          schema:\n+            type: array\n+            items:\n+              $ref: '#/components/schemas/KeyValueParamDTO'\n+      responses:\n+        200:\n+          description: A successful operation\n+          content:\n+            application/zip:\n+              schema:\n+                type: string\n+                format: binary\n+        400:\n+          description: Consumer is null or does not have a defined type ID or Consumer is not associated\n+            with a valid type\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer is null or does not have a defined type ID or Consumer is\n+                  not associated with a valid type\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        403:\n+          description: Unit cannot be exported. | A manifest cannot be made for units this type.\n+            | A CDN with this label does not exist on this system.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Unit cannot be exported. | A manifest cannot be made for units this type.\n+                  | A CDN with this label does not exist on this system.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        404:\n+          description: Consumer with this UUID could not be found.\n+          content:\n+            application/json:\n+              schema:\n+                $ref: '#/components/schemas/ExceptionMessage'\n+              example:\n+                displayMessage: Consumer with this UUID could not be found.\n+                requestUuid: c4347004-8792-41fe-a4d8-fccaa0d3898a\n+        default:\n+          $ref: '#/components/responses/default'\n+\n+  /consumers/{consumer_uuid}/guests:\n+    get:\n+      description: Retrieves a list of Guest Consumers of a Consumer\n+      tags:\n+        - Consumer\n+      operationId: getGuests\n+      security: [ ]\n+      parameters:\n+        - name: consumer_uuid\n+          in: path\n+          description: Consumer UUID\n+          schema:\n+            type: string\n+      responses:\n+        200:\n+          description: Returns the list of reduced view of a consumer", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjMzNw==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042337", "bodyText": "Done. Changed it to - Returns the list of consumers", "author": "wolfdale", "createdAt": "2021-01-11T13:23:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk1NTIwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NTA5MA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553985090", "bodyText": "for a method with this many parameters, it is probably more readable to have them 1 per line like it was before", "author": "nikosmoum", "createdAt": "2021-01-08T14:46:42Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -2147,43 +2069,25 @@ private void validateBindArguments(String poolIdString, Integer quantity,\n \n     }\n \n-    @ApiOperation(notes = \"If a pool ID is specified, we know we're binding to that exact pool. \" +\n-        \"Specifying an entitle date in this case makes no sense and will throw an \" +\n-        \"error. If a list of product IDs are specified, we attempt to auto-bind to\" +\n-        \" subscriptions which will provide those products. An optional date can be\" +\n-        \" specified allowing the consumer to get compliant for some date in the \" +\n-        \"future. If no date is specified we assume the current date. If neither a \" +\n-        \"pool nor an ID is specified, this is a healing request. The path is similar \" +\n-        \"to the bind by products, but in this case we use the installed products on \" +\n-        \"the consumer, and their current compliant status, to determine which product\" +\n-        \" IDs should be requested. The entitle date is used the same as with bind by \" +\n-        \"products. The response will contain a list of Entitlement objects if async is\" +\n-        \" false, or a JobDetail object if async is true.\", value = \"Bind Entitlements\")\n-    @ApiResponses({ @ApiResponse(code = 400, message = \"\"),\n-        @ApiResponse(code = 403, message = \"Binds Entitlements\"), @ApiResponse(code = 404, message = \"\") })\n-    @POST\n-    @Consumes(MediaType.APPLICATION_JSON)\n-    @Produces(MediaType.APPLICATION_JSON)\n-    @Path(\"/{consumer_uuid}/entitlements\")\n-    @SuppressWarnings(\"checkstyle:indentation\")\n-    public Response bind(\n-        @PathParam(\"consumer_uuid\") @Verify(Consumer.class) String consumerUuid,\n-        @QueryParam(\"pool\") @Verify(value = Pool.class, nullable = true,\n-            subResource = SubResource.ENTITLEMENTS) String poolIdString,\n-        @QueryParam(\"product\") String[] productIds,\n-        @QueryParam(\"quantity\") Integer quantity,\n-        @QueryParam(\"email\") String email,\n-        @QueryParam(\"email_locale\") String emailLocale,\n-        @QueryParam(\"async\") @DefaultValue(\"false\") boolean async,\n-        @QueryParam(\"entitle_date\") String entitleDateStr,\n-        @QueryParam(\"from_pool\") List<String> fromPools) throws JobException {\n+    @Override\n+    @SuppressWarnings({\"checkstyle:indentation\", \"checkstyle:methodlength\"})\n+    public Response bind(@Verify(Consumer.class) String consumerUuid,\n+        @Verify(value = Pool.class, nullable = true, subResource = SubResource.ENTITLEMENTS)\n+        String poolIdString, List<String> listOfProductIds,\n+        Integer quantity, String email, String emailLocale, Boolean async, String entitleDateStr,\n+        List<String> fromPools) {", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MzA4OQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555043089", "bodyText": "Done.", "author": "wolfdale", "createdAt": "2021-01-11T13:24:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NTA5MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NzEzNA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553987134", "bodyText": "Let's be consistent and throw the same exception as other places we call queueJob:\n        catch (JobException e) {\n            String errmsg = this.i18n.tr(\"An unexpected exception occurred while scheduling job \\\"{0}\\\"\",\n                config.getJobKey());\n            log.error(errmsg, e);\n            throw new IseException(errmsg, e);\n        }", "author": "nikosmoum", "createdAt": "2021-01-08T14:49:54Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -2246,7 +2150,15 @@ public Response bind(\n             }\n \n             // events will be triggered by the job\n-            AsyncJobStatus status = jobManager.queueJob(jobConfig);\n+            AsyncJobStatus status = null;\n+\n+            try {\n+                status = jobManager.queueJob(jobConfig);\n+            }\n+            catch (JobException e) {\n+                throw new RuntimeException(\"Unable to queue jobs.\");", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjI3OA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042278", "bodyText": "Sure, fixed it.", "author": "wolfdale", "createdAt": "2021-01-11T13:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4NzEzNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4OTk2NQ==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r553989965", "bodyText": "Same as the previous comment for this catch block", "author": "nikosmoum", "createdAt": "2021-01-08T14:54:37Z", "path": "server/src/main/java/org/candlepin/resource/ConsumerResource.java", "diffHunk": "@@ -2658,7 +2459,14 @@ public AsyncJobStatusDTO exportDataAsync(\n         JobConfig config = manifestManager.generateManifestAsync(consumerUuid, owner, cdnLabel,\n             webAppPrefix, apiUrl, getExtensionParamMap(extensionArgs));\n \n-        AsyncJobStatus job = this.jobManager.queueJob(config);\n+        AsyncJobStatus job = null;\n+\n+        try {\n+            job = this.jobManager.queueJob(config);\n+        }\n+        catch (JobException e) {\n+            throw new RuntimeException(\"Unable to queue jobs\");", "originalCommit": "0143728a89e38e4c0d5dab3900296e5abf96d05f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA0MjI0NA==", "url": "https://github.com/candlepin/candlepin/pull/2865#discussion_r555042244", "bodyText": "Sure, fixed it.", "author": "wolfdale", "createdAt": "2021-01-11T13:22:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzk4OTk2NQ=="}], "type": "inlineReview"}, {"oid": "d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "url": "https://github.com/candlepin/candlepin/commit/d2fc2e2c29fb7533e0d510d79ce635eaeee472d9", "message": "Unit test fix", "committedDate": "2021-01-14T10:43:39Z", "type": "forcePushed"}, {"oid": "b7669cfc70eee00ad3e64fdac73376e29445c724", "url": "https://github.com/candlepin/candlepin/commit/b7669cfc70eee00ad3e64fdac73376e29445c724", "message": "Add timezone id format support to getContentAccessBody API\n\n* Alter getContentAccessBody endpoint yaml to accept date in\n  OffsetDateTime format and apply specific date format pattern\n  that generates @Pattern annotation\n* Extract OffsetDateTime parsing to a util method shared by\n  both the deserializer and param converter, and enhance\n  the parsing to support formats with Zone ids\n* Remove obsolete DateFormat & DateFormatter classes", "committedDate": "2021-01-14T11:23:15Z", "type": "forcePushed"}, {"oid": "f3e071ee5cacf95d4a944150644a3f3f142101b5", "url": "https://github.com/candlepin/candlepin/commit/f3e071ee5cacf95d4a944150644a3f3f142101b5", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T12:21:50Z", "type": "forcePushed"}, {"oid": "7111fa25b856f7f66f309fa5708bc29b87a5ced4", "url": "https://github.com/candlepin/candlepin/commit/7111fa25b856f7f66f309fa5708bc29b87a5ced4", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T13:16:07Z", "type": "forcePushed"}, {"oid": "380ae176a66a2451d3fe181fb3a7d795435b3ed7", "url": "https://github.com/candlepin/candlepin/commit/380ae176a66a2451d3fe181fb3a7d795435b3ed7", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T15:03:38Z", "type": "forcePushed"}, {"oid": "08b28b5411a0449f3314dfefcdc70e18321df623", "url": "https://github.com/candlepin/candlepin/commit/08b28b5411a0449f3314dfefcdc70e18321df623", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T15:44:30Z", "type": "commit"}, {"oid": "08b28b5411a0449f3314dfefcdc70e18321df623", "url": "https://github.com/candlepin/candlepin/commit/08b28b5411a0449f3314dfefcdc70e18321df623", "message": "ENT-1867: Port ConsumerResource to spec-first\n\n - Added consumer resource endpoint definitions\n - Added content access endpoint definition\n - Added specification for following DTOs\n   - ComplianceReasonDTO\n   - ComplianceStatusDTO\n   - ContentAccessDTO\n   - PoolQuantityDTO\n   - SystemPurposeComplianceStatusDTO\n - Updated translators for DTOs\n - Alter getContentAccessBody endpoint yaml to accept date in\n   OffsetDateTime format and apply specific date format pattern\n   that generates @Pattern annotation\n - Extract OffsetDateTime parsing to a util method shared by\n   both the deserializer and param converter, and enhance\n   the parsing to support formats with Zone ids\n - Removed obsolete DeleteResult, DateRange, DateFormat & DateFormatter classes", "committedDate": "2021-01-14T15:44:30Z", "type": "forcePushed"}]}