{"pr_number": 2683, "pr_title": "[F]ENT-2291: Create adapter methods for DTOs implementing *Info Interfaces", "pr_createdAt": "2020-04-20T10:27:34Z", "pr_url": "https://github.com/candlepin/candlepin/pull/2683", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMzcxNw==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411313717", "bodyText": "I would not put this in this package, since it isn't part of our API. It's a utility class for internal transformations of data. I'd say org.candlepin.resource.util is more appropriate", "author": "nikosmoum", "createdAt": "2020-04-20T11:48:52Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/InfoAdapter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;", "originalCommit": "6a8b42ee7cde336a05008ee8ff12c445d74fab02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM2NjY4MA==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411366680", "bodyText": "Util is probably best if we're going to have a separate class for it. However, we'll need to be careful and ensure that any place which uses the functions are heavy scrutinized so we don't end up using this in places that should be updated in a different way.", "author": "Ceiu", "createdAt": "2020-04-20T13:14:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMzcxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0NDc2Nw==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411444767", "bodyText": "Class relocated to org.candlepin.resource.util package.", "author": "sonalidhome", "createdAt": "2020-04-20T14:54:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMzcxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzA3OQ==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411317079", "bodyText": "why null?", "author": "nikosmoum", "createdAt": "2020-04-20T11:54:52Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/InfoAdapter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.service.model.OwnerInfo;\n+import org.candlepin.service.model.PermissionBlueprintInfo;\n+import org.candlepin.service.model.RoleInfo;\n+import org.candlepin.service.model.UserInfo;\n+import org.candlepin.util.Util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Represents the adapters class to convert the DTOs object into\n+ * info interface implemented objects. Initially, DTO classes were\n+ * implementing Info interfaces. This class helps to get an equivalent\n+ * implemented interface object.\n+ */\n+public class InfoAdapter {\n+\n+    private InfoAdapter() {\n+        //nothing to do here\n+    }\n+\n+    /**\n+     * This method adapts the RoleDTO into RoleInfo object.\n+     *\n+     * @param source RoleDTO object\n+     *\n+     * @return RoleInfo object\n+     */\n+    public static RoleInfo roleInfoAdapter(RoleDTO source) {\n+        return new RoleInfo() {\n+\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return source.getName();\n+            }\n+\n+            @Override\n+            public Collection<? extends UserInfo> getUsers() {\n+                Set<UserDTO> userDTOSet = source.getUsers();\n+                Set<UserInfo> userInfoSet = null;\n+\n+                if (userDTOSet != null) {\n+                    userInfoSet = new HashSet<>();\n+                    for (UserDTO dto : userDTOSet) {\n+                        userInfoSet.add(userInfoAdapter(dto));\n+                    }\n+                }\n+\n+                return userInfoSet;\n+            }\n+\n+            @Override\n+            public Collection<? extends PermissionBlueprintInfo> getPermissions() {\n+                List<PermissionBlueprintDTO> blueprintDTOList = source.getPermissions();\n+                List<PermissionBlueprintInfo> blueprintInfoList = null;\n+\n+                if (blueprintDTOList != null) {\n+                    blueprintInfoList = new ArrayList<>();\n+                    for (PermissionBlueprintDTO dto : blueprintDTOList) {\n+                        blueprintInfoList.add(permissionBlueprintInfoAdapter(dto));\n+                    }\n+                }\n+                return blueprintInfoList;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the PermissionBlueprintDTO\n+     * into PermissionBlueprintInfo object.\n+     *\n+     * @param source PermissionBlueprintDTO object\n+     *\n+     * @return PermissionBlueprintInfo object\n+     */\n+    public static PermissionBlueprintInfo permissionBlueprintInfoAdapter(PermissionBlueprintDTO source) {\n+\n+        return new PermissionBlueprintInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public OwnerInfo getOwner() {\n+                return ownerInfoAdapter(source.getOwner());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getTypeName() {\n+                return source.getType();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getAccessLevel() {\n+                return source.getAccess();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the UserDTO\n+     * into UserInfo object.\n+     *\n+     * @param source UserDTO object\n+     *\n+     * @return UserInfo object\n+     */\n+    public static UserInfo userInfoAdapter(UserDTO source) {\n+        return new UserInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getUsername() {\n+                return source.getUsername();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getHashedPassword() {\n+                return source.getPassword() == null ? source.getPassword() :\n+                    Util.hash(source.getPassword());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Boolean isSuperAdmin() {\n+                return source.getSuperAdmin();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Collection<? extends RoleInfo> getRoles() {\n+                return null;", "originalCommit": "6a8b42ee7cde336a05008ee8ff12c445d74fab02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMjMzMA==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411322330", "bodyText": "UserDTO does not have property roles. Hence returned null by default.", "author": "sonalidhome", "createdAt": "2020-04-20T12:04:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzEzMw==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411317133", "bodyText": "why null?", "author": "nikosmoum", "createdAt": "2020-04-20T11:54:59Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/InfoAdapter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.service.model.OwnerInfo;\n+import org.candlepin.service.model.PermissionBlueprintInfo;\n+import org.candlepin.service.model.RoleInfo;\n+import org.candlepin.service.model.UserInfo;\n+import org.candlepin.util.Util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Represents the adapters class to convert the DTOs object into\n+ * info interface implemented objects. Initially, DTO classes were\n+ * implementing Info interfaces. This class helps to get an equivalent\n+ * implemented interface object.\n+ */\n+public class InfoAdapter {\n+\n+    private InfoAdapter() {\n+        //nothing to do here\n+    }\n+\n+    /**\n+     * This method adapts the RoleDTO into RoleInfo object.\n+     *\n+     * @param source RoleDTO object\n+     *\n+     * @return RoleInfo object\n+     */\n+    public static RoleInfo roleInfoAdapter(RoleDTO source) {\n+        return new RoleInfo() {\n+\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return source.getName();\n+            }\n+\n+            @Override\n+            public Collection<? extends UserInfo> getUsers() {\n+                Set<UserDTO> userDTOSet = source.getUsers();\n+                Set<UserInfo> userInfoSet = null;\n+\n+                if (userDTOSet != null) {\n+                    userInfoSet = new HashSet<>();\n+                    for (UserDTO dto : userDTOSet) {\n+                        userInfoSet.add(userInfoAdapter(dto));\n+                    }\n+                }\n+\n+                return userInfoSet;\n+            }\n+\n+            @Override\n+            public Collection<? extends PermissionBlueprintInfo> getPermissions() {\n+                List<PermissionBlueprintDTO> blueprintDTOList = source.getPermissions();\n+                List<PermissionBlueprintInfo> blueprintInfoList = null;\n+\n+                if (blueprintDTOList != null) {\n+                    blueprintInfoList = new ArrayList<>();\n+                    for (PermissionBlueprintDTO dto : blueprintDTOList) {\n+                        blueprintInfoList.add(permissionBlueprintInfoAdapter(dto));\n+                    }\n+                }\n+                return blueprintInfoList;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the PermissionBlueprintDTO\n+     * into PermissionBlueprintInfo object.\n+     *\n+     * @param source PermissionBlueprintDTO object\n+     *\n+     * @return PermissionBlueprintInfo object\n+     */\n+    public static PermissionBlueprintInfo permissionBlueprintInfoAdapter(PermissionBlueprintDTO source) {\n+\n+        return new PermissionBlueprintInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public OwnerInfo getOwner() {\n+                return ownerInfoAdapter(source.getOwner());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getTypeName() {\n+                return source.getType();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getAccessLevel() {\n+                return source.getAccess();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the UserDTO\n+     * into UserInfo object.\n+     *\n+     * @param source UserDTO object\n+     *\n+     * @return UserInfo object\n+     */\n+    public static UserInfo userInfoAdapter(UserDTO source) {\n+        return new UserInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getUsername() {\n+                return source.getUsername();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getHashedPassword() {\n+                return source.getPassword() == null ? source.getPassword() :\n+                    Util.hash(source.getPassword());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Boolean isSuperAdmin() {\n+                return source.getSuperAdmin();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Collection<? extends RoleInfo> getRoles() {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the NestedOwnerDTO\n+     * into OwnerInfo object.\n+     *\n+     * @param source NestedOwnerDTO object\n+     *\n+     * @return OwnerInfo object\n+     */\n+    public static OwnerInfo ownerInfoAdapter(NestedOwnerDTO source) {\n+        return new OwnerInfo() {\n+            @Override\n+            public String getKey() {\n+                return source.getKey();\n+            }\n+\n+            @Override\n+            public Date getCreated() {\n+                return null;", "originalCommit": "6a8b42ee7cde336a05008ee8ff12c445d74fab02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMTY5NQ==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411321695", "bodyText": "NestedOwnerDTO does not have properties Created/Updated. Hence returned null by default.", "author": "sonalidhome", "createdAt": "2020-04-20T12:03:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzE4NA==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411317184", "bodyText": "why null?", "author": "nikosmoum", "createdAt": "2020-04-20T11:55:04Z", "path": "server/src/main/java/org/candlepin/dto/api/v1/InfoAdapter.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/**\n+ * Copyright (c) 2009 - 2020 Red Hat, Inc.\n+ *\n+ * This software is licensed to you under the GNU General Public License,\n+ * version 2 (GPLv2). There is NO WARRANTY for this software, express or\n+ * implied, including the implied warranties of MERCHANTABILITY or FITNESS\n+ * FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2\n+ * along with this software; if not, see\n+ * http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.\n+ *\n+ * Red Hat trademarks are not licensed under GPLv2. No permission is\n+ * granted to use or replicate Red Hat trademarks that are incorporated\n+ * in this software or its documentation.\n+ */\n+\n+package org.candlepin.dto.api.v1;\n+\n+import org.candlepin.service.model.OwnerInfo;\n+import org.candlepin.service.model.PermissionBlueprintInfo;\n+import org.candlepin.service.model.RoleInfo;\n+import org.candlepin.service.model.UserInfo;\n+import org.candlepin.util.Util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Represents the adapters class to convert the DTOs object into\n+ * info interface implemented objects. Initially, DTO classes were\n+ * implementing Info interfaces. This class helps to get an equivalent\n+ * implemented interface object.\n+ */\n+public class InfoAdapter {\n+\n+    private InfoAdapter() {\n+        //nothing to do here\n+    }\n+\n+    /**\n+     * This method adapts the RoleDTO into RoleInfo object.\n+     *\n+     * @param source RoleDTO object\n+     *\n+     * @return RoleInfo object\n+     */\n+    public static RoleInfo roleInfoAdapter(RoleDTO source) {\n+        return new RoleInfo() {\n+\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return source.getName();\n+            }\n+\n+            @Override\n+            public Collection<? extends UserInfo> getUsers() {\n+                Set<UserDTO> userDTOSet = source.getUsers();\n+                Set<UserInfo> userInfoSet = null;\n+\n+                if (userDTOSet != null) {\n+                    userInfoSet = new HashSet<>();\n+                    for (UserDTO dto : userDTOSet) {\n+                        userInfoSet.add(userInfoAdapter(dto));\n+                    }\n+                }\n+\n+                return userInfoSet;\n+            }\n+\n+            @Override\n+            public Collection<? extends PermissionBlueprintInfo> getPermissions() {\n+                List<PermissionBlueprintDTO> blueprintDTOList = source.getPermissions();\n+                List<PermissionBlueprintInfo> blueprintInfoList = null;\n+\n+                if (blueprintDTOList != null) {\n+                    blueprintInfoList = new ArrayList<>();\n+                    for (PermissionBlueprintDTO dto : blueprintDTOList) {\n+                        blueprintInfoList.add(permissionBlueprintInfoAdapter(dto));\n+                    }\n+                }\n+                return blueprintInfoList;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the PermissionBlueprintDTO\n+     * into PermissionBlueprintInfo object.\n+     *\n+     * @param source PermissionBlueprintDTO object\n+     *\n+     * @return PermissionBlueprintInfo object\n+     */\n+    public static PermissionBlueprintInfo permissionBlueprintInfoAdapter(PermissionBlueprintDTO source) {\n+\n+        return new PermissionBlueprintInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public OwnerInfo getOwner() {\n+                return ownerInfoAdapter(source.getOwner());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getTypeName() {\n+                return source.getType();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getAccessLevel() {\n+                return source.getAccess();\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the UserDTO\n+     * into UserInfo object.\n+     *\n+     * @param source UserDTO object\n+     *\n+     * @return UserInfo object\n+     */\n+    public static UserInfo userInfoAdapter(UserDTO source) {\n+        return new UserInfo() {\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getCreated() {\n+                return source.getCreated() != null ?\n+                    new Date(source.getCreated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Date getUpdated() {\n+                return source.getUpdated() != null ?\n+                    new Date(source.getUpdated().toInstant().toEpochMilli()) : null;\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getUsername() {\n+                return source.getUsername();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public String getHashedPassword() {\n+                return source.getPassword() == null ? source.getPassword() :\n+                    Util.hash(source.getPassword());\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Boolean isSuperAdmin() {\n+                return source.getSuperAdmin();\n+            }\n+\n+            /**\n+             * {@inheritDoc}\n+             */\n+            @Override\n+            public Collection<? extends RoleInfo> getRoles() {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * This method adapts the NestedOwnerDTO\n+     * into OwnerInfo object.\n+     *\n+     * @param source NestedOwnerDTO object\n+     *\n+     * @return OwnerInfo object\n+     */\n+    public static OwnerInfo ownerInfoAdapter(NestedOwnerDTO source) {\n+        return new OwnerInfo() {\n+            @Override\n+            public String getKey() {\n+                return source.getKey();\n+            }\n+\n+            @Override\n+            public Date getCreated() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Date getUpdated() {\n+                return null;", "originalCommit": "6a8b42ee7cde336a05008ee8ff12c445d74fab02", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMTc1OQ==", "url": "https://github.com/candlepin/candlepin/pull/2683#discussion_r411321759", "bodyText": "NestedOwnerDTO does not have properties Created/Updated. Hence returned null by default.", "author": "sonalidhome", "createdAt": "2020-04-20T12:03:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxNzE4NA=="}], "type": "inlineReview"}, {"oid": "e056478ef09c6ff382b9dee9bfe3e86e36744c52", "url": "https://github.com/candlepin/candlepin/commit/e056478ef09c6ff382b9dee9bfe3e86e36744c52", "message": "ENT-2291: Create adapter methods for DTOs implementing\n*Info Interfaces\n - Added a class InfoAdapter to provide implementation\n   of info interfaces.\n - Removed the translators and its test suites.\n   1. UserDTOTranslator\n   2. RoleDTOTranslator\n   3. PermissionBluePrintDTOTranslator", "committedDate": "2020-04-20T14:13:36Z", "type": "commit"}, {"oid": "e056478ef09c6ff382b9dee9bfe3e86e36744c52", "url": "https://github.com/candlepin/candlepin/commit/e056478ef09c6ff382b9dee9bfe3e86e36744c52", "message": "ENT-2291: Create adapter methods for DTOs implementing\n*Info Interfaces\n - Added a class InfoAdapter to provide implementation\n   of info interfaces.\n - Removed the translators and its test suites.\n   1. UserDTOTranslator\n   2. RoleDTOTranslator\n   3. PermissionBluePrintDTOTranslator", "committedDate": "2020-04-20T14:13:36Z", "type": "forcePushed"}]}