{"pr_number": 1033, "pr_title": "vnext paged response", "pr_createdAt": "2020-02-19T01:58:51Z", "pr_url": "https://github.com/Azure/azure-libraries-for-java/pull/1033", "timeline": [{"oid": "655522aa203ca9ee69365a4c8593e37254a0b3f4", "url": "https://github.com/Azure/azure-libraries-for-java/commit/655522aa203ca9ee69365a4c8593e37254a0b3f4", "message": "converter for paged response", "committedDate": "2020-02-18T09:14:34Z", "type": "commit"}, {"oid": "8c32d6a179ebda3b1867adc2f5931336a41998c6", "url": "https://github.com/Azure/azure-libraries-for-java/commit/8c32d6a179ebda3b1867adc2f5931336a41998c6", "message": "fix delay provider based on live mode", "committedDate": "2020-02-18T09:15:03Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NjYwMg==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1033#discussion_r381056602", "bodyText": "Why not use PagedFlux.mapPage()", "author": "yaohaizh", "createdAt": "2020-02-19T03:14:53Z", "path": "azure-mgmt-appservice/src/main/java/com/azure/management/appservice/implementation/WebAppsImpl.java", "diffHunk": "@@ -82,10 +65,23 @@ protected WebAppImpl wrapModel(SiteInner inner) {\n         return wrapModel(inner, null, null);\n     }\n \n-    protected PagedIterable<WebApp> wrapList(PagedIterable<SiteInner> pagedList) {\n-        return pagedList.mapPage(this::wrapModel);\n-    }\n+//    protected PagedIterable<WebApp> wrapList(PagedIterable<SiteInner> pagedList) {\n+//        return pagedList.mapPage(this::wrapModel);\n+//    }\n \n+    @Override\n+    protected PagedFlux<WebApp> wrapPageAsync(PagedFlux<SiteInner> innerPage) {", "originalCommit": "8c32d6a179ebda3b1867adc2f5931336a41998c6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA2MzUxMQ==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1033#discussion_r381063511", "bodyText": "I need flatMap, not map.", "author": "weidongxu-microsoft", "createdAt": "2020-02-19T03:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NjYwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NjgxOA==", "url": "https://github.com/Azure/azure-libraries-for-java/pull/1033#discussion_r381056818", "bodyText": "PagedFlux.mapPage", "author": "yaohaizh", "createdAt": "2020-02-19T03:15:58Z", "path": "azure-mgmt-resources/src/main/java/com/azure/management/resources/fluentcore/utils/PagedConverter.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) Microsoft Corporation. All rights reserved.\n+ * Licensed under the MIT License. See License.txt in the project root for\n+ * license information.\n+ */\n+\n+package com.azure.management.resources.fluentcore.utils;\n+\n+import com.azure.core.http.HttpRequest;\n+import com.azure.core.http.rest.PagedFlux;\n+import com.azure.core.http.rest.PagedResponse;\n+import com.azure.core.http.rest.PagedResponseBase;\n+import com.azure.core.util.paging.PageRetriever;\n+import org.reactivestreams.Publisher;\n+import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n+\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+/**\n+ * Utility class for conversion of PagedResponse.\n+ */\n+public class PagedConverter {\n+\n+    private PagedConverter() {\n+\n+    }\n+\n+    /**\n+     * Applies flatMap transform to elements of PagedFlux.\n+     *\n+     * @param mapper the flatMap transform of element T to Publisher of S.\n+     * @return the PagedFlux.\n+     */\n+    public static <T, S> PagedFlux<S> flatMapPage(PagedFlux<T> pagedFlux, Function<? super T, ? extends Publisher<? extends S>> mapper) {", "originalCommit": "8c32d6a179ebda3b1867adc2f5931336a41998c6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "7c5da2d187bc9a85f3639b9a8641af157423699e", "url": "https://github.com/Azure/azure-libraries-for-java/commit/7c5da2d187bc9a85f3639b9a8641af157423699e", "message": "Merge branch 'vnext' into vnext_paged_response", "committedDate": "2020-02-19T05:36:38Z", "type": "commit"}, {"oid": "e95c2ce3c2f0a0edf98bc529efafd4ee7fe6b18f", "url": "https://github.com/Azure/azure-libraries-for-java/commit/e95c2ce3c2f0a0edf98bc529efafd4ee7fe6b18f", "message": "temp unblock for OffsetDateTime deserialize", "committedDate": "2020-02-19T06:20:41Z", "type": "commit"}, {"oid": "142024f80f69bee33e0a592ddaf0dd5bc1403d1c", "url": "https://github.com/Azure/azure-libraries-for-java/commit/142024f80f69bee33e0a592ddaf0dd5bc1403d1c", "message": "Merge branch 'vnext' into vnext_hack_for_datetime_without_timezone", "committedDate": "2020-02-19T06:21:27Z", "type": "commit"}, {"oid": "27fcfc1f9deb4613ea333a9b74621fbb789cc259", "url": "https://github.com/Azure/azure-libraries-for-java/commit/27fcfc1f9deb4613ea333a9b74621fbb789cc259", "message": "Merge branch 'vnext' into vnext_paged_response", "committedDate": "2020-02-19T06:21:55Z", "type": "commit"}, {"oid": "d5a7e68617de5d272658fcae4c65b1cce120a347", "url": "https://github.com/Azure/azure-libraries-for-java/commit/d5a7e68617de5d272658fcae4c65b1cce120a347", "message": "Merge branch 'vnext_hack_for_datetime_without_timezone' into vnext_paged_response", "committedDate": "2020-02-19T06:22:03Z", "type": "commit"}, {"oid": "42b9b5a9e77cdf5e67d908efea3d89018674931f", "url": "https://github.com/Azure/azure-libraries-for-java/commit/42b9b5a9e77cdf5e67d908efea3d89018674931f", "message": "complete switch to wrapPageAsync", "committedDate": "2020-02-19T06:57:10Z", "type": "commit"}]}