{"pr_number": 6828, "pr_title": "Extend Invoice reversal API to return affected ICs", "pr_createdAt": "2020-06-11T15:40:25Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6828", "timeline": [{"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93", "url": "https://github.com/metasfresh/metasfresh/commit/33ed08604311dea0994a05fc18dcaca20dcbfe93", "message": "Extend Invoice reversal API to return affected ICs\nhttps://github.com/metasfresh/metasfresh/issues/6827", "committedDate": "2020-06-11T15:38:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0NDc3Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439244773", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId);\n          \n          \n            \n            \tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull InvoiceId invoiceId);", "author": "metas-ts", "createdAt": "2020-06-12T07:06:16Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/IInvoiceCandDAO.java", "diffHunk": "@@ -85,6 +85,8 @@\n \n \tList<I_C_Invoice_Candidate> retrieveIcForIl(I_C_InvoiceLine invoiceLine);\n \n+\tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId);", "originalCommit": "33ed08604311dea0994a05fc18dcaca20dcbfe93", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3MzgxMA==", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439273810", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n          \n          \n            \n            \n          \n          \n            \n            \t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n          \n          \n            \n            \t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n          \n          \n            \n            \t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())\n          \n          \n            \n            \t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n          \n          \n            \n            \t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n          \n          \n            \n            \t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoiceId)\n          \n      \n    \n    \n  \n\n\nthe equals filter can handle RepoIdAwares\nwe don't need to pass the invoice a context provider; the query-builder can get the thread-local current transaction or create a \"local\" one on the fly", "author": "metas-ts", "createdAt": "2020-06-12T08:12:47Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -573,6 +572,30 @@ public boolean isAvoidRecreate(final I_C_Invoice_Candidate ic)\n \t\t\t\t.addColumn(I_C_Invoice_Candidate.COLUMN_C_Invoice_Candidate_ID);\n \n \t\treturn icQueryBuilder\n+\t\t\t\t.create()\n+\t\t\t\t.list();//\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n+\n+\t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n+\t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n+\t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())", "originalCommit": "33ed08604311dea0994a05fc18dcaca20dcbfe93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTcyMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439279723", "bodyText": "I'll drop the loading of the invoice then, thx!", "author": "pvpurcarcosmin", "createdAt": "2020-06-12T08:24:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3MzgxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDQ3NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439274475", "bodyText": "it's OK like this but you might (didn't check) also use andCollect to get from I_C_Invoice_Line_Alloc to I_C_Invoice_Candidate\nfor next time maybe..", "author": "metas-ts", "createdAt": "2020-06-12T08:14:12Z", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -573,6 +572,30 @@ public boolean isAvoidRecreate(final I_C_Invoice_Candidate ic)\n \t\t\t\t.addColumn(I_C_Invoice_Candidate.COLUMN_C_Invoice_Candidate_ID);\n \n \t\treturn icQueryBuilder\n+\t\t\t\t.create()\n+\t\t\t\t.list();//\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n+\n+\t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n+\t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n+\t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())\n+\t\t\t\t\t\t//collect invoice line alloc\n+\t\t\t\t\t\t.andCollectChildren(I_C_Invoice_Line_Alloc.COLUMN_C_InvoiceLine_ID)\n+\t\t\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t\t\t.create();", "originalCommit": "33ed08604311dea0994a05fc18dcaca20dcbfe93", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTM5OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439279398", "bodyText": "Oh, just checked the method, that's pretty cool, I'll give it a try. thx!", "author": "pvpurcarcosmin", "createdAt": "2020-06-12T08:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDQ3NQ=="}], "type": "inlineReview"}, {"oid": "2cdfd09f3ceb3acf317b7a298bc3fb5ade3cad11", "url": "https://github.com/metasfresh/metasfresh/commit/2cdfd09f3ceb3acf317b7a298bc3fb5ade3cad11", "message": "req changes\nhttps://github.com/metasfresh/metasfresh/issues/6827", "committedDate": "2020-06-12T09:53:34Z", "type": "commit"}]}