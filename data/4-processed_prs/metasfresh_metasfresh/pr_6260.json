{"pr_number": 6260, "pr_title": "#6191 Top Customers more efficient", "pr_createdAt": "2020-02-25T13:46:29Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6260", "timeline": [{"oid": "376865f689a9fc237bd0faf7982e11aafb4f49e0", "url": "https://github.com/metasfresh/metasfresh/commit/376865f689a9fc237bd0faf7982e11aafb4f49e0", "message": "#6191 Top Customers more efficient\n\nhttps://github.com/metasfresh/metasfresh/issues/6191", "committedDate": "2020-02-25T13:34:31Z", "type": "commit"}, {"oid": "898283df1b80668371918f37e69b192862f42172", "url": "https://github.com/metasfresh/metasfresh/commit/898283df1b80668371918f37e69b192862f42172", "message": "Merge branch 'master' into gh6191_Eff", "committedDate": "2020-02-25T15:17:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjQ0NA==", "url": "https://github.com/metasfresh/metasfresh/pull/6260#discussion_r384072444", "bodyText": "pls add this info into a comment; that makes it more accessible for reusing to devs; also, add the public issue's URL", "author": "metas-ts", "createdAt": "2020-02-25T19:19:49Z", "path": "de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/ddl/functions/CustomersTopRevenue.sql", "diffHunk": "@@ -19,55 +19,77 @@ CREATE OR REPLACE FUNCTION CustomersTopRevenue(p_AD_Client_ID NUMERIC,\n \n AS\n $$\n+\n+\n+WITH totals AS\n+         (\n+             SELECT COALESCE(getTotalRevenue(p_AD_Client_ID, p_AD_Org_ID, p_DateFrom, p_DateTo), 0) AS totalRevenueAmt\n+         ),\n+\n+     aux AS (\n+         SELECT C.c_currency_id, C.ISO_Code\n+         FROM C_Currency C\n+                  JOIN C_AcctSchema acc\n+                       ON C.c_currency_id = acc.c_currency_id\n+                  JOIN AD_ClientInfo ci ON ci.C_AcctSchema1_ID = acc.C_AcctSchema_ID\n+         WHERE ci.AD_Client_ID = p_AD_Client_ID\n+     ),\n+\n+     t AS\n+         (\n+             SELECT bp.value AS BPValue,\n+                    bp.Name  AS NAME,\n+                    getCustomerRevenue(bp.C_BPartner_ID, p_AD_Client_ID, p_AD_Org_ID, p_DateFrom, p_DateTo)\n+                             AS Revenue,\n+\n+                    getBPOpenAmtToDate(p_AD_Client_ID := p_AD_Client_ID,\n+                                       p_AD_Org_ID := p_AD_Org_ID,\n+                                       p_Date := p_DateTo,\n+                                       p_C_BPartner_id := bp.C_BPartner_ID,\n+                                       p_C_Currency_ID := aux.c_currency_id,\n+                                       p_UseDateAcct := 'Y',\n+                                       p_IsSOTrx := 'Y')\n+                             AS OpenAmt\n+             FROM C_BPartner bp,\n+                  aux\n+             WHERE bp.isCustomer = 'Y'\n+         )\n+\n+\n SELECT ROW_NUMBER() OVER (ORDER BY t.Revenue DESC NULLS LAST, t.BPValue) :: INTEGER AS Rang,\n        t.BPValue,\n        t.Name,\n        t.Revenue,\n        t.OpenAmt,\n-       t.ISO_Code,\n-       (CASE\n-            WHEN totals.totalRevenueAmt != 0 THEN (t.Revenue * 100) / totals.totalRevenueAmt\n-                                             ELSE 0\n-        END)                                                                        AS SalesPercentOfTotal\n-\n-\n-FROM (\n-         SELECT accounting.C_Currency_ID,\n-                accounting.ISO_Code,\n-                bp.value AS BPValue,\n-                bp.Name  AS NAME,\n-                getCustomerRevenue(bp.C_BPartner_ID, p_AD_Client_ID, p_AD_Org_ID, p_DateFrom, p_DateTo)\n-                         AS Revenue,\n-\n-                (getBPOpenAmtToDate(\n-                        p_AD_Client_ID := p_AD_Client_ID,\n-                        p_AD_Org_ID := p_AD_Org_ID,\n-                        p_Date := p_DateTo,\n-                        p_C_BPartner_id := bp.C_BPartner_ID,\n-                        p_C_Currency_ID := accounting.C_Currency_ID,\n-                        p_UseDateAcct := 'Y',\n-                        p_IsSOTrx := 'Y')\n-                    )    AS OpenAmt\n-         FROM C_BPartner bp,\n-              (\n-                  SELECT C.ISO_Code, C.c_currency_id\n-                  FROM C_Currency C\n-                           JOIN C_AcctSchema acc\n-                                ON C.c_currency_id = acc.c_currency_id\n-                           JOIN AD_ClientInfo ci ON ci.C_AcctSchema1_ID = acc.C_AcctSchema_ID\n-                  WHERE ci.AD_Client_ID = p_AD_Client_ID\n-              ) accounting\n-     ) t,\n-     (\n-         SELECT COALESCE(getTotalRevenue(p_AD_Client_ID, p_AD_Org_ID, p_DateFrom, p_DateTo), 0) AS totalRevenueAmt\n-     ) totals\n+       aux.ISO_Code,\n+       round(\n+               (CASE\n+                    WHEN totals.totalRevenueAmt != 0 THEN (t.Revenue * 100) / totals.totalRevenueAmt\n+                                                     ELSE 0\n+                END)\n+           , 2)                                                                     AS SalesPercentOfTotal\n+\n+\n+FROM t,\n+     totals,\n+     aux\n \n \n ORDER BY Rang\n LIMIT (CASE\n            WHEN p_Limit > 0 THEN p_Limit\n                             ELSE 999999999999999\n-       END)\n+       END);\n+\n $$\n-    LANGUAGE SQL\n-    VOLATILE;\n\\ No newline at end of file\n+    LANGUAGE SQL VOLATILE;\n+\n+\n+-- TEST", "originalCommit": "898283df1b80668371918f37e69b192862f42172", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjY4OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6260#discussion_r384072689", "bodyText": "same here (about comment)", "author": "metas-ts", "createdAt": "2020-02-25T19:20:19Z", "path": "de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/ddl/functions/getBPOpenAmtToDate.sql", "diffHunk": "@@ -11,42 +11,72 @@ CREATE OR REPLACE FUNCTION getBPOpenAmtToDate(p_AD_Client_ID  numeric,\n AS\n $$\n DECLARE\n-    v_sum numeric;\n+    v_sum      numeric;\n+    v_orgNotSet    boolean;\n+    v_dateType text;\n BEGIN\n+    SELECT INTO v_orgNotSet COALESCE(p_AD_Org_ID, 0) < 0;\n+\n+    SELECT INTO v_dateType CASE\n+                               WHEN p_UseDateAcct = 'Y' THEN 'A'\n+                                                        ELSE 'T'\n+                           END;\n+    WITH t AS\n+             (SELECT i.C_Invoice_ID,\n+                     ips.C_InvoicePaySchedule_ID\n+\n+              FROM C_Invoice i\n+                       LEFT OUTER JOIN C_InvoicePaySchedule ips\n+                                       ON i.C_Invoice_ID = ips.C_Invoice_ID\n+                                           AND ips.isvalid = 'Y'\n+                                           AND ips.isActive = 'Y'\n+              WHERE TRUE\n+                AND i.IsSOTrx = p_IsSOTrx\n+                AND (CASE\n+                         WHEN p_UseDateAcct = 'Y' THEN i.dateacct\n+                                                  ELSE i.dateinvoiced\n+                     END) <= p_Date\n+                AND i.DocStatus IN ('CO', 'CL')\n+                AND i.c_bpartner_id = p_c_bpartner_id\n+                AND i.AD_CLient_ID = p_AD_Client_ID\n+                AND (v_orgNotSet OR i.AD_Org_ID = p_AD_Org_ID))\n \n     SELECT INTO v_sum sum(\n                               (SELECT openamt\n                                FROM invoiceOpenToDate(\n-                                       p_C_Invoice_ID := i.C_Invoice_ID,\n-                                       p_c_invoicepayschedule_id := COALESCE(ips.C_InvoicePaySchedule_ID, 0::numeric),\n-                                       p_DateType := (\n-                                           CASE\n-                                               WHEN p_UseDateAcct = 'Y' THEN 'A'\n-                                                                        ELSE 'T'\n-                                           END\n-                                           ),\n+\n+                                       p_C_Invoice_ID := t.C_Invoice_ID,\n+                                       p_c_invoicepayschedule_id := COALESCE(t.C_InvoicePaySchedule_ID, 0::numeric),\n+                                       p_DateType := v_dateType,\n+\n                                        p_Date := p_Date,\n                                        p_Result_Currency_ID := p_C_Currency_ID\n                                    )\n                               )\n                           )\n-    FROM C_Invoice i\n-             LEFT OUTER JOIN C_InvoicePaySchedule ips\n-                             ON i.C_Invoice_ID = ips.C_Invoice_ID\n-                                 AND ips.isvalid = 'Y'\n-                                 AND ips.isActive = 'Y'\n-    WHERE TRUE\n-      AND i.IsSOTrx = p_IsSOTrx\n-      AND (CASE\n-               WHEN p_UseDateAcct = 'Y' THEN i.dateacct\n-                                        ELSE i.dateinvoiced\n-           END) <= p_Date\n-      AND i.DocStatus IN ('CO', 'CL')\n-      AND i.c_bpartner_id = p_c_bpartner_id\n-      AND i.AD_CLient_ID = p_AD_Client_ID\n-      AND (COALESCE(p_AD_Org_ID, 0) <= 0 OR i.AD_Org_ID = p_AD_Org_ID);\n+\n+\n+    FROM t;\n+\n+\n \n     RETURN coalesce(v_sum, 0);\n END ;\n $$\n     LANGUAGE plpgsql VOLATILE;\n+\n+\n+\n+-- TEST", "originalCommit": "898283df1b80668371918f37e69b192862f42172", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA3MjkzMA==", "url": "https://github.com/metasfresh/metasfresh/pull/6260#discussion_r384072930", "bodyText": "same about comment", "author": "metas-ts", "createdAt": "2020-02-25T19:20:45Z", "path": "de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/ddl/functions/getCustomerRevenue.sql", "diffHunk": "@@ -8,43 +8,74 @@ CREATE OR REPLACE FUNCTION getCustomerRevenue(p_C_BPartner_ID numeric,\n     RETURNS numeric\n AS\n $$\n-SELECT sum\n-           (\n+\n+WITH t AS (\n+    SELECT i.DateInvoiced,\n+           i.C_Currency_ID,\n+           CASE\n+               WHEN dt.DocBaseType IN ('ARC', 'APC') -- subtract credit memos\n+                   THEN -1\n+                   ELSE\n+                   1\n+           END\n+               AS multiplier,\n+\n+           CASE\n+               WHEN i.IsTaxIncluded = 'Y' THEN il.LineNetAmt - il.TaxAmtInfo\n+                                          ELSE il.LineNetAmt\n+           END AS amt\n+\n+    FROM C_InvoiceLine il\n+             JOIN C_Invoice i ON il.C_Invoice_ID = i.C_Invoice_ID\n+             JOIN C_DocTYpe dt ON i.C_DocType_ID = dt.C_DocType_ID\n+\n+    WHERE p_C_BPartner_ID = i.C_Bpartner_ID\n+      AND il.IsActive = 'Y'\n+      AND i.IsActive = 'Y'\n+      AND i.isSOTrx = 'Y'\n+      AND i.DocStatus IN ('CO', 'CL')\n+      AND i.AD_Client_ID = p_AD_Client_ID\n+      AND i.AD_Org_ID = p_AD_Org_ID\n+      AND (p_DateFrom IS NULL OR i.DateInvoiced >= p_dateFrom)\n+      AND (p_DateTo IS NULL OR i.DateInvoiced <= p_dateTo)),\n+\n+     accounting AS (\n+         SELECT C.c_currency_id\n+         FROM C_Currency C\n+                  JOIN C_AcctSchema acc\n+                       ON C.c_currency_id = acc.c_currency_id\n+                  JOIN AD_ClientInfo ci ON ci.C_AcctSchema1_ID = acc.C_AcctSchema_ID\n+         WHERE ci.AD_Client_ID = p_AD_Client_ID\n+     )\n+\n+\n+SELECT sum(\n                    CASE\n-                       WHEN dt.DocBaseType IN ('ARC', 'APC') -- subtract credit memos\n-                           THEN -1\n-                       ELSE\n-                           1\n-                       END\n-                   *\n-                   currencyBase\n-                       (\n+                       WHEN (t.C_Currency_ID <> accounting.C_Currency_ID)\n+                           THEN currencyBase\n                            (\n-                               SELECT CASE\n-                                          WHEN i.IsTaxIncluded = 'Y' THEN il.LineNetAmt - il.TaxAmtInfo\n-                                          ELSE il.LineNetAmt\n-                                          END\n-                           ), -- amt\n-                           i.C_Currency_ID, -- currencyFrom\n-                           i.DateInvoiced, -- date\n-                           p_AD_Client_ID,\n-                           p_AD_Org_ID\n-                       )\n-           )\n-\n-FROM C_InvoiceLine il\n-         JOIN C_Invoice i ON il.C_Invoice_ID = i.C_Invoice_ID\n-         JOIN C_DocTYpe dt ON i.C_DocType_ID = dt.C_DocType_ID\n-\n-WHERE p_C_BPartner_ID = i.C_Bpartner_ID\n-  AND il.IsActive = 'Y'\n-  AND i.IsActive = 'Y'\n-  AND i.isSOTrx = 'Y'\n-  AND i.DocStatus IN ('CO', 'CL')\n-  AND i.AD_Client_ID = p_AD_Client_ID\n-  AND i.AD_Org_ID = p_AD_Org_ID\n-  AND (p_DateFrom IS NULL OR i.DateInvoiced >= p_dateFrom)\n-  AND (p_DateTo IS NULL OR i.DateInvoiced <= p_dateTo)\n+                               t.amt,\n+                               t.C_Currency_ID, -- currencyFrom\n+                               t.DateInvoiced, -- date\n+                               p_AD_Client_ID,\n+                               p_AD_Org_ID\n+                           )\n+                           ELSE t.amt\n+                   END\n+                   * t.multiplier)\n \n+FROM t,\n+     accounting;\n $$\n-    LANGUAGE SQL STABLE;\n\\ No newline at end of file\n+    LANGUAGE SQL STABLE;\n+\n+\n+--  TEST", "originalCommit": "898283df1b80668371918f37e69b192862f42172", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "961564bb05705b778c7a78e099a700bcda58f240", "url": "https://github.com/metasfresh/metasfresh/commit/961564bb05705b778c7a78e099a700bcda58f240", "message": "#6191 #6150  add comments to functions\n\nhttps://github.com/metasfresh/metasfresh/issues/6191\nhttps://github.com/metasfresh/metasfresh/issues/6150", "committedDate": "2020-02-26T09:59:21Z", "type": "commit"}, {"oid": "7e014e9a69345bbf4a756be3b236ea2861a64713", "url": "https://github.com/metasfresh/metasfresh/commit/7e014e9a69345bbf4a756be3b236ea2861a64713", "message": "Merge branch 'master' into gh6191_Eff", "committedDate": "2020-02-26T13:16:14Z", "type": "commit"}, {"oid": "932edfd51a43cbd840ff99ae239e90b5ef20d29f", "url": "https://github.com/metasfresh/metasfresh/commit/932edfd51a43cbd840ff99ae239e90b5ef20d29f", "message": "#6191 Improve customersTopRevenue\n\nhttps://github.com/metasfresh/metasfresh/issues/6191", "committedDate": "2020-02-26T14:41:01Z", "type": "commit"}, {"oid": "d6041ceb3bd33ca0a1214631068606679f0906d0", "url": "https://github.com/metasfresh/metasfresh/commit/d6041ceb3bd33ca0a1214631068606679f0906d0", "message": "Merge branch 'master' into gh6191_Eff", "committedDate": "2020-02-27T08:34:49Z", "type": "commit"}, {"oid": "bcd76320f6b016edaf2cf0c1a67556aeaab499ae", "url": "https://github.com/metasfresh/metasfresh/commit/bcd76320f6b016edaf2cf0c1a67556aeaab499ae", "message": "#6191 refactoring\n\nhttps://github.com/metasfresh/metasfresh/issues/6191", "committedDate": "2020-02-27T09:07:20Z", "type": "commit"}, {"oid": "ae0d5377fb043de0ff1b950f71de1351d5251ac8", "url": "https://github.com/metasfresh/metasfresh/commit/ae0d5377fb043de0ff1b950f71de1351d5251ac8", "message": "#6191 refactoring on the functions needed for CustomersTopRevenue\n\nhttps://github.com/metasfresh/metasfresh/issues/6191", "committedDate": "2020-02-27T09:33:54Z", "type": "commit"}]}