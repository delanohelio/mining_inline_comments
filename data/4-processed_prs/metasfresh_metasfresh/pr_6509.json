{"pr_number": 6509, "pr_title": "issue window adjustments", "pr_createdAt": "2020-04-22T06:43:45Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6509", "timeline": [{"oid": "1845bee7d0d7e357b329f55534d1fe8154e594b2", "url": "https://github.com/metasfresh/metasfresh/commit/1845bee7d0d7e357b329f55534d1fe8154e594b2", "message": "issue window adjustments\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-04-22T06:42:17Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc1ODczMA==", "url": "https://github.com/metasfresh/metasfresh/pull/6509#discussion_r412758730", "bodyText": "when picking method names pls favour \"what it does\" over \"what triggered it\". I know, it's agrey area.\nin this case you could name it applyEffortDeltaToUpstream", "author": "metas-ts", "createdAt": "2020-04-22T07:58:22Z", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/timebooking/S_TimeBooking.java", "diffHunk": "@@ -69,15 +71,45 @@ public void registerCallout()\n \t}\n \n \t@ModelChange(timings = ModelValidator.TYPE_BEFORE_DELETE)\n-\tpublic void afterDelete(@NonNull final I_S_TimeBooking record)\n+\tpublic void beforeDelete(@NonNull final I_S_TimeBooking record)\n \t{\n \t\texternalReferenceRepository.deleteByRecordIdAndType(record.getS_TimeBooking_ID(), ExternalReferenceType.TIME_BOOKING_ID);\n+\n+\t\tfinal IssueId issueId = IssueId.ofRepoId(record.getS_Issue_ID());\n+\t\tfinal Effort effort = Effort.of(record.getBookedSeconds().longValue());\n+\n+\t\tupdateIssueEfforts(effort.negate(), issueId);\n \t}\n \n-\t@ModelChange(timings = ModelValidator.TYPE_BEFORE_CHANGE, ifColumnsChanged = {I_S_TimeBooking.COLUMNNAME_HoursAndMinutes})\n-\tpublic void updateSecondsBasedOnHHmm(@NonNull final I_S_TimeBooking record)\n+\t@ModelChange(timings = {ModelValidator.TYPE_BEFORE_NEW, ModelValidator.TYPE_BEFORE_CHANGE}, ifColumnsChanged = I_S_TimeBooking.COLUMNNAME_HoursAndMinutes)\n+\tpublic void onHoursAndMinutesUpdate(@NonNull final I_S_TimeBooking record)", "originalCommit": "1845bee7d0d7e357b329f55534d1fe8154e594b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc1OTY0MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6509#discussion_r412759641", "bodyText": "..and this one you could call applyIssueChangeToUpstream (both are just quickly made-up examples..might not be that great)", "author": "metas-ts", "createdAt": "2020-04-22T07:59:38Z", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/timebooking/S_TimeBooking.java", "diffHunk": "@@ -69,15 +71,45 @@ public void registerCallout()\n \t}\n \n \t@ModelChange(timings = ModelValidator.TYPE_BEFORE_DELETE)\n-\tpublic void afterDelete(@NonNull final I_S_TimeBooking record)\n+\tpublic void beforeDelete(@NonNull final I_S_TimeBooking record)\n \t{\n \t\texternalReferenceRepository.deleteByRecordIdAndType(record.getS_TimeBooking_ID(), ExternalReferenceType.TIME_BOOKING_ID);\n+\n+\t\tfinal IssueId issueId = IssueId.ofRepoId(record.getS_Issue_ID());\n+\t\tfinal Effort effort = Effort.of(record.getBookedSeconds().longValue());\n+\n+\t\tupdateIssueEfforts(effort.negate(), issueId);\n \t}\n \n-\t@ModelChange(timings = ModelValidator.TYPE_BEFORE_CHANGE, ifColumnsChanged = {I_S_TimeBooking.COLUMNNAME_HoursAndMinutes})\n-\tpublic void updateSecondsBasedOnHHmm(@NonNull final I_S_TimeBooking record)\n+\t@ModelChange(timings = {ModelValidator.TYPE_BEFORE_NEW, ModelValidator.TYPE_BEFORE_CHANGE}, ifColumnsChanged = I_S_TimeBooking.COLUMNNAME_HoursAndMinutes)\n+\tpublic void onHoursAndMinutesUpdate(@NonNull final I_S_TimeBooking record)\n \t{\n-\t\trecord.setBookedSeconds(BigDecimal.valueOf(TimeUtil.hmmToSeconds(record.getHoursAndMinutes())));\n+\t\trecord.setBookedSeconds(BigDecimal.valueOf(HmmUtils.hmmToSeconds(record.getHoursAndMinutes())));\n+\n+\t\tfinal I_S_TimeBooking oldRecord = InterfaceWrapperHelper.createOld(record, I_S_TimeBooking.class);\n+\n+\t\tfinal long deltaBookedSeconds = record.getBookedSeconds().subtract(oldRecord.getBookedSeconds()).longValue();\n+\n+\t\tfinal Effort effort = Effort.of(deltaBookedSeconds);\n+\t\tfinal IssueId issueId = IssueId.ofRepoId(record.getS_Issue_ID());\n+\n+\t\tupdateIssueEfforts(effort, issueId);\n+\t}\n+\n+\t@ModelChange(timings = {ModelValidator.TYPE_BEFORE_CHANGE}, ifColumnsChanged = {I_S_TimeBooking.COLUMNNAME_S_Issue_ID})\n+\tpublic void onIssueChange(@NonNull final I_S_TimeBooking record)", "originalCommit": "1845bee7d0d7e357b329f55534d1fe8154e594b2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}]}