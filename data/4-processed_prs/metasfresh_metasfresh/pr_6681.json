{"pr_number": 6681, "pr_title": "Budget issue window adjustments", "pr_createdAt": "2020-05-18T20:59:59Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6681", "timeline": [{"oid": "ed30be90779869e12f05ee6542b85175b6198480", "url": "https://github.com/metasfresh/metasfresh/commit/ed30be90779869e12f05ee6542b85175b6198480", "message": "Budget issue window adjustments\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-18T20:59:22Z", "type": "commit"}, {"oid": "599ee9397de9bc6823e32357a97a68c7593dcb89", "url": "https://github.com/metasfresh/metasfresh/commit/599ee9397de9bc6823e32357a97a68c7593dcb89", "message": "enable change log\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-19T08:08:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwOTcxOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427109719", "bodyText": "next time pls consider introducing Estimation class instead of using BigDecimal. It's not clear, what's the UoM of estimation, hours, days, points etc?", "author": "teosarca", "createdAt": "2020-05-19T08:09:26Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueEntity.java", "diffHunk": "@@ -73,6 +74,12 @@\n \t@Nullable\n \tprivate BigDecimal budgetedEffort;\n \n+\t@Nullable\n+\tprivate BigDecimal roughEstimation;", "originalCommit": "ed30be90779869e12f05ee6542b85175b6198480", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEzMDQzNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427130435", "bodyText": "Right, there is an effort UOM on IssueEntity but i see your point.", "author": "pvpurcarcosmin", "createdAt": "2020-05-19T08:41:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwOTcxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwOTkxMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427109913", "bodyText": "consider using Effort class", "author": "teosarca", "createdAt": "2020-05-19T08:09:45Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueEntity.java", "diffHunk": "@@ -73,6 +74,12 @@\n \t@Nullable\n \tprivate BigDecimal budgetedEffort;", "originalCommit": "ed30be90779869e12f05ee6542b85175b6198480", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMTI3Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427111276", "bodyText": "I would rename Effort.of(long)  method to Effort.ofSeconds.\nReason:\n\nmuch more descriptive\ni have the feeling soon we will introduce ofHours(int) method too.", "author": "teosarca", "createdAt": "2020-05-19T08:11:59Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/timebooking/S_TimeBooking.java", "diffHunk": "@@ -93,21 +99,25 @@ public void recomputeIssueProgress(@NonNull final I_S_TimeBooking record)\n \n \t\tif (record.getS_Issue_ID() != oldRecord.getS_Issue_ID())\n \t\t{\n+\t\t\tfinal Effort bookedEffort = Effort.of(record.getBookedSeconds().longValue());", "originalCommit": "ed30be90779869e12f05ee6542b85175b6198480", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMjgxNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427112815", "bodyText": "do we have a test which, at least indirectly, uses LabelType enum?\nreason: make sure those Patterns are compiled without exceptions.", "author": "teosarca", "createdAt": "2020-05-19T08:14:27Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterConstants.java", "diffHunk": "@@ -50,4 +47,18 @@\n \n \t\tprivate final String name;\n \t}\n+\n+\t@AllArgsConstructor\n+\t@Getter\n+\tenum LabelType{", "originalCommit": "599ee9397de9bc6823e32357a97a68c7593dcb89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyNTcxMQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427125711", "bodyText": "yes, we do : GithubImporterServiceTest.importIssue()", "author": "pvpurcarcosmin", "createdAt": "2020-05-19T08:34:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExMjgxNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExNTg4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427115887", "bodyText": "pls document why we keep INVOICED status, but in other cases, we are using the status from ImportIssueInfo", "author": "teosarca", "createdAt": "2020-05-19T08:19:23Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/importer/IssueImporterService.java", "diffHunk": "@@ -249,6 +253,10 @@ private IssueEntity mergeIssueInfoWithEntity(@NonNull final ImportIssueInfo impo\n \t\t\t\t? importIssueInfo.getMilestone().getMilestoneId()\n \t\t\t\t: null;\n \n+\t\tfinal Status status = INVOICED.equals(existingEffortIssue.getStatus())", "originalCommit": "599ee9397de9bc6823e32357a97a68c7593dcb89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExODM2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427118361", "bodyText": "pls use TimeUtil.toLocalDate method", "author": "teosarca", "createdAt": "2020-05-19T08:23:18Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "diffHunk": "@@ -216,6 +217,10 @@ private IssueEntity buildIssueEntity(@NonNull final I_S_Issue record)\n \t\t\t\t.orElseThrow( () ->new AdempiereException(\"Unknown Status!\").appendParametersToMessage()\n \t\t\t\t\t\t.setParameter(\"I_S_Issue\", record));\n \n+\t\tfinal LocalDate plannedUATDate = record.getPlannedUATDate() != null", "originalCommit": "599ee9397de9bc6823e32357a97a68c7593dcb89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzExODc1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427118751", "bodyText": "pls use TimeUtil.asTimestamp", "author": "teosarca", "createdAt": "2020-05-19T08:23:54Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "diffHunk": "@@ -279,6 +287,10 @@ private I_S_Issue buildRecord(@NonNull final IssueEntity issueEntity)\n \t\t\trecord.setStatus(issueEntity.getStatus().getCode());\n \t\t}\n \n+\t\trecord.setPlannedUATDate(issueEntity.getPlannedUATDate() != null\n+\t\t\t\t? Timestamp.valueOf(issueEntity.getPlannedUATDate().atStartOfDay())", "originalCommit": "599ee9397de9bc6823e32357a97a68c7593dcb89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMDU1Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427120552", "bodyText": "really loud thinking: somehow i feel like i would avoid the Null term because it's implementation detail (u internally decided to consider null roughEstimation as not already set).\nMaybe setRoughEstimationIfNotSet  or setRoughEstimationIfNotAlreadySet would be much more descriptive.", "author": "teosarca", "createdAt": "2020-05-19T08:26:36Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueEntity.java", "diffHunk": "@@ -127,6 +134,14 @@ public void setBudgetedEffortIfNull(@Nullable final BigDecimal budgetedEffort)\n \t\t}\n \t}\n \n+\tpublic void setRoughEstimationIfNull(@Nullable final BigDecimal roughEstimation)", "originalCommit": "599ee9397de9bc6823e32357a97a68c7593dcb89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMTI4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427121287", "bodyText": "log the exception too", "author": "teosarca", "createdAt": "2020-05-19T08:27:42Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "diffHunk": "@@ -313,27 +322,50 @@ private void processLabels(final List<Label> labelList,\n \t}\n \n \t@NonNull\n-\tprivate BigDecimal getValueFromLabel(final Label label, final Pattern valuePattern)\n+\tprivate BigDecimal getValueFromLabel(final Label label, final GithubImporterConstants.LabelType labelType)\n \t{\n-\t\tfinal Matcher matcher = valuePattern.matcher(label.getName());\n+\t\tfinal Matcher matcher = labelType.getPattern().matcher(label.getName());\n \n-\t\treturn matcher.matches() ? NumberUtils.asBigDecimal(matcher.group(1)) : BigDecimal.ZERO;\n+\t\treturn matcher.matches() ? NumberUtils.asBigDecimal(matcher.group(labelType.getGroupName())) : BigDecimal.ZERO;\n \t}\n \n \t@NonNull\n \tprivate Optional<Status> getStatusFromLabel(final Label label)\n \t{\n-\t\tfinal Matcher matcher = STATUS_PATTERN.matcher(label.getName());\n+\t\tfinal Matcher matcher = STATUS.getPattern().matcher(label.getName());\n \n-\t\treturn matcher.matches() ? Status.ofCodeOptional(matcher.group(STATUS_GROUP)) : Optional.empty();\n+\t\treturn matcher.matches() ? Status.ofCodeOptional(matcher.group(STATUS.getGroupName())) : Optional.empty();\n \t}\n \n \t@NonNull\n \tprivate Optional<String> getDeliveryPlatformFromLabel(final Label label)\n \t{\n-\t\tfinal Matcher matcher = DELIVERY_PLATFORM_PATTERN.matcher(label.getName());\n+\t\tfinal Matcher matcher = DELIVERY_PLATFORM.getPattern().matcher(label.getName());\n+\n+\t\treturn matcher.matches() ? Optional.of(matcher.group(DELIVERY_PLATFORM.getGroupName())) : Optional.empty();\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<LocalDate> getPlannedUATDateFromLabel(final Label label)\n+\t{\n+\t\tfinal Matcher matcher = PLANNED_UAT.getPattern().matcher(label.getName());\n+\n+\t\tif (!matcher.matches())\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tLocalDate plannedUATDate = null;\n+\t\ttry\n+\t\t{\n+\t\t\tplannedUATDate = LocalDate.from(PLANNED_UAT_DATE_FORMAT.parse(matcher.group(PLANNED_UAT.getGroupName())));\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\t\t\tlog.error(\"{} : cannot extract planned UAT date from : {}\", IMPORT_LOG_MESSAGE_PREFIX, label.getName());", "originalCommit": "599ee9397de9bc6823e32357a97a68c7593dcb89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "cf0ff13cae08b764d867b5333cec09cb719a0088", "url": "https://github.com/metasfresh/metasfresh/commit/cf0ff13cae08b764d867b5333cec09cb719a0088", "message": "addressed requested changes\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-19T08:53:35Z", "type": "commit"}, {"oid": "f86dd76246e866aaaedd36d51372da6e86e138bf", "url": "https://github.com/metasfresh/metasfresh/commit/f86dd76246e866aaaedd36d51372da6e86e138bf", "message": "addressed requested changes\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-19T09:26:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwNzY3OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6681#discussion_r427207679", "bodyText": "without , ex: {}", "author": "teosarca", "createdAt": "2020-05-19T10:49:09Z", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "diffHunk": "@@ -313,27 +322,51 @@ private void processLabels(final List<Label> labelList,\n \t}\n \n \t@NonNull\n-\tprivate BigDecimal getValueFromLabel(final Label label, final Pattern valuePattern)\n+\tprivate BigDecimal getValueFromLabel(final Label label, final GithubImporterConstants.LabelType labelType)\n \t{\n-\t\tfinal Matcher matcher = valuePattern.matcher(label.getName());\n+\t\tfinal Matcher matcher = labelType.getPattern().matcher(label.getName());\n \n-\t\treturn matcher.matches() ? NumberUtils.asBigDecimal(matcher.group(1)) : BigDecimal.ZERO;\n+\t\treturn matcher.matches() ? NumberUtils.asBigDecimal(matcher.group(labelType.getGroupName())) : BigDecimal.ZERO;\n \t}\n \n \t@NonNull\n \tprivate Optional<Status> getStatusFromLabel(final Label label)\n \t{\n-\t\tfinal Matcher matcher = STATUS_PATTERN.matcher(label.getName());\n+\t\tfinal Matcher matcher = STATUS.getPattern().matcher(label.getName());\n \n-\t\treturn matcher.matches() ? Status.ofCodeOptional(matcher.group(STATUS_GROUP)) : Optional.empty();\n+\t\treturn matcher.matches() ? Status.ofCodeOptional(matcher.group(STATUS.getGroupName())) : Optional.empty();\n \t}\n \n \t@NonNull\n \tprivate Optional<String> getDeliveryPlatformFromLabel(final Label label)\n \t{\n-\t\tfinal Matcher matcher = DELIVERY_PLATFORM_PATTERN.matcher(label.getName());\n+\t\tfinal Matcher matcher = DELIVERY_PLATFORM.getPattern().matcher(label.getName());\n+\n+\t\treturn matcher.matches() ? Optional.of(matcher.group(DELIVERY_PLATFORM.getGroupName())) : Optional.empty();\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<LocalDate> getPlannedUATDateFromLabel(final Label label)\n+\t{\n+\t\tfinal Matcher matcher = PLANNED_UAT.getPattern().matcher(label.getName());\n+\n+\t\tif (!matcher.matches())\n+\t\t{\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\n+\t\tLocalDate plannedUATDate = null;\n+\t\ttry\n+\t\t{\n+\t\t\tplannedUATDate = LocalDate.from(PLANNED_UAT_DATE_FORMAT.parse(matcher.group(PLANNED_UAT.getGroupName())));\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tlog.error(\"{} : cannot extract planned UAT date from : {}, ex: {} \",\n+\t\t\t\t\tIMPORT_LOG_MESSAGE_PREFIX, label.getName(), e);", "originalCommit": "f86dd76246e866aaaedd36d51372da6e86e138bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "b4c376e81faf21c15a261aad2a2766ef3175e136", "url": "https://github.com/metasfresh/metasfresh/commit/b4c376e81faf21c15a261aad2a2766ef3175e136", "message": "addressed requested changes\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-05-19T10:51:57Z", "type": "commit"}]}