{"pr_number": 10301, "pr_title": "Implement AD_UI_Element.Inline_Tab_ID", "pr_createdAt": "2020-11-24T20:39:34Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/10301", "timeline": [{"oid": "6ec15cf84fe4c3753efc94169806a5a0ef9f76bf", "url": "https://github.com/metasfresh/metasfresh/commit/6ec15cf84fe4c3753efc94169806a5a0ef9f76bf", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-15T12:52:43Z", "type": "commit"}, {"oid": "72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "url": "https://github.com/metasfresh/metasfresh/commit/72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "message": "#10257 This script is not needed.\n\nThe baseline wndow for BPartner (123)  should not have inline tabs\n\nhttps://github.com/metasfresh/metasfresh/issues/10275", "committedDate": "2020-12-15T15:10:44Z", "type": "commit"}, {"oid": "6c9418157e0b667967d248e8952e73971f78037e", "url": "https://github.com/metasfresh/metasfresh/commit/6c9418157e0b667967d248e8952e73971f78037e", "message": "Move promptOpen property to the store instead of local state", "committedDate": "2020-12-16T07:30:08Z", "type": "commit"}, {"oid": "1cd34e738dd1fae41c322e47a59d82f4dcb0251b", "url": "https://github.com/metasfresh/metasfresh/commit/1cd34e738dd1fae41c322e47a59d82f4dcb0251b", "message": "Add doc to the function", "committedDate": "2020-12-16T07:35:22Z", "type": "commit"}, {"oid": "7e20012b8ab392e9ada911afd401c588f91af8f7", "url": "https://github.com/metasfresh/metasfresh/commit/7e20012b8ab392e9ada911afd401c588f91af8f7", "message": "More cleanup and removed isOpen from the local state", "committedDate": "2020-12-16T08:00:26Z", "type": "commit"}, {"oid": "01e971dd3c58baaf6eb0d55d1491f0c8bf86d296", "url": "https://github.com/metasfresh/metasfresh/commit/01e971dd3c58baaf6eb0d55d1491f0c8bf86d296", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-16T08:04:01Z", "type": "commit"}, {"oid": "33217f7937818e612126b1d999aaa168846de450", "url": "https://github.com/metasfresh/metasfresh/commit/33217f7937818e612126b1d999aaa168846de450", "message": "Add test for the setInlineTabitemProp action", "committedDate": "2020-12-16T08:23:58Z", "type": "commit"}, {"oid": "528e0bb2a4c405738c1fd6d29de0e60e9b5dc559", "url": "https://github.com/metasfresh/metasfresh/commit/528e0bb2a4c405738c1fd6d29de0e60e9b5dc559", "message": "Test the open state of inlineTab row item", "committedDate": "2020-12-16T09:19:47Z", "type": "commit"}, {"oid": "441061e978d2fdf9d363413c9a8bfffa3a81ceed", "url": "https://github.com/metasfresh/metasfresh/commit/441061e978d2fdf9d363413c9a8bfffa3a81ceed", "message": "Test for closed state", "committedDate": "2020-12-16T09:26:19Z", "type": "commit"}, {"oid": "2b1397456fb928aead319ef314aa69e02cc9c118", "url": "https://github.com/metasfresh/metasfresh/commit/2b1397456fb928aead319ef314aa69e02cc9c118", "message": "Test for the presence of the delete button", "committedDate": "2020-12-16T09:32:34Z", "type": "commit"}, {"oid": "60a9aa951674ab8e0131b86925a7b743317c2a4d", "url": "https://github.com/metasfresh/metasfresh/commit/60a9aa951674ab8e0131b86925a7b743317c2a4d", "message": "Test the presence of the delete confirmation prompt", "committedDate": "2020-12-16T09:44:27Z", "type": "commit"}, {"oid": "cdfec355ed488b8e4b5489da576ee9ddc2368c6c", "url": "https://github.com/metasfresh/metasfresh/commit/cdfec355ed488b8e4b5489da576ee9ddc2368c6c", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-16T10:26:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNzI5OA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r542517298", "bodyText": "Why not just use a single splice tabData.splice(lastAdditionIndex, 1, tempData); ? Or even better - create a new array instead of mutating the response object ?", "author": "siemiatj", "createdAt": "2020-12-14T16:22:41Z", "path": "frontend/src/actions/InlineTabActions.js", "diffHunk": "@@ -0,0 +1,223 @@\n+import { fetchTab } from './WindowActions';\n+import { getLayout, getData } from '../api';\n+import { INLINE_TAB_SHOW_MORE_FROM } from '../constants/Constants';\n+import {\n+  UPDATE_INLINE_TAB_ITEM_FIELDS,\n+  UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+  SET_INLINE_TAB_WRAPPER_DATA,\n+  SET_INLINE_TAB_LAYOUT_AND_DATA,\n+  SET_INLINE_TAB_ADD_NEW,\n+  SET_INLINE_TAB_SHOW_MORE,\n+} from '../constants/ActionTypes';\n+\n+/*\n+ * @method updateInlineTabItemFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Item\n+ *\n+ * @param {string} inlineTabId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabItemFields({ inlineTabId, fieldsByName }) {\n+  return {\n+    type: UPDATE_INLINE_TAB_ITEM_FIELDS,\n+    payload: { inlineTabId, fieldsByName },\n+  };\n+}\n+\n+/*\n+ * @method updateInlineTabWrapperFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Wrapper\n+ *\n+ * @param {string} inlineTabWrapperId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabWrapperFields({\n+  inlineTabWrapperId,\n+  rowId,\n+  response,\n+}) {\n+  return {\n+    type: UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+    payload: { inlineTabWrapperId, rowId, response },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTabWrapper branch in the redux store with the data payload\n+ */\n+export function setInlineTabWrapperData({ inlineTabWrapperId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_WRAPPER_DATA,\n+    payload: { inlineTabWrapperId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the showMore value for the corresponding inlineTabWrapperId\n+ */\n+export function setInlineTabShowMore({ inlineTabWrapperId, showMore }) {\n+  return {\n+    type: SET_INLINE_TAB_SHOW_MORE,\n+    payload: { inlineTabWrapperId, showMore },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab branch in the redux store with the data payload\n+ */\n+export function setInlineTabLayoutAndData({ inlineTabId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_LAYOUT_AND_DATA,\n+    payload: { inlineTabId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab AddNew form related data in the store, visible is for toggling the visibility\n+ */\n+export function setInlineTabAddNew({ visible, windowId, tabId, rowId, docId }) {\n+  return {\n+    type: SET_INLINE_TAB_ADD_NEW,\n+    payload: { visible, windowId, tabId, rowId, docId },\n+  };\n+}\n+\n+/*\n+ * @method fetchInlineTabWrapperData\n+ * @summary Action creator for fetching the data for the `InlineTab` Wrapper (note: wrapper not the inline tab item!)\n+ *\n+ * @param {string} windowId\n+ * @param {string} tabId\n+ * @param {string} docId\n+ * @param {string} query\n+ */\n+export function fetchInlineTabWrapperData({\n+  windowId,\n+  tabId,\n+  docId,\n+  query,\n+  rowId,\n+  postDeletion,\n+}) {\n+  return (dispatch) => {\n+    dispatch(fetchTab({ tabId, windowId, docId, query })).then((tabData) => {\n+      /** - if we have the rowId it means we have a new record addition, so we put that at the end of the array - only if this doesn't happen as a result of deletion */\n+      if (rowId && !postDeletion) {\n+        const lastAdditionIndex = tabData.findIndex(\n+          (item) => item.rowId === rowId\n+        );\n+        if (lastAdditionIndex) {\n+          const tempData = tabData[lastAdditionIndex];\n+          tabData.splice(lastAdditionIndex, 1);\n+          tabData.splice(tabData.length, 0, tempData);", "originalCommit": "7f63af1096f726bd57a4b913066b8932edd49d7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg3OTA0MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544879040", "bodyText": "That would not work as we need to always have it last after the addition.", "author": "petrican", "createdAt": "2020-12-17T07:52:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNzI5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNzg0OA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r542517848", "bodyText": "Add a helper to format id's ?", "author": "siemiatj", "createdAt": "2020-12-14T16:23:28Z", "path": "frontend/src/actions/InlineTabActions.js", "diffHunk": "@@ -0,0 +1,223 @@\n+import { fetchTab } from './WindowActions';\n+import { getLayout, getData } from '../api';\n+import { INLINE_TAB_SHOW_MORE_FROM } from '../constants/Constants';\n+import {\n+  UPDATE_INLINE_TAB_ITEM_FIELDS,\n+  UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+  SET_INLINE_TAB_WRAPPER_DATA,\n+  SET_INLINE_TAB_LAYOUT_AND_DATA,\n+  SET_INLINE_TAB_ADD_NEW,\n+  SET_INLINE_TAB_SHOW_MORE,\n+} from '../constants/ActionTypes';\n+\n+/*\n+ * @method updateInlineTabItemFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Item\n+ *\n+ * @param {string} inlineTabId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabItemFields({ inlineTabId, fieldsByName }) {\n+  return {\n+    type: UPDATE_INLINE_TAB_ITEM_FIELDS,\n+    payload: { inlineTabId, fieldsByName },\n+  };\n+}\n+\n+/*\n+ * @method updateInlineTabWrapperFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Wrapper\n+ *\n+ * @param {string} inlineTabWrapperId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabWrapperFields({\n+  inlineTabWrapperId,\n+  rowId,\n+  response,\n+}) {\n+  return {\n+    type: UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+    payload: { inlineTabWrapperId, rowId, response },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTabWrapper branch in the redux store with the data payload\n+ */\n+export function setInlineTabWrapperData({ inlineTabWrapperId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_WRAPPER_DATA,\n+    payload: { inlineTabWrapperId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the showMore value for the corresponding inlineTabWrapperId\n+ */\n+export function setInlineTabShowMore({ inlineTabWrapperId, showMore }) {\n+  return {\n+    type: SET_INLINE_TAB_SHOW_MORE,\n+    payload: { inlineTabWrapperId, showMore },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab branch in the redux store with the data payload\n+ */\n+export function setInlineTabLayoutAndData({ inlineTabId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_LAYOUT_AND_DATA,\n+    payload: { inlineTabId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab AddNew form related data in the store, visible is for toggling the visibility\n+ */\n+export function setInlineTabAddNew({ visible, windowId, tabId, rowId, docId }) {\n+  return {\n+    type: SET_INLINE_TAB_ADD_NEW,\n+    payload: { visible, windowId, tabId, rowId, docId },\n+  };\n+}\n+\n+/*\n+ * @method fetchInlineTabWrapperData\n+ * @summary Action creator for fetching the data for the `InlineTab` Wrapper (note: wrapper not the inline tab item!)\n+ *\n+ * @param {string} windowId\n+ * @param {string} tabId\n+ * @param {string} docId\n+ * @param {string} query\n+ */\n+export function fetchInlineTabWrapperData({\n+  windowId,\n+  tabId,\n+  docId,\n+  query,\n+  rowId,\n+  postDeletion,\n+}) {\n+  return (dispatch) => {\n+    dispatch(fetchTab({ tabId, windowId, docId, query })).then((tabData) => {\n+      /** - if we have the rowId it means we have a new record addition, so we put that at the end of the array - only if this doesn't happen as a result of deletion */\n+      if (rowId && !postDeletion) {\n+        const lastAdditionIndex = tabData.findIndex(\n+          (item) => item.rowId === rowId\n+        );\n+        if (lastAdditionIndex) {\n+          const tempData = tabData[lastAdditionIndex];\n+          tabData.splice(lastAdditionIndex, 1);\n+          tabData.splice(tabData.length, 0, tempData);\n+        }\n+        dispatch(\n+          setInlineTabShowMore({\n+            inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,", "originalCommit": "7f63af1096f726bd57a4b913066b8932edd49d7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg4MzgyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544883827", "bodyText": "calling each time a function for that would be counter performance. But a solution would be to just define the selector in one place instead of how I put it now. This Is fixed. Ty", "author": "petrican", "createdAt": "2020-12-17T08:01:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxNzg0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxOTg5Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r542519892", "bodyText": "are we supposed to have a new color for this ?", "author": "siemiatj", "createdAt": "2020-12-14T16:26:04Z", "path": "frontend/src/assets/css/tabs.css", "diffHunk": "@@ -308,3 +309,96 @@\n     display: flex;\n     flex-direction: column;\n }\n+\n+/** Inline TAB **/\n+.inline-tab-wrapper {\n+    width: 100%;\n+    box-sizing: border-box;\n+    .main-label {\n+      font-weight: bold; \n+      color: #495057;\n+    }\n+    .inlinetab-action-button {\n+      float:left;\n+    }\n+    .inlinetab-showmore {\n+      float: right;\n+    }\n+    .bottom-offset {\n+      margin-bottom: 5px;\n+    }\n+}\n+.inline-tab-fullscreen-top-offset {\n+  padding-top: 20px !important;\n+}\n+.inline-tab {\n+    background: #E3E1E2;\n+    width: 100%;\n+    box-sizing: border-box;\n+    padding: 10px 15px 10px 15px;\n+    border-radius: 3px;\n+    cursor: pointer;\n+    margin-bottom:5px;\n+\n+    .arrow-pointer {\n+      display: block;\n+      float: left;\n+      margin: 6px 8px 8px 0px;\n+      width: 8px;\n+      height: 8px;\n+      border-top: 2px solid #000;\n+      border-left: 2px solid #000;\n+      transform: rotate(135deg);\n+    }\n+    .offset-left {\n+      margin-left:15px;\n+    }\n+}\n+\n+.inline-tab:hover {\n+  background-color: #dddddd;", "originalCommit": "7f63af1096f726bd57a4b913066b8932edd49d7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxMTY0Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544911646", "bodyText": "light-gray would do it", "author": "petrican", "createdAt": "2020-12-17T08:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUxOTg5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDM1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r542520351", "bodyText": "New color again ? Won't brand-bright-color work ?", "author": "siemiatj", "createdAt": "2020-12-14T16:26:35Z", "path": "frontend/src/assets/css/tabs.css", "diffHunk": "@@ -308,3 +309,96 @@\n     display: flex;\n     flex-direction: column;\n }\n+\n+/** Inline TAB **/\n+.inline-tab-wrapper {\n+    width: 100%;\n+    box-sizing: border-box;\n+    .main-label {\n+      font-weight: bold; \n+      color: #495057;\n+    }\n+    .inlinetab-action-button {\n+      float:left;\n+    }\n+    .inlinetab-showmore {\n+      float: right;\n+    }\n+    .bottom-offset {\n+      margin-bottom: 5px;\n+    }\n+}\n+.inline-tab-fullscreen-top-offset {\n+  padding-top: 20px !important;\n+}\n+.inline-tab {\n+    background: #E3E1E2;\n+    width: 100%;\n+    box-sizing: border-box;\n+    padding: 10px 15px 10px 15px;\n+    border-radius: 3px;\n+    cursor: pointer;\n+    margin-bottom:5px;\n+\n+    .arrow-pointer {\n+      display: block;\n+      float: left;\n+      margin: 6px 8px 8px 0px;\n+      width: 8px;\n+      height: 8px;\n+      border-top: 2px solid #000;\n+      border-left: 2px solid #000;\n+      transform: rotate(135deg);\n+    }\n+    .offset-left {\n+      margin-left:15px;\n+    }\n+}\n+\n+.inline-tab:hover {\n+  background-color: #dddddd;\n+}\n+\n+.inline-tab-offset-top {\n+  margin-top: -5px;\n+}\n+\n+.inline-tab-active {\n+  background: #F6F4EF;", "originalCommit": "7f63af1096f726bd57a4b913066b8932edd49d7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxMTQ5Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544911497", "bodyText": "nope, added new var", "author": "petrican", "createdAt": "2020-12-17T08:48:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDM1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDg0Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r542520847", "bodyText": "This looks like brand-light-color", "author": "siemiatj", "createdAt": "2020-12-14T16:27:12Z", "path": "frontend/src/assets/css/tabs.css", "diffHunk": "@@ -308,3 +309,96 @@\n     display: flex;\n     flex-direction: column;\n }\n+\n+/** Inline TAB **/\n+.inline-tab-wrapper {\n+    width: 100%;\n+    box-sizing: border-box;\n+    .main-label {\n+      font-weight: bold; \n+      color: #495057;\n+    }\n+    .inlinetab-action-button {\n+      float:left;\n+    }\n+    .inlinetab-showmore {\n+      float: right;\n+    }\n+    .bottom-offset {\n+      margin-bottom: 5px;\n+    }\n+}\n+.inline-tab-fullscreen-top-offset {\n+  padding-top: 20px !important;\n+}\n+.inline-tab {\n+    background: #E3E1E2;\n+    width: 100%;\n+    box-sizing: border-box;\n+    padding: 10px 15px 10px 15px;\n+    border-radius: 3px;\n+    cursor: pointer;\n+    margin-bottom:5px;\n+\n+    .arrow-pointer {\n+      display: block;\n+      float: left;\n+      margin: 6px 8px 8px 0px;\n+      width: 8px;\n+      height: 8px;\n+      border-top: 2px solid #000;\n+      border-left: 2px solid #000;\n+      transform: rotate(135deg);\n+    }\n+    .offset-left {\n+      margin-left:15px;\n+    }\n+}\n+\n+.inline-tab:hover {\n+  background-color: #dddddd;\n+}\n+\n+.inline-tab-offset-top {\n+  margin-top: -5px;\n+}\n+\n+.inline-tab-active {\n+  background: #F6F4EF;\n+  width: 100%;\n+  box-sizing: border-box;\n+  padding: 10px 15px 10px 15px;\n+  border-radius: 3px;\n+  cursor: pointer;\n+  margin-bottom:5px;\n+\n+  .arrow-pointer {\n+    display: block;\n+    float: left;\n+    margin: 4px 8px 8px 0px;\n+    width: 8px;\n+    height: 8px;\n+    border-top: 2px solid #000;\n+    border-left: 2px solid #000;\n+    transform: rotate(224deg);\n+  }\n+  .offset-left {\n+    margin-left:15px;\n+  }\n+  .inline-tab-separator {\n+    width:100%;\n+    border-top: 1px solid #C8D6D5;", "originalCommit": "7f63af1096f726bd57a4b913066b8932edd49d7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxMzI0OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544913249", "bodyText": "changed", "author": "petrican", "createdAt": "2020-12-17T08:51:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyMDg0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNDAxMg==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r542524012", "bodyText": "typo", "author": "siemiatj", "createdAt": "2020-12-14T16:31:02Z", "path": "frontend/src/reducers/windowHandler.js", "diffHunk": "@@ -732,6 +790,111 @@ export default function windowHandler(state = initialState, action) {\n         },\n       };\n     }\n+    // INLINE TAB ACTINIONS", "originalCommit": "7f63af1096f726bd57a4b913066b8932edd49d7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNjI3Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r542526276", "bodyText": "Why use map if you're not returning a map but just iterate over items ?", "author": "siemiatj", "createdAt": "2020-12-14T16:33:59Z", "path": "frontend/src/reducers/windowHandler.js", "diffHunk": "@@ -732,6 +790,111 @@ export default function windowHandler(state = initialState, action) {\n         },\n       };\n     }\n+    // INLINE TAB ACTINIONS\n+    case SET_INLINE_TAB_LAYOUT_AND_DATA: {\n+      return {\n+        ...state,\n+        inlineTab: {\n+          ...state.inlineTab,\n+          [`${action.payload.inlineTabId}`]: action.payload.data,\n+        },\n+      };\n+    }\n+    case SET_INLINE_TAB_WRAPPER_DATA: {\n+      return {\n+        ...state,\n+        inlineTab: {\n+          ...state.inlineTab,\n+          wrapperData: {\n+            ...state.inlineTab.wrapperData,\n+            [`${action.payload.inlineTabWrapperId}`]: action.payload.data,\n+          },\n+        },\n+      };\n+    }\n+    case UPDATE_INLINE_TAB_WRAPPER_FIELDS: {\n+      let indexWD;\n+      const { inlineTabWrapperId, rowId, response } = action.payload;\n+      const { fieldsByName, saveStatus, validStatus } = response;\n+      state.inlineTab.wrapperData[inlineTabWrapperId].forEach((item, i) => {\n+        if (item.rowId === rowId) indexWD = i;\n+      });\n+\n+      const wrapperDataClone = { ...state.inlineTab.wrapperData };\n+      if (wrapperDataClone[inlineTabWrapperId][indexWD]) {\n+        wrapperDataClone[inlineTabWrapperId][indexWD].saveStatus = saveStatus;\n+        wrapperDataClone[inlineTabWrapperId][indexWD].validStatus = validStatus;\n+        wrapperDataClone[inlineTabWrapperId][indexWD].fieldsByName = {\n+          ...wrapperDataClone[inlineTabWrapperId][indexWD].fieldsByName,\n+          ...fieldsByName,\n+        };\n+      }\n+\n+      return {\n+        ...state,\n+        inlineTab: {\n+          ...state.inlineTab,\n+          wrapperData: wrapperDataClone,\n+        },\n+      };\n+    }\n+\n+    case UPDATE_INLINE_TAB_ITEM_FIELDS: {\n+      const { inlineTabId, fieldsByName } = action.payload;\n+\n+      const targetTabData = { ...state.inlineTab[`${inlineTabId}`].data };\n+\n+      Object.keys(fieldsByName).map((fieldItem) => {", "originalCommit": "7f63af1096f726bd57a4b913066b8932edd49d7a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkxNjc1MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544916750", "bodyText": "Good point. Fixed", "author": "petrican", "createdAt": "2020-12-17T08:56:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNjI3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjUyNzcwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r542527706", "bodyText": "Please add a fallback when state.windowHandler.inlineTab[id] doesn't exist. Best to just use lodash's get", "author": "siemiatj", "createdAt": "2020-12-14T16:35:36Z", "path": "frontend/src/reducers/windowHandler.js", "diffHunk": "@@ -205,6 +250,19 @@ export const getElementWidgetData = createCachedSelector(\n   (data, layout) => selectWidgetData(data, layout)\n )((_state_, isModal, layoutPath) => layoutPath);\n \n+/**\n+ * @method getInlineTabWidgetFields\n+ *\n+ * @param {object} state - redux state\n+ * @param {boolean} isModal\n+ * @param {string} layoutPath - indexes of elements in the layout structure\n+ */\n+export const getInlineTabWidgetFields = ({ state, inlineTabId }) => {\n+  const data = state.windowHandler.inlineTab[`${inlineTabId}`].data;", "originalCommit": "7f63af1096f726bd57a4b913066b8932edd49d7a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3MzM5Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543373396", "bodyText": "What are those comments for ?", "author": "siemiatj", "createdAt": "2020-12-15T14:11:20Z", "path": "frontend/src/__tests__/actions/InlineTabActions.test.js", "diffHunk": "@@ -0,0 +1,322 @@\n+import thunk from 'redux-thunk';\n+import configureStore from 'redux-mock-store';\n+import merge from 'merge';\n+import {\n+  updateInlineTabItemFields,\n+  updateInlineTabWrapperFields,\n+  setInlineTabWrapperData,\n+  setInlineTabShowMore,\n+  setInlineTabLayoutAndData,\n+  setInlineTabAddNew,\n+} from '../../actions/InlineTabActions';\n+import * as ACTION_TYPES from '../../constants/ActionTypes';\n+import gridProps from '../../../test_setup/fixtures/grid.json';\n+import gridLayoutFixtures from '../../../test_setup/fixtures/grid/layout.json';\n+import { initialState as initialViewsState } from '../../reducers/viewHandler';\n+import tablesHandler from '../../reducers/tables';\n+const middlewares = [thunk];\n+const mockStore = configureStore(middlewares);\n+\n+const createState = function(state = {}) {\n+  const res = merge.recursive(\n+    true,\n+    {\n+      viewHandler: initialViewsState,\n+      tables: { ...tablesHandler(undefined, {}) },\n+    },\n+    state\n+  );\n+\n+  return res;\n+};\n+\n+describe('InlineTab - actions general', () => {\n+  /** UPDATE_INLINE_TAB_ITEM_FIELDS action */\n+  it('should call UPDATE_INLINE_TAB_ITEM_FIELDS action with correct payload', () => {\n+    const { windowType } = gridProps.props1;\n+    const layoutResponse = gridLayoutFixtures.layout1;\n+    const initialInlineTabId = '123_AD_Tab-222_2205230';\n+    const initialFieldsByName = {\n+      BPartnerName: {\n+        field: 'BPartnerName',\n+        value: 'e',\n+        widgetType: 'Text',\n+        validStatus: {\n+          valid: true,\n+          initialValue: true,\n+          fieldName: 'BPartnerName',\n+        },\n+      },\n+    };\n+    const payload = {\n+      inlineTabId: initialInlineTabId,\n+      fieldsByName: initialFieldsByName,\n+    };\n+    const action = updateInlineTabItemFields({\n+      inlineTabId: initialInlineTabId,\n+      fieldsByName: initialFieldsByName,\n+    });\n+\n+    expect(action.type).toEqual(ACTION_TYPES.UPDATE_INLINE_TAB_ITEM_FIELDS);\n+    expect(action.payload).toHaveProperty('inlineTabId', payload.inlineTabId);\n+    expect(action.payload).toHaveProperty('fieldsByName', payload.fieldsByName);\n+\n+    const initialState = createState({\n+      viewHandler: {\n+        views: {\n+          [windowType]: {\n+            layout: { ...layoutResponse },\n+          },\n+        },\n+      },\n+    });\n+    const store = mockStore(initialState);\n+    const expectedActions = [\n+      { type: ACTION_TYPES.UPDATE_INLINE_TAB_ITEM_FIELDS, payload },\n+    ];\n+\n+    store.dispatch(\n+      updateInlineTabItemFields({\n+        inlineTabId: initialInlineTabId,\n+        fieldsByName: initialFieldsByName,\n+      })\n+    );\n+    expect(store.getActions()).toEqual(expect.arrayContaining(expectedActions));\n+  });\n+\n+  /** UPDATE_INLINE_TAB_WRAPPER_FIELDS action */\n+  it('should call UPDATE_INLINE_TAB_WRAPPER_FIELDS action with correct payload', () => {\n+    const { windowType } = gridProps.props1;\n+    const layoutResponse = gridLayoutFixtures.layout1;\n+    const initialInlineTabId = '123_AD_Tab-222_2205230';\n+    const rowId = '2205230';\n+    const payload = {\n+      inlineTabWrapperId: initialInlineTabId,\n+      rowId,\n+      response: {},\n+    };\n+\n+    const action = updateInlineTabWrapperFields({\n+      inlineTabWrapperId: initialInlineTabId,\n+      rowId,\n+      response: {},\n+    });\n+\n+    expect(action.type).toEqual(ACTION_TYPES.UPDATE_INLINE_TAB_WRAPPER_FIELDS);\n+    expect(action.payload).toHaveProperty(\n+      'inlineTabWrapperId',\n+      payload.inlineTabWrapperId\n+    );\n+    expect(action.payload).toHaveProperty('rowId', payload.rowId);\n+    expect(action.payload).toHaveProperty('response', payload.response);\n+\n+    const initialState = createState({\n+      viewHandler: {\n+        views: {\n+          [windowType]: {\n+            layout: { ...layoutResponse },\n+          },\n+        },\n+      },\n+    });\n+    const store = mockStore(initialState);\n+    const expectedActions = [\n+      { type: ACTION_TYPES.UPDATE_INLINE_TAB_WRAPPER_FIELDS, payload },\n+    ];\n+\n+    store.dispatch(\n+      updateInlineTabWrapperFields({\n+        inlineTabWrapperId: initialInlineTabId,\n+        rowId,\n+        response: {},\n+      })\n+    );\n+    expect(store.getActions()).toEqual(expect.arrayContaining(expectedActions));\n+  });\n+\n+  /** SET_INLINE_TAB_WRAPPER_DATA action */\n+  it('should call SET_INLINE_TAB_WRAPPER_DATA action with correct payload', () => {\n+    const { windowType } = gridProps.props1;\n+    const layoutResponse = gridLayoutFixtures.layout1;\n+    const initialInlineTabWrapperId = '123_AD_Tab-222_2205230';\n+    const dummyProp = { dummyProp: 'test ' };\n+    const payload = {\n+      inlineTabWrapperId: initialInlineTabWrapperId,\n+      data: dummyProp,\n+    };\n+\n+    const action = setInlineTabWrapperData({\n+      inlineTabWrapperId: initialInlineTabWrapperId,\n+      data: dummyProp,\n+    });\n+\n+    expect(action.type).toEqual(ACTION_TYPES.SET_INLINE_TAB_WRAPPER_DATA);\n+    expect(action.payload).toHaveProperty(\n+      'inlineTabWrapperId',\n+      payload.inlineTabWrapperId\n+    );\n+    expect(action.payload).toHaveProperty('data', payload.data);\n+\n+    const initialState = createState({\n+      viewHandler: {\n+        views: {\n+          [windowType]: {\n+            layout: { ...layoutResponse },\n+          },\n+        },\n+      },\n+    });\n+    const store = mockStore(initialState);\n+    const expectedActions = [\n+      { type: ACTION_TYPES.SET_INLINE_TAB_WRAPPER_DATA, payload },\n+    ];\n+\n+    store.dispatch(\n+      setInlineTabWrapperData({\n+        inlineTabWrapperId: initialInlineTabWrapperId,\n+        data: dummyProp,\n+      })\n+    );\n+    expect(store.getActions()).toEqual(expect.arrayContaining(expectedActions));\n+  });\n+\n+  /** SET_INLINE_TAB_SHOW_MORE action */", "originalCommit": "6ec15cf84fe4c3753efc94169806a5a0ef9f76bf", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg2MDMwOA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544860308", "bodyText": "Just a way to see easier what is been tested.", "author": "petrican", "createdAt": "2020-12-17T07:13:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3MzM5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3NTcyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543375727", "bodyText": "From what I saw in the test these could probably get a default null value here.", "author": "siemiatj", "createdAt": "2020-12-15T14:13:10Z", "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -499,14 +500,17 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n /*\n  * Main method to generate window\n  */\n-export function createWindow(\n-  windowType,\n-  documentId = 'NEW',\n+export function createWindow({\n+  windowId: windowType,\n+  docId,\n   tabId,", "originalCommit": "6ec15cf84fe4c3753efc94169806a5a0ef9f76bf", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4OTQ0OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543489449", "bodyText": "please use values from fixtures instead of hardcoded ids", "author": "siemiatj", "createdAt": "2020-12-15T16:22:39Z", "path": "frontend/src/__tests__/components/widget/InlineTab/InlineTabWrapper.test.js", "diffHunk": "@@ -0,0 +1,229 @@\n+import React from 'react';\n+import nock from 'nock';\n+import { shallow, mount } from 'enzyme';\n+import configureStore from 'redux-mock-store';\n+import merge from 'merge';\n+import viewHandler from '../../../../reducers/viewHandler';\n+import InlineTabWrapper from '../../../../components/widget/InlineTabWrapper';\n+import hotkeys from '../../../../../test_setup/fixtures/hotkeys.json';\n+import keymap from '../../../../../test_setup/fixtures/keymap.json';\n+import { ShortcutProvider } from '../../../../components/keyshortcuts/ShortcutProvider';\n+import { initialState as appHandlerState } from '../../../../reducers/appHandler';\n+import { initialState as windowHandlerState } from '../../../../reducers/windowHandler';\n+import tablesHandler from '../../../../reducers/tables';\n+import { Provider } from 'react-redux';\n+import props from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_wrapper.json';\n+import tabData from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_data.json';\n+import inlineTabStoreMore from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_data_more.json';\n+import inlineTabStore from '../../../../../test_setup/fixtures/widget/inlinetab/inlineTabStore.json';\n+import addNewData from '../../../../../test_setup/fixtures/widget/inlinetab/addNewData.json';\n+import inlineTabInvalid from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_invalid.json';\n+import thunk from 'redux-thunk';\n+const middlewares = [thunk];\n+\n+const mockStore = configureStore(middlewares);\n+\n+const createStore = function(state = {}) {\n+  const res = merge.recursive(\n+    true,\n+    {\n+      appHandler: {\n+        ...appHandlerState,\n+        me: { timeZone: 'America/Los_Angeles' },\n+      },\n+      windowHandler: { ...windowHandlerState },\n+      ...viewHandler,\n+      tables: { ...tablesHandler(undefined, {}) },\n+    },\n+    state\n+  );\n+\n+  return res;\n+};\n+\n+describe('InlineTabWrapper component', () => {\n+  describe('rendering tests:', () => {\n+    it('renders without errors', () => {\n+      shallow(<InlineTabWrapper {...props} />);\n+    });\n+\n+    it('renders a line properly', () => {\n+      const initialState = createStore({\n+        windowHandler: {\n+          allowShortcut: true,\n+          modal: {\n+            visible: true,\n+          },\n+          inlineTab: inlineTabStore,\n+        },\n+      });\n+      const store = mockStore(initialState);\n+\n+      nock(config.API_URL)\n+        .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+        .get(`/window/123/2156425/AD_Tab-222/`)", "originalCommit": "72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg2NzEyOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544867129", "bodyText": "If I am changing that with the values from the fixtures for some reason nock is giving these errors. So having bunch of errors would fill up the logs. It's a test, I am going to leave it hardcoded for now as I don't want to spend more time investigating why nock is trowing those errors in case I am using the ids from the fixture", "author": "petrican", "createdAt": "2020-12-17T07:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4OTQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MDYwOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543490609", "bodyText": "Same here. Otherwise whenever we'll use new fixtures these will fail for no real reason.", "author": "siemiatj", "createdAt": "2020-12-15T16:24:01Z", "path": "frontend/src/__tests__/components/widget/InlineTab/InlineTabWrapper.test.js", "diffHunk": "@@ -0,0 +1,229 @@\n+import React from 'react';\n+import nock from 'nock';\n+import { shallow, mount } from 'enzyme';\n+import configureStore from 'redux-mock-store';\n+import merge from 'merge';\n+import viewHandler from '../../../../reducers/viewHandler';\n+import InlineTabWrapper from '../../../../components/widget/InlineTabWrapper';\n+import hotkeys from '../../../../../test_setup/fixtures/hotkeys.json';\n+import keymap from '../../../../../test_setup/fixtures/keymap.json';\n+import { ShortcutProvider } from '../../../../components/keyshortcuts/ShortcutProvider';\n+import { initialState as appHandlerState } from '../../../../reducers/appHandler';\n+import { initialState as windowHandlerState } from '../../../../reducers/windowHandler';\n+import tablesHandler from '../../../../reducers/tables';\n+import { Provider } from 'react-redux';\n+import props from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_wrapper.json';\n+import tabData from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_data.json';\n+import inlineTabStoreMore from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_data_more.json';\n+import inlineTabStore from '../../../../../test_setup/fixtures/widget/inlinetab/inlineTabStore.json';\n+import addNewData from '../../../../../test_setup/fixtures/widget/inlinetab/addNewData.json';\n+import inlineTabInvalid from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_invalid.json';\n+import thunk from 'redux-thunk';\n+const middlewares = [thunk];\n+\n+const mockStore = configureStore(middlewares);\n+\n+const createStore = function(state = {}) {\n+  const res = merge.recursive(\n+    true,\n+    {\n+      appHandler: {\n+        ...appHandlerState,\n+        me: { timeZone: 'America/Los_Angeles' },\n+      },\n+      windowHandler: { ...windowHandlerState },\n+      ...viewHandler,\n+      tables: { ...tablesHandler(undefined, {}) },\n+    },\n+    state\n+  );\n+\n+  return res;\n+};\n+\n+describe('InlineTabWrapper component', () => {\n+  describe('rendering tests:', () => {\n+    it('renders without errors', () => {\n+      shallow(<InlineTabWrapper {...props} />);\n+    });\n+\n+    it('renders a line properly', () => {\n+      const initialState = createStore({\n+        windowHandler: {\n+          allowShortcut: true,\n+          modal: {\n+            visible: true,\n+          },\n+          inlineTab: inlineTabStore,\n+        },\n+      });\n+      const store = mockStore(initialState);\n+\n+      nock(config.API_URL)\n+        .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+        .get(`/window/123/2156425/AD_Tab-222/`)\n+        .reply(200, tabData);\n+\n+      const wrapper = mount(\n+        <ShortcutProvider hotkeys={hotkeys} keymap={keymap}>\n+          <Provider store={store}>\n+            <InlineTabWrapper {...props} />\n+          </Provider>\n+        </ShortcutProvider>\n+      );\n+      const htmlOutput = wrapper.html();\n+      expect(htmlOutput).toContain('<span>Testadresse 3</span');\n+      expect(htmlOutput).toContain('inlinetab-action-button');\n+      expect(htmlOutput).not.toContain('meta-icon-fullscreen');\n+    });\n+  });\n+\n+  it('renders more lines properly', () => {\n+    props.dataId = '2155894'; // we pass different docId such that will match the selector used for the mocked up data\n+    const initialState = createStore({\n+      windowHandler: {\n+        allowShortcut: true,\n+        modal: {\n+          visible: true,\n+        },\n+        inlineTab: inlineTabStoreMore,\n+      },\n+    });\n+    const store = mockStore(initialState);\n+\n+    nock(config.API_URL)\n+      .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+      .get(`/window/123/2155894/AD_Tab-222/`)\n+      .reply(200, tabData);\n+\n+    const wrapper = mount(\n+      <ShortcutProvider hotkeys={hotkeys} keymap={keymap}>\n+        <Provider store={store}>\n+          <InlineTabWrapper {...props} />\n+        </Provider>\n+      </ShortcutProvider>\n+    );\n+    const htmlOutput = wrapper.html();\n+\n+    expect(htmlOutput).toContain('Amerikanische Jungferninseln');", "originalCommit": "72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MTg4Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543491886", "bodyText": "Maybe it's worth adding a test that tries adding something with the form too ? Then intercept the request, send back dummy response and see if all works ok ?", "author": "siemiatj", "createdAt": "2020-12-15T16:25:32Z", "path": "frontend/src/__tests__/components/widget/InlineTab/InlineTabWrapper.test.js", "diffHunk": "@@ -0,0 +1,229 @@\n+import React from 'react';\n+import nock from 'nock';\n+import { shallow, mount } from 'enzyme';\n+import configureStore from 'redux-mock-store';\n+import merge from 'merge';\n+import viewHandler from '../../../../reducers/viewHandler';\n+import InlineTabWrapper from '../../../../components/widget/InlineTabWrapper';\n+import hotkeys from '../../../../../test_setup/fixtures/hotkeys.json';\n+import keymap from '../../../../../test_setup/fixtures/keymap.json';\n+import { ShortcutProvider } from '../../../../components/keyshortcuts/ShortcutProvider';\n+import { initialState as appHandlerState } from '../../../../reducers/appHandler';\n+import { initialState as windowHandlerState } from '../../../../reducers/windowHandler';\n+import tablesHandler from '../../../../reducers/tables';\n+import { Provider } from 'react-redux';\n+import props from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_wrapper.json';\n+import tabData from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_data.json';\n+import inlineTabStoreMore from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_data_more.json';\n+import inlineTabStore from '../../../../../test_setup/fixtures/widget/inlinetab/inlineTabStore.json';\n+import addNewData from '../../../../../test_setup/fixtures/widget/inlinetab/addNewData.json';\n+import inlineTabInvalid from '../../../../../test_setup/fixtures/widget/inlinetab/inline_tab_invalid.json';\n+import thunk from 'redux-thunk';\n+const middlewares = [thunk];\n+\n+const mockStore = configureStore(middlewares);\n+\n+const createStore = function(state = {}) {\n+  const res = merge.recursive(\n+    true,\n+    {\n+      appHandler: {\n+        ...appHandlerState,\n+        me: { timeZone: 'America/Los_Angeles' },\n+      },\n+      windowHandler: { ...windowHandlerState },\n+      ...viewHandler,\n+      tables: { ...tablesHandler(undefined, {}) },\n+    },\n+    state\n+  );\n+\n+  return res;\n+};\n+\n+describe('InlineTabWrapper component', () => {\n+  describe('rendering tests:', () => {\n+    it('renders without errors', () => {\n+      shallow(<InlineTabWrapper {...props} />);\n+    });\n+\n+    it('renders a line properly', () => {\n+      const initialState = createStore({\n+        windowHandler: {\n+          allowShortcut: true,\n+          modal: {\n+            visible: true,\n+          },\n+          inlineTab: inlineTabStore,\n+        },\n+      });\n+      const store = mockStore(initialState);\n+\n+      nock(config.API_URL)\n+        .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+        .get(`/window/123/2156425/AD_Tab-222/`)\n+        .reply(200, tabData);\n+\n+      const wrapper = mount(\n+        <ShortcutProvider hotkeys={hotkeys} keymap={keymap}>\n+          <Provider store={store}>\n+            <InlineTabWrapper {...props} />\n+          </Provider>\n+        </ShortcutProvider>\n+      );\n+      const htmlOutput = wrapper.html();\n+      expect(htmlOutput).toContain('<span>Testadresse 3</span');\n+      expect(htmlOutput).toContain('inlinetab-action-button');\n+      expect(htmlOutput).not.toContain('meta-icon-fullscreen');\n+    });\n+  });\n+\n+  it('renders more lines properly', () => {\n+    props.dataId = '2155894'; // we pass different docId such that will match the selector used for the mocked up data\n+    const initialState = createStore({\n+      windowHandler: {\n+        allowShortcut: true,\n+        modal: {\n+          visible: true,\n+        },\n+        inlineTab: inlineTabStoreMore,\n+      },\n+    });\n+    const store = mockStore(initialState);\n+\n+    nock(config.API_URL)\n+      .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+      .get(`/window/123/2155894/AD_Tab-222/`)\n+      .reply(200, tabData);\n+\n+    const wrapper = mount(\n+      <ShortcutProvider hotkeys={hotkeys} keymap={keymap}>\n+        <Provider store={store}>\n+          <InlineTabWrapper {...props} />\n+        </Provider>\n+      </ShortcutProvider>\n+    );\n+    const htmlOutput = wrapper.html();\n+\n+    expect(htmlOutput).toContain('Amerikanische Jungferninseln');\n+    expect(htmlOutput).toContain('Amerikanisch-Samoa');\n+    expect(htmlOutput).toContain('Amerikanisch-Samoa (2)');\n+    expect(htmlOutput).toContain('Am Nossbacher Weg 2');\n+    expect(htmlOutput).toContain(\n+      'Antarktis (Sonderstatus durch Antarktis-Vertrag)'\n+    );\n+    expect(htmlOutput).not.toContain('Russland'); // only five rows shown - this should not be rendered\n+    expect(htmlOutput).toContain('meta-icon-fullscreen');\n+  });\n+\n+  it('renders the form in full screen correctly', () => {\n+    props.dataId = '2155894'; // we pass different docId such that will match the selector used for the mocked up data\n+    inlineTabStoreMore.showMore['123_AD_Tab-222_2155894'] = false;\n+    const initialState = createStore({\n+      windowHandler: {\n+        allowShortcut: true,\n+        modal: {\n+          visible: true,\n+        },\n+        inlineTab: inlineTabStoreMore,\n+      },\n+    });\n+    const store = mockStore(initialState);\n+\n+    nock(config.API_URL)\n+      .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+      .get(`/window/123/2155894/AD_Tab-222/`)\n+      .reply(200, tabData);\n+\n+    const wrapper = mount(\n+      <ShortcutProvider hotkeys={hotkeys} keymap={keymap}>\n+        <Provider store={store}>\n+          <InlineTabWrapper {...props} />\n+        </Provider>\n+      </ShortcutProvider>\n+    );\n+    const htmlOutput = wrapper.html();\n+\n+    expect(htmlOutput).toContain('Amerikanische Jungferninseln');\n+    expect(htmlOutput).toContain('Amerikanisch-Samoa');\n+    expect(htmlOutput).toContain('Amerikanisch-Samoa (2)');\n+    expect(htmlOutput).toContain('Am Nossbacher Weg 2');\n+    expect(htmlOutput).toContain(\n+      'Antarktis (Sonderstatus durch Antarktis-Vertrag)'\n+    );\n+    expect(htmlOutput).toContain('Russland'); // all rows should be visible now, including this one\n+    expect(htmlOutput).toContain('meta-icon-fullscreen');\n+  });\n+\n+  it('renders the add new form', () => {\n+    props.dataId = '2155894'; // we pass different docId such that will match the selector used for the mocked up data\n+    // inlineTabStoreMore.showMore['123_AD_Tab-222_2155894'] = false;\n+    inlineTabStoreMore.addNew[`123_AD_Tab-222_2155894`] = {\n+      visible: true,\n+      windowId: '123',\n+      tabId: 'AD_Tab-222',\n+      rowId: '2205259',\n+    };\n+    inlineTabStoreMore[`123_AD_Tab-222_2205259`] = addNewData;\n+    const initialState = createStore({\n+      windowHandler: {\n+        allowShortcut: true,\n+        modal: {\n+          visible: true,\n+        },\n+        inlineTab: inlineTabStoreMore,\n+      },\n+    });\n+    const store = mockStore(initialState);\n+\n+    nock(config.API_URL)\n+      .defaultReplyHeaders({ 'access-control-allow-origin': '*' })\n+      .get(`/window/123/2155894/AD_Tab-222/`)\n+      .reply(200, tabData);\n+\n+    const wrapper = mount(\n+      <ShortcutProvider hotkeys={hotkeys} keymap={keymap}>\n+        <Provider store={store}>\n+          <InlineTabWrapper {...props} />\n+        </Provider>\n+      </ShortcutProvider>\n+    );\n+    const htmlOutput = wrapper.html();\n+\n+    expect(htmlOutput).toContain(\n+      `<div class=\"form-group form-field-BPartnerName\">`\n+    );\n+    expect(htmlOutput).toContain(`<i class=\"meta-icon-close-alt\">`);\n+  });\n+", "originalCommit": "72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg3MTI1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544871251", "bodyText": "That is beyond unit testing. That would be a functional test. Thinking that would be better to add a cypress test for the inlinetab widget. Going to open a mf15 for this", "author": "petrican", "createdAt": "2020-12-17T07:37:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MTg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5NDEzMw==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543494133", "bodyText": "add docs", "author": "siemiatj", "createdAt": "2020-12-15T16:28:20Z", "path": "frontend/src/actions/InlineTabActions.js", "diffHunk": "@@ -0,0 +1,223 @@\n+import { fetchTab } from './WindowActions';\n+import { getLayout, getData } from '../api';\n+import { INLINE_TAB_SHOW_MORE_FROM } from '../constants/Constants';\n+import {\n+  UPDATE_INLINE_TAB_ITEM_FIELDS,\n+  UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+  SET_INLINE_TAB_WRAPPER_DATA,\n+  SET_INLINE_TAB_LAYOUT_AND_DATA,\n+  SET_INLINE_TAB_ADD_NEW,\n+  SET_INLINE_TAB_SHOW_MORE,\n+} from '../constants/ActionTypes';\n+\n+/*\n+ * @method updateInlineTabItemFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Item\n+ *\n+ * @param {string} inlineTabId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabItemFields({ inlineTabId, fieldsByName }) {\n+  return {\n+    type: UPDATE_INLINE_TAB_ITEM_FIELDS,\n+    payload: { inlineTabId, fieldsByName },\n+  };\n+}\n+\n+/*\n+ * @method updateInlineTabWrapperFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Wrapper\n+ *\n+ * @param {string} inlineTabWrapperId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabWrapperFields({\n+  inlineTabWrapperId,\n+  rowId,\n+  response,\n+}) {\n+  return {\n+    type: UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+    payload: { inlineTabWrapperId, rowId, response },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTabWrapper branch in the redux store with the data payload\n+ */\n+export function setInlineTabWrapperData({ inlineTabWrapperId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_WRAPPER_DATA,\n+    payload: { inlineTabWrapperId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the showMore value for the corresponding inlineTabWrapperId\n+ */\n+export function setInlineTabShowMore({ inlineTabWrapperId, showMore }) {\n+  return {\n+    type: SET_INLINE_TAB_SHOW_MORE,\n+    payload: { inlineTabWrapperId, showMore },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab branch in the redux store with the data payload\n+ */\n+export function setInlineTabLayoutAndData({ inlineTabId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_LAYOUT_AND_DATA,\n+    payload: { inlineTabId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab AddNew form related data in the store, visible is for toggling the visibility\n+ */\n+export function setInlineTabAddNew({ visible, windowId, tabId, rowId, docId }) {\n+  return {\n+    type: SET_INLINE_TAB_ADD_NEW,\n+    payload: { visible, windowId, tabId, rowId, docId },\n+  };\n+}\n+\n+/*\n+ * @method fetchInlineTabWrapperData\n+ * @summary Action creator for fetching the data for the `InlineTab` Wrapper (note: wrapper not the inline tab item!)\n+ *\n+ * @param {string} windowId\n+ * @param {string} tabId\n+ * @param {string} docId\n+ * @param {string} query\n+ */\n+export function fetchInlineTabWrapperData({\n+  windowId,\n+  tabId,\n+  docId,\n+  query,\n+  rowId,\n+  postDeletion,\n+}) {\n+  return (dispatch) => {\n+    dispatch(fetchTab({ tabId, windowId, docId, query })).then((tabData) => {\n+      /** - if we have the rowId it means we have a new record addition, so we put that at the end of the array - only if this doesn't happen as a result of deletion */\n+      if (rowId && !postDeletion) {\n+        const lastAdditionIndex = tabData.findIndex(\n+          (item) => item.rowId === rowId\n+        );\n+        if (lastAdditionIndex) {\n+          const tempData = tabData[lastAdditionIndex];\n+          tabData.splice(lastAdditionIndex, 1);\n+          tabData.splice(tabData.length, 0, tempData);\n+        }\n+        dispatch(\n+          setInlineTabShowMore({\n+            inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+            showMore: false,\n+          })\n+        );\n+      }\n+\n+      dispatch(\n+        setInlineTabWrapperData({\n+          inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+          data: tabData,\n+        })\n+      );\n+      /** when we don't have the rowId then we are in the case of the normal rendering, we set the flag to show more (if criteria is met) */\n+      !rowId &&\n+        dispatch(\n+          setInlineTabShowMore({\n+            inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+            showMore: tabData.length > INLINE_TAB_SHOW_MORE_FROM ? true : false,\n+          })\n+        );\n+    });\n+  };\n+}\n+\n+/*\n+ * @method getInlineTabLayoutAndData\n+ * @summary Action creator for fetching and updating the layout and data for the `inlineTab`\n+ *\n+ * @param {string} windowId\n+ * @param {string} tabId\n+ * @param {string} docId\n+ * @param {string} rowId\n+ */\n+export function getInlineTabLayoutAndData({ windowId, tabId, docId, rowId }) {\n+  return (dispatch) => {\n+    getLayout('window', windowId, tabId, null, null, false).then(\n+      ({ data: layoutData }) => {\n+        getData({\n+          entity: 'window',\n+          docType: windowId,\n+          docId,\n+          tabId,\n+          fetchAdvancedFields: false,\n+        }).then(({ data: respFields }) => {\n+          const { result } = respFields;\n+          const wantedData = result.filter((item) => item.rowId === rowId);\n+          dispatch(\n+            setInlineTabLayoutAndData({\n+              inlineTabId: `${windowId}_${tabId}_${rowId}`,\n+              data: { layout: layoutData, data: wantedData[0] },\n+            })\n+          );\n+        });\n+      }\n+    );\n+  };\n+}\n+\n+/**\n+ * @method inlineTabAfterGetLayout\n+ * @summary triggers post layout fetch actions that will update the inline tab layout and data and the inlineTab addNew sub-branch\n+ * @param {object} data - the layout fetched previously with getLayout\n+ * @param {object} disconnectedData - result from initWindow (add new case for inlineTab) - see in the WindowActions what it contains (for debug)\n+ */\n+export function inlineTabAfterGetLayout({ data, disconnectedData }) {\n+  return (dispatch) => {\n+    const inlineTabTargetId = `${disconnectedData.windowId}_${\n+      disconnectedData.tabId\n+    }_${disconnectedData.rowId}`;\n+    dispatch(\n+      setInlineTabLayoutAndData({\n+        inlineTabId: inlineTabTargetId,\n+        data: { layout: data, data: disconnectedData },\n+      })\n+    );\n+    dispatch(\n+      setInlineTabAddNew({\n+        visible: true,\n+        docId: disconnectedData.id,\n+        windowId: disconnectedData.windowId,\n+        tabId: disconnectedData.tabId,\n+        rowId: disconnectedData.rowId,\n+      })\n+    );\n+  };\n+}\n+", "originalCommit": "72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg5NjU1OA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544896558", "bodyText": "Done", "author": "petrican", "createdAt": "2020-12-17T08:24:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5NDEzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTAxNg==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543529016", "bodyText": "can this get a more meaningful name ? I think it's showing the add new form, right ?", "author": "siemiatj", "createdAt": "2020-12-15T17:11:28Z", "path": "frontend/src/actions/InlineTabActions.js", "diffHunk": "@@ -0,0 +1,223 @@\n+import { fetchTab } from './WindowActions';\n+import { getLayout, getData } from '../api';\n+import { INLINE_TAB_SHOW_MORE_FROM } from '../constants/Constants';\n+import {\n+  UPDATE_INLINE_TAB_ITEM_FIELDS,\n+  UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+  SET_INLINE_TAB_WRAPPER_DATA,\n+  SET_INLINE_TAB_LAYOUT_AND_DATA,\n+  SET_INLINE_TAB_ADD_NEW,\n+  SET_INLINE_TAB_SHOW_MORE,\n+} from '../constants/ActionTypes';\n+\n+/*\n+ * @method updateInlineTabItemFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Item\n+ *\n+ * @param {string} inlineTabId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabItemFields({ inlineTabId, fieldsByName }) {\n+  return {\n+    type: UPDATE_INLINE_TAB_ITEM_FIELDS,\n+    payload: { inlineTabId, fieldsByName },\n+  };\n+}\n+\n+/*\n+ * @method updateInlineTabWrapperFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Wrapper\n+ *\n+ * @param {string} inlineTabWrapperId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabWrapperFields({\n+  inlineTabWrapperId,\n+  rowId,\n+  response,\n+}) {\n+  return {\n+    type: UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+    payload: { inlineTabWrapperId, rowId, response },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTabWrapper branch in the redux store with the data payload\n+ */\n+export function setInlineTabWrapperData({ inlineTabWrapperId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_WRAPPER_DATA,\n+    payload: { inlineTabWrapperId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the showMore value for the corresponding inlineTabWrapperId\n+ */\n+export function setInlineTabShowMore({ inlineTabWrapperId, showMore }) {\n+  return {\n+    type: SET_INLINE_TAB_SHOW_MORE,\n+    payload: { inlineTabWrapperId, showMore },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab branch in the redux store with the data payload\n+ */\n+export function setInlineTabLayoutAndData({ inlineTabId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_LAYOUT_AND_DATA,\n+    payload: { inlineTabId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab AddNew form related data in the store, visible is for toggling the visibility\n+ */\n+export function setInlineTabAddNew({ visible, windowId, tabId, rowId, docId }) {\n+  return {\n+    type: SET_INLINE_TAB_ADD_NEW,\n+    payload: { visible, windowId, tabId, rowId, docId },\n+  };\n+}\n+\n+/*\n+ * @method fetchInlineTabWrapperData\n+ * @summary Action creator for fetching the data for the `InlineTab` Wrapper (note: wrapper not the inline tab item!)\n+ *\n+ * @param {string} windowId\n+ * @param {string} tabId\n+ * @param {string} docId\n+ * @param {string} query\n+ */\n+export function fetchInlineTabWrapperData({\n+  windowId,\n+  tabId,\n+  docId,\n+  query,\n+  rowId,\n+  postDeletion,\n+}) {\n+  return (dispatch) => {\n+    dispatch(fetchTab({ tabId, windowId, docId, query })).then((tabData) => {\n+      /** - if we have the rowId it means we have a new record addition, so we put that at the end of the array - only if this doesn't happen as a result of deletion */\n+      if (rowId && !postDeletion) {\n+        const lastAdditionIndex = tabData.findIndex(\n+          (item) => item.rowId === rowId\n+        );\n+        if (lastAdditionIndex) {\n+          const tempData = tabData[lastAdditionIndex];\n+          tabData.splice(lastAdditionIndex, 1);\n+          tabData.splice(tabData.length, 0, tempData);\n+        }\n+        dispatch(\n+          setInlineTabShowMore({\n+            inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+            showMore: false,\n+          })\n+        );\n+      }\n+\n+      dispatch(\n+        setInlineTabWrapperData({\n+          inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+          data: tabData,\n+        })\n+      );\n+      /** when we don't have the rowId then we are in the case of the normal rendering, we set the flag to show more (if criteria is met) */\n+      !rowId &&\n+        dispatch(\n+          setInlineTabShowMore({\n+            inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+            showMore: tabData.length > INLINE_TAB_SHOW_MORE_FROM ? true : false,\n+          })\n+        );\n+    });\n+  };\n+}\n+\n+/*\n+ * @method getInlineTabLayoutAndData\n+ * @summary Action creator for fetching and updating the layout and data for the `inlineTab`\n+ *\n+ * @param {string} windowId\n+ * @param {string} tabId\n+ * @param {string} docId\n+ * @param {string} rowId\n+ */\n+export function getInlineTabLayoutAndData({ windowId, tabId, docId, rowId }) {\n+  return (dispatch) => {\n+    getLayout('window', windowId, tabId, null, null, false).then(\n+      ({ data: layoutData }) => {\n+        getData({\n+          entity: 'window',\n+          docType: windowId,\n+          docId,\n+          tabId,\n+          fetchAdvancedFields: false,\n+        }).then(({ data: respFields }) => {\n+          const { result } = respFields;\n+          const wantedData = result.filter((item) => item.rowId === rowId);\n+          dispatch(\n+            setInlineTabLayoutAndData({\n+              inlineTabId: `${windowId}_${tabId}_${rowId}`,\n+              data: { layout: layoutData, data: wantedData[0] },\n+            })\n+          );\n+        });\n+      }\n+    );\n+  };\n+}\n+\n+/**\n+ * @method inlineTabAfterGetLayout\n+ * @summary triggers post layout fetch actions that will update the inline tab layout and data and the inlineTab addNew sub-branch\n+ * @param {object} data - the layout fetched previously with getLayout\n+ * @param {object} disconnectedData - result from initWindow (add new case for inlineTab) - see in the WindowActions what it contains (for debug)\n+ */\n+export function inlineTabAfterGetLayout({ data, disconnectedData }) {\n+  return (dispatch) => {\n+    const inlineTabTargetId = `${disconnectedData.windowId}_${\n+      disconnectedData.tabId\n+    }_${disconnectedData.rowId}`;\n+    dispatch(\n+      setInlineTabLayoutAndData({\n+        inlineTabId: inlineTabTargetId,\n+        data: { layout: data, data: disconnectedData },\n+      })\n+    );\n+    dispatch(\n+      setInlineTabAddNew({", "originalCommit": "72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg0MzE4MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544843180", "bodyText": "it sets in the inlineTab structure the addNew branch", "author": "petrican", "createdAt": "2020-12-17T06:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTAxNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTk1NA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543529954", "bodyText": "This name also doesn't say much. It's not only passing layout but also rows data, so something like updateInlineTab would make more sense.", "author": "siemiatj", "createdAt": "2020-12-15T17:12:44Z", "path": "frontend/src/actions/InlineTabActions.js", "diffHunk": "@@ -0,0 +1,223 @@\n+import { fetchTab } from './WindowActions';\n+import { getLayout, getData } from '../api';\n+import { INLINE_TAB_SHOW_MORE_FROM } from '../constants/Constants';\n+import {\n+  UPDATE_INLINE_TAB_ITEM_FIELDS,\n+  UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+  SET_INLINE_TAB_WRAPPER_DATA,\n+  SET_INLINE_TAB_LAYOUT_AND_DATA,\n+  SET_INLINE_TAB_ADD_NEW,\n+  SET_INLINE_TAB_SHOW_MORE,\n+} from '../constants/ActionTypes';\n+\n+/*\n+ * @method updateInlineTabItemFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Item\n+ *\n+ * @param {string} inlineTabId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabItemFields({ inlineTabId, fieldsByName }) {\n+  return {\n+    type: UPDATE_INLINE_TAB_ITEM_FIELDS,\n+    payload: { inlineTabId, fieldsByName },\n+  };\n+}\n+\n+/*\n+ * @method updateInlineTabWrapperFields\n+ * @summary Action creator for updating the fields for the `InlineTab` Wrapper\n+ *\n+ * @param {string} inlineTabWrapperId\n+ * @param {string} rowId\n+ * @param {object} fieldsByName\n+ */\n+export function updateInlineTabWrapperFields({\n+  inlineTabWrapperId,\n+  rowId,\n+  response,\n+}) {\n+  return {\n+    type: UPDATE_INLINE_TAB_WRAPPER_FIELDS,\n+    payload: { inlineTabWrapperId, rowId, response },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTabWrapper branch in the redux store with the data payload\n+ */\n+export function setInlineTabWrapperData({ inlineTabWrapperId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_WRAPPER_DATA,\n+    payload: { inlineTabWrapperId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the showMore value for the corresponding inlineTabWrapperId\n+ */\n+export function setInlineTabShowMore({ inlineTabWrapperId, showMore }) {\n+  return {\n+    type: SET_INLINE_TAB_SHOW_MORE,\n+    payload: { inlineTabWrapperId, showMore },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab branch in the redux store with the data payload\n+ */\n+export function setInlineTabLayoutAndData({ inlineTabId, data }) {\n+  return {\n+    type: SET_INLINE_TAB_LAYOUT_AND_DATA,\n+    payload: { inlineTabId, data },\n+  };\n+}\n+\n+/*\n+ * Action creator called to set the inlineTab AddNew form related data in the store, visible is for toggling the visibility\n+ */\n+export function setInlineTabAddNew({ visible, windowId, tabId, rowId, docId }) {\n+  return {\n+    type: SET_INLINE_TAB_ADD_NEW,\n+    payload: { visible, windowId, tabId, rowId, docId },\n+  };\n+}\n+\n+/*\n+ * @method fetchInlineTabWrapperData\n+ * @summary Action creator for fetching the data for the `InlineTab` Wrapper (note: wrapper not the inline tab item!)\n+ *\n+ * @param {string} windowId\n+ * @param {string} tabId\n+ * @param {string} docId\n+ * @param {string} query\n+ */\n+export function fetchInlineTabWrapperData({\n+  windowId,\n+  tabId,\n+  docId,\n+  query,\n+  rowId,\n+  postDeletion,\n+}) {\n+  return (dispatch) => {\n+    dispatch(fetchTab({ tabId, windowId, docId, query })).then((tabData) => {\n+      /** - if we have the rowId it means we have a new record addition, so we put that at the end of the array - only if this doesn't happen as a result of deletion */\n+      if (rowId && !postDeletion) {\n+        const lastAdditionIndex = tabData.findIndex(\n+          (item) => item.rowId === rowId\n+        );\n+        if (lastAdditionIndex) {\n+          const tempData = tabData[lastAdditionIndex];\n+          tabData.splice(lastAdditionIndex, 1);\n+          tabData.splice(tabData.length, 0, tempData);\n+        }\n+        dispatch(\n+          setInlineTabShowMore({\n+            inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+            showMore: false,\n+          })\n+        );\n+      }\n+\n+      dispatch(\n+        setInlineTabWrapperData({\n+          inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+          data: tabData,\n+        })\n+      );\n+      /** when we don't have the rowId then we are in the case of the normal rendering, we set the flag to show more (if criteria is met) */\n+      !rowId &&\n+        dispatch(\n+          setInlineTabShowMore({\n+            inlineTabWrapperId: `${windowId}_${tabId}_${docId}`,\n+            showMore: tabData.length > INLINE_TAB_SHOW_MORE_FROM ? true : false,\n+          })\n+        );\n+    });\n+  };\n+}\n+\n+/*\n+ * @method getInlineTabLayoutAndData\n+ * @summary Action creator for fetching and updating the layout and data for the `inlineTab`\n+ *\n+ * @param {string} windowId\n+ * @param {string} tabId\n+ * @param {string} docId\n+ * @param {string} rowId\n+ */\n+export function getInlineTabLayoutAndData({ windowId, tabId, docId, rowId }) {\n+  return (dispatch) => {\n+    getLayout('window', windowId, tabId, null, null, false).then(\n+      ({ data: layoutData }) => {\n+        getData({\n+          entity: 'window',\n+          docType: windowId,\n+          docId,\n+          tabId,\n+          fetchAdvancedFields: false,\n+        }).then(({ data: respFields }) => {\n+          const { result } = respFields;\n+          const wantedData = result.filter((item) => item.rowId === rowId);\n+          dispatch(\n+            setInlineTabLayoutAndData({\n+              inlineTabId: `${windowId}_${tabId}_${rowId}`,\n+              data: { layout: layoutData, data: wantedData[0] },\n+            })\n+          );\n+        });\n+      }\n+    );\n+  };\n+}\n+\n+/**\n+ * @method inlineTabAfterGetLayout\n+ * @summary triggers post layout fetch actions that will update the inline tab layout and data and the inlineTab addNew sub-branch\n+ * @param {object} data - the layout fetched previously with getLayout\n+ * @param {object} disconnectedData - result from initWindow (add new case for inlineTab) - see in the WindowActions what it contains (for debug)\n+ */\n+export function inlineTabAfterGetLayout({ data, disconnectedData }) {", "originalCommit": "72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDg0MjQ5Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544842497", "bodyText": "This is refreshing the inlineTab after the Get Layout action happen( it is a post get layout action). Named like that to see it also in code what it does.", "author": "petrican", "createdAt": "2020-12-17T06:27:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzUyOTk1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MzcwMw==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r543573703", "bodyText": "Did we change the structure for Switch widgets ?", "author": "siemiatj", "createdAt": "2020-12-15T18:12:42Z", "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -412,9 +413,11 @@ export class RawWidget extends PureComponent {\n     }\n \n     // TODO: API SHOULD RETURN THE SAME PROPERTIES FOR FILTERS\n-    const widgetField = filterWidget\n-      ? fields[0].parameterName\n-      : fields[0].field;\n+    let widgetField = filterWidget ? fields[0].parameterName : fields[0].field;\n+    if (!widgetField && this.props.widgetType === 'Switch') {\n+      widgetField = fields[0].fields[0].field;", "originalCommit": "72ae73b53cf0243bf5886ba2b8435dcabd6668d8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkwNzA5OA==", "url": "https://github.com/metasfresh/metasfresh/pull/10301#discussion_r544907098", "bodyText": "Nope. It's just a safety check", "author": "petrican", "createdAt": "2020-12-17T08:41:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU3MzcwMw=="}], "type": "inlineReview"}, {"oid": "073869c6d607e44cc4aeb161d05deb17d48a0267", "url": "https://github.com/metasfresh/metasfresh/commit/073869c6d607e44cc4aeb161d05deb17d48a0267", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-17T06:10:04Z", "type": "commit"}, {"oid": "5923ec229ef021296d214bfd64ebcd2fc46e06b1", "url": "https://github.com/metasfresh/metasfresh/commit/5923ec229ef021296d214bfd64ebcd2fc46e06b1", "message": "Define selector before multiple usage", "committedDate": "2020-12-17T08:01:14Z", "type": "commit"}, {"oid": "394b127638406b19b0431ded8d3fee0abcb3ac66", "url": "https://github.com/metasfresh/metasfresh/commit/394b127638406b19b0431ded8d3fee0abcb3ac66", "message": "Add doc to patchInlineTab", "committedDate": "2020-12-17T08:23:55Z", "type": "commit"}, {"oid": "d1e87aae1a5853b3c059fa38854f27ac20de03eb", "url": "https://github.com/metasfresh/metasfresh/commit/d1e87aae1a5853b3c059fa38854f27ac20de03eb", "message": "Colors", "committedDate": "2020-12-17T08:48:05Z", "type": "commit"}, {"oid": "ff7714206ca2cd6a8e360cfdbfca618314705d0a", "url": "https://github.com/metasfresh/metasfresh/commit/ff7714206ca2cd6a8e360cfdbfca618314705d0a", "message": "More post review fixes", "committedDate": "2020-12-17T08:56:37Z", "type": "commit"}, {"oid": "4c1fcfab5218eb3607cdb2288213e01363b2d62d", "url": "https://github.com/metasfresh/metasfresh/commit/4c1fcfab5218eb3607cdb2288213e01363b2d62d", "message": "fix typo", "committedDate": "2020-12-17T08:57:41Z", "type": "commit"}, {"oid": "8c44a547ab2dac9b964fa5f8f7e24f74fccef8fa", "url": "https://github.com/metasfresh/metasfresh/commit/8c44a547ab2dac9b964fa5f8f7e24f74fccef8fa", "message": "Fix css", "committedDate": "2020-12-17T12:22:47Z", "type": "commit"}, {"oid": "73832f0d2939e13a92e6e669b603de122022c7a9", "url": "https://github.com/metasfresh/metasfresh/commit/73832f0d2939e13a92e6e669b603de122022c7a9", "message": "Stay in full screen if more than five and we click on AddNew", "committedDate": "2020-12-17T12:46:51Z", "type": "commit"}, {"oid": "8a571ca9eae773b801ee83cb41b450b28e2af232", "url": "https://github.com/metasfresh/metasfresh/commit/8a571ca9eae773b801ee83cb41b450b28e2af232", "message": "Introduce InlineTab widget type", "committedDate": "2020-11-24T20:32:49Z", "type": "commit"}, {"oid": "f0335026c4e7f6bdd5d2f6302127c74d63740d58", "url": "https://github.com/metasfresh/metasfresh/commit/f0335026c4e7f6bdd5d2f6302127c74d63740d58", "message": "5573030_sys_gh10275_BPartnerWindow_make_Locations_inline_tab.sql", "committedDate": "2020-11-24T20:34:35Z", "type": "commit"}, {"oid": "7504dcf083f3e9416d3832f1762060261b748b27", "url": "https://github.com/metasfresh/metasfresh/commit/7504dcf083f3e9416d3832f1762060261b748b27", "message": "ADWindowDAO: handle Inline_Tab_ID when copying AD_UI_Element(s)", "committedDate": "2020-11-24T20:38:00Z", "type": "commit"}, {"oid": "75815f3f85eed66bbcd3bc701feff4bf7b9786f5", "url": "https://github.com/metasfresh/metasfresh/commit/75815f3f85eed66bbcd3bc701feff4bf7b9786f5", "message": "fix failing test", "committedDate": "2020-11-25T08:37:50Z", "type": "commit"}, {"oid": "9db843c4684c06ac9d916da90c45cb6ba9b8df86", "url": "https://github.com/metasfresh/metasfresh/commit/9db843c4684c06ac9d916da90c45cb6ba9b8df86", "message": "Add placeholder for the InlineTab component", "committedDate": "2020-11-25T09:24:28Z", "type": "commit"}, {"oid": "e1e8bf712ab0275617e5bb2f0bb15e951498e756", "url": "https://github.com/metasfresh/metasfresh/commit/e1e8bf712ab0275617e5bb2f0bb15e951498e756", "message": "Bypass the issues with the rendering", "committedDate": "2020-11-25T10:54:49Z", "type": "commit"}, {"oid": "e256f34ab6dfa35072dbd51dbacfbb5d3b494d63", "url": "https://github.com/metasfresh/metasfresh/commit/e256f34ab6dfa35072dbd51dbacfbb5d3b494d63", "message": "prepare toggle and the skeleton for the actual elements", "committedDate": "2020-11-25T13:40:39Z", "type": "commit"}, {"oid": "c51f37698cbc7e2252ec7c3de16cebcc862c0d97", "url": "https://github.com/metasfresh/metasfresh/commit/c51f37698cbc7e2252ec7c3de16cebcc862c0d97", "message": "Add separator", "committedDate": "2020-11-25T13:59:52Z", "type": "commit"}, {"oid": "5e0eb4f2bbd7704a46bf221a687bbd6cd8311d38", "url": "https://github.com/metasfresh/metasfresh/commit/5e0eb4f2bbd7704a46bf221a687bbd6cd8311d38", "message": "Spacing", "committedDate": "2020-11-25T15:22:41Z", "type": "commit"}, {"oid": "2e6b002c38ed01e9e20bd01b9785c7f55606caa3", "url": "https://github.com/metasfresh/metasfresh/commit/2e6b002c38ed01e9e20bd01b9785c7f55606caa3", "message": "Correct the type", "committedDate": "2020-11-26T06:02:08Z", "type": "commit"}, {"oid": "f02e81529e8e5d15b6e82db7de52120589be9cde", "url": "https://github.com/metasfresh/metasfresh/commit/f02e81529e8e5d15b6e82db7de52120589be9cde", "message": "fetchTab in the wrapper", "committedDate": "2020-11-26T06:33:51Z", "type": "commit"}, {"oid": "60796acd6ada01ba02386892550d6a0099c45a8d", "url": "https://github.com/metasfresh/metasfresh/commit/60796acd6ada01ba02386892550d6a0099c45a8d", "message": "Put the name and address in the item listing", "committedDate": "2020-11-26T07:35:09Z", "type": "commit"}, {"oid": "b3bef68d21c08c2f93a38971c57daf00f1a2c65e", "url": "https://github.com/metasfresh/metasfresh/commit/b3bef68d21c08c2f93a38971c57daf00f1a2c65e", "message": "Some cleanup", "committedDate": "2020-11-26T07:36:40Z", "type": "commit"}, {"oid": "44f21471d7fb3383a2c0258ed25ea4da472116d9", "url": "https://github.com/metasfresh/metasfresh/commit/44f21471d7fb3383a2c0258ed25ea4da472116d9", "message": "Close the form", "committedDate": "2020-11-26T08:17:37Z", "type": "commit"}, {"oid": "c02f6d15626f888ab634e6e0353bfa96ede31266", "url": "https://github.com/metasfresh/metasfresh/commit/c02f6d15626f888ab634e6e0353bfa96ede31266", "message": "prerequisites for getting the layout and data", "committedDate": "2020-11-26T10:54:45Z", "type": "commit"}, {"oid": "6ac8765b8a3f5f97dfb50a3d7559b2cd78f228ea", "url": "https://github.com/metasfresh/metasfresh/commit/6ac8765b8a3f5f97dfb50a3d7559b2cd78f228ea", "message": "Diff selector special for the inline tab", "committedDate": "2020-11-26T12:38:36Z", "type": "commit"}, {"oid": "d97d319b84ba30256c7f73d94f2371114d7d6664", "url": "https://github.com/metasfresh/metasfresh/commit/d97d319b84ba30256c7f73d94f2371114d7d6664", "message": "- put some basic plumbing in place", "committedDate": "2020-11-27T01:27:48Z", "type": "commit"}, {"oid": "e8df609b4945a82ab875e0543784af405b93b1f4", "url": "https://github.com/metasfresh/metasfresh/commit/e8df609b4945a82ab875e0543784af405b93b1f4", "message": "RawWidget rendering", "committedDate": "2020-11-27T07:35:48Z", "type": "commit"}, {"oid": "9fb5111088d9bd94a24b87592c0a6f8fb82eed19", "url": "https://github.com/metasfresh/metasfresh/commit/9fb5111088d9bd94a24b87592c0a6f8fb82eed19", "message": "Css changes to adapt", "committedDate": "2020-11-27T07:46:38Z", "type": "commit"}, {"oid": "7839b8c360583b5463c4b5aa98a582814024aaa7", "url": "https://github.com/metasfresh/metasfresh/commit/7839b8c360583b5463c4b5aa98a582814024aaa7", "message": "Remove lock file from e2e structure", "committedDate": "2020-12-02T06:00:42Z", "type": "commit"}, {"oid": "ff5b64fdcf08d25231fe2e8b9d0ead2d06250cd2", "url": "https://github.com/metasfresh/metasfresh/commit/ff5b64fdcf08d25231fe2e8b9d0ead2d06250cd2", "message": "Wire up with the redux store", "committedDate": "2020-12-03T08:49:14Z", "type": "commit"}, {"oid": "dd2d83c19690ea360ae6a4e4f32aa6c53e38686d", "url": "https://github.com/metasfresh/metasfresh/commit/dd2d83c19690ea360ae6a4e4f32aa6c53e38686d", "message": "Fix expected type", "committedDate": "2020-12-03T08:50:14Z", "type": "commit"}, {"oid": "5d535b7dc3bfa73bbd8f8a0da872414caaef158a", "url": "https://github.com/metasfresh/metasfresh/commit/5d535b7dc3bfa73bbd8f8a0da872414caaef158a", "message": "Safety check on the Attributes comp", "committedDate": "2020-12-03T10:17:46Z", "type": "commit"}, {"oid": "7b65f00b5af07d2ef46af2ef5ae3aed770612f34", "url": "https://github.com/metasfresh/metasfresh/commit/7b65f00b5af07d2ef46af2ef5ae3aed770612f34", "message": "Another safety check for the attributes", "committedDate": "2020-12-03T12:36:59Z", "type": "commit"}, {"oid": "2c7be7747d8cbf46811db430da4957c2cfa25981", "url": "https://github.com/metasfresh/metasfresh/commit/2c7be7747d8cbf46811db430da4957c2cfa25981", "message": "Put InlineTabWrapper data into the store also", "committedDate": "2020-12-03T13:36:28Z", "type": "commit"}, {"oid": "11db00caa10a46dc70a993576ac998cc49fffc0f", "url": "https://github.com/metasfresh/metasfresh/commit/11db00caa10a46dc70a993576ac998cc49fffc0f", "message": "Prerequisites for updating in the store the property using disconnected flag", "committedDate": "2020-12-03T14:39:44Z", "type": "commit"}, {"oid": "1c13a142652d92423adc00c430a892fcfd0dd914", "url": "https://github.com/metasfresh/metasfresh/commit/1c13a142652d92423adc00c430a892fcfd0dd914", "message": "move logic from component to the WindowActions", "committedDate": "2020-12-04T06:35:47Z", "type": "commit"}, {"oid": "d822d520ac95dea18c4675f2c442a76233404dab", "url": "https://github.com/metasfresh/metasfresh/commit/d822d520ac95dea18c4675f2c442a76233404dab", "message": "Update on patch", "committedDate": "2020-12-04T07:42:09Z", "type": "commit"}, {"oid": "e21ac9be77102d68d73cd80f877c6d4f1c0a2ac3", "url": "https://github.com/metasfresh/metasfresh/commit/e21ac9be77102d68d73cd80f877c6d4f1c0a2ac3", "message": "Add update on the wrapper", "committedDate": "2020-12-04T10:04:12Z", "type": "commit"}, {"oid": "88687583a5c9e2563a4b789c72ec976670bff3bb", "url": "https://github.com/metasfresh/metasfresh/commit/88687583a5c9e2563a4b789c72ec976670bff3bb", "message": "Sync data with the store", "committedDate": "2020-12-04T12:56:23Z", "type": "commit"}, {"oid": "bc6ca895f690185d4855d19402e7390d168b0bb4", "url": "https://github.com/metasfresh/metasfresh/commit/bc6ca895f690185d4855d19402e7390d168b0bb4", "message": "Put parameters to createWindow method", "committedDate": "2020-12-04T14:52:17Z", "type": "commit"}, {"oid": "11dde4e8fa7c99ecda32fdff7ba2d34ab25ecb96", "url": "https://github.com/metasfresh/metasfresh/commit/11dde4e8fa7c99ecda32fdff7ba2d34ab25ecb96", "message": "Move addNew to a sub branch in inlineTab", "committedDate": "2020-12-07T08:48:05Z", "type": "commit"}, {"oid": "310887b1a9942802c7791824660ca530da875127", "url": "https://github.com/metasfresh/metasfresh/commit/310887b1a9942802c7791824660ca530da875127", "message": "Prerequisites for rendering the window in the add new dropdown", "committedDate": "2020-12-07T10:07:57Z", "type": "commit"}, {"oid": "9f52958d33343bdc9417cf02fdf9bd3c4c9ae31b", "url": "https://github.com/metasfresh/metasfresh/commit/9f52958d33343bdc9417cf02fdf9bd3c4c9ae31b", "message": "Added some safety check", "committedDate": "2020-12-07T10:51:59Z", "type": "commit"}, {"oid": "63da2b0429725e510ab80ee2002681bc57beed70", "url": "https://github.com/metasfresh/metasfresh/commit/63da2b0429725e510ab80ee2002681bc57beed70", "message": "Remove debug", "committedDate": "2020-12-07T10:53:27Z", "type": "commit"}, {"oid": "3b062bf5e34d72dd6e7012c1038f0dd8d101aac5", "url": "https://github.com/metasfresh/metasfresh/commit/3b062bf5e34d72dd6e7012c1038f0dd8d101aac5", "message": "Mark rows with errors", "committedDate": "2020-12-07T12:17:40Z", "type": "commit"}, {"oid": "a4dbfc569217ff3dabeded81624fe2bc47e19f85", "url": "https://github.com/metasfresh/metasfresh/commit/a4dbfc569217ff3dabeded81624fe2bc47e19f85", "message": "Fix conflicts", "committedDate": "2020-12-07T13:31:06Z", "type": "commit"}, {"oid": "d424c2d3dd7bf183caf6327d4934a458d8c72529", "url": "https://github.com/metasfresh/metasfresh/commit/d424c2d3dd7bf183caf6327d4934a458d8c72529", "message": "Refresh the widget on close", "committedDate": "2020-12-07T13:42:49Z", "type": "commit"}, {"oid": "5061d89f92531ba408538812f7049ced9526f1d0", "url": "https://github.com/metasfresh/metasfresh/commit/5061d89f92531ba408538812f7049ced9526f1d0", "message": "#10357 as discussed with Teo, don't return empty strings anymore. https://github.com/metasfresh/metasfresh/issues/10357", "committedDate": "2020-12-07T13:43:43Z", "type": "commit"}, {"oid": "38946068ec44b0fb5cfe89b52a65564c47afaa99", "url": "https://github.com/metasfresh/metasfresh/commit/38946068ec44b0fb5cfe89b52a65564c47afaa99", "message": "Merge remote-tracking branch 'origin/gh10275' into gh10275", "committedDate": "2020-12-07T13:53:13Z", "type": "commit"}, {"oid": "fa43b7be398ee9e914c3a895de7ad6a1cb30d728", "url": "https://github.com/metasfresh/metasfresh/commit/fa43b7be398ee9e914c3a895de7ad6a1cb30d728", "message": "avoid NPE", "committedDate": "2020-12-07T13:55:30Z", "type": "commit"}, {"oid": "45f0cfbf4994b1f266f3d350292fd79328fb56da", "url": "https://github.com/metasfresh/metasfresh/commit/45f0cfbf4994b1f266f3d350292fd79328fb56da", "message": "Refresh edited line", "committedDate": "2020-12-07T14:02:27Z", "type": "commit"}, {"oid": "44130ca2506e5994edf01d73bdd667a7539de9c2", "url": "https://github.com/metasfresh/metasfresh/commit/44130ca2506e5994edf01d73bdd667a7539de9c2", "message": "Merge branch 'gh10275' of github.com:metasfresh/metasfresh into gh10275", "committedDate": "2020-12-07T14:02:38Z", "type": "commit"}, {"oid": "943ffca2ad1956b4afa17dfd0f500250f1283b69", "url": "https://github.com/metasfresh/metasfresh/commit/943ffca2ad1956b4afa17dfd0f500250f1283b69", "message": "Rename Window component into SectionGroup", "committedDate": "2020-12-07T14:53:29Z", "type": "commit"}, {"oid": "39fc694815f9731343039f14a5152d5d7223b8c2", "url": "https://github.com/metasfresh/metasfresh/commit/39fc694815f9731343039f14a5152d5d7223b8c2", "message": "Prerequisites for the delete button", "committedDate": "2020-12-08T06:47:26Z", "type": "commit"}, {"oid": "66e4fc786745be8c405fa06bf02c6eb9a73adb1c", "url": "https://github.com/metasfresh/metasfresh/commit/66e4fc786745be8c405fa06bf02c6eb9a73adb1c", "message": "Add prompt to show before the delete action", "committedDate": "2020-12-08T08:01:37Z", "type": "commit"}, {"oid": "1b40b584e834d30a7bc31f80a9f48a580a245aa5", "url": "https://github.com/metasfresh/metasfresh/commit/1b40b584e834d30a7bc31f80a9f48a580a245aa5", "message": "Some safety check on valid", "committedDate": "2020-12-08T09:36:00Z", "type": "commit"}, {"oid": "258ce47a2860f85d5fc6586948a297d6d928dc6e", "url": "https://github.com/metasfresh/metasfresh/commit/258ce47a2860f85d5fc6586948a297d6d928dc6e", "message": "Cleanup actions and put them in InlineTabActions", "committedDate": "2020-12-08T10:30:06Z", "type": "commit"}, {"oid": "c8fd24cd5427b699edfd07327dc90456546ccac6", "url": "https://github.com/metasfresh/metasfresh/commit/c8fd24cd5427b699edfd07327dc90456546ccac6", "message": "Merged master into local branch", "committedDate": "2020-12-08T10:36:25Z", "type": "commit"}, {"oid": "3106e381bd285ec79909c4900a145ecf4d56af3e", "url": "https://github.com/metasfresh/metasfresh/commit/3106e381bd285ec79909c4900a145ecf4d56af3e", "message": "Get rid of that annoying warning message", "committedDate": "2020-12-08T13:06:52Z", "type": "commit"}, {"oid": "60818f71b921ce83c6d9f359f5d784bccb457576", "url": "https://github.com/metasfresh/metasfresh/commit/60818f71b921ce83c6d9f359f5d784bccb457576", "message": "Prepare Prompt strings for the BE changes", "committedDate": "2020-12-08T13:12:57Z", "type": "commit"}, {"oid": "11ed45a89c53509930ab53ebf251b2259cb23bf3", "url": "https://github.com/metasfresh/metasfresh/commit/11ed45a89c53509930ab53ebf251b2259cb23bf3", "message": "Fix prompt strings in other areas of the site", "committedDate": "2020-12-08T13:18:52Z", "type": "commit"}, {"oid": "cc6fe7d70e2c728483ef1f2493e8b037d5a5af75", "url": "https://github.com/metasfresh/metasfresh/commit/cc6fe7d70e2c728483ef1f2493e8b037d5a5af75", "message": "Document the InlineTabWrapper", "committedDate": "2020-12-08T14:03:47Z", "type": "commit"}, {"oid": "906ac48de489dd0cd042364e963fc33e64090047", "url": "https://github.com/metasfresh/metasfresh/commit/906ac48de489dd0cd042364e963fc33e64090047", "message": "Inline tab doc", "committedDate": "2020-12-08T14:21:22Z", "type": "commit"}, {"oid": "9e561c75aa080ee5dd44ae1323c762db768286ad", "url": "https://github.com/metasfresh/metasfresh/commit/9e561c75aa080ee5dd44ae1323c762db768286ad", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-08T14:23:12Z", "type": "commit"}, {"oid": "c3f2502b062989c26497a2bf5627aeab834a0328", "url": "https://github.com/metasfresh/metasfresh/commit/c3f2502b062989c26497a2bf5627aeab834a0328", "message": "Some more cleanup", "committedDate": "2020-12-08T14:53:44Z", "type": "commit"}, {"oid": "731dd663f0dc02998c4a3e386cf175679c906f38", "url": "https://github.com/metasfresh/metasfresh/commit/731dd663f0dc02998c4a3e386cf175679c906f38", "message": "Sync the confirm dialog messages with the ones received from BE", "committedDate": "2020-12-09T06:35:37Z", "type": "commit"}, {"oid": "de5b58e6131cd3d2bf6107353688123cab6f5d70", "url": "https://github.com/metasfresh/metasfresh/commit/de5b58e6131cd3d2bf6107353688123cab6f5d70", "message": "Always put the last addition at the end of the list", "committedDate": "2020-12-09T08:02:25Z", "type": "commit"}, {"oid": "b6f312d706901c5a2ba2ef40f8b7819c389a3708", "url": "https://github.com/metasfresh/metasfresh/commit/b6f312d706901c5a2ba2ef40f8b7819c389a3708", "message": "Prerequisites for show more", "committedDate": "2020-12-09T10:32:11Z", "type": "commit"}, {"oid": "7c506d42c189ac104dc0cd3ff134457991e605b4", "url": "https://github.com/metasfresh/metasfresh/commit/7c506d42c189ac104dc0cd3ff134457991e605b4", "message": "Show more logic", "committedDate": "2020-12-09T12:10:39Z", "type": "commit"}, {"oid": "fd41872b70f12250ad1a7ab98067c3bf5fd1c10c", "url": "https://github.com/metasfresh/metasfresh/commit/fd41872b70f12250ad1a7ab98067c3bf5fd1c10c", "message": "Added doc for the function", "committedDate": "2020-12-09T12:16:10Z", "type": "commit"}, {"oid": "08cf0fa69699cceda6debf897c11d42bb66e9c4f", "url": "https://github.com/metasfresh/metasfresh/commit/08cf0fa69699cceda6debf897c11d42bb66e9c4f", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-09T12:17:44Z", "type": "commit"}, {"oid": "8d83504226fd6bed753bb226b022c866cb089030", "url": "https://github.com/metasfresh/metasfresh/commit/8d83504226fd6bed753bb226b022c866cb089030", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-09T12:20:31Z", "type": "commit"}, {"oid": "06c2b885f341b1a05330662e5bce5eedb918fd3a", "url": "https://github.com/metasfresh/metasfresh/commit/06c2b885f341b1a05330662e5bce5eedb918fd3a", "message": "reuse functionality using toggleShowMore", "committedDate": "2020-12-09T12:30:02Z", "type": "commit"}, {"oid": "b738578441d0db2a5ac68011d4544b8db44f06b4", "url": "https://github.com/metasfresh/metasfresh/commit/b738578441d0db2a5ac68011d4544b8db44f06b4", "message": "Dont Show less when is not the case", "committedDate": "2020-12-09T13:08:39Z", "type": "commit"}, {"oid": "c41a277f81d94b5ed1344cebc8b47d3d1020b85a", "url": "https://github.com/metasfresh/metasfresh/commit/c41a277f81d94b5ed1344cebc8b47d3d1020b85a", "message": "css fix for action buttons", "committedDate": "2020-12-09T13:22:35Z", "type": "commit"}, {"oid": "f1b5fb37a13cc53a76f7ce7d30c86188ca67c0f1", "url": "https://github.com/metasfresh/metasfresh/commit/f1b5fb37a13cc53a76f7ce7d30c86188ca67c0f1", "message": "Fix addNew for multi widget presence", "committedDate": "2020-12-09T14:23:56Z", "type": "commit"}, {"oid": "65a3ec6197f330a2b90e3f1efd6a0a98cdfcfd21", "url": "https://github.com/metasfresh/metasfresh/commit/65a3ec6197f330a2b90e3f1efd6a0a98cdfcfd21", "message": "Ditch hardcoded Show more/Show less...", "committedDate": "2020-12-09T15:07:49Z", "type": "commit"}, {"oid": "f4f4ffd387e14e2604be8c698b149110418979af", "url": "https://github.com/metasfresh/metasfresh/commit/f4f4ffd387e14e2604be8c698b149110418979af", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-10T06:18:50Z", "type": "commit"}, {"oid": "1d1f1dd405798eaac5aa4044b72f05909327624f", "url": "https://github.com/metasfresh/metasfresh/commit/1d1f1dd405798eaac5aa4044b72f05909327624f", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-10T08:35:40Z", "type": "commit"}, {"oid": "231d2dc7e766c577e87a065e64aa6b8a754cd851", "url": "https://github.com/metasfresh/metasfresh/commit/231d2dc7e766c577e87a065e64aa6b8a754cd851", "message": "Add display order by first 4 fields", "committedDate": "2020-12-10T09:48:42Z", "type": "commit"}, {"oid": "62c468697ee8e8f9e10beb267b6183377b3f5891", "url": "https://github.com/metasfresh/metasfresh/commit/62c468697ee8e8f9e10beb267b6183377b3f5891", "message": "Small clarif on why I did not used a constant in this case", "committedDate": "2020-12-10T10:15:51Z", "type": "commit"}, {"oid": "9ccca8e5382ad7ba4ffc396cdf35b9cb47f55fe1", "url": "https://github.com/metasfresh/metasfresh/commit/9ccca8e5382ad7ba4ffc396cdf35b9cb47f55fe1", "message": "Fix deletion issue after addition", "committedDate": "2020-12-10T10:57:58Z", "type": "commit"}, {"oid": "26676c4aa9d1e94faed40ec1120b455b163bb43b", "url": "https://github.com/metasfresh/metasfresh/commit/26676c4aa9d1e94faed40ec1120b455b163bb43b", "message": "Add more safety checks for the deletion", "committedDate": "2020-12-10T13:02:57Z", "type": "commit"}, {"oid": "5523d2842938771c86508e6a274e73d321df9228", "url": "https://github.com/metasfresh/metasfresh/commit/5523d2842938771c86508e6a274e73d321df9228", "message": "Dont show the message in case of invalid for the inlineTab type", "committedDate": "2020-12-10T13:55:56Z", "type": "commit"}, {"oid": "324ef2348891f2c744ae90d92c6bc754bcca00fd", "url": "https://github.com/metasfresh/metasfresh/commit/324ef2348891f2c744ae90d92c6bc754bcca00fd", "message": "Place the show more button", "committedDate": "2020-12-10T14:27:16Z", "type": "commit"}, {"oid": "b229bceac0fdb8c8f9a66a9b65111ac75d6c8945", "url": "https://github.com/metasfresh/metasfresh/commit/b229bceac0fdb8c8f9a66a9b65111ac75d6c8945", "message": "Put the caption in place", "committedDate": "2020-12-10T14:45:02Z", "type": "commit"}, {"oid": "b44308247e8d34dd725b1ccfb37411a77d0a4c32", "url": "https://github.com/metasfresh/metasfresh/commit/b44308247e8d34dd725b1ccfb37411a77d0a4c32", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-11T06:20:58Z", "type": "commit"}, {"oid": "3ee89140766f6febe8a6131563b10f4b9329bfe7", "url": "https://github.com/metasfresh/metasfresh/commit/3ee89140766f6febe8a6131563b10f4b9329bfe7", "message": "Adapt logic for showing the widget in full screen", "committedDate": "2020-12-11T09:44:14Z", "type": "commit"}, {"oid": "4db5d12a2792fee93a7d02092b07cd49aa9d9c46", "url": "https://github.com/metasfresh/metasfresh/commit/4db5d12a2792fee93a7d02092b07cd49aa9d9c46", "message": "fix scroll with overlay", "committedDate": "2020-12-11T10:16:22Z", "type": "commit"}, {"oid": "f725becd7b0e6379af2f20aca4c1b1b44a2318c4", "url": "https://github.com/metasfresh/metasfresh/commit/f725becd7b0e6379af2f20aca4c1b1b44a2318c4", "message": "Fixtures", "committedDate": "2020-12-11T13:39:08Z", "type": "commit"}, {"oid": "3ecc476d39964d6302c941f5ab05ae0d9d96eea1", "url": "https://github.com/metasfresh/metasfresh/commit/3ecc476d39964d6302c941f5ab05ae0d9d96eea1", "message": "Merge branch 'master' into gh10275", "committedDate": "2020-12-14T06:27:45Z", "type": "commit"}, {"oid": "eff5c36aee24e97ca922b3b520285a8ae22ff3da", "url": "https://github.com/metasfresh/metasfresh/commit/eff5c36aee24e97ca922b3b520285a8ae22ff3da", "message": "Prereq InlineTabWrapper tests", "committedDate": "2020-12-14T06:33:57Z", "type": "commit"}, {"oid": "ec5e734d327892131a1dd989f21662f984791a60", "url": "https://github.com/metasfresh/metasfresh/commit/ec5e734d327892131a1dd989f21662f984791a60", "message": "Fix the test", "committedDate": "2020-12-14T07:04:04Z", "type": "commit"}, {"oid": "355fc5c2958fce5b50d5ca8a6bd14679ac03c89b", "url": "https://github.com/metasfresh/metasfresh/commit/355fc5c2958fce5b50d5ca8a6bd14679ac03c89b", "message": "Initial main test", "committedDate": "2020-12-14T09:45:01Z", "type": "commit"}, {"oid": "a48ace29f0bdb4fb81458bf2c3d797c8fcd1d220", "url": "https://github.com/metasfresh/metasfresh/commit/a48ace29f0bdb4fb81458bf2c3d797c8fcd1d220", "message": "Test for more than 5 rows", "committedDate": "2020-12-14T10:22:09Z", "type": "commit"}, {"oid": "3260d5743a3e6d8a49acb6bcbf43cbc4c3ca54ae", "url": "https://github.com/metasfresh/metasfresh/commit/3260d5743a3e6d8a49acb6bcbf43cbc4c3ca54ae", "message": "Test fullscreen view", "committedDate": "2020-12-14T10:36:00Z", "type": "commit"}, {"oid": "85a119cbbfbccffb46aff01b80c5a26153a9766e", "url": "https://github.com/metasfresh/metasfresh/commit/85a119cbbfbccffb46aff01b80c5a26153a9766e", "message": "Move fixture to a folder", "committedDate": "2020-12-14T10:44:51Z", "type": "commit"}, {"oid": "13c5eff2a07beeb792ba6b6507a8eecaa997c5f5", "url": "https://github.com/metasfresh/metasfresh/commit/13c5eff2a07beeb792ba6b6507a8eecaa997c5f5", "message": "Move to separate folder the inlineTab tests", "committedDate": "2020-12-14T12:09:39Z", "type": "commit"}, {"oid": "ff28483f7ce0dfa408d0ea7cdcf32d3434b18bbd", "url": "https://github.com/metasfresh/metasfresh/commit/ff28483f7ce0dfa408d0ea7cdcf32d3434b18bbd", "message": "Removed the hardcoded lines from the fields order display", "committedDate": "2020-12-14T12:20:01Z", "type": "commit"}, {"oid": "ba0176749b17f21b0f420292d4bfe9ee9300e98a", "url": "https://github.com/metasfresh/metasfresh/commit/ba0176749b17f21b0f420292d4bfe9ee9300e98a", "message": "Skel for InlineTab item component test", "committedDate": "2020-12-14T12:23:34Z", "type": "commit"}, {"oid": "8755e61745287fc5beb537323d59860cd5299b6e", "url": "https://github.com/metasfresh/metasfresh/commit/8755e61745287fc5beb537323d59860cd5299b6e", "message": "InlineTab test", "committedDate": "2020-12-14T13:41:46Z", "type": "commit"}, {"oid": "929c454f7bca730decf3b9ce66b29eee52fc1669", "url": "https://github.com/metasfresh/metasfresh/commit/929c454f7bca730decf3b9ce66b29eee52fc1669", "message": "Skeleton for the actions tests", "committedDate": "2020-12-14T14:09:08Z", "type": "commit"}, {"oid": "d4580f52d98b90ba63b12949d56dff768b00676a", "url": "https://github.com/metasfresh/metasfresh/commit/d4580f52d98b90ba63b12949d56dff768b00676a", "message": "Remove redundant code", "committedDate": "2020-12-14T14:09:55Z", "type": "commit"}, {"oid": "f9a688cb943f95671f11bb3930fef627edd7809f", "url": "https://github.com/metasfresh/metasfresh/commit/f9a688cb943f95671f11bb3930fef627edd7809f", "message": "UPDATE_INLINE_TAB_WRAPPER_FIELDS action test", "committedDate": "2020-12-14T14:25:31Z", "type": "commit"}, {"oid": "cf227ec69a13ff1e000fa6c711756ed04ab8aadf", "url": "https://github.com/metasfresh/metasfresh/commit/cf227ec69a13ff1e000fa6c711756ed04ab8aadf", "message": "setInlineTabShowMore test", "committedDate": "2020-12-14T14:53:23Z", "type": "commit"}, {"oid": "9901a31e4ee02ee966bd32955bc444d8364a86b9", "url": "https://github.com/metasfresh/metasfresh/commit/9901a31e4ee02ee966bd32955bc444d8364a86b9", "message": "SET_INLINE_TAB_LAYOUT_AND_DATA test", "committedDate": "2020-12-14T15:05:08Z", "type": "commit"}, {"oid": "7f63af1096f726bd57a4b913066b8932edd49d7a", "url": "https://github.com/metasfresh/metasfresh/commit/7f63af1096f726bd57a4b913066b8932edd49d7a", "message": "Test for setInlineTabAddNew action", "committedDate": "2020-12-14T15:25:25Z", "type": "commit"}, {"oid": "17ef7270b70e9550598381699e2ac6b7786770ad", "url": "https://github.com/metasfresh/metasfresh/commit/17ef7270b70e9550598381699e2ac6b7786770ad", "message": "Test the form display in case of new addition", "committedDate": "2020-12-15T12:10:08Z", "type": "commit"}, {"oid": "5dce8f18c8c5bc683c4832f96925875de583febc", "url": "https://github.com/metasfresh/metasfresh/commit/5dce8f18c8c5bc683c4832f96925875de583febc", "message": "Test for the case we have an invalid item in the inlineTab", "committedDate": "2020-12-15T12:40:33Z", "type": "commit"}]}