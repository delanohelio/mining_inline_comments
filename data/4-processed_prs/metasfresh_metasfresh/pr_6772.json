{"pr_number": 6772, "pr_title": "Rewrite Table component", "pr_createdAt": "2020-06-01T23:59:05Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6772", "timeline": [{"oid": "aa986d53c8c82e4e61be524efbbbac04ecef7c2b", "url": "https://github.com/metasfresh/metasfresh/commit/aa986d53c8c82e4e61be524efbbbac04ecef7c2b", "message": "#6706 Refactor QuickActions\n\n- use selector for actions\n- remove lots of unnecessary anonymous functions", "committedDate": "2020-05-25T09:16:21Z", "type": "commit"}, {"oid": "1c9362b6c15cb8cb2fca6ad1f2e07c50af2aa227", "url": "https://github.com/metasfresh/metasfresh/commit/1c9362b6c15cb8cb2fca6ad1f2e07c50af2aa227", "message": "#6706 Refactor DocumentList\n\n- remove anonymous functions\n- set refs properly", "committedDate": "2020-05-25T09:16:21Z", "type": "commit"}, {"oid": "ba8bd8b5182fe7593f70024196481d21561a4c91", "url": "https://github.com/metasfresh/metasfresh/commit/ba8bd8b5182fe7593f70024196481d21561a4c91", "message": "#6706 refactoring Table\n\n- remove anonymous functions in shortcuts", "committedDate": "2020-05-25T09:16:21Z", "type": "commit"}, {"oid": "c31371a4ce52f97c53ee811c8abbad1bb1e71878", "url": "https://github.com/metasfresh/metasfresh/commit/c31371a4ce52f97c53ee811c8abbad1bb1e71878", "message": "#6706 move DocumentList container to containers", "committedDate": "2020-05-25T14:11:30Z", "type": "commit"}, {"oid": "2e6f06d62640c4e85de7744dc9e07f543284ca6a", "url": "https://github.com/metasfresh/metasfresh/commit/2e6f06d62640c4e85de7744dc9e07f543284ca6a", "message": "#6706 progress on refactoring Table", "committedDate": "2020-05-25T14:12:11Z", "type": "commit"}, {"oid": "0eb485fc883e96e9933b6278a86b68acedf7180a", "url": "https://github.com/metasfresh/metasfresh/commit/0eb485fc883e96e9933b6278a86b68acedf7180a", "message": "#6706 start splitting Table component\n\n-  into data and presentational layer", "committedDate": "2020-05-25T14:37:11Z", "type": "commit"}, {"oid": "1356724d2265a79bbd0066cd372bd10ab65e1856", "url": "https://github.com/metasfresh/metasfresh/commit/1356724d2265a79bbd0066cd372bd10ab65e1856", "message": "#6706 continue splitting Table to data/presentation\n\n- add some comments\n- remove unnecessary props", "committedDate": "2020-05-26T10:51:49Z", "type": "commit"}, {"oid": "55cbacae5e08ece1fff5fdb58b7ab199065493b4", "url": "https://github.com/metasfresh/metasfresh/commit/55cbacae5e08ece1fff5fdb58b7ab199065493b4", "message": "#6706 move `deleteRequest` to `api`", "committedDate": "2020-05-26T12:21:33Z", "type": "commit"}, {"oid": "aef1d8687c042f82988f6fa833ecc6e282b64590", "url": "https://github.com/metasfresh/metasfresh/commit/aef1d8687c042f82988f6fa833ecc6e282b64590", "message": "#6706 add action for collapsing rows", "committedDate": "2020-05-26T12:24:36Z", "type": "commit"}, {"oid": "a7f79ee221ecd7e9a939ac56182d7c623d76f746", "url": "https://github.com/metasfresh/metasfresh/commit/a7f79ee221ecd7e9a939ac56182d7c623d76f746", "message": "#6706 remove old `setActiveSort`", "committedDate": "2020-05-26T16:28:35Z", "type": "commit"}, {"oid": "66138da046e06ad106f2991405857f678c1602b4", "url": "https://github.com/metasfresh/metasfresh/commit/66138da046e06ad106f2991405857f678c1602b4", "message": "#6706 finishing touches on the Table component\n\n- remove what's unused\n- add comments and missing props\n- remove an unnecessary anonymous click handler fn in TableItem", "committedDate": "2020-05-27T12:30:11Z", "type": "commit"}, {"oid": "aae5d30ab899d5579ed0518625eb8682bf4cab0d", "url": "https://github.com/metasfresh/metasfresh/commit/aae5d30ab899d5579ed0518625eb8682bf4cab0d", "message": "#6706 WIP on collapsing rows", "committedDate": "2020-05-28T09:37:25Z", "type": "commit"}, {"oid": "cb4e37b7e17d666a7c1a6f1dd9d69dd1f3a5fdaa", "url": "https://github.com/metasfresh/metasfresh/commit/cb4e37b7e17d666a7c1a6f1dd9d69dd1f3a5fdaa", "message": "#6706 progress with collapsible rows\n\n- rename `windowType` to `windowId` in `getTableId` everywhere", "committedDate": "2020-05-28T13:41:15Z", "type": "commit"}, {"oid": "118153b03cc724e7b0931dcc773357dc7d559651", "url": "https://github.com/metasfresh/metasfresh/commit/118153b03cc724e7b0931dcc773357dc7d559651", "message": "#6706 cleanup", "committedDate": "2020-05-28T23:49:22Z", "type": "commit"}, {"oid": "5158ac7ef46f62cbcfb10a94e39602924a205329", "url": "https://github.com/metasfresh/metasfresh/commit/5158ac7ef46f62cbcfb10a94e39602924a205329", "message": "#6706 cleanup and rename props\n\n- remove what's not used anymore\n- rename `windowType` to `windowId` in main components\n- switch to redux data where possible", "committedDate": "2020-05-29T14:25:03Z", "type": "commit"}, {"oid": "630a9686ad979bf29a365d84a4e98660aeca4bc2", "url": "https://github.com/metasfresh/metasfresh/commit/630a9686ad979bf29a365d84a4e98660aeca4bc2", "message": "#6706 progress with refactoring\n\n- finish work on collapsible rows\n- more cleanup", "committedDate": "2020-05-29T14:25:46Z", "type": "commit"}, {"oid": "153dc79fb160d9e80aca05aa69b9fc2c28b66ef9", "url": "https://github.com/metasfresh/metasfresh/commit/153dc79fb160d9e80aca05aa69b9fc2c28b66ef9", "message": "#6706 update props/prop types", "committedDate": "2020-06-01T12:47:20Z", "type": "commit"}, {"oid": "0d58977e538262364044d5096b0b3f59f9e1eee8", "url": "https://github.com/metasfresh/metasfresh/commit/0d58977e538262364044d5096b0b3f59f9e1eee8", "message": "#6706 remove old AC's for selecting/deselecting\n\n- reuse action types\n- remove selection from DocList's lifecycle methods", "committedDate": "2020-06-01T12:50:41Z", "type": "commit"}, {"oid": "b7767b8b2f7b662b286f7f3ac2caeb05cd0c7b1c", "url": "https://github.com/metasfresh/metasfresh/commit/b7767b8b2f7b662b286f7f3ac2caeb05cd0c7b1c", "message": "#6706 ACs for updating data/selecting/deselecting\n\n- add data AC\n- add deselect AC\n- refactoring", "committedDate": "2020-06-01T12:51:30Z", "type": "commit"}, {"oid": "571facc2931cbe3a3781b38dec51d88ddbccebff", "url": "https://github.com/metasfresh/metasfresh/commit/571facc2931cbe3a3781b38dec51d88ddbccebff", "message": "#6706 cleanup table component", "committedDate": "2020-06-01T23:39:06Z", "type": "commit"}, {"oid": "b0b2ddec7ac8c1e4fd0be349142b9960f45b97de", "url": "https://github.com/metasfresh/metasfresh/commit/b0b2ddec7ac8c1e4fd0be349142b9960f45b97de", "message": "#6706 cleanup\n\n- remove unused code\n- add comments", "committedDate": "2020-06-01T23:41:19Z", "type": "commit"}, {"oid": "f41c3a9c24a14d5168851ffb5dd17e64b35a3f54", "url": "https://github.com/metasfresh/metasfresh/commit/f41c3a9c24a14d5168851ffb5dd17e64b35a3f54", "message": "#6706 add keyProperty param when selecting\n\n- cleanup of action creators\n- don't build collapsible arrays if not needed", "committedDate": "2020-06-01T23:47:20Z", "type": "commit"}, {"oid": "98a9842e09cafcd43e2d67350188c2374f135888", "url": "https://github.com/metasfresh/metasfresh/commit/98a9842e09cafcd43e2d67350188c2374f135888", "message": "#6706 delete table when filter changes\n\n- cleanup ViewActions", "committedDate": "2020-06-01T23:47:55Z", "type": "commit"}, {"oid": "256979e2506443a38c37987fe433bc68103f9ab2", "url": "https://github.com/metasfresh/metasfresh/commit/256979e2506443a38c37987fe433bc68103f9ab2", "message": "#6706 remove rowData denpendency from DocumentList\n\n- cleanup and comments too", "committedDate": "2020-06-01T23:49:50Z", "type": "commit"}, {"oid": "8aceccd7b1b07c80125f7f928ded2cf747cf09b5", "url": "https://github.com/metasfresh/metasfresh/commit/8aceccd7b1b07c80125f7f928ded2cf747cf09b5", "message": "#6706 fix fetching tab's data", "committedDate": "2020-06-01T23:50:53Z", "type": "commit"}, {"oid": "f7f6a940096fee76d3dddfc502086e8fba65337a", "url": "https://github.com/metasfresh/metasfresh/commit/f7f6a940096fee76d3dddfc502086e8fba65337a", "message": "#6706 cleanup and fix selections flow\n\n-", "committedDate": "2020-06-01T23:52:48Z", "type": "commit"}, {"oid": "c742b186edba764121249b0e2839f9e02537334c", "url": "https://github.com/metasfresh/metasfresh/commit/c742b186edba764121249b0e2839f9e02537334c", "message": "#6706 cleanup DocumentList container", "committedDate": "2020-06-01T23:57:40Z", "type": "commit"}, {"oid": "c8e8a3ac51da7fe6a4d808f8cc7e708d8d36dfdf", "url": "https://github.com/metasfresh/metasfresh/commit/c8e8a3ac51da7fe6a4d808f8cc7e708d8d36dfdf", "message": "#6706 suppress lint exception", "committedDate": "2020-06-02T07:44:37Z", "type": "commit"}, {"oid": "b4e1b288878151fae47344afed64a23f6efa19de", "url": "https://github.com/metasfresh/metasfresh/commit/b4e1b288878151fae47344afed64a23f6efa19de", "message": "#6706 remove more unused code", "committedDate": "2020-06-02T10:48:11Z", "type": "commit"}, {"oid": "0df0f430917c7783364fb19cf3da89959ac81de8", "url": "https://github.com/metasfresh/metasfresh/commit/0df0f430917c7783364fb19cf3da89959ac81de8", "message": "#6706 fix table reducer tests", "committedDate": "2020-06-02T10:48:21Z", "type": "commit"}, {"oid": "6133d67b73d637dcb249f470219bba2d96f22e72", "url": "https://github.com/metasfresh/metasfresh/commit/6133d67b73d637dcb249f470219bba2d96f22e72", "message": "#6706 update Table AC tests", "committedDate": "2020-06-02T11:17:25Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1NjUzMg==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r433756532", "bodyText": "Is there a reason why we need the these passed ? AFAIs the FiltersStatic component it needs passed data and clearFitlers. https://github.com/metasfresh/metasfresh/blob/master/frontend/src/components/filters/FiltersStatic.js", "author": "petrican", "createdAt": "2020-06-02T09:50:51Z", "path": "frontend/src/components/app/DocumentList.js", "diffHunk": "@@ -236,20 +249,21 @@ export default class DocumentList extends Component {\n               {layout.filters && (\n                 <Filters\n                   {...{\n-                    windowType,\n                     viewId,\n                     filtersActive,\n                     initialValuesNulled,\n                   }}\n+                  windowType={windowId}\n                   filterData={filtersToMap(layout.filters)}\n                   updateDocList={onFilterChange}\n                   resetInitialValues={onResetInitialFilters}\n                 />\n               )}\n \n-              {rowData && staticFilters && (\n+              {staticFilters && (\n                 <FiltersStatic\n-                  {...{ windowType, viewId }}\n+                  {...{ viewId }}\n+                  windowType={windowId}", "originalCommit": "c742b186edba764121249b0e2839f9e02537334c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1Mzg4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r435053882", "bodyText": "It's not something I'm focusing on in this effort, but you're right.", "author": "siemiatj", "createdAt": "2020-06-04T07:40:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc1NjUzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzc2MTgxNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r433761817", "bodyText": "can't we replace this with an action and hold it in the redux data and ditch component state?", "author": "petrican", "createdAt": "2020-06-02T10:00:18Z", "path": "frontend/src/containers/Table.js", "diffHunk": "@@ -0,0 +1,324 @@\n+import update from 'immutability-helper';\n+import React, { PureComponent } from 'react';\n+import { connect } from 'react-redux';\n+\n+import { getZoomIntoWindow, deleteRequest } from '../api';\n+import { getTableId, getTable } from '../reducers/tables';\n+\n+import {\n+  updateTableSelection,\n+  deselectTableItems,\n+  collapseTableRow,\n+} from '../actions/TableActions';\n+import { deleteLocal, openModal } from '../actions/WindowActions';\n+\n+import { containerPropTypes } from '../utils/tableHelpers';\n+import { mapIncluded } from '../utils/documentListHelper';\n+\n+import Table from '../components/table/Table';\n+\n+class TableContainer extends PureComponent {\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {};\n+    this._isMounted = false;\n+  }\n+\n+  componentDidMount() {\n+    this._isMounted = true;\n+  }\n+\n+  componentDidUpdate(prevProps) {\n+    const { mainTable, open, rows } = this.props;\n+\n+    if (rows.length && prevProps.rows.length === 0) {\n+      document.getElementsByClassName('js-table')[0].focus();\n+\n+      setTimeout(() => {\n+        if (this._isMounted) {\n+          // TODO: Figure a better way to do this https://github.com/metasfresh/metasfresh/issues/1679\n+          this.setState({", "originalCommit": "c742b186edba764121249b0e2839f9e02537334c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgwOTU1Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r433809552", "bodyText": "I dont understand why are we still using local component state for the table", "author": "petrican", "createdAt": "2020-06-02T11:36:05Z", "path": "frontend/src/components/table/Table.js", "diffHunk": "@@ -57,500 +34,141 @@ class Table extends Component {\n   }\n \n   componentDidMount() {\n-    const { rowData, tabId } = this.props;\n-    //selecting first table elem while getting indent data\n-    this._isMounted = true;\n-\n-    if (rowData.get(`${tabId}`)) {\n-      this.getIndentData(true);\n-    }\n     if (this.props.autofocus) {\n       this.table.focus();\n     }\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    if (this.state.rows.length && !nextProps.cols) {\n-      this.setState({ rows: [] });\n-    }\n-  }\n-\n-  componentDidUpdate(prevProps, prevState) {\n-    const {\n-      dispatch,\n-      mainTable,\n-      open,\n-      rowData,\n-      defaultSelected,\n-      disconnectFromState,\n-      windowId,\n-      refreshSelection,\n-      openIncludedViewOnSelect,\n-      viewId,\n-      tabId,\n-      isModal,\n-      hasIncluded,\n-      page,\n-    } = this.props;\n-    const { selected, rows } = this.state;\n-\n-    /**\n-     * Selection by default of first row if nothing selected\n-     */\n-    if (\n-      (_.isEmpty(defaultSelected) || _.isEmpty(selected)) &&\n-      selected[0] === undefined &&\n-      !_.isEmpty(rows)\n-    ) {\n-      this.setState({ selected: [rows[0].id] });\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: [rows[0].id],\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    } // end of selection for the first row if nothing selected\n-\n-    const selectedEqual = _.isEqual(prevState.selected, selected);\n-    const defaultSelectedEqual = _.isEqual(\n-      prevProps.defaultSelected,\n-      defaultSelected\n-    );\n-\n-    if (!this._isMounted) {\n-      return;\n-    }\n-\n-    if (rows && !_.isEqual(prevState.rows, rows)) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      if (isModal && !hasIncluded) {\n-        let firstRow = rows[0];\n-\n-        if (firstRow) {\n-          if (openIncludedViewOnSelect) {\n-            this.showSelectedIncludedView([firstRow.id]);\n-          }\n-\n-          if (firstRow.id && !selectedEqual) {\n-            this.selectOneProduct(firstRow.id);\n-          }\n-        }\n-      }\n-    } else if (page !== prevProps.page) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-    }\n-\n-    if (mainTable && open) {\n-      this.table.focus();\n-    }\n-\n-    if (\n-      (!defaultSelectedEqual && !selectedEqual) ||\n-      (refreshSelection && prevProps.refreshSelection !== refreshSelection)\n-    ) {\n-      this.setState({\n-        selected:\n-          defaultSelected && defaultSelected !== null ? defaultSelected : [],\n-      });\n-    } else if (!disconnectFromState && !selectedEqual && selected.length) {\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: selected,\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    }\n-\n-    if (prevProps.viewId !== viewId && rowData.get(`${tabId}`)) {\n-      if (defaultSelected && defaultSelected.length === 0) {\n-        this.setState({ selected: [] });\n-      }\n-\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      const firstLoad =\n-        prevProps.rowData.get(`${tabId}`) &&\n-        prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-          ? false\n-          : true;\n-\n-      this.getIndentData(firstLoad);\n-    } else if (rowData.get(`${tabId}`) && !is(prevProps.rowData, rowData)) {\n-      let firstLoad = rowData.get(`${tabId}`).size ? false : true;\n-\n-      if (\n-        prevProps.rowData.get(`${tabId}`) &&\n-        !prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-      ) {\n-        firstLoad = true;\n-      }\n-\n-      this.getIndentData(firstLoad);\n-    }\n-  }\n-\n-  componentWillUnmount() {\n-    const {\n-      showIncludedViewOnSelect,\n-      viewId,\n-      windowType,\n-      isIncluded,\n-    } = this.props;\n-\n-    this._isMounted = false;\n-\n-    this.deselectAllProducts();\n-    if (showIncludedViewOnSelect && !isIncluded) {\n-      showIncludedViewOnSelect({\n-        showIncludedView: false,\n-        windowType,\n-        viewId,\n-      });\n-    }\n-  }\n-\n-  showSelectedIncludedView = (selected) => {\n-    const { showIncludedViewOnSelect, openIncludedViewOnSelect } = this.props;\n-    const { rows } = this.state;\n-\n-    if (openIncludedViewOnSelect && selected.length === 1) {\n-      rows.forEach((item) => {\n-        if (item.id === selected[0]) {\n-          showIncludedViewOnSelect({\n-            showIncludedView: item.supportIncludedViews,\n-            windowType: item.supportIncludedViews\n-              ? item.includedView.windowType || item.includedView.windowId\n-              : null,\n-            viewId: item.supportIncludedViews ? item.includedView.viewId : '',\n-          });\n-        }\n-      });\n-    }\n+  setListenTrue = () => {\n+    this.setState({ listenOnKeys: true });\n   };\n \n-  getIndentData = (selectFirst) => {\n-    const {\n-      rowData,\n-      tabId,\n-      indentSupported,\n-      collapsible,\n-      expandedDepth,\n-      keyProperty,\n-    } = this.props;\n-    const { selected } = this.state;\n-    let rowsData = [];\n-\n-    if (indentSupported && rowData.get(`${tabId}`).size) {\n-      rowsData = getRowsData(rowData.get(`${tabId}`));\n-\n-      let stateChange = {\n-        rows: rowsData,\n-        pendingInit: !rowsData,\n-      };\n-\n-      if (selectFirst) {\n-        stateChange = {\n-          ...stateChange,\n-          collapsedParentsRows: [],\n-          collapsedRows: [],\n-        };\n-      }\n-\n-      this.setState(stateChange, () => {\n-        const { rows } = this.state;\n-        const firstRow = rows[0];\n-\n-        let updatedParentsRows = [...this.state.collapsedParentsRows];\n-        let updatedRows = [...this.state.collapsedRows];\n+  setListenFalse = () => {\n+    this.setState({ listenOnKeys: false });\n+  };\n \n-        if (firstRow && selectFirst) {\n-          let selectedIndex = 0;\n-          if (\n-            selected &&\n-            selected.length === 1 &&\n-            selected[0] &&\n-            firstRow.id !== selected[0]\n-          ) {\n-            selectedIndex = _.findIndex(rows, (row) => row.id === selected[0]);\n-          }\n+  closeContextMenu = () => {\n+    this.setState({\n+      contextMenu: Object.assign({}, this.state.contextMenu, {\n+        open: false,\n+      }),\n+    });\n+  };\n \n-          if (!selectedIndex) {\n-            this.selectOneProduct(rows[0].id);\n-          }\n+  handleSelect = (id, idFocused, idFocusedDown, cb) => {\n+    const { onSelect } = this.props;\n \n-          document.getElementsByClassName('js-table')[0].focus();\n-        }\n+    onSelect(id, idFocused, idFocusedDown, cb);\n \n-        let mapCollapsed = [];\n+    this.triggerFocus(idFocused, idFocusedDown);\n+  };\n \n-        if (collapsible && rows && rows.length) {\n-          rows.map((row) => {\n-            if (row.indent.length >= expandedDepth && row.includedDocuments) {\n-              mapCollapsed = mapCollapsed.concat(collapsedMap(row));\n-              updatedParentsRows = updatedParentsRows.concat(row[keyProperty]);\n-            }\n-            if (row.indent.length > expandedDepth) {\n-              updatedRows = updatedRows.concat(row[keyProperty]);\n-            }\n-          });\n+  setContextMenu = (\n+    clientX,\n+    clientY,\n+    fieldName,\n+    supportZoomInto,\n+    supportFieldEdit\n+  ) => {\n+    this.setState({", "originalCommit": "6133d67b73d637dcb249f470219bba2d96f22e72", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5220a686f29e4626d4997677fc47899ae60ae606", "url": "https://github.com/metasfresh/metasfresh/commit/5220a686f29e4626d4997677fc47899ae60ae606", "message": "#6706 updating rows in tab table\n\n- remove unused layout/data properties", "committedDate": "2020-06-02T21:14:11Z", "type": "commit"}, {"oid": "57e766acfd8b42dc9f906a1db5f9ae181a367db0", "url": "https://github.com/metasfresh/metasfresh/commit/57e766acfd8b42dc9f906a1db5f9ae181a367db0", "message": "#6706 fix error when unmounting DocumentList", "committedDate": "2020-06-02T21:15:23Z", "type": "commit"}, {"oid": "9bd50dbcb1b66e357e41c69c37dcecea4ac77a9d", "url": "https://github.com/metasfresh/metasfresh/commit/9bd50dbcb1b66e357e41c69c37dcecea4ac77a9d", "message": "#6706 handle ws row changes in tabs", "committedDate": "2020-06-03T10:05:37Z", "type": "commit"}, {"oid": "6b5ee60a70389a72b1398a4ce9f1f44e5638dd7e", "url": "https://github.com/metasfresh/metasfresh/commit/6b5ee60a70389a72b1398a4ce9f1f44e5638dd7e", "message": "#6706 add missing advanced edit event handler", "committedDate": "2020-06-03T10:06:08Z", "type": "commit"}, {"oid": "decab89c8fbe06bcdddab26e06582dc3ae9a1013", "url": "https://github.com/metasfresh/metasfresh/commit/decab89c8fbe06bcdddab26e06582dc3ae9a1013", "message": "#6706 cleanup Tab component", "committedDate": "2020-06-03T14:07:06Z", "type": "commit"}, {"oid": "7036435e60c568f596ca7e8b468d95d65a4c54ce", "url": "https://github.com/metasfresh/metasfresh/commit/7036435e60c568f596ca7e8b468d95d65a4c54ce", "message": "#6706 remove state completely from the TableContainer", "committedDate": "2020-06-04T08:28:41Z", "type": "commit"}, {"oid": "6b5abd312d00c8d5ccddfbb785ba713467f8a880", "url": "https://github.com/metasfresh/metasfresh/commit/6b5abd312d00c8d5ccddfbb785ba713467f8a880", "message": "#6706 cleanup", "committedDate": "2020-06-04T08:49:46Z", "type": "commit"}, {"oid": "6086245e5ab9ce36e30ba52769a4aa0567569cb3", "url": "https://github.com/metasfresh/metasfresh/commit/6086245e5ab9ce36e30ba52769a4aa0567569cb3", "message": "#6706 improvements to collapsing\n\n- fix selection when collapsing\n- don't build collapsible tree if not needed", "committedDate": "2020-06-04T11:21:38Z", "type": "commit"}, {"oid": "035741b35abf28c5c60d3480a029a7583e5320ad", "url": "https://github.com/metasfresh/metasfresh/commit/035741b35abf28c5c60d3480a029a7583e5320ad", "message": "#6706 properly create tables for modals", "committedDate": "2020-06-04T13:27:12Z", "type": "commit"}, {"oid": "e77784cbbd511f9ddb5a9fc16556702124355f21", "url": "https://github.com/metasfresh/metasfresh/commit/e77784cbbd511f9ddb5a9fc16556702124355f21", "message": "#6706 delete table on closing RawModal", "committedDate": "2020-06-04T14:22:31Z", "type": "commit"}, {"oid": "f90f97d7dd15a6413496aeab3df45071ae123683", "url": "https://github.com/metasfresh/metasfresh/commit/f90f97d7dd15a6413496aeab3df45071ae123683", "message": "#6706 remove getSizeClass from the parent\n\n- fix hiding included view on click outside", "committedDate": "2020-06-04T15:32:07Z", "type": "commit"}, {"oid": "0a14304005ebaa9791b5d0e484900435dbd50806", "url": "https://github.com/metasfresh/metasfresh/commit/0a14304005ebaa9791b5d0e484900435dbd50806", "message": "#6706 read view properly in Container", "committedDate": "2020-06-05T14:26:44Z", "type": "commit"}, {"oid": "1965917bb244dda64a6fbc721d598956144456d2", "url": "https://github.com/metasfresh/metasfresh/commit/1965917bb244dda64a6fbc721d598956144456d2", "message": "#6706 send correct props to SideList", "committedDate": "2020-06-05T14:27:31Z", "type": "commit"}, {"oid": "7e6d5bc56c95cc7a3de5239946d5a2b849e7b19a", "url": "https://github.com/metasfresh/metasfresh/commit/7e6d5bc56c95cc7a3de5239946d5a2b849e7b19a", "message": "#6706 fix initial collapsed rows", "committedDate": "2020-06-05T14:28:05Z", "type": "commit"}, {"oid": "37fe70ebd090fa2d1436b5cc7edf5df524c94371", "url": "https://github.com/metasfresh/metasfresh/commit/37fe70ebd090fa2d1436b5cc7edf5df524c94371", "message": "#6706 add AC for showing included view\n\n- move View actions to a separate file\n- cleanup ActionTypes", "committedDate": "2020-06-05T14:30:06Z", "type": "commit"}, {"oid": "d3d10a7c999f317ca58aac504b2f97e65f430380", "url": "https://github.com/metasfresh/metasfresh/commit/d3d10a7c999f317ca58aac504b2f97e65f430380", "message": "#6706 control included views with Redux actions", "committedDate": "2020-06-05T14:32:00Z", "type": "commit"}, {"oid": "62c0febd1e217958efd321be425c49dcc793dd58", "url": "https://github.com/metasfresh/metasfresh/commit/62c0febd1e217958efd321be425c49dcc793dd58", "message": "#6706 cleanup WindowHandler", "committedDate": "2020-06-05T14:32:17Z", "type": "commit"}, {"oid": "500bcb681f8e293e3eca01120f07ea391ffb4fc1", "url": "https://github.com/metasfresh/metasfresh/commit/500bcb681f8e293e3eca01120f07ea391ffb4fc1", "message": "#6706 make table row react to changes again", "committedDate": "2020-06-08T10:51:15Z", "type": "commit"}, {"oid": "e711e9961eba6ddc95eb117025b71fdf8f177638", "url": "https://github.com/metasfresh/metasfresh/commit/e711e9961eba6ddc95eb117025b71fdf8f177638", "message": "#6706 cleanup", "committedDate": "2020-06-08T10:51:37Z", "type": "commit"}, {"oid": "171071614dba7bd631d659f3616718a8a963b718", "url": "https://github.com/metasfresh/metasfresh/commit/171071614dba7bd631d659f3616718a8a963b718", "message": "Better error handling in tabs (#6789)", "committedDate": "2020-06-08T11:48:33Z", "type": "commit"}, {"oid": "095e542e2b6573a4618f644cc6e2c39c1fccb292", "url": "https://github.com/metasfresh/metasfresh/commit/095e542e2b6573a4618f644cc6e2c39c1fccb292", "message": "#6706 remove some unnecessary code, switch to PureComponents\n\n- anonymous functions\n- unused props", "committedDate": "2020-06-08T13:59:47Z", "type": "commit"}, {"oid": "94d7902d7152a89990e9c8c67c6b86f71603e19b", "url": "https://github.com/metasfresh/metasfresh/commit/94d7902d7152a89990e9c8c67c6b86f71603e19b", "message": "#6706 fix `Add New` modal", "committedDate": "2020-06-08T15:22:44Z", "type": "commit"}, {"oid": "3691437537caa0a42774c7289ac9e8f01fe24bbf", "url": "https://github.com/metasfresh/metasfresh/commit/3691437537caa0a42774c7289ac9e8f01fe24bbf", "message": "#6706 limit selection updates", "committedDate": "2020-06-08T15:23:24Z", "type": "commit"}, {"oid": "f5fdff0e53bbf07bffe695c33ae601ce3036b5ea", "url": "https://github.com/metasfresh/metasfresh/commit/f5fdff0e53bbf07bffe695c33ae601ce3036b5ea", "message": "#6706 fix keyboard navigation", "committedDate": "2020-06-09T10:41:06Z", "type": "commit"}, {"oid": "a11fa44a831e7cf4d8569c83310ae60e169f67d4", "url": "https://github.com/metasfresh/metasfresh/commit/a11fa44a831e7cf4d8569c83310ae60e169f67d4", "message": "#6706 fix deleting a row in tab", "committedDate": "2020-06-09T10:45:08Z", "type": "commit"}, {"oid": "a11fa44a831e7cf4d8569c83310ae60e169f67d4", "url": "https://github.com/metasfresh/metasfresh/commit/a11fa44a831e7cf4d8569c83310ae60e169f67d4", "message": "#6706 fix deleting a row in tab", "committedDate": "2020-06-09T10:45:08Z", "type": "forcePushed"}, {"oid": "3e02354b0b34f8cdeb78fa1888eb74d584b535f0", "url": "https://github.com/metasfresh/metasfresh/commit/3e02354b0b34f8cdeb78fa1888eb74d584b535f0", "message": "#6706 remove unused code from `WindowActions`", "committedDate": "2020-06-09T12:31:18Z", "type": "commit"}, {"oid": "1ff19a4fe80f14f6526977d508a500da0bc8ee8c", "url": "https://github.com/metasfresh/metasfresh/commit/1ff19a4fe80f14f6526977d508a500da0bc8ee8c", "message": "#6706 fixing tests", "committedDate": "2020-06-09T13:51:06Z", "type": "commit"}, {"oid": "b58d3f2f0ba5803c25e9452e5a105f6fa232aeec", "url": "https://github.com/metasfresh/metasfresh/commit/b58d3f2f0ba5803c25e9452e5a105f6fa232aeec", "message": "#6706 fix linter", "committedDate": "2020-06-09T14:09:35Z", "type": "commit"}, {"oid": "319c0e169f5de69f72e0c900e34497cbefe2fcfe", "url": "https://github.com/metasfresh/metasfresh/commit/319c0e169f5de69f72e0c900e34497cbefe2fcfe", "message": "#6706 fix MasterWindow tests", "committedDate": "2020-06-09T16:11:12Z", "type": "commit"}, {"oid": "0de51a000cbea46d1379dc9220ecf2bee5c4ee5b", "url": "https://github.com/metasfresh/metasfresh/commit/0de51a000cbea46d1379dc9220ecf2bee5c4ee5b", "message": "#6706 move ActionButton to PureComponent\n\n- rewrite event handlers and anonymous functions", "committedDate": "2020-06-09T16:12:05Z", "type": "commit"}, {"oid": "4486d87a46b0e4bcdc3fd6f9f753cdf7d5988bee", "url": "https://github.com/metasfresh/metasfresh/commit/4486d87a46b0e4bcdc3fd6f9f753cdf7d5988bee", "message": "#6706 limit unnecessary renders\n\n- small cleanup in WindowHandler", "committedDate": "2020-06-09T16:12:54Z", "type": "commit"}, {"oid": "6fd86aa788352f907817fe3a3ab91dae18e1e629", "url": "https://github.com/metasfresh/metasfresh/commit/6fd86aa788352f907817fe3a3ab91dae18e1e629", "message": "#6706 fix linter again", "committedDate": "2020-06-09T22:59:36Z", "type": "commit"}, {"oid": "f0c41d39a688625fb2630a9d0f044e8272025ced", "url": "https://github.com/metasfresh/metasfresh/commit/f0c41d39a688625fb2630a9d0f044e8272025ced", "message": "#6706 fixing tests", "committedDate": "2020-06-10T09:28:56Z", "type": "commit"}, {"oid": "f25767d85519817a178de1b0a770b0082685a74a", "url": "https://github.com/metasfresh/metasfresh/commit/f25767d85519817a178de1b0a770b0082685a74a", "message": "#6706 fix tests and change table focus logic", "committedDate": "2020-06-10T12:24:40Z", "type": "commit"}, {"oid": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "url": "https://github.com/metasfresh/metasfresh/commit/adb28faab87d22c900cbfecb04e820fcddd35c0d", "message": "#6706 remove some unnecessary Tabs code", "committedDate": "2020-06-10T12:25:19Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3OTc1NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438079755", "bodyText": "We should add some tests separately specific for the Tabs in a separate file wdyt ?", "author": "petrican", "createdAt": "2020-06-10T12:23:32Z", "path": "frontend/src/__tests__/reducers/WindowHandler.test.js", "diffHunk": "@@ -67,63 +67,5 @@ describe('WindowHandler reducer', () => {\n       expect(state).toEqual(expect.objectContaining({ master: expect.objectContaining({ data: { ...data.data } }) }));\n     });\n ", "originalCommit": "f0c41d39a688625fb2630a9d0f044e8272025ced", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM0NDU5Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r439344593", "bodyText": "Probably, but for sure not as part of this effort. And Window/MasterWindow/Tabs could need their own refactorings too.", "author": "siemiatj", "createdAt": "2020-06-12T10:43:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3OTc1NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4MzM3MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438083371", "bodyText": "Pls document a bit more this also each parameter following the pattern we use for the others\n`/**\n\n@method updateTableData\n@summary Summary\n...params\n*/`", "author": "petrican", "createdAt": "2020-06-10T12:29:41Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -38,26 +39,81 @@ export function deleteTable(id) {\n   };\n }\n \n-// TODO: Legacy version. Remove once we switch to rendering tables from redux\n-export function setActiveSort(data) {\n+/**", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NDMwNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438084305", "bodyText": "Doc here pls", "author": "petrican", "createdAt": "2020-06-10T12:31:20Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -38,26 +39,81 @@ export function deleteTable(id) {\n   };\n }\n \n-// TODO: Legacy version. Remove once we switch to rendering tables from redux\n-export function setActiveSort(data) {\n+/**\n+ * Update table rows\n+ */\n+function updateTableData(id, rows, keyProperty) {\n   return {\n-    type: types.SET_ACTIVE_SORT,\n-    payload: data,\n+    type: types.UPDATE_TABLE_DATA,\n+    payload: { id, rows, keyProperty },\n   };\n }\n \n /**\n- * @method setActiveSortNEW\n+ * @method setActiveSort\n  * @summary Change the value of the `activeSort` setting for specified table\n  * @todo rename to `setActiveSort` once we switch to tables driven by redux\n  */\n-export function setActiveSortNEW(id, active) {\n+export function setActiveSort(id, active) {\n   return {\n-    type: types.SET_ACTIVE_SORT_NEW,\n+    type: types.SET_ACTIVE_SORT,\n     payload: { id, active },\n   };\n }\n \n+/**\n+ * Update table selection - select items\n+ */\n+export function updateTableSelection(id, selection, keyProperty = 'id') {\n+  return {\n+    type: types.UPDATE_TABLE_SELECTION,\n+    payload: { id, selection, keyProperty },\n+  };\n+}\n+\n+/**\n+ * Update table selection - deselect items or deselect all if an empty `ids`\n+ * array is provided\n+ */\n+export function deselectTableItems(id, selection) {\n+  return {\n+    type: types.DESELECT_TABLE_ITEMS,\n+    payload: { id, selection },\n+  };\n+}\n+\n+/**\n+ * Toggle table rows\n+ */\n+function collapseRows({\n+  tableId,\n+  collapsedParentRows,\n+  collapsedRows,\n+  collapsedArrayMap,\n+}) {\n+  return {\n+    type: types.COLLAPSE_TABLE_ROWS,\n+    payload: {\n+      id: tableId,\n+      collapsedParentRows,\n+      collapsedRows,\n+      collapsedArrayMap,\n+    },\n+  };\n+}\n+", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NDc2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438084761", "bodyText": "Document using pattern we have across the app + params pls. For both the top function and the one below. Thanks", "author": "petrican", "createdAt": "2020-06-10T12:32:07Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -38,26 +39,81 @@ export function deleteTable(id) {\n   };\n }\n \n-// TODO: Legacy version. Remove once we switch to rendering tables from redux\n-export function setActiveSort(data) {\n+/**\n+ * Update table rows\n+ */\n+function updateTableData(id, rows, keyProperty) {\n   return {\n-    type: types.SET_ACTIVE_SORT,\n-    payload: data,\n+    type: types.UPDATE_TABLE_DATA,\n+    payload: { id, rows, keyProperty },\n   };\n }\n \n /**\n- * @method setActiveSortNEW\n+ * @method setActiveSort\n  * @summary Change the value of the `activeSort` setting for specified table\n  * @todo rename to `setActiveSort` once we switch to tables driven by redux\n  */\n-export function setActiveSortNEW(id, active) {\n+export function setActiveSort(id, active) {\n   return {\n-    type: types.SET_ACTIVE_SORT_NEW,\n+    type: types.SET_ACTIVE_SORT,\n     payload: { id, active },\n   };\n }\n \n+/**\n+ * Update table selection - select items\n+ */\n+export function updateTableSelection(id, selection, keyProperty = 'id') {\n+  return {\n+    type: types.UPDATE_TABLE_SELECTION,\n+    payload: { id, selection, keyProperty },\n+  };\n+}\n+\n+/**\n+ * Update table selection - deselect items or deselect all if an empty `ids`", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxNjQ3OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438216479", "bodyText": "You are aware, that you've created the updateTableSelection function, right ?", "author": "siemiatj", "createdAt": "2020-06-10T15:32:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NDc2MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU1NjU2NA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438556564", "bodyText": "Yes. I should have document that. My bad.", "author": "petrican", "createdAt": "2020-06-11T05:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NDc2MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4NjUxMA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438086510", "bodyText": "@teosarca can you please make some light in here ? Which should we support ? Ty", "author": "petrican", "createdAt": "2020-06-10T12:35:33Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -99,6 +144,11 @@ export function createTableData(rawData) {\n     defaultOrderBys: rawData.defaultOrderBys\n       ? rawData.defaultOrderBys\n       : undefined,\n+    expandedDepth: rawData.expandedDepth,\n+\n+    // TODO: We have both `supportTree` and `collapsible` in the layout response.", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4Nzk2NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438087965", "bodyText": "add params to the desc", "author": "petrican", "createdAt": "2020-06-10T12:38:07Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -139,26 +200,103 @@ export function updateGridTable(tableId, tableResponse) {\n   return (dispatch, getState) => {\n     const state = getState();\n \n+    // this check is only for unit tests purposes\n     if (state.tables) {\n       const tableExists = state.tables[tableId];\n \n       if (tableExists) {\n         const tableData = createTableData({\n           ...tableResponse,\n           headerElements: tableResponse.columnsByFieldName,\n+          keyProperty: 'id',\n         });\n+        const { collapsible, expandedDepth } = tableExists;\n+        const { keyProperty } = tableData;\n+\n+        // Parse `rows` to add `indent` property\n+        if (tableData.rows.length && tableData.rows.length && collapsible) {\n+          tableData.rows = flattenRows(tableData.rows);\n+        }\n \n         dispatch(updateTable(tableId, tableData));\n+\n+        if (collapsible) {\n+          dispatch(\n+            createCollapsedRows({\n+              tableId,\n+              rows: tableData.rows,\n+              collapsible,\n+              expandedDepth,\n+              keyProperty,\n+            })\n+          );\n+        }\n+\n+        return Promise.resolve(true);\n       } else {\n         const windowType = tableResponse.windowType || tableResponse.windowId;\n         const tableLayout = getView(getState(), windowType).layout;\n         const tableData = createTableData({\n           ...tableResponse,\n           ...tableLayout,\n           headerElements: tableResponse.columnsByFieldName,\n+          keyProperty: 'id',\n         });\n+        const { collapsible, expandedDepth, keyProperty } = tableData;\n+\n+        if (tableData.rows && tableData.rows.length && collapsible) {\n+          tableData.rows = flattenRows(tableData.rows);\n+        }\n \n         dispatch(createTable(tableId, tableData));\n+\n+        if (collapsible) {\n+          dispatch(\n+            createCollapsedRows({\n+              tableId,\n+              rows: tableData.rows,\n+              collapsible,\n+              expandedDepth,\n+              keyProperty,\n+            })\n+          );\n+        }\n+\n+        return Promise.resolve(true);\n+      }\n+    }\n+\n+    return Promise.resolve(false);\n+  };\n+}\n+\n+/*\n+ * Update `tableId` rows and rebuild collapsed rows if necessary", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4ODM5NA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438088394", "bodyText": "Doc params", "author": "petrican", "createdAt": "2020-06-10T12:38:53Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -205,12 +352,124 @@ export function updateTabTable(tableId, tableResponse) {\n   };\n }\n \n-/**\n- * Update table selection - select items\n+/*\n+ * Update `tableId` rows for tab table/details view", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4OTQ3NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438089475", "bodyText": "Doc pls", "author": "petrican", "createdAt": "2020-06-10T12:40:41Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -205,12 +352,124 @@ export function updateTabTable(tableId, tableResponse) {\n   };\n }\n \n-/**\n- * Update table selection - select items\n+/*\n+ * Update `tableId` rows for tab table/details view\n  */\n-export function updateTableSelection({ tableId, ids }) {\n-  return {\n-    type: UPDATE_TABLE_SELECTION,\n-    payload: { tableId, selection: ids },\n+export function updateTabTableData(tableId, rows) {", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4OTY3MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438089671", "bodyText": "Doc pls + params", "author": "petrican", "createdAt": "2020-06-10T12:41:00Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -205,12 +352,124 @@ export function updateTabTable(tableId, tableResponse) {\n   };\n }\n \n-/**\n- * Update table selection - select items\n+/*\n+ * Update `tableId` rows for tab table/details view\n  */\n-export function updateTableSelection({ tableId, ids }) {\n-  return {\n-    type: UPDATE_TABLE_SELECTION,\n-    payload: { tableId, selection: ids },\n+export function updateTabTableData(tableId, rows) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+\n+    if (state.tables) {\n+      const table = getTable(state, tableId);\n+      const { keyProperty } = table;\n+\n+      dispatch(updateTableData(tableId, rows, keyProperty));\n+\n+      return Promise.resolve(true);\n+    }\n+\n+    return Promise.resolve(false);\n+  };\n+}\n+\n+function createCollapsedRows({", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA4OTg4OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438089889", "bodyText": "Doc + params", "author": "petrican", "createdAt": "2020-06-10T12:41:23Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -205,12 +352,124 @@ export function updateTabTable(tableId, tableResponse) {\n   };\n }\n \n-/**\n- * Update table selection - select items\n+/*\n+ * Update `tableId` rows for tab table/details view\n  */\n-export function updateTableSelection({ tableId, ids }) {\n-  return {\n-    type: UPDATE_TABLE_SELECTION,\n-    payload: { tableId, selection: ids },\n+export function updateTabTableData(tableId, rows) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+\n+    if (state.tables) {\n+      const table = getTable(state, tableId);\n+      const { keyProperty } = table;\n+\n+      dispatch(updateTableData(tableId, rows, keyProperty));\n+\n+      return Promise.resolve(true);\n+    }\n+\n+    return Promise.resolve(false);\n+  };\n+}\n+\n+function createCollapsedRows({\n+  tableId,\n+  rows,\n+  collapsible,\n+  expandedDepth,\n+  keyProperty,\n+}) {\n+  return (dispatch) => {\n+    let collapsedArrayMap = [];\n+    let collapsedParentRows = [];\n+    let collapsedRows = [];\n+\n+    if (collapsible && rows.length) {\n+      rows.forEach((row) => {\n+        if (row.indent.length >= expandedDepth && row.includedDocuments) {\n+          collapsedArrayMap = collapsedArrayMap.concat(createCollapsedMap(row));\n+          collapsedParentRows = collapsedParentRows.concat(row[keyProperty]);\n+        } else if (row.indent.length > expandedDepth) {\n+          collapsedRows = collapsedRows.concat(row[keyProperty]);\n+        }\n+      });\n+    }\n+\n+    if (collapsible) {\n+      dispatch(\n+        collapseRows({\n+          tableId,\n+          collapsedParentRows,\n+          collapsedRows,\n+          collapsedArrayMap,\n+        })\n+      );\n+    }\n+  };\n+}\n+\n+/*", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5MTk5OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438091998", "bodyText": "params doc", "author": "petrican", "createdAt": "2020-06-10T12:44:55Z", "path": "frontend/src/actions/ViewActions.js", "diffHunk": "@@ -230,6 +219,17 @@ export function addLocationData(id, locationData) {\n   };\n }\n \n+/**\n+ * @method toggleIncludedView\n+ * @summary sets internal hasIncluded/isIncluded values\n+ */", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5MzY4MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438093680", "bodyText": "desc + params", "author": "petrican", "createdAt": "2020-06-10T12:47:20Z", "path": "frontend/src/actions/ViewActions.js", "diffHunk": "@@ -412,3 +439,31 @@ export function fetchLocationConfig(windowId, viewId = null) {\n       });\n   };\n }\n+\n+/**\n+ * @method showIncludedView\n+ * @summary ToDo: Describe the method.\n+ */", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NDczMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438094733", "bodyText": "can we transform these to one liners ?\nid && dispatch(toggleIncludedView(id, showIncludedView))", "author": "petrican", "createdAt": "2020-06-10T12:49:04Z", "path": "frontend/src/actions/ViewActions.js", "diffHunk": "@@ -412,3 +439,31 @@ export function fetchLocationConfig(windowId, viewId = null) {\n       });\n   };\n }\n+\n+/**\n+ * @method showIncludedView\n+ * @summary ToDo: Describe the method.\n+ */\n+export function showIncludedView({\n+  id,\n+  showIncludedView,\n+  windowId,\n+  viewId,\n+  forceClose,\n+} = {}) {\n+  return (dispatch) => {\n+    if (id) {", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA5NjMzMg==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438096332", "bodyText": "don't we have coherence on the name ? Why do we have tabid ?", "author": "petrican", "createdAt": "2020-06-10T12:51:36Z", "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -681,20 +537,20 @@ export function createWindow(\n \n       if (tabs) {\n         Object.values(tabs).forEach((tab) => {\n-          const { tabId } = tab;\n-          const tableId = getTableId({ windowType, docId, tabId });\n+          const tabId = tab.tabId || tab.tabid;", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMDMwOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438100308", "bodyText": "Should we add here an extra safety check for response.data ? wdyt", "author": "petrican", "createdAt": "2020-06-10T12:57:40Z", "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -822,17 +671,21 @@ export function fetchTopActions(windowType, docId, tabId) {\n       type: FETCH_TOP_ACTIONS,\n     });\n \n-    topActionsRequest(windowType, docId, tabId)\n+    return topActionsRequest(windowType, docId, tabId)\n       .then((response) => {\n         dispatch({\n           type: FETCH_TOP_ACTIONS_SUCCESS,\n           payload: response.data.actions,\n         });\n+", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwMjA5Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438102093", "bodyText": "noticed this as well. It comes for example wither when something changes or within a patch", "author": "petrican", "createdAt": "2020-06-10T13:00:17Z", "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -1146,6 +966,8 @@ function updateStatus(responseData) {\n /*\n  * It updates store for single field value modification, like handleChange\n  * in MasterWidget\n+ * @todo TODO: from my observations, this is triggered multiple times even", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwNTI2MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438105260", "bodyText": "pls put a doc above the function on this this one also as I believe it's an important one. I know I am a pain in the  ... :)", "author": "petrican", "createdAt": "2020-06-10T13:05:01Z", "path": "frontend/src/api/view.js", "diffHunk": "@@ -36,6 +36,7 @@ export function getData({\n }\n \n export function getRowsData({ entity, docType, docId, tabId, rows }) {", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEwODMwOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438108309", "bodyText": "Can you clean up and extract the ternary logic outside , also use a const like EMPTY_STRING for ''. In the end it would be more easier to read that.", "author": "petrican", "createdAt": "2020-06-10T13:09:40Z", "path": "frontend/src/api/window.js", "diffHunk": "@@ -19,6 +19,24 @@ export function topActionsRequest(windowId, documentId, tabId) {\n   `);\n }\n \n+export function deleteRequest(\n+  entity,\n+  docType,\n+  docId,\n+  tabId,\n+  ids,\n+  subentity,\n+  subentityId\n+) {\n+  return del(\n+    `${config.API_URL}/${entity}${docType ? `/${docType}` : ''}${", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMjA0Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438112046", "bodyText": "Dunno. Should we keep it in the redux store and use it to update only the edited item ? wdyt?", "author": "petrican", "createdAt": "2020-06-10T13:15:21Z", "path": "frontend/src/components/app/DocumentList.js", "diffHunk": "@@ -75,13 +77,14 @@ export default class DocumentList extends Component {\n   /**\n    * @method setTableRowEdited\n    * @summary ToDo: Describe the method.\n+   * @todo TODO: Figure out if we still need this", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNjQ1NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438116455", "bodyText": "can we refactor to also pass windowId ? Or is outside of the scope ?", "author": "petrican", "createdAt": "2020-06-10T13:21:42Z", "path": "frontend/src/components/app/DocumentList.js", "diffHunk": "@@ -384,20 +384,21 @@ export default class DocumentList extends Component {\n                   isModal,\n                   hasIncluded,\n                   viewId,\n-                  windowType,\n+                  windowId,\n                 }}\n               >\n                 {layout.supportAttributes && !isIncluded && !hasIncluded && (\n                   <DataLayoutWrapper\n                     className=\"table-flex-wrapper attributes-selector js-not-unselect\"\n                     entity=\"documentView\"\n-                    {...{ windowType, viewId }}\n+                    {...{ viewId }}\n+                    windowType={windowId}", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExNzUyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438117527", "bodyText": "Does it always send the first action ?", "author": "petrican", "createdAt": "2020-06-10T13:23:11Z", "path": "frontend/src/components/app/QuickActions.js", "diffHunk": "@@ -165,6 +166,19 @@ export class QuickActions extends Component {\n     this.toggleDropdown();\n   };\n \n+  /**\n+   * @method onClick\n+   * @summary Wrapper around the local `handleClick` to be in sync with how it's\n+   * called via `QuickActionsDropdown`.\n+   */\n+  onClick = (e) => {\n+    e.preventDefault;\n+\n+    const { actions } = this.props;\n+\n+    this.handleClick(actions[0]);", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyMjUwMg==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438122502", "bodyText": "should we alias windowId: windowType ?", "author": "petrican", "createdAt": "2020-06-10T13:30:03Z", "path": "frontend/src/components/app/QuickActions.js", "diffHunk": "@@ -464,14 +503,9 @@ QuickActions.propTypes = {\n   onInvalidViewId: PropTypes.func,\n };\n \n-const mapStateToProps = (state, ownProps) => {\n-  const { viewId, windowType } = ownProps;\n-  const key = `${windowType}${viewId ? `-${viewId}` : ''}`;\n-\n-  return {\n-    actions: state.windowHandler.quickActions[key] || [],\n-  };\n-};\n+const mapStateToProps = (state, { viewId, windowType }) => ({\n+  actions: getQuickactions(state, { viewId, windowType }),", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyNTI3NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438125275", "bodyText": "can we destructure the functions from props and only use their names ?", "author": "petrican", "createdAt": "2020-06-10T13:33:46Z", "path": "frontend/src/components/keyshortcuts/DocumentListContextShortcuts.js", "diffHunk": "@@ -1,103 +1,115 @@\n-import React, { Component } from 'react';\n+import React, { Fragment, PureComponent } from 'react';\n import PropTypes from 'prop-types';\n import { Shortcut } from '../keyshortcuts';\n-import { arePropTypesIdentical } from '../../utils';\n \n-export default class DocumentListContextShortcuts extends Component {\n+export default class DocumentListContextShortcuts extends PureComponent {\n   handlers = {\n     OPEN_SELECTED: (event) => {\n       event.preventDefault();\n \n-      if (this.props.handleOpenNewTab) {\n-        this.props.handleOpenNewTab();\n+      if (this.props.onOpenNewTab) {\n+        this.handleOpenNewTab();\n       }\n     },\n     REMOVE_SELECTED: (event) => {\n       event.preventDefault();\n \n-      if (this.props.handleDelete) {\n-        this.props.handleDelete();\n+      if (this.props.onDelete) {\n+        this.props.onDelete();\n       }\n     },\n     ADVANCED_EDIT: (event) => {\n       event.preventDefault();\n \n-      if (this.props.handleAdvancedEdit) {\n-        this.props.handleAdvancedEdit();\n+      if (this.props.onAdvancedEdit) {\n+        this.onAdvancedEdit();\n \n         return true;\n       }\n \n       return false;\n     },\n-    SELECT_ALL_LEAFS: (event) => {\n+    SELECT_ALL_LEAVES: (event) => {\n       event.preventDefault();\n \n-      if (this.props.getAllLeafs) {\n-        this.props.getAllLeafs();\n+      if (this.props.onGetAllLeaves) {\n+        this.props.onGetAllLeaves();", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyNjc4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438126787", "bodyText": "...", "author": "petrican", "createdAt": "2020-06-10T13:35:59Z", "path": "frontend/src/components/table/Table.js", "diffHunk": "@@ -57,500 +33,170 @@ class Table extends Component {\n   }\n \n   componentDidMount() {\n-    const { rowData, tabId } = this.props;\n-    //selecting first table elem while getting indent data\n     this._isMounted = true;\n \n-    if (rowData.get(`${tabId}`)) {\n-      this.getIndentData(true);\n-    }\n     if (this.props.autofocus) {\n       this.table.focus();\n     }\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    if (this.state.rows.length && !nextProps.cols) {\n-      this.setState({ rows: [] });\n-    }\n-  }\n-\n-  componentDidUpdate(prevProps, prevState) {\n-    const {\n-      dispatch,\n-      mainTable,\n-      open,\n-      rowData,\n-      defaultSelected,\n-      disconnectFromState,\n-      windowId,\n-      refreshSelection,\n-      openIncludedViewOnSelect,\n-      viewId,\n-      tabId,\n-      isModal,\n-      hasIncluded,\n-      page,\n-    } = this.props;\n-    const { selected, rows } = this.state;\n-\n-    /**\n-     * Selection by default of first row if nothing selected\n-     */\n-    if (\n-      (_.isEmpty(defaultSelected) || _.isEmpty(selected)) &&\n-      selected[0] === undefined &&\n-      !_.isEmpty(rows)\n-    ) {\n-      this.setState({ selected: [rows[0].id] });\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: [rows[0].id],\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    } // end of selection for the first row if nothing selected\n-\n-    const selectedEqual = _.isEqual(prevState.selected, selected);\n-    const defaultSelectedEqual = _.isEqual(\n-      prevProps.defaultSelected,\n-      defaultSelected\n-    );\n+  componentDidUpdate(prevProps) {\n+    const { mainTable, open, rows } = this.props;\n \n     if (!this._isMounted) {\n       return;\n     }\n \n-    if (rows && !_.isEqual(prevState.rows, rows)) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      if (isModal && !hasIncluded) {\n-        let firstRow = rows[0];\n-\n-        if (firstRow) {\n-          if (openIncludedViewOnSelect) {\n-            this.showSelectedIncludedView([firstRow.id]);\n-          }\n-\n-          if (firstRow.id && !selectedEqual) {\n-            this.selectOneProduct(firstRow.id);\n-          }\n-        }\n-      }\n-    } else if (page !== prevProps.page) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-    }\n-\n-    if (mainTable && open) {\n-      this.table.focus();\n-    }\n-\n     if (\n-      (!defaultSelectedEqual && !selectedEqual) ||\n-      (refreshSelection && prevProps.refreshSelection !== refreshSelection)\n+      ((rows.length && prevProps.rows.length === 0) || (mainTable && open)) &&\n+      this.table\n     ) {\n-      this.setState({\n-        selected:\n-          defaultSelected && defaultSelected !== null ? defaultSelected : [],\n-      });\n-    } else if (!disconnectFromState && !selectedEqual && selected.length) {\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: selected,\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    }\n-\n-    if (prevProps.viewId !== viewId && rowData.get(`${tabId}`)) {\n-      if (defaultSelected && defaultSelected.length === 0) {\n-        this.setState({ selected: [] });\n-      }\n-\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      const firstLoad =\n-        prevProps.rowData.get(`${tabId}`) &&\n-        prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-          ? false\n-          : true;\n-\n-      this.getIndentData(firstLoad);\n-    } else if (rowData.get(`${tabId}`) && !is(prevProps.rowData, rowData)) {\n-      let firstLoad = rowData.get(`${tabId}`).size ? false : true;\n-\n-      if (\n-        prevProps.rowData.get(`${tabId}`) &&\n-        !prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-      ) {\n-        firstLoad = true;\n-      }\n+      this.table.focus();\n \n-      this.getIndentData(firstLoad);\n+      setTimeout(() => {\n+        // TODO: Figure a better way to do this https://github.com/metasfresh/metasfresh/issues/1679\n+        this.setState({\n+          tableRefreshToggle: !this.state.mounted,\n+        });\n+      }, 1);\n     }\n   }\n \n   componentWillUnmount() {\n-    const {\n-      showIncludedViewOnSelect,\n-      viewId,\n-      windowType,\n-      isIncluded,\n-    } = this.props;\n-\n     this._isMounted = false;\n-\n-    this.deselectAllProducts();\n-    if (showIncludedViewOnSelect && !isIncluded) {\n-      showIncludedViewOnSelect({\n-        showIncludedView: false,\n-        windowType,\n-        viewId,\n-      });\n-    }\n   }\n \n-  showSelectedIncludedView = (selected) => {\n-    const { showIncludedViewOnSelect, openIncludedViewOnSelect } = this.props;\n-    const { rows } = this.state;\n-\n-    if (openIncludedViewOnSelect && selected.length === 1) {\n-      rows.forEach((item) => {\n-        if (item.id === selected[0]) {\n-          showIncludedViewOnSelect({\n-            showIncludedView: item.supportIncludedViews,\n-            windowType: item.supportIncludedViews\n-              ? item.includedView.windowType || item.includedView.windowId\n-              : null,\n-            viewId: item.supportIncludedViews ? item.includedView.viewId : '',\n-          });\n-        }\n-      });\n-    }\n+  setListenTrue = () => {\n+    this.setState({ listenOnKeys: true });\n   };\n \n-  getIndentData = (selectFirst) => {\n-    const {\n-      rowData,\n-      tabId,\n-      indentSupported,\n-      collapsible,\n-      expandedDepth,\n-      keyProperty,\n-    } = this.props;\n-    const { selected } = this.state;\n-    let rowsData = [];\n-\n-    if (indentSupported && rowData.get(`${tabId}`).size) {\n-      rowsData = getRowsData(rowData.get(`${tabId}`));\n-\n-      let stateChange = {\n-        rows: rowsData,\n-        pendingInit: !rowsData,\n-      };\n-\n-      if (selectFirst) {\n-        stateChange = {\n-          ...stateChange,\n-          collapsedParentsRows: [],\n-          collapsedRows: [],\n-        };\n-      }\n-\n-      this.setState(stateChange, () => {\n-        const { rows } = this.state;\n-        const firstRow = rows[0];\n-\n-        let updatedParentsRows = [...this.state.collapsedParentsRows];\n-        let updatedRows = [...this.state.collapsedRows];\n+  setListenFalse = () => {\n+    this.setState({ listenOnKeys: false });\n+  };\n \n-        if (firstRow && selectFirst) {\n-          let selectedIndex = 0;\n-          if (\n-            selected &&\n-            selected.length === 1 &&\n-            selected[0] &&\n-            firstRow.id !== selected[0]\n-          ) {\n-            selectedIndex = _.findIndex(rows, (row) => row.id === selected[0]);\n-          }\n+  closeContextMenu = () => {\n+    this.setState({\n+      contextMenu: Object.assign({}, this.state.contextMenu, {", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyNzk5OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438127999", "bodyText": "doc param pls", "author": "petrican", "createdAt": "2020-06-10T13:37:40Z", "path": "frontend/src/components/table/Table.js", "diffHunk": "@@ -57,500 +33,170 @@ class Table extends Component {\n   }\n \n   componentDidMount() {\n-    const { rowData, tabId } = this.props;\n-    //selecting first table elem while getting indent data\n     this._isMounted = true;\n \n-    if (rowData.get(`${tabId}`)) {\n-      this.getIndentData(true);\n-    }\n     if (this.props.autofocus) {\n       this.table.focus();\n     }\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    if (this.state.rows.length && !nextProps.cols) {\n-      this.setState({ rows: [] });\n-    }\n-  }\n-\n-  componentDidUpdate(prevProps, prevState) {\n-    const {\n-      dispatch,\n-      mainTable,\n-      open,\n-      rowData,\n-      defaultSelected,\n-      disconnectFromState,\n-      windowId,\n-      refreshSelection,\n-      openIncludedViewOnSelect,\n-      viewId,\n-      tabId,\n-      isModal,\n-      hasIncluded,\n-      page,\n-    } = this.props;\n-    const { selected, rows } = this.state;\n-\n-    /**\n-     * Selection by default of first row if nothing selected\n-     */\n-    if (\n-      (_.isEmpty(defaultSelected) || _.isEmpty(selected)) &&\n-      selected[0] === undefined &&\n-      !_.isEmpty(rows)\n-    ) {\n-      this.setState({ selected: [rows[0].id] });\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: [rows[0].id],\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    } // end of selection for the first row if nothing selected\n-\n-    const selectedEqual = _.isEqual(prevState.selected, selected);\n-    const defaultSelectedEqual = _.isEqual(\n-      prevProps.defaultSelected,\n-      defaultSelected\n-    );\n+  componentDidUpdate(prevProps) {\n+    const { mainTable, open, rows } = this.props;\n \n     if (!this._isMounted) {\n       return;\n     }\n \n-    if (rows && !_.isEqual(prevState.rows, rows)) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      if (isModal && !hasIncluded) {\n-        let firstRow = rows[0];\n-\n-        if (firstRow) {\n-          if (openIncludedViewOnSelect) {\n-            this.showSelectedIncludedView([firstRow.id]);\n-          }\n-\n-          if (firstRow.id && !selectedEqual) {\n-            this.selectOneProduct(firstRow.id);\n-          }\n-        }\n-      }\n-    } else if (page !== prevProps.page) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-    }\n-\n-    if (mainTable && open) {\n-      this.table.focus();\n-    }\n-\n     if (\n-      (!defaultSelectedEqual && !selectedEqual) ||\n-      (refreshSelection && prevProps.refreshSelection !== refreshSelection)\n+      ((rows.length && prevProps.rows.length === 0) || (mainTable && open)) &&\n+      this.table\n     ) {\n-      this.setState({\n-        selected:\n-          defaultSelected && defaultSelected !== null ? defaultSelected : [],\n-      });\n-    } else if (!disconnectFromState && !selectedEqual && selected.length) {\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: selected,\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    }\n-\n-    if (prevProps.viewId !== viewId && rowData.get(`${tabId}`)) {\n-      if (defaultSelected && defaultSelected.length === 0) {\n-        this.setState({ selected: [] });\n-      }\n-\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      const firstLoad =\n-        prevProps.rowData.get(`${tabId}`) &&\n-        prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-          ? false\n-          : true;\n-\n-      this.getIndentData(firstLoad);\n-    } else if (rowData.get(`${tabId}`) && !is(prevProps.rowData, rowData)) {\n-      let firstLoad = rowData.get(`${tabId}`).size ? false : true;\n-\n-      if (\n-        prevProps.rowData.get(`${tabId}`) &&\n-        !prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-      ) {\n-        firstLoad = true;\n-      }\n+      this.table.focus();\n \n-      this.getIndentData(firstLoad);\n+      setTimeout(() => {\n+        // TODO: Figure a better way to do this https://github.com/metasfresh/metasfresh/issues/1679\n+        this.setState({\n+          tableRefreshToggle: !this.state.mounted,\n+        });\n+      }, 1);\n     }\n   }\n \n   componentWillUnmount() {\n-    const {\n-      showIncludedViewOnSelect,\n-      viewId,\n-      windowType,\n-      isIncluded,\n-    } = this.props;\n-\n     this._isMounted = false;\n-\n-    this.deselectAllProducts();\n-    if (showIncludedViewOnSelect && !isIncluded) {\n-      showIncludedViewOnSelect({\n-        showIncludedView: false,\n-        windowType,\n-        viewId,\n-      });\n-    }\n   }\n \n-  showSelectedIncludedView = (selected) => {\n-    const { showIncludedViewOnSelect, openIncludedViewOnSelect } = this.props;\n-    const { rows } = this.state;\n-\n-    if (openIncludedViewOnSelect && selected.length === 1) {\n-      rows.forEach((item) => {\n-        if (item.id === selected[0]) {\n-          showIncludedViewOnSelect({\n-            showIncludedView: item.supportIncludedViews,\n-            windowType: item.supportIncludedViews\n-              ? item.includedView.windowType || item.includedView.windowId\n-              : null,\n-            viewId: item.supportIncludedViews ? item.includedView.viewId : '',\n-          });\n-        }\n-      });\n-    }\n+  setListenTrue = () => {\n+    this.setState({ listenOnKeys: true });\n   };\n \n-  getIndentData = (selectFirst) => {\n-    const {\n-      rowData,\n-      tabId,\n-      indentSupported,\n-      collapsible,\n-      expandedDepth,\n-      keyProperty,\n-    } = this.props;\n-    const { selected } = this.state;\n-    let rowsData = [];\n-\n-    if (indentSupported && rowData.get(`${tabId}`).size) {\n-      rowsData = getRowsData(rowData.get(`${tabId}`));\n-\n-      let stateChange = {\n-        rows: rowsData,\n-        pendingInit: !rowsData,\n-      };\n-\n-      if (selectFirst) {\n-        stateChange = {\n-          ...stateChange,\n-          collapsedParentsRows: [],\n-          collapsedRows: [],\n-        };\n-      }\n-\n-      this.setState(stateChange, () => {\n-        const { rows } = this.state;\n-        const firstRow = rows[0];\n-\n-        let updatedParentsRows = [...this.state.collapsedParentsRows];\n-        let updatedRows = [...this.state.collapsedRows];\n+  setListenFalse = () => {\n+    this.setState({ listenOnKeys: false });\n+  };\n \n-        if (firstRow && selectFirst) {\n-          let selectedIndex = 0;\n-          if (\n-            selected &&\n-            selected.length === 1 &&\n-            selected[0] &&\n-            firstRow.id !== selected[0]\n-          ) {\n-            selectedIndex = _.findIndex(rows, (row) => row.id === selected[0]);\n-          }\n+  closeContextMenu = () => {\n+    this.setState({\n+      contextMenu: Object.assign({}, this.state.contextMenu, {\n+        open: false,\n+      }),\n+    });\n+  };\n \n-          if (!selectedIndex) {\n-            this.selectOneProduct(rows[0].id);\n-          }\n+  handleSelect = (id, idFocused, idFocusedDown, cb) => {", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEyODQ3MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438128470", "bodyText": "doc + params pls", "author": "petrican", "createdAt": "2020-06-10T13:38:19Z", "path": "frontend/src/components/table/Table.js", "diffHunk": "@@ -57,500 +33,170 @@ class Table extends Component {\n   }\n \n   componentDidMount() {\n-    const { rowData, tabId } = this.props;\n-    //selecting first table elem while getting indent data\n     this._isMounted = true;\n \n-    if (rowData.get(`${tabId}`)) {\n-      this.getIndentData(true);\n-    }\n     if (this.props.autofocus) {\n       this.table.focus();\n     }\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    if (this.state.rows.length && !nextProps.cols) {\n-      this.setState({ rows: [] });\n-    }\n-  }\n-\n-  componentDidUpdate(prevProps, prevState) {\n-    const {\n-      dispatch,\n-      mainTable,\n-      open,\n-      rowData,\n-      defaultSelected,\n-      disconnectFromState,\n-      windowId,\n-      refreshSelection,\n-      openIncludedViewOnSelect,\n-      viewId,\n-      tabId,\n-      isModal,\n-      hasIncluded,\n-      page,\n-    } = this.props;\n-    const { selected, rows } = this.state;\n-\n-    /**\n-     * Selection by default of first row if nothing selected\n-     */\n-    if (\n-      (_.isEmpty(defaultSelected) || _.isEmpty(selected)) &&\n-      selected[0] === undefined &&\n-      !_.isEmpty(rows)\n-    ) {\n-      this.setState({ selected: [rows[0].id] });\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: [rows[0].id],\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    } // end of selection for the first row if nothing selected\n-\n-    const selectedEqual = _.isEqual(prevState.selected, selected);\n-    const defaultSelectedEqual = _.isEqual(\n-      prevProps.defaultSelected,\n-      defaultSelected\n-    );\n+  componentDidUpdate(prevProps) {\n+    const { mainTable, open, rows } = this.props;\n \n     if (!this._isMounted) {\n       return;\n     }\n \n-    if (rows && !_.isEqual(prevState.rows, rows)) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      if (isModal && !hasIncluded) {\n-        let firstRow = rows[0];\n-\n-        if (firstRow) {\n-          if (openIncludedViewOnSelect) {\n-            this.showSelectedIncludedView([firstRow.id]);\n-          }\n-\n-          if (firstRow.id && !selectedEqual) {\n-            this.selectOneProduct(firstRow.id);\n-          }\n-        }\n-      }\n-    } else if (page !== prevProps.page) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-    }\n-\n-    if (mainTable && open) {\n-      this.table.focus();\n-    }\n-\n     if (\n-      (!defaultSelectedEqual && !selectedEqual) ||\n-      (refreshSelection && prevProps.refreshSelection !== refreshSelection)\n+      ((rows.length && prevProps.rows.length === 0) || (mainTable && open)) &&\n+      this.table\n     ) {\n-      this.setState({\n-        selected:\n-          defaultSelected && defaultSelected !== null ? defaultSelected : [],\n-      });\n-    } else if (!disconnectFromState && !selectedEqual && selected.length) {\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: selected,\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    }\n-\n-    if (prevProps.viewId !== viewId && rowData.get(`${tabId}`)) {\n-      if (defaultSelected && defaultSelected.length === 0) {\n-        this.setState({ selected: [] });\n-      }\n-\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      const firstLoad =\n-        prevProps.rowData.get(`${tabId}`) &&\n-        prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-          ? false\n-          : true;\n-\n-      this.getIndentData(firstLoad);\n-    } else if (rowData.get(`${tabId}`) && !is(prevProps.rowData, rowData)) {\n-      let firstLoad = rowData.get(`${tabId}`).size ? false : true;\n-\n-      if (\n-        prevProps.rowData.get(`${tabId}`) &&\n-        !prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-      ) {\n-        firstLoad = true;\n-      }\n+      this.table.focus();\n \n-      this.getIndentData(firstLoad);\n+      setTimeout(() => {\n+        // TODO: Figure a better way to do this https://github.com/metasfresh/metasfresh/issues/1679\n+        this.setState({\n+          tableRefreshToggle: !this.state.mounted,\n+        });\n+      }, 1);\n     }\n   }\n \n   componentWillUnmount() {\n-    const {\n-      showIncludedViewOnSelect,\n-      viewId,\n-      windowType,\n-      isIncluded,\n-    } = this.props;\n-\n     this._isMounted = false;\n-\n-    this.deselectAllProducts();\n-    if (showIncludedViewOnSelect && !isIncluded) {\n-      showIncludedViewOnSelect({\n-        showIncludedView: false,\n-        windowType,\n-        viewId,\n-      });\n-    }\n   }\n \n-  showSelectedIncludedView = (selected) => {\n-    const { showIncludedViewOnSelect, openIncludedViewOnSelect } = this.props;\n-    const { rows } = this.state;\n-\n-    if (openIncludedViewOnSelect && selected.length === 1) {\n-      rows.forEach((item) => {\n-        if (item.id === selected[0]) {\n-          showIncludedViewOnSelect({\n-            showIncludedView: item.supportIncludedViews,\n-            windowType: item.supportIncludedViews\n-              ? item.includedView.windowType || item.includedView.windowId\n-              : null,\n-            viewId: item.supportIncludedViews ? item.includedView.viewId : '',\n-          });\n-        }\n-      });\n-    }\n+  setListenTrue = () => {\n+    this.setState({ listenOnKeys: true });\n   };\n \n-  getIndentData = (selectFirst) => {\n-    const {\n-      rowData,\n-      tabId,\n-      indentSupported,\n-      collapsible,\n-      expandedDepth,\n-      keyProperty,\n-    } = this.props;\n-    const { selected } = this.state;\n-    let rowsData = [];\n-\n-    if (indentSupported && rowData.get(`${tabId}`).size) {\n-      rowsData = getRowsData(rowData.get(`${tabId}`));\n-\n-      let stateChange = {\n-        rows: rowsData,\n-        pendingInit: !rowsData,\n-      };\n-\n-      if (selectFirst) {\n-        stateChange = {\n-          ...stateChange,\n-          collapsedParentsRows: [],\n-          collapsedRows: [],\n-        };\n-      }\n-\n-      this.setState(stateChange, () => {\n-        const { rows } = this.state;\n-        const firstRow = rows[0];\n-\n-        let updatedParentsRows = [...this.state.collapsedParentsRows];\n-        let updatedRows = [...this.state.collapsedRows];\n+  setListenFalse = () => {\n+    this.setState({ listenOnKeys: false });\n+  };\n \n-        if (firstRow && selectFirst) {\n-          let selectedIndex = 0;\n-          if (\n-            selected &&\n-            selected.length === 1 &&\n-            selected[0] &&\n-            firstRow.id !== selected[0]\n-          ) {\n-            selectedIndex = _.findIndex(rows, (row) => row.id === selected[0]);\n-          }\n+  closeContextMenu = () => {\n+    this.setState({\n+      contextMenu: Object.assign({}, this.state.contextMenu, {\n+        open: false,\n+      }),\n+    });\n+  };\n \n-          if (!selectedIndex) {\n-            this.selectOneProduct(rows[0].id);\n-          }\n+  handleSelect = (id, idFocused, idFocusedDown, cb) => {\n+    const { onSelect } = this.props;\n \n-          document.getElementsByClassName('js-table')[0].focus();\n-        }\n+    onSelect(id, idFocused, idFocusedDown, cb);\n \n-        let mapCollapsed = [];\n+    this.triggerFocus(idFocused, idFocusedDown);\n+  };\n \n-        if (collapsible && rows && rows.length) {\n-          rows.map((row) => {\n-            if (row.indent.length >= expandedDepth && row.includedDocuments) {\n-              mapCollapsed = mapCollapsed.concat(collapsedMap(row));\n-              updatedParentsRows = updatedParentsRows.concat(row[keyProperty]);\n-            }\n-            if (row.indent.length > expandedDepth) {\n-              updatedRows = updatedRows.concat(row[keyProperty]);\n-            }\n-          });\n+  setContextMenu = (", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMTI3OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438131278", "bodyText": "is there always a selection ? should we add an extra safety check ?", "author": "petrican", "createdAt": "2020-06-10T13:42:12Z", "path": "frontend/src/components/table/Table.js", "diffHunk": "@@ -57,500 +33,170 @@ class Table extends Component {\n   }\n \n   componentDidMount() {\n-    const { rowData, tabId } = this.props;\n-    //selecting first table elem while getting indent data\n     this._isMounted = true;\n \n-    if (rowData.get(`${tabId}`)) {\n-      this.getIndentData(true);\n-    }\n     if (this.props.autofocus) {\n       this.table.focus();\n     }\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    if (this.state.rows.length && !nextProps.cols) {\n-      this.setState({ rows: [] });\n-    }\n-  }\n-\n-  componentDidUpdate(prevProps, prevState) {\n-    const {\n-      dispatch,\n-      mainTable,\n-      open,\n-      rowData,\n-      defaultSelected,\n-      disconnectFromState,\n-      windowId,\n-      refreshSelection,\n-      openIncludedViewOnSelect,\n-      viewId,\n-      tabId,\n-      isModal,\n-      hasIncluded,\n-      page,\n-    } = this.props;\n-    const { selected, rows } = this.state;\n-\n-    /**\n-     * Selection by default of first row if nothing selected\n-     */\n-    if (\n-      (_.isEmpty(defaultSelected) || _.isEmpty(selected)) &&\n-      selected[0] === undefined &&\n-      !_.isEmpty(rows)\n-    ) {\n-      this.setState({ selected: [rows[0].id] });\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: [rows[0].id],\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    } // end of selection for the first row if nothing selected\n-\n-    const selectedEqual = _.isEqual(prevState.selected, selected);\n-    const defaultSelectedEqual = _.isEqual(\n-      prevProps.defaultSelected,\n-      defaultSelected\n-    );\n+  componentDidUpdate(prevProps) {\n+    const { mainTable, open, rows } = this.props;\n \n     if (!this._isMounted) {\n       return;\n     }\n \n-    if (rows && !_.isEqual(prevState.rows, rows)) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      if (isModal && !hasIncluded) {\n-        let firstRow = rows[0];\n-\n-        if (firstRow) {\n-          if (openIncludedViewOnSelect) {\n-            this.showSelectedIncludedView([firstRow.id]);\n-          }\n-\n-          if (firstRow.id && !selectedEqual) {\n-            this.selectOneProduct(firstRow.id);\n-          }\n-        }\n-      }\n-    } else if (page !== prevProps.page) {\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-    }\n-\n-    if (mainTable && open) {\n-      this.table.focus();\n-    }\n-\n     if (\n-      (!defaultSelectedEqual && !selectedEqual) ||\n-      (refreshSelection && prevProps.refreshSelection !== refreshSelection)\n+      ((rows.length && prevProps.rows.length === 0) || (mainTable && open)) &&\n+      this.table\n     ) {\n-      this.setState({\n-        selected:\n-          defaultSelected && defaultSelected !== null ? defaultSelected : [],\n-      });\n-    } else if (!disconnectFromState && !selectedEqual && selected.length) {\n-      dispatch(\n-        updateTableSelection({\n-          tableId: getTableId({ windowType: windowId, viewId }),\n-          ids: selected,\n-        })\n-      );\n-      dispatch(\n-        selectTableItems({\n-          windowType: windowId,\n-          viewId,\n-          ids: selected,\n-        })\n-      );\n-    }\n-\n-    if (prevProps.viewId !== viewId && rowData.get(`${tabId}`)) {\n-      if (defaultSelected && defaultSelected.length === 0) {\n-        this.setState({ selected: [] });\n-      }\n-\n-      this.setState({\n-        collapsedRows: [],\n-        collapsedParentsRows: [],\n-      });\n-\n-      const firstLoad =\n-        prevProps.rowData.get(`${tabId}`) &&\n-        prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-          ? false\n-          : true;\n-\n-      this.getIndentData(firstLoad);\n-    } else if (rowData.get(`${tabId}`) && !is(prevProps.rowData, rowData)) {\n-      let firstLoad = rowData.get(`${tabId}`).size ? false : true;\n-\n-      if (\n-        prevProps.rowData.get(`${tabId}`) &&\n-        !prevProps.rowData.get(`${tabId}`).size &&\n-        rowData.get(`${tabId}`).size\n-      ) {\n-        firstLoad = true;\n-      }\n+      this.table.focus();\n \n-      this.getIndentData(firstLoad);\n+      setTimeout(() => {\n+        // TODO: Figure a better way to do this https://github.com/metasfresh/metasfresh/issues/1679\n+        this.setState({\n+          tableRefreshToggle: !this.state.mounted,\n+        });\n+      }, 1);\n     }\n   }\n \n   componentWillUnmount() {\n-    const {\n-      showIncludedViewOnSelect,\n-      viewId,\n-      windowType,\n-      isIncluded,\n-    } = this.props;\n-\n     this._isMounted = false;\n-\n-    this.deselectAllProducts();\n-    if (showIncludedViewOnSelect && !isIncluded) {\n-      showIncludedViewOnSelect({\n-        showIncludedView: false,\n-        windowType,\n-        viewId,\n-      });\n-    }\n   }\n \n-  showSelectedIncludedView = (selected) => {\n-    const { showIncludedViewOnSelect, openIncludedViewOnSelect } = this.props;\n-    const { rows } = this.state;\n-\n-    if (openIncludedViewOnSelect && selected.length === 1) {\n-      rows.forEach((item) => {\n-        if (item.id === selected[0]) {\n-          showIncludedViewOnSelect({\n-            showIncludedView: item.supportIncludedViews,\n-            windowType: item.supportIncludedViews\n-              ? item.includedView.windowType || item.includedView.windowId\n-              : null,\n-            viewId: item.supportIncludedViews ? item.includedView.viewId : '',\n-          });\n-        }\n-      });\n-    }\n+  setListenTrue = () => {\n+    this.setState({ listenOnKeys: true });\n   };\n \n-  getIndentData = (selectFirst) => {\n-    const {\n-      rowData,\n-      tabId,\n-      indentSupported,\n-      collapsible,\n-      expandedDepth,\n-      keyProperty,\n-    } = this.props;\n-    const { selected } = this.state;\n-    let rowsData = [];\n-\n-    if (indentSupported && rowData.get(`${tabId}`).size) {\n-      rowsData = getRowsData(rowData.get(`${tabId}`));\n-\n-      let stateChange = {\n-        rows: rowsData,\n-        pendingInit: !rowsData,\n-      };\n-\n-      if (selectFirst) {\n-        stateChange = {\n-          ...stateChange,\n-          collapsedParentsRows: [],\n-          collapsedRows: [],\n-        };\n-      }\n-\n-      this.setState(stateChange, () => {\n-        const { rows } = this.state;\n-        const firstRow = rows[0];\n-\n-        let updatedParentsRows = [...this.state.collapsedParentsRows];\n-        let updatedRows = [...this.state.collapsedRows];\n+  setListenFalse = () => {\n+    this.setState({ listenOnKeys: false });\n+  };\n \n-        if (firstRow && selectFirst) {\n-          let selectedIndex = 0;\n-          if (\n-            selected &&\n-            selected.length === 1 &&\n-            selected[0] &&\n-            firstRow.id !== selected[0]\n-          ) {\n-            selectedIndex = _.findIndex(rows, (row) => row.id === selected[0]);\n-          }\n+  closeContextMenu = () => {\n+    this.setState({\n+      contextMenu: Object.assign({}, this.state.contextMenu, {\n+        open: false,\n+      }),\n+    });\n+  };\n \n-          if (!selectedIndex) {\n-            this.selectOneProduct(rows[0].id);\n-          }\n+  handleSelect = (id, idFocused, idFocusedDown, cb) => {\n+    const { onSelect } = this.props;\n \n-          document.getElementsByClassName('js-table')[0].focus();\n-        }\n+    onSelect(id, idFocused, idFocusedDown, cb);\n \n-        let mapCollapsed = [];\n+    this.triggerFocus(idFocused, idFocusedDown);\n+  };\n \n-        if (collapsible && rows && rows.length) {\n-          rows.map((row) => {\n-            if (row.indent.length >= expandedDepth && row.includedDocuments) {\n-              mapCollapsed = mapCollapsed.concat(collapsedMap(row));\n-              updatedParentsRows = updatedParentsRows.concat(row[keyProperty]);\n-            }\n-            if (row.indent.length > expandedDepth) {\n-              updatedRows = updatedRows.concat(row[keyProperty]);\n-            }\n-          });\n+  setContextMenu = (\n+    clientX,\n+    clientY,\n+    fieldName,\n+    supportZoomInto,\n+    supportFieldEdit\n+  ) => {\n+    this.setState({\n+      contextMenu: {\n+        ...this.state.contextMenu,\n+        x: clientX,\n+        y: clientY,\n+        open: true,\n+        fieldName,\n+        supportZoomInto,\n+        supportFieldEdit,\n+      },\n+    });\n+  };\n \n-          const updatedState = {\n-            dataHash: uuid(),\n-          };\n+  getProductRange = (id) => {\n+    const { keyProperty, rows, selected } = this.props;\n+    let arrayIndex;\n+    let selectIdA;\n+    let selectIdB;\n \n-          if (mapCollapsed.length) {\n-            updatedState.collapsedArrayMap = mapCollapsed;\n-          }\n-          if (updatedRows.length) {\n-            updatedState.collapsedRows = updatedRows;\n-          }\n-          if (updatedParentsRows.length) {\n-            updatedState.collapsedParentsRows = updatedParentsRows;\n-          }\n+    arrayIndex = rows.map((item) => item[keyProperty]);\n+    selectIdA = arrayIndex.findIndex((x) => x === id);\n+    selectIdB = arrayIndex.findIndex((x) => x === selected[0]);\n \n-          if (Object.keys(updatedState).length) {\n-            this.setState({ ...updatedState });\n-          }\n-        }\n-      });\n-    } else {\n-      rowsData =\n-        rowData.get(`${tabId}`) && rowData.get(`${tabId}`).size\n-          ? rowData.get(`${tabId}`).toArray()\n-          : [];\n-\n-      this.setState({\n-        rows: rowsData,\n-        dataHash: uuid(),\n-        pendingInit: !rowData.get(`${tabId}`),\n-      });\n-    }\n+    const selectedArr = [selectIdA, selectIdB];\n \n-    if (rowsData.length) {\n-      setTimeout(() => {\n-        if (this._isMounted) {\n-          this.setState({\n-            tableRefreshToggle: !this.state.mounted,\n-          });\n-        }\n-      }, 1);\n-    }\n+    selectedArr.sort((a, b) => a - b);\n+    return arrayIndex.slice(selectedArr[0], selectedArr[1] + 1);\n   };\n \n-  getAllLeafs = () => {\n-    const { rows, selected } = this.state;\n-    let leafs = [];\n-    let leafsIds = [];\n-\n-    rows.map((item) => {\n-      if (item.id == selected[0]) {\n-        leafs = mapIncluded(item);\n-      }\n-    });\n+  handleBatchEntryToggle = () => {\n+    const { isBatchEntry } = this.state;\n \n-    leafs.map((item) => {\n-      leafsIds = leafsIds.concat(item.id);\n+    this.setState({\n+      isBatchEntry: !isBatchEntry,\n     });\n-\n-    this.selectRangeProduct(leafsIds);\n   };\n \n-  setListenTrue = () => {\n-    this.setState({ listenOnKeys: true });\n+  handleDelete = () => {\n+    this.setState({\n+      promptOpen: true,\n+    });\n   };\n \n-  setListenFalse = () => {\n-    this.setState({ listenOnKeys: false });\n+  handlePromptCancelClick = () => {\n+    this.setState({\n+      promptOpen: false,\n+    });\n   };\n \n-  selectProduct = (id, idFocused, idFocusedDown) => {\n-    const {\n-      dispatch,\n-      windowId,\n-      disconnectFromState,\n-      tabInfo,\n-      viewId,\n-    } = this.props;\n-    const { selected } = this.state;\n-    let newSelected = [];\n-    if (!selected[0]) {\n-      newSelected = [id];\n-    } else {\n-      newSelected = selected.concat([id]);\n-    }\n-\n-    this.setState({ selected: newSelected }, () => {\n-      const { selected } = this.state;\n-\n-      if (tabInfo) {\n-        dispatch(\n-          updateTableSelection({\n-            tableId: getTableId({ windowType: windowId, viewId }),\n-            ids: selected,\n-          })\n-        );\n-        dispatch(\n-          selectTableItems({\n-            windowType: windowId,\n-            viewId,\n-            ids: selected,\n-          })\n-        );\n-      }\n-\n-      if (!disconnectFromState) {\n-        dispatch(\n-          updateTableSelection({\n-            tableId: getTableId({ windowType: windowId, viewId }),\n-            ids: selected,\n-          })\n-        );\n-        dispatch(\n-          selectTableItems({\n-            windowType: windowId,\n-            viewId,\n-            ids: selected,\n-          })\n-        );\n-      }\n+  handlePromptSubmitClick = (selected) => {\n+    const { onPromptSubmit } = this.props;\n \n-      this.triggerFocus(idFocused, idFocusedDown);\n-    });\n+    onPromptSubmit && onPromptSubmit(selected);\n \n-    return newSelected;\n+    this.setState({ promptOpen: false });\n   };\n \n-  selectRangeProduct = (ids) => {\n-    const { dispatch, tabInfo, windowId, viewId } = this.props;\n+  handleShortcutIndent = (collapse) => {\n+    const { selected, rows, onRowCollapse } = this.props;\n+    let node = null;\n \n-    this.setState({ selected: [...ids] });\n+    selected.length === 1 &&\n+      rows.map((item) => {\n+        if (item.id === selected[0]) {", "originalCommit": "adb28faab87d22c900cbfecb04e820fcddd35c0d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODIxMzcxNA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438213714", "bodyText": "there's always a selection array in the state now", "author": "siemiatj", "createdAt": "2020-06-10T15:28:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMTI3OA=="}], "type": "inlineReview"}, {"oid": "7b76b29c03420e06834a77becd636b943ea5b3fa", "url": "https://github.com/metasfresh/metasfresh/commit/7b76b29c03420e06834a77becd636b943ea5b3fa", "message": "#6706 fix sfocusing rows when selected with key", "committedDate": "2020-06-10T15:43:38Z", "type": "commit"}, {"oid": "5e205eef276330ac0f82d585a9ef1efb794cc4ee", "url": "https://github.com/metasfresh/metasfresh/commit/5e205eef276330ac0f82d585a9ef1efb794cc4ee", "message": "unrelated build problem fix", "committedDate": "2020-06-10T15:46:51Z", "type": "commit"}, {"oid": "9febff4ecfba077cfd5f817e05720e205b31e80e", "url": "https://github.com/metasfresh/metasfresh/commit/9febff4ecfba077cfd5f817e05720e205b31e80e", "message": "#6706 linter error", "committedDate": "2020-06-10T16:23:50Z", "type": "commit"}, {"oid": "075ac3cfc22846ce0ba1d9db93541309d5c77862", "url": "https://github.com/metasfresh/metasfresh/commit/075ac3cfc22846ce0ba1d9db93541309d5c77862", "message": "#6706 update tests", "committedDate": "2020-06-10T16:57:54Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MDkzOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438780939", "bodyText": "can we move all this logic from L:70-78 to a separate function that can live outside the Table component  in tableHelpers ?  let newSelection = getSelectionForIds(ids). Goal is to have the Table as thin as possible", "author": "petrican", "createdAt": "2020-06-11T13:29:40Z", "path": "frontend/src/containers/Table.js", "diffHunk": "@@ -0,0 +1,268 @@\n+import update from 'immutability-helper';\n+import React, { PureComponent } from 'react';\n+import { connect } from 'react-redux';\n+\n+import { getZoomIntoWindow, deleteRequest } from '../api';\n+import { getTableId, getTable } from '../reducers/tables';\n+\n+import {\n+  updateTableSelection,\n+  deselectTableItems,\n+  collapseTableRow,\n+} from '../actions/TableActions';\n+import { showIncludedView } from '../actions/ViewActions';\n+import { openModal } from '../actions/WindowActions';\n+\n+import { containerPropTypes } from '../utils/tableHelpers';\n+import { mapIncluded } from '../utils/documentListHelper';\n+\n+import Table from '../components/table/Table';\n+\n+class TableContainer extends PureComponent {\n+  componentWillUnmount() {\n+    const {\n+      showIncludedView,\n+      viewId,\n+      windowId,\n+      isIncluded,\n+      isModal,\n+    } = this.props;\n+\n+    if (!isIncluded) {\n+      const identifier = isModal ? viewId : windowId;\n+\n+      showIncludedView({\n+        id: identifier,\n+        showIncludedView: false,\n+        windowId,\n+        viewId,\n+      });\n+    }\n+  }\n+\n+  getAllLeaves = () => {\n+    const { rows, selected } = this.props;\n+    let leafs = [];\n+    let leafsIds = [];\n+\n+    rows.map((item) => {\n+      if (item.id === selected[0]) {\n+        leafs = mapIncluded(item);\n+      }\n+    });\n+\n+    leafs.map((item) => {\n+      leafsIds = leafsIds.concat(item.id);\n+    });\n+\n+    this.handleSelect(leafsIds);\n+  };\n+\n+  handleSelect = (ids, cb) => {\n+    const {\n+      updateTableSelection,\n+      windowId,\n+      viewId,\n+      docId,\n+      tabId,\n+      keyProperty,\n+    } = this.props;\n+    let newSelected = [];", "originalCommit": "075ac3cfc22846ce0ba1d9db93541309d5c77862", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MDU2OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r439380569", "bodyText": "But this is in the container, which is ~270 LOC's so I don't really see much sense. Also we'd then have to pass like 6 or 7 parameters.", "author": "siemiatj", "createdAt": "2020-06-12T12:10:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MDkzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MzUwNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438783505", "bodyText": "I would move this also outside the component.", "author": "petrican", "createdAt": "2020-06-11T13:32:53Z", "path": "frontend/src/containers/Table.js", "diffHunk": "@@ -0,0 +1,268 @@\n+import update from 'immutability-helper';\n+import React, { PureComponent } from 'react';\n+import { connect } from 'react-redux';\n+\n+import { getZoomIntoWindow, deleteRequest } from '../api';\n+import { getTableId, getTable } from '../reducers/tables';\n+\n+import {\n+  updateTableSelection,\n+  deselectTableItems,\n+  collapseTableRow,\n+} from '../actions/TableActions';\n+import { showIncludedView } from '../actions/ViewActions';\n+import { openModal } from '../actions/WindowActions';\n+\n+import { containerPropTypes } from '../utils/tableHelpers';\n+import { mapIncluded } from '../utils/documentListHelper';\n+\n+import Table from '../components/table/Table';\n+\n+class TableContainer extends PureComponent {\n+  componentWillUnmount() {\n+    const {\n+      showIncludedView,\n+      viewId,\n+      windowId,\n+      isIncluded,\n+      isModal,\n+    } = this.props;\n+\n+    if (!isIncluded) {\n+      const identifier = isModal ? viewId : windowId;\n+\n+      showIncludedView({\n+        id: identifier,\n+        showIncludedView: false,\n+        windowId,\n+        viewId,\n+      });\n+    }\n+  }\n+\n+  getAllLeaves = () => {\n+    const { rows, selected } = this.props;\n+    let leafs = [];\n+    let leafsIds = [];\n+\n+    rows.map((item) => {\n+      if (item.id === selected[0]) {\n+        leafs = mapIncluded(item);\n+      }\n+    });\n+\n+    leafs.map((item) => {\n+      leafsIds = leafsIds.concat(item.id);\n+    });\n+\n+    this.handleSelect(leafsIds);\n+  };\n+\n+  handleSelect = (ids, cb) => {\n+    const {\n+      updateTableSelection,\n+      windowId,\n+      viewId,\n+      docId,\n+      tabId,\n+      keyProperty,\n+    } = this.props;\n+    let newSelected = [];\n+\n+    if (ids) {\n+      if (!ids.splice) {\n+        newSelected = [ids];\n+      } else {\n+        newSelected = ids;\n+      }\n+    }\n+\n+    updateTableSelection(\n+      getTableId({ windowId, viewId, docId, tabId }),\n+      newSelected,\n+      keyProperty\n+    ).then(() => {\n+      cb && cb();\n+    });\n+\n+    return newSelected;\n+  };\n+\n+  handleSelectAll = () => {\n+    const { keyProperty, rows } = this.props;\n+    const property = keyProperty ? keyProperty : 'rowId';\n+    const toSelect = rows.map((item) => item[property]);\n+\n+    this.handleSelect(toSelect);\n+  };\n+\n+  handleDeselect = (id) => {\n+    const { deselectTableItems, windowId, viewId, selected } = this.props;\n+    const tableId = getTableId({ windowId, viewId });\n+    const index = selected.indexOf(id);\n+\n+    // TODO: Do we need this returned value ? Maybe we can handle\n+    // this in redux only?\n+    const newSelected = update(selected, { $splice: [[index, 1]] });\n+\n+    if (!newSelected.length) {\n+      deselectTableItems(tableId, [id]);\n+    }\n+\n+    return newSelected;\n+  };\n+\n+  handleDeselectAll = (callback) => {\n+    const { deselectTableItems, windowId, viewId, docId, tabId } = this.props;\n+\n+    callback && callback();\n+\n+    deselectTableItems(getTableId({ windowId, viewId, docId, tabId }), []);\n+  };\n+\n+  // TODO: This reallydoesn't do anything. Check if it's still a valid solution\n+  handleItemChange = () => {\n+    const { onRowEdited } = this.props;\n+\n+    onRowEdited && onRowEdited(true);\n+  };\n+\n+  openTableModal = () => {\n+    const { openModal, windowId, tabId } = this.props;\n+\n+    openModal('Add new', windowId, 'window', tabId, 'NEW');\n+  };\n+\n+  /**\n+   * @method handleAdvancedEdit\n+   * @summary Handles advanced edit - i.e case when ALT+E key combinations are being used\n+   *          Active only on subtables\n+   */\n+  handleAdvancedEdit = () => {\n+    const { openModal, windowId, tabId, docId, selected } = this.props;\n+\n+    if (docId) {\n+      openModal('Advanced edit', windowId, 'window', tabId, selected[0], true);\n+    }\n+  };\n+\n+  handlePromptSubmit = (selected) => {\n+    const { windowId, docId, updateDocList, tabId } = this.props;\n+\n+    this.handleSelect();\n+\n+    // TODO: This should be an action creator\n+    deleteRequest(\n+      'window',\n+      windowId,\n+      docId ? docId : null,\n+      docId ? tabId : null,\n+      selected\n+    ).then(() => {\n+      if (!docId) {\n+        updateDocList();\n+      }\n+    });\n+  };\n+\n+  handleZoomInto = (fieldName) => {\n+    const { entity, windowId, docId, tabId, viewId, selected } = this.props;\n+\n+    getZoomIntoWindow(", "originalCommit": "075ac3cfc22846ce0ba1d9db93541309d5c77862", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM4MTAzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r439381037", "bodyText": "Same as above.", "author": "siemiatj", "createdAt": "2020-06-12T12:11:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4MzUwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4NzgwMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438787803", "bodyText": "This is not quite reliable to get the language. I found out that the most reliable way is from the localStore where it is set as a result of the call to getSession.  See ex: https://github.com/metasfresh/metasfresh/pull/6824/files#diff-858b40143f05e165f6bc793cd0a6fa32R303", "author": "petrican", "createdAt": "2020-06-11T13:37:23Z", "path": "frontend/src/containers/Table.js", "diffHunk": "@@ -0,0 +1,268 @@\n+import update from 'immutability-helper';\n+import React, { PureComponent } from 'react';\n+import { connect } from 'react-redux';\n+\n+import { getZoomIntoWindow, deleteRequest } from '../api';\n+import { getTableId, getTable } from '../reducers/tables';\n+\n+import {\n+  updateTableSelection,\n+  deselectTableItems,\n+  collapseTableRow,\n+} from '../actions/TableActions';\n+import { showIncludedView } from '../actions/ViewActions';\n+import { openModal } from '../actions/WindowActions';\n+\n+import { containerPropTypes } from '../utils/tableHelpers';\n+import { mapIncluded } from '../utils/documentListHelper';\n+\n+import Table from '../components/table/Table';\n+\n+class TableContainer extends PureComponent {\n+  componentWillUnmount() {\n+    const {\n+      showIncludedView,\n+      viewId,\n+      windowId,\n+      isIncluded,\n+      isModal,\n+    } = this.props;\n+\n+    if (!isIncluded) {\n+      const identifier = isModal ? viewId : windowId;\n+\n+      showIncludedView({\n+        id: identifier,\n+        showIncludedView: false,\n+        windowId,\n+        viewId,\n+      });\n+    }\n+  }\n+\n+  getAllLeaves = () => {\n+    const { rows, selected } = this.props;\n+    let leafs = [];\n+    let leafsIds = [];\n+\n+    rows.map((item) => {\n+      if (item.id === selected[0]) {\n+        leafs = mapIncluded(item);\n+      }\n+    });\n+\n+    leafs.map((item) => {\n+      leafsIds = leafsIds.concat(item.id);\n+    });\n+\n+    this.handleSelect(leafsIds);\n+  };\n+\n+  handleSelect = (ids, cb) => {\n+    const {\n+      updateTableSelection,\n+      windowId,\n+      viewId,\n+      docId,\n+      tabId,\n+      keyProperty,\n+    } = this.props;\n+    let newSelected = [];\n+\n+    if (ids) {\n+      if (!ids.splice) {\n+        newSelected = [ids];\n+      } else {\n+        newSelected = ids;\n+      }\n+    }\n+\n+    updateTableSelection(\n+      getTableId({ windowId, viewId, docId, tabId }),\n+      newSelected,\n+      keyProperty\n+    ).then(() => {\n+      cb && cb();\n+    });\n+\n+    return newSelected;\n+  };\n+\n+  handleSelectAll = () => {\n+    const { keyProperty, rows } = this.props;\n+    const property = keyProperty ? keyProperty : 'rowId';\n+    const toSelect = rows.map((item) => item[property]);\n+\n+    this.handleSelect(toSelect);\n+  };\n+\n+  handleDeselect = (id) => {\n+    const { deselectTableItems, windowId, viewId, selected } = this.props;\n+    const tableId = getTableId({ windowId, viewId });\n+    const index = selected.indexOf(id);\n+\n+    // TODO: Do we need this returned value ? Maybe we can handle\n+    // this in redux only?\n+    const newSelected = update(selected, { $splice: [[index, 1]] });\n+\n+    if (!newSelected.length) {\n+      deselectTableItems(tableId, [id]);\n+    }\n+\n+    return newSelected;\n+  };\n+\n+  handleDeselectAll = (callback) => {\n+    const { deselectTableItems, windowId, viewId, docId, tabId } = this.props;\n+\n+    callback && callback();\n+\n+    deselectTableItems(getTableId({ windowId, viewId, docId, tabId }), []);\n+  };\n+\n+  // TODO: This reallydoesn't do anything. Check if it's still a valid solution\n+  handleItemChange = () => {\n+    const { onRowEdited } = this.props;\n+\n+    onRowEdited && onRowEdited(true);\n+  };\n+\n+  openTableModal = () => {\n+    const { openModal, windowId, tabId } = this.props;\n+\n+    openModal('Add new', windowId, 'window', tabId, 'NEW');\n+  };\n+\n+  /**\n+   * @method handleAdvancedEdit\n+   * @summary Handles advanced edit - i.e case when ALT+E key combinations are being used\n+   *          Active only on subtables\n+   */\n+  handleAdvancedEdit = () => {\n+    const { openModal, windowId, tabId, docId, selected } = this.props;\n+\n+    if (docId) {\n+      openModal('Advanced edit', windowId, 'window', tabId, selected[0], true);\n+    }\n+  };\n+\n+  handlePromptSubmit = (selected) => {\n+    const { windowId, docId, updateDocList, tabId } = this.props;\n+\n+    this.handleSelect();\n+\n+    // TODO: This should be an action creator\n+    deleteRequest(\n+      'window',\n+      windowId,\n+      docId ? docId : null,\n+      docId ? tabId : null,\n+      selected\n+    ).then(() => {\n+      if (!docId) {\n+        updateDocList();\n+      }\n+    });\n+  };\n+\n+  handleZoomInto = (fieldName) => {\n+    const { entity, windowId, docId, tabId, viewId, selected } = this.props;\n+\n+    getZoomIntoWindow(\n+      entity,\n+      windowId,\n+      docId,\n+      entity === 'window' ? tabId : viewId,\n+      selected[0],\n+      fieldName\n+    ).then((res) => {\n+      res &&\n+        res.data &&\n+        window.open(\n+          `/window/${res.data.documentPath.windowId}/${\n+            res.data.documentPath.documentId\n+          }`,\n+          '_blank'\n+        );\n+    });\n+  };\n+\n+  handleRowCollapse = (node, collapse) => {\n+    const { collapseTableRow, windowId, viewId, tabId, docId } = this.props;\n+    const tableId = getTableId({ windowId, viewId, docId, tabId });\n+\n+    collapseTableRow({ tableId, collapse, node });\n+  };\n+\n+  render() {\n+    return (\n+      <Table\n+        {...this.props}\n+        onHandleZoomInto={this.handleZoomInto}\n+        onPromptSubmit={this.handlePromptSubmit}\n+        onItemChange={this.handleItemChange}\n+        onSelect={this.handleSelect}\n+        onSelectAll={this.handleSelectAll}\n+        onDeselectAll={this.handleDeselectAll}\n+        onDeselect={this.handleDeselect}\n+        onRowCollapse={this.handleRowCollapse}\n+        onGetAllLeaves={this.getAllLeaves}\n+        onHandleAdvancedEdit={this.handleAdvancedEdit}\n+        onOpenTableModal={this.openTableModal}\n+      />\n+    );\n+  }\n+}\n+\n+TableContainer.propTypes = containerPropTypes;\n+\n+const mapStateToProps = (state, props) => {\n+  const { windowId, docId, tabId, viewId } = props;\n+  const tableId = getTableId({ windowId, viewId, docId, tabId });\n+  const table = getTable(state, tableId);\n+  const modalVisible = state.windowHandler.modal.visible;\n+  let handleShortcuts = state.windowHandler.allowShortcut;\n+\n+  // we don't have to worry about shortcuts if table is behind a modal\n+  if (modalVisible && !props.isModal) {\n+    handleShortcuts = false;\n+  }\n+\n+  return {\n+    rows: table.rows,\n+    columns: table.columns,\n+    selected: table.selected,\n+    pending: table.dataPending,\n+    collapsedParentRows: table.collapsedParentRows,\n+    collapsedRows: table.collapsedRows,\n+    collapsedArrayMap: table.collapsedArrayMap,\n+    activeSort: table.activeSort,\n+    emptyText: table.emptyText,\n+    emptyHint: table.emptyHint,\n+    indentSupported: table.indentSupported,\n+    collapsible: table.collapsible,\n+    keyProperty: table.keyProperty,\n+    size: table.size,\n+    allowShortcut: handleShortcuts,\n+    allowOutsideClick: state.windowHandler.allowOutsideClick,\n+    modalVisible,\n+    isGerman:\n+      state.appHandler.me.language && state.appHandler.me.language.key", "originalCommit": "075ac3cfc22846ce0ba1d9db93541309d5c77862", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1NTUwMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r439455503", "bodyText": "This is not in BIG_BANG yet, so I can update that after I'll rebase it with master.", "author": "siemiatj", "createdAt": "2020-06-12T14:32:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODc4NzgwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwMjk4OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438802988", "bodyText": "Not sure I understand why this is being removed. Pls explain", "author": "petrican", "createdAt": "2020-06-11T13:53:26Z", "path": "frontend/src/reducers/viewHandler.js", "diffHunk": "@@ -163,7 +160,7 @@ export default function viewHandler(state = initialState, action) {\n           firstRow,\n           headerProperties,\n           pageLength,\n-          result,\n+          // result,", "originalCommit": "075ac3cfc22846ce0ba1d9db93541309d5c77862", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM1MTM2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r439351361", "bodyText": "because we have rows in the tables reducer.", "author": "siemiatj", "createdAt": "2020-06-12T10:58:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwMjk4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDQ5MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r438804491", "bodyText": "why do we have isShowIncluded and also hasShowIncluded with the same value. Couldn't we just use one of them ?", "author": "petrican", "createdAt": "2020-06-11T13:55:04Z", "path": "frontend/src/reducers/viewHandler.js", "diffHunk": "@@ -399,6 +377,23 @@ export default function viewHandler(state = initialState, action) {\n       };\n     }\n \n+    case TOGGLE_INCLUDED_VIEW: {\n+      const { id, showIncludedView } = action.payload;\n+      const view = getLocalView(state, id);\n+\n+      return {\n+        ...state,\n+        views: {\n+          ...state.views,\n+          [`${id}`]: {\n+            ...view,\n+            isShowIncluded: !!showIncludedView,", "originalCommit": "075ac3cfc22846ce0ba1d9db93541309d5c77862", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTM3MjExMA==", "url": "https://github.com/metasfresh/metasfresh/pull/6772#discussion_r439372110", "bodyText": "I have no idea. Looks like some hack from the old days. I did not wanted to touch it, since it's not in the Table component but looks to be safe.", "author": "siemiatj", "createdAt": "2020-06-12T11:48:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODgwNDQ5MQ=="}], "type": "inlineReview"}, {"oid": "a1ca26f362af9d71302c2012e8a8ee008e9af77c", "url": "https://github.com/metasfresh/metasfresh/commit/a1ca26f362af9d71302c2012e8a8ee008e9af77c", "message": "#6706 small refactoring", "committedDate": "2020-06-12T12:49:03Z", "type": "commit"}, {"oid": "d3b4f12d76f742e84cb63d16ba03a143c9552172", "url": "https://github.com/metasfresh/metasfresh/commit/d3b4f12d76f742e84cb63d16ba03a143c9552172", "message": "#6706 add code comments", "committedDate": "2020-06-12T12:49:19Z", "type": "commit"}, {"oid": "69160575b728f12861b7ae76638a7fc1b2eb7e5a", "url": "https://github.com/metasfresh/metasfresh/commit/69160575b728f12861b7ae76638a7fc1b2eb7e5a", "message": "#6706 more comments", "committedDate": "2020-06-12T14:34:07Z", "type": "commit"}, {"oid": "69160575b728f12861b7ae76638a7fc1b2eb7e5a", "url": "https://github.com/metasfresh/metasfresh/commit/69160575b728f12861b7ae76638a7fc1b2eb7e5a", "message": "#6706 more comments", "committedDate": "2020-06-12T14:34:07Z", "type": "forcePushed"}, {"oid": "d93a58d98a61c428a92bdfa5dd09f6ae52e1d964", "url": "https://github.com/metasfresh/metasfresh/commit/d93a58d98a61c428a92bdfa5dd09f6ae52e1d964", "message": "#6706 fixing jenkins tests", "committedDate": "2020-06-12T14:45:18Z", "type": "commit"}]}