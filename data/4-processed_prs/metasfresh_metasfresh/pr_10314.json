{"pr_number": 10314, "pr_title": "Add Service for autogenerated Attributes", "pr_createdAt": "2020-11-26T14:19:16Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/10314", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MzY3Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531063677", "bodyText": "when loading to cache i would suggest to load ALL records because they are not many.", "author": "teosarca", "createdAt": "2020-11-26T14:25:56Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ComponentGeneratorRepository.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.javaclasses.JavaClassId;\n+import de.metas.product.ProductId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.I_PP_ComponentGenerator;\n+import org.compiere.model.I_PP_ComponentGenerator_Param;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Repository\n+public class ComponentGeneratorRepository\n+{\n+\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\t// TODO tbp: CCache this\n+\n+\t@Nullable\n+\tpublic PP_ComponentGenerator getByProductId(@NonNull final ProductId productId)", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNzUyMA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531527520", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-27T10:51:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2MzY3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2Mzk2OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531063969", "bodyText": "prefer Optional.emty() instead", "author": "teosarca", "createdAt": "2020-11-26T14:26:21Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ComponentGeneratorRepository.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.javaclasses.JavaClassId;\n+import de.metas.product.ProductId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.I_PP_ComponentGenerator;\n+import org.compiere.model.I_PP_ComponentGenerator_Param;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Repository\n+public class ComponentGeneratorRepository\n+{\n+\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\t// TODO tbp: CCache this\n+\n+\t@Nullable\n+\tpublic PP_ComponentGenerator getByProductId(@NonNull final ProductId productId)\n+\t{\n+\t\tfinal I_PP_ComponentGenerator po = queryBL.createQueryBuilder(I_PP_ComponentGenerator.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_PP_ComponentGenerator.COLUMNNAME_M_Product_ID, productId)\n+\t\t\t\t.create()\n+\t\t\t\t.first();\n+\n+\t\tif (po == null)\n+\t\t{\n+\t\t\treturn null;", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NTkyNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531455925", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-27T08:43:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2Mzk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDM3Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531064372", "bodyText": "when u will load all records in one round, keep in mind to avoid SQL N+1 here", "author": "teosarca", "createdAt": "2020-11-26T14:26:54Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ComponentGeneratorRepository.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.javaclasses.JavaClassId;\n+import de.metas.product.ProductId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.I_PP_ComponentGenerator;\n+import org.compiere.model.I_PP_ComponentGenerator_Param;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Repository\n+public class ComponentGeneratorRepository\n+{\n+\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\t// TODO tbp: CCache this\n+\n+\t@Nullable\n+\tpublic PP_ComponentGenerator getByProductId(@NonNull final ProductId productId)\n+\t{\n+\t\tfinal I_PP_ComponentGenerator po = queryBL.createQueryBuilder(I_PP_ComponentGenerator.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_PP_ComponentGenerator.COLUMNNAME_M_Product_ID, productId)\n+\t\t\t\t.create()\n+\t\t\t\t.first();\n+\n+\t\tif (po == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal List<I_PP_ComponentGenerator_Param> paramsPO = queryBL.createQueryBuilder(I_PP_ComponentGenerator_Param.class)", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUyNzU2OA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531527568", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-27T10:51:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDg1OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531064859", "bodyText": "@NonNull", "author": "teosarca", "createdAt": "2020-11-26T14:27:40Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ComponentGeneratorRepository.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.javaclasses.JavaClassId;\n+import de.metas.product.ProductId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.I_PP_ComponentGenerator;\n+import org.compiere.model.I_PP_ComponentGenerator_Param;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Repository\n+public class ComponentGeneratorRepository\n+{\n+\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\t// TODO tbp: CCache this\n+\n+\t@Nullable\n+\tpublic PP_ComponentGenerator getByProductId(@NonNull final ProductId productId)\n+\t{\n+\t\tfinal I_PP_ComponentGenerator po = queryBL.createQueryBuilder(I_PP_ComponentGenerator.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_PP_ComponentGenerator.COLUMNNAME_M_Product_ID, productId)\n+\t\t\t\t.create()\n+\t\t\t\t.first();\n+\n+\t\tif (po == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal List<I_PP_ComponentGenerator_Param> paramsPO = queryBL.createQueryBuilder(I_PP_ComponentGenerator_Param.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_PP_ComponentGenerator_Param.COLUMNNAME_PP_ComponentGenerator_ID, po.getPP_ComponentGenerator_ID())\n+\t\t\t\t.create()\n+\t\t\t\t.list();\n+\n+\t\tfinal ImmutableMap<String, String> params = paramsPO.stream()\n+\t\t\t\t.map(param -> GuavaCollectors.entry(param.getName(), param.getValue()))\n+\t\t\t\t.collect(GuavaCollectors.toImmutableMap());\n+\n+\t\treturn PP_ComponentGenerator.builder()\n+\t\t\t\t.javaClassId(JavaClassId.ofRepoId(po.getAD_JavaClass_ID()))\n+\t\t\t\t.params(ComponentGeneratorParam.of(params))\n+\t\t\t\t.build();\n+\t}\n+}\n+\n+@Value\n+@Builder\n+class PP_ComponentGenerator\n+{\n+\tJavaClassId javaClassId;", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5OTExNw==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531399117", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:08:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDg1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDkyNA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531064924", "bodyText": "@NonNull", "author": "teosarca", "createdAt": "2020-11-26T14:27:45Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ComponentGeneratorRepository.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.javaclasses.JavaClassId;\n+import de.metas.product.ProductId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.I_PP_ComponentGenerator;\n+import org.compiere.model.I_PP_ComponentGenerator_Param;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Repository\n+public class ComponentGeneratorRepository\n+{\n+\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\t// TODO tbp: CCache this\n+\n+\t@Nullable\n+\tpublic PP_ComponentGenerator getByProductId(@NonNull final ProductId productId)\n+\t{\n+\t\tfinal I_PP_ComponentGenerator po = queryBL.createQueryBuilder(I_PP_ComponentGenerator.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_PP_ComponentGenerator.COLUMNNAME_M_Product_ID, productId)\n+\t\t\t\t.create()\n+\t\t\t\t.first();\n+\n+\t\tif (po == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal List<I_PP_ComponentGenerator_Param> paramsPO = queryBL.createQueryBuilder(I_PP_ComponentGenerator_Param.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_PP_ComponentGenerator_Param.COLUMNNAME_PP_ComponentGenerator_ID, po.getPP_ComponentGenerator_ID())\n+\t\t\t\t.create()\n+\t\t\t\t.list();\n+\n+\t\tfinal ImmutableMap<String, String> params = paramsPO.stream()\n+\t\t\t\t.map(param -> GuavaCollectors.entry(param.getName(), param.getValue()))\n+\t\t\t\t.collect(GuavaCollectors.toImmutableMap());\n+\n+\t\treturn PP_ComponentGenerator.builder()\n+\t\t\t\t.javaClassId(JavaClassId.ofRepoId(po.getAD_JavaClass_ID()))\n+\t\t\t\t.params(ComponentGeneratorParam.of(params))\n+\t\t\t\t.build();\n+\t}\n+}\n+\n+@Value\n+@Builder\n+class PP_ComponentGenerator\n+{\n+\tJavaClassId javaClassId;\n+\tComponentGeneratorParam params;", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5OTE1Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531399153", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NDkyNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NjA1Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531066053", "bodyText": "pls avoid naming things like PP_... usually we used those namings for model interceptors or callouts.\nRename it to ComponentGenerator.\nHINT: usually the entity and the repository shall have the same name (ofc, repo will end with Repository).", "author": "teosarca", "createdAt": "2020-11-26T14:29:32Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ComponentGeneratorRepository.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.javaclasses.JavaClassId;\n+import de.metas.product.ProductId;\n+import de.metas.util.GuavaCollectors;\n+import de.metas.util.Services;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.compiere.model.I_PP_ComponentGenerator;\n+import org.compiere.model.I_PP_ComponentGenerator_Param;\n+import org.springframework.stereotype.Repository;\n+\n+import javax.annotation.Nullable;\n+import java.util.List;\n+\n+@Repository\n+public class ComponentGeneratorRepository\n+{\n+\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\t// TODO tbp: CCache this\n+\n+\t@Nullable\n+\tpublic PP_ComponentGenerator getByProductId(@NonNull final ProductId productId)\n+\t{\n+\t\tfinal I_PP_ComponentGenerator po = queryBL.createQueryBuilder(I_PP_ComponentGenerator.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_PP_ComponentGenerator.COLUMNNAME_M_Product_ID, productId)\n+\t\t\t\t.create()\n+\t\t\t\t.first();\n+\n+\t\tif (po == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tfinal List<I_PP_ComponentGenerator_Param> paramsPO = queryBL.createQueryBuilder(I_PP_ComponentGenerator_Param.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_PP_ComponentGenerator_Param.COLUMNNAME_PP_ComponentGenerator_ID, po.getPP_ComponentGenerator_ID())\n+\t\t\t\t.create()\n+\t\t\t\t.list();\n+\n+\t\tfinal ImmutableMap<String, String> params = paramsPO.stream()\n+\t\t\t\t.map(param -> GuavaCollectors.entry(param.getName(), param.getValue()))\n+\t\t\t\t.collect(GuavaCollectors.toImmutableMap());\n+\n+\t\treturn PP_ComponentGenerator.builder()\n+\t\t\t\t.javaClassId(JavaClassId.ofRepoId(po.getAD_JavaClass_ID()))\n+\t\t\t\t.params(ComponentGeneratorParam.of(params))\n+\t\t\t\t.build();\n+\t}\n+}\n+\n+@Value\n+@Builder\n+class PP_ComponentGenerator", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTM5ODIwOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531398209", "bodyText": "makes sense.\ndone", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:04:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2NjA1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2Nzg4Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531067886", "bodyText": "design issue: that's implementation details because that method is not useful for the caller.", "author": "teosarca", "createdAt": "2020-11-26T14:32:25Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/IComponentGenerator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import lombok.NonNull;\n+import org.adempiere.mm.attributes.AttributeCode;\n+import org.adempiere.mm.attributes.api.ImmutableAttributeSet;\n+\n+public interface IComponentGenerator\n+{\n+\n+\tImmutableAttributeSet generate(int qty, @NonNull ComponentGeneratorParam parameters, @NonNull ImmutableAttributeSet existingAttributes);\n+\n+\tImmutableList<AttributeCode> getSupportedAttributes();", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjA0Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531456042", "bodyText": "removed method", "author": "TheBestPessimist", "createdAt": "2020-11-27T08:44:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2Nzg4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODY2Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531068666", "bodyText": "hardcoded things shall be declared as class constants", "author": "teosarca", "createdAt": "2020-11-26T14:33:41Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/MacAddressGenerator.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.document.sequence.DocSequenceId;\n+import de.metas.document.sequence.IDocumentNoBuilder;\n+import de.metas.document.sequence.IDocumentNoBuilderFactory;\n+import de.metas.document.sequence.impl.DocumentNoParts;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import de.metas.util.StringUtils;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.mm.attributes.AttributeCode;\n+import org.adempiere.mm.attributes.api.AttributeConstants;\n+import org.adempiere.mm.attributes.api.ImmutableAttributeSet;\n+import org.compiere.SpringContextHolder;\n+import org.compiere.util.Env;\n+import org.springframework.stereotype.Service;\n+\n+import static de.metas.manufacturing.generatedcomponents.MacAddress.GROUP_DELIMITER;\n+\n+/**\n+ * A MAC Address looks like this: 01:23:45:67:89:AB\n+ */\n+@Service\n+public class MacAddressGenerator implements IComponentGenerator\n+{\n+\t/*package*/ static final String PARAM_MAC_ADDRESS_AD_SEQUENCE_ID = \"MacAddress_AD_Sequence_ID\";\n+\tprivate static final int NUMBER_OF_DIGITS = 12;\n+\n+\tprivate final ImmutableList<AttributeCode> supportedAttributes = ImmutableList.of(\n+\t\t\tAttributeConstants.RouterMAC1,\n+\t\t\tAttributeConstants.RouterMAC2,\n+\t\t\tAttributeConstants.RouterMAC3,\n+\t\t\tAttributeConstants.RouterMAC4,\n+\t\t\tAttributeConstants.RouterMAC5,\n+\t\t\tAttributeConstants.RouterMAC6\n+\t);\n+\n+\tprivate transient final IDocumentNoBuilderFactory documentNoBuilder = SpringContextHolder.instance.getBean(IDocumentNoBuilderFactory.class);\n+\n+\t@Override\n+\tpublic ImmutableAttributeSet generate(final int qty, final @NonNull ComponentGeneratorParam parameters, final @NonNull ImmutableAttributeSet existingAttributes)\n+\t{\n+\t\tCheck.errorIf(qty < 1 || qty > 6, \"Qty of Mac Addresses should be between 1 and 6. Requested qty: {}\", qty);\n+\n+\t\tfinal ImmutableList<AttributeCode> attributesToGenerate = computeRemainingAttributesToGenerate(existingAttributes);\n+\n+\t\tif (attributesToGenerate.isEmpty())\n+\t\t{\n+\t\t\treturn ImmutableAttributeSet.EMPTY;\n+\t\t}\n+\n+\t\t/*\n+\t\t\tExplanation: we have to generate 2 mac addresses, but 2 or more are already generated => nothing to do.\n+\t\t */\n+\t\tif (qty - noOfAlreadyGenerated(attributesToGenerate) <= 0)\n+\t\t{\n+\t\t\treturn ImmutableAttributeSet.EMPTY;\n+\t\t}\n+\n+\t\tfinal DocSequenceId sequenceId = DocSequenceId.ofRepoIdOrNull(StringUtils.toIntegerOrZero(parameters.getValue(PARAM_MAC_ADDRESS_AD_SEQUENCE_ID)));\n+\t\tif (sequenceId == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Mandatory parameter \" + PARAM_MAC_ADDRESS_AD_SEQUENCE_ID + \" has invalid value.\");\n+\t\t}\n+\n+\t\tfinal ImmutableAttributeSet.Builder result = ImmutableAttributeSet.builder();\n+\n+\t\tfor (int i = 0; i < qty - noOfAlreadyGenerated(attributesToGenerate); i++)\n+\t\t{\n+\t\t\tfinal AttributeCode attributeCode = attributesToGenerate.get(i);\n+\t\t\tfinal MacAddress macAddress = generateNextMacAddress(sequenceId);\n+\t\t\tresult.attributeValue(attributeCode, macAddress.getAddress());\n+\t\t}\n+\n+\t\treturn result.build();\n+\t}\n+\n+\tprivate int noOfAlreadyGenerated(@NonNull final ImmutableList<AttributeCode> attributesToGenerate)\n+\t{\n+\t\treturn getSupportedAttributes().size() - attributesToGenerate.size();\n+\t}\n+\n+\t@Override\n+\tpublic ImmutableList<AttributeCode> getSupportedAttributes()\n+\t{\n+\t\treturn supportedAttributes;\n+\t}\n+\n+\t@Override\n+\tpublic ImmutableMap<String, String> getDefaultParameters()\n+\t{\n+\t\treturn ImmutableMap.<String, String>builder()", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwMDAzMg==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531400032", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:11:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA2ODY2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MDg4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531070887", "bodyText": "maybe it's by OCD :) but i would suggest to have the ComponentGeneratorParam parameters param first on last because basically there u have 2 types of params: the ones which are coming from the caller (qty, existingAttributes) and the one which is coming from API (parameters)", "author": "teosarca", "createdAt": "2020-11-26T14:37:08Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/IComponentGenerator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import lombok.NonNull;\n+import org.adempiere.mm.attributes.AttributeCode;\n+import org.adempiere.mm.attributes.api.ImmutableAttributeSet;\n+\n+public interface IComponentGenerator\n+{\n+\n+\tImmutableAttributeSet generate(int qty, @NonNull ComponentGeneratorParam parameters, @NonNull ImmutableAttributeSet existingAttributes);", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzgwNA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531407804", "bodyText": "makes sense.\nDone", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:40:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MDg4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MTUwMg==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531071502", "bodyText": "caching shall be impl at repo level", "author": "teosarca", "createdAt": "2020-11-26T14:38:09Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ManufacturingComponentGeneratorService.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import de.metas.javaclasses.IJavaClassBL;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.mm.attributes.api.ImmutableAttributeSet;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ManufacturingComponentGeneratorService\n+{\n+\tprivate final ComponentGeneratorRepository componentRepository;\n+\tprivate final IJavaClassBL javaClassBL = Services.get(IJavaClassBL.class);\n+\n+\t// TODO tbp: add CCache for productId->PP_ComponentGenerator.", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNTkzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531405937", "bodyText": "got it", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:33:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MTUwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MjM4NA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531072384", "bodyText": "avoid throwing exception because the caller has no way to know which product has a generator and which one does not.\nreturn ImmutableAttributeSet.EMPTY", "author": "teosarca", "createdAt": "2020-11-26T14:39:33Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ManufacturingComponentGeneratorService.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import de.metas.javaclasses.IJavaClassBL;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.mm.attributes.api.ImmutableAttributeSet;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ManufacturingComponentGeneratorService\n+{\n+\tprivate final ComponentGeneratorRepository componentRepository;\n+\tprivate final IJavaClassBL javaClassBL = Services.get(IJavaClassBL.class);\n+\n+\t// TODO tbp: add CCache for productId->PP_ComponentGenerator.\n+\n+\tpublic ManufacturingComponentGeneratorService(\n+\t\t\t@NonNull final ComponentGeneratorRepository componentRepository\n+\t)\n+\t{\n+\t\tthis.componentRepository = componentRepository;\n+\t}\n+\n+\tpublic ImmutableAttributeSet generate(@NonNull final GeneratedComponentRequest request)\n+\t{\n+\t\tfinal PP_ComponentGenerator generator = componentRepository.getByProductId(request.getProductId());", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzczNw==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531407737", "bodyText": "Is it really better to silently fail (create no data), than to inform the user that his (expected) config is not set?", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:39:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MjM4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjI4Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531456286", "bodyText": "We still throw the error, but we can check first if generator exists via new method hasGeneratorForProduct.", "author": "TheBestPessimist", "createdAt": "2020-11-27T08:44:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MjM4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MjgzNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531072835", "bodyText": "design issue: that's implementation details because that method is not useful for the caller.", "author": "teosarca", "createdAt": "2020-11-26T14:40:16Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/IComponentGenerator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import lombok.NonNull;\n+import org.adempiere.mm.attributes.AttributeCode;\n+import org.adempiere.mm.attributes.api.ImmutableAttributeSet;\n+\n+public interface IComponentGenerator\n+{\n+\n+\tImmutableAttributeSet generate(int qty, @NonNull ComponentGeneratorParam parameters, @NonNull ImmutableAttributeSet existingAttributes);\n+\n+\tImmutableList<AttributeCode> getSupportedAttributes();\n+\n+\tImmutableMap<String, String> getDefaultParameters();\n+\n+\tdefault ImmutableList<AttributeCode> computeRemainingAttributesToGenerate(final @NonNull ImmutableAttributeSet existingAttributes)", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjcxOA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531456718", "bodyText": "solved by moving to util class", "author": "TheBestPessimist", "createdAt": "2020-11-27T08:45:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MjgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MzI5MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531073291", "bodyText": "this method is not used. i guess that's pending to do, right?", "author": "teosarca", "createdAt": "2020-11-26T14:41:01Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/IComponentGenerator.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import lombok.NonNull;\n+import org.adempiere.mm.attributes.AttributeCode;\n+import org.adempiere.mm.attributes.api.ImmutableAttributeSet;\n+\n+public interface IComponentGenerator\n+{\n+\n+\tImmutableAttributeSet generate(int qty, @NonNull ComponentGeneratorParam parameters, @NonNull ImmutableAttributeSet existingAttributes);\n+\n+\tImmutableList<AttributeCode> getSupportedAttributes();\n+\n+\tImmutableMap<String, String> getDefaultParameters();", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1Njc5MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531456791", "bodyText": "correct", "author": "TheBestPessimist", "createdAt": "2020-11-27T08:45:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3MzI5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NTA2NA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531075064", "bodyText": "instead of /*package*/ which is not relevant info, pls annotate those constants with @VisibleForTesting because that's the reason for making them package level", "author": "teosarca", "createdAt": "2020-11-26T14:43:54Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/PasswordGenerator.java", "diffHunk": "@@ -35,16 +43,70 @@\n  * Borrowed from: https://mkyong.com/java/java-password-generator-example/\n  */\n @Service\n-public class PasswordGenerator\n+public class PasswordGenerator implements IComponentGenerator\n {\n \tprivate static final String CHAR_LOWERCASE = \"abcdefghijklmnopqrstuvwxyz\";\n \tprivate static final String CHAR_UPPERCASE = CHAR_LOWERCASE.toUpperCase();\n \tprivate static final String DIGIT = \"0123456789\";\n \tprivate static final String PUNCTUATION = \"!@#&()\u2013[{}]:;',?/*\";\n \n+\t/*package*/ static final String PARAM_LENGTH = \"length\";\n+\t/*package*/ static final String PARAM_USE_LOWERCASE = \"useLowercase\";\n+\t/*package*/ static final String PARAM_USE_UPPERCASE = \"useUppercase\";\n+\t/*package*/ static final String PARAM_USE_DIGIT = \"useDigit\";\n+\t/*package*/ static final String PARAM_USE_PUNCTUATION = \"usePunctuation\";", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNjM1OA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531406358", "bodyText": "true.\ndone", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:34:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NTA2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NTQ0OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531075449", "bodyText": "i guess u have to make it private", "author": "teosarca", "createdAt": "2020-11-26T14:44:31Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/PasswordGenerator.java", "diffHunk": "@@ -35,16 +43,70 @@\n  * Borrowed from: https://mkyong.com/java/java-password-generator-example/\n  */\n @Service\n-public class PasswordGenerator\n+public class PasswordGenerator implements IComponentGenerator\n {\n \tprivate static final String CHAR_LOWERCASE = \"abcdefghijklmnopqrstuvwxyz\";\n \tprivate static final String CHAR_UPPERCASE = CHAR_LOWERCASE.toUpperCase();\n \tprivate static final String DIGIT = \"0123456789\";\n \tprivate static final String PUNCTUATION = \"!@#&()\u2013[{}]:;',?/*\";\n \n+\t/*package*/ static final String PARAM_LENGTH = \"length\";\n+\t/*package*/ static final String PARAM_USE_LOWERCASE = \"useLowercase\";\n+\t/*package*/ static final String PARAM_USE_UPPERCASE = \"useUppercase\";\n+\t/*package*/ static final String PARAM_USE_DIGIT = \"useDigit\";\n+\t/*package*/ static final String PARAM_USE_PUNCTUATION = \"usePunctuation\";\n+\n \tfinal Random random = new Random();", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNjY2MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531406661", "bodyText": "missed that.\ndone", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:35:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NTQ0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NzQxMA==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531077410", "bodyText": "i think ComponentGeneratorParams (plural) would be more suggestive.", "author": "teosarca", "createdAt": "2020-11-26T14:47:35Z", "path": "backend/de.metas.manufacturing/src/main/java/de/metas/manufacturing/generatedcomponents/ComponentGeneratorParam.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * #%L\n+ * de.metas.manufacturing\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.manufacturing.generatedcomponents;\n+\n+import com.google.common.collect.ImmutableMap;\n+import lombok.Data;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+@Value\n+@Data(staticConstructor = \"of\")\n+public class ComponentGeneratorParam", "originalCommit": "1ceed259d869245578478279156e78a5d8f34002", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQwNzI0Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10314#discussion_r531407247", "bodyText": "makes sense.\nDone", "author": "TheBestPessimist", "createdAt": "2020-11-27T06:38:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA3NzQxMA=="}], "type": "inlineReview"}, {"oid": "9b864ecff8de9888cf85125a2bf86de4559b602f", "url": "https://github.com/metasfresh/metasfresh/commit/9b864ecff8de9888cf85125a2bf86de4559b602f", "message": "Add PP_ComponentGenerator and its Param\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:00:42Z", "type": "commit"}, {"oid": "25789033ef15ca7439b9ed7bfe7508eb081c407c", "url": "https://github.com/metasfresh/metasfresh/commit/25789033ef15ca7439b9ed7bfe7508eb081c407c", "message": "Add IComponentGenerator and implement it\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:00:42Z", "type": "commit"}, {"oid": "a0174cf3435e12605a7e812cbfda0a3a1ae27be5", "url": "https://github.com/metasfresh/metasfresh/commit/a0174cf3435e12605a7e812cbfda0a3a1ae27be5", "message": "Add first draft of the Manufacturing Component Generator\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:00:42Z", "type": "commit"}, {"oid": "ba40a295371cd8bf18e4350e47f1c27ce937718e", "url": "https://github.com/metasfresh/metasfresh/commit/ba40a295371cd8bf18e4350e47f1c27ce937718e", "message": "Fix warning\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:00:42Z", "type": "commit"}, {"oid": "2d0f4561e97f14303d1aa8d1e71fdd630d6c293a", "url": "https://github.com/metasfresh/metasfresh/commit/2d0f4561e97f14303d1aa8d1e71fdd630d6c293a", "message": "Wrong entity type \ud83d\ude44\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:00:42Z", "type": "commit"}, {"oid": "03477c6307f2c25371fe7b2b52a31fb282d79b8f", "url": "https://github.com/metasfresh/metasfresh/commit/03477c6307f2c25371fe7b2b52a31fb282d79b8f", "message": "Add router AttributeCodes\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:00:42Z", "type": "commit"}, {"oid": "f20db5e14956514fdf35ec33aec711664f5491bc", "url": "https://github.com/metasfresh/metasfresh/commit/f20db5e14956514fdf35ec33aec711664f5491bc", "message": "`GeneratedComponentRequest` uses `ImmutableAttributeSet`\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:00:43Z", "type": "commit"}, {"oid": "647f27a1384df02366ce86c8f20bcc2ed6491437", "url": "https://github.com/metasfresh/metasfresh/commit/647f27a1384df02366ce86c8f20bcc2ed6491437", "message": "Rough implementation - everything should mostly work\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:00:43Z", "type": "commit"}, {"oid": "3b3c6f7352476ed1bfca8e14df95471c289261f7", "url": "https://github.com/metasfresh/metasfresh/commit/3b3c6f7352476ed1bfca8e14df95471c289261f7", "message": "Add nullability annotations\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:22Z", "type": "commit"}, {"oid": "9e6b1d4316c0f7ee2829cd931c4ec27fb08c189b", "url": "https://github.com/metasfresh/metasfresh/commit/9e6b1d4316c0f7ee2829cd931c4ec27fb08c189b", "message": "Add Interface test for Password Generator\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:23Z", "type": "commit"}, {"oid": "e4d88db65906abef2f742c14e2c9bcc6e4b5fca1", "url": "https://github.com/metasfresh/metasfresh/commit/e4d88db65906abef2f742c14e2c9bcc6e4b5fca1", "message": "Refactoring\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:23Z", "type": "commit"}, {"oid": "dcb878843728f711e5a0f2ea78bfa4fc41d4bbd0", "url": "https://github.com/metasfresh/metasfresh/commit/dcb878843728f711e5a0f2ea78bfa4fc41d4bbd0", "message": "Fix test\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:23Z", "type": "commit"}, {"oid": "e5d963cce8ef1e4a342b43e9ff648abd6d677e1d", "url": "https://github.com/metasfresh/metasfresh/commit/e5d963cce8ef1e4a342b43e9ff648abd6d677e1d", "message": "Refactoring\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "commit"}, {"oid": "1b70476aa494bacb9d272da7a2b7c1c50a934444", "url": "https://github.com/metasfresh/metasfresh/commit/1b70476aa494bacb9d272da7a2b7c1c50a934444", "message": "Add Interceptor on after new\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "commit"}, {"oid": "ed5b8cc5bc523342324a820146f1b5fe85f834fd", "url": "https://github.com/metasfresh/metasfresh/commit/ed5b8cc5bc523342324a820146f1b5fe85f834fd", "message": "Move non-essential methods from interface to Util class\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "commit"}, {"oid": "44352b1d119d464ce62a88de6f41c86619a15cce", "url": "https://github.com/metasfresh/metasfresh/commit/44352b1d119d464ce62a88de6f41c86619a15cce", "message": "Add PP_ComponentGenerator.AD_Sequence_ID\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "commit"}, {"oid": "faacce8adafe4b80667a87c63daff233a3790058", "url": "https://github.com/metasfresh/metasfresh/commit/faacce8adafe4b80667a87c63daff233a3790058", "message": "PP_ComponentGenerator.AD_Sequence_ID is a \"hidden parameter\"\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "commit"}, {"oid": "04e4f9bab09ab42d097aa1e65f6669c98fc142d6", "url": "https://github.com/metasfresh/metasfresh/commit/04e4f9bab09ab42d097aa1e65f6669c98fc142d6", "message": "Fix field name,\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "commit"}, {"oid": "9eb578bbe54bcccbaee19d58bf7e156936cdea2c", "url": "https://github.com/metasfresh/metasfresh/commit/9eb578bbe54bcccbaee19d58bf7e156936cdea2c", "message": "Add caching\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "commit"}, {"oid": "c9dcb05567b253130b330a69a562acbf35eb1227", "url": "https://github.com/metasfresh/metasfresh/commit/c9dcb05567b253130b330a69a562acbf35eb1227", "message": "Add window PP_ComponentGenerator\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "commit"}, {"oid": "c9dcb05567b253130b330a69a562acbf35eb1227", "url": "https://github.com/metasfresh/metasfresh/commit/c9dcb05567b253130b330a69a562acbf35eb1227", "message": "Add window PP_ComponentGenerator\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:03:24Z", "type": "forcePushed"}, {"oid": "6a502e368b3ace11259b9c1d5d39e378b28ba8a7", "url": "https://github.com/metasfresh/metasfresh/commit/6a502e368b3ace11259b9c1d5d39e378b28ba8a7", "message": "Tiny fix\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:07:44Z", "type": "commit"}, {"oid": "f69215b91fddd280bb6ca678b9a0ae48a91c87fa", "url": "https://github.com/metasfresh/metasfresh/commit/f69215b91fddd280bb6ca678b9a0ae48a91c87fa", "message": "Add autodetection for MAC Address group delimiter\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:41:03Z", "type": "commit"}, {"oid": "83bc256ce5b967bf373bbc9d2a2250502359a19b", "url": "https://github.com/metasfresh/metasfresh/commit/83bc256ce5b967bf373bbc9d2a2250502359a19b", "message": "Derp\n\nhttps://github.com/metasfresh/metasfresh/issues/10305\nSigned-off-by: TheBestPessimist <cristian@tbp.land>", "committedDate": "2020-11-27T11:42:51Z", "type": "commit"}]}