{"pr_number": 6700, "pr_title": "Refactor DocList and it's child components", "pr_createdAt": "2020-05-20T14:10:04Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6700", "timeline": [{"oid": "ee01a52c968ae70429378e7da4b19cce1a69d9a8", "url": "https://github.com/metasfresh/metasfresh/commit/ee01a52c968ae70429378e7da4b19cce1a69d9a8", "message": "#6666 refactor DocList and child components\n\nremove unnecessary object references, empty objects, imports etc", "committedDate": "2020-05-20T14:00:49Z", "type": "commit"}, {"oid": "23b10160d9f87d9ae09a837829faf86e49605f7c", "url": "https://github.com/metasfresh/metasfresh/commit/23b10160d9f87d9ae09a837829faf86e49605f7c", "message": "#6666 fix linter errors", "committedDate": "2020-05-20T14:21:23Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1OTYwMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428459603", "bodyText": "this should be string all the time as I understand", "author": "petrican", "createdAt": "2020-05-21T05:55:49Z", "path": "frontend/src/components/header/SubHeader.js", "diffHunk": "@@ -578,12 +579,11 @@ SubHeader.propTypes = {\n   notfound: PropTypes.any,\n   openModal: PropTypes.func,\n   openModalRow: PropTypes.func,\n-  query: PropTypes.any,\n+  viewId: PropTypes.any,", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MTcxMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428481713", "bodyText": "agree", "author": "teosarca", "createdAt": "2020-05-21T07:03:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ1OTYwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MDIxNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428460217", "bodyText": "Do you think we could put these two somewhere under src/constants ? I'm sure there are some other places where we could use them. Here we should just import them. Thanks", "author": "petrican", "createdAt": "2020-05-21T05:57:57Z", "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -13,45 +14,64 @@ import Container from '../components/Container';\n import DocumentList from '../components/app/DocumentList';\n import Overlay from '../components/app/Overlay';\n \n+const EMPTY_ARRAY = [];\n+const EMPTY_OBJECT = {};\n+", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MjM1MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428482350", "bodyText": "I suggest to collect more cases and then we can decide.\nIMHO, atm the risk of having those in a shared constants file is that a bug can push to any of those structures so we won't have EMPTYs anymore.", "author": "teosarca", "createdAt": "2020-05-21T07:05:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MDIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NTk4NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428485985", "bodyText": "Found a place where this could be used . Ex: https://github.com/metasfresh/metasfresh/blob/master/frontend/src/utils/documentListHelper.js#L106", "author": "petrican", "createdAt": "2020-05-21T07:15:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MDIxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUzMjU5Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428532592", "bodyText": "I'm not sure this is worth it. The value is never gonna change and I'm only doing this to avoid multiple instances of an empty object/array.", "author": "siemiatj", "createdAt": "2020-05-21T09:01:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MDIxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MjAxNA==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428462014", "bodyText": "Do you think it would be opportune in here to define a const windowId = windowType  and use it along as a prerequisite for the time when BE will provide that windowId in params instead ?", "author": "petrican", "createdAt": "2020-05-21T06:04:10Z", "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -13,45 +14,64 @@ import Container from '../components/Container';\n import DocumentList from '../components/app/DocumentList';\n import Overlay from '../components/app/Overlay';\n \n+const EMPTY_ARRAY = [];\n+const EMPTY_OBJECT = {};\n+\n /**\n  * @file Class based component.\n  * @module DocList\n  * @extends Component\n  */\n class DocList extends Component {\n+  shouldComponentUpdate(nextProps) {\n+    const { query } = this.props;\n+    const { query: nextQuery } = nextProps;\n+\n+    if (_.isEqual(query, nextQuery)) {\n+      return false;\n+    }\n+\n+    return true;\n+  }\n+\n   componentDidMount = () => {\n-    const { dispatch, windowType, latestNewDocument, query } = this.props;\n+    const {\n+      windowType,\n+      latestNewDocument,\n+      query,\n+      getWindowBreadcrumb,\n+      setLatestNewDocument,\n+      selectTableItems,\n+    } = this.props;\n ", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2OTk1Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428469957", "bodyText": "actually you can pass the windowId from the router.js directly", "author": "petrican", "createdAt": "2020-05-21T06:29:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MjAxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NjYyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428486627", "bodyText": "+1", "author": "teosarca", "createdAt": "2020-05-21T07:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MjAxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MzI0Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428463247", "bodyText": "Like I said above. We can expect in here windowId and pass it along from the routes.js\nfile as windowId instead of windowType", "author": "petrican", "createdAt": "2020-05-21T06:08:28Z", "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -166,37 +193,46 @@ class DocList extends Component {\n  * @prop {object} windowType\n  */\n DocList.propTypes = {\n-  breadcrumb: PropTypes.array.isRequired,\n-  dispatch: PropTypes.func.isRequired,\n-  includedView: PropTypes.object.isRequired,\n-  indicator: PropTypes.string.isRequired,\n+  includedView: PropTypes.object,\n   latestNewDocument: PropTypes.any,\n   modal: PropTypes.object.isRequired,\n   overlay: PropTypes.object,\n-  pathname: PropTypes.string.isRequired,\n-  pluginModal: PropTypes.object,\n   processStatus: PropTypes.string.isRequired,\n   query: PropTypes.object.isRequired,\n+  pathname: PropTypes.string.isRequired,\n   rawModal: PropTypes.object.isRequired,\n-  windowType: PropTypes.any,\n+  windowType: PropTypes.string,", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MjcxOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428482718", "bodyText": "agree. renamed it if u touch it.", "author": "teosarca", "createdAt": "2020-05-21T07:06:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2MzI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2NTk3Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428465972", "bodyText": "All this could be written as return _.isEqual(query, nextQuery) ? false : true;", "author": "petrican", "createdAt": "2020-05-21T06:17:31Z", "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -13,45 +14,64 @@ import Container from '../components/Container';\n import DocumentList from '../components/app/DocumentList';\n import Overlay from '../components/app/Overlay';\n \n+const EMPTY_ARRAY = [];\n+const EMPTY_OBJECT = {};\n+\n /**\n  * @file Class based component.\n  * @module DocList\n  * @extends Component\n  */\n class DocList extends Component {\n+  shouldComponentUpdate(nextProps) {\n+    const { query } = this.props;\n+    const { query: nextQuery } = nextProps;\n+\n+    if (_.isEqual(query, nextQuery)) {", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4MzIwMQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428483201", "bodyText": "or...\nreturn ! _.isEqual(query, nextQuery);", "author": "teosarca", "createdAt": "2020-05-21T07:08:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2NTk3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NDIzMQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428484231", "bodyText": "IMHO it's not a good approach to pass the whole modal (i don't know what's inside).\nWhy not explicitly sending the properties which are needed?", "author": "teosarca", "createdAt": "2020-05-21T07:11:11Z", "path": "frontend/src/components/Container.js", "diffHunk": "@@ -19,207 +19,210 @@ import Header from './header/Header';\n  * @module Container\n  * @extends Component\n  */\n-const Container = (props) => {\n-  const {\n-    docActionElem,\n-    docStatusData,\n-    docNoData,\n-    docId,\n-    processStatus,\n-    docSummaryData,\n-    dataId,\n-    windowType,\n-    breadcrumb,\n-    references,\n-    actions,\n-    showSidelist,\n-    siteName,\n-    connectionError,\n-    noMargin,\n-    entity,\n-    children,\n-    query,\n-    attachments,\n-    showIndicator,\n-    // TODO: We should be using indicator from the state instead of another variable\n-    isDocumentNotSaved,\n-    hideHeader,\n-    handleDeletedStatus,\n-    dropzoneFocused,\n-    notfound,\n-    rawModal,\n-    modal,\n-    pluginModal,\n-    indicator,\n-    includedView,\n-    closeModalCallback,\n-    editmode,\n-    handleEditModeToggle,\n-    activeTab,\n-    masterDocumentList,\n-    pluginComponents,\n-    setRawModalTitle,\n-    setRawModalDescription,\n-  } = props;\n-  const pluginModalVisible = pluginModal.visible;\n-  let PluginModalComponent = null;\n+class Container extends PureComponent {\n+  render() {\n+    const {\n+      docActionElem,\n+      docStatusData,\n+      docNoData,\n+      docId,\n+      processStatus,\n+      docSummaryData,\n+      dataId,\n+      windowType,\n+      breadcrumb,\n+      references,\n+      actions,\n+      showSidelist,\n+      siteName,\n+      connectionError,\n+      noMargin,\n+      entity,\n+      children,\n+      viewId,\n+      attachments,\n+      showIndicator,\n+      // TODO: We should be using indicator from the state instead of another variable\n+      isDocumentNotSaved,\n+      hideHeader,\n+      handleDeletedStatus,\n+      dropzoneFocused,\n+      notfound,\n+      rawModal,\n+      modal,\n+      pluginModal,\n+      indicator,\n+      includedView,\n+      closeModalCallback,\n+      editmode,\n+      handleEditModeToggle,\n+      activeTab,\n+      masterDocumentList,\n+      pluginComponents,\n+      setRawModalTitle,\n+      setRawModalDescription,\n+    } = this.props;\n+    const pluginModalVisible = pluginModal.visible;\n+    let PluginModalComponent = null;\n \n-  if (pluginModalVisible) {\n-    // check if pluginModal's component is saved in the redux state\n-    const modalPluginName = pluginComponents[pluginModal.id];\n+    if (pluginModalVisible) {\n+      // check if pluginModal's component is saved in the redux state\n+      const modalPluginName = pluginComponents[pluginModal.id];\n \n-    if (modalPluginName) {\n-      // get the plugin holding the required component\n-      const parentPlugin = window.META_HOST_APP.getRegistry().getEntry(\n-        modalPluginName\n-      );\n+      if (modalPluginName) {\n+        // get the plugin holding the required component\n+        const parentPlugin = window.META_HOST_APP.getRegistry().getEntry(\n+          modalPluginName\n+        );\n \n-      PluginModalComponent = parentPlugin.components.filter(\n-        (component) => component.id === pluginModal.id\n-      )[0].component;\n+        PluginModalComponent = parentPlugin.components.filter(\n+          (component) => component.id === pluginModal.id\n+        )[0].component;\n+      }\n     }\n-  }\n-\n-  return (\n-    <div>\n-      {!hideHeader && (\n-        // Forcing refresh component\n-        <Header\n-          docStatus={docActionElem}\n-          windowId={windowType}\n-          {...{\n-            entity,\n-            docStatusData,\n-            docNoData,\n-            docSummaryData,\n-            handleDeletedStatus,\n-            isDocumentNotSaved,\n-            showIndicator,\n-            query,\n-            siteName,\n-            showSidelist,\n-            attachments,\n-            actions,\n-            references,\n-            breadcrumb,\n-            dataId,\n-            dropzoneFocused,\n-            notfound,\n-            docId,\n-            editmode,\n-            handleEditModeToggle,\n-            activeTab,\n-          }}\n-        />\n-      )}\n-\n-      {connectionError && <ErrorScreen />}\n \n-      <div\n-        className={\n-          'header-sticky-distance js-unselect ' +\n-          (noMargin ? 'dashboard' : 'container-fluid')\n-        }\n-      >\n-        {modal.visible && (\n-          <Modal\n-            {...modal}\n-            windowType={modal.type}\n-            dataId={modal.dataId ? modal.dataId : dataId}\n-            modalTitle={modal.title}\n-            modalViewId={modal.viewId}\n-            parentType={windowType}\n-            parentDataId={dataId}\n-            query={query}\n-            viewId={query && query.viewId}\n-            rawModalVisible={rawModal.visible}\n-            indicator={indicator}\n-            modalViewDocumentIds={modal.viewDocumentIds}\n-            closeCallback={closeModalCallback}\n-            modalSaveStatus={\n-              modal.saveStatus && modal.saveStatus.saved !== undefined\n-                ? modal.saveStatus.saved\n-                : true\n-            }\n-            isDocumentNotSaved={\n-              modal.saveStatus &&\n-              !modal.saveStatus.saved &&\n-              (modal.validStatus && !modal.validStatus.initialValue)\n-            }\n+    return (\n+      <div>\n+        {!hideHeader && (\n+          // Forcing refresh component\n+          <Header\n+            docStatus={docActionElem}\n+            windowId={windowType}\n+            {...{\n+              entity,\n+              docStatusData,\n+              docNoData,\n+              docSummaryData,\n+              handleDeletedStatus,\n+              isDocumentNotSaved,\n+              showIndicator,\n+              viewId,\n+              siteName,\n+              showSidelist,\n+              attachments,\n+              actions,\n+              references,\n+              breadcrumb,\n+              dataId,\n+              dropzoneFocused,\n+              notfound,\n+              docId,\n+              editmode,\n+              handleEditModeToggle,\n+              activeTab,\n+            }}\n           />\n         )}\n \n-        {rawModal.visible && (\n-          <RawModal\n-            modalTitle={rawModal.title}\n-            modalDescription={rawModal.description}\n-            allowedCloseActions={rawModal.allowedCloseActions}\n-            windowType={rawModal.windowId}\n-            viewId={rawModal.viewId}\n-            masterDocumentList={masterDocumentList}\n-          >\n-            <div className=\"document-lists-wrapper\">\n-              <DocumentList\n-                type=\"grid\"\n-                windowType={rawModal.windowId}\n-                defaultViewId={rawModal.viewId}\n-                viewProfileId={rawModal.profileId}\n-                setModalTitle={setRawModalTitle}\n-                setModalDescription={setRawModalDescription}\n-                fetchQuickActionsOnInit={\n-                  !(\n+        {connectionError && <ErrorScreen />}\n+\n+        <div\n+          className={\n+            'header-sticky-distance js-unselect ' +\n+            (noMargin ? 'dashboard' : 'container-fluid')\n+          }\n+        >\n+          {modal.visible && (\n+            <Modal\n+              {...modal}", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NDEwOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428494109", "bodyText": "Yeah the thing is I'm not really refactoring this part, but the whole content of the file was formatted differently after switching to PureComponent class. Sure, it's probably not the best approach but it's a rabbit hole I don't want to go down at this moment. Cause I'll end up rewriting way more stuff than I should.", "author": "siemiatj", "createdAt": "2020-05-21T07:36:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NDIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5ODAxOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428498019", "bodyText": "I agree with Kuba on this one. We need to deliver this on schedule(today).", "author": "petrican", "createdAt": "2020-05-21T07:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NDIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2MDUwMg==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428560502", "bodyText": "roger", "author": "teosarca", "createdAt": "2020-05-21T10:02:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NDIzMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU2MDUyNg==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428560526", "bodyText": "roger", "author": "teosarca", "createdAt": "2020-05-21T10:02:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NDIzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NTM2NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428485365", "bodyText": "string", "author": "teosarca", "createdAt": "2020-05-21T07:14:15Z", "path": "frontend/src/components/Container.js", "diffHunk": "@@ -297,7 +300,7 @@ Container.propTypes = {\n   pluginModal: PropTypes.object,\n   pluginComponents: PropTypes.any,\n   processStatus: PropTypes.any,\n-  query: PropTypes.any,\n+  viewId: PropTypes.any,", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NTgyMg==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428485822", "bodyText": "string", "author": "teosarca", "createdAt": "2020-05-21T07:15:20Z", "path": "frontend/src/components/header/Header.js", "diffHunk": "@@ -922,7 +921,7 @@ Header.propTypes = {\n   me: PropTypes.object.isRequired,\n   notfound: PropTypes.any,\n   plugins: PropTypes.any,\n-  query: PropTypes.any,\n+  viewId: PropTypes.any,", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NzI1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428487251", "bodyText": "btw, what's the javascript approach in this case. Don't we need to log the exception or something?", "author": "teosarca", "createdAt": "2020-05-21T07:19:07Z", "path": "frontend/src/containers/DocList.js", "diffHunk": "@@ -65,36 +85,32 @@ class DocList extends Component {\n   render() {\n     const {\n       windowType,\n-      breadcrumb,\n       query,\n       modal,\n       rawModal,\n-      pluginModal,\n       overlay,\n-      indicator,\n       processStatus,\n       includedView,\n     } = this.props;\n-    let refRowIds = [];\n+    let refRowIds = EMPTY_ARRAY;\n+    const queryCopy = query ? query : EMPTY_OBJECT;\n \n-    if (query && query.refRowIds) {\n+    if (queryCopy.refRowIds) {\n       try {\n-        refRowIds = JSON.parse(query.refRowIds);\n+        refRowIds = JSON.parse(queryCopy.refRowIds);\n       } catch (e) {\n-        refRowIds = [];\n+        refRowIds = null;", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5MDE2NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428490165", "bodyText": "Is there a BE 'collector' for such cases ? I recall we talked about adding an API endpoint that would collect FE events also from prod to LogStash", "author": "petrican", "createdAt": "2020-05-21T07:26:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NzI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5Njc1OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428496758", "bodyText": "no, we don't so far :(", "author": "teosarca", "createdAt": "2020-05-21T07:42:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NzI1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ5NjkxNA==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428496914", "bodyText": "Why log an exception ? I've checked how we handle it down the road, and the api request function has null as a default for this param. So this shouldn't change anything, and at least we're not passing an empty array all the way.", "author": "siemiatj", "createdAt": "2020-05-21T07:43:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4NzI1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ4Nzc1MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6700#discussion_r428487750", "bodyText": "not now... but it future we have to rename this to refWindowId", "author": "teosarca", "createdAt": "2020-05-21T07:20:18Z", "path": "frontend/src/utils/documentListHelper.js", "diffHunk": "@@ -16,9 +16,13 @@ const DLpropTypes = {\n   // from parent\n   windowType: PropTypes.string.isRequired,\n   viewId: PropTypes.string,\n-\n-  // from <DocList>\n   updateParentSelectedIds: PropTypes.func,\n+  page: PropTypes.number,\n+  sort: PropTypes.string,\n+  defaultViewId: PropTypes.string,\n+  refType: PropTypes.string,", "originalCommit": "23b10160d9f87d9ae09a837829faf86e49605f7c", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "87fd866d5a91bf0b83c926406cefac48a58531cc", "url": "https://github.com/metasfresh/metasfresh/commit/87fd866d5a91bf0b83c926406cefac48a58531cc", "message": "#6666 review cleanup\n\n- rename `windowType` to `windowId`\n- comments\n- remove anonymous function for ref assignment", "committedDate": "2020-05-21T09:47:38Z", "type": "commit"}, {"oid": "8ac3e5d7d499f5d7851ab6f0daf4f1dc53403143", "url": "https://github.com/metasfresh/metasfresh/commit/8ac3e5d7d499f5d7851ab6f0daf4f1dc53403143", "message": "#6666 fix lint error", "committedDate": "2020-05-21T10:09:22Z", "type": "commit"}]}