{"pr_number": 9992, "pr_title": "Create a WidgetWrapper component for fetching data", "pr_createdAt": "2020-09-22T16:09:39Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/9992", "timeline": [{"oid": "40a25bd369632fad98bee0d86ac521e41bb9b200", "url": "https://github.com/metasfresh/metasfresh/commit/40a25bd369632fad98bee0d86ac521e41bb9b200", "message": "#9914 basic widgetwrapper container", "committedDate": "2020-09-21T17:19:16Z", "type": "commit"}, {"oid": "aea11530f9c0ae6d2fa28bff541909e82c05046b", "url": "https://github.com/metasfresh/metasfresh/commit/aea11530f9c0ae6d2fa28bff541909e82c05046b", "message": "#9914 cleanup window components", "committedDate": "2020-09-21T17:19:17Z", "type": "commit"}, {"oid": "9c0392223aac0b58012a620a4c8ad4a02a158f1e", "url": "https://github.com/metasfresh/metasfresh/commit/9c0392223aac0b58012a620a4c8ad4a02a158f1e", "message": "#9914 switch to using WidgetWrapper in Header/Element", "committedDate": "2020-09-21T17:19:17Z", "type": "commit"}, {"oid": "c853dc6ba35a09f5101cc6a9601b990ce9997764", "url": "https://github.com/metasfresh/metasfresh/commit/c853dc6ba35a09f5101cc6a9601b990ce9997764", "message": "#9914 move some helper functions to utils\n- remove unused code from Lookup", "committedDate": "2020-09-21T17:19:18Z", "type": "commit"}, {"oid": "bacfc72a4e5866256bba1401fcbc1c0f51be5046", "url": "https://github.com/metasfresh/metasfresh/commit/bacfc72a4e5866256bba1401fcbc1c0f51be5046", "message": "#9914 support getting widget data for tables by WidgetWrapper", "committedDate": "2020-09-21T17:19:18Z", "type": "commit"}, {"oid": "806d8584c46468dd8c2adf7c97695baf12db353b", "url": "https://github.com/metasfresh/metasfresh/commit/806d8584c46468dd8c2adf7c97695baf12db353b", "message": "#9914 small refactoring", "committedDate": "2020-09-21T17:19:19Z", "type": "commit"}, {"oid": "69c0ceb9de50b0b37a05abe6b215369d1f806494", "url": "https://github.com/metasfresh/metasfresh/commit/69c0ceb9de50b0b37a05abe6b215369d1f806494", "message": "#9914 support WidgetWrapper in tables", "committedDate": "2020-09-21T17:19:19Z", "type": "commit"}, {"oid": "a9ca6bba49c3f49b983a5270cfb13c016c44343d", "url": "https://github.com/metasfresh/metasfresh/commit/a9ca6bba49c3f49b983a5270cfb13c016c44343d", "message": "#9914 optimize rendering and pass props to query data", "committedDate": "2020-09-21T17:19:20Z", "type": "commit"}, {"oid": "11907bd9d9eff40c9ba1ed30c0bf470e8fcd5ca9", "url": "https://github.com/metasfresh/metasfresh/commit/11907bd9d9eff40c9ba1ed30c0bf470e8fcd5ca9", "message": "#9914 selectors for data", "committedDate": "2020-09-21T17:19:20Z", "type": "commit"}, {"oid": "079396b25294dec0fc1c0fe64c252cbf79c7f4be", "url": "https://github.com/metasfresh/metasfresh/commit/079396b25294dec0fc1c0fe64c252cbf79c7f4be", "message": "#9914 cleanup", "committedDate": "2020-09-21T17:19:21Z", "type": "commit"}, {"oid": "c69287bb5ebf07551656d2f4a9326397b81564cb", "url": "https://github.com/metasfresh/metasfresh/commit/c69287bb5ebf07551656d2f4a9326397b81564cb", "message": "#9914 create selector for document status widget data", "committedDate": "2020-09-21T17:19:22Z", "type": "commit"}, {"oid": "cf51deeff3eb421c3eb6cd1d627f30ce276a1960", "url": "https://github.com/metasfresh/metasfresh/commit/cf51deeff3eb421c3eb6cd1d627f30ce276a1960", "message": "#9914 cleanup and removing unnecessary props", "committedDate": "2020-09-21T17:19:22Z", "type": "commit"}, {"oid": "43504debe8bd650c265107292b17ed4cd0f2ce2d", "url": "https://github.com/metasfresh/metasfresh/commit/43504debe8bd650c265107292b17ed4cd0f2ce2d", "message": "#9914 load fields directly from the store\n- cleaning up MasterWidget", "committedDate": "2020-09-21T17:19:23Z", "type": "commit"}, {"oid": "03ec506522a7fa50eacdfc6f0403f6224e71fa2a", "url": "https://github.com/metasfresh/metasfresh/commit/03ec506522a7fa50eacdfc6f0403f6224e71fa2a", "message": "#9914 pass missing props to Master/RawWidget where WidgetWrapper is not used", "committedDate": "2020-09-21T17:19:23Z", "type": "commit"}, {"oid": "4926610a1b4f311156e465ac5de6d6d14ab24e85", "url": "https://github.com/metasfresh/metasfresh/commit/4926610a1b4f311156e465ac5de6d6d14ab24e85", "message": "#9914 temporarily revert RawWidget changes", "committedDate": "2020-09-21T17:19:23Z", "type": "commit"}, {"oid": "5e1ddd8df84b682643e358627af729f3b8f03df4", "url": "https://github.com/metasfresh/metasfresh/commit/5e1ddd8df84b682643e358627af729f3b8f03df4", "message": "#9914 fixing tests", "committedDate": "2020-09-21T17:19:24Z", "type": "commit"}, {"oid": "8ad00a35886900c2dc9a3cf58d8a0b847516dd4a", "url": "https://github.com/metasfresh/metasfresh/commit/8ad00a35886900c2dc9a3cf58d8a0b847516dd4a", "message": "#9914 fix quickinput tests", "committedDate": "2020-09-21T17:19:25Z", "type": "commit"}, {"oid": "3353287ba6a917651984ed8c2f5a9cc28c625a73", "url": "https://github.com/metasfresh/metasfresh/commit/3353287ba6a917651984ed8c2f5a9cc28c625a73", "message": "#9914 rename `TableItem` to `TableRow` everywhere and fix tests\n- change all occurences of `item` related to table to `row`", "committedDate": "2020-09-21T17:19:26Z", "type": "commit"}, {"oid": "fba0ae2b85212ce4c408469e7905573bae32d754", "url": "https://github.com/metasfresh/metasfresh/commit/fba0ae2b85212ce4c408469e7905573bae32d754", "message": "#9914 add docs and move some functionality to utils", "committedDate": "2020-09-21T17:19:26Z", "type": "commit"}, {"oid": "3f0e36742e3d74ac2110140e6e7de349c10998c6", "url": "https://github.com/metasfresh/metasfresh/commit/3f0e36742e3d74ac2110140e6e7de349c10998c6", "message": "#9914 add `re-reselect` package", "committedDate": "2020-09-21T17:19:26Z", "type": "commit"}, {"oid": "108e12a644006d076756ed3d2a30f00937900895", "url": "https://github.com/metasfresh/metasfresh/commit/108e12a644006d076756ed3d2a30f00937900895", "message": "#9914 fix linter", "committedDate": "2020-09-21T17:19:27Z", "type": "commit"}, {"oid": "a3ecd4b2739593ba3ad19e1fc25969686d9332de", "url": "https://github.com/metasfresh/metasfresh/commit/a3ecd4b2739593ba3ad19e1fc25969686d9332de", "message": "#9914 fix getting data for ActionButton in the document status widget", "committedDate": "2020-09-21T17:19:27Z", "type": "commit"}, {"oid": "8cae50c4b184acc60525f79f4061a913f52d17d8", "url": "https://github.com/metasfresh/metasfresh/commit/8cae50c4b184acc60525f79f4061a913f52d17d8", "message": "#9914 WidgetWrapper tests", "committedDate": "2020-09-21T17:19:28Z", "type": "commit"}, {"oid": "1d2c860806f322285446f2ebdb8b2c1eb512b29a", "url": "https://github.com/metasfresh/metasfresh/commit/1d2c860806f322285446f2ebdb8b2c1eb512b29a", "message": "#9914 more tests", "committedDate": "2020-09-21T17:19:28Z", "type": "commit"}, {"oid": "8f83e160aa87470751b0837eb15125d9d5af5356", "url": "https://github.com/metasfresh/metasfresh/commit/8f83e160aa87470751b0837eb15125d9d5af5356", "message": "#9914 properly fetch data for widgets in modals", "committedDate": "2020-09-22T11:16:45Z", "type": "commit"}, {"oid": "a0fa1d77647f43ba2474b7b79e84e443bf62269d", "url": "https://github.com/metasfresh/metasfresh/commit/a0fa1d77647f43ba2474b7b79e84e443bf62269d", "message": "#9914 don't clear the cell value when navigating with tab", "committedDate": "2020-09-22T12:59:22Z", "type": "commit"}, {"oid": "50a5eddb8ecf63801e7409a12a4592c263b056ed", "url": "https://github.com/metasfresh/metasfresh/commit/50a5eddb8ecf63801e7409a12a4592c263b056ed", "message": "#9914 properly handle widgets in processes", "committedDate": "2020-09-22T16:00:21Z", "type": "commit"}, {"oid": "5f11677cc42f7d61cc4fe14d8b33a64088991b6a", "url": "https://github.com/metasfresh/metasfresh/commit/5f11677cc42f7d61cc4fe14d8b33a64088991b6a", "message": "#9914 don't edit inactive fields", "committedDate": "2020-09-22T16:20:05Z", "type": "commit"}, {"oid": "ea04dc71e21677d78222b72bd74b6c2714641454", "url": "https://github.com/metasfresh/metasfresh/commit/ea04dc71e21677d78222b72bd74b6c2714641454", "message": "#9914 add unit tests", "committedDate": "2020-09-22T17:14:12Z", "type": "commit"}, {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d", "url": "https://github.com/metasfresh/metasfresh/commit/99df550872dfbd1d31a49e94946e26c4e7759a6d", "message": "#9914 fix tests", "committedDate": "2020-09-23T00:05:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4MDk4NA==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493280984", "bodyText": "name of the file should be WidgetWrapper.test.js", "author": "petrican", "createdAt": "2020-09-23T08:01:19Z", "path": "frontend/src/__tests__/containers/WidgetWrapper.js", "diffHunk": "@@ -0,0 +1,61 @@\n+import React from 'react';", "originalCommit": "99df550872dfbd1d31a49e94946e26c4e7759a6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4NjIzNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493286235", "bodyText": "element${idx}", "author": "petrican", "createdAt": "2020-09-23T08:06:51Z", "path": "frontend/src/components/Process.js", "diffHunk": "@@ -22,43 +19,38 @@ class Process extends Component {\n    * @param {*} type\n    * @todo Write the documentation\n    */\n-  renderElements = (layout, data, type) => {\n-    const { disabled } = this.props;\n+  renderElements = () => {\n+    const { layout, type, disabled } = this.props;\n     const elements = layout.elements;\n-    return elements.map((elem, id) => {\n-      const widgetData = elem.fields.map((item) => data[item.field] || -1);\n+\n+    return elements.map((elem, idx) => {\n+      const element = omit(elem, ['fields']);\n       return (\n-        <div key={`${id}-${layout.pinstanceId}`}>\n-          <MasterWidget\n+        <div key={`${idx}-${layout.pinstanceId}`}>\n+          <WidgetWrapper\n+            renderMaster={true}\n+            dataSource=\"process\"\n+            layoutId={`${idx}`}\n             entity=\"process\"\n-            key={'element' + id}\n-            windowType={type}\n+            key={'element' + idx}", "originalCommit": "99df550872dfbd1d31a49e94946e26c4e7759a6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyNjM5OA==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493326398", "bodyText": "!==", "author": "petrican", "createdAt": "2020-09-23T08:47:55Z", "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -449,19 +454,19 @@ export class RawWidget extends Component {\n       updateHeight,\n       rowIndex,\n     } = this.props;\n-    let widgetValue = data != null ? data : widgetData[0].value;\n+    let tabIndex = this.props.tabIndex;\n     const { isEdited, charsTyped } = this.state;\n \n+    let widgetValue = data != null ? data : widgetData[0].value;", "originalCommit": "99df550872dfbd1d31a49e94946e26c4e7759a6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MDIzMw==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493370233", "bodyText": "Nope. This tests for values not set - null and undefined. '' and 0 will still work.", "author": "siemiatj", "createdAt": "2020-09-23T09:32:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyNjM5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyOTkxOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493329919", "bodyText": "wonder if wouldn't be practical to have a function that would format that like getLayoutId({ sectionIndex, columnIndex....aso})\nSimilar to what we have for the table -> getTableId", "author": "petrican", "createdAt": "2020-09-23T08:51:30Z", "path": "frontend/src/components/window/Element.js", "diffHunk": "@@ -1,42 +1,57 @@\n import React, { PureComponent } from 'react';\n import PropTypes from 'prop-types';\n-import MasterWidget from '../widget/MasterWidget';\n+import { omit } from 'lodash';\n+\n+import WidgetWrapper from '../../containers/WidgetWrapper';\n \n class Element extends PureComponent {\n   render() {\n-    const { windowId, tabId, rowId, dataId } = this.props;\n-    const { elementLayout, elementIndex } = this.props;\n-    const { isFocused, tabIndex } = this.props;\n-    const { data } = this.props;\n-    const { isModal, isAdvanced, isFullScreen } = this.props;\n-    const { addRefToWidgets, onBlurWidget } = this.props;\n+    const {\n+      windowId,\n+      tabId,\n+      rowId,\n+      dataId,\n+      elementLayout,\n+      isFocused,\n+      tabIndex,\n+      isModal,\n+      isAdvanced,\n+      isFullScreen,\n+      addRefToWidgets,\n+      onBlurWidget,\n+      elementIndex,\n+      elementsLineIndex,\n+      elementGroupIndex,\n+      sectionIndex,\n+      columnIndex,\n+    } = this.props;\n \n     const autoFocus = isFocused && elementIndex === 0;\n-    const widgetData = elementLayout.fields.map(\n-      (item) => data[item.field] || -1\n-    );\n     const fieldName = elementLayout.fields ? elementLayout.fields[0].field : '';\n-    const relativeDocId = data.ID && data.ID.value;\n+    const layoutId = `${sectionIndex}_${columnIndex}_${elementGroupIndex}_${elementsLineIndex}_${elementIndex}`;", "originalCommit": "99df550872dfbd1d31a49e94946e26c4e7759a6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3NDM5MA==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493374390", "bodyText": "Yeah but in this case this is the only place we're using it so extracting this to a separate function wouldn't benefit us in any way.", "author": "siemiatj", "createdAt": "2020-09-23T09:36:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyOTkxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzAwMw==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493337003", "bodyText": "thinking if getWidgetElementData wouldn't be more appropriate as a name", "author": "petrican", "createdAt": "2020-09-23T08:58:15Z", "path": "frontend/src/containers/WidgetWrapper.js", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import { connect } from 'react-redux';\n+\n+import {\n+  openModal,\n+  patch,\n+  updatePropertyValue,\n+  allowShortcut,\n+  disableShortcut,\n+} from '../actions/WindowActions';\n+import { getCellWidgetData } from '../utils/tableHelpers';\n+import { getTable } from '../reducers/tables';\n+import {\n+  getData,\n+  getWidgetData,\n+  getWidgetFields,\n+  getMasterDocStatus,\n+  getProcessWidgetData,\n+  getProcessWidgetFields,\n+} from '../reducers/windowHandler';\n+\n+import MasterWidget from '../components/widget/MasterWidget';\n+import RawWidget from '../components/widget/RawWidget';\n+\n+/**\n+ * @file Class based component.\n+ * @module WidgetWrapper\n+ * @extends PureComponent\n+ * @summary this is a wrapper around widgets that's responsible for\n+ * fetching data to the component. Depending on the `dataSource` prop it\n+ * has a selection of strategies to get the data from the redux store. No\n+ * `MasterWidget` or `RawWidget` component should be rendered directly - always\n+ * wrap them in `WidgetWrapper` and if needed add another data selector.\n+ */\n+class WidgetWrapper extends PureComponent {\n+  render() {\n+    const { renderMaster } = this.props;\n+\n+    if (renderMaster) {\n+      return <MasterWidget {...this.props} />;\n+    } else {\n+      return <RawWidget {...this.props} />;\n+    }\n+  }\n+}\n+\n+const mapStateToProps = (state, props) => {\n+  const { appHandler, windowHandler } = state;\n+  const {\n+    dataSource,\n+    tableId,\n+    rowIndex,\n+    colIndex,\n+    isEditable,\n+    supportFieldEdit,\n+    layoutId,\n+    fields,\n+    isModal,\n+  } = props;\n+  const data = getData(state, isModal);\n+\n+  let widgetData = null;\n+  let fieldsCopy = null;\n+\n+  switch (dataSource) {\n+    case 'doc-status':\n+      widgetData = getMasterDocStatus(state);\n+\n+      break;\n+    case 'modal':\n+    case 'element':\n+      widgetData = getWidgetData(state, isModal, layoutId);", "originalCommit": "99df550872dfbd1d31a49e94946e26c4e7759a6d", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzg3NA==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493337874", "bodyText": "Same in here for coherence of naming getWidgetProcessData, getWidgetProcessFields", "author": "petrican", "createdAt": "2020-09-23T08:59:09Z", "path": "frontend/src/containers/WidgetWrapper.js", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import { connect } from 'react-redux';\n+\n+import {\n+  openModal,\n+  patch,\n+  updatePropertyValue,\n+  allowShortcut,\n+  disableShortcut,\n+} from '../actions/WindowActions';\n+import { getCellWidgetData } from '../utils/tableHelpers';\n+import { getTable } from '../reducers/tables';\n+import {\n+  getData,\n+  getWidgetData,\n+  getWidgetFields,\n+  getMasterDocStatus,\n+  getProcessWidgetData,\n+  getProcessWidgetFields,\n+} from '../reducers/windowHandler';\n+\n+import MasterWidget from '../components/widget/MasterWidget';\n+import RawWidget from '../components/widget/RawWidget';\n+\n+/**\n+ * @file Class based component.\n+ * @module WidgetWrapper\n+ * @extends PureComponent\n+ * @summary this is a wrapper around widgets that's responsible for\n+ * fetching data to the component. Depending on the `dataSource` prop it\n+ * has a selection of strategies to get the data from the redux store. No\n+ * `MasterWidget` or `RawWidget` component should be rendered directly - always\n+ * wrap them in `WidgetWrapper` and if needed add another data selector.\n+ */\n+class WidgetWrapper extends PureComponent {\n+  render() {\n+    const { renderMaster } = this.props;\n+\n+    if (renderMaster) {\n+      return <MasterWidget {...this.props} />;\n+    } else {\n+      return <RawWidget {...this.props} />;\n+    }\n+  }\n+}\n+\n+const mapStateToProps = (state, props) => {\n+  const { appHandler, windowHandler } = state;\n+  const {\n+    dataSource,\n+    tableId,\n+    rowIndex,\n+    colIndex,\n+    isEditable,\n+    supportFieldEdit,\n+    layoutId,\n+    fields,\n+    isModal,\n+  } = props;\n+  const data = getData(state, isModal);\n+\n+  let widgetData = null;\n+  let fieldsCopy = null;\n+\n+  switch (dataSource) {\n+    case 'doc-status':\n+      widgetData = getMasterDocStatus(state);\n+\n+      break;\n+    case 'modal':\n+    case 'element':\n+      widgetData = getWidgetData(state, isModal, layoutId);\n+      fieldsCopy = getWidgetFields(state, isModal, layoutId);\n+\n+      break;\n+    case 'process':\n+      widgetData = getProcessWidgetData(state, true, layoutId);", "originalCommit": "99df550872dfbd1d31a49e94946e26c4e7759a6d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MTk0Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493371943", "bodyText": "It's process's widget data, not widget's process data.", "author": "siemiatj", "createdAt": "2020-09-23T09:33:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzg3NA=="}], "type": "inlineReview"}, {"oid": "82e4cff21d57e1413ff726cef564f4262cfca46f", "url": "https://github.com/metasfresh/metasfresh/commit/82e4cff21d57e1413ff726cef564f4262cfca46f", "message": "#9914 grooming after PR review", "committedDate": "2020-09-23T09:39:24Z", "type": "commit"}]}