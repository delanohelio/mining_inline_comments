{"pr_number": 6479, "pr_title": "timebookings initial commit", "pr_createdAt": "2020-04-13T14:39:53Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6479", "timeline": [{"oid": "4132831f7504fdb24ac8053c3fea80641dc0b2d6", "url": "https://github.com/metasfresh/metasfresh/commit/4132831f7504fdb24ac8053c3fea80641dc0b2d6", "message": "timebookings initial commit\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-04-13T14:39:15Z", "type": "commit"}, {"oid": "039a0c58fab046206c2aaa413d4af26d594e9a21", "url": "https://github.com/metasfresh/metasfresh/commit/039a0c58fab046206c2aaa413d4af26d594e9a21", "message": "timebookings initial commit\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-04-13T20:28:12Z", "type": "commit"}, {"oid": "1cc56fd46f1b90fe665a094a587a63d15bc2c365", "url": "https://github.com/metasfresh/metasfresh/commit/1cc56fd46f1b90fe665a094a587a63d15bc2c365", "message": "timebookings unit test fix\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-04-13T22:16:47Z", "type": "commit"}, {"oid": "e11f5c0a6c36215f283ebc493b122f5032c574c7", "url": "https://github.com/metasfresh/metasfresh/commit/e11f5c0a6c36215f283ebc493b122f5032c574c7", "message": "timebookings unit test fix\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-04-13T22:18:00Z", "type": "commit"}, {"oid": "921a02a9991f30960e3552d60e49614d4dc716da", "url": "https://github.com/metasfresh/metasfresh/commit/921a02a9991f30960e3552d60e49614d4dc716da", "message": "added unit tests\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-04-14T16:07:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NzI2Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6479#discussion_r408597267", "bodyText": "pls add AD_Table_ID to the table as well (and ofc set it in the repository). It's a bit redunant with the type, but in conjunction with Record_ID, it allows the UI to show a button such that a user can directly zoom to the respective user, issue etc", "author": "metas-ts", "createdAt": "2020-04-15T05:55:20Z", "path": "de.metas.serviceprovider/src/main/java-gen/de/metas/serviceprovider/model/I_S_ExternalReference.java", "diffHunk": "@@ -0,0 +1,260 @@\n+package de.metas.serviceprovider.model;\n+\n+\n+/** Generated Interface for S_ExternalReference\n+ *  @author Adempiere (generated) \n+ */\n+@SuppressWarnings(\"javadoc\")\n+public interface I_S_ExternalReference \n+{\n+\n+    /** TableName=S_ExternalReference */", "originalCommit": "921a02a9991f30960e3552d60e49614d4dc716da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5ODU4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6479#discussion_r408598582", "bodyText": "consider using de.metas.JsonObjectMapperHolder instead", "author": "metas-ts", "createdAt": "2020-04-15T05:59:34Z", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/configuration/ApplicationConfiguration.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.configuration;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import de.metas.serviceprovider.ImportQueue;\n+import de.metas.serviceprovider.issue.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.timebooking.importer.ImportTimeBookingInfo;\n+import de.metas.user.api.IUserDAO;\n+import de.metas.util.Services;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+import static de.metas.serviceprovider.issue.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+import static de.metas.serviceprovider.issue.importer.ImportConstants.ISSUE_QUEUE_CAPACITY;\n+import static de.metas.serviceprovider.timebooking.importer.ImportConstants.IMPORT_TIME_BOOKINGS_LOG_MESSAGE_PREFIX;\n+import static de.metas.serviceprovider.timebooking.importer.ImportConstants.TIME_BOOKING_QUEUE_CAPACITY;\n+\n+@Configuration\n+public class ApplicationConfiguration\n+{\n+\t@Bean\n+\tpublic IUserDAO userDAO()\n+\t{\n+\t\treturn Services.get(IUserDAO.class);\n+\t}\n+\n+\t@Bean\n+\tpublic ITrxManager trxManager()\n+\t{\n+\t\treturn Services.get(ITrxManager.class);\n+\t}\n+\n+\t@Bean\n+\tpublic IQueryBL queryBL()\n+\t{\n+\t\treturn Services.get(IQueryBL.class);\n+\t}\n+\n+\t@Bean\n+\tpublic ImportQueue<ImportTimeBookingInfo> timeBookingImportQueue()\n+\t{\n+\t\treturn new ImportQueue<>(TIME_BOOKING_QUEUE_CAPACITY, IMPORT_TIME_BOOKINGS_LOG_MESSAGE_PREFIX);\n+\t}\n+\n+\t@Bean\n+\tpublic ImportQueue<ImportIssueInfo> importIssuesQueue()\n+\t{\n+\t\treturn new ImportQueue<>(ISSUE_QUEUE_CAPACITY, IMPORT_LOG_MESSAGE_PREFIX);\n+\t}\n+\n+\t@Bean\n+\tpublic ObjectMapper objectMapper()\n+\t{\n+\t\treturn new ObjectMapper();", "originalCommit": "921a02a9991f30960e3552d60e49614d4dc716da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMDAxNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6479#discussion_r408600017", "bodyText": "i think in such a case it's good log log, but AFAIU (didn't look deep) you should rethrow while adding currently available info\ne.g.\nthrow AdempiereException.wrapIfNeeded(e).appendParametersToMessage().setParameter(\"request\", request);", "author": "metas-ts", "createdAt": "2020-04-15T06:04:13Z", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/everhour/EverhourImporterService.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.everhour;\n+\n+import ch.qos.logback.classic.Level;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.base.Stopwatch;\n+import de.metas.issue.tracking.everhour.api.EverhourClient;\n+import de.metas.issue.tracking.everhour.api.model.GetTeamTimeRecordsRequest;\n+import de.metas.issue.tracking.everhour.api.model.TimeRecord;\n+import de.metas.logging.LogManager;\n+import de.metas.serviceprovider.ImportQueue;\n+import de.metas.serviceprovider.external.ExternalId;\n+import de.metas.serviceprovider.external.ExternalSystem;\n+import de.metas.serviceprovider.external.reference.ExternalReferenceRepository;\n+import de.metas.serviceprovider.external.reference.ExternalReferenceType;\n+import de.metas.serviceprovider.external.reference.GetReferencedIdRequest;\n+import de.metas.serviceprovider.issue.IssueId;\n+import de.metas.serviceprovider.timebooking.TimeBookingId;\n+import de.metas.serviceprovider.timebooking.importer.ImportTimeBookingInfo;\n+import de.metas.serviceprovider.timebooking.importer.ImportTimeBookingsRequest;\n+import de.metas.serviceprovider.timebooking.importer.TimeBookingsImporter;\n+import de.metas.serviceprovider.timebooking.importer.failed.FailedTimeBooking;\n+import de.metas.serviceprovider.timebooking.importer.failed.FailedTimeBookingId;\n+import de.metas.serviceprovider.timebooking.importer.failed.FailedTimeBookingRepository;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.time.LocalDateInterval;\n+import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+\n+import static de.metas.issue.tracking.everhour.api.EverhourConstants.TaskIdSource.GITHUB_ID;\n+import static de.metas.serviceprovider.everhour.EverhourImportConstants.PROCESSING_DATE_INTERVAL_SIZE;\n+import static de.metas.serviceprovider.timebooking.importer.ImportConstants.IMPORT_TIME_BOOKINGS_LOG_MESSAGE_PREFIX;\n+\n+\n+@Service\n+public class EverhourImporterService implements TimeBookingsImporter\n+{\n+\tprivate static final Logger log = LogManager.getLogger(EverhourImporterService.class);\n+\n+\tprivate final ReentrantLock lock = new ReentrantLock();\n+\n+\tprivate final EverhourClient everhourClient;\n+\tprivate final ExternalReferenceRepository externalReferenceRepository;\n+\tprivate final ImportQueue<ImportTimeBookingInfo> timeBookingImportQueue;\n+\tprivate final FailedTimeBookingRepository failedTimeBookingRepository;\n+\tprivate final ObjectMapper objectMapper;\n+\tprivate final ITrxManager iTrxManager;\n+\n+\tpublic EverhourImporterService(final EverhourClient everhourClient, final ExternalReferenceRepository externalReferenceRepository, final ImportQueue<ImportTimeBookingInfo> timeBookingImportQueue, final FailedTimeBookingRepository failedTimeBookingRepository, final ObjectMapper objectMapper, final ITrxManager iTrxManager)\n+\t{\n+\t\tthis.everhourClient = everhourClient;\n+\t\tthis.externalReferenceRepository = externalReferenceRepository;\n+\t\tthis.timeBookingImportQueue = timeBookingImportQueue;\n+\t\tthis.failedTimeBookingRepository = failedTimeBookingRepository;\n+\t\tthis.objectMapper = objectMapper;\n+\t\tthis.iTrxManager = iTrxManager;\n+\t}\n+\n+\tpublic void importTimeBookings(@NonNull final ImportTimeBookingsRequest request)\n+\t{\n+\t\ttry\n+\t\t{\n+\t\t\tacquireLock();\n+\n+\t\t\timportFailedTimeBookings();\n+\n+\t\t\tfinal LocalDateInterval localDateInterval = LocalDateInterval.of(request.getStartDate(), request.getEndDate());\n+\n+\t\t\tlocalDateInterval.divideUsingStep(PROCESSING_DATE_INTERVAL_SIZE)\n+\t\t\t\t\t.stream()\n+\t\t\t\t\t.map(interval -> buildGetTeamTimeRecordsRequest(request.getAuthToken(), interval))\n+\t\t\t\t\t.map(everhourClient::getTeamTimeRecords)\n+\t\t\t\t\t.flatMap(List::stream)\n+\t\t\t\t\t.filter(timeRecord -> isGithubID(timeRecord.getTask().getId()))\n+\t\t\t\t\t.forEach(this::importTimeBooking);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tLoggables.withLogger(log, Level.ERROR).addLog(IMPORT_TIME_BOOKINGS_LOG_MESSAGE_PREFIX + e.getMessage());", "originalCommit": "921a02a9991f30960e3552d60e49614d4dc716da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjEwNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6479#discussion_r408602107", "bodyText": "not 100% sure..did you check if record.getS_Issue_ID() is still set to be >0 at this point? might be just out of habit, but i think i would do this on TYPE_BEFORE_DELETE. Anyways if the delete fails elsewehere, the transaction will be rolled back, so the external reference won't be gone", "author": "metas-ts", "createdAt": "2020-04-15T06:10:40Z", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/S_Issue.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.issue;\n+\n+import de.metas.serviceprovider.external.reference.ExternalReferenceRepository;\n+import de.metas.serviceprovider.external.reference.ExternalReferenceType;\n+import de.metas.serviceprovider.model.I_S_Issue;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_S_Issue.class)\n+@Component\n+public class S_Issue\n+{\n+\tprivate final ExternalReferenceRepository externalReferenceRepository;\n+\n+\tpublic S_Issue(final ExternalReferenceRepository externalReferenceRepository)\n+\t{\n+\t\tthis.externalReferenceRepository = externalReferenceRepository;\n+\t}\n+\n+\t@ModelChange(timings = ModelValidator.TYPE_AFTER_DELETE)\n+\tpublic void afterDelete(@NonNull final I_S_Issue record)\n+\t{\n+\t\texternalReferenceRepository.deleteByRecordIdAndType(record.getS_Issue_ID(), ExternalReferenceType.ISSUE_ID);", "originalCommit": "921a02a9991f30960e3552d60e49614d4dc716da", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxMzg5MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6479#discussion_r408613890", "bodyText": "yep, the ID is still there, but now there I think about it, it's better to have the removal before delete as we could add some triggers on the referenced tables in order to prevent inconsistent\ndelete operations done directly in DB.", "author": "pvpurcarcosmin", "createdAt": "2020-04-15T06:42:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjEwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMjYwOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6479#discussion_r408602608", "bodyText": "same remark wrt after-delete vs before-delete", "author": "metas-ts", "createdAt": "2020-04-15T06:12:24Z", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/S_Milestone.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.serviceprovider.external.reference.ExternalReferenceRepository;\n+import de.metas.serviceprovider.external.reference.ExternalReferenceType;\n+import de.metas.serviceprovider.model.I_S_Milestone;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_S_Milestone.class)\n+@Component\n+public class S_Milestone\n+{\n+\tprivate final ExternalReferenceRepository externalReferenceRepository;\n+\n+\tpublic S_Milestone(final ExternalReferenceRepository externalReferenceRepository)\n+\t{\n+\t\tthis.externalReferenceRepository = externalReferenceRepository;\n+\t}\n+\n+\t@ModelChange(timings = ModelValidator.TYPE_AFTER_DELETE)\n+\tpublic void afterDelete(@NonNull final I_S_Milestone record){\n+\t\texternalReferenceRepository.deleteByRecordIdAndType(record.getS_Milestone_ID(), ExternalReferenceType.MILESTONE_ID);", "originalCommit": "921a02a9991f30960e3552d60e49614d4dc716da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwMzg0Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6479#discussion_r408603842", "bodyText": "Please create an AD_Message and request a german trl. then you can call de.metas.i18n.IMsgBL.getTranslatableMsgText(AdMessageKey, Object...) to get an ITranslatableString and add that as constructor parameter to the AdempiereException.\nAlso invoke markAsUserValidationError() on the adempeireException before throwing it", "author": "metas-ts", "createdAt": "2020-04-15T06:16:02Z", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/timebooking/S_TimeBooking.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.timebooking;\n+\n+import de.metas.serviceprovider.external.reference.ExternalReferenceRepository;\n+import de.metas.serviceprovider.external.reference.ExternalReferenceType;\n+import de.metas.serviceprovider.model.I_S_TimeBooking;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.callout.annotations.Callout;\n+import org.adempiere.ad.callout.annotations.CalloutMethod;\n+import org.adempiere.ad.callout.spi.IProgramaticCalloutProvider;\n+import org.adempiere.ad.modelvalidator.annotations.Init;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.model.ModelValidator;\n+import org.compiere.util.TimeUtil;\n+import org.springframework.stereotype.Component;\n+\n+import java.math.BigDecimal;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+@Interceptor(I_S_TimeBooking.class)\n+@Callout(I_S_TimeBooking.class)\n+@Component\n+public class S_TimeBooking\n+{\n+\tprivate final Pattern hmmPattern = Pattern.compile(\"^[0-9]+:[0-5][0-9]$\");\n+\n+\tprivate final ExternalReferenceRepository externalReferenceRepository;\n+\n+\tpublic S_TimeBooking(final ExternalReferenceRepository externalReferenceRepository)\n+\t{\n+\t\tthis.externalReferenceRepository = externalReferenceRepository;\n+\t}\n+\n+\t@Init\n+\tpublic void registerCallout()\n+\t{\n+\t\tServices.get(IProgramaticCalloutProvider.class).registerAnnotatedCallout(this);\n+\t}\n+\n+\t@ModelChange(timings = ModelValidator.TYPE_AFTER_DELETE)\n+\tpublic void afterDelete(@NonNull final I_S_TimeBooking record)\n+\t{\n+\t\texternalReferenceRepository.deleteByRecordIdAndType(record.getS_TimeBooking_ID(), ExternalReferenceType.TIME_BOOKING_ID);\n+\t}\n+\n+\t@ModelChange(timings = ModelValidator.TYPE_BEFORE_CHANGE, ifColumnsChanged = {I_S_TimeBooking.COLUMNNAME_HoursAndMinutes})\n+\tpublic void updateSecondsBasedOnHHmm(@NonNull final I_S_TimeBooking record)\n+\t{\n+\t\trecord.setBookedSeconds(BigDecimal.valueOf(TimeUtil.hmmToSeconds(record.getHoursAndMinutes())));\n+\t}\n+\n+\t@CalloutMethod(columnNames = { I_S_TimeBooking.COLUMNNAME_HoursAndMinutes })\n+\tpublic void validateHmmInput(@NonNull final I_S_TimeBooking record)\n+\t{\n+\t\tfinal String hoursAndMinutes = record.getHoursAndMinutes();\n+\n+\t\tif (Check.isBlank(hoursAndMinutes))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal Matcher matcher = hmmPattern.matcher(hoursAndMinutes);\n+\n+\t\tif (!matcher.matches())\n+\t\t{\n+\t\t\tthrow new AdempiereException(\" Incorrect format! Please enter a value in H:mm format.\"", "originalCommit": "921a02a9991f30960e3552d60e49614d4dc716da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYwNDUyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6479#discussion_r408604527", "bodyText": "again, same remark wrt before-delete vs after-delete", "author": "metas-ts", "createdAt": "2020-04-15T06:18:07Z", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/user/AD_User.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.user;\n+\n+import de.metas.adempiere.model.I_AD_User;\n+import de.metas.serviceprovider.external.reference.ExternalReferenceRepository;\n+import de.metas.serviceprovider.external.reference.ExternalReferenceType;\n+import lombok.NonNull;\n+import org.adempiere.ad.modelvalidator.annotations.Interceptor;\n+import org.adempiere.ad.modelvalidator.annotations.ModelChange;\n+import org.compiere.model.ModelValidator;\n+import org.springframework.stereotype.Component;\n+\n+@Interceptor(I_AD_User.class)\n+@Component\n+public class AD_User\n+{\n+\tprivate final ExternalReferenceRepository externalReferenceRepository;\n+\n+\tpublic AD_User(final ExternalReferenceRepository externalReferenceRepository)\n+\t{\n+\t\tthis.externalReferenceRepository = externalReferenceRepository;\n+\t}\n+\n+\t@ModelChange(timings = ModelValidator.TYPE_AFTER_DELETE)\n+\tpublic void afterDelete(@NonNull final I_AD_User record)\n+\t{\n+\t\texternalReferenceRepository.deleteByRecordIdAndType(record.getAD_User_ID(), ExternalReferenceType.USER_ID);", "originalCommit": "921a02a9991f30960e3552d60e49614d4dc716da", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "c889f13b6b0b8c7df518c4c2d3ffd782a3da1b67", "url": "https://github.com/metasfresh/metasfresh/commit/c889f13b6b0b8c7df518c4c2d3ffd782a3da1b67", "message": "suggested changes\nhttps://github.com/metasfresh/metasfresh/issues/5816", "committedDate": "2020-04-15T11:34:17Z", "type": "commit"}]}