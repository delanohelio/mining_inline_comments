{"pr_number": 6872, "pr_title": "Gh6866 MasterWidget", "pr_createdAt": "2020-06-17T13:20:56Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6872", "timeline": [{"oid": "835f6cb74b5db8d3e50619a780df573ea608db3e", "url": "https://github.com/metasfresh/metasfresh/commit/835f6cb74b5db8d3e50619a780df573ea608db3e", "message": "Extract isNumberField function to an external util file", "committedDate": "2020-06-17T05:59:49Z", "type": "commit"}, {"oid": "dab38bcb18be116898f74c37241d66d0d37ab846", "url": "https://github.com/metasfresh/metasfresh/commit/dab38bcb18be116898f74c37241d66d0d37ab846", "message": "format dateParse arr from the constants prevent DRY", "committedDate": "2020-06-17T06:25:02Z", "type": "commit"}, {"oid": "3bffe48833d46ad819e2c3f363add1e0a2f6ae9f", "url": "https://github.com/metasfresh/metasfresh/commit/3bffe48833d46ad819e2c3f363add1e0a2f6ae9f", "message": "Removed the logic from componentDidMount that was causing extra re-rendering by setting the state", "committedDate": "2020-06-17T07:12:29Z", "type": "commit"}, {"oid": "4d82193c84ccde74763db362f4c50f4811d89ec3", "url": "https://github.com/metasfresh/metasfresh/commit/4d82193c84ccde74763db362f4c50f4811d89ec3", "message": "Added back the original doc", "committedDate": "2020-06-17T07:17:56Z", "type": "commit"}, {"oid": "02887e45e732efcd0bac86a9ac0edafab14a978e", "url": "https://github.com/metasfresh/metasfresh/commit/02887e45e732efcd0bac86a9ac0edafab14a978e", "message": "Add unit tests for the isNumberField fnct", "committedDate": "2020-06-17T08:31:24Z", "type": "commit"}, {"oid": "6c24053bbc293dc066e81a58f80093feebd305a1", "url": "https://github.com/metasfresh/metasfresh/commit/6c24053bbc293dc066e81a58f80093feebd305a1", "message": "Ditch the UNSAFE_componentWillReceiveProp", "committedDate": "2020-06-17T11:21:40Z", "type": "commit"}, {"oid": "b73dc9eafe67142789fcda98599fa9b557cc7a67", "url": "https://github.com/metasfresh/metasfresh/commit/b73dc9eafe67142789fcda98599fa9b557cc7a67", "message": "handlePatch refactoring", "committedDate": "2020-06-17T12:11:19Z", "type": "commit"}, {"oid": "51f1bf61a6829a2f188be62d61075e772d5a38df", "url": "https://github.com/metasfresh/metasfresh/commit/51f1bf61a6829a2f188be62d61075e772d5a38df", "message": "More refactoring within MasterWidget move validatePrecision outside", "committedDate": "2020-06-17T12:49:59Z", "type": "commit"}, {"oid": "5189f3dc52f158d9a3cb4fd941a9231ab490d3f7", "url": "https://github.com/metasfresh/metasfresh/commit/5189f3dc52f158d9a3cb4fd941a9231ab490d3f7", "message": "Add unit tests for formatValueByWidgetType", "committedDate": "2020-06-17T13:06:40Z", "type": "commit"}, {"oid": "813eb6821f99b76620e1be308d60706689cba857", "url": "https://github.com/metasfresh/metasfresh/commit/813eb6821f99b76620e1be308d60706689cba857", "message": "Add unit tests for the validatePrecision", "committedDate": "2020-06-17T13:15:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2Mjg2Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441562867", "bodyText": "why not just import the 3 ACs we actually need ?", "author": "siemiatj", "createdAt": "2020-06-17T13:53:36Z", "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -1,89 +1,84 @@\n import PropTypes from 'prop-types';\n-import React, { Component } from 'react';\n+import React, { PureComponent } from 'react';\n import { connect } from 'react-redux';\n import Moment from 'moment-timezone';\n import * as windowActions from '../../actions/WindowActions';", "originalCommit": "813eb6821f99b76620e1be308d60706689cba857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NzIzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441987237", "bodyText": "Agree. Done", "author": "petrican", "createdAt": "2020-06-18T06:05:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2Mjg2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NTA0NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441565045", "bodyText": "Are we sure we can run split on widgetValue at all times ?", "author": "siemiatj", "createdAt": "2020-06-17T13:56:24Z", "path": "frontend/src/utils/widgetHelper.js", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * @method isNumberField\n+ * @summary verifies if the widgetType passed as argument is a number field or not. Returns a boolean value\n+ * @param {string} widgetType\n+ */\n+export function isNumberField(widgetType) {\n+  switch (widgetType) {\n+    case 'Integer':\n+    case 'Amount':\n+    case 'Quantity':\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * @method formatValueByWidgetType\n+ * @summary Performs patching at MasterWidget level, shaping in the same time the `value` for various cases\n+ * @param {string} widgetType\n+ * @param {string|undefined} value\n+ */\n+export function formatValueByWidgetType({ widgetType, value }) {\n+  const numberField = isNumberField(widgetType);\n+  if (widgetType === 'Quantity' && value === '') {\n+    return null;\n+  } else if (numberField && !value) {\n+    return '0';\n+  }\n+}\n+\n+/**\n+ * @method validatePrecision\n+ * @summary Validates the precision based on the widget value and type props\n+ * @param {string} widgetValue\n+ * @param {string} widgetType\n+ * @param {integer} precision\n+ */\n+export function validatePrecision({ widgetValue, widgetType, precision }) {\n+  let precisionProcessed = precision;\n+\n+  if (widgetType === 'Integer' || widgetType === 'Quantity') {\n+    precisionProcessed = 0;\n+  }\n+\n+  return precisionProcessed < (widgetValue.split('.')[1] || []).length", "originalCommit": "813eb6821f99b76620e1be308d60706689cba857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNTMzNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r442015337", "bodyText": "Added extra checks and also unit tests for such cases.", "author": "petrican", "createdAt": "2020-06-18T07:14:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NTA0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NjA4Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441566086", "bodyText": "I don't think we need a comment for built-in React functions. I always remove them because it's an unnecessary noise.", "author": "siemiatj", "createdAt": "2020-06-17T13:57:44Z", "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -260,7 +204,7 @@ class MasterWidget extends Component {\n \n   /**\n    * @method render\n-   * @summary ToDo: Describe the method.\n+   * @summary Main render function", "originalCommit": "813eb6821f99b76620e1be308d60706689cba857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODAyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441988027", "bodyText": "Ok", "author": "petrican", "createdAt": "2020-06-18T06:07:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NjA4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MTYzNg==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441891636", "bodyText": "can we use less cryptic variable name ?", "author": "siemiatj", "createdAt": "2020-06-17T23:43:02Z", "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -1,89 +1,84 @@\n import PropTypes from 'prop-types';\n-import React, { Component } from 'react';\n+import React, { PureComponent } from 'react';\n import { connect } from 'react-redux';\n import Moment from 'moment-timezone';\n import * as windowActions from '../../actions/WindowActions';\n import { getZoomIntoWindow } from '../../api';\n import { convertTimeStringToMoment } from '../../utils/documentListHelper';\n import { formatDateWithZeros } from '../../utils/documentListHelper';\n import RawWidget from './RawWidget';\n+import {\n+  validatePrecision,\n+  formatValueByWidgetType,\n+} from '../../utils/widgetHelper';\n+import { DATE_FIELD_TYPES, TIME_FIELD_TYPES } from '../../constants/Constants';\n+import _ from 'lodash';\n \n-function isNumberField(widgetType) {\n-  switch (widgetType) {\n-    case 'Integer':\n-    case 'Amount':\n-    case 'Quantity':\n-      return true;\n-    default:\n-      return false;\n-  }\n-}\n-\n-const dateParse = ['Date', 'DateTime', 'ZonedDateTime', 'Timestamp', 'Time'];\n+const dateParse = [...DATE_FIELD_TYPES, ...TIME_FIELD_TYPES];\n \n /**\n  * @file Class based component.\n  * @module MasterWidget\n  * @extends Component\n  */\n-class MasterWidget extends Component {\n-  state = {\n-    updated: false,\n-    edited: false,\n-    data: '',\n-  };\n-\n-  componentDidMount() {\n+class MasterWidget extends PureComponent {\n+  constructor(props) {\n+    super(props);\n     const { data, widgetData, clearValue } = this.props;\n-\n-    // `clearValue` removes current field value for the widget. This is used when\n-    // user focuses on table cell and starts typing\n-    this.setState({\n+    // `clearValue` removes current field value for the widget. This is used when user focuses on table cell and starts typing\n+    this.state = {\n+      updated: false,\n+      edited: false,\n       data: data || (clearValue ? '' : widgetData[0].value),\n-    });\n+      widgetData: props.widgetData, // this is used for comparison in the getDerivedStateFromProps lifecycle\n+    };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { widgetData, widgetType } = this.props;\n-    const { edited, data } = this.state;\n+  /**\n+   * @method getDerivedStateFromProps\n+   * @summary is invoked right before calling the render method, both on the initial mount and on subsequent updates\n+   *          updates the data and the widgetData from the MasterWidget state, also the updated flag\n+   *          Used this in order to ditch the deprecated UNSAFE_componentWillReceiveProps\n+   */\n+  static getDerivedStateFromProps(nextProps, prevState) {\n+    const { widgetType } = nextProps;\n+    const { edited, widgetData } = prevState;\n     let next = nextProps.widgetData[0].value;\n+    let bringsModifs = widgetData[0] && !_.isEqual(widgetData[0].value, next);", "originalCommit": "813eb6821f99b76620e1be308d60706689cba857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MTc2Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441991762", "bodyText": "Yes", "author": "petrican", "createdAt": "2020-06-18T06:18:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MTYzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MjQ5Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441892496", "bodyText": "Does this really give us anything ?", "author": "siemiatj", "createdAt": "2020-06-17T23:46:10Z", "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -102,31 +97,15 @@ class MasterWidget extends Component {\n       isAdvanced = false,\n       viewId,\n     } = this.props;\n-    const numberField = isNumberField(widgetType);\n \n-    if (widgetType === 'Quantity' && value === '') {\n-      value = null;\n-    } else if (numberField && !value) {\n-      value = '0';\n-    }\n-\n-    let { entity } = this.props;\n-    let currRowId = rowId;\n+    let entity = viewId ? 'documentView' : this.props.entity;\n+    value = formatValueByWidgetType({ widgetType, value });\n+    let currRowId = rowId === 'NEW' ? relativeDocId : rowId;\n     let ret = null;\n-    let isEdit = false;\n-\n-    if (rowId === 'NEW') {\n-      currRowId = relativeDocId;\n-    }\n+    let isEdit = viewId ? true : false;\n \n-    if (widgetType !== 'Button') {\n+    widgetType !== 'Button' &&", "originalCommit": "813eb6821f99b76620e1be308d60706689cba857", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTg1Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441989856", "bodyText": "Yes. One line of code less. Using such through the app whenever is possible it will reduce the overall lines of code written.", "author": "petrican", "createdAt": "2020-06-18T06:13:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MjQ5Ng=="}], "type": "inlineReview"}, {"oid": "eb1b5aba384341b43e7a623c480fed169dbe315d", "url": "https://github.com/metasfresh/metasfresh/commit/eb1b5aba384341b43e7a623c480fed169dbe315d", "message": "Import only the necessary actions", "committedDate": "2020-06-18T06:01:10Z", "type": "commit"}, {"oid": "880513aa1c382a6a71dac892ec50e48e077f109e", "url": "https://github.com/metasfresh/metasfresh/commit/880513aa1c382a6a71dac892ec50e48e077f109e", "message": "Removed desc on main render function", "committedDate": "2020-06-18T06:08:28Z", "type": "commit"}, {"oid": "1c89bc0a3d14da63fa12b34c8a1eeb176bb0e957", "url": "https://github.com/metasfresh/metasfresh/commit/1c89bc0a3d14da63fa12b34c8a1eeb176bb0e957", "message": "Changed variable name", "committedDate": "2020-06-18T06:19:11Z", "type": "commit"}, {"oid": "c561017392e38684c066e75992b0070c37d378e9", "url": "https://github.com/metasfresh/metasfresh/commit/c561017392e38684c066e75992b0070c37d378e9", "message": "Added extra safety checks", "committedDate": "2020-06-18T07:13:45Z", "type": "commit"}]}