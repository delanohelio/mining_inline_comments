{"pr_number": 10223, "pr_title": "Rewrite quick actions", "pr_createdAt": "2020-11-12T18:35:37Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/10223", "timeline": [{"oid": "716ef356e9f41289284c01f507ee97bc5751da78", "url": "https://github.com/metasfresh/metasfresh/commit/716ef356e9f41289284c01f507ee97bc5751da78", "message": "#10195 create actions reducer", "committedDate": "2020-11-19T23:53:40Z", "type": "commit"}, {"oid": "7256d5ac364ee7ab29add35b21aee4c484e67faa", "url": "https://github.com/metasfresh/metasfresh/commit/7256d5ac364ee7ab29add35b21aee4c484e67faa", "message": "#10195 actions plumbing and refactoring\n\n# Conflicts:\n#\tfrontend/src/components/widget/ActionButton.js", "committedDate": "2020-11-19T23:56:02Z", "type": "commit"}, {"oid": "9d74f7e127cf92499b3865d6a9cec3ec23d257a0", "url": "https://github.com/metasfresh/metasfresh/commit/9d74f7e127cf92499b3865d6a9cec3ec23d257a0", "message": "#10195 cleanup the reducer and add missing action types", "committedDate": "2020-11-19T23:56:06Z", "type": "commit"}, {"oid": "95aead2eef7d0393536bcee9fa8d972a4816358a", "url": "https://github.com/metasfresh/metasfresh/commit/95aead2eef7d0393536bcee9fa8d972a4816358a", "message": "#10195 basic plumbing to get the quick actions when the view data is fetched", "committedDate": "2020-11-19T23:56:06Z", "type": "commit"}, {"oid": "9b9f212e0d8dc81bc3c47de3bb521b7a49a3a4cd", "url": "https://github.com/metasfresh/metasfresh/commit/9b9f212e0d8dc81bc3c47de3bb521b7a49a3a4cd", "message": "#10195 fetch quick actions on selection change", "committedDate": "2020-11-19T23:56:07Z", "type": "commit"}, {"oid": "fdce022e92602112b74c23bf561fd0f117fec12b", "url": "https://github.com/metasfresh/metasfresh/commit/fdce022e92602112b74c23bf561fd0f117fec12b", "message": "#10195 cleanup and some comments", "committedDate": "2020-11-19T23:56:07Z", "type": "commit"}, {"oid": "234b52e125fae42bbc060e8d2351b7470f3bbc96", "url": "https://github.com/metasfresh/metasfresh/commit/234b52e125fae42bbc060e8d2351b7470f3bbc96", "message": "#10195 cleanup and remove/comment out some unused props", "committedDate": "2020-11-19T23:56:07Z", "type": "commit"}, {"oid": "4a153fb3410aaf2f41b60c24e3c772d83ac3ab33", "url": "https://github.com/metasfresh/metasfresh/commit/4a153fb3410aaf2f41b60c24e3c772d83ac3ab33", "message": "#10195 fetch quick actions only for grids", "committedDate": "2020-11-19T23:56:07Z", "type": "commit"}, {"oid": "2bfbe06f05ccfe663da543e105eec31e57481795", "url": "https://github.com/metasfresh/metasfresh/commit/2bfbe06f05ccfe663da543e105eec31e57481795", "message": "#10195 work on fetching included/parent quick actions", "committedDate": "2020-11-19T23:56:08Z", "type": "commit"}, {"oid": "adc04c4cd9ad874abee729c82e999c086912a9fa", "url": "https://github.com/metasfresh/metasfresh/commit/adc04c4cd9ad874abee729c82e999c086912a9fa", "message": "#10195 cleanup action for fetching parent's/child's QA", "committedDate": "2020-11-19T23:56:08Z", "type": "commit"}, {"oid": "05d4f57bcdb7c211008b54037b626263a399a772", "url": "https://github.com/metasfresh/metasfresh/commit/05d4f57bcdb7c211008b54037b626263a399a772", "message": "#10195 more actions cleaning & add missing params", "committedDate": "2020-11-19T23:56:08Z", "type": "commit"}, {"oid": "98acc5af9d547130994e3b0fbf170cb65d7b39a4", "url": "https://github.com/metasfresh/metasfresh/commit/98acc5af9d547130994e3b0fbf170cb65d7b39a4", "message": "#10195 properly fetch child/parent QA on selection change + more refactoring\n#10195 remove unused code", "committedDate": "2020-11-19T23:56:08Z", "type": "commit"}, {"oid": "5841394df884e0635d55dd7d164c81ed67d2325a", "url": "https://github.com/metasfresh/metasfresh/commit/5841394df884e0635d55dd7d164c81ed67d2325a", "message": "#10195 properly pass viewProfileId to quick actions\n#10195 small cleanup in DocumentList", "committedDate": "2020-11-19T23:56:08Z", "type": "commit"}, {"oid": "8a3cd9d4a13d4f806074206f028b8c03ed1d176e", "url": "https://github.com/metasfresh/metasfresh/commit/8a3cd9d4a13d4f806074206f028b8c03ed1d176e", "message": "#10195 cleanup and add comments", "committedDate": "2020-11-19T23:56:09Z", "type": "commit"}, {"oid": "1dc5c6137e9527a4e3876dffe9ad8b71a9198829", "url": "https://github.com/metasfresh/metasfresh/commit/1dc5c6137e9527a4e3876dffe9ad8b71a9198829", "message": "#10195 cleanup", "committedDate": "2020-11-19T23:56:09Z", "type": "commit"}, {"oid": "216a51e6fee9bb3a339e7cf1e713343713f2e924", "url": "https://github.com/metasfresh/metasfresh/commit/216a51e6fee9bb3a339e7cf1e713343713f2e924", "message": "#10195 fix deselect when clicked outside", "committedDate": "2020-11-19T23:56:09Z", "type": "commit"}, {"oid": "a2ba6154f79448287985b6a826b2930682f60014", "url": "https://github.com/metasfresh/metasfresh/commit/a2ba6154f79448287985b6a826b2930682f60014", "message": "#10195 small refactor, remove unused code", "committedDate": "2020-11-19T23:56:09Z", "type": "commit"}, {"oid": "96ba917e17a149b5b1dabd321b7283783027687e", "url": "https://github.com/metasfresh/metasfresh/commit/96ba917e17a149b5b1dabd321b7283783027687e", "message": "#10195 don't fetch QA if a request is already pending", "committedDate": "2020-11-19T23:56:09Z", "type": "commit"}, {"oid": "cf1969932bcfe7fab0e45323dbd59bcce823322c", "url": "https://github.com/metasfresh/metasfresh/commit/cf1969932bcfe7fab0e45323dbd59bcce823322c", "message": "#10195 some refactoring and comments", "committedDate": "2020-11-19T23:56:10Z", "type": "commit"}, {"oid": "02ec26ebe620152f1806889d73ca2ac9ffd9b5f9", "url": "https://github.com/metasfresh/metasfresh/commit/02ec26ebe620152f1806889d73ca2ac9ffd9b5f9", "message": "#10195 control toggling included views after selection in redux", "committedDate": "2020-11-19T23:56:10Z", "type": "commit"}, {"oid": "4db65fd469854a6801d32c2c91c3273f850d16ec", "url": "https://github.com/metasfresh/metasfresh/commit/4db65fd469854a6801d32c2c91c3273f850d16ec", "message": "#10195 properly get the selected item when showing included view", "committedDate": "2020-11-19T23:56:10Z", "type": "commit"}, {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2", "url": "https://github.com/metasfresh/metasfresh/commit/8f550405f45c2171c86bafbe563bada0209dc6e2", "message": "#10195 limit requests on deselecting all", "committedDate": "2020-11-19T23:56:10Z", "type": "commit"}, {"oid": "8f550405f45c2171c86bafbe563bada0209dc6e2", "url": "https://github.com/metasfresh/metasfresh/commit/8f550405f45c2171c86bafbe563bada0209dc6e2", "message": "#10195 limit requests on deselecting all", "committedDate": "2020-11-19T23:56:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MTMwMQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527481301", "bodyText": "I would group the actions specific to QuickActions into src/constants/actions/QuickActions.js then in the Action types I would do\n export * from './actions/QuickActions'\nand in the end would import here like it's already done. wdyt ?", "author": "petrican", "createdAt": "2020-11-20T07:09:01Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxOTQ3MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527619470", "bodyText": "I personally think it's an overkill. The reason why I named the file (and action creators) just Actions, as top actions are quick actions for tabs (even though for now they're stored in the window and should probably be extracted to a tab reducer in the future).", "author": "siemiatj", "createdAt": "2020-11-20T11:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MTMwMQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MTYxNg==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527641616", "bodyText": "I'm ok in having them in one place it's just that I thought having them separately would make them more reachable.", "author": "petrican", "createdAt": "2020-11-20T11:53:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MTMwMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MjM4MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527482380", "bodyText": "this doesn't seem to be used", "author": "petrican", "createdAt": "2020-11-20T07:11:43Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4MzY1MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527483650", "bodyText": "L:34-L38 can be written in just\nlet viewProfileId = includedView.windowId === windowId ? includedView.viewProfileId : null;", "author": "petrican", "createdAt": "2020-11-20T07:15:00Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4NDQ5Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527484492", "bodyText": "this doesn't seem to be defined. Pls define it somewhere above before use and set a default value for it.", "author": "petrican", "createdAt": "2020-11-20T07:17:09Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4NzY3NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527487675", "bodyText": "I would put this in just one line\nlet [fetch,fetchWindowId, fetchViewId, parentView, childView, viewProfileId ] = Array(6).fill(null);", "author": "petrican", "createdAt": "2020-11-20T07:25:55Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4OTE0Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527489142", "bodyText": "Actually if we set viewProfileId below we can just put\nlet [fetch,fetchWindowId, fetchViewId, parentView, childView ] = Array(5).fill(null);\nand down below\nlet viewProfileId = includedView.windowId === windowId ? includedView.viewProfileId : null;", "author": "petrican", "createdAt": "2020-11-20T07:29:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4NzY3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MDg4NA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527490884", "bodyText": "fetch = !childQuickActions.pending ? true : false;", "author": "petrican", "createdAt": "2020-11-20T07:34:25Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MTEzOQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527491139", "bodyText": "same as above", "author": "petrican", "createdAt": "2020-11-20T07:34:59Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MzA2MA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527493060", "bodyText": "dispatch({ type: FETCH_QUICK_ACTIONS, payload: { id }});", "author": "petrican", "createdAt": "2020-11-20T07:39:36Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MzYwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527493606", "bodyText": "dispatch({ type: FETCH_QUICK_ACTIONS_FAILURE, payload: { id }});", "author": "petrican", "createdAt": "2020-11-20T07:40:51Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDM1Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527494352", "bodyText": "return { type: DELETE_QUICK_ACTIONS, payload: { id }};", "author": "petrican", "createdAt": "2020-11-20T07:42:48Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_FAILURE,\n+          payload: { id },\n+        });\n+\n+        return Promise.reject(e);\n+      });\n+  };\n+}\n+\n+/**\n+ * @method deleteQuickActions\n+ * @summary Action creator to delete quick actions from the store\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ */\n+export function deleteQuickActions(windowId, viewId) {\n+  const id = getQuickActionsId({ windowId, viewId });\n+\n+  return {", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDUyNw==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527494527", "bodyText": "return { type: DELETE_TOP_ACTIONS };", "author": "petrican", "createdAt": "2020-11-20T07:43:22Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_FAILURE,\n+          payload: { id },\n+        });\n+\n+        return Promise.reject(e);\n+      });\n+  };\n+}\n+\n+/**\n+ * @method deleteQuickActions\n+ * @summary Action creator to delete quick actions from the store\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ */\n+export function deleteQuickActions(windowId, viewId) {\n+  const id = getQuickActionsId({ windowId, viewId });\n+\n+  return {\n+    type: DELETE_QUICK_ACTIONS,\n+    payload: { id },\n+  };\n+}\n+\n+/**\n+ * @method deleteTopActions\n+ * @summary Deletes tab's actions\n+ */\n+export function deleteTopActions() {\n+  return {", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NTA5NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527495095", "bodyText": "@param {string} windowType aso, pls put the actual type of each param", "author": "petrican", "createdAt": "2020-11-20T07:44:41Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_FAILURE,\n+          payload: { id },\n+        });\n+\n+        return Promise.reject(e);\n+      });\n+  };\n+}\n+\n+/**\n+ * @method deleteQuickActions\n+ * @summary Action creator to delete quick actions from the store\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ */\n+export function deleteQuickActions(windowId, viewId) {\n+  const id = getQuickActionsId({ windowId, viewId });\n+\n+  return {\n+    type: DELETE_QUICK_ACTIONS,\n+    payload: { id },\n+  };\n+}\n+\n+/**\n+ * @method deleteTopActions\n+ * @summary Deletes tab's actions\n+ */\n+export function deleteTopActions() {\n+  return {\n+    type: DELETE_TOP_ACTIONS,\n+  };\n+}\n+\n+/**\n+ * @method fetchTopActions\n+ * @summary Fetches tab's top actions\n+ *\n+ * @param {*} windowType", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NTQxNA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527495414", "bodyText": "dispatch({ type: FETCH_TOP_ACTIONS_FAILURE });", "author": "petrican", "createdAt": "2020-11-20T07:45:25Z", "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -0,0 +1,262 @@\n+import { quickActionsRequest, topActionsRequest } from '../api';\n+import {\n+  DELETE_QUICK_ACTIONS,\n+  DELETE_TOP_ACTIONS,\n+  FETCH_QUICK_ACTIONS,\n+  FETCH_QUICK_ACTIONS_FAILURE,\n+  FETCH_QUICK_ACTIONS_SUCCESS,\n+  FETCH_TOP_ACTIONS,\n+  FETCH_TOP_ACTIONS_FAILURE,\n+  FETCH_TOP_ACTIONS_SUCCESS,\n+} from '../constants/ActionTypes';\n+\n+import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n+import { getTable } from '../reducers/tables';\n+import { getView } from '../reducers/viewHandler';\n+\n+/*\n+ * @method getTableActions\n+ * @summary Action creator that calls the quick actions fetch internally for\n+ * when we're updating the table selection \n+ \n+ * @param {string} tableId\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const table = getTable(state, tableId);\n+    const selectedIds = table.selected;\n+    const { includedView } = state.viewHandler;\n+    let fetchActions = true;\n+    let viewProfileId = null;\n+\n+    if (includedView.windowId === windowId) {\n+      viewProfileId = includedView.viewProfileId;\n+    }\n+\n+    if (viewId) {\n+      const quickActionsId = getQuickActionsId({\n+        windowId,\n+        viewId,\n+      });\n+      const quickActions = getQuickActions(state, quickActionsId);\n+      fetch = !quickActions.pending;\n+    }\n+\n+    if (fetch) {\n+      dispatch(\n+        fetchQuickActions({\n+          windowId,\n+          viewId,\n+          viewProfileId,\n+          selectedIds,\n+        })\n+      );\n+    }\n+\n+    dispatch(\n+      fetchIncludedQuickActions({\n+        windowId,\n+        selectedIds,\n+        isModal,\n+      })\n+    );\n+  };\n+}\n+\n+/*\n+ * @method fetchIncludedQuickActions\n+ * @summary Action creator that calls the quick actions fetch internally for parent/child\n+ * quick actions, when a table selection has changed\n+ *\n+ * @param {string} windowId\n+ * @param {array} selectedIds\n+ * @param {boolean} isModal\n+ */\n+export function fetchIncludedQuickActions({ windowId, selectedIds, isModal }) {\n+  return (dispatch, getState) => {\n+    const state = getState();\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n+\n+    // we're only interested in included view's quick actions if it\n+    // actually exists\n+    if (includedView) {\n+      let fetch = false;\n+      let fetchWindowId = null;\n+      let fetchViewId = null;\n+      let parentView = null;\n+      let childView = null;\n+      let viewProfileId = null;\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (includedView.windowId === windowId) {\n+        viewProfileId = includedView.viewProfileId;\n+      }\n+\n+      if (isParent) {\n+        fetchWindowId = includedView.windowId;\n+        childView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = childView.viewId;\n+        const childQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const childQuickActions = getQuickActions(state, childQuickActionsId);\n+\n+        // only update quick actions if they're not already requested\n+        if (!childQuickActions.pending) {\n+          fetch = true;\n+        }\n+      } else if (isChild) {\n+        fetchWindowId = includedView.parentId;\n+        parentView = getView(state, fetchWindowId, isModal);\n+        fetchViewId = parentView.viewId;\n+        const parentQuickActionsId = getQuickActionsId({\n+          windowId: fetchWindowId,\n+          viewId: fetchViewId,\n+        });\n+        const parentQuickActions = getQuickActions(state, parentQuickActionsId);\n+\n+        if (!parentQuickActions.pending) {\n+          fetch = true;\n+        }\n+      }\n+\n+      if ((isParent || isChild) && fetch) {\n+        dispatch(\n+          fetchQuickActions({\n+            windowId: fetchWindowId,\n+            viewId: fetchViewId,\n+            viewProfileId,\n+            selectedIds,\n+            parentView,\n+            childView,\n+          })\n+        );\n+      }\n+    }\n+  };\n+}\n+\n+/**\n+ * @method fetchQuickActions\n+ * @summary Fetches the quick actions\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {string} viewProfileId\n+ * @param {array} selectedIds\n+ * @param {object} childView\n+ * @param {object} parentView\n+ */\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  viewProfileId,\n+  selectedIds,\n+  childView,\n+  parentView,\n+}) {\n+  return (dispatch) => {\n+    const id = getQuickActionsId({ windowId, viewId });\n+\n+    dispatch({\n+      type: FETCH_QUICK_ACTIONS,\n+      payload: { id },\n+    });\n+\n+    return quickActionsRequest({\n+      windowId,\n+      viewId,\n+      viewProfileId,\n+      selectedIds,\n+      childView,\n+      parentView,\n+    })\n+      .then((response) => {\n+        const actions = response.data.actions;\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_SUCCESS,\n+          payload: {\n+            id,\n+            actions,\n+          },\n+        });\n+\n+        return Promise.resolve(actions);\n+      })\n+      .catch((e) => {\n+        dispatch({\n+          type: FETCH_QUICK_ACTIONS_FAILURE,\n+          payload: { id },\n+        });\n+\n+        return Promise.reject(e);\n+      });\n+  };\n+}\n+\n+/**\n+ * @method deleteQuickActions\n+ * @summary Action creator to delete quick actions from the store\n+ *\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ */\n+export function deleteQuickActions(windowId, viewId) {\n+  const id = getQuickActionsId({ windowId, viewId });\n+\n+  return {\n+    type: DELETE_QUICK_ACTIONS,\n+    payload: { id },\n+  };\n+}\n+\n+/**\n+ * @method deleteTopActions\n+ * @summary Deletes tab's actions\n+ */\n+export function deleteTopActions() {\n+  return {\n+    type: DELETE_TOP_ACTIONS,\n+  };\n+}\n+\n+/**\n+ * @method fetchTopActions\n+ * @summary Fetches tab's top actions\n+ *\n+ * @param {*} windowType\n+ * @param {*} docId\n+ * @param {*} tabId\n+ */\n+export function fetchTopActions(windowType, docId, tabId) {\n+  return (dispatch) => {\n+    dispatch({\n+      type: FETCH_TOP_ACTIONS,\n+    });\n+\n+    return topActionsRequest(windowType, docId, tabId)\n+      .then((response) => {\n+        dispatch({\n+          type: FETCH_TOP_ACTIONS_SUCCESS,\n+          payload: response.data.actions,\n+        });\n+\n+        return Promise.resolve(response.data.actions);\n+      })\n+      .catch((e) => {\n+        dispatch({", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5Njk5Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527496996", "bodyText": "this fits in one line also\ndispatch({ type: types.DESELECT_TABLE_ROWS, payload: { id, selection } });", "author": "petrican", "createdAt": "2020-11-20T07:49:15Z", "path": "frontend/src/actions/TableActions.js", "diffHunk": "@@ -547,14 +538,128 @@ export function collapseTableRow({ tableId, collapse, node }) {\n  * @param {array} selection - array of selected items. This will be validated\n  * for existence in the rows data by the reducer, but not for duplication\n  * @param {string} keyProperty=id - `id` or `rowId` depending on the table type\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n  */\n-export function updateTableSelection(id, selection, keyProperty = 'id') {\n+export function updateTableSelection({\n+  id,\n+  selection,\n+  keyProperty = 'id',\n+  windowId,\n+  viewId,\n+  isModal,\n+}) {\n   return (dispatch) => {\n     dispatch({\n       type: types.UPDATE_TABLE_SELECTION,\n       payload: { id, selection, keyProperty },\n     });\n \n+    if (viewId) {\n+      // update quick actions\n+      dispatch(getTableActions({ tableId: id, windowId, viewId, isModal }));\n+      // show included view\n+      dispatch(\n+        handleToggleIncludedView({ windowId, tableId: id, selection, isModal })\n+      );\n+    }\n+\n     return Promise.resolve(selection);\n   };\n }\n+\n+/**\n+ * @method deselectTableRows\n+ * @summary deselect rows or deselect all if an empty `ids` array is provided\n+ *\n+ * @param {string} id - table id\n+ * @param {array} selection - array of items to deselect\n+ * @param {number} windowId\n+ * @param {string} viewId\n+ * @param {boolean} isModal\n+ */\n+export function deselectTableRows({\n+  id,\n+  selection,\n+  windowId,\n+  viewId,\n+  isModal,\n+}) {\n+  return (dispatch) => {\n+    dispatch({", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyNDIwMA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527624200", "bodyText": "Not a fan of one-liners in this case. It's easier to read and understand them when the type clearly stands out.", "author": "siemiatj", "createdAt": "2020-11-20T11:17:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5Njk5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MDUyMA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527640520", "bodyText": "I do like the code to be easily readable but also would like the overall size in lines of a file to be small. You see you gain two lines in here, two lines in there aso and in the end we will have a smaller file.", "author": "petrican", "createdAt": "2020-11-20T11:50:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5Njk5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUwMTI4Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527501287", "bodyText": "id && dispatch(toggleIncludedView(id, showIncludedView, isModal));\n\n    showIncludedView &&\n      dispatch(\n        setIncludedView({ windowId, viewId, parentId: id, viewProfileId })\n      );\n\n    !showIncludedView &&\n      dispatch(unsetIncludedView({ windowId, viewId, forceClose }));", "author": "petrican", "createdAt": "2020-11-20T07:58:59Z", "path": "frontend/src/actions/ViewActions.js", "diffHunk": "@@ -542,14 +571,17 @@ export function showIncludedView({\n   viewId,\n   forceClose,\n   isModal,\n+  viewProfileId,\n } = {}) {\n   return (dispatch) => {\n     if (id) {\n       dispatch(toggleIncludedView(id, showIncludedView, isModal));\n     }\n \n     if (showIncludedView) {\n-      dispatch(setIncludedView({ windowId, viewId }));\n+      dispatch(\n+        setIncludedView({ windowId, viewId, parentId: id, viewProfileId })\n+      );", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYyNjgyNA==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527626824", "bodyText": "As long as we don't have typing, I'm trying to avoid the x && y construction.", "author": "siemiatj", "createdAt": "2020-11-20T11:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUwMTI4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxOTAwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527519006", "bodyText": "rem original if not in use", "author": "petrican", "createdAt": "2020-11-20T08:25:02Z", "path": "frontend/src/reducers/actionsHandler.js", "diffHunk": "@@ -0,0 +1,73 @@\n+import { produce /*, original*/ } from 'immer';", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyMDAxMQ==", "url": "https://github.com/metasfresh/metasfresh/pull/10223#discussion_r527520011", "bodyText": "remove if no longer in use", "author": "petrican", "createdAt": "2020-11-20T08:26:54Z", "path": "frontend/src/utils/documentListHelper.js", "diffHunk": "@@ -21,7 +21,7 @@ const DLpropTypes = {\n   windowId: PropTypes.string.isRequired,\n   viewId: PropTypes.string,\n   queryViewId: PropTypes.string,\n-  updateParentSelectedIds: PropTypes.func,\n+  // updateParentSelectedIds: PropTypes.func,", "originalCommit": "8f550405f45c2171c86bafbe563bada0209dc6e2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "1a4b17f120fc04abe21833e270495f73fdd7781f", "url": "https://github.com/metasfresh/metasfresh/commit/1a4b17f120fc04abe21833e270495f73fdd7781f", "message": "#10195 cleanup", "committedDate": "2020-11-23T09:49:53Z", "type": "commit"}, {"oid": "158dfe0fc393ce719ed6a3413e11f998e16f23c7", "url": "https://github.com/metasfresh/metasfresh/commit/158dfe0fc393ce719ed6a3413e11f998e16f23c7", "message": "#10195 remove unnecessary `deleteTable` when closing modal\n#10195 remove nonexisting prop", "committedDate": "2020-11-23T09:59:07Z", "type": "commit"}, {"oid": "0e56ea89bb4064bd6e4ce6cce3e4b568307723a5", "url": "https://github.com/metasfresh/metasfresh/commit/0e56ea89bb4064bd6e4ce6cce3e4b568307723a5", "message": "#10195 properly remove quick actions", "committedDate": "2020-11-23T11:39:22Z", "type": "commit"}, {"oid": "c8affb69f8769d43ca1fe24f084334a5aaa04b8b", "url": "https://github.com/metasfresh/metasfresh/commit/c8affb69f8769d43ca1fe24f084334a5aaa04b8b", "message": "#10195 cleanup actions", "committedDate": "2020-11-23T11:49:25Z", "type": "commit"}, {"oid": "8ad34cc4b8426b6350046e958325fac8cbacbd9f", "url": "https://github.com/metasfresh/metasfresh/commit/8ad34cc4b8426b6350046e958325fac8cbacbd9f", "message": "#10195 modal without included view shouldn't fetch QA", "committedDate": "2020-11-23T14:15:21Z", "type": "commit"}, {"oid": "f5ac2cf9a8f577709f0f8fa221f36e2df940f52e", "url": "https://github.com/metasfresh/metasfresh/commit/f5ac2cf9a8f577709f0f8fa221f36e2df940f52e", "message": "#10195 fix process tests and rename some function params", "committedDate": "2020-11-24T00:11:43Z", "type": "commit"}, {"oid": "c7c391ec3d9caa69fb31963a13271355e839a786", "url": "https://github.com/metasfresh/metasfresh/commit/c7c391ec3d9caa69fb31963a13271355e839a786", "message": "#10195 cleanup and fixing tests", "committedDate": "2020-11-24T18:20:23Z", "type": "commit"}, {"oid": "868801937b33453f6d22d06c66dde1373808eb4f", "url": "https://github.com/metasfresh/metasfresh/commit/868801937b33453f6d22d06c66dde1373808eb4f", "message": "#10195 fix quickactions tests", "committedDate": "2020-11-24T18:41:13Z", "type": "commit"}, {"oid": "c64ad7cb56826ec11d26d038d40b060523a016f2", "url": "https://github.com/metasfresh/metasfresh/commit/c64ad7cb56826ec11d26d038d40b060523a016f2", "message": "Merge branch 'master' into frontend-10195", "committedDate": "2020-11-24T18:45:09Z", "type": "commit"}, {"oid": "49de7a20a09322759ad3d6efc0359d282fb32215", "url": "https://github.com/metasfresh/metasfresh/commit/49de7a20a09322759ad3d6efc0359d282fb32215", "message": "#10195 fix deleting QA", "committedDate": "2020-11-24T21:50:22Z", "type": "commit"}, {"oid": "c2d201d0da93dcb3fa97d21a030e727b3709564a", "url": "https://github.com/metasfresh/metasfresh/commit/c2d201d0da93dcb3fa97d21a030e727b3709564a", "message": "#10195 add missing param in test", "committedDate": "2020-11-24T22:26:56Z", "type": "commit"}]}