{"pr_number": 6160, "pr_title": "Jasper Report: Profit & Loss Report", "pr_createdAt": "2020-02-11T05:48:32Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6160", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDcxOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377560718", "bodyText": "do we have an index on fas.c_period_id?`if not, do we need one?\nEDI: we have one", "author": "metas-ts", "createdAt": "2020-02-11T10:49:59Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "diffHunk": "@@ -0,0 +1,59 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS NUMERIC\n+AS\n+$BODY$\n+\n+WITH periods_between_dates AS\n+         (\n+             SELECT --\n+                    p.c_period_id,\n+                    p.startdate,\n+                    p.enddate\n+             FROM c_period p\n+             WHERE TRUE\n+               AND p.startdate >= p_startDate\n+               AND p.enddate <= p_endDate\n+         ),\n+     fact_acct_summary_for_periods AS\n+         (\n+             -- fact_acct_summary filtered for selected period\n+             SELECT fas.*\n+             FROM periods_between_dates p\n+                      INNER JOIN fact_acct_summary fas ON fas.c_period_id = p.c_period_id", "originalCommit": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwMDg1MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377600851", "bodyText": "Since we already have an index, there is nothing i have to do, right?", "author": "TheBestPessimist", "createdAt": "2020-02-11T12:21:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDcxOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MzQ2Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378783463", "bodyText": "Assuming there's nothing else for me to do and marking as resolved", "author": "TheBestPessimist", "createdAt": "2020-02-13T10:46:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDcxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NDA5Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377564096", "bodyText": "when it's possible - i think in this case it is - one should use STABLE(check the docu for details)", "author": "metas-ts", "createdAt": "2020-02-11T10:57:00Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "diffHunk": "@@ -0,0 +1,59 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS NUMERIC\n+AS\n+$BODY$\n+\n+WITH periods_between_dates AS\n+         (\n+             SELECT --\n+                    p.c_period_id,\n+                    p.startdate,\n+                    p.enddate\n+             FROM c_period p\n+             WHERE TRUE\n+               AND p.startdate >= p_startDate\n+               AND p.enddate <= p_endDate\n+         ),\n+     fact_acct_summary_for_periods AS\n+         (\n+             -- fact_acct_summary filtered for selected period\n+             SELECT fas.*\n+             FROM periods_between_dates p\n+                      INNER JOIN fact_acct_summary fas ON fas.c_period_id = p.c_period_id\n+             WHERE fas.account_id = p_C_ElementValue_ID\n+         ),\n+     result_table AS\n+         (\n+             SELECT coalesce(sum(acctbalance(fas.account_id, fas.amtacctdr, fas.amtacctcr)), 0) balance\n+             FROM c_elementvalue ev\n+                      INNER JOIN fact_acct_summary_for_periods fas ON fas.account_id = ev.c_elementvalue_id\n+             WHERE TRUE\n+               AND ev.accounttype IN ('E', 'R')\n+               -- only 'Actual' posting type is used\n+               AND fas.postingtype = 'A'\n+             GROUP BY ev.value, ev.name\n+             ORDER BY ev.name\n+         )\n+SELECT balance\n+FROM result_table\n+\n+/**\n+  Why is this union needed?\n+  In case no `fact_acct_summary` for an account_id exists, `result_table` returns no rows. It doesn't return null (so that i can use coalesce), but returns NO rows.\n+     example: SELECT ProfitAndLossBalanceForAccountInPeriod(1, '1993-01-01'::Timestamp, '2992-01-01'::Timestamp); -- this returns NO rows\n+  I have simply added this union in case the select returns nothing. If you have a better solution, i'm more than happy to hear it, as this feels like a hack.\n+ */\n+UNION ALL\n+(\n+    SELECT 0\n+)\n+LIMIT 1\n+    ;\n+$BODY$\n+    LANGUAGE SQL\n+    VOLATILE;", "originalCommit": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5NzU3Ng==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377597576", "bodyText": "marked as stable (already checked the docs to see the difference between immutable, stable and volatile, but i still wasn't convinced this is a stable function)", "author": "TheBestPessimist", "createdAt": "2020-02-11T12:13:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NDA5Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NTA2NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377565065", "bodyText": "it's great to provide this info, but this please also add it as a comment to the function in question, so future devs can see it there too", "author": "metas-ts", "createdAt": "2020-02-11T10:59:05Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/acctBalanceUntilDate.sql", "diffHunk": "@@ -1,12 +1,36 @@\n -- Function: de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character)\n \n- DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character);\n \n-DROP FUNCTION IF EXISTS   de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date,  ad_org_id numeric, p_includepostingtypestatistical character);\n-DROP FUNCTION IF EXISTS   de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date,  ad_org_id numeric, p_includepostingtypestatistical character, IN  p_ExcludePostingTypeYearEnd character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date, ad_org_id numeric, p_includepostingtypestatistical character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date, ad_org_id numeric, p_includepostingtypestatistical character, IN p_ExcludePostingTypeYearEnd character);\n \n+--\n+--\n+--\n+--\n+--\n+-- TODO this will be deleted in https://github.com/metasfresh/metasfresh/issues/6149\n+--      DO NOT USE THIS ANYMORE\n+--      PLEASE USE acctBalanceToDate", "originalCommit": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxNTkxMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377615913", "bodyText": "Added comment to the function.", "author": "TheBestPessimist", "createdAt": "2020-02-11T12:54:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NTA2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA0NA==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378701044", "bodyText": "better name the columns as:\n\nvalue => AccountValue\nname => AccountName\nIsSummary => take out\nthree_years_ago => Balance_3yAgo\ntwo_years_ago => Balance_2yAgo\none_year_ago => Balance_1yAgo\ncurrent_period => Balance", "author": "teosarca", "createdAt": "2020-02-13T08:01:27Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossReport.sql", "diffHunk": "@@ -0,0 +1,39 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp, IN p_compareWithPrevious1Year boolean, IN p_compareWithPrevious3Years boolean);\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS TABLE\n+            (\n+                name            text,\n+                value           text,\n+                isSummary       text,\n+                three_years_ago numeric,\n+                two_years_ago   numeric,\n+                one_year_ago    numeric,\n+                current_period  numeric", "originalCommit": "1d3ba0254ccfdbbb00c48cbd666afd32428e291c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5MDg3Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378790872", "bodyText": "updated trl", "author": "TheBestPessimist", "createdAt": "2020-02-13T10:59:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTE4NQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378701185", "bodyText": "also filter by ev.IsSummary=N", "author": "teosarca", "createdAt": "2020-02-13T08:01:46Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossReport.sql", "diffHunk": "@@ -0,0 +1,39 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp, IN p_compareWithPrevious1Year boolean, IN p_compareWithPrevious3Years boolean);\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS TABLE\n+            (\n+                name            text,\n+                value           text,\n+                isSummary       text,\n+                three_years_ago numeric,\n+                two_years_ago   numeric,\n+                one_year_ago    numeric,\n+                current_period  numeric\n+            )\n+AS\n+$BODY$\n+\n+SELECT ev.name,\n+       ev.value,\n+       ev.issummary::text,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '3 Year'::interval, p_endDate - '3 Year'::interval) three_years_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '2 Year'::interval, p_endDate - '2 Year'::interval) two_years_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '1 Year'::interval, p_endDate - '1 Year'::interval) one_year_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate, p_endDate)                                           current_balance\n+FROM c_elementvalue ev\n+WHERE TRUE\n+  AND ev.accounttype IN ('E', 'R')", "originalCommit": "1d3ba0254ccfdbbb00c48cbd666afd32428e291c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MzI0MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378783240", "bodyText": "filtered", "author": "TheBestPessimist", "createdAt": "2020-02-13T10:46:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTE4NQ=="}], "type": "inlineReview"}, {"oid": "82e14ee11bf4bfc5a9f3c2115920b34aaf6526ed", "url": "https://github.com/metasfresh/metasfresh/commit/82e14ee11bf4bfc5a9f3c2115920b34aaf6526ed", "message": "Add ProfitAndLossBalance related sql functions\n\nhttps://github.com/metasfresh/metasfresh/issues/6148", "committedDate": "2020-02-14T07:34:23Z", "type": "commit"}, {"oid": "1b58a637f7f344286635ceb35e1c884de2a3a2d5", "url": "https://github.com/metasfresh/metasfresh/commit/1b58a637f7f344286635ceb35e1c884de2a3a2d5", "message": "Element Values window: add AccountType to filters\n\nhttps://github.com/metasfresh/metasfresh/issues/6061", "committedDate": "2020-02-14T07:34:23Z", "type": "commit"}, {"oid": "3462f6bd020830a3ddd15a0a5ecb5904ca137e3c", "url": "https://github.com/metasfresh/metasfresh/commit/3462f6bd020830a3ddd15a0a5ecb5904ca137e3c", "message": "Mark sql for deletion\n\nhttps://github.com/metasfresh/metasfresh/issues/6061", "committedDate": "2020-02-14T07:34:23Z", "type": "commit"}, {"oid": "a7a0fa361fa906942f76278d0d647b79db52c0e4", "url": "https://github.com/metasfresh/metasfresh/commit/a7a0fa361fa906942f76278d0d647b79db52c0e4", "message": "Update function and columns name\n\nhttps://github.com/metasfresh/metasfresh/issues/6061", "committedDate": "2020-02-14T07:34:23Z", "type": "commit"}, {"oid": "d42b51d68680f3aa1c8516f2c3e6d08fe6e7e8eb", "url": "https://github.com/metasfresh/metasfresh/commit/d42b51d68680f3aa1c8516f2c3e6d08fe6e7e8eb", "message": "Move sql file\n\nhttps://github.com/metasfresh/metasfresh/issues/6061", "committedDate": "2020-02-14T07:34:23Z", "type": "commit"}, {"oid": "64fb0b60378072580586958d308aec0431b8e75e", "url": "https://github.com/metasfresh/metasfresh/commit/64fb0b60378072580586958d308aec0431b8e75e", "message": "Add Profit And Loss Report excel process\n\nhttps://github.com/metasfresh/metasfresh/issues/6061", "committedDate": "2020-02-14T07:34:23Z", "type": "commit"}, {"oid": "73c4ff77d0dc25a9325ff75b94c253b1cd49c90b", "url": "https://github.com/metasfresh/metasfresh/commit/73c4ff77d0dc25a9325ff75b94c253b1cd49c90b", "message": "Mark ProfitAndLossBalanceForAccountInPeriod as stable\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T07:34:23Z", "type": "commit"}, {"oid": "0be5006e729355853f068b12e0773fdfb2bb5d20", "url": "https://github.com/metasfresh/metasfresh/commit/0be5006e729355853f068b12e0773fdfb2bb5d20", "message": "Add comment for function deprecation warning\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T07:34:23Z", "type": "commit"}, {"oid": "ebf5b68addb1b0a8a2ec2f506510e173af9ec0c0", "url": "https://github.com/metasfresh/metasfresh/commit/ebf5b68addb1b0a8a2ec2f506510e173af9ec0c0", "message": "Add IsSummary flag to ProfitAndLossReport\n\nhttps://github.com/metasfresh/metasfresh/issues/6148", "committedDate": "2020-02-14T07:34:24Z", "type": "commit"}, {"oid": "961ecb148c9da079679799f4c369e8ed5e0f1b88", "url": "https://github.com/metasfresh/metasfresh/commit/961ecb148c9da079679799f4c369e8ed5e0f1b88", "message": "Change trls\n\nhttps://github.com/metasfresh/metasfresh/issues/6148", "committedDate": "2020-02-14T07:34:24Z", "type": "commit"}, {"oid": "28f5d40d6cf17aa983204c01cc2e7b87457062b7", "url": "https://github.com/metasfresh/metasfresh/commit/28f5d40d6cf17aa983204c01cc2e7b87457062b7", "message": "Mark function as stable, not volatile\n\nhttps://github.com/metasfresh/metasfresh/issues/6148", "committedDate": "2020-02-14T07:34:24Z", "type": "commit"}, {"oid": "f01c0235fffdabd91f1ab677f987dd4cbcc9319d", "url": "https://github.com/metasfresh/metasfresh/commit/f01c0235fffdabd91f1ab677f987dd4cbcc9319d", "message": "Update trl + add new ProfitAndLoss functions migration scripts\n\nhttps://github.com/metasfresh/metasfresh/issues/6148", "committedDate": "2020-02-14T07:34:24Z", "type": "commit"}, {"oid": "f01c0235fffdabd91f1ab677f987dd4cbcc9319d", "url": "https://github.com/metasfresh/metasfresh/commit/f01c0235fffdabd91f1ab677f987dd4cbcc9319d", "message": "Update trl + add new ProfitAndLoss functions migration scripts\n\nhttps://github.com/metasfresh/metasfresh/issues/6148", "committedDate": "2020-02-14T07:34:24Z", "type": "forcePushed"}]}