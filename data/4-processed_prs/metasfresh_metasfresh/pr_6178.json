{"pr_number": 6178, "pr_title": "Jasper Report: `Account Sheet` - `Kontenblatt`", "pr_createdAt": "2020-02-12T14:40:43Z", "pr_url": "https://github.com/metasfresh/metasfresh/pull/6178", "timeline": [{"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8", "url": "https://github.com/metasfresh/metasfresh/commit/1906af0218d667a2a5a9e0faa82e8a3af946c7e8", "message": "Add Account Sheet Report Process\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-13T09:38:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDI0Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378780247", "bodyText": "use TMP_AccountSheetReport tablename instead of tbpFilteredFactAcct", "author": "teosarca", "createdAt": "2020-02-13T10:40:46Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS", "originalCommit": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5Nzg5Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378797893", "bodyText": "renamed", "author": "TheBestPessimist", "createdAt": "2020-02-13T11:14:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDI0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTI4OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378781288", "bodyText": "don't filter by AccountType", "author": "teosarca", "createdAt": "2020-02-13T10:42:43Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'", "originalCommit": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMDk4Mg==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378800982", "bodyText": "Filtered instead by fact_acct.postingType=A", "author": "TheBestPessimist", "createdAt": "2020-02-13T11:22:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTI4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzODcyMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378838723", "bodyText": "fixed", "author": "TheBestPessimist", "createdAt": "2020-02-13T12:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTI4OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjM1OQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378782359", "bodyText": "use\nGET DIAGNOSTICS v_temp = ROW_COUNT; instead of actually counting for logging...", "author": "teosarca", "createdAt": "2020-02-13T10:44:30Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "originalCommit": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5MzU4Mw==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378793583", "bodyText": "didn't know about get diagnostics.", "author": "TheBestPessimist", "createdAt": "2020-02-13T11:05:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjM1OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMjIyOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378802228", "bodyText": "fixed", "author": "TheBestPessimist", "createdAt": "2020-02-13T11:24:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjM1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjgyMQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378782821", "bodyText": "same, avoid using select count(1) for logging purposes", "author": "teosarca", "createdAt": "2020-02-13T10:45:21Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tbp.beginningBalance::numeric beginningBalance,\n+                        tbp.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN tbpFilteredFactAcct tbp ON tbp.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+                 WHERE TRUE\n+                   -- AND ev.accounttype = 'A' -- no longer needed here, since we're joining with the already filtered tbpFilteredFactAcct\n+                   AND fa.c_acctschema_id = p_c_acctschema_id\n+                   AND (fa.dateacct >= p_dateFrom AND fa.dateacct <= p_dateTo)\n+                   AND (p_account_id IS NULL OR fa.account_id = p_account_id)\n+                   AND (p_c_activity_id IS NULL OR fa.c_activity_id = p_c_activity_id)\n+                   AND (p_c_project_id IS NULL OR fa.c_project_id = p_c_project_id)\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct\n+    SELECT *\n+    FROM filteredFactAcct;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "originalCommit": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgwMjI5OA==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378802298", "bodyText": "fixed", "author": "TheBestPessimist", "createdAt": "2020-02-13T11:24:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjgyMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378846523", "bodyText": "don't need this join", "author": "teosarca", "createdAt": "2020-02-13T13:04:43Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO TMP_AccountSheetReport (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    GET DIAGNOSTICS v_temp = ROW_COUNT;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tmp_fa.beginningBalance::numeric beginningBalance,\n+                        tmp_fa.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN TMP_AccountSheetReport tmp_fa ON tmp_fa.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id", "originalCommit": "4b77f4e8cb29340063c65dd06e206b28125594a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1OTM0Nw==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378859347", "bodyText": "which join? (from the comment/preview i don't understand to which join you're referring to)", "author": "TheBestPessimist", "createdAt": "2020-02-13T13:30:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI5OTUyNQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r379299525", "bodyText": "was talking about tax category..... but now u need it because u need tax category's name", "author": "teosarca", "createdAt": "2020-02-14T08:21:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTMwMjQ3MQ==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r379302471", "bodyText": "okay. marking as resolved", "author": "TheBestPessimist", "createdAt": "2020-02-14T08:28:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjkwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378846906", "bodyText": "just create the table with precisely the columns u need; avoid using this \"tricky\" SELECT", "author": "teosarca", "createdAt": "2020-02-13T13:05:29Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );", "originalCommit": "4b77f4e8cb29340063c65dd06e206b28125594a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MjgwOA==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378852808", "bodyText": "done;", "author": "TheBestPessimist", "createdAt": "2020-02-13T13:17:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjkwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0OTIwNg==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378849206", "bodyText": "export doc type name instead of c_doctype_id\nsame of the other ID columns", "author": "teosarca", "createdAt": "2020-02-13T13:10:13Z", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,", "originalCommit": "4b77f4e8cb29340063c65dd06e206b28125594a5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2NjY4MA==", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r379266680", "bodyText": "done", "author": "TheBestPessimist", "createdAt": "2020-02-14T06:20:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0OTIwNg=="}], "type": "inlineReview"}, {"oid": "40c854d74feed420a3739b2c1f878c8edcda32da", "url": "https://github.com/metasfresh/metasfresh/commit/40c854d74feed420a3739b2c1f878c8edcda32da", "message": "First draft of AccountSheetReport\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:52Z", "type": "commit"}, {"oid": "a52f0ce19bb3592ad76bc0774d46327629257e43", "url": "https://github.com/metasfresh/metasfresh/commit/a52f0ce19bb3592ad76bc0774d46327629257e43", "message": "Working draft of AccountSheetReport\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:52Z", "type": "commit"}, {"oid": "cc8bc257508fbc44117409fd2f14fcc4815d52d4", "url": "https://github.com/metasfresh/metasfresh/commit/cc8bc257508fbc44117409fd2f14fcc4815d52d4", "message": "Second working draft of AccountSheetReport; this one's faster\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:52Z", "type": "commit"}, {"oid": "09abebf59027972afeefedbc4f345b975ba6f867", "url": "https://github.com/metasfresh/metasfresh/commit/09abebf59027972afeefedbc4f345b975ba6f867", "message": "Add sql function `logDebug` which prints to the console\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:52Z", "type": "commit"}, {"oid": "b7cab6a7472c2d4ac77da9f47d7d6740d6139403", "url": "https://github.com/metasfresh/metasfresh/commit/b7cab6a7472c2d4ac77da9f47d7d6740d6139403", "message": "Update debug logs\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:52Z", "type": "commit"}, {"oid": "3906cbed786bf884fa21e653c72d1159c916ed73", "url": "https://github.com/metasfresh/metasfresh/commit/3906cbed786bf884fa21e653c72d1159c916ed73", "message": "Add how to use to `logDebug`\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:52Z", "type": "commit"}, {"oid": "297cb8791e43d14dfecd583dacb108efbcb2c1ba", "url": "https://github.com/metasfresh/metasfresh/commit/297cb8791e43d14dfecd583dacb108efbcb2c1ba", "message": "Add performance numbers\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:52Z", "type": "commit"}, {"oid": "5dfac5dc09140cdd305535137d04a43ddc96acad", "url": "https://github.com/metasfresh/metasfresh/commit/5dfac5dc09140cdd305535137d04a43ddc96acad", "message": "Rename column to `endingBalance` from `previousBalance` to better suggest the usage\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:52Z", "type": "commit"}, {"oid": "7997677eead062f415608a03418912ca22da9bf1", "url": "https://github.com/metasfresh/metasfresh/commit/7997677eead062f415608a03418912ca22da9bf1", "message": "Add the sql functions for AccountSheetReport and logDebug\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "9d5e34f36ddde2bd02f8870d1d24c4b9cfc52d81", "url": "https://github.com/metasfresh/metasfresh/commit/9d5e34f36ddde2bd02f8870d1d24c4b9cfc52d81", "message": "Bugfix: Always show header for excel export, even if there are no rows\n\nThis fixes an AIOUB exception when creating the header\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "7f71be4b2b6f65cda082c7fd5b329a5e4232d59c", "url": "https://github.com/metasfresh/metasfresh/commit/7f71be4b2b6f65cda082c7fd5b329a5e4232d59c", "message": "Add Account Sheet Report Process\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "9717699842a52571599caddf33f56dd6d5089711", "url": "https://github.com/metasfresh/metasfresh/commit/9717699842a52571599caddf33f56dd6d5089711", "message": "Rename the temporary table\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "b22e19660497b15a81403b3061135f9cb93be0a4", "url": "https://github.com/metasfresh/metasfresh/commit/b22e19660497b15a81403b3061135f9cb93be0a4", "message": "Filter by `fact_acct.postingType=A`\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "fe8dd6fdd45812f010efc1c0ce419c99beed6348", "url": "https://github.com/metasfresh/metasfresh/commit/fe8dd6fdd45812f010efc1c0ce419c99beed6348", "message": "Use `GET DIAGNOSTICS` instead of `select count`\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "165d7f4a12550bc68d4ecd52b00f2920dfc501a9", "url": "https://github.com/metasfresh/metasfresh/commit/165d7f4a12550bc68d4ecd52b00f2920dfc501a9", "message": "`logDebug` is actually volatile, not immutable\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "41e08efec5449d6fb9c97dfd2362046ea588e6d6", "url": "https://github.com/metasfresh/metasfresh/commit/41e08efec5449d6fb9c97dfd2362046ea588e6d6", "message": "Update Performance numbers\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "767e7f77e4db8994a51e2eeb5f1522f564b97f26", "url": "https://github.com/metasfresh/metasfresh/commit/767e7f77e4db8994a51e2eeb5f1522f564b97f26", "message": "Add migration script\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "77f8ae3cd2ff2fc42fdf3d45b5aa06d3180a8a78", "url": "https://github.com/metasfresh/metasfresh/commit/77f8ae3cd2ff2fc42fdf3d45b5aa06d3180a8a78", "message": "Add plea for help regarding performance\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "4f233a497b513be1cf29a64116d8f3891857e88a", "url": "https://github.com/metasfresh/metasfresh/commit/4f233a497b513be1cf29a64116d8f3891857e88a", "message": "Properly create the temporary table, instead of using that trick\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "f6204ea4083ee25ce38bb1248fff3250370c4949", "url": "https://github.com/metasfresh/metasfresh/commit/f6204ea4083ee25ce38bb1248fff3250370c4949", "message": "Cleanup\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T06:32:53Z", "type": "commit"}, {"oid": "12be35e24bf9e78724a98efb89ece6ab22aae24b", "url": "https://github.com/metasfresh/metasfresh/commit/12be35e24bf9e78724a98efb89ece6ab22aae24b", "message": "Return names instead of IDs\n\nUsers finally know what they're looking at\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T07:25:04Z", "type": "commit"}, {"oid": "12be35e24bf9e78724a98efb89ece6ab22aae24b", "url": "https://github.com/metasfresh/metasfresh/commit/12be35e24bf9e78724a98efb89ece6ab22aae24b", "message": "Return names instead of IDs\n\nUsers finally know what they're looking at\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T07:25:04Z", "type": "forcePushed"}, {"oid": "b760953e121f832e20fdead9822cfcaeae727701", "url": "https://github.com/metasfresh/metasfresh/commit/b760953e121f832e20fdead9822cfcaeae727701", "message": "Remove rows which have both amtacctdr == amtacctcr == 0\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T07:40:38Z", "type": "commit"}, {"oid": "69768c8cf92a49521788920687b263555ed241ae", "url": "https://github.com/metasfresh/metasfresh/commit/69768c8cf92a49521788920687b263555ed241ae", "message": "Add migration script\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T07:43:27Z", "type": "commit"}, {"oid": "fd0151d84ba300886d3ce8f28e124f0defca8560", "url": "https://github.com/metasfresh/metasfresh/commit/fd0151d84ba300886d3ce8f28e124f0defca8560", "message": "Update TRL\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T10:26:33Z", "type": "commit"}, {"oid": "6c3279480da04de230046dfe234c1bdccc4ef6e5", "url": "https://github.com/metasfresh/metasfresh/commit/6c3279480da04de230046dfe234c1bdccc4ef6e5", "message": "Update columns order\n\nhttps://github.com/metasfresh/metasfresh/issues/6121", "committedDate": "2020-02-14T11:38:35Z", "type": "commit"}]}