{"pr_number": 1655, "pr_title": "Validation for tableSource", "pr_createdAt": "2020-11-10T14:36:58Z", "pr_url": "https://github.com/yahoo/elide/pull/1655", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYxMjA1Nw==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r520612057", "bodyText": "Adding all fields here, do we need to somehow ensure its a dimension ?", "author": "rishi-aga", "createdAt": "2020-11-10T14:39:16Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -83,11 +85,35 @@\n             String className = cls.getSimpleName();\n             String pkgName = cls.getPackage().getName();\n             map.put(new ModelMapKey(modelName, modelVersion),\n-                            new ModelMapValue(className, prepareImport(pkgName, className)));\n+                    new ModelMapValue(className, prepareImport(pkgName, className), getFieldNames(cls)));\n         });\n \n         return Collections.unmodifiableMap(map);\n     }\n+\n+    private static Set<String> getFieldNames(Class<?> cls) {\n+        Set<String> fieldNames = new HashSet<String>();\n+        getAllFieldNames(cls, fieldNames);\n+        return fieldNames;\n+    }\n+\n+    private static void getAllFieldNames(Class<?> cls, Set<String> fieldNames) {\n+\n+        if (cls == Object.class) {\n+            return;\n+        }\n+\n+        getAllFieldNames(cls.getSuperclass(), fieldNames);\n+\n+        fieldNames.addAll(", "originalCommit": "bf4cc71118d5c15a33b4aba3bde797ba350064fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxOTIzMw==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r520719233", "bodyText": "This is duplicating logic in EntityDictionary/EntityBinding but not correctly.  The more logic we add here, the more I think we need to leverage a private EntityDictionary rather than duplicate the logic.", "author": "aklish", "createdAt": "2020-11-10T16:57:29Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -83,11 +85,35 @@\n             String className = cls.getSimpleName();\n             String pkgName = cls.getPackage().getName();\n             map.put(new ModelMapKey(modelName, modelVersion),\n-                            new ModelMapValue(className, prepareImport(pkgName, className)));\n+                    new ModelMapValue(className, prepareImport(pkgName, className), getFieldNames(cls)));\n         });\n \n         return Collections.unmodifiableMap(map);\n     }\n+\n+    private static Set<String> getFieldNames(Class<?> cls) {\n+        Set<String> fieldNames = new HashSet<String>();\n+        getAllFieldNames(cls, fieldNames);\n+        return fieldNames;\n+    }\n+\n+    private static void getAllFieldNames(Class<?> cls, Set<String> fieldNames) {", "originalCommit": "bf4cc71118d5c15a33b4aba3bde797ba350064fd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0ODMzMg==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522348332", "bodyText": "created private EntityDictionary.", "author": "rishi-aga", "createdAt": "2020-11-12T19:07:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxOTIzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcxOTYzOQ==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r520719639", "bodyText": "Elide \"fields\" can either be methods or attributes.  The logic is a bit complicated and we don't want to duplicate it.", "author": "aklish", "createdAt": "2020-11-10T16:58:02Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -83,11 +85,35 @@\n             String className = cls.getSimpleName();\n             String pkgName = cls.getPackage().getName();\n             map.put(new ModelMapKey(modelName, modelVersion),\n-                            new ModelMapValue(className, prepareImport(pkgName, className)));\n+                    new ModelMapValue(className, prepareImport(pkgName, className), getFieldNames(cls)));\n         });\n \n         return Collections.unmodifiableMap(map);\n     }\n+\n+    private static Set<String> getFieldNames(Class<?> cls) {\n+        Set<String> fieldNames = new HashSet<String>();\n+        getAllFieldNames(cls, fieldNames);\n+        return fieldNames;\n+    }\n+\n+    private static void getAllFieldNames(Class<?> cls, Set<String> fieldNames) {\n+\n+        if (cls == Object.class) {\n+            return;\n+        }\n+\n+        getAllFieldNames(cls.getSuperclass(), fieldNames);\n+\n+        fieldNames.addAll(\n+            Arrays.stream(cls.getDeclaredFields())", "originalCommit": "bf4cc71118d5c15a33b4aba3bde797ba350064fd", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "30122ff1899529b35714a525a995be8dd7628ce2", "url": "https://github.com/yahoo/elide/commit/30122ff1899529b35714a525a995be8dd7628ce2", "message": "Validation for tableSource", "committedDate": "2020-11-12T13:49:36Z", "type": "forcePushed"}, {"oid": "c998aac9286fdea8d029ada15071976989fd9af9", "url": "https://github.com/yahoo/elide/commit/c998aac9286fdea8d029ada15071976989fd9af9", "message": "Review Comments", "committedDate": "2020-11-12T14:52:18Z", "type": "forcePushed"}, {"oid": "6a110a796620ea22fa5a51c916cf10dcf980b172", "url": "https://github.com/yahoo/elide/commit/6a110a796620ea22fa5a51c916cf10dcf980b172", "message": "Review Comments", "committedDate": "2020-11-12T19:04:49Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NTk2NQ==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522345965", "bodyText": "Is there a reason these functions need to be static?", "author": "aklish", "createdAt": "2020-11-12T19:04:17Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/compile/ElideDynamicEntityCompiler.java", "diffHunk": "@@ -271,4 +277,16 @@ public static String getStaticModelClassImport(String modelName, String modelVer\n         ModelMapValue value = STATIC_MODEL_DETAILS.get(new ModelMapKey(modelName, modelVersion));\n         return value != null ? value.getClassImport() : defaultValue;\n     }\n+\n+    /**\n+     * Checks if field exists in referenced static model.\n+     * @param modelName model name.\n+     * @param modelVersion model version.\n+     * @param fieldName field name to check.\n+     * @return true if model has the field defined else false\n+     */\n+    public static boolean staticModelContainsField(String modelName, String modelVersion, String fieldName) {", "originalCommit": "c998aac9286fdea8d029ada15071976989fd9af9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2NTU5Nw==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r524365597", "bodyText": "defined as static so that it can be used for both DynamicConfigValidator and HandlebarsHydrator easily.", "author": "rishi-aga", "createdAt": "2020-11-16T15:44:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NTk2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjM4NQ==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522352385", "bodyText": "I wonder if it would be clearer if some of these methods were moved to ElideTableConfig.", "author": "aklish", "createdAt": "2020-11-12T19:13:02Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -343,16 +337,77 @@ private static void validateConfigForMissingVariables(String config, Map<String,\n     private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n         for (Table table : elideTableConfig.getTables()) {\n             validateSql(table.getSql());\n-            table.getDimensions().forEach(dim -> validateSql(dim.getDefinition()));\n+            table.getDimensions().forEach(dim -> {\n+                validateSql(dim.getDefinition());\n+                validateTableSource(elideTableConfig, dim.getTableSource());\n+            });\n             table.getMeasures().forEach(measure -> validateSql(measure.getDefinition()));\n             table.getJoins().forEach(join -> validateJoin(join, elideTableConfig));\n         }\n+\n         return true;\n     }\n \n+    private static void validateTableSource(ElideTableConfig elideTableConfig, String tableSource) {\n+        if (isNullOrEmpty(tableSource)) {\n+            return; // Nothing to validate\n+        }\n+\n+        String[] split = tableSource.split(\"\\\\.\");\n+        if (split.length != 2) {\n+            throw new IllegalStateException(\"Invalid tableSource: \" + tableSource\n+                            + \". tableSource must be in format: modelName.columnName\");\n+        }\n+        String modelName = split[0];\n+        String fieldName = split[1];\n+\n+        if (!staticModelContainsField(modelName, NO_VERSION, fieldName)\n+                        && !dynamicModelContainsField(elideTableConfig, modelName, fieldName)) {\n+            throw new IllegalStateException(\"Invalid tableSource : \" + tableSource + \" . Either model : \" + modelName\n+                            + \" is undefined or field : \" + fieldName + \" is undefined for this model.\");\n+        }\n+    }\n+\n+    private static boolean dynamicModelContainsField(ElideTableConfig elideTableConfig, String modelName,\n+                    String fieldName) {\n+        if (getNames(elideTableConfig.getTables()).contains(modelName)", "originalCommit": "6a110a796620ea22fa5a51c916cf10dcf980b172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2Mzc4MQ==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r524363781", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-11-16T15:42:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjM4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjY3Ng==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522352676", "bodyText": "We should break these errors out to help the developer.", "author": "aklish", "createdAt": "2020-11-12T19:13:34Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -343,16 +337,77 @@ private static void validateConfigForMissingVariables(String config, Map<String,\n     private static boolean validateTableConfig(ElideTableConfig elideTableConfig) {\n         for (Table table : elideTableConfig.getTables()) {\n             validateSql(table.getSql());\n-            table.getDimensions().forEach(dim -> validateSql(dim.getDefinition()));\n+            table.getDimensions().forEach(dim -> {\n+                validateSql(dim.getDefinition());\n+                validateTableSource(elideTableConfig, dim.getTableSource());\n+            });\n             table.getMeasures().forEach(measure -> validateSql(measure.getDefinition()));\n             table.getJoins().forEach(join -> validateJoin(join, elideTableConfig));\n         }\n+\n         return true;\n     }\n \n+    private static void validateTableSource(ElideTableConfig elideTableConfig, String tableSource) {\n+        if (isNullOrEmpty(tableSource)) {\n+            return; // Nothing to validate\n+        }\n+\n+        String[] split = tableSource.split(\"\\\\.\");\n+        if (split.length != 2) {\n+            throw new IllegalStateException(\"Invalid tableSource: \" + tableSource\n+                            + \". tableSource must be in format: modelName.columnName\");\n+        }\n+        String modelName = split[0];\n+        String fieldName = split[1];\n+\n+        if (!staticModelContainsField(modelName, NO_VERSION, fieldName)\n+                        && !dynamicModelContainsField(elideTableConfig, modelName, fieldName)) {\n+            throw new IllegalStateException(\"Invalid tableSource : \" + tableSource + \" . Either model : \" + modelName\n+                            + \" is undefined or field : \" + fieldName + \" is undefined for this model.\");", "originalCommit": "6a110a796620ea22fa5a51c916cf10dcf980b172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MzU3MQ==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r524363571", "bodyText": "sure.", "author": "rishi-aga", "createdAt": "2020-11-16T15:42:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1MjY3Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1Mjg5MQ==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r522352891", "bodyText": "Seems like another function that could be moved to ElideTableConfig?", "author": "aklish", "createdAt": "2020-11-12T19:14:00Z", "path": "elide-model-config/src/main/java/com/yahoo/elide/contrib/dynamicconfighelpers/validator/DynamicConfigValidator.java", "diffHunk": "@@ -185,21 +180,20 @@ private void flagDimensionsToOverride(Table table, Set<Table> parentTables) {\n         Table current = table;\n \n         while (current != null && current.getExtend() != null && !current.getExtend().equals(\"\")) {\n-            Table parent = getTableByName(current.getExtend().trim());\n+            Table parent = getTableByName(this.elideTableConfig, current.getExtend().trim());\n             parentTables.add(parent);\n             current = parent;\n         }\n         return parentTables;\n     }\n \n-    private Table getTableByName(String tableName) {\n-        Table tableByName = this.elideTableConfig.getTables().stream().filter(\n-                table -> table.getName().equals(tableName)).findFirst().orElse(null);\n-\n-        if (tableByName != null) {\n-            return tableByName;\n-        }\n-        throw new IllegalStateException(\"Table \" + tableName + \" is not defined in Dynamic Config.\");\n+    private static Table getTableByName(ElideTableConfig elideTableConfig, String tableName) {\n+        return elideTableConfig.getTables()", "originalCommit": "6a110a796620ea22fa5a51c916cf10dcf980b172", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM2MzYzOA==", "url": "https://github.com/yahoo/elide/pull/1655#discussion_r524363638", "bodyText": "updated.", "author": "rishi-aga", "createdAt": "2020-11-16T15:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM1Mjg5MQ=="}], "type": "inlineReview"}, {"oid": "f20e59338888d5ab4a20001fcc344fce436d03a6", "url": "https://github.com/yahoo/elide/commit/f20e59338888d5ab4a20001fcc344fce436d03a6", "message": "Validation for tableSource", "committedDate": "2020-11-15T14:28:30Z", "type": "commit"}, {"oid": "39e3559bd00e6900bbb92671a7248649e0e64cda", "url": "https://github.com/yahoo/elide/commit/39e3559bd00e6900bbb92671a7248649e0e64cda", "message": "Review Comments", "committedDate": "2020-11-15T14:28:30Z", "type": "commit"}, {"oid": "8307c08be5930e332f93bd49901c84c1e5072e07", "url": "https://github.com/yahoo/elide/commit/8307c08be5930e332f93bd49901c84c1e5072e07", "message": "Review comments: consolidate methods", "committedDate": "2020-11-16T03:00:25Z", "type": "commit"}, {"oid": "8307c08be5930e332f93bd49901c84c1e5072e07", "url": "https://github.com/yahoo/elide/commit/8307c08be5930e332f93bd49901c84c1e5072e07", "message": "Review comments: consolidate methods", "committedDate": "2020-11-16T03:00:25Z", "type": "forcePushed"}, {"oid": "666968c03d76fec226956612c1d4cd593bf61a1d", "url": "https://github.com/yahoo/elide/commit/666968c03d76fec226956612c1d4cd593bf61a1d", "message": "Checkstyle fixes", "committedDate": "2020-11-16T15:25:19Z", "type": "commit"}, {"oid": "c1fb28de3a7414dc5147008ad049af0300d4c4da", "url": "https://github.com/yahoo/elide/commit/c1fb28de3a7414dc5147008ad049af0300d4c4da", "message": "Minor Changes", "committedDate": "2020-11-16T15:39:07Z", "type": "commit"}, {"oid": "48f127e5674a1bfff3b99192366a7abe8a1cd366", "url": "https://github.com/yahoo/elide/commit/48f127e5674a1bfff3b99192366a7abe8a1cd366", "message": "Update elideTableSchema.json", "committedDate": "2020-11-16T16:54:04Z", "type": "commit"}]}