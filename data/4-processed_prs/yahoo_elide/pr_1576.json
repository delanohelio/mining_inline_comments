{"pr_number": 1576, "pr_title": "Table Exporter:  Initial Version", "pr_createdAt": "2020-10-06T21:32:07Z", "pr_url": "https://github.com/yahoo/elide/pull/1576", "timeline": [{"oid": "6dcdb86ab69de2bda09658997cd9490da3454be1", "url": "https://github.com/yahoo/elide/commit/6dcdb86ab69de2bda09658997cd9490da3454be1", "message": "Table Exporter Initial Version", "committedDate": "2020-10-06T21:30:18Z", "type": "commit"}, {"oid": "e6a9489087d7b7655072418a77d5c001c418e95b", "url": "https://github.com/yahoo/elide/commit/e6a9489087d7b7655072418a77d5c001c418e95b", "message": "Comment", "committedDate": "2020-10-06T21:33:55Z", "type": "commit"}, {"oid": "2382a5fd355a6bc386a978c193d6f5d19775ce90", "url": "https://github.com/yahoo/elide/commit/2382a5fd355a6bc386a978c193d6f5d19775ce90", "message": "Fix Checkstyle", "committedDate": "2020-10-06T21:40:07Z", "type": "commit"}, {"oid": "a96b7d6f85c8b43244b8ce8badb4f3e25cf5d60b", "url": "https://github.com/yahoo/elide/commit/a96b7d6f85c8b43244b8ce8badb4f3e25cf5d60b", "message": "Fix Checkstyle", "committedDate": "2020-10-06T21:40:51Z", "type": "commit"}, {"oid": "46036fd17c672ebf64a49ed0dd27f8ea2e82ef2f", "url": "https://github.com/yahoo/elide/commit/46036fd17c672ebf64a49ed0dd27f8ea2e82ef2f", "message": "Refactor", "committedDate": "2020-10-06T22:06:59Z", "type": "commit"}, {"oid": "46a18b0a2cdee77d3607c23f13bc120cd9336e0a", "url": "https://github.com/yahoo/elide/commit/46a18b0a2cdee77d3607c23f13bc120cd9336e0a", "message": "Refactor", "committedDate": "2020-10-06T22:08:52Z", "type": "commit"}, {"oid": "01bd142543e14cf8e99ebd372492d4479af9fbb0", "url": "https://github.com/yahoo/elide/commit/01bd142543e14cf8e99ebd372492d4479af9fbb0", "message": "Refactor", "committedDate": "2020-10-06T22:10:50Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3ODk0OQ==", "url": "https://github.com/yahoo/elide/pull/1576#discussion_r501078949", "bodyText": "IOExceptions are handled by throwing a TransactionException in Elide.  We should be consistent here.", "author": "aklish", "createdAt": "2020-10-07T14:53:42Z", "path": "elide-async/src/main/java/com/yahoo/elide/async/export/TableExporter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.export;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.PersistentResource;\n+import com.yahoo.elide.core.RequestScope;\n+import com.yahoo.elide.core.exceptions.InvalidValueException;\n+import com.yahoo.elide.graphql.GraphQLRequestScope;\n+import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.security.User;\n+\n+import io.reactivex.Observable;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.UUID;\n+\n+/**\n+ * Class for Table Export functionality.\n+ */\n+public class TableExporter {\n+\n+    private Elide elide;\n+    private String apiVersion;\n+    private User user;\n+    private GraphQLParser graphQLParser;\n+\n+    public TableExporter(Elide elide, String apiVersion, User user) {\n+        this(elide, apiVersion, user, new GraphQLParser(elide, apiVersion));\n+    }\n+\n+    public TableExporter(Elide elide, String apiVersion, User user, GraphQLParser graphQLParser) {\n+        this.elide = elide;\n+        this.apiVersion = apiVersion;\n+        this.user = user;\n+        this.graphQLParser = graphQLParser;\n+    }\n+\n+    /**\n+     * Exports the Data based on AsyncQuery.\n+     * @param query AsyncQuery object.\n+     * @return Observable of PersistentResource.\n+     */\n+    public Observable<PersistentResource> export(AsyncQuery query) {\n+        Observable<PersistentResource> results = Observable.empty();\n+\n+        UUID requestId = UUID.fromString(query.getRequestId());\n+\n+        try (DataStoreTransaction tx = elide.getDataStore().beginTransaction()) {\n+            elide.getTransactionRegistry().addRunningTransaction(requestId, tx);\n+\n+            EntityProjection projection = null;\n+            RequestScope requestScope = null;\n+\n+            if (query.getQueryType().equals(QueryType.GRAPHQL_V1_0)) {\n+                projection = graphQLParser.parse(query);\n+                //TODO - we need to add the baseUrlEndpoint to the queryObject.\n+                //TODO - Can we have projectionInfo as null?\n+                requestScope = new GraphQLRequestScope(\"\", tx, user, apiVersion, elide.getElideSettings(), null,\n+                        requestId);\n+            } else {\n+                //TODO - Add JSON Support\n+                throw new InvalidValueException(\"QueryType not supported\");\n+            }\n+\n+            if (projection != null) {\n+                results = PersistentResource.loadRecords(projection, Collections.emptyList(), requestScope);\n+            }\n+\n+            tx.preCommit();\n+            requestScope.runQueuedPreSecurityTriggers();\n+            requestScope.getPermissionExecutor().executeCommitChecks();\n+\n+            tx.flush(requestScope);\n+\n+            requestScope.runQueuedPreCommitTriggers();\n+\n+            elide.getAuditLogger().commit();\n+            tx.commit(requestScope);\n+\n+            requestScope.runQueuedPostCommitTriggers();\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);", "originalCommit": "01bd142543e14cf8e99ebd372492d4479af9fbb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA4MjEwNg==", "url": "https://github.com/yahoo/elide/pull/1576#discussion_r501082106", "bodyText": "I feel like mocking all of these objects make the tests brittle.  Also, most mocks are likely not global and should be created per test.  I would focus on mocking only the challenging objects (like the data store or something).  Everything else should use real objects.", "author": "aklish", "createdAt": "2020-10-07T14:57:43Z", "path": "elide-async/src/test/java/com/yahoo/elide/async/export/TableExporterTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.async.export;\n+\n+import static com.yahoo.elide.core.EntityDictionary.NO_VERSION;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.reset;\n+import static org.mockito.Mockito.when;\n+\n+import com.yahoo.elide.Elide;\n+import com.yahoo.elide.ElideSettings;\n+import com.yahoo.elide.async.models.AsyncQuery;\n+import com.yahoo.elide.async.models.QueryType;\n+import com.yahoo.elide.audit.AuditLogger;\n+import com.yahoo.elide.core.DataStore;\n+import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.PersistentResource;\n+import com.yahoo.elide.core.TransactionRegistry;\n+import com.yahoo.elide.request.EntityProjection;\n+import com.yahoo.elide.security.User;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import io.reactivex.Observable;\n+\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.UUID;\n+\n+public class TableExporterTest {\n+\n+    private DataStoreTransaction tx = mock(DataStoreTransaction.class);\n+    private Elide elide;\n+    private User user;\n+    private GraphQLParser graphQLParser;\n+    private AsyncQuery asyncQuery;\n+\n+    @BeforeEach\n+    public void beforeTest() {\n+        reset(tx);\n+        elide = mock(Elide.class);\n+        user = mock(User.class);\n+        asyncQuery = mock(AsyncQuery.class);\n+        graphQLParser = mock(GraphQLParser.class);\n+\n+        TransactionRegistry transactionRegistry = mock(TransactionRegistry.class);", "originalCommit": "01bd142543e14cf8e99ebd372492d4479af9fbb0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "33d083872a8f1417f4503d9deb0d724ca0b0f58e", "url": "https://github.com/yahoo/elide/commit/33d083872a8f1417f4503d9deb0d724ca0b0f58e", "message": "Review Comments", "committedDate": "2020-10-07T21:06:41Z", "type": "commit"}, {"oid": "33d083872a8f1417f4503d9deb0d724ca0b0f58e", "url": "https://github.com/yahoo/elide/commit/33d083872a8f1417f4503d9deb0d724ca0b0f58e", "message": "Review Comments", "committedDate": "2020-10-07T21:06:41Z", "type": "forcePushed"}]}