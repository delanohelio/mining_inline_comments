{"pr_number": 1131, "pr_title": "Adds a registry based mechanism for registering Custom GraphQL scalars ", "pr_createdAt": "2020-01-10T12:13:21Z", "pr_url": "https://github.com/yahoo/elide/pull/1131", "timeline": [{"oid": "d0bc3989e51134d4beab7875df808c00f9af5230", "url": "https://github.com/yahoo/elide/commit/d0bc3989e51134d4beab7875df808c00f9af5230", "message": "Added support for OffsetDateTimeScalar scalar and refactored GraphQLConversionUtils implementation to support runtime detection and registration of GraphQl Scalars", "committedDate": "2020-01-09T13:11:45Z", "type": "commit"}, {"oid": "eb0154c600f3c6ec488dabc83e5dde9e9da68ce5", "url": "https://github.com/yahoo/elide/commit/eb0154c600f3c6ec488dabc83e5dde9e9da68ce5", "message": "Added ElideCoercing Interface which has method to allow implementations to return Serde for a given Scalar\nAdded usesSerdeOfType field in ElideScalarType annotation to give user flexibility to specify Type for which Serde is written", "committedDate": "2020-01-10T09:18:40Z", "type": "commit"}, {"oid": "06c3c2a7779553dcb68a2ad2dec8e29d1fc98af4", "url": "https://github.com/yahoo/elide/commit/06c3c2a7779553dcb68a2ad2dec8e29d1fc98af4", "message": "Adding test cases for OffsetDateTime scalar and GraphQLConversionUtils", "committedDate": "2020-01-10T11:47:53Z", "type": "commit"}, {"oid": "7a47a5d38deff2fdec70245511b4506c660c79f1", "url": "https://github.com/yahoo/elide/commit/7a47a5d38deff2fdec70245511b4506c660c79f1", "message": "Applied style check suggestion", "committedDate": "2020-01-10T12:02:13Z", "type": "commit"}, {"oid": "acf24b255699d03e05bcb0ae00dd8788948b35e2", "url": "https://github.com/yahoo/elide/commit/acf24b255699d03e05bcb0ae00dd8788948b35e2", "message": "Applied Codacy suggestion", "committedDate": "2020-01-10T13:14:20Z", "type": "commit"}, {"oid": "4075cb9d11f4c077364836594f6df3c6d0abe828", "url": "https://github.com/yahoo/elide/commit/4075cb9d11f4c077364836594f6df3c6d0abe828", "message": "Update OffsetDateTimeSerde.java\n\nFixing checkstyles.", "committedDate": "2020-01-10T20:02:48Z", "type": "commit"}, {"oid": "9dc2861ad80457770fbe18066fb01d94564a9694", "url": "https://github.com/yahoo/elide/commit/9dc2861ad80457770fbe18066fb01d94564a9694", "message": "Merge branch 'master' into elide-graphq;-scalar", "committedDate": "2020-01-10T21:02:02Z", "type": "commit"}, {"oid": "05def52f25ef4f6a39b5989b22be9319c449bde9", "url": "https://github.com/yahoo/elide/commit/05def52f25ef4f6a39b5989b22be9319c449bde9", "message": "Elide Annotaion now supports subtypes\nElide Annotaion now registers Serde instead of ElideCoercing\nAuto-scan happens on Elide initialization", "committedDate": "2020-01-15T08:19:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4ODU0OQ==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r366988549", "bodyText": "Maybe wrap in an immutable map.", "author": "aklish", "createdAt": "2020-01-15T16:51:21Z", "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/CoerceUtil.java", "diffHunk": "@@ -78,6 +78,10 @@\n         return (Serde<S, T>) SERDES.getOrDefault(targetType, null);\n     }\n \n+    public static Map<Class<?>, Serde<?, ?>> getSerdes() {\n+        return SERDES;", "originalCommit": "05def52f25ef4f6a39b5989b22be9319c449bde9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMjY1Nw==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367322657", "bodyText": "Sure", "author": "murtuza-ranapur", "createdAt": "2020-01-16T09:50:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk4ODU0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5ODUxMg==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r366998512", "bodyText": "I refactored this a bit by:\n\nUsing a different member of ClassScanner (see other comment in this PR).\nLinking the methods together to reduce some duplication between them.\n\n    private void registerCustomSerde() {\n        Set<Class<?>> classes = ClassScanner.getAnnotatedClasses(ElideTypeConverter.class);\n\n        for (Class<?> clazz : classes) {\n            if (!Serde.class.isAssignableFrom(clazz)) {\n                log.warn(\"Skipping Serde registration (not a Serde!): {}\", clazz);\n                continue;\n            }\n            Serde serde;\n            try {\n                serde = (Serde) clazz.newInstance();\n            } catch (InstantiationException | IllegalAccessException e) {\n                String errorMsg = String.format(\"Error while registering custom Serde: %s\", e.getLocalizedMessage());\n                log.error(errorMsg);\n                throw new UnableToAddSerdeException(errorMsg);\n            }\n            ElideTypeConverter converter = clazz.getAnnotation(ElideTypeConverter.class);\n            Class baseType = converter.type();\n            List<Class<?>> allTypes = Arrays.asList(converter.subTypes());\n            allTypes.add(baseType);\n\n            for (Class type : allTypes) {\n                if (!baseType.isAssignableFrom(type)) {\n                    throw new IllegalArgumentException(\"Mention type \" + type\n                            + \" not subtype of \" + baseType);\n                }\n                log.info(\"Registering serde for type : {}\", type);\n                CoerceUtil.register(type, serde);\n                registerCustomSerdeInObjectMapper(type, serde, converter.name());\n            }\n        }\n    }\n    private void registerCustomSerdeInObjectMapper(Class<?> type, Serde serde, String name) {\n        ObjectMapper objectMapper = mapper.getObjectMapper();\n        objectMapper.registerModule(new SimpleModule(name)\n            .addSerializer(type, new JsonSerializer<Object>() {\n                @Override\n                public void serialize(Object obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n                        throws IOException, JsonProcessingException {\n                    jsonGenerator.writeObject(serde.serialize(obj));\n                }\n            }));\n    }", "author": "aklish", "createdAt": "2020-01-15T17:09:55Z", "path": "elide-core/src/main/java/com/yahoo/elide/Elide.java", "diffHunk": "@@ -77,6 +92,69 @@ public Elide(ElideSettings elideSettings) {\n         elideSettings.getSerdes().forEach((targetType, serde) -> {\n             CoerceUtil.register(targetType, serde);\n         });\n+\n+        registerCustomSerde();\n+        registerCustomSerdeInObjectMapper();\n+    }\n+\n+    private void registerCustomSerde() {", "originalCommit": "05def52f25ef4f6a39b5989b22be9319c449bde9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNjIwMQ==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367406201", "bodyText": "Replaced my code with yours, made some minor changes here and there. Thanks! for the lesson on short circuit though :)", "author": "murtuza-ranapur", "createdAt": "2020-01-16T13:06:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk5ODUxMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTI5NQ==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367005295", "bodyText": "This method leaks ClassInfo.  We don't want ClassGraph concepts to leak into core Elide.  I would just use getAnnotatedClasses instead.", "author": "aklish", "createdAt": "2020-01-15T17:23:21Z", "path": "elide-core/src/main/java/com/yahoo/elide/utils/ClassScanner.java", "diffHunk": "@@ -57,6 +58,18 @@\n         }\n     }\n \n+    /**\n+     * Scans all classes accessible from the context class loader which belong to the current class loader.\n+     *\n+     * @param annotation  Annotation to search\n+     * @return The classeInfos\n+     */\n+    static public List<ClassInfo> getAnnotatedClassInfos(Class<? extends Annotation> annotation) {", "originalCommit": "05def52f25ef4f6a39b5989b22be9319c449bde9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDQ0OA==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367324448", "bodyText": "It slipped through. Its not used anywhere. Will simply remove it.", "author": "murtuza-ranapur", "createdAt": "2020-01-16T09:53:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTI5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTc0Nw==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367005747", "bodyText": "I think the correct spelling is converter", "author": "aklish", "createdAt": "2020-01-15T17:24:10Z", "path": "elide-core/src/main/java/com/yahoo/elide/utils/coerce/converters/ElideTypeConvertor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.utils.coerce.converters;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+public @interface ElideTypeConvertor {", "originalCommit": "05def52f25ef4f6a39b5989b22be9319c449bde9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQwNjk2MA==", "url": "https://github.com/yahoo/elide/pull/1131#discussion_r367406960", "bodyText": "Noted, will correct the typo.", "author": "murtuza-ranapur", "createdAt": "2020-01-16T13:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzAwNTc0Nw=="}], "type": "inlineReview"}, {"oid": "414623518082af7c2f02ab1cd515642610b9e8ca", "url": "https://github.com/yahoo/elide/commit/414623518082af7c2f02ab1cd515642610b9e8ca", "message": "Applied PR Review Suggestions\n\n1. Fixed typos\n2. Removed unused method from ClassScanner\n3. Added suggested refactored Serde scanning code\n4. CoerceUtil now returns Immutable Serde map", "committedDate": "2020-01-16T13:21:22Z", "type": "commit"}, {"oid": "fd871a0624f7b056f6e6ae7bd8897d9979110c47", "url": "https://github.com/yahoo/elide/commit/fd871a0624f7b056f6e6ae7bd8897d9979110c47", "message": "Fixing checkstyle (extra space)", "committedDate": "2020-01-16T15:48:31Z", "type": "commit"}]}