{"pr_number": 1679, "pr_title": "Postgres Dialect", "pr_createdAt": "2020-11-20T00:20:30Z", "pr_url": "https://github.com/yahoo/elide/pull/1679", "timeline": [{"oid": "569b08b4cc001e849c0b05de068dc5727c784769", "url": "https://github.com/yahoo/elide/commit/569b08b4cc001e849c0b05de068dc5727c784769", "message": "Initial", "committedDate": "2020-11-20T00:19:04Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI5NTY3OA==", "url": "https://github.com/yahoo/elide/pull/1679#discussion_r527295678", "bodyText": "PrestoDB and PrestoSQL are 2 separate flavors of Presto.", "author": "moizarafat", "createdAt": "2020-11-20T00:21:52Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/dialects/SQLDialectFactory.java", "diffHunk": "@@ -32,14 +34,18 @@ public static SQLDialect getHiveDialect() {\n         return HIVE_DIALECT;\n     }\n \n-    public static SQLDialect getPrestoDialect() {\n+    public static SQLDialect getPrestoDBDialect() {", "originalCommit": "569b08b4cc001e849c0b05de068dc5727c784769", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NzI2Mg==", "url": "https://github.com/yahoo/elide/pull/1679#discussion_r527777262", "bodyText": "Go look at the mysql tests.  In addition to comparing the query lists, we also call testQueryExecution to run the query in the compatibility mode.  We should do that for as many tests as possible here.", "author": "aklish", "createdAt": "2020-11-20T15:42:24Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PostgresExplainQueryTest.java", "diffHunk": "@@ -0,0 +1,396 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\n+/**\n+ * This class tests a PostgreSQL generation of the engine.\n+ * This class only covers known differences/ use cases and will continue to grow as relavent differences are discovered.\n+ *\n+ */\n+public class PostgresExplainQueryTest extends SQLUnitTest {\n+\n+    @BeforeAll\n+    public static void init() {\n+        SQLUnitTest.init(SQLDialectFactory.getPostgresDialect());\n+    }\n+\n+    @Test\n+    public void testExplainWhereDimsOnly() throws Exception {\n+        String expectedQueryStr =\n+                \"SELECT DISTINCT \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \\\"overallRating\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"WHERE \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" IS NOT NULL\";\n+        compareQueryLists(expectedQueryStr, engine.explain(TestQuery.WHERE_DIMS_ONLY.getQuery()));\n+    }\n+\n+    @Test\n+    public void testExplainWhereAnd() throws Exception {\n+        Query query = TestQuery.WHERE_AND.getQuery();\n+        String expectedQueryStr =\n+                \"SELECT MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"highScore\\\") AS \\\"highScore\\\",\"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \\\"overallRating\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"LEFT JOIN \\\"countries\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\" \"\n+                        + \"ON \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"country_id\\\" = \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\".\\\"id\\\" \"\n+                        + \"WHERE (\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" IS NOT NULL AND \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\".\\\"iso_code\\\" IN (:XXX)) \"\n+                        + \" GROUP BY \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\"\\n\";\n+\n+        compareQueryLists(expectedQueryStr, engine.explain(query));", "originalCommit": "569b08b4cc001e849c0b05de068dc5727c784769", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzc3NzUwNg==", "url": "https://github.com/yahoo/elide/pull/1679#discussion_r527777506", "bodyText": "This isn't Presto.", "author": "aklish", "createdAt": "2020-11-20T15:42:43Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/PostgresExplainQueryTest.java", "diffHunk": "@@ -0,0 +1,396 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+package com.yahoo.elide.datastores.aggregation.queryengines.sql;\n+\n+import com.yahoo.elide.datastores.aggregation.framework.SQLUnitTest;\n+import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.dialects.SQLDialectFactory;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+\n+/**\n+ * This class tests a PostgreSQL generation of the engine.\n+ * This class only covers known differences/ use cases and will continue to grow as relavent differences are discovered.\n+ *\n+ */\n+public class PostgresExplainQueryTest extends SQLUnitTest {\n+\n+    @BeforeAll\n+    public static void init() {\n+        SQLUnitTest.init(SQLDialectFactory.getPostgresDialect());\n+    }\n+\n+    @Test\n+    public void testExplainWhereDimsOnly() throws Exception {\n+        String expectedQueryStr =\n+                \"SELECT DISTINCT \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \\\"overallRating\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"WHERE \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" IS NOT NULL\";\n+        compareQueryLists(expectedQueryStr, engine.explain(TestQuery.WHERE_DIMS_ONLY.getQuery()));\n+    }\n+\n+    @Test\n+    public void testExplainWhereAnd() throws Exception {\n+        Query query = TestQuery.WHERE_AND.getQuery();\n+        String expectedQueryStr =\n+                \"SELECT MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"highScore\\\") AS \\\"highScore\\\",\"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \\\"overallRating\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"LEFT JOIN \\\"countries\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\" \"\n+                        + \"ON \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"country_id\\\" = \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\".\\\"id\\\" \"\n+                        + \"WHERE (\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" IS NOT NULL AND \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\".\\\"iso_code\\\" IN (:XXX)) \"\n+                        + \" GROUP BY \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\"\\n\";\n+\n+        compareQueryLists(expectedQueryStr, engine.explain(query));\n+    }\n+\n+    @Test\n+    public void textExplainWhereOr() throws Exception {\n+        Query query = TestQuery.WHERE_OR.getQuery();\n+        String expectedQueryStr =\n+                \"SELECT MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"highScore\\\") AS \\\"highScore\\\",\"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \\\"overallRating\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"LEFT JOIN \\\"countries\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\" \"\n+                        + \"ON \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"country_id\\\" = \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\".\\\"id\\\" \"\n+                        + \"WHERE (\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" IS NOT NULL OR \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats_country\\\".\\\"iso_code\\\" IN (:XXX)) \"\n+                        + \" GROUP BY \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\"\\n\";\n+\n+        compareQueryLists(expectedQueryStr, engine.explain(query));\n+    }\n+\n+    @Test\n+    public void testExplainHavingMetricsOnly() throws Exception {\n+        Query query = TestQuery.HAVING_METRICS_ONLY.getQuery();\n+        String expectedQueryStr =\n+                \"SELECT MIN(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"lowScore\\\") AS \\\"lowScore\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"HAVING MIN(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"lowScore\\\") > :XXX\";\n+        compareQueryLists(expectedQueryStr, engine.explain(query));\n+    }\n+\n+    @Test\n+    public void testExplainHavingDimsOnly() throws Exception {\n+        String expectedQueryStr =\n+                \"SELECT DISTINCT \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \\\"overallRating\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"HAVING \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" IS NOT NULL\";\n+        compareQueryLists(expectedQueryStr, engine.explain(TestQuery.HAVING_DIMS_ONLY.getQuery()));\n+    }\n+\n+    @Test\n+    public void testExplainHavingMetricsAndDims() throws Exception {\n+        Query query = TestQuery.HAVING_METRICS_AND_DIMS.getQuery();\n+        String expectedQueryStr =\n+                \"SELECT MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"highScore\\\") AS \\\"highScore\\\",\"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \\\"overallRating\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"GROUP BY \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" \"\n+                        + \"HAVING (\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" IS NOT NULL \"\n+                        + \"AND MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"highScore\\\") > :XXX)\";\n+        compareQueryLists(expectedQueryStr, engine.explain(query));\n+    }\n+\n+    @Test\n+    public void testExplainHavingMetricsOrDims() throws Exception {\n+        Query query = TestQuery.HAVING_METRICS_OR_DIMS.getQuery();\n+        String expectedQueryStr =\n+                \"SELECT MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"highScore\\\") AS \\\"highScore\\\",\"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \\\"overallRating\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"GROUP BY \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" \"\n+                        + \"HAVING (\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" IS NOT NULL \"\n+                        + \"OR MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"highScore\\\") > :XXX)\";\n+        compareQueryLists(expectedQueryStr, engine.explain(query));\n+    }\n+\n+    /*\n+     * This test validates that generateCountDistinctClause() is called in the PrestoDialect (same as default/H2).\n+     */\n+    @Test\n+    public void testExplainPagination() {\n+        String expectedQueryStr1 =\n+                \"SELECT COUNT(DISTINCT(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\", \"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"recordedDate\\\")) FROM \"\n+                        + \"\\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\"\";\n+        String expectedQueryStr2 =\n+                \"SELECT MIN(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"lowScore\\\") AS \"\n+                        + \"\\\"lowScore\\\",\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \"\n+                        + \"\\\"overallRating\\\",PARSEDATETIME(FORMATDATETIME(\"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"recordedDate\\\", 'yyyy-MM-dd'), \"\n+                        + \"'yyyy-MM-dd') AS \\\"recordedDate\\\" FROM \\\"playerStats\\\" AS \"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\"   \"\n+                        + \"GROUP BY \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\", \"\n+                        + \"PARSEDATETIME(FORMATDATETIME(\"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"recordedDate\\\", 'yyyy-MM-dd'), \"\n+                        + \"'yyyy-MM-dd') LIMIT 1 OFFSET 0\";\n+        List<String> expectedQueryList = new ArrayList<String>();\n+        expectedQueryList.add(expectedQueryStr1);\n+        expectedQueryList.add(expectedQueryStr2);\n+        compareQueryLists(expectedQueryList, engine.explain(TestQuery.PAGINATION_TOTAL.getQuery()));\n+    }\n+\n+    @Test\n+    public void testExplainSortingAscending() {\n+        String expectedQueryStr =\n+                \"SELECT MIN(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"lowScore\\\") AS \\\"lowScore\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\"   \"\n+                        + \"ORDER BY \\\"lowScore\\\" ASC\";\n+        List<String> expectedQueryList = Arrays.asList(expectedQueryStr);\n+        compareQueryLists(expectedQueryList, engine.explain(TestQuery.SORT_METRIC_ASC.getQuery()));\n+    }\n+\n+    @Test\n+    public void testExplainSortingDecending() {\n+        String expectedQueryStr =\n+                \"SELECT MIN(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"lowScore\\\") AS \\\"lowScore\\\" \"\n+                        + \"FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\"   \"\n+                        + \"ORDER BY \\\"lowScore\\\" DESC\";\n+        List<String> expectedQueryList = Arrays.asList(expectedQueryStr);\n+        compareQueryLists(expectedQueryList, engine.explain(TestQuery.SORT_METRIC_DESC.getQuery()));\n+    }\n+\n+\n+    @Test\n+    public void testExplainSortingByDimensionDesc() {\n+        String expectedQueryStr =\n+                \"SELECT DISTINCT \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \"\n+                        + \"\\\"overallRating\\\" FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"ORDER BY \\\"overallRating\\\" DESC\";\n+        List<String> expectedQueryList = Arrays.asList(expectedQueryStr);\n+        compareQueryLists(expectedQueryList, engine.explain(TestQuery.SORT_DIM_DESC.getQuery()));\n+    }\n+\n+    @Test\n+    public void testExplainSortingByMetricAndDimension() {\n+        String expectedQueryStr =\n+                \"SELECT MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"highScore\\\") \"\n+                        + \"AS \\\"highScore\\\",\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" AS \"\n+                        + \"\\\"overallRating\\\" FROM \\\"playerStats\\\" AS \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\" \"\n+                        + \"GROUP BY \\\"com_yahoo_elide_datastores_aggregation_example_PlayerStats\\\".\\\"overallRating\\\" \"\n+                        + \"ORDER BY \\\"highScore\\\" DESC,\\\"overallRating\\\" DESC\";\n+        List<String> expectedQueryList = Arrays.asList(expectedQueryStr);\n+        compareQueryLists(expectedQueryList, engine.explain(TestQuery.SORT_METRIC_AND_DIM_DESC.getQuery()));\n+    }\n+\n+\n+    @Test\n+    public void testExplainSelectFromSubquery() {\n+        String expectedQueryStr =\n+                \"SELECT MAX(\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStatsView\\\".\\\"highScore\\\") AS \"\n+                        + \"\\\"highScore\\\" FROM (SELECT stats.highScore, stats.player_id, c.name as countryName FROM \"\n+                        + \"playerStats AS stats LEFT JOIN countries AS c ON stats.country_id = c.id \"\n+                        + \"WHERE stats.overallRating = 'Great') AS \"\n+                        + \"\\\"com_yahoo_elide_datastores_aggregation_example_PlayerStatsView\\\"\";\n+        List<String> expectedQueryList = Arrays.asList(expectedQueryStr);\n+        compareQueryLists(expectedQueryList, engine.explain(TestQuery.SUBQUERY.getQuery()));\n+    }\n+\n+    /* TODO: Presto doesn't support this. To make this work, we'd need to push the ORDER BY field into the SELECT", "originalCommit": "569b08b4cc001e849c0b05de068dc5727c784769", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "0da32cb0f94765321b19e803d2ef2dae06681875", "url": "https://github.com/yahoo/elide/commit/0da32cb0f94765321b19e803d2ef2dae06681875", "message": "Review Comments", "committedDate": "2020-11-20T18:15:29Z", "type": "commit"}]}